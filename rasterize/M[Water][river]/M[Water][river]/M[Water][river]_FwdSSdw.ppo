#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_river_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_river_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_river_snp_0_Texture2D_3;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1018;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _195 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _196 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _197 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _203 = inversesqrt(dot(vec3(_195, _196, _197), vec3(_195, _196, _197)));
    float _204 = _203 * _195;
    float _205 = _203 * _196;
    float _206 = _203 * _197;
    float _210 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _211 = _210 * NORMAL.x;
    float _212 = _210 * NORMAL.y;
    float _213 = _210 * NORMAL.z;
    float _217 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _225;
    float _226;
    float _227;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _225 = (-0.0) - _211;
        _226 = (-0.0) - _212;
        _227 = (-0.0) - _213;
    }
    else
    {
        _225 = _211;
        _226 = _212;
        _227 = _213;
    }
    float _243 = cbMtdParam._m0[10u].x * cbPerFrame._m0[22u].x;
    float _254 = (cbMtdParam._m0[12u].w * _243) + TEXCOORD;
    float _255 = (cbMtdParam._m0[13u].x * _243) + TEXCOORD_1;
    vec4 _268 = texture(sampler2D(M_Water_river_snp_0_Texture2D_3, SS_WrapLinear), vec2((_254 * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (_255 * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _275 = (cbPerFrame._m0[22u].x * 2.0) * (cbMtdParam._m0[11u].x * cbMtdParam._m0[10u].x);
    float _281 = (_268.y * 0.5) + (-0.25);
    float _282 = (-0.0) - ((_268.x * 0.5) + (-0.25));
    float _283 = fract(_275);
    float _285 = fract(_275 + 0.5);
    float _297 = abs((_283 * 2.0) + (-1.0));
    vec4 _306 = texture(sampler2D(M_Water_river_snp_0_Texture2D_3, SS_WrapLinear), vec2((((_283 * _282) + _254) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((_281 * _283) + _255) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _308 = _306.z;
    vec4 _334 = texture(sampler2D(M_Water_river_snp_0_Texture2D_0, SS_BumpMap), vec2((((cbMtdParam._m0[12u].y * _243) + TEXCOORD) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((cbMtdParam._m0[12u].z * _243) + TEXCOORD_1) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _338 = _334.z;
    vec4 _355 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _357 = _355.x;
    bool _364 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _380 = ((_364 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _357)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _357))) - POSITION_1.w) * 0.833333313465118408203125;
    float _3615 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _389 = ((((texture(sampler2D(M_Water_river_snp_0_Texture2D_3, SS_WrapLinear), vec2((((_285 * _282) + _254) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((_281 * _285) + _255) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w)).z - _308) * _297) + _308) * (1.0 - TEXCOORD_3.y)) * (((TEXCOORD_3.x + 1.0) + (exp2(log2(((0.502016007900238037109375 - _338) * TEXCOORD_3.y) + _338) * cbMtdParam._m0[10u].z) * cbMtdParam._m0[10u].w)) - (isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0))));
    float _390 = _389 + cbMtdParam._m0[9u].x;
    float _391 = _389 + cbMtdParam._m0[9u].y;
    float _392 = _389 + cbMtdParam._m0[9u].z;
    vec4 _414 = texture(sampler2D(M_Water_river_snp_0_Texture2D_1, SS_BumpMap), vec2((((cbMtdParam._m0[11u].w * _243) + TEXCOORD) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[12u].x * _243) + TEXCOORD_1) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _418 = _414.x * 2.0;
    float _419 = _414.y * 2.0;
    float _420 = _418 + (-1.0);
    float _421 = _419 + (-1.0);
    float _422 = dot(vec2(_420, _421), vec2(_420, _421));
    float _3626 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _427 = sqrt(1.0 - (isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0))));
    vec4 _438 = texture(sampler2D(M_Water_river_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _254) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _255) + cbTextureTilingScale._m0[2u].w));
    float _445 = (_438.y * 0.5) + (-0.25);
    float _446 = (-0.0) - ((_438.x * 0.5) + (-0.25));
    vec4 _469 = texture(sampler2D(M_Water_river_snp_0_Texture2D_0, SS_BumpMap), vec2((((_283 * _446) + _254) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_445 * _283) + _255) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _471 = _469.x;
    float _472 = _469.y;
    vec4 _473 = texture(sampler2D(M_Water_river_snp_0_Texture2D_0, SS_BumpMap), vec2((((_285 * _446) + _254) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_445 * _285) + _255) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _483 = (((_473.x - _471) * _297) + _471) + _334.x;
    float _492 = (_418 + (-1.60000002384185791015625)) + ((_483 + ((1.00403201580047607421875 - _483) * TEXCOORD_3.y)) * 0.60000002384185791015625);
    float _493 = (((_473.y - _472) * _297) + _472) + _334.y;
    float _499 = (_419 + (-1.60000002384185791015625)) + ((_493 + ((1.00403201580047607421875 - _493) * TEXCOORD_3.y)) * 0.60000002384185791015625);
    float _502 = fma(_427, _225, fma(_499, _217 * TANGENT.x, _492 * _204));
    float _505 = fma(_427, _226, fma(_499, _217 * TANGENT.y, _492 * _205));
    float _508 = fma(_427, _227, fma(_499, _217 * TANGENT.z, _492 * _206));
    float _512 = inversesqrt(dot(vec3(_502, _505, _508), vec3(_502, _505, _508)));
    float _513 = _512 * _502;
    float _514 = _512 * _505;
    float _515 = _512 * _508;
    float _3637 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _3648 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _3659 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _523 = _364 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _564 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _574 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _564);
    float _575 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _564);
    float _576 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _564);
    float _580 = inversesqrt(dot(vec3(_574, _575, _576), vec3(_574, _575, _576)));
    float _581 = _574 * _580;
    float _582 = _575 * _580;
    float _583 = _576 * _580;
    float _588 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _589 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _610 = fma(_515, cbSceneParam._m0[5u].z, fma(_514, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _513));
    float _613 = fma(_515, cbSceneParam._m0[6u].z, fma(_514, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _513));
    float _616 = fma(_515, cbSceneParam._m0[7u].z, fma(_514, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _513));
    uint _629 = uint(roundEven(NORMAL.w)) * 13u;
    uint _631 = (_629 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _637 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0)))) * cbInstanceData._m0[_631].x;
    float _638 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0)))) * cbInstanceData._m0[_631].y;
    float _639 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0)))) * cbInstanceData._m0[_631].z;
    float _3670 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _640 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
    float _3681 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _641 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
    float _3692 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _642 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
    vec4 _651 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _588, cbSceneParam._m0[86u].y * _589));
    float _654 = _651.x * TEXCOORD_3.w;
    float _655 = dot(vec3(_513, _514, _515), vec3(_581, _582, _583));
    float _658 = _655 * 2.0;
    float _662 = (_658 * _513) - _581;
    float _663 = (_658 * _514) - _582;
    float _664 = (_658 * _515) - _583;
    float _668 = abs(dot(vec3(_581, _582, _583), vec3(_513, _514, _515)));
    float _3703 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _669 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
    float _682 = exp2(log2(1.0 - (_669 * 0.999000012874603271484375)) * 5.0);
    float _708 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _712 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _716 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1017;
    float _1019;
    float _1020;
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _743 = fma(_716, cbModelParam._m0[26u].z, fma(_712, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _708));
        float _747 = fma(_716, cbModelParam._m0[27u].z, fma(_712, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _708));
        float _751 = fma(_716, cbModelParam._m0[28u].z, fma(_712, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _708));
        float _775 = _708 + _513;
        float _776 = _712 + _514;
        float _777 = _716 + _515;
        float _787 = fma(_777, cbModelParam._m0[26u].z, fma(_776, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _775)) - _743;
        float _788 = fma(_777, cbModelParam._m0[27u].z, fma(_776, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _775)) - _747;
        float _789 = fma(_777, cbModelParam._m0[28u].z, fma(_776, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _775)) - _751;
        float _793 = inversesqrt(dot(vec3(_787, _788, _789), vec3(_787, _788, _789)));
        float _806 = ((_793 * _787) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_743 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _807 = ((_793 * _788) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_747 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _808 = ((_793 * _789) / cbModelParam._m0[34u].z) + ((((((_751 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _811 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_806, _807, _808), 0.0);
        vec4 _818 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_806, _807, _808), 0.0);
        vec4 _825 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_806, _807, _808), 0.0);
        vec4 _832 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_806, _807, _808), 0.0);
        float _845 = exp2((_811.w + (-0.5)) * 20.0) * 2.0;
        float _846 = _845 * (_811.x + (-0.5));
        float _847 = _845 * (_811.y + (-0.5));
        float _848 = _845 * (_811.z + (-0.5));
        float _855 = exp2((_818.w + (-0.5)) * 20.0) * 2.0;
        float _856 = _855 * (_818.x + (-0.5));
        float _857 = _855 * (_818.y + (-0.5));
        float _858 = _855 * (_818.z + (-0.5));
        float _865 = exp2((_825.w + (-0.5)) * 20.0) * 2.0;
        float _866 = _865 * (_825.x + (-0.5));
        float _867 = _865 * (_825.y + (-0.5));
        float _868 = _865 * (_825.z + (-0.5));
        float _875 = exp2((_832.w + (-0.5)) * 20.0) * 2.0;
        float _876 = _875 * (_832.x + (-0.5));
        float _877 = _875 * (_832.y + (-0.5));
        float _878 = _875 * (_832.z + (-0.5));
        float _879 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _880 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _881 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _882 = _846 * 0.5;
        float _883 = _856 * 0.5;
        float _884 = _866 * 0.5;
        float _885 = dot(vec3(_882, _883, _884), vec3(_882, _883, _884));
        float _890 = (_885 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_885);
        float _899 = (dot(vec3(_513, _514, _515), vec3(_890 * _882, _890 * _883, _890 * _884)) + 1.0) * 0.5;
        float _3729 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _909 = sqrt(((_883 * _883) + (_882 * _882)) + (_884 * _884)) / (_879 + 9.9999997473787516355514526367188e-06);
        float _3740 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _910 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _911 = _910 * 2.0;
        float _915 = (1.0 - _910) / (_910 + 1.0);
        float _3751 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _916 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
        float _925 = ((((1.0 - _916) * (_911 + 2.0)) * exp2(log2(isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))) * (_911 + 1.0))) + _916) * _879;
        float _926 = _847 * 0.5;
        float _927 = _857 * 0.5;
        float _928 = _867 * 0.5;
        float _929 = dot(vec3(_926, _927, _928), vec3(_926, _927, _928));
        float _934 = (_929 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_929);
        float _942 = (dot(vec3(_513, _514, _515), vec3(_934 * _926, _934 * _927, _934 * _928)) + 1.0) * 0.5;
        float _3762 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _951 = sqrt(((_927 * _927) + (_926 * _926)) + (_928 * _928)) / (_880 + 9.9999997473787516355514526367188e-06);
        float _3773 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _952 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _953 = _952 * 2.0;
        float _957 = (1.0 - _952) / (_952 + 1.0);
        float _3784 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _958 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
        float _967 = ((((1.0 - _958) * (_953 + 2.0)) * exp2(log2(isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0))) * (_953 + 1.0))) + _958) * _880;
        float _968 = _848 * 0.5;
        float _969 = _858 * 0.5;
        float _970 = _868 * 0.5;
        float _971 = dot(vec3(_968, _969, _970), vec3(_968, _969, _970));
        float _976 = (_971 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_971);
        float _984 = (dot(vec3(_513, _514, _515), vec3(_976 * _968, _976 * _969, _976 * _970)) + 1.0) * 0.5;
        float _3795 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _993 = sqrt(((_969 * _969) + (_968 * _968)) + (_970 * _970)) / (_881 + 9.9999997473787516355514526367188e-06);
        float _3806 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _994 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _995 = _994 * 2.0;
        float _999 = (1.0 - _994) / (_994 + 1.0);
        float _3817 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1000 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
        float _1009 = ((((1.0 - _1000) * (_995 + 2.0)) * exp2(log2(isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) * (_995 + 1.0))) + _1000) * _881;
        _1017 = _848;
        _1019 = _847;
        _1020 = _846;
        _1021 = _858;
        _1022 = _857;
        _1023 = _856;
        _1024 = _868;
        _1025 = _867;
        _1026 = _866;
        _1027 = _881;
        _1028 = _880;
        _1029 = _879;
        _1030 = cbModelParam._m0[36u].z * (isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0)));
        _1031 = cbModelParam._m0[36u].z * (isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0)));
        _1032 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0)));
    }
    else
    {
        _1017 = _1018;
        _1019 = _1018;
        _1020 = _1018;
        _1021 = _1018;
        _1022 = _1018;
        _1023 = _1018;
        _1024 = _1018;
        _1025 = _1018;
        _1026 = _1018;
        _1027 = _1018;
        _1028 = _1018;
        _1029 = _1018;
        _1030 = 0.0;
        _1031 = 0.0;
        _1032 = 0.0;
    }
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1058 = fma(_716, cbModelParam._m0[30u].z, fma(_712, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _708));
        float _1062 = fma(_716, cbModelParam._m0[31u].z, fma(_712, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _708));
        float _1066 = fma(_716, cbModelParam._m0[32u].z, fma(_712, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _708));
        float _1089 = _708 + _513;
        float _1090 = _712 + _514;
        float _1091 = _716 + _515;
        float _1101 = fma(_1091, cbModelParam._m0[30u].z, fma(_1090, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1089)) - _1058;
        float _1102 = fma(_1091, cbModelParam._m0[31u].z, fma(_1090, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1089)) - _1062;
        float _1103 = fma(_1091, cbModelParam._m0[32u].z, fma(_1090, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1089)) - _1066;
        float _1107 = inversesqrt(dot(vec3(_1101, _1102, _1103), vec3(_1101, _1102, _1103)));
        float _1120 = ((_1107 * _1101) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1058 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1121 = ((_1107 * _1102) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1062 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1122 = ((_1107 * _1103) / cbModelParam._m0[35u].z) + ((((((_1066 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1124 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1120, _1121, _1122), 0.0);
        vec4 _1131 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1120, _1121, _1122), 0.0);
        vec4 _1138 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1120, _1121, _1122), 0.0);
        vec4 _1145 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1120, _1121, _1122), 0.0);
        float _1157 = exp2((_1124.w + (-0.5)) * 20.0) * 2.0;
        float _1158 = _1157 * (_1124.x + (-0.5));
        float _1159 = _1157 * (_1124.y + (-0.5));
        float _1160 = _1157 * (_1124.z + (-0.5));
        float _1167 = exp2((_1131.w + (-0.5)) * 20.0) * 2.0;
        float _1168 = _1167 * (_1131.x + (-0.5));
        float _1169 = _1167 * (_1131.y + (-0.5));
        float _1170 = _1167 * (_1131.z + (-0.5));
        float _1177 = exp2((_1138.w + (-0.5)) * 20.0) * 2.0;
        float _1178 = _1177 * (_1138.x + (-0.5));
        float _1179 = _1177 * (_1138.y + (-0.5));
        float _1180 = _1177 * (_1138.z + (-0.5));
        float _1187 = exp2((_1145.w + (-0.5)) * 20.0) * 2.0;
        float _1188 = _1187 * (_1145.x + (-0.5));
        float _1189 = _1187 * (_1145.y + (-0.5));
        float _1190 = _1187 * (_1145.z + (-0.5));
        float _1191 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1192 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1193 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1194 = _1158 * 0.5;
        float _1195 = _1168 * 0.5;
        float _1196 = _1178 * 0.5;
        float _1197 = dot(vec3(_1194, _1195, _1196), vec3(_1194, _1195, _1196));
        float _1202 = (_1197 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1197);
        float _1210 = (dot(vec3(_513, _514, _515), vec3(_1202 * _1194, _1202 * _1195, _1202 * _1196)) + 1.0) * 0.5;
        float _3858 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1219 = sqrt(((_1195 * _1195) + (_1194 * _1194)) + (_1196 * _1196)) / (_1191 + 9.9999997473787516355514526367188e-06);
        float _3869 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
        float _1221 = _1220 * 2.0;
        float _1225 = (1.0 - _1220) / (_1220 + 1.0);
        float _3880 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
        float _1235 = ((((1.0 - _1226) * (_1221 + 2.0)) * exp2(log2(isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0))) * (_1221 + 1.0))) + _1226) * _1191;
        float _1236 = _1159 * 0.5;
        float _1237 = _1169 * 0.5;
        float _1238 = _1179 * 0.5;
        float _1239 = dot(vec3(_1236, _1237, _1238), vec3(_1236, _1237, _1238));
        float _1244 = (_1239 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1239);
        float _1252 = (dot(vec3(_513, _514, _515), vec3(_1244 * _1236, _1244 * _1237, _1244 * _1238)) + 1.0) * 0.5;
        float _3891 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1261 = sqrt(((_1237 * _1237) + (_1236 * _1236)) + (_1238 * _1238)) / (_1192 + 9.9999997473787516355514526367188e-06);
        float _3902 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _1263 = _1262 * 2.0;
        float _1267 = (1.0 - _1262) / (_1262 + 1.0);
        float _3913 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _1277 = ((((1.0 - _1268) * (_1263 + 2.0)) * exp2(log2(isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0))) * (_1263 + 1.0))) + _1268) * _1192;
        float _1278 = _1160 * 0.5;
        float _1279 = _1170 * 0.5;
        float _1280 = _1180 * 0.5;
        float _1281 = dot(vec3(_1278, _1279, _1280), vec3(_1278, _1279, _1280));
        float _1286 = (_1281 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1281);
        float _1294 = (dot(vec3(_513, _514, _515), vec3(_1286 * _1278, _1286 * _1279, _1286 * _1280)) + 1.0) * 0.5;
        float _3924 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1303 = sqrt(((_1279 * _1279) + (_1278 * _1278)) + (_1280 * _1280)) / (_1193 + 9.9999997473787516355514526367188e-06);
        float _3935 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1304 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1305 = _1304 * 2.0;
        float _1309 = (1.0 - _1304) / (_1304 + 1.0);
        float _3946 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _1319 = ((((1.0 - _1310) * (_1305 + 2.0)) * exp2(log2(isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))) * (_1305 + 1.0))) + _1310) * _1193;
        _1327 = _1160;
        _1328 = _1159;
        _1329 = _1158;
        _1330 = _1170;
        _1331 = _1169;
        _1332 = _1168;
        _1333 = _1180;
        _1334 = _1179;
        _1335 = _1178;
        _1336 = _1193;
        _1337 = _1192;
        _1338 = _1191;
        _1339 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0)));
        _1340 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0)));
        _1341 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0)));
    }
    else
    {
        _1327 = _1018;
        _1328 = _1018;
        _1329 = _1018;
        _1330 = _1018;
        _1331 = _1018;
        _1332 = _1018;
        _1333 = _1018;
        _1334 = _1018;
        _1335 = _1018;
        _1336 = _1018;
        _1337 = _1018;
        _1338 = _1018;
        _1339 = 0.0;
        _1340 = 0.0;
        _1341 = 0.0;
    }
    float _1351 = (cbModelParam._m0[1u].x * (_1339 - _1030)) + _1030;
    float _1352 = (cbModelParam._m0[1u].x * (_1340 - _1031)) + _1031;
    float _1353 = (cbModelParam._m0[1u].x * (_1341 - _1032)) + _1032;
    float _1374 = fma(_1353, cbSceneParam._m0[89u].z, fma(_1352, cbSceneParam._m0[89u].y, _1351 * cbSceneParam._m0[89u].x));
    float _1377 = fma(_1353, cbSceneParam._m0[90u].z, fma(_1352, cbSceneParam._m0[90u].y, _1351 * cbSceneParam._m0[90u].x));
    float _1380 = fma(_1353, cbSceneParam._m0[91u].z, fma(_1352, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1351));
    float _1395 = _662 * 0.5;
    float _1396 = _663 * 0.5;
    float _1397 = _664 * 0.5;
    float _1398 = dot(vec4(_1395, _1396, _1397, 1.0), vec4(_1329, _1332, _1335, _1338));
    float _1401 = dot(vec4(_1395, _1396, _1397, 1.0), vec4(_1328, _1331, _1334, _1337));
    float _1404 = dot(vec4(_1395, _1396, _1397, 1.0), vec4(_1327, _1330, _1333, _1336));
    float _1438;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1411 = dot(vec4(_1395, _1396, _1397, 1.0), vec4(_1017, _1021, _1024, _1027));
        float _1415 = dot(vec4(_1395, _1396, _1397, 1.0), vec4(_1019, _1022, _1025, _1028));
        float _1419 = dot(vec4(_1395, _1396, _1397, 1.0), vec4(_1020, _1023, _1026, _1029));
        float _1426 = dot(vec4(cbModelParam._m0[39u]), vec4(_1395, _1396, _1397, 1.0));
        _1438 = dot(vec3(isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0)), isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0)), isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1426) ? 0.0 : (isnan(0.0) ? _1426 : max(0.0, _1426))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1438 = 1.0;
    }
    float _1449;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1440 = dot(vec4(cbModelParam._m0[40u]), vec4(_1395, _1396, _1397, 1.0));
        _1449 = dot(vec3(isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0)), isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0)), isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1440) ? 0.0 : (isnan(0.0) ? _1440 : max(0.0, _1440))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1449 = 1.0;
    }
    float _1453 = (_1449 * cbModelParam._m0[1u].x) + (_1438 * (1.0 - cbModelParam._m0[1u].x));
    float _1462 = isnan(0.0) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? 0.0 : min(cbModelParam._m0[25u].z, 0.0));
    float _1543;
    float _1545;
    float _1547;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1510 = fma(_716, cbModelParam._m0[13u].z, fma(_712, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _708)) + cbModelParam._m0[13u].w;
        float _1514 = fma(_716, cbModelParam._m0[14u].z, fma(_712, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _708)) + cbModelParam._m0[14u].w;
        float _1518 = fma(_716, cbModelParam._m0[15u].z, fma(_712, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _708)) + cbModelParam._m0[15u].w;
        float _1521 = fma(_664, cbModelParam._m0[13u].z, fma(_663, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _662));
        float _1524 = fma(_664, cbModelParam._m0[14u].z, fma(_663, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _662));
        float _1527 = fma(_664, cbModelParam._m0[15u].z, fma(_663, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _662));
        float _1553;
        if (_1521 > 0.0)
        {
            _1553 = abs((1.0 - _1510) / _1521);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1521 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1510 + 1.0) / _1521);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1553 = frontier_phi_16_14_ladder;
        }
        float _1827;
        if (_1524 > 0.0)
        {
            _1827 = abs((1.0 - _1514) / _1524);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1524 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1514 + 1.0) / _1524);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1827 = frontier_phi_25_21_ladder;
        }
        float _2071;
        if (_1527 > 0.0)
        {
            _2071 = abs((1.0 - _1518) / _1527);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1527 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1518 + 1.0) / _1527);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2071 = frontier_phi_37_32_ladder;
        }
        float _2073 = isnan(_1827) ? _1553 : (isnan(_1553) ? _1827 : min(_1553, _1827));
        float _2074 = isnan(_2071) ? _2073 : (isnan(_2073) ? _2071 : min(_2073, _2071));
        float _2078 = (_2074 * _1521) + _1510;
        float _2079 = (_2074 * _1524) + _1514;
        float _2080 = (_2074 * _1527) + _1518;
        float _2081 = _2074 * 9.9999997473787516355514526367188e-05;
        float _2083 = (-1.0) - _2081;
        float _2085 = _2081 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2080 > _2085) || ((_2080 < _2083) || ((_2079 > _2085) || ((_2079 < _2083) || ((_2078 < _2083) || (_2078 > _2085))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2203 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2080, cbModelParam._m0[9u].z, fma(_2079, cbModelParam._m0[9u].y, _2078 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2080, cbModelParam._m0[10u].z, fma(_2079, cbModelParam._m0[10u].y, _2078 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2080, cbModelParam._m0[11u].z, fma(_2079, cbModelParam._m0[11u].y, _2078 * cbModelParam._m0[11u].x))), _1462);
            frontier_phi_15_37_ladder = _2203.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2203.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2203.x * cbModelParam._m0[1u].y;
        }
        _1543 = frontier_phi_15_37_ladder_2;
        _1545 = frontier_phi_15_37_ladder_1;
        _1547 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1531 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_662, _663, _664), _1462);
        _1543 = _1531.x * cbModelParam._m0[1u].y;
        _1545 = _1531.y * cbModelParam._m0[1u].y;
        _1547 = _1531.z * cbModelParam._m0[1u].y;
    }
    float _1550 = isnan(0.0) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? 0.0 : min(cbModelParam._m0[25u].w, 0.0));
    float _1642;
    float _1644;
    float _1646;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1606 = fma(_716, cbModelParam._m0[21u].z, fma(_712, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _708)) + cbModelParam._m0[21u].w;
        float _1610 = fma(_716, cbModelParam._m0[22u].z, fma(_712, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _708)) + cbModelParam._m0[22u].w;
        float _1614 = fma(_716, cbModelParam._m0[23u].z, fma(_712, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _708)) + cbModelParam._m0[23u].w;
        float _1617 = fma(_664, cbModelParam._m0[21u].z, fma(_663, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _662));
        float _1620 = fma(_664, cbModelParam._m0[22u].z, fma(_663, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _662));
        float _1623 = fma(_664, cbModelParam._m0[23u].z, fma(_663, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _662));
        float _1832;
        if (_1617 > 0.0)
        {
            _1832 = abs((1.0 - _1606) / _1617);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1617 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1606 + 1.0) / _1617);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1832 = frontier_phi_27_23_ladder;
        }
        float _2098;
        if (_1620 > 0.0)
        {
            _2098 = abs((1.0 - _1610) / _1620);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1620 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1610 + 1.0) / _1620);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2098 = frontier_phi_39_34_ladder;
        }
        float _2301;
        if (_1623 > 0.0)
        {
            _2301 = abs((1.0 - _1614) / _1623);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1623 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1614 + 1.0) / _1623);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2301 = frontier_phi_48_45_ladder;
        }
        float _2303 = isnan(_2098) ? _1832 : (isnan(_1832) ? _2098 : min(_1832, _2098));
        float _2304 = isnan(_2301) ? _2303 : (isnan(_2303) ? _2301 : min(_2303, _2301));
        float _2308 = (_2304 * _1617) + _1606;
        float _2309 = (_2304 * _1620) + _1610;
        float _2310 = (_2304 * _1623) + _1614;
        float _2311 = _2304 * 9.9999997473787516355514526367188e-05;
        float _2312 = (-1.0) - _2311;
        float _2314 = _2311 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2310 > _2314) || ((_2310 < _2312) || ((_2309 > _2314) || ((_2309 < _2312) || ((_2308 < _2312) || (_2308 > _2314))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2708 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2310, cbModelParam._m0[17u].z, fma(_2309, cbModelParam._m0[17u].y, _2308 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2310, cbModelParam._m0[18u].z, fma(_2309, cbModelParam._m0[18u].y, _2308 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2310, cbModelParam._m0[19u].z, fma(_2309, cbModelParam._m0[19u].y, _2308 * cbModelParam._m0[19u].x))), _1550);
            frontier_phi_24_48_ladder = _2708.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2708.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2708.x * cbModelParam._m0[1u].z;
        }
        _1642 = frontier_phi_24_48_ladder_2;
        _1644 = frontier_phi_24_48_ladder_1;
        _1646 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1626 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_662, _663, _664), _1550);
        _1642 = _1626.x * cbModelParam._m0[1u].z;
        _1644 = _1626.y * cbModelParam._m0[1u].z;
        _1646 = _1626.z * cbModelParam._m0[1u].z;
    }
    float _1658 = (((1.0 - _682) * 0.039999999105930328369140625) + _682) * _654;
    float _1659 = _1658 * ((cbModelParam._m0[1u].w * (_1642 - _1543)) + _1543);
    float _1660 = _1658 * ((cbModelParam._m0[1u].w * (_1644 - _1545)) + _1545);
    float _1661 = _1658 * ((cbModelParam._m0[1u].w * (_1646 - _1547)) + _1547);
    float _1664 = fma(_1661, cbSceneParam._m0[89u].z, fma(_1660, cbSceneParam._m0[89u].y, _1659 * cbSceneParam._m0[89u].x));
    float _1667 = fma(_1661, cbSceneParam._m0[90u].z, fma(_1660, cbSceneParam._m0[90u].y, _1659 * cbSceneParam._m0[90u].x));
    float _1670 = fma(_1661, cbSceneParam._m0[91u].z, fma(_1660, cbSceneParam._m0[91u].y, _1659 * cbSceneParam._m0[91u].x));
    float _1681 = _588 / cbSceneParam._m0[86u].x;
    float _4072 = isnan(0.0) ? cbSceneParam._m0[88u].z : (isnan(cbSceneParam._m0[88u].z) ? 0.0 : max(cbSceneParam._m0[88u].z, 0.0));
    float _1687 = (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0))) * 5.0;
    float _1691 = 0.99999988079071044921875 / (_523 + 10.0);
    float _1693 = _1691 * dot(vec3(_513, _514, _515), vec3(1.0, 0.0, 0.0));
    vec4 _1703 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1693 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1693 + _1681) * cbSceneParam._m0[86u].x, _589), _1687).w) + _1681) * cbSceneParam._m0[86u].x, _589), _1687);
    float _1719 = 1.0 - _1703.w;
    vec4 _1727 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_588, _589));
    float _1729 = _1727.w;
    float _1741 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1729);
    float _1742 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1729);
    float _1743 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1729);
    uint _1744 = _629 + 5u;
    uvec4 _1747 = floatBitsToUint(cbInstanceData._m0[_1744]);
    uint _1749 = _1747.x * 14u;
    uint _1750 = _1749 + 13u;
    float _1757 = _654 + (-1.0);
    float _1762 = (cbLight._m0[_1750].x * _1757) + 1.0;
    float _1763 = (cbLight._m0[_1750].y * _1757) + 1.0;
    float _1764 = (cbLight._m0[_1750].z * _1757) + 1.0;
    float _1765 = (cbLight._m0[_1750].w * _1757) + 1.0;
    uint _1766 = _1749 + 5u;
    float _1772 = isnan(1.0) ? _1763 : (isnan(_1763) ? 1.0 : min(_1763, 1.0));
    uint _1776 = _1749 + 4u;
    float _1786 = isnan(1.0) ? _1762 : (isnan(_1762) ? 1.0 : min(_1762, 1.0));
    uint _1790 = _1749 | 1u;
    float _1801 = dot(vec3(cbLight._m0[_1749].xyz), vec3(_513, _514, _515));
    float _1804 = dot(vec3(cbLight._m0[_1790].xyz), vec3(_513, _514, _515));
    float _4093 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
    float _4104 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
    float _1809 = (isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0))) * 0.3183098733425140380859375;
    float _1811 = (isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * 0.3183098733425140380859375;
    float _1818 = ((cbLight._m0[_1766].x * _1772) * _1811) + (((cbLight._m0[_1776].x * _1741) * _1786) * _1809);
    float _1819 = ((_1772 * cbLight._m0[_1766].y) * _1811) + (((cbLight._m0[_1776].y * _1742) * _1786) * _1809);
    float _1820 = ((_1772 * cbLight._m0[_1766].z) * _1811) + (((cbLight._m0[_1776].z * _1743) * _1786) * _1809);
    uvec4 _1824 = floatBitsToUint(cbLight._m0[_1749 + 12u]);
    bool _1826 = _1824.x == 0u;
    float _1837;
    float _1839;
    float _1841;
    if (_1826)
    {
        _1837 = _1818;
        _1839 = _1819;
        _1841 = _1820;
    }
    else
    {
        uint _1845 = _1749 + 6u;
        float _1861 = (dot(vec3(cbLight._m0[_1749 + 2u].xyz), vec3(_513, _514, _515)) * 0.5) + 0.5;
        float _1862 = _1861 * _1861;
        float _4115 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
        float _1863 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _1864 = isnan(1.0) ? _1764 : (isnan(_1764) ? 1.0 : min(_1764, 1.0));
        _1837 = (((cbLight._m0[_1845].x * 0.3183098733425140380859375) * _1863) * _1864) + _1818;
        _1839 = (((cbLight._m0[_1845].y * 0.3183098733425140380859375) * _1863) * _1864) + _1819;
        _1841 = (((cbLight._m0[_1845].z * 0.3183098733425140380859375) * _1863) * _1864) + _1820;
    }
    bool _1844 = _1824.y == 0u;
    float _1882;
    float _1884;
    float _1886;
    if (_1844)
    {
        _1882 = _1837;
        _1884 = _1839;
        _1886 = _1841;
    }
    else
    {
        uint _2042 = _1749 + 7u;
        float _2058 = (dot(vec3(cbLight._m0[_1749 + 3u].xyz), vec3(_513, _514, _515)) * 0.5) + 0.5;
        float _2059 = _2058 * _2058;
        float _4131 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
        float _2060 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
        float _2061 = isnan(1.0) ? _1765 : (isnan(_1765) ? 1.0 : min(_1765, 1.0));
        _1882 = (((cbLight._m0[_2042].x * 0.3183098733425140380859375) * _2060) * _2061) + _1837;
        _1884 = (((cbLight._m0[_2042].y * 0.3183098733425140380859375) * _2060) * _2061) + _1839;
        _1886 = (((cbLight._m0[_2042].z * 0.3183098733425140380859375) * _2060) * _2061) + _1841;
    }
    uint _1889 = _1749 + 8u;
    float _1901 = 1.0 - (sqrt(1.0 - (0.07500000298023223876953125 / cbLight._m0[_1749].w)) * 0.949999988079071044921875);
    float _1902 = _1901 * _1901;
    float _1903 = cbLight._m0[_1749].x + _581;
    float _1904 = cbLight._m0[_1749].y + _582;
    float _1905 = cbLight._m0[_1749].z + _583;
    float _1909 = inversesqrt(dot(vec3(_1903, _1904, _1905), vec3(_1903, _1904, _1905)));
    float _1910 = _1909 * _1903;
    float _1911 = _1909 * _1904;
    float _1912 = _1909 * _1905;
    float _1913 = dot(vec3(_513, _514, _515), vec3(cbLight._m0[_1749].xyz));
    float _4147 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
    float _1916 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
    float _4158 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _1917 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
    float _1918 = dot(vec3(_513, _514, _515), vec3(_1910, _1911, _1912));
    float _4169 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
    float _1921 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
    float _1922 = dot(vec3(cbLight._m0[_1749].xyz), vec3(_1910, _1911, _1912));
    float _4180 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
    float _1926 = _1902 * _1902;
    float _1930 = ((_1921 * _1921) * (_1926 + (-1.0))) + 1.0;
    float _1941 = (exp2(log2(1.0 - (isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1942 = 1.0 - _1902;
    float _1953 = (0.5 / (((_1917 * ((_1916 * _1942) + _1902)) + 9.9999999392252902907785028219223e-09) + (((_1917 * _1942) + _1902) * _1916))) * _1916;
    float _4191 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
    float _1955 = (isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) * (_1926 / ((_1930 * _1930) * 3.141590118408203125));
    uint _1969 = _1749 + 9u;
    float _1979 = 1.0 - (sqrt(1.0 - (0.07500000298023223876953125 / cbLight._m0[_1790].w)) * 0.949999988079071044921875);
    float _1980 = _1979 * _1979;
    float _1981 = cbLight._m0[_1790].x + _581;
    float _1982 = cbLight._m0[_1790].y + _582;
    float _1983 = cbLight._m0[_1790].z + _583;
    float _1987 = inversesqrt(dot(vec3(_1981, _1982, _1983), vec3(_1981, _1982, _1983)));
    float _1988 = _1987 * _1981;
    float _1989 = _1987 * _1982;
    float _1990 = _1987 * _1983;
    float _1991 = dot(vec3(_513, _514, _515), vec3(cbLight._m0[_1790].xyz));
    float _4202 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
    float _1994 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
    float _1995 = dot(vec3(_513, _514, _515), vec3(_1988, _1989, _1990));
    float _4213 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
    float _1998 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
    float _1999 = dot(vec3(cbLight._m0[_1790].xyz), vec3(_1988, _1989, _1990));
    float _4224 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
    float _2003 = _1980 * _1980;
    float _2007 = ((_1998 * _1998) * (_2003 + (-1.0))) + 1.0;
    float _2016 = (exp2(log2(1.0 - (isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2017 = 1.0 - _1980;
    float _2027 = (0.5 / (((_1917 * ((_1994 * _2017) + _1980)) + 9.9999999392252902907785028219223e-09) + (((_1917 * _2017) + _1980) * _1994))) * _1994;
    float _4235 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
    float _2029 = (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * (_2003 / ((_2007 * _2007) * 3.141590118408203125));
    float _2039 = (((_2016 * cbLight._m0[_1969].x) * _2029) * _1772) + ((((cbLight._m0[_1889].x * _1741) * _1941) * _1955) * _1786);
    float _2040 = (((_2016 * cbLight._m0[_1969].y) * _2029) * _1772) + ((((cbLight._m0[_1889].y * _1742) * _1941) * _1955) * _1786);
    float _2041 = (((_2016 * cbLight._m0[_1969].z) * _2029) * _1772) + ((((cbLight._m0[_1889].z * _1743) * _1941) * _1955) * _1786);
    float _2103;
    float _2105;
    float _2107;
    if (_1826)
    {
        _2103 = _2039;
        _2105 = _2040;
        _2107 = _2041;
    }
    else
    {
        uint _2109 = _1749 + 2u;
        uint _2113 = _1749 + 10u;
        float _2126 = 1.0 - (sqrt(1.0 - (0.07500000298023223876953125 / cbLight._m0[_2109].w)) * 0.949999988079071044921875);
        float _2127 = _2126 * _2126;
        float _2128 = cbLight._m0[_2109].x + _581;
        float _2129 = cbLight._m0[_2109].y + _582;
        float _2130 = cbLight._m0[_2109].z + _583;
        float _2134 = inversesqrt(dot(vec3(_2128, _2129, _2130), vec3(_2128, _2129, _2130)));
        float _2135 = _2134 * _2128;
        float _2136 = _2134 * _2129;
        float _2137 = _2134 * _2130;
        float _2138 = dot(vec3(_513, _514, _515), vec3(cbLight._m0[_2109].xyz));
        float _4246 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
        float _2141 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _2142 = dot(vec3(_513, _514, _515), vec3(_2135, _2136, _2137));
        float _4257 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
        float _2145 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _2146 = dot(vec3(cbLight._m0[_2109].xyz), vec3(_2135, _2136, _2137));
        float _4268 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
        float _2150 = _2127 * _2127;
        float _2154 = ((_2145 * _2145) * (_2150 + (-1.0))) + 1.0;
        float _2163 = (exp2(log2(1.0 - (isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2164 = 1.0 - _2127;
        float _2174 = (0.5 / (((_1917 * ((_2141 * _2164) + _2127)) + 9.9999999392252902907785028219223e-09) + (((_1917 * _2164) + _2127) * _2141))) * _2141;
        float _4279 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
        float _2176 = (isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * (_2150 / ((_2154 * _2154) * 3.141590118408203125));
        float _2177 = isnan(1.0) ? _1764 : (isnan(_1764) ? 1.0 : min(_1764, 1.0));
        _2103 = (((_2163 * cbLight._m0[_2113].x) * _2176) * _2177) + _2039;
        _2105 = (((_2163 * cbLight._m0[_2113].y) * _2176) * _2177) + _2040;
        _2107 = (((_2163 * cbLight._m0[_2113].z) * _2176) * _2177) + _2041;
    }
    float _2212;
    float _2214;
    float _2216;
    if (_1844)
    {
        _2212 = _2103;
        _2214 = _2105;
        _2216 = _2107;
    }
    else
    {
        uint _2223 = _1749 + 3u;
        uint _2227 = _1749 + 11u;
        float _2240 = 1.0 - (sqrt(1.0 - (0.07500000298023223876953125 / cbLight._m0[_2223].w)) * 0.949999988079071044921875);
        float _2241 = _2240 * _2240;
        float _2242 = cbLight._m0[_2223].x + _581;
        float _2243 = cbLight._m0[_2223].y + _582;
        float _2244 = cbLight._m0[_2223].z + _583;
        float _2248 = inversesqrt(dot(vec3(_2242, _2243, _2244), vec3(_2242, _2243, _2244)));
        float _2249 = _2248 * _2242;
        float _2250 = _2248 * _2243;
        float _2251 = _2248 * _2244;
        float _2252 = dot(vec3(_513, _514, _515), vec3(cbLight._m0[_2223].xyz));
        float _4295 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
        float _2255 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _2256 = dot(vec3(_513, _514, _515), vec3(_2249, _2250, _2251));
        float _4306 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
        float _2259 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _2260 = dot(vec3(cbLight._m0[_2223].xyz), vec3(_2249, _2250, _2251));
        float _4317 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
        float _2264 = _2241 * _2241;
        float _2268 = ((_2259 * _2259) * (_2264 + (-1.0))) + 1.0;
        float _2277 = (exp2(log2(1.0 - (isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2278 = 1.0 - _2241;
        float _2288 = (0.5 / (((_1917 * ((_2255 * _2278) + _2241)) + 9.9999999392252902907785028219223e-09) + (((_1917 * _2278) + _2241) * _2255))) * _2255;
        float _4328 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
        float _2290 = (isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0))) * (_2264 / ((_2268 * _2268) * 3.141590118408203125));
        float _2291 = isnan(1.0) ? _1765 : (isnan(_1765) ? 1.0 : min(_1765, 1.0));
        _2212 = (((_2277 * cbLight._m0[_2227].x) * _2290) * _2291) + _2103;
        _2214 = (((_2277 * cbLight._m0[_2227].y) * _2290) * _2291) + _2105;
        _2216 = (((_2277 * cbLight._m0[_2227].z) * _2290) * _2291) + _2107;
    }
    float _2425;
    float _2427;
    float _2429;
    float _2431;
    float _2433;
    float _2435;
    if (_1747.y == 0u)
    {
        float _2366 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2367 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2366;
        float _2368 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2366;
        float _2369 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2366;
        uvec4 _2381 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2382 = _2381.x;
        uint _2393 = uint((float(_2381.y) * floor(float(uint(cbSceneParam._m0[85u].y * _589) / _2382))) + floor(float(uint(cbSceneParam._m0[85u].x * _588) / _2382)));
        float _2403 = (log2(_2369 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2404 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
        uint _2407 = uint(isnan(14.0) ? _2404 : (isnan(_2404) ? 14.0 : min(_2404, 14.0)));
        uvec4 _2412 = texelFetch(g_lightClusterGridBuffer, int(((_2407 << 2u) + (_2393 << 6u)) >> 2u));
        uint _2413 = _2412.x;
        uint _2414 = _2381.z;
        float _2713;
        float _2715;
        float _2717;
        float _2719;
        float _2721;
        float _2723;
        if (((((1u << ((_2414 >> 4u) & 15u)) + 4294967295u) & _2413) == 0u) || ((_2414 & 240u) == 0u))
        {
            _2713 = 0.0;
            _2715 = 0.0;
            _2717 = 0.0;
            _2719 = 0.0;
            _2721 = 0.0;
            _2723 = 0.0;
        }
        else
        {
            float _2714;
            float _2716;
            float _2718;
            float _2720;
            float _2722;
            float _2724;
            float _2889 = 0.0;
            float _2890 = 0.0;
            float _2891 = 0.0;
            float _2892 = 0.0;
            float _2893 = 0.0;
            float _2894 = 0.0;
            uint _2895 = 0u;
            uint _2904;
            bool _2905;
            for (;;)
            {
                _2904 = texelFetch(g_lightClassification, int((((_2407 << 5u) + (_2393 << 9u)) + (_2895 << 2u)) >> 2u)).x;
                _2905 = _2904 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2905)
                {
                    frontier_phi_63_pred = _2894;
                    frontier_phi_63_pred_1 = _2893;
                    frontier_phi_63_pred_2 = _2892;
                    frontier_phi_63_pred_3 = _2891;
                    frontier_phi_63_pred_4 = _2890;
                    frontier_phi_63_pred_5 = _2889;
                }
                else
                {
                    float _3013;
                    float _3014;
                    float _3015;
                    float _3016;
                    float _3017;
                    float _3018;
                    uint _3019;
                    _3013 = _2889;
                    _3014 = _2890;
                    _3015 = _2891;
                    _3016 = _2892;
                    _3017 = _2893;
                    _3018 = _2894;
                    _3019 = _2904;
                    float _2945;
                    float _2946;
                    float _2947;
                    float _2948;
                    float _2949;
                    float _2950;
                    for (;;)
                    {
                        uint _3023 = uint(findLSB(_3019)) + (_2895 << 5u);
                        uint _3020 = (_3019 + 4294967295u) & _3019;
                        uint _3025 = _3023 * 48u;
                        vec4 _3039 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3025)).x, texelFetch(g_PointLightRenderingBuffer, int(_3025 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3025 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3025 + 3u)).x));
                        uint _3045 = (_3023 * 48u) + 4u;
                        vec4 _3058 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3045)).x, texelFetch(g_PointLightRenderingBuffer, int(_3045 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3045 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3045 + 3u)).x));
                        uint _3064 = (_3023 * 48u) + 8u;
                        vec3 _3075 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3064)).x, texelFetch(g_PointLightRenderingBuffer, int(_3064 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3064 + 2u)).x));
                        float _3079 = _3039.x - _2367;
                        float _3080 = _3039.y - _2368;
                        float _3081 = _3039.z - _2369;
                        float _3082 = dot(vec3(_3079, _3080, _3081), vec3(_3079, _3080, _3081));
                        float _3085 = inversesqrt(_3082);
                        float _3086 = _3085 * _3079;
                        float _3087 = _3085 * _3080;
                        float _3088 = _3085 * _3081;
                        float _3089 = dot(vec3(_610, _613, _616), vec3(_3086, _3087, _3088));
                        float _3094 = 1.0 - (_3082 * _3039.w);
                        float _4354 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0));
                        float _3095 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
                        float _3096 = sqrt(_3082) * _3058.w;
                        float _3099 = 1.39999997615814208984375 / (_3096 + 1.39999997615814208984375);
                        float _3100 = _3099 * _3099;
                        float _3103 = ((1.0 - _3100) * _3089) + _3100;
                        float _3106 = _3096 * _3096;
                        float _3109 = ((isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : max(_3103, 0.0))) * _3095) / ((_3106 * 0.699999988079071044921875) + 1.0);
                        float _3113 = (-0.0) - _2367;
                        float _3114 = (-0.0) - _2368;
                        float _3115 = (-0.0) - _2369;
                        float _3119 = inversesqrt(dot(vec3(_3113, _3114, _3115), vec3(_3113, _3114, _3115)));
                        float _3120 = _3119 * _3113;
                        float _3121 = _3119 * _3114;
                        float _3122 = _3119 * _3115;
                        float _3130 = exp2(log2(1.0 / ((_3106 * 3.5) + 5.0)) * 0.25);
                        float _3132 = sqrt(_3130 * _3130);
                        float _3133 = _3132 * _3132;
                        float _3134 = _3133 * _3133;
                        float _3135 = _3120 + _3086;
                        float _3136 = _3121 + _3087;
                        float _3137 = _3122 + _3088;
                        float _3141 = inversesqrt(dot(vec3(_3135, _3136, _3137), vec3(_3135, _3136, _3137)));
                        float _3145 = dot(vec3(_610, _613, _616), vec3(_3120, _3121, _3122));
                        float _4370 = isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0));
                        float _3148 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
                        float _3149 = dot(vec3(_610, _613, _616), vec3(_3141 * _3135, _3141 * _3136, _3141 * _3137));
                        float _4381 = isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0));
                        float _3152 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
                        float _3156 = ((_3152 * _3152) * (_3134 + (-1.0))) + 1.0;
                        float _3157 = _3099 * _3133;
                        float _3158 = _3157 * _3157;
                        float _3161 = ((1.0 - _3158) * _3089) + _3158;
                        float _4392 = isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0));
                        float _3162 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
                        float _3163 = 1.0 - _3133;
                        float _3173 = (0.5 / (((_3162 * ((_3148 * _3163) + _3133)) + 9.9999999392252902907785028219223e-09) + (((_3162 * _3163) + _3133) * _3148))) * _3162;
                        float _4403 = isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0));
                        float _3184 = (((_3134 * 3.1415927410125732421875) * (isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0)))) / ((_3156 * _3156) * ((_3106 * 2.1991131305694580078125) + 3.141590118408203125))) * _3095;
                        _2948 = (_3109 * _3058.x) + _3016;
                        _2949 = (_3109 * _3058.y) + _3017;
                        _2950 = (_3109 * _3058.z) + _3018;
                        _2945 = (_3184 * _3075.x) + _3013;
                        _2946 = (_3184 * _3075.y) + _3014;
                        _2947 = (_3184 * _3075.z) + _3015;
                        if (_3020 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3013 = _2945;
                            _3014 = _2946;
                            _3015 = _2947;
                            _3016 = _2948;
                            _3017 = _2949;
                            _3018 = _2950;
                            _3019 = _3020;
                        }
                    }
                    frontier_phi_63_pred = _2950;
                    frontier_phi_63_pred_1 = _2949;
                    frontier_phi_63_pred_2 = _2948;
                    frontier_phi_63_pred_3 = _2947;
                    frontier_phi_63_pred_4 = _2946;
                    frontier_phi_63_pred_5 = _2945;
                }
                _2724 = frontier_phi_63_pred;
                _2722 = frontier_phi_63_pred_1;
                _2720 = frontier_phi_63_pred_2;
                _2718 = frontier_phi_63_pred_3;
                _2716 = frontier_phi_63_pred_4;
                _2714 = frontier_phi_63_pred_5;
                uint _2896 = _2895 + 1u;
                if (_2896 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2889 = _2714;
                    _2890 = _2716;
                    _2891 = _2718;
                    _2892 = _2720;
                    _2893 = _2722;
                    _2894 = _2724;
                    _2895 = _2896;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2713 = _2714;
            _2715 = _2716;
            _2717 = _2718;
            _2719 = _2720;
            _2721 = _2722;
            _2723 = _2724;
        }
        uvec4 _2727 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2728 = _2727.z;
        uint _2730 = (_2728 >> 8u) & 15u;
        float _2857;
        float _2859;
        float _2861;
        float _2863;
        float _2865;
        float _2867;
        if (((4294967295u << _2730) & _2413) == 0u)
        {
            _2857 = _2713;
            _2859 = _2715;
            _2861 = _2717;
            _2863 = _2719;
            _2865 = _2721;
            _2867 = _2723;
        }
        else
        {
            float _2882 = inversesqrt(dot(vec3(_2367, _2368, _2369), vec3(_2367, _2368, _2369)));
            float _2883 = _2882 * _2367;
            float _2884 = _2882 * _2368;
            float _2885 = _2882 * _2369;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2730 < ((_2728 >> 12u) & 15u))
            {
                float _2858;
                float _2860;
                float _2862;
                float _2864;
                float _2866;
                float _2868;
                float _2996 = _2713;
                float _2997 = _2715;
                float _2998 = _2717;
                float _2999 = _2719;
                float _3000 = _2721;
                float _3001 = _2723;
                uint _3002 = _2730;
                uint _3011;
                bool _3012;
                for (;;)
                {
                    _3011 = texelFetch(g_lightClassification, int((((_2407 << 5u) + (_2393 << 9u)) + (_3002 << 2u)) >> 2u)).x;
                    _3012 = _3011 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_3012)
                    {
                        frontier_phi_69_pred = _3001;
                        frontier_phi_69_pred_1 = _3000;
                        frontier_phi_69_pred_2 = _2999;
                        frontier_phi_69_pred_3 = _2998;
                        frontier_phi_69_pred_4 = _2997;
                        frontier_phi_69_pred_5 = _2996;
                    }
                    else
                    {
                        float _3189;
                        float _3190;
                        float _3191;
                        float _3192;
                        float _3193;
                        float _3194;
                        float _3479;
                        float _3480;
                        float _3481;
                        float _3482;
                        float _3483;
                        float _3484;
                        float _3202 = _2996;
                        float _3203 = _2997;
                        float _3204 = _2998;
                        float _3205 = _2999;
                        float _3206 = _3000;
                        float _3207 = _3001;
                        uint _3208 = _3011;
                        uint _3209;
                        vec4 _3234;
                        float _3235;
                        vec4 _3250;
                        vec3 _3262;
                        vec4 _3278;
                        vec4 _3294;
                        float _3341;
                        bool _3342;
                        for (;;)
                        {
                            uint _3219 = ((_3002 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3208));
                            _3209 = (_3208 + 4294967295u) & _3208;
                            uint _3221 = _3219 * 40u;
                            _3234 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3221)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 3u)).x));
                            _3235 = _3234.w;
                            uint _3237 = (_3219 * 40u) + 4u;
                            _3250 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3237)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 3u)).x));
                            uint _3252 = (_3219 * 40u) + 8u;
                            _3262 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3252)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 2u)).x));
                            uint _3265 = (_3219 * 40u) + 16u;
                            _3278 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3265)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 3u)).x));
                            uint _3281 = (_3219 * 40u) + 20u;
                            _3294 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3281)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 3u)).x));
                            uint _3297 = (_3219 * 40u) + 24u;
                            vec4 _3310 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3297)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 3u)).x));
                            uint _3316 = (_3219 * 40u) + 28u;
                            vec4 _3329 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3316)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 3u)).x));
                            _3341 = fma(_2369, _3329.z, fma(_2368, _3329.y, _3329.x * _2367)) + _3329.w;
                            _3342 = !((fma(_2369, _3310.z, fma(_2368, _3310.y, _3310.x * _2367)) + _3310.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3342)
                            {
                                float _3369 = _3234.x - _2367;
                                float _3370 = _3234.y - _2368;
                                float _3371 = _3234.z - _2369;
                                float _3372 = dot(vec3(_3369, _3370, _3371), vec3(_3369, _3370, _3371));
                                float _3375 = inversesqrt(_3372);
                                float _3376 = _3375 * _3369;
                                float _3377 = _3375 * _3370;
                                float _3378 = _3375 * _3371;
                                float _3382 = 1.0 - (_3372 / (_3235 * _3235));
                                float _4414 = isnan(0.0) ? _3382 : (isnan(_3382) ? 0.0 : max(_3382, 0.0));
                                float _3383 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
                                float _3387 = sqrt(_3372) * _3250.w;
                                float _3389 = 1.39999997615814208984375 / (_3387 + 1.39999997615814208984375);
                                float _3390 = _3389 * _3389;
                                float _3393 = ((1.0 - _3390) * dot(vec3(_3376, _3377, _3378), vec3(_610, _613, _616))) + _3390;
                                float _3396 = _3387 * _3387;
                                float _3400 = (fma(_2369, _3278.z, fma(_2368, _3278.y, _3278.x * _2367)) + _3278.w) / _3341;
                                float _3401 = (fma(_2369, _3294.z, fma(_2368, _3294.y, _3294.x * _2367)) + _3294.w) / _3341;
                                float _3405 = 1.0 - dot(vec2(_3400, _3401), vec2(_3400, _3401));
                                float _4430 = isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0));
                                float _3406 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
                                float _3407 = _3406 * (((isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0))) * _3383) / ((_3396 * 0.699999988079071044921875) + 1.0));
                                float _3419 = exp2(log2(1.0 / ((_3396 * 3.5) + 5.0)) * 0.25);
                                float _3421 = sqrt(_3419 * _3419);
                                float _3422 = _3421 * _3421;
                                float _3423 = _3422 * _3422;
                                float _3424 = _3376 - _2883;
                                float _3425 = _3377 - _2884;
                                float _3426 = _3378 - _2885;
                                float _3430 = inversesqrt(dot(vec3(_3424, _3425, _3426), vec3(_3424, _3425, _3426)));
                                float _3434 = dot(vec3(_610, _613, _616), vec3((-0.0) - _2883, (-0.0) - _2884, (-0.0) - _2885));
                                float _4441 = isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0));
                                float _3437 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
                                float _3438 = dot(vec3(_610, _613, _616), vec3(_3430 * _3424, _3430 * _3425, _3430 * _3426));
                                float _4452 = isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : max(_3438, 0.0));
                                float _3441 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
                                float _3445 = ((_3441 * _3441) * (_3423 + (-1.0))) + 1.0;
                                float _3446 = _3389 * _3422;
                                float _3447 = _3446 * _3446;
                                float _3453 = ((1.0 - _3447) * dot(vec3(_610, _613, _616), vec3(_3376, _3377, _3378))) + _3447;
                                float _4463 = isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0));
                                float _3454 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
                                float _3455 = 1.0 - _3422;
                                float _3465 = (0.5 / (((_3454 * ((_3437 * _3455) + _3422)) + 9.9999999392252902907785028219223e-09) + (((_3454 * _3455) + _3422) * _3437))) * _3454;
                                float _4474 = isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0));
                                float _3475 = (_3406 * _3383) * (((_3423 * 3.1415927410125732421875) * (isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0)))) / ((_3445 * _3445) * ((_3396 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3407 * _3250.z;
                                frontier_phi_75_pred_1 = _3407 * _3250.y;
                                frontier_phi_75_pred_2 = _3407 * _3250.x;
                                frontier_phi_75_pred_3 = _3475 * _3262.z;
                                frontier_phi_75_pred_4 = _3475 * _3262.y;
                                frontier_phi_75_pred_5 = _3475 * _3262.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3484 = frontier_phi_75_pred;
                            _3483 = frontier_phi_75_pred_1;
                            _3482 = frontier_phi_75_pred_2;
                            _3481 = frontier_phi_75_pred_3;
                            _3480 = frontier_phi_75_pred_4;
                            _3479 = frontier_phi_75_pred_5;
                            _3192 = _3482 + _3205;
                            _3193 = _3483 + _3206;
                            _3194 = _3484 + _3207;
                            _3189 = _3479 + _3202;
                            _3190 = _3480 + _3203;
                            _3191 = _3481 + _3204;
                            if (_3209 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3202 = _3189;
                                _3203 = _3190;
                                _3204 = _3191;
                                _3205 = _3192;
                                _3206 = _3193;
                                _3207 = _3194;
                                _3208 = _3209;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3194;
                        frontier_phi_69_pred_1 = _3193;
                        frontier_phi_69_pred_2 = _3192;
                        frontier_phi_69_pred_3 = _3191;
                        frontier_phi_69_pred_4 = _3190;
                        frontier_phi_69_pred_5 = _3189;
                    }
                    _2868 = frontier_phi_69_pred;
                    _2866 = frontier_phi_69_pred_1;
                    _2864 = frontier_phi_69_pred_2;
                    _2862 = frontier_phi_69_pred_3;
                    _2860 = frontier_phi_69_pred_4;
                    _2858 = frontier_phi_69_pred_5;
                    uint _3003 = _3002 + 1u;
                    if (_3003 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2996 = _2858;
                        _2997 = _2860;
                        _2998 = _2862;
                        _2999 = _2864;
                        _3000 = _2866;
                        _3001 = _2868;
                        _3002 = _3003;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2868;
                frontier_phi_57_58_ladder_1 = _2866;
                frontier_phi_57_58_ladder_2 = _2864;
                frontier_phi_57_58_ladder_3 = _2862;
                frontier_phi_57_58_ladder_4 = _2860;
                frontier_phi_57_58_ladder_5 = _2858;
            }
            else
            {
                frontier_phi_57_58_ladder = _2723;
                frontier_phi_57_58_ladder_1 = _2721;
                frontier_phi_57_58_ladder_2 = _2719;
                frontier_phi_57_58_ladder_3 = _2717;
                frontier_phi_57_58_ladder_4 = _2715;
                frontier_phi_57_58_ladder_5 = _2713;
            }
            _2857 = frontier_phi_57_58_ladder_5;
            _2859 = frontier_phi_57_58_ladder_4;
            _2861 = frontier_phi_57_58_ladder_3;
            _2863 = frontier_phi_57_58_ladder_2;
            _2865 = frontier_phi_57_58_ladder_1;
            _2867 = frontier_phi_57_58_ladder;
        }
        float _2872 = isnan(1.0) ? _654 : (isnan(_654) ? 1.0 : min(_654, 1.0));
        _2425 = (_2872 * _2863) + _1882;
        _2427 = (_2872 * _2865) + _1884;
        _2429 = (_2872 * _2867) + _1886;
        _2431 = ((_2857 * 0.039999999105930328369140625) * _2872) + _2212;
        _2433 = ((_2859 * 0.039999999105930328369140625) * _2872) + _2214;
        _2435 = ((_2861 * 0.039999999105930328369140625) * _2872) + _2216;
    }
    else
    {
        _2425 = _1882;
        _2427 = _1884;
        _2429 = _1886;
        _2431 = _2212;
        _2433 = _2214;
        _2435 = _2216;
    }
    float _2454 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2455 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2456 = cbSceneParam._m0[86u].x * ((_588 / cbSceneParam._m0[86u].x) + (_1691 * dot(vec3(_513, _514, _515), vec3(_204, _205, _206))));
    float _2457 = isnan(_2454) ? _2456 : (isnan(_2456) ? _2454 : min(_2456, _2454));
    float _2458 = isnan(_2455) ? _589 : (isnan(_589) ? _2455 : min(_589, _2455));
    vec4 _2460 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2457, _2458), 0.0);
    float _2462 = _2460.x;
    bool _2482 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2462)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2462))) > _523;
    float _2483 = _2482 ? _2457 : _588;
    float _2484 = _2482 ? _2458 : _589;
    vec4 _2486 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2483, _2484));
    vec4 _2491 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2483, _2484));
    float _2493 = _2491.x;
    bool _2498 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _2507 = (-0.0) - cbSceneParam._m0[2u].z;
    float _2513 = (_2498 ? (_2507 / (cbSceneParam._m0[2u].x - _2493)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2493))) - _523;
    bool _2520 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2527 = (isnan(_2513) ? 0.0 : (isnan(0.0) ? _2513 : max(0.0, _2513))) * (-1.44269502162933349609375);
    float _4505 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _4516 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _4527 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    vec4 _2547 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2483, _2484), 0.0);
    float _2549 = _2547.x;
    float _2555 = (_2498 ? (_2507 / (cbSceneParam._m0[2u].x - _2549)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2549))) - _523;
    uint _2561 = floatBitsToUint(cbInstanceData._m0[_1744]).x * 14u;
    uint _2567 = _2561 + 4u;
    float _2576 = dot(vec3(cbLight._m0[_2561].xyz), vec3(_225, _226, _227));
    float _2584 = dot(vec3((-0.0) - _581, (-0.0) - _582, (-0.0) - _583), vec3((-0.0) - _225, (-0.0) - _226, (-0.0) - _227));
    float _2589 = ((isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0))) / (isnan(0.001000000047497451305389404296875) ? _2576 : (isnan(_2576) ? 0.001000000047497451305389404296875 : max(_2576, 0.001000000047497451305389404296875)))) + 1.0;
    float _2590 = _2589 * (isnan(_2555) ? 0.0 : (isnan(0.0) ? _2555 : max(0.0, _2555)));
    float _2639 = 0.959999978542327880859375 - (exp2(log2(1.0 - _669) * 5.0) * 0.959999978542327880859375);
    float _2640 = ((_2520 ? 0.0 : (((cbLight._m0[_2567].x * 0.0159154944121837615966796875) / ((_2589 * 0.699999988079071044921875) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2(_2590 * (-1.0098865032196044921875))))) + ((exp2(_2527 * (_2520 ? 0.0 : 0.699999988079071044921875)) * _2486.x) * cbSceneParam._m0[72u].w)) * _2639;
    float _2641 = ((_2520 ? 0.0 : (((cbLight._m0[_2567].y * 0.0159154944121837615966796875) / ((_2589 * 0.300000011920928955078125) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2(_2590 * (-0.43280851840972900390625))))) + ((exp2(_2527 * (_2520 ? 0.0 : 0.300000011920928955078125)) * _2486.y) * cbSceneParam._m0[72u].w)) * _2639;
    float _2642 = ((_2520 ? 0.0 : (((cbLight._m0[_2567].z * 0.0159154944121837615966796875) / ((_2589 * 0.2199999988079071044921875) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2(_2590 * (-0.3173929154872894287109375))))) + ((exp2(_2527 * (_2520 ? 0.0 : 0.2199999988079071044921875)) * _2486.z) * cbSceneParam._m0[72u].w)) * _2639;
    float _2663 = _588 / cbSceneParam._m0[86u].x;
    float _2664 = _589 / cbSceneParam._m0[86u].y;
    vec4 _2678 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2663, _2664, (log2((isnan(cbSceneParam._m0[77u].w) ? _523 : (isnan(_523) ? cbSceneParam._m0[77u].w : min(_523, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2680 = _2678.x;
    float _2681 = _2678.y;
    float _2682 = _2678.z;
    float _2683 = _2678.w;
    float _2774;
    float _2776;
    float _2778;
    float _2780;
    if (_523 > cbSceneParam._m0[78u].w)
    {
        float _2738 = isnan(_523) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _523 : min(cbSceneParam._m0[80u].w, _523));
        float _2739 = _2738 / _523;
        float _2750 = _2739 * _574;
        float _2751 = _575 * _2739;
        float _2752 = (-0.0) - _2751;
        float _2753 = _2739 * _576;
        float _2755 = (cbSceneParam._m0[77u].w * _2752) / _2738;
        float _2756 = _2755 + cbSceneParam._m0[79u].w;
        float _2757 = cbSceneParam._m0[79u].w - _2751;
        float _2763 = sqrt(((_2750 * _2750) + (_2751 * _2751)) + (_2753 * _2753));
        float _2766 = (1.0 - (cbSceneParam._m0[77u].w / _2738)) * _2763;
        float _2771 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2772 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2958;
        if (abs((_2752 - _2755) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2958 = ((((_2756 > 0.0) ? exp2(_2771 * _2756) : (2.0 - exp2(_2772 * _2756))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2766;
        }
        else
        {
            float _2918 = 1.0 / cbSceneParam._m0[80u].x;
            float _2919 = isnan(_2757) ? _2756 : (isnan(_2756) ? _2757 : max(_2756, _2757));
            float _2920 = isnan(_2757) ? _2756 : (isnan(_2756) ? _2757 : min(_2756, _2757));
            float _2929 = isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : min(_2919, 0.0));
            float _2930 = isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : min(_2920, 0.0));
            _2958 = ((abs(_2763 / _2752) * cbSceneParam._m0[80u].y) * ((((_2929 - _2930) * 2.0) - ((exp2(_2771 * (isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0)))) - exp2(_2771 * (isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : max(_2920, 0.0))))) * _2918)) - ((exp2(_2772 * _2929) - exp2(_2772 * _2930)) * _2918))) + (_2766 * cbSceneParam._m0[80u].z);
        }
        vec4 _2960 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2663, _2664, 1.0), 0.0);
        float _2969 = exp2((_2958 * (-1.44269502162933349609375)) * (1.0 - _2960.w));
        float _2970 = log2(_2969);
        float _2986 = log2(_2683);
        _2774 = (exp2(_2986 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2970 * cbSceneParam._m0[78u].x)) * _2960.x) / cbSceneParam._m0[78u].x)) + _2680;
        _2776 = (exp2(_2986 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2970 * cbSceneParam._m0[78u].y)) * _2960.y) / cbSceneParam._m0[78u].y)) + _2681;
        _2778 = (exp2(_2986 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2970 * cbSceneParam._m0[78u].z)) * _2960.z) / cbSceneParam._m0[78u].z)) + _2682;
        _2780 = _2969 * _2683;
    }
    else
    {
        _2774 = _2680;
        _2776 = _2681;
        _2778 = _2682;
        _2780 = _2683;
    }
    bool _2792 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
    float _2794 = log2(_2780);
    float _2801 = exp2(_2794 * cbSceneParam._m0[78u].x) * ((_2640 + (((((_1658 * _1703.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0))) * _1453) * _1719)) + _2431) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0))) * (_2425 + ((isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0))) * _654))) - _2640) * 0.5));
    float _2802 = exp2(_2794 * cbSceneParam._m0[78u].y) * ((_2641 + (((((_1658 * _1703.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0))) * _1453) * _1719)) + _2433) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0))) * (_2427 + ((isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0))) * _654))) - _2641) * 0.5));
    float _2803 = exp2(_2794 * cbSceneParam._m0[78u].z) * ((_2642 + (((((_1658 * _1703.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0))) * _1453) * _1719)) + _2435) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0))) * (_2429 + ((isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0))) * _654))) - _2642) * 0.5));
    vec4 _2811 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_588, _589));
    float _2813 = _2811.x;
    float _2834 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2813)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2813))) - _523) * 3.0;
    float _4593 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0));
    float _2836 = (isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0))) * cbInstanceData._m0[_629 + 6u].w;
    float _2845 = (roundEven(cbMatDynParam._m0[0u].y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2845 * (_2792 ? _2801 : (_2801 + (cbSceneParam._m0[72u].w * _2774)));
    SV_Target.y = _2845 * (_2792 ? _2802 : (_2802 + (cbSceneParam._m0[72u].w * _2776)));
    SV_Target.z = _2845 * (_2792 ? _2803 : (_2803 + (cbSceneParam._m0[72u].w * _2778)));
    SV_Target.w = _2836;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2836;
}


