#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_river_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_river_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_river_snp_0_Texture2D_3;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1063;
float _3714;
float _3715;
float _3716;
float _3717;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _199 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _200 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _201 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _207 = inversesqrt(dot(vec3(_199, _200, _201), vec3(_199, _200, _201)));
    float _208 = _207 * _199;
    float _209 = _207 * _200;
    float _210 = _207 * _201;
    float _214 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _215 = _214 * NORMAL.x;
    float _216 = _214 * NORMAL.y;
    float _217 = _214 * NORMAL.z;
    float _221 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _229;
    float _230;
    float _231;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _229 = (-0.0) - _215;
        _230 = (-0.0) - _216;
        _231 = (-0.0) - _217;
    }
    else
    {
        _229 = _215;
        _230 = _216;
        _231 = _217;
    }
    float _247 = cbMtdParam._m0[10u].x * cbPerFrame._m0[22u].x;
    float _258 = (cbMtdParam._m0[12u].w * _247) + TEXCOORD;
    float _259 = (cbMtdParam._m0[13u].x * _247) + TEXCOORD_1;
    vec4 _272 = texture(sampler2D(M_Water_river_snp_0_Texture2D_3, SS_WrapLinear), vec2((_258 * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (_259 * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _279 = (cbPerFrame._m0[22u].x * 2.0) * (cbMtdParam._m0[11u].x * cbMtdParam._m0[10u].x);
    float _285 = (_272.y * 0.5) + (-0.25);
    float _286 = (-0.0) - ((_272.x * 0.5) + (-0.25));
    float _287 = fract(_279);
    float _289 = fract(_279 + 0.5);
    float _301 = abs((_287 * 2.0) + (-1.0));
    vec4 _310 = texture(sampler2D(M_Water_river_snp_0_Texture2D_3, SS_WrapLinear), vec2((((_287 * _286) + _258) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((_285 * _287) + _259) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _312 = _310.z;
    vec4 _338 = texture(sampler2D(M_Water_river_snp_0_Texture2D_0, SS_BumpMap), vec2((((cbMtdParam._m0[12u].y * _247) + TEXCOORD) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((cbMtdParam._m0[12u].z * _247) + TEXCOORD_1) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _342 = _338.z;
    vec4 _359 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _361 = _359.x;
    bool _368 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _384 = ((_368 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _361)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _361))) - POSITION_1.w) * 0.833333313465118408203125;
    float _3726 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _393 = ((((texture(sampler2D(M_Water_river_snp_0_Texture2D_3, SS_WrapLinear), vec2((((_289 * _286) + _258) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((_285 * _289) + _259) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w)).z - _312) * _301) + _312) * (1.0 - TEXCOORD_3.y)) * (((TEXCOORD_3.x + 1.0) + (exp2(log2(((0.502016007900238037109375 - _342) * TEXCOORD_3.y) + _342) * cbMtdParam._m0[10u].z) * cbMtdParam._m0[10u].w)) - (isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0))));
    float _394 = _393 + cbMtdParam._m0[9u].x;
    float _395 = _393 + cbMtdParam._m0[9u].y;
    float _396 = _393 + cbMtdParam._m0[9u].z;
    vec4 _418 = texture(sampler2D(M_Water_river_snp_0_Texture2D_1, SS_BumpMap), vec2((((cbMtdParam._m0[11u].w * _247) + TEXCOORD) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[12u].x * _247) + TEXCOORD_1) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _422 = _418.x * 2.0;
    float _423 = _418.y * 2.0;
    float _424 = _422 + (-1.0);
    float _425 = _423 + (-1.0);
    float _426 = dot(vec2(_424, _425), vec2(_424, _425));
    float _3737 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _431 = sqrt(1.0 - (isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0))));
    vec4 _442 = texture(sampler2D(M_Water_river_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _258) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _259) + cbTextureTilingScale._m0[2u].w));
    float _449 = (_442.y * 0.5) + (-0.25);
    float _450 = (-0.0) - ((_442.x * 0.5) + (-0.25));
    vec4 _473 = texture(sampler2D(M_Water_river_snp_0_Texture2D_0, SS_BumpMap), vec2((((_287 * _450) + _258) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_449 * _287) + _259) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _475 = _473.x;
    float _476 = _473.y;
    vec4 _477 = texture(sampler2D(M_Water_river_snp_0_Texture2D_0, SS_BumpMap), vec2((((_289 * _450) + _258) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_449 * _289) + _259) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _487 = (((_477.x - _475) * _301) + _475) + _338.x;
    float _496 = (_422 + (-1.60000002384185791015625)) + ((_487 + ((1.00403201580047607421875 - _487) * TEXCOORD_3.y)) * 0.60000002384185791015625);
    float _497 = (((_477.y - _476) * _301) + _476) + _338.y;
    float _503 = (_423 + (-1.60000002384185791015625)) + ((_497 + ((1.00403201580047607421875 - _497) * TEXCOORD_3.y)) * 0.60000002384185791015625);
    float _506 = fma(_431, _229, fma(_503, _221 * TANGENT.x, _496 * _208));
    float _509 = fma(_431, _230, fma(_503, _221 * TANGENT.y, _496 * _209));
    float _512 = fma(_431, _231, fma(_503, _221 * TANGENT.z, _496 * _210));
    float _516 = inversesqrt(dot(vec3(_506, _509, _512), vec3(_506, _509, _512)));
    float _517 = _516 * _506;
    float _518 = _516 * _509;
    float _519 = _516 * _512;
    float _3748 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _3759 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _3770 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _527 = _368 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _568 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _578 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _568);
    float _579 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _568);
    float _580 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _568);
    float _584 = inversesqrt(dot(vec3(_578, _579, _580), vec3(_578, _579, _580)));
    float _585 = _578 * _584;
    float _586 = _579 * _584;
    float _587 = _580 * _584;
    vec4 _592 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _594 = _592.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _743 = sqrt(((_578 * _578) + (_579 * _579)) + (_580 * _580));
        float _749 = (cbMatDynParam._m0[5u].x * _743) + cbMatDynParam._m0[5u].y;
        float _3781 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
        float _750 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
        float _754 = (cbMatDynParam._m0[5u].z * _743) + cbMatDynParam._m0[5u].w;
        float _3792 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0))) - _750)) + _750) < ((_594 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _605 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _606 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _626 = fma(_519, cbSceneParam._m0[5u].z, fma(_518, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _517));
    float _629 = fma(_519, cbSceneParam._m0[6u].z, fma(_518, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _517));
    float _632 = fma(_519, cbSceneParam._m0[7u].z, fma(_518, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _517));
    uint _645 = uint(roundEven(NORMAL.w)) * 13u;
    uint _646 = _645 + 9u;
    uint _647 = _646 + uint(cbMatDynParam._m0[0u].w);
    float _653 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0)))) * cbInstanceData._m0[_647].x;
    float _654 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0)))) * cbInstanceData._m0[_647].y;
    float _655 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0)))) * cbInstanceData._m0[_647].z;
    float _3803 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _656 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
    float _3814 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _657 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
    float _3825 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _658 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
    vec4 _667 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _605, cbSceneParam._m0[86u].y * _606));
    float _670 = _667.x * TEXCOORD_3.w;
    float _671 = dot(vec3(_517, _518, _519), vec3(_585, _586, _587));
    float _674 = _671 * 2.0;
    float _678 = (_674 * _517) - _585;
    float _679 = (_674 * _518) - _586;
    float _680 = (_674 * _519) - _587;
    float _684 = abs(dot(vec3(_585, _586, _587), vec3(_517, _518, _519)));
    float _3836 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _685 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
    float _698 = exp2(log2(1.0 - (_685 * 0.999000012874603271484375)) * 5.0);
    float _724 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _728 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _732 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1062;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _788 = fma(_732, cbModelParam._m0[26u].z, fma(_728, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _724));
        float _792 = fma(_732, cbModelParam._m0[27u].z, fma(_728, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _724));
        float _796 = fma(_732, cbModelParam._m0[28u].z, fma(_728, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _724));
        float _820 = _724 + _517;
        float _821 = _728 + _518;
        float _822 = _732 + _519;
        float _832 = fma(_822, cbModelParam._m0[26u].z, fma(_821, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _820)) - _788;
        float _833 = fma(_822, cbModelParam._m0[27u].z, fma(_821, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _820)) - _792;
        float _834 = fma(_822, cbModelParam._m0[28u].z, fma(_821, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _820)) - _796;
        float _838 = inversesqrt(dot(vec3(_832, _833, _834), vec3(_832, _833, _834)));
        float _851 = ((_838 * _832) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_788 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _852 = ((_838 * _833) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_792 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _853 = ((_838 * _834) / cbModelParam._m0[34u].z) + ((((((_796 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _856 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_851, _852, _853), 0.0);
        vec4 _863 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_851, _852, _853), 0.0);
        vec4 _870 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_851, _852, _853), 0.0);
        vec4 _877 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_851, _852, _853), 0.0);
        float _890 = exp2((_856.w + (-0.5)) * 20.0) * 2.0;
        float _891 = _890 * (_856.x + (-0.5));
        float _892 = _890 * (_856.y + (-0.5));
        float _893 = _890 * (_856.z + (-0.5));
        float _900 = exp2((_863.w + (-0.5)) * 20.0) * 2.0;
        float _901 = _900 * (_863.x + (-0.5));
        float _902 = _900 * (_863.y + (-0.5));
        float _903 = _900 * (_863.z + (-0.5));
        float _910 = exp2((_870.w + (-0.5)) * 20.0) * 2.0;
        float _911 = _910 * (_870.x + (-0.5));
        float _912 = _910 * (_870.y + (-0.5));
        float _913 = _910 * (_870.z + (-0.5));
        float _920 = exp2((_877.w + (-0.5)) * 20.0) * 2.0;
        float _921 = _920 * (_877.x + (-0.5));
        float _922 = _920 * (_877.y + (-0.5));
        float _923 = _920 * (_877.z + (-0.5));
        float _924 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _925 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _926 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _927 = _891 * 0.5;
        float _928 = _901 * 0.5;
        float _929 = _911 * 0.5;
        float _930 = dot(vec3(_927, _928, _929), vec3(_927, _928, _929));
        float _935 = (_930 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_930);
        float _944 = (dot(vec3(_517, _518, _519), vec3(_935 * _927, _935 * _928, _935 * _929)) + 1.0) * 0.5;
        float _3862 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _954 = sqrt(((_928 * _928) + (_927 * _927)) + (_929 * _929)) / (_924 + 9.9999997473787516355514526367188e-06);
        float _3873 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _955 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _956 = _955 * 2.0;
        float _960 = (1.0 - _955) / (_955 + 1.0);
        float _3884 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _961 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _970 = ((((1.0 - _961) * (_956 + 2.0)) * exp2(log2(isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * (_956 + 1.0))) + _961) * _924;
        float _971 = _892 * 0.5;
        float _972 = _902 * 0.5;
        float _973 = _912 * 0.5;
        float _974 = dot(vec3(_971, _972, _973), vec3(_971, _972, _973));
        float _979 = (_974 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_974);
        float _987 = (dot(vec3(_517, _518, _519), vec3(_979 * _971, _979 * _972, _979 * _973)) + 1.0) * 0.5;
        float _3895 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _996 = sqrt(((_972 * _972) + (_971 * _971)) + (_973 * _973)) / (_925 + 9.9999997473787516355514526367188e-06);
        float _3906 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _997 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _998 = _997 * 2.0;
        float _1002 = (1.0 - _997) / (_997 + 1.0);
        float _3917 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1003 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
        float _1012 = ((((1.0 - _1003) * (_998 + 2.0)) * exp2(log2(isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0))) * (_998 + 1.0))) + _1003) * _925;
        float _1013 = _893 * 0.5;
        float _1014 = _903 * 0.5;
        float _1015 = _913 * 0.5;
        float _1016 = dot(vec3(_1013, _1014, _1015), vec3(_1013, _1014, _1015));
        float _1021 = (_1016 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1016);
        float _1029 = (dot(vec3(_517, _518, _519), vec3(_1021 * _1013, _1021 * _1014, _1021 * _1015)) + 1.0) * 0.5;
        float _3928 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1038 = sqrt(((_1014 * _1014) + (_1013 * _1013)) + (_1015 * _1015)) / (_926 + 9.9999997473787516355514526367188e-06);
        float _3939 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1039 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
        float _1040 = _1039 * 2.0;
        float _1044 = (1.0 - _1039) / (_1039 + 1.0);
        float _3950 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1045 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
        float _1054 = ((((1.0 - _1045) * (_1040 + 2.0)) * exp2(log2(isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0))) * (_1040 + 1.0))) + _1045) * _926;
        _1062 = _893;
        _1064 = _892;
        _1065 = _891;
        _1066 = _903;
        _1067 = _902;
        _1068 = _901;
        _1069 = _913;
        _1070 = _912;
        _1071 = _911;
        _1072 = _926;
        _1073 = _925;
        _1074 = _924;
        _1075 = cbModelParam._m0[36u].z * (isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0)));
        _1076 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0)));
        _1077 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0)));
    }
    else
    {
        _1062 = _1063;
        _1064 = _1063;
        _1065 = _1063;
        _1066 = _1063;
        _1067 = _1063;
        _1068 = _1063;
        _1069 = _1063;
        _1070 = _1063;
        _1071 = _1063;
        _1072 = _1063;
        _1073 = _1063;
        _1074 = _1063;
        _1075 = 0.0;
        _1076 = 0.0;
        _1077 = 0.0;
    }
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1106 = fma(_732, cbModelParam._m0[30u].z, fma(_728, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _724));
        float _1110 = fma(_732, cbModelParam._m0[31u].z, fma(_728, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _724));
        float _1114 = fma(_732, cbModelParam._m0[32u].z, fma(_728, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _724));
        float _1137 = _724 + _517;
        float _1138 = _728 + _518;
        float _1139 = _732 + _519;
        float _1149 = fma(_1139, cbModelParam._m0[30u].z, fma(_1138, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1137)) - _1106;
        float _1150 = fma(_1139, cbModelParam._m0[31u].z, fma(_1138, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1137)) - _1110;
        float _1151 = fma(_1139, cbModelParam._m0[32u].z, fma(_1138, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1137)) - _1114;
        float _1155 = inversesqrt(dot(vec3(_1149, _1150, _1151), vec3(_1149, _1150, _1151)));
        float _1168 = ((_1155 * _1149) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1106 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1169 = ((_1155 * _1150) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1110 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1170 = ((_1155 * _1151) / cbModelParam._m0[35u].z) + ((((((_1114 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1172 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        vec4 _1179 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        vec4 _1186 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        vec4 _1193 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        float _1205 = exp2((_1172.w + (-0.5)) * 20.0) * 2.0;
        float _1206 = _1205 * (_1172.x + (-0.5));
        float _1207 = _1205 * (_1172.y + (-0.5));
        float _1208 = _1205 * (_1172.z + (-0.5));
        float _1215 = exp2((_1179.w + (-0.5)) * 20.0) * 2.0;
        float _1216 = _1215 * (_1179.x + (-0.5));
        float _1217 = _1215 * (_1179.y + (-0.5));
        float _1218 = _1215 * (_1179.z + (-0.5));
        float _1225 = exp2((_1186.w + (-0.5)) * 20.0) * 2.0;
        float _1226 = _1225 * (_1186.x + (-0.5));
        float _1227 = _1225 * (_1186.y + (-0.5));
        float _1228 = _1225 * (_1186.z + (-0.5));
        float _1235 = exp2((_1193.w + (-0.5)) * 20.0) * 2.0;
        float _1236 = _1235 * (_1193.x + (-0.5));
        float _1237 = _1235 * (_1193.y + (-0.5));
        float _1238 = _1235 * (_1193.z + (-0.5));
        float _1239 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1240 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1241 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1242 = _1206 * 0.5;
        float _1243 = _1216 * 0.5;
        float _1244 = _1226 * 0.5;
        float _1245 = dot(vec3(_1242, _1243, _1244), vec3(_1242, _1243, _1244));
        float _1250 = (_1245 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1245);
        float _1258 = (dot(vec3(_517, _518, _519), vec3(_1250 * _1242, _1250 * _1243, _1250 * _1244)) + 1.0) * 0.5;
        float _3991 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1267 = sqrt(((_1243 * _1243) + (_1242 * _1242)) + (_1244 * _1244)) / (_1239 + 9.9999997473787516355514526367188e-06);
        float _4002 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _1269 = _1268 * 2.0;
        float _1273 = (1.0 - _1268) / (_1268 + 1.0);
        float _4013 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _1283 = ((((1.0 - _1274) * (_1269 + 2.0)) * exp2(log2(isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * (_1269 + 1.0))) + _1274) * _1239;
        float _1284 = _1207 * 0.5;
        float _1285 = _1217 * 0.5;
        float _1286 = _1227 * 0.5;
        float _1287 = dot(vec3(_1284, _1285, _1286), vec3(_1284, _1285, _1286));
        float _1292 = (_1287 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1287);
        float _1300 = (dot(vec3(_517, _518, _519), vec3(_1292 * _1284, _1292 * _1285, _1292 * _1286)) + 1.0) * 0.5;
        float _4024 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1309 = sqrt(((_1285 * _1285) + (_1284 * _1284)) + (_1286 * _1286)) / (_1240 + 9.9999997473787516355514526367188e-06);
        float _4035 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _1311 = _1310 * 2.0;
        float _1315 = (1.0 - _1310) / (_1310 + 1.0);
        float _4046 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
        float _1325 = ((((1.0 - _1316) * (_1311 + 2.0)) * exp2(log2(isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0))) * (_1311 + 1.0))) + _1316) * _1240;
        float _1326 = _1208 * 0.5;
        float _1327 = _1218 * 0.5;
        float _1328 = _1228 * 0.5;
        float _1329 = dot(vec3(_1326, _1327, _1328), vec3(_1326, _1327, _1328));
        float _1334 = (_1329 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1329);
        float _1342 = (dot(vec3(_517, _518, _519), vec3(_1334 * _1326, _1334 * _1327, _1334 * _1328)) + 1.0) * 0.5;
        float _4057 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1351 = sqrt(((_1327 * _1327) + (_1326 * _1326)) + (_1328 * _1328)) / (_1241 + 9.9999997473787516355514526367188e-06);
        float _4068 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _1353 = _1352 * 2.0;
        float _1357 = (1.0 - _1352) / (_1352 + 1.0);
        float _4079 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
        float _1367 = ((((1.0 - _1358) * (_1353 + 2.0)) * exp2(log2(isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))) * (_1353 + 1.0))) + _1358) * _1241;
        _1375 = _1208;
        _1376 = _1207;
        _1377 = _1206;
        _1378 = _1218;
        _1379 = _1217;
        _1380 = _1216;
        _1381 = _1228;
        _1382 = _1227;
        _1383 = _1226;
        _1384 = _1241;
        _1385 = _1240;
        _1386 = _1239;
        _1387 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0)));
        _1388 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0)));
        _1389 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0)));
    }
    else
    {
        _1375 = _1063;
        _1376 = _1063;
        _1377 = _1063;
        _1378 = _1063;
        _1379 = _1063;
        _1380 = _1063;
        _1381 = _1063;
        _1382 = _1063;
        _1383 = _1063;
        _1384 = _1063;
        _1385 = _1063;
        _1386 = _1063;
        _1387 = 0.0;
        _1388 = 0.0;
        _1389 = 0.0;
    }
    float _1399 = (cbModelParam._m0[1u].x * (_1387 - _1075)) + _1075;
    float _1400 = (cbModelParam._m0[1u].x * (_1388 - _1076)) + _1076;
    float _1401 = (cbModelParam._m0[1u].x * (_1389 - _1077)) + _1077;
    float _1422 = fma(_1401, cbSceneParam._m0[89u].z, fma(_1400, cbSceneParam._m0[89u].y, _1399 * cbSceneParam._m0[89u].x));
    float _1425 = fma(_1401, cbSceneParam._m0[90u].z, fma(_1400, cbSceneParam._m0[90u].y, _1399 * cbSceneParam._m0[90u].x));
    float _1428 = fma(_1401, cbSceneParam._m0[91u].z, fma(_1400, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1399));
    float _1443 = _678 * 0.5;
    float _1444 = _679 * 0.5;
    float _1445 = _680 * 0.5;
    float _1446 = dot(vec4(_1443, _1444, _1445, 1.0), vec4(_1377, _1380, _1383, _1386));
    float _1449 = dot(vec4(_1443, _1444, _1445, 1.0), vec4(_1376, _1379, _1382, _1385));
    float _1452 = dot(vec4(_1443, _1444, _1445, 1.0), vec4(_1375, _1378, _1381, _1384));
    float _1486;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1459 = dot(vec4(_1443, _1444, _1445, 1.0), vec4(_1062, _1066, _1069, _1072));
        float _1463 = dot(vec4(_1443, _1444, _1445, 1.0), vec4(_1064, _1067, _1070, _1073));
        float _1467 = dot(vec4(_1443, _1444, _1445, 1.0), vec4(_1065, _1068, _1071, _1074));
        float _1474 = dot(vec4(cbModelParam._m0[39u]), vec4(_1443, _1444, _1445, 1.0));
        _1486 = dot(vec3(isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0)), isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0)), isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1474) ? 0.0 : (isnan(0.0) ? _1474 : max(0.0, _1474))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1486 = 1.0;
    }
    float _1497;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1488 = dot(vec4(cbModelParam._m0[40u]), vec4(_1443, _1444, _1445, 1.0));
        _1497 = dot(vec3(isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0)), isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0)), isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1488) ? 0.0 : (isnan(0.0) ? _1488 : max(0.0, _1488))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1497 = 1.0;
    }
    float _1501 = (_1497 * cbModelParam._m0[1u].x) + (_1486 * (1.0 - cbModelParam._m0[1u].x));
    float _1510 = isnan(0.0) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? 0.0 : min(cbModelParam._m0[25u].z, 0.0));
    float _1591;
    float _1593;
    float _1595;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1558 = fma(_732, cbModelParam._m0[13u].z, fma(_728, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _724)) + cbModelParam._m0[13u].w;
        float _1562 = fma(_732, cbModelParam._m0[14u].z, fma(_728, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _724)) + cbModelParam._m0[14u].w;
        float _1566 = fma(_732, cbModelParam._m0[15u].z, fma(_728, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _724)) + cbModelParam._m0[15u].w;
        float _1569 = fma(_680, cbModelParam._m0[13u].z, fma(_679, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _678));
        float _1572 = fma(_680, cbModelParam._m0[14u].z, fma(_679, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _678));
        float _1575 = fma(_680, cbModelParam._m0[15u].z, fma(_679, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _678));
        float _1601;
        if (_1569 > 0.0)
        {
            _1601 = abs((1.0 - _1558) / _1569);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1569 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1558 + 1.0) / _1569);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1601 = frontier_phi_19_17_ladder;
        }
        float _1875;
        if (_1572 > 0.0)
        {
            _1875 = abs((1.0 - _1562) / _1572);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1572 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1562 + 1.0) / _1572);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1875 = frontier_phi_28_24_ladder;
        }
        float _2119;
        if (_1575 > 0.0)
        {
            _2119 = abs((1.0 - _1566) / _1575);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1575 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1566 + 1.0) / _1575);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2119 = frontier_phi_40_35_ladder;
        }
        float _2121 = isnan(_1875) ? _1601 : (isnan(_1601) ? _1875 : min(_1601, _1875));
        float _2122 = isnan(_2119) ? _2121 : (isnan(_2121) ? _2119 : min(_2121, _2119));
        float _2126 = (_2122 * _1569) + _1558;
        float _2127 = (_2122 * _1572) + _1562;
        float _2128 = (_2122 * _1575) + _1566;
        float _2129 = _2122 * 9.9999997473787516355514526367188e-05;
        float _2131 = (-1.0) - _2129;
        float _2133 = _2129 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2128 > _2133) || ((_2128 < _2131) || ((_2127 > _2133) || ((_2127 < _2131) || ((_2126 < _2131) || (_2126 > _2133))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2251 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2128, cbModelParam._m0[9u].z, fma(_2127, cbModelParam._m0[9u].y, _2126 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2128, cbModelParam._m0[10u].z, fma(_2127, cbModelParam._m0[10u].y, _2126 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2128, cbModelParam._m0[11u].z, fma(_2127, cbModelParam._m0[11u].y, _2126 * cbModelParam._m0[11u].x))), _1510);
            frontier_phi_18_40_ladder = _2251.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2251.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2251.x * cbModelParam._m0[1u].y;
        }
        _1591 = frontier_phi_18_40_ladder_2;
        _1593 = frontier_phi_18_40_ladder_1;
        _1595 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1579 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_678, _679, _680), _1510);
        _1591 = _1579.x * cbModelParam._m0[1u].y;
        _1593 = _1579.y * cbModelParam._m0[1u].y;
        _1595 = _1579.z * cbModelParam._m0[1u].y;
    }
    float _1598 = isnan(0.0) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? 0.0 : min(cbModelParam._m0[25u].w, 0.0));
    float _1690;
    float _1692;
    float _1694;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1654 = fma(_732, cbModelParam._m0[21u].z, fma(_728, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _724)) + cbModelParam._m0[21u].w;
        float _1658 = fma(_732, cbModelParam._m0[22u].z, fma(_728, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _724)) + cbModelParam._m0[22u].w;
        float _1662 = fma(_732, cbModelParam._m0[23u].z, fma(_728, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _724)) + cbModelParam._m0[23u].w;
        float _1665 = fma(_680, cbModelParam._m0[21u].z, fma(_679, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _678));
        float _1668 = fma(_680, cbModelParam._m0[22u].z, fma(_679, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _678));
        float _1671 = fma(_680, cbModelParam._m0[23u].z, fma(_679, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _678));
        float _1880;
        if (_1665 > 0.0)
        {
            _1880 = abs((1.0 - _1654) / _1665);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1665 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1654 + 1.0) / _1665);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1880 = frontier_phi_30_26_ladder;
        }
        float _2146;
        if (_1668 > 0.0)
        {
            _2146 = abs((1.0 - _1658) / _1668);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1668 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1658 + 1.0) / _1668);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2146 = frontier_phi_42_37_ladder;
        }
        float _2349;
        if (_1671 > 0.0)
        {
            _2349 = abs((1.0 - _1662) / _1671);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1671 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1662 + 1.0) / _1671);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2349 = frontier_phi_51_48_ladder;
        }
        float _2351 = isnan(_2146) ? _1880 : (isnan(_1880) ? _2146 : min(_1880, _2146));
        float _2352 = isnan(_2349) ? _2351 : (isnan(_2351) ? _2349 : min(_2351, _2349));
        float _2356 = (_2352 * _1665) + _1654;
        float _2357 = (_2352 * _1668) + _1658;
        float _2358 = (_2352 * _1671) + _1662;
        float _2359 = _2352 * 9.9999997473787516355514526367188e-05;
        float _2360 = (-1.0) - _2359;
        float _2362 = _2359 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2358 > _2362) || ((_2358 < _2360) || ((_2357 > _2362) || ((_2357 < _2360) || ((_2356 < _2360) || (_2356 > _2362))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2756 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2358, cbModelParam._m0[17u].z, fma(_2357, cbModelParam._m0[17u].y, _2356 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2358, cbModelParam._m0[18u].z, fma(_2357, cbModelParam._m0[18u].y, _2356 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2358, cbModelParam._m0[19u].z, fma(_2357, cbModelParam._m0[19u].y, _2356 * cbModelParam._m0[19u].x))), _1598);
            frontier_phi_27_51_ladder = _2756.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2756.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2756.x * cbModelParam._m0[1u].z;
        }
        _1690 = frontier_phi_27_51_ladder_2;
        _1692 = frontier_phi_27_51_ladder_1;
        _1694 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1674 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_678, _679, _680), _1598);
        _1690 = _1674.x * cbModelParam._m0[1u].z;
        _1692 = _1674.y * cbModelParam._m0[1u].z;
        _1694 = _1674.z * cbModelParam._m0[1u].z;
    }
    float _1706 = (((1.0 - _698) * 0.039999999105930328369140625) + _698) * _670;
    float _1707 = _1706 * ((cbModelParam._m0[1u].w * (_1690 - _1591)) + _1591);
    float _1708 = _1706 * ((cbModelParam._m0[1u].w * (_1692 - _1593)) + _1593);
    float _1709 = _1706 * ((cbModelParam._m0[1u].w * (_1694 - _1595)) + _1595);
    float _1712 = fma(_1709, cbSceneParam._m0[89u].z, fma(_1708, cbSceneParam._m0[89u].y, _1707 * cbSceneParam._m0[89u].x));
    float _1715 = fma(_1709, cbSceneParam._m0[90u].z, fma(_1708, cbSceneParam._m0[90u].y, _1707 * cbSceneParam._m0[90u].x));
    float _1718 = fma(_1709, cbSceneParam._m0[91u].z, fma(_1708, cbSceneParam._m0[91u].y, _1707 * cbSceneParam._m0[91u].x));
    float _1729 = _605 / cbSceneParam._m0[86u].x;
    float _4205 = isnan(0.0) ? cbSceneParam._m0[88u].z : (isnan(cbSceneParam._m0[88u].z) ? 0.0 : max(cbSceneParam._m0[88u].z, 0.0));
    float _1735 = (isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0))) * 5.0;
    float _1739 = 0.99999988079071044921875 / (_527 + 10.0);
    float _1741 = _1739 * dot(vec3(_517, _518, _519), vec3(1.0, 0.0, 0.0));
    vec4 _1751 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1741 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1741 + _1729) * cbSceneParam._m0[86u].x, _606), _1735).w) + _1729) * cbSceneParam._m0[86u].x, _606), _1735);
    float _1767 = 1.0 - _1751.w;
    vec4 _1775 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_605, _606));
    float _1777 = _1775.w;
    float _1789 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1777);
    float _1790 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1777);
    float _1791 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1777);
    uint _1792 = _645 + 5u;
    uvec4 _1795 = floatBitsToUint(cbInstanceData._m0[_1792]);
    uint _1797 = _1795.x * 14u;
    uint _1798 = _1797 + 13u;
    float _1805 = _670 + (-1.0);
    float _1810 = (cbLight._m0[_1798].x * _1805) + 1.0;
    float _1811 = (cbLight._m0[_1798].y * _1805) + 1.0;
    float _1812 = (cbLight._m0[_1798].z * _1805) + 1.0;
    float _1813 = (cbLight._m0[_1798].w * _1805) + 1.0;
    uint _1814 = _1797 + 5u;
    float _1820 = isnan(1.0) ? _1811 : (isnan(_1811) ? 1.0 : min(_1811, 1.0));
    uint _1824 = _1797 + 4u;
    float _1834 = isnan(1.0) ? _1810 : (isnan(_1810) ? 1.0 : min(_1810, 1.0));
    uint _1838 = _1797 | 1u;
    float _1849 = dot(vec3(cbLight._m0[_1797].xyz), vec3(_517, _518, _519));
    float _1852 = dot(vec3(cbLight._m0[_1838].xyz), vec3(_517, _518, _519));
    float _4226 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
    float _4237 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
    float _1857 = (isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0))) * 0.3183098733425140380859375;
    float _1859 = (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0))) * 0.3183098733425140380859375;
    float _1866 = ((cbLight._m0[_1814].x * _1820) * _1859) + (((cbLight._m0[_1824].x * _1789) * _1834) * _1857);
    float _1867 = ((_1820 * cbLight._m0[_1814].y) * _1859) + (((cbLight._m0[_1824].y * _1790) * _1834) * _1857);
    float _1868 = ((_1820 * cbLight._m0[_1814].z) * _1859) + (((cbLight._m0[_1824].z * _1791) * _1834) * _1857);
    uvec4 _1872 = floatBitsToUint(cbLight._m0[_1797 + 12u]);
    bool _1874 = _1872.x == 0u;
    float _1885;
    float _1887;
    float _1889;
    if (_1874)
    {
        _1885 = _1866;
        _1887 = _1867;
        _1889 = _1868;
    }
    else
    {
        uint _1893 = _1797 + 6u;
        float _1909 = (dot(vec3(cbLight._m0[_1797 + 2u].xyz), vec3(_517, _518, _519)) * 0.5) + 0.5;
        float _1910 = _1909 * _1909;
        float _4248 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
        float _1911 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
        float _1912 = isnan(1.0) ? _1812 : (isnan(_1812) ? 1.0 : min(_1812, 1.0));
        _1885 = (((cbLight._m0[_1893].x * 0.3183098733425140380859375) * _1911) * _1912) + _1866;
        _1887 = (((cbLight._m0[_1893].y * 0.3183098733425140380859375) * _1911) * _1912) + _1867;
        _1889 = (((cbLight._m0[_1893].z * 0.3183098733425140380859375) * _1911) * _1912) + _1868;
    }
    bool _1892 = _1872.y == 0u;
    float _1930;
    float _1932;
    float _1934;
    if (_1892)
    {
        _1930 = _1885;
        _1932 = _1887;
        _1934 = _1889;
    }
    else
    {
        uint _2090 = _1797 + 7u;
        float _2106 = (dot(vec3(cbLight._m0[_1797 + 3u].xyz), vec3(_517, _518, _519)) * 0.5) + 0.5;
        float _2107 = _2106 * _2106;
        float _4264 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
        float _2108 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _2109 = isnan(1.0) ? _1813 : (isnan(_1813) ? 1.0 : min(_1813, 1.0));
        _1930 = (((cbLight._m0[_2090].x * 0.3183098733425140380859375) * _2108) * _2109) + _1885;
        _1932 = (((cbLight._m0[_2090].y * 0.3183098733425140380859375) * _2108) * _2109) + _1887;
        _1934 = (((cbLight._m0[_2090].z * 0.3183098733425140380859375) * _2108) * _2109) + _1889;
    }
    uint _1937 = _1797 + 8u;
    float _1949 = 1.0 - (sqrt(1.0 - (0.07500000298023223876953125 / cbLight._m0[_1797].w)) * 0.949999988079071044921875);
    float _1950 = _1949 * _1949;
    float _1951 = cbLight._m0[_1797].x + _585;
    float _1952 = cbLight._m0[_1797].y + _586;
    float _1953 = cbLight._m0[_1797].z + _587;
    float _1957 = inversesqrt(dot(vec3(_1951, _1952, _1953), vec3(_1951, _1952, _1953)));
    float _1958 = _1957 * _1951;
    float _1959 = _1957 * _1952;
    float _1960 = _1957 * _1953;
    float _1961 = dot(vec3(_517, _518, _519), vec3(cbLight._m0[_1797].xyz));
    float _4280 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
    float _1964 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
    float _4291 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _1965 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
    float _1966 = dot(vec3(_517, _518, _519), vec3(_1958, _1959, _1960));
    float _4302 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
    float _1969 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
    float _1970 = dot(vec3(cbLight._m0[_1797].xyz), vec3(_1958, _1959, _1960));
    float _4313 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
    float _1974 = _1950 * _1950;
    float _1978 = ((_1969 * _1969) * (_1974 + (-1.0))) + 1.0;
    float _1989 = (exp2(log2(1.0 - (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1990 = 1.0 - _1950;
    float _2001 = (0.5 / (((_1965 * ((_1964 * _1990) + _1950)) + 9.9999999392252902907785028219223e-09) + (((_1965 * _1990) + _1950) * _1964))) * _1964;
    float _4324 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
    float _2003 = (isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * (_1974 / ((_1978 * _1978) * 3.141590118408203125));
    uint _2017 = _1797 + 9u;
    float _2027 = 1.0 - (sqrt(1.0 - (0.07500000298023223876953125 / cbLight._m0[_1838].w)) * 0.949999988079071044921875);
    float _2028 = _2027 * _2027;
    float _2029 = cbLight._m0[_1838].x + _585;
    float _2030 = cbLight._m0[_1838].y + _586;
    float _2031 = cbLight._m0[_1838].z + _587;
    float _2035 = inversesqrt(dot(vec3(_2029, _2030, _2031), vec3(_2029, _2030, _2031)));
    float _2036 = _2035 * _2029;
    float _2037 = _2035 * _2030;
    float _2038 = _2035 * _2031;
    float _2039 = dot(vec3(_517, _518, _519), vec3(cbLight._m0[_1838].xyz));
    float _4335 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
    float _2042 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
    float _2043 = dot(vec3(_517, _518, _519), vec3(_2036, _2037, _2038));
    float _4346 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
    float _2046 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
    float _2047 = dot(vec3(cbLight._m0[_1838].xyz), vec3(_2036, _2037, _2038));
    float _4357 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
    float _2051 = _2028 * _2028;
    float _2055 = ((_2046 * _2046) * (_2051 + (-1.0))) + 1.0;
    float _2064 = (exp2(log2(1.0 - (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2065 = 1.0 - _2028;
    float _2075 = (0.5 / (((_1965 * ((_2042 * _2065) + _2028)) + 9.9999999392252902907785028219223e-09) + (((_1965 * _2065) + _2028) * _2042))) * _2042;
    float _4368 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
    float _2077 = (isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) * (_2051 / ((_2055 * _2055) * 3.141590118408203125));
    float _2087 = (((_2064 * cbLight._m0[_2017].x) * _2077) * _1820) + ((((cbLight._m0[_1937].x * _1789) * _1989) * _2003) * _1834);
    float _2088 = (((_2064 * cbLight._m0[_2017].y) * _2077) * _1820) + ((((cbLight._m0[_1937].y * _1790) * _1989) * _2003) * _1834);
    float _2089 = (((_2064 * cbLight._m0[_2017].z) * _2077) * _1820) + ((((cbLight._m0[_1937].z * _1791) * _1989) * _2003) * _1834);
    float _2151;
    float _2153;
    float _2155;
    if (_1874)
    {
        _2151 = _2087;
        _2153 = _2088;
        _2155 = _2089;
    }
    else
    {
        uint _2157 = _1797 + 2u;
        uint _2161 = _1797 + 10u;
        float _2174 = 1.0 - (sqrt(1.0 - (0.07500000298023223876953125 / cbLight._m0[_2157].w)) * 0.949999988079071044921875);
        float _2175 = _2174 * _2174;
        float _2176 = cbLight._m0[_2157].x + _585;
        float _2177 = cbLight._m0[_2157].y + _586;
        float _2178 = cbLight._m0[_2157].z + _587;
        float _2182 = inversesqrt(dot(vec3(_2176, _2177, _2178), vec3(_2176, _2177, _2178)));
        float _2183 = _2182 * _2176;
        float _2184 = _2182 * _2177;
        float _2185 = _2182 * _2178;
        float _2186 = dot(vec3(_517, _518, _519), vec3(cbLight._m0[_2157].xyz));
        float _4379 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
        float _2189 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
        float _2190 = dot(vec3(_517, _518, _519), vec3(_2183, _2184, _2185));
        float _4390 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
        float _2193 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
        float _2194 = dot(vec3(cbLight._m0[_2157].xyz), vec3(_2183, _2184, _2185));
        float _4401 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
        float _2198 = _2175 * _2175;
        float _2202 = ((_2193 * _2193) * (_2198 + (-1.0))) + 1.0;
        float _2211 = (exp2(log2(1.0 - (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2212 = 1.0 - _2175;
        float _2222 = (0.5 / (((_1965 * ((_2189 * _2212) + _2175)) + 9.9999999392252902907785028219223e-09) + (((_1965 * _2212) + _2175) * _2189))) * _2189;
        float _4412 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
        float _2224 = (isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0))) * (_2198 / ((_2202 * _2202) * 3.141590118408203125));
        float _2225 = isnan(1.0) ? _1812 : (isnan(_1812) ? 1.0 : min(_1812, 1.0));
        _2151 = (((_2211 * cbLight._m0[_2161].x) * _2224) * _2225) + _2087;
        _2153 = (((_2211 * cbLight._m0[_2161].y) * _2224) * _2225) + _2088;
        _2155 = (((_2211 * cbLight._m0[_2161].z) * _2224) * _2225) + _2089;
    }
    float _2260;
    float _2262;
    float _2264;
    if (_1892)
    {
        _2260 = _2151;
        _2262 = _2153;
        _2264 = _2155;
    }
    else
    {
        uint _2271 = _1797 + 3u;
        uint _2275 = _1797 + 11u;
        float _2288 = 1.0 - (sqrt(1.0 - (0.07500000298023223876953125 / cbLight._m0[_2271].w)) * 0.949999988079071044921875);
        float _2289 = _2288 * _2288;
        float _2290 = cbLight._m0[_2271].x + _585;
        float _2291 = cbLight._m0[_2271].y + _586;
        float _2292 = cbLight._m0[_2271].z + _587;
        float _2296 = inversesqrt(dot(vec3(_2290, _2291, _2292), vec3(_2290, _2291, _2292)));
        float _2297 = _2296 * _2290;
        float _2298 = _2296 * _2291;
        float _2299 = _2296 * _2292;
        float _2300 = dot(vec3(_517, _518, _519), vec3(cbLight._m0[_2271].xyz));
        float _4428 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
        float _2303 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
        float _2304 = dot(vec3(_517, _518, _519), vec3(_2297, _2298, _2299));
        float _4439 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
        float _2307 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
        float _2308 = dot(vec3(cbLight._m0[_2271].xyz), vec3(_2297, _2298, _2299));
        float _4450 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
        float _2312 = _2289 * _2289;
        float _2316 = ((_2307 * _2307) * (_2312 + (-1.0))) + 1.0;
        float _2325 = (exp2(log2(1.0 - (isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2326 = 1.0 - _2289;
        float _2336 = (0.5 / (((_1965 * ((_2303 * _2326) + _2289)) + 9.9999999392252902907785028219223e-09) + (((_1965 * _2326) + _2289) * _2303))) * _2303;
        float _4461 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
        float _2338 = (isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * (_2312 / ((_2316 * _2316) * 3.141590118408203125));
        float _2339 = isnan(1.0) ? _1813 : (isnan(_1813) ? 1.0 : min(_1813, 1.0));
        _2260 = (((_2325 * cbLight._m0[_2275].x) * _2338) * _2339) + _2151;
        _2262 = (((_2325 * cbLight._m0[_2275].y) * _2338) * _2339) + _2153;
        _2264 = (((_2325 * cbLight._m0[_2275].z) * _2338) * _2339) + _2155;
    }
    float _2473;
    float _2475;
    float _2477;
    float _2479;
    float _2481;
    float _2483;
    if (_1795.y == 0u)
    {
        float _2414 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2415 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2414;
        float _2416 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2414;
        float _2417 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2414;
        uvec4 _2429 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2430 = _2429.x;
        uint _2441 = uint((float(_2429.y) * floor(float(uint(cbSceneParam._m0[85u].y * _606) / _2430))) + floor(float(uint(cbSceneParam._m0[85u].x * _605) / _2430)));
        float _2451 = (log2(_2417 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2452 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
        uint _2455 = uint(isnan(14.0) ? _2452 : (isnan(_2452) ? 14.0 : min(_2452, 14.0)));
        uvec4 _2460 = texelFetch(g_lightClusterGridBuffer, int(((_2455 << 2u) + (_2441 << 6u)) >> 2u));
        uint _2461 = _2460.x;
        uint _2462 = _2429.z;
        float _2761;
        float _2763;
        float _2765;
        float _2767;
        float _2769;
        float _2771;
        if (((((1u << ((_2462 >> 4u) & 15u)) + 4294967295u) & _2461) == 0u) || ((_2462 & 240u) == 0u))
        {
            _2761 = 0.0;
            _2763 = 0.0;
            _2765 = 0.0;
            _2767 = 0.0;
            _2769 = 0.0;
            _2771 = 0.0;
        }
        else
        {
            float _2762;
            float _2764;
            float _2766;
            float _2768;
            float _2770;
            float _2772;
            float _2945 = 0.0;
            float _2946 = 0.0;
            float _2947 = 0.0;
            float _2948 = 0.0;
            float _2949 = 0.0;
            float _2950 = 0.0;
            uint _2951 = 0u;
            uint _2960;
            bool _2961;
            for (;;)
            {
                _2960 = texelFetch(g_lightClassification, int((((_2455 << 5u) + (_2441 << 9u)) + (_2951 << 2u)) >> 2u)).x;
                _2961 = _2960 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2961)
                {
                    frontier_phi_68_pred = _2947;
                    frontier_phi_68_pred_1 = _2950;
                    frontier_phi_68_pred_2 = _2949;
                    frontier_phi_68_pred_3 = _2948;
                    frontier_phi_68_pred_4 = _2946;
                    frontier_phi_68_pred_5 = _2945;
                }
                else
                {
                    float _3090;
                    float _3091;
                    float _3092;
                    float _3093;
                    float _3094;
                    float _3095;
                    uint _3096;
                    _3090 = _2945;
                    _3091 = _2946;
                    _3092 = _2947;
                    _3093 = _2948;
                    _3094 = _2949;
                    _3095 = _2950;
                    _3096 = _2960;
                    float _3017;
                    float _3018;
                    float _3019;
                    float _3020;
                    float _3021;
                    float _3022;
                    for (;;)
                    {
                        uint _3100 = uint(findLSB(_3096)) + (_2951 << 5u);
                        uint _3097 = (_3096 + 4294967295u) & _3096;
                        uint _3102 = _3100 * 48u;
                        vec4 _3116 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3102)).x, texelFetch(g_PointLightRenderingBuffer, int(_3102 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3102 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3102 + 3u)).x));
                        uint _3122 = (_3100 * 48u) + 4u;
                        vec4 _3135 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3122)).x, texelFetch(g_PointLightRenderingBuffer, int(_3122 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3122 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3122 + 3u)).x));
                        uint _3141 = (_3100 * 48u) + 8u;
                        vec3 _3152 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3141)).x, texelFetch(g_PointLightRenderingBuffer, int(_3141 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3141 + 2u)).x));
                        float _3156 = _3116.x - _2415;
                        float _3157 = _3116.y - _2416;
                        float _3158 = _3116.z - _2417;
                        float _3159 = dot(vec3(_3156, _3157, _3158), vec3(_3156, _3157, _3158));
                        float _3162 = inversesqrt(_3159);
                        float _3163 = _3162 * _3156;
                        float _3164 = _3162 * _3157;
                        float _3165 = _3162 * _3158;
                        float _3166 = dot(vec3(_626, _629, _632), vec3(_3163, _3164, _3165));
                        float _3171 = 1.0 - (_3159 * _3116.w);
                        float _4487 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0));
                        float _3172 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
                        float _3173 = sqrt(_3159) * _3135.w;
                        float _3176 = 1.39999997615814208984375 / (_3173 + 1.39999997615814208984375);
                        float _3177 = _3176 * _3176;
                        float _3180 = ((1.0 - _3177) * _3166) + _3177;
                        float _3183 = _3173 * _3173;
                        float _3186 = ((isnan(0.0) ? _3180 : (isnan(_3180) ? 0.0 : max(_3180, 0.0))) * _3172) / ((_3183 * 0.699999988079071044921875) + 1.0);
                        float _3190 = (-0.0) - _2415;
                        float _3191 = (-0.0) - _2416;
                        float _3192 = (-0.0) - _2417;
                        float _3196 = inversesqrt(dot(vec3(_3190, _3191, _3192), vec3(_3190, _3191, _3192)));
                        float _3197 = _3196 * _3190;
                        float _3198 = _3196 * _3191;
                        float _3199 = _3196 * _3192;
                        float _3207 = exp2(log2(1.0 / ((_3183 * 3.5) + 5.0)) * 0.25);
                        float _3209 = sqrt(_3207 * _3207);
                        float _3210 = _3209 * _3209;
                        float _3211 = _3210 * _3210;
                        float _3212 = _3197 + _3163;
                        float _3213 = _3198 + _3164;
                        float _3214 = _3199 + _3165;
                        float _3218 = inversesqrt(dot(vec3(_3212, _3213, _3214), vec3(_3212, _3213, _3214)));
                        float _3222 = dot(vec3(_626, _629, _632), vec3(_3197, _3198, _3199));
                        float _4503 = isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0));
                        float _3225 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
                        float _3226 = dot(vec3(_626, _629, _632), vec3(_3218 * _3212, _3218 * _3213, _3218 * _3214));
                        float _4514 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0));
                        float _3229 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
                        float _3233 = ((_3229 * _3229) * (_3211 + (-1.0))) + 1.0;
                        float _3234 = _3176 * _3210;
                        float _3235 = _3234 * _3234;
                        float _3238 = ((1.0 - _3235) * _3166) + _3235;
                        float _4525 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0));
                        float _3239 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
                        float _3240 = 1.0 - _3210;
                        float _3250 = (0.5 / (((_3239 * ((_3225 * _3240) + _3210)) + 9.9999999392252902907785028219223e-09) + (((_3239 * _3240) + _3210) * _3225))) * _3239;
                        float _4536 = isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0));
                        float _3261 = (((_3211 * 3.1415927410125732421875) * (isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0)))) / ((_3233 * _3233) * ((_3183 * 2.1991131305694580078125) + 3.141590118408203125))) * _3172;
                        _3020 = (_3186 * _3135.x) + _3093;
                        _3021 = (_3186 * _3135.y) + _3094;
                        _3022 = (_3186 * _3135.z) + _3095;
                        _3017 = (_3261 * _3152.x) + _3090;
                        _3018 = (_3261 * _3152.y) + _3091;
                        _3019 = (_3261 * _3152.z) + _3092;
                        if (_3097 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3090 = _3017;
                            _3091 = _3018;
                            _3092 = _3019;
                            _3093 = _3020;
                            _3094 = _3021;
                            _3095 = _3022;
                            _3096 = _3097;
                        }
                    }
                    frontier_phi_68_pred = _3019;
                    frontier_phi_68_pred_1 = _3022;
                    frontier_phi_68_pred_2 = _3021;
                    frontier_phi_68_pred_3 = _3020;
                    frontier_phi_68_pred_4 = _3018;
                    frontier_phi_68_pred_5 = _3017;
                }
                _2766 = frontier_phi_68_pred;
                _2772 = frontier_phi_68_pred_1;
                _2770 = frontier_phi_68_pred_2;
                _2768 = frontier_phi_68_pred_3;
                _2764 = frontier_phi_68_pred_4;
                _2762 = frontier_phi_68_pred_5;
                uint _2952 = _2951 + 1u;
                if (_2952 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2945 = _2762;
                    _2946 = _2764;
                    _2947 = _2766;
                    _2948 = _2768;
                    _2949 = _2770;
                    _2950 = _2772;
                    _2951 = _2952;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2761 = _2762;
            _2763 = _2764;
            _2765 = _2766;
            _2767 = _2768;
            _2769 = _2770;
            _2771 = _2772;
        }
        uvec4 _2775 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2776 = _2775.z;
        uint _2778 = (_2776 >> 8u) & 15u;
        float _2913;
        float _2915;
        float _2917;
        float _2919;
        float _2921;
        float _2923;
        if (((4294967295u << _2778) & _2461) == 0u)
        {
            _2913 = _2761;
            _2915 = _2763;
            _2917 = _2765;
            _2919 = _2767;
            _2921 = _2769;
            _2923 = _2771;
        }
        else
        {
            float _2938 = inversesqrt(dot(vec3(_2415, _2416, _2417), vec3(_2415, _2416, _2417)));
            float _2939 = _2938 * _2415;
            float _2940 = _2938 * _2416;
            float _2941 = _2938 * _2417;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2778 < ((_2776 >> 12u) & 15u))
            {
                float _2914;
                float _2916;
                float _2918;
                float _2920;
                float _2922;
                float _2924;
                float _3073 = _2761;
                float _3074 = _2763;
                float _3075 = _2765;
                float _3076 = _2767;
                float _3077 = _2769;
                float _3078 = _2771;
                uint _3079 = _2778;
                uint _3088;
                bool _3089;
                for (;;)
                {
                    _3088 = texelFetch(g_lightClassification, int((((_2455 << 5u) + (_2441 << 9u)) + (_3079 << 2u)) >> 2u)).x;
                    _3089 = _3088 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3089)
                    {
                        frontier_phi_79_pred = _3078;
                        frontier_phi_79_pred_1 = _3077;
                        frontier_phi_79_pred_2 = _3076;
                        frontier_phi_79_pred_3 = _3075;
                        frontier_phi_79_pred_4 = _3074;
                        frontier_phi_79_pred_5 = _3073;
                    }
                    else
                    {
                        float _3275;
                        float _3276;
                        float _3277;
                        float _3278;
                        float _3279;
                        float _3280;
                        float _3565;
                        float _3566;
                        float _3567;
                        float _3568;
                        float _3569;
                        float _3570;
                        float _3288 = _3073;
                        float _3289 = _3074;
                        float _3290 = _3075;
                        float _3291 = _3076;
                        float _3292 = _3077;
                        float _3293 = _3078;
                        uint _3294 = _3088;
                        uint _3295;
                        vec4 _3320;
                        float _3321;
                        vec4 _3336;
                        vec3 _3348;
                        vec4 _3364;
                        vec4 _3380;
                        float _3427;
                        bool _3428;
                        for (;;)
                        {
                            uint _3305 = ((_3079 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3294));
                            _3295 = (_3294 + 4294967295u) & _3294;
                            uint _3307 = _3305 * 40u;
                            _3320 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3307)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 3u)).x));
                            _3321 = _3320.w;
                            uint _3323 = (_3305 * 40u) + 4u;
                            _3336 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3323)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 3u)).x));
                            uint _3338 = (_3305 * 40u) + 8u;
                            _3348 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3338)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 2u)).x));
                            uint _3351 = (_3305 * 40u) + 16u;
                            _3364 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3351)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 3u)).x));
                            uint _3367 = (_3305 * 40u) + 20u;
                            _3380 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3367)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 3u)).x));
                            uint _3383 = (_3305 * 40u) + 24u;
                            vec4 _3396 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3383)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 3u)).x));
                            uint _3402 = (_3305 * 40u) + 28u;
                            vec4 _3415 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3402)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 3u)).x));
                            _3427 = fma(_2417, _3415.z, fma(_2416, _3415.y, _3415.x * _2415)) + _3415.w;
                            _3428 = !((fma(_2417, _3396.z, fma(_2416, _3396.y, _3396.x * _2415)) + _3396.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3428)
                            {
                                float _3455 = _3320.x - _2415;
                                float _3456 = _3320.y - _2416;
                                float _3457 = _3320.z - _2417;
                                float _3458 = dot(vec3(_3455, _3456, _3457), vec3(_3455, _3456, _3457));
                                float _3461 = inversesqrt(_3458);
                                float _3462 = _3461 * _3455;
                                float _3463 = _3461 * _3456;
                                float _3464 = _3461 * _3457;
                                float _3468 = 1.0 - (_3458 / (_3321 * _3321));
                                float _4547 = isnan(0.0) ? _3468 : (isnan(_3468) ? 0.0 : max(_3468, 0.0));
                                float _3469 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
                                float _3473 = sqrt(_3458) * _3336.w;
                                float _3475 = 1.39999997615814208984375 / (_3473 + 1.39999997615814208984375);
                                float _3476 = _3475 * _3475;
                                float _3479 = ((1.0 - _3476) * dot(vec3(_3462, _3463, _3464), vec3(_626, _629, _632))) + _3476;
                                float _3482 = _3473 * _3473;
                                float _3486 = (fma(_2417, _3364.z, fma(_2416, _3364.y, _3364.x * _2415)) + _3364.w) / _3427;
                                float _3487 = (fma(_2417, _3380.z, fma(_2416, _3380.y, _3380.x * _2415)) + _3380.w) / _3427;
                                float _3491 = 1.0 - dot(vec2(_3486, _3487), vec2(_3486, _3487));
                                float _4563 = isnan(0.0) ? _3491 : (isnan(_3491) ? 0.0 : max(_3491, 0.0));
                                float _3492 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
                                float _3493 = _3492 * (((isnan(0.0) ? _3479 : (isnan(_3479) ? 0.0 : max(_3479, 0.0))) * _3469) / ((_3482 * 0.699999988079071044921875) + 1.0));
                                float _3505 = exp2(log2(1.0 / ((_3482 * 3.5) + 5.0)) * 0.25);
                                float _3507 = sqrt(_3505 * _3505);
                                float _3508 = _3507 * _3507;
                                float _3509 = _3508 * _3508;
                                float _3510 = _3462 - _2939;
                                float _3511 = _3463 - _2940;
                                float _3512 = _3464 - _2941;
                                float _3516 = inversesqrt(dot(vec3(_3510, _3511, _3512), vec3(_3510, _3511, _3512)));
                                float _3520 = dot(vec3(_626, _629, _632), vec3((-0.0) - _2939, (-0.0) - _2940, (-0.0) - _2941));
                                float _4574 = isnan(0.0) ? _3520 : (isnan(_3520) ? 0.0 : max(_3520, 0.0));
                                float _3523 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
                                float _3524 = dot(vec3(_626, _629, _632), vec3(_3516 * _3510, _3516 * _3511, _3516 * _3512));
                                float _4585 = isnan(0.0) ? _3524 : (isnan(_3524) ? 0.0 : max(_3524, 0.0));
                                float _3527 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
                                float _3531 = ((_3527 * _3527) * (_3509 + (-1.0))) + 1.0;
                                float _3532 = _3475 * _3508;
                                float _3533 = _3532 * _3532;
                                float _3539 = ((1.0 - _3533) * dot(vec3(_626, _629, _632), vec3(_3462, _3463, _3464))) + _3533;
                                float _4596 = isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : max(_3539, 0.0));
                                float _3540 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
                                float _3541 = 1.0 - _3508;
                                float _3551 = (0.5 / (((_3540 * ((_3523 * _3541) + _3508)) + 9.9999999392252902907785028219223e-09) + (((_3540 * _3541) + _3508) * _3523))) * _3540;
                                float _4607 = isnan(0.0) ? _3551 : (isnan(_3551) ? 0.0 : max(_3551, 0.0));
                                float _3561 = (_3492 * _3469) * (((_3509 * 3.1415927410125732421875) * (isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0)))) / ((_3531 * _3531) * ((_3482 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3493 * _3336.z;
                                frontier_phi_85_pred_1 = _3493 * _3336.y;
                                frontier_phi_85_pred_2 = _3493 * _3336.x;
                                frontier_phi_85_pred_3 = _3561 * _3348.z;
                                frontier_phi_85_pred_4 = _3561 * _3348.y;
                                frontier_phi_85_pred_5 = _3561 * _3348.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3570 = frontier_phi_85_pred;
                            _3569 = frontier_phi_85_pred_1;
                            _3568 = frontier_phi_85_pred_2;
                            _3567 = frontier_phi_85_pred_3;
                            _3566 = frontier_phi_85_pred_4;
                            _3565 = frontier_phi_85_pred_5;
                            _3278 = _3568 + _3291;
                            _3279 = _3569 + _3292;
                            _3280 = _3570 + _3293;
                            _3275 = _3565 + _3288;
                            _3276 = _3566 + _3289;
                            _3277 = _3567 + _3290;
                            if (_3295 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3288 = _3275;
                                _3289 = _3276;
                                _3290 = _3277;
                                _3291 = _3278;
                                _3292 = _3279;
                                _3293 = _3280;
                                _3294 = _3295;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3280;
                        frontier_phi_79_pred_1 = _3279;
                        frontier_phi_79_pred_2 = _3278;
                        frontier_phi_79_pred_3 = _3277;
                        frontier_phi_79_pred_4 = _3276;
                        frontier_phi_79_pred_5 = _3275;
                    }
                    _2924 = frontier_phi_79_pred;
                    _2922 = frontier_phi_79_pred_1;
                    _2920 = frontier_phi_79_pred_2;
                    _2918 = frontier_phi_79_pred_3;
                    _2916 = frontier_phi_79_pred_4;
                    _2914 = frontier_phi_79_pred_5;
                    uint _3080 = _3079 + 1u;
                    if (_3080 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3073 = _2914;
                        _3074 = _2916;
                        _3075 = _2918;
                        _3076 = _2920;
                        _3077 = _2922;
                        _3078 = _2924;
                        _3079 = _3080;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2920;
                frontier_phi_60_61_ladder_1 = _2924;
                frontier_phi_60_61_ladder_2 = _2922;
                frontier_phi_60_61_ladder_3 = _2918;
                frontier_phi_60_61_ladder_4 = _2916;
                frontier_phi_60_61_ladder_5 = _2914;
            }
            else
            {
                frontier_phi_60_61_ladder = _2767;
                frontier_phi_60_61_ladder_1 = _2771;
                frontier_phi_60_61_ladder_2 = _2769;
                frontier_phi_60_61_ladder_3 = _2765;
                frontier_phi_60_61_ladder_4 = _2763;
                frontier_phi_60_61_ladder_5 = _2761;
            }
            _2913 = frontier_phi_60_61_ladder_5;
            _2915 = frontier_phi_60_61_ladder_4;
            _2917 = frontier_phi_60_61_ladder_3;
            _2919 = frontier_phi_60_61_ladder;
            _2921 = frontier_phi_60_61_ladder_2;
            _2923 = frontier_phi_60_61_ladder_1;
        }
        float _2928 = isnan(1.0) ? _670 : (isnan(_670) ? 1.0 : min(_670, 1.0));
        _2473 = (_2928 * _2919) + _1930;
        _2475 = (_2928 * _2921) + _1932;
        _2477 = (_2928 * _2923) + _1934;
        _2479 = ((_2913 * 0.039999999105930328369140625) * _2928) + _2260;
        _2481 = ((_2915 * 0.039999999105930328369140625) * _2928) + _2262;
        _2483 = ((_2917 * 0.039999999105930328369140625) * _2928) + _2264;
    }
    else
    {
        _2473 = _1930;
        _2475 = _1932;
        _2477 = _1934;
        _2479 = _2260;
        _2481 = _2262;
        _2483 = _2264;
    }
    float _2502 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2503 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2504 = cbSceneParam._m0[86u].x * ((_605 / cbSceneParam._m0[86u].x) + (_1739 * dot(vec3(_517, _518, _519), vec3(_208, _209, _210))));
    float _2505 = isnan(_2502) ? _2504 : (isnan(_2504) ? _2502 : min(_2504, _2502));
    float _2506 = isnan(_2503) ? _606 : (isnan(_606) ? _2503 : min(_606, _2503));
    vec4 _2508 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2505, _2506), 0.0);
    float _2510 = _2508.x;
    bool _2530 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2510)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2510))) > _527;
    float _2531 = _2530 ? _2505 : _605;
    float _2532 = _2530 ? _2506 : _606;
    vec4 _2534 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2531, _2532));
    vec4 _2539 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2531, _2532));
    float _2541 = _2539.x;
    bool _2546 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _2555 = (-0.0) - cbSceneParam._m0[2u].z;
    float _2561 = (_2546 ? (_2555 / (cbSceneParam._m0[2u].x - _2541)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2541))) - _527;
    bool _2568 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2575 = (isnan(_2561) ? 0.0 : (isnan(0.0) ? _2561 : max(0.0, _2561))) * (-1.44269502162933349609375);
    float _4638 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _4649 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _4660 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    vec4 _2595 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2531, _2532), 0.0);
    float _2597 = _2595.x;
    float _2603 = (_2546 ? (_2555 / (cbSceneParam._m0[2u].x - _2597)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2597))) - _527;
    uint _2609 = floatBitsToUint(cbInstanceData._m0[_1792]).x * 14u;
    uint _2615 = _2609 + 4u;
    float _2624 = dot(vec3(cbLight._m0[_2609].xyz), vec3(_229, _230, _231));
    float _2632 = dot(vec3((-0.0) - _585, (-0.0) - _586, (-0.0) - _587), vec3((-0.0) - _229, (-0.0) - _230, (-0.0) - _231));
    float _2637 = ((isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0))) / (isnan(0.001000000047497451305389404296875) ? _2624 : (isnan(_2624) ? 0.001000000047497451305389404296875 : max(_2624, 0.001000000047497451305389404296875)))) + 1.0;
    float _2638 = _2637 * (isnan(_2603) ? 0.0 : (isnan(0.0) ? _2603 : max(0.0, _2603)));
    float _2687 = 0.959999978542327880859375 - (exp2(log2(1.0 - _685) * 5.0) * 0.959999978542327880859375);
    float _2688 = ((_2568 ? 0.0 : (((cbLight._m0[_2615].x * 0.0159154944121837615966796875) / ((_2637 * 0.699999988079071044921875) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2(_2638 * (-1.0098865032196044921875))))) + ((exp2(_2575 * (_2568 ? 0.0 : 0.699999988079071044921875)) * _2534.x) * cbSceneParam._m0[72u].w)) * _2687;
    float _2689 = ((_2568 ? 0.0 : (((cbLight._m0[_2615].y * 0.0159154944121837615966796875) / ((_2637 * 0.300000011920928955078125) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2(_2638 * (-0.43280851840972900390625))))) + ((exp2(_2575 * (_2568 ? 0.0 : 0.300000011920928955078125)) * _2534.y) * cbSceneParam._m0[72u].w)) * _2687;
    float _2690 = ((_2568 ? 0.0 : (((cbLight._m0[_2615].z * 0.0159154944121837615966796875) / ((_2637 * 0.2199999988079071044921875) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2(_2638 * (-0.3173929154872894287109375))))) + ((exp2(_2575 * (_2568 ? 0.0 : 0.2199999988079071044921875)) * _2534.z) * cbSceneParam._m0[72u].w)) * _2687;
    float _2698 = (_2688 + (((((_1706 * _1751.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0))) * _1501) * _1767)) + _2479) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0))) * (_2473 + ((isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0))) * _670))) - _2688) * 0.5);
    float _2700 = (_2689 + (((((_1706 * _1751.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0))) * _1501) * _1767)) + _2481) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0))) * (_2475 + ((isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0))) * _670))) - _2689) * 0.5);
    float _2702 = (_2690 + (((((_1706 * _1751.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0))) * _1501) * _1767)) + _2483) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0))) * (_2477 + ((isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0))) * _670))) - _2690) * 0.5);
    uint _2703 = _645 + 6u;
    float _2711 = _605 / cbSceneParam._m0[86u].x;
    float _2712 = _606 / cbSceneParam._m0[86u].y;
    vec4 _2726 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2711, _2712, (log2((isnan(cbSceneParam._m0[77u].w) ? _527 : (isnan(_527) ? cbSceneParam._m0[77u].w : min(_527, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2728 = _2726.x;
    float _2729 = _2726.y;
    float _2730 = _2726.z;
    float _2731 = _2726.w;
    float _2822;
    float _2824;
    float _2826;
    float _2828;
    if (_527 > cbSceneParam._m0[78u].w)
    {
        float _2786 = isnan(_527) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _527 : min(cbSceneParam._m0[80u].w, _527));
        float _2787 = _2786 / _527;
        float _2798 = _2787 * _578;
        float _2799 = _579 * _2787;
        float _2800 = (-0.0) - _2799;
        float _2801 = _2787 * _580;
        float _2803 = (cbSceneParam._m0[77u].w * _2800) / _2786;
        float _2804 = _2803 + cbSceneParam._m0[79u].w;
        float _2805 = cbSceneParam._m0[79u].w - _2799;
        float _2811 = sqrt(((_2798 * _2798) + (_2799 * _2799)) + (_2801 * _2801));
        float _2814 = (1.0 - (cbSceneParam._m0[77u].w / _2786)) * _2811;
        float _2819 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2820 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3030;
        if (abs((_2800 - _2803) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3030 = ((((_2804 > 0.0) ? exp2(_2819 * _2804) : (2.0 - exp2(_2820 * _2804))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2814;
        }
        else
        {
            float _2974 = 1.0 / cbSceneParam._m0[80u].x;
            float _2975 = isnan(_2805) ? _2804 : (isnan(_2804) ? _2805 : max(_2804, _2805));
            float _2976 = isnan(_2805) ? _2804 : (isnan(_2804) ? _2805 : min(_2804, _2805));
            float _2985 = isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : min(_2975, 0.0));
            float _2986 = isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : min(_2976, 0.0));
            _3030 = ((abs(_2811 / _2800) * cbSceneParam._m0[80u].y) * ((((_2985 - _2986) * 2.0) - ((exp2(_2819 * (isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0)))) - exp2(_2819 * (isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0))))) * _2974)) - ((exp2(_2820 * _2985) - exp2(_2820 * _2986)) * _2974))) + (_2814 * cbSceneParam._m0[80u].z);
        }
        vec4 _3032 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2711, _2712, 1.0), 0.0);
        float _3041 = exp2((_3030 * (-1.44269502162933349609375)) * (1.0 - _3032.w));
        float _3042 = log2(_3041);
        float _3058 = log2(_2731);
        _2822 = (exp2(_3058 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3042 * cbSceneParam._m0[78u].x)) * _3032.x) / cbSceneParam._m0[78u].x)) + _2728;
        _2824 = (exp2(_3058 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3042 * cbSceneParam._m0[78u].y)) * _3032.y) / cbSceneParam._m0[78u].y)) + _2729;
        _2826 = (exp2(_3058 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3042 * cbSceneParam._m0[78u].z)) * _3032.z) / cbSceneParam._m0[78u].z)) + _2730;
        _2828 = _3041 * _2731;
    }
    else
    {
        _2822 = _2728;
        _2824 = _2729;
        _2826 = _2730;
        _2828 = _2731;
    }
    bool _3068;
    float _2884;
    vec4 _2887;
    float _2889;
    vec4 _2891;
    float _2899;
    float _2900;
    float _2901;
    float _2902;
    bool _2912;
    for (;;)
    {
        bool _2840 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _2842 = log2(_2828);
        float _2849 = exp2(_2842 * cbSceneParam._m0[78u].x) * _2698;
        float _2850 = exp2(_2842 * cbSceneParam._m0[78u].y) * _2700;
        float _2851 = exp2(_2842 * cbSceneParam._m0[78u].z) * _2702;
        vec4 _2859 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_605, _606));
        float _2861 = _2859.x;
        float _2882 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2861)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2861))) - _527) * 3.0;
        float _4726 = isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : max(_2882, 0.0));
        _2884 = (isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0))) * cbInstanceData._m0[_2703].w;
        float _2885 = _594 + (-0.5);
        _2887 = cbMtdParam._m0[1u];
        _2889 = _2887.y * _2885;
        _2891 = cbMatDynParam._m0[0u];
        float _2898 = (roundEven(_2891.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2899 = _2898 * (_2840 ? _2849 : (_2849 + (cbSceneParam._m0[72u].w * _2822)));
        _2900 = _2898 * (_2840 ? _2850 : (_2850 + (cbSceneParam._m0[72u].w * _2824)));
        _2901 = _2898 * (_2840 ? _2851 : (_2851 + (cbSceneParam._m0[72u].w * _2826)));
        _2902 = _2885 * 0.999000012874603271484375;
        _2912 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2912)
        {
            if ((cbInstanceData._m0[_645 + 7u].x + _2902) < 0.5)
            {
                _3068 = true;
                break;
            }
        }
        uint _3009 = _646 + uint(_2891.w);
        if ((cbInstanceData._m0[_3009].w < 1.0) && ((cbInstanceData._m0[_3009].w + _2902) < 0.5))
        {
            _3068 = true;
            break;
        }
        if ((_2889 + 1.0) < _2887.x)
        {
            _3068 = true;
            break;
        }
        _3068 = false;
        break;
    }
    float _3266;
    if (_3068)
    {
        discard_state = true;
        _3266 = 0.0;
    }
    else
    {
        _3266 = _2884;
    }
    SV_Target.x = _2899;
    SV_Target.y = _2900;
    SV_Target.z = _2901;
    SV_Target.w = _3266;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2884;
    discard_exit();
}


