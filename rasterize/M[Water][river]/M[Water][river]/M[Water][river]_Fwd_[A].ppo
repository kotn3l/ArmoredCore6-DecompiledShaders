#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_river_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_river_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_river_snp_0_Texture2D_3;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1061;
float _3682;
float _3683;
float _3684;
float _3685;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _197 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _198 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _199 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _205 = inversesqrt(dot(vec3(_197, _198, _199), vec3(_197, _198, _199)));
    float _206 = _205 * _197;
    float _207 = _205 * _198;
    float _208 = _205 * _199;
    float _212 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _213 = _212 * NORMAL.x;
    float _214 = _212 * NORMAL.y;
    float _215 = _212 * NORMAL.z;
    float _219 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _227;
    float _228;
    float _229;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _227 = (-0.0) - _213;
        _228 = (-0.0) - _214;
        _229 = (-0.0) - _215;
    }
    else
    {
        _227 = _213;
        _228 = _214;
        _229 = _215;
    }
    float _245 = cbMtdParam._m0[10u].x * cbPerFrame._m0[22u].x;
    float _256 = (cbMtdParam._m0[12u].w * _245) + TEXCOORD;
    float _257 = (cbMtdParam._m0[13u].x * _245) + TEXCOORD_1;
    vec4 _270 = texture(sampler2D(M_Water_river_snp_0_Texture2D_3, SS_WrapLinear), vec2((_256 * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (_257 * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _277 = (cbPerFrame._m0[22u].x * 2.0) * (cbMtdParam._m0[11u].x * cbMtdParam._m0[10u].x);
    float _283 = (_270.y * 0.5) + (-0.25);
    float _284 = (-0.0) - ((_270.x * 0.5) + (-0.25));
    float _285 = fract(_277);
    float _287 = fract(_277 + 0.5);
    float _299 = abs((_285 * 2.0) + (-1.0));
    vec4 _308 = texture(sampler2D(M_Water_river_snp_0_Texture2D_3, SS_WrapLinear), vec2((((_285 * _284) + _256) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((_283 * _285) + _257) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _310 = _308.z;
    vec4 _336 = texture(sampler2D(M_Water_river_snp_0_Texture2D_0, SS_BumpMap), vec2((((cbMtdParam._m0[12u].y * _245) + TEXCOORD) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((cbMtdParam._m0[12u].z * _245) + TEXCOORD_1) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _340 = _336.z;
    vec4 _357 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _359 = _357.x;
    bool _366 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _382 = ((_366 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _359)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _359))) - POSITION_1.w) * 0.833333313465118408203125;
    float _3694 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _391 = ((((texture(sampler2D(M_Water_river_snp_0_Texture2D_3, SS_WrapLinear), vec2((((_287 * _284) + _256) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((_283 * _287) + _257) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w)).z - _310) * _299) + _310) * (1.0 - TEXCOORD_3.y)) * (((TEXCOORD_3.x + 1.0) + (exp2(log2(((0.502016007900238037109375 - _340) * TEXCOORD_3.y) + _340) * cbMtdParam._m0[10u].z) * cbMtdParam._m0[10u].w)) - (isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0))));
    float _392 = _391 + cbMtdParam._m0[9u].x;
    float _393 = _391 + cbMtdParam._m0[9u].y;
    float _394 = _391 + cbMtdParam._m0[9u].z;
    vec4 _416 = texture(sampler2D(M_Water_river_snp_0_Texture2D_1, SS_BumpMap), vec2((((cbMtdParam._m0[11u].w * _245) + TEXCOORD) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[12u].x * _245) + TEXCOORD_1) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _420 = _416.x * 2.0;
    float _421 = _416.y * 2.0;
    float _422 = _420 + (-1.0);
    float _423 = _421 + (-1.0);
    float _424 = dot(vec2(_422, _423), vec2(_422, _423));
    float _3705 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _429 = sqrt(1.0 - (isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0))));
    vec4 _440 = texture(sampler2D(M_Water_river_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _256) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _257) + cbTextureTilingScale._m0[2u].w));
    float _447 = (_440.y * 0.5) + (-0.25);
    float _448 = (-0.0) - ((_440.x * 0.5) + (-0.25));
    vec4 _471 = texture(sampler2D(M_Water_river_snp_0_Texture2D_0, SS_BumpMap), vec2((((_285 * _448) + _256) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_447 * _285) + _257) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _473 = _471.x;
    float _474 = _471.y;
    vec4 _475 = texture(sampler2D(M_Water_river_snp_0_Texture2D_0, SS_BumpMap), vec2((((_287 * _448) + _256) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_447 * _287) + _257) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _485 = (((_475.x - _473) * _299) + _473) + _336.x;
    float _494 = (_420 + (-1.60000002384185791015625)) + ((_485 + ((1.00403201580047607421875 - _485) * TEXCOORD_3.y)) * 0.60000002384185791015625);
    float _495 = (((_475.y - _474) * _299) + _474) + _336.y;
    float _501 = (_421 + (-1.60000002384185791015625)) + ((_495 + ((1.00403201580047607421875 - _495) * TEXCOORD_3.y)) * 0.60000002384185791015625);
    float _504 = fma(_429, _227, fma(_501, _219 * TANGENT.x, _494 * _206));
    float _507 = fma(_429, _228, fma(_501, _219 * TANGENT.y, _494 * _207));
    float _510 = fma(_429, _229, fma(_501, _219 * TANGENT.z, _494 * _208));
    float _514 = inversesqrt(dot(vec3(_504, _507, _510), vec3(_504, _507, _510)));
    float _515 = _514 * _504;
    float _516 = _514 * _507;
    float _517 = _514 * _510;
    float _3716 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _3727 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _3738 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _525 = _366 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _566 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _576 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _566);
    float _577 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _566);
    float _578 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _566);
    float _582 = inversesqrt(dot(vec3(_576, _577, _578), vec3(_576, _577, _578)));
    float _583 = _576 * _582;
    float _584 = _577 * _582;
    float _585 = _578 * _582;
    vec4 _590 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _592 = _590.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _741 = sqrt(((_576 * _576) + (_577 * _577)) + (_578 * _578));
        float _747 = (cbMatDynParam._m0[5u].x * _741) + cbMatDynParam._m0[5u].y;
        float _3749 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
        float _748 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
        float _752 = (cbMatDynParam._m0[5u].z * _741) + cbMatDynParam._m0[5u].w;
        float _3760 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0))) - _748)) + _748) < ((_592 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _603 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _604 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _624 = fma(_517, cbSceneParam._m0[5u].z, fma(_516, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _515));
    float _627 = fma(_517, cbSceneParam._m0[6u].z, fma(_516, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _515));
    float _630 = fma(_517, cbSceneParam._m0[7u].z, fma(_516, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _515));
    uint _643 = uint(roundEven(NORMAL.w)) * 13u;
    uint _644 = _643 + 9u;
    uint _645 = _644 + uint(cbMatDynParam._m0[0u].w);
    float _651 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0)))) * cbInstanceData._m0[_645].x;
    float _652 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0)))) * cbInstanceData._m0[_645].y;
    float _653 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0)))) * cbInstanceData._m0[_645].z;
    float _3771 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _654 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
    float _3782 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _655 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
    float _3793 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _656 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
    vec4 _665 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _603, cbSceneParam._m0[86u].y * _604));
    float _668 = _665.x * TEXCOORD_3.w;
    float _669 = dot(vec3(_515, _516, _517), vec3(_583, _584, _585));
    float _672 = _669 * 2.0;
    float _676 = (_672 * _515) - _583;
    float _677 = (_672 * _516) - _584;
    float _678 = (_672 * _517) - _585;
    float _682 = abs(dot(vec3(_583, _584, _585), vec3(_515, _516, _517)));
    float _3804 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _683 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
    float _696 = exp2(log2(1.0 - (_683 * 0.999000012874603271484375)) * 5.0);
    float _722 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _726 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _730 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1060;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _786 = fma(_730, cbModelParam._m0[26u].z, fma(_726, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _722));
        float _790 = fma(_730, cbModelParam._m0[27u].z, fma(_726, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _722));
        float _794 = fma(_730, cbModelParam._m0[28u].z, fma(_726, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _722));
        float _818 = _722 + _515;
        float _819 = _726 + _516;
        float _820 = _730 + _517;
        float _830 = fma(_820, cbModelParam._m0[26u].z, fma(_819, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _818)) - _786;
        float _831 = fma(_820, cbModelParam._m0[27u].z, fma(_819, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _818)) - _790;
        float _832 = fma(_820, cbModelParam._m0[28u].z, fma(_819, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _818)) - _794;
        float _836 = inversesqrt(dot(vec3(_830, _831, _832), vec3(_830, _831, _832)));
        float _849 = ((_836 * _830) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_786 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _850 = ((_836 * _831) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_790 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _851 = ((_836 * _832) / cbModelParam._m0[34u].z) + ((((((_794 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _854 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_849, _850, _851), 0.0);
        vec4 _861 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_849, _850, _851), 0.0);
        vec4 _868 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_849, _850, _851), 0.0);
        vec4 _875 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_849, _850, _851), 0.0);
        float _888 = exp2((_854.w + (-0.5)) * 20.0) * 2.0;
        float _889 = _888 * (_854.x + (-0.5));
        float _890 = _888 * (_854.y + (-0.5));
        float _891 = _888 * (_854.z + (-0.5));
        float _898 = exp2((_861.w + (-0.5)) * 20.0) * 2.0;
        float _899 = _898 * (_861.x + (-0.5));
        float _900 = _898 * (_861.y + (-0.5));
        float _901 = _898 * (_861.z + (-0.5));
        float _908 = exp2((_868.w + (-0.5)) * 20.0) * 2.0;
        float _909 = _908 * (_868.x + (-0.5));
        float _910 = _908 * (_868.y + (-0.5));
        float _911 = _908 * (_868.z + (-0.5));
        float _918 = exp2((_875.w + (-0.5)) * 20.0) * 2.0;
        float _919 = _918 * (_875.x + (-0.5));
        float _920 = _918 * (_875.y + (-0.5));
        float _921 = _918 * (_875.z + (-0.5));
        float _922 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _923 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _924 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _925 = _889 * 0.5;
        float _926 = _899 * 0.5;
        float _927 = _909 * 0.5;
        float _928 = dot(vec3(_925, _926, _927), vec3(_925, _926, _927));
        float _933 = (_928 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_928);
        float _942 = (dot(vec3(_515, _516, _517), vec3(_933 * _925, _933 * _926, _933 * _927)) + 1.0) * 0.5;
        float _3830 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _952 = sqrt(((_926 * _926) + (_925 * _925)) + (_927 * _927)) / (_922 + 9.9999997473787516355514526367188e-06);
        float _3841 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _953 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
        float _954 = _953 * 2.0;
        float _958 = (1.0 - _953) / (_953 + 1.0);
        float _3852 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _959 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
        float _968 = ((((1.0 - _959) * (_954 + 2.0)) * exp2(log2(isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0))) * (_954 + 1.0))) + _959) * _922;
        float _969 = _890 * 0.5;
        float _970 = _900 * 0.5;
        float _971 = _910 * 0.5;
        float _972 = dot(vec3(_969, _970, _971), vec3(_969, _970, _971));
        float _977 = (_972 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_972);
        float _985 = (dot(vec3(_515, _516, _517), vec3(_977 * _969, _977 * _970, _977 * _971)) + 1.0) * 0.5;
        float _3863 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _994 = sqrt(((_970 * _970) + (_969 * _969)) + (_971 * _971)) / (_923 + 9.9999997473787516355514526367188e-06);
        float _3874 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _995 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _996 = _995 * 2.0;
        float _1000 = (1.0 - _995) / (_995 + 1.0);
        float _3885 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1001 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
        float _1010 = ((((1.0 - _1001) * (_996 + 2.0)) * exp2(log2(isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0))) * (_996 + 1.0))) + _1001) * _923;
        float _1011 = _891 * 0.5;
        float _1012 = _901 * 0.5;
        float _1013 = _911 * 0.5;
        float _1014 = dot(vec3(_1011, _1012, _1013), vec3(_1011, _1012, _1013));
        float _1019 = (_1014 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1014);
        float _1027 = (dot(vec3(_515, _516, _517), vec3(_1019 * _1011, _1019 * _1012, _1019 * _1013)) + 1.0) * 0.5;
        float _3896 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1036 = sqrt(((_1012 * _1012) + (_1011 * _1011)) + (_1013 * _1013)) / (_924 + 9.9999997473787516355514526367188e-06);
        float _3907 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1037 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _1038 = _1037 * 2.0;
        float _1042 = (1.0 - _1037) / (_1037 + 1.0);
        float _3918 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1043 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
        float _1052 = ((((1.0 - _1043) * (_1038 + 2.0)) * exp2(log2(isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0))) * (_1038 + 1.0))) + _1043) * _924;
        _1060 = _891;
        _1062 = _890;
        _1063 = _889;
        _1064 = _901;
        _1065 = _900;
        _1066 = _899;
        _1067 = _911;
        _1068 = _910;
        _1069 = _909;
        _1070 = _924;
        _1071 = _923;
        _1072 = _922;
        _1073 = cbModelParam._m0[36u].z * (isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0)));
        _1074 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0)));
        _1075 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0)));
    }
    else
    {
        _1060 = _1061;
        _1062 = _1061;
        _1063 = _1061;
        _1064 = _1061;
        _1065 = _1061;
        _1066 = _1061;
        _1067 = _1061;
        _1068 = _1061;
        _1069 = _1061;
        _1070 = _1061;
        _1071 = _1061;
        _1072 = _1061;
        _1073 = 0.0;
        _1074 = 0.0;
        _1075 = 0.0;
    }
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1104 = fma(_730, cbModelParam._m0[30u].z, fma(_726, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _722));
        float _1108 = fma(_730, cbModelParam._m0[31u].z, fma(_726, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _722));
        float _1112 = fma(_730, cbModelParam._m0[32u].z, fma(_726, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _722));
        float _1135 = _722 + _515;
        float _1136 = _726 + _516;
        float _1137 = _730 + _517;
        float _1147 = fma(_1137, cbModelParam._m0[30u].z, fma(_1136, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1135)) - _1104;
        float _1148 = fma(_1137, cbModelParam._m0[31u].z, fma(_1136, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1135)) - _1108;
        float _1149 = fma(_1137, cbModelParam._m0[32u].z, fma(_1136, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1135)) - _1112;
        float _1153 = inversesqrt(dot(vec3(_1147, _1148, _1149), vec3(_1147, _1148, _1149)));
        float _1166 = ((_1153 * _1147) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1104 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1167 = ((_1153 * _1148) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1108 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1168 = ((_1153 * _1149) / cbModelParam._m0[35u].z) + ((((((_1112 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1170 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1166, _1167, _1168), 0.0);
        vec4 _1177 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1166, _1167, _1168), 0.0);
        vec4 _1184 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1166, _1167, _1168), 0.0);
        vec4 _1191 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1166, _1167, _1168), 0.0);
        float _1203 = exp2((_1170.w + (-0.5)) * 20.0) * 2.0;
        float _1204 = _1203 * (_1170.x + (-0.5));
        float _1205 = _1203 * (_1170.y + (-0.5));
        float _1206 = _1203 * (_1170.z + (-0.5));
        float _1213 = exp2((_1177.w + (-0.5)) * 20.0) * 2.0;
        float _1214 = _1213 * (_1177.x + (-0.5));
        float _1215 = _1213 * (_1177.y + (-0.5));
        float _1216 = _1213 * (_1177.z + (-0.5));
        float _1223 = exp2((_1184.w + (-0.5)) * 20.0) * 2.0;
        float _1224 = _1223 * (_1184.x + (-0.5));
        float _1225 = _1223 * (_1184.y + (-0.5));
        float _1226 = _1223 * (_1184.z + (-0.5));
        float _1233 = exp2((_1191.w + (-0.5)) * 20.0) * 2.0;
        float _1234 = _1233 * (_1191.x + (-0.5));
        float _1235 = _1233 * (_1191.y + (-0.5));
        float _1236 = _1233 * (_1191.z + (-0.5));
        float _1237 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1238 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1239 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1240 = _1204 * 0.5;
        float _1241 = _1214 * 0.5;
        float _1242 = _1224 * 0.5;
        float _1243 = dot(vec3(_1240, _1241, _1242), vec3(_1240, _1241, _1242));
        float _1248 = (_1243 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1243);
        float _1256 = (dot(vec3(_515, _516, _517), vec3(_1248 * _1240, _1248 * _1241, _1248 * _1242)) + 1.0) * 0.5;
        float _3959 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1265 = sqrt(((_1241 * _1241) + (_1240 * _1240)) + (_1242 * _1242)) / (_1237 + 9.9999997473787516355514526367188e-06);
        float _3970 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
        float _1267 = _1266 * 2.0;
        float _1271 = (1.0 - _1266) / (_1266 + 1.0);
        float _3981 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
        float _1281 = ((((1.0 - _1272) * (_1267 + 2.0)) * exp2(log2(isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0))) * (_1267 + 1.0))) + _1272) * _1237;
        float _1282 = _1205 * 0.5;
        float _1283 = _1215 * 0.5;
        float _1284 = _1225 * 0.5;
        float _1285 = dot(vec3(_1282, _1283, _1284), vec3(_1282, _1283, _1284));
        float _1290 = (_1285 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1285);
        float _1298 = (dot(vec3(_515, _516, _517), vec3(_1290 * _1282, _1290 * _1283, _1290 * _1284)) + 1.0) * 0.5;
        float _3992 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1307 = sqrt(((_1283 * _1283) + (_1282 * _1282)) + (_1284 * _1284)) / (_1238 + 9.9999997473787516355514526367188e-06);
        float _4003 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _1309 = _1308 * 2.0;
        float _1313 = (1.0 - _1308) / (_1308 + 1.0);
        float _4014 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _1323 = ((((1.0 - _1314) * (_1309 + 2.0)) * exp2(log2(isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))) * (_1309 + 1.0))) + _1314) * _1238;
        float _1324 = _1206 * 0.5;
        float _1325 = _1216 * 0.5;
        float _1326 = _1226 * 0.5;
        float _1327 = dot(vec3(_1324, _1325, _1326), vec3(_1324, _1325, _1326));
        float _1332 = (_1327 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1327);
        float _1340 = (dot(vec3(_515, _516, _517), vec3(_1332 * _1324, _1332 * _1325, _1332 * _1326)) + 1.0) * 0.5;
        float _4025 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1349 = sqrt(((_1325 * _1325) + (_1324 * _1324)) + (_1326 * _1326)) / (_1239 + 9.9999997473787516355514526367188e-06);
        float _4036 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _1351 = _1350 * 2.0;
        float _1355 = (1.0 - _1350) / (_1350 + 1.0);
        float _4047 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _1365 = ((((1.0 - _1356) * (_1351 + 2.0)) * exp2(log2(isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0))) * (_1351 + 1.0))) + _1356) * _1239;
        _1373 = _1206;
        _1374 = _1205;
        _1375 = _1204;
        _1376 = _1216;
        _1377 = _1215;
        _1378 = _1214;
        _1379 = _1226;
        _1380 = _1225;
        _1381 = _1224;
        _1382 = _1239;
        _1383 = _1238;
        _1384 = _1237;
        _1385 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)));
        _1386 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0)));
        _1387 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0)));
    }
    else
    {
        _1373 = _1061;
        _1374 = _1061;
        _1375 = _1061;
        _1376 = _1061;
        _1377 = _1061;
        _1378 = _1061;
        _1379 = _1061;
        _1380 = _1061;
        _1381 = _1061;
        _1382 = _1061;
        _1383 = _1061;
        _1384 = _1061;
        _1385 = 0.0;
        _1386 = 0.0;
        _1387 = 0.0;
    }
    float _1397 = (cbModelParam._m0[1u].x * (_1385 - _1073)) + _1073;
    float _1398 = (cbModelParam._m0[1u].x * (_1386 - _1074)) + _1074;
    float _1399 = (cbModelParam._m0[1u].x * (_1387 - _1075)) + _1075;
    float _1420 = fma(_1399, cbSceneParam._m0[89u].z, fma(_1398, cbSceneParam._m0[89u].y, _1397 * cbSceneParam._m0[89u].x));
    float _1423 = fma(_1399, cbSceneParam._m0[90u].z, fma(_1398, cbSceneParam._m0[90u].y, _1397 * cbSceneParam._m0[90u].x));
    float _1426 = fma(_1399, cbSceneParam._m0[91u].z, fma(_1398, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1397));
    float _1441 = _676 * 0.5;
    float _1442 = _677 * 0.5;
    float _1443 = _678 * 0.5;
    float _1444 = dot(vec4(_1441, _1442, _1443, 1.0), vec4(_1375, _1378, _1381, _1384));
    float _1447 = dot(vec4(_1441, _1442, _1443, 1.0), vec4(_1374, _1377, _1380, _1383));
    float _1450 = dot(vec4(_1441, _1442, _1443, 1.0), vec4(_1373, _1376, _1379, _1382));
    float _1484;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1457 = dot(vec4(_1441, _1442, _1443, 1.0), vec4(_1060, _1064, _1067, _1070));
        float _1461 = dot(vec4(_1441, _1442, _1443, 1.0), vec4(_1062, _1065, _1068, _1071));
        float _1465 = dot(vec4(_1441, _1442, _1443, 1.0), vec4(_1063, _1066, _1069, _1072));
        float _1472 = dot(vec4(cbModelParam._m0[39u]), vec4(_1441, _1442, _1443, 1.0));
        _1484 = dot(vec3(isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0)), isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0)), isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1472) ? 0.0 : (isnan(0.0) ? _1472 : max(0.0, _1472))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1484 = 1.0;
    }
    float _1495;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1486 = dot(vec4(cbModelParam._m0[40u]), vec4(_1441, _1442, _1443, 1.0));
        _1495 = dot(vec3(isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0)), isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0)), isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1486) ? 0.0 : (isnan(0.0) ? _1486 : max(0.0, _1486))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1495 = 1.0;
    }
    float _1499 = (_1495 * cbModelParam._m0[1u].x) + (_1484 * (1.0 - cbModelParam._m0[1u].x));
    float _1508 = isnan(0.0) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? 0.0 : min(cbModelParam._m0[25u].z, 0.0));
    float _1589;
    float _1591;
    float _1593;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1556 = fma(_730, cbModelParam._m0[13u].z, fma(_726, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _722)) + cbModelParam._m0[13u].w;
        float _1560 = fma(_730, cbModelParam._m0[14u].z, fma(_726, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _722)) + cbModelParam._m0[14u].w;
        float _1564 = fma(_730, cbModelParam._m0[15u].z, fma(_726, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _722)) + cbModelParam._m0[15u].w;
        float _1567 = fma(_678, cbModelParam._m0[13u].z, fma(_677, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _676));
        float _1570 = fma(_678, cbModelParam._m0[14u].z, fma(_677, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _676));
        float _1573 = fma(_678, cbModelParam._m0[15u].z, fma(_677, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _676));
        float _1599;
        if (_1567 > 0.0)
        {
            _1599 = abs((1.0 - _1556) / _1567);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1567 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1556 + 1.0) / _1567);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1599 = frontier_phi_19_17_ladder;
        }
        float _1852;
        if (_1570 > 0.0)
        {
            _1852 = abs((1.0 - _1560) / _1570);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1570 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1560 + 1.0) / _1570);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1852 = frontier_phi_28_24_ladder;
        }
        float _2093;
        if (_1573 > 0.0)
        {
            _2093 = abs((1.0 - _1564) / _1573);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1573 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1564 + 1.0) / _1573);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2093 = frontier_phi_40_35_ladder;
        }
        float _2095 = isnan(_1852) ? _1599 : (isnan(_1599) ? _1852 : min(_1599, _1852));
        float _2096 = isnan(_2093) ? _2095 : (isnan(_2095) ? _2093 : min(_2095, _2093));
        float _2100 = (_2096 * _1567) + _1556;
        float _2101 = (_2096 * _1570) + _1560;
        float _2102 = (_2096 * _1573) + _1564;
        float _2103 = _2096 * 9.9999997473787516355514526367188e-05;
        float _2105 = (-1.0) - _2103;
        float _2107 = _2103 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2102 > _2107) || ((_2102 < _2105) || ((_2101 > _2107) || ((_2101 < _2105) || ((_2100 < _2105) || (_2100 > _2107))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2225 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2102, cbModelParam._m0[9u].z, fma(_2101, cbModelParam._m0[9u].y, _2100 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2102, cbModelParam._m0[10u].z, fma(_2101, cbModelParam._m0[10u].y, _2100 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2102, cbModelParam._m0[11u].z, fma(_2101, cbModelParam._m0[11u].y, _2100 * cbModelParam._m0[11u].x))), _1508);
            frontier_phi_18_40_ladder = _2225.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2225.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2225.x * cbModelParam._m0[1u].y;
        }
        _1589 = frontier_phi_18_40_ladder_2;
        _1591 = frontier_phi_18_40_ladder_1;
        _1593 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1577 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_676, _677, _678), _1508);
        _1589 = _1577.x * cbModelParam._m0[1u].y;
        _1591 = _1577.y * cbModelParam._m0[1u].y;
        _1593 = _1577.z * cbModelParam._m0[1u].y;
    }
    float _1596 = isnan(0.0) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? 0.0 : min(cbModelParam._m0[25u].w, 0.0));
    float _1688;
    float _1690;
    float _1692;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1652 = fma(_730, cbModelParam._m0[21u].z, fma(_726, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _722)) + cbModelParam._m0[21u].w;
        float _1656 = fma(_730, cbModelParam._m0[22u].z, fma(_726, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _722)) + cbModelParam._m0[22u].w;
        float _1660 = fma(_730, cbModelParam._m0[23u].z, fma(_726, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _722)) + cbModelParam._m0[23u].w;
        float _1663 = fma(_678, cbModelParam._m0[21u].z, fma(_677, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _676));
        float _1666 = fma(_678, cbModelParam._m0[22u].z, fma(_677, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _676));
        float _1669 = fma(_678, cbModelParam._m0[23u].z, fma(_677, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _676));
        float _1857;
        if (_1663 > 0.0)
        {
            _1857 = abs((1.0 - _1652) / _1663);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1663 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1652 + 1.0) / _1663);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1857 = frontier_phi_30_26_ladder;
        }
        float _2120;
        if (_1666 > 0.0)
        {
            _2120 = abs((1.0 - _1656) / _1666);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1666 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1656 + 1.0) / _1666);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2120 = frontier_phi_42_37_ladder;
        }
        float _2323;
        if (_1669 > 0.0)
        {
            _2323 = abs((1.0 - _1660) / _1669);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1669 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1660 + 1.0) / _1669);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2323 = frontier_phi_51_48_ladder;
        }
        float _2325 = isnan(_2120) ? _1857 : (isnan(_1857) ? _2120 : min(_1857, _2120));
        float _2326 = isnan(_2323) ? _2325 : (isnan(_2325) ? _2323 : min(_2325, _2323));
        float _2330 = (_2326 * _1663) + _1652;
        float _2331 = (_2326 * _1666) + _1656;
        float _2332 = (_2326 * _1669) + _1660;
        float _2333 = _2326 * 9.9999997473787516355514526367188e-05;
        float _2334 = (-1.0) - _2333;
        float _2336 = _2333 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2332 > _2336) || ((_2332 < _2334) || ((_2331 > _2336) || ((_2331 < _2334) || ((_2330 < _2334) || (_2330 > _2336))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2724 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2332, cbModelParam._m0[17u].z, fma(_2331, cbModelParam._m0[17u].y, _2330 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2332, cbModelParam._m0[18u].z, fma(_2331, cbModelParam._m0[18u].y, _2330 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2332, cbModelParam._m0[19u].z, fma(_2331, cbModelParam._m0[19u].y, _2330 * cbModelParam._m0[19u].x))), _1596);
            frontier_phi_27_51_ladder = _2724.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2724.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2724.x * cbModelParam._m0[1u].z;
        }
        _1688 = frontier_phi_27_51_ladder_2;
        _1690 = frontier_phi_27_51_ladder_1;
        _1692 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1672 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_676, _677, _678), _1596);
        _1688 = _1672.x * cbModelParam._m0[1u].z;
        _1690 = _1672.y * cbModelParam._m0[1u].z;
        _1692 = _1672.z * cbModelParam._m0[1u].z;
    }
    float _1704 = (((1.0 - _696) * 0.039999999105930328369140625) + _696) * _668;
    float _1705 = _1704 * ((cbModelParam._m0[1u].w * (_1688 - _1589)) + _1589);
    float _1706 = _1704 * ((cbModelParam._m0[1u].w * (_1690 - _1591)) + _1591);
    float _1707 = _1704 * ((cbModelParam._m0[1u].w * (_1692 - _1593)) + _1593);
    float _1710 = fma(_1707, cbSceneParam._m0[89u].z, fma(_1706, cbSceneParam._m0[89u].y, _1705 * cbSceneParam._m0[89u].x));
    float _1713 = fma(_1707, cbSceneParam._m0[90u].z, fma(_1706, cbSceneParam._m0[90u].y, _1705 * cbSceneParam._m0[90u].x));
    float _1716 = fma(_1707, cbSceneParam._m0[91u].z, fma(_1706, cbSceneParam._m0[91u].y, _1705 * cbSceneParam._m0[91u].x));
    float _1727 = _603 / cbSceneParam._m0[86u].x;
    float _4173 = isnan(0.0) ? cbSceneParam._m0[88u].z : (isnan(cbSceneParam._m0[88u].z) ? 0.0 : max(cbSceneParam._m0[88u].z, 0.0));
    float _1733 = (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) * 5.0;
    float _1737 = 0.99999988079071044921875 / (_525 + 10.0);
    float _1739 = _1737 * dot(vec3(_515, _516, _517), vec3(1.0, 0.0, 0.0));
    vec4 _1749 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1739 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1739 + _1727) * cbSceneParam._m0[86u].x, _604), _1733).w) + _1727) * cbSceneParam._m0[86u].x, _604), _1733);
    float _1765 = 1.0 - _1749.w;
    uint _1772 = _643 + 5u;
    uvec4 _1775 = floatBitsToUint(cbInstanceData._m0[_1772]);
    uint _1777 = _1775.x * 14u;
    uint _1778 = _1777 + 13u;
    float _1785 = _668 + (-1.0);
    float _1790 = (cbLight._m0[_1778].x * _1785) + 1.0;
    float _1791 = (cbLight._m0[_1778].y * _1785) + 1.0;
    float _1792 = (cbLight._m0[_1778].z * _1785) + 1.0;
    float _1793 = (cbLight._m0[_1778].w * _1785) + 1.0;
    uint _1794 = _1777 + 5u;
    float _1800 = isnan(1.0) ? _1791 : (isnan(_1791) ? 1.0 : min(_1791, 1.0));
    uint _1804 = _1777 + 4u;
    float _1811 = isnan(1.0) ? _1790 : (isnan(_1790) ? 1.0 : min(_1790, 1.0));
    uint _1815 = _1777 | 1u;
    float _1826 = dot(vec3(cbLight._m0[_1777].xyz), vec3(_515, _516, _517));
    float _1829 = dot(vec3(cbLight._m0[_1815].xyz), vec3(_515, _516, _517));
    float _4194 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
    float _4205 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
    float _1834 = (isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0))) * 0.3183098733425140380859375;
    float _1836 = (isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0))) * 0.3183098733425140380859375;
    float _1843 = ((cbLight._m0[_1794].x * _1800) * _1836) + ((cbLight._m0[_1804].x * _1811) * _1834);
    float _1844 = ((_1800 * cbLight._m0[_1794].y) * _1836) + ((_1811 * cbLight._m0[_1804].y) * _1834);
    float _1845 = ((_1800 * cbLight._m0[_1794].z) * _1836) + ((_1811 * cbLight._m0[_1804].z) * _1834);
    uvec4 _1849 = floatBitsToUint(cbLight._m0[_1777 + 12u]);
    bool _1851 = _1849.x == 0u;
    float _1862;
    float _1864;
    float _1866;
    if (_1851)
    {
        _1862 = _1843;
        _1864 = _1844;
        _1866 = _1845;
    }
    else
    {
        uint _1870 = _1777 + 6u;
        float _1886 = (dot(vec3(cbLight._m0[_1777 + 2u].xyz), vec3(_515, _516, _517)) * 0.5) + 0.5;
        float _1887 = _1886 * _1886;
        float _4216 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
        float _1888 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _1889 = isnan(1.0) ? _1792 : (isnan(_1792) ? 1.0 : min(_1792, 1.0));
        _1862 = (((cbLight._m0[_1870].x * 0.3183098733425140380859375) * _1888) * _1889) + _1843;
        _1864 = (((cbLight._m0[_1870].y * 0.3183098733425140380859375) * _1888) * _1889) + _1844;
        _1866 = (((cbLight._m0[_1870].z * 0.3183098733425140380859375) * _1888) * _1889) + _1845;
    }
    bool _1869 = _1849.y == 0u;
    float _1907;
    float _1909;
    float _1911;
    if (_1869)
    {
        _1907 = _1862;
        _1909 = _1864;
        _1911 = _1866;
    }
    else
    {
        uint _2064 = _1777 + 7u;
        float _2080 = (dot(vec3(cbLight._m0[_1777 + 3u].xyz), vec3(_515, _516, _517)) * 0.5) + 0.5;
        float _2081 = _2080 * _2080;
        float _4232 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
        float _2082 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _2083 = isnan(1.0) ? _1793 : (isnan(_1793) ? 1.0 : min(_1793, 1.0));
        _1907 = (((cbLight._m0[_2064].x * 0.3183098733425140380859375) * _2082) * _2083) + _1862;
        _1909 = (((cbLight._m0[_2064].y * 0.3183098733425140380859375) * _2082) * _2083) + _1864;
        _1911 = (((cbLight._m0[_2064].z * 0.3183098733425140380859375) * _2082) * _2083) + _1866;
    }
    uint _1914 = _1777 + 8u;
    float _1926 = 1.0 - (sqrt(1.0 - (0.07500000298023223876953125 / cbLight._m0[_1777].w)) * 0.949999988079071044921875);
    float _1927 = _1926 * _1926;
    float _1928 = cbLight._m0[_1777].x + _583;
    float _1929 = cbLight._m0[_1777].y + _584;
    float _1930 = cbLight._m0[_1777].z + _585;
    float _1934 = inversesqrt(dot(vec3(_1928, _1929, _1930), vec3(_1928, _1929, _1930)));
    float _1935 = _1934 * _1928;
    float _1936 = _1934 * _1929;
    float _1937 = _1934 * _1930;
    float _1938 = dot(vec3(_515, _516, _517), vec3(cbLight._m0[_1777].xyz));
    float _4248 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
    float _1941 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
    float _4259 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _1942 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
    float _1943 = dot(vec3(_515, _516, _517), vec3(_1935, _1936, _1937));
    float _4270 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
    float _1946 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
    float _1947 = dot(vec3(cbLight._m0[_1777].xyz), vec3(_1935, _1936, _1937));
    float _4281 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
    float _1951 = _1927 * _1927;
    float _1955 = ((_1946 * _1946) * (_1951 + (-1.0))) + 1.0;
    float _1966 = (exp2(log2(1.0 - (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1967 = 1.0 - _1927;
    float _1978 = (0.5 / (((_1942 * ((_1941 * _1967) + _1927)) + 9.9999999392252902907785028219223e-09) + (((_1942 * _1967) + _1927) * _1941))) * _1941;
    float _4292 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
    float _1980 = (isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0))) * (_1951 / ((_1955 * _1955) * 3.141590118408203125));
    uint _1991 = _1777 + 9u;
    float _2001 = 1.0 - (sqrt(1.0 - (0.07500000298023223876953125 / cbLight._m0[_1815].w)) * 0.949999988079071044921875);
    float _2002 = _2001 * _2001;
    float _2003 = cbLight._m0[_1815].x + _583;
    float _2004 = cbLight._m0[_1815].y + _584;
    float _2005 = cbLight._m0[_1815].z + _585;
    float _2009 = inversesqrt(dot(vec3(_2003, _2004, _2005), vec3(_2003, _2004, _2005)));
    float _2010 = _2009 * _2003;
    float _2011 = _2009 * _2004;
    float _2012 = _2009 * _2005;
    float _2013 = dot(vec3(_515, _516, _517), vec3(cbLight._m0[_1815].xyz));
    float _4303 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
    float _2016 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
    float _2017 = dot(vec3(_515, _516, _517), vec3(_2010, _2011, _2012));
    float _4314 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
    float _2020 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
    float _2021 = dot(vec3(cbLight._m0[_1815].xyz), vec3(_2010, _2011, _2012));
    float _4325 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
    float _2025 = _2002 * _2002;
    float _2029 = ((_2020 * _2020) * (_2025 + (-1.0))) + 1.0;
    float _2038 = (exp2(log2(1.0 - (isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2039 = 1.0 - _2002;
    float _2049 = (0.5 / (((_1942 * ((_2016 * _2039) + _2002)) + 9.9999999392252902907785028219223e-09) + (((_1942 * _2039) + _2002) * _2016))) * _2016;
    float _4336 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
    float _2051 = (isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0))) * (_2025 / ((_2029 * _2029) * 3.141590118408203125));
    float _2061 = (((_2038 * cbLight._m0[_1991].x) * _2051) * _1800) + (((_1966 * cbLight._m0[_1914].x) * _1980) * _1811);
    float _2062 = (((_2038 * cbLight._m0[_1991].y) * _2051) * _1800) + (((_1966 * cbLight._m0[_1914].y) * _1980) * _1811);
    float _2063 = (((_2038 * cbLight._m0[_1991].z) * _2051) * _1800) + (((_1966 * cbLight._m0[_1914].z) * _1980) * _1811);
    float _2125;
    float _2127;
    float _2129;
    if (_1851)
    {
        _2125 = _2061;
        _2127 = _2062;
        _2129 = _2063;
    }
    else
    {
        uint _2131 = _1777 + 2u;
        uint _2135 = _1777 + 10u;
        float _2148 = 1.0 - (sqrt(1.0 - (0.07500000298023223876953125 / cbLight._m0[_2131].w)) * 0.949999988079071044921875);
        float _2149 = _2148 * _2148;
        float _2150 = cbLight._m0[_2131].x + _583;
        float _2151 = cbLight._m0[_2131].y + _584;
        float _2152 = cbLight._m0[_2131].z + _585;
        float _2156 = inversesqrt(dot(vec3(_2150, _2151, _2152), vec3(_2150, _2151, _2152)));
        float _2157 = _2156 * _2150;
        float _2158 = _2156 * _2151;
        float _2159 = _2156 * _2152;
        float _2160 = dot(vec3(_515, _516, _517), vec3(cbLight._m0[_2131].xyz));
        float _4347 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
        float _2163 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
        float _2164 = dot(vec3(_515, _516, _517), vec3(_2157, _2158, _2159));
        float _4358 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
        float _2167 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
        float _2168 = dot(vec3(cbLight._m0[_2131].xyz), vec3(_2157, _2158, _2159));
        float _4369 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
        float _2172 = _2149 * _2149;
        float _2176 = ((_2167 * _2167) * (_2172 + (-1.0))) + 1.0;
        float _2185 = (exp2(log2(1.0 - (isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2186 = 1.0 - _2149;
        float _2196 = (0.5 / (((_1942 * ((_2163 * _2186) + _2149)) + 9.9999999392252902907785028219223e-09) + (((_1942 * _2186) + _2149) * _2163))) * _2163;
        float _4380 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
        float _2198 = (isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0))) * (_2172 / ((_2176 * _2176) * 3.141590118408203125));
        float _2199 = isnan(1.0) ? _1792 : (isnan(_1792) ? 1.0 : min(_1792, 1.0));
        _2125 = (((_2185 * cbLight._m0[_2135].x) * _2198) * _2199) + _2061;
        _2127 = (((_2185 * cbLight._m0[_2135].y) * _2198) * _2199) + _2062;
        _2129 = (((_2185 * cbLight._m0[_2135].z) * _2198) * _2199) + _2063;
    }
    float _2234;
    float _2236;
    float _2238;
    if (_1869)
    {
        _2234 = _2125;
        _2236 = _2127;
        _2238 = _2129;
    }
    else
    {
        uint _2245 = _1777 + 3u;
        uint _2249 = _1777 + 11u;
        float _2262 = 1.0 - (sqrt(1.0 - (0.07500000298023223876953125 / cbLight._m0[_2245].w)) * 0.949999988079071044921875);
        float _2263 = _2262 * _2262;
        float _2264 = cbLight._m0[_2245].x + _583;
        float _2265 = cbLight._m0[_2245].y + _584;
        float _2266 = cbLight._m0[_2245].z + _585;
        float _2270 = inversesqrt(dot(vec3(_2264, _2265, _2266), vec3(_2264, _2265, _2266)));
        float _2271 = _2270 * _2264;
        float _2272 = _2270 * _2265;
        float _2273 = _2270 * _2266;
        float _2274 = dot(vec3(_515, _516, _517), vec3(cbLight._m0[_2245].xyz));
        float _4396 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
        float _2277 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
        float _2278 = dot(vec3(_515, _516, _517), vec3(_2271, _2272, _2273));
        float _4407 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
        float _2281 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
        float _2282 = dot(vec3(cbLight._m0[_2245].xyz), vec3(_2271, _2272, _2273));
        float _4418 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
        float _2286 = _2263 * _2263;
        float _2290 = ((_2281 * _2281) * (_2286 + (-1.0))) + 1.0;
        float _2299 = (exp2(log2(1.0 - (isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2300 = 1.0 - _2263;
        float _2310 = (0.5 / (((_1942 * ((_2277 * _2300) + _2263)) + 9.9999999392252902907785028219223e-09) + (((_1942 * _2300) + _2263) * _2277))) * _2277;
        float _4429 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
        float _2312 = (isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0))) * (_2286 / ((_2290 * _2290) * 3.141590118408203125));
        float _2313 = isnan(1.0) ? _1793 : (isnan(_1793) ? 1.0 : min(_1793, 1.0));
        _2234 = (((_2299 * cbLight._m0[_2249].x) * _2312) * _2313) + _2125;
        _2236 = (((_2299 * cbLight._m0[_2249].y) * _2312) * _2313) + _2127;
        _2238 = (((_2299 * cbLight._m0[_2249].z) * _2312) * _2313) + _2129;
    }
    float _2447;
    float _2449;
    float _2451;
    float _2453;
    float _2455;
    float _2457;
    if (_1775.y == 0u)
    {
        float _2388 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2389 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2388;
        float _2390 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2388;
        float _2391 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2388;
        uvec4 _2403 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2404 = _2403.x;
        uint _2415 = uint((float(_2403.y) * floor(float(uint(cbSceneParam._m0[85u].y * _604) / _2404))) + floor(float(uint(cbSceneParam._m0[85u].x * _603) / _2404)));
        float _2425 = (log2(_2391 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2426 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
        uint _2429 = uint(isnan(14.0) ? _2426 : (isnan(_2426) ? 14.0 : min(_2426, 14.0)));
        uvec4 _2434 = texelFetch(g_lightClusterGridBuffer, int(((_2429 << 2u) + (_2415 << 6u)) >> 2u));
        uint _2435 = _2434.x;
        uint _2436 = _2403.z;
        float _2729;
        float _2731;
        float _2733;
        float _2735;
        float _2737;
        float _2739;
        if (((((1u << ((_2436 >> 4u) & 15u)) + 4294967295u) & _2435) == 0u) || ((_2436 & 240u) == 0u))
        {
            _2729 = 0.0;
            _2731 = 0.0;
            _2733 = 0.0;
            _2735 = 0.0;
            _2737 = 0.0;
            _2739 = 0.0;
        }
        else
        {
            float _2730;
            float _2732;
            float _2734;
            float _2736;
            float _2738;
            float _2740;
            float _2913 = 0.0;
            float _2914 = 0.0;
            float _2915 = 0.0;
            float _2916 = 0.0;
            float _2917 = 0.0;
            float _2918 = 0.0;
            uint _2919 = 0u;
            uint _2928;
            bool _2929;
            for (;;)
            {
                _2928 = texelFetch(g_lightClassification, int((((_2429 << 5u) + (_2415 << 9u)) + (_2919 << 2u)) >> 2u)).x;
                _2929 = _2928 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2929)
                {
                    frontier_phi_68_pred = _2915;
                    frontier_phi_68_pred_1 = _2918;
                    frontier_phi_68_pred_2 = _2917;
                    frontier_phi_68_pred_3 = _2916;
                    frontier_phi_68_pred_4 = _2914;
                    frontier_phi_68_pred_5 = _2913;
                }
                else
                {
                    float _3058;
                    float _3059;
                    float _3060;
                    float _3061;
                    float _3062;
                    float _3063;
                    uint _3064;
                    _3058 = _2913;
                    _3059 = _2914;
                    _3060 = _2915;
                    _3061 = _2916;
                    _3062 = _2917;
                    _3063 = _2918;
                    _3064 = _2928;
                    float _2985;
                    float _2986;
                    float _2987;
                    float _2988;
                    float _2989;
                    float _2990;
                    for (;;)
                    {
                        uint _3068 = uint(findLSB(_3064)) + (_2919 << 5u);
                        uint _3065 = (_3064 + 4294967295u) & _3064;
                        uint _3070 = _3068 * 48u;
                        vec4 _3084 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3070)).x, texelFetch(g_PointLightRenderingBuffer, int(_3070 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3070 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3070 + 3u)).x));
                        uint _3090 = (_3068 * 48u) + 4u;
                        vec4 _3103 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3090)).x, texelFetch(g_PointLightRenderingBuffer, int(_3090 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3090 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3090 + 3u)).x));
                        uint _3109 = (_3068 * 48u) + 8u;
                        vec3 _3120 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3109)).x, texelFetch(g_PointLightRenderingBuffer, int(_3109 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3109 + 2u)).x));
                        float _3124 = _3084.x - _2389;
                        float _3125 = _3084.y - _2390;
                        float _3126 = _3084.z - _2391;
                        float _3127 = dot(vec3(_3124, _3125, _3126), vec3(_3124, _3125, _3126));
                        float _3130 = inversesqrt(_3127);
                        float _3131 = _3130 * _3124;
                        float _3132 = _3130 * _3125;
                        float _3133 = _3130 * _3126;
                        float _3134 = dot(vec3(_624, _627, _630), vec3(_3131, _3132, _3133));
                        float _3139 = 1.0 - (_3127 * _3084.w);
                        float _4455 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0));
                        float _3140 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
                        float _3141 = sqrt(_3127) * _3103.w;
                        float _3144 = 1.39999997615814208984375 / (_3141 + 1.39999997615814208984375);
                        float _3145 = _3144 * _3144;
                        float _3148 = ((1.0 - _3145) * _3134) + _3145;
                        float _3151 = _3141 * _3141;
                        float _3154 = ((isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0))) * _3140) / ((_3151 * 0.699999988079071044921875) + 1.0);
                        float _3158 = (-0.0) - _2389;
                        float _3159 = (-0.0) - _2390;
                        float _3160 = (-0.0) - _2391;
                        float _3164 = inversesqrt(dot(vec3(_3158, _3159, _3160), vec3(_3158, _3159, _3160)));
                        float _3165 = _3164 * _3158;
                        float _3166 = _3164 * _3159;
                        float _3167 = _3164 * _3160;
                        float _3175 = exp2(log2(1.0 / ((_3151 * 3.5) + 5.0)) * 0.25);
                        float _3177 = sqrt(_3175 * _3175);
                        float _3178 = _3177 * _3177;
                        float _3179 = _3178 * _3178;
                        float _3180 = _3165 + _3131;
                        float _3181 = _3166 + _3132;
                        float _3182 = _3167 + _3133;
                        float _3186 = inversesqrt(dot(vec3(_3180, _3181, _3182), vec3(_3180, _3181, _3182)));
                        float _3190 = dot(vec3(_624, _627, _630), vec3(_3165, _3166, _3167));
                        float _4471 = isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : max(_3190, 0.0));
                        float _3193 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
                        float _3194 = dot(vec3(_624, _627, _630), vec3(_3186 * _3180, _3186 * _3181, _3186 * _3182));
                        float _4482 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0));
                        float _3197 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
                        float _3201 = ((_3197 * _3197) * (_3179 + (-1.0))) + 1.0;
                        float _3202 = _3144 * _3178;
                        float _3203 = _3202 * _3202;
                        float _3206 = ((1.0 - _3203) * _3134) + _3203;
                        float _4493 = isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : max(_3206, 0.0));
                        float _3207 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
                        float _3208 = 1.0 - _3178;
                        float _3218 = (0.5 / (((_3207 * ((_3193 * _3208) + _3178)) + 9.9999999392252902907785028219223e-09) + (((_3207 * _3208) + _3178) * _3193))) * _3207;
                        float _4504 = isnan(0.0) ? _3218 : (isnan(_3218) ? 0.0 : max(_3218, 0.0));
                        float _3229 = (((_3179 * 3.1415927410125732421875) * (isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0)))) / ((_3201 * _3201) * ((_3151 * 2.1991131305694580078125) + 3.141590118408203125))) * _3140;
                        _2988 = (_3154 * _3103.x) + _3061;
                        _2989 = (_3154 * _3103.y) + _3062;
                        _2990 = (_3154 * _3103.z) + _3063;
                        _2985 = (_3229 * _3120.x) + _3058;
                        _2986 = (_3229 * _3120.y) + _3059;
                        _2987 = (_3229 * _3120.z) + _3060;
                        if (_3065 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3058 = _2985;
                            _3059 = _2986;
                            _3060 = _2987;
                            _3061 = _2988;
                            _3062 = _2989;
                            _3063 = _2990;
                            _3064 = _3065;
                        }
                    }
                    frontier_phi_68_pred = _2987;
                    frontier_phi_68_pred_1 = _2990;
                    frontier_phi_68_pred_2 = _2989;
                    frontier_phi_68_pred_3 = _2988;
                    frontier_phi_68_pred_4 = _2986;
                    frontier_phi_68_pred_5 = _2985;
                }
                _2734 = frontier_phi_68_pred;
                _2740 = frontier_phi_68_pred_1;
                _2738 = frontier_phi_68_pred_2;
                _2736 = frontier_phi_68_pred_3;
                _2732 = frontier_phi_68_pred_4;
                _2730 = frontier_phi_68_pred_5;
                uint _2920 = _2919 + 1u;
                if (_2920 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2913 = _2730;
                    _2914 = _2732;
                    _2915 = _2734;
                    _2916 = _2736;
                    _2917 = _2738;
                    _2918 = _2740;
                    _2919 = _2920;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2729 = _2730;
            _2731 = _2732;
            _2733 = _2734;
            _2735 = _2736;
            _2737 = _2738;
            _2739 = _2740;
        }
        uvec4 _2743 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2744 = _2743.z;
        uint _2746 = (_2744 >> 8u) & 15u;
        float _2881;
        float _2883;
        float _2885;
        float _2887;
        float _2889;
        float _2891;
        if (((4294967295u << _2746) & _2435) == 0u)
        {
            _2881 = _2729;
            _2883 = _2731;
            _2885 = _2733;
            _2887 = _2735;
            _2889 = _2737;
            _2891 = _2739;
        }
        else
        {
            float _2906 = inversesqrt(dot(vec3(_2389, _2390, _2391), vec3(_2389, _2390, _2391)));
            float _2907 = _2906 * _2389;
            float _2908 = _2906 * _2390;
            float _2909 = _2906 * _2391;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2746 < ((_2744 >> 12u) & 15u))
            {
                float _2882;
                float _2884;
                float _2886;
                float _2888;
                float _2890;
                float _2892;
                float _3041 = _2729;
                float _3042 = _2731;
                float _3043 = _2733;
                float _3044 = _2735;
                float _3045 = _2737;
                float _3046 = _2739;
                uint _3047 = _2746;
                uint _3056;
                bool _3057;
                for (;;)
                {
                    _3056 = texelFetch(g_lightClassification, int((((_2429 << 5u) + (_2415 << 9u)) + (_3047 << 2u)) >> 2u)).x;
                    _3057 = _3056 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3057)
                    {
                        frontier_phi_79_pred = _3046;
                        frontier_phi_79_pred_1 = _3045;
                        frontier_phi_79_pred_2 = _3044;
                        frontier_phi_79_pred_3 = _3043;
                        frontier_phi_79_pred_4 = _3042;
                        frontier_phi_79_pred_5 = _3041;
                    }
                    else
                    {
                        float _3243;
                        float _3244;
                        float _3245;
                        float _3246;
                        float _3247;
                        float _3248;
                        float _3533;
                        float _3534;
                        float _3535;
                        float _3536;
                        float _3537;
                        float _3538;
                        float _3256 = _3041;
                        float _3257 = _3042;
                        float _3258 = _3043;
                        float _3259 = _3044;
                        float _3260 = _3045;
                        float _3261 = _3046;
                        uint _3262 = _3056;
                        uint _3263;
                        vec4 _3288;
                        float _3289;
                        vec4 _3304;
                        vec3 _3316;
                        vec4 _3332;
                        vec4 _3348;
                        float _3395;
                        bool _3396;
                        for (;;)
                        {
                            uint _3273 = ((_3047 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3262));
                            _3263 = (_3262 + 4294967295u) & _3262;
                            uint _3275 = _3273 * 40u;
                            _3288 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3275)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 3u)).x));
                            _3289 = _3288.w;
                            uint _3291 = (_3273 * 40u) + 4u;
                            _3304 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3291)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 3u)).x));
                            uint _3306 = (_3273 * 40u) + 8u;
                            _3316 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3306)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 2u)).x));
                            uint _3319 = (_3273 * 40u) + 16u;
                            _3332 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3319)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 3u)).x));
                            uint _3335 = (_3273 * 40u) + 20u;
                            _3348 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3335)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 3u)).x));
                            uint _3351 = (_3273 * 40u) + 24u;
                            vec4 _3364 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3351)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 3u)).x));
                            uint _3370 = (_3273 * 40u) + 28u;
                            vec4 _3383 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3370)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 3u)).x));
                            _3395 = fma(_2391, _3383.z, fma(_2390, _3383.y, _3383.x * _2389)) + _3383.w;
                            _3396 = !((fma(_2391, _3364.z, fma(_2390, _3364.y, _3364.x * _2389)) + _3364.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3396)
                            {
                                float _3423 = _3288.x - _2389;
                                float _3424 = _3288.y - _2390;
                                float _3425 = _3288.z - _2391;
                                float _3426 = dot(vec3(_3423, _3424, _3425), vec3(_3423, _3424, _3425));
                                float _3429 = inversesqrt(_3426);
                                float _3430 = _3429 * _3423;
                                float _3431 = _3429 * _3424;
                                float _3432 = _3429 * _3425;
                                float _3436 = 1.0 - (_3426 / (_3289 * _3289));
                                float _4515 = isnan(0.0) ? _3436 : (isnan(_3436) ? 0.0 : max(_3436, 0.0));
                                float _3437 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
                                float _3441 = sqrt(_3426) * _3304.w;
                                float _3443 = 1.39999997615814208984375 / (_3441 + 1.39999997615814208984375);
                                float _3444 = _3443 * _3443;
                                float _3447 = ((1.0 - _3444) * dot(vec3(_3430, _3431, _3432), vec3(_624, _627, _630))) + _3444;
                                float _3450 = _3441 * _3441;
                                float _3454 = (fma(_2391, _3332.z, fma(_2390, _3332.y, _3332.x * _2389)) + _3332.w) / _3395;
                                float _3455 = (fma(_2391, _3348.z, fma(_2390, _3348.y, _3348.x * _2389)) + _3348.w) / _3395;
                                float _3459 = 1.0 - dot(vec2(_3454, _3455), vec2(_3454, _3455));
                                float _4531 = isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0));
                                float _3460 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
                                float _3461 = _3460 * (((isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0))) * _3437) / ((_3450 * 0.699999988079071044921875) + 1.0));
                                float _3473 = exp2(log2(1.0 / ((_3450 * 3.5) + 5.0)) * 0.25);
                                float _3475 = sqrt(_3473 * _3473);
                                float _3476 = _3475 * _3475;
                                float _3477 = _3476 * _3476;
                                float _3478 = _3430 - _2907;
                                float _3479 = _3431 - _2908;
                                float _3480 = _3432 - _2909;
                                float _3484 = inversesqrt(dot(vec3(_3478, _3479, _3480), vec3(_3478, _3479, _3480)));
                                float _3488 = dot(vec3(_624, _627, _630), vec3((-0.0) - _2907, (-0.0) - _2908, (-0.0) - _2909));
                                float _4542 = isnan(0.0) ? _3488 : (isnan(_3488) ? 0.0 : max(_3488, 0.0));
                                float _3491 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
                                float _3492 = dot(vec3(_624, _627, _630), vec3(_3484 * _3478, _3484 * _3479, _3484 * _3480));
                                float _4553 = isnan(0.0) ? _3492 : (isnan(_3492) ? 0.0 : max(_3492, 0.0));
                                float _3495 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
                                float _3499 = ((_3495 * _3495) * (_3477 + (-1.0))) + 1.0;
                                float _3500 = _3443 * _3476;
                                float _3501 = _3500 * _3500;
                                float _3507 = ((1.0 - _3501) * dot(vec3(_624, _627, _630), vec3(_3430, _3431, _3432))) + _3501;
                                float _4564 = isnan(0.0) ? _3507 : (isnan(_3507) ? 0.0 : max(_3507, 0.0));
                                float _3508 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
                                float _3509 = 1.0 - _3476;
                                float _3519 = (0.5 / (((_3508 * ((_3491 * _3509) + _3476)) + 9.9999999392252902907785028219223e-09) + (((_3508 * _3509) + _3476) * _3491))) * _3508;
                                float _4575 = isnan(0.0) ? _3519 : (isnan(_3519) ? 0.0 : max(_3519, 0.0));
                                float _3529 = (_3460 * _3437) * (((_3477 * 3.1415927410125732421875) * (isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0)))) / ((_3499 * _3499) * ((_3450 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3461 * _3304.z;
                                frontier_phi_85_pred_1 = _3461 * _3304.y;
                                frontier_phi_85_pred_2 = _3461 * _3304.x;
                                frontier_phi_85_pred_3 = _3529 * _3316.z;
                                frontier_phi_85_pred_4 = _3529 * _3316.y;
                                frontier_phi_85_pred_5 = _3529 * _3316.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3538 = frontier_phi_85_pred;
                            _3537 = frontier_phi_85_pred_1;
                            _3536 = frontier_phi_85_pred_2;
                            _3535 = frontier_phi_85_pred_3;
                            _3534 = frontier_phi_85_pred_4;
                            _3533 = frontier_phi_85_pred_5;
                            _3246 = _3536 + _3259;
                            _3247 = _3537 + _3260;
                            _3248 = _3538 + _3261;
                            _3243 = _3533 + _3256;
                            _3244 = _3534 + _3257;
                            _3245 = _3535 + _3258;
                            if (_3263 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3256 = _3243;
                                _3257 = _3244;
                                _3258 = _3245;
                                _3259 = _3246;
                                _3260 = _3247;
                                _3261 = _3248;
                                _3262 = _3263;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3248;
                        frontier_phi_79_pred_1 = _3247;
                        frontier_phi_79_pred_2 = _3246;
                        frontier_phi_79_pred_3 = _3245;
                        frontier_phi_79_pred_4 = _3244;
                        frontier_phi_79_pred_5 = _3243;
                    }
                    _2892 = frontier_phi_79_pred;
                    _2890 = frontier_phi_79_pred_1;
                    _2888 = frontier_phi_79_pred_2;
                    _2886 = frontier_phi_79_pred_3;
                    _2884 = frontier_phi_79_pred_4;
                    _2882 = frontier_phi_79_pred_5;
                    uint _3048 = _3047 + 1u;
                    if (_3048 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3041 = _2882;
                        _3042 = _2884;
                        _3043 = _2886;
                        _3044 = _2888;
                        _3045 = _2890;
                        _3046 = _2892;
                        _3047 = _3048;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2888;
                frontier_phi_60_61_ladder_1 = _2892;
                frontier_phi_60_61_ladder_2 = _2890;
                frontier_phi_60_61_ladder_3 = _2886;
                frontier_phi_60_61_ladder_4 = _2884;
                frontier_phi_60_61_ladder_5 = _2882;
            }
            else
            {
                frontier_phi_60_61_ladder = _2735;
                frontier_phi_60_61_ladder_1 = _2739;
                frontier_phi_60_61_ladder_2 = _2737;
                frontier_phi_60_61_ladder_3 = _2733;
                frontier_phi_60_61_ladder_4 = _2731;
                frontier_phi_60_61_ladder_5 = _2729;
            }
            _2881 = frontier_phi_60_61_ladder_5;
            _2883 = frontier_phi_60_61_ladder_4;
            _2885 = frontier_phi_60_61_ladder_3;
            _2887 = frontier_phi_60_61_ladder;
            _2889 = frontier_phi_60_61_ladder_2;
            _2891 = frontier_phi_60_61_ladder_1;
        }
        float _2896 = isnan(1.0) ? _668 : (isnan(_668) ? 1.0 : min(_668, 1.0));
        _2447 = (_2896 * _2887) + _1907;
        _2449 = (_2896 * _2889) + _1909;
        _2451 = (_2896 * _2891) + _1911;
        _2453 = ((_2881 * 0.039999999105930328369140625) * _2896) + _2234;
        _2455 = ((_2883 * 0.039999999105930328369140625) * _2896) + _2236;
        _2457 = ((_2885 * 0.039999999105930328369140625) * _2896) + _2238;
    }
    else
    {
        _2447 = _1907;
        _2449 = _1909;
        _2451 = _1911;
        _2453 = _2234;
        _2455 = _2236;
        _2457 = _2238;
    }
    float _2470 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2471 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2472 = cbSceneParam._m0[86u].x * (_1727 + (_1737 * dot(vec3(_515, _516, _517), vec3(_206, _207, _208))));
    float _2473 = isnan(_2470) ? _2472 : (isnan(_2472) ? _2470 : min(_2472, _2470));
    float _2474 = isnan(_2471) ? _604 : (isnan(_604) ? _2471 : min(_604, _2471));
    vec4 _2476 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2473, _2474), 0.0);
    float _2478 = _2476.x;
    bool _2498 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2478)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2478))) > _525;
    float _2499 = _2498 ? _2473 : _603;
    float _2500 = _2498 ? _2474 : _604;
    vec4 _2502 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2499, _2500));
    vec4 _2507 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2499, _2500));
    float _2509 = _2507.x;
    bool _2514 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _2523 = (-0.0) - cbSceneParam._m0[2u].z;
    float _2529 = (_2514 ? (_2523 / (cbSceneParam._m0[2u].x - _2509)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2509))) - _525;
    bool _2536 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2543 = (isnan(_2529) ? 0.0 : (isnan(0.0) ? _2529 : max(0.0, _2529))) * (-1.44269502162933349609375);
    float _4606 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _4617 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _4628 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    vec4 _2563 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2499, _2500), 0.0);
    float _2565 = _2563.x;
    float _2571 = (_2514 ? (_2523 / (cbSceneParam._m0[2u].x - _2565)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2565))) - _525;
    uint _2577 = floatBitsToUint(cbInstanceData._m0[_1772]).x * 14u;
    uint _2583 = _2577 + 4u;
    float _2592 = dot(vec3(cbLight._m0[_2577].xyz), vec3(_227, _228, _229));
    float _2600 = dot(vec3((-0.0) - _583, (-0.0) - _584, (-0.0) - _585), vec3((-0.0) - _227, (-0.0) - _228, (-0.0) - _229));
    float _2605 = ((isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0))) / (isnan(0.001000000047497451305389404296875) ? _2592 : (isnan(_2592) ? 0.001000000047497451305389404296875 : max(_2592, 0.001000000047497451305389404296875)))) + 1.0;
    float _2606 = _2605 * (isnan(_2571) ? 0.0 : (isnan(0.0) ? _2571 : max(0.0, _2571)));
    float _2655 = 0.959999978542327880859375 - (exp2(log2(1.0 - _683) * 5.0) * 0.959999978542327880859375);
    float _2656 = ((_2536 ? 0.0 : (((cbLight._m0[_2583].x * 0.0159154944121837615966796875) / ((_2605 * 0.699999988079071044921875) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2(_2606 * (-1.0098865032196044921875))))) + ((exp2(_2543 * (_2536 ? 0.0 : 0.699999988079071044921875)) * _2502.x) * cbSceneParam._m0[72u].w)) * _2655;
    float _2657 = ((_2536 ? 0.0 : (((cbLight._m0[_2583].y * 0.0159154944121837615966796875) / ((_2605 * 0.300000011920928955078125) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2(_2606 * (-0.43280851840972900390625))))) + ((exp2(_2543 * (_2536 ? 0.0 : 0.300000011920928955078125)) * _2502.y) * cbSceneParam._m0[72u].w)) * _2655;
    float _2658 = ((_2536 ? 0.0 : (((cbLight._m0[_2583].z * 0.0159154944121837615966796875) / ((_2605 * 0.2199999988079071044921875) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2(_2606 * (-0.3173929154872894287109375))))) + ((exp2(_2543 * (_2536 ? 0.0 : 0.2199999988079071044921875)) * _2502.z) * cbSceneParam._m0[72u].w)) * _2655;
    float _2666 = (_2656 + (((((_1704 * _1749.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0))) * _1499) * _1765)) + _2453) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0))) * (_2447 + ((isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0))) * _668))) - _2656) * 0.5);
    float _2668 = (_2657 + (((((_1704 * _1749.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0))) * _1499) * _1765)) + _2455) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0))) * (_2449 + ((isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0))) * _668))) - _2657) * 0.5);
    float _2670 = (_2658 + (((((_1704 * _1749.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0))) * _1499) * _1765)) + _2457) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0))) * (_2451 + ((isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0))) * _668))) - _2658) * 0.5);
    uint _2671 = _643 + 6u;
    float _2679 = _603 / cbSceneParam._m0[86u].x;
    float _2680 = _604 / cbSceneParam._m0[86u].y;
    vec4 _2694 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2679, _2680, (log2((isnan(cbSceneParam._m0[77u].w) ? _525 : (isnan(_525) ? cbSceneParam._m0[77u].w : min(_525, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2696 = _2694.x;
    float _2697 = _2694.y;
    float _2698 = _2694.z;
    float _2699 = _2694.w;
    float _2790;
    float _2792;
    float _2794;
    float _2796;
    if (_525 > cbSceneParam._m0[78u].w)
    {
        float _2754 = isnan(_525) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _525 : min(cbSceneParam._m0[80u].w, _525));
        float _2755 = _2754 / _525;
        float _2766 = _2755 * _576;
        float _2767 = _577 * _2755;
        float _2768 = (-0.0) - _2767;
        float _2769 = _2755 * _578;
        float _2771 = (cbSceneParam._m0[77u].w * _2768) / _2754;
        float _2772 = _2771 + cbSceneParam._m0[79u].w;
        float _2773 = cbSceneParam._m0[79u].w - _2767;
        float _2779 = sqrt(((_2766 * _2766) + (_2767 * _2767)) + (_2769 * _2769));
        float _2782 = (1.0 - (cbSceneParam._m0[77u].w / _2754)) * _2779;
        float _2787 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2788 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2998;
        if (abs((_2768 - _2771) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2998 = ((((_2772 > 0.0) ? exp2(_2787 * _2772) : (2.0 - exp2(_2788 * _2772))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2782;
        }
        else
        {
            float _2942 = 1.0 / cbSceneParam._m0[80u].x;
            float _2943 = isnan(_2773) ? _2772 : (isnan(_2772) ? _2773 : max(_2772, _2773));
            float _2944 = isnan(_2773) ? _2772 : (isnan(_2772) ? _2773 : min(_2772, _2773));
            float _2953 = isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : min(_2943, 0.0));
            float _2954 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : min(_2944, 0.0));
            _2998 = ((abs(_2779 / _2768) * cbSceneParam._m0[80u].y) * ((((_2953 - _2954) * 2.0) - ((exp2(_2787 * (isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0)))) - exp2(_2787 * (isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0))))) * _2942)) - ((exp2(_2788 * _2953) - exp2(_2788 * _2954)) * _2942))) + (_2782 * cbSceneParam._m0[80u].z);
        }
        vec4 _3000 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2679, _2680, 1.0), 0.0);
        float _3009 = exp2((_2998 * (-1.44269502162933349609375)) * (1.0 - _3000.w));
        float _3010 = log2(_3009);
        float _3026 = log2(_2699);
        _2790 = (exp2(_3026 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3010 * cbSceneParam._m0[78u].x)) * _3000.x) / cbSceneParam._m0[78u].x)) + _2696;
        _2792 = (exp2(_3026 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3010 * cbSceneParam._m0[78u].y)) * _3000.y) / cbSceneParam._m0[78u].y)) + _2697;
        _2794 = (exp2(_3026 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3010 * cbSceneParam._m0[78u].z)) * _3000.z) / cbSceneParam._m0[78u].z)) + _2698;
        _2796 = _3009 * _2699;
    }
    else
    {
        _2790 = _2696;
        _2792 = _2697;
        _2794 = _2698;
        _2796 = _2699;
    }
    bool _3036;
    float _2852;
    vec4 _2855;
    float _2857;
    vec4 _2859;
    float _2867;
    float _2868;
    float _2869;
    float _2870;
    bool _2880;
    for (;;)
    {
        bool _2808 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _2810 = log2(_2796);
        float _2817 = exp2(_2810 * cbSceneParam._m0[78u].x) * _2666;
        float _2818 = exp2(_2810 * cbSceneParam._m0[78u].y) * _2668;
        float _2819 = exp2(_2810 * cbSceneParam._m0[78u].z) * _2670;
        vec4 _2827 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_603, _604));
        float _2829 = _2827.x;
        float _2850 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2829)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2829))) - _525) * 3.0;
        float _4694 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0));
        _2852 = (isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0))) * cbInstanceData._m0[_2671].w;
        float _2853 = _592 + (-0.5);
        _2855 = cbMtdParam._m0[1u];
        _2857 = _2855.y * _2853;
        _2859 = cbMatDynParam._m0[0u];
        float _2866 = (roundEven(_2859.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2867 = _2866 * (_2808 ? _2817 : (_2817 + (cbSceneParam._m0[72u].w * _2790)));
        _2868 = _2866 * (_2808 ? _2818 : (_2818 + (cbSceneParam._m0[72u].w * _2792)));
        _2869 = _2866 * (_2808 ? _2819 : (_2819 + (cbSceneParam._m0[72u].w * _2794)));
        _2870 = _2853 * 0.999000012874603271484375;
        _2880 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2880)
        {
            if ((cbInstanceData._m0[_643 + 7u].x + _2870) < 0.5)
            {
                _3036 = true;
                break;
            }
        }
        uint _2977 = _644 + uint(_2859.w);
        if ((cbInstanceData._m0[_2977].w < 1.0) && ((cbInstanceData._m0[_2977].w + _2870) < 0.5))
        {
            _3036 = true;
            break;
        }
        if ((_2857 + 1.0) < _2855.x)
        {
            _3036 = true;
            break;
        }
        _3036 = false;
        break;
    }
    float _3234;
    if (_3036)
    {
        discard_state = true;
        _3234 = 0.0;
    }
    else
    {
        _3234 = _2852;
    }
    SV_Target.x = _2867;
    SV_Target.y = _2868;
    SV_Target.z = _2869;
    SV_Target.w = _3234;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2852;
    discard_exit();
}


