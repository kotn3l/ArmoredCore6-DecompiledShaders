#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1342;
float _4044;
float _4045;
float _4046;
float _4047;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _263 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _269 = _263.x * cbMtdParam._m0[9u].x;
    float _270 = _263.y * cbMtdParam._m0[9u].y;
    float _271 = _263.z * cbMtdParam._m0[9u].z;
    vec4 _309 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[5u].w));
    float _325 = (TEXCOORD_3.x - ((cbMtdParam._m0[14u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[14u].y + 1.0);
    float _4056 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
    float _326 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
    float _333 = (((_309.x * cbMtdParam._m0[10u].x) - _269) * _326) + _269;
    float _334 = (((_309.y * cbMtdParam._m0[10u].y) - _270) * _326) + _270;
    float _335 = (((_309.z * cbMtdParam._m0[10u].z) - _271) * _326) + _271;
    vec4 _352 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _371 = TEXCOORD_9.x - ((cbMtdParam._m0[16u].y * (1.0 - TEXCOORD_9.x)) * (_352.x + 0.00999999977648258209228515625));
    float _373 = _371 * (cbMtdParam._m0[16u].z + 1.0);
    float _4067 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _374 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
    float _382 = ((((cbMtdParam._m0[12u].x - _333) * TEXCOORD_9.x) * cbMtdParam._m0[16u].x) * _374) + _333;
    float _383 = ((((cbMtdParam._m0[12u].y - _334) * TEXCOORD_9.y) * cbMtdParam._m0[16u].x) * _374) + _334;
    float _384 = (((cbMtdParam._m0[16u].x * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _335)) * _374) + _335;
    vec4 _397 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[6u].w));
    float _399 = _397.x;
    float _417 = ((texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[7u].w)).x - _399) * _326) + _399;
    vec4 _430 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[4u].w));
    float _438 = (_430.x * 2.0) + (-1.0);
    float _440 = (_430.y * 2.0) + (-1.0);
    float _441 = dot(vec2(_438, _440), vec2(_438, _440));
    float _4078 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    vec4 _458 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _462 = _458.z;
    float _465 = (_458.x * 2.0) + (-1.0);
    float _466 = (_458.y * 2.0) + (-1.0);
    float _467 = dot(vec2(_465, _466), vec2(_465, _466));
    float _4089 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _472 = sqrt(1.0 - (isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))));
    float _475 = (_326 * (_430.z - _462)) + _462;
    float _481 = _371 * (cbMtdParam._m0[16u].y + 1.0);
    float _4100 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _485 = ((cbMtdParam._m0[15u].y - _475) * (isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0)))) + _475;
    float _498 = (cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _499 = (cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _525 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * ((cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * ((cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[10u].w));
    float _530 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[15u].w;
    float _537 = ((_525.y * 0.5) + (-0.25)) * cbMtdParam._m0[15u].z;
    float _539 = (-0.0) - (cbMtdParam._m0[15u].z * ((_525.x * 0.5) + (-0.25)));
    float _541 = fract(_530);
    float _543 = fract(_530 + 0.5);
    float _544 = _541 * _539;
    float _545 = _537 * _541;
    float _548 = _543 * _539;
    float _549 = _537 * _543;
    float _554 = abs((_541 * 2.0) + (-1.0));
    vec4 _570 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_544 + _498) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_545 + _499) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _572 = _570.x;
    float _573 = _570.y;
    float _574 = _570.z;
    vec4 _575 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_548 + _498) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_549 + _499) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _602 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _603 = (cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _616 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_544 + _602) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_545 + _603) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _618 = _616.x;
    float _619 = _616.y;
    float _620 = _616.z;
    vec4 _621 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_548 + _602) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_549 + _603) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _670 = (TEXCOORD_6.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_6.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_5, SS_WrapLinear), vec2((((cbMtdParam._m0[18u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((cbMtdParam._m0[18u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].x + 1.0);
    float _4111 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _671 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
    float _672 = _671 * (((((_621.x - _618) * _554) + _618) * cbMtdParam._m0[13u].x) + ((((_575.x - _572) * _554) + _572) * cbMtdParam._m0[11u].x));
    float _673 = _671 * (((((_621.y - _619) * _554) + _619) * cbMtdParam._m0[13u].y) + ((((_575.y - _573) * _554) + _573) * cbMtdParam._m0[11u].y));
    float _674 = _671 * (((((_621.z - _620) * _554) + _620) * cbMtdParam._m0[13u].z) + ((((_575.z - _574) * _554) + _574) * cbMtdParam._m0[11u].z));
    vec4 _686 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[9u].w));
    float _688 = _686.x;
    float _701 = (_326 * (_438 - _465)) + _465;
    float _702 = (_326 * (_440 - _466)) + _466;
    float _703 = (_326 * (sqrt(1.0 - (isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0)))) - _472)) + _472;
    vec4 _722 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[16u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, (((cbMtdParam._m0[17u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w));
    float _728 = (_722.x * 2.0) + (-1.0);
    float _729 = (_722.y * 2.0) + (-1.0);
    float _730 = dot(vec2(_728, _729), vec2(_728, _729));
    float _4122 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _746 = (_374 * (((_701 * cbMtdParam._m0[14u].z) - _701) + _728)) + _701;
    float _747 = (_374 * (((_702 * cbMtdParam._m0[14u].z) - _702) + _729)) + _702;
    float _748 = (_374 * (sqrt(1.0 - (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0)))) - _703)) + _703;
    float _751 = fma(_748, _234 * NORMAL.x, fma(_747, _241 * TANGENT.x, (_227 * _219) * _746));
    float _754 = fma(_748, _234 * NORMAL.y, fma(_747, _241 * TANGENT.y, (_227 * _220) * _746));
    float _757 = fma(_748, _234 * NORMAL.z, fma(_747, _241 * TANGENT.z, (_227 * _221) * _746));
    float _761 = inversesqrt(dot(vec3(_751, _754, _757), vec3(_751, _754, _757)));
    float _762 = _761 * _751;
    float _763 = _761 * _754;
    float _764 = _761 * _757;
    float _4133 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _765 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
    float _4144 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _4155 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _4166 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _4177 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _769 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
    float _785 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _825 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _835 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _825);
    float _836 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _825);
    float _837 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _825);
    float _841 = inversesqrt(dot(vec3(_835, _836, _837), vec3(_835, _836, _837)));
    float _842 = _835 * _841;
    float _843 = _836 * _841;
    float _844 = _837 * _841;
    vec4 _849 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _851 = _849.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1023 = sqrt(((_835 * _835) + (_836 * _836)) + (_837 * _837));
        float _1029 = (cbMatDynParam._m0[5u].x * _1023) + cbMatDynParam._m0[5u].y;
        float _4188 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1030 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1034 = (cbMatDynParam._m0[5u].z * _1023) + cbMatDynParam._m0[5u].w;
        float _4199 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0))) - _1030)) + _1030) < ((_851 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _862 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _863 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _881 = fma(_764, cbSceneParam._m0[5u].z, fma(_763, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _762));
    float _884 = fma(_764, cbSceneParam._m0[6u].z, fma(_763, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _762));
    float _887 = fma(_764, cbSceneParam._m0[7u].z, fma(_763, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _762));
    uint _900 = uint(roundEven(NORMAL.w)) * 13u;
    uint _901 = _900 + 9u;
    uint _902 = _901 + uint(cbMatDynParam._m0[0u].w);
    float _908 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0)))) * cbInstanceData._m0[_902].x;
    float _909 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0)))) * cbInstanceData._m0[_902].y;
    float _910 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0)))) * cbInstanceData._m0[_902].z;
    float _4210 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _911 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
    float _4221 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _912 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
    float _4232 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    float _913 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
    float _914 = 1.0 - _769;
    float _915 = _911 * _914;
    float _916 = _912 * _914;
    float _917 = _913 * _914;
    float _922 = (_911 + (-0.039999999105930328369140625)) * _769;
    float _923 = (_912 + (-0.039999999105930328369140625)) * _769;
    float _924 = (_913 + (-0.039999999105930328369140625)) * _769;
    float _925 = _922 + 0.039999999105930328369140625;
    float _927 = _923 + 0.039999999105930328369140625;
    float _928 = _924 + 0.039999999105930328369140625;
    vec4 _937 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _862, cbSceneParam._m0[86u].y * _863));
    float _940 = _937.x * TEXCOORD_3.w;
    float _941 = dot(vec3(_762, _763, _764), vec3(_842, _843, _844));
    float _944 = _941 * 2.0;
    float _948 = (_944 * _762) - _842;
    float _949 = (_944 * _763) - _843;
    float _950 = (_944 * _764) - _844;
    float _954 = abs(dot(vec3(_842, _843, _844), vec3(_762, _763, _764)));
    float _4243 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
    float _956 = sqrt(_765);
    float _969 = exp2((_956 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_956 * 3.0));
    float _975 = (1.0 - _969) * ((_956 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _976 = _969 * _956;
    float _1004 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1008 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1012 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1341;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1067 = fma(_1012, cbModelParam._m0[26u].z, fma(_1008, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1004));
        float _1071 = fma(_1012, cbModelParam._m0[27u].z, fma(_1008, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1004));
        float _1075 = fma(_1012, cbModelParam._m0[28u].z, fma(_1008, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1004));
        float _1099 = _1004 + _762;
        float _1100 = _1008 + _763;
        float _1101 = _1012 + _764;
        float _1111 = fma(_1101, cbModelParam._m0[26u].z, fma(_1100, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1099)) - _1067;
        float _1112 = fma(_1101, cbModelParam._m0[27u].z, fma(_1100, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1099)) - _1071;
        float _1113 = fma(_1101, cbModelParam._m0[28u].z, fma(_1100, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1099)) - _1075;
        float _1117 = inversesqrt(dot(vec3(_1111, _1112, _1113), vec3(_1111, _1112, _1113)));
        float _1130 = ((_1117 * _1111) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1067 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1131 = ((_1117 * _1112) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1071 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1132 = ((_1117 * _1113) / cbModelParam._m0[34u].z) + ((((((_1075 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1135 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1130, _1131, _1132), 0.0);
        vec4 _1142 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1130, _1131, _1132), 0.0);
        vec4 _1149 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1130, _1131, _1132), 0.0);
        vec4 _1156 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1130, _1131, _1132), 0.0);
        float _1169 = exp2((_1135.w + (-0.5)) * 20.0) * 2.0;
        float _1170 = _1169 * (_1135.x + (-0.5));
        float _1171 = _1169 * (_1135.y + (-0.5));
        float _1172 = _1169 * (_1135.z + (-0.5));
        float _1179 = exp2((_1142.w + (-0.5)) * 20.0) * 2.0;
        float _1180 = _1179 * (_1142.x + (-0.5));
        float _1181 = _1179 * (_1142.y + (-0.5));
        float _1182 = _1179 * (_1142.z + (-0.5));
        float _1189 = exp2((_1149.w + (-0.5)) * 20.0) * 2.0;
        float _1190 = _1189 * (_1149.x + (-0.5));
        float _1191 = _1189 * (_1149.y + (-0.5));
        float _1192 = _1189 * (_1149.z + (-0.5));
        float _1199 = exp2((_1156.w + (-0.5)) * 20.0) * 2.0;
        float _1200 = _1199 * (_1156.x + (-0.5));
        float _1201 = _1199 * (_1156.y + (-0.5));
        float _1202 = _1199 * (_1156.z + (-0.5));
        float _1203 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1204 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1205 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1206 = _1170 * 0.5;
        float _1207 = _1180 * 0.5;
        float _1208 = _1190 * 0.5;
        float _1209 = dot(vec3(_1206, _1207, _1208), vec3(_1206, _1207, _1208));
        float _1214 = (_1209 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1209);
        float _1223 = (dot(vec3(_762, _763, _764), vec3(_1214 * _1206, _1214 * _1207, _1214 * _1208)) + 1.0) * 0.5;
        float _4269 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1233 = sqrt(((_1207 * _1207) + (_1206 * _1206)) + (_1208 * _1208)) / (_1203 + 9.9999997473787516355514526367188e-06);
        float _4280 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _1235 = _1234 * 2.0;
        float _1239 = (1.0 - _1234) / (_1234 + 1.0);
        float _4291 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _1249 = ((((1.0 - _1240) * (_1235 + 2.0)) * exp2(log2(isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * (_1235 + 1.0))) + _1240) * _1203;
        float _1250 = _1171 * 0.5;
        float _1251 = _1181 * 0.5;
        float _1252 = _1191 * 0.5;
        float _1253 = dot(vec3(_1250, _1251, _1252), vec3(_1250, _1251, _1252));
        float _1258 = (_1253 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1253);
        float _1266 = (dot(vec3(_762, _763, _764), vec3(_1258 * _1250, _1258 * _1251, _1258 * _1252)) + 1.0) * 0.5;
        float _4302 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1275 = sqrt(((_1251 * _1251) + (_1250 * _1250)) + (_1252 * _1252)) / (_1204 + 9.9999997473787516355514526367188e-06);
        float _4313 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _1277 = _1276 * 2.0;
        float _1281 = (1.0 - _1276) / (_1276 + 1.0);
        float _4324 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _1291 = ((((1.0 - _1282) * (_1277 + 2.0)) * exp2(log2(isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0))) * (_1277 + 1.0))) + _1282) * _1204;
        float _1292 = _1172 * 0.5;
        float _1293 = _1182 * 0.5;
        float _1294 = _1192 * 0.5;
        float _1295 = dot(vec3(_1292, _1293, _1294), vec3(_1292, _1293, _1294));
        float _1300 = (_1295 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1295);
        float _1308 = (dot(vec3(_762, _763, _764), vec3(_1300 * _1292, _1300 * _1293, _1300 * _1294)) + 1.0) * 0.5;
        float _4335 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1317 = sqrt(((_1293 * _1293) + (_1292 * _1292)) + (_1294 * _1294)) / (_1205 + 9.9999997473787516355514526367188e-06);
        float _4346 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _1319 = _1318 * 2.0;
        float _1323 = (1.0 - _1318) / (_1318 + 1.0);
        float _4357 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1324 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
        float _1333 = ((((1.0 - _1324) * (_1319 + 2.0)) * exp2(log2(isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * (_1319 + 1.0))) + _1324) * _1205;
        _1341 = _1172;
        _1343 = _1171;
        _1344 = _1170;
        _1345 = _1182;
        _1346 = _1181;
        _1347 = _1180;
        _1348 = _1192;
        _1349 = _1191;
        _1350 = _1190;
        _1351 = _1205;
        _1352 = _1204;
        _1353 = _1203;
        _1354 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0)));
        _1355 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0)));
        _1356 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0)));
    }
    else
    {
        _1341 = _1342;
        _1343 = _1342;
        _1344 = _1342;
        _1345 = _1342;
        _1346 = _1342;
        _1347 = _1342;
        _1348 = _1342;
        _1349 = _1342;
        _1350 = _1342;
        _1351 = _1342;
        _1352 = _1342;
        _1353 = _1342;
        _1354 = 0.0;
        _1355 = 0.0;
        _1356 = 0.0;
    }
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1385 = fma(_1012, cbModelParam._m0[30u].z, fma(_1008, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1004));
        float _1389 = fma(_1012, cbModelParam._m0[31u].z, fma(_1008, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1004));
        float _1393 = fma(_1012, cbModelParam._m0[32u].z, fma(_1008, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1004));
        float _1416 = _1004 + _762;
        float _1417 = _1008 + _763;
        float _1418 = _1012 + _764;
        float _1428 = fma(_1418, cbModelParam._m0[30u].z, fma(_1417, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1416)) - _1385;
        float _1429 = fma(_1418, cbModelParam._m0[31u].z, fma(_1417, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1416)) - _1389;
        float _1430 = fma(_1418, cbModelParam._m0[32u].z, fma(_1417, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1416)) - _1393;
        float _1434 = inversesqrt(dot(vec3(_1428, _1429, _1430), vec3(_1428, _1429, _1430)));
        float _1447 = ((_1434 * _1428) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1385 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1448 = ((_1434 * _1429) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1389 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1449 = ((_1434 * _1430) / cbModelParam._m0[35u].z) + ((((((_1393 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1451 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1447, _1448, _1449), 0.0);
        vec4 _1458 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1447, _1448, _1449), 0.0);
        vec4 _1465 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1447, _1448, _1449), 0.0);
        vec4 _1472 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1447, _1448, _1449), 0.0);
        float _1484 = exp2((_1451.w + (-0.5)) * 20.0) * 2.0;
        float _1485 = _1484 * (_1451.x + (-0.5));
        float _1486 = _1484 * (_1451.y + (-0.5));
        float _1487 = _1484 * (_1451.z + (-0.5));
        float _1494 = exp2((_1458.w + (-0.5)) * 20.0) * 2.0;
        float _1495 = _1494 * (_1458.x + (-0.5));
        float _1496 = _1494 * (_1458.y + (-0.5));
        float _1497 = _1494 * (_1458.z + (-0.5));
        float _1504 = exp2((_1465.w + (-0.5)) * 20.0) * 2.0;
        float _1505 = _1504 * (_1465.x + (-0.5));
        float _1506 = _1504 * (_1465.y + (-0.5));
        float _1507 = _1504 * (_1465.z + (-0.5));
        float _1514 = exp2((_1472.w + (-0.5)) * 20.0) * 2.0;
        float _1515 = _1514 * (_1472.x + (-0.5));
        float _1516 = _1514 * (_1472.y + (-0.5));
        float _1517 = _1514 * (_1472.z + (-0.5));
        float _1518 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1519 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1520 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1521 = _1485 * 0.5;
        float _1522 = _1495 * 0.5;
        float _1523 = _1505 * 0.5;
        float _1524 = dot(vec3(_1521, _1522, _1523), vec3(_1521, _1522, _1523));
        float _1529 = (_1524 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1524);
        float _1537 = (dot(vec3(_762, _763, _764), vec3(_1529 * _1521, _1529 * _1522, _1529 * _1523)) + 1.0) * 0.5;
        float _4398 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1546 = sqrt(((_1522 * _1522) + (_1521 * _1521)) + (_1523 * _1523)) / (_1518 + 9.9999997473787516355514526367188e-06);
        float _4409 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1547 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
        float _1548 = _1547 * 2.0;
        float _1552 = (1.0 - _1547) / (_1547 + 1.0);
        float _4420 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1553 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
        float _1562 = ((((1.0 - _1553) * (_1548 + 2.0)) * exp2(log2(isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0))) * (_1548 + 1.0))) + _1553) * _1518;
        float _1563 = _1486 * 0.5;
        float _1564 = _1496 * 0.5;
        float _1565 = _1506 * 0.5;
        float _1566 = dot(vec3(_1563, _1564, _1565), vec3(_1563, _1564, _1565));
        float _1571 = (_1566 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1566);
        float _1579 = (dot(vec3(_762, _763, _764), vec3(_1571 * _1563, _1571 * _1564, _1571 * _1565)) + 1.0) * 0.5;
        float _4431 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1588 = sqrt(((_1564 * _1564) + (_1563 * _1563)) + (_1565 * _1565)) / (_1519 + 9.9999997473787516355514526367188e-06);
        float _4442 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1589 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
        float _1590 = _1589 * 2.0;
        float _1594 = (1.0 - _1589) / (_1589 + 1.0);
        float _4453 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1595 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
        float _1604 = ((((1.0 - _1595) * (_1590 + 2.0)) * exp2(log2(isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0))) * (_1590 + 1.0))) + _1595) * _1519;
        float _1605 = _1487 * 0.5;
        float _1606 = _1497 * 0.5;
        float _1607 = _1507 * 0.5;
        float _1608 = dot(vec3(_1605, _1606, _1607), vec3(_1605, _1606, _1607));
        float _1613 = (_1608 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1608);
        float _1621 = (dot(vec3(_762, _763, _764), vec3(_1613 * _1605, _1613 * _1606, _1613 * _1607)) + 1.0) * 0.5;
        float _4464 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1630 = sqrt(((_1606 * _1606) + (_1605 * _1605)) + (_1607 * _1607)) / (_1520 + 9.9999997473787516355514526367188e-06);
        float _4475 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1631 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
        float _1632 = _1631 * 2.0;
        float _1636 = (1.0 - _1631) / (_1631 + 1.0);
        float _4486 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1637 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
        float _1646 = ((((1.0 - _1637) * (_1632 + 2.0)) * exp2(log2(isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * (_1632 + 1.0))) + _1637) * _1520;
        _1654 = _1487;
        _1655 = _1486;
        _1656 = _1485;
        _1657 = _1497;
        _1658 = _1496;
        _1659 = _1495;
        _1660 = _1507;
        _1661 = _1506;
        _1662 = _1505;
        _1663 = _1520;
        _1664 = _1519;
        _1665 = _1518;
        _1666 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0)));
        _1667 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0)));
        _1668 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0)));
    }
    else
    {
        _1654 = _1342;
        _1655 = _1342;
        _1656 = _1342;
        _1657 = _1342;
        _1658 = _1342;
        _1659 = _1342;
        _1660 = _1342;
        _1661 = _1342;
        _1662 = _1342;
        _1663 = _1342;
        _1664 = _1342;
        _1665 = _1342;
        _1666 = 0.0;
        _1667 = 0.0;
        _1668 = 0.0;
    }
    float _1678 = (cbModelParam._m0[1u].x * (_1666 - _1354)) + _1354;
    float _1679 = (cbModelParam._m0[1u].x * (_1667 - _1355)) + _1355;
    float _1680 = (cbModelParam._m0[1u].x * (_1668 - _1356)) + _1356;
    float _1701 = fma(_1680, cbSceneParam._m0[89u].z, fma(_1679, cbSceneParam._m0[89u].y, _1678 * cbSceneParam._m0[89u].x));
    float _1704 = fma(_1680, cbSceneParam._m0[90u].z, fma(_1679, cbSceneParam._m0[90u].y, _1678 * cbSceneParam._m0[90u].x));
    float _1707 = fma(_1680, cbSceneParam._m0[91u].z, fma(_1679, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1678));
    float _1722 = _948 * 0.5;
    float _1723 = _949 * 0.5;
    float _1724 = _950 * 0.5;
    float _1725 = dot(vec4(_1722, _1723, _1724, 1.0), vec4(_1656, _1659, _1662, _1665));
    float _1728 = dot(vec4(_1722, _1723, _1724, 1.0), vec4(_1655, _1658, _1661, _1664));
    float _1731 = dot(vec4(_1722, _1723, _1724, 1.0), vec4(_1654, _1657, _1660, _1663));
    float _1765;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1738 = dot(vec4(_1722, _1723, _1724, 1.0), vec4(_1341, _1345, _1348, _1351));
        float _1742 = dot(vec4(_1722, _1723, _1724, 1.0), vec4(_1343, _1346, _1349, _1352));
        float _1746 = dot(vec4(_1722, _1723, _1724, 1.0), vec4(_1344, _1347, _1350, _1353));
        float _1753 = dot(vec4(cbModelParam._m0[39u]), vec4(_1722, _1723, _1724, 1.0));
        _1765 = dot(vec3(isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0)), isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0)), isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1753) ? 0.0 : (isnan(0.0) ? _1753 : max(0.0, _1753))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1765 = 1.0;
    }
    float _1776;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1767 = dot(vec4(cbModelParam._m0[40u]), vec4(_1722, _1723, _1724, 1.0));
        _1776 = dot(vec3(isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0)), isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0)), isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1767) ? 0.0 : (isnan(0.0) ? _1767 : max(0.0, _1767))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1776 = 1.0;
    }
    float _1780 = (_1776 * cbModelParam._m0[1u].x) + (_1765 * (1.0 - cbModelParam._m0[1u].x));
    float _1790 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _765);
    float _1791 = isnan(_1790) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1790 : min(cbModelParam._m0[25u].z, _1790));
    float _1871;
    float _1873;
    float _1875;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1838 = fma(_1012, cbModelParam._m0[13u].z, fma(_1008, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1004)) + cbModelParam._m0[13u].w;
        float _1842 = fma(_1012, cbModelParam._m0[14u].z, fma(_1008, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1004)) + cbModelParam._m0[14u].w;
        float _1846 = fma(_1012, cbModelParam._m0[15u].z, fma(_1008, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1004)) + cbModelParam._m0[15u].w;
        float _1849 = fma(_950, cbModelParam._m0[13u].z, fma(_949, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _948));
        float _1852 = fma(_950, cbModelParam._m0[14u].z, fma(_949, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _948));
        float _1855 = fma(_950, cbModelParam._m0[15u].z, fma(_949, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _948));
        float _1883;
        if (_1849 > 0.0)
        {
            _1883 = abs((1.0 - _1838) / _1849);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1849 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1838 + 1.0) / _1849);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1883 = frontier_phi_17_15_ladder;
        }
        float _2055;
        if (_1852 > 0.0)
        {
            _2055 = abs((1.0 - _1842) / _1852);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1852 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1842 + 1.0) / _1852);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2055 = frontier_phi_26_22_ladder;
        }
        float _2350;
        if (_1855 > 0.0)
        {
            _2350 = abs((1.0 - _1846) / _1855);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1855 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1846 + 1.0) / _1855);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2350 = frontier_phi_38_33_ladder;
        }
        float _2352 = isnan(_2055) ? _1883 : (isnan(_1883) ? _2055 : min(_1883, _2055));
        float _2353 = isnan(_2350) ? _2352 : (isnan(_2352) ? _2350 : min(_2352, _2350));
        float _2357 = (_2353 * _1849) + _1838;
        float _2358 = (_2353 * _1852) + _1842;
        float _2359 = (_2353 * _1855) + _1846;
        float _2360 = _2353 * 9.9999997473787516355514526367188e-05;
        float _2362 = (-1.0) - _2360;
        float _2364 = _2360 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2359 > _2364) || ((_2359 < _2362) || ((_2358 > _2364) || ((_2358 < _2362) || ((_2357 < _2362) || (_2357 > _2364))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2504 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2359, cbModelParam._m0[9u].z, fma(_2358, cbModelParam._m0[9u].y, _2357 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2359, cbModelParam._m0[10u].z, fma(_2358, cbModelParam._m0[10u].y, _2357 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2359, cbModelParam._m0[11u].z, fma(_2358, cbModelParam._m0[11u].y, _2357 * cbModelParam._m0[11u].x))), _1791);
            frontier_phi_16_38_ladder = _2504.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2504.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2504.x * cbModelParam._m0[1u].y;
        }
        _1871 = frontier_phi_16_38_ladder_2;
        _1873 = frontier_phi_16_38_ladder_1;
        _1875 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1859 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_948, _949, _950), _1791);
        _1871 = _1859.x * cbModelParam._m0[1u].y;
        _1873 = _1859.y * cbModelParam._m0[1u].y;
        _1875 = _1859.z * cbModelParam._m0[1u].y;
    }
    float _1879 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _765);
    float _1880 = isnan(_1879) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1879 : min(cbModelParam._m0[25u].w, _1879));
    float _1970;
    float _1972;
    float _1974;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1934 = fma(_1012, cbModelParam._m0[21u].z, fma(_1008, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1004)) + cbModelParam._m0[21u].w;
        float _1938 = fma(_1012, cbModelParam._m0[22u].z, fma(_1008, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1004)) + cbModelParam._m0[22u].w;
        float _1942 = fma(_1012, cbModelParam._m0[23u].z, fma(_1008, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1004)) + cbModelParam._m0[23u].w;
        float _1945 = fma(_950, cbModelParam._m0[21u].z, fma(_949, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _948));
        float _1948 = fma(_950, cbModelParam._m0[22u].z, fma(_949, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _948));
        float _1951 = fma(_950, cbModelParam._m0[23u].z, fma(_949, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _948));
        float _2060;
        if (_1945 > 0.0)
        {
            _2060 = abs((1.0 - _1934) / _1945);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1945 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1934 + 1.0) / _1945);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2060 = frontier_phi_28_24_ladder;
        }
        float _2377;
        if (_1948 > 0.0)
        {
            _2377 = abs((1.0 - _1938) / _1948);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1948 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1938 + 1.0) / _1948);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2377 = frontier_phi_40_35_ladder;
        }
        float _2715;
        if (_1951 > 0.0)
        {
            _2715 = abs((1.0 - _1942) / _1951);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1951 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1942 + 1.0) / _1951);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2715 = frontier_phi_50_47_ladder;
        }
        float _2717 = isnan(_2377) ? _2060 : (isnan(_2060) ? _2377 : min(_2060, _2377));
        float _2718 = isnan(_2715) ? _2717 : (isnan(_2717) ? _2715 : min(_2717, _2715));
        float _2722 = (_2718 * _1945) + _1934;
        float _2723 = (_2718 * _1948) + _1938;
        float _2724 = (_2718 * _1951) + _1942;
        float _2725 = _2718 * 9.9999997473787516355514526367188e-05;
        float _2726 = (-1.0) - _2725;
        float _2728 = _2725 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2724 > _2728) || ((_2724 < _2726) || ((_2723 > _2728) || ((_2723 < _2726) || ((_2722 < _2726) || (_2722 > _2728))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2846 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2724, cbModelParam._m0[17u].z, fma(_2723, cbModelParam._m0[17u].y, _2722 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2724, cbModelParam._m0[18u].z, fma(_2723, cbModelParam._m0[18u].y, _2722 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2724, cbModelParam._m0[19u].z, fma(_2723, cbModelParam._m0[19u].y, _2722 * cbModelParam._m0[19u].x))), _1880);
            frontier_phi_25_50_ladder = _2846.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2846.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2846.x * cbModelParam._m0[1u].z;
        }
        _1970 = frontier_phi_25_50_ladder_2;
        _1972 = frontier_phi_25_50_ladder_1;
        _1974 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1954 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_948, _949, _950), _1880);
        _1970 = _1954.x * cbModelParam._m0[1u].z;
        _1972 = _1954.y * cbModelParam._m0[1u].z;
        _1974 = _1954.z * cbModelParam._m0[1u].z;
    }
    float _1987 = (((_975 * _925) + _976) * _940) * ((cbModelParam._m0[1u].w * (_1970 - _1871)) + _1871);
    float _1989 = (((_975 * _927) + _976) * _940) * ((cbModelParam._m0[1u].w * (_1972 - _1873)) + _1873);
    float _1991 = (((_975 * _928) + _976) * _940) * ((cbModelParam._m0[1u].w * (_1974 - _1875)) + _1875);
    float _1994 = fma(_1991, cbSceneParam._m0[89u].z, fma(_1989, cbSceneParam._m0[89u].y, _1987 * cbSceneParam._m0[89u].x));
    float _1997 = fma(_1991, cbSceneParam._m0[90u].z, fma(_1989, cbSceneParam._m0[90u].y, _1987 * cbSceneParam._m0[90u].x));
    float _2000 = fma(_1991, cbSceneParam._m0[91u].z, fma(_1989, cbSceneParam._m0[91u].y, _1987 * cbSceneParam._m0[91u].x));
    float _2034 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2038 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2042 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2046 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2047 = _2034 / _2046;
    float _2048 = _2038 / _2046;
    float _2049 = _2042 / _2046;
    float _2196;
    float _2197;
    float _2198;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2076 = ((uint(_2049 > cbSceneParam._m0[59u].y) + uint(_2049 > cbSceneParam._m0[59u].x)) + uint(_2049 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2077 = _2076 + 43u;
        uint _2085 = _2076 + 44u;
        uint _2093 = _2076 + 45u;
        uint _2101 = _2076 + 46u;
        float _2112 = fma(_2046, cbSceneParam._m0[_2077].w, fma(_2042, cbSceneParam._m0[_2077].z, fma(_2038, cbSceneParam._m0[_2077].y, _2034 * cbSceneParam._m0[_2077].x)));
        float _2116 = fma(_2046, cbSceneParam._m0[_2085].w, fma(_2042, cbSceneParam._m0[_2085].z, fma(_2038, cbSceneParam._m0[_2085].y, _2034 * cbSceneParam._m0[_2085].x)));
        float _2124 = fma(_2046, cbSceneParam._m0[_2101].w, fma(_2042, cbSceneParam._m0[_2101].z, fma(_2038, cbSceneParam._m0[_2101].y, _2034 * cbSceneParam._m0[_2101].x)));
        float _2129 = cbSceneParam._m0[33u].z * _2124;
        float _2131 = cbSceneParam._m0[33u].w * _2124;
        float _2134 = fma(_2046, cbSceneParam._m0[_2093].w, fma(_2042, cbSceneParam._m0[_2093].z, fma(_2038, cbSceneParam._m0[_2093].y, _2034 * cbSceneParam._m0[_2093].x))) / _2124;
        float _2182 = (cbSceneParam._m0[33u].x - sqrt(((_2048 * _2048) + (_2047 * _2047)) + (_2049 * _2049))) * cbSceneParam._m0[33u].y;
        float _4612 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
        float _2189 = (isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2129 + _2112) / _2124, (_2131 + _2116) / _2124), _2134), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2131 + _2112) / _2124, (_2116 - _2129) / _2124), _2134), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2112 - _2129) / _2124, (_2116 - _2131) / _2124), _2134), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2112 - _2131) / _2124, (_2129 + _2116) / _2124), _2134), 0.0)).x), vec4(0.25)));
        _2196 = 1.0 - (_2189 * cbSceneParam._m0[34u].x);
        _2197 = 1.0 - (_2189 * cbSceneParam._m0[34u].y);
        _2198 = 1.0 - (_2189 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2196 = 1.0;
        _2197 = 1.0;
        _2198 = 1.0;
    }
    float _2262;
    float _2264;
    float _2266;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2250 = fma(_2046, cbSceneParam._m0[63u].w, fma(_2042, cbSceneParam._m0[63u].z, fma(_2038, cbSceneParam._m0[63u].y, _2034 * cbSceneParam._m0[63u].x)));
        float _2251 = fma(_2046, cbSceneParam._m0[60u].w, fma(_2042, cbSceneParam._m0[60u].z, fma(_2038, cbSceneParam._m0[60u].y, _2034 * cbSceneParam._m0[60u].x))) / _2250;
        float _2252 = fma(_2046, cbSceneParam._m0[61u].w, fma(_2042, cbSceneParam._m0[61u].z, fma(_2038, cbSceneParam._m0[61u].y, _2034 * cbSceneParam._m0[61u].x))) / _2250;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2251 >= cbSceneParam._m0[64u].x) && (_2252 >= cbSceneParam._m0[64u].y)) && (_2251 <= cbSceneParam._m0[64u].z)) && (_2252 <= cbSceneParam._m0[64u].w))
        {
            float _2390 = fma(_2046, cbSceneParam._m0[62u].w, fma(_2042, cbSceneParam._m0[62u].z, fma(_2038, cbSceneParam._m0[62u].y, _2034 * cbSceneParam._m0[62u].x))) / _2250;
            float _2394 = isnan(cbSceneParam._m0[41u].w) ? _2390 : (isnan(_2390) ? cbSceneParam._m0[41u].w : max(_2390, cbSceneParam._m0[41u].w));
            float _2437 = (cbSceneParam._m0[33u].x - sqrt(((_2048 * _2048) + (_2047 * _2047)) + (_2049 * _2049))) * cbSceneParam._m0[33u].y;
            float _4628 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
            float _2444 = (isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2251, cbSceneParam._m0[33u].w + _2252), _2394), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2251, _2252 - cbSceneParam._m0[33u].z), _2394), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2251 - cbSceneParam._m0[33u].z, _2252 - cbSceneParam._m0[33u].w), _2394), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2251 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2252), _2394), 0.0)).x), vec4(0.25)));
            float _2448 = 1.0 - (_2444 * cbSceneParam._m0[34u].x);
            float _2449 = 1.0 - (_2444 * cbSceneParam._m0[34u].y);
            float _2450 = 1.0 - (_2444 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2450) ? _2198 : (isnan(_2198) ? _2450 : min(_2198, _2450));
            frontier_phi_37_36_ladder_1 = isnan(_2449) ? _2197 : (isnan(_2197) ? _2449 : min(_2197, _2449));
            frontier_phi_37_36_ladder_2 = isnan(_2448) ? _2196 : (isnan(_2196) ? _2448 : min(_2196, _2448));
        }
        else
        {
            frontier_phi_37_36_ladder = _2198;
            frontier_phi_37_36_ladder_1 = _2197;
            frontier_phi_37_36_ladder_2 = _2196;
        }
        _2262 = frontier_phi_37_36_ladder_2;
        _2264 = frontier_phi_37_36_ladder_1;
        _2266 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2262 = _2196;
        _2264 = _2197;
        _2266 = _2198;
    }
    uvec4 _2271 = floatBitsToUint(cbInstanceData._m0[_900 + 5u]);
    uint _2273 = _2271.x * 14u;
    uint _2274 = _2273 + 13u;
    float _2281 = _940 + (-1.0);
    float _2286 = (cbLight._m0[_2274].x * _2281) + 1.0;
    float _2287 = (cbLight._m0[_2274].y * _2281) + 1.0;
    float _2288 = (cbLight._m0[_2274].z * _2281) + 1.0;
    float _2289 = (cbLight._m0[_2274].w * _2281) + 1.0;
    uint _2290 = _2273 + 5u;
    float _2296 = isnan(1.0) ? _2287 : (isnan(_2287) ? 1.0 : min(_2287, 1.0));
    uint _2300 = _2273 + 4u;
    float _2309 = isnan(1.0) ? _2286 : (isnan(_2286) ? 1.0 : min(_2286, 1.0));
    uint _2313 = _2273 | 1u;
    float _2324 = dot(vec3(cbLight._m0[_2273].xyz), vec3(_762, _763, _764));
    float _2327 = dot(vec3(cbLight._m0[_2313].xyz), vec3(_762, _763, _764));
    float _4664 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
    float _4675 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
    float _2332 = (isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0))) * 0.3183098733425140380859375;
    float _2334 = (isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0))) * 0.3183098733425140380859375;
    float _2341 = ((cbLight._m0[_2290].x * _2296) * _2334) + (((cbLight._m0[_2300].x * _2262) * _2309) * _2332);
    float _2342 = ((_2296 * cbLight._m0[_2290].y) * _2334) + (((cbLight._m0[_2300].y * _2264) * _2309) * _2332);
    float _2343 = ((_2296 * cbLight._m0[_2290].z) * _2334) + (((cbLight._m0[_2300].z * _2266) * _2309) * _2332);
    uvec4 _2347 = floatBitsToUint(cbLight._m0[_2273 + 12u]);
    bool _2349 = _2347.x == 0u;
    float _2451;
    float _2453;
    float _2455;
    if (_2349)
    {
        _2451 = _2341;
        _2453 = _2342;
        _2455 = _2343;
    }
    else
    {
        uint _2459 = _2273 + 6u;
        float _2475 = (dot(vec3(cbLight._m0[_2273 + 2u].xyz), vec3(_762, _763, _764)) * 0.5) + 0.5;
        float _2476 = _2475 * _2475;
        float _4686 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
        float _2477 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
        float _2478 = isnan(1.0) ? _2288 : (isnan(_2288) ? 1.0 : min(_2288, 1.0));
        _2451 = (((cbLight._m0[_2459].x * 0.3183098733425140380859375) * _2477) * _2478) + _2341;
        _2453 = (((cbLight._m0[_2459].y * 0.3183098733425140380859375) * _2477) * _2478) + _2342;
        _2455 = (((cbLight._m0[_2459].z * 0.3183098733425140380859375) * _2477) * _2478) + _2343;
    }
    bool _2458 = _2347.y == 0u;
    float _2513;
    float _2515;
    float _2517;
    if (_2458)
    {
        _2513 = _2451;
        _2515 = _2453;
        _2517 = _2455;
    }
    else
    {
        uint _2686 = _2273 + 7u;
        float _2702 = (dot(vec3(cbLight._m0[_2273 + 3u].xyz), vec3(_762, _763, _764)) * 0.5) + 0.5;
        float _2703 = _2702 * _2702;
        float _4702 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
        float _2704 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
        float _2705 = isnan(1.0) ? _2289 : (isnan(_2289) ? 1.0 : min(_2289, 1.0));
        _2513 = (((cbLight._m0[_2686].x * 0.3183098733425140380859375) * _2704) * _2705) + _2451;
        _2515 = (((cbLight._m0[_2686].y * 0.3183098733425140380859375) * _2704) * _2705) + _2453;
        _2517 = (((cbLight._m0[_2686].z * 0.3183098733425140380859375) * _2704) * _2705) + _2455;
    }
    uint _2520 = _2273 + 8u;
    float _2533 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2273].w)) * _765) * 0.949999988079071044921875);
    float _2534 = _2533 * _2533;
    float _2535 = cbLight._m0[_2273].x + _842;
    float _2536 = cbLight._m0[_2273].y + _843;
    float _2537 = cbLight._m0[_2273].z + _844;
    float _2541 = inversesqrt(dot(vec3(_2535, _2536, _2537), vec3(_2535, _2536, _2537)));
    float _2542 = _2541 * _2535;
    float _2543 = _2541 * _2536;
    float _2544 = _2541 * _2537;
    float _2545 = dot(vec3(_762, _763, _764), vec3(cbLight._m0[_2273].xyz));
    float _4718 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
    float _2548 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
    float _4729 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _2549 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
    float _2550 = dot(vec3(_762, _763, _764), vec3(_2542, _2543, _2544));
    float _4740 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
    float _2553 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
    float _2554 = dot(vec3(cbLight._m0[_2273].xyz), vec3(_2542, _2543, _2544));
    float _4751 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
    float _2558 = _2534 * _2534;
    float _2562 = ((_2553 * _2553) * (_2558 + (-1.0))) + 1.0;
    float _2570 = exp2(log2(1.0 - (isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0)))) * 5.0);
    float _2571 = 0.959999978542327880859375 - _922;
    float _2573 = 0.959999978542327880859375 - _923;
    float _2574 = 0.959999978542327880859375 - _924;
    float _2581 = 1.0 - _2534;
    float _2592 = (0.5 / (((_2549 * ((_2548 * _2581) + _2534)) + 9.9999999392252902907785028219223e-09) + (((_2549 * _2581) + _2534) * _2548))) * _2548;
    float _4762 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
    float _2594 = (isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0))) * (_2558 / ((_2562 * _2562) * 3.141590118408203125));
    uint _2608 = _2273 + 9u;
    float _2619 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2313].w)) * _765) * 0.949999988079071044921875);
    float _2620 = _2619 * _2619;
    float _2621 = cbLight._m0[_2313].x + _842;
    float _2622 = cbLight._m0[_2313].y + _843;
    float _2623 = cbLight._m0[_2313].z + _844;
    float _2627 = inversesqrt(dot(vec3(_2621, _2622, _2623), vec3(_2621, _2622, _2623)));
    float _2628 = _2627 * _2621;
    float _2629 = _2627 * _2622;
    float _2630 = _2627 * _2623;
    float _2631 = dot(vec3(_762, _763, _764), vec3(cbLight._m0[_2313].xyz));
    float _4773 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
    float _2634 = isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0));
    float _2635 = dot(vec3(_762, _763, _764), vec3(_2628, _2629, _2630));
    float _4784 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
    float _2638 = isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0));
    float _2639 = dot(vec3(cbLight._m0[_2313].xyz), vec3(_2628, _2629, _2630));
    float _4795 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
    float _2643 = _2620 * _2620;
    float _2647 = ((_2638 * _2638) * (_2643 + (-1.0))) + 1.0;
    float _2654 = exp2(log2(1.0 - (isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0)))) * 5.0);
    float _2661 = 1.0 - _2620;
    float _2671 = (0.5 / (((_2549 * ((_2634 * _2661) + _2620)) + 9.9999999392252902907785028219223e-09) + (((_2549 * _2661) + _2620) * _2634))) * _2634;
    float _4806 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
    float _2673 = (isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0))) * (_2643 / ((_2647 * _2647) * 3.141590118408203125));
    float _2683 = (((((_2654 * _2571) + _925) * cbLight._m0[_2608].x) * _2673) * _2296) + ((((cbLight._m0[_2520].x * _2262) * ((_2570 * _2571) + _925)) * _2594) * _2309);
    float _2684 = (((((_2654 * _2573) + _927) * cbLight._m0[_2608].y) * _2673) * _2296) + ((((cbLight._m0[_2520].y * _2264) * ((_2570 * _2573) + _927)) * _2594) * _2309);
    float _2685 = (((((_2654 * _2574) + _928) * cbLight._m0[_2608].z) * _2673) * _2296) + ((((cbLight._m0[_2520].z * _2266) * ((_2570 * _2574) + _928)) * _2594) * _2309);
    float _2741;
    float _2743;
    float _2745;
    if (_2349)
    {
        _2741 = _2683;
        _2743 = _2684;
        _2745 = _2685;
    }
    else
    {
        uint _2747 = _2273 + 2u;
        uint _2751 = _2273 + 10u;
        float _2765 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2747].w)) * _765) * 0.949999988079071044921875);
        float _2766 = _2765 * _2765;
        float _2767 = cbLight._m0[_2747].x + _842;
        float _2768 = cbLight._m0[_2747].y + _843;
        float _2769 = cbLight._m0[_2747].z + _844;
        float _2773 = inversesqrt(dot(vec3(_2767, _2768, _2769), vec3(_2767, _2768, _2769)));
        float _2774 = _2773 * _2767;
        float _2775 = _2773 * _2768;
        float _2776 = _2773 * _2769;
        float _2777 = dot(vec3(_762, _763, _764), vec3(cbLight._m0[_2747].xyz));
        float _4817 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0));
        float _2780 = isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0));
        float _2781 = dot(vec3(_762, _763, _764), vec3(_2774, _2775, _2776));
        float _4828 = isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : max(_2781, 0.0));
        float _2784 = isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0));
        float _2785 = dot(vec3(cbLight._m0[_2747].xyz), vec3(_2774, _2775, _2776));
        float _4839 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
        float _2789 = _2766 * _2766;
        float _2793 = ((_2784 * _2784) * (_2789 + (-1.0))) + 1.0;
        float _2800 = exp2(log2(1.0 - (isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0)))) * 5.0);
        float _2807 = 1.0 - _2766;
        float _2817 = (0.5 / (((_2549 * ((_2780 * _2807) + _2766)) + 9.9999999392252902907785028219223e-09) + (((_2549 * _2807) + _2766) * _2780))) * _2780;
        float _4850 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
        float _2819 = (isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0))) * (_2789 / ((_2793 * _2793) * 3.141590118408203125));
        float _2820 = isnan(1.0) ? _2288 : (isnan(_2288) ? 1.0 : min(_2288, 1.0));
        _2741 = (((((_2800 * _2571) + _925) * cbLight._m0[_2751].x) * _2819) * _2820) + _2683;
        _2743 = (((((_2800 * _2573) + _927) * cbLight._m0[_2751].y) * _2819) * _2820) + _2684;
        _2745 = (((((_2800 * _2574) + _928) * cbLight._m0[_2751].z) * _2819) * _2820) + _2685;
    }
    float _2851;
    float _2853;
    float _2855;
    if (_2458)
    {
        _2851 = _2741;
        _2853 = _2743;
        _2855 = _2745;
    }
    else
    {
        uint _2862 = _2273 + 3u;
        uint _2866 = _2273 + 11u;
        float _2880 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2862].w)) * _765) * 0.949999988079071044921875);
        float _2881 = _2880 * _2880;
        float _2882 = cbLight._m0[_2862].x + _842;
        float _2883 = cbLight._m0[_2862].y + _843;
        float _2884 = cbLight._m0[_2862].z + _844;
        float _2888 = inversesqrt(dot(vec3(_2882, _2883, _2884), vec3(_2882, _2883, _2884)));
        float _2889 = _2888 * _2882;
        float _2890 = _2888 * _2883;
        float _2891 = _2888 * _2884;
        float _2892 = dot(vec3(_762, _763, _764), vec3(cbLight._m0[_2862].xyz));
        float _4866 = isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : max(_2892, 0.0));
        float _2895 = isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0));
        float _2896 = dot(vec3(_762, _763, _764), vec3(_2889, _2890, _2891));
        float _4877 = isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0));
        float _2899 = isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0));
        float _2900 = dot(vec3(cbLight._m0[_2862].xyz), vec3(_2889, _2890, _2891));
        float _4888 = isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : max(_2900, 0.0));
        float _2904 = _2881 * _2881;
        float _2908 = ((_2899 * _2899) * (_2904 + (-1.0))) + 1.0;
        float _2915 = exp2(log2(1.0 - (isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0)))) * 5.0);
        float _2922 = 1.0 - _2881;
        float _2932 = (0.5 / (((_2549 * ((_2895 * _2922) + _2881)) + 9.9999999392252902907785028219223e-09) + (((_2549 * _2922) + _2881) * _2895))) * _2895;
        float _4899 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0));
        float _2934 = (isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0))) * (_2904 / ((_2908 * _2908) * 3.141590118408203125));
        float _2935 = isnan(1.0) ? _2289 : (isnan(_2289) ? 1.0 : min(_2289, 1.0));
        _2851 = (((((_2915 * _2571) + _925) * cbLight._m0[_2866].x) * _2934) * _2935) + _2741;
        _2853 = (((((_2915 * _2573) + _927) * cbLight._m0[_2866].y) * _2934) * _2935) + _2743;
        _2855 = (((((_2915 * _2574) + _928) * cbLight._m0[_2866].z) * _2934) * _2935) + _2745;
    }
    float _3001;
    float _3003;
    float _3005;
    float _3007;
    float _3009;
    float _3011;
    if (_2271.y == 0u)
    {
        uvec4 _2956 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2957 = _2956.x;
        uint _2968 = uint((float(_2956.y) * floor(float(uint(cbSceneParam._m0[85u].y * _863) / _2957))) + floor(float(uint(cbSceneParam._m0[85u].x * _862) / _2957)));
        float _2978 = (log2(_2049 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2979 = isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0));
        uint _2982 = uint(isnan(14.0) ? _2979 : (isnan(_2979) ? 14.0 : min(_2979, 14.0)));
        uvec4 _2987 = texelFetch(g_lightClusterGridBuffer, int(((_2982 << 2u) + (_2968 << 6u)) >> 2u));
        uint _2988 = _2987.x;
        uint _2989 = _2956.z;
        float _3097;
        float _3099;
        float _3101;
        float _3103;
        float _3105;
        float _3107;
        if (((((1u << ((_2989 >> 4u) & 15u)) + 4294967295u) & _2988) == 0u) || ((_2989 & 240u) == 0u))
        {
            _3097 = 0.0;
            _3099 = 0.0;
            _3101 = 0.0;
            _3103 = 0.0;
            _3105 = 0.0;
            _3107 = 0.0;
        }
        else
        {
            float _3098;
            float _3100;
            float _3102;
            float _3104;
            float _3106;
            float _3108;
            float _3258 = 0.0;
            float _3259 = 0.0;
            float _3260 = 0.0;
            float _3261 = 0.0;
            float _3262 = 0.0;
            float _3263 = 0.0;
            uint _3264 = 0u;
            uint _3273;
            bool _3274;
            for (;;)
            {
                _3273 = texelFetch(g_lightClassification, int((((_2982 << 5u) + (_2968 << 9u)) + (_3264 << 2u)) >> 2u)).x;
                _3274 = _3273 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3274)
                {
                    frontier_phi_71_pred = _3263;
                    frontier_phi_71_pred_1 = _3262;
                    frontier_phi_71_pred_2 = _3261;
                    frontier_phi_71_pred_3 = _3260;
                    frontier_phi_71_pred_4 = _3259;
                    frontier_phi_71_pred_5 = _3258;
                }
                else
                {
                    float _3403;
                    float _3404;
                    float _3405;
                    float _3406;
                    float _3407;
                    float _3408;
                    uint _3409;
                    _3403 = _3258;
                    _3404 = _3259;
                    _3405 = _3260;
                    _3406 = _3261;
                    _3407 = _3262;
                    _3408 = _3263;
                    _3409 = _3273;
                    float _3330;
                    float _3331;
                    float _3332;
                    float _3333;
                    float _3334;
                    float _3335;
                    for (;;)
                    {
                        uint _3413 = uint(findLSB(_3409)) + (_3264 << 5u);
                        uint _3410 = (_3409 + 4294967295u) & _3409;
                        uint _3415 = _3413 * 48u;
                        vec4 _3429 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3415)).x, texelFetch(g_PointLightRenderingBuffer, int(_3415 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3415 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3415 + 3u)).x));
                        uint _3435 = (_3413 * 48u) + 4u;
                        vec4 _3448 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3435)).x, texelFetch(g_PointLightRenderingBuffer, int(_3435 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3435 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3435 + 3u)).x));
                        uint _3454 = (_3413 * 48u) + 8u;
                        vec3 _3465 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3454)).x, texelFetch(g_PointLightRenderingBuffer, int(_3454 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3454 + 2u)).x));
                        float _3469 = _3429.x - _2047;
                        float _3470 = _3429.y - _2048;
                        float _3471 = _3429.z - _2049;
                        float _3472 = dot(vec3(_3469, _3470, _3471), vec3(_3469, _3470, _3471));
                        float _3475 = inversesqrt(_3472);
                        float _3476 = _3475 * _3469;
                        float _3477 = _3475 * _3470;
                        float _3478 = _3475 * _3471;
                        float _3479 = dot(vec3(_881, _884, _887), vec3(_3476, _3477, _3478));
                        float _3484 = 1.0 - (_3472 * _3429.w);
                        float _4925 = isnan(0.0) ? _3484 : (isnan(_3484) ? 0.0 : max(_3484, 0.0));
                        float _3485 = isnan(1.0) ? _4925 : (isnan(_4925) ? 1.0 : min(_4925, 1.0));
                        float _3486 = sqrt(_3472) * _3448.w;
                        float _3489 = 1.39999997615814208984375 / (_3486 + 1.39999997615814208984375);
                        float _3490 = _3489 * _3489;
                        float _3493 = ((1.0 - _3490) * _3479) + _3490;
                        float _3496 = _3486 * _3486;
                        float _3500 = ((isnan(0.0) ? _3493 : (isnan(_3493) ? 0.0 : max(_3493, 0.0))) * _3485) / ((_3496 * 0.699999988079071044921875) + 1.0);
                        float _3504 = (-0.0) - _2047;
                        float _3505 = (-0.0) - _2048;
                        float _3506 = (-0.0) - _2049;
                        float _3510 = inversesqrt(dot(vec3(_3504, _3505, _3506), vec3(_3504, _3505, _3506)));
                        float _3511 = _3510 * _3504;
                        float _3512 = _3510 * _3505;
                        float _3513 = _3510 * _3506;
                        float _3520 = exp2(log2(1.0 / ((_3496 * 3.5) + 5.0)) * 0.25);
                        float _3521 = 1.0 - _956;
                        float _3528 = sqrt(1.0 - ((1.0 - (_3521 * _3521)) * (1.0 - (_3520 * _3520))));
                        float _3529 = _3528 * _3528;
                        float _3530 = _3529 * _3529;
                        float _3531 = _3511 + _3476;
                        float _3532 = _3512 + _3477;
                        float _3533 = _3513 + _3478;
                        float _3537 = inversesqrt(dot(vec3(_3531, _3532, _3533), vec3(_3531, _3532, _3533)));
                        float _3541 = dot(vec3(_881, _884, _887), vec3(_3511, _3512, _3513));
                        float _4941 = isnan(0.0) ? _3541 : (isnan(_3541) ? 0.0 : max(_3541, 0.0));
                        float _3544 = isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0));
                        float _3545 = dot(vec3(_881, _884, _887), vec3(_3537 * _3531, _3537 * _3532, _3537 * _3533));
                        float _4952 = isnan(0.0) ? _3545 : (isnan(_3545) ? 0.0 : max(_3545, 0.0));
                        float _3548 = isnan(1.0) ? _4952 : (isnan(_4952) ? 1.0 : min(_4952, 1.0));
                        float _3552 = ((_3548 * _3548) * (_3530 + (-1.0))) + 1.0;
                        float _3553 = _3489 * _3529;
                        float _3554 = _3553 * _3553;
                        float _3557 = ((1.0 - _3554) * _3479) + _3554;
                        float _4963 = isnan(0.0) ? _3557 : (isnan(_3557) ? 0.0 : max(_3557, 0.0));
                        float _3558 = isnan(1.0) ? _4963 : (isnan(_4963) ? 1.0 : min(_4963, 1.0));
                        float _3559 = 1.0 - _3529;
                        float _3569 = (0.5 / (((_3558 * ((_3544 * _3559) + _3529)) + 9.9999999392252902907785028219223e-09) + (((_3558 * _3559) + _3529) * _3544))) * _3558;
                        float _4974 = isnan(0.0) ? _3569 : (isnan(_3569) ? 0.0 : max(_3569, 0.0));
                        float _3580 = (((_3530 * 3.1415927410125732421875) * (isnan(1.0) ? _4974 : (isnan(_4974) ? 1.0 : min(_4974, 1.0)))) / ((_3552 * _3552) * ((_3496 * 2.1991131305694580078125) + 3.141590118408203125))) * _3485;
                        _3333 = (_3500 * _3448.x) + _3406;
                        _3334 = (_3500 * _3448.y) + _3407;
                        _3335 = (_3500 * _3448.z) + _3408;
                        _3330 = (_3580 * _3465.x) + _3403;
                        _3331 = (_3580 * _3465.y) + _3404;
                        _3332 = (_3580 * _3465.z) + _3405;
                        if (_3410 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3403 = _3330;
                            _3404 = _3331;
                            _3405 = _3332;
                            _3406 = _3333;
                            _3407 = _3334;
                            _3408 = _3335;
                            _3409 = _3410;
                        }
                    }
                    frontier_phi_71_pred = _3335;
                    frontier_phi_71_pred_1 = _3334;
                    frontier_phi_71_pred_2 = _3333;
                    frontier_phi_71_pred_3 = _3332;
                    frontier_phi_71_pred_4 = _3331;
                    frontier_phi_71_pred_5 = _3330;
                }
                _3108 = frontier_phi_71_pred;
                _3106 = frontier_phi_71_pred_1;
                _3104 = frontier_phi_71_pred_2;
                _3102 = frontier_phi_71_pred_3;
                _3100 = frontier_phi_71_pred_4;
                _3098 = frontier_phi_71_pred_5;
                uint _3265 = _3264 + 1u;
                if (_3265 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3258 = _3098;
                    _3259 = _3100;
                    _3260 = _3102;
                    _3261 = _3104;
                    _3262 = _3106;
                    _3263 = _3108;
                    _3264 = _3265;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3097 = _3098;
            _3099 = _3100;
            _3101 = _3102;
            _3103 = _3104;
            _3105 = _3106;
            _3107 = _3108;
        }
        uvec4 _3111 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3112 = _3111.z;
        uint _3114 = (_3112 >> 8u) & 15u;
        float _3226;
        float _3228;
        float _3230;
        float _3232;
        float _3234;
        float _3236;
        if (((4294967295u << _3114) & _2988) == 0u)
        {
            _3226 = _3097;
            _3228 = _3099;
            _3230 = _3101;
            _3232 = _3103;
            _3234 = _3105;
            _3236 = _3107;
        }
        else
        {
            float _3251 = inversesqrt(dot(vec3(_2047, _2048, _2049), vec3(_2047, _2048, _2049)));
            float _3252 = _3251 * _2047;
            float _3253 = _3251 * _2048;
            float _3254 = _3251 * _2049;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3114 < ((_3112 >> 12u) & 15u))
            {
                float _3227;
                float _3229;
                float _3231;
                float _3233;
                float _3235;
                float _3237;
                float _3386 = _3097;
                float _3387 = _3099;
                float _3388 = _3101;
                float _3389 = _3103;
                float _3390 = _3105;
                float _3391 = _3107;
                uint _3392 = _3114;
                uint _3401;
                bool _3402;
                for (;;)
                {
                    _3401 = texelFetch(g_lightClassification, int((((_2982 << 5u) + (_2968 << 9u)) + (_3392 << 2u)) >> 2u)).x;
                    _3402 = _3401 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3402)
                    {
                        frontier_phi_82_pred = _3391;
                        frontier_phi_82_pred_1 = _3390;
                        frontier_phi_82_pred_2 = _3389;
                        frontier_phi_82_pred_3 = _3388;
                        frontier_phi_82_pred_4 = _3387;
                        frontier_phi_82_pred_5 = _3386;
                    }
                    else
                    {
                        float _3594;
                        float _3595;
                        float _3596;
                        float _3597;
                        float _3598;
                        float _3599;
                        float _3888;
                        float _3889;
                        float _3890;
                        float _3891;
                        float _3892;
                        float _3893;
                        float _3607 = _3386;
                        float _3608 = _3387;
                        float _3609 = _3388;
                        float _3610 = _3389;
                        float _3611 = _3390;
                        float _3612 = _3391;
                        uint _3613 = _3401;
                        uint _3614;
                        vec4 _3639;
                        float _3640;
                        vec4 _3655;
                        vec3 _3667;
                        vec4 _3682;
                        vec4 _3697;
                        float _3744;
                        bool _3745;
                        for (;;)
                        {
                            uint _3624 = ((_3392 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3613));
                            _3614 = (_3613 + 4294967295u) & _3613;
                            uint _3626 = _3624 * 40u;
                            _3639 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3626)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 3u)).x));
                            _3640 = _3639.w;
                            uint _3642 = (_3624 * 40u) + 4u;
                            _3655 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3642)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 3u)).x));
                            uint _3657 = (_3624 * 40u) + 8u;
                            _3667 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3657)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 2u)).x));
                            uint _3669 = (_3624 * 40u) + 16u;
                            _3682 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3669)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 3u)).x));
                            uint _3684 = (_3624 * 40u) + 20u;
                            _3697 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3684)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3684 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3684 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3684 + 3u)).x));
                            uint _3700 = (_3624 * 40u) + 24u;
                            vec4 _3713 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3700)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3700 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3700 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3700 + 3u)).x));
                            uint _3719 = (_3624 * 40u) + 28u;
                            vec4 _3732 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3719)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3719 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3719 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3719 + 3u)).x));
                            _3744 = fma(_2049, _3732.z, fma(_2048, _3732.y, _3732.x * _2047)) + _3732.w;
                            _3745 = !((fma(_2049, _3713.z, fma(_2048, _3713.y, _3713.x * _2047)) + _3713.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3745)
                            {
                                float _3772 = _3639.x - _2047;
                                float _3773 = _3639.y - _2048;
                                float _3774 = _3639.z - _2049;
                                float _3775 = dot(vec3(_3772, _3773, _3774), vec3(_3772, _3773, _3774));
                                float _3778 = inversesqrt(_3775);
                                float _3779 = _3778 * _3772;
                                float _3780 = _3778 * _3773;
                                float _3781 = _3778 * _3774;
                                float _3785 = 1.0 - (_3775 / (_3640 * _3640));
                                float _4985 = isnan(0.0) ? _3785 : (isnan(_3785) ? 0.0 : max(_3785, 0.0));
                                float _3786 = isnan(1.0) ? _4985 : (isnan(_4985) ? 1.0 : min(_4985, 1.0));
                                float _3790 = sqrt(_3775) * _3655.w;
                                float _3792 = 1.39999997615814208984375 / (_3790 + 1.39999997615814208984375);
                                float _3793 = _3792 * _3792;
                                float _3796 = ((1.0 - _3793) * dot(vec3(_3779, _3780, _3781), vec3(_881, _884, _887))) + _3793;
                                float _3799 = _3790 * _3790;
                                float _3803 = (fma(_2049, _3682.z, fma(_2048, _3682.y, _3682.x * _2047)) + _3682.w) / _3744;
                                float _3804 = (fma(_2049, _3697.z, fma(_2048, _3697.y, _3697.x * _2047)) + _3697.w) / _3744;
                                float _3808 = 1.0 - dot(vec2(_3803, _3804), vec2(_3803, _3804));
                                float _5001 = isnan(0.0) ? _3808 : (isnan(_3808) ? 0.0 : max(_3808, 0.0));
                                float _3809 = isnan(1.0) ? _5001 : (isnan(_5001) ? 1.0 : min(_5001, 1.0));
                                float _3810 = _3809 * (((isnan(0.0) ? _3796 : (isnan(_3796) ? 0.0 : max(_3796, 0.0))) * _3786) / ((_3799 * 0.699999988079071044921875) + 1.0));
                                float _3822 = exp2(log2(1.0 / ((_3799 * 3.5) + 5.0)) * 0.25);
                                float _3823 = 1.0 - _956;
                                float _3830 = sqrt(1.0 - ((1.0 - (_3823 * _3823)) * (1.0 - (_3822 * _3822))));
                                float _3831 = _3830 * _3830;
                                float _3832 = _3831 * _3831;
                                float _3833 = _3779 - _3252;
                                float _3834 = _3780 - _3253;
                                float _3835 = _3781 - _3254;
                                float _3839 = inversesqrt(dot(vec3(_3833, _3834, _3835), vec3(_3833, _3834, _3835)));
                                float _3843 = dot(vec3(_881, _884, _887), vec3((-0.0) - _3252, (-0.0) - _3253, (-0.0) - _3254));
                                float _5012 = isnan(0.0) ? _3843 : (isnan(_3843) ? 0.0 : max(_3843, 0.0));
                                float _3846 = isnan(1.0) ? _5012 : (isnan(_5012) ? 1.0 : min(_5012, 1.0));
                                float _3847 = dot(vec3(_881, _884, _887), vec3(_3839 * _3833, _3839 * _3834, _3839 * _3835));
                                float _5023 = isnan(0.0) ? _3847 : (isnan(_3847) ? 0.0 : max(_3847, 0.0));
                                float _3850 = isnan(1.0) ? _5023 : (isnan(_5023) ? 1.0 : min(_5023, 1.0));
                                float _3854 = ((_3850 * _3850) * (_3832 + (-1.0))) + 1.0;
                                float _3855 = _3792 * _3831;
                                float _3856 = _3855 * _3855;
                                float _3862 = ((1.0 - _3856) * dot(vec3(_881, _884, _887), vec3(_3779, _3780, _3781))) + _3856;
                                float _5034 = isnan(0.0) ? _3862 : (isnan(_3862) ? 0.0 : max(_3862, 0.0));
                                float _3863 = isnan(1.0) ? _5034 : (isnan(_5034) ? 1.0 : min(_5034, 1.0));
                                float _3864 = 1.0 - _3831;
                                float _3874 = (0.5 / (((_3863 * ((_3846 * _3864) + _3831)) + 9.9999999392252902907785028219223e-09) + (((_3863 * _3864) + _3831) * _3846))) * _3863;
                                float _5045 = isnan(0.0) ? _3874 : (isnan(_3874) ? 0.0 : max(_3874, 0.0));
                                float _3884 = (_3809 * _3786) * (((_3832 * 3.1415927410125732421875) * (isnan(1.0) ? _5045 : (isnan(_5045) ? 1.0 : min(_5045, 1.0)))) / ((_3854 * _3854) * ((_3799 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3810 * _3655.z;
                                frontier_phi_88_pred_1 = _3810 * _3655.y;
                                frontier_phi_88_pred_2 = _3810 * _3655.x;
                                frontier_phi_88_pred_3 = _3884 * _3667.z;
                                frontier_phi_88_pred_4 = _3884 * _3667.y;
                                frontier_phi_88_pred_5 = _3884 * _3667.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3893 = frontier_phi_88_pred;
                            _3892 = frontier_phi_88_pred_1;
                            _3891 = frontier_phi_88_pred_2;
                            _3890 = frontier_phi_88_pred_3;
                            _3889 = frontier_phi_88_pred_4;
                            _3888 = frontier_phi_88_pred_5;
                            _3597 = _3891 + _3610;
                            _3598 = _3892 + _3611;
                            _3599 = _3893 + _3612;
                            _3594 = _3888 + _3607;
                            _3595 = _3889 + _3608;
                            _3596 = _3890 + _3609;
                            if (_3614 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3607 = _3594;
                                _3608 = _3595;
                                _3609 = _3596;
                                _3610 = _3597;
                                _3611 = _3598;
                                _3612 = _3599;
                                _3613 = _3614;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3599;
                        frontier_phi_82_pred_1 = _3598;
                        frontier_phi_82_pred_2 = _3597;
                        frontier_phi_82_pred_3 = _3596;
                        frontier_phi_82_pred_4 = _3595;
                        frontier_phi_82_pred_5 = _3594;
                    }
                    _3237 = frontier_phi_82_pred;
                    _3235 = frontier_phi_82_pred_1;
                    _3233 = frontier_phi_82_pred_2;
                    _3231 = frontier_phi_82_pred_3;
                    _3229 = frontier_phi_82_pred_4;
                    _3227 = frontier_phi_82_pred_5;
                    uint _3393 = _3392 + 1u;
                    if (_3393 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3386 = _3227;
                        _3387 = _3229;
                        _3388 = _3231;
                        _3389 = _3233;
                        _3390 = _3235;
                        _3391 = _3237;
                        _3392 = _3393;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3233;
                frontier_phi_63_64_ladder_1 = _3237;
                frontier_phi_63_64_ladder_2 = _3235;
                frontier_phi_63_64_ladder_3 = _3231;
                frontier_phi_63_64_ladder_4 = _3229;
                frontier_phi_63_64_ladder_5 = _3227;
            }
            else
            {
                frontier_phi_63_64_ladder = _3103;
                frontier_phi_63_64_ladder_1 = _3107;
                frontier_phi_63_64_ladder_2 = _3105;
                frontier_phi_63_64_ladder_3 = _3101;
                frontier_phi_63_64_ladder_4 = _3099;
                frontier_phi_63_64_ladder_5 = _3097;
            }
            _3226 = frontier_phi_63_64_ladder_5;
            _3228 = frontier_phi_63_64_ladder_4;
            _3230 = frontier_phi_63_64_ladder_3;
            _3232 = frontier_phi_63_64_ladder;
            _3234 = frontier_phi_63_64_ladder_2;
            _3236 = frontier_phi_63_64_ladder_1;
        }
        float _3241 = isnan(1.0) ? _940 : (isnan(_940) ? 1.0 : min(_940, 1.0));
        _3001 = (_3241 * _3232) + _2513;
        _3003 = (_3241 * _3234) + _2515;
        _3005 = (_3241 * _3236) + _2517;
        _3007 = ((_3226 * _925) * _3241) + _2851;
        _3009 = ((_3228 * _927) * _3241) + _2853;
        _3011 = ((_3230 * _928) * _3241) + _2855;
    }
    else
    {
        _3001 = _2513;
        _3003 = _2515;
        _3005 = _2517;
        _3007 = _2851;
        _3009 = _2853;
        _3011 = _2855;
    }
    uint _3017 = _901 + uint(cbMatDynParam._m0[0u].w);
    float _3023 = cbInstanceData._m0[_3017].x * (_672 - (_688 * _672));
    float _3024 = cbInstanceData._m0[_3017].y * (_673 - (_688 * _673));
    float _3025 = cbInstanceData._m0[_3017].z * (_674 - (_688 * _674));
    float _5061 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _5072 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _5083 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    float _3042 = (((isnan(1.0) ? _5061 : (isnan(_5061) ? 1.0 : min(_5061, 1.0))) * (_3001 + ((isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0))) * _940))) + ((_3007 + ((isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0))) * _1780)) * cbPerFrame._m0[3u].x)) + _3023;
    float _3044 = (_3024 + ((_3009 + ((isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0))) * _1780)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5072 : (isnan(_5072) ? 1.0 : min(_5072, 1.0))) * (_3003 + ((isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0))) * _940)));
    float _3046 = (_3025 + ((_3011 + ((isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0))) * _1780)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5083 : (isnan(_5083) ? 1.0 : min(_5083, 1.0))) * (_3005 + ((isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0))) * _940)));
    float _3047 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0));
    float _3048 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
    float _3049 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0));
    float _3055 = cbMtdParam._m0[2u].x * _3023;
    float _3056 = cbMtdParam._m0[2u].y * _3024;
    float _3057 = cbMtdParam._m0[2u].z * _3025;
    float _5109 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3059 = isnan(1.0) ? _5109 : (isnan(_5109) ? 1.0 : min(_5109, 1.0));
    uint _3060 = _900 + 6u;
    float _3068 = _862 / cbSceneParam._m0[86u].x;
    float _3069 = _863 / cbSceneParam._m0[86u].y;
    vec4 _3083 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3068, _3069, (log2((isnan(cbSceneParam._m0[77u].w) ? _785 : (isnan(_785) ? cbSceneParam._m0[77u].w : min(_785, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3085 = _3083.x;
    float _3086 = _3083.y;
    float _3087 = _3083.z;
    float _3088 = _3083.w;
    float _3159;
    float _3161;
    float _3163;
    float _3165;
    if (_785 > cbSceneParam._m0[78u].w)
    {
        float _3122 = isnan(_785) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _785 : min(cbSceneParam._m0[80u].w, _785));
        float _3123 = _3122 / _785;
        float _3134 = _3123 * _835;
        float _3135 = _836 * _3123;
        float _3136 = (-0.0) - _3135;
        float _3137 = _3123 * _837;
        float _3139 = (cbSceneParam._m0[77u].w * _3136) / _3122;
        float _3140 = _3139 + cbSceneParam._m0[79u].w;
        float _3141 = cbSceneParam._m0[79u].w - _3135;
        float _3147 = sqrt(((_3134 * _3134) + (_3135 * _3135)) + (_3137 * _3137));
        float _3150 = (1.0 - (cbSceneParam._m0[77u].w / _3122)) * _3147;
        float _3155 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3157 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3343;
        if (abs((_3136 - _3139) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3343 = ((((_3140 > 0.0) ? exp2(_3155 * _3140) : (2.0 - exp2(_3157 * _3140))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3150;
        }
        else
        {
            float _3287 = 1.0 / cbSceneParam._m0[80u].x;
            float _3288 = isnan(_3141) ? _3140 : (isnan(_3140) ? _3141 : max(_3140, _3141));
            float _3289 = isnan(_3141) ? _3140 : (isnan(_3140) ? _3141 : min(_3140, _3141));
            float _3298 = isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : min(_3288, 0.0));
            float _3299 = isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : min(_3289, 0.0));
            _3343 = ((abs(_3147 / _3136) * cbSceneParam._m0[80u].y) * ((((_3298 - _3299) * 2.0) - ((exp2(_3155 * (isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0)))) - exp2(_3155 * (isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0))))) * _3287)) - ((exp2(_3157 * _3298) - exp2(_3157 * _3299)) * _3287))) + (_3150 * cbSceneParam._m0[80u].z);
        }
        vec4 _3345 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3068, _3069, 1.0), 0.0);
        float _3354 = exp2((_3343 * (-1.44269502162933349609375)) * (1.0 - _3345.w));
        float _3355 = log2(_3354);
        float _3371 = log2(_3088);
        _3159 = (exp2(_3371 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3355 * cbSceneParam._m0[78u].x)) * _3345.x) / cbSceneParam._m0[78u].x)) + _3085;
        _3161 = (exp2(_3371 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3355 * cbSceneParam._m0[78u].y)) * _3345.y) / cbSceneParam._m0[78u].y)) + _3086;
        _3163 = (exp2(_3371 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3355 * cbSceneParam._m0[78u].z)) * _3345.z) / cbSceneParam._m0[78u].z)) + _3087;
        _3165 = _3354 * _3088;
    }
    else
    {
        _3159 = _3085;
        _3161 = _3086;
        _3163 = _3087;
        _3165 = _3088;
    }
    bool _3381;
    vec4 _3175;
    vec4 _3197;
    float _3199;
    float _3203;
    float _3204;
    float _3205;
    float _3208;
    float _3211;
    float _3214;
    float _3215;
    bool _3225;
    for (;;)
    {
        _3175 = cbMatDynParam._m0[0u];
        float _3177 = roundEven(_3175.y);
        bool _3178 = _3177 == 3.0;
        float _3179 = log2(_3165);
        float _3183 = exp2(_3179 * cbSceneParam._m0[78u].x);
        float _3184 = exp2(_3179 * cbSceneParam._m0[78u].y);
        float _3185 = exp2(_3179 * cbSceneParam._m0[78u].z);
        float _3186 = _3183 * _3047;
        float _3187 = _3184 * _3048;
        float _3188 = _3185 * _3049;
        float _3195 = _851 + (-0.5);
        _3197 = cbMtdParam._m0[1u];
        _3199 = _3197.y * _3195;
        float _3202 = (_3177 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3203 = _3202 * (_3178 ? _3186 : (_3186 + (cbSceneParam._m0[72u].w * _3159)));
        _3204 = _3202 * (_3178 ? _3187 : (_3187 + (cbSceneParam._m0[72u].w * _3161)));
        _3205 = _3202 * (_3178 ? _3188 : (_3188 + (cbSceneParam._m0[72u].w * _3163)));
        _3208 = ((_3055 * _3059) * _3183) * _3202;
        _3211 = ((_3056 * _3059) * _3184) * _3202;
        _3214 = ((_3057 * _3059) * _3185) * _3202;
        _3215 = _3195 * 0.999000012874603271484375;
        _3225 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3225)
        {
            if ((cbInstanceData._m0[_900 + 7u].x + _3215) < 0.5)
            {
                _3381 = true;
                break;
            }
        }
        uint _3322 = _901 + uint(_3175.w);
        if ((cbInstanceData._m0[_3322].w < 1.0) && ((cbInstanceData._m0[_3322].w + _3215) < 0.5))
        {
            _3381 = true;
            break;
        }
        if ((_3199 + 1.0) < _3197.x)
        {
            _3381 = true;
            break;
        }
        _3381 = false;
        break;
    }
    float _3585;
    if (_3381)
    {
        discard_state = true;
        _3585 = 0.0;
    }
    else
    {
        _3585 = cbInstanceData._m0[_3060].w;
    }
    SV_Target.x = _3203;
    SV_Target.y = _3204;
    SV_Target.z = _3205;
    SV_Target.w = _3585;
    SV_Target_1.x = _3208;
    SV_Target_1.y = _3211;
    SV_Target_1.z = _3214;
    SV_Target_1.w = cbInstanceData._m0[_3060].w;
    discard_exit();
}


