#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1076;
float _3498;
float _3499;
float _3500;
float _3501;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _193 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _194 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _195 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _201 = inversesqrt(dot(vec3(_193, _194, _195), vec3(_193, _194, _195)));
    float _208 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _215 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _237 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _243 = _237.x * cbMtdParam._m0[9u].x;
    float _244 = _237.y * cbMtdParam._m0[9u].y;
    float _245 = _237.z * cbMtdParam._m0[9u].z;
    vec4 _262 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    vec4 _277 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[6u].w));
    float _279 = _277.x;
    vec4 _291 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _295 = _291.z;
    float _299 = (_291.x * 2.0) + (-1.0);
    float _301 = (_291.y * 2.0) + (-1.0);
    float _302 = dot(vec2(_299, _301), vec2(_299, _301));
    float _3510 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _308 = sqrt(1.0 - (isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0))));
    float _321 = (cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _322 = (cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _352 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * ((cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * ((cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[10u].w));
    float _357 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[15u].w;
    float _364 = ((_352.y * 0.5) + (-0.25)) * cbMtdParam._m0[15u].z;
    float _366 = (-0.0) - (cbMtdParam._m0[15u].z * ((_352.x * 0.5) + (-0.25)));
    float _368 = fract(_357);
    float _370 = fract(_357 + 0.5);
    float _371 = _368 * _366;
    float _372 = _364 * _368;
    float _375 = _370 * _366;
    float _376 = _364 * _370;
    float _381 = abs((_368 * 2.0) + (-1.0));
    vec4 _397 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_371 + _321) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_372 + _322) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _399 = _397.x;
    float _400 = _397.y;
    float _401 = _397.z;
    vec4 _402 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_375 + _321) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_376 + _322) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _429 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _430 = (cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _443 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_371 + _429) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_372 + _430) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _445 = _443.x;
    float _446 = _443.y;
    float _447 = _443.z;
    vec4 _448 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_375 + _429) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_376 + _430) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _475 = (TEXCOORD_9.x - ((cbMtdParam._m0[16u].y * (1.0 - TEXCOORD_9.x)) * (_262.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[16u].z + 1.0);
    float _3521 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _476 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
    float _482 = fma(_308, _208 * NORMAL.x, fma(_301, _215 * TANGENT.x, (_201 * _193) * _299));
    float _485 = fma(_308, _208 * NORMAL.y, fma(_301, _215 * TANGENT.y, (_201 * _194) * _299));
    float _488 = fma(_308, _208 * NORMAL.z, fma(_301, _215 * TANGENT.z, (_201 * _195) * _299));
    float _492 = inversesqrt(dot(vec3(_482, _485, _488), vec3(_482, _485, _488)));
    float _493 = _492 * _482;
    float _494 = _492 * _485;
    float _495 = _492 * _488;
    float _3532 = isnan(0.0) ? _295 : (isnan(_295) ? 0.0 : max(_295, 0.0));
    float _496 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
    float _3543 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3554 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _3565 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _3576 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _500 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
    float _516 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _557 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _567 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _557);
    float _568 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _557);
    float _569 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _557);
    float _573 = inversesqrt(dot(vec3(_567, _568, _569), vec3(_567, _568, _569)));
    float _574 = _567 * _573;
    float _575 = _568 * _573;
    float _576 = _569 * _573;
    vec4 _581 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _583 = _581.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _757 = sqrt(((_567 * _567) + (_568 * _568)) + (_569 * _569));
        float _763 = (cbMatDynParam._m0[5u].x * _757) + cbMatDynParam._m0[5u].y;
        float _3587 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
        float _764 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
        float _768 = (cbMatDynParam._m0[5u].z * _757) + cbMatDynParam._m0[5u].w;
        float _3598 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0))) - _764)) + _764) < ((_583 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _594 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _595 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _615 = fma(_495, cbSceneParam._m0[5u].z, fma(_494, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _493));
    float _618 = fma(_495, cbSceneParam._m0[6u].z, fma(_494, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _493));
    float _621 = fma(_495, cbSceneParam._m0[7u].z, fma(_494, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _493));
    uint _634 = uint(roundEven(NORMAL.w)) * 13u;
    uint _635 = _634 + 9u;
    uint _636 = _635 + uint(cbMatDynParam._m0[0u].w);
    float _642 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0)))) * cbInstanceData._m0[_636].x;
    float _643 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0)))) * cbInstanceData._m0[_636].y;
    float _644 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0)))) * cbInstanceData._m0[_636].z;
    float _3609 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _645 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
    float _3620 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _646 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
    float _3631 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _647 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
    float _648 = 1.0 - _500;
    float _649 = _645 * _648;
    float _650 = _646 * _648;
    float _651 = _647 * _648;
    float _656 = (_645 + (-0.039999999105930328369140625)) * _500;
    float _657 = (_646 + (-0.039999999105930328369140625)) * _500;
    float _658 = (_647 + (-0.039999999105930328369140625)) * _500;
    float _659 = _656 + 0.039999999105930328369140625;
    float _661 = _657 + 0.039999999105930328369140625;
    float _662 = _658 + 0.039999999105930328369140625;
    vec4 _671 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _594, cbSceneParam._m0[86u].y * _595));
    float _674 = _671.x * TEXCOORD_3.w;
    float _675 = dot(vec3(_493, _494, _495), vec3(_574, _575, _576));
    float _678 = _675 * 2.0;
    float _682 = (_678 * _493) - _574;
    float _683 = (_678 * _494) - _575;
    float _684 = (_678 * _495) - _576;
    float _688 = abs(dot(vec3(_574, _575, _576), vec3(_493, _494, _495)));
    float _3642 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _690 = sqrt(_496);
    float _703 = exp2((_690 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_690 * 3.0));
    float _709 = (1.0 - _703) * ((_690 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _710 = _703 * _690;
    float _738 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _742 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _746 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1075;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _801 = fma(_746, cbModelParam._m0[26u].z, fma(_742, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _738));
        float _805 = fma(_746, cbModelParam._m0[27u].z, fma(_742, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _738));
        float _809 = fma(_746, cbModelParam._m0[28u].z, fma(_742, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _738));
        float _833 = _738 + _493;
        float _834 = _742 + _494;
        float _835 = _746 + _495;
        float _845 = fma(_835, cbModelParam._m0[26u].z, fma(_834, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _833)) - _801;
        float _846 = fma(_835, cbModelParam._m0[27u].z, fma(_834, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _833)) - _805;
        float _847 = fma(_835, cbModelParam._m0[28u].z, fma(_834, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _833)) - _809;
        float _851 = inversesqrt(dot(vec3(_845, _846, _847), vec3(_845, _846, _847)));
        float _864 = ((_851 * _845) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_801 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _865 = ((_851 * _846) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_805 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _866 = ((_851 * _847) / cbModelParam._m0[34u].z) + ((((((_809 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _869 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_864, _865, _866), 0.0);
        vec4 _876 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_864, _865, _866), 0.0);
        vec4 _883 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_864, _865, _866), 0.0);
        vec4 _890 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_864, _865, _866), 0.0);
        float _903 = exp2((_869.w + (-0.5)) * 20.0) * 2.0;
        float _904 = _903 * (_869.x + (-0.5));
        float _905 = _903 * (_869.y + (-0.5));
        float _906 = _903 * (_869.z + (-0.5));
        float _913 = exp2((_876.w + (-0.5)) * 20.0) * 2.0;
        float _914 = _913 * (_876.x + (-0.5));
        float _915 = _913 * (_876.y + (-0.5));
        float _916 = _913 * (_876.z + (-0.5));
        float _923 = exp2((_883.w + (-0.5)) * 20.0) * 2.0;
        float _924 = _923 * (_883.x + (-0.5));
        float _925 = _923 * (_883.y + (-0.5));
        float _926 = _923 * (_883.z + (-0.5));
        float _933 = exp2((_890.w + (-0.5)) * 20.0) * 2.0;
        float _934 = _933 * (_890.x + (-0.5));
        float _935 = _933 * (_890.y + (-0.5));
        float _936 = _933 * (_890.z + (-0.5));
        float _937 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _938 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _939 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _940 = _904 * 0.5;
        float _941 = _914 * 0.5;
        float _942 = _924 * 0.5;
        float _943 = dot(vec3(_940, _941, _942), vec3(_940, _941, _942));
        float _948 = (_943 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_943);
        float _957 = (dot(vec3(_493, _494, _495), vec3(_948 * _940, _948 * _941, _948 * _942)) + 1.0) * 0.5;
        float _3668 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _967 = sqrt(((_941 * _941) + (_940 * _940)) + (_942 * _942)) / (_937 + 9.9999997473787516355514526367188e-06);
        float _3679 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _968 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
        float _969 = _968 * 2.0;
        float _973 = (1.0 - _968) / (_968 + 1.0);
        float _3690 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _974 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
        float _983 = ((((1.0 - _974) * (_969 + 2.0)) * exp2(log2(isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0))) * (_969 + 1.0))) + _974) * _937;
        float _984 = _905 * 0.5;
        float _985 = _915 * 0.5;
        float _986 = _925 * 0.5;
        float _987 = dot(vec3(_984, _985, _986), vec3(_984, _985, _986));
        float _992 = (_987 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_987);
        float _1000 = (dot(vec3(_493, _494, _495), vec3(_992 * _984, _992 * _985, _992 * _986)) + 1.0) * 0.5;
        float _3701 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1009 = sqrt(((_985 * _985) + (_984 * _984)) + (_986 * _986)) / (_938 + 9.9999997473787516355514526367188e-06);
        float _3712 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1010 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
        float _1011 = _1010 * 2.0;
        float _1015 = (1.0 - _1010) / (_1010 + 1.0);
        float _3723 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1016 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
        float _1025 = ((((1.0 - _1016) * (_1011 + 2.0)) * exp2(log2(isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0))) * (_1011 + 1.0))) + _1016) * _938;
        float _1026 = _906 * 0.5;
        float _1027 = _916 * 0.5;
        float _1028 = _926 * 0.5;
        float _1029 = dot(vec3(_1026, _1027, _1028), vec3(_1026, _1027, _1028));
        float _1034 = (_1029 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1029);
        float _1042 = (dot(vec3(_493, _494, _495), vec3(_1034 * _1026, _1034 * _1027, _1034 * _1028)) + 1.0) * 0.5;
        float _3734 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1051 = sqrt(((_1027 * _1027) + (_1026 * _1026)) + (_1028 * _1028)) / (_939 + 9.9999997473787516355514526367188e-06);
        float _3745 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1052 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
        float _1053 = _1052 * 2.0;
        float _1057 = (1.0 - _1052) / (_1052 + 1.0);
        float _3756 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
        float _1067 = ((((1.0 - _1058) * (_1053 + 2.0)) * exp2(log2(isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0))) * (_1053 + 1.0))) + _1058) * _939;
        _1075 = _906;
        _1077 = _905;
        _1078 = _904;
        _1079 = _916;
        _1080 = _915;
        _1081 = _914;
        _1082 = _926;
        _1083 = _925;
        _1084 = _924;
        _1085 = _939;
        _1086 = _938;
        _1087 = _937;
        _1088 = cbModelParam._m0[36u].z * (isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0)));
        _1089 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0)));
        _1090 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0)));
    }
    else
    {
        _1075 = _1076;
        _1077 = _1076;
        _1078 = _1076;
        _1079 = _1076;
        _1080 = _1076;
        _1081 = _1076;
        _1082 = _1076;
        _1083 = _1076;
        _1084 = _1076;
        _1085 = _1076;
        _1086 = _1076;
        _1087 = _1076;
        _1088 = 0.0;
        _1089 = 0.0;
        _1090 = 0.0;
    }
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1119 = fma(_746, cbModelParam._m0[30u].z, fma(_742, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _738));
        float _1123 = fma(_746, cbModelParam._m0[31u].z, fma(_742, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _738));
        float _1127 = fma(_746, cbModelParam._m0[32u].z, fma(_742, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _738));
        float _1150 = _738 + _493;
        float _1151 = _742 + _494;
        float _1152 = _746 + _495;
        float _1162 = fma(_1152, cbModelParam._m0[30u].z, fma(_1151, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1150)) - _1119;
        float _1163 = fma(_1152, cbModelParam._m0[31u].z, fma(_1151, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1150)) - _1123;
        float _1164 = fma(_1152, cbModelParam._m0[32u].z, fma(_1151, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1150)) - _1127;
        float _1168 = inversesqrt(dot(vec3(_1162, _1163, _1164), vec3(_1162, _1163, _1164)));
        float _1181 = ((_1168 * _1162) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1119 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1182 = ((_1168 * _1163) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1123 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1183 = ((_1168 * _1164) / cbModelParam._m0[35u].z) + ((((((_1127 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1185 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1181, _1182, _1183), 0.0);
        vec4 _1192 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1181, _1182, _1183), 0.0);
        vec4 _1199 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1181, _1182, _1183), 0.0);
        vec4 _1206 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1181, _1182, _1183), 0.0);
        float _1218 = exp2((_1185.w + (-0.5)) * 20.0) * 2.0;
        float _1219 = _1218 * (_1185.x + (-0.5));
        float _1220 = _1218 * (_1185.y + (-0.5));
        float _1221 = _1218 * (_1185.z + (-0.5));
        float _1228 = exp2((_1192.w + (-0.5)) * 20.0) * 2.0;
        float _1229 = _1228 * (_1192.x + (-0.5));
        float _1230 = _1228 * (_1192.y + (-0.5));
        float _1231 = _1228 * (_1192.z + (-0.5));
        float _1238 = exp2((_1199.w + (-0.5)) * 20.0) * 2.0;
        float _1239 = _1238 * (_1199.x + (-0.5));
        float _1240 = _1238 * (_1199.y + (-0.5));
        float _1241 = _1238 * (_1199.z + (-0.5));
        float _1248 = exp2((_1206.w + (-0.5)) * 20.0) * 2.0;
        float _1249 = _1248 * (_1206.x + (-0.5));
        float _1250 = _1248 * (_1206.y + (-0.5));
        float _1251 = _1248 * (_1206.z + (-0.5));
        float _1252 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1253 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1254 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1255 = _1219 * 0.5;
        float _1256 = _1229 * 0.5;
        float _1257 = _1239 * 0.5;
        float _1258 = dot(vec3(_1255, _1256, _1257), vec3(_1255, _1256, _1257));
        float _1263 = (_1258 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1258);
        float _1271 = (dot(vec3(_493, _494, _495), vec3(_1263 * _1255, _1263 * _1256, _1263 * _1257)) + 1.0) * 0.5;
        float _3797 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1280 = sqrt(((_1256 * _1256) + (_1255 * _1255)) + (_1257 * _1257)) / (_1252 + 9.9999997473787516355514526367188e-06);
        float _3808 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1281 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
        float _1282 = _1281 * 2.0;
        float _1286 = (1.0 - _1281) / (_1281 + 1.0);
        float _3819 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
        float _1296 = ((((1.0 - _1287) * (_1282 + 2.0)) * exp2(log2(isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0))) * (_1282 + 1.0))) + _1287) * _1252;
        float _1297 = _1220 * 0.5;
        float _1298 = _1230 * 0.5;
        float _1299 = _1240 * 0.5;
        float _1300 = dot(vec3(_1297, _1298, _1299), vec3(_1297, _1298, _1299));
        float _1305 = (_1300 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1300);
        float _1313 = (dot(vec3(_493, _494, _495), vec3(_1305 * _1297, _1305 * _1298, _1305 * _1299)) + 1.0) * 0.5;
        float _3830 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1322 = sqrt(((_1298 * _1298) + (_1297 * _1297)) + (_1299 * _1299)) / (_1253 + 9.9999997473787516355514526367188e-06);
        float _3841 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
        float _1324 = _1323 * 2.0;
        float _1328 = (1.0 - _1323) / (_1323 + 1.0);
        float _3852 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
        float _1338 = ((((1.0 - _1329) * (_1324 + 2.0)) * exp2(log2(isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0))) * (_1324 + 1.0))) + _1329) * _1253;
        float _1339 = _1221 * 0.5;
        float _1340 = _1231 * 0.5;
        float _1341 = _1241 * 0.5;
        float _1342 = dot(vec3(_1339, _1340, _1341), vec3(_1339, _1340, _1341));
        float _1347 = (_1342 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1342);
        float _1355 = (dot(vec3(_493, _494, _495), vec3(_1347 * _1339, _1347 * _1340, _1347 * _1341)) + 1.0) * 0.5;
        float _3863 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1364 = sqrt(((_1340 * _1340) + (_1339 * _1339)) + (_1341 * _1341)) / (_1254 + 9.9999997473787516355514526367188e-06);
        float _3874 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1365 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _1366 = _1365 * 2.0;
        float _1370 = (1.0 - _1365) / (_1365 + 1.0);
        float _3885 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
        float _1380 = ((((1.0 - _1371) * (_1366 + 2.0)) * exp2(log2(isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0))) * (_1366 + 1.0))) + _1371) * _1254;
        _1388 = _1221;
        _1389 = _1220;
        _1390 = _1219;
        _1391 = _1231;
        _1392 = _1230;
        _1393 = _1229;
        _1394 = _1241;
        _1395 = _1240;
        _1396 = _1239;
        _1397 = _1254;
        _1398 = _1253;
        _1399 = _1252;
        _1400 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0)));
        _1401 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0)));
        _1402 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0)));
    }
    else
    {
        _1388 = _1076;
        _1389 = _1076;
        _1390 = _1076;
        _1391 = _1076;
        _1392 = _1076;
        _1393 = _1076;
        _1394 = _1076;
        _1395 = _1076;
        _1396 = _1076;
        _1397 = _1076;
        _1398 = _1076;
        _1399 = _1076;
        _1400 = 0.0;
        _1401 = 0.0;
        _1402 = 0.0;
    }
    float _1412 = (cbModelParam._m0[1u].x * (_1400 - _1088)) + _1088;
    float _1413 = (cbModelParam._m0[1u].x * (_1401 - _1089)) + _1089;
    float _1414 = (cbModelParam._m0[1u].x * (_1402 - _1090)) + _1090;
    float _1435 = fma(_1414, cbSceneParam._m0[89u].z, fma(_1413, cbSceneParam._m0[89u].y, _1412 * cbSceneParam._m0[89u].x));
    float _1438 = fma(_1414, cbSceneParam._m0[90u].z, fma(_1413, cbSceneParam._m0[90u].y, _1412 * cbSceneParam._m0[90u].x));
    float _1441 = fma(_1414, cbSceneParam._m0[91u].z, fma(_1413, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1412));
    float _1456 = _682 * 0.5;
    float _1457 = _683 * 0.5;
    float _1458 = _684 * 0.5;
    float _1459 = dot(vec4(_1456, _1457, _1458, 1.0), vec4(_1390, _1393, _1396, _1399));
    float _1462 = dot(vec4(_1456, _1457, _1458, 1.0), vec4(_1389, _1392, _1395, _1398));
    float _1465 = dot(vec4(_1456, _1457, _1458, 1.0), vec4(_1388, _1391, _1394, _1397));
    float _1499;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1472 = dot(vec4(_1456, _1457, _1458, 1.0), vec4(_1075, _1079, _1082, _1085));
        float _1476 = dot(vec4(_1456, _1457, _1458, 1.0), vec4(_1077, _1080, _1083, _1086));
        float _1480 = dot(vec4(_1456, _1457, _1458, 1.0), vec4(_1078, _1081, _1084, _1087));
        float _1487 = dot(vec4(cbModelParam._m0[39u]), vec4(_1456, _1457, _1458, 1.0));
        _1499 = dot(vec3(isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0)), isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0)), isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1487) ? 0.0 : (isnan(0.0) ? _1487 : max(0.0, _1487))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1499 = 1.0;
    }
    float _1510;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1501 = dot(vec4(cbModelParam._m0[40u]), vec4(_1456, _1457, _1458, 1.0));
        _1510 = dot(vec3(isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0)), isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0)), isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1501) ? 0.0 : (isnan(0.0) ? _1501 : max(0.0, _1501))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1510 = 1.0;
    }
    float _1514 = (_1510 * cbModelParam._m0[1u].x) + (_1499 * (1.0 - cbModelParam._m0[1u].x));
    float _1524 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _496);
    float _1525 = isnan(_1524) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1524 : min(cbModelParam._m0[25u].z, _1524));
    float _1606;
    float _1608;
    float _1610;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1573 = fma(_746, cbModelParam._m0[13u].z, fma(_742, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _738)) + cbModelParam._m0[13u].w;
        float _1577 = fma(_746, cbModelParam._m0[14u].z, fma(_742, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _738)) + cbModelParam._m0[14u].w;
        float _1581 = fma(_746, cbModelParam._m0[15u].z, fma(_742, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _738)) + cbModelParam._m0[15u].w;
        float _1584 = fma(_684, cbModelParam._m0[13u].z, fma(_683, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _682));
        float _1587 = fma(_684, cbModelParam._m0[14u].z, fma(_683, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _682));
        float _1590 = fma(_684, cbModelParam._m0[15u].z, fma(_683, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _682));
        float _1618;
        if (_1584 > 0.0)
        {
            _1618 = abs((1.0 - _1573) / _1584);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1584 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1573 + 1.0) / _1584);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1618 = frontier_phi_17_15_ladder;
        }
        float _1823;
        if (_1587 > 0.0)
        {
            _1823 = abs((1.0 - _1577) / _1587);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1587 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1577 + 1.0) / _1587);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1823 = frontier_phi_26_22_ladder;
        }
        float _2077;
        if (_1590 > 0.0)
        {
            _2077 = abs((1.0 - _1581) / _1590);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1590 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1581 + 1.0) / _1590);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2077 = frontier_phi_38_33_ladder;
        }
        float _2079 = isnan(_1823) ? _1618 : (isnan(_1618) ? _1823 : min(_1618, _1823));
        float _2080 = isnan(_2077) ? _2079 : (isnan(_2079) ? _2077 : min(_2079, _2077));
        float _2084 = (_2080 * _1584) + _1573;
        float _2085 = (_2080 * _1587) + _1577;
        float _2086 = (_2080 * _1590) + _1581;
        float _2087 = _2080 * 9.9999997473787516355514526367188e-05;
        float _2089 = (-1.0) - _2087;
        float _2091 = _2087 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2086 > _2091) || ((_2086 < _2089) || ((_2085 > _2091) || ((_2085 < _2089) || ((_2084 < _2089) || (_2084 > _2091))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2214 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2086, cbModelParam._m0[9u].z, fma(_2085, cbModelParam._m0[9u].y, _2084 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2086, cbModelParam._m0[10u].z, fma(_2085, cbModelParam._m0[10u].y, _2084 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2086, cbModelParam._m0[11u].z, fma(_2085, cbModelParam._m0[11u].y, _2084 * cbModelParam._m0[11u].x))), _1525);
            frontier_phi_16_38_ladder = _2214.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2214.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2214.x * cbModelParam._m0[1u].y;
        }
        _1606 = frontier_phi_16_38_ladder_2;
        _1608 = frontier_phi_16_38_ladder_1;
        _1610 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1594 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_682, _683, _684), _1525);
        _1606 = _1594.x * cbModelParam._m0[1u].y;
        _1608 = _1594.y * cbModelParam._m0[1u].y;
        _1610 = _1594.z * cbModelParam._m0[1u].y;
    }
    float _1614 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _496);
    float _1615 = isnan(_1614) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1614 : min(cbModelParam._m0[25u].w, _1614));
    float _1705;
    float _1707;
    float _1709;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1669 = fma(_746, cbModelParam._m0[21u].z, fma(_742, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _738)) + cbModelParam._m0[21u].w;
        float _1673 = fma(_746, cbModelParam._m0[22u].z, fma(_742, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _738)) + cbModelParam._m0[22u].w;
        float _1677 = fma(_746, cbModelParam._m0[23u].z, fma(_742, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _738)) + cbModelParam._m0[23u].w;
        float _1680 = fma(_684, cbModelParam._m0[21u].z, fma(_683, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _682));
        float _1683 = fma(_684, cbModelParam._m0[22u].z, fma(_683, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _682));
        float _1686 = fma(_684, cbModelParam._m0[23u].z, fma(_683, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _682));
        float _1828;
        if (_1680 > 0.0)
        {
            _1828 = abs((1.0 - _1669) / _1680);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1680 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1669 + 1.0) / _1680);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1828 = frontier_phi_28_24_ladder;
        }
        float _2104;
        if (_1683 > 0.0)
        {
            _2104 = abs((1.0 - _1673) / _1683);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1683 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1673 + 1.0) / _1683);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2104 = frontier_phi_40_35_ladder;
        }
        float _2317;
        if (_1686 > 0.0)
        {
            _2317 = abs((1.0 - _1677) / _1686);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1686 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1677 + 1.0) / _1686);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2317 = frontier_phi_49_46_ladder;
        }
        float _2319 = isnan(_2104) ? _1828 : (isnan(_1828) ? _2104 : min(_1828, _2104));
        float _2320 = isnan(_2317) ? _2319 : (isnan(_2319) ? _2317 : min(_2319, _2317));
        float _2324 = (_2320 * _1680) + _1669;
        float _2325 = (_2320 * _1683) + _1673;
        float _2326 = (_2320 * _1686) + _1677;
        float _2327 = _2320 * 9.9999997473787516355514526367188e-05;
        float _2328 = (-1.0) - _2327;
        float _2330 = _2327 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2326 > _2330) || ((_2326 < _2328) || ((_2325 > _2330) || ((_2325 < _2328) || ((_2324 < _2328) || (_2324 > _2330))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2554 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2326, cbModelParam._m0[17u].z, fma(_2325, cbModelParam._m0[17u].y, _2324 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2326, cbModelParam._m0[18u].z, fma(_2325, cbModelParam._m0[18u].y, _2324 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2326, cbModelParam._m0[19u].z, fma(_2325, cbModelParam._m0[19u].y, _2324 * cbModelParam._m0[19u].x))), _1615);
            frontier_phi_25_49_ladder = _2554.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2554.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2554.x * cbModelParam._m0[1u].z;
        }
        _1705 = frontier_phi_25_49_ladder_2;
        _1707 = frontier_phi_25_49_ladder_1;
        _1709 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1689 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_682, _683, _684), _1615);
        _1705 = _1689.x * cbModelParam._m0[1u].z;
        _1707 = _1689.y * cbModelParam._m0[1u].z;
        _1709 = _1689.z * cbModelParam._m0[1u].z;
    }
    float _1722 = (((_709 * _659) + _710) * _674) * ((cbModelParam._m0[1u].w * (_1705 - _1606)) + _1606);
    float _1724 = (((_709 * _661) + _710) * _674) * ((cbModelParam._m0[1u].w * (_1707 - _1608)) + _1608);
    float _1726 = (((_709 * _662) + _710) * _674) * ((cbModelParam._m0[1u].w * (_1709 - _1610)) + _1610);
    float _1729 = fma(_1726, cbSceneParam._m0[89u].z, fma(_1724, cbSceneParam._m0[89u].y, _1722 * cbSceneParam._m0[89u].x));
    float _1732 = fma(_1726, cbSceneParam._m0[90u].z, fma(_1724, cbSceneParam._m0[90u].y, _1722 * cbSceneParam._m0[90u].x));
    float _1735 = fma(_1726, cbSceneParam._m0[91u].z, fma(_1724, cbSceneParam._m0[91u].y, _1722 * cbSceneParam._m0[91u].x));
    uvec4 _1745 = floatBitsToUint(cbInstanceData._m0[_634 + 5u]);
    uint _1747 = _1745.x * 14u;
    uint _1748 = _1747 + 13u;
    float _1755 = _674 + (-1.0);
    float _1760 = (cbLight._m0[_1748].x * _1755) + 1.0;
    float _1761 = (cbLight._m0[_1748].y * _1755) + 1.0;
    float _1762 = (cbLight._m0[_1748].z * _1755) + 1.0;
    float _1763 = (cbLight._m0[_1748].w * _1755) + 1.0;
    uint _1764 = _1747 + 5u;
    float _1770 = isnan(1.0) ? _1761 : (isnan(_1761) ? 1.0 : min(_1761, 1.0));
    uint _1774 = _1747 + 4u;
    float _1781 = isnan(1.0) ? _1760 : (isnan(_1760) ? 1.0 : min(_1760, 1.0));
    uint _1785 = _1747 | 1u;
    float _1796 = dot(vec3(cbLight._m0[_1747].xyz), vec3(_493, _494, _495));
    float _1799 = dot(vec3(cbLight._m0[_1785].xyz), vec3(_493, _494, _495));
    float _4021 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
    float _4032 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
    float _1804 = (isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * 0.3183098733425140380859375;
    float _1806 = (isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * 0.3183098733425140380859375;
    float _1813 = ((cbLight._m0[_1764].x * _1770) * _1806) + ((cbLight._m0[_1774].x * _1781) * _1804);
    float _1814 = ((_1770 * cbLight._m0[_1764].y) * _1806) + ((_1781 * cbLight._m0[_1774].y) * _1804);
    float _1815 = ((_1770 * cbLight._m0[_1764].z) * _1806) + ((_1781 * cbLight._m0[_1774].z) * _1804);
    uvec4 _1820 = floatBitsToUint(cbLight._m0[_1747 + 12u]);
    bool _1822 = _1820.x == 0u;
    float _1833;
    float _1835;
    float _1837;
    if (_1822)
    {
        _1833 = _1813;
        _1835 = _1814;
        _1837 = _1815;
    }
    else
    {
        uint _1841 = _1747 + 6u;
        float _1857 = (dot(vec3(cbLight._m0[_1747 + 2u].xyz), vec3(_493, _494, _495)) * 0.5) + 0.5;
        float _1858 = _1857 * _1857;
        float _4043 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
        float _1859 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1860 = isnan(1.0) ? _1762 : (isnan(_1762) ? 1.0 : min(_1762, 1.0));
        _1833 = (((cbLight._m0[_1841].x * 0.3183098733425140380859375) * _1859) * _1860) + _1813;
        _1835 = (((cbLight._m0[_1841].y * 0.3183098733425140380859375) * _1859) * _1860) + _1814;
        _1837 = (((cbLight._m0[_1841].z * 0.3183098733425140380859375) * _1859) * _1860) + _1815;
    }
    bool _1840 = _1820.y == 0u;
    float _1878;
    float _1880;
    float _1882;
    if (_1840)
    {
        _1878 = _1833;
        _1880 = _1835;
        _1882 = _1837;
    }
    else
    {
        uint _2048 = _1747 + 7u;
        float _2064 = (dot(vec3(cbLight._m0[_1747 + 3u].xyz), vec3(_493, _494, _495)) * 0.5) + 0.5;
        float _2065 = _2064 * _2064;
        float _4059 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
        float _2066 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _2067 = isnan(1.0) ? _1763 : (isnan(_1763) ? 1.0 : min(_1763, 1.0));
        _1878 = (((cbLight._m0[_2048].x * 0.3183098733425140380859375) * _2066) * _2067) + _1833;
        _1880 = (((cbLight._m0[_2048].y * 0.3183098733425140380859375) * _2066) * _2067) + _1835;
        _1882 = (((cbLight._m0[_2048].z * 0.3183098733425140380859375) * _2066) * _2067) + _1837;
    }
    uint _1885 = _1747 + 8u;
    float _1898 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1747].w)) * _496) * 0.949999988079071044921875);
    float _1899 = _1898 * _1898;
    float _1900 = cbLight._m0[_1747].x + _574;
    float _1901 = cbLight._m0[_1747].y + _575;
    float _1902 = cbLight._m0[_1747].z + _576;
    float _1906 = inversesqrt(dot(vec3(_1900, _1901, _1902), vec3(_1900, _1901, _1902)));
    float _1907 = _1906 * _1900;
    float _1908 = _1906 * _1901;
    float _1909 = _1906 * _1902;
    float _1910 = dot(vec3(_493, _494, _495), vec3(cbLight._m0[_1747].xyz));
    float _4075 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
    float _1913 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
    float _4086 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _1914 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
    float _1915 = dot(vec3(_493, _494, _495), vec3(_1907, _1908, _1909));
    float _4097 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
    float _1918 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
    float _1919 = dot(vec3(cbLight._m0[_1747].xyz), vec3(_1907, _1908, _1909));
    float _4108 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
    float _1923 = _1899 * _1899;
    float _1927 = ((_1918 * _1918) * (_1923 + (-1.0))) + 1.0;
    float _1935 = exp2(log2(1.0 - (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0)))) * 5.0);
    float _1936 = 0.959999978542327880859375 - _656;
    float _1938 = 0.959999978542327880859375 - _657;
    float _1939 = 0.959999978542327880859375 - _658;
    float _1946 = 1.0 - _1899;
    float _1957 = (0.5 / (((_1914 * ((_1913 * _1946) + _1899)) + 9.9999999392252902907785028219223e-09) + (((_1914 * _1946) + _1899) * _1913))) * _1913;
    float _4119 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
    float _1959 = (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * (_1923 / ((_1927 * _1927) * 3.141590118408203125));
    uint _1970 = _1747 + 9u;
    float _1981 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1785].w)) * _496) * 0.949999988079071044921875);
    float _1982 = _1981 * _1981;
    float _1983 = cbLight._m0[_1785].x + _574;
    float _1984 = cbLight._m0[_1785].y + _575;
    float _1985 = cbLight._m0[_1785].z + _576;
    float _1989 = inversesqrt(dot(vec3(_1983, _1984, _1985), vec3(_1983, _1984, _1985)));
    float _1990 = _1989 * _1983;
    float _1991 = _1989 * _1984;
    float _1992 = _1989 * _1985;
    float _1993 = dot(vec3(_493, _494, _495), vec3(cbLight._m0[_1785].xyz));
    float _4130 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
    float _1996 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
    float _1997 = dot(vec3(_493, _494, _495), vec3(_1990, _1991, _1992));
    float _4141 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
    float _2000 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
    float _2001 = dot(vec3(cbLight._m0[_1785].xyz), vec3(_1990, _1991, _1992));
    float _4152 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
    float _2005 = _1982 * _1982;
    float _2009 = ((_2000 * _2000) * (_2005 + (-1.0))) + 1.0;
    float _2016 = exp2(log2(1.0 - (isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0)))) * 5.0);
    float _2023 = 1.0 - _1982;
    float _2033 = (0.5 / (((_1914 * ((_1996 * _2023) + _1982)) + 9.9999999392252902907785028219223e-09) + (((_1914 * _2023) + _1982) * _1996))) * _1996;
    float _4163 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
    float _2035 = (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0))) * (_2005 / ((_2009 * _2009) * 3.141590118408203125));
    float _2045 = (((((_2016 * _1936) + _659) * cbLight._m0[_1970].x) * _2035) * _1770) + (((((_1935 * _1936) + _659) * cbLight._m0[_1885].x) * _1959) * _1781);
    float _2046 = (((((_2016 * _1938) + _661) * cbLight._m0[_1970].y) * _2035) * _1770) + (((((_1935 * _1938) + _661) * cbLight._m0[_1885].y) * _1959) * _1781);
    float _2047 = (((((_2016 * _1939) + _662) * cbLight._m0[_1970].z) * _2035) * _1770) + (((((_1935 * _1939) + _662) * cbLight._m0[_1885].z) * _1959) * _1781);
    float _2109;
    float _2111;
    float _2113;
    if (_1822)
    {
        _2109 = _2045;
        _2111 = _2046;
        _2113 = _2047;
    }
    else
    {
        uint _2115 = _1747 + 2u;
        uint _2119 = _1747 + 10u;
        float _2133 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2115].w)) * _496) * 0.949999988079071044921875);
        float _2134 = _2133 * _2133;
        float _2135 = cbLight._m0[_2115].x + _574;
        float _2136 = cbLight._m0[_2115].y + _575;
        float _2137 = cbLight._m0[_2115].z + _576;
        float _2141 = inversesqrt(dot(vec3(_2135, _2136, _2137), vec3(_2135, _2136, _2137)));
        float _2142 = _2141 * _2135;
        float _2143 = _2141 * _2136;
        float _2144 = _2141 * _2137;
        float _2145 = dot(vec3(_493, _494, _495), vec3(cbLight._m0[_2115].xyz));
        float _4174 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
        float _2148 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _2149 = dot(vec3(_493, _494, _495), vec3(_2142, _2143, _2144));
        float _4185 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
        float _2152 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _2153 = dot(vec3(cbLight._m0[_2115].xyz), vec3(_2142, _2143, _2144));
        float _4196 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
        float _2157 = _2134 * _2134;
        float _2161 = ((_2152 * _2152) * (_2157 + (-1.0))) + 1.0;
        float _2168 = exp2(log2(1.0 - (isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0)))) * 5.0);
        float _2175 = 1.0 - _2134;
        float _2185 = (0.5 / (((_1914 * ((_2148 * _2175) + _2134)) + 9.9999999392252902907785028219223e-09) + (((_1914 * _2175) + _2134) * _2148))) * _2148;
        float _4207 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
        float _2187 = (isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) * (_2157 / ((_2161 * _2161) * 3.141590118408203125));
        float _2188 = isnan(1.0) ? _1762 : (isnan(_1762) ? 1.0 : min(_1762, 1.0));
        _2109 = (((((_2168 * _1936) + _659) * cbLight._m0[_2119].x) * _2187) * _2188) + _2045;
        _2111 = (((((_2168 * _1938) + _661) * cbLight._m0[_2119].y) * _2187) * _2188) + _2046;
        _2113 = (((((_2168 * _1939) + _662) * cbLight._m0[_2119].z) * _2187) * _2188) + _2047;
    }
    float _2223;
    float _2225;
    float _2227;
    if (_1840)
    {
        _2223 = _2109;
        _2225 = _2111;
        _2227 = _2113;
    }
    else
    {
        uint _2234 = _1747 + 3u;
        uint _2238 = _1747 + 11u;
        float _2252 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2234].w)) * _496) * 0.949999988079071044921875);
        float _2253 = _2252 * _2252;
        float _2254 = cbLight._m0[_2234].x + _574;
        float _2255 = cbLight._m0[_2234].y + _575;
        float _2256 = cbLight._m0[_2234].z + _576;
        float _2260 = inversesqrt(dot(vec3(_2254, _2255, _2256), vec3(_2254, _2255, _2256)));
        float _2261 = _2260 * _2254;
        float _2262 = _2260 * _2255;
        float _2263 = _2260 * _2256;
        float _2264 = dot(vec3(_493, _494, _495), vec3(cbLight._m0[_2234].xyz));
        float _4223 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
        float _2267 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
        float _2268 = dot(vec3(_493, _494, _495), vec3(_2261, _2262, _2263));
        float _4234 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
        float _2271 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _2272 = dot(vec3(cbLight._m0[_2234].xyz), vec3(_2261, _2262, _2263));
        float _4245 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
        float _2276 = _2253 * _2253;
        float _2280 = ((_2271 * _2271) * (_2276 + (-1.0))) + 1.0;
        float _2287 = exp2(log2(1.0 - (isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0)))) * 5.0);
        float _2294 = 1.0 - _2253;
        float _2304 = (0.5 / (((_1914 * ((_2267 * _2294) + _2253)) + 9.9999999392252902907785028219223e-09) + (((_1914 * _2294) + _2253) * _2267))) * _2267;
        float _4256 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
        float _2306 = (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0))) * (_2276 / ((_2280 * _2280) * 3.141590118408203125));
        float _2307 = isnan(1.0) ? _1763 : (isnan(_1763) ? 1.0 : min(_1763, 1.0));
        _2223 = (((((_2287 * _1936) + _659) * cbLight._m0[_2238].x) * _2306) * _2307) + _2109;
        _2225 = (((((_2287 * _1938) + _661) * cbLight._m0[_2238].y) * _2306) * _2307) + _2111;
        _2227 = (((((_2287 * _1939) + _662) * cbLight._m0[_2238].z) * _2306) * _2307) + _2113;
    }
    float _2442;
    float _2444;
    float _2446;
    float _2448;
    float _2450;
    float _2452;
    if (_1745.y == 0u)
    {
        float _2382 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2383 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2382;
        float _2384 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2382;
        float _2385 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2382;
        uvec4 _2397 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2398 = _2397.x;
        uint _2409 = uint((float(_2397.y) * floor(float(uint(cbSceneParam._m0[85u].y * _595) / _2398))) + floor(float(uint(cbSceneParam._m0[85u].x * _594) / _2398)));
        float _2419 = (log2(_2385 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2420 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
        uint _2423 = uint(isnan(14.0) ? _2420 : (isnan(_2420) ? 14.0 : min(_2420, 14.0)));
        uvec4 _2428 = texelFetch(g_lightClusterGridBuffer, int(((_2423 << 2u) + (_2409 << 6u)) >> 2u));
        uint _2429 = _2428.x;
        uint _2430 = _2397.z;
        float _2559;
        float _2561;
        float _2563;
        float _2565;
        float _2567;
        float _2569;
        if (((((1u << ((_2430 >> 4u) & 15u)) + 4294967295u) & _2429) == 0u) || ((_2430 & 240u) == 0u))
        {
            _2559 = 0.0;
            _2561 = 0.0;
            _2563 = 0.0;
            _2565 = 0.0;
            _2567 = 0.0;
            _2569 = 0.0;
        }
        else
        {
            float _2560;
            float _2562;
            float _2564;
            float _2566;
            float _2568;
            float _2570;
            float _2720 = 0.0;
            float _2721 = 0.0;
            float _2722 = 0.0;
            float _2723 = 0.0;
            float _2724 = 0.0;
            float _2725 = 0.0;
            uint _2726 = 0u;
            uint _2735;
            bool _2736;
            for (;;)
            {
                _2735 = texelFetch(g_lightClassification, int((((_2423 << 5u) + (_2409 << 9u)) + (_2726 << 2u)) >> 2u)).x;
                _2736 = _2735 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2736)
                {
                    frontier_phi_66_pred = _2720;
                    frontier_phi_66_pred_1 = _2725;
                    frontier_phi_66_pred_2 = _2724;
                    frontier_phi_66_pred_3 = _2723;
                    frontier_phi_66_pred_4 = _2722;
                    frontier_phi_66_pred_5 = _2721;
                }
                else
                {
                    float _2865;
                    float _2866;
                    float _2867;
                    float _2868;
                    float _2869;
                    float _2870;
                    uint _2871;
                    _2865 = _2720;
                    _2866 = _2721;
                    _2867 = _2722;
                    _2868 = _2723;
                    _2869 = _2724;
                    _2870 = _2725;
                    _2871 = _2735;
                    float _2792;
                    float _2793;
                    float _2794;
                    float _2795;
                    float _2796;
                    float _2797;
                    for (;;)
                    {
                        uint _2875 = uint(findLSB(_2871)) + (_2726 << 5u);
                        uint _2872 = (_2871 + 4294967295u) & _2871;
                        uint _2877 = _2875 * 48u;
                        vec4 _2891 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2877)).x, texelFetch(g_PointLightRenderingBuffer, int(_2877 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2877 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2877 + 3u)).x));
                        uint _2897 = (_2875 * 48u) + 4u;
                        vec4 _2910 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2897)).x, texelFetch(g_PointLightRenderingBuffer, int(_2897 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2897 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2897 + 3u)).x));
                        uint _2916 = (_2875 * 48u) + 8u;
                        vec3 _2927 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2916)).x, texelFetch(g_PointLightRenderingBuffer, int(_2916 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2916 + 2u)).x));
                        float _2931 = _2891.x - _2383;
                        float _2932 = _2891.y - _2384;
                        float _2933 = _2891.z - _2385;
                        float _2934 = dot(vec3(_2931, _2932, _2933), vec3(_2931, _2932, _2933));
                        float _2937 = inversesqrt(_2934);
                        float _2938 = _2937 * _2931;
                        float _2939 = _2937 * _2932;
                        float _2940 = _2937 * _2933;
                        float _2941 = dot(vec3(_615, _618, _621), vec3(_2938, _2939, _2940));
                        float _2946 = 1.0 - (_2934 * _2891.w);
                        float _4282 = isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0));
                        float _2947 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
                        float _2948 = sqrt(_2934) * _2910.w;
                        float _2951 = 1.39999997615814208984375 / (_2948 + 1.39999997615814208984375);
                        float _2952 = _2951 * _2951;
                        float _2955 = ((1.0 - _2952) * _2941) + _2952;
                        float _2958 = _2948 * _2948;
                        float _2962 = ((isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0))) * _2947) / ((_2958 * 0.699999988079071044921875) + 1.0);
                        float _2966 = (-0.0) - _2383;
                        float _2967 = (-0.0) - _2384;
                        float _2968 = (-0.0) - _2385;
                        float _2972 = inversesqrt(dot(vec3(_2966, _2967, _2968), vec3(_2966, _2967, _2968)));
                        float _2973 = _2972 * _2966;
                        float _2974 = _2972 * _2967;
                        float _2975 = _2972 * _2968;
                        float _2983 = exp2(log2(1.0 / ((_2958 * 3.5) + 5.0)) * 0.25);
                        float _2984 = 1.0 - _690;
                        float _2991 = sqrt(1.0 - ((1.0 - (_2984 * _2984)) * (1.0 - (_2983 * _2983))));
                        float _2992 = _2991 * _2991;
                        float _2993 = _2992 * _2992;
                        float _2994 = _2973 + _2938;
                        float _2995 = _2974 + _2939;
                        float _2996 = _2975 + _2940;
                        float _3000 = inversesqrt(dot(vec3(_2994, _2995, _2996), vec3(_2994, _2995, _2996)));
                        float _3004 = dot(vec3(_615, _618, _621), vec3(_2973, _2974, _2975));
                        float _4298 = isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0));
                        float _3007 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
                        float _3008 = dot(vec3(_615, _618, _621), vec3(_3000 * _2994, _3000 * _2995, _3000 * _2996));
                        float _4309 = isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0));
                        float _3011 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
                        float _3015 = ((_3011 * _3011) * (_2993 + (-1.0))) + 1.0;
                        float _3016 = _2951 * _2992;
                        float _3017 = _3016 * _3016;
                        float _3020 = ((1.0 - _3017) * _2941) + _3017;
                        float _4320 = isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0));
                        float _3021 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
                        float _3022 = 1.0 - _2992;
                        float _3032 = (0.5 / (((_3021 * ((_3007 * _3022) + _2992)) + 9.9999999392252902907785028219223e-09) + (((_3021 * _3022) + _2992) * _3007))) * _3021;
                        float _4331 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0));
                        float _3043 = (((_2993 * 3.1415927410125732421875) * (isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0)))) / ((_3015 * _3015) * ((_2958 * 2.1991131305694580078125) + 3.141590118408203125))) * _2947;
                        _2795 = (_2962 * _2910.x) + _2868;
                        _2796 = (_2962 * _2910.y) + _2869;
                        _2797 = (_2962 * _2910.z) + _2870;
                        _2792 = (_3043 * _2927.x) + _2865;
                        _2793 = (_3043 * _2927.y) + _2866;
                        _2794 = (_3043 * _2927.z) + _2867;
                        if (_2872 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2865 = _2792;
                            _2866 = _2793;
                            _2867 = _2794;
                            _2868 = _2795;
                            _2869 = _2796;
                            _2870 = _2797;
                            _2871 = _2872;
                        }
                    }
                    frontier_phi_66_pred = _2792;
                    frontier_phi_66_pred_1 = _2797;
                    frontier_phi_66_pred_2 = _2796;
                    frontier_phi_66_pred_3 = _2795;
                    frontier_phi_66_pred_4 = _2794;
                    frontier_phi_66_pred_5 = _2793;
                }
                _2560 = frontier_phi_66_pred;
                _2570 = frontier_phi_66_pred_1;
                _2568 = frontier_phi_66_pred_2;
                _2566 = frontier_phi_66_pred_3;
                _2564 = frontier_phi_66_pred_4;
                _2562 = frontier_phi_66_pred_5;
                uint _2727 = _2726 + 1u;
                if (_2727 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2720 = _2560;
                    _2721 = _2562;
                    _2722 = _2564;
                    _2723 = _2566;
                    _2724 = _2568;
                    _2725 = _2570;
                    _2726 = _2727;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2559 = _2560;
            _2561 = _2562;
            _2563 = _2564;
            _2565 = _2566;
            _2567 = _2568;
            _2569 = _2570;
        }
        uvec4 _2573 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2574 = _2573.z;
        uint _2576 = (_2574 >> 8u) & 15u;
        float _2688;
        float _2690;
        float _2692;
        float _2694;
        float _2696;
        float _2698;
        if (((4294967295u << _2576) & _2429) == 0u)
        {
            _2688 = _2559;
            _2690 = _2561;
            _2692 = _2563;
            _2694 = _2565;
            _2696 = _2567;
            _2698 = _2569;
        }
        else
        {
            float _2713 = inversesqrt(dot(vec3(_2383, _2384, _2385), vec3(_2383, _2384, _2385)));
            float _2714 = _2713 * _2383;
            float _2715 = _2713 * _2384;
            float _2716 = _2713 * _2385;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2576 < ((_2574 >> 12u) & 15u))
            {
                float _2689;
                float _2691;
                float _2693;
                float _2695;
                float _2697;
                float _2699;
                float _2848 = _2559;
                float _2849 = _2561;
                float _2850 = _2563;
                float _2851 = _2565;
                float _2852 = _2567;
                float _2853 = _2569;
                uint _2854 = _2576;
                uint _2863;
                bool _2864;
                for (;;)
                {
                    _2863 = texelFetch(g_lightClassification, int((((_2423 << 5u) + (_2409 << 9u)) + (_2854 << 2u)) >> 2u)).x;
                    _2864 = _2863 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2864)
                    {
                        frontier_phi_77_pred = _2853;
                        frontier_phi_77_pred_1 = _2852;
                        frontier_phi_77_pred_2 = _2851;
                        frontier_phi_77_pred_3 = _2850;
                        frontier_phi_77_pred_4 = _2849;
                        frontier_phi_77_pred_5 = _2848;
                    }
                    else
                    {
                        float _3057;
                        float _3058;
                        float _3059;
                        float _3060;
                        float _3061;
                        float _3062;
                        float _3351;
                        float _3352;
                        float _3353;
                        float _3354;
                        float _3355;
                        float _3356;
                        float _3070 = _2848;
                        float _3071 = _2849;
                        float _3072 = _2850;
                        float _3073 = _2851;
                        float _3074 = _2852;
                        float _3075 = _2853;
                        uint _3076 = _2863;
                        uint _3077;
                        vec4 _3102;
                        float _3103;
                        vec4 _3118;
                        vec3 _3130;
                        vec4 _3145;
                        vec4 _3160;
                        float _3207;
                        bool _3208;
                        for (;;)
                        {
                            uint _3087 = ((_2854 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3076));
                            _3077 = (_3076 + 4294967295u) & _3076;
                            uint _3089 = _3087 * 40u;
                            _3102 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3089)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 3u)).x));
                            _3103 = _3102.w;
                            uint _3105 = (_3087 * 40u) + 4u;
                            _3118 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3105)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 3u)).x));
                            uint _3120 = (_3087 * 40u) + 8u;
                            _3130 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3120)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 2u)).x));
                            uint _3132 = (_3087 * 40u) + 16u;
                            _3145 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3132)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 3u)).x));
                            uint _3147 = (_3087 * 40u) + 20u;
                            _3160 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3147)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 3u)).x));
                            uint _3163 = (_3087 * 40u) + 24u;
                            vec4 _3176 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3163)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 3u)).x));
                            uint _3182 = (_3087 * 40u) + 28u;
                            vec4 _3195 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3182)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 3u)).x));
                            _3207 = fma(_2385, _3195.z, fma(_2384, _3195.y, _3195.x * _2383)) + _3195.w;
                            _3208 = !((fma(_2385, _3176.z, fma(_2384, _3176.y, _3176.x * _2383)) + _3176.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3208)
                            {
                                float _3235 = _3102.x - _2383;
                                float _3236 = _3102.y - _2384;
                                float _3237 = _3102.z - _2385;
                                float _3238 = dot(vec3(_3235, _3236, _3237), vec3(_3235, _3236, _3237));
                                float _3241 = inversesqrt(_3238);
                                float _3242 = _3241 * _3235;
                                float _3243 = _3241 * _3236;
                                float _3244 = _3241 * _3237;
                                float _3248 = 1.0 - (_3238 / (_3103 * _3103));
                                float _4342 = isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0));
                                float _3249 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
                                float _3253 = sqrt(_3238) * _3118.w;
                                float _3255 = 1.39999997615814208984375 / (_3253 + 1.39999997615814208984375);
                                float _3256 = _3255 * _3255;
                                float _3259 = ((1.0 - _3256) * dot(vec3(_3242, _3243, _3244), vec3(_615, _618, _621))) + _3256;
                                float _3262 = _3253 * _3253;
                                float _3266 = (fma(_2385, _3145.z, fma(_2384, _3145.y, _3145.x * _2383)) + _3145.w) / _3207;
                                float _3267 = (fma(_2385, _3160.z, fma(_2384, _3160.y, _3160.x * _2383)) + _3160.w) / _3207;
                                float _3271 = 1.0 - dot(vec2(_3266, _3267), vec2(_3266, _3267));
                                float _4358 = isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0));
                                float _3272 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
                                float _3273 = _3272 * (((isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0))) * _3249) / ((_3262 * 0.699999988079071044921875) + 1.0));
                                float _3285 = exp2(log2(1.0 / ((_3262 * 3.5) + 5.0)) * 0.25);
                                float _3286 = 1.0 - _690;
                                float _3293 = sqrt(1.0 - ((1.0 - (_3286 * _3286)) * (1.0 - (_3285 * _3285))));
                                float _3294 = _3293 * _3293;
                                float _3295 = _3294 * _3294;
                                float _3296 = _3242 - _2714;
                                float _3297 = _3243 - _2715;
                                float _3298 = _3244 - _2716;
                                float _3302 = inversesqrt(dot(vec3(_3296, _3297, _3298), vec3(_3296, _3297, _3298)));
                                float _3306 = dot(vec3(_615, _618, _621), vec3((-0.0) - _2714, (-0.0) - _2715, (-0.0) - _2716));
                                float _4369 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
                                float _3309 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
                                float _3310 = dot(vec3(_615, _618, _621), vec3(_3302 * _3296, _3302 * _3297, _3302 * _3298));
                                float _4380 = isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0));
                                float _3313 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
                                float _3317 = ((_3313 * _3313) * (_3295 + (-1.0))) + 1.0;
                                float _3318 = _3255 * _3294;
                                float _3319 = _3318 * _3318;
                                float _3325 = ((1.0 - _3319) * dot(vec3(_615, _618, _621), vec3(_3242, _3243, _3244))) + _3319;
                                float _4391 = isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : max(_3325, 0.0));
                                float _3326 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
                                float _3327 = 1.0 - _3294;
                                float _3337 = (0.5 / (((_3326 * ((_3309 * _3327) + _3294)) + 9.9999999392252902907785028219223e-09) + (((_3326 * _3327) + _3294) * _3309))) * _3326;
                                float _4402 = isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : max(_3337, 0.0));
                                float _3347 = (_3272 * _3249) * (((_3295 * 3.1415927410125732421875) * (isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0)))) / ((_3317 * _3317) * ((_3262 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3273 * _3118.y;
                                frontier_phi_83_pred_1 = _3273 * _3118.x;
                                frontier_phi_83_pred_2 = _3347 * _3130.z;
                                frontier_phi_83_pred_3 = _3347 * _3130.y;
                                frontier_phi_83_pred_4 = _3347 * _3130.x;
                                frontier_phi_83_pred_5 = _3273 * _3118.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3355 = frontier_phi_83_pred;
                            _3354 = frontier_phi_83_pred_1;
                            _3353 = frontier_phi_83_pred_2;
                            _3352 = frontier_phi_83_pred_3;
                            _3351 = frontier_phi_83_pred_4;
                            _3356 = frontier_phi_83_pred_5;
                            _3060 = _3354 + _3073;
                            _3061 = _3355 + _3074;
                            _3062 = _3356 + _3075;
                            _3057 = _3351 + _3070;
                            _3058 = _3352 + _3071;
                            _3059 = _3353 + _3072;
                            if (_3077 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3070 = _3057;
                                _3071 = _3058;
                                _3072 = _3059;
                                _3073 = _3060;
                                _3074 = _3061;
                                _3075 = _3062;
                                _3076 = _3077;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3062;
                        frontier_phi_77_pred_1 = _3061;
                        frontier_phi_77_pred_2 = _3060;
                        frontier_phi_77_pred_3 = _3059;
                        frontier_phi_77_pred_4 = _3058;
                        frontier_phi_77_pred_5 = _3057;
                    }
                    _2699 = frontier_phi_77_pred;
                    _2697 = frontier_phi_77_pred_1;
                    _2695 = frontier_phi_77_pred_2;
                    _2693 = frontier_phi_77_pred_3;
                    _2691 = frontier_phi_77_pred_4;
                    _2689 = frontier_phi_77_pred_5;
                    uint _2855 = _2854 + 1u;
                    if (_2855 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2848 = _2689;
                        _2849 = _2691;
                        _2850 = _2693;
                        _2851 = _2695;
                        _2852 = _2697;
                        _2853 = _2699;
                        _2854 = _2855;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2693;
                frontier_phi_58_59_ladder_1 = _2699;
                frontier_phi_58_59_ladder_2 = _2697;
                frontier_phi_58_59_ladder_3 = _2695;
                frontier_phi_58_59_ladder_4 = _2691;
                frontier_phi_58_59_ladder_5 = _2689;
            }
            else
            {
                frontier_phi_58_59_ladder = _2563;
                frontier_phi_58_59_ladder_1 = _2569;
                frontier_phi_58_59_ladder_2 = _2567;
                frontier_phi_58_59_ladder_3 = _2565;
                frontier_phi_58_59_ladder_4 = _2561;
                frontier_phi_58_59_ladder_5 = _2559;
            }
            _2688 = frontier_phi_58_59_ladder_5;
            _2690 = frontier_phi_58_59_ladder_4;
            _2692 = frontier_phi_58_59_ladder;
            _2694 = frontier_phi_58_59_ladder_3;
            _2696 = frontier_phi_58_59_ladder_2;
            _2698 = frontier_phi_58_59_ladder_1;
        }
        float _2703 = isnan(1.0) ? _674 : (isnan(_674) ? 1.0 : min(_674, 1.0));
        _2442 = (_2703 * _2694) + _1878;
        _2444 = (_2703 * _2696) + _1880;
        _2446 = (_2703 * _2698) + _1882;
        _2448 = ((_2688 * _659) * _2703) + _2223;
        _2450 = ((_2690 * _661) * _2703) + _2225;
        _2452 = ((_2692 * _662) * _2703) + _2227;
    }
    else
    {
        _2442 = _1878;
        _2444 = _1880;
        _2446 = _1882;
        _2448 = _2223;
        _2450 = _2225;
        _2452 = _2227;
    }
    uint _2458 = _635 + uint(cbMatDynParam._m0[0u].w);
    float _2464 = ((((((_448.x - _445) * _381) + _445) * cbMtdParam._m0[13u].x) + ((((_402.x - _399) * _381) + _399) * cbMtdParam._m0[11u].x)) * _476) * cbInstanceData._m0[_2458].x;
    float _2465 = ((((((_448.y - _446) * _381) + _446) * cbMtdParam._m0[13u].y) + ((((_402.y - _400) * _381) + _400) * cbMtdParam._m0[11u].y)) * _476) * cbInstanceData._m0[_2458].y;
    float _2466 = ((((((_448.z - _447) * _381) + _447) * cbMtdParam._m0[13u].z) + ((((_402.z - _401) * _381) + _401) * cbMtdParam._m0[11u].z)) * _476) * cbInstanceData._m0[_2458].z;
    float _4418 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _4429 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _4440 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _2483 = (((isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0))) * (_2442 + ((isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0))) * _674))) + ((_2448 + ((isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0))) * _1514)) * cbPerFrame._m0[3u].x)) + _2464;
    float _2485 = (_2465 + ((_2450 + ((isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0))) * _1514)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0))) * (_2444 + ((isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0))) * _674)));
    float _2487 = (_2466 + ((_2452 + ((isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0))) * _1514)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0))) * (_2446 + ((isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0))) * _674)));
    float _2488 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
    float _2489 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
    float _2490 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
    float _2496 = cbMtdParam._m0[2u].x * _2464;
    float _2497 = cbMtdParam._m0[2u].y * _2465;
    float _2498 = cbMtdParam._m0[2u].z * _2466;
    float _4466 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2500 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
    uint _2501 = _634 + 6u;
    float _2509 = _594 / cbSceneParam._m0[86u].x;
    float _2510 = _595 / cbSceneParam._m0[86u].y;
    vec4 _2524 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2509, _2510, (log2((isnan(cbSceneParam._m0[77u].w) ? _516 : (isnan(_516) ? cbSceneParam._m0[77u].w : min(_516, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2526 = _2524.x;
    float _2527 = _2524.y;
    float _2528 = _2524.z;
    float _2529 = _2524.w;
    float _2621;
    float _2623;
    float _2625;
    float _2627;
    if (_516 > cbSceneParam._m0[78u].w)
    {
        float _2584 = isnan(_516) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _516 : min(cbSceneParam._m0[80u].w, _516));
        float _2585 = _2584 / _516;
        float _2596 = _2585 * _567;
        float _2597 = _568 * _2585;
        float _2598 = (-0.0) - _2597;
        float _2599 = _2585 * _569;
        float _2601 = (cbSceneParam._m0[77u].w * _2598) / _2584;
        float _2602 = _2601 + cbSceneParam._m0[79u].w;
        float _2603 = cbSceneParam._m0[79u].w - _2597;
        float _2609 = sqrt(((_2596 * _2596) + (_2597 * _2597)) + (_2599 * _2599));
        float _2612 = (1.0 - (cbSceneParam._m0[77u].w / _2584)) * _2609;
        float _2617 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2619 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2805;
        if (abs((_2598 - _2601) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2805 = ((((_2602 > 0.0) ? exp2(_2617 * _2602) : (2.0 - exp2(_2619 * _2602))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2612;
        }
        else
        {
            float _2749 = 1.0 / cbSceneParam._m0[80u].x;
            float _2750 = isnan(_2603) ? _2602 : (isnan(_2602) ? _2603 : max(_2602, _2603));
            float _2751 = isnan(_2603) ? _2602 : (isnan(_2602) ? _2603 : min(_2602, _2603));
            float _2760 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : min(_2750, 0.0));
            float _2761 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : min(_2751, 0.0));
            _2805 = ((abs(_2609 / _2598) * cbSceneParam._m0[80u].y) * ((((_2760 - _2761) * 2.0) - ((exp2(_2617 * (isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0)))) - exp2(_2617 * (isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0))))) * _2749)) - ((exp2(_2619 * _2760) - exp2(_2619 * _2761)) * _2749))) + (_2612 * cbSceneParam._m0[80u].z);
        }
        vec4 _2807 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2509, _2510, 1.0), 0.0);
        float _2816 = exp2((_2805 * (-1.44269502162933349609375)) * (1.0 - _2807.w));
        float _2817 = log2(_2816);
        float _2833 = log2(_2529);
        _2621 = (exp2(_2833 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2817 * cbSceneParam._m0[78u].x)) * _2807.x) / cbSceneParam._m0[78u].x)) + _2526;
        _2623 = (exp2(_2833 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2817 * cbSceneParam._m0[78u].y)) * _2807.y) / cbSceneParam._m0[78u].y)) + _2527;
        _2625 = (exp2(_2833 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2817 * cbSceneParam._m0[78u].z)) * _2807.z) / cbSceneParam._m0[78u].z)) + _2528;
        _2627 = _2816 * _2529;
    }
    else
    {
        _2621 = _2526;
        _2623 = _2527;
        _2625 = _2528;
        _2627 = _2529;
    }
    bool _2843;
    vec4 _2637;
    vec4 _2659;
    float _2661;
    float _2665;
    float _2666;
    float _2667;
    float _2670;
    float _2673;
    float _2676;
    float _2677;
    bool _2687;
    for (;;)
    {
        _2637 = cbMatDynParam._m0[0u];
        float _2639 = roundEven(_2637.y);
        bool _2640 = _2639 == 3.0;
        float _2641 = log2(_2627);
        float _2645 = exp2(_2641 * cbSceneParam._m0[78u].x);
        float _2646 = exp2(_2641 * cbSceneParam._m0[78u].y);
        float _2647 = exp2(_2641 * cbSceneParam._m0[78u].z);
        float _2648 = _2645 * _2488;
        float _2649 = _2646 * _2489;
        float _2650 = _2647 * _2490;
        float _2657 = _583 + (-0.5);
        _2659 = cbMtdParam._m0[1u];
        _2661 = _2659.y * _2657;
        float _2664 = (_2639 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2665 = _2664 * (_2640 ? _2648 : (_2648 + (cbSceneParam._m0[72u].w * _2621)));
        _2666 = _2664 * (_2640 ? _2649 : (_2649 + (cbSceneParam._m0[72u].w * _2623)));
        _2667 = _2664 * (_2640 ? _2650 : (_2650 + (cbSceneParam._m0[72u].w * _2625)));
        _2670 = ((_2496 * _2500) * _2645) * _2664;
        _2673 = ((_2497 * _2500) * _2646) * _2664;
        _2676 = ((_2498 * _2500) * _2647) * _2664;
        _2677 = _2657 * 0.999000012874603271484375;
        _2687 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2687)
        {
            if ((cbInstanceData._m0[_634 + 7u].x + _2677) < 0.5)
            {
                _2843 = true;
                break;
            }
        }
        uint _2784 = _635 + uint(_2637.w);
        if ((cbInstanceData._m0[_2784].w < 1.0) && ((cbInstanceData._m0[_2784].w + _2677) < 0.5))
        {
            _2843 = true;
            break;
        }
        if ((_2661 + 1.0) < _2659.x)
        {
            _2843 = true;
            break;
        }
        _2843 = false;
        break;
    }
    float _3048;
    if (_2843)
    {
        discard_state = true;
        _3048 = 0.0;
    }
    else
    {
        _3048 = cbInstanceData._m0[_2501].w;
    }
    SV_Target.x = _2665;
    SV_Target.y = _2666;
    SV_Target.z = _2667;
    SV_Target.w = _3048;
    SV_Target_1.x = _2670;
    SV_Target_1.y = _2673;
    SV_Target_1.z = _2676;
    SV_Target_1.w = cbInstanceData._m0[_2501].w;
    discard_exit();
}


