#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _801;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _176 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _177 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _178 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _184 = inversesqrt(dot(vec3(_176, _177, _178), vec3(_176, _177, _178)));
    float _191 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _198 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _221 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _227 = _221.x * cbMtdParam._m0[9u].x;
    float _228 = _221.y * cbMtdParam._m0[9u].y;
    float _229 = _221.z * cbMtdParam._m0[9u].z;
    vec4 _241 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _245 = _241.z;
    float _249 = (_241.x * 2.0) + (-1.0);
    float _251 = (_241.y * 2.0) + (-1.0);
    float _252 = dot(vec2(_249, _251), vec2(_249, _251));
    float _3143 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _258 = sqrt(1.0 - (isnan(1.0) ? _3143 : (isnan(_3143) ? 1.0 : min(_3143, 1.0))));
    float _261 = fma(_258, _191 * NORMAL.x, fma(_251, _198 * TANGENT.x, (_184 * _176) * _249));
    float _264 = fma(_258, _191 * NORMAL.y, fma(_251, _198 * TANGENT.y, (_184 * _177) * _249));
    float _267 = fma(_258, _191 * NORMAL.z, fma(_251, _198 * TANGENT.z, (_184 * _178) * _249));
    float _271 = inversesqrt(dot(vec3(_261, _264, _267), vec3(_261, _264, _267)));
    float _272 = _271 * _261;
    float _273 = _271 * _264;
    float _274 = _271 * _267;
    float _3154 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _275 = isnan(1.0) ? _3154 : (isnan(_3154) ? 1.0 : min(_3154, 1.0));
    float _3165 = isnan(0.0) ? _227 : (isnan(_227) ? 0.0 : max(_227, 0.0));
    float _3176 = isnan(0.0) ? _228 : (isnan(_228) ? 0.0 : max(_228, 0.0));
    float _3187 = isnan(0.0) ? _229 : (isnan(_229) ? 0.0 : max(_229, 0.0));
    float _294 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _337 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _347 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _337);
    float _348 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _337);
    float _349 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _337);
    float _353 = inversesqrt(dot(vec3(_347, _348, _349), vec3(_347, _348, _349)));
    float _354 = _347 * _353;
    float _355 = _348 * _353;
    float _356 = _349 * _353;
    float _362 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _363 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _384 = fma(_274, cbSceneParam._m0[5u].z, fma(_273, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _272));
    float _387 = fma(_274, cbSceneParam._m0[6u].z, fma(_273, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _272));
    float _390 = fma(_274, cbSceneParam._m0[7u].z, fma(_273, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _272));
    uint _403 = uint(roundEven(NORMAL.w)) * 13u;
    uint _406 = (_403 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _412 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3165 : (isnan(_3165) ? 1.0 : min(_3165, 1.0)))) * cbInstanceData._m0[_406].x;
    float _413 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3176 : (isnan(_3176) ? 1.0 : min(_3176, 1.0)))) * cbInstanceData._m0[_406].y;
    float _414 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3187 : (isnan(_3187) ? 1.0 : min(_3187, 1.0)))) * cbInstanceData._m0[_406].z;
    float _3198 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _415 = isnan(1.0) ? _3198 : (isnan(_3198) ? 1.0 : min(_3198, 1.0));
    float _3209 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _416 = isnan(1.0) ? _3209 : (isnan(_3209) ? 1.0 : min(_3209, 1.0));
    float _3220 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _417 = isnan(1.0) ? _3220 : (isnan(_3220) ? 1.0 : min(_3220, 1.0));
    vec4 _426 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _362, cbSceneParam._m0[86u].y * _363));
    float _429 = _426.x * TEXCOORD_3.w;
    float _430 = dot(vec3(_272, _273, _274), vec3(_354, _355, _356));
    float _433 = _430 * 2.0;
    float _437 = (_433 * _272) - _354;
    float _438 = (_433 * _273) - _355;
    float _439 = (_433 * _274) - _356;
    float _443 = abs(dot(vec3(_354, _355, _356), vec3(_272, _273, _274)));
    float _3231 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _445 = sqrt(_275);
    float _458 = exp2((_445 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3231 : (isnan(_3231) ? 1.0 : min(_3231, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_445 * 3.0));
    float _490 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _494 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _498 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _800;
    float _802;
    float _803;
    float _804;
    float _805;
    float _806;
    float _807;
    float _808;
    float _809;
    float _810;
    float _811;
    float _812;
    float _813;
    float _814;
    float _815;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _525 = fma(_498, cbModelParam._m0[26u].z, fma(_494, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _490));
        float _529 = fma(_498, cbModelParam._m0[27u].z, fma(_494, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _490));
        float _533 = fma(_498, cbModelParam._m0[28u].z, fma(_494, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _490));
        float _558 = _490 + _272;
        float _559 = _494 + _273;
        float _560 = _498 + _274;
        float _570 = fma(_560, cbModelParam._m0[26u].z, fma(_559, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _558)) - _525;
        float _571 = fma(_560, cbModelParam._m0[27u].z, fma(_559, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _558)) - _529;
        float _572 = fma(_560, cbModelParam._m0[28u].z, fma(_559, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _558)) - _533;
        float _576 = inversesqrt(dot(vec3(_570, _571, _572), vec3(_570, _571, _572)));
        float _589 = ((_576 * _570) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_525 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _590 = ((_576 * _571) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_529 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _591 = ((_576 * _572) / cbModelParam._m0[34u].z) + ((((((_533 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _594 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_589, _590, _591), 0.0);
        vec4 _601 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_589, _590, _591), 0.0);
        vec4 _608 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_589, _590, _591), 0.0);
        vec4 _615 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_589, _590, _591), 0.0);
        float _628 = exp2((_594.w + (-0.5)) * 20.0) * 2.0;
        float _629 = _628 * (_594.x + (-0.5));
        float _630 = _628 * (_594.y + (-0.5));
        float _631 = _628 * (_594.z + (-0.5));
        float _638 = exp2((_601.w + (-0.5)) * 20.0) * 2.0;
        float _639 = _638 * (_601.x + (-0.5));
        float _640 = _638 * (_601.y + (-0.5));
        float _641 = _638 * (_601.z + (-0.5));
        float _648 = exp2((_608.w + (-0.5)) * 20.0) * 2.0;
        float _649 = _648 * (_608.x + (-0.5));
        float _650 = _648 * (_608.y + (-0.5));
        float _651 = _648 * (_608.z + (-0.5));
        float _658 = exp2((_615.w + (-0.5)) * 20.0) * 2.0;
        float _659 = _658 * (_615.x + (-0.5));
        float _660 = _658 * (_615.y + (-0.5));
        float _661 = _658 * (_615.z + (-0.5));
        float _662 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
        float _663 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
        float _664 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
        float _665 = _629 * 0.5;
        float _666 = _639 * 0.5;
        float _667 = _649 * 0.5;
        float _668 = dot(vec3(_665, _666, _667), vec3(_665, _666, _667));
        float _673 = (_668 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_668);
        float _682 = (dot(vec3(_272, _273, _274), vec3(_673 * _665, _673 * _666, _673 * _667)) + 1.0) * 0.5;
        float _3257 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
        float _692 = sqrt(((_666 * _666) + (_665 * _665)) + (_667 * _667)) / (_662 + 9.9999997473787516355514526367188e-06);
        float _3268 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
        float _693 = isnan(1.0) ? _3268 : (isnan(_3268) ? 1.0 : min(_3268, 1.0));
        float _694 = _693 * 2.0;
        float _698 = (1.0 - _693) / (_693 + 1.0);
        float _3279 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
        float _699 = isnan(1.0) ? _3279 : (isnan(_3279) ? 1.0 : min(_3279, 1.0));
        float _708 = ((((1.0 - _699) * (_694 + 2.0)) * exp2(log2(isnan(1.0) ? _3257 : (isnan(_3257) ? 1.0 : min(_3257, 1.0))) * (_694 + 1.0))) + _699) * _662;
        float _709 = _630 * 0.5;
        float _710 = _640 * 0.5;
        float _711 = _650 * 0.5;
        float _712 = dot(vec3(_709, _710, _711), vec3(_709, _710, _711));
        float _717 = (_712 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_712);
        float _725 = (dot(vec3(_272, _273, _274), vec3(_717 * _709, _717 * _710, _717 * _711)) + 1.0) * 0.5;
        float _3290 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
        float _734 = sqrt(((_710 * _710) + (_709 * _709)) + (_711 * _711)) / (_663 + 9.9999997473787516355514526367188e-06);
        float _3301 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
        float _735 = isnan(1.0) ? _3301 : (isnan(_3301) ? 1.0 : min(_3301, 1.0));
        float _736 = _735 * 2.0;
        float _740 = (1.0 - _735) / (_735 + 1.0);
        float _3312 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
        float _741 = isnan(1.0) ? _3312 : (isnan(_3312) ? 1.0 : min(_3312, 1.0));
        float _750 = ((((1.0 - _741) * (_736 + 2.0)) * exp2(log2(isnan(1.0) ? _3290 : (isnan(_3290) ? 1.0 : min(_3290, 1.0))) * (_736 + 1.0))) + _741) * _663;
        float _751 = _631 * 0.5;
        float _752 = _641 * 0.5;
        float _753 = _651 * 0.5;
        float _754 = dot(vec3(_751, _752, _753), vec3(_751, _752, _753));
        float _759 = (_754 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_754);
        float _767 = (dot(vec3(_272, _273, _274), vec3(_759 * _751, _759 * _752, _759 * _753)) + 1.0) * 0.5;
        float _3323 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
        float _776 = sqrt(((_752 * _752) + (_751 * _751)) + (_753 * _753)) / (_664 + 9.9999997473787516355514526367188e-06);
        float _3334 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
        float _777 = isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0));
        float _778 = _777 * 2.0;
        float _782 = (1.0 - _777) / (_777 + 1.0);
        float _3345 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
        float _783 = isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0));
        float _792 = ((((1.0 - _783) * (_778 + 2.0)) * exp2(log2(isnan(1.0) ? _3323 : (isnan(_3323) ? 1.0 : min(_3323, 1.0))) * (_778 + 1.0))) + _783) * _664;
        _800 = _631;
        _802 = _630;
        _803 = _629;
        _804 = _641;
        _805 = _640;
        _806 = _639;
        _807 = _651;
        _808 = _650;
        _809 = _649;
        _810 = _664;
        _811 = _663;
        _812 = _662;
        _813 = cbModelParam._m0[36u].z * (isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0)));
        _814 = cbModelParam._m0[36u].z * (isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0)));
        _815 = cbModelParam._m0[36u].z * (isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0)));
    }
    else
    {
        _800 = _801;
        _802 = _801;
        _803 = _801;
        _804 = _801;
        _805 = _801;
        _806 = _801;
        _807 = _801;
        _808 = _801;
        _809 = _801;
        _810 = _801;
        _811 = _801;
        _812 = _801;
        _813 = 0.0;
        _814 = 0.0;
        _815 = 0.0;
    }
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _841 = fma(_498, cbModelParam._m0[30u].z, fma(_494, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _490));
        float _845 = fma(_498, cbModelParam._m0[31u].z, fma(_494, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _490));
        float _849 = fma(_498, cbModelParam._m0[32u].z, fma(_494, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _490));
        float _872 = _490 + _272;
        float _873 = _494 + _273;
        float _874 = _498 + _274;
        float _884 = fma(_874, cbModelParam._m0[30u].z, fma(_873, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _872)) - _841;
        float _885 = fma(_874, cbModelParam._m0[31u].z, fma(_873, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _872)) - _845;
        float _886 = fma(_874, cbModelParam._m0[32u].z, fma(_873, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _872)) - _849;
        float _890 = inversesqrt(dot(vec3(_884, _885, _886), vec3(_884, _885, _886)));
        float _903 = ((_890 * _884) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_841 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _904 = ((_890 * _885) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_845 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _905 = ((_890 * _886) / cbModelParam._m0[35u].z) + ((((((_849 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _907 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_903, _904, _905), 0.0);
        vec4 _914 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_903, _904, _905), 0.0);
        vec4 _921 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_903, _904, _905), 0.0);
        vec4 _928 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_903, _904, _905), 0.0);
        float _940 = exp2((_907.w + (-0.5)) * 20.0) * 2.0;
        float _941 = _940 * (_907.x + (-0.5));
        float _942 = _940 * (_907.y + (-0.5));
        float _943 = _940 * (_907.z + (-0.5));
        float _950 = exp2((_914.w + (-0.5)) * 20.0) * 2.0;
        float _951 = _950 * (_914.x + (-0.5));
        float _952 = _950 * (_914.y + (-0.5));
        float _953 = _950 * (_914.z + (-0.5));
        float _960 = exp2((_921.w + (-0.5)) * 20.0) * 2.0;
        float _961 = _960 * (_921.x + (-0.5));
        float _962 = _960 * (_921.y + (-0.5));
        float _963 = _960 * (_921.z + (-0.5));
        float _970 = exp2((_928.w + (-0.5)) * 20.0) * 2.0;
        float _971 = _970 * (_928.x + (-0.5));
        float _972 = _970 * (_928.y + (-0.5));
        float _973 = _970 * (_928.z + (-0.5));
        float _974 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _975 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _976 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _977 = _941 * 0.5;
        float _978 = _951 * 0.5;
        float _979 = _961 * 0.5;
        float _980 = dot(vec3(_977, _978, _979), vec3(_977, _978, _979));
        float _985 = (_980 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_980);
        float _993 = (dot(vec3(_272, _273, _274), vec3(_985 * _977, _985 * _978, _985 * _979)) + 1.0) * 0.5;
        float _3386 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _1002 = sqrt(((_978 * _978) + (_977 * _977)) + (_979 * _979)) / (_974 + 9.9999997473787516355514526367188e-06);
        float _3397 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1003 = isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0));
        float _1004 = _1003 * 2.0;
        float _1008 = (1.0 - _1003) / (_1003 + 1.0);
        float _3408 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1009 = isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0));
        float _1018 = ((((1.0 - _1009) * (_1004 + 2.0)) * exp2(log2(isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0))) * (_1004 + 1.0))) + _1009) * _974;
        float _1019 = _942 * 0.5;
        float _1020 = _952 * 0.5;
        float _1021 = _962 * 0.5;
        float _1022 = dot(vec3(_1019, _1020, _1021), vec3(_1019, _1020, _1021));
        float _1027 = (_1022 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1022);
        float _1035 = (dot(vec3(_272, _273, _274), vec3(_1027 * _1019, _1027 * _1020, _1027 * _1021)) + 1.0) * 0.5;
        float _3419 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1044 = sqrt(((_1020 * _1020) + (_1019 * _1019)) + (_1021 * _1021)) / (_975 + 9.9999997473787516355514526367188e-06);
        float _3430 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1045 = isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0));
        float _1046 = _1045 * 2.0;
        float _1050 = (1.0 - _1045) / (_1045 + 1.0);
        float _3441 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1051 = isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0));
        float _1060 = ((((1.0 - _1051) * (_1046 + 2.0)) * exp2(log2(isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0))) * (_1046 + 1.0))) + _1051) * _975;
        float _1061 = _943 * 0.5;
        float _1062 = _953 * 0.5;
        float _1063 = _963 * 0.5;
        float _1064 = dot(vec3(_1061, _1062, _1063), vec3(_1061, _1062, _1063));
        float _1069 = (_1064 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1064);
        float _1077 = (dot(vec3(_272, _273, _274), vec3(_1069 * _1061, _1069 * _1062, _1069 * _1063)) + 1.0) * 0.5;
        float _3452 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1086 = sqrt(((_1062 * _1062) + (_1061 * _1061)) + (_1063 * _1063)) / (_976 + 9.9999997473787516355514526367188e-06);
        float _3463 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1087 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
        float _1088 = _1087 * 2.0;
        float _1092 = (1.0 - _1087) / (_1087 + 1.0);
        float _3474 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
        float _1102 = ((((1.0 - _1093) * (_1088 + 2.0)) * exp2(log2(isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0))) * (_1088 + 1.0))) + _1093) * _976;
        _1110 = _943;
        _1111 = _942;
        _1112 = _941;
        _1113 = _953;
        _1114 = _952;
        _1115 = _951;
        _1116 = _963;
        _1117 = _962;
        _1118 = _961;
        _1119 = _976;
        _1120 = _975;
        _1121 = _974;
        _1122 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0)));
        _1123 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0)));
        _1124 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0)));
    }
    else
    {
        _1110 = _801;
        _1111 = _801;
        _1112 = _801;
        _1113 = _801;
        _1114 = _801;
        _1115 = _801;
        _1116 = _801;
        _1117 = _801;
        _1118 = _801;
        _1119 = _801;
        _1120 = _801;
        _1121 = _801;
        _1122 = 0.0;
        _1123 = 0.0;
        _1124 = 0.0;
    }
    float _1134 = (cbModelParam._m0[1u].x * (_1122 - _813)) + _813;
    float _1135 = (cbModelParam._m0[1u].x * (_1123 - _814)) + _814;
    float _1136 = (cbModelParam._m0[1u].x * (_1124 - _815)) + _815;
    float _1157 = fma(_1136, cbSceneParam._m0[89u].z, fma(_1135, cbSceneParam._m0[89u].y, _1134 * cbSceneParam._m0[89u].x));
    float _1160 = fma(_1136, cbSceneParam._m0[90u].z, fma(_1135, cbSceneParam._m0[90u].y, _1134 * cbSceneParam._m0[90u].x));
    float _1163 = fma(_1136, cbSceneParam._m0[91u].z, fma(_1135, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1134));
    float _1178 = _437 * 0.5;
    float _1179 = _438 * 0.5;
    float _1180 = _439 * 0.5;
    float _1181 = dot(vec4(_1178, _1179, _1180, 1.0), vec4(_1112, _1115, _1118, _1121));
    float _1184 = dot(vec4(_1178, _1179, _1180, 1.0), vec4(_1111, _1114, _1117, _1120));
    float _1187 = dot(vec4(_1178, _1179, _1180, 1.0), vec4(_1110, _1113, _1116, _1119));
    float _1221;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1194 = dot(vec4(_1178, _1179, _1180, 1.0), vec4(_800, _804, _807, _810));
        float _1198 = dot(vec4(_1178, _1179, _1180, 1.0), vec4(_802, _805, _808, _811));
        float _1202 = dot(vec4(_1178, _1179, _1180, 1.0), vec4(_803, _806, _809, _812));
        float _1209 = dot(vec4(cbModelParam._m0[39u]), vec4(_1178, _1179, _1180, 1.0));
        _1221 = dot(vec3(isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0)), isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0)), isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1209) ? 0.0 : (isnan(0.0) ? _1209 : max(0.0, _1209))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1221 = 1.0;
    }
    float _1232;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1223 = dot(vec4(cbModelParam._m0[40u]), vec4(_1178, _1179, _1180, 1.0));
        _1232 = dot(vec3(isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0)), isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0)), isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1223) ? 0.0 : (isnan(0.0) ? _1223 : max(0.0, _1223))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1232 = 1.0;
    }
    float _1236 = (_1232 * cbModelParam._m0[1u].x) + (_1221 * (1.0 - cbModelParam._m0[1u].x));
    float _1246 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _275);
    float _1247 = isnan(_1246) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1246 : min(cbModelParam._m0[25u].z, _1246));
    float _1329;
    float _1331;
    float _1333;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1296 = fma(_498, cbModelParam._m0[13u].z, fma(_494, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _490)) + cbModelParam._m0[13u].w;
        float _1300 = fma(_498, cbModelParam._m0[14u].z, fma(_494, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _490)) + cbModelParam._m0[14u].w;
        float _1304 = fma(_498, cbModelParam._m0[15u].z, fma(_494, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _490)) + cbModelParam._m0[15u].w;
        float _1307 = fma(_439, cbModelParam._m0[13u].z, fma(_438, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _437));
        float _1310 = fma(_439, cbModelParam._m0[14u].z, fma(_438, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _437));
        float _1313 = fma(_439, cbModelParam._m0[15u].z, fma(_438, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _437));
        float _1341;
        if (_1307 > 0.0)
        {
            _1341 = abs((1.0 - _1296) / _1307);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1307 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1296 + 1.0) / _1307);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1341 = frontier_phi_14_12_ladder;
        }
        float _1568;
        if (_1310 > 0.0)
        {
            _1568 = abs((1.0 - _1300) / _1310);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1310 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1300 + 1.0) / _1310);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1568 = frontier_phi_23_19_ladder;
        }
        float _1814;
        if (_1313 > 0.0)
        {
            _1814 = abs((1.0 - _1304) / _1313);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1313 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1304 + 1.0) / _1313);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1814 = frontier_phi_35_30_ladder;
        }
        float _1816 = isnan(_1568) ? _1341 : (isnan(_1341) ? _1568 : min(_1341, _1568));
        float _1817 = isnan(_1814) ? _1816 : (isnan(_1816) ? _1814 : min(_1816, _1814));
        float _1821 = (_1817 * _1307) + _1296;
        float _1822 = (_1817 * _1310) + _1300;
        float _1823 = (_1817 * _1313) + _1304;
        float _1824 = _1817 * 9.9999997473787516355514526367188e-05;
        float _1826 = (-1.0) - _1824;
        float _1828 = _1824 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1823 > _1828) || ((_1823 < _1826) || ((_1822 > _1828) || ((_1822 < _1826) || ((_1821 < _1826) || (_1821 > _1828))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1947 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1823, cbModelParam._m0[9u].z, fma(_1822, cbModelParam._m0[9u].y, _1821 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1823, cbModelParam._m0[10u].z, fma(_1822, cbModelParam._m0[10u].y, _1821 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1823, cbModelParam._m0[11u].z, fma(_1822, cbModelParam._m0[11u].y, _1821 * cbModelParam._m0[11u].x))), _1247);
            frontier_phi_13_35_ladder = _1947.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1947.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1947.x * cbModelParam._m0[1u].y;
        }
        _1329 = frontier_phi_13_35_ladder_2;
        _1331 = frontier_phi_13_35_ladder_1;
        _1333 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1317 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_437, _438, _439), _1247);
        _1329 = _1317.x * cbModelParam._m0[1u].y;
        _1331 = _1317.y * cbModelParam._m0[1u].y;
        _1333 = _1317.z * cbModelParam._m0[1u].y;
    }
    float _1337 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _275);
    float _1338 = isnan(_1337) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1337 : min(cbModelParam._m0[25u].w, _1337));
    float _1431;
    float _1433;
    float _1435;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1395 = fma(_498, cbModelParam._m0[21u].z, fma(_494, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _490)) + cbModelParam._m0[21u].w;
        float _1399 = fma(_498, cbModelParam._m0[22u].z, fma(_494, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _490)) + cbModelParam._m0[22u].w;
        float _1403 = fma(_498, cbModelParam._m0[23u].z, fma(_494, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _490)) + cbModelParam._m0[23u].w;
        float _1406 = fma(_439, cbModelParam._m0[21u].z, fma(_438, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _437));
        float _1409 = fma(_439, cbModelParam._m0[22u].z, fma(_438, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _437));
        float _1412 = fma(_439, cbModelParam._m0[23u].z, fma(_438, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _437));
        float _1573;
        if (_1406 > 0.0)
        {
            _1573 = abs((1.0 - _1395) / _1406);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1406 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1395 + 1.0) / _1406);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1573 = frontier_phi_25_21_ladder;
        }
        float _1841;
        if (_1409 > 0.0)
        {
            _1841 = abs((1.0 - _1399) / _1409);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1409 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1399 + 1.0) / _1409);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1841 = frontier_phi_37_32_ladder;
        }
        float _2046;
        if (_1412 > 0.0)
        {
            _2046 = abs((1.0 - _1403) / _1412);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1412 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1403 + 1.0) / _1412);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2046 = frontier_phi_46_43_ladder;
        }
        float _2048 = isnan(_1841) ? _1573 : (isnan(_1573) ? _1841 : min(_1573, _1841));
        float _2049 = isnan(_2046) ? _2048 : (isnan(_2048) ? _2046 : min(_2048, _2046));
        float _2053 = (_2049 * _1406) + _1395;
        float _2054 = (_2049 * _1409) + _1399;
        float _2055 = (_2049 * _1412) + _1403;
        float _2056 = _2049 * 9.9999997473787516355514526367188e-05;
        float _2057 = (-1.0) - _2056;
        float _2059 = _2056 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2055 > _2059) || ((_2055 < _2057) || ((_2054 > _2059) || ((_2054 < _2057) || ((_2053 < _2057) || (_2053 > _2059))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2257 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2055, cbModelParam._m0[17u].z, fma(_2054, cbModelParam._m0[17u].y, _2053 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2055, cbModelParam._m0[18u].z, fma(_2054, cbModelParam._m0[18u].y, _2053 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2055, cbModelParam._m0[19u].z, fma(_2054, cbModelParam._m0[19u].y, _2053 * cbModelParam._m0[19u].x))), _1338);
            frontier_phi_22_46_ladder = _2257.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2257.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2257.x * cbModelParam._m0[1u].z;
        }
        _1431 = frontier_phi_22_46_ladder_2;
        _1433 = frontier_phi_22_46_ladder_1;
        _1435 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1415 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_437, _438, _439), _1338);
        _1431 = _1415.x * cbModelParam._m0[1u].z;
        _1433 = _1415.y * cbModelParam._m0[1u].z;
        _1435 = _1415.z * cbModelParam._m0[1u].z;
    }
    float _1447 = ((((1.0 - _458) * ((_445 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_458 * _445)) * _429;
    float _1448 = _1447 * ((cbModelParam._m0[1u].w * (_1431 - _1329)) + _1329);
    float _1449 = _1447 * ((cbModelParam._m0[1u].w * (_1433 - _1331)) + _1331);
    float _1450 = _1447 * ((cbModelParam._m0[1u].w * (_1435 - _1333)) + _1333);
    float _1453 = fma(_1450, cbSceneParam._m0[89u].z, fma(_1449, cbSceneParam._m0[89u].y, _1448 * cbSceneParam._m0[89u].x));
    float _1456 = fma(_1450, cbSceneParam._m0[90u].z, fma(_1449, cbSceneParam._m0[90u].y, _1448 * cbSceneParam._m0[90u].x));
    float _1459 = fma(_1450, cbSceneParam._m0[91u].z, fma(_1449, cbSceneParam._m0[91u].y, _1448 * cbSceneParam._m0[91u].x));
    vec4 _1467 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_362, _363));
    float _1469 = _1467.w;
    float _1481 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1469);
    float _1482 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1469);
    float _1483 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1469);
    uvec4 _1487 = floatBitsToUint(cbInstanceData._m0[_403 + 5u]);
    uint _1489 = _1487.x * 14u;
    uint _1490 = _1489 + 13u;
    float _1497 = _429 + (-1.0);
    float _1502 = (cbLight._m0[_1490].x * _1497) + 1.0;
    float _1503 = (cbLight._m0[_1490].y * _1497) + 1.0;
    float _1504 = (cbLight._m0[_1490].z * _1497) + 1.0;
    float _1505 = (cbLight._m0[_1490].w * _1497) + 1.0;
    uint _1506 = _1489 + 5u;
    float _1512 = isnan(1.0) ? _1503 : (isnan(_1503) ? 1.0 : min(_1503, 1.0));
    uint _1516 = _1489 + 4u;
    float _1526 = isnan(1.0) ? _1502 : (isnan(_1502) ? 1.0 : min(_1502, 1.0));
    uint _1530 = _1489 | 1u;
    float _1541 = dot(vec3(cbLight._m0[_1489].xyz), vec3(_272, _273, _274));
    float _1544 = dot(vec3(cbLight._m0[_1530].xyz), vec3(_272, _273, _274));
    float _3610 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
    float _3621 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
    float _1549 = (isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0))) * 0.3183098733425140380859375;
    float _1551 = (isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0))) * 0.3183098733425140380859375;
    float _1558 = ((cbLight._m0[_1506].x * _1512) * _1551) + (((cbLight._m0[_1516].x * _1481) * _1526) * _1549);
    float _1559 = ((_1512 * cbLight._m0[_1506].y) * _1551) + (((cbLight._m0[_1516].y * _1482) * _1526) * _1549);
    float _1560 = ((_1512 * cbLight._m0[_1506].z) * _1551) + (((cbLight._m0[_1516].z * _1483) * _1526) * _1549);
    uvec4 _1565 = floatBitsToUint(cbLight._m0[_1489 + 12u]);
    bool _1567 = _1565.x == 0u;
    float _1578;
    float _1580;
    float _1582;
    if (_1567)
    {
        _1578 = _1558;
        _1580 = _1559;
        _1582 = _1560;
    }
    else
    {
        uint _1586 = _1489 + 6u;
        float _1602 = (dot(vec3(cbLight._m0[_1489 + 2u].xyz), vec3(_272, _273, _274)) * 0.5) + 0.5;
        float _1603 = _1602 * _1602;
        float _3632 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1604 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
        float _1605 = isnan(1.0) ? _1504 : (isnan(_1504) ? 1.0 : min(_1504, 1.0));
        _1578 = (((cbLight._m0[_1586].x * 0.3183098733425140380859375) * _1604) * _1605) + _1558;
        _1580 = (((cbLight._m0[_1586].y * 0.3183098733425140380859375) * _1604) * _1605) + _1559;
        _1582 = (((cbLight._m0[_1586].z * 0.3183098733425140380859375) * _1604) * _1605) + _1560;
    }
    bool _1585 = _1565.y == 0u;
    float _1623;
    float _1625;
    float _1627;
    if (_1585)
    {
        _1623 = _1578;
        _1625 = _1580;
        _1627 = _1582;
    }
    else
    {
        uint _1785 = _1489 + 7u;
        float _1801 = (dot(vec3(cbLight._m0[_1489 + 3u].xyz), vec3(_272, _273, _274)) * 0.5) + 0.5;
        float _1802 = _1801 * _1801;
        float _3648 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
        float _1803 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
        float _1804 = isnan(1.0) ? _1505 : (isnan(_1505) ? 1.0 : min(_1505, 1.0));
        _1623 = (((cbLight._m0[_1785].x * 0.3183098733425140380859375) * _1803) * _1804) + _1578;
        _1625 = (((cbLight._m0[_1785].y * 0.3183098733425140380859375) * _1803) * _1804) + _1580;
        _1627 = (((cbLight._m0[_1785].z * 0.3183098733425140380859375) * _1803) * _1804) + _1582;
    }
    uint _1630 = _1489 + 8u;
    float _1643 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1489].w)) * _275) * 0.949999988079071044921875);
    float _1644 = _1643 * _1643;
    float _1645 = cbLight._m0[_1489].x + _354;
    float _1646 = cbLight._m0[_1489].y + _355;
    float _1647 = cbLight._m0[_1489].z + _356;
    float _1651 = inversesqrt(dot(vec3(_1645, _1646, _1647), vec3(_1645, _1646, _1647)));
    float _1652 = _1651 * _1645;
    float _1653 = _1651 * _1646;
    float _1654 = _1651 * _1647;
    float _1655 = dot(vec3(_272, _273, _274), vec3(cbLight._m0[_1489].xyz));
    float _3664 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
    float _1658 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
    float _3675 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _1659 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
    float _1660 = dot(vec3(_272, _273, _274), vec3(_1652, _1653, _1654));
    float _3686 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
    float _1663 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
    float _1664 = dot(vec3(cbLight._m0[_1489].xyz), vec3(_1652, _1653, _1654));
    float _3697 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
    float _1668 = _1644 * _1644;
    float _1672 = ((_1663 * _1663) * (_1668 + (-1.0))) + 1.0;
    float _1683 = (exp2(log2(1.0 - (isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1684 = 1.0 - _1644;
    float _1695 = (0.5 / (((_1659 * ((_1658 * _1684) + _1644)) + 9.9999999392252902907785028219223e-09) + (((_1659 * _1684) + _1644) * _1658))) * _1658;
    float _3708 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
    float _1697 = (isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0))) * (_1668 / ((_1672 * _1672) * 3.141590118408203125));
    uint _1711 = _1489 + 9u;
    float _1722 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1530].w)) * _275) * 0.949999988079071044921875);
    float _1723 = _1722 * _1722;
    float _1724 = cbLight._m0[_1530].x + _354;
    float _1725 = cbLight._m0[_1530].y + _355;
    float _1726 = cbLight._m0[_1530].z + _356;
    float _1730 = inversesqrt(dot(vec3(_1724, _1725, _1726), vec3(_1724, _1725, _1726)));
    float _1731 = _1730 * _1724;
    float _1732 = _1730 * _1725;
    float _1733 = _1730 * _1726;
    float _1734 = dot(vec3(_272, _273, _274), vec3(cbLight._m0[_1530].xyz));
    float _3719 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
    float _1737 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
    float _1738 = dot(vec3(_272, _273, _274), vec3(_1731, _1732, _1733));
    float _3730 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
    float _1741 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
    float _1742 = dot(vec3(cbLight._m0[_1530].xyz), vec3(_1731, _1732, _1733));
    float _3741 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
    float _1746 = _1723 * _1723;
    float _1750 = ((_1741 * _1741) * (_1746 + (-1.0))) + 1.0;
    float _1759 = (exp2(log2(1.0 - (isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1760 = 1.0 - _1723;
    float _1770 = (0.5 / (((_1659 * ((_1737 * _1760) + _1723)) + 9.9999999392252902907785028219223e-09) + (((_1659 * _1760) + _1723) * _1737))) * _1737;
    float _3752 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
    float _1772 = (isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0))) * (_1746 / ((_1750 * _1750) * 3.141590118408203125));
    float _1782 = (((_1759 * cbLight._m0[_1711].x) * _1772) * _1512) + ((((cbLight._m0[_1630].x * _1481) * _1683) * _1697) * _1526);
    float _1783 = (((_1759 * cbLight._m0[_1711].y) * _1772) * _1512) + ((((cbLight._m0[_1630].y * _1482) * _1683) * _1697) * _1526);
    float _1784 = (((_1759 * cbLight._m0[_1711].z) * _1772) * _1512) + ((((cbLight._m0[_1630].z * _1483) * _1683) * _1697) * _1526);
    float _1846;
    float _1848;
    float _1850;
    if (_1567)
    {
        _1846 = _1782;
        _1848 = _1783;
        _1850 = _1784;
    }
    else
    {
        uint _1852 = _1489 + 2u;
        uint _1856 = _1489 + 10u;
        float _1870 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1852].w)) * _275) * 0.949999988079071044921875);
        float _1871 = _1870 * _1870;
        float _1872 = cbLight._m0[_1852].x + _354;
        float _1873 = cbLight._m0[_1852].y + _355;
        float _1874 = cbLight._m0[_1852].z + _356;
        float _1878 = inversesqrt(dot(vec3(_1872, _1873, _1874), vec3(_1872, _1873, _1874)));
        float _1879 = _1878 * _1872;
        float _1880 = _1878 * _1873;
        float _1881 = _1878 * _1874;
        float _1882 = dot(vec3(_272, _273, _274), vec3(cbLight._m0[_1852].xyz));
        float _3763 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
        float _1885 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
        float _1886 = dot(vec3(_272, _273, _274), vec3(_1879, _1880, _1881));
        float _3774 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
        float _1889 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
        float _1890 = dot(vec3(cbLight._m0[_1852].xyz), vec3(_1879, _1880, _1881));
        float _3785 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
        float _1894 = _1871 * _1871;
        float _1898 = ((_1889 * _1889) * (_1894 + (-1.0))) + 1.0;
        float _1907 = (exp2(log2(1.0 - (isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1908 = 1.0 - _1871;
        float _1918 = (0.5 / (((_1659 * ((_1885 * _1908) + _1871)) + 9.9999999392252902907785028219223e-09) + (((_1659 * _1908) + _1871) * _1885))) * _1885;
        float _3796 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
        float _1920 = (isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0))) * (_1894 / ((_1898 * _1898) * 3.141590118408203125));
        float _1921 = isnan(1.0) ? _1504 : (isnan(_1504) ? 1.0 : min(_1504, 1.0));
        _1846 = (((_1907 * cbLight._m0[_1856].x) * _1920) * _1921) + _1782;
        _1848 = (((_1907 * cbLight._m0[_1856].y) * _1920) * _1921) + _1783;
        _1850 = (((_1907 * cbLight._m0[_1856].z) * _1920) * _1921) + _1784;
    }
    float _1956;
    float _1958;
    float _1960;
    if (_1585)
    {
        _1956 = _1846;
        _1958 = _1848;
        _1960 = _1850;
    }
    else
    {
        uint _1967 = _1489 + 3u;
        uint _1971 = _1489 + 11u;
        float _1985 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1967].w)) * _275) * 0.949999988079071044921875);
        float _1986 = _1985 * _1985;
        float _1987 = cbLight._m0[_1967].x + _354;
        float _1988 = cbLight._m0[_1967].y + _355;
        float _1989 = cbLight._m0[_1967].z + _356;
        float _1993 = inversesqrt(dot(vec3(_1987, _1988, _1989), vec3(_1987, _1988, _1989)));
        float _1994 = _1993 * _1987;
        float _1995 = _1993 * _1988;
        float _1996 = _1993 * _1989;
        float _1997 = dot(vec3(_272, _273, _274), vec3(cbLight._m0[_1967].xyz));
        float _3812 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
        float _2000 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
        float _2001 = dot(vec3(_272, _273, _274), vec3(_1994, _1995, _1996));
        float _3823 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
        float _2004 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
        float _2005 = dot(vec3(cbLight._m0[_1967].xyz), vec3(_1994, _1995, _1996));
        float _3834 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
        float _2009 = _1986 * _1986;
        float _2013 = ((_2004 * _2004) * (_2009 + (-1.0))) + 1.0;
        float _2022 = (exp2(log2(1.0 - (isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2023 = 1.0 - _1986;
        float _2033 = (0.5 / (((_1659 * ((_2000 * _2023) + _1986)) + 9.9999999392252902907785028219223e-09) + (((_1659 * _2023) + _1986) * _2000))) * _2000;
        float _3845 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
        float _2035 = (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))) * (_2009 / ((_2013 * _2013) * 3.141590118408203125));
        float _2036 = isnan(1.0) ? _1505 : (isnan(_1505) ? 1.0 : min(_1505, 1.0));
        _1956 = (((_2022 * cbLight._m0[_1971].x) * _2035) * _2036) + _1846;
        _1958 = (((_2022 * cbLight._m0[_1971].y) * _2035) * _2036) + _1848;
        _1960 = (((_2022 * cbLight._m0[_1971].z) * _2035) * _2036) + _1850;
    }
    float _2171;
    float _2173;
    float _2175;
    float _2177;
    float _2179;
    float _2181;
    if (_1487.y == 0u)
    {
        float _2111 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2112 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2111;
        float _2113 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2111;
        float _2114 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2111;
        uvec4 _2126 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2127 = _2126.x;
        uint _2138 = uint((float(_2126.y) * floor(float(uint(cbSceneParam._m0[85u].y * _363) / _2127))) + floor(float(uint(cbSceneParam._m0[85u].x * _362) / _2127)));
        float _2148 = (log2(_2114 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2149 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
        uint _2152 = uint(isnan(14.0) ? _2149 : (isnan(_2149) ? 14.0 : min(_2149, 14.0)));
        uvec4 _2157 = texelFetch(g_lightClusterGridBuffer, int(((_2152 << 2u) + (_2138 << 6u)) >> 2u));
        uint _2158 = _2157.x;
        uint _2159 = _2126.z;
        float _2262;
        float _2264;
        float _2266;
        float _2268;
        float _2270;
        float _2272;
        if (((((1u << ((_2159 >> 4u) & 15u)) + 4294967295u) & _2158) == 0u) || ((_2159 & 240u) == 0u))
        {
            _2262 = 0.0;
            _2264 = 0.0;
            _2266 = 0.0;
            _2268 = 0.0;
            _2270 = 0.0;
            _2272 = 0.0;
        }
        else
        {
            float _2263;
            float _2265;
            float _2267;
            float _2269;
            float _2271;
            float _2273;
            float _2407 = 0.0;
            float _2408 = 0.0;
            float _2409 = 0.0;
            float _2410 = 0.0;
            float _2411 = 0.0;
            float _2412 = 0.0;
            uint _2413 = 0u;
            uint _2422;
            bool _2423;
            for (;;)
            {
                _2422 = texelFetch(g_lightClassification, int((((_2152 << 5u) + (_2138 << 9u)) + (_2413 << 2u)) >> 2u)).x;
                _2423 = _2422 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2423)
                {
                    frontier_phi_61_pred = _2407;
                    frontier_phi_61_pred_1 = _2412;
                    frontier_phi_61_pred_2 = _2411;
                    frontier_phi_61_pred_3 = _2410;
                    frontier_phi_61_pred_4 = _2409;
                    frontier_phi_61_pred_5 = _2408;
                }
                else
                {
                    float _2531;
                    float _2532;
                    float _2533;
                    float _2534;
                    float _2535;
                    float _2536;
                    uint _2537;
                    _2531 = _2407;
                    _2532 = _2408;
                    _2533 = _2409;
                    _2534 = _2410;
                    _2535 = _2411;
                    _2536 = _2412;
                    _2537 = _2422;
                    float _2463;
                    float _2464;
                    float _2465;
                    float _2466;
                    float _2467;
                    float _2468;
                    for (;;)
                    {
                        uint _2541 = uint(findLSB(_2537)) + (_2413 << 5u);
                        uint _2538 = (_2537 + 4294967295u) & _2537;
                        uint _2543 = _2541 * 48u;
                        vec4 _2557 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2543)).x, texelFetch(g_PointLightRenderingBuffer, int(_2543 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2543 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2543 + 3u)).x));
                        uint _2563 = (_2541 * 48u) + 4u;
                        vec4 _2576 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2563)).x, texelFetch(g_PointLightRenderingBuffer, int(_2563 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2563 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2563 + 3u)).x));
                        uint _2582 = (_2541 * 48u) + 8u;
                        vec3 _2593 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2582)).x, texelFetch(g_PointLightRenderingBuffer, int(_2582 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2582 + 2u)).x));
                        float _2597 = _2557.x - _2112;
                        float _2598 = _2557.y - _2113;
                        float _2599 = _2557.z - _2114;
                        float _2600 = dot(vec3(_2597, _2598, _2599), vec3(_2597, _2598, _2599));
                        float _2603 = inversesqrt(_2600);
                        float _2604 = _2603 * _2597;
                        float _2605 = _2603 * _2598;
                        float _2606 = _2603 * _2599;
                        float _2607 = dot(vec3(_384, _387, _390), vec3(_2604, _2605, _2606));
                        float _2612 = 1.0 - (_2600 * _2557.w);
                        float _3871 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
                        float _2613 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
                        float _2614 = sqrt(_2600) * _2576.w;
                        float _2617 = 1.39999997615814208984375 / (_2614 + 1.39999997615814208984375);
                        float _2618 = _2617 * _2617;
                        float _2621 = ((1.0 - _2618) * _2607) + _2618;
                        float _2624 = _2614 * _2614;
                        float _2628 = ((isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0))) * _2613) / ((_2624 * 0.699999988079071044921875) + 1.0);
                        float _2632 = (-0.0) - _2112;
                        float _2633 = (-0.0) - _2113;
                        float _2634 = (-0.0) - _2114;
                        float _2638 = inversesqrt(dot(vec3(_2632, _2633, _2634), vec3(_2632, _2633, _2634)));
                        float _2639 = _2638 * _2632;
                        float _2640 = _2638 * _2633;
                        float _2641 = _2638 * _2634;
                        float _2649 = exp2(log2(1.0 / ((_2624 * 3.5) + 5.0)) * 0.25);
                        float _2650 = 1.0 - _445;
                        float _2657 = sqrt(1.0 - ((1.0 - (_2650 * _2650)) * (1.0 - (_2649 * _2649))));
                        float _2658 = _2657 * _2657;
                        float _2659 = _2658 * _2658;
                        float _2660 = _2639 + _2604;
                        float _2661 = _2640 + _2605;
                        float _2662 = _2641 + _2606;
                        float _2666 = inversesqrt(dot(vec3(_2660, _2661, _2662), vec3(_2660, _2661, _2662)));
                        float _2670 = dot(vec3(_384, _387, _390), vec3(_2639, _2640, _2641));
                        float _3887 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
                        float _2673 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
                        float _2674 = dot(vec3(_384, _387, _390), vec3(_2666 * _2660, _2666 * _2661, _2666 * _2662));
                        float _3898 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
                        float _2677 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
                        float _2681 = ((_2677 * _2677) * (_2659 + (-1.0))) + 1.0;
                        float _2682 = _2617 * _2658;
                        float _2683 = _2682 * _2682;
                        float _2686 = ((1.0 - _2683) * _2607) + _2683;
                        float _3909 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
                        float _2687 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
                        float _2688 = 1.0 - _2658;
                        float _2698 = (0.5 / (((_2687 * ((_2673 * _2688) + _2658)) + 9.9999999392252902907785028219223e-09) + (((_2687 * _2688) + _2658) * _2673))) * _2687;
                        float _3920 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
                        float _2709 = (((_2659 * 3.1415927410125732421875) * (isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0)))) / ((_2681 * _2681) * ((_2624 * 2.1991131305694580078125) + 3.141590118408203125))) * _2613;
                        _2466 = (_2628 * _2576.x) + _2534;
                        _2467 = (_2628 * _2576.y) + _2535;
                        _2468 = (_2628 * _2576.z) + _2536;
                        _2463 = (_2709 * _2593.x) + _2531;
                        _2464 = (_2709 * _2593.y) + _2532;
                        _2465 = (_2709 * _2593.z) + _2533;
                        if (_2538 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2531 = _2463;
                            _2532 = _2464;
                            _2533 = _2465;
                            _2534 = _2466;
                            _2535 = _2467;
                            _2536 = _2468;
                            _2537 = _2538;
                        }
                    }
                    frontier_phi_61_pred = _2463;
                    frontier_phi_61_pred_1 = _2468;
                    frontier_phi_61_pred_2 = _2467;
                    frontier_phi_61_pred_3 = _2466;
                    frontier_phi_61_pred_4 = _2465;
                    frontier_phi_61_pred_5 = _2464;
                }
                _2263 = frontier_phi_61_pred;
                _2273 = frontier_phi_61_pred_1;
                _2271 = frontier_phi_61_pred_2;
                _2269 = frontier_phi_61_pred_3;
                _2267 = frontier_phi_61_pred_4;
                _2265 = frontier_phi_61_pred_5;
                uint _2414 = _2413 + 1u;
                if (_2414 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2407 = _2263;
                    _2408 = _2265;
                    _2409 = _2267;
                    _2410 = _2269;
                    _2411 = _2271;
                    _2412 = _2273;
                    _2413 = _2414;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2262 = _2263;
            _2264 = _2265;
            _2266 = _2267;
            _2268 = _2269;
            _2270 = _2271;
            _2272 = _2273;
        }
        uvec4 _2276 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2277 = _2276.z;
        uint _2279 = (_2277 >> 8u) & 15u;
        float _2375;
        float _2377;
        float _2379;
        float _2381;
        float _2383;
        float _2385;
        if (((4294967295u << _2279) & _2158) == 0u)
        {
            _2375 = _2262;
            _2377 = _2264;
            _2379 = _2266;
            _2381 = _2268;
            _2383 = _2270;
            _2385 = _2272;
        }
        else
        {
            float _2400 = inversesqrt(dot(vec3(_2112, _2113, _2114), vec3(_2112, _2113, _2114)));
            float _2401 = _2400 * _2112;
            float _2402 = _2400 * _2113;
            float _2403 = _2400 * _2114;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2279 < ((_2277 >> 12u) & 15u))
            {
                float _2376;
                float _2378;
                float _2380;
                float _2382;
                float _2384;
                float _2386;
                float _2514 = _2262;
                float _2515 = _2264;
                float _2516 = _2266;
                float _2517 = _2268;
                float _2518 = _2270;
                float _2519 = _2272;
                uint _2520 = _2279;
                uint _2529;
                bool _2530;
                for (;;)
                {
                    _2529 = texelFetch(g_lightClassification, int((((_2152 << 5u) + (_2138 << 9u)) + (_2520 << 2u)) >> 2u)).x;
                    _2530 = _2529 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2530)
                    {
                        frontier_phi_67_pred = _2517;
                        frontier_phi_67_pred_1 = _2518;
                        frontier_phi_67_pred_2 = _2519;
                        frontier_phi_67_pred_3 = _2516;
                        frontier_phi_67_pred_4 = _2515;
                        frontier_phi_67_pred_5 = _2514;
                    }
                    else
                    {
                        float _2714;
                        float _2715;
                        float _2716;
                        float _2717;
                        float _2718;
                        float _2719;
                        float _3009;
                        float _3010;
                        float _3011;
                        float _3012;
                        float _3013;
                        float _3014;
                        float _2727 = _2514;
                        float _2728 = _2515;
                        float _2729 = _2516;
                        float _2730 = _2517;
                        float _2731 = _2518;
                        float _2732 = _2519;
                        uint _2733 = _2529;
                        uint _2734;
                        vec4 _2759;
                        float _2760;
                        vec4 _2775;
                        vec3 _2787;
                        vec4 _2803;
                        vec4 _2818;
                        float _2865;
                        bool _2866;
                        for (;;)
                        {
                            uint _2744 = ((_2520 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2733));
                            _2734 = (_2733 + 4294967295u) & _2733;
                            uint _2746 = _2744 * 40u;
                            _2759 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2746)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2746 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2746 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2746 + 3u)).x));
                            _2760 = _2759.w;
                            uint _2762 = (_2744 * 40u) + 4u;
                            _2775 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2762)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2762 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2762 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2762 + 3u)).x));
                            uint _2777 = (_2744 * 40u) + 8u;
                            _2787 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2777)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2777 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2777 + 2u)).x));
                            uint _2790 = (_2744 * 40u) + 16u;
                            _2803 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2790)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2790 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2790 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2790 + 3u)).x));
                            uint _2805 = (_2744 * 40u) + 20u;
                            _2818 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2805)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2805 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2805 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2805 + 3u)).x));
                            uint _2821 = (_2744 * 40u) + 24u;
                            vec4 _2834 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2821)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2821 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2821 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2821 + 3u)).x));
                            uint _2840 = (_2744 * 40u) + 28u;
                            vec4 _2853 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2840)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2840 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2840 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2840 + 3u)).x));
                            _2865 = fma(_2114, _2853.z, fma(_2113, _2853.y, _2853.x * _2112)) + _2853.w;
                            _2866 = !((fma(_2114, _2834.z, fma(_2113, _2834.y, _2834.x * _2112)) + _2834.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2866)
                            {
                                float _2893 = _2759.x - _2112;
                                float _2894 = _2759.y - _2113;
                                float _2895 = _2759.z - _2114;
                                float _2896 = dot(vec3(_2893, _2894, _2895), vec3(_2893, _2894, _2895));
                                float _2899 = inversesqrt(_2896);
                                float _2900 = _2899 * _2893;
                                float _2901 = _2899 * _2894;
                                float _2902 = _2899 * _2895;
                                float _2906 = 1.0 - (_2896 / (_2760 * _2760));
                                float _3931 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0));
                                float _2907 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
                                float _2911 = sqrt(_2896) * _2775.w;
                                float _2913 = 1.39999997615814208984375 / (_2911 + 1.39999997615814208984375);
                                float _2914 = _2913 * _2913;
                                float _2917 = ((1.0 - _2914) * dot(vec3(_2900, _2901, _2902), vec3(_384, _387, _390))) + _2914;
                                float _2920 = _2911 * _2911;
                                float _2924 = (fma(_2114, _2803.z, fma(_2113, _2803.y, _2803.x * _2112)) + _2803.w) / _2865;
                                float _2925 = (fma(_2114, _2818.z, fma(_2113, _2818.y, _2818.x * _2112)) + _2818.w) / _2865;
                                float _2929 = 1.0 - dot(vec2(_2924, _2925), vec2(_2924, _2925));
                                float _3947 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0));
                                float _2930 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
                                float _2931 = _2930 * (((isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0))) * _2907) / ((_2920 * 0.699999988079071044921875) + 1.0));
                                float _2943 = exp2(log2(1.0 / ((_2920 * 3.5) + 5.0)) * 0.25);
                                float _2944 = 1.0 - _445;
                                float _2951 = sqrt(1.0 - ((1.0 - (_2944 * _2944)) * (1.0 - (_2943 * _2943))));
                                float _2952 = _2951 * _2951;
                                float _2953 = _2952 * _2952;
                                float _2954 = _2900 - _2401;
                                float _2955 = _2901 - _2402;
                                float _2956 = _2902 - _2403;
                                float _2960 = inversesqrt(dot(vec3(_2954, _2955, _2956), vec3(_2954, _2955, _2956)));
                                float _2964 = dot(vec3(_384, _387, _390), vec3((-0.0) - _2401, (-0.0) - _2402, (-0.0) - _2403));
                                float _3958 = isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0));
                                float _2967 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
                                float _2968 = dot(vec3(_384, _387, _390), vec3(_2960 * _2954, _2960 * _2955, _2960 * _2956));
                                float _3969 = isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0));
                                float _2971 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
                                float _2975 = ((_2971 * _2971) * (_2953 + (-1.0))) + 1.0;
                                float _2976 = _2913 * _2952;
                                float _2977 = _2976 * _2976;
                                float _2983 = ((1.0 - _2977) * dot(vec3(_384, _387, _390), vec3(_2900, _2901, _2902))) + _2977;
                                float _3980 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0));
                                float _2984 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
                                float _2985 = 1.0 - _2952;
                                float _2995 = (0.5 / (((_2984 * ((_2967 * _2985) + _2952)) + 9.9999999392252902907785028219223e-09) + (((_2984 * _2985) + _2952) * _2967))) * _2984;
                                float _3991 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
                                float _3005 = (_2930 * _2907) * (((_2953 * 3.1415927410125732421875) * (isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0)))) / ((_2975 * _2975) * ((_2920 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3005 * _2787.x;
                                frontier_phi_73_pred_1 = _3005 * _2787.y;
                                frontier_phi_73_pred_2 = _2931 * _2775.z;
                                frontier_phi_73_pred_3 = _2931 * _2775.y;
                                frontier_phi_73_pred_4 = _2931 * _2775.x;
                                frontier_phi_73_pred_5 = _3005 * _2787.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3009 = frontier_phi_73_pred;
                            _3010 = frontier_phi_73_pred_1;
                            _3014 = frontier_phi_73_pred_2;
                            _3013 = frontier_phi_73_pred_3;
                            _3012 = frontier_phi_73_pred_4;
                            _3011 = frontier_phi_73_pred_5;
                            _2717 = _3012 + _2730;
                            _2718 = _3013 + _2731;
                            _2719 = _3014 + _2732;
                            _2714 = _3009 + _2727;
                            _2715 = _3010 + _2728;
                            _2716 = _3011 + _2729;
                            if (_2734 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2727 = _2714;
                                _2728 = _2715;
                                _2729 = _2716;
                                _2730 = _2717;
                                _2731 = _2718;
                                _2732 = _2719;
                                _2733 = _2734;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2717;
                        frontier_phi_67_pred_1 = _2718;
                        frontier_phi_67_pred_2 = _2719;
                        frontier_phi_67_pred_3 = _2716;
                        frontier_phi_67_pred_4 = _2715;
                        frontier_phi_67_pred_5 = _2714;
                    }
                    _2382 = frontier_phi_67_pred;
                    _2384 = frontier_phi_67_pred_1;
                    _2386 = frontier_phi_67_pred_2;
                    _2380 = frontier_phi_67_pred_3;
                    _2378 = frontier_phi_67_pred_4;
                    _2376 = frontier_phi_67_pred_5;
                    uint _2521 = _2520 + 1u;
                    if (_2521 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2514 = _2376;
                        _2515 = _2378;
                        _2516 = _2380;
                        _2517 = _2382;
                        _2518 = _2384;
                        _2519 = _2386;
                        _2520 = _2521;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2384;
                frontier_phi_55_56_ladder_1 = _2386;
                frontier_phi_55_56_ladder_2 = _2382;
                frontier_phi_55_56_ladder_3 = _2380;
                frontier_phi_55_56_ladder_4 = _2378;
                frontier_phi_55_56_ladder_5 = _2376;
            }
            else
            {
                frontier_phi_55_56_ladder = _2270;
                frontier_phi_55_56_ladder_1 = _2272;
                frontier_phi_55_56_ladder_2 = _2268;
                frontier_phi_55_56_ladder_3 = _2266;
                frontier_phi_55_56_ladder_4 = _2264;
                frontier_phi_55_56_ladder_5 = _2262;
            }
            _2375 = frontier_phi_55_56_ladder_5;
            _2377 = frontier_phi_55_56_ladder_4;
            _2379 = frontier_phi_55_56_ladder_3;
            _2381 = frontier_phi_55_56_ladder_2;
            _2383 = frontier_phi_55_56_ladder;
            _2385 = frontier_phi_55_56_ladder_1;
        }
        float _2390 = isnan(1.0) ? _429 : (isnan(_429) ? 1.0 : min(_429, 1.0));
        _2171 = (_2390 * _2381) + _1623;
        _2173 = (_2390 * _2383) + _1625;
        _2175 = (_2390 * _2385) + _1627;
        _2177 = ((_2375 * 0.039999999105930328369140625) * _2390) + _1956;
        _2179 = ((_2377 * 0.039999999105930328369140625) * _2390) + _1958;
        _2181 = ((_2379 * 0.039999999105930328369140625) * _2390) + _1960;
    }
    else
    {
        _2171 = _1623;
        _2173 = _1625;
        _2175 = _1627;
        _2177 = _1956;
        _2179 = _1958;
        _2181 = _1960;
    }
    float _4007 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _4018 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _4029 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _2198 = ((isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))) * (_2171 + ((isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0))) * _429))) + ((_2177 + ((isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0))) * _1236)) * cbPerFrame._m0[3u].x);
    float _2199 = ((isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * (_2173 + ((isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0))) * _429))) + ((_2179 + ((isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0))) * _1236)) * cbPerFrame._m0[3u].x);
    float _2200 = ((isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) * (_2175 + ((isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0))) * _429))) + ((_2181 + ((isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0))) * _1236)) * cbPerFrame._m0[3u].x);
    uint _2204 = _403 + 6u;
    float _2212 = _362 / cbSceneParam._m0[86u].x;
    float _2213 = _363 / cbSceneParam._m0[86u].y;
    vec4 _2227 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2212, _2213, (log2((isnan(cbSceneParam._m0[77u].w) ? _294 : (isnan(_294) ? cbSceneParam._m0[77u].w : min(_294, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2229 = _2227.x;
    float _2230 = _2227.y;
    float _2231 = _2227.z;
    float _2232 = _2227.w;
    float _2325;
    float _2327;
    float _2329;
    float _2331;
    if (_294 > cbSceneParam._m0[78u].w)
    {
        float _2287 = isnan(_294) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _294 : min(cbSceneParam._m0[80u].w, _294));
        float _2288 = _2287 / _294;
        float _2299 = _2288 * _347;
        float _2300 = _348 * _2288;
        float _2301 = (-0.0) - _2300;
        float _2303 = _2288 * _349;
        float _2305 = (cbSceneParam._m0[77u].w * _2301) / _2287;
        float _2306 = _2305 + cbSceneParam._m0[79u].w;
        float _2307 = cbSceneParam._m0[79u].w - _2300;
        float _2313 = sqrt(((_2299 * _2299) + (_2300 * _2300)) + (_2303 * _2303));
        float _2316 = (1.0 - (cbSceneParam._m0[77u].w / _2287)) * _2313;
        float _2321 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2323 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2476;
        if (abs((_2301 - _2305) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2476 = ((((_2306 > 0.0) ? exp2(_2321 * _2306) : (2.0 - exp2(_2323 * _2306))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2316;
        }
        else
        {
            float _2436 = 1.0 / cbSceneParam._m0[80u].x;
            float _2437 = isnan(_2307) ? _2306 : (isnan(_2306) ? _2307 : max(_2306, _2307));
            float _2438 = isnan(_2307) ? _2306 : (isnan(_2306) ? _2307 : min(_2306, _2307));
            float _2447 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : min(_2437, 0.0));
            float _2448 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : min(_2438, 0.0));
            _2476 = ((abs(_2313 / _2301) * cbSceneParam._m0[80u].y) * ((((_2447 - _2448) * 2.0) - ((exp2(_2321 * (isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0)))) - exp2(_2321 * (isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0))))) * _2436)) - ((exp2(_2323 * _2447) - exp2(_2323 * _2448)) * _2436))) + (_2316 * cbSceneParam._m0[80u].z);
        }
        vec4 _2478 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2212, _2213, 1.0), 0.0);
        float _2487 = exp2((_2476 * (-1.44269502162933349609375)) * (1.0 - _2478.w));
        float _2488 = log2(_2487);
        float _2504 = log2(_2232);
        _2325 = (exp2(_2504 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2488 * cbSceneParam._m0[78u].x)) * _2478.x) / cbSceneParam._m0[78u].x)) + _2229;
        _2327 = (exp2(_2504 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2488 * cbSceneParam._m0[78u].y)) * _2478.y) / cbSceneParam._m0[78u].y)) + _2230;
        _2329 = (exp2(_2504 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2488 * cbSceneParam._m0[78u].z)) * _2478.z) / cbSceneParam._m0[78u].z)) + _2231;
        _2331 = _2487 * _2232;
    }
    else
    {
        _2325 = _2229;
        _2327 = _2230;
        _2329 = _2231;
        _2331 = _2232;
    }
    float _2343 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2344 = _2343 == 3.0;
    float _2345 = log2(_2331);
    float _2352 = exp2(_2345 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0)));
    float _2353 = exp2(_2345 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0)));
    float _2354 = exp2(_2345 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0)));
    float _2363 = (_2343 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2363 * (_2344 ? _2352 : (_2352 + (cbSceneParam._m0[72u].w * _2325)));
    SV_Target.y = _2363 * (_2344 ? _2353 : (_2353 + (cbSceneParam._m0[72u].w * _2327)));
    SV_Target.z = _2363 * (_2344 ? _2354 : (_2354 + (cbSceneParam._m0[72u].w * _2329)));
    SV_Target.w = cbInstanceData._m0[_2204].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2204].w;
}


