#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1138;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _201 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _202 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _203 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _209 = inversesqrt(dot(vec3(_201, _202, _203), vec3(_201, _202, _203)));
    float _216 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _245 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _251 = _245.x * cbMtdParam._m0[9u].x;
    float _252 = _245.y * cbMtdParam._m0[9u].y;
    float _253 = _245.z * cbMtdParam._m0[9u].z;
    float _291 = TEXCOORD_9.x - ((cbMtdParam._m0[16u].y * (1.0 - TEXCOORD_9.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w)).x + 0.00999999977648258209228515625));
    float _293 = _291 * (cbMtdParam._m0[16u].z + 1.0);
    float _3507 = isnan(0.0) ? _293 : (isnan(_293) ? 0.0 : max(_293, 0.0));
    float _294 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
    float _302 = ((((cbMtdParam._m0[12u].x - _251) * TEXCOORD_9.x) * cbMtdParam._m0[16u].x) * _294) + _251;
    float _303 = ((((cbMtdParam._m0[12u].y - _252) * TEXCOORD_9.y) * cbMtdParam._m0[16u].x) * _294) + _252;
    float _304 = (((cbMtdParam._m0[16u].x * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _253)) * _294) + _253;
    vec4 _316 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _320 = _316.z;
    float _324 = (_316.x * 2.0) + (-1.0);
    float _326 = (_316.y * 2.0) + (-1.0);
    float _327 = dot(vec2(_324, _326), vec2(_324, _326));
    float _3518 = isnan(0.0) ? _327 : (isnan(_327) ? 0.0 : max(_327, 0.0));
    float _332 = sqrt(1.0 - (isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0))));
    float _338 = _291 * (cbMtdParam._m0[16u].y + 1.0);
    float _3529 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _342 = ((cbMtdParam._m0[15u].y - _320) * (isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0)))) + _320;
    float _355 = (cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _356 = (cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _383 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * ((cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * ((cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[10u].w));
    float _388 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[15u].w;
    float _395 = ((_383.y * 0.5) + (-0.25)) * cbMtdParam._m0[15u].z;
    float _397 = (-0.0) - (cbMtdParam._m0[15u].z * ((_383.x * 0.5) + (-0.25)));
    float _399 = fract(_388);
    float _401 = fract(_388 + 0.5);
    float _402 = _399 * _397;
    float _403 = _395 * _399;
    float _406 = _401 * _397;
    float _407 = _395 * _401;
    float _412 = abs((_399 * 2.0) + (-1.0));
    vec4 _428 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_402 + _355) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_403 + _356) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _430 = _428.x;
    float _431 = _428.y;
    float _432 = _428.z;
    vec4 _433 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_406 + _355) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_407 + _356) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _460 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _461 = (cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _474 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_402 + _460) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_403 + _461) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _476 = _474.x;
    float _477 = _474.y;
    float _478 = _474.z;
    vec4 _479 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_406 + _460) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_407 + _461) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _531 = (TEXCOORD_6.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_6.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_5, SS_WrapLinear), vec2((((cbMtdParam._m0[18u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((cbMtdParam._m0[18u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].x + 1.0);
    float _3540 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _532 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
    float _533 = _532 * (((((_479.x - _476) * _412) + _476) * cbMtdParam._m0[13u].x) + ((((_433.x - _430) * _412) + _430) * cbMtdParam._m0[11u].x));
    float _534 = _532 * (((((_479.y - _477) * _412) + _477) * cbMtdParam._m0[13u].y) + ((((_433.y - _431) * _412) + _431) * cbMtdParam._m0[11u].y));
    float _535 = _532 * (((((_479.z - _478) * _412) + _478) * cbMtdParam._m0[13u].z) + ((((_433.z - _432) * _412) + _432) * cbMtdParam._m0[11u].z));
    vec4 _547 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[9u].w));
    float _549 = _547.x;
    vec4 _574 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[16u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, (((cbMtdParam._m0[17u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w));
    float _580 = (_574.x * 2.0) + (-1.0);
    float _581 = (_574.y * 2.0) + (-1.0);
    float _582 = dot(vec2(_580, _581), vec2(_580, _581));
    float _3551 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _598 = (_294 * (((cbMtdParam._m0[14u].z * _324) - _324) + _580)) + _324;
    float _599 = (_294 * (((cbMtdParam._m0[14u].z * _326) - _326) + _581)) + _326;
    float _600 = (_294 * (sqrt(1.0 - (isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0)))) - _332)) + _332;
    float _603 = fma(_600, _216 * NORMAL.x, fma(_599, _223 * TANGENT.x, (_209 * _201) * _598));
    float _606 = fma(_600, _216 * NORMAL.y, fma(_599, _223 * TANGENT.y, (_209 * _202) * _598));
    float _609 = fma(_600, _216 * NORMAL.z, fma(_599, _223 * TANGENT.z, (_209 * _203) * _598));
    float _613 = inversesqrt(dot(vec3(_603, _606, _609), vec3(_603, _606, _609)));
    float _614 = _613 * _603;
    float _615 = _613 * _606;
    float _616 = _613 * _609;
    float _3562 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _617 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
    float _3573 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _3584 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _3595 = isnan(0.0) ? _304 : (isnan(_304) ? 0.0 : max(_304, 0.0));
    float _636 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _676 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _686 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _676);
    float _687 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _676);
    float _688 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _676);
    float _692 = inversesqrt(dot(vec3(_686, _687, _688), vec3(_686, _687, _688)));
    float _693 = _686 * _692;
    float _694 = _687 * _692;
    float _695 = _688 * _692;
    float _701 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _702 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _723 = fma(_616, cbSceneParam._m0[5u].z, fma(_615, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _614));
    float _726 = fma(_616, cbSceneParam._m0[6u].z, fma(_615, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _614));
    float _729 = fma(_616, cbSceneParam._m0[7u].z, fma(_615, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _614));
    uint _742 = uint(roundEven(NORMAL.w)) * 13u;
    uint _743 = _742 + 9u;
    uint _744 = _743 + uint(cbMatDynParam._m0[0u].w);
    float _750 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0)))) * cbInstanceData._m0[_744].x;
    float _751 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0)))) * cbInstanceData._m0[_744].y;
    float _752 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0)))) * cbInstanceData._m0[_744].z;
    float _3606 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _753 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
    float _3617 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _754 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
    float _3628 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _755 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
    vec4 _764 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _701, cbSceneParam._m0[86u].y * _702));
    float _767 = _764.x * TEXCOORD_3.w;
    float _768 = dot(vec3(_614, _615, _616), vec3(_693, _694, _695));
    float _771 = _768 * 2.0;
    float _775 = (_771 * _614) - _693;
    float _776 = (_771 * _615) - _694;
    float _777 = (_771 * _616) - _695;
    float _781 = abs(dot(vec3(_693, _694, _695), vec3(_614, _615, _616)));
    float _3639 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _783 = sqrt(_617);
    float _796 = exp2((_783 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_783 * 3.0));
    float _828 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _832 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _836 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1137;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _863 = fma(_836, cbModelParam._m0[26u].z, fma(_832, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _828));
        float _867 = fma(_836, cbModelParam._m0[27u].z, fma(_832, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _828));
        float _871 = fma(_836, cbModelParam._m0[28u].z, fma(_832, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _828));
        float _895 = _828 + _614;
        float _896 = _832 + _615;
        float _897 = _836 + _616;
        float _907 = fma(_897, cbModelParam._m0[26u].z, fma(_896, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _895)) - _863;
        float _908 = fma(_897, cbModelParam._m0[27u].z, fma(_896, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _895)) - _867;
        float _909 = fma(_897, cbModelParam._m0[28u].z, fma(_896, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _895)) - _871;
        float _913 = inversesqrt(dot(vec3(_907, _908, _909), vec3(_907, _908, _909)));
        float _926 = ((_913 * _907) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_863 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _927 = ((_913 * _908) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_867 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _928 = ((_913 * _909) / cbModelParam._m0[34u].z) + ((((((_871 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _931 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_926, _927, _928), 0.0);
        vec4 _938 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_926, _927, _928), 0.0);
        vec4 _945 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_926, _927, _928), 0.0);
        vec4 _952 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_926, _927, _928), 0.0);
        float _965 = exp2((_931.w + (-0.5)) * 20.0) * 2.0;
        float _966 = _965 * (_931.x + (-0.5));
        float _967 = _965 * (_931.y + (-0.5));
        float _968 = _965 * (_931.z + (-0.5));
        float _975 = exp2((_938.w + (-0.5)) * 20.0) * 2.0;
        float _976 = _975 * (_938.x + (-0.5));
        float _977 = _975 * (_938.y + (-0.5));
        float _978 = _975 * (_938.z + (-0.5));
        float _985 = exp2((_945.w + (-0.5)) * 20.0) * 2.0;
        float _986 = _985 * (_945.x + (-0.5));
        float _987 = _985 * (_945.y + (-0.5));
        float _988 = _985 * (_945.z + (-0.5));
        float _995 = exp2((_952.w + (-0.5)) * 20.0) * 2.0;
        float _996 = _995 * (_952.x + (-0.5));
        float _997 = _995 * (_952.y + (-0.5));
        float _998 = _995 * (_952.z + (-0.5));
        float _999 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _1000 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _1001 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _1002 = _966 * 0.5;
        float _1003 = _976 * 0.5;
        float _1004 = _986 * 0.5;
        float _1005 = dot(vec3(_1002, _1003, _1004), vec3(_1002, _1003, _1004));
        float _1010 = (_1005 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1005);
        float _1019 = (dot(vec3(_614, _615, _616), vec3(_1010 * _1002, _1010 * _1003, _1010 * _1004)) + 1.0) * 0.5;
        float _3665 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1029 = sqrt(((_1003 * _1003) + (_1002 * _1002)) + (_1004 * _1004)) / (_999 + 9.9999997473787516355514526367188e-06);
        float _3676 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1030 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
        float _1031 = _1030 * 2.0;
        float _1035 = (1.0 - _1030) / (_1030 + 1.0);
        float _3687 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1036 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
        float _1045 = ((((1.0 - _1036) * (_1031 + 2.0)) * exp2(log2(isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0))) * (_1031 + 1.0))) + _1036) * _999;
        float _1046 = _967 * 0.5;
        float _1047 = _977 * 0.5;
        float _1048 = _987 * 0.5;
        float _1049 = dot(vec3(_1046, _1047, _1048), vec3(_1046, _1047, _1048));
        float _1054 = (_1049 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1049);
        float _1062 = (dot(vec3(_614, _615, _616), vec3(_1054 * _1046, _1054 * _1047, _1054 * _1048)) + 1.0) * 0.5;
        float _3698 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1071 = sqrt(((_1047 * _1047) + (_1046 * _1046)) + (_1048 * _1048)) / (_1000 + 9.9999997473787516355514526367188e-06);
        float _3709 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1072 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _1073 = _1072 * 2.0;
        float _1077 = (1.0 - _1072) / (_1072 + 1.0);
        float _3720 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1078 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
        float _1087 = ((((1.0 - _1078) * (_1073 + 2.0)) * exp2(log2(isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0))) * (_1073 + 1.0))) + _1078) * _1000;
        float _1088 = _968 * 0.5;
        float _1089 = _978 * 0.5;
        float _1090 = _988 * 0.5;
        float _1091 = dot(vec3(_1088, _1089, _1090), vec3(_1088, _1089, _1090));
        float _1096 = (_1091 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1091);
        float _1104 = (dot(vec3(_614, _615, _616), vec3(_1096 * _1088, _1096 * _1089, _1096 * _1090)) + 1.0) * 0.5;
        float _3731 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1113 = sqrt(((_1089 * _1089) + (_1088 * _1088)) + (_1090 * _1090)) / (_1001 + 9.9999997473787516355514526367188e-06);
        float _3742 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1114 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _1115 = _1114 * 2.0;
        float _1119 = (1.0 - _1114) / (_1114 + 1.0);
        float _3753 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1120 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
        float _1129 = ((((1.0 - _1120) * (_1115 + 2.0)) * exp2(log2(isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0))) * (_1115 + 1.0))) + _1120) * _1001;
        _1137 = _968;
        _1139 = _967;
        _1140 = _966;
        _1141 = _978;
        _1142 = _977;
        _1143 = _976;
        _1144 = _988;
        _1145 = _987;
        _1146 = _986;
        _1147 = _1001;
        _1148 = _1000;
        _1149 = _999;
        _1150 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0)));
        _1151 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0)));
        _1152 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0)));
    }
    else
    {
        _1137 = _1138;
        _1139 = _1138;
        _1140 = _1138;
        _1141 = _1138;
        _1142 = _1138;
        _1143 = _1138;
        _1144 = _1138;
        _1145 = _1138;
        _1146 = _1138;
        _1147 = _1138;
        _1148 = _1138;
        _1149 = _1138;
        _1150 = 0.0;
        _1151 = 0.0;
        _1152 = 0.0;
    }
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1178 = fma(_836, cbModelParam._m0[30u].z, fma(_832, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _828));
        float _1182 = fma(_836, cbModelParam._m0[31u].z, fma(_832, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _828));
        float _1186 = fma(_836, cbModelParam._m0[32u].z, fma(_832, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _828));
        float _1209 = _828 + _614;
        float _1210 = _832 + _615;
        float _1211 = _836 + _616;
        float _1221 = fma(_1211, cbModelParam._m0[30u].z, fma(_1210, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1209)) - _1178;
        float _1222 = fma(_1211, cbModelParam._m0[31u].z, fma(_1210, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1209)) - _1182;
        float _1223 = fma(_1211, cbModelParam._m0[32u].z, fma(_1210, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1209)) - _1186;
        float _1227 = inversesqrt(dot(vec3(_1221, _1222, _1223), vec3(_1221, _1222, _1223)));
        float _1240 = ((_1227 * _1221) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1178 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1241 = ((_1227 * _1222) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1182 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1242 = ((_1227 * _1223) / cbModelParam._m0[35u].z) + ((((((_1186 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1244 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1240, _1241, _1242), 0.0);
        vec4 _1251 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1240, _1241, _1242), 0.0);
        vec4 _1258 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1240, _1241, _1242), 0.0);
        vec4 _1265 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1240, _1241, _1242), 0.0);
        float _1277 = exp2((_1244.w + (-0.5)) * 20.0) * 2.0;
        float _1278 = _1277 * (_1244.x + (-0.5));
        float _1279 = _1277 * (_1244.y + (-0.5));
        float _1280 = _1277 * (_1244.z + (-0.5));
        float _1287 = exp2((_1251.w + (-0.5)) * 20.0) * 2.0;
        float _1288 = _1287 * (_1251.x + (-0.5));
        float _1289 = _1287 * (_1251.y + (-0.5));
        float _1290 = _1287 * (_1251.z + (-0.5));
        float _1297 = exp2((_1258.w + (-0.5)) * 20.0) * 2.0;
        float _1298 = _1297 * (_1258.x + (-0.5));
        float _1299 = _1297 * (_1258.y + (-0.5));
        float _1300 = _1297 * (_1258.z + (-0.5));
        float _1307 = exp2((_1265.w + (-0.5)) * 20.0) * 2.0;
        float _1308 = _1307 * (_1265.x + (-0.5));
        float _1309 = _1307 * (_1265.y + (-0.5));
        float _1310 = _1307 * (_1265.z + (-0.5));
        float _1311 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1312 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1313 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1314 = _1278 * 0.5;
        float _1315 = _1288 * 0.5;
        float _1316 = _1298 * 0.5;
        float _1317 = dot(vec3(_1314, _1315, _1316), vec3(_1314, _1315, _1316));
        float _1322 = (_1317 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1317);
        float _1330 = (dot(vec3(_614, _615, _616), vec3(_1322 * _1314, _1322 * _1315, _1322 * _1316)) + 1.0) * 0.5;
        float _3794 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1339 = sqrt(((_1315 * _1315) + (_1314 * _1314)) + (_1316 * _1316)) / (_1311 + 9.9999997473787516355514526367188e-06);
        float _3805 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
        float _1341 = _1340 * 2.0;
        float _1345 = (1.0 - _1340) / (_1340 + 1.0);
        float _3816 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _1355 = ((((1.0 - _1346) * (_1341 + 2.0)) * exp2(log2(isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) * (_1341 + 1.0))) + _1346) * _1311;
        float _1356 = _1279 * 0.5;
        float _1357 = _1289 * 0.5;
        float _1358 = _1299 * 0.5;
        float _1359 = dot(vec3(_1356, _1357, _1358), vec3(_1356, _1357, _1358));
        float _1364 = (_1359 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1359);
        float _1372 = (dot(vec3(_614, _615, _616), vec3(_1364 * _1356, _1364 * _1357, _1364 * _1358)) + 1.0) * 0.5;
        float _3827 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1381 = sqrt(((_1357 * _1357) + (_1356 * _1356)) + (_1358 * _1358)) / (_1312 + 9.9999997473787516355514526367188e-06);
        float _3838 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
        float _1383 = _1382 * 2.0;
        float _1387 = (1.0 - _1382) / (_1382 + 1.0);
        float _3849 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1388 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _1397 = ((((1.0 - _1388) * (_1383 + 2.0)) * exp2(log2(isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0))) * (_1383 + 1.0))) + _1388) * _1312;
        float _1398 = _1280 * 0.5;
        float _1399 = _1290 * 0.5;
        float _1400 = _1300 * 0.5;
        float _1401 = dot(vec3(_1398, _1399, _1400), vec3(_1398, _1399, _1400));
        float _1406 = (_1401 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1401);
        float _1414 = (dot(vec3(_614, _615, _616), vec3(_1406 * _1398, _1406 * _1399, _1406 * _1400)) + 1.0) * 0.5;
        float _3860 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1423 = sqrt(((_1399 * _1399) + (_1398 * _1398)) + (_1400 * _1400)) / (_1313 + 9.9999997473787516355514526367188e-06);
        float _3871 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _1425 = _1424 * 2.0;
        float _1429 = (1.0 - _1424) / (_1424 + 1.0);
        float _3882 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1430 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _1439 = ((((1.0 - _1430) * (_1425 + 2.0)) * exp2(log2(isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0))) * (_1425 + 1.0))) + _1430) * _1313;
        _1447 = _1280;
        _1448 = _1279;
        _1449 = _1278;
        _1450 = _1290;
        _1451 = _1289;
        _1452 = _1288;
        _1453 = _1300;
        _1454 = _1299;
        _1455 = _1298;
        _1456 = _1313;
        _1457 = _1312;
        _1458 = _1311;
        _1459 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0)));
        _1460 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0)));
        _1461 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0)));
    }
    else
    {
        _1447 = _1138;
        _1448 = _1138;
        _1449 = _1138;
        _1450 = _1138;
        _1451 = _1138;
        _1452 = _1138;
        _1453 = _1138;
        _1454 = _1138;
        _1455 = _1138;
        _1456 = _1138;
        _1457 = _1138;
        _1458 = _1138;
        _1459 = 0.0;
        _1460 = 0.0;
        _1461 = 0.0;
    }
    float _1471 = (cbModelParam._m0[1u].x * (_1459 - _1150)) + _1150;
    float _1472 = (cbModelParam._m0[1u].x * (_1460 - _1151)) + _1151;
    float _1473 = (cbModelParam._m0[1u].x * (_1461 - _1152)) + _1152;
    float _1494 = fma(_1473, cbSceneParam._m0[89u].z, fma(_1472, cbSceneParam._m0[89u].y, _1471 * cbSceneParam._m0[89u].x));
    float _1497 = fma(_1473, cbSceneParam._m0[90u].z, fma(_1472, cbSceneParam._m0[90u].y, _1471 * cbSceneParam._m0[90u].x));
    float _1500 = fma(_1473, cbSceneParam._m0[91u].z, fma(_1472, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1471));
    float _1515 = _775 * 0.5;
    float _1516 = _776 * 0.5;
    float _1517 = _777 * 0.5;
    float _1518 = dot(vec4(_1515, _1516, _1517, 1.0), vec4(_1449, _1452, _1455, _1458));
    float _1521 = dot(vec4(_1515, _1516, _1517, 1.0), vec4(_1448, _1451, _1454, _1457));
    float _1524 = dot(vec4(_1515, _1516, _1517, 1.0), vec4(_1447, _1450, _1453, _1456));
    float _1558;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1531 = dot(vec4(_1515, _1516, _1517, 1.0), vec4(_1137, _1141, _1144, _1147));
        float _1535 = dot(vec4(_1515, _1516, _1517, 1.0), vec4(_1139, _1142, _1145, _1148));
        float _1539 = dot(vec4(_1515, _1516, _1517, 1.0), vec4(_1140, _1143, _1146, _1149));
        float _1546 = dot(vec4(cbModelParam._m0[39u]), vec4(_1515, _1516, _1517, 1.0));
        _1558 = dot(vec3(isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0)), isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0)), isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1546) ? 0.0 : (isnan(0.0) ? _1546 : max(0.0, _1546))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1558 = 1.0;
    }
    float _1569;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1560 = dot(vec4(cbModelParam._m0[40u]), vec4(_1515, _1516, _1517, 1.0));
        _1569 = dot(vec3(isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0)), isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0)), isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1560) ? 0.0 : (isnan(0.0) ? _1560 : max(0.0, _1560))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1569 = 1.0;
    }
    float _1573 = (_1569 * cbModelParam._m0[1u].x) + (_1558 * (1.0 - cbModelParam._m0[1u].x));
    float _1583 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _617);
    float _1584 = isnan(_1583) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1583 : min(cbModelParam._m0[25u].z, _1583));
    float _1664;
    float _1666;
    float _1668;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1631 = fma(_836, cbModelParam._m0[13u].z, fma(_832, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _828)) + cbModelParam._m0[13u].w;
        float _1635 = fma(_836, cbModelParam._m0[14u].z, fma(_832, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _828)) + cbModelParam._m0[14u].w;
        float _1639 = fma(_836, cbModelParam._m0[15u].z, fma(_832, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _828)) + cbModelParam._m0[15u].w;
        float _1642 = fma(_777, cbModelParam._m0[13u].z, fma(_776, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _775));
        float _1645 = fma(_777, cbModelParam._m0[14u].z, fma(_776, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _775));
        float _1648 = fma(_777, cbModelParam._m0[15u].z, fma(_776, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _775));
        float _1676;
        if (_1642 > 0.0)
        {
            _1676 = abs((1.0 - _1631) / _1642);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1642 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1631 + 1.0) / _1642);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1676 = frontier_phi_14_12_ladder;
        }
        float _1899;
        if (_1645 > 0.0)
        {
            _1899 = abs((1.0 - _1635) / _1645);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1645 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1635 + 1.0) / _1645);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1899 = frontier_phi_23_19_ladder;
        }
        float _2145;
        if (_1648 > 0.0)
        {
            _2145 = abs((1.0 - _1639) / _1648);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1648 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1639 + 1.0) / _1648);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2145 = frontier_phi_35_30_ladder;
        }
        float _2147 = isnan(_1899) ? _1676 : (isnan(_1676) ? _1899 : min(_1676, _1899));
        float _2148 = isnan(_2145) ? _2147 : (isnan(_2147) ? _2145 : min(_2147, _2145));
        float _2152 = (_2148 * _1642) + _1631;
        float _2153 = (_2148 * _1645) + _1635;
        float _2154 = (_2148 * _1648) + _1639;
        float _2155 = _2148 * 9.9999997473787516355514526367188e-05;
        float _2157 = (-1.0) - _2155;
        float _2159 = _2155 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2154 > _2159) || ((_2154 < _2157) || ((_2153 > _2159) || ((_2153 < _2157) || ((_2152 < _2157) || (_2152 > _2159))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2278 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2154, cbModelParam._m0[9u].z, fma(_2153, cbModelParam._m0[9u].y, _2152 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2154, cbModelParam._m0[10u].z, fma(_2153, cbModelParam._m0[10u].y, _2152 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2154, cbModelParam._m0[11u].z, fma(_2153, cbModelParam._m0[11u].y, _2152 * cbModelParam._m0[11u].x))), _1584);
            frontier_phi_13_35_ladder = _2278.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2278.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2278.x * cbModelParam._m0[1u].y;
        }
        _1664 = frontier_phi_13_35_ladder_2;
        _1666 = frontier_phi_13_35_ladder_1;
        _1668 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1652 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_775, _776, _777), _1584);
        _1664 = _1652.x * cbModelParam._m0[1u].y;
        _1666 = _1652.y * cbModelParam._m0[1u].y;
        _1668 = _1652.z * cbModelParam._m0[1u].y;
    }
    float _1672 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _617);
    float _1673 = isnan(_1672) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1672 : min(cbModelParam._m0[25u].w, _1672));
    float _1763;
    float _1765;
    float _1767;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1727 = fma(_836, cbModelParam._m0[21u].z, fma(_832, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _828)) + cbModelParam._m0[21u].w;
        float _1731 = fma(_836, cbModelParam._m0[22u].z, fma(_832, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _828)) + cbModelParam._m0[22u].w;
        float _1735 = fma(_836, cbModelParam._m0[23u].z, fma(_832, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _828)) + cbModelParam._m0[23u].w;
        float _1738 = fma(_777, cbModelParam._m0[21u].z, fma(_776, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _775));
        float _1741 = fma(_777, cbModelParam._m0[22u].z, fma(_776, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _775));
        float _1744 = fma(_777, cbModelParam._m0[23u].z, fma(_776, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _775));
        float _1904;
        if (_1738 > 0.0)
        {
            _1904 = abs((1.0 - _1727) / _1738);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1738 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1727 + 1.0) / _1738);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1904 = frontier_phi_25_21_ladder;
        }
        float _2172;
        if (_1741 > 0.0)
        {
            _2172 = abs((1.0 - _1731) / _1741);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1741 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1731 + 1.0) / _1741);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2172 = frontier_phi_37_32_ladder;
        }
        float _2377;
        if (_1744 > 0.0)
        {
            _2377 = abs((1.0 - _1735) / _1744);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1744 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1735 + 1.0) / _1744);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2377 = frontier_phi_46_43_ladder;
        }
        float _2379 = isnan(_2172) ? _1904 : (isnan(_1904) ? _2172 : min(_1904, _2172));
        float _2380 = isnan(_2377) ? _2379 : (isnan(_2379) ? _2377 : min(_2379, _2377));
        float _2384 = (_2380 * _1738) + _1727;
        float _2385 = (_2380 * _1741) + _1731;
        float _2386 = (_2380 * _1744) + _1735;
        float _2387 = _2380 * 9.9999997473787516355514526367188e-05;
        float _2388 = (-1.0) - _2387;
        float _2390 = _2387 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2386 > _2390) || ((_2386 < _2388) || ((_2385 > _2390) || ((_2385 < _2388) || ((_2384 < _2388) || (_2384 > _2390))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2614 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2386, cbModelParam._m0[17u].z, fma(_2385, cbModelParam._m0[17u].y, _2384 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2386, cbModelParam._m0[18u].z, fma(_2385, cbModelParam._m0[18u].y, _2384 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2386, cbModelParam._m0[19u].z, fma(_2385, cbModelParam._m0[19u].y, _2384 * cbModelParam._m0[19u].x))), _1673);
            frontier_phi_22_46_ladder = _2614.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2614.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2614.x * cbModelParam._m0[1u].z;
        }
        _1763 = frontier_phi_22_46_ladder_2;
        _1765 = frontier_phi_22_46_ladder_1;
        _1767 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1747 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_775, _776, _777), _1673);
        _1763 = _1747.x * cbModelParam._m0[1u].z;
        _1765 = _1747.y * cbModelParam._m0[1u].z;
        _1767 = _1747.z * cbModelParam._m0[1u].z;
    }
    float _1779 = ((((1.0 - _796) * ((_783 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_796 * _783)) * _767;
    float _1780 = _1779 * ((cbModelParam._m0[1u].w * (_1763 - _1664)) + _1664);
    float _1781 = _1779 * ((cbModelParam._m0[1u].w * (_1765 - _1666)) + _1666);
    float _1782 = _1779 * ((cbModelParam._m0[1u].w * (_1767 - _1668)) + _1668);
    float _1785 = fma(_1782, cbSceneParam._m0[89u].z, fma(_1781, cbSceneParam._m0[89u].y, _1780 * cbSceneParam._m0[89u].x));
    float _1788 = fma(_1782, cbSceneParam._m0[90u].z, fma(_1781, cbSceneParam._m0[90u].y, _1780 * cbSceneParam._m0[90u].x));
    float _1791 = fma(_1782, cbSceneParam._m0[91u].z, fma(_1781, cbSceneParam._m0[91u].y, _1780 * cbSceneParam._m0[91u].x));
    vec4 _1799 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_701, _702));
    float _1801 = _1799.w;
    float _1813 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1801);
    float _1814 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1801);
    float _1815 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1801);
    uvec4 _1819 = floatBitsToUint(cbInstanceData._m0[_742 + 5u]);
    uint _1821 = _1819.x * 14u;
    uint _1822 = _1821 + 13u;
    float _1829 = _767 + (-1.0);
    float _1834 = (cbLight._m0[_1822].x * _1829) + 1.0;
    float _1835 = (cbLight._m0[_1822].y * _1829) + 1.0;
    float _1836 = (cbLight._m0[_1822].z * _1829) + 1.0;
    float _1837 = (cbLight._m0[_1822].w * _1829) + 1.0;
    uint _1838 = _1821 + 5u;
    float _1844 = isnan(1.0) ? _1835 : (isnan(_1835) ? 1.0 : min(_1835, 1.0));
    uint _1848 = _1821 + 4u;
    float _1858 = isnan(1.0) ? _1834 : (isnan(_1834) ? 1.0 : min(_1834, 1.0));
    uint _1862 = _1821 | 1u;
    float _1873 = dot(vec3(cbLight._m0[_1821].xyz), vec3(_614, _615, _616));
    float _1876 = dot(vec3(cbLight._m0[_1862].xyz), vec3(_614, _615, _616));
    float _4018 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
    float _4029 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
    float _1881 = (isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * 0.3183098733425140380859375;
    float _1883 = (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) * 0.3183098733425140380859375;
    float _1890 = ((cbLight._m0[_1838].x * _1844) * _1883) + (((cbLight._m0[_1848].x * _1813) * _1858) * _1881);
    float _1891 = ((_1844 * cbLight._m0[_1838].y) * _1883) + (((cbLight._m0[_1848].y * _1814) * _1858) * _1881);
    float _1892 = ((_1844 * cbLight._m0[_1838].z) * _1883) + (((cbLight._m0[_1848].z * _1815) * _1858) * _1881);
    uvec4 _1896 = floatBitsToUint(cbLight._m0[_1821 + 12u]);
    bool _1898 = _1896.x == 0u;
    float _1909;
    float _1911;
    float _1913;
    if (_1898)
    {
        _1909 = _1890;
        _1911 = _1891;
        _1913 = _1892;
    }
    else
    {
        uint _1917 = _1821 + 6u;
        float _1933 = (dot(vec3(cbLight._m0[_1821 + 2u].xyz), vec3(_614, _615, _616)) * 0.5) + 0.5;
        float _1934 = _1933 * _1933;
        float _4040 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
        float _1935 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1936 = isnan(1.0) ? _1836 : (isnan(_1836) ? 1.0 : min(_1836, 1.0));
        _1909 = (((cbLight._m0[_1917].x * 0.3183098733425140380859375) * _1935) * _1936) + _1890;
        _1911 = (((cbLight._m0[_1917].y * 0.3183098733425140380859375) * _1935) * _1936) + _1891;
        _1913 = (((cbLight._m0[_1917].z * 0.3183098733425140380859375) * _1935) * _1936) + _1892;
    }
    bool _1916 = _1896.y == 0u;
    float _1954;
    float _1956;
    float _1958;
    if (_1916)
    {
        _1954 = _1909;
        _1956 = _1911;
        _1958 = _1913;
    }
    else
    {
        uint _2116 = _1821 + 7u;
        float _2132 = (dot(vec3(cbLight._m0[_1821 + 3u].xyz), vec3(_614, _615, _616)) * 0.5) + 0.5;
        float _2133 = _2132 * _2132;
        float _4056 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
        float _2134 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _2135 = isnan(1.0) ? _1837 : (isnan(_1837) ? 1.0 : min(_1837, 1.0));
        _1954 = (((cbLight._m0[_2116].x * 0.3183098733425140380859375) * _2134) * _2135) + _1909;
        _1956 = (((cbLight._m0[_2116].y * 0.3183098733425140380859375) * _2134) * _2135) + _1911;
        _1958 = (((cbLight._m0[_2116].z * 0.3183098733425140380859375) * _2134) * _2135) + _1913;
    }
    uint _1961 = _1821 + 8u;
    float _1974 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1821].w)) * _617) * 0.949999988079071044921875);
    float _1975 = _1974 * _1974;
    float _1976 = cbLight._m0[_1821].x + _693;
    float _1977 = cbLight._m0[_1821].y + _694;
    float _1978 = cbLight._m0[_1821].z + _695;
    float _1982 = inversesqrt(dot(vec3(_1976, _1977, _1978), vec3(_1976, _1977, _1978)));
    float _1983 = _1982 * _1976;
    float _1984 = _1982 * _1977;
    float _1985 = _1982 * _1978;
    float _1986 = dot(vec3(_614, _615, _616), vec3(cbLight._m0[_1821].xyz));
    float _4072 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
    float _1989 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
    float _4083 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _1990 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
    float _1991 = dot(vec3(_614, _615, _616), vec3(_1983, _1984, _1985));
    float _4094 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
    float _1994 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
    float _1995 = dot(vec3(cbLight._m0[_1821].xyz), vec3(_1983, _1984, _1985));
    float _4105 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
    float _1999 = _1975 * _1975;
    float _2003 = ((_1994 * _1994) * (_1999 + (-1.0))) + 1.0;
    float _2014 = (exp2(log2(1.0 - (isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2015 = 1.0 - _1975;
    float _2026 = (0.5 / (((_1990 * ((_1989 * _2015) + _1975)) + 9.9999999392252902907785028219223e-09) + (((_1990 * _2015) + _1975) * _1989))) * _1989;
    float _4116 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
    float _2028 = (isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))) * (_1999 / ((_2003 * _2003) * 3.141590118408203125));
    uint _2042 = _1821 + 9u;
    float _2053 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1862].w)) * _617) * 0.949999988079071044921875);
    float _2054 = _2053 * _2053;
    float _2055 = cbLight._m0[_1862].x + _693;
    float _2056 = cbLight._m0[_1862].y + _694;
    float _2057 = cbLight._m0[_1862].z + _695;
    float _2061 = inversesqrt(dot(vec3(_2055, _2056, _2057), vec3(_2055, _2056, _2057)));
    float _2062 = _2061 * _2055;
    float _2063 = _2061 * _2056;
    float _2064 = _2061 * _2057;
    float _2065 = dot(vec3(_614, _615, _616), vec3(cbLight._m0[_1862].xyz));
    float _4127 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
    float _2068 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
    float _2069 = dot(vec3(_614, _615, _616), vec3(_2062, _2063, _2064));
    float _4138 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
    float _2072 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
    float _2073 = dot(vec3(cbLight._m0[_1862].xyz), vec3(_2062, _2063, _2064));
    float _4149 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
    float _2077 = _2054 * _2054;
    float _2081 = ((_2072 * _2072) * (_2077 + (-1.0))) + 1.0;
    float _2090 = (exp2(log2(1.0 - (isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2091 = 1.0 - _2054;
    float _2101 = (0.5 / (((_1990 * ((_2068 * _2091) + _2054)) + 9.9999999392252902907785028219223e-09) + (((_1990 * _2091) + _2054) * _2068))) * _2068;
    float _4160 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
    float _2103 = (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0))) * (_2077 / ((_2081 * _2081) * 3.141590118408203125));
    float _2113 = (((_2090 * cbLight._m0[_2042].x) * _2103) * _1844) + ((((cbLight._m0[_1961].x * _1813) * _2014) * _2028) * _1858);
    float _2114 = (((_2090 * cbLight._m0[_2042].y) * _2103) * _1844) + ((((cbLight._m0[_1961].y * _1814) * _2014) * _2028) * _1858);
    float _2115 = (((_2090 * cbLight._m0[_2042].z) * _2103) * _1844) + ((((cbLight._m0[_1961].z * _1815) * _2014) * _2028) * _1858);
    float _2177;
    float _2179;
    float _2181;
    if (_1898)
    {
        _2177 = _2113;
        _2179 = _2114;
        _2181 = _2115;
    }
    else
    {
        uint _2183 = _1821 + 2u;
        uint _2187 = _1821 + 10u;
        float _2201 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2183].w)) * _617) * 0.949999988079071044921875);
        float _2202 = _2201 * _2201;
        float _2203 = cbLight._m0[_2183].x + _693;
        float _2204 = cbLight._m0[_2183].y + _694;
        float _2205 = cbLight._m0[_2183].z + _695;
        float _2209 = inversesqrt(dot(vec3(_2203, _2204, _2205), vec3(_2203, _2204, _2205)));
        float _2210 = _2209 * _2203;
        float _2211 = _2209 * _2204;
        float _2212 = _2209 * _2205;
        float _2213 = dot(vec3(_614, _615, _616), vec3(cbLight._m0[_2183].xyz));
        float _4171 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
        float _2216 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _2217 = dot(vec3(_614, _615, _616), vec3(_2210, _2211, _2212));
        float _4182 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
        float _2220 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _2221 = dot(vec3(cbLight._m0[_2183].xyz), vec3(_2210, _2211, _2212));
        float _4193 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
        float _2225 = _2202 * _2202;
        float _2229 = ((_2220 * _2220) * (_2225 + (-1.0))) + 1.0;
        float _2238 = (exp2(log2(1.0 - (isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2239 = 1.0 - _2202;
        float _2249 = (0.5 / (((_1990 * ((_2216 * _2239) + _2202)) + 9.9999999392252902907785028219223e-09) + (((_1990 * _2239) + _2202) * _2216))) * _2216;
        float _4204 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
        float _2251 = (isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0))) * (_2225 / ((_2229 * _2229) * 3.141590118408203125));
        float _2252 = isnan(1.0) ? _1836 : (isnan(_1836) ? 1.0 : min(_1836, 1.0));
        _2177 = (((_2238 * cbLight._m0[_2187].x) * _2251) * _2252) + _2113;
        _2179 = (((_2238 * cbLight._m0[_2187].y) * _2251) * _2252) + _2114;
        _2181 = (((_2238 * cbLight._m0[_2187].z) * _2251) * _2252) + _2115;
    }
    float _2287;
    float _2289;
    float _2291;
    if (_1916)
    {
        _2287 = _2177;
        _2289 = _2179;
        _2291 = _2181;
    }
    else
    {
        uint _2298 = _1821 + 3u;
        uint _2302 = _1821 + 11u;
        float _2316 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2298].w)) * _617) * 0.949999988079071044921875);
        float _2317 = _2316 * _2316;
        float _2318 = cbLight._m0[_2298].x + _693;
        float _2319 = cbLight._m0[_2298].y + _694;
        float _2320 = cbLight._m0[_2298].z + _695;
        float _2324 = inversesqrt(dot(vec3(_2318, _2319, _2320), vec3(_2318, _2319, _2320)));
        float _2325 = _2324 * _2318;
        float _2326 = _2324 * _2319;
        float _2327 = _2324 * _2320;
        float _2328 = dot(vec3(_614, _615, _616), vec3(cbLight._m0[_2298].xyz));
        float _4220 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
        float _2331 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _2332 = dot(vec3(_614, _615, _616), vec3(_2325, _2326, _2327));
        float _4231 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
        float _2335 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _2336 = dot(vec3(cbLight._m0[_2298].xyz), vec3(_2325, _2326, _2327));
        float _4242 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
        float _2340 = _2317 * _2317;
        float _2344 = ((_2335 * _2335) * (_2340 + (-1.0))) + 1.0;
        float _2353 = (exp2(log2(1.0 - (isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2354 = 1.0 - _2317;
        float _2364 = (0.5 / (((_1990 * ((_2331 * _2354) + _2317)) + 9.9999999392252902907785028219223e-09) + (((_1990 * _2354) + _2317) * _2331))) * _2331;
        float _4253 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
        float _2366 = (isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * (_2340 / ((_2344 * _2344) * 3.141590118408203125));
        float _2367 = isnan(1.0) ? _1837 : (isnan(_1837) ? 1.0 : min(_1837, 1.0));
        _2287 = (((_2353 * cbLight._m0[_2302].x) * _2366) * _2367) + _2177;
        _2289 = (((_2353 * cbLight._m0[_2302].y) * _2366) * _2367) + _2179;
        _2291 = (((_2353 * cbLight._m0[_2302].z) * _2366) * _2367) + _2181;
    }
    float _2502;
    float _2504;
    float _2506;
    float _2508;
    float _2510;
    float _2512;
    if (_1819.y == 0u)
    {
        float _2442 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2443 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2442;
        float _2444 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2442;
        float _2445 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2442;
        uvec4 _2457 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2458 = _2457.x;
        uint _2469 = uint((float(_2457.y) * floor(float(uint(cbSceneParam._m0[85u].y * _702) / _2458))) + floor(float(uint(cbSceneParam._m0[85u].x * _701) / _2458)));
        float _2479 = (log2(_2445 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2480 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
        uint _2483 = uint(isnan(14.0) ? _2480 : (isnan(_2480) ? 14.0 : min(_2480, 14.0)));
        uvec4 _2488 = texelFetch(g_lightClusterGridBuffer, int(((_2483 << 2u) + (_2469 << 6u)) >> 2u));
        uint _2489 = _2488.x;
        uint _2490 = _2457.z;
        float _2619;
        float _2621;
        float _2623;
        float _2625;
        float _2627;
        float _2629;
        if (((((1u << ((_2490 >> 4u) & 15u)) + 4294967295u) & _2489) == 0u) || ((_2490 & 240u) == 0u))
        {
            _2619 = 0.0;
            _2621 = 0.0;
            _2623 = 0.0;
            _2625 = 0.0;
            _2627 = 0.0;
            _2629 = 0.0;
        }
        else
        {
            float _2620;
            float _2622;
            float _2624;
            float _2626;
            float _2628;
            float _2630;
            float _2772 = 0.0;
            float _2773 = 0.0;
            float _2774 = 0.0;
            float _2775 = 0.0;
            float _2776 = 0.0;
            float _2777 = 0.0;
            uint _2778 = 0u;
            uint _2787;
            bool _2788;
            for (;;)
            {
                _2787 = texelFetch(g_lightClassification, int((((_2483 << 5u) + (_2469 << 9u)) + (_2778 << 2u)) >> 2u)).x;
                _2788 = _2787 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2788)
                {
                    frontier_phi_61_pred = _2772;
                    frontier_phi_61_pred_1 = _2777;
                    frontier_phi_61_pred_2 = _2776;
                    frontier_phi_61_pred_3 = _2775;
                    frontier_phi_61_pred_4 = _2774;
                    frontier_phi_61_pred_5 = _2773;
                }
                else
                {
                    float _2896;
                    float _2897;
                    float _2898;
                    float _2899;
                    float _2900;
                    float _2901;
                    uint _2902;
                    _2896 = _2772;
                    _2897 = _2773;
                    _2898 = _2774;
                    _2899 = _2775;
                    _2900 = _2776;
                    _2901 = _2777;
                    _2902 = _2787;
                    float _2828;
                    float _2829;
                    float _2830;
                    float _2831;
                    float _2832;
                    float _2833;
                    for (;;)
                    {
                        uint _2906 = uint(findLSB(_2902)) + (_2778 << 5u);
                        uint _2903 = (_2902 + 4294967295u) & _2902;
                        uint _2908 = _2906 * 48u;
                        vec4 _2922 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2908)).x, texelFetch(g_PointLightRenderingBuffer, int(_2908 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2908 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2908 + 3u)).x));
                        uint _2928 = (_2906 * 48u) + 4u;
                        vec4 _2941 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2928)).x, texelFetch(g_PointLightRenderingBuffer, int(_2928 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2928 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2928 + 3u)).x));
                        uint _2947 = (_2906 * 48u) + 8u;
                        vec3 _2958 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2947)).x, texelFetch(g_PointLightRenderingBuffer, int(_2947 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2947 + 2u)).x));
                        float _2962 = _2922.x - _2443;
                        float _2963 = _2922.y - _2444;
                        float _2964 = _2922.z - _2445;
                        float _2965 = dot(vec3(_2962, _2963, _2964), vec3(_2962, _2963, _2964));
                        float _2968 = inversesqrt(_2965);
                        float _2969 = _2968 * _2962;
                        float _2970 = _2968 * _2963;
                        float _2971 = _2968 * _2964;
                        float _2972 = dot(vec3(_723, _726, _729), vec3(_2969, _2970, _2971));
                        float _2977 = 1.0 - (_2965 * _2922.w);
                        float _4279 = isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0));
                        float _2978 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
                        float _2979 = sqrt(_2965) * _2941.w;
                        float _2982 = 1.39999997615814208984375 / (_2979 + 1.39999997615814208984375);
                        float _2983 = _2982 * _2982;
                        float _2986 = ((1.0 - _2983) * _2972) + _2983;
                        float _2989 = _2979 * _2979;
                        float _2993 = ((isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0))) * _2978) / ((_2989 * 0.699999988079071044921875) + 1.0);
                        float _2997 = (-0.0) - _2443;
                        float _2998 = (-0.0) - _2444;
                        float _2999 = (-0.0) - _2445;
                        float _3003 = inversesqrt(dot(vec3(_2997, _2998, _2999), vec3(_2997, _2998, _2999)));
                        float _3004 = _3003 * _2997;
                        float _3005 = _3003 * _2998;
                        float _3006 = _3003 * _2999;
                        float _3014 = exp2(log2(1.0 / ((_2989 * 3.5) + 5.0)) * 0.25);
                        float _3015 = 1.0 - _783;
                        float _3022 = sqrt(1.0 - ((1.0 - (_3015 * _3015)) * (1.0 - (_3014 * _3014))));
                        float _3023 = _3022 * _3022;
                        float _3024 = _3023 * _3023;
                        float _3025 = _3004 + _2969;
                        float _3026 = _3005 + _2970;
                        float _3027 = _3006 + _2971;
                        float _3031 = inversesqrt(dot(vec3(_3025, _3026, _3027), vec3(_3025, _3026, _3027)));
                        float _3035 = dot(vec3(_723, _726, _729), vec3(_3004, _3005, _3006));
                        float _4295 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0));
                        float _3038 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
                        float _3039 = dot(vec3(_723, _726, _729), vec3(_3031 * _3025, _3031 * _3026, _3031 * _3027));
                        float _4306 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0));
                        float _3042 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
                        float _3046 = ((_3042 * _3042) * (_3024 + (-1.0))) + 1.0;
                        float _3047 = _2982 * _3023;
                        float _3048 = _3047 * _3047;
                        float _3051 = ((1.0 - _3048) * _2972) + _3048;
                        float _4317 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0));
                        float _3052 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
                        float _3053 = 1.0 - _3023;
                        float _3063 = (0.5 / (((_3052 * ((_3038 * _3053) + _3023)) + 9.9999999392252902907785028219223e-09) + (((_3052 * _3053) + _3023) * _3038))) * _3052;
                        float _4328 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0));
                        float _3074 = (((_3024 * 3.1415927410125732421875) * (isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0)))) / ((_3046 * _3046) * ((_2989 * 2.1991131305694580078125) + 3.141590118408203125))) * _2978;
                        _2831 = (_2993 * _2941.x) + _2899;
                        _2832 = (_2993 * _2941.y) + _2900;
                        _2833 = (_2993 * _2941.z) + _2901;
                        _2828 = (_3074 * _2958.x) + _2896;
                        _2829 = (_3074 * _2958.y) + _2897;
                        _2830 = (_3074 * _2958.z) + _2898;
                        if (_2903 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2896 = _2828;
                            _2897 = _2829;
                            _2898 = _2830;
                            _2899 = _2831;
                            _2900 = _2832;
                            _2901 = _2833;
                            _2902 = _2903;
                        }
                    }
                    frontier_phi_61_pred = _2828;
                    frontier_phi_61_pred_1 = _2833;
                    frontier_phi_61_pred_2 = _2832;
                    frontier_phi_61_pred_3 = _2831;
                    frontier_phi_61_pred_4 = _2830;
                    frontier_phi_61_pred_5 = _2829;
                }
                _2620 = frontier_phi_61_pred;
                _2630 = frontier_phi_61_pred_1;
                _2628 = frontier_phi_61_pred_2;
                _2626 = frontier_phi_61_pred_3;
                _2624 = frontier_phi_61_pred_4;
                _2622 = frontier_phi_61_pred_5;
                uint _2779 = _2778 + 1u;
                if (_2779 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2772 = _2620;
                    _2773 = _2622;
                    _2774 = _2624;
                    _2775 = _2626;
                    _2776 = _2628;
                    _2777 = _2630;
                    _2778 = _2779;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2619 = _2620;
            _2621 = _2622;
            _2623 = _2624;
            _2625 = _2626;
            _2627 = _2628;
            _2629 = _2630;
        }
        uvec4 _2633 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2634 = _2633.z;
        uint _2636 = (_2634 >> 8u) & 15u;
        float _2740;
        float _2742;
        float _2744;
        float _2746;
        float _2748;
        float _2750;
        if (((4294967295u << _2636) & _2489) == 0u)
        {
            _2740 = _2619;
            _2742 = _2621;
            _2744 = _2623;
            _2746 = _2625;
            _2748 = _2627;
            _2750 = _2629;
        }
        else
        {
            float _2765 = inversesqrt(dot(vec3(_2443, _2444, _2445), vec3(_2443, _2444, _2445)));
            float _2766 = _2765 * _2443;
            float _2767 = _2765 * _2444;
            float _2768 = _2765 * _2445;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2636 < ((_2634 >> 12u) & 15u))
            {
                float _2741;
                float _2743;
                float _2745;
                float _2747;
                float _2749;
                float _2751;
                float _2879 = _2619;
                float _2880 = _2621;
                float _2881 = _2623;
                float _2882 = _2625;
                float _2883 = _2627;
                float _2884 = _2629;
                uint _2885 = _2636;
                uint _2894;
                bool _2895;
                for (;;)
                {
                    _2894 = texelFetch(g_lightClassification, int((((_2483 << 5u) + (_2469 << 9u)) + (_2885 << 2u)) >> 2u)).x;
                    _2895 = _2894 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2895)
                    {
                        frontier_phi_67_pred = _2882;
                        frontier_phi_67_pred_1 = _2883;
                        frontier_phi_67_pred_2 = _2884;
                        frontier_phi_67_pred_3 = _2881;
                        frontier_phi_67_pred_4 = _2880;
                        frontier_phi_67_pred_5 = _2879;
                    }
                    else
                    {
                        float _3079;
                        float _3080;
                        float _3081;
                        float _3082;
                        float _3083;
                        float _3084;
                        float _3373;
                        float _3374;
                        float _3375;
                        float _3376;
                        float _3377;
                        float _3378;
                        float _3092 = _2879;
                        float _3093 = _2880;
                        float _3094 = _2881;
                        float _3095 = _2882;
                        float _3096 = _2883;
                        float _3097 = _2884;
                        uint _3098 = _2894;
                        uint _3099;
                        vec4 _3124;
                        float _3125;
                        vec4 _3140;
                        vec3 _3152;
                        vec4 _3167;
                        vec4 _3182;
                        float _3229;
                        bool _3230;
                        for (;;)
                        {
                            uint _3109 = ((_2885 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3098));
                            _3099 = (_3098 + 4294967295u) & _3098;
                            uint _3111 = _3109 * 40u;
                            _3124 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3111)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 3u)).x));
                            _3125 = _3124.w;
                            uint _3127 = (_3109 * 40u) + 4u;
                            _3140 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3127)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 3u)).x));
                            uint _3142 = (_3109 * 40u) + 8u;
                            _3152 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3142)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 2u)).x));
                            uint _3154 = (_3109 * 40u) + 16u;
                            _3167 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3154)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 3u)).x));
                            uint _3169 = (_3109 * 40u) + 20u;
                            _3182 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3169)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 3u)).x));
                            uint _3185 = (_3109 * 40u) + 24u;
                            vec4 _3198 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3185)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 3u)).x));
                            uint _3204 = (_3109 * 40u) + 28u;
                            vec4 _3217 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3204)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 3u)).x));
                            _3229 = fma(_2445, _3217.z, fma(_2444, _3217.y, _3217.x * _2443)) + _3217.w;
                            _3230 = !((fma(_2445, _3198.z, fma(_2444, _3198.y, _3198.x * _2443)) + _3198.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3230)
                            {
                                float _3257 = _3124.x - _2443;
                                float _3258 = _3124.y - _2444;
                                float _3259 = _3124.z - _2445;
                                float _3260 = dot(vec3(_3257, _3258, _3259), vec3(_3257, _3258, _3259));
                                float _3263 = inversesqrt(_3260);
                                float _3264 = _3263 * _3257;
                                float _3265 = _3263 * _3258;
                                float _3266 = _3263 * _3259;
                                float _3270 = 1.0 - (_3260 / (_3125 * _3125));
                                float _4339 = isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0));
                                float _3271 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
                                float _3275 = sqrt(_3260) * _3140.w;
                                float _3277 = 1.39999997615814208984375 / (_3275 + 1.39999997615814208984375);
                                float _3278 = _3277 * _3277;
                                float _3281 = ((1.0 - _3278) * dot(vec3(_3264, _3265, _3266), vec3(_723, _726, _729))) + _3278;
                                float _3284 = _3275 * _3275;
                                float _3288 = (fma(_2445, _3167.z, fma(_2444, _3167.y, _3167.x * _2443)) + _3167.w) / _3229;
                                float _3289 = (fma(_2445, _3182.z, fma(_2444, _3182.y, _3182.x * _2443)) + _3182.w) / _3229;
                                float _3293 = 1.0 - dot(vec2(_3288, _3289), vec2(_3288, _3289));
                                float _4355 = isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0));
                                float _3294 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
                                float _3295 = _3294 * (((isnan(0.0) ? _3281 : (isnan(_3281) ? 0.0 : max(_3281, 0.0))) * _3271) / ((_3284 * 0.699999988079071044921875) + 1.0));
                                float _3307 = exp2(log2(1.0 / ((_3284 * 3.5) + 5.0)) * 0.25);
                                float _3308 = 1.0 - _783;
                                float _3315 = sqrt(1.0 - ((1.0 - (_3308 * _3308)) * (1.0 - (_3307 * _3307))));
                                float _3316 = _3315 * _3315;
                                float _3317 = _3316 * _3316;
                                float _3318 = _3264 - _2766;
                                float _3319 = _3265 - _2767;
                                float _3320 = _3266 - _2768;
                                float _3324 = inversesqrt(dot(vec3(_3318, _3319, _3320), vec3(_3318, _3319, _3320)));
                                float _3328 = dot(vec3(_723, _726, _729), vec3((-0.0) - _2766, (-0.0) - _2767, (-0.0) - _2768));
                                float _4366 = isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0));
                                float _3331 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
                                float _3332 = dot(vec3(_723, _726, _729), vec3(_3324 * _3318, _3324 * _3319, _3324 * _3320));
                                float _4377 = isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0));
                                float _3335 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
                                float _3339 = ((_3335 * _3335) * (_3317 + (-1.0))) + 1.0;
                                float _3340 = _3277 * _3316;
                                float _3341 = _3340 * _3340;
                                float _3347 = ((1.0 - _3341) * dot(vec3(_723, _726, _729), vec3(_3264, _3265, _3266))) + _3341;
                                float _4388 = isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : max(_3347, 0.0));
                                float _3348 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
                                float _3349 = 1.0 - _3316;
                                float _3359 = (0.5 / (((_3348 * ((_3331 * _3349) + _3316)) + 9.9999999392252902907785028219223e-09) + (((_3348 * _3349) + _3316) * _3331))) * _3348;
                                float _4399 = isnan(0.0) ? _3359 : (isnan(_3359) ? 0.0 : max(_3359, 0.0));
                                float _3369 = (_3294 * _3271) * (((_3317 * 3.1415927410125732421875) * (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0)))) / ((_3339 * _3339) * ((_3284 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3369 * _3152.x;
                                frontier_phi_73_pred_1 = _3369 * _3152.y;
                                frontier_phi_73_pred_2 = _3295 * _3140.z;
                                frontier_phi_73_pred_3 = _3295 * _3140.y;
                                frontier_phi_73_pred_4 = _3295 * _3140.x;
                                frontier_phi_73_pred_5 = _3369 * _3152.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3373 = frontier_phi_73_pred;
                            _3374 = frontier_phi_73_pred_1;
                            _3378 = frontier_phi_73_pred_2;
                            _3377 = frontier_phi_73_pred_3;
                            _3376 = frontier_phi_73_pred_4;
                            _3375 = frontier_phi_73_pred_5;
                            _3082 = _3376 + _3095;
                            _3083 = _3377 + _3096;
                            _3084 = _3378 + _3097;
                            _3079 = _3373 + _3092;
                            _3080 = _3374 + _3093;
                            _3081 = _3375 + _3094;
                            if (_3099 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3092 = _3079;
                                _3093 = _3080;
                                _3094 = _3081;
                                _3095 = _3082;
                                _3096 = _3083;
                                _3097 = _3084;
                                _3098 = _3099;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3082;
                        frontier_phi_67_pred_1 = _3083;
                        frontier_phi_67_pred_2 = _3084;
                        frontier_phi_67_pred_3 = _3081;
                        frontier_phi_67_pred_4 = _3080;
                        frontier_phi_67_pred_5 = _3079;
                    }
                    _2747 = frontier_phi_67_pred;
                    _2749 = frontier_phi_67_pred_1;
                    _2751 = frontier_phi_67_pred_2;
                    _2745 = frontier_phi_67_pred_3;
                    _2743 = frontier_phi_67_pred_4;
                    _2741 = frontier_phi_67_pred_5;
                    uint _2886 = _2885 + 1u;
                    if (_2886 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2879 = _2741;
                        _2880 = _2743;
                        _2881 = _2745;
                        _2882 = _2747;
                        _2883 = _2749;
                        _2884 = _2751;
                        _2885 = _2886;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2749;
                frontier_phi_55_56_ladder_1 = _2751;
                frontier_phi_55_56_ladder_2 = _2747;
                frontier_phi_55_56_ladder_3 = _2745;
                frontier_phi_55_56_ladder_4 = _2743;
                frontier_phi_55_56_ladder_5 = _2741;
            }
            else
            {
                frontier_phi_55_56_ladder = _2627;
                frontier_phi_55_56_ladder_1 = _2629;
                frontier_phi_55_56_ladder_2 = _2625;
                frontier_phi_55_56_ladder_3 = _2623;
                frontier_phi_55_56_ladder_4 = _2621;
                frontier_phi_55_56_ladder_5 = _2619;
            }
            _2740 = frontier_phi_55_56_ladder_5;
            _2742 = frontier_phi_55_56_ladder_4;
            _2744 = frontier_phi_55_56_ladder_3;
            _2746 = frontier_phi_55_56_ladder_2;
            _2748 = frontier_phi_55_56_ladder;
            _2750 = frontier_phi_55_56_ladder_1;
        }
        float _2755 = isnan(1.0) ? _767 : (isnan(_767) ? 1.0 : min(_767, 1.0));
        _2502 = (_2755 * _2746) + _1954;
        _2504 = (_2755 * _2748) + _1956;
        _2506 = (_2755 * _2750) + _1958;
        _2508 = ((_2740 * 0.039999999105930328369140625) * _2755) + _2287;
        _2510 = ((_2742 * 0.039999999105930328369140625) * _2755) + _2289;
        _2512 = ((_2744 * 0.039999999105930328369140625) * _2755) + _2291;
    }
    else
    {
        _2502 = _1954;
        _2504 = _1956;
        _2506 = _1958;
        _2508 = _2287;
        _2510 = _2289;
        _2512 = _2291;
    }
    uint _2518 = _743 + uint(cbMatDynParam._m0[0u].w);
    float _2524 = cbInstanceData._m0[_2518].x * (_533 - (_549 * _533));
    float _2525 = cbInstanceData._m0[_2518].y * (_534 - (_549 * _534));
    float _2526 = cbInstanceData._m0[_2518].z * (_535 - (_549 * _535));
    float _4415 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _4426 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _4437 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _2543 = (((isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0))) * (_2502 + ((isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0))) * _767))) + ((_2508 + ((isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0))) * _1573)) * cbPerFrame._m0[3u].x)) + _2524;
    float _2545 = (_2525 + ((_2510 + ((isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0))) * _1573)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0))) * (_2504 + ((isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0))) * _767)));
    float _2547 = (_2526 + ((_2512 + ((isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0))) * _1573)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0))) * (_2506 + ((isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0))) * _767)));
    float _4463 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2560 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
    uint _2561 = _742 + 6u;
    float _2569 = _701 / cbSceneParam._m0[86u].x;
    float _2570 = _702 / cbSceneParam._m0[86u].y;
    vec4 _2584 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2569, _2570, (log2((isnan(cbSceneParam._m0[77u].w) ? _636 : (isnan(_636) ? cbSceneParam._m0[77u].w : min(_636, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2586 = _2584.x;
    float _2587 = _2584.y;
    float _2588 = _2584.z;
    float _2589 = _2584.w;
    float _2681;
    float _2683;
    float _2685;
    float _2687;
    if (_636 > cbSceneParam._m0[78u].w)
    {
        float _2644 = isnan(_636) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _636 : min(cbSceneParam._m0[80u].w, _636));
        float _2645 = _2644 / _636;
        float _2656 = _2645 * _686;
        float _2657 = _687 * _2645;
        float _2658 = (-0.0) - _2657;
        float _2659 = _2645 * _688;
        float _2661 = (cbSceneParam._m0[77u].w * _2658) / _2644;
        float _2662 = _2661 + cbSceneParam._m0[79u].w;
        float _2663 = cbSceneParam._m0[79u].w - _2657;
        float _2669 = sqrt(((_2656 * _2656) + (_2657 * _2657)) + (_2659 * _2659));
        float _2672 = (1.0 - (cbSceneParam._m0[77u].w / _2644)) * _2669;
        float _2677 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2679 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2841;
        if (abs((_2658 - _2661) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2841 = ((((_2662 > 0.0) ? exp2(_2677 * _2662) : (2.0 - exp2(_2679 * _2662))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2672;
        }
        else
        {
            float _2801 = 1.0 / cbSceneParam._m0[80u].x;
            float _2802 = isnan(_2663) ? _2662 : (isnan(_2662) ? _2663 : max(_2662, _2663));
            float _2803 = isnan(_2663) ? _2662 : (isnan(_2662) ? _2663 : min(_2662, _2663));
            float _2812 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : min(_2802, 0.0));
            float _2813 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : min(_2803, 0.0));
            _2841 = ((abs(_2669 / _2658) * cbSceneParam._m0[80u].y) * ((((_2812 - _2813) * 2.0) - ((exp2(_2677 * (isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0)))) - exp2(_2677 * (isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0))))) * _2801)) - ((exp2(_2679 * _2812) - exp2(_2679 * _2813)) * _2801))) + (_2672 * cbSceneParam._m0[80u].z);
        }
        vec4 _2843 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2569, _2570, 1.0), 0.0);
        float _2852 = exp2((_2841 * (-1.44269502162933349609375)) * (1.0 - _2843.w));
        float _2853 = log2(_2852);
        float _2869 = log2(_2589);
        _2681 = (exp2(_2869 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2853 * cbSceneParam._m0[78u].x)) * _2843.x) / cbSceneParam._m0[78u].x)) + _2586;
        _2683 = (exp2(_2869 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2853 * cbSceneParam._m0[78u].y)) * _2843.y) / cbSceneParam._m0[78u].y)) + _2587;
        _2685 = (exp2(_2869 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2853 * cbSceneParam._m0[78u].z)) * _2843.z) / cbSceneParam._m0[78u].z)) + _2588;
        _2687 = _2852 * _2589;
    }
    else
    {
        _2681 = _2586;
        _2683 = _2587;
        _2685 = _2588;
        _2687 = _2589;
    }
    float _2699 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2700 = _2699 == 3.0;
    float _2701 = log2(_2687);
    float _2705 = exp2(_2701 * cbSceneParam._m0[78u].x);
    float _2706 = exp2(_2701 * cbSceneParam._m0[78u].y);
    float _2707 = exp2(_2701 * cbSceneParam._m0[78u].z);
    float _2708 = _2705 * (isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0)));
    float _2709 = _2706 * (isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0)));
    float _2710 = _2707 * (isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0)));
    float _2719 = (_2699 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2719 * (_2700 ? _2708 : (_2708 + (cbSceneParam._m0[72u].w * _2681)));
    SV_Target.y = _2719 * (_2700 ? _2709 : (_2709 + (cbSceneParam._m0[72u].w * _2683)));
    SV_Target.z = _2719 * (_2700 ? _2710 : (_2710 + (cbSceneParam._m0[72u].w * _2685)));
    SV_Target.w = cbInstanceData._m0[_2561].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2524) * _2560) * _2705) * _2719;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2525) * _2560) * _2706) * _2719;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2526) * _2560) * _2707) * _2719;
    SV_Target_1.w = cbInstanceData._m0[_2561].w;
}


