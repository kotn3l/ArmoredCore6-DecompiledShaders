#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1124;
float _3523;
float _3524;
float _3525;
float _3526;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _197 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _198 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _199 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _205 = inversesqrt(dot(vec3(_197, _198, _199), vec3(_197, _198, _199)));
    float _212 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _219 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _241 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _247 = _241.x * cbMtdParam._m0[9u].x;
    float _248 = _241.y * cbMtdParam._m0[9u].y;
    float _249 = _241.z * cbMtdParam._m0[9u].z;
    vec4 _266 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _287 = TEXCOORD_9.x - ((cbMtdParam._m0[16u].y * (1.0 - TEXCOORD_9.x)) * (_266.x + 0.00999999977648258209228515625));
    float _289 = _287 * (cbMtdParam._m0[16u].z + 1.0);
    float _3535 = isnan(0.0) ? _289 : (isnan(_289) ? 0.0 : max(_289, 0.0));
    float _290 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
    float _298 = ((((cbMtdParam._m0[12u].x - _247) * TEXCOORD_9.x) * cbMtdParam._m0[16u].x) * _290) + _247;
    float _299 = ((((cbMtdParam._m0[12u].y - _248) * TEXCOORD_9.y) * cbMtdParam._m0[16u].x) * _290) + _248;
    float _300 = (((cbMtdParam._m0[16u].x * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _249)) * _290) + _249;
    vec4 _312 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _316 = _312.z;
    float _320 = (_312.x * 2.0) + (-1.0);
    float _322 = (_312.y * 2.0) + (-1.0);
    float _323 = dot(vec2(_320, _322), vec2(_320, _322));
    float _3546 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _328 = sqrt(1.0 - (isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0))));
    float _334 = _287 * (cbMtdParam._m0[16u].y + 1.0);
    float _3557 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _338 = ((cbMtdParam._m0[15u].y - _316) * (isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0)))) + _316;
    float _351 = (cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _352 = (cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _379 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * ((cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * ((cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[10u].w));
    float _384 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[15u].w;
    float _391 = ((_379.y * 0.5) + (-0.25)) * cbMtdParam._m0[15u].z;
    float _393 = (-0.0) - (cbMtdParam._m0[15u].z * ((_379.x * 0.5) + (-0.25)));
    float _395 = fract(_384);
    float _397 = fract(_384 + 0.5);
    float _398 = _395 * _393;
    float _399 = _391 * _395;
    float _402 = _397 * _393;
    float _403 = _391 * _397;
    float _408 = abs((_395 * 2.0) + (-1.0));
    vec4 _424 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_398 + _351) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_399 + _352) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _426 = _424.x;
    float _427 = _424.y;
    float _428 = _424.z;
    vec4 _429 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_402 + _351) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_403 + _352) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _456 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _457 = (cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _470 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_398 + _456) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_399 + _457) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _472 = _470.x;
    float _473 = _470.y;
    float _474 = _470.z;
    vec4 _475 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_402 + _456) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_403 + _457) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    vec4 _519 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[16u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, (((cbMtdParam._m0[17u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w));
    float _525 = (_519.x * 2.0) + (-1.0);
    float _526 = (_519.y * 2.0) + (-1.0);
    float _527 = dot(vec2(_525, _526), vec2(_525, _526));
    float _3568 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _543 = (_290 * (((cbMtdParam._m0[14u].z * _320) - _320) + _525)) + _320;
    float _544 = (_290 * (((cbMtdParam._m0[14u].z * _322) - _322) + _526)) + _322;
    float _545 = (_290 * (sqrt(1.0 - (isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0)))) - _328)) + _328;
    float _548 = fma(_545, _212 * NORMAL.x, fma(_544, _219 * TANGENT.x, (_205 * _197) * _543));
    float _551 = fma(_545, _212 * NORMAL.y, fma(_544, _219 * TANGENT.y, (_205 * _198) * _543));
    float _554 = fma(_545, _212 * NORMAL.z, fma(_544, _219 * TANGENT.z, (_205 * _199) * _543));
    float _558 = inversesqrt(dot(vec3(_548, _551, _554), vec3(_548, _551, _554)));
    float _559 = _558 * _548;
    float _560 = _558 * _551;
    float _561 = _558 * _554;
    float _3579 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _562 = isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0));
    float _3590 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _3601 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _3612 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    float _581 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _622 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _632 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _622);
    float _633 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _622);
    float _634 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _622);
    float _638 = inversesqrt(dot(vec3(_632, _633, _634), vec3(_632, _633, _634)));
    float _639 = _632 * _638;
    float _640 = _633 * _638;
    float _641 = _634 * _638;
    vec4 _646 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _648 = _646.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _805 = sqrt(((_632 * _632) + (_633 * _633)) + (_634 * _634));
        float _811 = (cbMatDynParam._m0[5u].x * _805) + cbMatDynParam._m0[5u].y;
        float _3623 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
        float _812 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
        float _816 = (cbMatDynParam._m0[5u].z * _805) + cbMatDynParam._m0[5u].w;
        float _3634 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0))) - _812)) + _812) < ((_648 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _660 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _661 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _681 = fma(_561, cbSceneParam._m0[5u].z, fma(_560, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _559));
    float _684 = fma(_561, cbSceneParam._m0[6u].z, fma(_560, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _559));
    float _687 = fma(_561, cbSceneParam._m0[7u].z, fma(_560, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _559));
    uint _700 = uint(roundEven(NORMAL.w)) * 13u;
    uint _701 = _700 + 9u;
    uint _702 = _701 + uint(cbMatDynParam._m0[0u].w);
    float _708 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0)))) * cbInstanceData._m0[_702].x;
    float _709 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0)))) * cbInstanceData._m0[_702].y;
    float _710 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0)))) * cbInstanceData._m0[_702].z;
    float _3645 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _711 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
    float _3656 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _712 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
    float _3667 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _713 = isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0));
    vec4 _722 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _660, cbSceneParam._m0[86u].y * _661));
    float _725 = _722.x * TEXCOORD_3.w;
    float _726 = dot(vec3(_559, _560, _561), vec3(_639, _640, _641));
    float _729 = _726 * 2.0;
    float _733 = (_729 * _559) - _639;
    float _734 = (_729 * _560) - _640;
    float _735 = (_729 * _561) - _641;
    float _739 = abs(dot(vec3(_639, _640, _641), vec3(_559, _560, _561)));
    float _3678 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _741 = sqrt(_562);
    float _754 = exp2((_741 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_741 * 3.0));
    float _786 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _790 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _794 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1123;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _849 = fma(_794, cbModelParam._m0[26u].z, fma(_790, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _786));
        float _853 = fma(_794, cbModelParam._m0[27u].z, fma(_790, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _786));
        float _857 = fma(_794, cbModelParam._m0[28u].z, fma(_790, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _786));
        float _881 = _786 + _559;
        float _882 = _790 + _560;
        float _883 = _794 + _561;
        float _893 = fma(_883, cbModelParam._m0[26u].z, fma(_882, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _881)) - _849;
        float _894 = fma(_883, cbModelParam._m0[27u].z, fma(_882, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _881)) - _853;
        float _895 = fma(_883, cbModelParam._m0[28u].z, fma(_882, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _881)) - _857;
        float _899 = inversesqrt(dot(vec3(_893, _894, _895), vec3(_893, _894, _895)));
        float _912 = ((_899 * _893) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_849 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _913 = ((_899 * _894) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_853 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _914 = ((_899 * _895) / cbModelParam._m0[34u].z) + ((((((_857 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _917 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_912, _913, _914), 0.0);
        vec4 _924 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_912, _913, _914), 0.0);
        vec4 _931 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_912, _913, _914), 0.0);
        vec4 _938 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_912, _913, _914), 0.0);
        float _951 = exp2((_917.w + (-0.5)) * 20.0) * 2.0;
        float _952 = _951 * (_917.x + (-0.5));
        float _953 = _951 * (_917.y + (-0.5));
        float _954 = _951 * (_917.z + (-0.5));
        float _961 = exp2((_924.w + (-0.5)) * 20.0) * 2.0;
        float _962 = _961 * (_924.x + (-0.5));
        float _963 = _961 * (_924.y + (-0.5));
        float _964 = _961 * (_924.z + (-0.5));
        float _971 = exp2((_931.w + (-0.5)) * 20.0) * 2.0;
        float _972 = _971 * (_931.x + (-0.5));
        float _973 = _971 * (_931.y + (-0.5));
        float _974 = _971 * (_931.z + (-0.5));
        float _981 = exp2((_938.w + (-0.5)) * 20.0) * 2.0;
        float _982 = _981 * (_938.x + (-0.5));
        float _983 = _981 * (_938.y + (-0.5));
        float _984 = _981 * (_938.z + (-0.5));
        float _985 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _986 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _987 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _988 = _952 * 0.5;
        float _989 = _962 * 0.5;
        float _990 = _972 * 0.5;
        float _991 = dot(vec3(_988, _989, _990), vec3(_988, _989, _990));
        float _996 = (_991 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_991);
        float _1005 = (dot(vec3(_559, _560, _561), vec3(_996 * _988, _996 * _989, _996 * _990)) + 1.0) * 0.5;
        float _3704 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1015 = sqrt(((_989 * _989) + (_988 * _988)) + (_990 * _990)) / (_985 + 9.9999997473787516355514526367188e-06);
        float _3715 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1016 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
        float _1017 = _1016 * 2.0;
        float _1021 = (1.0 - _1016) / (_1016 + 1.0);
        float _3726 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1022 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
        float _1031 = ((((1.0 - _1022) * (_1017 + 2.0)) * exp2(log2(isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0))) * (_1017 + 1.0))) + _1022) * _985;
        float _1032 = _953 * 0.5;
        float _1033 = _963 * 0.5;
        float _1034 = _973 * 0.5;
        float _1035 = dot(vec3(_1032, _1033, _1034), vec3(_1032, _1033, _1034));
        float _1040 = (_1035 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1035);
        float _1048 = (dot(vec3(_559, _560, _561), vec3(_1040 * _1032, _1040 * _1033, _1040 * _1034)) + 1.0) * 0.5;
        float _3737 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1057 = sqrt(((_1033 * _1033) + (_1032 * _1032)) + (_1034 * _1034)) / (_986 + 9.9999997473787516355514526367188e-06);
        float _3748 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
        float _1059 = _1058 * 2.0;
        float _1063 = (1.0 - _1058) / (_1058 + 1.0);
        float _3759 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
        float _1073 = ((((1.0 - _1064) * (_1059 + 2.0)) * exp2(log2(isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0))) * (_1059 + 1.0))) + _1064) * _986;
        float _1074 = _954 * 0.5;
        float _1075 = _964 * 0.5;
        float _1076 = _974 * 0.5;
        float _1077 = dot(vec3(_1074, _1075, _1076), vec3(_1074, _1075, _1076));
        float _1082 = (_1077 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1077);
        float _1090 = (dot(vec3(_559, _560, _561), vec3(_1082 * _1074, _1082 * _1075, _1082 * _1076)) + 1.0) * 0.5;
        float _3770 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1099 = sqrt(((_1075 * _1075) + (_1074 * _1074)) + (_1076 * _1076)) / (_987 + 9.9999997473787516355514526367188e-06);
        float _3781 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
        float _1101 = _1100 * 2.0;
        float _1105 = (1.0 - _1100) / (_1100 + 1.0);
        float _3792 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
        float _1115 = ((((1.0 - _1106) * (_1101 + 2.0)) * exp2(log2(isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0))) * (_1101 + 1.0))) + _1106) * _987;
        _1123 = _954;
        _1125 = _953;
        _1126 = _952;
        _1127 = _964;
        _1128 = _963;
        _1129 = _962;
        _1130 = _974;
        _1131 = _973;
        _1132 = _972;
        _1133 = _987;
        _1134 = _986;
        _1135 = _985;
        _1136 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0)));
        _1137 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0)));
        _1138 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0)));
    }
    else
    {
        _1123 = _1124;
        _1125 = _1124;
        _1126 = _1124;
        _1127 = _1124;
        _1128 = _1124;
        _1129 = _1124;
        _1130 = _1124;
        _1131 = _1124;
        _1132 = _1124;
        _1133 = _1124;
        _1134 = _1124;
        _1135 = _1124;
        _1136 = 0.0;
        _1137 = 0.0;
        _1138 = 0.0;
    }
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1167 = fma(_794, cbModelParam._m0[30u].z, fma(_790, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _786));
        float _1171 = fma(_794, cbModelParam._m0[31u].z, fma(_790, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _786));
        float _1175 = fma(_794, cbModelParam._m0[32u].z, fma(_790, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _786));
        float _1198 = _786 + _559;
        float _1199 = _790 + _560;
        float _1200 = _794 + _561;
        float _1210 = fma(_1200, cbModelParam._m0[30u].z, fma(_1199, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1198)) - _1167;
        float _1211 = fma(_1200, cbModelParam._m0[31u].z, fma(_1199, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1198)) - _1171;
        float _1212 = fma(_1200, cbModelParam._m0[32u].z, fma(_1199, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1198)) - _1175;
        float _1216 = inversesqrt(dot(vec3(_1210, _1211, _1212), vec3(_1210, _1211, _1212)));
        float _1229 = ((_1216 * _1210) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1167 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1230 = ((_1216 * _1211) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1171 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1231 = ((_1216 * _1212) / cbModelParam._m0[35u].z) + ((((((_1175 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1233 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1229, _1230, _1231), 0.0);
        vec4 _1240 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1229, _1230, _1231), 0.0);
        vec4 _1247 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1229, _1230, _1231), 0.0);
        vec4 _1254 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1229, _1230, _1231), 0.0);
        float _1266 = exp2((_1233.w + (-0.5)) * 20.0) * 2.0;
        float _1267 = _1266 * (_1233.x + (-0.5));
        float _1268 = _1266 * (_1233.y + (-0.5));
        float _1269 = _1266 * (_1233.z + (-0.5));
        float _1276 = exp2((_1240.w + (-0.5)) * 20.0) * 2.0;
        float _1277 = _1276 * (_1240.x + (-0.5));
        float _1278 = _1276 * (_1240.y + (-0.5));
        float _1279 = _1276 * (_1240.z + (-0.5));
        float _1286 = exp2((_1247.w + (-0.5)) * 20.0) * 2.0;
        float _1287 = _1286 * (_1247.x + (-0.5));
        float _1288 = _1286 * (_1247.y + (-0.5));
        float _1289 = _1286 * (_1247.z + (-0.5));
        float _1296 = exp2((_1254.w + (-0.5)) * 20.0) * 2.0;
        float _1297 = _1296 * (_1254.x + (-0.5));
        float _1298 = _1296 * (_1254.y + (-0.5));
        float _1299 = _1296 * (_1254.z + (-0.5));
        float _1300 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1301 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1302 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1303 = _1267 * 0.5;
        float _1304 = _1277 * 0.5;
        float _1305 = _1287 * 0.5;
        float _1306 = dot(vec3(_1303, _1304, _1305), vec3(_1303, _1304, _1305));
        float _1311 = (_1306 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1306);
        float _1319 = (dot(vec3(_559, _560, _561), vec3(_1311 * _1303, _1311 * _1304, _1311 * _1305)) + 1.0) * 0.5;
        float _3833 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1328 = sqrt(((_1304 * _1304) + (_1303 * _1303)) + (_1305 * _1305)) / (_1300 + 9.9999997473787516355514526367188e-06);
        float _3844 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
        float _1330 = _1329 * 2.0;
        float _1334 = (1.0 - _1329) / (_1329 + 1.0);
        float _3855 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
        float _1344 = ((((1.0 - _1335) * (_1330 + 2.0)) * exp2(log2(isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0))) * (_1330 + 1.0))) + _1335) * _1300;
        float _1345 = _1268 * 0.5;
        float _1346 = _1278 * 0.5;
        float _1347 = _1288 * 0.5;
        float _1348 = dot(vec3(_1345, _1346, _1347), vec3(_1345, _1346, _1347));
        float _1353 = (_1348 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1348);
        float _1361 = (dot(vec3(_559, _560, _561), vec3(_1353 * _1345, _1353 * _1346, _1353 * _1347)) + 1.0) * 0.5;
        float _3866 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1370 = sqrt(((_1346 * _1346) + (_1345 * _1345)) + (_1347 * _1347)) / (_1301 + 9.9999997473787516355514526367188e-06);
        float _3877 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
        float _1372 = _1371 * 2.0;
        float _1376 = (1.0 - _1371) / (_1371 + 1.0);
        float _3888 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
        float _1386 = ((((1.0 - _1377) * (_1372 + 2.0)) * exp2(log2(isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0))) * (_1372 + 1.0))) + _1377) * _1301;
        float _1387 = _1269 * 0.5;
        float _1388 = _1279 * 0.5;
        float _1389 = _1289 * 0.5;
        float _1390 = dot(vec3(_1387, _1388, _1389), vec3(_1387, _1388, _1389));
        float _1395 = (_1390 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1390);
        float _1403 = (dot(vec3(_559, _560, _561), vec3(_1395 * _1387, _1395 * _1388, _1395 * _1389)) + 1.0) * 0.5;
        float _3899 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1412 = sqrt(((_1388 * _1388) + (_1387 * _1387)) + (_1389 * _1389)) / (_1302 + 9.9999997473787516355514526367188e-06);
        float _3910 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1413 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _1414 = _1413 * 2.0;
        float _1418 = (1.0 - _1413) / (_1413 + 1.0);
        float _3921 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1419 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
        float _1428 = ((((1.0 - _1419) * (_1414 + 2.0)) * exp2(log2(isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0))) * (_1414 + 1.0))) + _1419) * _1302;
        _1436 = _1269;
        _1437 = _1268;
        _1438 = _1267;
        _1439 = _1279;
        _1440 = _1278;
        _1441 = _1277;
        _1442 = _1289;
        _1443 = _1288;
        _1444 = _1287;
        _1445 = _1302;
        _1446 = _1301;
        _1447 = _1300;
        _1448 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0)));
        _1449 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0)));
        _1450 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0)));
    }
    else
    {
        _1436 = _1124;
        _1437 = _1124;
        _1438 = _1124;
        _1439 = _1124;
        _1440 = _1124;
        _1441 = _1124;
        _1442 = _1124;
        _1443 = _1124;
        _1444 = _1124;
        _1445 = _1124;
        _1446 = _1124;
        _1447 = _1124;
        _1448 = 0.0;
        _1449 = 0.0;
        _1450 = 0.0;
    }
    float _1460 = (cbModelParam._m0[1u].x * (_1448 - _1136)) + _1136;
    float _1461 = (cbModelParam._m0[1u].x * (_1449 - _1137)) + _1137;
    float _1462 = (cbModelParam._m0[1u].x * (_1450 - _1138)) + _1138;
    float _1483 = fma(_1462, cbSceneParam._m0[89u].z, fma(_1461, cbSceneParam._m0[89u].y, _1460 * cbSceneParam._m0[89u].x));
    float _1486 = fma(_1462, cbSceneParam._m0[90u].z, fma(_1461, cbSceneParam._m0[90u].y, _1460 * cbSceneParam._m0[90u].x));
    float _1489 = fma(_1462, cbSceneParam._m0[91u].z, fma(_1461, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1460));
    float _1504 = _733 * 0.5;
    float _1505 = _734 * 0.5;
    float _1506 = _735 * 0.5;
    float _1507 = dot(vec4(_1504, _1505, _1506, 1.0), vec4(_1438, _1441, _1444, _1447));
    float _1510 = dot(vec4(_1504, _1505, _1506, 1.0), vec4(_1437, _1440, _1443, _1446));
    float _1513 = dot(vec4(_1504, _1505, _1506, 1.0), vec4(_1436, _1439, _1442, _1445));
    float _1547;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1520 = dot(vec4(_1504, _1505, _1506, 1.0), vec4(_1123, _1127, _1130, _1133));
        float _1524 = dot(vec4(_1504, _1505, _1506, 1.0), vec4(_1125, _1128, _1131, _1134));
        float _1528 = dot(vec4(_1504, _1505, _1506, 1.0), vec4(_1126, _1129, _1132, _1135));
        float _1535 = dot(vec4(cbModelParam._m0[39u]), vec4(_1504, _1505, _1506, 1.0));
        _1547 = dot(vec3(isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0)), isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0)), isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1535) ? 0.0 : (isnan(0.0) ? _1535 : max(0.0, _1535))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1547 = 1.0;
    }
    float _1558;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1549 = dot(vec4(cbModelParam._m0[40u]), vec4(_1504, _1505, _1506, 1.0));
        _1558 = dot(vec3(isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0)), isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0)), isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1549) ? 0.0 : (isnan(0.0) ? _1549 : max(0.0, _1549))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1558 = 1.0;
    }
    float _1562 = (_1558 * cbModelParam._m0[1u].x) + (_1547 * (1.0 - cbModelParam._m0[1u].x));
    float _1572 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _562);
    float _1573 = isnan(_1572) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1572 : min(cbModelParam._m0[25u].z, _1572));
    float _1653;
    float _1655;
    float _1657;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1620 = fma(_794, cbModelParam._m0[13u].z, fma(_790, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _786)) + cbModelParam._m0[13u].w;
        float _1624 = fma(_794, cbModelParam._m0[14u].z, fma(_790, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _786)) + cbModelParam._m0[14u].w;
        float _1628 = fma(_794, cbModelParam._m0[15u].z, fma(_790, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _786)) + cbModelParam._m0[15u].w;
        float _1631 = fma(_735, cbModelParam._m0[13u].z, fma(_734, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _733));
        float _1634 = fma(_735, cbModelParam._m0[14u].z, fma(_734, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _733));
        float _1637 = fma(_735, cbModelParam._m0[15u].z, fma(_734, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _733));
        float _1665;
        if (_1631 > 0.0)
        {
            _1665 = abs((1.0 - _1620) / _1631);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1631 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1620 + 1.0) / _1631);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1665 = frontier_phi_17_15_ladder;
        }
        float _1867;
        if (_1634 > 0.0)
        {
            _1867 = abs((1.0 - _1624) / _1634);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1634 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1624 + 1.0) / _1634);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1867 = frontier_phi_26_22_ladder;
        }
        float _2110;
        if (_1637 > 0.0)
        {
            _2110 = abs((1.0 - _1628) / _1637);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1637 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1628 + 1.0) / _1637);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2110 = frontier_phi_38_33_ladder;
        }
        float _2112 = isnan(_1867) ? _1665 : (isnan(_1665) ? _1867 : min(_1665, _1867));
        float _2113 = isnan(_2110) ? _2112 : (isnan(_2112) ? _2110 : min(_2112, _2110));
        float _2117 = (_2113 * _1631) + _1620;
        float _2118 = (_2113 * _1634) + _1624;
        float _2119 = (_2113 * _1637) + _1628;
        float _2120 = _2113 * 9.9999997473787516355514526367188e-05;
        float _2122 = (-1.0) - _2120;
        float _2124 = _2120 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2119 > _2124) || ((_2119 < _2122) || ((_2118 > _2124) || ((_2118 < _2122) || ((_2117 < _2122) || (_2117 > _2124))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2243 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2119, cbModelParam._m0[9u].z, fma(_2118, cbModelParam._m0[9u].y, _2117 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2119, cbModelParam._m0[10u].z, fma(_2118, cbModelParam._m0[10u].y, _2117 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2119, cbModelParam._m0[11u].z, fma(_2118, cbModelParam._m0[11u].y, _2117 * cbModelParam._m0[11u].x))), _1573);
            frontier_phi_16_38_ladder = _2243.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2243.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2243.x * cbModelParam._m0[1u].y;
        }
        _1653 = frontier_phi_16_38_ladder_2;
        _1655 = frontier_phi_16_38_ladder_1;
        _1657 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1641 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_733, _734, _735), _1573);
        _1653 = _1641.x * cbModelParam._m0[1u].y;
        _1655 = _1641.y * cbModelParam._m0[1u].y;
        _1657 = _1641.z * cbModelParam._m0[1u].y;
    }
    float _1661 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _562);
    float _1662 = isnan(_1661) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1661 : min(cbModelParam._m0[25u].w, _1661));
    float _1752;
    float _1754;
    float _1756;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1716 = fma(_794, cbModelParam._m0[21u].z, fma(_790, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _786)) + cbModelParam._m0[21u].w;
        float _1720 = fma(_794, cbModelParam._m0[22u].z, fma(_790, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _786)) + cbModelParam._m0[22u].w;
        float _1724 = fma(_794, cbModelParam._m0[23u].z, fma(_790, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _786)) + cbModelParam._m0[23u].w;
        float _1727 = fma(_735, cbModelParam._m0[21u].z, fma(_734, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _733));
        float _1730 = fma(_735, cbModelParam._m0[22u].z, fma(_734, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _733));
        float _1733 = fma(_735, cbModelParam._m0[23u].z, fma(_734, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _733));
        float _1872;
        if (_1727 > 0.0)
        {
            _1872 = abs((1.0 - _1716) / _1727);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1727 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1716 + 1.0) / _1727);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1872 = frontier_phi_28_24_ladder;
        }
        float _2137;
        if (_1730 > 0.0)
        {
            _2137 = abs((1.0 - _1720) / _1730);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1730 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1720 + 1.0) / _1730);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2137 = frontier_phi_40_35_ladder;
        }
        float _2342;
        if (_1733 > 0.0)
        {
            _2342 = abs((1.0 - _1724) / _1733);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1733 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1724 + 1.0) / _1733);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2342 = frontier_phi_49_46_ladder;
        }
        float _2344 = isnan(_2137) ? _1872 : (isnan(_1872) ? _2137 : min(_1872, _2137));
        float _2345 = isnan(_2342) ? _2344 : (isnan(_2344) ? _2342 : min(_2344, _2342));
        float _2349 = (_2345 * _1727) + _1716;
        float _2350 = (_2345 * _1730) + _1720;
        float _2351 = (_2345 * _1733) + _1724;
        float _2352 = _2345 * 9.9999997473787516355514526367188e-05;
        float _2353 = (-1.0) - _2352;
        float _2355 = _2352 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2351 > _2355) || ((_2351 < _2353) || ((_2350 > _2355) || ((_2350 < _2353) || ((_2349 < _2353) || (_2349 > _2355))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2579 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2351, cbModelParam._m0[17u].z, fma(_2350, cbModelParam._m0[17u].y, _2349 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2351, cbModelParam._m0[18u].z, fma(_2350, cbModelParam._m0[18u].y, _2349 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2351, cbModelParam._m0[19u].z, fma(_2350, cbModelParam._m0[19u].y, _2349 * cbModelParam._m0[19u].x))), _1662);
            frontier_phi_25_49_ladder = _2579.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2579.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2579.x * cbModelParam._m0[1u].z;
        }
        _1752 = frontier_phi_25_49_ladder_2;
        _1754 = frontier_phi_25_49_ladder_1;
        _1756 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1736 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_733, _734, _735), _1662);
        _1752 = _1736.x * cbModelParam._m0[1u].z;
        _1754 = _1736.y * cbModelParam._m0[1u].z;
        _1756 = _1736.z * cbModelParam._m0[1u].z;
    }
    float _1768 = ((((1.0 - _754) * ((_741 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_754 * _741)) * _725;
    float _1769 = _1768 * ((cbModelParam._m0[1u].w * (_1752 - _1653)) + _1653);
    float _1770 = _1768 * ((cbModelParam._m0[1u].w * (_1754 - _1655)) + _1655);
    float _1771 = _1768 * ((cbModelParam._m0[1u].w * (_1756 - _1657)) + _1657);
    float _1774 = fma(_1771, cbSceneParam._m0[89u].z, fma(_1770, cbSceneParam._m0[89u].y, _1769 * cbSceneParam._m0[89u].x));
    float _1777 = fma(_1771, cbSceneParam._m0[90u].z, fma(_1770, cbSceneParam._m0[90u].y, _1769 * cbSceneParam._m0[90u].x));
    float _1780 = fma(_1771, cbSceneParam._m0[91u].z, fma(_1770, cbSceneParam._m0[91u].y, _1769 * cbSceneParam._m0[91u].x));
    uvec4 _1790 = floatBitsToUint(cbInstanceData._m0[_700 + 5u]);
    uint _1792 = _1790.x * 14u;
    uint _1793 = _1792 + 13u;
    float _1800 = _725 + (-1.0);
    float _1805 = (cbLight._m0[_1793].x * _1800) + 1.0;
    float _1806 = (cbLight._m0[_1793].y * _1800) + 1.0;
    float _1807 = (cbLight._m0[_1793].z * _1800) + 1.0;
    float _1808 = (cbLight._m0[_1793].w * _1800) + 1.0;
    uint _1809 = _1792 + 5u;
    float _1815 = isnan(1.0) ? _1806 : (isnan(_1806) ? 1.0 : min(_1806, 1.0));
    uint _1819 = _1792 + 4u;
    float _1826 = isnan(1.0) ? _1805 : (isnan(_1805) ? 1.0 : min(_1805, 1.0));
    uint _1830 = _1792 | 1u;
    float _1841 = dot(vec3(cbLight._m0[_1792].xyz), vec3(_559, _560, _561));
    float _1844 = dot(vec3(cbLight._m0[_1830].xyz), vec3(_559, _560, _561));
    float _4057 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
    float _4068 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
    float _1849 = (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))) * 0.3183098733425140380859375;
    float _1851 = (isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0))) * 0.3183098733425140380859375;
    float _1858 = ((cbLight._m0[_1809].x * _1815) * _1851) + ((cbLight._m0[_1819].x * _1826) * _1849);
    float _1859 = ((_1815 * cbLight._m0[_1809].y) * _1851) + ((_1826 * cbLight._m0[_1819].y) * _1849);
    float _1860 = ((_1815 * cbLight._m0[_1809].z) * _1851) + ((_1826 * cbLight._m0[_1819].z) * _1849);
    uvec4 _1864 = floatBitsToUint(cbLight._m0[_1792 + 12u]);
    bool _1866 = _1864.x == 0u;
    float _1877;
    float _1879;
    float _1881;
    if (_1866)
    {
        _1877 = _1858;
        _1879 = _1859;
        _1881 = _1860;
    }
    else
    {
        uint _1885 = _1792 + 6u;
        float _1901 = (dot(vec3(cbLight._m0[_1792 + 2u].xyz), vec3(_559, _560, _561)) * 0.5) + 0.5;
        float _1902 = _1901 * _1901;
        float _4079 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
        float _1903 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
        float _1904 = isnan(1.0) ? _1807 : (isnan(_1807) ? 1.0 : min(_1807, 1.0));
        _1877 = (((cbLight._m0[_1885].x * 0.3183098733425140380859375) * _1903) * _1904) + _1858;
        _1879 = (((cbLight._m0[_1885].y * 0.3183098733425140380859375) * _1903) * _1904) + _1859;
        _1881 = (((cbLight._m0[_1885].z * 0.3183098733425140380859375) * _1903) * _1904) + _1860;
    }
    bool _1884 = _1864.y == 0u;
    float _1922;
    float _1924;
    float _1926;
    if (_1884)
    {
        _1922 = _1877;
        _1924 = _1879;
        _1926 = _1881;
    }
    else
    {
        uint _2081 = _1792 + 7u;
        float _2097 = (dot(vec3(cbLight._m0[_1792 + 3u].xyz), vec3(_559, _560, _561)) * 0.5) + 0.5;
        float _2098 = _2097 * _2097;
        float _4095 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
        float _2099 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _2100 = isnan(1.0) ? _1808 : (isnan(_1808) ? 1.0 : min(_1808, 1.0));
        _1922 = (((cbLight._m0[_2081].x * 0.3183098733425140380859375) * _2099) * _2100) + _1877;
        _1924 = (((cbLight._m0[_2081].y * 0.3183098733425140380859375) * _2099) * _2100) + _1879;
        _1926 = (((cbLight._m0[_2081].z * 0.3183098733425140380859375) * _2099) * _2100) + _1881;
    }
    uint _1929 = _1792 + 8u;
    float _1942 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1792].w)) * _562) * 0.949999988079071044921875);
    float _1943 = _1942 * _1942;
    float _1944 = cbLight._m0[_1792].x + _639;
    float _1945 = cbLight._m0[_1792].y + _640;
    float _1946 = cbLight._m0[_1792].z + _641;
    float _1950 = inversesqrt(dot(vec3(_1944, _1945, _1946), vec3(_1944, _1945, _1946)));
    float _1951 = _1950 * _1944;
    float _1952 = _1950 * _1945;
    float _1953 = _1950 * _1946;
    float _1954 = dot(vec3(_559, _560, _561), vec3(cbLight._m0[_1792].xyz));
    float _4111 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
    float _1957 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
    float _4122 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _1958 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
    float _1959 = dot(vec3(_559, _560, _561), vec3(_1951, _1952, _1953));
    float _4133 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
    float _1962 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
    float _1963 = dot(vec3(cbLight._m0[_1792].xyz), vec3(_1951, _1952, _1953));
    float _4144 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
    float _1967 = _1943 * _1943;
    float _1971 = ((_1962 * _1962) * (_1967 + (-1.0))) + 1.0;
    float _1982 = (exp2(log2(1.0 - (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1983 = 1.0 - _1943;
    float _1994 = (0.5 / (((_1958 * ((_1957 * _1983) + _1943)) + 9.9999999392252902907785028219223e-09) + (((_1958 * _1983) + _1943) * _1957))) * _1957;
    float _4155 = isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0));
    float _1996 = (isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * (_1967 / ((_1971 * _1971) * 3.141590118408203125));
    uint _2007 = _1792 + 9u;
    float _2018 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1830].w)) * _562) * 0.949999988079071044921875);
    float _2019 = _2018 * _2018;
    float _2020 = cbLight._m0[_1830].x + _639;
    float _2021 = cbLight._m0[_1830].y + _640;
    float _2022 = cbLight._m0[_1830].z + _641;
    float _2026 = inversesqrt(dot(vec3(_2020, _2021, _2022), vec3(_2020, _2021, _2022)));
    float _2027 = _2026 * _2020;
    float _2028 = _2026 * _2021;
    float _2029 = _2026 * _2022;
    float _2030 = dot(vec3(_559, _560, _561), vec3(cbLight._m0[_1830].xyz));
    float _4166 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
    float _2033 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
    float _2034 = dot(vec3(_559, _560, _561), vec3(_2027, _2028, _2029));
    float _4177 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
    float _2037 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
    float _2038 = dot(vec3(cbLight._m0[_1830].xyz), vec3(_2027, _2028, _2029));
    float _4188 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
    float _2042 = _2019 * _2019;
    float _2046 = ((_2037 * _2037) * (_2042 + (-1.0))) + 1.0;
    float _2055 = (exp2(log2(1.0 - (isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2056 = 1.0 - _2019;
    float _2066 = (0.5 / (((_1958 * ((_2033 * _2056) + _2019)) + 9.9999999392252902907785028219223e-09) + (((_1958 * _2056) + _2019) * _2033))) * _2033;
    float _4199 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
    float _2068 = (isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0))) * (_2042 / ((_2046 * _2046) * 3.141590118408203125));
    float _2078 = (((_2055 * cbLight._m0[_2007].x) * _2068) * _1815) + (((_1982 * cbLight._m0[_1929].x) * _1996) * _1826);
    float _2079 = (((_2055 * cbLight._m0[_2007].y) * _2068) * _1815) + (((_1982 * cbLight._m0[_1929].y) * _1996) * _1826);
    float _2080 = (((_2055 * cbLight._m0[_2007].z) * _2068) * _1815) + (((_1982 * cbLight._m0[_1929].z) * _1996) * _1826);
    float _2142;
    float _2144;
    float _2146;
    if (_1866)
    {
        _2142 = _2078;
        _2144 = _2079;
        _2146 = _2080;
    }
    else
    {
        uint _2148 = _1792 + 2u;
        uint _2152 = _1792 + 10u;
        float _2166 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2148].w)) * _562) * 0.949999988079071044921875);
        float _2167 = _2166 * _2166;
        float _2168 = cbLight._m0[_2148].x + _639;
        float _2169 = cbLight._m0[_2148].y + _640;
        float _2170 = cbLight._m0[_2148].z + _641;
        float _2174 = inversesqrt(dot(vec3(_2168, _2169, _2170), vec3(_2168, _2169, _2170)));
        float _2175 = _2174 * _2168;
        float _2176 = _2174 * _2169;
        float _2177 = _2174 * _2170;
        float _2178 = dot(vec3(_559, _560, _561), vec3(cbLight._m0[_2148].xyz));
        float _4210 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
        float _2181 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _2182 = dot(vec3(_559, _560, _561), vec3(_2175, _2176, _2177));
        float _4221 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
        float _2185 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _2186 = dot(vec3(cbLight._m0[_2148].xyz), vec3(_2175, _2176, _2177));
        float _4232 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
        float _2190 = _2167 * _2167;
        float _2194 = ((_2185 * _2185) * (_2190 + (-1.0))) + 1.0;
        float _2203 = (exp2(log2(1.0 - (isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2204 = 1.0 - _2167;
        float _2214 = (0.5 / (((_1958 * ((_2181 * _2204) + _2167)) + 9.9999999392252902907785028219223e-09) + (((_1958 * _2204) + _2167) * _2181))) * _2181;
        float _4243 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
        float _2216 = (isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0))) * (_2190 / ((_2194 * _2194) * 3.141590118408203125));
        float _2217 = isnan(1.0) ? _1807 : (isnan(_1807) ? 1.0 : min(_1807, 1.0));
        _2142 = (((_2203 * cbLight._m0[_2152].x) * _2216) * _2217) + _2078;
        _2144 = (((_2203 * cbLight._m0[_2152].y) * _2216) * _2217) + _2079;
        _2146 = (((_2203 * cbLight._m0[_2152].z) * _2216) * _2217) + _2080;
    }
    float _2252;
    float _2254;
    float _2256;
    if (_1884)
    {
        _2252 = _2142;
        _2254 = _2144;
        _2256 = _2146;
    }
    else
    {
        uint _2263 = _1792 + 3u;
        uint _2267 = _1792 + 11u;
        float _2281 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2263].w)) * _562) * 0.949999988079071044921875);
        float _2282 = _2281 * _2281;
        float _2283 = cbLight._m0[_2263].x + _639;
        float _2284 = cbLight._m0[_2263].y + _640;
        float _2285 = cbLight._m0[_2263].z + _641;
        float _2289 = inversesqrt(dot(vec3(_2283, _2284, _2285), vec3(_2283, _2284, _2285)));
        float _2290 = _2289 * _2283;
        float _2291 = _2289 * _2284;
        float _2292 = _2289 * _2285;
        float _2293 = dot(vec3(_559, _560, _561), vec3(cbLight._m0[_2263].xyz));
        float _4259 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
        float _2296 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
        float _2297 = dot(vec3(_559, _560, _561), vec3(_2290, _2291, _2292));
        float _4270 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
        float _2300 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
        float _2301 = dot(vec3(cbLight._m0[_2263].xyz), vec3(_2290, _2291, _2292));
        float _4281 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
        float _2305 = _2282 * _2282;
        float _2309 = ((_2300 * _2300) * (_2305 + (-1.0))) + 1.0;
        float _2318 = (exp2(log2(1.0 - (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2319 = 1.0 - _2282;
        float _2329 = (0.5 / (((_1958 * ((_2296 * _2319) + _2282)) + 9.9999999392252902907785028219223e-09) + (((_1958 * _2319) + _2282) * _2296))) * _2296;
        float _4292 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
        float _2331 = (isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0))) * (_2305 / ((_2309 * _2309) * 3.141590118408203125));
        float _2332 = isnan(1.0) ? _1808 : (isnan(_1808) ? 1.0 : min(_1808, 1.0));
        _2252 = (((_2318 * cbLight._m0[_2267].x) * _2331) * _2332) + _2142;
        _2254 = (((_2318 * cbLight._m0[_2267].y) * _2331) * _2332) + _2144;
        _2256 = (((_2318 * cbLight._m0[_2267].z) * _2331) * _2332) + _2146;
    }
    float _2467;
    float _2469;
    float _2471;
    float _2473;
    float _2475;
    float _2477;
    if (_1790.y == 0u)
    {
        float _2407 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2408 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2407;
        float _2409 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2407;
        float _2410 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2407;
        uvec4 _2422 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2423 = _2422.x;
        uint _2434 = uint((float(_2422.y) * floor(float(uint(cbSceneParam._m0[85u].y * _661) / _2423))) + floor(float(uint(cbSceneParam._m0[85u].x * _660) / _2423)));
        float _2444 = (log2(_2410 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2445 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
        uint _2448 = uint(isnan(14.0) ? _2445 : (isnan(_2445) ? 14.0 : min(_2445, 14.0)));
        uvec4 _2453 = texelFetch(g_lightClusterGridBuffer, int(((_2448 << 2u) + (_2434 << 6u)) >> 2u));
        uint _2454 = _2453.x;
        uint _2455 = _2422.z;
        float _2584;
        float _2586;
        float _2588;
        float _2590;
        float _2592;
        float _2594;
        if (((((1u << ((_2455 >> 4u) & 15u)) + 4294967295u) & _2454) == 0u) || ((_2455 & 240u) == 0u))
        {
            _2584 = 0.0;
            _2586 = 0.0;
            _2588 = 0.0;
            _2590 = 0.0;
            _2592 = 0.0;
            _2594 = 0.0;
        }
        else
        {
            float _2585;
            float _2587;
            float _2589;
            float _2591;
            float _2593;
            float _2595;
            float _2745 = 0.0;
            float _2746 = 0.0;
            float _2747 = 0.0;
            float _2748 = 0.0;
            float _2749 = 0.0;
            float _2750 = 0.0;
            uint _2751 = 0u;
            uint _2760;
            bool _2761;
            for (;;)
            {
                _2760 = texelFetch(g_lightClassification, int((((_2448 << 5u) + (_2434 << 9u)) + (_2751 << 2u)) >> 2u)).x;
                _2761 = _2760 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2761)
                {
                    frontier_phi_66_pred = _2745;
                    frontier_phi_66_pred_1 = _2750;
                    frontier_phi_66_pred_2 = _2749;
                    frontier_phi_66_pred_3 = _2748;
                    frontier_phi_66_pred_4 = _2747;
                    frontier_phi_66_pred_5 = _2746;
                }
                else
                {
                    float _2890;
                    float _2891;
                    float _2892;
                    float _2893;
                    float _2894;
                    float _2895;
                    uint _2896;
                    _2890 = _2745;
                    _2891 = _2746;
                    _2892 = _2747;
                    _2893 = _2748;
                    _2894 = _2749;
                    _2895 = _2750;
                    _2896 = _2760;
                    float _2817;
                    float _2818;
                    float _2819;
                    float _2820;
                    float _2821;
                    float _2822;
                    for (;;)
                    {
                        uint _2900 = uint(findLSB(_2896)) + (_2751 << 5u);
                        uint _2897 = (_2896 + 4294967295u) & _2896;
                        uint _2902 = _2900 * 48u;
                        vec4 _2916 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2902)).x, texelFetch(g_PointLightRenderingBuffer, int(_2902 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2902 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2902 + 3u)).x));
                        uint _2922 = (_2900 * 48u) + 4u;
                        vec4 _2935 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2922)).x, texelFetch(g_PointLightRenderingBuffer, int(_2922 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2922 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2922 + 3u)).x));
                        uint _2941 = (_2900 * 48u) + 8u;
                        vec3 _2952 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2941)).x, texelFetch(g_PointLightRenderingBuffer, int(_2941 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2941 + 2u)).x));
                        float _2956 = _2916.x - _2408;
                        float _2957 = _2916.y - _2409;
                        float _2958 = _2916.z - _2410;
                        float _2959 = dot(vec3(_2956, _2957, _2958), vec3(_2956, _2957, _2958));
                        float _2962 = inversesqrt(_2959);
                        float _2963 = _2962 * _2956;
                        float _2964 = _2962 * _2957;
                        float _2965 = _2962 * _2958;
                        float _2966 = dot(vec3(_681, _684, _687), vec3(_2963, _2964, _2965));
                        float _2971 = 1.0 - (_2959 * _2916.w);
                        float _4318 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0));
                        float _2972 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
                        float _2973 = sqrt(_2959) * _2935.w;
                        float _2976 = 1.39999997615814208984375 / (_2973 + 1.39999997615814208984375);
                        float _2977 = _2976 * _2976;
                        float _2980 = ((1.0 - _2977) * _2966) + _2977;
                        float _2983 = _2973 * _2973;
                        float _2987 = ((isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0))) * _2972) / ((_2983 * 0.699999988079071044921875) + 1.0);
                        float _2991 = (-0.0) - _2408;
                        float _2992 = (-0.0) - _2409;
                        float _2993 = (-0.0) - _2410;
                        float _2997 = inversesqrt(dot(vec3(_2991, _2992, _2993), vec3(_2991, _2992, _2993)));
                        float _2998 = _2997 * _2991;
                        float _2999 = _2997 * _2992;
                        float _3000 = _2997 * _2993;
                        float _3008 = exp2(log2(1.0 / ((_2983 * 3.5) + 5.0)) * 0.25);
                        float _3009 = 1.0 - _741;
                        float _3016 = sqrt(1.0 - ((1.0 - (_3009 * _3009)) * (1.0 - (_3008 * _3008))));
                        float _3017 = _3016 * _3016;
                        float _3018 = _3017 * _3017;
                        float _3019 = _2998 + _2963;
                        float _3020 = _2999 + _2964;
                        float _3021 = _3000 + _2965;
                        float _3025 = inversesqrt(dot(vec3(_3019, _3020, _3021), vec3(_3019, _3020, _3021)));
                        float _3029 = dot(vec3(_681, _684, _687), vec3(_2998, _2999, _3000));
                        float _4334 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0));
                        float _3032 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
                        float _3033 = dot(vec3(_681, _684, _687), vec3(_3025 * _3019, _3025 * _3020, _3025 * _3021));
                        float _4345 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0));
                        float _3036 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
                        float _3040 = ((_3036 * _3036) * (_3018 + (-1.0))) + 1.0;
                        float _3041 = _2976 * _3017;
                        float _3042 = _3041 * _3041;
                        float _3045 = ((1.0 - _3042) * _2966) + _3042;
                        float _4356 = isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : max(_3045, 0.0));
                        float _3046 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
                        float _3047 = 1.0 - _3017;
                        float _3057 = (0.5 / (((_3046 * ((_3032 * _3047) + _3017)) + 9.9999999392252902907785028219223e-09) + (((_3046 * _3047) + _3017) * _3032))) * _3046;
                        float _4367 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0));
                        float _3068 = (((_3018 * 3.1415927410125732421875) * (isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0)))) / ((_3040 * _3040) * ((_2983 * 2.1991131305694580078125) + 3.141590118408203125))) * _2972;
                        _2820 = (_2987 * _2935.x) + _2893;
                        _2821 = (_2987 * _2935.y) + _2894;
                        _2822 = (_2987 * _2935.z) + _2895;
                        _2817 = (_3068 * _2952.x) + _2890;
                        _2818 = (_3068 * _2952.y) + _2891;
                        _2819 = (_3068 * _2952.z) + _2892;
                        if (_2897 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2890 = _2817;
                            _2891 = _2818;
                            _2892 = _2819;
                            _2893 = _2820;
                            _2894 = _2821;
                            _2895 = _2822;
                            _2896 = _2897;
                        }
                    }
                    frontier_phi_66_pred = _2817;
                    frontier_phi_66_pred_1 = _2822;
                    frontier_phi_66_pred_2 = _2821;
                    frontier_phi_66_pred_3 = _2820;
                    frontier_phi_66_pred_4 = _2819;
                    frontier_phi_66_pred_5 = _2818;
                }
                _2585 = frontier_phi_66_pred;
                _2595 = frontier_phi_66_pred_1;
                _2593 = frontier_phi_66_pred_2;
                _2591 = frontier_phi_66_pred_3;
                _2589 = frontier_phi_66_pred_4;
                _2587 = frontier_phi_66_pred_5;
                uint _2752 = _2751 + 1u;
                if (_2752 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2745 = _2585;
                    _2746 = _2587;
                    _2747 = _2589;
                    _2748 = _2591;
                    _2749 = _2593;
                    _2750 = _2595;
                    _2751 = _2752;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2584 = _2585;
            _2586 = _2587;
            _2588 = _2589;
            _2590 = _2591;
            _2592 = _2593;
            _2594 = _2595;
        }
        uvec4 _2598 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2599 = _2598.z;
        uint _2601 = (_2599 >> 8u) & 15u;
        float _2713;
        float _2715;
        float _2717;
        float _2719;
        float _2721;
        float _2723;
        if (((4294967295u << _2601) & _2454) == 0u)
        {
            _2713 = _2584;
            _2715 = _2586;
            _2717 = _2588;
            _2719 = _2590;
            _2721 = _2592;
            _2723 = _2594;
        }
        else
        {
            float _2738 = inversesqrt(dot(vec3(_2408, _2409, _2410), vec3(_2408, _2409, _2410)));
            float _2739 = _2738 * _2408;
            float _2740 = _2738 * _2409;
            float _2741 = _2738 * _2410;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2601 < ((_2599 >> 12u) & 15u))
            {
                float _2714;
                float _2716;
                float _2718;
                float _2720;
                float _2722;
                float _2724;
                float _2873 = _2584;
                float _2874 = _2586;
                float _2875 = _2588;
                float _2876 = _2590;
                float _2877 = _2592;
                float _2878 = _2594;
                uint _2879 = _2601;
                uint _2888;
                bool _2889;
                for (;;)
                {
                    _2888 = texelFetch(g_lightClassification, int((((_2448 << 5u) + (_2434 << 9u)) + (_2879 << 2u)) >> 2u)).x;
                    _2889 = _2888 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2889)
                    {
                        frontier_phi_77_pred = _2878;
                        frontier_phi_77_pred_1 = _2877;
                        frontier_phi_77_pred_2 = _2876;
                        frontier_phi_77_pred_3 = _2875;
                        frontier_phi_77_pred_4 = _2874;
                        frontier_phi_77_pred_5 = _2873;
                    }
                    else
                    {
                        float _3082;
                        float _3083;
                        float _3084;
                        float _3085;
                        float _3086;
                        float _3087;
                        float _3376;
                        float _3377;
                        float _3378;
                        float _3379;
                        float _3380;
                        float _3381;
                        float _3095 = _2873;
                        float _3096 = _2874;
                        float _3097 = _2875;
                        float _3098 = _2876;
                        float _3099 = _2877;
                        float _3100 = _2878;
                        uint _3101 = _2888;
                        uint _3102;
                        vec4 _3127;
                        float _3128;
                        vec4 _3143;
                        vec3 _3155;
                        vec4 _3170;
                        vec4 _3185;
                        float _3232;
                        bool _3233;
                        for (;;)
                        {
                            uint _3112 = ((_2879 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3101));
                            _3102 = (_3101 + 4294967295u) & _3101;
                            uint _3114 = _3112 * 40u;
                            _3127 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3114)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 3u)).x));
                            _3128 = _3127.w;
                            uint _3130 = (_3112 * 40u) + 4u;
                            _3143 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3130)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 3u)).x));
                            uint _3145 = (_3112 * 40u) + 8u;
                            _3155 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3145)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 2u)).x));
                            uint _3157 = (_3112 * 40u) + 16u;
                            _3170 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3157)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 3u)).x));
                            uint _3172 = (_3112 * 40u) + 20u;
                            _3185 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3172)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 3u)).x));
                            uint _3188 = (_3112 * 40u) + 24u;
                            vec4 _3201 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3188)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 3u)).x));
                            uint _3207 = (_3112 * 40u) + 28u;
                            vec4 _3220 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3207)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 3u)).x));
                            _3232 = fma(_2410, _3220.z, fma(_2409, _3220.y, _3220.x * _2408)) + _3220.w;
                            _3233 = !((fma(_2410, _3201.z, fma(_2409, _3201.y, _3201.x * _2408)) + _3201.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3233)
                            {
                                float _3260 = _3127.x - _2408;
                                float _3261 = _3127.y - _2409;
                                float _3262 = _3127.z - _2410;
                                float _3263 = dot(vec3(_3260, _3261, _3262), vec3(_3260, _3261, _3262));
                                float _3266 = inversesqrt(_3263);
                                float _3267 = _3266 * _3260;
                                float _3268 = _3266 * _3261;
                                float _3269 = _3266 * _3262;
                                float _3273 = 1.0 - (_3263 / (_3128 * _3128));
                                float _4378 = isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0));
                                float _3274 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
                                float _3278 = sqrt(_3263) * _3143.w;
                                float _3280 = 1.39999997615814208984375 / (_3278 + 1.39999997615814208984375);
                                float _3281 = _3280 * _3280;
                                float _3284 = ((1.0 - _3281) * dot(vec3(_3267, _3268, _3269), vec3(_681, _684, _687))) + _3281;
                                float _3287 = _3278 * _3278;
                                float _3291 = (fma(_2410, _3170.z, fma(_2409, _3170.y, _3170.x * _2408)) + _3170.w) / _3232;
                                float _3292 = (fma(_2410, _3185.z, fma(_2409, _3185.y, _3185.x * _2408)) + _3185.w) / _3232;
                                float _3296 = 1.0 - dot(vec2(_3291, _3292), vec2(_3291, _3292));
                                float _4394 = isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0));
                                float _3297 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
                                float _3298 = _3297 * (((isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0))) * _3274) / ((_3287 * 0.699999988079071044921875) + 1.0));
                                float _3310 = exp2(log2(1.0 / ((_3287 * 3.5) + 5.0)) * 0.25);
                                float _3311 = 1.0 - _741;
                                float _3318 = sqrt(1.0 - ((1.0 - (_3311 * _3311)) * (1.0 - (_3310 * _3310))));
                                float _3319 = _3318 * _3318;
                                float _3320 = _3319 * _3319;
                                float _3321 = _3267 - _2739;
                                float _3322 = _3268 - _2740;
                                float _3323 = _3269 - _2741;
                                float _3327 = inversesqrt(dot(vec3(_3321, _3322, _3323), vec3(_3321, _3322, _3323)));
                                float _3331 = dot(vec3(_681, _684, _687), vec3((-0.0) - _2739, (-0.0) - _2740, (-0.0) - _2741));
                                float _4405 = isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0));
                                float _3334 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
                                float _3335 = dot(vec3(_681, _684, _687), vec3(_3327 * _3321, _3327 * _3322, _3327 * _3323));
                                float _4416 = isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0));
                                float _3338 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
                                float _3342 = ((_3338 * _3338) * (_3320 + (-1.0))) + 1.0;
                                float _3343 = _3280 * _3319;
                                float _3344 = _3343 * _3343;
                                float _3350 = ((1.0 - _3344) * dot(vec3(_681, _684, _687), vec3(_3267, _3268, _3269))) + _3344;
                                float _4427 = isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0));
                                float _3351 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
                                float _3352 = 1.0 - _3319;
                                float _3362 = (0.5 / (((_3351 * ((_3334 * _3352) + _3319)) + 9.9999999392252902907785028219223e-09) + (((_3351 * _3352) + _3319) * _3334))) * _3351;
                                float _4438 = isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0));
                                float _3372 = (_3297 * _3274) * (((_3320 * 3.1415927410125732421875) * (isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0)))) / ((_3342 * _3342) * ((_3287 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3298 * _3143.y;
                                frontier_phi_83_pred_1 = _3298 * _3143.x;
                                frontier_phi_83_pred_2 = _3372 * _3155.z;
                                frontier_phi_83_pred_3 = _3372 * _3155.y;
                                frontier_phi_83_pred_4 = _3372 * _3155.x;
                                frontier_phi_83_pred_5 = _3298 * _3143.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3380 = frontier_phi_83_pred;
                            _3379 = frontier_phi_83_pred_1;
                            _3378 = frontier_phi_83_pred_2;
                            _3377 = frontier_phi_83_pred_3;
                            _3376 = frontier_phi_83_pred_4;
                            _3381 = frontier_phi_83_pred_5;
                            _3085 = _3379 + _3098;
                            _3086 = _3380 + _3099;
                            _3087 = _3381 + _3100;
                            _3082 = _3376 + _3095;
                            _3083 = _3377 + _3096;
                            _3084 = _3378 + _3097;
                            if (_3102 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3095 = _3082;
                                _3096 = _3083;
                                _3097 = _3084;
                                _3098 = _3085;
                                _3099 = _3086;
                                _3100 = _3087;
                                _3101 = _3102;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3087;
                        frontier_phi_77_pred_1 = _3086;
                        frontier_phi_77_pred_2 = _3085;
                        frontier_phi_77_pred_3 = _3084;
                        frontier_phi_77_pred_4 = _3083;
                        frontier_phi_77_pred_5 = _3082;
                    }
                    _2724 = frontier_phi_77_pred;
                    _2722 = frontier_phi_77_pred_1;
                    _2720 = frontier_phi_77_pred_2;
                    _2718 = frontier_phi_77_pred_3;
                    _2716 = frontier_phi_77_pred_4;
                    _2714 = frontier_phi_77_pred_5;
                    uint _2880 = _2879 + 1u;
                    if (_2880 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2873 = _2714;
                        _2874 = _2716;
                        _2875 = _2718;
                        _2876 = _2720;
                        _2877 = _2722;
                        _2878 = _2724;
                        _2879 = _2880;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2718;
                frontier_phi_58_59_ladder_1 = _2724;
                frontier_phi_58_59_ladder_2 = _2722;
                frontier_phi_58_59_ladder_3 = _2720;
                frontier_phi_58_59_ladder_4 = _2716;
                frontier_phi_58_59_ladder_5 = _2714;
            }
            else
            {
                frontier_phi_58_59_ladder = _2588;
                frontier_phi_58_59_ladder_1 = _2594;
                frontier_phi_58_59_ladder_2 = _2592;
                frontier_phi_58_59_ladder_3 = _2590;
                frontier_phi_58_59_ladder_4 = _2586;
                frontier_phi_58_59_ladder_5 = _2584;
            }
            _2713 = frontier_phi_58_59_ladder_5;
            _2715 = frontier_phi_58_59_ladder_4;
            _2717 = frontier_phi_58_59_ladder;
            _2719 = frontier_phi_58_59_ladder_3;
            _2721 = frontier_phi_58_59_ladder_2;
            _2723 = frontier_phi_58_59_ladder_1;
        }
        float _2728 = isnan(1.0) ? _725 : (isnan(_725) ? 1.0 : min(_725, 1.0));
        _2467 = (_2728 * _2719) + _1922;
        _2469 = (_2728 * _2721) + _1924;
        _2471 = (_2728 * _2723) + _1926;
        _2473 = ((_2713 * 0.039999999105930328369140625) * _2728) + _2252;
        _2475 = ((_2715 * 0.039999999105930328369140625) * _2728) + _2254;
        _2477 = ((_2717 * 0.039999999105930328369140625) * _2728) + _2256;
    }
    else
    {
        _2467 = _1922;
        _2469 = _1924;
        _2471 = _1926;
        _2473 = _2252;
        _2475 = _2254;
        _2477 = _2256;
    }
    uint _2483 = _701 + uint(cbMatDynParam._m0[0u].w);
    float _2489 = ((((((_475.x - _472) * _408) + _472) * cbMtdParam._m0[13u].x) + ((((_429.x - _426) * _408) + _426) * cbMtdParam._m0[11u].x)) * _290) * cbInstanceData._m0[_2483].x;
    float _2490 = ((((((_475.y - _473) * _408) + _473) * cbMtdParam._m0[13u].y) + ((((_429.y - _427) * _408) + _427) * cbMtdParam._m0[11u].y)) * _290) * cbInstanceData._m0[_2483].y;
    float _2491 = ((((((_475.z - _474) * _408) + _474) * cbMtdParam._m0[13u].z) + ((((_429.z - _428) * _408) + _428) * cbMtdParam._m0[11u].z)) * _290) * cbInstanceData._m0[_2483].z;
    float _4454 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _4465 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _4476 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _2508 = (((isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0))) * (_2467 + ((isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0))) * _725))) + ((_2473 + ((isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0))) * _1562)) * cbPerFrame._m0[3u].x)) + _2489;
    float _2510 = (_2490 + ((_2475 + ((isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0))) * _1562)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0))) * (_2469 + ((isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0))) * _725)));
    float _2512 = (_2491 + ((_2477 + ((isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0))) * _1562)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0))) * (_2471 + ((isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0))) * _725)));
    float _2513 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
    float _2514 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
    float _2515 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
    float _2521 = cbMtdParam._m0[2u].x * _2489;
    float _2522 = cbMtdParam._m0[2u].y * _2490;
    float _2523 = cbMtdParam._m0[2u].z * _2491;
    float _4502 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2525 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
    uint _2526 = _700 + 6u;
    float _2534 = _660 / cbSceneParam._m0[86u].x;
    float _2535 = _661 / cbSceneParam._m0[86u].y;
    vec4 _2549 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2534, _2535, (log2((isnan(cbSceneParam._m0[77u].w) ? _581 : (isnan(_581) ? cbSceneParam._m0[77u].w : min(_581, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2551 = _2549.x;
    float _2552 = _2549.y;
    float _2553 = _2549.z;
    float _2554 = _2549.w;
    float _2646;
    float _2648;
    float _2650;
    float _2652;
    if (_581 > cbSceneParam._m0[78u].w)
    {
        float _2609 = isnan(_581) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _581 : min(cbSceneParam._m0[80u].w, _581));
        float _2610 = _2609 / _581;
        float _2621 = _2610 * _632;
        float _2622 = _633 * _2610;
        float _2623 = (-0.0) - _2622;
        float _2624 = _2610 * _634;
        float _2626 = (cbSceneParam._m0[77u].w * _2623) / _2609;
        float _2627 = _2626 + cbSceneParam._m0[79u].w;
        float _2628 = cbSceneParam._m0[79u].w - _2622;
        float _2634 = sqrt(((_2621 * _2621) + (_2622 * _2622)) + (_2624 * _2624));
        float _2637 = (1.0 - (cbSceneParam._m0[77u].w / _2609)) * _2634;
        float _2642 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2644 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2830;
        if (abs((_2623 - _2626) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2830 = ((((_2627 > 0.0) ? exp2(_2642 * _2627) : (2.0 - exp2(_2644 * _2627))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2637;
        }
        else
        {
            float _2774 = 1.0 / cbSceneParam._m0[80u].x;
            float _2775 = isnan(_2628) ? _2627 : (isnan(_2627) ? _2628 : max(_2627, _2628));
            float _2776 = isnan(_2628) ? _2627 : (isnan(_2627) ? _2628 : min(_2627, _2628));
            float _2785 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : min(_2775, 0.0));
            float _2786 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : min(_2776, 0.0));
            _2830 = ((abs(_2634 / _2623) * cbSceneParam._m0[80u].y) * ((((_2785 - _2786) * 2.0) - ((exp2(_2642 * (isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0)))) - exp2(_2642 * (isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0))))) * _2774)) - ((exp2(_2644 * _2785) - exp2(_2644 * _2786)) * _2774))) + (_2637 * cbSceneParam._m0[80u].z);
        }
        vec4 _2832 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2534, _2535, 1.0), 0.0);
        float _2841 = exp2((_2830 * (-1.44269502162933349609375)) * (1.0 - _2832.w));
        float _2842 = log2(_2841);
        float _2858 = log2(_2554);
        _2646 = (exp2(_2858 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2842 * cbSceneParam._m0[78u].x)) * _2832.x) / cbSceneParam._m0[78u].x)) + _2551;
        _2648 = (exp2(_2858 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2842 * cbSceneParam._m0[78u].y)) * _2832.y) / cbSceneParam._m0[78u].y)) + _2552;
        _2650 = (exp2(_2858 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2842 * cbSceneParam._m0[78u].z)) * _2832.z) / cbSceneParam._m0[78u].z)) + _2553;
        _2652 = _2841 * _2554;
    }
    else
    {
        _2646 = _2551;
        _2648 = _2552;
        _2650 = _2553;
        _2652 = _2554;
    }
    bool _2868;
    vec4 _2662;
    vec4 _2684;
    float _2686;
    float _2690;
    float _2691;
    float _2692;
    float _2695;
    float _2698;
    float _2701;
    float _2702;
    bool _2712;
    for (;;)
    {
        _2662 = cbMatDynParam._m0[0u];
        float _2664 = roundEven(_2662.y);
        bool _2665 = _2664 == 3.0;
        float _2666 = log2(_2652);
        float _2670 = exp2(_2666 * cbSceneParam._m0[78u].x);
        float _2671 = exp2(_2666 * cbSceneParam._m0[78u].y);
        float _2672 = exp2(_2666 * cbSceneParam._m0[78u].z);
        float _2673 = _2670 * _2513;
        float _2674 = _2671 * _2514;
        float _2675 = _2672 * _2515;
        float _2682 = _648 + (-0.5);
        _2684 = cbMtdParam._m0[1u];
        _2686 = _2684.y * _2682;
        float _2689 = (_2664 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2690 = _2689 * (_2665 ? _2673 : (_2673 + (cbSceneParam._m0[72u].w * _2646)));
        _2691 = _2689 * (_2665 ? _2674 : (_2674 + (cbSceneParam._m0[72u].w * _2648)));
        _2692 = _2689 * (_2665 ? _2675 : (_2675 + (cbSceneParam._m0[72u].w * _2650)));
        _2695 = ((_2521 * _2525) * _2670) * _2689;
        _2698 = ((_2522 * _2525) * _2671) * _2689;
        _2701 = ((_2523 * _2525) * _2672) * _2689;
        _2702 = _2682 * 0.999000012874603271484375;
        _2712 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2712)
        {
            if ((cbInstanceData._m0[_700 + 7u].x + _2702) < 0.5)
            {
                _2868 = true;
                break;
            }
        }
        uint _2809 = _701 + uint(_2662.w);
        if ((cbInstanceData._m0[_2809].w < 1.0) && ((cbInstanceData._m0[_2809].w + _2702) < 0.5))
        {
            _2868 = true;
            break;
        }
        if ((_2686 + 1.0) < _2684.x)
        {
            _2868 = true;
            break;
        }
        _2868 = false;
        break;
    }
    float _3073;
    if (_2868)
    {
        discard_state = true;
        _3073 = 0.0;
    }
    else
    {
        _3073 = cbInstanceData._m0[_2526].w;
    }
    SV_Target.x = _2690;
    SV_Target.y = _2691;
    SV_Target.z = _2692;
    SV_Target.w = _3073;
    SV_Target_1.x = _2695;
    SV_Target_1.y = _2698;
    SV_Target_1.z = _2701;
    SV_Target_1.w = cbInstanceData._m0[_2526].w;
    discard_exit();
}


