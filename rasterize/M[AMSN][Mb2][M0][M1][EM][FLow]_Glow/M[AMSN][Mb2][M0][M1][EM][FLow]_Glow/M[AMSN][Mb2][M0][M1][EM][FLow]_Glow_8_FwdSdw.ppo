#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1119;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _199 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _200 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _201 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _207 = inversesqrt(dot(vec3(_199, _200, _201), vec3(_199, _200, _201)));
    float _214 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _243 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _249 = _243.x * cbMtdParam._m0[9u].x;
    float _250 = _243.y * cbMtdParam._m0[9u].y;
    float _251 = _243.z * cbMtdParam._m0[9u].z;
    vec4 _268 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _289 = TEXCOORD_9.x - ((cbMtdParam._m0[16u].y * (1.0 - TEXCOORD_9.x)) * (_268.x + 0.00999999977648258209228515625));
    float _291 = _289 * (cbMtdParam._m0[16u].z + 1.0);
    float _3768 = isnan(0.0) ? _291 : (isnan(_291) ? 0.0 : max(_291, 0.0));
    float _292 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
    float _300 = ((((cbMtdParam._m0[12u].x - _249) * TEXCOORD_9.x) * cbMtdParam._m0[16u].x) * _292) + _249;
    float _301 = ((((cbMtdParam._m0[12u].y - _250) * TEXCOORD_9.y) * cbMtdParam._m0[16u].x) * _292) + _250;
    float _302 = (((cbMtdParam._m0[16u].x * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _251)) * _292) + _251;
    vec4 _315 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[6u].w));
    float _317 = _315.x;
    vec4 _329 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _333 = _329.z;
    float _337 = (_329.x * 2.0) + (-1.0);
    float _339 = (_329.y * 2.0) + (-1.0);
    float _340 = dot(vec2(_337, _339), vec2(_337, _339));
    float _3779 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _345 = sqrt(1.0 - (isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))));
    float _351 = _289 * (cbMtdParam._m0[16u].y + 1.0);
    float _3790 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _355 = ((cbMtdParam._m0[15u].y - _333) * (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0)))) + _333;
    float _368 = (cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _369 = (cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _396 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * ((cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * ((cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[10u].w));
    float _401 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[15u].w;
    float _408 = ((_396.y * 0.5) + (-0.25)) * cbMtdParam._m0[15u].z;
    float _410 = (-0.0) - (cbMtdParam._m0[15u].z * ((_396.x * 0.5) + (-0.25)));
    float _412 = fract(_401);
    float _414 = fract(_401 + 0.5);
    float _415 = _412 * _410;
    float _416 = _408 * _412;
    float _419 = _414 * _410;
    float _420 = _408 * _414;
    float _425 = abs((_412 * 2.0) + (-1.0));
    vec4 _441 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_415 + _368) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_416 + _369) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _443 = _441.x;
    float _444 = _441.y;
    float _445 = _441.z;
    vec4 _446 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_419 + _368) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_420 + _369) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _473 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _474 = (cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _487 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_415 + _473) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_416 + _474) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _489 = _487.x;
    float _490 = _487.y;
    float _491 = _487.z;
    vec4 _492 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_419 + _473) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_420 + _474) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    vec4 _536 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[16u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, (((cbMtdParam._m0[17u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w));
    float _542 = (_536.x * 2.0) + (-1.0);
    float _543 = (_536.y * 2.0) + (-1.0);
    float _544 = dot(vec2(_542, _543), vec2(_542, _543));
    float _3801 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _560 = (_292 * (((cbMtdParam._m0[14u].z * _337) - _337) + _542)) + _337;
    float _561 = (_292 * (((cbMtdParam._m0[14u].z * _339) - _339) + _543)) + _339;
    float _562 = (_292 * (sqrt(1.0 - (isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0)))) - _345)) + _345;
    float _565 = fma(_562, _214 * NORMAL.x, fma(_561, _221 * TANGENT.x, (_207 * _199) * _560));
    float _568 = fma(_562, _214 * NORMAL.y, fma(_561, _221 * TANGENT.y, (_207 * _200) * _560));
    float _571 = fma(_562, _214 * NORMAL.z, fma(_561, _221 * TANGENT.z, (_207 * _201) * _560));
    float _575 = inversesqrt(dot(vec3(_565, _568, _571), vec3(_565, _568, _571)));
    float _576 = _575 * _565;
    float _577 = _575 * _568;
    float _578 = _575 * _571;
    float _3812 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _579 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
    float _3823 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    float _3834 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _3845 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _3856 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _583 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
    float _599 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _640 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _650 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _640);
    float _651 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _640);
    float _652 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _640);
    float _656 = inversesqrt(dot(vec3(_650, _651, _652), vec3(_650, _651, _652)));
    float _657 = _650 * _656;
    float _658 = _651 * _656;
    float _659 = _652 * _656;
    float _665 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _666 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _686 = fma(_578, cbSceneParam._m0[5u].z, fma(_577, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _576));
    float _689 = fma(_578, cbSceneParam._m0[6u].z, fma(_577, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _576));
    float _692 = fma(_578, cbSceneParam._m0[7u].z, fma(_577, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _576));
    uint _705 = uint(roundEven(NORMAL.w)) * 13u;
    uint _706 = _705 + 9u;
    uint _707 = _706 + uint(cbMatDynParam._m0[0u].w);
    float _713 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0)))) * cbInstanceData._m0[_707].x;
    float _714 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0)))) * cbInstanceData._m0[_707].y;
    float _715 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0)))) * cbInstanceData._m0[_707].z;
    float _3867 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _716 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
    float _3878 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _717 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
    float _3889 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _718 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
    float _719 = 1.0 - _583;
    float _720 = _716 * _719;
    float _721 = _717 * _719;
    float _722 = _718 * _719;
    float _727 = (_716 + (-0.039999999105930328369140625)) * _583;
    float _728 = (_717 + (-0.039999999105930328369140625)) * _583;
    float _729 = (_718 + (-0.039999999105930328369140625)) * _583;
    float _730 = _727 + 0.039999999105930328369140625;
    float _732 = _728 + 0.039999999105930328369140625;
    float _733 = _729 + 0.039999999105930328369140625;
    vec4 _742 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _665, cbSceneParam._m0[86u].y * _666));
    float _745 = _742.x * TEXCOORD_3.w;
    float _746 = dot(vec3(_576, _577, _578), vec3(_657, _658, _659));
    float _749 = _746 * 2.0;
    float _753 = (_749 * _576) - _657;
    float _754 = (_749 * _577) - _658;
    float _755 = (_749 * _578) - _659;
    float _759 = abs(dot(vec3(_657, _658, _659), vec3(_576, _577, _578)));
    float _3900 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _761 = sqrt(_579);
    float _774 = exp2((_761 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_761 * 3.0));
    float _780 = (1.0 - _774) * ((_761 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _781 = _774 * _761;
    float _809 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _813 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _817 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1118;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _844 = fma(_817, cbModelParam._m0[26u].z, fma(_813, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _809));
        float _848 = fma(_817, cbModelParam._m0[27u].z, fma(_813, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _809));
        float _852 = fma(_817, cbModelParam._m0[28u].z, fma(_813, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _809));
        float _876 = _809 + _576;
        float _877 = _813 + _577;
        float _878 = _817 + _578;
        float _888 = fma(_878, cbModelParam._m0[26u].z, fma(_877, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _876)) - _844;
        float _889 = fma(_878, cbModelParam._m0[27u].z, fma(_877, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _876)) - _848;
        float _890 = fma(_878, cbModelParam._m0[28u].z, fma(_877, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _876)) - _852;
        float _894 = inversesqrt(dot(vec3(_888, _889, _890), vec3(_888, _889, _890)));
        float _907 = ((_894 * _888) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_844 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _908 = ((_894 * _889) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_848 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _909 = ((_894 * _890) / cbModelParam._m0[34u].z) + ((((((_852 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _912 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_907, _908, _909), 0.0);
        vec4 _919 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_907, _908, _909), 0.0);
        vec4 _926 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_907, _908, _909), 0.0);
        vec4 _933 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_907, _908, _909), 0.0);
        float _946 = exp2((_912.w + (-0.5)) * 20.0) * 2.0;
        float _947 = _946 * (_912.x + (-0.5));
        float _948 = _946 * (_912.y + (-0.5));
        float _949 = _946 * (_912.z + (-0.5));
        float _956 = exp2((_919.w + (-0.5)) * 20.0) * 2.0;
        float _957 = _956 * (_919.x + (-0.5));
        float _958 = _956 * (_919.y + (-0.5));
        float _959 = _956 * (_919.z + (-0.5));
        float _966 = exp2((_926.w + (-0.5)) * 20.0) * 2.0;
        float _967 = _966 * (_926.x + (-0.5));
        float _968 = _966 * (_926.y + (-0.5));
        float _969 = _966 * (_926.z + (-0.5));
        float _976 = exp2((_933.w + (-0.5)) * 20.0) * 2.0;
        float _977 = _976 * (_933.x + (-0.5));
        float _978 = _976 * (_933.y + (-0.5));
        float _979 = _976 * (_933.z + (-0.5));
        float _980 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _981 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _982 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _983 = _947 * 0.5;
        float _984 = _957 * 0.5;
        float _985 = _967 * 0.5;
        float _986 = dot(vec3(_983, _984, _985), vec3(_983, _984, _985));
        float _991 = (_986 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_986);
        float _1000 = (dot(vec3(_576, _577, _578), vec3(_991 * _983, _991 * _984, _991 * _985)) + 1.0) * 0.5;
        float _3926 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1010 = sqrt(((_984 * _984) + (_983 * _983)) + (_985 * _985)) / (_980 + 9.9999997473787516355514526367188e-06);
        float _3937 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1011 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1012 = _1011 * 2.0;
        float _1016 = (1.0 - _1011) / (_1011 + 1.0);
        float _3948 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1017 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1026 = ((((1.0 - _1017) * (_1012 + 2.0)) * exp2(log2(isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0))) * (_1012 + 1.0))) + _1017) * _980;
        float _1027 = _948 * 0.5;
        float _1028 = _958 * 0.5;
        float _1029 = _968 * 0.5;
        float _1030 = dot(vec3(_1027, _1028, _1029), vec3(_1027, _1028, _1029));
        float _1035 = (_1030 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1030);
        float _1043 = (dot(vec3(_576, _577, _578), vec3(_1035 * _1027, _1035 * _1028, _1035 * _1029)) + 1.0) * 0.5;
        float _3959 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1052 = sqrt(((_1028 * _1028) + (_1027 * _1027)) + (_1029 * _1029)) / (_981 + 9.9999997473787516355514526367188e-06);
        float _3970 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1053 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
        float _1054 = _1053 * 2.0;
        float _1058 = (1.0 - _1053) / (_1053 + 1.0);
        float _3981 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1059 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
        float _1068 = ((((1.0 - _1059) * (_1054 + 2.0)) * exp2(log2(isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0))) * (_1054 + 1.0))) + _1059) * _981;
        float _1069 = _949 * 0.5;
        float _1070 = _959 * 0.5;
        float _1071 = _969 * 0.5;
        float _1072 = dot(vec3(_1069, _1070, _1071), vec3(_1069, _1070, _1071));
        float _1077 = (_1072 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1072);
        float _1085 = (dot(vec3(_576, _577, _578), vec3(_1077 * _1069, _1077 * _1070, _1077 * _1071)) + 1.0) * 0.5;
        float _3992 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1094 = sqrt(((_1070 * _1070) + (_1069 * _1069)) + (_1071 * _1071)) / (_982 + 9.9999997473787516355514526367188e-06);
        float _4003 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _1096 = _1095 * 2.0;
        float _1100 = (1.0 - _1095) / (_1095 + 1.0);
        float _4014 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _1110 = ((((1.0 - _1101) * (_1096 + 2.0)) * exp2(log2(isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))) * (_1096 + 1.0))) + _1101) * _982;
        _1118 = _949;
        _1120 = _948;
        _1121 = _947;
        _1122 = _959;
        _1123 = _958;
        _1124 = _957;
        _1125 = _969;
        _1126 = _968;
        _1127 = _967;
        _1128 = _982;
        _1129 = _981;
        _1130 = _980;
        _1131 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0)));
        _1132 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0)));
        _1133 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0)));
    }
    else
    {
        _1118 = _1119;
        _1120 = _1119;
        _1121 = _1119;
        _1122 = _1119;
        _1123 = _1119;
        _1124 = _1119;
        _1125 = _1119;
        _1126 = _1119;
        _1127 = _1119;
        _1128 = _1119;
        _1129 = _1119;
        _1130 = _1119;
        _1131 = 0.0;
        _1132 = 0.0;
        _1133 = 0.0;
    }
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1159 = fma(_817, cbModelParam._m0[30u].z, fma(_813, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _809));
        float _1163 = fma(_817, cbModelParam._m0[31u].z, fma(_813, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _809));
        float _1167 = fma(_817, cbModelParam._m0[32u].z, fma(_813, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _809));
        float _1190 = _809 + _576;
        float _1191 = _813 + _577;
        float _1192 = _817 + _578;
        float _1202 = fma(_1192, cbModelParam._m0[30u].z, fma(_1191, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1190)) - _1159;
        float _1203 = fma(_1192, cbModelParam._m0[31u].z, fma(_1191, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1190)) - _1163;
        float _1204 = fma(_1192, cbModelParam._m0[32u].z, fma(_1191, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1190)) - _1167;
        float _1208 = inversesqrt(dot(vec3(_1202, _1203, _1204), vec3(_1202, _1203, _1204)));
        float _1221 = ((_1208 * _1202) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1159 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1222 = ((_1208 * _1203) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1163 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1223 = ((_1208 * _1204) / cbModelParam._m0[35u].z) + ((((((_1167 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1225 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1221, _1222, _1223), 0.0);
        vec4 _1232 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1221, _1222, _1223), 0.0);
        vec4 _1239 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1221, _1222, _1223), 0.0);
        vec4 _1246 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1221, _1222, _1223), 0.0);
        float _1258 = exp2((_1225.w + (-0.5)) * 20.0) * 2.0;
        float _1259 = _1258 * (_1225.x + (-0.5));
        float _1260 = _1258 * (_1225.y + (-0.5));
        float _1261 = _1258 * (_1225.z + (-0.5));
        float _1268 = exp2((_1232.w + (-0.5)) * 20.0) * 2.0;
        float _1269 = _1268 * (_1232.x + (-0.5));
        float _1270 = _1268 * (_1232.y + (-0.5));
        float _1271 = _1268 * (_1232.z + (-0.5));
        float _1278 = exp2((_1239.w + (-0.5)) * 20.0) * 2.0;
        float _1279 = _1278 * (_1239.x + (-0.5));
        float _1280 = _1278 * (_1239.y + (-0.5));
        float _1281 = _1278 * (_1239.z + (-0.5));
        float _1288 = exp2((_1246.w + (-0.5)) * 20.0) * 2.0;
        float _1289 = _1288 * (_1246.x + (-0.5));
        float _1290 = _1288 * (_1246.y + (-0.5));
        float _1291 = _1288 * (_1246.z + (-0.5));
        float _1292 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1293 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1294 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1295 = _1259 * 0.5;
        float _1296 = _1269 * 0.5;
        float _1297 = _1279 * 0.5;
        float _1298 = dot(vec3(_1295, _1296, _1297), vec3(_1295, _1296, _1297));
        float _1303 = (_1298 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1298);
        float _1311 = (dot(vec3(_576, _577, _578), vec3(_1303 * _1295, _1303 * _1296, _1303 * _1297)) + 1.0) * 0.5;
        float _4055 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1320 = sqrt(((_1296 * _1296) + (_1295 * _1295)) + (_1297 * _1297)) / (_1292 + 9.9999997473787516355514526367188e-06);
        float _4066 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1321 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _1322 = _1321 * 2.0;
        float _1326 = (1.0 - _1321) / (_1321 + 1.0);
        float _4077 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _1336 = ((((1.0 - _1327) * (_1322 + 2.0)) * exp2(log2(isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) * (_1322 + 1.0))) + _1327) * _1292;
        float _1337 = _1260 * 0.5;
        float _1338 = _1270 * 0.5;
        float _1339 = _1280 * 0.5;
        float _1340 = dot(vec3(_1337, _1338, _1339), vec3(_1337, _1338, _1339));
        float _1345 = (_1340 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1340);
        float _1353 = (dot(vec3(_576, _577, _578), vec3(_1345 * _1337, _1345 * _1338, _1345 * _1339)) + 1.0) * 0.5;
        float _4088 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1362 = sqrt(((_1338 * _1338) + (_1337 * _1337)) + (_1339 * _1339)) / (_1293 + 9.9999997473787516355514526367188e-06);
        float _4099 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _1364 = _1363 * 2.0;
        float _1368 = (1.0 - _1363) / (_1363 + 1.0);
        float _4110 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _1378 = ((((1.0 - _1369) * (_1364 + 2.0)) * exp2(log2(isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0))) * (_1364 + 1.0))) + _1369) * _1293;
        float _1379 = _1261 * 0.5;
        float _1380 = _1271 * 0.5;
        float _1381 = _1281 * 0.5;
        float _1382 = dot(vec3(_1379, _1380, _1381), vec3(_1379, _1380, _1381));
        float _1387 = (_1382 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1382);
        float _1395 = (dot(vec3(_576, _577, _578), vec3(_1387 * _1379, _1387 * _1380, _1387 * _1381)) + 1.0) * 0.5;
        float _4121 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1404 = sqrt(((_1380 * _1380) + (_1379 * _1379)) + (_1381 * _1381)) / (_1294 + 9.9999997473787516355514526367188e-06);
        float _4132 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1405 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _1406 = _1405 * 2.0;
        float _1410 = (1.0 - _1405) / (_1405 + 1.0);
        float _4143 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1411 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
        float _1420 = ((((1.0 - _1411) * (_1406 + 2.0)) * exp2(log2(isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * (_1406 + 1.0))) + _1411) * _1294;
        _1428 = _1261;
        _1429 = _1260;
        _1430 = _1259;
        _1431 = _1271;
        _1432 = _1270;
        _1433 = _1269;
        _1434 = _1281;
        _1435 = _1280;
        _1436 = _1279;
        _1437 = _1294;
        _1438 = _1293;
        _1439 = _1292;
        _1440 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0)));
        _1441 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0)));
        _1442 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0)));
    }
    else
    {
        _1428 = _1119;
        _1429 = _1119;
        _1430 = _1119;
        _1431 = _1119;
        _1432 = _1119;
        _1433 = _1119;
        _1434 = _1119;
        _1435 = _1119;
        _1436 = _1119;
        _1437 = _1119;
        _1438 = _1119;
        _1439 = _1119;
        _1440 = 0.0;
        _1441 = 0.0;
        _1442 = 0.0;
    }
    float _1452 = (cbModelParam._m0[1u].x * (_1440 - _1131)) + _1131;
    float _1453 = (cbModelParam._m0[1u].x * (_1441 - _1132)) + _1132;
    float _1454 = (cbModelParam._m0[1u].x * (_1442 - _1133)) + _1133;
    float _1475 = fma(_1454, cbSceneParam._m0[89u].z, fma(_1453, cbSceneParam._m0[89u].y, _1452 * cbSceneParam._m0[89u].x));
    float _1478 = fma(_1454, cbSceneParam._m0[90u].z, fma(_1453, cbSceneParam._m0[90u].y, _1452 * cbSceneParam._m0[90u].x));
    float _1481 = fma(_1454, cbSceneParam._m0[91u].z, fma(_1453, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1452));
    float _1496 = _753 * 0.5;
    float _1497 = _754 * 0.5;
    float _1498 = _755 * 0.5;
    float _1499 = dot(vec4(_1496, _1497, _1498, 1.0), vec4(_1430, _1433, _1436, _1439));
    float _1502 = dot(vec4(_1496, _1497, _1498, 1.0), vec4(_1429, _1432, _1435, _1438));
    float _1505 = dot(vec4(_1496, _1497, _1498, 1.0), vec4(_1428, _1431, _1434, _1437));
    float _1539;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1512 = dot(vec4(_1496, _1497, _1498, 1.0), vec4(_1118, _1122, _1125, _1128));
        float _1516 = dot(vec4(_1496, _1497, _1498, 1.0), vec4(_1120, _1123, _1126, _1129));
        float _1520 = dot(vec4(_1496, _1497, _1498, 1.0), vec4(_1121, _1124, _1127, _1130));
        float _1527 = dot(vec4(cbModelParam._m0[39u]), vec4(_1496, _1497, _1498, 1.0));
        _1539 = dot(vec3(isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0)), isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0)), isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1527) ? 0.0 : (isnan(0.0) ? _1527 : max(0.0, _1527))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1539 = 1.0;
    }
    float _1550;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1541 = dot(vec4(cbModelParam._m0[40u]), vec4(_1496, _1497, _1498, 1.0));
        _1550 = dot(vec3(isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0)), isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0)), isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1541) ? 0.0 : (isnan(0.0) ? _1541 : max(0.0, _1541))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1550 = 1.0;
    }
    float _1554 = (_1550 * cbModelParam._m0[1u].x) + (_1539 * (1.0 - cbModelParam._m0[1u].x));
    float _1564 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _579);
    float _1565 = isnan(_1564) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1564 : min(cbModelParam._m0[25u].z, _1564));
    float _1645;
    float _1647;
    float _1649;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1612 = fma(_817, cbModelParam._m0[13u].z, fma(_813, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _809)) + cbModelParam._m0[13u].w;
        float _1616 = fma(_817, cbModelParam._m0[14u].z, fma(_813, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _809)) + cbModelParam._m0[14u].w;
        float _1620 = fma(_817, cbModelParam._m0[15u].z, fma(_813, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _809)) + cbModelParam._m0[15u].w;
        float _1623 = fma(_755, cbModelParam._m0[13u].z, fma(_754, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _753));
        float _1626 = fma(_755, cbModelParam._m0[14u].z, fma(_754, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _753));
        float _1629 = fma(_755, cbModelParam._m0[15u].z, fma(_754, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _753));
        float _1657;
        if (_1623 > 0.0)
        {
            _1657 = abs((1.0 - _1612) / _1623);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1623 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1612 + 1.0) / _1623);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1657 = frontier_phi_14_12_ladder;
        }
        float _1829;
        if (_1626 > 0.0)
        {
            _1829 = abs((1.0 - _1616) / _1626);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1626 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1616 + 1.0) / _1626);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1829 = frontier_phi_23_19_ladder;
        }
        float _2125;
        if (_1629 > 0.0)
        {
            _2125 = abs((1.0 - _1620) / _1629);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1629 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1620 + 1.0) / _1629);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2125 = frontier_phi_35_30_ladder;
        }
        float _2127 = isnan(_1829) ? _1657 : (isnan(_1657) ? _1829 : min(_1657, _1829));
        float _2128 = isnan(_2125) ? _2127 : (isnan(_2127) ? _2125 : min(_2127, _2125));
        float _2132 = (_2128 * _1623) + _1612;
        float _2133 = (_2128 * _1626) + _1616;
        float _2134 = (_2128 * _1629) + _1620;
        float _2135 = _2128 * 9.9999997473787516355514526367188e-05;
        float _2137 = (-1.0) - _2135;
        float _2139 = _2135 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2134 > _2139) || ((_2134 < _2137) || ((_2133 > _2139) || ((_2133 < _2137) || ((_2132 < _2137) || (_2132 > _2139))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2279 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2134, cbModelParam._m0[9u].z, fma(_2133, cbModelParam._m0[9u].y, _2132 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2134, cbModelParam._m0[10u].z, fma(_2133, cbModelParam._m0[10u].y, _2132 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2134, cbModelParam._m0[11u].z, fma(_2133, cbModelParam._m0[11u].y, _2132 * cbModelParam._m0[11u].x))), _1565);
            frontier_phi_13_35_ladder = _2279.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2279.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2279.x * cbModelParam._m0[1u].y;
        }
        _1645 = frontier_phi_13_35_ladder_2;
        _1647 = frontier_phi_13_35_ladder_1;
        _1649 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1633 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_753, _754, _755), _1565);
        _1645 = _1633.x * cbModelParam._m0[1u].y;
        _1647 = _1633.y * cbModelParam._m0[1u].y;
        _1649 = _1633.z * cbModelParam._m0[1u].y;
    }
    float _1653 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _579);
    float _1654 = isnan(_1653) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1653 : min(cbModelParam._m0[25u].w, _1653));
    float _1744;
    float _1746;
    float _1748;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1708 = fma(_817, cbModelParam._m0[21u].z, fma(_813, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _809)) + cbModelParam._m0[21u].w;
        float _1712 = fma(_817, cbModelParam._m0[22u].z, fma(_813, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _809)) + cbModelParam._m0[22u].w;
        float _1716 = fma(_817, cbModelParam._m0[23u].z, fma(_813, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _809)) + cbModelParam._m0[23u].w;
        float _1719 = fma(_755, cbModelParam._m0[21u].z, fma(_754, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _753));
        float _1722 = fma(_755, cbModelParam._m0[22u].z, fma(_754, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _753));
        float _1725 = fma(_755, cbModelParam._m0[23u].z, fma(_754, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _753));
        float _1834;
        if (_1719 > 0.0)
        {
            _1834 = abs((1.0 - _1708) / _1719);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1719 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1708 + 1.0) / _1719);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1834 = frontier_phi_25_21_ladder;
        }
        float _2152;
        if (_1722 > 0.0)
        {
            _2152 = abs((1.0 - _1712) / _1722);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1722 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1712 + 1.0) / _1722);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2152 = frontier_phi_37_32_ladder;
        }
        float _2490;
        if (_1725 > 0.0)
        {
            _2490 = abs((1.0 - _1716) / _1725);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1725 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1716 + 1.0) / _1725);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2490 = frontier_phi_47_44_ladder;
        }
        float _2492 = isnan(_2152) ? _1834 : (isnan(_1834) ? _2152 : min(_1834, _2152));
        float _2493 = isnan(_2490) ? _2492 : (isnan(_2492) ? _2490 : min(_2492, _2490));
        float _2497 = (_2493 * _1719) + _1708;
        float _2498 = (_2493 * _1722) + _1712;
        float _2499 = (_2493 * _1725) + _1716;
        float _2500 = _2493 * 9.9999997473787516355514526367188e-05;
        float _2501 = (-1.0) - _2500;
        float _2503 = _2500 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2499 > _2503) || ((_2499 < _2501) || ((_2498 > _2503) || ((_2498 < _2501) || ((_2497 < _2501) || (_2497 > _2503))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2621 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2499, cbModelParam._m0[17u].z, fma(_2498, cbModelParam._m0[17u].y, _2497 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2499, cbModelParam._m0[18u].z, fma(_2498, cbModelParam._m0[18u].y, _2497 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2499, cbModelParam._m0[19u].z, fma(_2498, cbModelParam._m0[19u].y, _2497 * cbModelParam._m0[19u].x))), _1654);
            frontier_phi_22_47_ladder = _2621.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2621.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2621.x * cbModelParam._m0[1u].z;
        }
        _1744 = frontier_phi_22_47_ladder_2;
        _1746 = frontier_phi_22_47_ladder_1;
        _1748 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1728 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_753, _754, _755), _1654);
        _1744 = _1728.x * cbModelParam._m0[1u].z;
        _1746 = _1728.y * cbModelParam._m0[1u].z;
        _1748 = _1728.z * cbModelParam._m0[1u].z;
    }
    float _1761 = (((_780 * _730) + _781) * _745) * ((cbModelParam._m0[1u].w * (_1744 - _1645)) + _1645);
    float _1763 = (((_780 * _732) + _781) * _745) * ((cbModelParam._m0[1u].w * (_1746 - _1647)) + _1647);
    float _1765 = (((_780 * _733) + _781) * _745) * ((cbModelParam._m0[1u].w * (_1748 - _1649)) + _1649);
    float _1768 = fma(_1765, cbSceneParam._m0[89u].z, fma(_1763, cbSceneParam._m0[89u].y, _1761 * cbSceneParam._m0[89u].x));
    float _1771 = fma(_1765, cbSceneParam._m0[90u].z, fma(_1763, cbSceneParam._m0[90u].y, _1761 * cbSceneParam._m0[90u].x));
    float _1774 = fma(_1765, cbSceneParam._m0[91u].z, fma(_1763, cbSceneParam._m0[91u].y, _1761 * cbSceneParam._m0[91u].x));
    float _1808 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1812 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1816 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1820 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1821 = _1808 / _1820;
    float _1822 = _1812 / _1820;
    float _1823 = _1816 / _1820;
    float _1970;
    float _1971;
    float _1972;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1850 = ((uint(_1823 > cbSceneParam._m0[59u].y) + uint(_1823 > cbSceneParam._m0[59u].x)) + uint(_1823 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1851 = _1850 + 43u;
        uint _1859 = _1850 + 44u;
        uint _1867 = _1850 + 45u;
        uint _1875 = _1850 + 46u;
        float _1886 = fma(_1820, cbSceneParam._m0[_1851].w, fma(_1816, cbSceneParam._m0[_1851].z, fma(_1812, cbSceneParam._m0[_1851].y, _1808 * cbSceneParam._m0[_1851].x)));
        float _1890 = fma(_1820, cbSceneParam._m0[_1859].w, fma(_1816, cbSceneParam._m0[_1859].z, fma(_1812, cbSceneParam._m0[_1859].y, _1808 * cbSceneParam._m0[_1859].x)));
        float _1898 = fma(_1820, cbSceneParam._m0[_1875].w, fma(_1816, cbSceneParam._m0[_1875].z, fma(_1812, cbSceneParam._m0[_1875].y, _1808 * cbSceneParam._m0[_1875].x)));
        float _1903 = cbSceneParam._m0[33u].z * _1898;
        float _1905 = cbSceneParam._m0[33u].w * _1898;
        float _1908 = fma(_1820, cbSceneParam._m0[_1867].w, fma(_1816, cbSceneParam._m0[_1867].z, fma(_1812, cbSceneParam._m0[_1867].y, _1808 * cbSceneParam._m0[_1867].x))) / _1898;
        float _1956 = (cbSceneParam._m0[33u].x - sqrt(((_1822 * _1822) + (_1821 * _1821)) + (_1823 * _1823))) * cbSceneParam._m0[33u].y;
        float _4269 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
        float _1963 = (isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1903 + _1886) / _1898, (_1905 + _1890) / _1898), _1908), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1905 + _1886) / _1898, (_1890 - _1903) / _1898), _1908), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1886 - _1903) / _1898, (_1890 - _1905) / _1898), _1908), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1886 - _1905) / _1898, (_1903 + _1890) / _1898), _1908), 0.0)).x), vec4(0.25)));
        _1970 = 1.0 - (_1963 * cbSceneParam._m0[34u].x);
        _1971 = 1.0 - (_1963 * cbSceneParam._m0[34u].y);
        _1972 = 1.0 - (_1963 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1970 = 1.0;
        _1971 = 1.0;
        _1972 = 1.0;
    }
    float _2036;
    float _2038;
    float _2040;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2024 = fma(_1820, cbSceneParam._m0[63u].w, fma(_1816, cbSceneParam._m0[63u].z, fma(_1812, cbSceneParam._m0[63u].y, _1808 * cbSceneParam._m0[63u].x)));
        float _2025 = fma(_1820, cbSceneParam._m0[60u].w, fma(_1816, cbSceneParam._m0[60u].z, fma(_1812, cbSceneParam._m0[60u].y, _1808 * cbSceneParam._m0[60u].x))) / _2024;
        float _2026 = fma(_1820, cbSceneParam._m0[61u].w, fma(_1816, cbSceneParam._m0[61u].z, fma(_1812, cbSceneParam._m0[61u].y, _1808 * cbSceneParam._m0[61u].x))) / _2024;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2025 >= cbSceneParam._m0[64u].x) && (_2026 >= cbSceneParam._m0[64u].y)) && (_2025 <= cbSceneParam._m0[64u].z)) && (_2026 <= cbSceneParam._m0[64u].w))
        {
            float _2165 = fma(_1820, cbSceneParam._m0[62u].w, fma(_1816, cbSceneParam._m0[62u].z, fma(_1812, cbSceneParam._m0[62u].y, _1808 * cbSceneParam._m0[62u].x))) / _2024;
            float _2169 = isnan(cbSceneParam._m0[41u].w) ? _2165 : (isnan(_2165) ? cbSceneParam._m0[41u].w : max(_2165, cbSceneParam._m0[41u].w));
            float _2212 = (cbSceneParam._m0[33u].x - sqrt(((_1822 * _1822) + (_1821 * _1821)) + (_1823 * _1823))) * cbSceneParam._m0[33u].y;
            float _4285 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
            float _2219 = (isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2025, cbSceneParam._m0[33u].w + _2026), _2169), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2025, _2026 - cbSceneParam._m0[33u].z), _2169), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2025 - cbSceneParam._m0[33u].z, _2026 - cbSceneParam._m0[33u].w), _2169), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2025 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2026), _2169), 0.0)).x), vec4(0.25)));
            float _2223 = 1.0 - (_2219 * cbSceneParam._m0[34u].x);
            float _2224 = 1.0 - (_2219 * cbSceneParam._m0[34u].y);
            float _2225 = 1.0 - (_2219 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2225) ? _1972 : (isnan(_1972) ? _2225 : min(_1972, _2225));
            frontier_phi_34_33_ladder_1 = isnan(_2224) ? _1971 : (isnan(_1971) ? _2224 : min(_1971, _2224));
            frontier_phi_34_33_ladder_2 = isnan(_2223) ? _1970 : (isnan(_1970) ? _2223 : min(_1970, _2223));
        }
        else
        {
            frontier_phi_34_33_ladder = _1972;
            frontier_phi_34_33_ladder_1 = _1971;
            frontier_phi_34_33_ladder_2 = _1970;
        }
        _2036 = frontier_phi_34_33_ladder_2;
        _2038 = frontier_phi_34_33_ladder_1;
        _2040 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2036 = _1970;
        _2038 = _1971;
        _2040 = _1972;
    }
    uvec4 _2045 = floatBitsToUint(cbInstanceData._m0[_705 + 5u]);
    uint _2047 = _2045.x * 14u;
    uint _2048 = _2047 + 13u;
    float _2055 = _745 + (-1.0);
    float _2060 = (cbLight._m0[_2048].x * _2055) + 1.0;
    float _2061 = (cbLight._m0[_2048].y * _2055) + 1.0;
    float _2062 = (cbLight._m0[_2048].z * _2055) + 1.0;
    float _2063 = (cbLight._m0[_2048].w * _2055) + 1.0;
    uint _2064 = _2047 + 5u;
    float _2070 = isnan(1.0) ? _2061 : (isnan(_2061) ? 1.0 : min(_2061, 1.0));
    uint _2074 = _2047 + 4u;
    float _2084 = isnan(1.0) ? _2060 : (isnan(_2060) ? 1.0 : min(_2060, 1.0));
    uint _2088 = _2047 | 1u;
    float _2099 = dot(vec3(cbLight._m0[_2047].xyz), vec3(_576, _577, _578));
    float _2102 = dot(vec3(cbLight._m0[_2088].xyz), vec3(_576, _577, _578));
    float _4321 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
    float _4332 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
    float _2107 = (isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0))) * 0.3183098733425140380859375;
    float _2109 = (isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0))) * 0.3183098733425140380859375;
    float _2116 = ((cbLight._m0[_2064].x * _2070) * _2109) + (((cbLight._m0[_2074].x * _2036) * _2084) * _2107);
    float _2117 = ((_2070 * cbLight._m0[_2064].y) * _2109) + (((cbLight._m0[_2074].y * _2038) * _2084) * _2107);
    float _2118 = ((_2070 * cbLight._m0[_2064].z) * _2109) + (((cbLight._m0[_2074].z * _2040) * _2084) * _2107);
    uvec4 _2122 = floatBitsToUint(cbLight._m0[_2047 + 12u]);
    bool _2124 = _2122.x == 0u;
    float _2226;
    float _2228;
    float _2230;
    if (_2124)
    {
        _2226 = _2116;
        _2228 = _2117;
        _2230 = _2118;
    }
    else
    {
        uint _2234 = _2047 + 6u;
        float _2250 = (dot(vec3(cbLight._m0[_2047 + 2u].xyz), vec3(_576, _577, _578)) * 0.5) + 0.5;
        float _2251 = _2250 * _2250;
        float _4343 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
        float _2252 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _2253 = isnan(1.0) ? _2062 : (isnan(_2062) ? 1.0 : min(_2062, 1.0));
        _2226 = (((cbLight._m0[_2234].x * 0.3183098733425140380859375) * _2252) * _2253) + _2116;
        _2228 = (((cbLight._m0[_2234].y * 0.3183098733425140380859375) * _2252) * _2253) + _2117;
        _2230 = (((cbLight._m0[_2234].z * 0.3183098733425140380859375) * _2252) * _2253) + _2118;
    }
    bool _2233 = _2122.y == 0u;
    float _2288;
    float _2290;
    float _2292;
    if (_2233)
    {
        _2288 = _2226;
        _2290 = _2228;
        _2292 = _2230;
    }
    else
    {
        uint _2461 = _2047 + 7u;
        float _2477 = (dot(vec3(cbLight._m0[_2047 + 3u].xyz), vec3(_576, _577, _578)) * 0.5) + 0.5;
        float _2478 = _2477 * _2477;
        float _4359 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
        float _2479 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _2480 = isnan(1.0) ? _2063 : (isnan(_2063) ? 1.0 : min(_2063, 1.0));
        _2288 = (((cbLight._m0[_2461].x * 0.3183098733425140380859375) * _2479) * _2480) + _2226;
        _2290 = (((cbLight._m0[_2461].y * 0.3183098733425140380859375) * _2479) * _2480) + _2228;
        _2292 = (((cbLight._m0[_2461].z * 0.3183098733425140380859375) * _2479) * _2480) + _2230;
    }
    uint _2295 = _2047 + 8u;
    float _2308 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2047].w)) * _579) * 0.949999988079071044921875);
    float _2309 = _2308 * _2308;
    float _2310 = cbLight._m0[_2047].x + _657;
    float _2311 = cbLight._m0[_2047].y + _658;
    float _2312 = cbLight._m0[_2047].z + _659;
    float _2316 = inversesqrt(dot(vec3(_2310, _2311, _2312), vec3(_2310, _2311, _2312)));
    float _2317 = _2316 * _2310;
    float _2318 = _2316 * _2311;
    float _2319 = _2316 * _2312;
    float _2320 = dot(vec3(_576, _577, _578), vec3(cbLight._m0[_2047].xyz));
    float _4375 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
    float _2323 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
    float _4386 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _2324 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
    float _2325 = dot(vec3(_576, _577, _578), vec3(_2317, _2318, _2319));
    float _4397 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
    float _2328 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
    float _2329 = dot(vec3(cbLight._m0[_2047].xyz), vec3(_2317, _2318, _2319));
    float _4408 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
    float _2333 = _2309 * _2309;
    float _2337 = ((_2328 * _2328) * (_2333 + (-1.0))) + 1.0;
    float _2345 = exp2(log2(1.0 - (isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0)))) * 5.0);
    float _2346 = 0.959999978542327880859375 - _727;
    float _2348 = 0.959999978542327880859375 - _728;
    float _2349 = 0.959999978542327880859375 - _729;
    float _2356 = 1.0 - _2309;
    float _2367 = (0.5 / (((_2324 * ((_2323 * _2356) + _2309)) + 9.9999999392252902907785028219223e-09) + (((_2324 * _2356) + _2309) * _2323))) * _2323;
    float _4419 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
    float _2369 = (isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0))) * (_2333 / ((_2337 * _2337) * 3.141590118408203125));
    uint _2383 = _2047 + 9u;
    float _2394 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2088].w)) * _579) * 0.949999988079071044921875);
    float _2395 = _2394 * _2394;
    float _2396 = cbLight._m0[_2088].x + _657;
    float _2397 = cbLight._m0[_2088].y + _658;
    float _2398 = cbLight._m0[_2088].z + _659;
    float _2402 = inversesqrt(dot(vec3(_2396, _2397, _2398), vec3(_2396, _2397, _2398)));
    float _2403 = _2402 * _2396;
    float _2404 = _2402 * _2397;
    float _2405 = _2402 * _2398;
    float _2406 = dot(vec3(_576, _577, _578), vec3(cbLight._m0[_2088].xyz));
    float _4430 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
    float _2409 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
    float _2410 = dot(vec3(_576, _577, _578), vec3(_2403, _2404, _2405));
    float _4441 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
    float _2413 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
    float _2414 = dot(vec3(cbLight._m0[_2088].xyz), vec3(_2403, _2404, _2405));
    float _4452 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
    float _2418 = _2395 * _2395;
    float _2422 = ((_2413 * _2413) * (_2418 + (-1.0))) + 1.0;
    float _2429 = exp2(log2(1.0 - (isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0)))) * 5.0);
    float _2436 = 1.0 - _2395;
    float _2446 = (0.5 / (((_2324 * ((_2409 * _2436) + _2395)) + 9.9999999392252902907785028219223e-09) + (((_2324 * _2436) + _2395) * _2409))) * _2409;
    float _4463 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
    float _2448 = (isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0))) * (_2418 / ((_2422 * _2422) * 3.141590118408203125));
    float _2458 = (((((_2429 * _2346) + _730) * cbLight._m0[_2383].x) * _2448) * _2070) + ((((cbLight._m0[_2295].x * _2036) * ((_2345 * _2346) + _730)) * _2369) * _2084);
    float _2459 = (((((_2429 * _2348) + _732) * cbLight._m0[_2383].y) * _2448) * _2070) + ((((cbLight._m0[_2295].y * _2038) * ((_2345 * _2348) + _732)) * _2369) * _2084);
    float _2460 = (((((_2429 * _2349) + _733) * cbLight._m0[_2383].z) * _2448) * _2070) + ((((cbLight._m0[_2295].z * _2040) * ((_2345 * _2349) + _733)) * _2369) * _2084);
    float _2516;
    float _2518;
    float _2520;
    if (_2124)
    {
        _2516 = _2458;
        _2518 = _2459;
        _2520 = _2460;
    }
    else
    {
        uint _2522 = _2047 + 2u;
        uint _2526 = _2047 + 10u;
        float _2540 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2522].w)) * _579) * 0.949999988079071044921875);
        float _2541 = _2540 * _2540;
        float _2542 = cbLight._m0[_2522].x + _657;
        float _2543 = cbLight._m0[_2522].y + _658;
        float _2544 = cbLight._m0[_2522].z + _659;
        float _2548 = inversesqrt(dot(vec3(_2542, _2543, _2544), vec3(_2542, _2543, _2544)));
        float _2549 = _2548 * _2542;
        float _2550 = _2548 * _2543;
        float _2551 = _2548 * _2544;
        float _2552 = dot(vec3(_576, _577, _578), vec3(cbLight._m0[_2522].xyz));
        float _4474 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
        float _2555 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
        float _2556 = dot(vec3(_576, _577, _578), vec3(_2549, _2550, _2551));
        float _4485 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
        float _2559 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
        float _2560 = dot(vec3(cbLight._m0[_2522].xyz), vec3(_2549, _2550, _2551));
        float _4496 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
        float _2564 = _2541 * _2541;
        float _2568 = ((_2559 * _2559) * (_2564 + (-1.0))) + 1.0;
        float _2575 = exp2(log2(1.0 - (isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0)))) * 5.0);
        float _2582 = 1.0 - _2541;
        float _2592 = (0.5 / (((_2324 * ((_2555 * _2582) + _2541)) + 9.9999999392252902907785028219223e-09) + (((_2324 * _2582) + _2541) * _2555))) * _2555;
        float _4507 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
        float _2594 = (isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0))) * (_2564 / ((_2568 * _2568) * 3.141590118408203125));
        float _2595 = isnan(1.0) ? _2062 : (isnan(_2062) ? 1.0 : min(_2062, 1.0));
        _2516 = (((((_2575 * _2346) + _730) * cbLight._m0[_2526].x) * _2594) * _2595) + _2458;
        _2518 = (((((_2575 * _2348) + _732) * cbLight._m0[_2526].y) * _2594) * _2595) + _2459;
        _2520 = (((((_2575 * _2349) + _733) * cbLight._m0[_2526].z) * _2594) * _2595) + _2460;
    }
    float _2626;
    float _2628;
    float _2630;
    if (_2233)
    {
        _2626 = _2516;
        _2628 = _2518;
        _2630 = _2520;
    }
    else
    {
        uint _2637 = _2047 + 3u;
        uint _2641 = _2047 + 11u;
        float _2655 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2637].w)) * _579) * 0.949999988079071044921875);
        float _2656 = _2655 * _2655;
        float _2657 = cbLight._m0[_2637].x + _657;
        float _2658 = cbLight._m0[_2637].y + _658;
        float _2659 = cbLight._m0[_2637].z + _659;
        float _2663 = inversesqrt(dot(vec3(_2657, _2658, _2659), vec3(_2657, _2658, _2659)));
        float _2664 = _2663 * _2657;
        float _2665 = _2663 * _2658;
        float _2666 = _2663 * _2659;
        float _2667 = dot(vec3(_576, _577, _578), vec3(cbLight._m0[_2637].xyz));
        float _4523 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
        float _2670 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
        float _2671 = dot(vec3(_576, _577, _578), vec3(_2664, _2665, _2666));
        float _4534 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
        float _2674 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
        float _2675 = dot(vec3(cbLight._m0[_2637].xyz), vec3(_2664, _2665, _2666));
        float _4545 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
        float _2679 = _2656 * _2656;
        float _2683 = ((_2674 * _2674) * (_2679 + (-1.0))) + 1.0;
        float _2690 = exp2(log2(1.0 - (isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0)))) * 5.0);
        float _2697 = 1.0 - _2656;
        float _2707 = (0.5 / (((_2324 * ((_2670 * _2697) + _2656)) + 9.9999999392252902907785028219223e-09) + (((_2324 * _2697) + _2656) * _2670))) * _2670;
        float _4556 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
        float _2709 = (isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0))) * (_2679 / ((_2683 * _2683) * 3.141590118408203125));
        float _2710 = isnan(1.0) ? _2063 : (isnan(_2063) ? 1.0 : min(_2063, 1.0));
        _2626 = (((((_2690 * _2346) + _730) * cbLight._m0[_2641].x) * _2709) * _2710) + _2516;
        _2628 = (((((_2690 * _2348) + _732) * cbLight._m0[_2641].y) * _2709) * _2710) + _2518;
        _2630 = (((((_2690 * _2349) + _733) * cbLight._m0[_2641].z) * _2709) * _2710) + _2520;
    }
    float _2776;
    float _2778;
    float _2780;
    float _2782;
    float _2784;
    float _2786;
    if (_2045.y == 0u)
    {
        uvec4 _2731 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2732 = _2731.x;
        uint _2743 = uint((float(_2731.y) * floor(float(uint(cbSceneParam._m0[85u].y * _666) / _2732))) + floor(float(uint(cbSceneParam._m0[85u].x * _665) / _2732)));
        float _2753 = (log2(_1823 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2754 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
        uint _2757 = uint(isnan(14.0) ? _2754 : (isnan(_2754) ? 14.0 : min(_2754, 14.0)));
        uvec4 _2762 = texelFetch(g_lightClusterGridBuffer, int(((_2757 << 2u) + (_2743 << 6u)) >> 2u));
        uint _2763 = _2762.x;
        uint _2764 = _2731.z;
        float _2872;
        float _2874;
        float _2876;
        float _2878;
        float _2880;
        float _2882;
        if (((((1u << ((_2764 >> 4u) & 15u)) + 4294967295u) & _2763) == 0u) || ((_2764 & 240u) == 0u))
        {
            _2872 = 0.0;
            _2874 = 0.0;
            _2876 = 0.0;
            _2878 = 0.0;
            _2880 = 0.0;
            _2882 = 0.0;
        }
        else
        {
            float _2873;
            float _2875;
            float _2877;
            float _2879;
            float _2881;
            float _2883;
            float _3025 = 0.0;
            float _3026 = 0.0;
            float _3027 = 0.0;
            float _3028 = 0.0;
            float _3029 = 0.0;
            float _3030 = 0.0;
            uint _3031 = 0u;
            uint _3040;
            bool _3041;
            for (;;)
            {
                _3040 = texelFetch(g_lightClassification, int((((_2757 << 5u) + (_2743 << 9u)) + (_3031 << 2u)) >> 2u)).x;
                _3041 = _3040 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3041)
                {
                    frontier_phi_66_pred = _3030;
                    frontier_phi_66_pred_1 = _3029;
                    frontier_phi_66_pred_2 = _3028;
                    frontier_phi_66_pred_3 = _3027;
                    frontier_phi_66_pred_4 = _3026;
                    frontier_phi_66_pred_5 = _3025;
                }
                else
                {
                    float _3149;
                    float _3150;
                    float _3151;
                    float _3152;
                    float _3153;
                    float _3154;
                    uint _3155;
                    _3149 = _3025;
                    _3150 = _3026;
                    _3151 = _3027;
                    _3152 = _3028;
                    _3153 = _3029;
                    _3154 = _3030;
                    _3155 = _3040;
                    float _3081;
                    float _3082;
                    float _3083;
                    float _3084;
                    float _3085;
                    float _3086;
                    for (;;)
                    {
                        uint _3159 = uint(findLSB(_3155)) + (_3031 << 5u);
                        uint _3156 = (_3155 + 4294967295u) & _3155;
                        uint _3161 = _3159 * 48u;
                        vec4 _3175 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3161)).x, texelFetch(g_PointLightRenderingBuffer, int(_3161 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3161 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3161 + 3u)).x));
                        uint _3181 = (_3159 * 48u) + 4u;
                        vec4 _3194 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3181)).x, texelFetch(g_PointLightRenderingBuffer, int(_3181 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3181 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3181 + 3u)).x));
                        uint _3200 = (_3159 * 48u) + 8u;
                        vec3 _3211 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3200)).x, texelFetch(g_PointLightRenderingBuffer, int(_3200 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3200 + 2u)).x));
                        float _3215 = _3175.x - _1821;
                        float _3216 = _3175.y - _1822;
                        float _3217 = _3175.z - _1823;
                        float _3218 = dot(vec3(_3215, _3216, _3217), vec3(_3215, _3216, _3217));
                        float _3221 = inversesqrt(_3218);
                        float _3222 = _3221 * _3215;
                        float _3223 = _3221 * _3216;
                        float _3224 = _3221 * _3217;
                        float _3225 = dot(vec3(_686, _689, _692), vec3(_3222, _3223, _3224));
                        float _3230 = 1.0 - (_3218 * _3175.w);
                        float _4582 = isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0));
                        float _3231 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
                        float _3232 = sqrt(_3218) * _3194.w;
                        float _3235 = 1.39999997615814208984375 / (_3232 + 1.39999997615814208984375);
                        float _3236 = _3235 * _3235;
                        float _3239 = ((1.0 - _3236) * _3225) + _3236;
                        float _3242 = _3232 * _3232;
                        float _3246 = ((isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0))) * _3231) / ((_3242 * 0.699999988079071044921875) + 1.0);
                        float _3250 = (-0.0) - _1821;
                        float _3251 = (-0.0) - _1822;
                        float _3252 = (-0.0) - _1823;
                        float _3256 = inversesqrt(dot(vec3(_3250, _3251, _3252), vec3(_3250, _3251, _3252)));
                        float _3257 = _3256 * _3250;
                        float _3258 = _3256 * _3251;
                        float _3259 = _3256 * _3252;
                        float _3266 = exp2(log2(1.0 / ((_3242 * 3.5) + 5.0)) * 0.25);
                        float _3267 = 1.0 - _761;
                        float _3274 = sqrt(1.0 - ((1.0 - (_3267 * _3267)) * (1.0 - (_3266 * _3266))));
                        float _3275 = _3274 * _3274;
                        float _3276 = _3275 * _3275;
                        float _3277 = _3257 + _3222;
                        float _3278 = _3258 + _3223;
                        float _3279 = _3259 + _3224;
                        float _3283 = inversesqrt(dot(vec3(_3277, _3278, _3279), vec3(_3277, _3278, _3279)));
                        float _3287 = dot(vec3(_686, _689, _692), vec3(_3257, _3258, _3259));
                        float _4598 = isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0));
                        float _3290 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
                        float _3291 = dot(vec3(_686, _689, _692), vec3(_3283 * _3277, _3283 * _3278, _3283 * _3279));
                        float _4609 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0));
                        float _3294 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
                        float _3298 = ((_3294 * _3294) * (_3276 + (-1.0))) + 1.0;
                        float _3299 = _3235 * _3275;
                        float _3300 = _3299 * _3299;
                        float _3303 = ((1.0 - _3300) * _3225) + _3300;
                        float _4620 = isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0));
                        float _3304 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
                        float _3305 = 1.0 - _3275;
                        float _3315 = (0.5 / (((_3304 * ((_3290 * _3305) + _3275)) + 9.9999999392252902907785028219223e-09) + (((_3304 * _3305) + _3275) * _3290))) * _3304;
                        float _4631 = isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : max(_3315, 0.0));
                        float _3326 = (((_3276 * 3.1415927410125732421875) * (isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0)))) / ((_3298 * _3298) * ((_3242 * 2.1991131305694580078125) + 3.141590118408203125))) * _3231;
                        _3084 = (_3246 * _3194.x) + _3152;
                        _3085 = (_3246 * _3194.y) + _3153;
                        _3086 = (_3246 * _3194.z) + _3154;
                        _3081 = (_3326 * _3211.x) + _3149;
                        _3082 = (_3326 * _3211.y) + _3150;
                        _3083 = (_3326 * _3211.z) + _3151;
                        if (_3156 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3149 = _3081;
                            _3150 = _3082;
                            _3151 = _3083;
                            _3152 = _3084;
                            _3153 = _3085;
                            _3154 = _3086;
                            _3155 = _3156;
                        }
                    }
                    frontier_phi_66_pred = _3086;
                    frontier_phi_66_pred_1 = _3085;
                    frontier_phi_66_pred_2 = _3084;
                    frontier_phi_66_pred_3 = _3083;
                    frontier_phi_66_pred_4 = _3082;
                    frontier_phi_66_pred_5 = _3081;
                }
                _2883 = frontier_phi_66_pred;
                _2881 = frontier_phi_66_pred_1;
                _2879 = frontier_phi_66_pred_2;
                _2877 = frontier_phi_66_pred_3;
                _2875 = frontier_phi_66_pred_4;
                _2873 = frontier_phi_66_pred_5;
                uint _3032 = _3031 + 1u;
                if (_3032 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3025 = _2873;
                    _3026 = _2875;
                    _3027 = _2877;
                    _3028 = _2879;
                    _3029 = _2881;
                    _3030 = _2883;
                    _3031 = _3032;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2872 = _2873;
            _2874 = _2875;
            _2876 = _2877;
            _2878 = _2879;
            _2880 = _2881;
            _2882 = _2883;
        }
        uvec4 _2886 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2887 = _2886.z;
        uint _2889 = (_2887 >> 8u) & 15u;
        float _2993;
        float _2995;
        float _2997;
        float _2999;
        float _3001;
        float _3003;
        if (((4294967295u << _2889) & _2763) == 0u)
        {
            _2993 = _2872;
            _2995 = _2874;
            _2997 = _2876;
            _2999 = _2878;
            _3001 = _2880;
            _3003 = _2882;
        }
        else
        {
            float _3018 = inversesqrt(dot(vec3(_1821, _1822, _1823), vec3(_1821, _1822, _1823)));
            float _3019 = _3018 * _1821;
            float _3020 = _3018 * _1822;
            float _3021 = _3018 * _1823;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2889 < ((_2887 >> 12u) & 15u))
            {
                float _2994;
                float _2996;
                float _2998;
                float _3000;
                float _3002;
                float _3004;
                float _3132 = _2872;
                float _3133 = _2874;
                float _3134 = _2876;
                float _3135 = _2878;
                float _3136 = _2880;
                float _3137 = _2882;
                uint _3138 = _2889;
                uint _3147;
                bool _3148;
                for (;;)
                {
                    _3147 = texelFetch(g_lightClassification, int((((_2757 << 5u) + (_2743 << 9u)) + (_3138 << 2u)) >> 2u)).x;
                    _3148 = _3147 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3148)
                    {
                        frontier_phi_72_pred = _3137;
                        frontier_phi_72_pred_1 = _3136;
                        frontier_phi_72_pred_2 = _3135;
                        frontier_phi_72_pred_3 = _3134;
                        frontier_phi_72_pred_4 = _3133;
                        frontier_phi_72_pred_5 = _3132;
                    }
                    else
                    {
                        float _3331;
                        float _3332;
                        float _3333;
                        float _3334;
                        float _3335;
                        float _3336;
                        float _3625;
                        float _3626;
                        float _3627;
                        float _3628;
                        float _3629;
                        float _3630;
                        float _3344 = _3132;
                        float _3345 = _3133;
                        float _3346 = _3134;
                        float _3347 = _3135;
                        float _3348 = _3136;
                        float _3349 = _3137;
                        uint _3350 = _3147;
                        uint _3351;
                        vec4 _3376;
                        float _3377;
                        vec4 _3392;
                        vec3 _3404;
                        vec4 _3419;
                        vec4 _3434;
                        float _3481;
                        bool _3482;
                        for (;;)
                        {
                            uint _3361 = ((_3138 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3350));
                            _3351 = (_3350 + 4294967295u) & _3350;
                            uint _3363 = _3361 * 40u;
                            _3376 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3363)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 3u)).x));
                            _3377 = _3376.w;
                            uint _3379 = (_3361 * 40u) + 4u;
                            _3392 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3379)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 3u)).x));
                            uint _3394 = (_3361 * 40u) + 8u;
                            _3404 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3394)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 2u)).x));
                            uint _3406 = (_3361 * 40u) + 16u;
                            _3419 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3406)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 3u)).x));
                            uint _3421 = (_3361 * 40u) + 20u;
                            _3434 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3421)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 3u)).x));
                            uint _3437 = (_3361 * 40u) + 24u;
                            vec4 _3450 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3437)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 3u)).x));
                            uint _3456 = (_3361 * 40u) + 28u;
                            vec4 _3469 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3456)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 3u)).x));
                            _3481 = fma(_1823, _3469.z, fma(_1822, _3469.y, _3469.x * _1821)) + _3469.w;
                            _3482 = !((fma(_1823, _3450.z, fma(_1822, _3450.y, _3450.x * _1821)) + _3450.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3482)
                            {
                                float _3509 = _3376.x - _1821;
                                float _3510 = _3376.y - _1822;
                                float _3511 = _3376.z - _1823;
                                float _3512 = dot(vec3(_3509, _3510, _3511), vec3(_3509, _3510, _3511));
                                float _3515 = inversesqrt(_3512);
                                float _3516 = _3515 * _3509;
                                float _3517 = _3515 * _3510;
                                float _3518 = _3515 * _3511;
                                float _3522 = 1.0 - (_3512 / (_3377 * _3377));
                                float _4642 = isnan(0.0) ? _3522 : (isnan(_3522) ? 0.0 : max(_3522, 0.0));
                                float _3523 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
                                float _3527 = sqrt(_3512) * _3392.w;
                                float _3529 = 1.39999997615814208984375 / (_3527 + 1.39999997615814208984375);
                                float _3530 = _3529 * _3529;
                                float _3533 = ((1.0 - _3530) * dot(vec3(_3516, _3517, _3518), vec3(_686, _689, _692))) + _3530;
                                float _3536 = _3527 * _3527;
                                float _3540 = (fma(_1823, _3419.z, fma(_1822, _3419.y, _3419.x * _1821)) + _3419.w) / _3481;
                                float _3541 = (fma(_1823, _3434.z, fma(_1822, _3434.y, _3434.x * _1821)) + _3434.w) / _3481;
                                float _3545 = 1.0 - dot(vec2(_3540, _3541), vec2(_3540, _3541));
                                float _4658 = isnan(0.0) ? _3545 : (isnan(_3545) ? 0.0 : max(_3545, 0.0));
                                float _3546 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
                                float _3547 = _3546 * (((isnan(0.0) ? _3533 : (isnan(_3533) ? 0.0 : max(_3533, 0.0))) * _3523) / ((_3536 * 0.699999988079071044921875) + 1.0));
                                float _3559 = exp2(log2(1.0 / ((_3536 * 3.5) + 5.0)) * 0.25);
                                float _3560 = 1.0 - _761;
                                float _3567 = sqrt(1.0 - ((1.0 - (_3560 * _3560)) * (1.0 - (_3559 * _3559))));
                                float _3568 = _3567 * _3567;
                                float _3569 = _3568 * _3568;
                                float _3570 = _3516 - _3019;
                                float _3571 = _3517 - _3020;
                                float _3572 = _3518 - _3021;
                                float _3576 = inversesqrt(dot(vec3(_3570, _3571, _3572), vec3(_3570, _3571, _3572)));
                                float _3580 = dot(vec3(_686, _689, _692), vec3((-0.0) - _3019, (-0.0) - _3020, (-0.0) - _3021));
                                float _4669 = isnan(0.0) ? _3580 : (isnan(_3580) ? 0.0 : max(_3580, 0.0));
                                float _3583 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
                                float _3584 = dot(vec3(_686, _689, _692), vec3(_3576 * _3570, _3576 * _3571, _3576 * _3572));
                                float _4680 = isnan(0.0) ? _3584 : (isnan(_3584) ? 0.0 : max(_3584, 0.0));
                                float _3587 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
                                float _3591 = ((_3587 * _3587) * (_3569 + (-1.0))) + 1.0;
                                float _3592 = _3529 * _3568;
                                float _3593 = _3592 * _3592;
                                float _3599 = ((1.0 - _3593) * dot(vec3(_686, _689, _692), vec3(_3516, _3517, _3518))) + _3593;
                                float _4691 = isnan(0.0) ? _3599 : (isnan(_3599) ? 0.0 : max(_3599, 0.0));
                                float _3600 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
                                float _3601 = 1.0 - _3568;
                                float _3611 = (0.5 / (((_3600 * ((_3583 * _3601) + _3568)) + 9.9999999392252902907785028219223e-09) + (((_3600 * _3601) + _3568) * _3583))) * _3600;
                                float _4702 = isnan(0.0) ? _3611 : (isnan(_3611) ? 0.0 : max(_3611, 0.0));
                                float _3621 = (_3546 * _3523) * (((_3569 * 3.1415927410125732421875) * (isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0)))) / ((_3591 * _3591) * ((_3536 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3547 * _3392.y;
                                frontier_phi_78_pred_1 = _3547 * _3392.x;
                                frontier_phi_78_pred_2 = _3621 * _3404.z;
                                frontier_phi_78_pred_3 = _3621 * _3404.y;
                                frontier_phi_78_pred_4 = _3621 * _3404.x;
                                frontier_phi_78_pred_5 = _3547 * _3392.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3629 = frontier_phi_78_pred;
                            _3628 = frontier_phi_78_pred_1;
                            _3627 = frontier_phi_78_pred_2;
                            _3626 = frontier_phi_78_pred_3;
                            _3625 = frontier_phi_78_pred_4;
                            _3630 = frontier_phi_78_pred_5;
                            _3334 = _3628 + _3347;
                            _3335 = _3629 + _3348;
                            _3336 = _3630 + _3349;
                            _3331 = _3625 + _3344;
                            _3332 = _3626 + _3345;
                            _3333 = _3627 + _3346;
                            if (_3351 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3344 = _3331;
                                _3345 = _3332;
                                _3346 = _3333;
                                _3347 = _3334;
                                _3348 = _3335;
                                _3349 = _3336;
                                _3350 = _3351;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3336;
                        frontier_phi_72_pred_1 = _3335;
                        frontier_phi_72_pred_2 = _3334;
                        frontier_phi_72_pred_3 = _3333;
                        frontier_phi_72_pred_4 = _3332;
                        frontier_phi_72_pred_5 = _3331;
                    }
                    _3004 = frontier_phi_72_pred;
                    _3002 = frontier_phi_72_pred_1;
                    _3000 = frontier_phi_72_pred_2;
                    _2998 = frontier_phi_72_pred_3;
                    _2996 = frontier_phi_72_pred_4;
                    _2994 = frontier_phi_72_pred_5;
                    uint _3139 = _3138 + 1u;
                    if (_3139 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3132 = _2994;
                        _3133 = _2996;
                        _3134 = _2998;
                        _3135 = _3000;
                        _3136 = _3002;
                        _3137 = _3004;
                        _3138 = _3139;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3004;
                frontier_phi_60_61_ladder_1 = _3002;
                frontier_phi_60_61_ladder_2 = _2998;
                frontier_phi_60_61_ladder_3 = _2996;
                frontier_phi_60_61_ladder_4 = _2994;
                frontier_phi_60_61_ladder_5 = _3000;
            }
            else
            {
                frontier_phi_60_61_ladder = _2882;
                frontier_phi_60_61_ladder_1 = _2880;
                frontier_phi_60_61_ladder_2 = _2876;
                frontier_phi_60_61_ladder_3 = _2874;
                frontier_phi_60_61_ladder_4 = _2872;
                frontier_phi_60_61_ladder_5 = _2878;
            }
            _2993 = frontier_phi_60_61_ladder_4;
            _2995 = frontier_phi_60_61_ladder_3;
            _2997 = frontier_phi_60_61_ladder_2;
            _2999 = frontier_phi_60_61_ladder_5;
            _3001 = frontier_phi_60_61_ladder_1;
            _3003 = frontier_phi_60_61_ladder;
        }
        float _3008 = isnan(1.0) ? _745 : (isnan(_745) ? 1.0 : min(_745, 1.0));
        _2776 = (_3008 * _2999) + _2288;
        _2778 = (_3008 * _3001) + _2290;
        _2780 = (_3008 * _3003) + _2292;
        _2782 = ((_2993 * _730) * _3008) + _2626;
        _2784 = ((_2995 * _732) * _3008) + _2628;
        _2786 = ((_2997 * _733) * _3008) + _2630;
    }
    else
    {
        _2776 = _2288;
        _2778 = _2290;
        _2780 = _2292;
        _2782 = _2626;
        _2784 = _2628;
        _2786 = _2630;
    }
    uint _2792 = _706 + uint(cbMatDynParam._m0[0u].w);
    float _2798 = ((((((_492.x - _489) * _425) + _489) * cbMtdParam._m0[13u].x) + ((((_446.x - _443) * _425) + _443) * cbMtdParam._m0[11u].x)) * _292) * cbInstanceData._m0[_2792].x;
    float _2799 = ((((((_492.y - _490) * _425) + _490) * cbMtdParam._m0[13u].y) + ((((_446.y - _444) * _425) + _444) * cbMtdParam._m0[11u].y)) * _292) * cbInstanceData._m0[_2792].y;
    float _2800 = ((((((_492.z - _491) * _425) + _491) * cbMtdParam._m0[13u].z) + ((((_446.z - _445) * _425) + _445) * cbMtdParam._m0[11u].z)) * _292) * cbInstanceData._m0[_2792].z;
    float _4718 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _4729 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _4740 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _2817 = (((isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0))) * (_2776 + ((isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0))) * _745))) + ((_2782 + ((isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0))) * _1554)) * cbPerFrame._m0[3u].x)) + _2798;
    float _2819 = (_2799 + ((_2784 + ((isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0))) * _1554)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0))) * (_2778 + ((isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0))) * _745)));
    float _2821 = (_2800 + ((_2786 + ((isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0))) * _1554)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0))) * (_2780 + ((isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0))) * _745)));
    float _4766 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2834 = isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0));
    uint _2835 = _705 + 6u;
    float _2843 = _665 / cbSceneParam._m0[86u].x;
    float _2844 = _666 / cbSceneParam._m0[86u].y;
    vec4 _2858 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2843, _2844, (log2((isnan(cbSceneParam._m0[77u].w) ? _599 : (isnan(_599) ? cbSceneParam._m0[77u].w : min(_599, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2860 = _2858.x;
    float _2861 = _2858.y;
    float _2862 = _2858.z;
    float _2863 = _2858.w;
    float _2934;
    float _2936;
    float _2938;
    float _2940;
    if (_599 > cbSceneParam._m0[78u].w)
    {
        float _2897 = isnan(_599) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _599 : min(cbSceneParam._m0[80u].w, _599));
        float _2898 = _2897 / _599;
        float _2909 = _2898 * _650;
        float _2910 = _651 * _2898;
        float _2911 = (-0.0) - _2910;
        float _2912 = _2898 * _652;
        float _2914 = (cbSceneParam._m0[77u].w * _2911) / _2897;
        float _2915 = _2914 + cbSceneParam._m0[79u].w;
        float _2916 = cbSceneParam._m0[79u].w - _2910;
        float _2922 = sqrt(((_2909 * _2909) + (_2910 * _2910)) + (_2912 * _2912));
        float _2925 = (1.0 - (cbSceneParam._m0[77u].w / _2897)) * _2922;
        float _2930 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2932 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3094;
        if (abs((_2911 - _2914) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3094 = ((((_2915 > 0.0) ? exp2(_2930 * _2915) : (2.0 - exp2(_2932 * _2915))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2925;
        }
        else
        {
            float _3054 = 1.0 / cbSceneParam._m0[80u].x;
            float _3055 = isnan(_2916) ? _2915 : (isnan(_2915) ? _2916 : max(_2915, _2916));
            float _3056 = isnan(_2916) ? _2915 : (isnan(_2915) ? _2916 : min(_2915, _2916));
            float _3065 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : min(_3055, 0.0));
            float _3066 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : min(_3056, 0.0));
            _3094 = ((abs(_2922 / _2911) * cbSceneParam._m0[80u].y) * ((((_3065 - _3066) * 2.0) - ((exp2(_2930 * (isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0)))) - exp2(_2930 * (isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0))))) * _3054)) - ((exp2(_2932 * _3065) - exp2(_2932 * _3066)) * _3054))) + (_2925 * cbSceneParam._m0[80u].z);
        }
        vec4 _3096 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2843, _2844, 1.0), 0.0);
        float _3105 = exp2((_3094 * (-1.44269502162933349609375)) * (1.0 - _3096.w));
        float _3106 = log2(_3105);
        float _3122 = log2(_2863);
        _2934 = (exp2(_3122 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3106 * cbSceneParam._m0[78u].x)) * _3096.x) / cbSceneParam._m0[78u].x)) + _2860;
        _2936 = (exp2(_3122 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3106 * cbSceneParam._m0[78u].y)) * _3096.y) / cbSceneParam._m0[78u].y)) + _2861;
        _2938 = (exp2(_3122 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3106 * cbSceneParam._m0[78u].z)) * _3096.z) / cbSceneParam._m0[78u].z)) + _2862;
        _2940 = _3105 * _2863;
    }
    else
    {
        _2934 = _2860;
        _2936 = _2861;
        _2938 = _2862;
        _2940 = _2863;
    }
    float _2952 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2953 = _2952 == 3.0;
    float _2954 = log2(_2940);
    float _2958 = exp2(_2954 * cbSceneParam._m0[78u].x);
    float _2959 = exp2(_2954 * cbSceneParam._m0[78u].y);
    float _2960 = exp2(_2954 * cbSceneParam._m0[78u].z);
    float _2961 = _2958 * (isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0)));
    float _2962 = _2959 * (isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0)));
    float _2963 = _2960 * (isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0)));
    float _2972 = (_2952 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2972 * (_2953 ? _2961 : (_2961 + (cbSceneParam._m0[72u].w * _2934)));
    SV_Target.y = _2972 * (_2953 ? _2962 : (_2962 + (cbSceneParam._m0[72u].w * _2936)));
    SV_Target.z = _2972 * (_2953 ? _2963 : (_2963 + (cbSceneParam._m0[72u].w * _2938)));
    SV_Target.w = cbInstanceData._m0[_2835].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2798) * _2834) * _2958) * _2972;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2799) * _2834) * _2959) * _2972;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2800) * _2834) * _2960) * _2972;
    SV_Target_1.w = cbInstanceData._m0[_2835].w;
}


