#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1108;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _199 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _200 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _201 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _207 = inversesqrt(dot(vec3(_199, _200, _201), vec3(_199, _200, _201)));
    float _214 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _243 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _249 = _243.x * cbMtdParam._m0[9u].x;
    float _250 = _243.y * cbMtdParam._m0[9u].y;
    float _251 = _243.z * cbMtdParam._m0[9u].z;
    vec4 _289 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[5u].w));
    float _305 = (TEXCOORD_3.x - ((cbMtdParam._m0[14u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[14u].y + 1.0);
    float _3736 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _306 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
    float _313 = (((_289.x * cbMtdParam._m0[10u].x) - _249) * _306) + _249;
    float _314 = (((_289.y * cbMtdParam._m0[10u].y) - _250) * _306) + _250;
    float _315 = (((_289.z * cbMtdParam._m0[10u].z) - _251) * _306) + _251;
    vec4 _332 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    vec4 _347 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[4u].w));
    float _355 = (_347.x * 2.0) + (-1.0);
    float _357 = (_347.y * 2.0) + (-1.0);
    float _358 = dot(vec2(_355, _357), vec2(_355, _357));
    float _3747 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    vec4 _375 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _379 = _375.z;
    float _382 = (_375.x * 2.0) + (-1.0);
    float _383 = (_375.y * 2.0) + (-1.0);
    float _384 = dot(vec2(_382, _383), vec2(_382, _383));
    float _3758 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _389 = sqrt(1.0 - (isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0))));
    float _392 = (_306 * (_347.z - _379)) + _379;
    float _405 = (cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _406 = (cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _435 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * ((cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * ((cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[10u].w));
    float _440 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[15u].w;
    float _447 = ((_435.y * 0.5) + (-0.25)) * cbMtdParam._m0[15u].z;
    float _449 = (-0.0) - (cbMtdParam._m0[15u].z * ((_435.x * 0.5) + (-0.25)));
    float _451 = fract(_440);
    float _453 = fract(_440 + 0.5);
    float _454 = _451 * _449;
    float _455 = _447 * _451;
    float _458 = _453 * _449;
    float _459 = _447 * _453;
    float _464 = abs((_451 * 2.0) + (-1.0));
    vec4 _480 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_454 + _405) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_455 + _406) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _482 = _480.x;
    float _483 = _480.y;
    float _484 = _480.z;
    vec4 _485 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_458 + _405) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_459 + _406) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _512 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _513 = (cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _526 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_454 + _512) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_455 + _513) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _528 = _526.x;
    float _529 = _526.y;
    float _530 = _526.z;
    vec4 _531 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_458 + _512) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_459 + _513) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _557 = (TEXCOORD_9.x - ((cbMtdParam._m0[16u].y * (1.0 - TEXCOORD_9.x)) * (_332.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[16u].z + 1.0);
    float _3769 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _558 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
    float _568 = (_306 * (_355 - _382)) + _382;
    float _569 = (_306 * (_357 - _383)) + _383;
    float _570 = (_306 * (sqrt(1.0 - (isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0)))) - _389)) + _389;
    float _573 = fma(_570, _214 * NORMAL.x, fma(_569, _221 * TANGENT.x, (_207 * _199) * _568));
    float _576 = fma(_570, _214 * NORMAL.y, fma(_569, _221 * TANGENT.y, (_207 * _200) * _568));
    float _579 = fma(_570, _214 * NORMAL.z, fma(_569, _221 * TANGENT.z, (_207 * _201) * _568));
    float _583 = inversesqrt(dot(vec3(_573, _576, _579), vec3(_573, _576, _579)));
    float _584 = _583 * _573;
    float _585 = _583 * _576;
    float _586 = _583 * _579;
    float _3780 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _587 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
    float _3791 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _3802 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _3813 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _606 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _647 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _657 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _647);
    float _658 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _647);
    float _659 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _647);
    float _663 = inversesqrt(dot(vec3(_657, _658, _659), vec3(_657, _658, _659)));
    float _664 = _657 * _663;
    float _665 = _658 * _663;
    float _666 = _659 * _663;
    float _672 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _673 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _693 = fma(_586, cbSceneParam._m0[5u].z, fma(_585, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _584));
    float _696 = fma(_586, cbSceneParam._m0[6u].z, fma(_585, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _584));
    float _699 = fma(_586, cbSceneParam._m0[7u].z, fma(_585, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _584));
    uint _712 = uint(roundEven(NORMAL.w)) * 13u;
    uint _713 = _712 + 9u;
    uint _714 = _713 + uint(cbMatDynParam._m0[0u].w);
    float _720 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0)))) * cbInstanceData._m0[_714].x;
    float _721 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0)))) * cbInstanceData._m0[_714].y;
    float _722 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0)))) * cbInstanceData._m0[_714].z;
    float _3824 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _723 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
    float _3835 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _724 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
    float _3846 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _725 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
    vec4 _734 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _672, cbSceneParam._m0[86u].y * _673));
    float _737 = _734.x * TEXCOORD_3.w;
    float _738 = dot(vec3(_584, _585, _586), vec3(_664, _665, _666));
    float _741 = _738 * 2.0;
    float _745 = (_741 * _584) - _664;
    float _746 = (_741 * _585) - _665;
    float _747 = (_741 * _586) - _666;
    float _751 = abs(dot(vec3(_664, _665, _666), vec3(_584, _585, _586)));
    float _3857 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _753 = sqrt(_587);
    float _766 = exp2((_753 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_753 * 3.0));
    float _798 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _802 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _806 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1107;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _833 = fma(_806, cbModelParam._m0[26u].z, fma(_802, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _798));
        float _837 = fma(_806, cbModelParam._m0[27u].z, fma(_802, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _798));
        float _841 = fma(_806, cbModelParam._m0[28u].z, fma(_802, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _798));
        float _865 = _798 + _584;
        float _866 = _802 + _585;
        float _867 = _806 + _586;
        float _877 = fma(_867, cbModelParam._m0[26u].z, fma(_866, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _865)) - _833;
        float _878 = fma(_867, cbModelParam._m0[27u].z, fma(_866, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _865)) - _837;
        float _879 = fma(_867, cbModelParam._m0[28u].z, fma(_866, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _865)) - _841;
        float _883 = inversesqrt(dot(vec3(_877, _878, _879), vec3(_877, _878, _879)));
        float _896 = ((_883 * _877) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_833 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _897 = ((_883 * _878) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_837 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _898 = ((_883 * _879) / cbModelParam._m0[34u].z) + ((((((_841 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _901 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_896, _897, _898), 0.0);
        vec4 _908 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_896, _897, _898), 0.0);
        vec4 _915 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_896, _897, _898), 0.0);
        vec4 _922 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_896, _897, _898), 0.0);
        float _935 = exp2((_901.w + (-0.5)) * 20.0) * 2.0;
        float _936 = _935 * (_901.x + (-0.5));
        float _937 = _935 * (_901.y + (-0.5));
        float _938 = _935 * (_901.z + (-0.5));
        float _945 = exp2((_908.w + (-0.5)) * 20.0) * 2.0;
        float _946 = _945 * (_908.x + (-0.5));
        float _947 = _945 * (_908.y + (-0.5));
        float _948 = _945 * (_908.z + (-0.5));
        float _955 = exp2((_915.w + (-0.5)) * 20.0) * 2.0;
        float _956 = _955 * (_915.x + (-0.5));
        float _957 = _955 * (_915.y + (-0.5));
        float _958 = _955 * (_915.z + (-0.5));
        float _965 = exp2((_922.w + (-0.5)) * 20.0) * 2.0;
        float _966 = _965 * (_922.x + (-0.5));
        float _967 = _965 * (_922.y + (-0.5));
        float _968 = _965 * (_922.z + (-0.5));
        float _969 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _970 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _971 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _972 = _936 * 0.5;
        float _973 = _946 * 0.5;
        float _974 = _956 * 0.5;
        float _975 = dot(vec3(_972, _973, _974), vec3(_972, _973, _974));
        float _980 = (_975 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_975);
        float _989 = (dot(vec3(_584, _585, _586), vec3(_980 * _972, _980 * _973, _980 * _974)) + 1.0) * 0.5;
        float _3883 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _999 = sqrt(((_973 * _973) + (_972 * _972)) + (_974 * _974)) / (_969 + 9.9999997473787516355514526367188e-06);
        float _3894 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1000 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1001 = _1000 * 2.0;
        float _1005 = (1.0 - _1000) / (_1000 + 1.0);
        float _3905 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1006 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1015 = ((((1.0 - _1006) * (_1001 + 2.0)) * exp2(log2(isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))) * (_1001 + 1.0))) + _1006) * _969;
        float _1016 = _937 * 0.5;
        float _1017 = _947 * 0.5;
        float _1018 = _957 * 0.5;
        float _1019 = dot(vec3(_1016, _1017, _1018), vec3(_1016, _1017, _1018));
        float _1024 = (_1019 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1019);
        float _1032 = (dot(vec3(_584, _585, _586), vec3(_1024 * _1016, _1024 * _1017, _1024 * _1018)) + 1.0) * 0.5;
        float _3916 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1041 = sqrt(((_1017 * _1017) + (_1016 * _1016)) + (_1018 * _1018)) / (_970 + 9.9999997473787516355514526367188e-06);
        float _3927 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1042 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1043 = _1042 * 2.0;
        float _1047 = (1.0 - _1042) / (_1042 + 1.0);
        float _3938 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1048 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1057 = ((((1.0 - _1048) * (_1043 + 2.0)) * exp2(log2(isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))) * (_1043 + 1.0))) + _1048) * _970;
        float _1058 = _938 * 0.5;
        float _1059 = _948 * 0.5;
        float _1060 = _958 * 0.5;
        float _1061 = dot(vec3(_1058, _1059, _1060), vec3(_1058, _1059, _1060));
        float _1066 = (_1061 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1061);
        float _1074 = (dot(vec3(_584, _585, _586), vec3(_1066 * _1058, _1066 * _1059, _1066 * _1060)) + 1.0) * 0.5;
        float _3949 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1083 = sqrt(((_1059 * _1059) + (_1058 * _1058)) + (_1060 * _1060)) / (_971 + 9.9999997473787516355514526367188e-06);
        float _3960 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1084 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1085 = _1084 * 2.0;
        float _1089 = (1.0 - _1084) / (_1084 + 1.0);
        float _3971 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _1099 = ((((1.0 - _1090) * (_1085 + 2.0)) * exp2(log2(isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))) * (_1085 + 1.0))) + _1090) * _971;
        _1107 = _938;
        _1109 = _937;
        _1110 = _936;
        _1111 = _948;
        _1112 = _947;
        _1113 = _946;
        _1114 = _958;
        _1115 = _957;
        _1116 = _956;
        _1117 = _971;
        _1118 = _970;
        _1119 = _969;
        _1120 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0)));
        _1121 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0)));
        _1122 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0)));
    }
    else
    {
        _1107 = _1108;
        _1109 = _1108;
        _1110 = _1108;
        _1111 = _1108;
        _1112 = _1108;
        _1113 = _1108;
        _1114 = _1108;
        _1115 = _1108;
        _1116 = _1108;
        _1117 = _1108;
        _1118 = _1108;
        _1119 = _1108;
        _1120 = 0.0;
        _1121 = 0.0;
        _1122 = 0.0;
    }
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1148 = fma(_806, cbModelParam._m0[30u].z, fma(_802, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _798));
        float _1152 = fma(_806, cbModelParam._m0[31u].z, fma(_802, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _798));
        float _1156 = fma(_806, cbModelParam._m0[32u].z, fma(_802, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _798));
        float _1179 = _798 + _584;
        float _1180 = _802 + _585;
        float _1181 = _806 + _586;
        float _1191 = fma(_1181, cbModelParam._m0[30u].z, fma(_1180, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1179)) - _1148;
        float _1192 = fma(_1181, cbModelParam._m0[31u].z, fma(_1180, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1179)) - _1152;
        float _1193 = fma(_1181, cbModelParam._m0[32u].z, fma(_1180, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1179)) - _1156;
        float _1197 = inversesqrt(dot(vec3(_1191, _1192, _1193), vec3(_1191, _1192, _1193)));
        float _1210 = ((_1197 * _1191) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1148 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1211 = ((_1197 * _1192) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1152 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1212 = ((_1197 * _1193) / cbModelParam._m0[35u].z) + ((((((_1156 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1214 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1210, _1211, _1212), 0.0);
        vec4 _1221 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1210, _1211, _1212), 0.0);
        vec4 _1228 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1210, _1211, _1212), 0.0);
        vec4 _1235 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1210, _1211, _1212), 0.0);
        float _1247 = exp2((_1214.w + (-0.5)) * 20.0) * 2.0;
        float _1248 = _1247 * (_1214.x + (-0.5));
        float _1249 = _1247 * (_1214.y + (-0.5));
        float _1250 = _1247 * (_1214.z + (-0.5));
        float _1257 = exp2((_1221.w + (-0.5)) * 20.0) * 2.0;
        float _1258 = _1257 * (_1221.x + (-0.5));
        float _1259 = _1257 * (_1221.y + (-0.5));
        float _1260 = _1257 * (_1221.z + (-0.5));
        float _1267 = exp2((_1228.w + (-0.5)) * 20.0) * 2.0;
        float _1268 = _1267 * (_1228.x + (-0.5));
        float _1269 = _1267 * (_1228.y + (-0.5));
        float _1270 = _1267 * (_1228.z + (-0.5));
        float _1277 = exp2((_1235.w + (-0.5)) * 20.0) * 2.0;
        float _1278 = _1277 * (_1235.x + (-0.5));
        float _1279 = _1277 * (_1235.y + (-0.5));
        float _1280 = _1277 * (_1235.z + (-0.5));
        float _1281 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1282 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1283 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1284 = _1248 * 0.5;
        float _1285 = _1258 * 0.5;
        float _1286 = _1268 * 0.5;
        float _1287 = dot(vec3(_1284, _1285, _1286), vec3(_1284, _1285, _1286));
        float _1292 = (_1287 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1287);
        float _1300 = (dot(vec3(_584, _585, _586), vec3(_1292 * _1284, _1292 * _1285, _1292 * _1286)) + 1.0) * 0.5;
        float _4012 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1309 = sqrt(((_1285 * _1285) + (_1284 * _1284)) + (_1286 * _1286)) / (_1281 + 9.9999997473787516355514526367188e-06);
        float _4023 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _1311 = _1310 * 2.0;
        float _1315 = (1.0 - _1310) / (_1310 + 1.0);
        float _4034 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1325 = ((((1.0 - _1316) * (_1311 + 2.0)) * exp2(log2(isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) * (_1311 + 1.0))) + _1316) * _1281;
        float _1326 = _1249 * 0.5;
        float _1327 = _1259 * 0.5;
        float _1328 = _1269 * 0.5;
        float _1329 = dot(vec3(_1326, _1327, _1328), vec3(_1326, _1327, _1328));
        float _1334 = (_1329 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1329);
        float _1342 = (dot(vec3(_584, _585, _586), vec3(_1334 * _1326, _1334 * _1327, _1334 * _1328)) + 1.0) * 0.5;
        float _4045 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1351 = sqrt(((_1327 * _1327) + (_1326 * _1326)) + (_1328 * _1328)) / (_1282 + 9.9999997473787516355514526367188e-06);
        float _4056 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1353 = _1352 * 2.0;
        float _1357 = (1.0 - _1352) / (_1352 + 1.0);
        float _4067 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1367 = ((((1.0 - _1358) * (_1353 + 2.0)) * exp2(log2(isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * (_1353 + 1.0))) + _1358) * _1282;
        float _1368 = _1250 * 0.5;
        float _1369 = _1260 * 0.5;
        float _1370 = _1270 * 0.5;
        float _1371 = dot(vec3(_1368, _1369, _1370), vec3(_1368, _1369, _1370));
        float _1376 = (_1371 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1371);
        float _1384 = (dot(vec3(_584, _585, _586), vec3(_1376 * _1368, _1376 * _1369, _1376 * _1370)) + 1.0) * 0.5;
        float _4078 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1393 = sqrt(((_1369 * _1369) + (_1368 * _1368)) + (_1370 * _1370)) / (_1283 + 9.9999997473787516355514526367188e-06);
        float _4089 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1394 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _1395 = _1394 * 2.0;
        float _1399 = (1.0 - _1394) / (_1394 + 1.0);
        float _4100 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1400 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _1409 = ((((1.0 - _1400) * (_1395 + 2.0)) * exp2(log2(isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * (_1395 + 1.0))) + _1400) * _1283;
        _1417 = _1250;
        _1418 = _1249;
        _1419 = _1248;
        _1420 = _1260;
        _1421 = _1259;
        _1422 = _1258;
        _1423 = _1270;
        _1424 = _1269;
        _1425 = _1268;
        _1426 = _1283;
        _1427 = _1282;
        _1428 = _1281;
        _1429 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0)));
        _1430 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0)));
        _1431 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0)));
    }
    else
    {
        _1417 = _1108;
        _1418 = _1108;
        _1419 = _1108;
        _1420 = _1108;
        _1421 = _1108;
        _1422 = _1108;
        _1423 = _1108;
        _1424 = _1108;
        _1425 = _1108;
        _1426 = _1108;
        _1427 = _1108;
        _1428 = _1108;
        _1429 = 0.0;
        _1430 = 0.0;
        _1431 = 0.0;
    }
    float _1441 = (cbModelParam._m0[1u].x * (_1429 - _1120)) + _1120;
    float _1442 = (cbModelParam._m0[1u].x * (_1430 - _1121)) + _1121;
    float _1443 = (cbModelParam._m0[1u].x * (_1431 - _1122)) + _1122;
    float _1464 = fma(_1443, cbSceneParam._m0[89u].z, fma(_1442, cbSceneParam._m0[89u].y, _1441 * cbSceneParam._m0[89u].x));
    float _1467 = fma(_1443, cbSceneParam._m0[90u].z, fma(_1442, cbSceneParam._m0[90u].y, _1441 * cbSceneParam._m0[90u].x));
    float _1470 = fma(_1443, cbSceneParam._m0[91u].z, fma(_1442, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1441));
    float _1485 = _745 * 0.5;
    float _1486 = _746 * 0.5;
    float _1487 = _747 * 0.5;
    float _1488 = dot(vec4(_1485, _1486, _1487, 1.0), vec4(_1419, _1422, _1425, _1428));
    float _1491 = dot(vec4(_1485, _1486, _1487, 1.0), vec4(_1418, _1421, _1424, _1427));
    float _1494 = dot(vec4(_1485, _1486, _1487, 1.0), vec4(_1417, _1420, _1423, _1426));
    float _1528;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1501 = dot(vec4(_1485, _1486, _1487, 1.0), vec4(_1107, _1111, _1114, _1117));
        float _1505 = dot(vec4(_1485, _1486, _1487, 1.0), vec4(_1109, _1112, _1115, _1118));
        float _1509 = dot(vec4(_1485, _1486, _1487, 1.0), vec4(_1110, _1113, _1116, _1119));
        float _1516 = dot(vec4(cbModelParam._m0[39u]), vec4(_1485, _1486, _1487, 1.0));
        _1528 = dot(vec3(isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0)), isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0)), isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1516) ? 0.0 : (isnan(0.0) ? _1516 : max(0.0, _1516))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1528 = 1.0;
    }
    float _1539;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1530 = dot(vec4(cbModelParam._m0[40u]), vec4(_1485, _1486, _1487, 1.0));
        _1539 = dot(vec3(isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0)), isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0)), isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1530) ? 0.0 : (isnan(0.0) ? _1530 : max(0.0, _1530))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1539 = 1.0;
    }
    float _1543 = (_1539 * cbModelParam._m0[1u].x) + (_1528 * (1.0 - cbModelParam._m0[1u].x));
    float _1553 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _587);
    float _1554 = isnan(_1553) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1553 : min(cbModelParam._m0[25u].z, _1553));
    float _1634;
    float _1636;
    float _1638;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1601 = fma(_806, cbModelParam._m0[13u].z, fma(_802, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _798)) + cbModelParam._m0[13u].w;
        float _1605 = fma(_806, cbModelParam._m0[14u].z, fma(_802, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _798)) + cbModelParam._m0[14u].w;
        float _1609 = fma(_806, cbModelParam._m0[15u].z, fma(_802, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _798)) + cbModelParam._m0[15u].w;
        float _1612 = fma(_747, cbModelParam._m0[13u].z, fma(_746, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _745));
        float _1615 = fma(_747, cbModelParam._m0[14u].z, fma(_746, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _745));
        float _1618 = fma(_747, cbModelParam._m0[15u].z, fma(_746, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _745));
        float _1646;
        if (_1612 > 0.0)
        {
            _1646 = abs((1.0 - _1601) / _1612);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1612 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1601 + 1.0) / _1612);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1646 = frontier_phi_14_12_ladder;
        }
        float _1817;
        if (_1615 > 0.0)
        {
            _1817 = abs((1.0 - _1605) / _1615);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1615 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1605 + 1.0) / _1615);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1817 = frontier_phi_23_19_ladder;
        }
        float _2112;
        if (_1618 > 0.0)
        {
            _2112 = abs((1.0 - _1609) / _1618);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1618 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1609 + 1.0) / _1618);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2112 = frontier_phi_35_30_ladder;
        }
        float _2114 = isnan(_1817) ? _1646 : (isnan(_1646) ? _1817 : min(_1646, _1817));
        float _2115 = isnan(_2112) ? _2114 : (isnan(_2114) ? _2112 : min(_2114, _2112));
        float _2119 = (_2115 * _1612) + _1601;
        float _2120 = (_2115 * _1615) + _1605;
        float _2121 = (_2115 * _1618) + _1609;
        float _2122 = _2115 * 9.9999997473787516355514526367188e-05;
        float _2124 = (-1.0) - _2122;
        float _2126 = _2122 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2121 > _2126) || ((_2121 < _2124) || ((_2120 > _2126) || ((_2120 < _2124) || ((_2119 < _2124) || (_2119 > _2126))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2266 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2121, cbModelParam._m0[9u].z, fma(_2120, cbModelParam._m0[9u].y, _2119 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2121, cbModelParam._m0[10u].z, fma(_2120, cbModelParam._m0[10u].y, _2119 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2121, cbModelParam._m0[11u].z, fma(_2120, cbModelParam._m0[11u].y, _2119 * cbModelParam._m0[11u].x))), _1554);
            frontier_phi_13_35_ladder = _2266.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2266.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2266.x * cbModelParam._m0[1u].y;
        }
        _1634 = frontier_phi_13_35_ladder_2;
        _1636 = frontier_phi_13_35_ladder_1;
        _1638 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1622 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_745, _746, _747), _1554);
        _1634 = _1622.x * cbModelParam._m0[1u].y;
        _1636 = _1622.y * cbModelParam._m0[1u].y;
        _1638 = _1622.z * cbModelParam._m0[1u].y;
    }
    float _1642 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _587);
    float _1643 = isnan(_1642) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1642 : min(cbModelParam._m0[25u].w, _1642));
    float _1733;
    float _1735;
    float _1737;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1697 = fma(_806, cbModelParam._m0[21u].z, fma(_802, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _798)) + cbModelParam._m0[21u].w;
        float _1701 = fma(_806, cbModelParam._m0[22u].z, fma(_802, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _798)) + cbModelParam._m0[22u].w;
        float _1705 = fma(_806, cbModelParam._m0[23u].z, fma(_802, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _798)) + cbModelParam._m0[23u].w;
        float _1708 = fma(_747, cbModelParam._m0[21u].z, fma(_746, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _745));
        float _1711 = fma(_747, cbModelParam._m0[22u].z, fma(_746, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _745));
        float _1714 = fma(_747, cbModelParam._m0[23u].z, fma(_746, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _745));
        float _1822;
        if (_1708 > 0.0)
        {
            _1822 = abs((1.0 - _1697) / _1708);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1708 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1697 + 1.0) / _1708);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1822 = frontier_phi_25_21_ladder;
        }
        float _2139;
        if (_1711 > 0.0)
        {
            _2139 = abs((1.0 - _1701) / _1711);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1711 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1701 + 1.0) / _1711);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2139 = frontier_phi_37_32_ladder;
        }
        float _2466;
        if (_1714 > 0.0)
        {
            _2466 = abs((1.0 - _1705) / _1714);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1714 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1705 + 1.0) / _1714);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2466 = frontier_phi_47_44_ladder;
        }
        float _2468 = isnan(_2139) ? _1822 : (isnan(_1822) ? _2139 : min(_1822, _2139));
        float _2469 = isnan(_2466) ? _2468 : (isnan(_2468) ? _2466 : min(_2468, _2466));
        float _2473 = (_2469 * _1708) + _1697;
        float _2474 = (_2469 * _1711) + _1701;
        float _2475 = (_2469 * _1714) + _1705;
        float _2476 = _2469 * 9.9999997473787516355514526367188e-05;
        float _2477 = (-1.0) - _2476;
        float _2479 = _2476 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2475 > _2479) || ((_2475 < _2477) || ((_2474 > _2479) || ((_2474 < _2477) || ((_2473 < _2477) || (_2473 > _2479))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2593 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2475, cbModelParam._m0[17u].z, fma(_2474, cbModelParam._m0[17u].y, _2473 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2475, cbModelParam._m0[18u].z, fma(_2474, cbModelParam._m0[18u].y, _2473 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2475, cbModelParam._m0[19u].z, fma(_2474, cbModelParam._m0[19u].y, _2473 * cbModelParam._m0[19u].x))), _1643);
            frontier_phi_22_47_ladder = _2593.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2593.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2593.x * cbModelParam._m0[1u].z;
        }
        _1733 = frontier_phi_22_47_ladder_2;
        _1735 = frontier_phi_22_47_ladder_1;
        _1737 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1717 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_745, _746, _747), _1643);
        _1733 = _1717.x * cbModelParam._m0[1u].z;
        _1735 = _1717.y * cbModelParam._m0[1u].z;
        _1737 = _1717.z * cbModelParam._m0[1u].z;
    }
    float _1749 = ((((1.0 - _766) * ((_753 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_766 * _753)) * _737;
    float _1750 = _1749 * ((cbModelParam._m0[1u].w * (_1733 - _1634)) + _1634);
    float _1751 = _1749 * ((cbModelParam._m0[1u].w * (_1735 - _1636)) + _1636);
    float _1752 = _1749 * ((cbModelParam._m0[1u].w * (_1737 - _1638)) + _1638);
    float _1755 = fma(_1752, cbSceneParam._m0[89u].z, fma(_1751, cbSceneParam._m0[89u].y, _1750 * cbSceneParam._m0[89u].x));
    float _1758 = fma(_1752, cbSceneParam._m0[90u].z, fma(_1751, cbSceneParam._m0[90u].y, _1750 * cbSceneParam._m0[90u].x));
    float _1761 = fma(_1752, cbSceneParam._m0[91u].z, fma(_1751, cbSceneParam._m0[91u].y, _1750 * cbSceneParam._m0[91u].x));
    float _1796 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1800 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1804 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1808 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1809 = _1796 / _1808;
    float _1810 = _1800 / _1808;
    float _1811 = _1804 / _1808;
    float _1958;
    float _1959;
    float _1960;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1838 = ((uint(_1811 > cbSceneParam._m0[59u].y) + uint(_1811 > cbSceneParam._m0[59u].x)) + uint(_1811 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1839 = _1838 + 43u;
        uint _1847 = _1838 + 44u;
        uint _1855 = _1838 + 45u;
        uint _1863 = _1838 + 46u;
        float _1874 = fma(_1808, cbSceneParam._m0[_1839].w, fma(_1804, cbSceneParam._m0[_1839].z, fma(_1800, cbSceneParam._m0[_1839].y, _1796 * cbSceneParam._m0[_1839].x)));
        float _1878 = fma(_1808, cbSceneParam._m0[_1847].w, fma(_1804, cbSceneParam._m0[_1847].z, fma(_1800, cbSceneParam._m0[_1847].y, _1796 * cbSceneParam._m0[_1847].x)));
        float _1886 = fma(_1808, cbSceneParam._m0[_1863].w, fma(_1804, cbSceneParam._m0[_1863].z, fma(_1800, cbSceneParam._m0[_1863].y, _1796 * cbSceneParam._m0[_1863].x)));
        float _1891 = cbSceneParam._m0[33u].z * _1886;
        float _1893 = cbSceneParam._m0[33u].w * _1886;
        float _1896 = fma(_1808, cbSceneParam._m0[_1855].w, fma(_1804, cbSceneParam._m0[_1855].z, fma(_1800, cbSceneParam._m0[_1855].y, _1796 * cbSceneParam._m0[_1855].x))) / _1886;
        float _1944 = (cbSceneParam._m0[33u].x - sqrt(((_1810 * _1810) + (_1809 * _1809)) + (_1811 * _1811))) * cbSceneParam._m0[33u].y;
        float _4226 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
        float _1951 = (isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1891 + _1874) / _1886, (_1893 + _1878) / _1886), _1896), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1893 + _1874) / _1886, (_1878 - _1891) / _1886), _1896), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1874 - _1891) / _1886, (_1878 - _1893) / _1886), _1896), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1874 - _1893) / _1886, (_1891 + _1878) / _1886), _1896), 0.0)).x), vec4(0.25)));
        _1958 = 1.0 - (_1951 * cbSceneParam._m0[34u].x);
        _1959 = 1.0 - (_1951 * cbSceneParam._m0[34u].y);
        _1960 = 1.0 - (_1951 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1958 = 1.0;
        _1959 = 1.0;
        _1960 = 1.0;
    }
    float _2024;
    float _2026;
    float _2028;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2012 = fma(_1808, cbSceneParam._m0[63u].w, fma(_1804, cbSceneParam._m0[63u].z, fma(_1800, cbSceneParam._m0[63u].y, _1796 * cbSceneParam._m0[63u].x)));
        float _2013 = fma(_1808, cbSceneParam._m0[60u].w, fma(_1804, cbSceneParam._m0[60u].z, fma(_1800, cbSceneParam._m0[60u].y, _1796 * cbSceneParam._m0[60u].x))) / _2012;
        float _2014 = fma(_1808, cbSceneParam._m0[61u].w, fma(_1804, cbSceneParam._m0[61u].z, fma(_1800, cbSceneParam._m0[61u].y, _1796 * cbSceneParam._m0[61u].x))) / _2012;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2013 >= cbSceneParam._m0[64u].x) && (_2014 >= cbSceneParam._m0[64u].y)) && (_2013 <= cbSceneParam._m0[64u].z)) && (_2014 <= cbSceneParam._m0[64u].w))
        {
            float _2152 = fma(_1808, cbSceneParam._m0[62u].w, fma(_1804, cbSceneParam._m0[62u].z, fma(_1800, cbSceneParam._m0[62u].y, _1796 * cbSceneParam._m0[62u].x))) / _2012;
            float _2156 = isnan(cbSceneParam._m0[41u].w) ? _2152 : (isnan(_2152) ? cbSceneParam._m0[41u].w : max(_2152, cbSceneParam._m0[41u].w));
            float _2199 = (cbSceneParam._m0[33u].x - sqrt(((_1810 * _1810) + (_1809 * _1809)) + (_1811 * _1811))) * cbSceneParam._m0[33u].y;
            float _4242 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
            float _2206 = (isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2013, cbSceneParam._m0[33u].w + _2014), _2156), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2013, _2014 - cbSceneParam._m0[33u].z), _2156), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2013 - cbSceneParam._m0[33u].z, _2014 - cbSceneParam._m0[33u].w), _2156), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2013 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2014), _2156), 0.0)).x), vec4(0.25)));
            float _2210 = 1.0 - (_2206 * cbSceneParam._m0[34u].x);
            float _2211 = 1.0 - (_2206 * cbSceneParam._m0[34u].y);
            float _2212 = 1.0 - (_2206 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2212) ? _1960 : (isnan(_1960) ? _2212 : min(_1960, _2212));
            frontier_phi_34_33_ladder_1 = isnan(_2211) ? _1959 : (isnan(_1959) ? _2211 : min(_1959, _2211));
            frontier_phi_34_33_ladder_2 = isnan(_2210) ? _1958 : (isnan(_1958) ? _2210 : min(_1958, _2210));
        }
        else
        {
            frontier_phi_34_33_ladder = _1960;
            frontier_phi_34_33_ladder_1 = _1959;
            frontier_phi_34_33_ladder_2 = _1958;
        }
        _2024 = frontier_phi_34_33_ladder_2;
        _2026 = frontier_phi_34_33_ladder_1;
        _2028 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2024 = _1958;
        _2026 = _1959;
        _2028 = _1960;
    }
    uvec4 _2033 = floatBitsToUint(cbInstanceData._m0[_712 + 5u]);
    uint _2035 = _2033.x * 14u;
    uint _2036 = _2035 + 13u;
    float _2043 = _737 + (-1.0);
    float _2048 = (cbLight._m0[_2036].x * _2043) + 1.0;
    float _2049 = (cbLight._m0[_2036].y * _2043) + 1.0;
    float _2050 = (cbLight._m0[_2036].z * _2043) + 1.0;
    float _2051 = (cbLight._m0[_2036].w * _2043) + 1.0;
    uint _2052 = _2035 + 5u;
    float _2058 = isnan(1.0) ? _2049 : (isnan(_2049) ? 1.0 : min(_2049, 1.0));
    uint _2062 = _2035 + 4u;
    float _2071 = isnan(1.0) ? _2048 : (isnan(_2048) ? 1.0 : min(_2048, 1.0));
    uint _2075 = _2035 | 1u;
    float _2086 = dot(vec3(cbLight._m0[_2035].xyz), vec3(_584, _585, _586));
    float _2089 = dot(vec3(cbLight._m0[_2075].xyz), vec3(_584, _585, _586));
    float _4278 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
    float _4289 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
    float _2094 = (isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0))) * 0.3183098733425140380859375;
    float _2096 = (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0))) * 0.3183098733425140380859375;
    float _2103 = ((cbLight._m0[_2052].x * _2058) * _2096) + (((cbLight._m0[_2062].x * _2024) * _2071) * _2094);
    float _2104 = ((_2058 * cbLight._m0[_2052].y) * _2096) + (((cbLight._m0[_2062].y * _2026) * _2071) * _2094);
    float _2105 = ((_2058 * cbLight._m0[_2052].z) * _2096) + (((cbLight._m0[_2062].z * _2028) * _2071) * _2094);
    uvec4 _2109 = floatBitsToUint(cbLight._m0[_2035 + 12u]);
    bool _2111 = _2109.x == 0u;
    float _2213;
    float _2215;
    float _2217;
    if (_2111)
    {
        _2213 = _2103;
        _2215 = _2104;
        _2217 = _2105;
    }
    else
    {
        uint _2221 = _2035 + 6u;
        float _2237 = (dot(vec3(cbLight._m0[_2035 + 2u].xyz), vec3(_584, _585, _586)) * 0.5) + 0.5;
        float _2238 = _2237 * _2237;
        float _4300 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
        float _2239 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _2240 = isnan(1.0) ? _2050 : (isnan(_2050) ? 1.0 : min(_2050, 1.0));
        _2213 = (((cbLight._m0[_2221].x * 0.3183098733425140380859375) * _2239) * _2240) + _2103;
        _2215 = (((cbLight._m0[_2221].y * 0.3183098733425140380859375) * _2239) * _2240) + _2104;
        _2217 = (((cbLight._m0[_2221].z * 0.3183098733425140380859375) * _2239) * _2240) + _2105;
    }
    bool _2220 = _2109.y == 0u;
    float _2275;
    float _2277;
    float _2279;
    if (_2220)
    {
        _2275 = _2213;
        _2277 = _2215;
        _2279 = _2217;
    }
    else
    {
        uint _2437 = _2035 + 7u;
        float _2453 = (dot(vec3(cbLight._m0[_2035 + 3u].xyz), vec3(_584, _585, _586)) * 0.5) + 0.5;
        float _2454 = _2453 * _2453;
        float _4316 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
        float _2455 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
        float _2456 = isnan(1.0) ? _2051 : (isnan(_2051) ? 1.0 : min(_2051, 1.0));
        _2275 = (((cbLight._m0[_2437].x * 0.3183098733425140380859375) * _2455) * _2456) + _2213;
        _2277 = (((cbLight._m0[_2437].y * 0.3183098733425140380859375) * _2455) * _2456) + _2215;
        _2279 = (((cbLight._m0[_2437].z * 0.3183098733425140380859375) * _2455) * _2456) + _2217;
    }
    uint _2282 = _2035 + 8u;
    float _2295 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2035].w)) * _587) * 0.949999988079071044921875);
    float _2296 = _2295 * _2295;
    float _2297 = cbLight._m0[_2035].x + _664;
    float _2298 = cbLight._m0[_2035].y + _665;
    float _2299 = cbLight._m0[_2035].z + _666;
    float _2303 = inversesqrt(dot(vec3(_2297, _2298, _2299), vec3(_2297, _2298, _2299)));
    float _2304 = _2303 * _2297;
    float _2305 = _2303 * _2298;
    float _2306 = _2303 * _2299;
    float _2307 = dot(vec3(_584, _585, _586), vec3(cbLight._m0[_2035].xyz));
    float _4332 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
    float _2310 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
    float _4343 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _2311 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
    float _2312 = dot(vec3(_584, _585, _586), vec3(_2304, _2305, _2306));
    float _4354 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
    float _2315 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
    float _2316 = dot(vec3(cbLight._m0[_2035].xyz), vec3(_2304, _2305, _2306));
    float _4365 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
    float _2320 = _2296 * _2296;
    float _2324 = ((_2315 * _2315) * (_2320 + (-1.0))) + 1.0;
    float _2335 = (exp2(log2(1.0 - (isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2336 = 1.0 - _2296;
    float _2347 = (0.5 / (((_2311 * ((_2310 * _2336) + _2296)) + 9.9999999392252902907785028219223e-09) + (((_2311 * _2336) + _2296) * _2310))) * _2310;
    float _4376 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
    float _2349 = (isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0))) * (_2320 / ((_2324 * _2324) * 3.141590118408203125));
    uint _2363 = _2035 + 9u;
    float _2374 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2075].w)) * _587) * 0.949999988079071044921875);
    float _2375 = _2374 * _2374;
    float _2376 = cbLight._m0[_2075].x + _664;
    float _2377 = cbLight._m0[_2075].y + _665;
    float _2378 = cbLight._m0[_2075].z + _666;
    float _2382 = inversesqrt(dot(vec3(_2376, _2377, _2378), vec3(_2376, _2377, _2378)));
    float _2383 = _2382 * _2376;
    float _2384 = _2382 * _2377;
    float _2385 = _2382 * _2378;
    float _2386 = dot(vec3(_584, _585, _586), vec3(cbLight._m0[_2075].xyz));
    float _4387 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
    float _2389 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
    float _2390 = dot(vec3(_584, _585, _586), vec3(_2383, _2384, _2385));
    float _4398 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
    float _2393 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
    float _2394 = dot(vec3(cbLight._m0[_2075].xyz), vec3(_2383, _2384, _2385));
    float _4409 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
    float _2398 = _2375 * _2375;
    float _2402 = ((_2393 * _2393) * (_2398 + (-1.0))) + 1.0;
    float _2411 = (exp2(log2(1.0 - (isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2412 = 1.0 - _2375;
    float _2422 = (0.5 / (((_2311 * ((_2389 * _2412) + _2375)) + 9.9999999392252902907785028219223e-09) + (((_2311 * _2412) + _2375) * _2389))) * _2389;
    float _4420 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
    float _2424 = (isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0))) * (_2398 / ((_2402 * _2402) * 3.141590118408203125));
    float _2434 = (((_2411 * cbLight._m0[_2363].x) * _2424) * _2058) + ((((cbLight._m0[_2282].x * _2024) * _2335) * _2349) * _2071);
    float _2435 = (((_2411 * cbLight._m0[_2363].y) * _2424) * _2058) + ((((cbLight._m0[_2282].y * _2026) * _2335) * _2349) * _2071);
    float _2436 = (((_2411 * cbLight._m0[_2363].z) * _2424) * _2058) + ((((cbLight._m0[_2282].z * _2028) * _2335) * _2349) * _2071);
    float _2492;
    float _2494;
    float _2496;
    if (_2111)
    {
        _2492 = _2434;
        _2494 = _2435;
        _2496 = _2436;
    }
    else
    {
        uint _2498 = _2035 + 2u;
        uint _2502 = _2035 + 10u;
        float _2516 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2498].w)) * _587) * 0.949999988079071044921875);
        float _2517 = _2516 * _2516;
        float _2518 = cbLight._m0[_2498].x + _664;
        float _2519 = cbLight._m0[_2498].y + _665;
        float _2520 = cbLight._m0[_2498].z + _666;
        float _2524 = inversesqrt(dot(vec3(_2518, _2519, _2520), vec3(_2518, _2519, _2520)));
        float _2525 = _2524 * _2518;
        float _2526 = _2524 * _2519;
        float _2527 = _2524 * _2520;
        float _2528 = dot(vec3(_584, _585, _586), vec3(cbLight._m0[_2498].xyz));
        float _4431 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
        float _2531 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _2532 = dot(vec3(_584, _585, _586), vec3(_2525, _2526, _2527));
        float _4442 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
        float _2535 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
        float _2536 = dot(vec3(cbLight._m0[_2498].xyz), vec3(_2525, _2526, _2527));
        float _4453 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
        float _2540 = _2517 * _2517;
        float _2544 = ((_2535 * _2535) * (_2540 + (-1.0))) + 1.0;
        float _2553 = (exp2(log2(1.0 - (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2554 = 1.0 - _2517;
        float _2564 = (0.5 / (((_2311 * ((_2531 * _2554) + _2517)) + 9.9999999392252902907785028219223e-09) + (((_2311 * _2554) + _2517) * _2531))) * _2531;
        float _4464 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
        float _2566 = (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * (_2540 / ((_2544 * _2544) * 3.141590118408203125));
        float _2567 = isnan(1.0) ? _2050 : (isnan(_2050) ? 1.0 : min(_2050, 1.0));
        _2492 = (((_2553 * cbLight._m0[_2502].x) * _2566) * _2567) + _2434;
        _2494 = (((_2553 * cbLight._m0[_2502].y) * _2566) * _2567) + _2435;
        _2496 = (((_2553 * cbLight._m0[_2502].z) * _2566) * _2567) + _2436;
    }
    float _2598;
    float _2600;
    float _2602;
    if (_2220)
    {
        _2598 = _2492;
        _2600 = _2494;
        _2602 = _2496;
    }
    else
    {
        uint _2609 = _2035 + 3u;
        uint _2613 = _2035 + 11u;
        float _2627 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2609].w)) * _587) * 0.949999988079071044921875);
        float _2628 = _2627 * _2627;
        float _2629 = cbLight._m0[_2609].x + _664;
        float _2630 = cbLight._m0[_2609].y + _665;
        float _2631 = cbLight._m0[_2609].z + _666;
        float _2635 = inversesqrt(dot(vec3(_2629, _2630, _2631), vec3(_2629, _2630, _2631)));
        float _2636 = _2635 * _2629;
        float _2637 = _2635 * _2630;
        float _2638 = _2635 * _2631;
        float _2639 = dot(vec3(_584, _585, _586), vec3(cbLight._m0[_2609].xyz));
        float _4480 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
        float _2642 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
        float _2643 = dot(vec3(_584, _585, _586), vec3(_2636, _2637, _2638));
        float _4491 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
        float _2646 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
        float _2647 = dot(vec3(cbLight._m0[_2609].xyz), vec3(_2636, _2637, _2638));
        float _4502 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
        float _2651 = _2628 * _2628;
        float _2655 = ((_2646 * _2646) * (_2651 + (-1.0))) + 1.0;
        float _2664 = (exp2(log2(1.0 - (isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2665 = 1.0 - _2628;
        float _2675 = (0.5 / (((_2311 * ((_2642 * _2665) + _2628)) + 9.9999999392252902907785028219223e-09) + (((_2311 * _2665) + _2628) * _2642))) * _2642;
        float _4513 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
        float _2677 = (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0))) * (_2651 / ((_2655 * _2655) * 3.141590118408203125));
        float _2678 = isnan(1.0) ? _2051 : (isnan(_2051) ? 1.0 : min(_2051, 1.0));
        _2598 = (((_2664 * cbLight._m0[_2613].x) * _2677) * _2678) + _2492;
        _2600 = (((_2664 * cbLight._m0[_2613].y) * _2677) * _2678) + _2494;
        _2602 = (((_2664 * cbLight._m0[_2613].z) * _2677) * _2678) + _2496;
    }
    float _2744;
    float _2746;
    float _2748;
    float _2750;
    float _2752;
    float _2754;
    if (_2033.y == 0u)
    {
        uvec4 _2699 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2700 = _2699.x;
        uint _2711 = uint((float(_2699.y) * floor(float(uint(cbSceneParam._m0[85u].y * _673) / _2700))) + floor(float(uint(cbSceneParam._m0[85u].x * _672) / _2700)));
        float _2721 = (log2(_1811 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2722 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
        uint _2725 = uint(isnan(14.0) ? _2722 : (isnan(_2722) ? 14.0 : min(_2722, 14.0)));
        uvec4 _2730 = texelFetch(g_lightClusterGridBuffer, int(((_2725 << 2u) + (_2711 << 6u)) >> 2u));
        uint _2731 = _2730.x;
        uint _2732 = _2699.z;
        float _2840;
        float _2842;
        float _2844;
        float _2846;
        float _2848;
        float _2850;
        if (((((1u << ((_2732 >> 4u) & 15u)) + 4294967295u) & _2731) == 0u) || ((_2732 & 240u) == 0u))
        {
            _2840 = 0.0;
            _2842 = 0.0;
            _2844 = 0.0;
            _2846 = 0.0;
            _2848 = 0.0;
            _2850 = 0.0;
        }
        else
        {
            float _2841;
            float _2843;
            float _2845;
            float _2847;
            float _2849;
            float _2851;
            float _2993 = 0.0;
            float _2994 = 0.0;
            float _2995 = 0.0;
            float _2996 = 0.0;
            float _2997 = 0.0;
            float _2998 = 0.0;
            uint _2999 = 0u;
            uint _3008;
            bool _3009;
            for (;;)
            {
                _3008 = texelFetch(g_lightClassification, int((((_2725 << 5u) + (_2711 << 9u)) + (_2999 << 2u)) >> 2u)).x;
                _3009 = _3008 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3009)
                {
                    frontier_phi_66_pred = _2998;
                    frontier_phi_66_pred_1 = _2997;
                    frontier_phi_66_pred_2 = _2996;
                    frontier_phi_66_pred_3 = _2995;
                    frontier_phi_66_pred_4 = _2994;
                    frontier_phi_66_pred_5 = _2993;
                }
                else
                {
                    float _3117;
                    float _3118;
                    float _3119;
                    float _3120;
                    float _3121;
                    float _3122;
                    uint _3123;
                    _3117 = _2993;
                    _3118 = _2994;
                    _3119 = _2995;
                    _3120 = _2996;
                    _3121 = _2997;
                    _3122 = _2998;
                    _3123 = _3008;
                    float _3049;
                    float _3050;
                    float _3051;
                    float _3052;
                    float _3053;
                    float _3054;
                    for (;;)
                    {
                        uint _3127 = uint(findLSB(_3123)) + (_2999 << 5u);
                        uint _3124 = (_3123 + 4294967295u) & _3123;
                        uint _3129 = _3127 * 48u;
                        vec4 _3143 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3129)).x, texelFetch(g_PointLightRenderingBuffer, int(_3129 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3129 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3129 + 3u)).x));
                        uint _3149 = (_3127 * 48u) + 4u;
                        vec4 _3162 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3149)).x, texelFetch(g_PointLightRenderingBuffer, int(_3149 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3149 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3149 + 3u)).x));
                        uint _3168 = (_3127 * 48u) + 8u;
                        vec3 _3179 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3168)).x, texelFetch(g_PointLightRenderingBuffer, int(_3168 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3168 + 2u)).x));
                        float _3183 = _3143.x - _1809;
                        float _3184 = _3143.y - _1810;
                        float _3185 = _3143.z - _1811;
                        float _3186 = dot(vec3(_3183, _3184, _3185), vec3(_3183, _3184, _3185));
                        float _3189 = inversesqrt(_3186);
                        float _3190 = _3189 * _3183;
                        float _3191 = _3189 * _3184;
                        float _3192 = _3189 * _3185;
                        float _3193 = dot(vec3(_693, _696, _699), vec3(_3190, _3191, _3192));
                        float _3198 = 1.0 - (_3186 * _3143.w);
                        float _4539 = isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : max(_3198, 0.0));
                        float _3199 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
                        float _3200 = sqrt(_3186) * _3162.w;
                        float _3203 = 1.39999997615814208984375 / (_3200 + 1.39999997615814208984375);
                        float _3204 = _3203 * _3203;
                        float _3207 = ((1.0 - _3204) * _3193) + _3204;
                        float _3210 = _3200 * _3200;
                        float _3214 = ((isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0))) * _3199) / ((_3210 * 0.699999988079071044921875) + 1.0);
                        float _3218 = (-0.0) - _1809;
                        float _3219 = (-0.0) - _1810;
                        float _3220 = (-0.0) - _1811;
                        float _3224 = inversesqrt(dot(vec3(_3218, _3219, _3220), vec3(_3218, _3219, _3220)));
                        float _3225 = _3224 * _3218;
                        float _3226 = _3224 * _3219;
                        float _3227 = _3224 * _3220;
                        float _3234 = exp2(log2(1.0 / ((_3210 * 3.5) + 5.0)) * 0.25);
                        float _3235 = 1.0 - _753;
                        float _3242 = sqrt(1.0 - ((1.0 - (_3235 * _3235)) * (1.0 - (_3234 * _3234))));
                        float _3243 = _3242 * _3242;
                        float _3244 = _3243 * _3243;
                        float _3245 = _3225 + _3190;
                        float _3246 = _3226 + _3191;
                        float _3247 = _3227 + _3192;
                        float _3251 = inversesqrt(dot(vec3(_3245, _3246, _3247), vec3(_3245, _3246, _3247)));
                        float _3255 = dot(vec3(_693, _696, _699), vec3(_3225, _3226, _3227));
                        float _4555 = isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : max(_3255, 0.0));
                        float _3258 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
                        float _3259 = dot(vec3(_693, _696, _699), vec3(_3251 * _3245, _3251 * _3246, _3251 * _3247));
                        float _4566 = isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0));
                        float _3262 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
                        float _3266 = ((_3262 * _3262) * (_3244 + (-1.0))) + 1.0;
                        float _3267 = _3203 * _3243;
                        float _3268 = _3267 * _3267;
                        float _3271 = ((1.0 - _3268) * _3193) + _3268;
                        float _4577 = isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0));
                        float _3272 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
                        float _3273 = 1.0 - _3243;
                        float _3283 = (0.5 / (((_3272 * ((_3258 * _3273) + _3243)) + 9.9999999392252902907785028219223e-09) + (((_3272 * _3273) + _3243) * _3258))) * _3272;
                        float _4588 = isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0));
                        float _3294 = (((_3244 * 3.1415927410125732421875) * (isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0)))) / ((_3266 * _3266) * ((_3210 * 2.1991131305694580078125) + 3.141590118408203125))) * _3199;
                        _3052 = (_3214 * _3162.x) + _3120;
                        _3053 = (_3214 * _3162.y) + _3121;
                        _3054 = (_3214 * _3162.z) + _3122;
                        _3049 = (_3294 * _3179.x) + _3117;
                        _3050 = (_3294 * _3179.y) + _3118;
                        _3051 = (_3294 * _3179.z) + _3119;
                        if (_3124 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3117 = _3049;
                            _3118 = _3050;
                            _3119 = _3051;
                            _3120 = _3052;
                            _3121 = _3053;
                            _3122 = _3054;
                            _3123 = _3124;
                        }
                    }
                    frontier_phi_66_pred = _3054;
                    frontier_phi_66_pred_1 = _3053;
                    frontier_phi_66_pred_2 = _3052;
                    frontier_phi_66_pred_3 = _3051;
                    frontier_phi_66_pred_4 = _3050;
                    frontier_phi_66_pred_5 = _3049;
                }
                _2851 = frontier_phi_66_pred;
                _2849 = frontier_phi_66_pred_1;
                _2847 = frontier_phi_66_pred_2;
                _2845 = frontier_phi_66_pred_3;
                _2843 = frontier_phi_66_pred_4;
                _2841 = frontier_phi_66_pred_5;
                uint _3000 = _2999 + 1u;
                if (_3000 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2993 = _2841;
                    _2994 = _2843;
                    _2995 = _2845;
                    _2996 = _2847;
                    _2997 = _2849;
                    _2998 = _2851;
                    _2999 = _3000;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2840 = _2841;
            _2842 = _2843;
            _2844 = _2845;
            _2846 = _2847;
            _2848 = _2849;
            _2850 = _2851;
        }
        uvec4 _2854 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2855 = _2854.z;
        uint _2857 = (_2855 >> 8u) & 15u;
        float _2961;
        float _2963;
        float _2965;
        float _2967;
        float _2969;
        float _2971;
        if (((4294967295u << _2857) & _2731) == 0u)
        {
            _2961 = _2840;
            _2963 = _2842;
            _2965 = _2844;
            _2967 = _2846;
            _2969 = _2848;
            _2971 = _2850;
        }
        else
        {
            float _2986 = inversesqrt(dot(vec3(_1809, _1810, _1811), vec3(_1809, _1810, _1811)));
            float _2987 = _2986 * _1809;
            float _2988 = _2986 * _1810;
            float _2989 = _2986 * _1811;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2857 < ((_2855 >> 12u) & 15u))
            {
                float _2962;
                float _2964;
                float _2966;
                float _2968;
                float _2970;
                float _2972;
                float _3100 = _2840;
                float _3101 = _2842;
                float _3102 = _2844;
                float _3103 = _2846;
                float _3104 = _2848;
                float _3105 = _2850;
                uint _3106 = _2857;
                uint _3115;
                bool _3116;
                for (;;)
                {
                    _3115 = texelFetch(g_lightClassification, int((((_2725 << 5u) + (_2711 << 9u)) + (_3106 << 2u)) >> 2u)).x;
                    _3116 = _3115 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3116)
                    {
                        frontier_phi_72_pred = _3105;
                        frontier_phi_72_pred_1 = _3104;
                        frontier_phi_72_pred_2 = _3103;
                        frontier_phi_72_pred_3 = _3102;
                        frontier_phi_72_pred_4 = _3101;
                        frontier_phi_72_pred_5 = _3100;
                    }
                    else
                    {
                        float _3299;
                        float _3300;
                        float _3301;
                        float _3302;
                        float _3303;
                        float _3304;
                        float _3593;
                        float _3594;
                        float _3595;
                        float _3596;
                        float _3597;
                        float _3598;
                        float _3312 = _3100;
                        float _3313 = _3101;
                        float _3314 = _3102;
                        float _3315 = _3103;
                        float _3316 = _3104;
                        float _3317 = _3105;
                        uint _3318 = _3115;
                        uint _3319;
                        vec4 _3344;
                        float _3345;
                        vec4 _3360;
                        vec3 _3372;
                        vec4 _3387;
                        vec4 _3402;
                        float _3449;
                        bool _3450;
                        for (;;)
                        {
                            uint _3329 = ((_3106 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3318));
                            _3319 = (_3318 + 4294967295u) & _3318;
                            uint _3331 = _3329 * 40u;
                            _3344 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3331)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 3u)).x));
                            _3345 = _3344.w;
                            uint _3347 = (_3329 * 40u) + 4u;
                            _3360 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3347)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 3u)).x));
                            uint _3362 = (_3329 * 40u) + 8u;
                            _3372 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3362)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 2u)).x));
                            uint _3374 = (_3329 * 40u) + 16u;
                            _3387 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3374)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 3u)).x));
                            uint _3389 = (_3329 * 40u) + 20u;
                            _3402 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3389)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 3u)).x));
                            uint _3405 = (_3329 * 40u) + 24u;
                            vec4 _3418 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3405)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 3u)).x));
                            uint _3424 = (_3329 * 40u) + 28u;
                            vec4 _3437 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3424)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 3u)).x));
                            _3449 = fma(_1811, _3437.z, fma(_1810, _3437.y, _3437.x * _1809)) + _3437.w;
                            _3450 = !((fma(_1811, _3418.z, fma(_1810, _3418.y, _3418.x * _1809)) + _3418.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3450)
                            {
                                float _3477 = _3344.x - _1809;
                                float _3478 = _3344.y - _1810;
                                float _3479 = _3344.z - _1811;
                                float _3480 = dot(vec3(_3477, _3478, _3479), vec3(_3477, _3478, _3479));
                                float _3483 = inversesqrt(_3480);
                                float _3484 = _3483 * _3477;
                                float _3485 = _3483 * _3478;
                                float _3486 = _3483 * _3479;
                                float _3490 = 1.0 - (_3480 / (_3345 * _3345));
                                float _4599 = isnan(0.0) ? _3490 : (isnan(_3490) ? 0.0 : max(_3490, 0.0));
                                float _3491 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
                                float _3495 = sqrt(_3480) * _3360.w;
                                float _3497 = 1.39999997615814208984375 / (_3495 + 1.39999997615814208984375);
                                float _3498 = _3497 * _3497;
                                float _3501 = ((1.0 - _3498) * dot(vec3(_3484, _3485, _3486), vec3(_693, _696, _699))) + _3498;
                                float _3504 = _3495 * _3495;
                                float _3508 = (fma(_1811, _3387.z, fma(_1810, _3387.y, _3387.x * _1809)) + _3387.w) / _3449;
                                float _3509 = (fma(_1811, _3402.z, fma(_1810, _3402.y, _3402.x * _1809)) + _3402.w) / _3449;
                                float _3513 = 1.0 - dot(vec2(_3508, _3509), vec2(_3508, _3509));
                                float _4615 = isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : max(_3513, 0.0));
                                float _3514 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
                                float _3515 = _3514 * (((isnan(0.0) ? _3501 : (isnan(_3501) ? 0.0 : max(_3501, 0.0))) * _3491) / ((_3504 * 0.699999988079071044921875) + 1.0));
                                float _3527 = exp2(log2(1.0 / ((_3504 * 3.5) + 5.0)) * 0.25);
                                float _3528 = 1.0 - _753;
                                float _3535 = sqrt(1.0 - ((1.0 - (_3528 * _3528)) * (1.0 - (_3527 * _3527))));
                                float _3536 = _3535 * _3535;
                                float _3537 = _3536 * _3536;
                                float _3538 = _3484 - _2987;
                                float _3539 = _3485 - _2988;
                                float _3540 = _3486 - _2989;
                                float _3544 = inversesqrt(dot(vec3(_3538, _3539, _3540), vec3(_3538, _3539, _3540)));
                                float _3548 = dot(vec3(_693, _696, _699), vec3((-0.0) - _2987, (-0.0) - _2988, (-0.0) - _2989));
                                float _4626 = isnan(0.0) ? _3548 : (isnan(_3548) ? 0.0 : max(_3548, 0.0));
                                float _3551 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
                                float _3552 = dot(vec3(_693, _696, _699), vec3(_3544 * _3538, _3544 * _3539, _3544 * _3540));
                                float _4637 = isnan(0.0) ? _3552 : (isnan(_3552) ? 0.0 : max(_3552, 0.0));
                                float _3555 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
                                float _3559 = ((_3555 * _3555) * (_3537 + (-1.0))) + 1.0;
                                float _3560 = _3497 * _3536;
                                float _3561 = _3560 * _3560;
                                float _3567 = ((1.0 - _3561) * dot(vec3(_693, _696, _699), vec3(_3484, _3485, _3486))) + _3561;
                                float _4648 = isnan(0.0) ? _3567 : (isnan(_3567) ? 0.0 : max(_3567, 0.0));
                                float _3568 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
                                float _3569 = 1.0 - _3536;
                                float _3579 = (0.5 / (((_3568 * ((_3551 * _3569) + _3536)) + 9.9999999392252902907785028219223e-09) + (((_3568 * _3569) + _3536) * _3551))) * _3568;
                                float _4659 = isnan(0.0) ? _3579 : (isnan(_3579) ? 0.0 : max(_3579, 0.0));
                                float _3589 = (_3514 * _3491) * (((_3537 * 3.1415927410125732421875) * (isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0)))) / ((_3559 * _3559) * ((_3504 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3515 * _3360.y;
                                frontier_phi_78_pred_1 = _3515 * _3360.x;
                                frontier_phi_78_pred_2 = _3589 * _3372.z;
                                frontier_phi_78_pred_3 = _3589 * _3372.y;
                                frontier_phi_78_pred_4 = _3589 * _3372.x;
                                frontier_phi_78_pred_5 = _3515 * _3360.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3597 = frontier_phi_78_pred;
                            _3596 = frontier_phi_78_pred_1;
                            _3595 = frontier_phi_78_pred_2;
                            _3594 = frontier_phi_78_pred_3;
                            _3593 = frontier_phi_78_pred_4;
                            _3598 = frontier_phi_78_pred_5;
                            _3302 = _3596 + _3315;
                            _3303 = _3597 + _3316;
                            _3304 = _3598 + _3317;
                            _3299 = _3593 + _3312;
                            _3300 = _3594 + _3313;
                            _3301 = _3595 + _3314;
                            if (_3319 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3312 = _3299;
                                _3313 = _3300;
                                _3314 = _3301;
                                _3315 = _3302;
                                _3316 = _3303;
                                _3317 = _3304;
                                _3318 = _3319;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3304;
                        frontier_phi_72_pred_1 = _3303;
                        frontier_phi_72_pred_2 = _3302;
                        frontier_phi_72_pred_3 = _3301;
                        frontier_phi_72_pred_4 = _3300;
                        frontier_phi_72_pred_5 = _3299;
                    }
                    _2972 = frontier_phi_72_pred;
                    _2970 = frontier_phi_72_pred_1;
                    _2968 = frontier_phi_72_pred_2;
                    _2966 = frontier_phi_72_pred_3;
                    _2964 = frontier_phi_72_pred_4;
                    _2962 = frontier_phi_72_pred_5;
                    uint _3107 = _3106 + 1u;
                    if (_3107 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3100 = _2962;
                        _3101 = _2964;
                        _3102 = _2966;
                        _3103 = _2968;
                        _3104 = _2970;
                        _3105 = _2972;
                        _3106 = _3107;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2972;
                frontier_phi_60_61_ladder_1 = _2970;
                frontier_phi_60_61_ladder_2 = _2966;
                frontier_phi_60_61_ladder_3 = _2964;
                frontier_phi_60_61_ladder_4 = _2962;
                frontier_phi_60_61_ladder_5 = _2968;
            }
            else
            {
                frontier_phi_60_61_ladder = _2850;
                frontier_phi_60_61_ladder_1 = _2848;
                frontier_phi_60_61_ladder_2 = _2844;
                frontier_phi_60_61_ladder_3 = _2842;
                frontier_phi_60_61_ladder_4 = _2840;
                frontier_phi_60_61_ladder_5 = _2846;
            }
            _2961 = frontier_phi_60_61_ladder_4;
            _2963 = frontier_phi_60_61_ladder_3;
            _2965 = frontier_phi_60_61_ladder_2;
            _2967 = frontier_phi_60_61_ladder_5;
            _2969 = frontier_phi_60_61_ladder_1;
            _2971 = frontier_phi_60_61_ladder;
        }
        float _2976 = isnan(1.0) ? _737 : (isnan(_737) ? 1.0 : min(_737, 1.0));
        _2744 = (_2976 * _2967) + _2275;
        _2746 = (_2976 * _2969) + _2277;
        _2748 = (_2976 * _2971) + _2279;
        _2750 = ((_2961 * 0.039999999105930328369140625) * _2976) + _2598;
        _2752 = ((_2963 * 0.039999999105930328369140625) * _2976) + _2600;
        _2754 = ((_2965 * 0.039999999105930328369140625) * _2976) + _2602;
    }
    else
    {
        _2744 = _2275;
        _2746 = _2277;
        _2748 = _2279;
        _2750 = _2598;
        _2752 = _2600;
        _2754 = _2602;
    }
    uint _2760 = _713 + uint(cbMatDynParam._m0[0u].w);
    float _2766 = ((((((_531.x - _528) * _464) + _528) * cbMtdParam._m0[13u].x) + ((((_485.x - _482) * _464) + _482) * cbMtdParam._m0[11u].x)) * _558) * cbInstanceData._m0[_2760].x;
    float _2767 = ((((((_531.y - _529) * _464) + _529) * cbMtdParam._m0[13u].y) + ((((_485.y - _483) * _464) + _483) * cbMtdParam._m0[11u].y)) * _558) * cbInstanceData._m0[_2760].y;
    float _2768 = ((((((_531.z - _530) * _464) + _530) * cbMtdParam._m0[13u].z) + ((((_485.z - _484) * _464) + _484) * cbMtdParam._m0[11u].z)) * _558) * cbInstanceData._m0[_2760].z;
    float _4675 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _4686 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _4697 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _2785 = (((isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0))) * (_2744 + ((isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0))) * _737))) + ((_2750 + ((isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0))) * _1543)) * cbPerFrame._m0[3u].x)) + _2766;
    float _2787 = (_2767 + ((_2752 + ((isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0))) * _1543)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0))) * (_2746 + ((isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0))) * _737)));
    float _2789 = (_2768 + ((_2754 + ((isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0))) * _1543)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0))) * (_2748 + ((isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0))) * _737)));
    float _4723 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2802 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
    uint _2803 = _712 + 6u;
    float _2811 = _672 / cbSceneParam._m0[86u].x;
    float _2812 = _673 / cbSceneParam._m0[86u].y;
    vec4 _2826 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2811, _2812, (log2((isnan(cbSceneParam._m0[77u].w) ? _606 : (isnan(_606) ? cbSceneParam._m0[77u].w : min(_606, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2828 = _2826.x;
    float _2829 = _2826.y;
    float _2830 = _2826.z;
    float _2831 = _2826.w;
    float _2902;
    float _2904;
    float _2906;
    float _2908;
    if (_606 > cbSceneParam._m0[78u].w)
    {
        float _2865 = isnan(_606) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _606 : min(cbSceneParam._m0[80u].w, _606));
        float _2866 = _2865 / _606;
        float _2877 = _2866 * _657;
        float _2878 = _658 * _2866;
        float _2879 = (-0.0) - _2878;
        float _2880 = _2866 * _659;
        float _2882 = (cbSceneParam._m0[77u].w * _2879) / _2865;
        float _2883 = _2882 + cbSceneParam._m0[79u].w;
        float _2884 = cbSceneParam._m0[79u].w - _2878;
        float _2890 = sqrt(((_2877 * _2877) + (_2878 * _2878)) + (_2880 * _2880));
        float _2893 = (1.0 - (cbSceneParam._m0[77u].w / _2865)) * _2890;
        float _2898 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2900 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3062;
        if (abs((_2879 - _2882) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3062 = ((((_2883 > 0.0) ? exp2(_2898 * _2883) : (2.0 - exp2(_2900 * _2883))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2893;
        }
        else
        {
            float _3022 = 1.0 / cbSceneParam._m0[80u].x;
            float _3023 = isnan(_2884) ? _2883 : (isnan(_2883) ? _2884 : max(_2883, _2884));
            float _3024 = isnan(_2884) ? _2883 : (isnan(_2883) ? _2884 : min(_2883, _2884));
            float _3033 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : min(_3023, 0.0));
            float _3034 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : min(_3024, 0.0));
            _3062 = ((abs(_2890 / _2879) * cbSceneParam._m0[80u].y) * ((((_3033 - _3034) * 2.0) - ((exp2(_2898 * (isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0)))) - exp2(_2898 * (isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0))))) * _3022)) - ((exp2(_2900 * _3033) - exp2(_2900 * _3034)) * _3022))) + (_2893 * cbSceneParam._m0[80u].z);
        }
        vec4 _3064 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2811, _2812, 1.0), 0.0);
        float _3073 = exp2((_3062 * (-1.44269502162933349609375)) * (1.0 - _3064.w));
        float _3074 = log2(_3073);
        float _3090 = log2(_2831);
        _2902 = (exp2(_3090 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3074 * cbSceneParam._m0[78u].x)) * _3064.x) / cbSceneParam._m0[78u].x)) + _2828;
        _2904 = (exp2(_3090 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3074 * cbSceneParam._m0[78u].y)) * _3064.y) / cbSceneParam._m0[78u].y)) + _2829;
        _2906 = (exp2(_3090 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3074 * cbSceneParam._m0[78u].z)) * _3064.z) / cbSceneParam._m0[78u].z)) + _2830;
        _2908 = _3073 * _2831;
    }
    else
    {
        _2902 = _2828;
        _2904 = _2829;
        _2906 = _2830;
        _2908 = _2831;
    }
    float _2920 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2921 = _2920 == 3.0;
    float _2922 = log2(_2908);
    float _2926 = exp2(_2922 * cbSceneParam._m0[78u].x);
    float _2927 = exp2(_2922 * cbSceneParam._m0[78u].y);
    float _2928 = exp2(_2922 * cbSceneParam._m0[78u].z);
    float _2929 = _2926 * (isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0)));
    float _2930 = _2927 * (isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0)));
    float _2931 = _2928 * (isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0)));
    float _2940 = (_2920 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2940 * (_2921 ? _2929 : (_2929 + (cbSceneParam._m0[72u].w * _2902)));
    SV_Target.y = _2940 * (_2921 ? _2930 : (_2930 + (cbSceneParam._m0[72u].w * _2904)));
    SV_Target.z = _2940 * (_2921 ? _2931 : (_2931 + (cbSceneParam._m0[72u].w * _2906)));
    SV_Target.w = cbInstanceData._m0[_2803].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2766) * _2802) * _2926) * _2940;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2767) * _2802) * _2927) * _2940;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2768) * _2802) * _2928) * _2940;
    SV_Target_1.w = cbInstanceData._m0[_2803].w;
}


