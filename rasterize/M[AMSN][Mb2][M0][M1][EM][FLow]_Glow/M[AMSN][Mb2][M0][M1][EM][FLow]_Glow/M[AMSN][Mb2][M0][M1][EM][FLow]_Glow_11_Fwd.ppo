#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1238;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _205 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _206 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _207 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _213 = inversesqrt(dot(vec3(_205, _206, _207), vec3(_205, _206, _207)));
    float _220 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _249 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _255 = _249.x * cbMtdParam._m0[9u].x;
    float _256 = _249.y * cbMtdParam._m0[9u].y;
    float _257 = _249.z * cbMtdParam._m0[9u].z;
    vec4 _295 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[5u].w));
    float _311 = (TEXCOORD_3.x - ((cbMtdParam._m0[14u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[14u].y + 1.0);
    float _3603 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _312 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
    float _319 = (((_295.x * cbMtdParam._m0[10u].x) - _255) * _312) + _255;
    float _320 = (((_295.y * cbMtdParam._m0[10u].y) - _256) * _312) + _256;
    float _321 = (((_295.z * cbMtdParam._m0[10u].z) - _257) * _312) + _257;
    vec4 _338 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _357 = TEXCOORD_9.x - ((cbMtdParam._m0[16u].y * (1.0 - TEXCOORD_9.x)) * (_338.x + 0.00999999977648258209228515625));
    float _359 = _357 * (cbMtdParam._m0[16u].z + 1.0);
    float _3614 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _360 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
    float _368 = ((((cbMtdParam._m0[12u].x - _319) * TEXCOORD_9.x) * cbMtdParam._m0[16u].x) * _360) + _319;
    float _369 = ((((cbMtdParam._m0[12u].y - _320) * TEXCOORD_9.y) * cbMtdParam._m0[16u].x) * _360) + _320;
    float _370 = (((cbMtdParam._m0[16u].x * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _321)) * _360) + _321;
    vec4 _383 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[6u].w));
    float _385 = _383.x;
    float _403 = ((texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[7u].w)).x - _385) * _312) + _385;
    vec4 _416 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[4u].w));
    float _424 = (_416.x * 2.0) + (-1.0);
    float _426 = (_416.y * 2.0) + (-1.0);
    float _427 = dot(vec2(_424, _426), vec2(_424, _426));
    float _3625 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    vec4 _444 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _448 = _444.z;
    float _451 = (_444.x * 2.0) + (-1.0);
    float _452 = (_444.y * 2.0) + (-1.0);
    float _453 = dot(vec2(_451, _452), vec2(_451, _452));
    float _3636 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _458 = sqrt(1.0 - (isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0))));
    float _461 = (_312 * (_416.z - _448)) + _448;
    float _467 = _357 * (cbMtdParam._m0[16u].y + 1.0);
    float _3647 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _471 = ((cbMtdParam._m0[15u].y - _461) * (isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0)))) + _461;
    float _484 = (cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _485 = (cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _511 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * ((cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * ((cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[10u].w));
    float _516 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[15u].w;
    float _523 = ((_511.y * 0.5) + (-0.25)) * cbMtdParam._m0[15u].z;
    float _525 = (-0.0) - (cbMtdParam._m0[15u].z * ((_511.x * 0.5) + (-0.25)));
    float _527 = fract(_516);
    float _529 = fract(_516 + 0.5);
    float _530 = _527 * _525;
    float _531 = _523 * _527;
    float _534 = _529 * _525;
    float _535 = _523 * _529;
    float _540 = abs((_527 * 2.0) + (-1.0));
    vec4 _556 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_530 + _484) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_531 + _485) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _558 = _556.x;
    float _559 = _556.y;
    float _560 = _556.z;
    vec4 _561 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_534 + _484) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_535 + _485) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _588 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _589 = (cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _602 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_530 + _588) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_531 + _589) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _604 = _602.x;
    float _605 = _602.y;
    float _606 = _602.z;
    vec4 _607 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_534 + _588) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_535 + _589) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _636 = (_312 * (_424 - _451)) + _451;
    float _637 = (_312 * (_426 - _452)) + _452;
    float _638 = (_312 * (sqrt(1.0 - (isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0)))) - _458)) + _458;
    vec4 _657 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[16u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, (((cbMtdParam._m0[17u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w));
    float _663 = (_657.x * 2.0) + (-1.0);
    float _664 = (_657.y * 2.0) + (-1.0);
    float _665 = dot(vec2(_663, _664), vec2(_663, _664));
    float _3658 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _681 = (_360 * (((_636 * cbMtdParam._m0[14u].z) - _636) + _663)) + _636;
    float _682 = (_360 * (((_637 * cbMtdParam._m0[14u].z) - _637) + _664)) + _637;
    float _683 = (_360 * (sqrt(1.0 - (isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0)))) - _638)) + _638;
    float _686 = fma(_683, _220 * NORMAL.x, fma(_682, _227 * TANGENT.x, (_213 * _205) * _681));
    float _689 = fma(_683, _220 * NORMAL.y, fma(_682, _227 * TANGENT.y, (_213 * _206) * _681));
    float _692 = fma(_683, _220 * NORMAL.z, fma(_682, _227 * TANGENT.z, (_213 * _207) * _681));
    float _696 = inversesqrt(dot(vec3(_686, _689, _692), vec3(_686, _689, _692)));
    float _697 = _696 * _686;
    float _698 = _696 * _689;
    float _699 = _696 * _692;
    float _3669 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _700 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
    float _3680 = isnan(0.0) ? _368 : (isnan(_368) ? 0.0 : max(_368, 0.0));
    float _3691 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _3702 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _3713 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _704 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
    float _720 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _761 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _771 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _761);
    float _772 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _761);
    float _773 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _761);
    float _777 = inversesqrt(dot(vec3(_771, _772, _773), vec3(_771, _772, _773)));
    float _778 = _771 * _777;
    float _779 = _772 * _777;
    float _780 = _773 * _777;
    float _786 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _787 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _805 = fma(_699, cbSceneParam._m0[5u].z, fma(_698, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _697));
    float _808 = fma(_699, cbSceneParam._m0[6u].z, fma(_698, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _697));
    float _811 = fma(_699, cbSceneParam._m0[7u].z, fma(_698, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _697));
    uint _824 = uint(roundEven(NORMAL.w)) * 13u;
    uint _825 = _824 + 9u;
    uint _826 = _825 + uint(cbMatDynParam._m0[0u].w);
    float _832 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0)))) * cbInstanceData._m0[_826].x;
    float _833 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0)))) * cbInstanceData._m0[_826].y;
    float _834 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0)))) * cbInstanceData._m0[_826].z;
    float _3724 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _835 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
    float _3735 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _836 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
    float _3746 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _837 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
    float _838 = 1.0 - _704;
    float _839 = _835 * _838;
    float _840 = _836 * _838;
    float _841 = _837 * _838;
    float _846 = (_835 + (-0.039999999105930328369140625)) * _704;
    float _847 = (_836 + (-0.039999999105930328369140625)) * _704;
    float _848 = (_837 + (-0.039999999105930328369140625)) * _704;
    float _849 = _846 + 0.039999999105930328369140625;
    float _851 = _847 + 0.039999999105930328369140625;
    float _852 = _848 + 0.039999999105930328369140625;
    vec4 _861 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _786, cbSceneParam._m0[86u].y * _787));
    float _864 = _861.x * TEXCOORD_3.w;
    float _865 = dot(vec3(_697, _698, _699), vec3(_778, _779, _780));
    float _868 = _865 * 2.0;
    float _872 = (_868 * _697) - _778;
    float _873 = (_868 * _698) - _779;
    float _874 = (_868 * _699) - _780;
    float _878 = abs(dot(vec3(_778, _779, _780), vec3(_697, _698, _699)));
    float _3757 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _880 = sqrt(_700);
    float _893 = exp2((_880 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_880 * 3.0));
    float _899 = (1.0 - _893) * ((_880 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _900 = _893 * _880;
    float _928 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _932 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _936 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1237;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _963 = fma(_936, cbModelParam._m0[26u].z, fma(_932, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _928));
        float _967 = fma(_936, cbModelParam._m0[27u].z, fma(_932, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _928));
        float _971 = fma(_936, cbModelParam._m0[28u].z, fma(_932, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _928));
        float _995 = _928 + _697;
        float _996 = _932 + _698;
        float _997 = _936 + _699;
        float _1007 = fma(_997, cbModelParam._m0[26u].z, fma(_996, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _995)) - _963;
        float _1008 = fma(_997, cbModelParam._m0[27u].z, fma(_996, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _995)) - _967;
        float _1009 = fma(_997, cbModelParam._m0[28u].z, fma(_996, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _995)) - _971;
        float _1013 = inversesqrt(dot(vec3(_1007, _1008, _1009), vec3(_1007, _1008, _1009)));
        float _1026 = ((_1013 * _1007) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_963 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1027 = ((_1013 * _1008) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_967 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1028 = ((_1013 * _1009) / cbModelParam._m0[34u].z) + ((((((_971 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1031 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1026, _1027, _1028), 0.0);
        vec4 _1038 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1026, _1027, _1028), 0.0);
        vec4 _1045 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1026, _1027, _1028), 0.0);
        vec4 _1052 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1026, _1027, _1028), 0.0);
        float _1065 = exp2((_1031.w + (-0.5)) * 20.0) * 2.0;
        float _1066 = _1065 * (_1031.x + (-0.5));
        float _1067 = _1065 * (_1031.y + (-0.5));
        float _1068 = _1065 * (_1031.z + (-0.5));
        float _1075 = exp2((_1038.w + (-0.5)) * 20.0) * 2.0;
        float _1076 = _1075 * (_1038.x + (-0.5));
        float _1077 = _1075 * (_1038.y + (-0.5));
        float _1078 = _1075 * (_1038.z + (-0.5));
        float _1085 = exp2((_1045.w + (-0.5)) * 20.0) * 2.0;
        float _1086 = _1085 * (_1045.x + (-0.5));
        float _1087 = _1085 * (_1045.y + (-0.5));
        float _1088 = _1085 * (_1045.z + (-0.5));
        float _1095 = exp2((_1052.w + (-0.5)) * 20.0) * 2.0;
        float _1096 = _1095 * (_1052.x + (-0.5));
        float _1097 = _1095 * (_1052.y + (-0.5));
        float _1098 = _1095 * (_1052.z + (-0.5));
        float _1099 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1100 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1101 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1102 = _1066 * 0.5;
        float _1103 = _1076 * 0.5;
        float _1104 = _1086 * 0.5;
        float _1105 = dot(vec3(_1102, _1103, _1104), vec3(_1102, _1103, _1104));
        float _1110 = (_1105 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1105);
        float _1119 = (dot(vec3(_697, _698, _699), vec3(_1110 * _1102, _1110 * _1103, _1110 * _1104)) + 1.0) * 0.5;
        float _3783 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1129 = sqrt(((_1103 * _1103) + (_1102 * _1102)) + (_1104 * _1104)) / (_1099 + 9.9999997473787516355514526367188e-06);
        float _3794 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1130 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
        float _1131 = _1130 * 2.0;
        float _1135 = (1.0 - _1130) / (_1130 + 1.0);
        float _3805 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
        float _1145 = ((((1.0 - _1136) * (_1131 + 2.0)) * exp2(log2(isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0))) * (_1131 + 1.0))) + _1136) * _1099;
        float _1146 = _1067 * 0.5;
        float _1147 = _1077 * 0.5;
        float _1148 = _1087 * 0.5;
        float _1149 = dot(vec3(_1146, _1147, _1148), vec3(_1146, _1147, _1148));
        float _1154 = (_1149 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1149);
        float _1162 = (dot(vec3(_697, _698, _699), vec3(_1154 * _1146, _1154 * _1147, _1154 * _1148)) + 1.0) * 0.5;
        float _3816 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1171 = sqrt(((_1147 * _1147) + (_1146 * _1146)) + (_1148 * _1148)) / (_1100 + 9.9999997473787516355514526367188e-06);
        float _3827 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _1173 = _1172 * 2.0;
        float _1177 = (1.0 - _1172) / (_1172 + 1.0);
        float _3838 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
        float _1187 = ((((1.0 - _1178) * (_1173 + 2.0)) * exp2(log2(isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) * (_1173 + 1.0))) + _1178) * _1100;
        float _1188 = _1068 * 0.5;
        float _1189 = _1078 * 0.5;
        float _1190 = _1088 * 0.5;
        float _1191 = dot(vec3(_1188, _1189, _1190), vec3(_1188, _1189, _1190));
        float _1196 = (_1191 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1191);
        float _1204 = (dot(vec3(_697, _698, _699), vec3(_1196 * _1188, _1196 * _1189, _1196 * _1190)) + 1.0) * 0.5;
        float _3849 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1213 = sqrt(((_1189 * _1189) + (_1188 * _1188)) + (_1190 * _1190)) / (_1101 + 9.9999997473787516355514526367188e-06);
        float _3860 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1214 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1215 = _1214 * 2.0;
        float _1219 = (1.0 - _1214) / (_1214 + 1.0);
        float _3871 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _1229 = ((((1.0 - _1220) * (_1215 + 2.0)) * exp2(log2(isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) * (_1215 + 1.0))) + _1220) * _1101;
        _1237 = _1068;
        _1239 = _1067;
        _1240 = _1066;
        _1241 = _1078;
        _1242 = _1077;
        _1243 = _1076;
        _1244 = _1088;
        _1245 = _1087;
        _1246 = _1086;
        _1247 = _1101;
        _1248 = _1100;
        _1249 = _1099;
        _1250 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0)));
        _1251 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0)));
        _1252 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0)));
    }
    else
    {
        _1237 = _1238;
        _1239 = _1238;
        _1240 = _1238;
        _1241 = _1238;
        _1242 = _1238;
        _1243 = _1238;
        _1244 = _1238;
        _1245 = _1238;
        _1246 = _1238;
        _1247 = _1238;
        _1248 = _1238;
        _1249 = _1238;
        _1250 = 0.0;
        _1251 = 0.0;
        _1252 = 0.0;
    }
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1278 = fma(_936, cbModelParam._m0[30u].z, fma(_932, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _928));
        float _1282 = fma(_936, cbModelParam._m0[31u].z, fma(_932, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _928));
        float _1286 = fma(_936, cbModelParam._m0[32u].z, fma(_932, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _928));
        float _1309 = _928 + _697;
        float _1310 = _932 + _698;
        float _1311 = _936 + _699;
        float _1321 = fma(_1311, cbModelParam._m0[30u].z, fma(_1310, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1309)) - _1278;
        float _1322 = fma(_1311, cbModelParam._m0[31u].z, fma(_1310, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1309)) - _1282;
        float _1323 = fma(_1311, cbModelParam._m0[32u].z, fma(_1310, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1309)) - _1286;
        float _1327 = inversesqrt(dot(vec3(_1321, _1322, _1323), vec3(_1321, _1322, _1323)));
        float _1340 = ((_1327 * _1321) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1278 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1341 = ((_1327 * _1322) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1282 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1342 = ((_1327 * _1323) / cbModelParam._m0[35u].z) + ((((((_1286 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1344 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1340, _1341, _1342), 0.0);
        vec4 _1351 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1340, _1341, _1342), 0.0);
        vec4 _1358 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1340, _1341, _1342), 0.0);
        vec4 _1365 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1340, _1341, _1342), 0.0);
        float _1377 = exp2((_1344.w + (-0.5)) * 20.0) * 2.0;
        float _1378 = _1377 * (_1344.x + (-0.5));
        float _1379 = _1377 * (_1344.y + (-0.5));
        float _1380 = _1377 * (_1344.z + (-0.5));
        float _1387 = exp2((_1351.w + (-0.5)) * 20.0) * 2.0;
        float _1388 = _1387 * (_1351.x + (-0.5));
        float _1389 = _1387 * (_1351.y + (-0.5));
        float _1390 = _1387 * (_1351.z + (-0.5));
        float _1397 = exp2((_1358.w + (-0.5)) * 20.0) * 2.0;
        float _1398 = _1397 * (_1358.x + (-0.5));
        float _1399 = _1397 * (_1358.y + (-0.5));
        float _1400 = _1397 * (_1358.z + (-0.5));
        float _1407 = exp2((_1365.w + (-0.5)) * 20.0) * 2.0;
        float _1408 = _1407 * (_1365.x + (-0.5));
        float _1409 = _1407 * (_1365.y + (-0.5));
        float _1410 = _1407 * (_1365.z + (-0.5));
        float _1411 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1412 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1413 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1414 = _1378 * 0.5;
        float _1415 = _1388 * 0.5;
        float _1416 = _1398 * 0.5;
        float _1417 = dot(vec3(_1414, _1415, _1416), vec3(_1414, _1415, _1416));
        float _1422 = (_1417 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1417);
        float _1430 = (dot(vec3(_697, _698, _699), vec3(_1422 * _1414, _1422 * _1415, _1422 * _1416)) + 1.0) * 0.5;
        float _3912 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1439 = sqrt(((_1415 * _1415) + (_1414 * _1414)) + (_1416 * _1416)) / (_1411 + 9.9999997473787516355514526367188e-06);
        float _3923 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1440 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _1441 = _1440 * 2.0;
        float _1445 = (1.0 - _1440) / (_1440 + 1.0);
        float _3934 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1446 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _1455 = ((((1.0 - _1446) * (_1441 + 2.0)) * exp2(log2(isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0))) * (_1441 + 1.0))) + _1446) * _1411;
        float _1456 = _1379 * 0.5;
        float _1457 = _1389 * 0.5;
        float _1458 = _1399 * 0.5;
        float _1459 = dot(vec3(_1456, _1457, _1458), vec3(_1456, _1457, _1458));
        float _1464 = (_1459 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1459);
        float _1472 = (dot(vec3(_697, _698, _699), vec3(_1464 * _1456, _1464 * _1457, _1464 * _1458)) + 1.0) * 0.5;
        float _3945 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1481 = sqrt(((_1457 * _1457) + (_1456 * _1456)) + (_1458 * _1458)) / (_1412 + 9.9999997473787516355514526367188e-06);
        float _3956 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1482 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1483 = _1482 * 2.0;
        float _1487 = (1.0 - _1482) / (_1482 + 1.0);
        float _3967 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1488 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _1497 = ((((1.0 - _1488) * (_1483 + 2.0)) * exp2(log2(isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) * (_1483 + 1.0))) + _1488) * _1412;
        float _1498 = _1380 * 0.5;
        float _1499 = _1390 * 0.5;
        float _1500 = _1400 * 0.5;
        float _1501 = dot(vec3(_1498, _1499, _1500), vec3(_1498, _1499, _1500));
        float _1506 = (_1501 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1501);
        float _1514 = (dot(vec3(_697, _698, _699), vec3(_1506 * _1498, _1506 * _1499, _1506 * _1500)) + 1.0) * 0.5;
        float _3978 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1523 = sqrt(((_1499 * _1499) + (_1498 * _1498)) + (_1500 * _1500)) / (_1413 + 9.9999997473787516355514526367188e-06);
        float _3989 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1524 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _1525 = _1524 * 2.0;
        float _1529 = (1.0 - _1524) / (_1524 + 1.0);
        float _4000 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1530 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _1539 = ((((1.0 - _1530) * (_1525 + 2.0)) * exp2(log2(isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) * (_1525 + 1.0))) + _1530) * _1413;
        _1547 = _1380;
        _1548 = _1379;
        _1549 = _1378;
        _1550 = _1390;
        _1551 = _1389;
        _1552 = _1388;
        _1553 = _1400;
        _1554 = _1399;
        _1555 = _1398;
        _1556 = _1413;
        _1557 = _1412;
        _1558 = _1411;
        _1559 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0)));
        _1560 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0)));
        _1561 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0)));
    }
    else
    {
        _1547 = _1238;
        _1548 = _1238;
        _1549 = _1238;
        _1550 = _1238;
        _1551 = _1238;
        _1552 = _1238;
        _1553 = _1238;
        _1554 = _1238;
        _1555 = _1238;
        _1556 = _1238;
        _1557 = _1238;
        _1558 = _1238;
        _1559 = 0.0;
        _1560 = 0.0;
        _1561 = 0.0;
    }
    float _1571 = (cbModelParam._m0[1u].x * (_1559 - _1250)) + _1250;
    float _1572 = (cbModelParam._m0[1u].x * (_1560 - _1251)) + _1251;
    float _1573 = (cbModelParam._m0[1u].x * (_1561 - _1252)) + _1252;
    float _1594 = fma(_1573, cbSceneParam._m0[89u].z, fma(_1572, cbSceneParam._m0[89u].y, _1571 * cbSceneParam._m0[89u].x));
    float _1597 = fma(_1573, cbSceneParam._m0[90u].z, fma(_1572, cbSceneParam._m0[90u].y, _1571 * cbSceneParam._m0[90u].x));
    float _1600 = fma(_1573, cbSceneParam._m0[91u].z, fma(_1572, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1571));
    float _1615 = _872 * 0.5;
    float _1616 = _873 * 0.5;
    float _1617 = _874 * 0.5;
    float _1618 = dot(vec4(_1615, _1616, _1617, 1.0), vec4(_1549, _1552, _1555, _1558));
    float _1621 = dot(vec4(_1615, _1616, _1617, 1.0), vec4(_1548, _1551, _1554, _1557));
    float _1624 = dot(vec4(_1615, _1616, _1617, 1.0), vec4(_1547, _1550, _1553, _1556));
    float _1658;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1631 = dot(vec4(_1615, _1616, _1617, 1.0), vec4(_1237, _1241, _1244, _1247));
        float _1635 = dot(vec4(_1615, _1616, _1617, 1.0), vec4(_1239, _1242, _1245, _1248));
        float _1639 = dot(vec4(_1615, _1616, _1617, 1.0), vec4(_1240, _1243, _1246, _1249));
        float _1646 = dot(vec4(cbModelParam._m0[39u]), vec4(_1615, _1616, _1617, 1.0));
        _1658 = dot(vec3(isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0)), isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0)), isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1646) ? 0.0 : (isnan(0.0) ? _1646 : max(0.0, _1646))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1658 = 1.0;
    }
    float _1669;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1660 = dot(vec4(cbModelParam._m0[40u]), vec4(_1615, _1616, _1617, 1.0));
        _1669 = dot(vec3(isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0)), isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0)), isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1660) ? 0.0 : (isnan(0.0) ? _1660 : max(0.0, _1660))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1669 = 1.0;
    }
    float _1673 = (_1669 * cbModelParam._m0[1u].x) + (_1658 * (1.0 - cbModelParam._m0[1u].x));
    float _1683 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _700);
    float _1684 = isnan(_1683) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1683 : min(cbModelParam._m0[25u].z, _1683));
    float _1764;
    float _1766;
    float _1768;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1731 = fma(_936, cbModelParam._m0[13u].z, fma(_932, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _928)) + cbModelParam._m0[13u].w;
        float _1735 = fma(_936, cbModelParam._m0[14u].z, fma(_932, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _928)) + cbModelParam._m0[14u].w;
        float _1739 = fma(_936, cbModelParam._m0[15u].z, fma(_932, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _928)) + cbModelParam._m0[15u].w;
        float _1742 = fma(_874, cbModelParam._m0[13u].z, fma(_873, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _872));
        float _1745 = fma(_874, cbModelParam._m0[14u].z, fma(_873, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _872));
        float _1748 = fma(_874, cbModelParam._m0[15u].z, fma(_873, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _872));
        float _1776;
        if (_1742 > 0.0)
        {
            _1776 = abs((1.0 - _1731) / _1742);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1742 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1731 + 1.0) / _1742);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1776 = frontier_phi_14_12_ladder;
        }
        float _1979;
        if (_1745 > 0.0)
        {
            _1979 = abs((1.0 - _1735) / _1745);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1745 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1735 + 1.0) / _1745);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1979 = frontier_phi_23_19_ladder;
        }
        float _2233;
        if (_1748 > 0.0)
        {
            _2233 = abs((1.0 - _1739) / _1748);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1748 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1739 + 1.0) / _1748);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2233 = frontier_phi_35_30_ladder;
        }
        float _2235 = isnan(_1979) ? _1776 : (isnan(_1776) ? _1979 : min(_1776, _1979));
        float _2236 = isnan(_2233) ? _2235 : (isnan(_2235) ? _2233 : min(_2235, _2233));
        float _2240 = (_2236 * _1742) + _1731;
        float _2241 = (_2236 * _1745) + _1735;
        float _2242 = (_2236 * _1748) + _1739;
        float _2243 = _2236 * 9.9999997473787516355514526367188e-05;
        float _2245 = (-1.0) - _2243;
        float _2247 = _2243 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2242 > _2247) || ((_2242 < _2245) || ((_2241 > _2247) || ((_2241 < _2245) || ((_2240 < _2245) || (_2240 > _2247))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2370 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2242, cbModelParam._m0[9u].z, fma(_2241, cbModelParam._m0[9u].y, _2240 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2242, cbModelParam._m0[10u].z, fma(_2241, cbModelParam._m0[10u].y, _2240 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2242, cbModelParam._m0[11u].z, fma(_2241, cbModelParam._m0[11u].y, _2240 * cbModelParam._m0[11u].x))), _1684);
            frontier_phi_13_35_ladder = _2370.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2370.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2370.x * cbModelParam._m0[1u].y;
        }
        _1764 = frontier_phi_13_35_ladder_2;
        _1766 = frontier_phi_13_35_ladder_1;
        _1768 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1752 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_872, _873, _874), _1684);
        _1764 = _1752.x * cbModelParam._m0[1u].y;
        _1766 = _1752.y * cbModelParam._m0[1u].y;
        _1768 = _1752.z * cbModelParam._m0[1u].y;
    }
    float _1772 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _700);
    float _1773 = isnan(_1772) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1772 : min(cbModelParam._m0[25u].w, _1772));
    float _1863;
    float _1865;
    float _1867;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1827 = fma(_936, cbModelParam._m0[21u].z, fma(_932, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _928)) + cbModelParam._m0[21u].w;
        float _1831 = fma(_936, cbModelParam._m0[22u].z, fma(_932, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _928)) + cbModelParam._m0[22u].w;
        float _1835 = fma(_936, cbModelParam._m0[23u].z, fma(_932, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _928)) + cbModelParam._m0[23u].w;
        float _1838 = fma(_874, cbModelParam._m0[21u].z, fma(_873, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _872));
        float _1841 = fma(_874, cbModelParam._m0[22u].z, fma(_873, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _872));
        float _1844 = fma(_874, cbModelParam._m0[23u].z, fma(_873, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _872));
        float _1984;
        if (_1838 > 0.0)
        {
            _1984 = abs((1.0 - _1827) / _1838);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1838 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1827 + 1.0) / _1838);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1984 = frontier_phi_25_21_ladder;
        }
        float _2260;
        if (_1841 > 0.0)
        {
            _2260 = abs((1.0 - _1831) / _1841);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1841 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1831 + 1.0) / _1841);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2260 = frontier_phi_37_32_ladder;
        }
        float _2473;
        if (_1844 > 0.0)
        {
            _2473 = abs((1.0 - _1835) / _1844);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1844 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1835 + 1.0) / _1844);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2473 = frontier_phi_46_43_ladder;
        }
        float _2475 = isnan(_2260) ? _1984 : (isnan(_1984) ? _2260 : min(_1984, _2260));
        float _2476 = isnan(_2473) ? _2475 : (isnan(_2475) ? _2473 : min(_2475, _2473));
        float _2480 = (_2476 * _1838) + _1827;
        float _2481 = (_2476 * _1841) + _1831;
        float _2482 = (_2476 * _1844) + _1835;
        float _2483 = _2476 * 9.9999997473787516355514526367188e-05;
        float _2484 = (-1.0) - _2483;
        float _2486 = _2483 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2482 > _2486) || ((_2482 < _2484) || ((_2481 > _2486) || ((_2481 < _2484) || ((_2480 < _2484) || (_2480 > _2486))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2710 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2482, cbModelParam._m0[17u].z, fma(_2481, cbModelParam._m0[17u].y, _2480 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2482, cbModelParam._m0[18u].z, fma(_2481, cbModelParam._m0[18u].y, _2480 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2482, cbModelParam._m0[19u].z, fma(_2481, cbModelParam._m0[19u].y, _2480 * cbModelParam._m0[19u].x))), _1773);
            frontier_phi_22_46_ladder = _2710.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2710.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2710.x * cbModelParam._m0[1u].z;
        }
        _1863 = frontier_phi_22_46_ladder_2;
        _1865 = frontier_phi_22_46_ladder_1;
        _1867 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1847 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_872, _873, _874), _1773);
        _1863 = _1847.x * cbModelParam._m0[1u].z;
        _1865 = _1847.y * cbModelParam._m0[1u].z;
        _1867 = _1847.z * cbModelParam._m0[1u].z;
    }
    float _1880 = (((_899 * _849) + _900) * _864) * ((cbModelParam._m0[1u].w * (_1863 - _1764)) + _1764);
    float _1882 = (((_899 * _851) + _900) * _864) * ((cbModelParam._m0[1u].w * (_1865 - _1766)) + _1766);
    float _1884 = (((_899 * _852) + _900) * _864) * ((cbModelParam._m0[1u].w * (_1867 - _1768)) + _1768);
    float _1887 = fma(_1884, cbSceneParam._m0[89u].z, fma(_1882, cbSceneParam._m0[89u].y, _1880 * cbSceneParam._m0[89u].x));
    float _1890 = fma(_1884, cbSceneParam._m0[90u].z, fma(_1882, cbSceneParam._m0[90u].y, _1880 * cbSceneParam._m0[90u].x));
    float _1893 = fma(_1884, cbSceneParam._m0[91u].z, fma(_1882, cbSceneParam._m0[91u].y, _1880 * cbSceneParam._m0[91u].x));
    uvec4 _1903 = floatBitsToUint(cbInstanceData._m0[_824 + 5u]);
    uint _1905 = _1903.x * 14u;
    uint _1906 = _1905 + 13u;
    float _1913 = _864 + (-1.0);
    float _1918 = (cbLight._m0[_1906].x * _1913) + 1.0;
    float _1919 = (cbLight._m0[_1906].y * _1913) + 1.0;
    float _1920 = (cbLight._m0[_1906].z * _1913) + 1.0;
    float _1921 = (cbLight._m0[_1906].w * _1913) + 1.0;
    uint _1922 = _1905 + 5u;
    float _1928 = isnan(1.0) ? _1919 : (isnan(_1919) ? 1.0 : min(_1919, 1.0));
    uint _1932 = _1905 + 4u;
    float _1938 = isnan(1.0) ? _1918 : (isnan(_1918) ? 1.0 : min(_1918, 1.0));
    uint _1942 = _1905 | 1u;
    float _1953 = dot(vec3(cbLight._m0[_1905].xyz), vec3(_697, _698, _699));
    float _1956 = dot(vec3(cbLight._m0[_1942].xyz), vec3(_697, _698, _699));
    float _4136 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
    float _4147 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
    float _1961 = (isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * 0.3183098733425140380859375;
    float _1963 = (isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * 0.3183098733425140380859375;
    float _1970 = ((cbLight._m0[_1922].x * _1928) * _1963) + ((cbLight._m0[_1932].x * _1938) * _1961);
    float _1971 = ((_1928 * cbLight._m0[_1922].y) * _1963) + ((_1938 * cbLight._m0[_1932].y) * _1961);
    float _1972 = ((_1928 * cbLight._m0[_1922].z) * _1963) + ((_1938 * cbLight._m0[_1932].z) * _1961);
    uvec4 _1976 = floatBitsToUint(cbLight._m0[_1905 + 12u]);
    bool _1978 = _1976.x == 0u;
    float _1989;
    float _1991;
    float _1993;
    if (_1978)
    {
        _1989 = _1970;
        _1991 = _1971;
        _1993 = _1972;
    }
    else
    {
        uint _1997 = _1905 + 6u;
        float _2013 = (dot(vec3(cbLight._m0[_1905 + 2u].xyz), vec3(_697, _698, _699)) * 0.5) + 0.5;
        float _2014 = _2013 * _2013;
        float _4158 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
        float _2015 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _2016 = isnan(1.0) ? _1920 : (isnan(_1920) ? 1.0 : min(_1920, 1.0));
        _1989 = (((cbLight._m0[_1997].x * 0.3183098733425140380859375) * _2015) * _2016) + _1970;
        _1991 = (((cbLight._m0[_1997].y * 0.3183098733425140380859375) * _2015) * _2016) + _1971;
        _1993 = (((cbLight._m0[_1997].z * 0.3183098733425140380859375) * _2015) * _2016) + _1972;
    }
    bool _1996 = _1976.y == 0u;
    float _2034;
    float _2036;
    float _2038;
    if (_1996)
    {
        _2034 = _1989;
        _2036 = _1991;
        _2038 = _1993;
    }
    else
    {
        uint _2204 = _1905 + 7u;
        float _2220 = (dot(vec3(cbLight._m0[_1905 + 3u].xyz), vec3(_697, _698, _699)) * 0.5) + 0.5;
        float _2221 = _2220 * _2220;
        float _4174 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
        float _2222 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _2223 = isnan(1.0) ? _1921 : (isnan(_1921) ? 1.0 : min(_1921, 1.0));
        _2034 = (((cbLight._m0[_2204].x * 0.3183098733425140380859375) * _2222) * _2223) + _1989;
        _2036 = (((cbLight._m0[_2204].y * 0.3183098733425140380859375) * _2222) * _2223) + _1991;
        _2038 = (((cbLight._m0[_2204].z * 0.3183098733425140380859375) * _2222) * _2223) + _1993;
    }
    uint _2041 = _1905 + 8u;
    float _2054 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1905].w)) * _700) * 0.949999988079071044921875);
    float _2055 = _2054 * _2054;
    float _2056 = cbLight._m0[_1905].x + _778;
    float _2057 = cbLight._m0[_1905].y + _779;
    float _2058 = cbLight._m0[_1905].z + _780;
    float _2062 = inversesqrt(dot(vec3(_2056, _2057, _2058), vec3(_2056, _2057, _2058)));
    float _2063 = _2062 * _2056;
    float _2064 = _2062 * _2057;
    float _2065 = _2062 * _2058;
    float _2066 = dot(vec3(_697, _698, _699), vec3(cbLight._m0[_1905].xyz));
    float _4190 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
    float _2069 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
    float _4201 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _2070 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
    float _2071 = dot(vec3(_697, _698, _699), vec3(_2063, _2064, _2065));
    float _4212 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
    float _2074 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
    float _2075 = dot(vec3(cbLight._m0[_1905].xyz), vec3(_2063, _2064, _2065));
    float _4223 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
    float _2079 = _2055 * _2055;
    float _2083 = ((_2074 * _2074) * (_2079 + (-1.0))) + 1.0;
    float _2091 = exp2(log2(1.0 - (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0)))) * 5.0);
    float _2092 = 0.959999978542327880859375 - _846;
    float _2094 = 0.959999978542327880859375 - _847;
    float _2095 = 0.959999978542327880859375 - _848;
    float _2102 = 1.0 - _2055;
    float _2113 = (0.5 / (((_2070 * ((_2069 * _2102) + _2055)) + 9.9999999392252902907785028219223e-09) + (((_2070 * _2102) + _2055) * _2069))) * _2069;
    float _4234 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
    float _2115 = (isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * (_2079 / ((_2083 * _2083) * 3.141590118408203125));
    uint _2126 = _1905 + 9u;
    float _2137 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1942].w)) * _700) * 0.949999988079071044921875);
    float _2138 = _2137 * _2137;
    float _2139 = cbLight._m0[_1942].x + _778;
    float _2140 = cbLight._m0[_1942].y + _779;
    float _2141 = cbLight._m0[_1942].z + _780;
    float _2145 = inversesqrt(dot(vec3(_2139, _2140, _2141), vec3(_2139, _2140, _2141)));
    float _2146 = _2145 * _2139;
    float _2147 = _2145 * _2140;
    float _2148 = _2145 * _2141;
    float _2149 = dot(vec3(_697, _698, _699), vec3(cbLight._m0[_1942].xyz));
    float _4245 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
    float _2152 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
    float _2153 = dot(vec3(_697, _698, _699), vec3(_2146, _2147, _2148));
    float _4256 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
    float _2156 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
    float _2157 = dot(vec3(cbLight._m0[_1942].xyz), vec3(_2146, _2147, _2148));
    float _4267 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
    float _2161 = _2138 * _2138;
    float _2165 = ((_2156 * _2156) * (_2161 + (-1.0))) + 1.0;
    float _2172 = exp2(log2(1.0 - (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0)))) * 5.0);
    float _2179 = 1.0 - _2138;
    float _2189 = (0.5 / (((_2070 * ((_2152 * _2179) + _2138)) + 9.9999999392252902907785028219223e-09) + (((_2070 * _2179) + _2138) * _2152))) * _2152;
    float _4278 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
    float _2191 = (isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0))) * (_2161 / ((_2165 * _2165) * 3.141590118408203125));
    float _2201 = (((((_2172 * _2092) + _849) * cbLight._m0[_2126].x) * _2191) * _1928) + (((((_2091 * _2092) + _849) * cbLight._m0[_2041].x) * _2115) * _1938);
    float _2202 = (((((_2172 * _2094) + _851) * cbLight._m0[_2126].y) * _2191) * _1928) + (((((_2091 * _2094) + _851) * cbLight._m0[_2041].y) * _2115) * _1938);
    float _2203 = (((((_2172 * _2095) + _852) * cbLight._m0[_2126].z) * _2191) * _1928) + (((((_2091 * _2095) + _852) * cbLight._m0[_2041].z) * _2115) * _1938);
    float _2265;
    float _2267;
    float _2269;
    if (_1978)
    {
        _2265 = _2201;
        _2267 = _2202;
        _2269 = _2203;
    }
    else
    {
        uint _2271 = _1905 + 2u;
        uint _2275 = _1905 + 10u;
        float _2289 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2271].w)) * _700) * 0.949999988079071044921875);
        float _2290 = _2289 * _2289;
        float _2291 = cbLight._m0[_2271].x + _778;
        float _2292 = cbLight._m0[_2271].y + _779;
        float _2293 = cbLight._m0[_2271].z + _780;
        float _2297 = inversesqrt(dot(vec3(_2291, _2292, _2293), vec3(_2291, _2292, _2293)));
        float _2298 = _2297 * _2291;
        float _2299 = _2297 * _2292;
        float _2300 = _2297 * _2293;
        float _2301 = dot(vec3(_697, _698, _699), vec3(cbLight._m0[_2271].xyz));
        float _4289 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
        float _2304 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _2305 = dot(vec3(_697, _698, _699), vec3(_2298, _2299, _2300));
        float _4300 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
        float _2308 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _2309 = dot(vec3(cbLight._m0[_2271].xyz), vec3(_2298, _2299, _2300));
        float _4311 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
        float _2313 = _2290 * _2290;
        float _2317 = ((_2308 * _2308) * (_2313 + (-1.0))) + 1.0;
        float _2324 = exp2(log2(1.0 - (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0)))) * 5.0);
        float _2331 = 1.0 - _2290;
        float _2341 = (0.5 / (((_2070 * ((_2304 * _2331) + _2290)) + 9.9999999392252902907785028219223e-09) + (((_2070 * _2331) + _2290) * _2304))) * _2304;
        float _4322 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
        float _2343 = (isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0))) * (_2313 / ((_2317 * _2317) * 3.141590118408203125));
        float _2344 = isnan(1.0) ? _1920 : (isnan(_1920) ? 1.0 : min(_1920, 1.0));
        _2265 = (((((_2324 * _2092) + _849) * cbLight._m0[_2275].x) * _2343) * _2344) + _2201;
        _2267 = (((((_2324 * _2094) + _851) * cbLight._m0[_2275].y) * _2343) * _2344) + _2202;
        _2269 = (((((_2324 * _2095) + _852) * cbLight._m0[_2275].z) * _2343) * _2344) + _2203;
    }
    float _2379;
    float _2381;
    float _2383;
    if (_1996)
    {
        _2379 = _2265;
        _2381 = _2267;
        _2383 = _2269;
    }
    else
    {
        uint _2390 = _1905 + 3u;
        uint _2394 = _1905 + 11u;
        float _2408 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2390].w)) * _700) * 0.949999988079071044921875);
        float _2409 = _2408 * _2408;
        float _2410 = cbLight._m0[_2390].x + _778;
        float _2411 = cbLight._m0[_2390].y + _779;
        float _2412 = cbLight._m0[_2390].z + _780;
        float _2416 = inversesqrt(dot(vec3(_2410, _2411, _2412), vec3(_2410, _2411, _2412)));
        float _2417 = _2416 * _2410;
        float _2418 = _2416 * _2411;
        float _2419 = _2416 * _2412;
        float _2420 = dot(vec3(_697, _698, _699), vec3(cbLight._m0[_2390].xyz));
        float _4338 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
        float _2423 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _2424 = dot(vec3(_697, _698, _699), vec3(_2417, _2418, _2419));
        float _4349 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
        float _2427 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _2428 = dot(vec3(cbLight._m0[_2390].xyz), vec3(_2417, _2418, _2419));
        float _4360 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
        float _2432 = _2409 * _2409;
        float _2436 = ((_2427 * _2427) * (_2432 + (-1.0))) + 1.0;
        float _2443 = exp2(log2(1.0 - (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0)))) * 5.0);
        float _2450 = 1.0 - _2409;
        float _2460 = (0.5 / (((_2070 * ((_2423 * _2450) + _2409)) + 9.9999999392252902907785028219223e-09) + (((_2070 * _2450) + _2409) * _2423))) * _2423;
        float _4371 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
        float _2462 = (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) * (_2432 / ((_2436 * _2436) * 3.141590118408203125));
        float _2463 = isnan(1.0) ? _1921 : (isnan(_1921) ? 1.0 : min(_1921, 1.0));
        _2379 = (((((_2443 * _2092) + _849) * cbLight._m0[_2394].x) * _2462) * _2463) + _2265;
        _2381 = (((((_2443 * _2094) + _851) * cbLight._m0[_2394].y) * _2462) * _2463) + _2267;
        _2383 = (((((_2443 * _2095) + _852) * cbLight._m0[_2394].z) * _2462) * _2463) + _2269;
    }
    float _2598;
    float _2600;
    float _2602;
    float _2604;
    float _2606;
    float _2608;
    if (_1903.y == 0u)
    {
        float _2538 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2539 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2538;
        float _2540 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2538;
        float _2541 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2538;
        uvec4 _2553 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2554 = _2553.x;
        uint _2565 = uint((float(_2553.y) * floor(float(uint(cbSceneParam._m0[85u].y * _787) / _2554))) + floor(float(uint(cbSceneParam._m0[85u].x * _786) / _2554)));
        float _2575 = (log2(_2541 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2576 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
        uint _2579 = uint(isnan(14.0) ? _2576 : (isnan(_2576) ? 14.0 : min(_2576, 14.0)));
        uvec4 _2584 = texelFetch(g_lightClusterGridBuffer, int(((_2579 << 2u) + (_2565 << 6u)) >> 2u));
        uint _2585 = _2584.x;
        uint _2586 = _2553.z;
        float _2715;
        float _2717;
        float _2719;
        float _2721;
        float _2723;
        float _2725;
        if (((((1u << ((_2586 >> 4u) & 15u)) + 4294967295u) & _2585) == 0u) || ((_2586 & 240u) == 0u))
        {
            _2715 = 0.0;
            _2717 = 0.0;
            _2719 = 0.0;
            _2721 = 0.0;
            _2723 = 0.0;
            _2725 = 0.0;
        }
        else
        {
            float _2716;
            float _2718;
            float _2720;
            float _2722;
            float _2724;
            float _2726;
            float _2868 = 0.0;
            float _2869 = 0.0;
            float _2870 = 0.0;
            float _2871 = 0.0;
            float _2872 = 0.0;
            float _2873 = 0.0;
            uint _2874 = 0u;
            uint _2883;
            bool _2884;
            for (;;)
            {
                _2883 = texelFetch(g_lightClassification, int((((_2579 << 5u) + (_2565 << 9u)) + (_2874 << 2u)) >> 2u)).x;
                _2884 = _2883 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2884)
                {
                    frontier_phi_61_pred = _2868;
                    frontier_phi_61_pred_1 = _2873;
                    frontier_phi_61_pred_2 = _2872;
                    frontier_phi_61_pred_3 = _2871;
                    frontier_phi_61_pred_4 = _2870;
                    frontier_phi_61_pred_5 = _2869;
                }
                else
                {
                    float _2992;
                    float _2993;
                    float _2994;
                    float _2995;
                    float _2996;
                    float _2997;
                    uint _2998;
                    _2992 = _2868;
                    _2993 = _2869;
                    _2994 = _2870;
                    _2995 = _2871;
                    _2996 = _2872;
                    _2997 = _2873;
                    _2998 = _2883;
                    float _2924;
                    float _2925;
                    float _2926;
                    float _2927;
                    float _2928;
                    float _2929;
                    for (;;)
                    {
                        uint _3002 = uint(findLSB(_2998)) + (_2874 << 5u);
                        uint _2999 = (_2998 + 4294967295u) & _2998;
                        uint _3004 = _3002 * 48u;
                        vec4 _3018 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3004)).x, texelFetch(g_PointLightRenderingBuffer, int(_3004 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3004 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3004 + 3u)).x));
                        uint _3024 = (_3002 * 48u) + 4u;
                        vec4 _3037 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3024)).x, texelFetch(g_PointLightRenderingBuffer, int(_3024 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3024 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3024 + 3u)).x));
                        uint _3043 = (_3002 * 48u) + 8u;
                        vec3 _3054 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3043)).x, texelFetch(g_PointLightRenderingBuffer, int(_3043 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3043 + 2u)).x));
                        float _3058 = _3018.x - _2539;
                        float _3059 = _3018.y - _2540;
                        float _3060 = _3018.z - _2541;
                        float _3061 = dot(vec3(_3058, _3059, _3060), vec3(_3058, _3059, _3060));
                        float _3064 = inversesqrt(_3061);
                        float _3065 = _3064 * _3058;
                        float _3066 = _3064 * _3059;
                        float _3067 = _3064 * _3060;
                        float _3068 = dot(vec3(_805, _808, _811), vec3(_3065, _3066, _3067));
                        float _3073 = 1.0 - (_3061 * _3018.w);
                        float _4397 = isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0));
                        float _3074 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
                        float _3075 = sqrt(_3061) * _3037.w;
                        float _3078 = 1.39999997615814208984375 / (_3075 + 1.39999997615814208984375);
                        float _3079 = _3078 * _3078;
                        float _3082 = ((1.0 - _3079) * _3068) + _3079;
                        float _3085 = _3075 * _3075;
                        float _3089 = ((isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0))) * _3074) / ((_3085 * 0.699999988079071044921875) + 1.0);
                        float _3093 = (-0.0) - _2539;
                        float _3094 = (-0.0) - _2540;
                        float _3095 = (-0.0) - _2541;
                        float _3099 = inversesqrt(dot(vec3(_3093, _3094, _3095), vec3(_3093, _3094, _3095)));
                        float _3100 = _3099 * _3093;
                        float _3101 = _3099 * _3094;
                        float _3102 = _3099 * _3095;
                        float _3110 = exp2(log2(1.0 / ((_3085 * 3.5) + 5.0)) * 0.25);
                        float _3111 = 1.0 - _880;
                        float _3118 = sqrt(1.0 - ((1.0 - (_3111 * _3111)) * (1.0 - (_3110 * _3110))));
                        float _3119 = _3118 * _3118;
                        float _3120 = _3119 * _3119;
                        float _3121 = _3100 + _3065;
                        float _3122 = _3101 + _3066;
                        float _3123 = _3102 + _3067;
                        float _3127 = inversesqrt(dot(vec3(_3121, _3122, _3123), vec3(_3121, _3122, _3123)));
                        float _3131 = dot(vec3(_805, _808, _811), vec3(_3100, _3101, _3102));
                        float _4413 = isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0));
                        float _3134 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
                        float _3135 = dot(vec3(_805, _808, _811), vec3(_3127 * _3121, _3127 * _3122, _3127 * _3123));
                        float _4424 = isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0));
                        float _3138 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
                        float _3142 = ((_3138 * _3138) * (_3120 + (-1.0))) + 1.0;
                        float _3143 = _3078 * _3119;
                        float _3144 = _3143 * _3143;
                        float _3147 = ((1.0 - _3144) * _3068) + _3144;
                        float _4435 = isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0));
                        float _3148 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
                        float _3149 = 1.0 - _3119;
                        float _3159 = (0.5 / (((_3148 * ((_3134 * _3149) + _3119)) + 9.9999999392252902907785028219223e-09) + (((_3148 * _3149) + _3119) * _3134))) * _3148;
                        float _4446 = isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : max(_3159, 0.0));
                        float _3170 = (((_3120 * 3.1415927410125732421875) * (isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0)))) / ((_3142 * _3142) * ((_3085 * 2.1991131305694580078125) + 3.141590118408203125))) * _3074;
                        _2927 = (_3089 * _3037.x) + _2995;
                        _2928 = (_3089 * _3037.y) + _2996;
                        _2929 = (_3089 * _3037.z) + _2997;
                        _2924 = (_3170 * _3054.x) + _2992;
                        _2925 = (_3170 * _3054.y) + _2993;
                        _2926 = (_3170 * _3054.z) + _2994;
                        if (_2999 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2992 = _2924;
                            _2993 = _2925;
                            _2994 = _2926;
                            _2995 = _2927;
                            _2996 = _2928;
                            _2997 = _2929;
                            _2998 = _2999;
                        }
                    }
                    frontier_phi_61_pred = _2924;
                    frontier_phi_61_pred_1 = _2929;
                    frontier_phi_61_pred_2 = _2928;
                    frontier_phi_61_pred_3 = _2927;
                    frontier_phi_61_pred_4 = _2926;
                    frontier_phi_61_pred_5 = _2925;
                }
                _2716 = frontier_phi_61_pred;
                _2726 = frontier_phi_61_pred_1;
                _2724 = frontier_phi_61_pred_2;
                _2722 = frontier_phi_61_pred_3;
                _2720 = frontier_phi_61_pred_4;
                _2718 = frontier_phi_61_pred_5;
                uint _2875 = _2874 + 1u;
                if (_2875 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2868 = _2716;
                    _2869 = _2718;
                    _2870 = _2720;
                    _2871 = _2722;
                    _2872 = _2724;
                    _2873 = _2726;
                    _2874 = _2875;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2715 = _2716;
            _2717 = _2718;
            _2719 = _2720;
            _2721 = _2722;
            _2723 = _2724;
            _2725 = _2726;
        }
        uvec4 _2729 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2730 = _2729.z;
        uint _2732 = (_2730 >> 8u) & 15u;
        float _2836;
        float _2838;
        float _2840;
        float _2842;
        float _2844;
        float _2846;
        if (((4294967295u << _2732) & _2585) == 0u)
        {
            _2836 = _2715;
            _2838 = _2717;
            _2840 = _2719;
            _2842 = _2721;
            _2844 = _2723;
            _2846 = _2725;
        }
        else
        {
            float _2861 = inversesqrt(dot(vec3(_2539, _2540, _2541), vec3(_2539, _2540, _2541)));
            float _2862 = _2861 * _2539;
            float _2863 = _2861 * _2540;
            float _2864 = _2861 * _2541;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2732 < ((_2730 >> 12u) & 15u))
            {
                float _2837;
                float _2839;
                float _2841;
                float _2843;
                float _2845;
                float _2847;
                float _2975 = _2715;
                float _2976 = _2717;
                float _2977 = _2719;
                float _2978 = _2721;
                float _2979 = _2723;
                float _2980 = _2725;
                uint _2981 = _2732;
                uint _2990;
                bool _2991;
                for (;;)
                {
                    _2990 = texelFetch(g_lightClassification, int((((_2579 << 5u) + (_2565 << 9u)) + (_2981 << 2u)) >> 2u)).x;
                    _2991 = _2990 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2991)
                    {
                        frontier_phi_67_pred = _2978;
                        frontier_phi_67_pred_1 = _2979;
                        frontier_phi_67_pred_2 = _2980;
                        frontier_phi_67_pred_3 = _2977;
                        frontier_phi_67_pred_4 = _2976;
                        frontier_phi_67_pred_5 = _2975;
                    }
                    else
                    {
                        float _3175;
                        float _3176;
                        float _3177;
                        float _3178;
                        float _3179;
                        float _3180;
                        float _3469;
                        float _3470;
                        float _3471;
                        float _3472;
                        float _3473;
                        float _3474;
                        float _3188 = _2975;
                        float _3189 = _2976;
                        float _3190 = _2977;
                        float _3191 = _2978;
                        float _3192 = _2979;
                        float _3193 = _2980;
                        uint _3194 = _2990;
                        uint _3195;
                        vec4 _3220;
                        float _3221;
                        vec4 _3236;
                        vec3 _3248;
                        vec4 _3263;
                        vec4 _3278;
                        float _3325;
                        bool _3326;
                        for (;;)
                        {
                            uint _3205 = ((_2981 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3194));
                            _3195 = (_3194 + 4294967295u) & _3194;
                            uint _3207 = _3205 * 40u;
                            _3220 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3207)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 3u)).x));
                            _3221 = _3220.w;
                            uint _3223 = (_3205 * 40u) + 4u;
                            _3236 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3223)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 3u)).x));
                            uint _3238 = (_3205 * 40u) + 8u;
                            _3248 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3238)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 2u)).x));
                            uint _3250 = (_3205 * 40u) + 16u;
                            _3263 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3250)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 3u)).x));
                            uint _3265 = (_3205 * 40u) + 20u;
                            _3278 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3265)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 3u)).x));
                            uint _3281 = (_3205 * 40u) + 24u;
                            vec4 _3294 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3281)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 3u)).x));
                            uint _3300 = (_3205 * 40u) + 28u;
                            vec4 _3313 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3300)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 3u)).x));
                            _3325 = fma(_2541, _3313.z, fma(_2540, _3313.y, _3313.x * _2539)) + _3313.w;
                            _3326 = !((fma(_2541, _3294.z, fma(_2540, _3294.y, _3294.x * _2539)) + _3294.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3326)
                            {
                                float _3353 = _3220.x - _2539;
                                float _3354 = _3220.y - _2540;
                                float _3355 = _3220.z - _2541;
                                float _3356 = dot(vec3(_3353, _3354, _3355), vec3(_3353, _3354, _3355));
                                float _3359 = inversesqrt(_3356);
                                float _3360 = _3359 * _3353;
                                float _3361 = _3359 * _3354;
                                float _3362 = _3359 * _3355;
                                float _3366 = 1.0 - (_3356 / (_3221 * _3221));
                                float _4457 = isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0));
                                float _3367 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
                                float _3371 = sqrt(_3356) * _3236.w;
                                float _3373 = 1.39999997615814208984375 / (_3371 + 1.39999997615814208984375);
                                float _3374 = _3373 * _3373;
                                float _3377 = ((1.0 - _3374) * dot(vec3(_3360, _3361, _3362), vec3(_805, _808, _811))) + _3374;
                                float _3380 = _3371 * _3371;
                                float _3384 = (fma(_2541, _3263.z, fma(_2540, _3263.y, _3263.x * _2539)) + _3263.w) / _3325;
                                float _3385 = (fma(_2541, _3278.z, fma(_2540, _3278.y, _3278.x * _2539)) + _3278.w) / _3325;
                                float _3389 = 1.0 - dot(vec2(_3384, _3385), vec2(_3384, _3385));
                                float _4473 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0));
                                float _3390 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
                                float _3391 = _3390 * (((isnan(0.0) ? _3377 : (isnan(_3377) ? 0.0 : max(_3377, 0.0))) * _3367) / ((_3380 * 0.699999988079071044921875) + 1.0));
                                float _3403 = exp2(log2(1.0 / ((_3380 * 3.5) + 5.0)) * 0.25);
                                float _3404 = 1.0 - _880;
                                float _3411 = sqrt(1.0 - ((1.0 - (_3404 * _3404)) * (1.0 - (_3403 * _3403))));
                                float _3412 = _3411 * _3411;
                                float _3413 = _3412 * _3412;
                                float _3414 = _3360 - _2862;
                                float _3415 = _3361 - _2863;
                                float _3416 = _3362 - _2864;
                                float _3420 = inversesqrt(dot(vec3(_3414, _3415, _3416), vec3(_3414, _3415, _3416)));
                                float _3424 = dot(vec3(_805, _808, _811), vec3((-0.0) - _2862, (-0.0) - _2863, (-0.0) - _2864));
                                float _4484 = isnan(0.0) ? _3424 : (isnan(_3424) ? 0.0 : max(_3424, 0.0));
                                float _3427 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
                                float _3428 = dot(vec3(_805, _808, _811), vec3(_3420 * _3414, _3420 * _3415, _3420 * _3416));
                                float _4495 = isnan(0.0) ? _3428 : (isnan(_3428) ? 0.0 : max(_3428, 0.0));
                                float _3431 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
                                float _3435 = ((_3431 * _3431) * (_3413 + (-1.0))) + 1.0;
                                float _3436 = _3373 * _3412;
                                float _3437 = _3436 * _3436;
                                float _3443 = ((1.0 - _3437) * dot(vec3(_805, _808, _811), vec3(_3360, _3361, _3362))) + _3437;
                                float _4506 = isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0));
                                float _3444 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
                                float _3445 = 1.0 - _3412;
                                float _3455 = (0.5 / (((_3444 * ((_3427 * _3445) + _3412)) + 9.9999999392252902907785028219223e-09) + (((_3444 * _3445) + _3412) * _3427))) * _3444;
                                float _4517 = isnan(0.0) ? _3455 : (isnan(_3455) ? 0.0 : max(_3455, 0.0));
                                float _3465 = (_3390 * _3367) * (((_3413 * 3.1415927410125732421875) * (isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0)))) / ((_3435 * _3435) * ((_3380 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3465 * _3248.x;
                                frontier_phi_73_pred_1 = _3465 * _3248.y;
                                frontier_phi_73_pred_2 = _3391 * _3236.z;
                                frontier_phi_73_pred_3 = _3391 * _3236.y;
                                frontier_phi_73_pred_4 = _3391 * _3236.x;
                                frontier_phi_73_pred_5 = _3465 * _3248.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3469 = frontier_phi_73_pred;
                            _3470 = frontier_phi_73_pred_1;
                            _3474 = frontier_phi_73_pred_2;
                            _3473 = frontier_phi_73_pred_3;
                            _3472 = frontier_phi_73_pred_4;
                            _3471 = frontier_phi_73_pred_5;
                            _3178 = _3472 + _3191;
                            _3179 = _3473 + _3192;
                            _3180 = _3474 + _3193;
                            _3175 = _3469 + _3188;
                            _3176 = _3470 + _3189;
                            _3177 = _3471 + _3190;
                            if (_3195 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3188 = _3175;
                                _3189 = _3176;
                                _3190 = _3177;
                                _3191 = _3178;
                                _3192 = _3179;
                                _3193 = _3180;
                                _3194 = _3195;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3178;
                        frontier_phi_67_pred_1 = _3179;
                        frontier_phi_67_pred_2 = _3180;
                        frontier_phi_67_pred_3 = _3177;
                        frontier_phi_67_pred_4 = _3176;
                        frontier_phi_67_pred_5 = _3175;
                    }
                    _2843 = frontier_phi_67_pred;
                    _2845 = frontier_phi_67_pred_1;
                    _2847 = frontier_phi_67_pred_2;
                    _2841 = frontier_phi_67_pred_3;
                    _2839 = frontier_phi_67_pred_4;
                    _2837 = frontier_phi_67_pred_5;
                    uint _2982 = _2981 + 1u;
                    if (_2982 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2975 = _2837;
                        _2976 = _2839;
                        _2977 = _2841;
                        _2978 = _2843;
                        _2979 = _2845;
                        _2980 = _2847;
                        _2981 = _2982;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2845;
                frontier_phi_55_56_ladder_1 = _2847;
                frontier_phi_55_56_ladder_2 = _2843;
                frontier_phi_55_56_ladder_3 = _2841;
                frontier_phi_55_56_ladder_4 = _2839;
                frontier_phi_55_56_ladder_5 = _2837;
            }
            else
            {
                frontier_phi_55_56_ladder = _2723;
                frontier_phi_55_56_ladder_1 = _2725;
                frontier_phi_55_56_ladder_2 = _2721;
                frontier_phi_55_56_ladder_3 = _2719;
                frontier_phi_55_56_ladder_4 = _2717;
                frontier_phi_55_56_ladder_5 = _2715;
            }
            _2836 = frontier_phi_55_56_ladder_5;
            _2838 = frontier_phi_55_56_ladder_4;
            _2840 = frontier_phi_55_56_ladder_3;
            _2842 = frontier_phi_55_56_ladder_2;
            _2844 = frontier_phi_55_56_ladder;
            _2846 = frontier_phi_55_56_ladder_1;
        }
        float _2851 = isnan(1.0) ? _864 : (isnan(_864) ? 1.0 : min(_864, 1.0));
        _2598 = (_2851 * _2842) + _2034;
        _2600 = (_2851 * _2844) + _2036;
        _2602 = (_2851 * _2846) + _2038;
        _2604 = ((_2836 * _849) * _2851) + _2379;
        _2606 = ((_2838 * _851) * _2851) + _2381;
        _2608 = ((_2840 * _852) * _2851) + _2383;
    }
    else
    {
        _2598 = _2034;
        _2600 = _2036;
        _2602 = _2038;
        _2604 = _2379;
        _2606 = _2381;
        _2608 = _2383;
    }
    uint _2614 = _825 + uint(cbMatDynParam._m0[0u].w);
    float _2620 = ((((((_607.x - _604) * _540) + _604) * cbMtdParam._m0[13u].x) + ((((_561.x - _558) * _540) + _558) * cbMtdParam._m0[11u].x)) * _360) * cbInstanceData._m0[_2614].x;
    float _2621 = ((((((_607.y - _605) * _540) + _605) * cbMtdParam._m0[13u].y) + ((((_561.y - _559) * _540) + _559) * cbMtdParam._m0[11u].y)) * _360) * cbInstanceData._m0[_2614].y;
    float _2622 = ((((((_607.z - _606) * _540) + _606) * cbMtdParam._m0[13u].z) + ((((_561.z - _560) * _540) + _560) * cbMtdParam._m0[11u].z)) * _360) * cbInstanceData._m0[_2614].z;
    float _4533 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _4544 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _4555 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _2639 = (((isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0))) * (_2598 + ((isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0))) * _864))) + ((_2604 + ((isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0))) * _1673)) * cbPerFrame._m0[3u].x)) + _2620;
    float _2641 = (_2621 + ((_2606 + ((isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0))) * _1673)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0))) * (_2600 + ((isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0))) * _864)));
    float _2643 = (_2622 + ((_2608 + ((isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0))) * _1673)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0))) * (_2602 + ((isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0))) * _864)));
    float _4581 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2656 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
    uint _2657 = _824 + 6u;
    float _2665 = _786 / cbSceneParam._m0[86u].x;
    float _2666 = _787 / cbSceneParam._m0[86u].y;
    vec4 _2680 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2665, _2666, (log2((isnan(cbSceneParam._m0[77u].w) ? _720 : (isnan(_720) ? cbSceneParam._m0[77u].w : min(_720, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2682 = _2680.x;
    float _2683 = _2680.y;
    float _2684 = _2680.z;
    float _2685 = _2680.w;
    float _2777;
    float _2779;
    float _2781;
    float _2783;
    if (_720 > cbSceneParam._m0[78u].w)
    {
        float _2740 = isnan(_720) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _720 : min(cbSceneParam._m0[80u].w, _720));
        float _2741 = _2740 / _720;
        float _2752 = _2741 * _771;
        float _2753 = _772 * _2741;
        float _2754 = (-0.0) - _2753;
        float _2755 = _2741 * _773;
        float _2757 = (cbSceneParam._m0[77u].w * _2754) / _2740;
        float _2758 = _2757 + cbSceneParam._m0[79u].w;
        float _2759 = cbSceneParam._m0[79u].w - _2753;
        float _2765 = sqrt(((_2752 * _2752) + (_2753 * _2753)) + (_2755 * _2755));
        float _2768 = (1.0 - (cbSceneParam._m0[77u].w / _2740)) * _2765;
        float _2773 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2775 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2937;
        if (abs((_2754 - _2757) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2937 = ((((_2758 > 0.0) ? exp2(_2773 * _2758) : (2.0 - exp2(_2775 * _2758))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2768;
        }
        else
        {
            float _2897 = 1.0 / cbSceneParam._m0[80u].x;
            float _2898 = isnan(_2759) ? _2758 : (isnan(_2758) ? _2759 : max(_2758, _2759));
            float _2899 = isnan(_2759) ? _2758 : (isnan(_2758) ? _2759 : min(_2758, _2759));
            float _2908 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : min(_2898, 0.0));
            float _2909 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : min(_2899, 0.0));
            _2937 = ((abs(_2765 / _2754) * cbSceneParam._m0[80u].y) * ((((_2908 - _2909) * 2.0) - ((exp2(_2773 * (isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0)))) - exp2(_2773 * (isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0))))) * _2897)) - ((exp2(_2775 * _2908) - exp2(_2775 * _2909)) * _2897))) + (_2768 * cbSceneParam._m0[80u].z);
        }
        vec4 _2939 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2665, _2666, 1.0), 0.0);
        float _2948 = exp2((_2937 * (-1.44269502162933349609375)) * (1.0 - _2939.w));
        float _2949 = log2(_2948);
        float _2965 = log2(_2685);
        _2777 = (exp2(_2965 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2949 * cbSceneParam._m0[78u].x)) * _2939.x) / cbSceneParam._m0[78u].x)) + _2682;
        _2779 = (exp2(_2965 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2949 * cbSceneParam._m0[78u].y)) * _2939.y) / cbSceneParam._m0[78u].y)) + _2683;
        _2781 = (exp2(_2965 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2949 * cbSceneParam._m0[78u].z)) * _2939.z) / cbSceneParam._m0[78u].z)) + _2684;
        _2783 = _2948 * _2685;
    }
    else
    {
        _2777 = _2682;
        _2779 = _2683;
        _2781 = _2684;
        _2783 = _2685;
    }
    float _2795 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2796 = _2795 == 3.0;
    float _2797 = log2(_2783);
    float _2801 = exp2(_2797 * cbSceneParam._m0[78u].x);
    float _2802 = exp2(_2797 * cbSceneParam._m0[78u].y);
    float _2803 = exp2(_2797 * cbSceneParam._m0[78u].z);
    float _2804 = _2801 * (isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0)));
    float _2805 = _2802 * (isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0)));
    float _2806 = _2803 * (isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0)));
    float _2815 = (_2795 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2815 * (_2796 ? _2804 : (_2804 + (cbSceneParam._m0[72u].w * _2777)));
    SV_Target.y = _2815 * (_2796 ? _2805 : (_2805 + (cbSceneParam._m0[72u].w * _2779)));
    SV_Target.z = _2815 * (_2796 ? _2806 : (_2806 + (cbSceneParam._m0[72u].w * _2781)));
    SV_Target.w = cbInstanceData._m0[_2657].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2620) * _2656) * _2801) * _2815;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2621) * _2656) * _2802) * _2815;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2622) * _2656) * _2803) * _2815;
    SV_Target_1.w = cbInstanceData._m0[_2657].w;
}


