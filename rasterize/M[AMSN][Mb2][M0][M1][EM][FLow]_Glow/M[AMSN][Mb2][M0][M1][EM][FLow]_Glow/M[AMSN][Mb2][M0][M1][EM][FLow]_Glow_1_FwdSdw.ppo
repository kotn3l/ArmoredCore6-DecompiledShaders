#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1001;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _191 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _192 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _193 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _199 = inversesqrt(dot(vec3(_191, _192, _193), vec3(_191, _192, _193)));
    float _206 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _213 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _235 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _241 = _235.x * cbMtdParam._m0[9u].x;
    float _242 = _235.y * cbMtdParam._m0[9u].y;
    float _243 = _235.z * cbMtdParam._m0[9u].z;
    vec4 _260 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    vec4 _274 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _278 = _274.z;
    float _282 = (_274.x * 2.0) + (-1.0);
    float _284 = (_274.y * 2.0) + (-1.0);
    float _285 = dot(vec2(_282, _284), vec2(_282, _284));
    float _3631 = isnan(0.0) ? _285 : (isnan(_285) ? 0.0 : max(_285, 0.0));
    float _291 = sqrt(1.0 - (isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0))));
    float _304 = (cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _305 = (cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _335 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * ((cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * ((cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[10u].w));
    float _340 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[15u].w;
    float _347 = ((_335.y * 0.5) + (-0.25)) * cbMtdParam._m0[15u].z;
    float _349 = (-0.0) - (cbMtdParam._m0[15u].z * ((_335.x * 0.5) + (-0.25)));
    float _351 = fract(_340);
    float _353 = fract(_340 + 0.5);
    float _354 = _351 * _349;
    float _355 = _347 * _351;
    float _358 = _353 * _349;
    float _359 = _347 * _353;
    float _364 = abs((_351 * 2.0) + (-1.0));
    vec4 _380 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_354 + _304) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_355 + _305) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _382 = _380.x;
    float _383 = _380.y;
    float _384 = _380.z;
    vec4 _385 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_358 + _304) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_359 + _305) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _412 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _413 = (cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _426 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_354 + _412) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_355 + _413) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _428 = _426.x;
    float _429 = _426.y;
    float _430 = _426.z;
    vec4 _431 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_358 + _412) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_359 + _413) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _458 = (TEXCOORD_9.x - ((cbMtdParam._m0[16u].y * (1.0 - TEXCOORD_9.x)) * (_260.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[16u].z + 1.0);
    float _3642 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _459 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
    float _465 = fma(_291, _206 * NORMAL.x, fma(_284, _213 * TANGENT.x, (_199 * _191) * _282));
    float _468 = fma(_291, _206 * NORMAL.y, fma(_284, _213 * TANGENT.y, (_199 * _192) * _282));
    float _471 = fma(_291, _206 * NORMAL.z, fma(_284, _213 * TANGENT.z, (_199 * _193) * _282));
    float _475 = inversesqrt(dot(vec3(_465, _468, _471), vec3(_465, _468, _471)));
    float _476 = _475 * _465;
    float _477 = _475 * _468;
    float _478 = _475 * _471;
    float _3653 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _479 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
    float _3664 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3675 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _3686 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _498 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _539 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _549 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _539);
    float _550 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _539);
    float _551 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _539);
    float _555 = inversesqrt(dot(vec3(_549, _550, _551), vec3(_549, _550, _551)));
    float _556 = _549 * _555;
    float _557 = _550 * _555;
    float _558 = _551 * _555;
    float _564 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _565 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _586 = fma(_478, cbSceneParam._m0[5u].z, fma(_477, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _476));
    float _589 = fma(_478, cbSceneParam._m0[6u].z, fma(_477, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _476));
    float _592 = fma(_478, cbSceneParam._m0[7u].z, fma(_477, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _476));
    uint _605 = uint(roundEven(NORMAL.w)) * 13u;
    uint _606 = _605 + 9u;
    uint _607 = _606 + uint(cbMatDynParam._m0[0u].w);
    float _613 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0)))) * cbInstanceData._m0[_607].x;
    float _614 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0)))) * cbInstanceData._m0[_607].y;
    float _615 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0)))) * cbInstanceData._m0[_607].z;
    float _3697 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _616 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
    float _3708 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _617 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
    float _3719 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _618 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
    vec4 _627 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _564, cbSceneParam._m0[86u].y * _565));
    float _630 = _627.x * TEXCOORD_3.w;
    float _631 = dot(vec3(_476, _477, _478), vec3(_556, _557, _558));
    float _634 = _631 * 2.0;
    float _638 = (_634 * _476) - _556;
    float _639 = (_634 * _477) - _557;
    float _640 = (_634 * _478) - _558;
    float _644 = abs(dot(vec3(_556, _557, _558), vec3(_476, _477, _478)));
    float _3730 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _646 = sqrt(_479);
    float _659 = exp2((_646 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_646 * 3.0));
    float _691 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _695 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _699 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1000;
    float _1002;
    float _1003;
    float _1004;
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _726 = fma(_699, cbModelParam._m0[26u].z, fma(_695, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _691));
        float _730 = fma(_699, cbModelParam._m0[27u].z, fma(_695, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _691));
        float _734 = fma(_699, cbModelParam._m0[28u].z, fma(_695, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _691));
        float _758 = _691 + _476;
        float _759 = _695 + _477;
        float _760 = _699 + _478;
        float _770 = fma(_760, cbModelParam._m0[26u].z, fma(_759, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _758)) - _726;
        float _771 = fma(_760, cbModelParam._m0[27u].z, fma(_759, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _758)) - _730;
        float _772 = fma(_760, cbModelParam._m0[28u].z, fma(_759, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _758)) - _734;
        float _776 = inversesqrt(dot(vec3(_770, _771, _772), vec3(_770, _771, _772)));
        float _789 = ((_776 * _770) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_726 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _790 = ((_776 * _771) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_730 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _791 = ((_776 * _772) / cbModelParam._m0[34u].z) + ((((((_734 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _794 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_789, _790, _791), 0.0);
        vec4 _801 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_789, _790, _791), 0.0);
        vec4 _808 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_789, _790, _791), 0.0);
        vec4 _815 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_789, _790, _791), 0.0);
        float _828 = exp2((_794.w + (-0.5)) * 20.0) * 2.0;
        float _829 = _828 * (_794.x + (-0.5));
        float _830 = _828 * (_794.y + (-0.5));
        float _831 = _828 * (_794.z + (-0.5));
        float _838 = exp2((_801.w + (-0.5)) * 20.0) * 2.0;
        float _839 = _838 * (_801.x + (-0.5));
        float _840 = _838 * (_801.y + (-0.5));
        float _841 = _838 * (_801.z + (-0.5));
        float _848 = exp2((_808.w + (-0.5)) * 20.0) * 2.0;
        float _849 = _848 * (_808.x + (-0.5));
        float _850 = _848 * (_808.y + (-0.5));
        float _851 = _848 * (_808.z + (-0.5));
        float _858 = exp2((_815.w + (-0.5)) * 20.0) * 2.0;
        float _859 = _858 * (_815.x + (-0.5));
        float _860 = _858 * (_815.y + (-0.5));
        float _861 = _858 * (_815.z + (-0.5));
        float _862 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
        float _863 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        float _864 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
        float _865 = _829 * 0.5;
        float _866 = _839 * 0.5;
        float _867 = _849 * 0.5;
        float _868 = dot(vec3(_865, _866, _867), vec3(_865, _866, _867));
        float _873 = (_868 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_868);
        float _882 = (dot(vec3(_476, _477, _478), vec3(_873 * _865, _873 * _866, _873 * _867)) + 1.0) * 0.5;
        float _3756 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _892 = sqrt(((_866 * _866) + (_865 * _865)) + (_867 * _867)) / (_862 + 9.9999997473787516355514526367188e-06);
        float _3767 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _893 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
        float _894 = _893 * 2.0;
        float _898 = (1.0 - _893) / (_893 + 1.0);
        float _3778 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _899 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
        float _908 = ((((1.0 - _899) * (_894 + 2.0)) * exp2(log2(isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0))) * (_894 + 1.0))) + _899) * _862;
        float _909 = _830 * 0.5;
        float _910 = _840 * 0.5;
        float _911 = _850 * 0.5;
        float _912 = dot(vec3(_909, _910, _911), vec3(_909, _910, _911));
        float _917 = (_912 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_912);
        float _925 = (dot(vec3(_476, _477, _478), vec3(_917 * _909, _917 * _910, _917 * _911)) + 1.0) * 0.5;
        float _3789 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _934 = sqrt(((_910 * _910) + (_909 * _909)) + (_911 * _911)) / (_863 + 9.9999997473787516355514526367188e-06);
        float _3800 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _935 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
        float _936 = _935 * 2.0;
        float _940 = (1.0 - _935) / (_935 + 1.0);
        float _3811 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _941 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
        float _950 = ((((1.0 - _941) * (_936 + 2.0)) * exp2(log2(isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0))) * (_936 + 1.0))) + _941) * _863;
        float _951 = _831 * 0.5;
        float _952 = _841 * 0.5;
        float _953 = _851 * 0.5;
        float _954 = dot(vec3(_951, _952, _953), vec3(_951, _952, _953));
        float _959 = (_954 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_954);
        float _967 = (dot(vec3(_476, _477, _478), vec3(_959 * _951, _959 * _952, _959 * _953)) + 1.0) * 0.5;
        float _3822 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _976 = sqrt(((_952 * _952) + (_951 * _951)) + (_953 * _953)) / (_864 + 9.9999997473787516355514526367188e-06);
        float _3833 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _977 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
        float _978 = _977 * 2.0;
        float _982 = (1.0 - _977) / (_977 + 1.0);
        float _3844 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _983 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
        float _992 = ((((1.0 - _983) * (_978 + 2.0)) * exp2(log2(isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0))) * (_978 + 1.0))) + _983) * _864;
        _1000 = _831;
        _1002 = _830;
        _1003 = _829;
        _1004 = _841;
        _1005 = _840;
        _1006 = _839;
        _1007 = _851;
        _1008 = _850;
        _1009 = _849;
        _1010 = _864;
        _1011 = _863;
        _1012 = _862;
        _1013 = cbModelParam._m0[36u].z * (isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0)));
        _1014 = cbModelParam._m0[36u].z * (isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0)));
        _1015 = cbModelParam._m0[36u].z * (isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0)));
    }
    else
    {
        _1000 = _1001;
        _1002 = _1001;
        _1003 = _1001;
        _1004 = _1001;
        _1005 = _1001;
        _1006 = _1001;
        _1007 = _1001;
        _1008 = _1001;
        _1009 = _1001;
        _1010 = _1001;
        _1011 = _1001;
        _1012 = _1001;
        _1013 = 0.0;
        _1014 = 0.0;
        _1015 = 0.0;
    }
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1041 = fma(_699, cbModelParam._m0[30u].z, fma(_695, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _691));
        float _1045 = fma(_699, cbModelParam._m0[31u].z, fma(_695, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _691));
        float _1049 = fma(_699, cbModelParam._m0[32u].z, fma(_695, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _691));
        float _1072 = _691 + _476;
        float _1073 = _695 + _477;
        float _1074 = _699 + _478;
        float _1084 = fma(_1074, cbModelParam._m0[30u].z, fma(_1073, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1072)) - _1041;
        float _1085 = fma(_1074, cbModelParam._m0[31u].z, fma(_1073, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1072)) - _1045;
        float _1086 = fma(_1074, cbModelParam._m0[32u].z, fma(_1073, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1072)) - _1049;
        float _1090 = inversesqrt(dot(vec3(_1084, _1085, _1086), vec3(_1084, _1085, _1086)));
        float _1103 = ((_1090 * _1084) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1041 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1104 = ((_1090 * _1085) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1045 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1105 = ((_1090 * _1086) / cbModelParam._m0[35u].z) + ((((((_1049 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1107 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1103, _1104, _1105), 0.0);
        vec4 _1114 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1103, _1104, _1105), 0.0);
        vec4 _1121 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1103, _1104, _1105), 0.0);
        vec4 _1128 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1103, _1104, _1105), 0.0);
        float _1140 = exp2((_1107.w + (-0.5)) * 20.0) * 2.0;
        float _1141 = _1140 * (_1107.x + (-0.5));
        float _1142 = _1140 * (_1107.y + (-0.5));
        float _1143 = _1140 * (_1107.z + (-0.5));
        float _1150 = exp2((_1114.w + (-0.5)) * 20.0) * 2.0;
        float _1151 = _1150 * (_1114.x + (-0.5));
        float _1152 = _1150 * (_1114.y + (-0.5));
        float _1153 = _1150 * (_1114.z + (-0.5));
        float _1160 = exp2((_1121.w + (-0.5)) * 20.0) * 2.0;
        float _1161 = _1160 * (_1121.x + (-0.5));
        float _1162 = _1160 * (_1121.y + (-0.5));
        float _1163 = _1160 * (_1121.z + (-0.5));
        float _1170 = exp2((_1128.w + (-0.5)) * 20.0) * 2.0;
        float _1171 = _1170 * (_1128.x + (-0.5));
        float _1172 = _1170 * (_1128.y + (-0.5));
        float _1173 = _1170 * (_1128.z + (-0.5));
        float _1174 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1175 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1176 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1177 = _1141 * 0.5;
        float _1178 = _1151 * 0.5;
        float _1179 = _1161 * 0.5;
        float _1180 = dot(vec3(_1177, _1178, _1179), vec3(_1177, _1178, _1179));
        float _1185 = (_1180 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1180);
        float _1193 = (dot(vec3(_476, _477, _478), vec3(_1185 * _1177, _1185 * _1178, _1185 * _1179)) + 1.0) * 0.5;
        float _3885 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1202 = sqrt(((_1178 * _1178) + (_1177 * _1177)) + (_1179 * _1179)) / (_1174 + 9.9999997473787516355514526367188e-06);
        float _3896 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
        float _1204 = _1203 * 2.0;
        float _1208 = (1.0 - _1203) / (_1203 + 1.0);
        float _3907 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1209 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _1218 = ((((1.0 - _1209) * (_1204 + 2.0)) * exp2(log2(isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) * (_1204 + 1.0))) + _1209) * _1174;
        float _1219 = _1142 * 0.5;
        float _1220 = _1152 * 0.5;
        float _1221 = _1162 * 0.5;
        float _1222 = dot(vec3(_1219, _1220, _1221), vec3(_1219, _1220, _1221));
        float _1227 = (_1222 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1222);
        float _1235 = (dot(vec3(_476, _477, _478), vec3(_1227 * _1219, _1227 * _1220, _1227 * _1221)) + 1.0) * 0.5;
        float _3918 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1244 = sqrt(((_1220 * _1220) + (_1219 * _1219)) + (_1221 * _1221)) / (_1175 + 9.9999997473787516355514526367188e-06);
        float _3929 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
        float _1246 = _1245 * 2.0;
        float _1250 = (1.0 - _1245) / (_1245 + 1.0);
        float _3940 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
        float _1260 = ((((1.0 - _1251) * (_1246 + 2.0)) * exp2(log2(isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0))) * (_1246 + 1.0))) + _1251) * _1175;
        float _1261 = _1143 * 0.5;
        float _1262 = _1153 * 0.5;
        float _1263 = _1163 * 0.5;
        float _1264 = dot(vec3(_1261, _1262, _1263), vec3(_1261, _1262, _1263));
        float _1269 = (_1264 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1264);
        float _1277 = (dot(vec3(_476, _477, _478), vec3(_1269 * _1261, _1269 * _1262, _1269 * _1263)) + 1.0) * 0.5;
        float _3951 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1286 = sqrt(((_1262 * _1262) + (_1261 * _1261)) + (_1263 * _1263)) / (_1176 + 9.9999997473787516355514526367188e-06);
        float _3962 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
        float _1288 = _1287 * 2.0;
        float _1292 = (1.0 - _1287) / (_1287 + 1.0);
        float _3973 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _1302 = ((((1.0 - _1293) * (_1288 + 2.0)) * exp2(log2(isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0))) * (_1288 + 1.0))) + _1293) * _1176;
        _1310 = _1143;
        _1311 = _1142;
        _1312 = _1141;
        _1313 = _1153;
        _1314 = _1152;
        _1315 = _1151;
        _1316 = _1163;
        _1317 = _1162;
        _1318 = _1161;
        _1319 = _1176;
        _1320 = _1175;
        _1321 = _1174;
        _1322 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0)));
        _1323 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0)));
        _1324 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0)));
    }
    else
    {
        _1310 = _1001;
        _1311 = _1001;
        _1312 = _1001;
        _1313 = _1001;
        _1314 = _1001;
        _1315 = _1001;
        _1316 = _1001;
        _1317 = _1001;
        _1318 = _1001;
        _1319 = _1001;
        _1320 = _1001;
        _1321 = _1001;
        _1322 = 0.0;
        _1323 = 0.0;
        _1324 = 0.0;
    }
    float _1334 = (cbModelParam._m0[1u].x * (_1322 - _1013)) + _1013;
    float _1335 = (cbModelParam._m0[1u].x * (_1323 - _1014)) + _1014;
    float _1336 = (cbModelParam._m0[1u].x * (_1324 - _1015)) + _1015;
    float _1357 = fma(_1336, cbSceneParam._m0[89u].z, fma(_1335, cbSceneParam._m0[89u].y, _1334 * cbSceneParam._m0[89u].x));
    float _1360 = fma(_1336, cbSceneParam._m0[90u].z, fma(_1335, cbSceneParam._m0[90u].y, _1334 * cbSceneParam._m0[90u].x));
    float _1363 = fma(_1336, cbSceneParam._m0[91u].z, fma(_1335, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1334));
    float _1378 = _638 * 0.5;
    float _1379 = _639 * 0.5;
    float _1380 = _640 * 0.5;
    float _1381 = dot(vec4(_1378, _1379, _1380, 1.0), vec4(_1312, _1315, _1318, _1321));
    float _1384 = dot(vec4(_1378, _1379, _1380, 1.0), vec4(_1311, _1314, _1317, _1320));
    float _1387 = dot(vec4(_1378, _1379, _1380, 1.0), vec4(_1310, _1313, _1316, _1319));
    float _1421;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1394 = dot(vec4(_1378, _1379, _1380, 1.0), vec4(_1000, _1004, _1007, _1010));
        float _1398 = dot(vec4(_1378, _1379, _1380, 1.0), vec4(_1002, _1005, _1008, _1011));
        float _1402 = dot(vec4(_1378, _1379, _1380, 1.0), vec4(_1003, _1006, _1009, _1012));
        float _1409 = dot(vec4(cbModelParam._m0[39u]), vec4(_1378, _1379, _1380, 1.0));
        _1421 = dot(vec3(isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0)), isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0)), isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1409) ? 0.0 : (isnan(0.0) ? _1409 : max(0.0, _1409))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1421 = 1.0;
    }
    float _1432;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1423 = dot(vec4(cbModelParam._m0[40u]), vec4(_1378, _1379, _1380, 1.0));
        _1432 = dot(vec3(isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0)), isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0)), isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1423) ? 0.0 : (isnan(0.0) ? _1423 : max(0.0, _1423))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1432 = 1.0;
    }
    float _1436 = (_1432 * cbModelParam._m0[1u].x) + (_1421 * (1.0 - cbModelParam._m0[1u].x));
    float _1446 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _479);
    float _1447 = isnan(_1446) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1446 : min(cbModelParam._m0[25u].z, _1446));
    float _1528;
    float _1530;
    float _1532;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1495 = fma(_699, cbModelParam._m0[13u].z, fma(_695, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _691)) + cbModelParam._m0[13u].w;
        float _1499 = fma(_699, cbModelParam._m0[14u].z, fma(_695, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _691)) + cbModelParam._m0[14u].w;
        float _1503 = fma(_699, cbModelParam._m0[15u].z, fma(_695, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _691)) + cbModelParam._m0[15u].w;
        float _1506 = fma(_640, cbModelParam._m0[13u].z, fma(_639, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _638));
        float _1509 = fma(_640, cbModelParam._m0[14u].z, fma(_639, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _638));
        float _1512 = fma(_640, cbModelParam._m0[15u].z, fma(_639, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _638));
        float _1540;
        if (_1506 > 0.0)
        {
            _1540 = abs((1.0 - _1495) / _1506);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1506 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1495 + 1.0) / _1506);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1540 = frontier_phi_14_12_ladder;
        }
        float _1711;
        if (_1509 > 0.0)
        {
            _1711 = abs((1.0 - _1499) / _1509);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1509 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1499 + 1.0) / _1509);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1711 = frontier_phi_23_19_ladder;
        }
        float _2007;
        if (_1512 > 0.0)
        {
            _2007 = abs((1.0 - _1503) / _1512);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1512 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1503 + 1.0) / _1512);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2007 = frontier_phi_35_30_ladder;
        }
        float _2009 = isnan(_1711) ? _1540 : (isnan(_1540) ? _1711 : min(_1540, _1711));
        float _2010 = isnan(_2007) ? _2009 : (isnan(_2009) ? _2007 : min(_2009, _2007));
        float _2014 = (_2010 * _1506) + _1495;
        float _2015 = (_2010 * _1509) + _1499;
        float _2016 = (_2010 * _1512) + _1503;
        float _2017 = _2010 * 9.9999997473787516355514526367188e-05;
        float _2019 = (-1.0) - _2017;
        float _2021 = _2017 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2016 > _2021) || ((_2016 < _2019) || ((_2015 > _2021) || ((_2015 < _2019) || ((_2014 < _2019) || (_2014 > _2021))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2161 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2016, cbModelParam._m0[9u].z, fma(_2015, cbModelParam._m0[9u].y, _2014 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2016, cbModelParam._m0[10u].z, fma(_2015, cbModelParam._m0[10u].y, _2014 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2016, cbModelParam._m0[11u].z, fma(_2015, cbModelParam._m0[11u].y, _2014 * cbModelParam._m0[11u].x))), _1447);
            frontier_phi_13_35_ladder = _2161.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2161.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2161.x * cbModelParam._m0[1u].y;
        }
        _1528 = frontier_phi_13_35_ladder_2;
        _1530 = frontier_phi_13_35_ladder_1;
        _1532 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1516 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_638, _639, _640), _1447);
        _1528 = _1516.x * cbModelParam._m0[1u].y;
        _1530 = _1516.y * cbModelParam._m0[1u].y;
        _1532 = _1516.z * cbModelParam._m0[1u].y;
    }
    float _1536 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _479);
    float _1537 = isnan(_1536) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1536 : min(cbModelParam._m0[25u].w, _1536));
    float _1627;
    float _1629;
    float _1631;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1591 = fma(_699, cbModelParam._m0[21u].z, fma(_695, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _691)) + cbModelParam._m0[21u].w;
        float _1595 = fma(_699, cbModelParam._m0[22u].z, fma(_695, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _691)) + cbModelParam._m0[22u].w;
        float _1599 = fma(_699, cbModelParam._m0[23u].z, fma(_695, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _691)) + cbModelParam._m0[23u].w;
        float _1602 = fma(_640, cbModelParam._m0[21u].z, fma(_639, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _638));
        float _1605 = fma(_640, cbModelParam._m0[22u].z, fma(_639, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _638));
        float _1608 = fma(_640, cbModelParam._m0[23u].z, fma(_639, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _638));
        float _1716;
        if (_1602 > 0.0)
        {
            _1716 = abs((1.0 - _1591) / _1602);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1602 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1591 + 1.0) / _1602);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1716 = frontier_phi_25_21_ladder;
        }
        float _2034;
        if (_1605 > 0.0)
        {
            _2034 = abs((1.0 - _1595) / _1605);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1605 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1595 + 1.0) / _1605);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2034 = frontier_phi_37_32_ladder;
        }
        float _2361;
        if (_1608 > 0.0)
        {
            _2361 = abs((1.0 - _1599) / _1608);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1608 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1599 + 1.0) / _1608);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2361 = frontier_phi_47_44_ladder;
        }
        float _2363 = isnan(_2034) ? _1716 : (isnan(_1716) ? _2034 : min(_1716, _2034));
        float _2364 = isnan(_2361) ? _2363 : (isnan(_2363) ? _2361 : min(_2363, _2361));
        float _2368 = (_2364 * _1602) + _1591;
        float _2369 = (_2364 * _1605) + _1595;
        float _2370 = (_2364 * _1608) + _1599;
        float _2371 = _2364 * 9.9999997473787516355514526367188e-05;
        float _2372 = (-1.0) - _2371;
        float _2374 = _2371 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2370 > _2374) || ((_2370 < _2372) || ((_2369 > _2374) || ((_2369 < _2372) || ((_2368 < _2372) || (_2368 > _2374))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2488 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2370, cbModelParam._m0[17u].z, fma(_2369, cbModelParam._m0[17u].y, _2368 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2370, cbModelParam._m0[18u].z, fma(_2369, cbModelParam._m0[18u].y, _2368 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2370, cbModelParam._m0[19u].z, fma(_2369, cbModelParam._m0[19u].y, _2368 * cbModelParam._m0[19u].x))), _1537);
            frontier_phi_22_47_ladder = _2488.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2488.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2488.x * cbModelParam._m0[1u].z;
        }
        _1627 = frontier_phi_22_47_ladder_2;
        _1629 = frontier_phi_22_47_ladder_1;
        _1631 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1611 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_638, _639, _640), _1537);
        _1627 = _1611.x * cbModelParam._m0[1u].z;
        _1629 = _1611.y * cbModelParam._m0[1u].z;
        _1631 = _1611.z * cbModelParam._m0[1u].z;
    }
    float _1643 = ((((1.0 - _659) * ((_646 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_659 * _646)) * _630;
    float _1644 = _1643 * ((cbModelParam._m0[1u].w * (_1627 - _1528)) + _1528);
    float _1645 = _1643 * ((cbModelParam._m0[1u].w * (_1629 - _1530)) + _1530);
    float _1646 = _1643 * ((cbModelParam._m0[1u].w * (_1631 - _1532)) + _1532);
    float _1649 = fma(_1646, cbSceneParam._m0[89u].z, fma(_1645, cbSceneParam._m0[89u].y, _1644 * cbSceneParam._m0[89u].x));
    float _1652 = fma(_1646, cbSceneParam._m0[90u].z, fma(_1645, cbSceneParam._m0[90u].y, _1644 * cbSceneParam._m0[90u].x));
    float _1655 = fma(_1646, cbSceneParam._m0[91u].z, fma(_1645, cbSceneParam._m0[91u].y, _1644 * cbSceneParam._m0[91u].x));
    float _1690 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1694 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1698 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1702 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1703 = _1690 / _1702;
    float _1704 = _1694 / _1702;
    float _1705 = _1698 / _1702;
    float _1852;
    float _1853;
    float _1854;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1732 = ((uint(_1705 > cbSceneParam._m0[59u].y) + uint(_1705 > cbSceneParam._m0[59u].x)) + uint(_1705 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1733 = _1732 + 43u;
        uint _1741 = _1732 + 44u;
        uint _1749 = _1732 + 45u;
        uint _1757 = _1732 + 46u;
        float _1768 = fma(_1702, cbSceneParam._m0[_1733].w, fma(_1698, cbSceneParam._m0[_1733].z, fma(_1694, cbSceneParam._m0[_1733].y, _1690 * cbSceneParam._m0[_1733].x)));
        float _1772 = fma(_1702, cbSceneParam._m0[_1741].w, fma(_1698, cbSceneParam._m0[_1741].z, fma(_1694, cbSceneParam._m0[_1741].y, _1690 * cbSceneParam._m0[_1741].x)));
        float _1780 = fma(_1702, cbSceneParam._m0[_1757].w, fma(_1698, cbSceneParam._m0[_1757].z, fma(_1694, cbSceneParam._m0[_1757].y, _1690 * cbSceneParam._m0[_1757].x)));
        float _1785 = cbSceneParam._m0[33u].z * _1780;
        float _1787 = cbSceneParam._m0[33u].w * _1780;
        float _1790 = fma(_1702, cbSceneParam._m0[_1749].w, fma(_1698, cbSceneParam._m0[_1749].z, fma(_1694, cbSceneParam._m0[_1749].y, _1690 * cbSceneParam._m0[_1749].x))) / _1780;
        float _1838 = (cbSceneParam._m0[33u].x - sqrt(((_1704 * _1704) + (_1703 * _1703)) + (_1705 * _1705))) * cbSceneParam._m0[33u].y;
        float _4099 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
        float _1845 = (isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1785 + _1768) / _1780, (_1787 + _1772) / _1780), _1790), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1787 + _1768) / _1780, (_1772 - _1785) / _1780), _1790), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1768 - _1785) / _1780, (_1772 - _1787) / _1780), _1790), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1768 - _1787) / _1780, (_1785 + _1772) / _1780), _1790), 0.0)).x), vec4(0.25)));
        _1852 = 1.0 - (_1845 * cbSceneParam._m0[34u].x);
        _1853 = 1.0 - (_1845 * cbSceneParam._m0[34u].y);
        _1854 = 1.0 - (_1845 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1852 = 1.0;
        _1853 = 1.0;
        _1854 = 1.0;
    }
    float _1918;
    float _1920;
    float _1922;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1906 = fma(_1702, cbSceneParam._m0[63u].w, fma(_1698, cbSceneParam._m0[63u].z, fma(_1694, cbSceneParam._m0[63u].y, _1690 * cbSceneParam._m0[63u].x)));
        float _1907 = fma(_1702, cbSceneParam._m0[60u].w, fma(_1698, cbSceneParam._m0[60u].z, fma(_1694, cbSceneParam._m0[60u].y, _1690 * cbSceneParam._m0[60u].x))) / _1906;
        float _1908 = fma(_1702, cbSceneParam._m0[61u].w, fma(_1698, cbSceneParam._m0[61u].z, fma(_1694, cbSceneParam._m0[61u].y, _1690 * cbSceneParam._m0[61u].x))) / _1906;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1907 >= cbSceneParam._m0[64u].x) && (_1908 >= cbSceneParam._m0[64u].y)) && (_1907 <= cbSceneParam._m0[64u].z)) && (_1908 <= cbSceneParam._m0[64u].w))
        {
            float _2047 = fma(_1702, cbSceneParam._m0[62u].w, fma(_1698, cbSceneParam._m0[62u].z, fma(_1694, cbSceneParam._m0[62u].y, _1690 * cbSceneParam._m0[62u].x))) / _1906;
            float _2051 = isnan(cbSceneParam._m0[41u].w) ? _2047 : (isnan(_2047) ? cbSceneParam._m0[41u].w : max(_2047, cbSceneParam._m0[41u].w));
            float _2094 = (cbSceneParam._m0[33u].x - sqrt(((_1704 * _1704) + (_1703 * _1703)) + (_1705 * _1705))) * cbSceneParam._m0[33u].y;
            float _4115 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
            float _2101 = (isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1907, cbSceneParam._m0[33u].w + _1908), _2051), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1907, _1908 - cbSceneParam._m0[33u].z), _2051), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1907 - cbSceneParam._m0[33u].z, _1908 - cbSceneParam._m0[33u].w), _2051), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1907 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1908), _2051), 0.0)).x), vec4(0.25)));
            float _2105 = 1.0 - (_2101 * cbSceneParam._m0[34u].x);
            float _2106 = 1.0 - (_2101 * cbSceneParam._m0[34u].y);
            float _2107 = 1.0 - (_2101 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2107) ? _1854 : (isnan(_1854) ? _2107 : min(_1854, _2107));
            frontier_phi_34_33_ladder_1 = isnan(_2106) ? _1853 : (isnan(_1853) ? _2106 : min(_1853, _2106));
            frontier_phi_34_33_ladder_2 = isnan(_2105) ? _1852 : (isnan(_1852) ? _2105 : min(_1852, _2105));
        }
        else
        {
            frontier_phi_34_33_ladder = _1854;
            frontier_phi_34_33_ladder_1 = _1853;
            frontier_phi_34_33_ladder_2 = _1852;
        }
        _1918 = frontier_phi_34_33_ladder_2;
        _1920 = frontier_phi_34_33_ladder_1;
        _1922 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1918 = _1852;
        _1920 = _1853;
        _1922 = _1854;
    }
    uvec4 _1927 = floatBitsToUint(cbInstanceData._m0[_605 + 5u]);
    uint _1929 = _1927.x * 14u;
    uint _1930 = _1929 + 13u;
    float _1937 = _630 + (-1.0);
    float _1942 = (cbLight._m0[_1930].x * _1937) + 1.0;
    float _1943 = (cbLight._m0[_1930].y * _1937) + 1.0;
    float _1944 = (cbLight._m0[_1930].z * _1937) + 1.0;
    float _1945 = (cbLight._m0[_1930].w * _1937) + 1.0;
    uint _1946 = _1929 + 5u;
    float _1952 = isnan(1.0) ? _1943 : (isnan(_1943) ? 1.0 : min(_1943, 1.0));
    uint _1956 = _1929 + 4u;
    float _1966 = isnan(1.0) ? _1942 : (isnan(_1942) ? 1.0 : min(_1942, 1.0));
    uint _1970 = _1929 | 1u;
    float _1981 = dot(vec3(cbLight._m0[_1929].xyz), vec3(_476, _477, _478));
    float _1984 = dot(vec3(cbLight._m0[_1970].xyz), vec3(_476, _477, _478));
    float _4151 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
    float _4162 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
    float _1989 = (isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * 0.3183098733425140380859375;
    float _1991 = (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * 0.3183098733425140380859375;
    float _1998 = ((cbLight._m0[_1946].x * _1952) * _1991) + (((cbLight._m0[_1956].x * _1918) * _1966) * _1989);
    float _1999 = ((_1952 * cbLight._m0[_1946].y) * _1991) + (((cbLight._m0[_1956].y * _1920) * _1966) * _1989);
    float _2000 = ((_1952 * cbLight._m0[_1946].z) * _1991) + (((cbLight._m0[_1956].z * _1922) * _1966) * _1989);
    uvec4 _2004 = floatBitsToUint(cbLight._m0[_1929 + 12u]);
    bool _2006 = _2004.x == 0u;
    float _2108;
    float _2110;
    float _2112;
    if (_2006)
    {
        _2108 = _1998;
        _2110 = _1999;
        _2112 = _2000;
    }
    else
    {
        uint _2116 = _1929 + 6u;
        float _2132 = (dot(vec3(cbLight._m0[_1929 + 2u].xyz), vec3(_476, _477, _478)) * 0.5) + 0.5;
        float _2133 = _2132 * _2132;
        float _4173 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
        float _2134 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _2135 = isnan(1.0) ? _1944 : (isnan(_1944) ? 1.0 : min(_1944, 1.0));
        _2108 = (((cbLight._m0[_2116].x * 0.3183098733425140380859375) * _2134) * _2135) + _1998;
        _2110 = (((cbLight._m0[_2116].y * 0.3183098733425140380859375) * _2134) * _2135) + _1999;
        _2112 = (((cbLight._m0[_2116].z * 0.3183098733425140380859375) * _2134) * _2135) + _2000;
    }
    bool _2115 = _2004.y == 0u;
    float _2170;
    float _2172;
    float _2174;
    if (_2115)
    {
        _2170 = _2108;
        _2172 = _2110;
        _2174 = _2112;
    }
    else
    {
        uint _2332 = _1929 + 7u;
        float _2348 = (dot(vec3(cbLight._m0[_1929 + 3u].xyz), vec3(_476, _477, _478)) * 0.5) + 0.5;
        float _2349 = _2348 * _2348;
        float _4189 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
        float _2350 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _2351 = isnan(1.0) ? _1945 : (isnan(_1945) ? 1.0 : min(_1945, 1.0));
        _2170 = (((cbLight._m0[_2332].x * 0.3183098733425140380859375) * _2350) * _2351) + _2108;
        _2172 = (((cbLight._m0[_2332].y * 0.3183098733425140380859375) * _2350) * _2351) + _2110;
        _2174 = (((cbLight._m0[_2332].z * 0.3183098733425140380859375) * _2350) * _2351) + _2112;
    }
    uint _2177 = _1929 + 8u;
    float _2190 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1929].w)) * _479) * 0.949999988079071044921875);
    float _2191 = _2190 * _2190;
    float _2192 = cbLight._m0[_1929].x + _556;
    float _2193 = cbLight._m0[_1929].y + _557;
    float _2194 = cbLight._m0[_1929].z + _558;
    float _2198 = inversesqrt(dot(vec3(_2192, _2193, _2194), vec3(_2192, _2193, _2194)));
    float _2199 = _2198 * _2192;
    float _2200 = _2198 * _2193;
    float _2201 = _2198 * _2194;
    float _2202 = dot(vec3(_476, _477, _478), vec3(cbLight._m0[_1929].xyz));
    float _4205 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
    float _2205 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
    float _4216 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _2206 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
    float _2207 = dot(vec3(_476, _477, _478), vec3(_2199, _2200, _2201));
    float _4227 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
    float _2210 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
    float _2211 = dot(vec3(cbLight._m0[_1929].xyz), vec3(_2199, _2200, _2201));
    float _4238 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
    float _2215 = _2191 * _2191;
    float _2219 = ((_2210 * _2210) * (_2215 + (-1.0))) + 1.0;
    float _2230 = (exp2(log2(1.0 - (isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2231 = 1.0 - _2191;
    float _2242 = (0.5 / (((_2206 * ((_2205 * _2231) + _2191)) + 9.9999999392252902907785028219223e-09) + (((_2206 * _2231) + _2191) * _2205))) * _2205;
    float _4249 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
    float _2244 = (isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0))) * (_2215 / ((_2219 * _2219) * 3.141590118408203125));
    uint _2258 = _1929 + 9u;
    float _2269 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1970].w)) * _479) * 0.949999988079071044921875);
    float _2270 = _2269 * _2269;
    float _2271 = cbLight._m0[_1970].x + _556;
    float _2272 = cbLight._m0[_1970].y + _557;
    float _2273 = cbLight._m0[_1970].z + _558;
    float _2277 = inversesqrt(dot(vec3(_2271, _2272, _2273), vec3(_2271, _2272, _2273)));
    float _2278 = _2277 * _2271;
    float _2279 = _2277 * _2272;
    float _2280 = _2277 * _2273;
    float _2281 = dot(vec3(_476, _477, _478), vec3(cbLight._m0[_1970].xyz));
    float _4260 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
    float _2284 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
    float _2285 = dot(vec3(_476, _477, _478), vec3(_2278, _2279, _2280));
    float _4271 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
    float _2288 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
    float _2289 = dot(vec3(cbLight._m0[_1970].xyz), vec3(_2278, _2279, _2280));
    float _4282 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
    float _2293 = _2270 * _2270;
    float _2297 = ((_2288 * _2288) * (_2293 + (-1.0))) + 1.0;
    float _2306 = (exp2(log2(1.0 - (isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2307 = 1.0 - _2270;
    float _2317 = (0.5 / (((_2206 * ((_2284 * _2307) + _2270)) + 9.9999999392252902907785028219223e-09) + (((_2206 * _2307) + _2270) * _2284))) * _2284;
    float _4293 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
    float _2319 = (isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) * (_2293 / ((_2297 * _2297) * 3.141590118408203125));
    float _2329 = (((_2306 * cbLight._m0[_2258].x) * _2319) * _1952) + ((((cbLight._m0[_2177].x * _1918) * _2230) * _2244) * _1966);
    float _2330 = (((_2306 * cbLight._m0[_2258].y) * _2319) * _1952) + ((((cbLight._m0[_2177].y * _1920) * _2230) * _2244) * _1966);
    float _2331 = (((_2306 * cbLight._m0[_2258].z) * _2319) * _1952) + ((((cbLight._m0[_2177].z * _1922) * _2230) * _2244) * _1966);
    float _2387;
    float _2389;
    float _2391;
    if (_2006)
    {
        _2387 = _2329;
        _2389 = _2330;
        _2391 = _2331;
    }
    else
    {
        uint _2393 = _1929 + 2u;
        uint _2397 = _1929 + 10u;
        float _2411 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2393].w)) * _479) * 0.949999988079071044921875);
        float _2412 = _2411 * _2411;
        float _2413 = cbLight._m0[_2393].x + _556;
        float _2414 = cbLight._m0[_2393].y + _557;
        float _2415 = cbLight._m0[_2393].z + _558;
        float _2419 = inversesqrt(dot(vec3(_2413, _2414, _2415), vec3(_2413, _2414, _2415)));
        float _2420 = _2419 * _2413;
        float _2421 = _2419 * _2414;
        float _2422 = _2419 * _2415;
        float _2423 = dot(vec3(_476, _477, _478), vec3(cbLight._m0[_2393].xyz));
        float _4304 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
        float _2426 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _2427 = dot(vec3(_476, _477, _478), vec3(_2420, _2421, _2422));
        float _4315 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
        float _2430 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
        float _2431 = dot(vec3(cbLight._m0[_2393].xyz), vec3(_2420, _2421, _2422));
        float _4326 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
        float _2435 = _2412 * _2412;
        float _2439 = ((_2430 * _2430) * (_2435 + (-1.0))) + 1.0;
        float _2448 = (exp2(log2(1.0 - (isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2449 = 1.0 - _2412;
        float _2459 = (0.5 / (((_2206 * ((_2426 * _2449) + _2412)) + 9.9999999392252902907785028219223e-09) + (((_2206 * _2449) + _2412) * _2426))) * _2426;
        float _4337 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
        float _2461 = (isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0))) * (_2435 / ((_2439 * _2439) * 3.141590118408203125));
        float _2462 = isnan(1.0) ? _1944 : (isnan(_1944) ? 1.0 : min(_1944, 1.0));
        _2387 = (((_2448 * cbLight._m0[_2397].x) * _2461) * _2462) + _2329;
        _2389 = (((_2448 * cbLight._m0[_2397].y) * _2461) * _2462) + _2330;
        _2391 = (((_2448 * cbLight._m0[_2397].z) * _2461) * _2462) + _2331;
    }
    float _2493;
    float _2495;
    float _2497;
    if (_2115)
    {
        _2493 = _2387;
        _2495 = _2389;
        _2497 = _2391;
    }
    else
    {
        uint _2504 = _1929 + 3u;
        uint _2508 = _1929 + 11u;
        float _2522 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2504].w)) * _479) * 0.949999988079071044921875);
        float _2523 = _2522 * _2522;
        float _2524 = cbLight._m0[_2504].x + _556;
        float _2525 = cbLight._m0[_2504].y + _557;
        float _2526 = cbLight._m0[_2504].z + _558;
        float _2530 = inversesqrt(dot(vec3(_2524, _2525, _2526), vec3(_2524, _2525, _2526)));
        float _2531 = _2530 * _2524;
        float _2532 = _2530 * _2525;
        float _2533 = _2530 * _2526;
        float _2534 = dot(vec3(_476, _477, _478), vec3(cbLight._m0[_2504].xyz));
        float _4353 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
        float _2537 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
        float _2538 = dot(vec3(_476, _477, _478), vec3(_2531, _2532, _2533));
        float _4364 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
        float _2541 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
        float _2542 = dot(vec3(cbLight._m0[_2504].xyz), vec3(_2531, _2532, _2533));
        float _4375 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
        float _2546 = _2523 * _2523;
        float _2550 = ((_2541 * _2541) * (_2546 + (-1.0))) + 1.0;
        float _2559 = (exp2(log2(1.0 - (isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2560 = 1.0 - _2523;
        float _2570 = (0.5 / (((_2206 * ((_2537 * _2560) + _2523)) + 9.9999999392252902907785028219223e-09) + (((_2206 * _2560) + _2523) * _2537))) * _2537;
        float _4386 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
        float _2572 = (isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0))) * (_2546 / ((_2550 * _2550) * 3.141590118408203125));
        float _2573 = isnan(1.0) ? _1945 : (isnan(_1945) ? 1.0 : min(_1945, 1.0));
        _2493 = (((_2559 * cbLight._m0[_2508].x) * _2572) * _2573) + _2387;
        _2495 = (((_2559 * cbLight._m0[_2508].y) * _2572) * _2573) + _2389;
        _2497 = (((_2559 * cbLight._m0[_2508].z) * _2572) * _2573) + _2391;
    }
    float _2639;
    float _2641;
    float _2643;
    float _2645;
    float _2647;
    float _2649;
    if (_1927.y == 0u)
    {
        uvec4 _2594 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2595 = _2594.x;
        uint _2606 = uint((float(_2594.y) * floor(float(uint(cbSceneParam._m0[85u].y * _565) / _2595))) + floor(float(uint(cbSceneParam._m0[85u].x * _564) / _2595)));
        float _2616 = (log2(_1705 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2617 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
        uint _2620 = uint(isnan(14.0) ? _2617 : (isnan(_2617) ? 14.0 : min(_2617, 14.0)));
        uvec4 _2625 = texelFetch(g_lightClusterGridBuffer, int(((_2620 << 2u) + (_2606 << 6u)) >> 2u));
        uint _2626 = _2625.x;
        uint _2627 = _2594.z;
        float _2735;
        float _2737;
        float _2739;
        float _2741;
        float _2743;
        float _2745;
        if (((((1u << ((_2627 >> 4u) & 15u)) + 4294967295u) & _2626) == 0u) || ((_2627 & 240u) == 0u))
        {
            _2735 = 0.0;
            _2737 = 0.0;
            _2739 = 0.0;
            _2741 = 0.0;
            _2743 = 0.0;
            _2745 = 0.0;
        }
        else
        {
            float _2736;
            float _2738;
            float _2740;
            float _2742;
            float _2744;
            float _2746;
            float _2888 = 0.0;
            float _2889 = 0.0;
            float _2890 = 0.0;
            float _2891 = 0.0;
            float _2892 = 0.0;
            float _2893 = 0.0;
            uint _2894 = 0u;
            uint _2903;
            bool _2904;
            for (;;)
            {
                _2903 = texelFetch(g_lightClassification, int((((_2620 << 5u) + (_2606 << 9u)) + (_2894 << 2u)) >> 2u)).x;
                _2904 = _2903 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2904)
                {
                    frontier_phi_66_pred = _2893;
                    frontier_phi_66_pred_1 = _2892;
                    frontier_phi_66_pred_2 = _2891;
                    frontier_phi_66_pred_3 = _2890;
                    frontier_phi_66_pred_4 = _2889;
                    frontier_phi_66_pred_5 = _2888;
                }
                else
                {
                    float _3012;
                    float _3013;
                    float _3014;
                    float _3015;
                    float _3016;
                    float _3017;
                    uint _3018;
                    _3012 = _2888;
                    _3013 = _2889;
                    _3014 = _2890;
                    _3015 = _2891;
                    _3016 = _2892;
                    _3017 = _2893;
                    _3018 = _2903;
                    float _2944;
                    float _2945;
                    float _2946;
                    float _2947;
                    float _2948;
                    float _2949;
                    for (;;)
                    {
                        uint _3022 = uint(findLSB(_3018)) + (_2894 << 5u);
                        uint _3019 = (_3018 + 4294967295u) & _3018;
                        uint _3024 = _3022 * 48u;
                        vec4 _3038 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3024)).x, texelFetch(g_PointLightRenderingBuffer, int(_3024 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3024 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3024 + 3u)).x));
                        uint _3044 = (_3022 * 48u) + 4u;
                        vec4 _3057 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3044)).x, texelFetch(g_PointLightRenderingBuffer, int(_3044 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3044 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3044 + 3u)).x));
                        uint _3063 = (_3022 * 48u) + 8u;
                        vec3 _3074 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3063)).x, texelFetch(g_PointLightRenderingBuffer, int(_3063 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3063 + 2u)).x));
                        float _3078 = _3038.x - _1703;
                        float _3079 = _3038.y - _1704;
                        float _3080 = _3038.z - _1705;
                        float _3081 = dot(vec3(_3078, _3079, _3080), vec3(_3078, _3079, _3080));
                        float _3084 = inversesqrt(_3081);
                        float _3085 = _3084 * _3078;
                        float _3086 = _3084 * _3079;
                        float _3087 = _3084 * _3080;
                        float _3088 = dot(vec3(_586, _589, _592), vec3(_3085, _3086, _3087));
                        float _3093 = 1.0 - (_3081 * _3038.w);
                        float _4412 = isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0));
                        float _3094 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
                        float _3095 = sqrt(_3081) * _3057.w;
                        float _3098 = 1.39999997615814208984375 / (_3095 + 1.39999997615814208984375);
                        float _3099 = _3098 * _3098;
                        float _3102 = ((1.0 - _3099) * _3088) + _3099;
                        float _3105 = _3095 * _3095;
                        float _3109 = ((isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : max(_3102, 0.0))) * _3094) / ((_3105 * 0.699999988079071044921875) + 1.0);
                        float _3113 = (-0.0) - _1703;
                        float _3114 = (-0.0) - _1704;
                        float _3115 = (-0.0) - _1705;
                        float _3119 = inversesqrt(dot(vec3(_3113, _3114, _3115), vec3(_3113, _3114, _3115)));
                        float _3120 = _3119 * _3113;
                        float _3121 = _3119 * _3114;
                        float _3122 = _3119 * _3115;
                        float _3129 = exp2(log2(1.0 / ((_3105 * 3.5) + 5.0)) * 0.25);
                        float _3130 = 1.0 - _646;
                        float _3137 = sqrt(1.0 - ((1.0 - (_3130 * _3130)) * (1.0 - (_3129 * _3129))));
                        float _3138 = _3137 * _3137;
                        float _3139 = _3138 * _3138;
                        float _3140 = _3120 + _3085;
                        float _3141 = _3121 + _3086;
                        float _3142 = _3122 + _3087;
                        float _3146 = inversesqrt(dot(vec3(_3140, _3141, _3142), vec3(_3140, _3141, _3142)));
                        float _3150 = dot(vec3(_586, _589, _592), vec3(_3120, _3121, _3122));
                        float _4428 = isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : max(_3150, 0.0));
                        float _3153 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
                        float _3154 = dot(vec3(_586, _589, _592), vec3(_3146 * _3140, _3146 * _3141, _3146 * _3142));
                        float _4439 = isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0));
                        float _3157 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
                        float _3161 = ((_3157 * _3157) * (_3139 + (-1.0))) + 1.0;
                        float _3162 = _3098 * _3138;
                        float _3163 = _3162 * _3162;
                        float _3166 = ((1.0 - _3163) * _3088) + _3163;
                        float _4450 = isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0));
                        float _3167 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
                        float _3168 = 1.0 - _3138;
                        float _3178 = (0.5 / (((_3167 * ((_3153 * _3168) + _3138)) + 9.9999999392252902907785028219223e-09) + (((_3167 * _3168) + _3138) * _3153))) * _3167;
                        float _4461 = isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : max(_3178, 0.0));
                        float _3189 = (((_3139 * 3.1415927410125732421875) * (isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0)))) / ((_3161 * _3161) * ((_3105 * 2.1991131305694580078125) + 3.141590118408203125))) * _3094;
                        _2947 = (_3109 * _3057.x) + _3015;
                        _2948 = (_3109 * _3057.y) + _3016;
                        _2949 = (_3109 * _3057.z) + _3017;
                        _2944 = (_3189 * _3074.x) + _3012;
                        _2945 = (_3189 * _3074.y) + _3013;
                        _2946 = (_3189 * _3074.z) + _3014;
                        if (_3019 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3012 = _2944;
                            _3013 = _2945;
                            _3014 = _2946;
                            _3015 = _2947;
                            _3016 = _2948;
                            _3017 = _2949;
                            _3018 = _3019;
                        }
                    }
                    frontier_phi_66_pred = _2949;
                    frontier_phi_66_pred_1 = _2948;
                    frontier_phi_66_pred_2 = _2947;
                    frontier_phi_66_pred_3 = _2946;
                    frontier_phi_66_pred_4 = _2945;
                    frontier_phi_66_pred_5 = _2944;
                }
                _2746 = frontier_phi_66_pred;
                _2744 = frontier_phi_66_pred_1;
                _2742 = frontier_phi_66_pred_2;
                _2740 = frontier_phi_66_pred_3;
                _2738 = frontier_phi_66_pred_4;
                _2736 = frontier_phi_66_pred_5;
                uint _2895 = _2894 + 1u;
                if (_2895 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2888 = _2736;
                    _2889 = _2738;
                    _2890 = _2740;
                    _2891 = _2742;
                    _2892 = _2744;
                    _2893 = _2746;
                    _2894 = _2895;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2735 = _2736;
            _2737 = _2738;
            _2739 = _2740;
            _2741 = _2742;
            _2743 = _2744;
            _2745 = _2746;
        }
        uvec4 _2749 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2750 = _2749.z;
        uint _2752 = (_2750 >> 8u) & 15u;
        float _2856;
        float _2858;
        float _2860;
        float _2862;
        float _2864;
        float _2866;
        if (((4294967295u << _2752) & _2626) == 0u)
        {
            _2856 = _2735;
            _2858 = _2737;
            _2860 = _2739;
            _2862 = _2741;
            _2864 = _2743;
            _2866 = _2745;
        }
        else
        {
            float _2881 = inversesqrt(dot(vec3(_1703, _1704, _1705), vec3(_1703, _1704, _1705)));
            float _2882 = _2881 * _1703;
            float _2883 = _2881 * _1704;
            float _2884 = _2881 * _1705;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2752 < ((_2750 >> 12u) & 15u))
            {
                float _2857;
                float _2859;
                float _2861;
                float _2863;
                float _2865;
                float _2867;
                float _2995 = _2735;
                float _2996 = _2737;
                float _2997 = _2739;
                float _2998 = _2741;
                float _2999 = _2743;
                float _3000 = _2745;
                uint _3001 = _2752;
                uint _3010;
                bool _3011;
                for (;;)
                {
                    _3010 = texelFetch(g_lightClassification, int((((_2620 << 5u) + (_2606 << 9u)) + (_3001 << 2u)) >> 2u)).x;
                    _3011 = _3010 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3011)
                    {
                        frontier_phi_72_pred = _3000;
                        frontier_phi_72_pred_1 = _2999;
                        frontier_phi_72_pred_2 = _2998;
                        frontier_phi_72_pred_3 = _2997;
                        frontier_phi_72_pred_4 = _2996;
                        frontier_phi_72_pred_5 = _2995;
                    }
                    else
                    {
                        float _3194;
                        float _3195;
                        float _3196;
                        float _3197;
                        float _3198;
                        float _3199;
                        float _3488;
                        float _3489;
                        float _3490;
                        float _3491;
                        float _3492;
                        float _3493;
                        float _3207 = _2995;
                        float _3208 = _2996;
                        float _3209 = _2997;
                        float _3210 = _2998;
                        float _3211 = _2999;
                        float _3212 = _3000;
                        uint _3213 = _3010;
                        uint _3214;
                        vec4 _3239;
                        float _3240;
                        vec4 _3255;
                        vec3 _3267;
                        vec4 _3282;
                        vec4 _3297;
                        float _3344;
                        bool _3345;
                        for (;;)
                        {
                            uint _3224 = ((_3001 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3213));
                            _3214 = (_3213 + 4294967295u) & _3213;
                            uint _3226 = _3224 * 40u;
                            _3239 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3226)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 3u)).x));
                            _3240 = _3239.w;
                            uint _3242 = (_3224 * 40u) + 4u;
                            _3255 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3242)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 3u)).x));
                            uint _3257 = (_3224 * 40u) + 8u;
                            _3267 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3257)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 2u)).x));
                            uint _3269 = (_3224 * 40u) + 16u;
                            _3282 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3269)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 3u)).x));
                            uint _3284 = (_3224 * 40u) + 20u;
                            _3297 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3284)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 3u)).x));
                            uint _3300 = (_3224 * 40u) + 24u;
                            vec4 _3313 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3300)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 3u)).x));
                            uint _3319 = (_3224 * 40u) + 28u;
                            vec4 _3332 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3319)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 3u)).x));
                            _3344 = fma(_1705, _3332.z, fma(_1704, _3332.y, _3332.x * _1703)) + _3332.w;
                            _3345 = !((fma(_1705, _3313.z, fma(_1704, _3313.y, _3313.x * _1703)) + _3313.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3345)
                            {
                                float _3372 = _3239.x - _1703;
                                float _3373 = _3239.y - _1704;
                                float _3374 = _3239.z - _1705;
                                float _3375 = dot(vec3(_3372, _3373, _3374), vec3(_3372, _3373, _3374));
                                float _3378 = inversesqrt(_3375);
                                float _3379 = _3378 * _3372;
                                float _3380 = _3378 * _3373;
                                float _3381 = _3378 * _3374;
                                float _3385 = 1.0 - (_3375 / (_3240 * _3240));
                                float _4472 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0));
                                float _3386 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
                                float _3390 = sqrt(_3375) * _3255.w;
                                float _3392 = 1.39999997615814208984375 / (_3390 + 1.39999997615814208984375);
                                float _3393 = _3392 * _3392;
                                float _3396 = ((1.0 - _3393) * dot(vec3(_3379, _3380, _3381), vec3(_586, _589, _592))) + _3393;
                                float _3399 = _3390 * _3390;
                                float _3403 = (fma(_1705, _3282.z, fma(_1704, _3282.y, _3282.x * _1703)) + _3282.w) / _3344;
                                float _3404 = (fma(_1705, _3297.z, fma(_1704, _3297.y, _3297.x * _1703)) + _3297.w) / _3344;
                                float _3408 = 1.0 - dot(vec2(_3403, _3404), vec2(_3403, _3404));
                                float _4488 = isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0));
                                float _3409 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
                                float _3410 = _3409 * (((isnan(0.0) ? _3396 : (isnan(_3396) ? 0.0 : max(_3396, 0.0))) * _3386) / ((_3399 * 0.699999988079071044921875) + 1.0));
                                float _3422 = exp2(log2(1.0 / ((_3399 * 3.5) + 5.0)) * 0.25);
                                float _3423 = 1.0 - _646;
                                float _3430 = sqrt(1.0 - ((1.0 - (_3423 * _3423)) * (1.0 - (_3422 * _3422))));
                                float _3431 = _3430 * _3430;
                                float _3432 = _3431 * _3431;
                                float _3433 = _3379 - _2882;
                                float _3434 = _3380 - _2883;
                                float _3435 = _3381 - _2884;
                                float _3439 = inversesqrt(dot(vec3(_3433, _3434, _3435), vec3(_3433, _3434, _3435)));
                                float _3443 = dot(vec3(_586, _589, _592), vec3((-0.0) - _2882, (-0.0) - _2883, (-0.0) - _2884));
                                float _4499 = isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0));
                                float _3446 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
                                float _3447 = dot(vec3(_586, _589, _592), vec3(_3439 * _3433, _3439 * _3434, _3439 * _3435));
                                float _4510 = isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0));
                                float _3450 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
                                float _3454 = ((_3450 * _3450) * (_3432 + (-1.0))) + 1.0;
                                float _3455 = _3392 * _3431;
                                float _3456 = _3455 * _3455;
                                float _3462 = ((1.0 - _3456) * dot(vec3(_586, _589, _592), vec3(_3379, _3380, _3381))) + _3456;
                                float _4521 = isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : max(_3462, 0.0));
                                float _3463 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
                                float _3464 = 1.0 - _3431;
                                float _3474 = (0.5 / (((_3463 * ((_3446 * _3464) + _3431)) + 9.9999999392252902907785028219223e-09) + (((_3463 * _3464) + _3431) * _3446))) * _3463;
                                float _4532 = isnan(0.0) ? _3474 : (isnan(_3474) ? 0.0 : max(_3474, 0.0));
                                float _3484 = (_3409 * _3386) * (((_3432 * 3.1415927410125732421875) * (isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0)))) / ((_3454 * _3454) * ((_3399 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3410 * _3255.y;
                                frontier_phi_78_pred_1 = _3410 * _3255.x;
                                frontier_phi_78_pred_2 = _3484 * _3267.z;
                                frontier_phi_78_pred_3 = _3484 * _3267.y;
                                frontier_phi_78_pred_4 = _3484 * _3267.x;
                                frontier_phi_78_pred_5 = _3410 * _3255.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3492 = frontier_phi_78_pred;
                            _3491 = frontier_phi_78_pred_1;
                            _3490 = frontier_phi_78_pred_2;
                            _3489 = frontier_phi_78_pred_3;
                            _3488 = frontier_phi_78_pred_4;
                            _3493 = frontier_phi_78_pred_5;
                            _3197 = _3491 + _3210;
                            _3198 = _3492 + _3211;
                            _3199 = _3493 + _3212;
                            _3194 = _3488 + _3207;
                            _3195 = _3489 + _3208;
                            _3196 = _3490 + _3209;
                            if (_3214 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3207 = _3194;
                                _3208 = _3195;
                                _3209 = _3196;
                                _3210 = _3197;
                                _3211 = _3198;
                                _3212 = _3199;
                                _3213 = _3214;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3199;
                        frontier_phi_72_pred_1 = _3198;
                        frontier_phi_72_pred_2 = _3197;
                        frontier_phi_72_pred_3 = _3196;
                        frontier_phi_72_pred_4 = _3195;
                        frontier_phi_72_pred_5 = _3194;
                    }
                    _2867 = frontier_phi_72_pred;
                    _2865 = frontier_phi_72_pred_1;
                    _2863 = frontier_phi_72_pred_2;
                    _2861 = frontier_phi_72_pred_3;
                    _2859 = frontier_phi_72_pred_4;
                    _2857 = frontier_phi_72_pred_5;
                    uint _3002 = _3001 + 1u;
                    if (_3002 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2995 = _2857;
                        _2996 = _2859;
                        _2997 = _2861;
                        _2998 = _2863;
                        _2999 = _2865;
                        _3000 = _2867;
                        _3001 = _3002;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2867;
                frontier_phi_60_61_ladder_1 = _2865;
                frontier_phi_60_61_ladder_2 = _2861;
                frontier_phi_60_61_ladder_3 = _2859;
                frontier_phi_60_61_ladder_4 = _2857;
                frontier_phi_60_61_ladder_5 = _2863;
            }
            else
            {
                frontier_phi_60_61_ladder = _2745;
                frontier_phi_60_61_ladder_1 = _2743;
                frontier_phi_60_61_ladder_2 = _2739;
                frontier_phi_60_61_ladder_3 = _2737;
                frontier_phi_60_61_ladder_4 = _2735;
                frontier_phi_60_61_ladder_5 = _2741;
            }
            _2856 = frontier_phi_60_61_ladder_4;
            _2858 = frontier_phi_60_61_ladder_3;
            _2860 = frontier_phi_60_61_ladder_2;
            _2862 = frontier_phi_60_61_ladder_5;
            _2864 = frontier_phi_60_61_ladder_1;
            _2866 = frontier_phi_60_61_ladder;
        }
        float _2871 = isnan(1.0) ? _630 : (isnan(_630) ? 1.0 : min(_630, 1.0));
        _2639 = (_2871 * _2862) + _2170;
        _2641 = (_2871 * _2864) + _2172;
        _2643 = (_2871 * _2866) + _2174;
        _2645 = ((_2856 * 0.039999999105930328369140625) * _2871) + _2493;
        _2647 = ((_2858 * 0.039999999105930328369140625) * _2871) + _2495;
        _2649 = ((_2860 * 0.039999999105930328369140625) * _2871) + _2497;
    }
    else
    {
        _2639 = _2170;
        _2641 = _2172;
        _2643 = _2174;
        _2645 = _2493;
        _2647 = _2495;
        _2649 = _2497;
    }
    uint _2655 = _606 + uint(cbMatDynParam._m0[0u].w);
    float _2661 = ((((((_431.x - _428) * _364) + _428) * cbMtdParam._m0[13u].x) + ((((_385.x - _382) * _364) + _382) * cbMtdParam._m0[11u].x)) * _459) * cbInstanceData._m0[_2655].x;
    float _2662 = ((((((_431.y - _429) * _364) + _429) * cbMtdParam._m0[13u].y) + ((((_385.y - _383) * _364) + _383) * cbMtdParam._m0[11u].y)) * _459) * cbInstanceData._m0[_2655].y;
    float _2663 = ((((((_431.z - _430) * _364) + _430) * cbMtdParam._m0[13u].z) + ((((_385.z - _384) * _364) + _384) * cbMtdParam._m0[11u].z)) * _459) * cbInstanceData._m0[_2655].z;
    float _4548 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _4559 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _4570 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _2680 = (((isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0))) * (_2639 + ((isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0))) * _630))) + ((_2645 + ((isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0))) * _1436)) * cbPerFrame._m0[3u].x)) + _2661;
    float _2682 = (_2662 + ((_2647 + ((isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0))) * _1436)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0))) * (_2641 + ((isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0))) * _630)));
    float _2684 = (_2663 + ((_2649 + ((isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0))) * _1436)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0))) * (_2643 + ((isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0))) * _630)));
    float _4596 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2697 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
    uint _2698 = _605 + 6u;
    float _2706 = _564 / cbSceneParam._m0[86u].x;
    float _2707 = _565 / cbSceneParam._m0[86u].y;
    vec4 _2721 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2706, _2707, (log2((isnan(cbSceneParam._m0[77u].w) ? _498 : (isnan(_498) ? cbSceneParam._m0[77u].w : min(_498, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2723 = _2721.x;
    float _2724 = _2721.y;
    float _2725 = _2721.z;
    float _2726 = _2721.w;
    float _2797;
    float _2799;
    float _2801;
    float _2803;
    if (_498 > cbSceneParam._m0[78u].w)
    {
        float _2760 = isnan(_498) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _498 : min(cbSceneParam._m0[80u].w, _498));
        float _2761 = _2760 / _498;
        float _2772 = _2761 * _549;
        float _2773 = _550 * _2761;
        float _2774 = (-0.0) - _2773;
        float _2775 = _2761 * _551;
        float _2777 = (cbSceneParam._m0[77u].w * _2774) / _2760;
        float _2778 = _2777 + cbSceneParam._m0[79u].w;
        float _2779 = cbSceneParam._m0[79u].w - _2773;
        float _2785 = sqrt(((_2772 * _2772) + (_2773 * _2773)) + (_2775 * _2775));
        float _2788 = (1.0 - (cbSceneParam._m0[77u].w / _2760)) * _2785;
        float _2793 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2795 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2957;
        if (abs((_2774 - _2777) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2957 = ((((_2778 > 0.0) ? exp2(_2793 * _2778) : (2.0 - exp2(_2795 * _2778))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2788;
        }
        else
        {
            float _2917 = 1.0 / cbSceneParam._m0[80u].x;
            float _2918 = isnan(_2779) ? _2778 : (isnan(_2778) ? _2779 : max(_2778, _2779));
            float _2919 = isnan(_2779) ? _2778 : (isnan(_2778) ? _2779 : min(_2778, _2779));
            float _2928 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : min(_2918, 0.0));
            float _2929 = isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : min(_2919, 0.0));
            _2957 = ((abs(_2785 / _2774) * cbSceneParam._m0[80u].y) * ((((_2928 - _2929) * 2.0) - ((exp2(_2793 * (isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0)))) - exp2(_2793 * (isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0))))) * _2917)) - ((exp2(_2795 * _2928) - exp2(_2795 * _2929)) * _2917))) + (_2788 * cbSceneParam._m0[80u].z);
        }
        vec4 _2959 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2706, _2707, 1.0), 0.0);
        float _2968 = exp2((_2957 * (-1.44269502162933349609375)) * (1.0 - _2959.w));
        float _2969 = log2(_2968);
        float _2985 = log2(_2726);
        _2797 = (exp2(_2985 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2969 * cbSceneParam._m0[78u].x)) * _2959.x) / cbSceneParam._m0[78u].x)) + _2723;
        _2799 = (exp2(_2985 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2969 * cbSceneParam._m0[78u].y)) * _2959.y) / cbSceneParam._m0[78u].y)) + _2724;
        _2801 = (exp2(_2985 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2969 * cbSceneParam._m0[78u].z)) * _2959.z) / cbSceneParam._m0[78u].z)) + _2725;
        _2803 = _2968 * _2726;
    }
    else
    {
        _2797 = _2723;
        _2799 = _2724;
        _2801 = _2725;
        _2803 = _2726;
    }
    float _2815 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2816 = _2815 == 3.0;
    float _2817 = log2(_2803);
    float _2821 = exp2(_2817 * cbSceneParam._m0[78u].x);
    float _2822 = exp2(_2817 * cbSceneParam._m0[78u].y);
    float _2823 = exp2(_2817 * cbSceneParam._m0[78u].z);
    float _2824 = _2821 * (isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0)));
    float _2825 = _2822 * (isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0)));
    float _2826 = _2823 * (isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0)));
    float _2835 = (_2815 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2835 * (_2816 ? _2824 : (_2824 + (cbSceneParam._m0[72u].w * _2797)));
    SV_Target.y = _2835 * (_2816 ? _2825 : (_2825 + (cbSceneParam._m0[72u].w * _2799)));
    SV_Target.z = _2835 * (_2816 ? _2826 : (_2826 + (cbSceneParam._m0[72u].w * _2801)));
    SV_Target.w = cbInstanceData._m0[_2698].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2661) * _2697) * _2821) * _2835;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2662) * _2697) * _2822) * _2835;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2663) * _2697) * _2823) * _2835;
    SV_Target_1.w = cbInstanceData._m0[_2698].w;
}


