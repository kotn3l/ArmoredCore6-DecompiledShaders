#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1202;
float _3622;
float _3623;
float _3624;
float _3625;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _203 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _204 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _205 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_203, _204, _205), vec3(_203, _204, _205)));
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _247 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _253 = _247.x * cbMtdParam._m0[9u].x;
    float _254 = _247.y * cbMtdParam._m0[9u].y;
    float _255 = _247.z * cbMtdParam._m0[9u].z;
    vec4 _293 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[5u].w));
    float _309 = (TEXCOORD_3.x - ((cbMtdParam._m0[14u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[14u].y + 1.0);
    float _3634 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _310 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
    float _317 = (((_293.x * cbMtdParam._m0[10u].x) - _253) * _310) + _253;
    float _318 = (((_293.y * cbMtdParam._m0[10u].y) - _254) * _310) + _254;
    float _319 = (((_293.z * cbMtdParam._m0[10u].z) - _255) * _310) + _255;
    vec4 _336 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    vec4 _351 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[6u].w));
    float _353 = _351.x;
    float _371 = ((texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[7u].w)).x - _353) * _310) + _353;
    vec4 _384 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[4u].w));
    float _392 = (_384.x * 2.0) + (-1.0);
    float _394 = (_384.y * 2.0) + (-1.0);
    float _395 = dot(vec2(_392, _394), vec2(_392, _394));
    float _3645 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    vec4 _412 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _416 = _412.z;
    float _419 = (_412.x * 2.0) + (-1.0);
    float _420 = (_412.y * 2.0) + (-1.0);
    float _421 = dot(vec2(_419, _420), vec2(_419, _420));
    float _3656 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _426 = sqrt(1.0 - (isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0))));
    float _429 = (_310 * (_384.z - _416)) + _416;
    float _442 = (cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _443 = (cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _472 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * ((cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * ((cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[10u].w));
    float _477 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[15u].w;
    float _484 = ((_472.y * 0.5) + (-0.25)) * cbMtdParam._m0[15u].z;
    float _486 = (-0.0) - (cbMtdParam._m0[15u].z * ((_472.x * 0.5) + (-0.25)));
    float _488 = fract(_477);
    float _490 = fract(_477 + 0.5);
    float _491 = _488 * _486;
    float _492 = _484 * _488;
    float _495 = _490 * _486;
    float _496 = _484 * _490;
    float _501 = abs((_488 * 2.0) + (-1.0));
    vec4 _517 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_491 + _442) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_492 + _443) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _519 = _517.x;
    float _520 = _517.y;
    float _521 = _517.z;
    vec4 _522 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_495 + _442) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_496 + _443) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _549 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _550 = (cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _563 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_491 + _549) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_492 + _550) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _565 = _563.x;
    float _566 = _563.y;
    float _567 = _563.z;
    vec4 _568 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_495 + _549) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_496 + _550) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _594 = (TEXCOORD_9.x - ((cbMtdParam._m0[16u].y * (1.0 - TEXCOORD_9.x)) * (_336.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[16u].z + 1.0);
    float _3667 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _595 = isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0));
    float _605 = (_310 * (_392 - _419)) + _419;
    float _606 = (_310 * (_394 - _420)) + _420;
    float _607 = (_310 * (sqrt(1.0 - (isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0)))) - _426)) + _426;
    float _610 = fma(_607, _218 * NORMAL.x, fma(_606, _225 * TANGENT.x, (_211 * _203) * _605));
    float _613 = fma(_607, _218 * NORMAL.y, fma(_606, _225 * TANGENT.y, (_211 * _204) * _605));
    float _616 = fma(_607, _218 * NORMAL.z, fma(_606, _225 * TANGENT.z, (_211 * _205) * _605));
    float _620 = inversesqrt(dot(vec3(_610, _613, _616), vec3(_610, _613, _616)));
    float _621 = _620 * _610;
    float _622 = _620 * _613;
    float _623 = _620 * _616;
    float _3678 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _624 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
    float _3689 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _3700 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _3711 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _3722 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _628 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
    float _644 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _685 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _695 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _685);
    float _696 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _685);
    float _697 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _685);
    float _701 = inversesqrt(dot(vec3(_695, _696, _697), vec3(_695, _696, _697)));
    float _702 = _695 * _701;
    float _703 = _696 * _701;
    float _704 = _697 * _701;
    vec4 _709 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _711 = _709.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _883 = sqrt(((_695 * _695) + (_696 * _696)) + (_697 * _697));
        float _889 = (cbMatDynParam._m0[5u].x * _883) + cbMatDynParam._m0[5u].y;
        float _3733 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        float _890 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
        float _894 = (cbMatDynParam._m0[5u].z * _883) + cbMatDynParam._m0[5u].w;
        float _3744 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0))) - _890)) + _890) < ((_711 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _722 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _723 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _741 = fma(_623, cbSceneParam._m0[5u].z, fma(_622, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _621));
    float _744 = fma(_623, cbSceneParam._m0[6u].z, fma(_622, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _621));
    float _747 = fma(_623, cbSceneParam._m0[7u].z, fma(_622, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _621));
    uint _760 = uint(roundEven(NORMAL.w)) * 13u;
    uint _761 = _760 + 9u;
    uint _762 = _761 + uint(cbMatDynParam._m0[0u].w);
    float _768 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0)))) * cbInstanceData._m0[_762].x;
    float _769 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0)))) * cbInstanceData._m0[_762].y;
    float _770 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0)))) * cbInstanceData._m0[_762].z;
    float _3755 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _771 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
    float _3766 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _772 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
    float _3777 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _773 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
    float _774 = 1.0 - _628;
    float _775 = _771 * _774;
    float _776 = _772 * _774;
    float _777 = _773 * _774;
    float _782 = (_771 + (-0.039999999105930328369140625)) * _628;
    float _783 = (_772 + (-0.039999999105930328369140625)) * _628;
    float _784 = (_773 + (-0.039999999105930328369140625)) * _628;
    float _785 = _782 + 0.039999999105930328369140625;
    float _787 = _783 + 0.039999999105930328369140625;
    float _788 = _784 + 0.039999999105930328369140625;
    vec4 _797 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _722, cbSceneParam._m0[86u].y * _723));
    float _800 = _797.x * TEXCOORD_3.w;
    float _801 = dot(vec3(_621, _622, _623), vec3(_702, _703, _704));
    float _804 = _801 * 2.0;
    float _808 = (_804 * _621) - _702;
    float _809 = (_804 * _622) - _703;
    float _810 = (_804 * _623) - _704;
    float _814 = abs(dot(vec3(_702, _703, _704), vec3(_621, _622, _623)));
    float _3788 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _816 = sqrt(_624);
    float _829 = exp2((_816 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_816 * 3.0));
    float _835 = (1.0 - _829) * ((_816 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _836 = _829 * _816;
    float _864 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _868 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _872 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1201;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _927 = fma(_872, cbModelParam._m0[26u].z, fma(_868, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _864));
        float _931 = fma(_872, cbModelParam._m0[27u].z, fma(_868, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _864));
        float _935 = fma(_872, cbModelParam._m0[28u].z, fma(_868, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _864));
        float _959 = _864 + _621;
        float _960 = _868 + _622;
        float _961 = _872 + _623;
        float _971 = fma(_961, cbModelParam._m0[26u].z, fma(_960, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _959)) - _927;
        float _972 = fma(_961, cbModelParam._m0[27u].z, fma(_960, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _959)) - _931;
        float _973 = fma(_961, cbModelParam._m0[28u].z, fma(_960, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _959)) - _935;
        float _977 = inversesqrt(dot(vec3(_971, _972, _973), vec3(_971, _972, _973)));
        float _990 = ((_977 * _971) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_927 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _991 = ((_977 * _972) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_931 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _992 = ((_977 * _973) / cbModelParam._m0[34u].z) + ((((((_935 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _995 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_990, _991, _992), 0.0);
        vec4 _1002 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_990, _991, _992), 0.0);
        vec4 _1009 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_990, _991, _992), 0.0);
        vec4 _1016 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_990, _991, _992), 0.0);
        float _1029 = exp2((_995.w + (-0.5)) * 20.0) * 2.0;
        float _1030 = _1029 * (_995.x + (-0.5));
        float _1031 = _1029 * (_995.y + (-0.5));
        float _1032 = _1029 * (_995.z + (-0.5));
        float _1039 = exp2((_1002.w + (-0.5)) * 20.0) * 2.0;
        float _1040 = _1039 * (_1002.x + (-0.5));
        float _1041 = _1039 * (_1002.y + (-0.5));
        float _1042 = _1039 * (_1002.z + (-0.5));
        float _1049 = exp2((_1009.w + (-0.5)) * 20.0) * 2.0;
        float _1050 = _1049 * (_1009.x + (-0.5));
        float _1051 = _1049 * (_1009.y + (-0.5));
        float _1052 = _1049 * (_1009.z + (-0.5));
        float _1059 = exp2((_1016.w + (-0.5)) * 20.0) * 2.0;
        float _1060 = _1059 * (_1016.x + (-0.5));
        float _1061 = _1059 * (_1016.y + (-0.5));
        float _1062 = _1059 * (_1016.z + (-0.5));
        float _1063 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1064 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1065 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1066 = _1030 * 0.5;
        float _1067 = _1040 * 0.5;
        float _1068 = _1050 * 0.5;
        float _1069 = dot(vec3(_1066, _1067, _1068), vec3(_1066, _1067, _1068));
        float _1074 = (_1069 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1069);
        float _1083 = (dot(vec3(_621, _622, _623), vec3(_1074 * _1066, _1074 * _1067, _1074 * _1068)) + 1.0) * 0.5;
        float _3814 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1093 = sqrt(((_1067 * _1067) + (_1066 * _1066)) + (_1068 * _1068)) / (_1063 + 9.9999997473787516355514526367188e-06);
        float _3825 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
        float _1095 = _1094 * 2.0;
        float _1099 = (1.0 - _1094) / (_1094 + 1.0);
        float _3836 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
        float _1109 = ((((1.0 - _1100) * (_1095 + 2.0)) * exp2(log2(isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0))) * (_1095 + 1.0))) + _1100) * _1063;
        float _1110 = _1031 * 0.5;
        float _1111 = _1041 * 0.5;
        float _1112 = _1051 * 0.5;
        float _1113 = dot(vec3(_1110, _1111, _1112), vec3(_1110, _1111, _1112));
        float _1118 = (_1113 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1113);
        float _1126 = (dot(vec3(_621, _622, _623), vec3(_1118 * _1110, _1118 * _1111, _1118 * _1112)) + 1.0) * 0.5;
        float _3847 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1135 = sqrt(((_1111 * _1111) + (_1110 * _1110)) + (_1112 * _1112)) / (_1064 + 9.9999997473787516355514526367188e-06);
        float _3858 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
        float _1137 = _1136 * 2.0;
        float _1141 = (1.0 - _1136) / (_1136 + 1.0);
        float _3869 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
        float _1151 = ((((1.0 - _1142) * (_1137 + 2.0)) * exp2(log2(isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0))) * (_1137 + 1.0))) + _1142) * _1064;
        float _1152 = _1032 * 0.5;
        float _1153 = _1042 * 0.5;
        float _1154 = _1052 * 0.5;
        float _1155 = dot(vec3(_1152, _1153, _1154), vec3(_1152, _1153, _1154));
        float _1160 = (_1155 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1155);
        float _1168 = (dot(vec3(_621, _622, _623), vec3(_1160 * _1152, _1160 * _1153, _1160 * _1154)) + 1.0) * 0.5;
        float _3880 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1177 = sqrt(((_1153 * _1153) + (_1152 * _1152)) + (_1154 * _1154)) / (_1065 + 9.9999997473787516355514526367188e-06);
        float _3891 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
        float _1179 = _1178 * 2.0;
        float _1183 = (1.0 - _1178) / (_1178 + 1.0);
        float _3902 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _1193 = ((((1.0 - _1184) * (_1179 + 2.0)) * exp2(log2(isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0))) * (_1179 + 1.0))) + _1184) * _1065;
        _1201 = _1032;
        _1203 = _1031;
        _1204 = _1030;
        _1205 = _1042;
        _1206 = _1041;
        _1207 = _1040;
        _1208 = _1052;
        _1209 = _1051;
        _1210 = _1050;
        _1211 = _1065;
        _1212 = _1064;
        _1213 = _1063;
        _1214 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0)));
        _1215 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0)));
        _1216 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0)));
    }
    else
    {
        _1201 = _1202;
        _1203 = _1202;
        _1204 = _1202;
        _1205 = _1202;
        _1206 = _1202;
        _1207 = _1202;
        _1208 = _1202;
        _1209 = _1202;
        _1210 = _1202;
        _1211 = _1202;
        _1212 = _1202;
        _1213 = _1202;
        _1214 = 0.0;
        _1215 = 0.0;
        _1216 = 0.0;
    }
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1245 = fma(_872, cbModelParam._m0[30u].z, fma(_868, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _864));
        float _1249 = fma(_872, cbModelParam._m0[31u].z, fma(_868, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _864));
        float _1253 = fma(_872, cbModelParam._m0[32u].z, fma(_868, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _864));
        float _1276 = _864 + _621;
        float _1277 = _868 + _622;
        float _1278 = _872 + _623;
        float _1288 = fma(_1278, cbModelParam._m0[30u].z, fma(_1277, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1276)) - _1245;
        float _1289 = fma(_1278, cbModelParam._m0[31u].z, fma(_1277, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1276)) - _1249;
        float _1290 = fma(_1278, cbModelParam._m0[32u].z, fma(_1277, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1276)) - _1253;
        float _1294 = inversesqrt(dot(vec3(_1288, _1289, _1290), vec3(_1288, _1289, _1290)));
        float _1307 = ((_1294 * _1288) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1245 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1308 = ((_1294 * _1289) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1249 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1309 = ((_1294 * _1290) / cbModelParam._m0[35u].z) + ((((((_1253 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1311 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1307, _1308, _1309), 0.0);
        vec4 _1318 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1307, _1308, _1309), 0.0);
        vec4 _1325 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1307, _1308, _1309), 0.0);
        vec4 _1332 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1307, _1308, _1309), 0.0);
        float _1344 = exp2((_1311.w + (-0.5)) * 20.0) * 2.0;
        float _1345 = _1344 * (_1311.x + (-0.5));
        float _1346 = _1344 * (_1311.y + (-0.5));
        float _1347 = _1344 * (_1311.z + (-0.5));
        float _1354 = exp2((_1318.w + (-0.5)) * 20.0) * 2.0;
        float _1355 = _1354 * (_1318.x + (-0.5));
        float _1356 = _1354 * (_1318.y + (-0.5));
        float _1357 = _1354 * (_1318.z + (-0.5));
        float _1364 = exp2((_1325.w + (-0.5)) * 20.0) * 2.0;
        float _1365 = _1364 * (_1325.x + (-0.5));
        float _1366 = _1364 * (_1325.y + (-0.5));
        float _1367 = _1364 * (_1325.z + (-0.5));
        float _1374 = exp2((_1332.w + (-0.5)) * 20.0) * 2.0;
        float _1375 = _1374 * (_1332.x + (-0.5));
        float _1376 = _1374 * (_1332.y + (-0.5));
        float _1377 = _1374 * (_1332.z + (-0.5));
        float _1378 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1379 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1380 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1381 = _1345 * 0.5;
        float _1382 = _1355 * 0.5;
        float _1383 = _1365 * 0.5;
        float _1384 = dot(vec3(_1381, _1382, _1383), vec3(_1381, _1382, _1383));
        float _1389 = (_1384 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1384);
        float _1397 = (dot(vec3(_621, _622, _623), vec3(_1389 * _1381, _1389 * _1382, _1389 * _1383)) + 1.0) * 0.5;
        float _3943 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1406 = sqrt(((_1382 * _1382) + (_1381 * _1381)) + (_1383 * _1383)) / (_1378 + 9.9999997473787516355514526367188e-06);
        float _3954 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1407 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
        float _1408 = _1407 * 2.0;
        float _1412 = (1.0 - _1407) / (_1407 + 1.0);
        float _3965 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1413 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
        float _1422 = ((((1.0 - _1413) * (_1408 + 2.0)) * exp2(log2(isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0))) * (_1408 + 1.0))) + _1413) * _1378;
        float _1423 = _1346 * 0.5;
        float _1424 = _1356 * 0.5;
        float _1425 = _1366 * 0.5;
        float _1426 = dot(vec3(_1423, _1424, _1425), vec3(_1423, _1424, _1425));
        float _1431 = (_1426 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1426);
        float _1439 = (dot(vec3(_621, _622, _623), vec3(_1431 * _1423, _1431 * _1424, _1431 * _1425)) + 1.0) * 0.5;
        float _3976 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1448 = sqrt(((_1424 * _1424) + (_1423 * _1423)) + (_1425 * _1425)) / (_1379 + 9.9999997473787516355514526367188e-06);
        float _3987 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1449 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
        float _1450 = _1449 * 2.0;
        float _1454 = (1.0 - _1449) / (_1449 + 1.0);
        float _3998 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1455 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _1464 = ((((1.0 - _1455) * (_1450 + 2.0)) * exp2(log2(isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0))) * (_1450 + 1.0))) + _1455) * _1379;
        float _1465 = _1347 * 0.5;
        float _1466 = _1357 * 0.5;
        float _1467 = _1367 * 0.5;
        float _1468 = dot(vec3(_1465, _1466, _1467), vec3(_1465, _1466, _1467));
        float _1473 = (_1468 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1468);
        float _1481 = (dot(vec3(_621, _622, _623), vec3(_1473 * _1465, _1473 * _1466, _1473 * _1467)) + 1.0) * 0.5;
        float _4009 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1490 = sqrt(((_1466 * _1466) + (_1465 * _1465)) + (_1467 * _1467)) / (_1380 + 9.9999997473787516355514526367188e-06);
        float _4020 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1491 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
        float _1492 = _1491 * 2.0;
        float _1496 = (1.0 - _1491) / (_1491 + 1.0);
        float _4031 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1497 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _1506 = ((((1.0 - _1497) * (_1492 + 2.0)) * exp2(log2(isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0))) * (_1492 + 1.0))) + _1497) * _1380;
        _1514 = _1347;
        _1515 = _1346;
        _1516 = _1345;
        _1517 = _1357;
        _1518 = _1356;
        _1519 = _1355;
        _1520 = _1367;
        _1521 = _1366;
        _1522 = _1365;
        _1523 = _1380;
        _1524 = _1379;
        _1525 = _1378;
        _1526 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0)));
        _1527 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0)));
        _1528 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0)));
    }
    else
    {
        _1514 = _1202;
        _1515 = _1202;
        _1516 = _1202;
        _1517 = _1202;
        _1518 = _1202;
        _1519 = _1202;
        _1520 = _1202;
        _1521 = _1202;
        _1522 = _1202;
        _1523 = _1202;
        _1524 = _1202;
        _1525 = _1202;
        _1526 = 0.0;
        _1527 = 0.0;
        _1528 = 0.0;
    }
    float _1538 = (cbModelParam._m0[1u].x * (_1526 - _1214)) + _1214;
    float _1539 = (cbModelParam._m0[1u].x * (_1527 - _1215)) + _1215;
    float _1540 = (cbModelParam._m0[1u].x * (_1528 - _1216)) + _1216;
    float _1561 = fma(_1540, cbSceneParam._m0[89u].z, fma(_1539, cbSceneParam._m0[89u].y, _1538 * cbSceneParam._m0[89u].x));
    float _1564 = fma(_1540, cbSceneParam._m0[90u].z, fma(_1539, cbSceneParam._m0[90u].y, _1538 * cbSceneParam._m0[90u].x));
    float _1567 = fma(_1540, cbSceneParam._m0[91u].z, fma(_1539, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1538));
    float _1582 = _808 * 0.5;
    float _1583 = _809 * 0.5;
    float _1584 = _810 * 0.5;
    float _1585 = dot(vec4(_1582, _1583, _1584, 1.0), vec4(_1516, _1519, _1522, _1525));
    float _1588 = dot(vec4(_1582, _1583, _1584, 1.0), vec4(_1515, _1518, _1521, _1524));
    float _1591 = dot(vec4(_1582, _1583, _1584, 1.0), vec4(_1514, _1517, _1520, _1523));
    float _1625;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1598 = dot(vec4(_1582, _1583, _1584, 1.0), vec4(_1201, _1205, _1208, _1211));
        float _1602 = dot(vec4(_1582, _1583, _1584, 1.0), vec4(_1203, _1206, _1209, _1212));
        float _1606 = dot(vec4(_1582, _1583, _1584, 1.0), vec4(_1204, _1207, _1210, _1213));
        float _1613 = dot(vec4(cbModelParam._m0[39u]), vec4(_1582, _1583, _1584, 1.0));
        _1625 = dot(vec3(isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0)), isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0)), isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1613) ? 0.0 : (isnan(0.0) ? _1613 : max(0.0, _1613))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1625 = 1.0;
    }
    float _1636;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1627 = dot(vec4(cbModelParam._m0[40u]), vec4(_1582, _1583, _1584, 1.0));
        _1636 = dot(vec3(isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0)), isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0)), isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1627) ? 0.0 : (isnan(0.0) ? _1627 : max(0.0, _1627))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1636 = 1.0;
    }
    float _1640 = (_1636 * cbModelParam._m0[1u].x) + (_1625 * (1.0 - cbModelParam._m0[1u].x));
    float _1650 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _624);
    float _1651 = isnan(_1650) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1650 : min(cbModelParam._m0[25u].z, _1650));
    float _1731;
    float _1733;
    float _1735;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1698 = fma(_872, cbModelParam._m0[13u].z, fma(_868, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _864)) + cbModelParam._m0[13u].w;
        float _1702 = fma(_872, cbModelParam._m0[14u].z, fma(_868, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _864)) + cbModelParam._m0[14u].w;
        float _1706 = fma(_872, cbModelParam._m0[15u].z, fma(_868, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _864)) + cbModelParam._m0[15u].w;
        float _1709 = fma(_810, cbModelParam._m0[13u].z, fma(_809, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _808));
        float _1712 = fma(_810, cbModelParam._m0[14u].z, fma(_809, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _808));
        float _1715 = fma(_810, cbModelParam._m0[15u].z, fma(_809, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _808));
        float _1743;
        if (_1709 > 0.0)
        {
            _1743 = abs((1.0 - _1698) / _1709);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1709 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1698 + 1.0) / _1709);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1743 = frontier_phi_17_15_ladder;
        }
        float _1947;
        if (_1712 > 0.0)
        {
            _1947 = abs((1.0 - _1702) / _1712);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1712 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1702 + 1.0) / _1712);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1947 = frontier_phi_26_22_ladder;
        }
        float _2201;
        if (_1715 > 0.0)
        {
            _2201 = abs((1.0 - _1706) / _1715);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1715 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1706 + 1.0) / _1715);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2201 = frontier_phi_38_33_ladder;
        }
        float _2203 = isnan(_1947) ? _1743 : (isnan(_1743) ? _1947 : min(_1743, _1947));
        float _2204 = isnan(_2201) ? _2203 : (isnan(_2203) ? _2201 : min(_2203, _2201));
        float _2208 = (_2204 * _1709) + _1698;
        float _2209 = (_2204 * _1712) + _1702;
        float _2210 = (_2204 * _1715) + _1706;
        float _2211 = _2204 * 9.9999997473787516355514526367188e-05;
        float _2213 = (-1.0) - _2211;
        float _2215 = _2211 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2210 > _2215) || ((_2210 < _2213) || ((_2209 > _2215) || ((_2209 < _2213) || ((_2208 < _2213) || (_2208 > _2215))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2338 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2210, cbModelParam._m0[9u].z, fma(_2209, cbModelParam._m0[9u].y, _2208 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2210, cbModelParam._m0[10u].z, fma(_2209, cbModelParam._m0[10u].y, _2208 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2210, cbModelParam._m0[11u].z, fma(_2209, cbModelParam._m0[11u].y, _2208 * cbModelParam._m0[11u].x))), _1651);
            frontier_phi_16_38_ladder = _2338.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2338.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2338.x * cbModelParam._m0[1u].y;
        }
        _1731 = frontier_phi_16_38_ladder_2;
        _1733 = frontier_phi_16_38_ladder_1;
        _1735 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1719 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_808, _809, _810), _1651);
        _1731 = _1719.x * cbModelParam._m0[1u].y;
        _1733 = _1719.y * cbModelParam._m0[1u].y;
        _1735 = _1719.z * cbModelParam._m0[1u].y;
    }
    float _1739 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _624);
    float _1740 = isnan(_1739) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1739 : min(cbModelParam._m0[25u].w, _1739));
    float _1830;
    float _1832;
    float _1834;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1794 = fma(_872, cbModelParam._m0[21u].z, fma(_868, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _864)) + cbModelParam._m0[21u].w;
        float _1798 = fma(_872, cbModelParam._m0[22u].z, fma(_868, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _864)) + cbModelParam._m0[22u].w;
        float _1802 = fma(_872, cbModelParam._m0[23u].z, fma(_868, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _864)) + cbModelParam._m0[23u].w;
        float _1805 = fma(_810, cbModelParam._m0[21u].z, fma(_809, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _808));
        float _1808 = fma(_810, cbModelParam._m0[22u].z, fma(_809, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _808));
        float _1811 = fma(_810, cbModelParam._m0[23u].z, fma(_809, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _808));
        float _1952;
        if (_1805 > 0.0)
        {
            _1952 = abs((1.0 - _1794) / _1805);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1805 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1794 + 1.0) / _1805);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1952 = frontier_phi_28_24_ladder;
        }
        float _2228;
        if (_1808 > 0.0)
        {
            _2228 = abs((1.0 - _1798) / _1808);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1808 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1798 + 1.0) / _1808);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2228 = frontier_phi_40_35_ladder;
        }
        float _2441;
        if (_1811 > 0.0)
        {
            _2441 = abs((1.0 - _1802) / _1811);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1811 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1802 + 1.0) / _1811);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2441 = frontier_phi_49_46_ladder;
        }
        float _2443 = isnan(_2228) ? _1952 : (isnan(_1952) ? _2228 : min(_1952, _2228));
        float _2444 = isnan(_2441) ? _2443 : (isnan(_2443) ? _2441 : min(_2443, _2441));
        float _2448 = (_2444 * _1805) + _1794;
        float _2449 = (_2444 * _1808) + _1798;
        float _2450 = (_2444 * _1811) + _1802;
        float _2451 = _2444 * 9.9999997473787516355514526367188e-05;
        float _2452 = (-1.0) - _2451;
        float _2454 = _2451 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2450 > _2454) || ((_2450 < _2452) || ((_2449 > _2454) || ((_2449 < _2452) || ((_2448 < _2452) || (_2448 > _2454))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2678 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2450, cbModelParam._m0[17u].z, fma(_2449, cbModelParam._m0[17u].y, _2448 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2450, cbModelParam._m0[18u].z, fma(_2449, cbModelParam._m0[18u].y, _2448 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2450, cbModelParam._m0[19u].z, fma(_2449, cbModelParam._m0[19u].y, _2448 * cbModelParam._m0[19u].x))), _1740);
            frontier_phi_25_49_ladder = _2678.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2678.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2678.x * cbModelParam._m0[1u].z;
        }
        _1830 = frontier_phi_25_49_ladder_2;
        _1832 = frontier_phi_25_49_ladder_1;
        _1834 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1814 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_808, _809, _810), _1740);
        _1830 = _1814.x * cbModelParam._m0[1u].z;
        _1832 = _1814.y * cbModelParam._m0[1u].z;
        _1834 = _1814.z * cbModelParam._m0[1u].z;
    }
    float _1847 = (((_835 * _785) + _836) * _800) * ((cbModelParam._m0[1u].w * (_1830 - _1731)) + _1731);
    float _1849 = (((_835 * _787) + _836) * _800) * ((cbModelParam._m0[1u].w * (_1832 - _1733)) + _1733);
    float _1851 = (((_835 * _788) + _836) * _800) * ((cbModelParam._m0[1u].w * (_1834 - _1735)) + _1735);
    float _1854 = fma(_1851, cbSceneParam._m0[89u].z, fma(_1849, cbSceneParam._m0[89u].y, _1847 * cbSceneParam._m0[89u].x));
    float _1857 = fma(_1851, cbSceneParam._m0[90u].z, fma(_1849, cbSceneParam._m0[90u].y, _1847 * cbSceneParam._m0[90u].x));
    float _1860 = fma(_1851, cbSceneParam._m0[91u].z, fma(_1849, cbSceneParam._m0[91u].y, _1847 * cbSceneParam._m0[91u].x));
    uvec4 _1870 = floatBitsToUint(cbInstanceData._m0[_760 + 5u]);
    uint _1872 = _1870.x * 14u;
    uint _1873 = _1872 + 13u;
    float _1880 = _800 + (-1.0);
    float _1885 = (cbLight._m0[_1873].x * _1880) + 1.0;
    float _1886 = (cbLight._m0[_1873].y * _1880) + 1.0;
    float _1887 = (cbLight._m0[_1873].z * _1880) + 1.0;
    float _1888 = (cbLight._m0[_1873].w * _1880) + 1.0;
    uint _1889 = _1872 + 5u;
    float _1895 = isnan(1.0) ? _1886 : (isnan(_1886) ? 1.0 : min(_1886, 1.0));
    uint _1899 = _1872 + 4u;
    float _1905 = isnan(1.0) ? _1885 : (isnan(_1885) ? 1.0 : min(_1885, 1.0));
    uint _1909 = _1872 | 1u;
    float _1920 = dot(vec3(cbLight._m0[_1872].xyz), vec3(_621, _622, _623));
    float _1923 = dot(vec3(cbLight._m0[_1909].xyz), vec3(_621, _622, _623));
    float _4167 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
    float _4178 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
    float _1928 = (isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))) * 0.3183098733425140380859375;
    float _1930 = (isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0))) * 0.3183098733425140380859375;
    float _1937 = ((cbLight._m0[_1889].x * _1895) * _1930) + ((cbLight._m0[_1899].x * _1905) * _1928);
    float _1938 = ((_1895 * cbLight._m0[_1889].y) * _1930) + ((_1905 * cbLight._m0[_1899].y) * _1928);
    float _1939 = ((_1895 * cbLight._m0[_1889].z) * _1930) + ((_1905 * cbLight._m0[_1899].z) * _1928);
    uvec4 _1944 = floatBitsToUint(cbLight._m0[_1872 + 12u]);
    bool _1946 = _1944.x == 0u;
    float _1957;
    float _1959;
    float _1961;
    if (_1946)
    {
        _1957 = _1937;
        _1959 = _1938;
        _1961 = _1939;
    }
    else
    {
        uint _1965 = _1872 + 6u;
        float _1981 = (dot(vec3(cbLight._m0[_1872 + 2u].xyz), vec3(_621, _622, _623)) * 0.5) + 0.5;
        float _1982 = _1981 * _1981;
        float _4189 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
        float _1983 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _1984 = isnan(1.0) ? _1887 : (isnan(_1887) ? 1.0 : min(_1887, 1.0));
        _1957 = (((cbLight._m0[_1965].x * 0.3183098733425140380859375) * _1983) * _1984) + _1937;
        _1959 = (((cbLight._m0[_1965].y * 0.3183098733425140380859375) * _1983) * _1984) + _1938;
        _1961 = (((cbLight._m0[_1965].z * 0.3183098733425140380859375) * _1983) * _1984) + _1939;
    }
    bool _1964 = _1944.y == 0u;
    float _2002;
    float _2004;
    float _2006;
    if (_1964)
    {
        _2002 = _1957;
        _2004 = _1959;
        _2006 = _1961;
    }
    else
    {
        uint _2172 = _1872 + 7u;
        float _2188 = (dot(vec3(cbLight._m0[_1872 + 3u].xyz), vec3(_621, _622, _623)) * 0.5) + 0.5;
        float _2189 = _2188 * _2188;
        float _4205 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
        float _2190 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _2191 = isnan(1.0) ? _1888 : (isnan(_1888) ? 1.0 : min(_1888, 1.0));
        _2002 = (((cbLight._m0[_2172].x * 0.3183098733425140380859375) * _2190) * _2191) + _1957;
        _2004 = (((cbLight._m0[_2172].y * 0.3183098733425140380859375) * _2190) * _2191) + _1959;
        _2006 = (((cbLight._m0[_2172].z * 0.3183098733425140380859375) * _2190) * _2191) + _1961;
    }
    uint _2009 = _1872 + 8u;
    float _2022 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1872].w)) * _624) * 0.949999988079071044921875);
    float _2023 = _2022 * _2022;
    float _2024 = cbLight._m0[_1872].x + _702;
    float _2025 = cbLight._m0[_1872].y + _703;
    float _2026 = cbLight._m0[_1872].z + _704;
    float _2030 = inversesqrt(dot(vec3(_2024, _2025, _2026), vec3(_2024, _2025, _2026)));
    float _2031 = _2030 * _2024;
    float _2032 = _2030 * _2025;
    float _2033 = _2030 * _2026;
    float _2034 = dot(vec3(_621, _622, _623), vec3(cbLight._m0[_1872].xyz));
    float _4221 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
    float _2037 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
    float _4232 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _2038 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
    float _2039 = dot(vec3(_621, _622, _623), vec3(_2031, _2032, _2033));
    float _4243 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
    float _2042 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
    float _2043 = dot(vec3(cbLight._m0[_1872].xyz), vec3(_2031, _2032, _2033));
    float _4254 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
    float _2047 = _2023 * _2023;
    float _2051 = ((_2042 * _2042) * (_2047 + (-1.0))) + 1.0;
    float _2059 = exp2(log2(1.0 - (isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0)))) * 5.0);
    float _2060 = 0.959999978542327880859375 - _782;
    float _2062 = 0.959999978542327880859375 - _783;
    float _2063 = 0.959999978542327880859375 - _784;
    float _2070 = 1.0 - _2023;
    float _2081 = (0.5 / (((_2038 * ((_2037 * _2070) + _2023)) + 9.9999999392252902907785028219223e-09) + (((_2038 * _2070) + _2023) * _2037))) * _2037;
    float _4265 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
    float _2083 = (isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0))) * (_2047 / ((_2051 * _2051) * 3.141590118408203125));
    uint _2094 = _1872 + 9u;
    float _2105 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1909].w)) * _624) * 0.949999988079071044921875);
    float _2106 = _2105 * _2105;
    float _2107 = cbLight._m0[_1909].x + _702;
    float _2108 = cbLight._m0[_1909].y + _703;
    float _2109 = cbLight._m0[_1909].z + _704;
    float _2113 = inversesqrt(dot(vec3(_2107, _2108, _2109), vec3(_2107, _2108, _2109)));
    float _2114 = _2113 * _2107;
    float _2115 = _2113 * _2108;
    float _2116 = _2113 * _2109;
    float _2117 = dot(vec3(_621, _622, _623), vec3(cbLight._m0[_1909].xyz));
    float _4276 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
    float _2120 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
    float _2121 = dot(vec3(_621, _622, _623), vec3(_2114, _2115, _2116));
    float _4287 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
    float _2124 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
    float _2125 = dot(vec3(cbLight._m0[_1909].xyz), vec3(_2114, _2115, _2116));
    float _4298 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
    float _2129 = _2106 * _2106;
    float _2133 = ((_2124 * _2124) * (_2129 + (-1.0))) + 1.0;
    float _2140 = exp2(log2(1.0 - (isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0)))) * 5.0);
    float _2147 = 1.0 - _2106;
    float _2157 = (0.5 / (((_2038 * ((_2120 * _2147) + _2106)) + 9.9999999392252902907785028219223e-09) + (((_2038 * _2147) + _2106) * _2120))) * _2120;
    float _4309 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
    float _2159 = (isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * (_2129 / ((_2133 * _2133) * 3.141590118408203125));
    float _2169 = (((((_2140 * _2060) + _785) * cbLight._m0[_2094].x) * _2159) * _1895) + (((((_2059 * _2060) + _785) * cbLight._m0[_2009].x) * _2083) * _1905);
    float _2170 = (((((_2140 * _2062) + _787) * cbLight._m0[_2094].y) * _2159) * _1895) + (((((_2059 * _2062) + _787) * cbLight._m0[_2009].y) * _2083) * _1905);
    float _2171 = (((((_2140 * _2063) + _788) * cbLight._m0[_2094].z) * _2159) * _1895) + (((((_2059 * _2063) + _788) * cbLight._m0[_2009].z) * _2083) * _1905);
    float _2233;
    float _2235;
    float _2237;
    if (_1946)
    {
        _2233 = _2169;
        _2235 = _2170;
        _2237 = _2171;
    }
    else
    {
        uint _2239 = _1872 + 2u;
        uint _2243 = _1872 + 10u;
        float _2257 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2239].w)) * _624) * 0.949999988079071044921875);
        float _2258 = _2257 * _2257;
        float _2259 = cbLight._m0[_2239].x + _702;
        float _2260 = cbLight._m0[_2239].y + _703;
        float _2261 = cbLight._m0[_2239].z + _704;
        float _2265 = inversesqrt(dot(vec3(_2259, _2260, _2261), vec3(_2259, _2260, _2261)));
        float _2266 = _2265 * _2259;
        float _2267 = _2265 * _2260;
        float _2268 = _2265 * _2261;
        float _2269 = dot(vec3(_621, _622, _623), vec3(cbLight._m0[_2239].xyz));
        float _4320 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
        float _2272 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _2273 = dot(vec3(_621, _622, _623), vec3(_2266, _2267, _2268));
        float _4331 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
        float _2276 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _2277 = dot(vec3(cbLight._m0[_2239].xyz), vec3(_2266, _2267, _2268));
        float _4342 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
        float _2281 = _2258 * _2258;
        float _2285 = ((_2276 * _2276) * (_2281 + (-1.0))) + 1.0;
        float _2292 = exp2(log2(1.0 - (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0)))) * 5.0);
        float _2299 = 1.0 - _2258;
        float _2309 = (0.5 / (((_2038 * ((_2272 * _2299) + _2258)) + 9.9999999392252902907785028219223e-09) + (((_2038 * _2299) + _2258) * _2272))) * _2272;
        float _4353 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
        float _2311 = (isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0))) * (_2281 / ((_2285 * _2285) * 3.141590118408203125));
        float _2312 = isnan(1.0) ? _1887 : (isnan(_1887) ? 1.0 : min(_1887, 1.0));
        _2233 = (((((_2292 * _2060) + _785) * cbLight._m0[_2243].x) * _2311) * _2312) + _2169;
        _2235 = (((((_2292 * _2062) + _787) * cbLight._m0[_2243].y) * _2311) * _2312) + _2170;
        _2237 = (((((_2292 * _2063) + _788) * cbLight._m0[_2243].z) * _2311) * _2312) + _2171;
    }
    float _2347;
    float _2349;
    float _2351;
    if (_1964)
    {
        _2347 = _2233;
        _2349 = _2235;
        _2351 = _2237;
    }
    else
    {
        uint _2358 = _1872 + 3u;
        uint _2362 = _1872 + 11u;
        float _2376 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2358].w)) * _624) * 0.949999988079071044921875);
        float _2377 = _2376 * _2376;
        float _2378 = cbLight._m0[_2358].x + _702;
        float _2379 = cbLight._m0[_2358].y + _703;
        float _2380 = cbLight._m0[_2358].z + _704;
        float _2384 = inversesqrt(dot(vec3(_2378, _2379, _2380), vec3(_2378, _2379, _2380)));
        float _2385 = _2384 * _2378;
        float _2386 = _2384 * _2379;
        float _2387 = _2384 * _2380;
        float _2388 = dot(vec3(_621, _622, _623), vec3(cbLight._m0[_2358].xyz));
        float _4369 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
        float _2391 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
        float _2392 = dot(vec3(_621, _622, _623), vec3(_2385, _2386, _2387));
        float _4380 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
        float _2395 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
        float _2396 = dot(vec3(cbLight._m0[_2358].xyz), vec3(_2385, _2386, _2387));
        float _4391 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
        float _2400 = _2377 * _2377;
        float _2404 = ((_2395 * _2395) * (_2400 + (-1.0))) + 1.0;
        float _2411 = exp2(log2(1.0 - (isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0)))) * 5.0);
        float _2418 = 1.0 - _2377;
        float _2428 = (0.5 / (((_2038 * ((_2391 * _2418) + _2377)) + 9.9999999392252902907785028219223e-09) + (((_2038 * _2418) + _2377) * _2391))) * _2391;
        float _4402 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
        float _2430 = (isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0))) * (_2400 / ((_2404 * _2404) * 3.141590118408203125));
        float _2431 = isnan(1.0) ? _1888 : (isnan(_1888) ? 1.0 : min(_1888, 1.0));
        _2347 = (((((_2411 * _2060) + _785) * cbLight._m0[_2362].x) * _2430) * _2431) + _2233;
        _2349 = (((((_2411 * _2062) + _787) * cbLight._m0[_2362].y) * _2430) * _2431) + _2235;
        _2351 = (((((_2411 * _2063) + _788) * cbLight._m0[_2362].z) * _2430) * _2431) + _2237;
    }
    float _2566;
    float _2568;
    float _2570;
    float _2572;
    float _2574;
    float _2576;
    if (_1870.y == 0u)
    {
        float _2506 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2507 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2506;
        float _2508 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2506;
        float _2509 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2506;
        uvec4 _2521 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2522 = _2521.x;
        uint _2533 = uint((float(_2521.y) * floor(float(uint(cbSceneParam._m0[85u].y * _723) / _2522))) + floor(float(uint(cbSceneParam._m0[85u].x * _722) / _2522)));
        float _2543 = (log2(_2509 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2544 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
        uint _2547 = uint(isnan(14.0) ? _2544 : (isnan(_2544) ? 14.0 : min(_2544, 14.0)));
        uvec4 _2552 = texelFetch(g_lightClusterGridBuffer, int(((_2547 << 2u) + (_2533 << 6u)) >> 2u));
        uint _2553 = _2552.x;
        uint _2554 = _2521.z;
        float _2683;
        float _2685;
        float _2687;
        float _2689;
        float _2691;
        float _2693;
        if (((((1u << ((_2554 >> 4u) & 15u)) + 4294967295u) & _2553) == 0u) || ((_2554 & 240u) == 0u))
        {
            _2683 = 0.0;
            _2685 = 0.0;
            _2687 = 0.0;
            _2689 = 0.0;
            _2691 = 0.0;
            _2693 = 0.0;
        }
        else
        {
            float _2684;
            float _2686;
            float _2688;
            float _2690;
            float _2692;
            float _2694;
            float _2844 = 0.0;
            float _2845 = 0.0;
            float _2846 = 0.0;
            float _2847 = 0.0;
            float _2848 = 0.0;
            float _2849 = 0.0;
            uint _2850 = 0u;
            uint _2859;
            bool _2860;
            for (;;)
            {
                _2859 = texelFetch(g_lightClassification, int((((_2547 << 5u) + (_2533 << 9u)) + (_2850 << 2u)) >> 2u)).x;
                _2860 = _2859 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2860)
                {
                    frontier_phi_66_pred = _2844;
                    frontier_phi_66_pred_1 = _2849;
                    frontier_phi_66_pred_2 = _2848;
                    frontier_phi_66_pred_3 = _2847;
                    frontier_phi_66_pred_4 = _2846;
                    frontier_phi_66_pred_5 = _2845;
                }
                else
                {
                    float _2989;
                    float _2990;
                    float _2991;
                    float _2992;
                    float _2993;
                    float _2994;
                    uint _2995;
                    _2989 = _2844;
                    _2990 = _2845;
                    _2991 = _2846;
                    _2992 = _2847;
                    _2993 = _2848;
                    _2994 = _2849;
                    _2995 = _2859;
                    float _2916;
                    float _2917;
                    float _2918;
                    float _2919;
                    float _2920;
                    float _2921;
                    for (;;)
                    {
                        uint _2999 = uint(findLSB(_2995)) + (_2850 << 5u);
                        uint _2996 = (_2995 + 4294967295u) & _2995;
                        uint _3001 = _2999 * 48u;
                        vec4 _3015 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3001)).x, texelFetch(g_PointLightRenderingBuffer, int(_3001 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3001 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3001 + 3u)).x));
                        uint _3021 = (_2999 * 48u) + 4u;
                        vec4 _3034 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3021)).x, texelFetch(g_PointLightRenderingBuffer, int(_3021 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3021 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3021 + 3u)).x));
                        uint _3040 = (_2999 * 48u) + 8u;
                        vec3 _3051 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3040)).x, texelFetch(g_PointLightRenderingBuffer, int(_3040 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3040 + 2u)).x));
                        float _3055 = _3015.x - _2507;
                        float _3056 = _3015.y - _2508;
                        float _3057 = _3015.z - _2509;
                        float _3058 = dot(vec3(_3055, _3056, _3057), vec3(_3055, _3056, _3057));
                        float _3061 = inversesqrt(_3058);
                        float _3062 = _3061 * _3055;
                        float _3063 = _3061 * _3056;
                        float _3064 = _3061 * _3057;
                        float _3065 = dot(vec3(_741, _744, _747), vec3(_3062, _3063, _3064));
                        float _3070 = 1.0 - (_3058 * _3015.w);
                        float _4428 = isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0));
                        float _3071 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
                        float _3072 = sqrt(_3058) * _3034.w;
                        float _3075 = 1.39999997615814208984375 / (_3072 + 1.39999997615814208984375);
                        float _3076 = _3075 * _3075;
                        float _3079 = ((1.0 - _3076) * _3065) + _3076;
                        float _3082 = _3072 * _3072;
                        float _3086 = ((isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0))) * _3071) / ((_3082 * 0.699999988079071044921875) + 1.0);
                        float _3090 = (-0.0) - _2507;
                        float _3091 = (-0.0) - _2508;
                        float _3092 = (-0.0) - _2509;
                        float _3096 = inversesqrt(dot(vec3(_3090, _3091, _3092), vec3(_3090, _3091, _3092)));
                        float _3097 = _3096 * _3090;
                        float _3098 = _3096 * _3091;
                        float _3099 = _3096 * _3092;
                        float _3107 = exp2(log2(1.0 / ((_3082 * 3.5) + 5.0)) * 0.25);
                        float _3108 = 1.0 - _816;
                        float _3115 = sqrt(1.0 - ((1.0 - (_3108 * _3108)) * (1.0 - (_3107 * _3107))));
                        float _3116 = _3115 * _3115;
                        float _3117 = _3116 * _3116;
                        float _3118 = _3097 + _3062;
                        float _3119 = _3098 + _3063;
                        float _3120 = _3099 + _3064;
                        float _3124 = inversesqrt(dot(vec3(_3118, _3119, _3120), vec3(_3118, _3119, _3120)));
                        float _3128 = dot(vec3(_741, _744, _747), vec3(_3097, _3098, _3099));
                        float _4444 = isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0));
                        float _3131 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
                        float _3132 = dot(vec3(_741, _744, _747), vec3(_3124 * _3118, _3124 * _3119, _3124 * _3120));
                        float _4455 = isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0));
                        float _3135 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
                        float _3139 = ((_3135 * _3135) * (_3117 + (-1.0))) + 1.0;
                        float _3140 = _3075 * _3116;
                        float _3141 = _3140 * _3140;
                        float _3144 = ((1.0 - _3141) * _3065) + _3141;
                        float _4466 = isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : max(_3144, 0.0));
                        float _3145 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
                        float _3146 = 1.0 - _3116;
                        float _3156 = (0.5 / (((_3145 * ((_3131 * _3146) + _3116)) + 9.9999999392252902907785028219223e-09) + (((_3145 * _3146) + _3116) * _3131))) * _3145;
                        float _4477 = isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0));
                        float _3167 = (((_3117 * 3.1415927410125732421875) * (isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0)))) / ((_3139 * _3139) * ((_3082 * 2.1991131305694580078125) + 3.141590118408203125))) * _3071;
                        _2919 = (_3086 * _3034.x) + _2992;
                        _2920 = (_3086 * _3034.y) + _2993;
                        _2921 = (_3086 * _3034.z) + _2994;
                        _2916 = (_3167 * _3051.x) + _2989;
                        _2917 = (_3167 * _3051.y) + _2990;
                        _2918 = (_3167 * _3051.z) + _2991;
                        if (_2996 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2989 = _2916;
                            _2990 = _2917;
                            _2991 = _2918;
                            _2992 = _2919;
                            _2993 = _2920;
                            _2994 = _2921;
                            _2995 = _2996;
                        }
                    }
                    frontier_phi_66_pred = _2916;
                    frontier_phi_66_pred_1 = _2921;
                    frontier_phi_66_pred_2 = _2920;
                    frontier_phi_66_pred_3 = _2919;
                    frontier_phi_66_pred_4 = _2918;
                    frontier_phi_66_pred_5 = _2917;
                }
                _2684 = frontier_phi_66_pred;
                _2694 = frontier_phi_66_pred_1;
                _2692 = frontier_phi_66_pred_2;
                _2690 = frontier_phi_66_pred_3;
                _2688 = frontier_phi_66_pred_4;
                _2686 = frontier_phi_66_pred_5;
                uint _2851 = _2850 + 1u;
                if (_2851 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2844 = _2684;
                    _2845 = _2686;
                    _2846 = _2688;
                    _2847 = _2690;
                    _2848 = _2692;
                    _2849 = _2694;
                    _2850 = _2851;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2683 = _2684;
            _2685 = _2686;
            _2687 = _2688;
            _2689 = _2690;
            _2691 = _2692;
            _2693 = _2694;
        }
        uvec4 _2697 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2698 = _2697.z;
        uint _2700 = (_2698 >> 8u) & 15u;
        float _2812;
        float _2814;
        float _2816;
        float _2818;
        float _2820;
        float _2822;
        if (((4294967295u << _2700) & _2553) == 0u)
        {
            _2812 = _2683;
            _2814 = _2685;
            _2816 = _2687;
            _2818 = _2689;
            _2820 = _2691;
            _2822 = _2693;
        }
        else
        {
            float _2837 = inversesqrt(dot(vec3(_2507, _2508, _2509), vec3(_2507, _2508, _2509)));
            float _2838 = _2837 * _2507;
            float _2839 = _2837 * _2508;
            float _2840 = _2837 * _2509;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2700 < ((_2698 >> 12u) & 15u))
            {
                float _2813;
                float _2815;
                float _2817;
                float _2819;
                float _2821;
                float _2823;
                float _2972 = _2683;
                float _2973 = _2685;
                float _2974 = _2687;
                float _2975 = _2689;
                float _2976 = _2691;
                float _2977 = _2693;
                uint _2978 = _2700;
                uint _2987;
                bool _2988;
                for (;;)
                {
                    _2987 = texelFetch(g_lightClassification, int((((_2547 << 5u) + (_2533 << 9u)) + (_2978 << 2u)) >> 2u)).x;
                    _2988 = _2987 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2988)
                    {
                        frontier_phi_77_pred = _2977;
                        frontier_phi_77_pred_1 = _2976;
                        frontier_phi_77_pred_2 = _2975;
                        frontier_phi_77_pred_3 = _2974;
                        frontier_phi_77_pred_4 = _2973;
                        frontier_phi_77_pred_5 = _2972;
                    }
                    else
                    {
                        float _3181;
                        float _3182;
                        float _3183;
                        float _3184;
                        float _3185;
                        float _3186;
                        float _3475;
                        float _3476;
                        float _3477;
                        float _3478;
                        float _3479;
                        float _3480;
                        float _3194 = _2972;
                        float _3195 = _2973;
                        float _3196 = _2974;
                        float _3197 = _2975;
                        float _3198 = _2976;
                        float _3199 = _2977;
                        uint _3200 = _2987;
                        uint _3201;
                        vec4 _3226;
                        float _3227;
                        vec4 _3242;
                        vec3 _3254;
                        vec4 _3269;
                        vec4 _3284;
                        float _3331;
                        bool _3332;
                        for (;;)
                        {
                            uint _3211 = ((_2978 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3200));
                            _3201 = (_3200 + 4294967295u) & _3200;
                            uint _3213 = _3211 * 40u;
                            _3226 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3213)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 3u)).x));
                            _3227 = _3226.w;
                            uint _3229 = (_3211 * 40u) + 4u;
                            _3242 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3229)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 3u)).x));
                            uint _3244 = (_3211 * 40u) + 8u;
                            _3254 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3244)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 2u)).x));
                            uint _3256 = (_3211 * 40u) + 16u;
                            _3269 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3256)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 3u)).x));
                            uint _3271 = (_3211 * 40u) + 20u;
                            _3284 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3271)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 3u)).x));
                            uint _3287 = (_3211 * 40u) + 24u;
                            vec4 _3300 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3287)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 3u)).x));
                            uint _3306 = (_3211 * 40u) + 28u;
                            vec4 _3319 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3306)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 3u)).x));
                            _3331 = fma(_2509, _3319.z, fma(_2508, _3319.y, _3319.x * _2507)) + _3319.w;
                            _3332 = !((fma(_2509, _3300.z, fma(_2508, _3300.y, _3300.x * _2507)) + _3300.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3332)
                            {
                                float _3359 = _3226.x - _2507;
                                float _3360 = _3226.y - _2508;
                                float _3361 = _3226.z - _2509;
                                float _3362 = dot(vec3(_3359, _3360, _3361), vec3(_3359, _3360, _3361));
                                float _3365 = inversesqrt(_3362);
                                float _3366 = _3365 * _3359;
                                float _3367 = _3365 * _3360;
                                float _3368 = _3365 * _3361;
                                float _3372 = 1.0 - (_3362 / (_3227 * _3227));
                                float _4488 = isnan(0.0) ? _3372 : (isnan(_3372) ? 0.0 : max(_3372, 0.0));
                                float _3373 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
                                float _3377 = sqrt(_3362) * _3242.w;
                                float _3379 = 1.39999997615814208984375 / (_3377 + 1.39999997615814208984375);
                                float _3380 = _3379 * _3379;
                                float _3383 = ((1.0 - _3380) * dot(vec3(_3366, _3367, _3368), vec3(_741, _744, _747))) + _3380;
                                float _3386 = _3377 * _3377;
                                float _3390 = (fma(_2509, _3269.z, fma(_2508, _3269.y, _3269.x * _2507)) + _3269.w) / _3331;
                                float _3391 = (fma(_2509, _3284.z, fma(_2508, _3284.y, _3284.x * _2507)) + _3284.w) / _3331;
                                float _3395 = 1.0 - dot(vec2(_3390, _3391), vec2(_3390, _3391));
                                float _4504 = isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0));
                                float _3396 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
                                float _3397 = _3396 * (((isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : max(_3383, 0.0))) * _3373) / ((_3386 * 0.699999988079071044921875) + 1.0));
                                float _3409 = exp2(log2(1.0 / ((_3386 * 3.5) + 5.0)) * 0.25);
                                float _3410 = 1.0 - _816;
                                float _3417 = sqrt(1.0 - ((1.0 - (_3410 * _3410)) * (1.0 - (_3409 * _3409))));
                                float _3418 = _3417 * _3417;
                                float _3419 = _3418 * _3418;
                                float _3420 = _3366 - _2838;
                                float _3421 = _3367 - _2839;
                                float _3422 = _3368 - _2840;
                                float _3426 = inversesqrt(dot(vec3(_3420, _3421, _3422), vec3(_3420, _3421, _3422)));
                                float _3430 = dot(vec3(_741, _744, _747), vec3((-0.0) - _2838, (-0.0) - _2839, (-0.0) - _2840));
                                float _4515 = isnan(0.0) ? _3430 : (isnan(_3430) ? 0.0 : max(_3430, 0.0));
                                float _3433 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
                                float _3434 = dot(vec3(_741, _744, _747), vec3(_3426 * _3420, _3426 * _3421, _3426 * _3422));
                                float _4526 = isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0));
                                float _3437 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
                                float _3441 = ((_3437 * _3437) * (_3419 + (-1.0))) + 1.0;
                                float _3442 = _3379 * _3418;
                                float _3443 = _3442 * _3442;
                                float _3449 = ((1.0 - _3443) * dot(vec3(_741, _744, _747), vec3(_3366, _3367, _3368))) + _3443;
                                float _4537 = isnan(0.0) ? _3449 : (isnan(_3449) ? 0.0 : max(_3449, 0.0));
                                float _3450 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
                                float _3451 = 1.0 - _3418;
                                float _3461 = (0.5 / (((_3450 * ((_3433 * _3451) + _3418)) + 9.9999999392252902907785028219223e-09) + (((_3450 * _3451) + _3418) * _3433))) * _3450;
                                float _4548 = isnan(0.0) ? _3461 : (isnan(_3461) ? 0.0 : max(_3461, 0.0));
                                float _3471 = (_3396 * _3373) * (((_3419 * 3.1415927410125732421875) * (isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0)))) / ((_3441 * _3441) * ((_3386 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3397 * _3242.y;
                                frontier_phi_83_pred_1 = _3397 * _3242.x;
                                frontier_phi_83_pred_2 = _3471 * _3254.z;
                                frontier_phi_83_pred_3 = _3471 * _3254.y;
                                frontier_phi_83_pred_4 = _3471 * _3254.x;
                                frontier_phi_83_pred_5 = _3397 * _3242.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3479 = frontier_phi_83_pred;
                            _3478 = frontier_phi_83_pred_1;
                            _3477 = frontier_phi_83_pred_2;
                            _3476 = frontier_phi_83_pred_3;
                            _3475 = frontier_phi_83_pred_4;
                            _3480 = frontier_phi_83_pred_5;
                            _3184 = _3478 + _3197;
                            _3185 = _3479 + _3198;
                            _3186 = _3480 + _3199;
                            _3181 = _3475 + _3194;
                            _3182 = _3476 + _3195;
                            _3183 = _3477 + _3196;
                            if (_3201 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3194 = _3181;
                                _3195 = _3182;
                                _3196 = _3183;
                                _3197 = _3184;
                                _3198 = _3185;
                                _3199 = _3186;
                                _3200 = _3201;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3186;
                        frontier_phi_77_pred_1 = _3185;
                        frontier_phi_77_pred_2 = _3184;
                        frontier_phi_77_pred_3 = _3183;
                        frontier_phi_77_pred_4 = _3182;
                        frontier_phi_77_pred_5 = _3181;
                    }
                    _2823 = frontier_phi_77_pred;
                    _2821 = frontier_phi_77_pred_1;
                    _2819 = frontier_phi_77_pred_2;
                    _2817 = frontier_phi_77_pred_3;
                    _2815 = frontier_phi_77_pred_4;
                    _2813 = frontier_phi_77_pred_5;
                    uint _2979 = _2978 + 1u;
                    if (_2979 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2972 = _2813;
                        _2973 = _2815;
                        _2974 = _2817;
                        _2975 = _2819;
                        _2976 = _2821;
                        _2977 = _2823;
                        _2978 = _2979;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2817;
                frontier_phi_58_59_ladder_1 = _2823;
                frontier_phi_58_59_ladder_2 = _2821;
                frontier_phi_58_59_ladder_3 = _2819;
                frontier_phi_58_59_ladder_4 = _2815;
                frontier_phi_58_59_ladder_5 = _2813;
            }
            else
            {
                frontier_phi_58_59_ladder = _2687;
                frontier_phi_58_59_ladder_1 = _2693;
                frontier_phi_58_59_ladder_2 = _2691;
                frontier_phi_58_59_ladder_3 = _2689;
                frontier_phi_58_59_ladder_4 = _2685;
                frontier_phi_58_59_ladder_5 = _2683;
            }
            _2812 = frontier_phi_58_59_ladder_5;
            _2814 = frontier_phi_58_59_ladder_4;
            _2816 = frontier_phi_58_59_ladder;
            _2818 = frontier_phi_58_59_ladder_3;
            _2820 = frontier_phi_58_59_ladder_2;
            _2822 = frontier_phi_58_59_ladder_1;
        }
        float _2827 = isnan(1.0) ? _800 : (isnan(_800) ? 1.0 : min(_800, 1.0));
        _2566 = (_2827 * _2818) + _2002;
        _2568 = (_2827 * _2820) + _2004;
        _2570 = (_2827 * _2822) + _2006;
        _2572 = ((_2812 * _785) * _2827) + _2347;
        _2574 = ((_2814 * _787) * _2827) + _2349;
        _2576 = ((_2816 * _788) * _2827) + _2351;
    }
    else
    {
        _2566 = _2002;
        _2568 = _2004;
        _2570 = _2006;
        _2572 = _2347;
        _2574 = _2349;
        _2576 = _2351;
    }
    uint _2582 = _761 + uint(cbMatDynParam._m0[0u].w);
    float _2588 = ((((((_568.x - _565) * _501) + _565) * cbMtdParam._m0[13u].x) + ((((_522.x - _519) * _501) + _519) * cbMtdParam._m0[11u].x)) * _595) * cbInstanceData._m0[_2582].x;
    float _2589 = ((((((_568.y - _566) * _501) + _566) * cbMtdParam._m0[13u].y) + ((((_522.y - _520) * _501) + _520) * cbMtdParam._m0[11u].y)) * _595) * cbInstanceData._m0[_2582].y;
    float _2590 = ((((((_568.z - _567) * _501) + _567) * cbMtdParam._m0[13u].z) + ((((_522.z - _521) * _501) + _521) * cbMtdParam._m0[11u].z)) * _595) * cbInstanceData._m0[_2582].z;
    float _4564 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _4575 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _4586 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _2607 = (((isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0))) * (_2566 + ((isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0))) * _800))) + ((_2572 + ((isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0))) * _1640)) * cbPerFrame._m0[3u].x)) + _2588;
    float _2609 = (_2589 + ((_2574 + ((isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0))) * _1640)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0))) * (_2568 + ((isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0))) * _800)));
    float _2611 = (_2590 + ((_2576 + ((isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0))) * _1640)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0))) * (_2570 + ((isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0))) * _800)));
    float _2612 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
    float _2613 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
    float _2614 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
    float _2620 = cbMtdParam._m0[2u].x * _2588;
    float _2621 = cbMtdParam._m0[2u].y * _2589;
    float _2622 = cbMtdParam._m0[2u].z * _2590;
    float _4612 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2624 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
    uint _2625 = _760 + 6u;
    float _2633 = _722 / cbSceneParam._m0[86u].x;
    float _2634 = _723 / cbSceneParam._m0[86u].y;
    vec4 _2648 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2633, _2634, (log2((isnan(cbSceneParam._m0[77u].w) ? _644 : (isnan(_644) ? cbSceneParam._m0[77u].w : min(_644, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2650 = _2648.x;
    float _2651 = _2648.y;
    float _2652 = _2648.z;
    float _2653 = _2648.w;
    float _2745;
    float _2747;
    float _2749;
    float _2751;
    if (_644 > cbSceneParam._m0[78u].w)
    {
        float _2708 = isnan(_644) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _644 : min(cbSceneParam._m0[80u].w, _644));
        float _2709 = _2708 / _644;
        float _2720 = _2709 * _695;
        float _2721 = _696 * _2709;
        float _2722 = (-0.0) - _2721;
        float _2723 = _2709 * _697;
        float _2725 = (cbSceneParam._m0[77u].w * _2722) / _2708;
        float _2726 = _2725 + cbSceneParam._m0[79u].w;
        float _2727 = cbSceneParam._m0[79u].w - _2721;
        float _2733 = sqrt(((_2720 * _2720) + (_2721 * _2721)) + (_2723 * _2723));
        float _2736 = (1.0 - (cbSceneParam._m0[77u].w / _2708)) * _2733;
        float _2741 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2743 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2929;
        if (abs((_2722 - _2725) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2929 = ((((_2726 > 0.0) ? exp2(_2741 * _2726) : (2.0 - exp2(_2743 * _2726))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2736;
        }
        else
        {
            float _2873 = 1.0 / cbSceneParam._m0[80u].x;
            float _2874 = isnan(_2727) ? _2726 : (isnan(_2726) ? _2727 : max(_2726, _2727));
            float _2875 = isnan(_2727) ? _2726 : (isnan(_2726) ? _2727 : min(_2726, _2727));
            float _2884 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : min(_2874, 0.0));
            float _2885 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : min(_2875, 0.0));
            _2929 = ((abs(_2733 / _2722) * cbSceneParam._m0[80u].y) * ((((_2884 - _2885) * 2.0) - ((exp2(_2741 * (isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0)))) - exp2(_2741 * (isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0))))) * _2873)) - ((exp2(_2743 * _2884) - exp2(_2743 * _2885)) * _2873))) + (_2736 * cbSceneParam._m0[80u].z);
        }
        vec4 _2931 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2633, _2634, 1.0), 0.0);
        float _2940 = exp2((_2929 * (-1.44269502162933349609375)) * (1.0 - _2931.w));
        float _2941 = log2(_2940);
        float _2957 = log2(_2653);
        _2745 = (exp2(_2957 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2941 * cbSceneParam._m0[78u].x)) * _2931.x) / cbSceneParam._m0[78u].x)) + _2650;
        _2747 = (exp2(_2957 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2941 * cbSceneParam._m0[78u].y)) * _2931.y) / cbSceneParam._m0[78u].y)) + _2651;
        _2749 = (exp2(_2957 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2941 * cbSceneParam._m0[78u].z)) * _2931.z) / cbSceneParam._m0[78u].z)) + _2652;
        _2751 = _2940 * _2653;
    }
    else
    {
        _2745 = _2650;
        _2747 = _2651;
        _2749 = _2652;
        _2751 = _2653;
    }
    bool _2967;
    vec4 _2761;
    vec4 _2783;
    float _2785;
    float _2789;
    float _2790;
    float _2791;
    float _2794;
    float _2797;
    float _2800;
    float _2801;
    bool _2811;
    for (;;)
    {
        _2761 = cbMatDynParam._m0[0u];
        float _2763 = roundEven(_2761.y);
        bool _2764 = _2763 == 3.0;
        float _2765 = log2(_2751);
        float _2769 = exp2(_2765 * cbSceneParam._m0[78u].x);
        float _2770 = exp2(_2765 * cbSceneParam._m0[78u].y);
        float _2771 = exp2(_2765 * cbSceneParam._m0[78u].z);
        float _2772 = _2769 * _2612;
        float _2773 = _2770 * _2613;
        float _2774 = _2771 * _2614;
        float _2781 = _711 + (-0.5);
        _2783 = cbMtdParam._m0[1u];
        _2785 = _2783.y * _2781;
        float _2788 = (_2763 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2789 = _2788 * (_2764 ? _2772 : (_2772 + (cbSceneParam._m0[72u].w * _2745)));
        _2790 = _2788 * (_2764 ? _2773 : (_2773 + (cbSceneParam._m0[72u].w * _2747)));
        _2791 = _2788 * (_2764 ? _2774 : (_2774 + (cbSceneParam._m0[72u].w * _2749)));
        _2794 = ((_2620 * _2624) * _2769) * _2788;
        _2797 = ((_2621 * _2624) * _2770) * _2788;
        _2800 = ((_2622 * _2624) * _2771) * _2788;
        _2801 = _2781 * 0.999000012874603271484375;
        _2811 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2811)
        {
            if ((cbInstanceData._m0[_760 + 7u].x + _2801) < 0.5)
            {
                _2967 = true;
                break;
            }
        }
        uint _2908 = _761 + uint(_2761.w);
        if ((cbInstanceData._m0[_2908].w < 1.0) && ((cbInstanceData._m0[_2908].w + _2801) < 0.5))
        {
            _2967 = true;
            break;
        }
        if ((_2785 + 1.0) < _2783.x)
        {
            _2967 = true;
            break;
        }
        _2967 = false;
        break;
    }
    float _3172;
    if (_2967)
    {
        discard_state = true;
        _3172 = 0.0;
    }
    else
    {
        _3172 = cbInstanceData._m0[_2625].w;
    }
    SV_Target.x = _2789;
    SV_Target.y = _2790;
    SV_Target.z = _2791;
    SV_Target.w = _3172;
    SV_Target_1.x = _2794;
    SV_Target_1.y = _2797;
    SV_Target_1.z = _2800;
    SV_Target_1.w = cbInstanceData._m0[_2625].w;
    discard_exit();
}


