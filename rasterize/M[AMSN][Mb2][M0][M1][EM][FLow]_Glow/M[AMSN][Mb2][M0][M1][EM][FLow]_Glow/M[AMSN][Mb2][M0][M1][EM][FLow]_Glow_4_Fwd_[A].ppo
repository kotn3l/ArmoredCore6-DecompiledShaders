#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1148;
float _3547;
float _3548;
float _3549;
float _3550;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _199 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _200 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _201 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _207 = inversesqrt(dot(vec3(_199, _200, _201), vec3(_199, _200, _201)));
    float _214 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _243 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _249 = _243.x * cbMtdParam._m0[9u].x;
    float _250 = _243.y * cbMtdParam._m0[9u].y;
    float _251 = _243.z * cbMtdParam._m0[9u].z;
    vec4 _289 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[5u].w));
    float _305 = (TEXCOORD_3.x - ((cbMtdParam._m0[14u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[14u].y + 1.0);
    float _3559 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _306 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
    float _313 = (((_289.x * cbMtdParam._m0[10u].x) - _249) * _306) + _249;
    float _314 = (((_289.y * cbMtdParam._m0[10u].y) - _250) * _306) + _250;
    float _315 = (((_289.z * cbMtdParam._m0[10u].z) - _251) * _306) + _251;
    vec4 _332 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    vec4 _347 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[4u].w));
    float _355 = (_347.x * 2.0) + (-1.0);
    float _357 = (_347.y * 2.0) + (-1.0);
    float _358 = dot(vec2(_355, _357), vec2(_355, _357));
    float _3570 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    vec4 _375 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _379 = _375.z;
    float _382 = (_375.x * 2.0) + (-1.0);
    float _383 = (_375.y * 2.0) + (-1.0);
    float _384 = dot(vec2(_382, _383), vec2(_382, _383));
    float _3581 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _389 = sqrt(1.0 - (isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0))));
    float _392 = (_306 * (_347.z - _379)) + _379;
    float _405 = (cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _406 = (cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _435 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * ((cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * ((cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[10u].w));
    float _440 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[15u].w;
    float _447 = ((_435.y * 0.5) + (-0.25)) * cbMtdParam._m0[15u].z;
    float _449 = (-0.0) - (cbMtdParam._m0[15u].z * ((_435.x * 0.5) + (-0.25)));
    float _451 = fract(_440);
    float _453 = fract(_440 + 0.5);
    float _454 = _451 * _449;
    float _455 = _447 * _451;
    float _458 = _453 * _449;
    float _459 = _447 * _453;
    float _464 = abs((_451 * 2.0) + (-1.0));
    vec4 _480 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_454 + _405) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_455 + _406) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _482 = _480.x;
    float _483 = _480.y;
    float _484 = _480.z;
    vec4 _485 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_458 + _405) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_459 + _406) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _512 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _513 = (cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _526 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_454 + _512) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_455 + _513) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _528 = _526.x;
    float _529 = _526.y;
    float _530 = _526.z;
    vec4 _531 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_458 + _512) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_459 + _513) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _557 = (TEXCOORD_9.x - ((cbMtdParam._m0[16u].y * (1.0 - TEXCOORD_9.x)) * (_332.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[16u].z + 1.0);
    float _3592 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _558 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
    float _568 = (_306 * (_355 - _382)) + _382;
    float _569 = (_306 * (_357 - _383)) + _383;
    float _570 = (_306 * (sqrt(1.0 - (isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0)))) - _389)) + _389;
    float _573 = fma(_570, _214 * NORMAL.x, fma(_569, _221 * TANGENT.x, (_207 * _199) * _568));
    float _576 = fma(_570, _214 * NORMAL.y, fma(_569, _221 * TANGENT.y, (_207 * _200) * _568));
    float _579 = fma(_570, _214 * NORMAL.z, fma(_569, _221 * TANGENT.z, (_207 * _201) * _568));
    float _583 = inversesqrt(dot(vec3(_573, _576, _579), vec3(_573, _576, _579)));
    float _584 = _583 * _573;
    float _585 = _583 * _576;
    float _586 = _583 * _579;
    float _3603 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _587 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
    float _3614 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _3625 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _3636 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _606 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _647 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _657 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _647);
    float _658 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _647);
    float _659 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _647);
    float _663 = inversesqrt(dot(vec3(_657, _658, _659), vec3(_657, _658, _659)));
    float _664 = _657 * _663;
    float _665 = _658 * _663;
    float _666 = _659 * _663;
    vec4 _671 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _673 = _671.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _829 = sqrt(((_657 * _657) + (_658 * _658)) + (_659 * _659));
        float _835 = (cbMatDynParam._m0[5u].x * _829) + cbMatDynParam._m0[5u].y;
        float _3647 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _836 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
        float _840 = (cbMatDynParam._m0[5u].z * _829) + cbMatDynParam._m0[5u].w;
        float _3658 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0))) - _836)) + _836) < ((_673 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _685 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _686 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _705 = fma(_586, cbSceneParam._m0[5u].z, fma(_585, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _584));
    float _708 = fma(_586, cbSceneParam._m0[6u].z, fma(_585, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _584));
    float _711 = fma(_586, cbSceneParam._m0[7u].z, fma(_585, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _584));
    uint _724 = uint(roundEven(NORMAL.w)) * 13u;
    uint _725 = _724 + 9u;
    uint _726 = _725 + uint(cbMatDynParam._m0[0u].w);
    float _732 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0)))) * cbInstanceData._m0[_726].x;
    float _733 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0)))) * cbInstanceData._m0[_726].y;
    float _734 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0)))) * cbInstanceData._m0[_726].z;
    float _3669 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _735 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
    float _3680 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _736 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
    float _3691 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _737 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
    vec4 _746 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _685, cbSceneParam._m0[86u].y * _686));
    float _749 = _746.x * TEXCOORD_3.w;
    float _750 = dot(vec3(_584, _585, _586), vec3(_664, _665, _666));
    float _753 = _750 * 2.0;
    float _757 = (_753 * _584) - _664;
    float _758 = (_753 * _585) - _665;
    float _759 = (_753 * _586) - _666;
    float _763 = abs(dot(vec3(_664, _665, _666), vec3(_584, _585, _586)));
    float _3702 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _765 = sqrt(_587);
    float _778 = exp2((_765 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_765 * 3.0));
    float _810 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _814 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _818 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1147;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _873 = fma(_818, cbModelParam._m0[26u].z, fma(_814, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _810));
        float _877 = fma(_818, cbModelParam._m0[27u].z, fma(_814, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _810));
        float _881 = fma(_818, cbModelParam._m0[28u].z, fma(_814, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _810));
        float _905 = _810 + _584;
        float _906 = _814 + _585;
        float _907 = _818 + _586;
        float _917 = fma(_907, cbModelParam._m0[26u].z, fma(_906, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _905)) - _873;
        float _918 = fma(_907, cbModelParam._m0[27u].z, fma(_906, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _905)) - _877;
        float _919 = fma(_907, cbModelParam._m0[28u].z, fma(_906, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _905)) - _881;
        float _923 = inversesqrt(dot(vec3(_917, _918, _919), vec3(_917, _918, _919)));
        float _936 = ((_923 * _917) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_873 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _937 = ((_923 * _918) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_877 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _938 = ((_923 * _919) / cbModelParam._m0[34u].z) + ((((((_881 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _941 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_936, _937, _938), 0.0);
        vec4 _948 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_936, _937, _938), 0.0);
        vec4 _955 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_936, _937, _938), 0.0);
        vec4 _962 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_936, _937, _938), 0.0);
        float _975 = exp2((_941.w + (-0.5)) * 20.0) * 2.0;
        float _976 = _975 * (_941.x + (-0.5));
        float _977 = _975 * (_941.y + (-0.5));
        float _978 = _975 * (_941.z + (-0.5));
        float _985 = exp2((_948.w + (-0.5)) * 20.0) * 2.0;
        float _986 = _985 * (_948.x + (-0.5));
        float _987 = _985 * (_948.y + (-0.5));
        float _988 = _985 * (_948.z + (-0.5));
        float _995 = exp2((_955.w + (-0.5)) * 20.0) * 2.0;
        float _996 = _995 * (_955.x + (-0.5));
        float _997 = _995 * (_955.y + (-0.5));
        float _998 = _995 * (_955.z + (-0.5));
        float _1005 = exp2((_962.w + (-0.5)) * 20.0) * 2.0;
        float _1006 = _1005 * (_962.x + (-0.5));
        float _1007 = _1005 * (_962.y + (-0.5));
        float _1008 = _1005 * (_962.z + (-0.5));
        float _1009 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1010 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1011 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1012 = _976 * 0.5;
        float _1013 = _986 * 0.5;
        float _1014 = _996 * 0.5;
        float _1015 = dot(vec3(_1012, _1013, _1014), vec3(_1012, _1013, _1014));
        float _1020 = (_1015 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1015);
        float _1029 = (dot(vec3(_584, _585, _586), vec3(_1020 * _1012, _1020 * _1013, _1020 * _1014)) + 1.0) * 0.5;
        float _3728 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1039 = sqrt(((_1013 * _1013) + (_1012 * _1012)) + (_1014 * _1014)) / (_1009 + 9.9999997473787516355514526367188e-06);
        float _3739 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1040 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _1041 = _1040 * 2.0;
        float _1045 = (1.0 - _1040) / (_1040 + 1.0);
        float _3750 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1046 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
        float _1055 = ((((1.0 - _1046) * (_1041 + 2.0)) * exp2(log2(isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0))) * (_1041 + 1.0))) + _1046) * _1009;
        float _1056 = _977 * 0.5;
        float _1057 = _987 * 0.5;
        float _1058 = _997 * 0.5;
        float _1059 = dot(vec3(_1056, _1057, _1058), vec3(_1056, _1057, _1058));
        float _1064 = (_1059 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1059);
        float _1072 = (dot(vec3(_584, _585, _586), vec3(_1064 * _1056, _1064 * _1057, _1064 * _1058)) + 1.0) * 0.5;
        float _3761 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1081 = sqrt(((_1057 * _1057) + (_1056 * _1056)) + (_1058 * _1058)) / (_1010 + 9.9999997473787516355514526367188e-06);
        float _3772 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1082 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
        float _1083 = _1082 * 2.0;
        float _1087 = (1.0 - _1082) / (_1082 + 1.0);
        float _3783 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
        float _1097 = ((((1.0 - _1088) * (_1083 + 2.0)) * exp2(log2(isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0))) * (_1083 + 1.0))) + _1088) * _1010;
        float _1098 = _978 * 0.5;
        float _1099 = _988 * 0.5;
        float _1100 = _998 * 0.5;
        float _1101 = dot(vec3(_1098, _1099, _1100), vec3(_1098, _1099, _1100));
        float _1106 = (_1101 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1101);
        float _1114 = (dot(vec3(_584, _585, _586), vec3(_1106 * _1098, _1106 * _1099, _1106 * _1100)) + 1.0) * 0.5;
        float _3794 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1123 = sqrt(((_1099 * _1099) + (_1098 * _1098)) + (_1100 * _1100)) / (_1011 + 9.9999997473787516355514526367188e-06);
        float _3805 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1124 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
        float _1125 = _1124 * 2.0;
        float _1129 = (1.0 - _1124) / (_1124 + 1.0);
        float _3816 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1130 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _1139 = ((((1.0 - _1130) * (_1125 + 2.0)) * exp2(log2(isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) * (_1125 + 1.0))) + _1130) * _1011;
        _1147 = _978;
        _1149 = _977;
        _1150 = _976;
        _1151 = _988;
        _1152 = _987;
        _1153 = _986;
        _1154 = _998;
        _1155 = _997;
        _1156 = _996;
        _1157 = _1011;
        _1158 = _1010;
        _1159 = _1009;
        _1160 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0)));
        _1161 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0)));
        _1162 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0)));
    }
    else
    {
        _1147 = _1148;
        _1149 = _1148;
        _1150 = _1148;
        _1151 = _1148;
        _1152 = _1148;
        _1153 = _1148;
        _1154 = _1148;
        _1155 = _1148;
        _1156 = _1148;
        _1157 = _1148;
        _1158 = _1148;
        _1159 = _1148;
        _1160 = 0.0;
        _1161 = 0.0;
        _1162 = 0.0;
    }
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1191 = fma(_818, cbModelParam._m0[30u].z, fma(_814, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _810));
        float _1195 = fma(_818, cbModelParam._m0[31u].z, fma(_814, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _810));
        float _1199 = fma(_818, cbModelParam._m0[32u].z, fma(_814, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _810));
        float _1222 = _810 + _584;
        float _1223 = _814 + _585;
        float _1224 = _818 + _586;
        float _1234 = fma(_1224, cbModelParam._m0[30u].z, fma(_1223, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1222)) - _1191;
        float _1235 = fma(_1224, cbModelParam._m0[31u].z, fma(_1223, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1222)) - _1195;
        float _1236 = fma(_1224, cbModelParam._m0[32u].z, fma(_1223, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1222)) - _1199;
        float _1240 = inversesqrt(dot(vec3(_1234, _1235, _1236), vec3(_1234, _1235, _1236)));
        float _1253 = ((_1240 * _1234) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1191 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1254 = ((_1240 * _1235) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1195 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1255 = ((_1240 * _1236) / cbModelParam._m0[35u].z) + ((((((_1199 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1257 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1253, _1254, _1255), 0.0);
        vec4 _1264 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1253, _1254, _1255), 0.0);
        vec4 _1271 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1253, _1254, _1255), 0.0);
        vec4 _1278 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1253, _1254, _1255), 0.0);
        float _1290 = exp2((_1257.w + (-0.5)) * 20.0) * 2.0;
        float _1291 = _1290 * (_1257.x + (-0.5));
        float _1292 = _1290 * (_1257.y + (-0.5));
        float _1293 = _1290 * (_1257.z + (-0.5));
        float _1300 = exp2((_1264.w + (-0.5)) * 20.0) * 2.0;
        float _1301 = _1300 * (_1264.x + (-0.5));
        float _1302 = _1300 * (_1264.y + (-0.5));
        float _1303 = _1300 * (_1264.z + (-0.5));
        float _1310 = exp2((_1271.w + (-0.5)) * 20.0) * 2.0;
        float _1311 = _1310 * (_1271.x + (-0.5));
        float _1312 = _1310 * (_1271.y + (-0.5));
        float _1313 = _1310 * (_1271.z + (-0.5));
        float _1320 = exp2((_1278.w + (-0.5)) * 20.0) * 2.0;
        float _1321 = _1320 * (_1278.x + (-0.5));
        float _1322 = _1320 * (_1278.y + (-0.5));
        float _1323 = _1320 * (_1278.z + (-0.5));
        float _1324 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1325 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1326 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1327 = _1291 * 0.5;
        float _1328 = _1301 * 0.5;
        float _1329 = _1311 * 0.5;
        float _1330 = dot(vec3(_1327, _1328, _1329), vec3(_1327, _1328, _1329));
        float _1335 = (_1330 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1330);
        float _1343 = (dot(vec3(_584, _585, _586), vec3(_1335 * _1327, _1335 * _1328, _1335 * _1329)) + 1.0) * 0.5;
        float _3857 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1352 = sqrt(((_1328 * _1328) + (_1327 * _1327)) + (_1329 * _1329)) / (_1324 + 9.9999997473787516355514526367188e-06);
        float _3868 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1353 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
        float _1354 = _1353 * 2.0;
        float _1358 = (1.0 - _1353) / (_1353 + 1.0);
        float _3879 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1359 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
        float _1368 = ((((1.0 - _1359) * (_1354 + 2.0)) * exp2(log2(isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0))) * (_1354 + 1.0))) + _1359) * _1324;
        float _1369 = _1292 * 0.5;
        float _1370 = _1302 * 0.5;
        float _1371 = _1312 * 0.5;
        float _1372 = dot(vec3(_1369, _1370, _1371), vec3(_1369, _1370, _1371));
        float _1377 = (_1372 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1372);
        float _1385 = (dot(vec3(_584, _585, _586), vec3(_1377 * _1369, _1377 * _1370, _1377 * _1371)) + 1.0) * 0.5;
        float _3890 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1394 = sqrt(((_1370 * _1370) + (_1369 * _1369)) + (_1371 * _1371)) / (_1325 + 9.9999997473787516355514526367188e-06);
        float _3901 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1395 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _1396 = _1395 * 2.0;
        float _1400 = (1.0 - _1395) / (_1395 + 1.0);
        float _3912 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1401 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _1410 = ((((1.0 - _1401) * (_1396 + 2.0)) * exp2(log2(isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0))) * (_1396 + 1.0))) + _1401) * _1325;
        float _1411 = _1293 * 0.5;
        float _1412 = _1303 * 0.5;
        float _1413 = _1313 * 0.5;
        float _1414 = dot(vec3(_1411, _1412, _1413), vec3(_1411, _1412, _1413));
        float _1419 = (_1414 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1414);
        float _1427 = (dot(vec3(_584, _585, _586), vec3(_1419 * _1411, _1419 * _1412, _1419 * _1413)) + 1.0) * 0.5;
        float _3923 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1436 = sqrt(((_1412 * _1412) + (_1411 * _1411)) + (_1413 * _1413)) / (_1326 + 9.9999997473787516355514526367188e-06);
        float _3934 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1437 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _1438 = _1437 * 2.0;
        float _1442 = (1.0 - _1437) / (_1437 + 1.0);
        float _3945 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1443 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1452 = ((((1.0 - _1443) * (_1438 + 2.0)) * exp2(log2(isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))) * (_1438 + 1.0))) + _1443) * _1326;
        _1460 = _1293;
        _1461 = _1292;
        _1462 = _1291;
        _1463 = _1303;
        _1464 = _1302;
        _1465 = _1301;
        _1466 = _1313;
        _1467 = _1312;
        _1468 = _1311;
        _1469 = _1326;
        _1470 = _1325;
        _1471 = _1324;
        _1472 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0)));
        _1473 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0)));
        _1474 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0)));
    }
    else
    {
        _1460 = _1148;
        _1461 = _1148;
        _1462 = _1148;
        _1463 = _1148;
        _1464 = _1148;
        _1465 = _1148;
        _1466 = _1148;
        _1467 = _1148;
        _1468 = _1148;
        _1469 = _1148;
        _1470 = _1148;
        _1471 = _1148;
        _1472 = 0.0;
        _1473 = 0.0;
        _1474 = 0.0;
    }
    float _1484 = (cbModelParam._m0[1u].x * (_1472 - _1160)) + _1160;
    float _1485 = (cbModelParam._m0[1u].x * (_1473 - _1161)) + _1161;
    float _1486 = (cbModelParam._m0[1u].x * (_1474 - _1162)) + _1162;
    float _1507 = fma(_1486, cbSceneParam._m0[89u].z, fma(_1485, cbSceneParam._m0[89u].y, _1484 * cbSceneParam._m0[89u].x));
    float _1510 = fma(_1486, cbSceneParam._m0[90u].z, fma(_1485, cbSceneParam._m0[90u].y, _1484 * cbSceneParam._m0[90u].x));
    float _1513 = fma(_1486, cbSceneParam._m0[91u].z, fma(_1485, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1484));
    float _1528 = _757 * 0.5;
    float _1529 = _758 * 0.5;
    float _1530 = _759 * 0.5;
    float _1531 = dot(vec4(_1528, _1529, _1530, 1.0), vec4(_1462, _1465, _1468, _1471));
    float _1534 = dot(vec4(_1528, _1529, _1530, 1.0), vec4(_1461, _1464, _1467, _1470));
    float _1537 = dot(vec4(_1528, _1529, _1530, 1.0), vec4(_1460, _1463, _1466, _1469));
    float _1571;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1544 = dot(vec4(_1528, _1529, _1530, 1.0), vec4(_1147, _1151, _1154, _1157));
        float _1548 = dot(vec4(_1528, _1529, _1530, 1.0), vec4(_1149, _1152, _1155, _1158));
        float _1552 = dot(vec4(_1528, _1529, _1530, 1.0), vec4(_1150, _1153, _1156, _1159));
        float _1559 = dot(vec4(cbModelParam._m0[39u]), vec4(_1528, _1529, _1530, 1.0));
        _1571 = dot(vec3(isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0)), isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0)), isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1559) ? 0.0 : (isnan(0.0) ? _1559 : max(0.0, _1559))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1571 = 1.0;
    }
    float _1582;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1573 = dot(vec4(cbModelParam._m0[40u]), vec4(_1528, _1529, _1530, 1.0));
        _1582 = dot(vec3(isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0)), isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0)), isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1573) ? 0.0 : (isnan(0.0) ? _1573 : max(0.0, _1573))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1582 = 1.0;
    }
    float _1586 = (_1582 * cbModelParam._m0[1u].x) + (_1571 * (1.0 - cbModelParam._m0[1u].x));
    float _1596 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _587);
    float _1597 = isnan(_1596) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1596 : min(cbModelParam._m0[25u].z, _1596));
    float _1677;
    float _1679;
    float _1681;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1644 = fma(_818, cbModelParam._m0[13u].z, fma(_814, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _810)) + cbModelParam._m0[13u].w;
        float _1648 = fma(_818, cbModelParam._m0[14u].z, fma(_814, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _810)) + cbModelParam._m0[14u].w;
        float _1652 = fma(_818, cbModelParam._m0[15u].z, fma(_814, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _810)) + cbModelParam._m0[15u].w;
        float _1655 = fma(_759, cbModelParam._m0[13u].z, fma(_758, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _757));
        float _1658 = fma(_759, cbModelParam._m0[14u].z, fma(_758, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _757));
        float _1661 = fma(_759, cbModelParam._m0[15u].z, fma(_758, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _757));
        float _1689;
        if (_1655 > 0.0)
        {
            _1689 = abs((1.0 - _1644) / _1655);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1655 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1644 + 1.0) / _1655);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1689 = frontier_phi_17_15_ladder;
        }
        float _1891;
        if (_1658 > 0.0)
        {
            _1891 = abs((1.0 - _1648) / _1658);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1658 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1648 + 1.0) / _1658);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1891 = frontier_phi_26_22_ladder;
        }
        float _2134;
        if (_1661 > 0.0)
        {
            _2134 = abs((1.0 - _1652) / _1661);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1661 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1652 + 1.0) / _1661);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2134 = frontier_phi_38_33_ladder;
        }
        float _2136 = isnan(_1891) ? _1689 : (isnan(_1689) ? _1891 : min(_1689, _1891));
        float _2137 = isnan(_2134) ? _2136 : (isnan(_2136) ? _2134 : min(_2136, _2134));
        float _2141 = (_2137 * _1655) + _1644;
        float _2142 = (_2137 * _1658) + _1648;
        float _2143 = (_2137 * _1661) + _1652;
        float _2144 = _2137 * 9.9999997473787516355514526367188e-05;
        float _2146 = (-1.0) - _2144;
        float _2148 = _2144 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2143 > _2148) || ((_2143 < _2146) || ((_2142 > _2148) || ((_2142 < _2146) || ((_2141 < _2146) || (_2141 > _2148))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2267 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2143, cbModelParam._m0[9u].z, fma(_2142, cbModelParam._m0[9u].y, _2141 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2143, cbModelParam._m0[10u].z, fma(_2142, cbModelParam._m0[10u].y, _2141 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2143, cbModelParam._m0[11u].z, fma(_2142, cbModelParam._m0[11u].y, _2141 * cbModelParam._m0[11u].x))), _1597);
            frontier_phi_16_38_ladder = _2267.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2267.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2267.x * cbModelParam._m0[1u].y;
        }
        _1677 = frontier_phi_16_38_ladder_2;
        _1679 = frontier_phi_16_38_ladder_1;
        _1681 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1665 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_757, _758, _759), _1597);
        _1677 = _1665.x * cbModelParam._m0[1u].y;
        _1679 = _1665.y * cbModelParam._m0[1u].y;
        _1681 = _1665.z * cbModelParam._m0[1u].y;
    }
    float _1685 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _587);
    float _1686 = isnan(_1685) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1685 : min(cbModelParam._m0[25u].w, _1685));
    float _1776;
    float _1778;
    float _1780;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1740 = fma(_818, cbModelParam._m0[21u].z, fma(_814, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _810)) + cbModelParam._m0[21u].w;
        float _1744 = fma(_818, cbModelParam._m0[22u].z, fma(_814, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _810)) + cbModelParam._m0[22u].w;
        float _1748 = fma(_818, cbModelParam._m0[23u].z, fma(_814, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _810)) + cbModelParam._m0[23u].w;
        float _1751 = fma(_759, cbModelParam._m0[21u].z, fma(_758, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _757));
        float _1754 = fma(_759, cbModelParam._m0[22u].z, fma(_758, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _757));
        float _1757 = fma(_759, cbModelParam._m0[23u].z, fma(_758, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _757));
        float _1896;
        if (_1751 > 0.0)
        {
            _1896 = abs((1.0 - _1740) / _1751);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1751 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1740 + 1.0) / _1751);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1896 = frontier_phi_28_24_ladder;
        }
        float _2161;
        if (_1754 > 0.0)
        {
            _2161 = abs((1.0 - _1744) / _1754);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1754 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1744 + 1.0) / _1754);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2161 = frontier_phi_40_35_ladder;
        }
        float _2366;
        if (_1757 > 0.0)
        {
            _2366 = abs((1.0 - _1748) / _1757);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1757 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1748 + 1.0) / _1757);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2366 = frontier_phi_49_46_ladder;
        }
        float _2368 = isnan(_2161) ? _1896 : (isnan(_1896) ? _2161 : min(_1896, _2161));
        float _2369 = isnan(_2366) ? _2368 : (isnan(_2368) ? _2366 : min(_2368, _2366));
        float _2373 = (_2369 * _1751) + _1740;
        float _2374 = (_2369 * _1754) + _1744;
        float _2375 = (_2369 * _1757) + _1748;
        float _2376 = _2369 * 9.9999997473787516355514526367188e-05;
        float _2377 = (-1.0) - _2376;
        float _2379 = _2376 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2375 > _2379) || ((_2375 < _2377) || ((_2374 > _2379) || ((_2374 < _2377) || ((_2373 < _2377) || (_2373 > _2379))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2603 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2375, cbModelParam._m0[17u].z, fma(_2374, cbModelParam._m0[17u].y, _2373 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2375, cbModelParam._m0[18u].z, fma(_2374, cbModelParam._m0[18u].y, _2373 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2375, cbModelParam._m0[19u].z, fma(_2374, cbModelParam._m0[19u].y, _2373 * cbModelParam._m0[19u].x))), _1686);
            frontier_phi_25_49_ladder = _2603.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2603.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2603.x * cbModelParam._m0[1u].z;
        }
        _1776 = frontier_phi_25_49_ladder_2;
        _1778 = frontier_phi_25_49_ladder_1;
        _1780 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1760 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_757, _758, _759), _1686);
        _1776 = _1760.x * cbModelParam._m0[1u].z;
        _1778 = _1760.y * cbModelParam._m0[1u].z;
        _1780 = _1760.z * cbModelParam._m0[1u].z;
    }
    float _1792 = ((((1.0 - _778) * ((_765 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_778 * _765)) * _749;
    float _1793 = _1792 * ((cbModelParam._m0[1u].w * (_1776 - _1677)) + _1677);
    float _1794 = _1792 * ((cbModelParam._m0[1u].w * (_1778 - _1679)) + _1679);
    float _1795 = _1792 * ((cbModelParam._m0[1u].w * (_1780 - _1681)) + _1681);
    float _1798 = fma(_1795, cbSceneParam._m0[89u].z, fma(_1794, cbSceneParam._m0[89u].y, _1793 * cbSceneParam._m0[89u].x));
    float _1801 = fma(_1795, cbSceneParam._m0[90u].z, fma(_1794, cbSceneParam._m0[90u].y, _1793 * cbSceneParam._m0[90u].x));
    float _1804 = fma(_1795, cbSceneParam._m0[91u].z, fma(_1794, cbSceneParam._m0[91u].y, _1793 * cbSceneParam._m0[91u].x));
    uvec4 _1814 = floatBitsToUint(cbInstanceData._m0[_724 + 5u]);
    uint _1816 = _1814.x * 14u;
    uint _1817 = _1816 + 13u;
    float _1824 = _749 + (-1.0);
    float _1829 = (cbLight._m0[_1817].x * _1824) + 1.0;
    float _1830 = (cbLight._m0[_1817].y * _1824) + 1.0;
    float _1831 = (cbLight._m0[_1817].z * _1824) + 1.0;
    float _1832 = (cbLight._m0[_1817].w * _1824) + 1.0;
    uint _1833 = _1816 + 5u;
    float _1839 = isnan(1.0) ? _1830 : (isnan(_1830) ? 1.0 : min(_1830, 1.0));
    uint _1843 = _1816 + 4u;
    float _1849 = isnan(1.0) ? _1829 : (isnan(_1829) ? 1.0 : min(_1829, 1.0));
    uint _1853 = _1816 | 1u;
    float _1864 = dot(vec3(cbLight._m0[_1816].xyz), vec3(_584, _585, _586));
    float _1867 = dot(vec3(cbLight._m0[_1853].xyz), vec3(_584, _585, _586));
    float _4081 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
    float _4092 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
    float _1872 = (isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * 0.3183098733425140380859375;
    float _1874 = (isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0))) * 0.3183098733425140380859375;
    float _1881 = ((cbLight._m0[_1833].x * _1839) * _1874) + ((cbLight._m0[_1843].x * _1849) * _1872);
    float _1882 = ((_1839 * cbLight._m0[_1833].y) * _1874) + ((_1849 * cbLight._m0[_1843].y) * _1872);
    float _1883 = ((_1839 * cbLight._m0[_1833].z) * _1874) + ((_1849 * cbLight._m0[_1843].z) * _1872);
    uvec4 _1888 = floatBitsToUint(cbLight._m0[_1816 + 12u]);
    bool _1890 = _1888.x == 0u;
    float _1901;
    float _1903;
    float _1905;
    if (_1890)
    {
        _1901 = _1881;
        _1903 = _1882;
        _1905 = _1883;
    }
    else
    {
        uint _1909 = _1816 + 6u;
        float _1925 = (dot(vec3(cbLight._m0[_1816 + 2u].xyz), vec3(_584, _585, _586)) * 0.5) + 0.5;
        float _1926 = _1925 * _1925;
        float _4103 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
        float _1927 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _1928 = isnan(1.0) ? _1831 : (isnan(_1831) ? 1.0 : min(_1831, 1.0));
        _1901 = (((cbLight._m0[_1909].x * 0.3183098733425140380859375) * _1927) * _1928) + _1881;
        _1903 = (((cbLight._m0[_1909].y * 0.3183098733425140380859375) * _1927) * _1928) + _1882;
        _1905 = (((cbLight._m0[_1909].z * 0.3183098733425140380859375) * _1927) * _1928) + _1883;
    }
    bool _1908 = _1888.y == 0u;
    float _1946;
    float _1948;
    float _1950;
    if (_1908)
    {
        _1946 = _1901;
        _1948 = _1903;
        _1950 = _1905;
    }
    else
    {
        uint _2105 = _1816 + 7u;
        float _2121 = (dot(vec3(cbLight._m0[_1816 + 3u].xyz), vec3(_584, _585, _586)) * 0.5) + 0.5;
        float _2122 = _2121 * _2121;
        float _4119 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
        float _2123 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
        float _2124 = isnan(1.0) ? _1832 : (isnan(_1832) ? 1.0 : min(_1832, 1.0));
        _1946 = (((cbLight._m0[_2105].x * 0.3183098733425140380859375) * _2123) * _2124) + _1901;
        _1948 = (((cbLight._m0[_2105].y * 0.3183098733425140380859375) * _2123) * _2124) + _1903;
        _1950 = (((cbLight._m0[_2105].z * 0.3183098733425140380859375) * _2123) * _2124) + _1905;
    }
    uint _1953 = _1816 + 8u;
    float _1966 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1816].w)) * _587) * 0.949999988079071044921875);
    float _1967 = _1966 * _1966;
    float _1968 = cbLight._m0[_1816].x + _664;
    float _1969 = cbLight._m0[_1816].y + _665;
    float _1970 = cbLight._m0[_1816].z + _666;
    float _1974 = inversesqrt(dot(vec3(_1968, _1969, _1970), vec3(_1968, _1969, _1970)));
    float _1975 = _1974 * _1968;
    float _1976 = _1974 * _1969;
    float _1977 = _1974 * _1970;
    float _1978 = dot(vec3(_584, _585, _586), vec3(cbLight._m0[_1816].xyz));
    float _4135 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
    float _1981 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
    float _4146 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _1982 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
    float _1983 = dot(vec3(_584, _585, _586), vec3(_1975, _1976, _1977));
    float _4157 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
    float _1986 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
    float _1987 = dot(vec3(cbLight._m0[_1816].xyz), vec3(_1975, _1976, _1977));
    float _4168 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
    float _1991 = _1967 * _1967;
    float _1995 = ((_1986 * _1986) * (_1991 + (-1.0))) + 1.0;
    float _2006 = (exp2(log2(1.0 - (isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2007 = 1.0 - _1967;
    float _2018 = (0.5 / (((_1982 * ((_1981 * _2007) + _1967)) + 9.9999999392252902907785028219223e-09) + (((_1982 * _2007) + _1967) * _1981))) * _1981;
    float _4179 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
    float _2020 = (isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0))) * (_1991 / ((_1995 * _1995) * 3.141590118408203125));
    uint _2031 = _1816 + 9u;
    float _2042 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1853].w)) * _587) * 0.949999988079071044921875);
    float _2043 = _2042 * _2042;
    float _2044 = cbLight._m0[_1853].x + _664;
    float _2045 = cbLight._m0[_1853].y + _665;
    float _2046 = cbLight._m0[_1853].z + _666;
    float _2050 = inversesqrt(dot(vec3(_2044, _2045, _2046), vec3(_2044, _2045, _2046)));
    float _2051 = _2050 * _2044;
    float _2052 = _2050 * _2045;
    float _2053 = _2050 * _2046;
    float _2054 = dot(vec3(_584, _585, _586), vec3(cbLight._m0[_1853].xyz));
    float _4190 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
    float _2057 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
    float _2058 = dot(vec3(_584, _585, _586), vec3(_2051, _2052, _2053));
    float _4201 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
    float _2061 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
    float _2062 = dot(vec3(cbLight._m0[_1853].xyz), vec3(_2051, _2052, _2053));
    float _4212 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
    float _2066 = _2043 * _2043;
    float _2070 = ((_2061 * _2061) * (_2066 + (-1.0))) + 1.0;
    float _2079 = (exp2(log2(1.0 - (isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2080 = 1.0 - _2043;
    float _2090 = (0.5 / (((_1982 * ((_2057 * _2080) + _2043)) + 9.9999999392252902907785028219223e-09) + (((_1982 * _2080) + _2043) * _2057))) * _2057;
    float _4223 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
    float _2092 = (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * (_2066 / ((_2070 * _2070) * 3.141590118408203125));
    float _2102 = (((_2079 * cbLight._m0[_2031].x) * _2092) * _1839) + (((_2006 * cbLight._m0[_1953].x) * _2020) * _1849);
    float _2103 = (((_2079 * cbLight._m0[_2031].y) * _2092) * _1839) + (((_2006 * cbLight._m0[_1953].y) * _2020) * _1849);
    float _2104 = (((_2079 * cbLight._m0[_2031].z) * _2092) * _1839) + (((_2006 * cbLight._m0[_1953].z) * _2020) * _1849);
    float _2166;
    float _2168;
    float _2170;
    if (_1890)
    {
        _2166 = _2102;
        _2168 = _2103;
        _2170 = _2104;
    }
    else
    {
        uint _2172 = _1816 + 2u;
        uint _2176 = _1816 + 10u;
        float _2190 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2172].w)) * _587) * 0.949999988079071044921875);
        float _2191 = _2190 * _2190;
        float _2192 = cbLight._m0[_2172].x + _664;
        float _2193 = cbLight._m0[_2172].y + _665;
        float _2194 = cbLight._m0[_2172].z + _666;
        float _2198 = inversesqrt(dot(vec3(_2192, _2193, _2194), vec3(_2192, _2193, _2194)));
        float _2199 = _2198 * _2192;
        float _2200 = _2198 * _2193;
        float _2201 = _2198 * _2194;
        float _2202 = dot(vec3(_584, _585, _586), vec3(cbLight._m0[_2172].xyz));
        float _4234 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
        float _2205 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _2206 = dot(vec3(_584, _585, _586), vec3(_2199, _2200, _2201));
        float _4245 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
        float _2209 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _2210 = dot(vec3(cbLight._m0[_2172].xyz), vec3(_2199, _2200, _2201));
        float _4256 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
        float _2214 = _2191 * _2191;
        float _2218 = ((_2209 * _2209) * (_2214 + (-1.0))) + 1.0;
        float _2227 = (exp2(log2(1.0 - (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2228 = 1.0 - _2191;
        float _2238 = (0.5 / (((_1982 * ((_2205 * _2228) + _2191)) + 9.9999999392252902907785028219223e-09) + (((_1982 * _2228) + _2191) * _2205))) * _2205;
        float _4267 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
        float _2240 = (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * (_2214 / ((_2218 * _2218) * 3.141590118408203125));
        float _2241 = isnan(1.0) ? _1831 : (isnan(_1831) ? 1.0 : min(_1831, 1.0));
        _2166 = (((_2227 * cbLight._m0[_2176].x) * _2240) * _2241) + _2102;
        _2168 = (((_2227 * cbLight._m0[_2176].y) * _2240) * _2241) + _2103;
        _2170 = (((_2227 * cbLight._m0[_2176].z) * _2240) * _2241) + _2104;
    }
    float _2276;
    float _2278;
    float _2280;
    if (_1908)
    {
        _2276 = _2166;
        _2278 = _2168;
        _2280 = _2170;
    }
    else
    {
        uint _2287 = _1816 + 3u;
        uint _2291 = _1816 + 11u;
        float _2305 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2287].w)) * _587) * 0.949999988079071044921875);
        float _2306 = _2305 * _2305;
        float _2307 = cbLight._m0[_2287].x + _664;
        float _2308 = cbLight._m0[_2287].y + _665;
        float _2309 = cbLight._m0[_2287].z + _666;
        float _2313 = inversesqrt(dot(vec3(_2307, _2308, _2309), vec3(_2307, _2308, _2309)));
        float _2314 = _2313 * _2307;
        float _2315 = _2313 * _2308;
        float _2316 = _2313 * _2309;
        float _2317 = dot(vec3(_584, _585, _586), vec3(cbLight._m0[_2287].xyz));
        float _4283 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
        float _2320 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
        float _2321 = dot(vec3(_584, _585, _586), vec3(_2314, _2315, _2316));
        float _4294 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
        float _2324 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _2325 = dot(vec3(cbLight._m0[_2287].xyz), vec3(_2314, _2315, _2316));
        float _4305 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
        float _2329 = _2306 * _2306;
        float _2333 = ((_2324 * _2324) * (_2329 + (-1.0))) + 1.0;
        float _2342 = (exp2(log2(1.0 - (isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2343 = 1.0 - _2306;
        float _2353 = (0.5 / (((_1982 * ((_2320 * _2343) + _2306)) + 9.9999999392252902907785028219223e-09) + (((_1982 * _2343) + _2306) * _2320))) * _2320;
        float _4316 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
        float _2355 = (isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (_2329 / ((_2333 * _2333) * 3.141590118408203125));
        float _2356 = isnan(1.0) ? _1832 : (isnan(_1832) ? 1.0 : min(_1832, 1.0));
        _2276 = (((_2342 * cbLight._m0[_2291].x) * _2355) * _2356) + _2166;
        _2278 = (((_2342 * cbLight._m0[_2291].y) * _2355) * _2356) + _2168;
        _2280 = (((_2342 * cbLight._m0[_2291].z) * _2355) * _2356) + _2170;
    }
    float _2491;
    float _2493;
    float _2495;
    float _2497;
    float _2499;
    float _2501;
    if (_1814.y == 0u)
    {
        float _2431 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2432 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2431;
        float _2433 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2431;
        float _2434 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2431;
        uvec4 _2446 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2447 = _2446.x;
        uint _2458 = uint((float(_2446.y) * floor(float(uint(cbSceneParam._m0[85u].y * _686) / _2447))) + floor(float(uint(cbSceneParam._m0[85u].x * _685) / _2447)));
        float _2468 = (log2(_2434 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2469 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
        uint _2472 = uint(isnan(14.0) ? _2469 : (isnan(_2469) ? 14.0 : min(_2469, 14.0)));
        uvec4 _2477 = texelFetch(g_lightClusterGridBuffer, int(((_2472 << 2u) + (_2458 << 6u)) >> 2u));
        uint _2478 = _2477.x;
        uint _2479 = _2446.z;
        float _2608;
        float _2610;
        float _2612;
        float _2614;
        float _2616;
        float _2618;
        if (((((1u << ((_2479 >> 4u) & 15u)) + 4294967295u) & _2478) == 0u) || ((_2479 & 240u) == 0u))
        {
            _2608 = 0.0;
            _2610 = 0.0;
            _2612 = 0.0;
            _2614 = 0.0;
            _2616 = 0.0;
            _2618 = 0.0;
        }
        else
        {
            float _2609;
            float _2611;
            float _2613;
            float _2615;
            float _2617;
            float _2619;
            float _2769 = 0.0;
            float _2770 = 0.0;
            float _2771 = 0.0;
            float _2772 = 0.0;
            float _2773 = 0.0;
            float _2774 = 0.0;
            uint _2775 = 0u;
            uint _2784;
            bool _2785;
            for (;;)
            {
                _2784 = texelFetch(g_lightClassification, int((((_2472 << 5u) + (_2458 << 9u)) + (_2775 << 2u)) >> 2u)).x;
                _2785 = _2784 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2785)
                {
                    frontier_phi_66_pred = _2769;
                    frontier_phi_66_pred_1 = _2774;
                    frontier_phi_66_pred_2 = _2773;
                    frontier_phi_66_pred_3 = _2772;
                    frontier_phi_66_pred_4 = _2771;
                    frontier_phi_66_pred_5 = _2770;
                }
                else
                {
                    float _2914;
                    float _2915;
                    float _2916;
                    float _2917;
                    float _2918;
                    float _2919;
                    uint _2920;
                    _2914 = _2769;
                    _2915 = _2770;
                    _2916 = _2771;
                    _2917 = _2772;
                    _2918 = _2773;
                    _2919 = _2774;
                    _2920 = _2784;
                    float _2841;
                    float _2842;
                    float _2843;
                    float _2844;
                    float _2845;
                    float _2846;
                    for (;;)
                    {
                        uint _2924 = uint(findLSB(_2920)) + (_2775 << 5u);
                        uint _2921 = (_2920 + 4294967295u) & _2920;
                        uint _2926 = _2924 * 48u;
                        vec4 _2940 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2926)).x, texelFetch(g_PointLightRenderingBuffer, int(_2926 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2926 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2926 + 3u)).x));
                        uint _2946 = (_2924 * 48u) + 4u;
                        vec4 _2959 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2946)).x, texelFetch(g_PointLightRenderingBuffer, int(_2946 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2946 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2946 + 3u)).x));
                        uint _2965 = (_2924 * 48u) + 8u;
                        vec3 _2976 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2965)).x, texelFetch(g_PointLightRenderingBuffer, int(_2965 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2965 + 2u)).x));
                        float _2980 = _2940.x - _2432;
                        float _2981 = _2940.y - _2433;
                        float _2982 = _2940.z - _2434;
                        float _2983 = dot(vec3(_2980, _2981, _2982), vec3(_2980, _2981, _2982));
                        float _2986 = inversesqrt(_2983);
                        float _2987 = _2986 * _2980;
                        float _2988 = _2986 * _2981;
                        float _2989 = _2986 * _2982;
                        float _2990 = dot(vec3(_705, _708, _711), vec3(_2987, _2988, _2989));
                        float _2995 = 1.0 - (_2983 * _2940.w);
                        float _4342 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
                        float _2996 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
                        float _2997 = sqrt(_2983) * _2959.w;
                        float _3000 = 1.39999997615814208984375 / (_2997 + 1.39999997615814208984375);
                        float _3001 = _3000 * _3000;
                        float _3004 = ((1.0 - _3001) * _2990) + _3001;
                        float _3007 = _2997 * _2997;
                        float _3011 = ((isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0))) * _2996) / ((_3007 * 0.699999988079071044921875) + 1.0);
                        float _3015 = (-0.0) - _2432;
                        float _3016 = (-0.0) - _2433;
                        float _3017 = (-0.0) - _2434;
                        float _3021 = inversesqrt(dot(vec3(_3015, _3016, _3017), vec3(_3015, _3016, _3017)));
                        float _3022 = _3021 * _3015;
                        float _3023 = _3021 * _3016;
                        float _3024 = _3021 * _3017;
                        float _3032 = exp2(log2(1.0 / ((_3007 * 3.5) + 5.0)) * 0.25);
                        float _3033 = 1.0 - _765;
                        float _3040 = sqrt(1.0 - ((1.0 - (_3033 * _3033)) * (1.0 - (_3032 * _3032))));
                        float _3041 = _3040 * _3040;
                        float _3042 = _3041 * _3041;
                        float _3043 = _3022 + _2987;
                        float _3044 = _3023 + _2988;
                        float _3045 = _3024 + _2989;
                        float _3049 = inversesqrt(dot(vec3(_3043, _3044, _3045), vec3(_3043, _3044, _3045)));
                        float _3053 = dot(vec3(_705, _708, _711), vec3(_3022, _3023, _3024));
                        float _4358 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0));
                        float _3056 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
                        float _3057 = dot(vec3(_705, _708, _711), vec3(_3049 * _3043, _3049 * _3044, _3049 * _3045));
                        float _4369 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0));
                        float _3060 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
                        float _3064 = ((_3060 * _3060) * (_3042 + (-1.0))) + 1.0;
                        float _3065 = _3000 * _3041;
                        float _3066 = _3065 * _3065;
                        float _3069 = ((1.0 - _3066) * _2990) + _3066;
                        float _4380 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0));
                        float _3070 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
                        float _3071 = 1.0 - _3041;
                        float _3081 = (0.5 / (((_3070 * ((_3056 * _3071) + _3041)) + 9.9999999392252902907785028219223e-09) + (((_3070 * _3071) + _3041) * _3056))) * _3070;
                        float _4391 = isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0));
                        float _3092 = (((_3042 * 3.1415927410125732421875) * (isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0)))) / ((_3064 * _3064) * ((_3007 * 2.1991131305694580078125) + 3.141590118408203125))) * _2996;
                        _2844 = (_3011 * _2959.x) + _2917;
                        _2845 = (_3011 * _2959.y) + _2918;
                        _2846 = (_3011 * _2959.z) + _2919;
                        _2841 = (_3092 * _2976.x) + _2914;
                        _2842 = (_3092 * _2976.y) + _2915;
                        _2843 = (_3092 * _2976.z) + _2916;
                        if (_2921 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2914 = _2841;
                            _2915 = _2842;
                            _2916 = _2843;
                            _2917 = _2844;
                            _2918 = _2845;
                            _2919 = _2846;
                            _2920 = _2921;
                        }
                    }
                    frontier_phi_66_pred = _2841;
                    frontier_phi_66_pred_1 = _2846;
                    frontier_phi_66_pred_2 = _2845;
                    frontier_phi_66_pred_3 = _2844;
                    frontier_phi_66_pred_4 = _2843;
                    frontier_phi_66_pred_5 = _2842;
                }
                _2609 = frontier_phi_66_pred;
                _2619 = frontier_phi_66_pred_1;
                _2617 = frontier_phi_66_pred_2;
                _2615 = frontier_phi_66_pred_3;
                _2613 = frontier_phi_66_pred_4;
                _2611 = frontier_phi_66_pred_5;
                uint _2776 = _2775 + 1u;
                if (_2776 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2769 = _2609;
                    _2770 = _2611;
                    _2771 = _2613;
                    _2772 = _2615;
                    _2773 = _2617;
                    _2774 = _2619;
                    _2775 = _2776;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2608 = _2609;
            _2610 = _2611;
            _2612 = _2613;
            _2614 = _2615;
            _2616 = _2617;
            _2618 = _2619;
        }
        uvec4 _2622 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2623 = _2622.z;
        uint _2625 = (_2623 >> 8u) & 15u;
        float _2737;
        float _2739;
        float _2741;
        float _2743;
        float _2745;
        float _2747;
        if (((4294967295u << _2625) & _2478) == 0u)
        {
            _2737 = _2608;
            _2739 = _2610;
            _2741 = _2612;
            _2743 = _2614;
            _2745 = _2616;
            _2747 = _2618;
        }
        else
        {
            float _2762 = inversesqrt(dot(vec3(_2432, _2433, _2434), vec3(_2432, _2433, _2434)));
            float _2763 = _2762 * _2432;
            float _2764 = _2762 * _2433;
            float _2765 = _2762 * _2434;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2625 < ((_2623 >> 12u) & 15u))
            {
                float _2738;
                float _2740;
                float _2742;
                float _2744;
                float _2746;
                float _2748;
                float _2897 = _2608;
                float _2898 = _2610;
                float _2899 = _2612;
                float _2900 = _2614;
                float _2901 = _2616;
                float _2902 = _2618;
                uint _2903 = _2625;
                uint _2912;
                bool _2913;
                for (;;)
                {
                    _2912 = texelFetch(g_lightClassification, int((((_2472 << 5u) + (_2458 << 9u)) + (_2903 << 2u)) >> 2u)).x;
                    _2913 = _2912 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2913)
                    {
                        frontier_phi_77_pred = _2902;
                        frontier_phi_77_pred_1 = _2901;
                        frontier_phi_77_pred_2 = _2900;
                        frontier_phi_77_pred_3 = _2899;
                        frontier_phi_77_pred_4 = _2898;
                        frontier_phi_77_pred_5 = _2897;
                    }
                    else
                    {
                        float _3106;
                        float _3107;
                        float _3108;
                        float _3109;
                        float _3110;
                        float _3111;
                        float _3400;
                        float _3401;
                        float _3402;
                        float _3403;
                        float _3404;
                        float _3405;
                        float _3119 = _2897;
                        float _3120 = _2898;
                        float _3121 = _2899;
                        float _3122 = _2900;
                        float _3123 = _2901;
                        float _3124 = _2902;
                        uint _3125 = _2912;
                        uint _3126;
                        vec4 _3151;
                        float _3152;
                        vec4 _3167;
                        vec3 _3179;
                        vec4 _3194;
                        vec4 _3209;
                        float _3256;
                        bool _3257;
                        for (;;)
                        {
                            uint _3136 = ((_2903 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3125));
                            _3126 = (_3125 + 4294967295u) & _3125;
                            uint _3138 = _3136 * 40u;
                            _3151 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3138)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 3u)).x));
                            _3152 = _3151.w;
                            uint _3154 = (_3136 * 40u) + 4u;
                            _3167 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3154)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 3u)).x));
                            uint _3169 = (_3136 * 40u) + 8u;
                            _3179 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3169)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 2u)).x));
                            uint _3181 = (_3136 * 40u) + 16u;
                            _3194 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3181)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 3u)).x));
                            uint _3196 = (_3136 * 40u) + 20u;
                            _3209 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3196)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 3u)).x));
                            uint _3212 = (_3136 * 40u) + 24u;
                            vec4 _3225 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3212)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 3u)).x));
                            uint _3231 = (_3136 * 40u) + 28u;
                            vec4 _3244 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3231)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 3u)).x));
                            _3256 = fma(_2434, _3244.z, fma(_2433, _3244.y, _3244.x * _2432)) + _3244.w;
                            _3257 = !((fma(_2434, _3225.z, fma(_2433, _3225.y, _3225.x * _2432)) + _3225.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3257)
                            {
                                float _3284 = _3151.x - _2432;
                                float _3285 = _3151.y - _2433;
                                float _3286 = _3151.z - _2434;
                                float _3287 = dot(vec3(_3284, _3285, _3286), vec3(_3284, _3285, _3286));
                                float _3290 = inversesqrt(_3287);
                                float _3291 = _3290 * _3284;
                                float _3292 = _3290 * _3285;
                                float _3293 = _3290 * _3286;
                                float _3297 = 1.0 - (_3287 / (_3152 * _3152));
                                float _4402 = isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0));
                                float _3298 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
                                float _3302 = sqrt(_3287) * _3167.w;
                                float _3304 = 1.39999997615814208984375 / (_3302 + 1.39999997615814208984375);
                                float _3305 = _3304 * _3304;
                                float _3308 = ((1.0 - _3305) * dot(vec3(_3291, _3292, _3293), vec3(_705, _708, _711))) + _3305;
                                float _3311 = _3302 * _3302;
                                float _3315 = (fma(_2434, _3194.z, fma(_2433, _3194.y, _3194.x * _2432)) + _3194.w) / _3256;
                                float _3316 = (fma(_2434, _3209.z, fma(_2433, _3209.y, _3209.x * _2432)) + _3209.w) / _3256;
                                float _3320 = 1.0 - dot(vec2(_3315, _3316), vec2(_3315, _3316));
                                float _4418 = isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0));
                                float _3321 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
                                float _3322 = _3321 * (((isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0))) * _3298) / ((_3311 * 0.699999988079071044921875) + 1.0));
                                float _3334 = exp2(log2(1.0 / ((_3311 * 3.5) + 5.0)) * 0.25);
                                float _3335 = 1.0 - _765;
                                float _3342 = sqrt(1.0 - ((1.0 - (_3335 * _3335)) * (1.0 - (_3334 * _3334))));
                                float _3343 = _3342 * _3342;
                                float _3344 = _3343 * _3343;
                                float _3345 = _3291 - _2763;
                                float _3346 = _3292 - _2764;
                                float _3347 = _3293 - _2765;
                                float _3351 = inversesqrt(dot(vec3(_3345, _3346, _3347), vec3(_3345, _3346, _3347)));
                                float _3355 = dot(vec3(_705, _708, _711), vec3((-0.0) - _2763, (-0.0) - _2764, (-0.0) - _2765));
                                float _4429 = isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0));
                                float _3358 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
                                float _3359 = dot(vec3(_705, _708, _711), vec3(_3351 * _3345, _3351 * _3346, _3351 * _3347));
                                float _4440 = isnan(0.0) ? _3359 : (isnan(_3359) ? 0.0 : max(_3359, 0.0));
                                float _3362 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
                                float _3366 = ((_3362 * _3362) * (_3344 + (-1.0))) + 1.0;
                                float _3367 = _3304 * _3343;
                                float _3368 = _3367 * _3367;
                                float _3374 = ((1.0 - _3368) * dot(vec3(_705, _708, _711), vec3(_3291, _3292, _3293))) + _3368;
                                float _4451 = isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0));
                                float _3375 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
                                float _3376 = 1.0 - _3343;
                                float _3386 = (0.5 / (((_3375 * ((_3358 * _3376) + _3343)) + 9.9999999392252902907785028219223e-09) + (((_3375 * _3376) + _3343) * _3358))) * _3375;
                                float _4462 = isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : max(_3386, 0.0));
                                float _3396 = (_3321 * _3298) * (((_3344 * 3.1415927410125732421875) * (isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0)))) / ((_3366 * _3366) * ((_3311 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3322 * _3167.y;
                                frontier_phi_83_pred_1 = _3322 * _3167.x;
                                frontier_phi_83_pred_2 = _3396 * _3179.z;
                                frontier_phi_83_pred_3 = _3396 * _3179.y;
                                frontier_phi_83_pred_4 = _3396 * _3179.x;
                                frontier_phi_83_pred_5 = _3322 * _3167.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3404 = frontier_phi_83_pred;
                            _3403 = frontier_phi_83_pred_1;
                            _3402 = frontier_phi_83_pred_2;
                            _3401 = frontier_phi_83_pred_3;
                            _3400 = frontier_phi_83_pred_4;
                            _3405 = frontier_phi_83_pred_5;
                            _3109 = _3403 + _3122;
                            _3110 = _3404 + _3123;
                            _3111 = _3405 + _3124;
                            _3106 = _3400 + _3119;
                            _3107 = _3401 + _3120;
                            _3108 = _3402 + _3121;
                            if (_3126 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3119 = _3106;
                                _3120 = _3107;
                                _3121 = _3108;
                                _3122 = _3109;
                                _3123 = _3110;
                                _3124 = _3111;
                                _3125 = _3126;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3111;
                        frontier_phi_77_pred_1 = _3110;
                        frontier_phi_77_pred_2 = _3109;
                        frontier_phi_77_pred_3 = _3108;
                        frontier_phi_77_pred_4 = _3107;
                        frontier_phi_77_pred_5 = _3106;
                    }
                    _2748 = frontier_phi_77_pred;
                    _2746 = frontier_phi_77_pred_1;
                    _2744 = frontier_phi_77_pred_2;
                    _2742 = frontier_phi_77_pred_3;
                    _2740 = frontier_phi_77_pred_4;
                    _2738 = frontier_phi_77_pred_5;
                    uint _2904 = _2903 + 1u;
                    if (_2904 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2897 = _2738;
                        _2898 = _2740;
                        _2899 = _2742;
                        _2900 = _2744;
                        _2901 = _2746;
                        _2902 = _2748;
                        _2903 = _2904;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2742;
                frontier_phi_58_59_ladder_1 = _2748;
                frontier_phi_58_59_ladder_2 = _2746;
                frontier_phi_58_59_ladder_3 = _2744;
                frontier_phi_58_59_ladder_4 = _2740;
                frontier_phi_58_59_ladder_5 = _2738;
            }
            else
            {
                frontier_phi_58_59_ladder = _2612;
                frontier_phi_58_59_ladder_1 = _2618;
                frontier_phi_58_59_ladder_2 = _2616;
                frontier_phi_58_59_ladder_3 = _2614;
                frontier_phi_58_59_ladder_4 = _2610;
                frontier_phi_58_59_ladder_5 = _2608;
            }
            _2737 = frontier_phi_58_59_ladder_5;
            _2739 = frontier_phi_58_59_ladder_4;
            _2741 = frontier_phi_58_59_ladder;
            _2743 = frontier_phi_58_59_ladder_3;
            _2745 = frontier_phi_58_59_ladder_2;
            _2747 = frontier_phi_58_59_ladder_1;
        }
        float _2752 = isnan(1.0) ? _749 : (isnan(_749) ? 1.0 : min(_749, 1.0));
        _2491 = (_2752 * _2743) + _1946;
        _2493 = (_2752 * _2745) + _1948;
        _2495 = (_2752 * _2747) + _1950;
        _2497 = ((_2737 * 0.039999999105930328369140625) * _2752) + _2276;
        _2499 = ((_2739 * 0.039999999105930328369140625) * _2752) + _2278;
        _2501 = ((_2741 * 0.039999999105930328369140625) * _2752) + _2280;
    }
    else
    {
        _2491 = _1946;
        _2493 = _1948;
        _2495 = _1950;
        _2497 = _2276;
        _2499 = _2278;
        _2501 = _2280;
    }
    uint _2507 = _725 + uint(cbMatDynParam._m0[0u].w);
    float _2513 = ((((((_531.x - _528) * _464) + _528) * cbMtdParam._m0[13u].x) + ((((_485.x - _482) * _464) + _482) * cbMtdParam._m0[11u].x)) * _558) * cbInstanceData._m0[_2507].x;
    float _2514 = ((((((_531.y - _529) * _464) + _529) * cbMtdParam._m0[13u].y) + ((((_485.y - _483) * _464) + _483) * cbMtdParam._m0[11u].y)) * _558) * cbInstanceData._m0[_2507].y;
    float _2515 = ((((((_531.z - _530) * _464) + _530) * cbMtdParam._m0[13u].z) + ((((_485.z - _484) * _464) + _484) * cbMtdParam._m0[11u].z)) * _558) * cbInstanceData._m0[_2507].z;
    float _4478 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _4489 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _4500 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _2532 = (((isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0))) * (_2491 + ((isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0))) * _749))) + ((_2497 + ((isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0))) * _1586)) * cbPerFrame._m0[3u].x)) + _2513;
    float _2534 = (_2514 + ((_2499 + ((isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0))) * _1586)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0))) * (_2493 + ((isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0))) * _749)));
    float _2536 = (_2515 + ((_2501 + ((isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0))) * _1586)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0))) * (_2495 + ((isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0))) * _749)));
    float _2537 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
    float _2538 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
    float _2539 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
    float _2545 = cbMtdParam._m0[2u].x * _2513;
    float _2546 = cbMtdParam._m0[2u].y * _2514;
    float _2547 = cbMtdParam._m0[2u].z * _2515;
    float _4526 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2549 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
    uint _2550 = _724 + 6u;
    float _2558 = _685 / cbSceneParam._m0[86u].x;
    float _2559 = _686 / cbSceneParam._m0[86u].y;
    vec4 _2573 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2558, _2559, (log2((isnan(cbSceneParam._m0[77u].w) ? _606 : (isnan(_606) ? cbSceneParam._m0[77u].w : min(_606, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2575 = _2573.x;
    float _2576 = _2573.y;
    float _2577 = _2573.z;
    float _2578 = _2573.w;
    float _2670;
    float _2672;
    float _2674;
    float _2676;
    if (_606 > cbSceneParam._m0[78u].w)
    {
        float _2633 = isnan(_606) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _606 : min(cbSceneParam._m0[80u].w, _606));
        float _2634 = _2633 / _606;
        float _2645 = _2634 * _657;
        float _2646 = _658 * _2634;
        float _2647 = (-0.0) - _2646;
        float _2648 = _2634 * _659;
        float _2650 = (cbSceneParam._m0[77u].w * _2647) / _2633;
        float _2651 = _2650 + cbSceneParam._m0[79u].w;
        float _2652 = cbSceneParam._m0[79u].w - _2646;
        float _2658 = sqrt(((_2645 * _2645) + (_2646 * _2646)) + (_2648 * _2648));
        float _2661 = (1.0 - (cbSceneParam._m0[77u].w / _2633)) * _2658;
        float _2666 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2668 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2854;
        if (abs((_2647 - _2650) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2854 = ((((_2651 > 0.0) ? exp2(_2666 * _2651) : (2.0 - exp2(_2668 * _2651))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2661;
        }
        else
        {
            float _2798 = 1.0 / cbSceneParam._m0[80u].x;
            float _2799 = isnan(_2652) ? _2651 : (isnan(_2651) ? _2652 : max(_2651, _2652));
            float _2800 = isnan(_2652) ? _2651 : (isnan(_2651) ? _2652 : min(_2651, _2652));
            float _2809 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : min(_2799, 0.0));
            float _2810 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : min(_2800, 0.0));
            _2854 = ((abs(_2658 / _2647) * cbSceneParam._m0[80u].y) * ((((_2809 - _2810) * 2.0) - ((exp2(_2666 * (isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0)))) - exp2(_2666 * (isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0))))) * _2798)) - ((exp2(_2668 * _2809) - exp2(_2668 * _2810)) * _2798))) + (_2661 * cbSceneParam._m0[80u].z);
        }
        vec4 _2856 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2558, _2559, 1.0), 0.0);
        float _2865 = exp2((_2854 * (-1.44269502162933349609375)) * (1.0 - _2856.w));
        float _2866 = log2(_2865);
        float _2882 = log2(_2578);
        _2670 = (exp2(_2882 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2866 * cbSceneParam._m0[78u].x)) * _2856.x) / cbSceneParam._m0[78u].x)) + _2575;
        _2672 = (exp2(_2882 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2866 * cbSceneParam._m0[78u].y)) * _2856.y) / cbSceneParam._m0[78u].y)) + _2576;
        _2674 = (exp2(_2882 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2866 * cbSceneParam._m0[78u].z)) * _2856.z) / cbSceneParam._m0[78u].z)) + _2577;
        _2676 = _2865 * _2578;
    }
    else
    {
        _2670 = _2575;
        _2672 = _2576;
        _2674 = _2577;
        _2676 = _2578;
    }
    bool _2892;
    vec4 _2686;
    vec4 _2708;
    float _2710;
    float _2714;
    float _2715;
    float _2716;
    float _2719;
    float _2722;
    float _2725;
    float _2726;
    bool _2736;
    for (;;)
    {
        _2686 = cbMatDynParam._m0[0u];
        float _2688 = roundEven(_2686.y);
        bool _2689 = _2688 == 3.0;
        float _2690 = log2(_2676);
        float _2694 = exp2(_2690 * cbSceneParam._m0[78u].x);
        float _2695 = exp2(_2690 * cbSceneParam._m0[78u].y);
        float _2696 = exp2(_2690 * cbSceneParam._m0[78u].z);
        float _2697 = _2694 * _2537;
        float _2698 = _2695 * _2538;
        float _2699 = _2696 * _2539;
        float _2706 = _673 + (-0.5);
        _2708 = cbMtdParam._m0[1u];
        _2710 = _2708.y * _2706;
        float _2713 = (_2688 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2714 = _2713 * (_2689 ? _2697 : (_2697 + (cbSceneParam._m0[72u].w * _2670)));
        _2715 = _2713 * (_2689 ? _2698 : (_2698 + (cbSceneParam._m0[72u].w * _2672)));
        _2716 = _2713 * (_2689 ? _2699 : (_2699 + (cbSceneParam._m0[72u].w * _2674)));
        _2719 = ((_2545 * _2549) * _2694) * _2713;
        _2722 = ((_2546 * _2549) * _2695) * _2713;
        _2725 = ((_2547 * _2549) * _2696) * _2713;
        _2726 = _2706 * 0.999000012874603271484375;
        _2736 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2736)
        {
            if ((cbInstanceData._m0[_724 + 7u].x + _2726) < 0.5)
            {
                _2892 = true;
                break;
            }
        }
        uint _2833 = _725 + uint(_2686.w);
        if ((cbInstanceData._m0[_2833].w < 1.0) && ((cbInstanceData._m0[_2833].w + _2726) < 0.5))
        {
            _2892 = true;
            break;
        }
        if ((_2710 + 1.0) < _2708.x)
        {
            _2892 = true;
            break;
        }
        _2892 = false;
        break;
    }
    float _3097;
    if (_2892)
    {
        discard_state = true;
        _3097 = 0.0;
    }
    else
    {
        _3097 = cbInstanceData._m0[_2550].w;
    }
    SV_Target.x = _2714;
    SV_Target.y = _2715;
    SV_Target.z = _2716;
    SV_Target.w = _3097;
    SV_Target_1.x = _2719;
    SV_Target_1.y = _2722;
    SV_Target_1.z = _2725;
    SV_Target_1.w = cbInstanceData._m0[_2550].w;
    discard_exit();
}


