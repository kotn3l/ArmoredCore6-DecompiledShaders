#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _999;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _189 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _190 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _191 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _197 = inversesqrt(dot(vec3(_189, _190, _191), vec3(_189, _190, _191)));
    float _204 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _211 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _233 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _239 = _233.x * cbMtdParam._m0[9u].x;
    float _240 = _233.y * cbMtdParam._m0[9u].y;
    float _241 = _233.z * cbMtdParam._m0[9u].z;
    vec4 _258 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    vec4 _272 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _276 = _272.z;
    float _280 = (_272.x * 2.0) + (-1.0);
    float _282 = (_272.y * 2.0) + (-1.0);
    float _283 = dot(vec2(_280, _282), vec2(_280, _282));
    float _3370 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    float _289 = sqrt(1.0 - (isnan(1.0) ? _3370 : (isnan(_3370) ? 1.0 : min(_3370, 1.0))));
    float _302 = (cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _303 = (cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _333 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * ((cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * ((cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[10u].w));
    float _338 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[15u].w;
    float _345 = ((_333.y * 0.5) + (-0.25)) * cbMtdParam._m0[15u].z;
    float _347 = (-0.0) - (cbMtdParam._m0[15u].z * ((_333.x * 0.5) + (-0.25)));
    float _349 = fract(_338);
    float _351 = fract(_338 + 0.5);
    float _352 = _349 * _347;
    float _353 = _345 * _349;
    float _356 = _351 * _347;
    float _357 = _345 * _351;
    float _362 = abs((_349 * 2.0) + (-1.0));
    vec4 _378 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_352 + _302) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_353 + _303) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _380 = _378.x;
    float _381 = _378.y;
    float _382 = _378.z;
    vec4 _383 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_356 + _302) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_357 + _303) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _410 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _411 = (cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _424 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_352 + _410) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_353 + _411) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _426 = _424.x;
    float _427 = _424.y;
    float _428 = _424.z;
    vec4 _429 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_356 + _410) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_357 + _411) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _456 = (TEXCOORD_9.x - ((cbMtdParam._m0[16u].y * (1.0 - TEXCOORD_9.x)) * (_258.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[16u].z + 1.0);
    float _3381 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _457 = isnan(1.0) ? _3381 : (isnan(_3381) ? 1.0 : min(_3381, 1.0));
    float _463 = fma(_289, _204 * NORMAL.x, fma(_282, _211 * TANGENT.x, (_197 * _189) * _280));
    float _466 = fma(_289, _204 * NORMAL.y, fma(_282, _211 * TANGENT.y, (_197 * _190) * _280));
    float _469 = fma(_289, _204 * NORMAL.z, fma(_282, _211 * TANGENT.z, (_197 * _191) * _280));
    float _473 = inversesqrt(dot(vec3(_463, _466, _469), vec3(_463, _466, _469)));
    float _474 = _473 * _463;
    float _475 = _473 * _466;
    float _476 = _473 * _469;
    float _3392 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _477 = isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0));
    float _3403 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3414 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _3425 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _496 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _537 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _547 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _537);
    float _548 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _537);
    float _549 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _537);
    float _553 = inversesqrt(dot(vec3(_547, _548, _549), vec3(_547, _548, _549)));
    float _554 = _547 * _553;
    float _555 = _548 * _553;
    float _556 = _549 * _553;
    float _562 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _563 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _584 = fma(_476, cbSceneParam._m0[5u].z, fma(_475, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _474));
    float _587 = fma(_476, cbSceneParam._m0[6u].z, fma(_475, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _474));
    float _590 = fma(_476, cbSceneParam._m0[7u].z, fma(_475, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _474));
    uint _603 = uint(roundEven(NORMAL.w)) * 13u;
    uint _604 = _603 + 9u;
    uint _605 = _604 + uint(cbMatDynParam._m0[0u].w);
    float _611 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0)))) * cbInstanceData._m0[_605].x;
    float _612 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0)))) * cbInstanceData._m0[_605].y;
    float _613 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0)))) * cbInstanceData._m0[_605].z;
    float _3436 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _614 = isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0));
    float _3447 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _615 = isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0));
    float _3458 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _616 = isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0));
    vec4 _625 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _562, cbSceneParam._m0[86u].y * _563));
    float _628 = _625.x * TEXCOORD_3.w;
    float _629 = dot(vec3(_474, _475, _476), vec3(_554, _555, _556));
    float _632 = _629 * 2.0;
    float _636 = (_632 * _474) - _554;
    float _637 = (_632 * _475) - _555;
    float _638 = (_632 * _476) - _556;
    float _642 = abs(dot(vec3(_554, _555, _556), vec3(_474, _475, _476)));
    float _3469 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _644 = sqrt(_477);
    float _657 = exp2((_644 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_644 * 3.0));
    float _689 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _693 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _697 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _998;
    float _1000;
    float _1001;
    float _1002;
    float _1003;
    float _1004;
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _724 = fma(_697, cbModelParam._m0[26u].z, fma(_693, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _689));
        float _728 = fma(_697, cbModelParam._m0[27u].z, fma(_693, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _689));
        float _732 = fma(_697, cbModelParam._m0[28u].z, fma(_693, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _689));
        float _756 = _689 + _474;
        float _757 = _693 + _475;
        float _758 = _697 + _476;
        float _768 = fma(_758, cbModelParam._m0[26u].z, fma(_757, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _756)) - _724;
        float _769 = fma(_758, cbModelParam._m0[27u].z, fma(_757, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _756)) - _728;
        float _770 = fma(_758, cbModelParam._m0[28u].z, fma(_757, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _756)) - _732;
        float _774 = inversesqrt(dot(vec3(_768, _769, _770), vec3(_768, _769, _770)));
        float _787 = ((_774 * _768) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_724 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _788 = ((_774 * _769) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_728 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _789 = ((_774 * _770) / cbModelParam._m0[34u].z) + ((((((_732 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _792 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_787, _788, _789), 0.0);
        vec4 _799 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_787, _788, _789), 0.0);
        vec4 _806 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_787, _788, _789), 0.0);
        vec4 _813 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_787, _788, _789), 0.0);
        float _826 = exp2((_792.w + (-0.5)) * 20.0) * 2.0;
        float _827 = _826 * (_792.x + (-0.5));
        float _828 = _826 * (_792.y + (-0.5));
        float _829 = _826 * (_792.z + (-0.5));
        float _836 = exp2((_799.w + (-0.5)) * 20.0) * 2.0;
        float _837 = _836 * (_799.x + (-0.5));
        float _838 = _836 * (_799.y + (-0.5));
        float _839 = _836 * (_799.z + (-0.5));
        float _846 = exp2((_806.w + (-0.5)) * 20.0) * 2.0;
        float _847 = _846 * (_806.x + (-0.5));
        float _848 = _846 * (_806.y + (-0.5));
        float _849 = _846 * (_806.z + (-0.5));
        float _856 = exp2((_813.w + (-0.5)) * 20.0) * 2.0;
        float _857 = _856 * (_813.x + (-0.5));
        float _858 = _856 * (_813.y + (-0.5));
        float _859 = _856 * (_813.z + (-0.5));
        float _860 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        float _861 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _862 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
        float _863 = _827 * 0.5;
        float _864 = _837 * 0.5;
        float _865 = _847 * 0.5;
        float _866 = dot(vec3(_863, _864, _865), vec3(_863, _864, _865));
        float _871 = (_866 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_866);
        float _880 = (dot(vec3(_474, _475, _476), vec3(_871 * _863, _871 * _864, _871 * _865)) + 1.0) * 0.5;
        float _3495 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        float _890 = sqrt(((_864 * _864) + (_863 * _863)) + (_865 * _865)) / (_860 + 9.9999997473787516355514526367188e-06);
        float _3506 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _891 = isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0));
        float _892 = _891 * 2.0;
        float _896 = (1.0 - _891) / (_891 + 1.0);
        float _3517 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _897 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
        float _906 = ((((1.0 - _897) * (_892 + 2.0)) * exp2(log2(isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0))) * (_892 + 1.0))) + _897) * _860;
        float _907 = _828 * 0.5;
        float _908 = _838 * 0.5;
        float _909 = _848 * 0.5;
        float _910 = dot(vec3(_907, _908, _909), vec3(_907, _908, _909));
        float _915 = (_910 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_910);
        float _923 = (dot(vec3(_474, _475, _476), vec3(_915 * _907, _915 * _908, _915 * _909)) + 1.0) * 0.5;
        float _3528 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _932 = sqrt(((_908 * _908) + (_907 * _907)) + (_909 * _909)) / (_861 + 9.9999997473787516355514526367188e-06);
        float _3539 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _933 = isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0));
        float _934 = _933 * 2.0;
        float _938 = (1.0 - _933) / (_933 + 1.0);
        float _3550 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _939 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
        float _948 = ((((1.0 - _939) * (_934 + 2.0)) * exp2(log2(isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0))) * (_934 + 1.0))) + _939) * _861;
        float _949 = _829 * 0.5;
        float _950 = _839 * 0.5;
        float _951 = _849 * 0.5;
        float _952 = dot(vec3(_949, _950, _951), vec3(_949, _950, _951));
        float _957 = (_952 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_952);
        float _965 = (dot(vec3(_474, _475, _476), vec3(_957 * _949, _957 * _950, _957 * _951)) + 1.0) * 0.5;
        float _3561 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _974 = sqrt(((_950 * _950) + (_949 * _949)) + (_951 * _951)) / (_862 + 9.9999997473787516355514526367188e-06);
        float _3572 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _975 = isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0));
        float _976 = _975 * 2.0;
        float _980 = (1.0 - _975) / (_975 + 1.0);
        float _3583 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _981 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
        float _990 = ((((1.0 - _981) * (_976 + 2.0)) * exp2(log2(isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0))) * (_976 + 1.0))) + _981) * _862;
        _998 = _829;
        _1000 = _828;
        _1001 = _827;
        _1002 = _839;
        _1003 = _838;
        _1004 = _837;
        _1005 = _849;
        _1006 = _848;
        _1007 = _847;
        _1008 = _862;
        _1009 = _861;
        _1010 = _860;
        _1011 = cbModelParam._m0[36u].z * (isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0)));
        _1012 = cbModelParam._m0[36u].z * (isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0)));
        _1013 = cbModelParam._m0[36u].z * (isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0)));
    }
    else
    {
        _998 = _999;
        _1000 = _999;
        _1001 = _999;
        _1002 = _999;
        _1003 = _999;
        _1004 = _999;
        _1005 = _999;
        _1006 = _999;
        _1007 = _999;
        _1008 = _999;
        _1009 = _999;
        _1010 = _999;
        _1011 = 0.0;
        _1012 = 0.0;
        _1013 = 0.0;
    }
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1039 = fma(_697, cbModelParam._m0[30u].z, fma(_693, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _689));
        float _1043 = fma(_697, cbModelParam._m0[31u].z, fma(_693, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _689));
        float _1047 = fma(_697, cbModelParam._m0[32u].z, fma(_693, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _689));
        float _1070 = _689 + _474;
        float _1071 = _693 + _475;
        float _1072 = _697 + _476;
        float _1082 = fma(_1072, cbModelParam._m0[30u].z, fma(_1071, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1070)) - _1039;
        float _1083 = fma(_1072, cbModelParam._m0[31u].z, fma(_1071, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1070)) - _1043;
        float _1084 = fma(_1072, cbModelParam._m0[32u].z, fma(_1071, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1070)) - _1047;
        float _1088 = inversesqrt(dot(vec3(_1082, _1083, _1084), vec3(_1082, _1083, _1084)));
        float _1101 = ((_1088 * _1082) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1039 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1102 = ((_1088 * _1083) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1043 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1103 = ((_1088 * _1084) / cbModelParam._m0[35u].z) + ((((((_1047 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1105 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1101, _1102, _1103), 0.0);
        vec4 _1112 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1101, _1102, _1103), 0.0);
        vec4 _1119 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1101, _1102, _1103), 0.0);
        vec4 _1126 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1101, _1102, _1103), 0.0);
        float _1138 = exp2((_1105.w + (-0.5)) * 20.0) * 2.0;
        float _1139 = _1138 * (_1105.x + (-0.5));
        float _1140 = _1138 * (_1105.y + (-0.5));
        float _1141 = _1138 * (_1105.z + (-0.5));
        float _1148 = exp2((_1112.w + (-0.5)) * 20.0) * 2.0;
        float _1149 = _1148 * (_1112.x + (-0.5));
        float _1150 = _1148 * (_1112.y + (-0.5));
        float _1151 = _1148 * (_1112.z + (-0.5));
        float _1158 = exp2((_1119.w + (-0.5)) * 20.0) * 2.0;
        float _1159 = _1158 * (_1119.x + (-0.5));
        float _1160 = _1158 * (_1119.y + (-0.5));
        float _1161 = _1158 * (_1119.z + (-0.5));
        float _1168 = exp2((_1126.w + (-0.5)) * 20.0) * 2.0;
        float _1169 = _1168 * (_1126.x + (-0.5));
        float _1170 = _1168 * (_1126.y + (-0.5));
        float _1171 = _1168 * (_1126.z + (-0.5));
        float _1172 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1173 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1174 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1175 = _1139 * 0.5;
        float _1176 = _1149 * 0.5;
        float _1177 = _1159 * 0.5;
        float _1178 = dot(vec3(_1175, _1176, _1177), vec3(_1175, _1176, _1177));
        float _1183 = (_1178 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1178);
        float _1191 = (dot(vec3(_474, _475, _476), vec3(_1183 * _1175, _1183 * _1176, _1183 * _1177)) + 1.0) * 0.5;
        float _3624 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1200 = sqrt(((_1176 * _1176) + (_1175 * _1175)) + (_1177 * _1177)) / (_1172 + 9.9999997473787516355514526367188e-06);
        float _3635 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
        float _1202 = _1201 * 2.0;
        float _1206 = (1.0 - _1201) / (_1201 + 1.0);
        float _3646 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
        float _1216 = ((((1.0 - _1207) * (_1202 + 2.0)) * exp2(log2(isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0))) * (_1202 + 1.0))) + _1207) * _1172;
        float _1217 = _1140 * 0.5;
        float _1218 = _1150 * 0.5;
        float _1219 = _1160 * 0.5;
        float _1220 = dot(vec3(_1217, _1218, _1219), vec3(_1217, _1218, _1219));
        float _1225 = (_1220 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1220);
        float _1233 = (dot(vec3(_474, _475, _476), vec3(_1225 * _1217, _1225 * _1218, _1225 * _1219)) + 1.0) * 0.5;
        float _3657 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1242 = sqrt(((_1218 * _1218) + (_1217 * _1217)) + (_1219 * _1219)) / (_1173 + 9.9999997473787516355514526367188e-06);
        float _3668 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1243 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
        float _1244 = _1243 * 2.0;
        float _1248 = (1.0 - _1243) / (_1243 + 1.0);
        float _3679 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
        float _1258 = ((((1.0 - _1249) * (_1244 + 2.0)) * exp2(log2(isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0))) * (_1244 + 1.0))) + _1249) * _1173;
        float _1259 = _1141 * 0.5;
        float _1260 = _1151 * 0.5;
        float _1261 = _1161 * 0.5;
        float _1262 = dot(vec3(_1259, _1260, _1261), vec3(_1259, _1260, _1261));
        float _1267 = (_1262 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1262);
        float _1275 = (dot(vec3(_474, _475, _476), vec3(_1267 * _1259, _1267 * _1260, _1267 * _1261)) + 1.0) * 0.5;
        float _3690 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1284 = sqrt(((_1260 * _1260) + (_1259 * _1259)) + (_1261 * _1261)) / (_1174 + 9.9999997473787516355514526367188e-06);
        float _3701 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1285 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
        float _1286 = _1285 * 2.0;
        float _1290 = (1.0 - _1285) / (_1285 + 1.0);
        float _3712 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
        float _1300 = ((((1.0 - _1291) * (_1286 + 2.0)) * exp2(log2(isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0))) * (_1286 + 1.0))) + _1291) * _1174;
        _1308 = _1141;
        _1309 = _1140;
        _1310 = _1139;
        _1311 = _1151;
        _1312 = _1150;
        _1313 = _1149;
        _1314 = _1161;
        _1315 = _1160;
        _1316 = _1159;
        _1317 = _1174;
        _1318 = _1173;
        _1319 = _1172;
        _1320 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0)));
        _1321 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0)));
        _1322 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0)));
    }
    else
    {
        _1308 = _999;
        _1309 = _999;
        _1310 = _999;
        _1311 = _999;
        _1312 = _999;
        _1313 = _999;
        _1314 = _999;
        _1315 = _999;
        _1316 = _999;
        _1317 = _999;
        _1318 = _999;
        _1319 = _999;
        _1320 = 0.0;
        _1321 = 0.0;
        _1322 = 0.0;
    }
    float _1332 = (cbModelParam._m0[1u].x * (_1320 - _1011)) + _1011;
    float _1333 = (cbModelParam._m0[1u].x * (_1321 - _1012)) + _1012;
    float _1334 = (cbModelParam._m0[1u].x * (_1322 - _1013)) + _1013;
    float _1355 = fma(_1334, cbSceneParam._m0[89u].z, fma(_1333, cbSceneParam._m0[89u].y, _1332 * cbSceneParam._m0[89u].x));
    float _1358 = fma(_1334, cbSceneParam._m0[90u].z, fma(_1333, cbSceneParam._m0[90u].y, _1332 * cbSceneParam._m0[90u].x));
    float _1361 = fma(_1334, cbSceneParam._m0[91u].z, fma(_1333, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1332));
    float _1376 = _636 * 0.5;
    float _1377 = _637 * 0.5;
    float _1378 = _638 * 0.5;
    float _1379 = dot(vec4(_1376, _1377, _1378, 1.0), vec4(_1310, _1313, _1316, _1319));
    float _1382 = dot(vec4(_1376, _1377, _1378, 1.0), vec4(_1309, _1312, _1315, _1318));
    float _1385 = dot(vec4(_1376, _1377, _1378, 1.0), vec4(_1308, _1311, _1314, _1317));
    float _1419;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1392 = dot(vec4(_1376, _1377, _1378, 1.0), vec4(_998, _1002, _1005, _1008));
        float _1396 = dot(vec4(_1376, _1377, _1378, 1.0), vec4(_1000, _1003, _1006, _1009));
        float _1400 = dot(vec4(_1376, _1377, _1378, 1.0), vec4(_1001, _1004, _1007, _1010));
        float _1407 = dot(vec4(cbModelParam._m0[39u]), vec4(_1376, _1377, _1378, 1.0));
        _1419 = dot(vec3(isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0)), isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0)), isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1407) ? 0.0 : (isnan(0.0) ? _1407 : max(0.0, _1407))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1419 = 1.0;
    }
    float _1430;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1421 = dot(vec4(cbModelParam._m0[40u]), vec4(_1376, _1377, _1378, 1.0));
        _1430 = dot(vec3(isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0)), isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0)), isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1421) ? 0.0 : (isnan(0.0) ? _1421 : max(0.0, _1421))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1430 = 1.0;
    }
    float _1434 = (_1430 * cbModelParam._m0[1u].x) + (_1419 * (1.0 - cbModelParam._m0[1u].x));
    float _1444 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _477);
    float _1445 = isnan(_1444) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1444 : min(cbModelParam._m0[25u].z, _1444));
    float _1526;
    float _1528;
    float _1530;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1493 = fma(_697, cbModelParam._m0[13u].z, fma(_693, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _689)) + cbModelParam._m0[13u].w;
        float _1497 = fma(_697, cbModelParam._m0[14u].z, fma(_693, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _689)) + cbModelParam._m0[14u].w;
        float _1501 = fma(_697, cbModelParam._m0[15u].z, fma(_693, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _689)) + cbModelParam._m0[15u].w;
        float _1504 = fma(_638, cbModelParam._m0[13u].z, fma(_637, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _636));
        float _1507 = fma(_638, cbModelParam._m0[14u].z, fma(_637, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _636));
        float _1510 = fma(_638, cbModelParam._m0[15u].z, fma(_637, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _636));
        float _1538;
        if (_1504 > 0.0)
        {
            _1538 = abs((1.0 - _1493) / _1504);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1504 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1493 + 1.0) / _1504);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1538 = frontier_phi_14_12_ladder;
        }
        float _1762;
        if (_1507 > 0.0)
        {
            _1762 = abs((1.0 - _1497) / _1507);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1507 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1497 + 1.0) / _1507);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1762 = frontier_phi_23_19_ladder;
        }
        float _2008;
        if (_1510 > 0.0)
        {
            _2008 = abs((1.0 - _1501) / _1510);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1510 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1501 + 1.0) / _1510);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2008 = frontier_phi_35_30_ladder;
        }
        float _2010 = isnan(_1762) ? _1538 : (isnan(_1538) ? _1762 : min(_1538, _1762));
        float _2011 = isnan(_2008) ? _2010 : (isnan(_2010) ? _2008 : min(_2010, _2008));
        float _2015 = (_2011 * _1504) + _1493;
        float _2016 = (_2011 * _1507) + _1497;
        float _2017 = (_2011 * _1510) + _1501;
        float _2018 = _2011 * 9.9999997473787516355514526367188e-05;
        float _2020 = (-1.0) - _2018;
        float _2022 = _2018 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2017 > _2022) || ((_2017 < _2020) || ((_2016 > _2022) || ((_2016 < _2020) || ((_2015 < _2020) || (_2015 > _2022))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2141 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2017, cbModelParam._m0[9u].z, fma(_2016, cbModelParam._m0[9u].y, _2015 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2017, cbModelParam._m0[10u].z, fma(_2016, cbModelParam._m0[10u].y, _2015 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2017, cbModelParam._m0[11u].z, fma(_2016, cbModelParam._m0[11u].y, _2015 * cbModelParam._m0[11u].x))), _1445);
            frontier_phi_13_35_ladder = _2141.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2141.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2141.x * cbModelParam._m0[1u].y;
        }
        _1526 = frontier_phi_13_35_ladder_2;
        _1528 = frontier_phi_13_35_ladder_1;
        _1530 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1514 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_636, _637, _638), _1445);
        _1526 = _1514.x * cbModelParam._m0[1u].y;
        _1528 = _1514.y * cbModelParam._m0[1u].y;
        _1530 = _1514.z * cbModelParam._m0[1u].y;
    }
    float _1534 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _477);
    float _1535 = isnan(_1534) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1534 : min(cbModelParam._m0[25u].w, _1534));
    float _1625;
    float _1627;
    float _1629;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1589 = fma(_697, cbModelParam._m0[21u].z, fma(_693, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _689)) + cbModelParam._m0[21u].w;
        float _1593 = fma(_697, cbModelParam._m0[22u].z, fma(_693, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _689)) + cbModelParam._m0[22u].w;
        float _1597 = fma(_697, cbModelParam._m0[23u].z, fma(_693, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _689)) + cbModelParam._m0[23u].w;
        float _1600 = fma(_638, cbModelParam._m0[21u].z, fma(_637, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _636));
        float _1603 = fma(_638, cbModelParam._m0[22u].z, fma(_637, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _636));
        float _1606 = fma(_638, cbModelParam._m0[23u].z, fma(_637, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _636));
        float _1767;
        if (_1600 > 0.0)
        {
            _1767 = abs((1.0 - _1589) / _1600);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1600 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1589 + 1.0) / _1600);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1767 = frontier_phi_25_21_ladder;
        }
        float _2035;
        if (_1603 > 0.0)
        {
            _2035 = abs((1.0 - _1593) / _1603);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1603 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1593 + 1.0) / _1603);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2035 = frontier_phi_37_32_ladder;
        }
        float _2240;
        if (_1606 > 0.0)
        {
            _2240 = abs((1.0 - _1597) / _1606);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1606 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1597 + 1.0) / _1606);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2240 = frontier_phi_46_43_ladder;
        }
        float _2242 = isnan(_2035) ? _1767 : (isnan(_1767) ? _2035 : min(_1767, _2035));
        float _2243 = isnan(_2240) ? _2242 : (isnan(_2242) ? _2240 : min(_2242, _2240));
        float _2247 = (_2243 * _1600) + _1589;
        float _2248 = (_2243 * _1603) + _1593;
        float _2249 = (_2243 * _1606) + _1597;
        float _2250 = _2243 * 9.9999997473787516355514526367188e-05;
        float _2251 = (-1.0) - _2250;
        float _2253 = _2250 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2249 > _2253) || ((_2249 < _2251) || ((_2248 > _2253) || ((_2248 < _2251) || ((_2247 < _2251) || (_2247 > _2253))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2477 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2249, cbModelParam._m0[17u].z, fma(_2248, cbModelParam._m0[17u].y, _2247 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2249, cbModelParam._m0[18u].z, fma(_2248, cbModelParam._m0[18u].y, _2247 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2249, cbModelParam._m0[19u].z, fma(_2248, cbModelParam._m0[19u].y, _2247 * cbModelParam._m0[19u].x))), _1535);
            frontier_phi_22_46_ladder = _2477.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2477.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2477.x * cbModelParam._m0[1u].z;
        }
        _1625 = frontier_phi_22_46_ladder_2;
        _1627 = frontier_phi_22_46_ladder_1;
        _1629 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1609 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_636, _637, _638), _1535);
        _1625 = _1609.x * cbModelParam._m0[1u].z;
        _1627 = _1609.y * cbModelParam._m0[1u].z;
        _1629 = _1609.z * cbModelParam._m0[1u].z;
    }
    float _1641 = ((((1.0 - _657) * ((_644 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_657 * _644)) * _628;
    float _1642 = _1641 * ((cbModelParam._m0[1u].w * (_1625 - _1526)) + _1526);
    float _1643 = _1641 * ((cbModelParam._m0[1u].w * (_1627 - _1528)) + _1528);
    float _1644 = _1641 * ((cbModelParam._m0[1u].w * (_1629 - _1530)) + _1530);
    float _1647 = fma(_1644, cbSceneParam._m0[89u].z, fma(_1643, cbSceneParam._m0[89u].y, _1642 * cbSceneParam._m0[89u].x));
    float _1650 = fma(_1644, cbSceneParam._m0[90u].z, fma(_1643, cbSceneParam._m0[90u].y, _1642 * cbSceneParam._m0[90u].x));
    float _1653 = fma(_1644, cbSceneParam._m0[91u].z, fma(_1643, cbSceneParam._m0[91u].y, _1642 * cbSceneParam._m0[91u].x));
    vec4 _1661 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_562, _563));
    float _1663 = _1661.w;
    float _1675 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1663);
    float _1676 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1663);
    float _1677 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1663);
    uvec4 _1681 = floatBitsToUint(cbInstanceData._m0[_603 + 5u]);
    uint _1683 = _1681.x * 14u;
    uint _1684 = _1683 + 13u;
    float _1691 = _628 + (-1.0);
    float _1696 = (cbLight._m0[_1684].x * _1691) + 1.0;
    float _1697 = (cbLight._m0[_1684].y * _1691) + 1.0;
    float _1698 = (cbLight._m0[_1684].z * _1691) + 1.0;
    float _1699 = (cbLight._m0[_1684].w * _1691) + 1.0;
    uint _1700 = _1683 + 5u;
    float _1706 = isnan(1.0) ? _1697 : (isnan(_1697) ? 1.0 : min(_1697, 1.0));
    uint _1710 = _1683 + 4u;
    float _1720 = isnan(1.0) ? _1696 : (isnan(_1696) ? 1.0 : min(_1696, 1.0));
    uint _1724 = _1683 | 1u;
    float _1735 = dot(vec3(cbLight._m0[_1683].xyz), vec3(_474, _475, _476));
    float _1738 = dot(vec3(cbLight._m0[_1724].xyz), vec3(_474, _475, _476));
    float _3848 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
    float _3859 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
    float _1743 = (isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0))) * 0.3183098733425140380859375;
    float _1745 = (isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0))) * 0.3183098733425140380859375;
    float _1752 = ((cbLight._m0[_1700].x * _1706) * _1745) + (((cbLight._m0[_1710].x * _1675) * _1720) * _1743);
    float _1753 = ((_1706 * cbLight._m0[_1700].y) * _1745) + (((cbLight._m0[_1710].y * _1676) * _1720) * _1743);
    float _1754 = ((_1706 * cbLight._m0[_1700].z) * _1745) + (((cbLight._m0[_1710].z * _1677) * _1720) * _1743);
    uvec4 _1759 = floatBitsToUint(cbLight._m0[_1683 + 12u]);
    bool _1761 = _1759.x == 0u;
    float _1772;
    float _1774;
    float _1776;
    if (_1761)
    {
        _1772 = _1752;
        _1774 = _1753;
        _1776 = _1754;
    }
    else
    {
        uint _1780 = _1683 + 6u;
        float _1796 = (dot(vec3(cbLight._m0[_1683 + 2u].xyz), vec3(_474, _475, _476)) * 0.5) + 0.5;
        float _1797 = _1796 * _1796;
        float _3870 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
        float _1798 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
        float _1799 = isnan(1.0) ? _1698 : (isnan(_1698) ? 1.0 : min(_1698, 1.0));
        _1772 = (((cbLight._m0[_1780].x * 0.3183098733425140380859375) * _1798) * _1799) + _1752;
        _1774 = (((cbLight._m0[_1780].y * 0.3183098733425140380859375) * _1798) * _1799) + _1753;
        _1776 = (((cbLight._m0[_1780].z * 0.3183098733425140380859375) * _1798) * _1799) + _1754;
    }
    bool _1779 = _1759.y == 0u;
    float _1817;
    float _1819;
    float _1821;
    if (_1779)
    {
        _1817 = _1772;
        _1819 = _1774;
        _1821 = _1776;
    }
    else
    {
        uint _1979 = _1683 + 7u;
        float _1995 = (dot(vec3(cbLight._m0[_1683 + 3u].xyz), vec3(_474, _475, _476)) * 0.5) + 0.5;
        float _1996 = _1995 * _1995;
        float _3886 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
        float _1997 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _1998 = isnan(1.0) ? _1699 : (isnan(_1699) ? 1.0 : min(_1699, 1.0));
        _1817 = (((cbLight._m0[_1979].x * 0.3183098733425140380859375) * _1997) * _1998) + _1772;
        _1819 = (((cbLight._m0[_1979].y * 0.3183098733425140380859375) * _1997) * _1998) + _1774;
        _1821 = (((cbLight._m0[_1979].z * 0.3183098733425140380859375) * _1997) * _1998) + _1776;
    }
    uint _1824 = _1683 + 8u;
    float _1837 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1683].w)) * _477) * 0.949999988079071044921875);
    float _1838 = _1837 * _1837;
    float _1839 = cbLight._m0[_1683].x + _554;
    float _1840 = cbLight._m0[_1683].y + _555;
    float _1841 = cbLight._m0[_1683].z + _556;
    float _1845 = inversesqrt(dot(vec3(_1839, _1840, _1841), vec3(_1839, _1840, _1841)));
    float _1846 = _1845 * _1839;
    float _1847 = _1845 * _1840;
    float _1848 = _1845 * _1841;
    float _1849 = dot(vec3(_474, _475, _476), vec3(cbLight._m0[_1683].xyz));
    float _3902 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
    float _1852 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
    float _3913 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _1853 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
    float _1854 = dot(vec3(_474, _475, _476), vec3(_1846, _1847, _1848));
    float _3924 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
    float _1857 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
    float _1858 = dot(vec3(cbLight._m0[_1683].xyz), vec3(_1846, _1847, _1848));
    float _3935 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
    float _1862 = _1838 * _1838;
    float _1866 = ((_1857 * _1857) * (_1862 + (-1.0))) + 1.0;
    float _1877 = (exp2(log2(1.0 - (isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1878 = 1.0 - _1838;
    float _1889 = (0.5 / (((_1853 * ((_1852 * _1878) + _1838)) + 9.9999999392252902907785028219223e-09) + (((_1853 * _1878) + _1838) * _1852))) * _1852;
    float _3946 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
    float _1891 = (isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0))) * (_1862 / ((_1866 * _1866) * 3.141590118408203125));
    uint _1905 = _1683 + 9u;
    float _1916 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1724].w)) * _477) * 0.949999988079071044921875);
    float _1917 = _1916 * _1916;
    float _1918 = cbLight._m0[_1724].x + _554;
    float _1919 = cbLight._m0[_1724].y + _555;
    float _1920 = cbLight._m0[_1724].z + _556;
    float _1924 = inversesqrt(dot(vec3(_1918, _1919, _1920), vec3(_1918, _1919, _1920)));
    float _1925 = _1924 * _1918;
    float _1926 = _1924 * _1919;
    float _1927 = _1924 * _1920;
    float _1928 = dot(vec3(_474, _475, _476), vec3(cbLight._m0[_1724].xyz));
    float _3957 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
    float _1931 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
    float _1932 = dot(vec3(_474, _475, _476), vec3(_1925, _1926, _1927));
    float _3968 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
    float _1935 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
    float _1936 = dot(vec3(cbLight._m0[_1724].xyz), vec3(_1925, _1926, _1927));
    float _3979 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
    float _1940 = _1917 * _1917;
    float _1944 = ((_1935 * _1935) * (_1940 + (-1.0))) + 1.0;
    float _1953 = (exp2(log2(1.0 - (isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1954 = 1.0 - _1917;
    float _1964 = (0.5 / (((_1853 * ((_1931 * _1954) + _1917)) + 9.9999999392252902907785028219223e-09) + (((_1853 * _1954) + _1917) * _1931))) * _1931;
    float _3990 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
    float _1966 = (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * (_1940 / ((_1944 * _1944) * 3.141590118408203125));
    float _1976 = (((_1953 * cbLight._m0[_1905].x) * _1966) * _1706) + ((((cbLight._m0[_1824].x * _1675) * _1877) * _1891) * _1720);
    float _1977 = (((_1953 * cbLight._m0[_1905].y) * _1966) * _1706) + ((((cbLight._m0[_1824].y * _1676) * _1877) * _1891) * _1720);
    float _1978 = (((_1953 * cbLight._m0[_1905].z) * _1966) * _1706) + ((((cbLight._m0[_1824].z * _1677) * _1877) * _1891) * _1720);
    float _2040;
    float _2042;
    float _2044;
    if (_1761)
    {
        _2040 = _1976;
        _2042 = _1977;
        _2044 = _1978;
    }
    else
    {
        uint _2046 = _1683 + 2u;
        uint _2050 = _1683 + 10u;
        float _2064 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2046].w)) * _477) * 0.949999988079071044921875);
        float _2065 = _2064 * _2064;
        float _2066 = cbLight._m0[_2046].x + _554;
        float _2067 = cbLight._m0[_2046].y + _555;
        float _2068 = cbLight._m0[_2046].z + _556;
        float _2072 = inversesqrt(dot(vec3(_2066, _2067, _2068), vec3(_2066, _2067, _2068)));
        float _2073 = _2072 * _2066;
        float _2074 = _2072 * _2067;
        float _2075 = _2072 * _2068;
        float _2076 = dot(vec3(_474, _475, _476), vec3(cbLight._m0[_2046].xyz));
        float _4001 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
        float _2079 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _2080 = dot(vec3(_474, _475, _476), vec3(_2073, _2074, _2075));
        float _4012 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
        float _2083 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _2084 = dot(vec3(cbLight._m0[_2046].xyz), vec3(_2073, _2074, _2075));
        float _4023 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
        float _2088 = _2065 * _2065;
        float _2092 = ((_2083 * _2083) * (_2088 + (-1.0))) + 1.0;
        float _2101 = (exp2(log2(1.0 - (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2102 = 1.0 - _2065;
        float _2112 = (0.5 / (((_1853 * ((_2079 * _2102) + _2065)) + 9.9999999392252902907785028219223e-09) + (((_1853 * _2102) + _2065) * _2079))) * _2079;
        float _4034 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
        float _2114 = (isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))) * (_2088 / ((_2092 * _2092) * 3.141590118408203125));
        float _2115 = isnan(1.0) ? _1698 : (isnan(_1698) ? 1.0 : min(_1698, 1.0));
        _2040 = (((_2101 * cbLight._m0[_2050].x) * _2114) * _2115) + _1976;
        _2042 = (((_2101 * cbLight._m0[_2050].y) * _2114) * _2115) + _1977;
        _2044 = (((_2101 * cbLight._m0[_2050].z) * _2114) * _2115) + _1978;
    }
    float _2150;
    float _2152;
    float _2154;
    if (_1779)
    {
        _2150 = _2040;
        _2152 = _2042;
        _2154 = _2044;
    }
    else
    {
        uint _2161 = _1683 + 3u;
        uint _2165 = _1683 + 11u;
        float _2179 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2161].w)) * _477) * 0.949999988079071044921875);
        float _2180 = _2179 * _2179;
        float _2181 = cbLight._m0[_2161].x + _554;
        float _2182 = cbLight._m0[_2161].y + _555;
        float _2183 = cbLight._m0[_2161].z + _556;
        float _2187 = inversesqrt(dot(vec3(_2181, _2182, _2183), vec3(_2181, _2182, _2183)));
        float _2188 = _2187 * _2181;
        float _2189 = _2187 * _2182;
        float _2190 = _2187 * _2183;
        float _2191 = dot(vec3(_474, _475, _476), vec3(cbLight._m0[_2161].xyz));
        float _4050 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
        float _2194 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _2195 = dot(vec3(_474, _475, _476), vec3(_2188, _2189, _2190));
        float _4061 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
        float _2198 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _2199 = dot(vec3(cbLight._m0[_2161].xyz), vec3(_2188, _2189, _2190));
        float _4072 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
        float _2203 = _2180 * _2180;
        float _2207 = ((_2198 * _2198) * (_2203 + (-1.0))) + 1.0;
        float _2216 = (exp2(log2(1.0 - (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2217 = 1.0 - _2180;
        float _2227 = (0.5 / (((_1853 * ((_2194 * _2217) + _2180)) + 9.9999999392252902907785028219223e-09) + (((_1853 * _2217) + _2180) * _2194))) * _2194;
        float _4083 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
        float _2229 = (isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0))) * (_2203 / ((_2207 * _2207) * 3.141590118408203125));
        float _2230 = isnan(1.0) ? _1699 : (isnan(_1699) ? 1.0 : min(_1699, 1.0));
        _2150 = (((_2216 * cbLight._m0[_2165].x) * _2229) * _2230) + _2040;
        _2152 = (((_2216 * cbLight._m0[_2165].y) * _2229) * _2230) + _2042;
        _2154 = (((_2216 * cbLight._m0[_2165].z) * _2229) * _2230) + _2044;
    }
    float _2365;
    float _2367;
    float _2369;
    float _2371;
    float _2373;
    float _2375;
    if (_1681.y == 0u)
    {
        float _2305 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2306 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2305;
        float _2307 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2305;
        float _2308 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2305;
        uvec4 _2320 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2321 = _2320.x;
        uint _2332 = uint((float(_2320.y) * floor(float(uint(cbSceneParam._m0[85u].y * _563) / _2321))) + floor(float(uint(cbSceneParam._m0[85u].x * _562) / _2321)));
        float _2342 = (log2(_2308 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2343 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
        uint _2346 = uint(isnan(14.0) ? _2343 : (isnan(_2343) ? 14.0 : min(_2343, 14.0)));
        uvec4 _2351 = texelFetch(g_lightClusterGridBuffer, int(((_2346 << 2u) + (_2332 << 6u)) >> 2u));
        uint _2352 = _2351.x;
        uint _2353 = _2320.z;
        float _2482;
        float _2484;
        float _2486;
        float _2488;
        float _2490;
        float _2492;
        if (((((1u << ((_2353 >> 4u) & 15u)) + 4294967295u) & _2352) == 0u) || ((_2353 & 240u) == 0u))
        {
            _2482 = 0.0;
            _2484 = 0.0;
            _2486 = 0.0;
            _2488 = 0.0;
            _2490 = 0.0;
            _2492 = 0.0;
        }
        else
        {
            float _2483;
            float _2485;
            float _2487;
            float _2489;
            float _2491;
            float _2493;
            float _2635 = 0.0;
            float _2636 = 0.0;
            float _2637 = 0.0;
            float _2638 = 0.0;
            float _2639 = 0.0;
            float _2640 = 0.0;
            uint _2641 = 0u;
            uint _2650;
            bool _2651;
            for (;;)
            {
                _2650 = texelFetch(g_lightClassification, int((((_2346 << 5u) + (_2332 << 9u)) + (_2641 << 2u)) >> 2u)).x;
                _2651 = _2650 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2651)
                {
                    frontier_phi_61_pred = _2635;
                    frontier_phi_61_pred_1 = _2640;
                    frontier_phi_61_pred_2 = _2639;
                    frontier_phi_61_pred_3 = _2638;
                    frontier_phi_61_pred_4 = _2637;
                    frontier_phi_61_pred_5 = _2636;
                }
                else
                {
                    float _2759;
                    float _2760;
                    float _2761;
                    float _2762;
                    float _2763;
                    float _2764;
                    uint _2765;
                    _2759 = _2635;
                    _2760 = _2636;
                    _2761 = _2637;
                    _2762 = _2638;
                    _2763 = _2639;
                    _2764 = _2640;
                    _2765 = _2650;
                    float _2691;
                    float _2692;
                    float _2693;
                    float _2694;
                    float _2695;
                    float _2696;
                    for (;;)
                    {
                        uint _2769 = uint(findLSB(_2765)) + (_2641 << 5u);
                        uint _2766 = (_2765 + 4294967295u) & _2765;
                        uint _2771 = _2769 * 48u;
                        vec4 _2785 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2771)).x, texelFetch(g_PointLightRenderingBuffer, int(_2771 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2771 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2771 + 3u)).x));
                        uint _2791 = (_2769 * 48u) + 4u;
                        vec4 _2804 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2791)).x, texelFetch(g_PointLightRenderingBuffer, int(_2791 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2791 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2791 + 3u)).x));
                        uint _2810 = (_2769 * 48u) + 8u;
                        vec3 _2821 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2810)).x, texelFetch(g_PointLightRenderingBuffer, int(_2810 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2810 + 2u)).x));
                        float _2825 = _2785.x - _2306;
                        float _2826 = _2785.y - _2307;
                        float _2827 = _2785.z - _2308;
                        float _2828 = dot(vec3(_2825, _2826, _2827), vec3(_2825, _2826, _2827));
                        float _2831 = inversesqrt(_2828);
                        float _2832 = _2831 * _2825;
                        float _2833 = _2831 * _2826;
                        float _2834 = _2831 * _2827;
                        float _2835 = dot(vec3(_584, _587, _590), vec3(_2832, _2833, _2834));
                        float _2840 = 1.0 - (_2828 * _2785.w);
                        float _4109 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
                        float _2841 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
                        float _2842 = sqrt(_2828) * _2804.w;
                        float _2845 = 1.39999997615814208984375 / (_2842 + 1.39999997615814208984375);
                        float _2846 = _2845 * _2845;
                        float _2849 = ((1.0 - _2846) * _2835) + _2846;
                        float _2852 = _2842 * _2842;
                        float _2856 = ((isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0))) * _2841) / ((_2852 * 0.699999988079071044921875) + 1.0);
                        float _2860 = (-0.0) - _2306;
                        float _2861 = (-0.0) - _2307;
                        float _2862 = (-0.0) - _2308;
                        float _2866 = inversesqrt(dot(vec3(_2860, _2861, _2862), vec3(_2860, _2861, _2862)));
                        float _2867 = _2866 * _2860;
                        float _2868 = _2866 * _2861;
                        float _2869 = _2866 * _2862;
                        float _2877 = exp2(log2(1.0 / ((_2852 * 3.5) + 5.0)) * 0.25);
                        float _2878 = 1.0 - _644;
                        float _2885 = sqrt(1.0 - ((1.0 - (_2878 * _2878)) * (1.0 - (_2877 * _2877))));
                        float _2886 = _2885 * _2885;
                        float _2887 = _2886 * _2886;
                        float _2888 = _2867 + _2832;
                        float _2889 = _2868 + _2833;
                        float _2890 = _2869 + _2834;
                        float _2894 = inversesqrt(dot(vec3(_2888, _2889, _2890), vec3(_2888, _2889, _2890)));
                        float _2898 = dot(vec3(_584, _587, _590), vec3(_2867, _2868, _2869));
                        float _4125 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0));
                        float _2901 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
                        float _2902 = dot(vec3(_584, _587, _590), vec3(_2894 * _2888, _2894 * _2889, _2894 * _2890));
                        float _4136 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0));
                        float _2905 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
                        float _2909 = ((_2905 * _2905) * (_2887 + (-1.0))) + 1.0;
                        float _2910 = _2845 * _2886;
                        float _2911 = _2910 * _2910;
                        float _2914 = ((1.0 - _2911) * _2835) + _2911;
                        float _4147 = isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0));
                        float _2915 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
                        float _2916 = 1.0 - _2886;
                        float _2926 = (0.5 / (((_2915 * ((_2901 * _2916) + _2886)) + 9.9999999392252902907785028219223e-09) + (((_2915 * _2916) + _2886) * _2901))) * _2915;
                        float _4158 = isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0));
                        float _2937 = (((_2887 * 3.1415927410125732421875) * (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0)))) / ((_2909 * _2909) * ((_2852 * 2.1991131305694580078125) + 3.141590118408203125))) * _2841;
                        _2694 = (_2856 * _2804.x) + _2762;
                        _2695 = (_2856 * _2804.y) + _2763;
                        _2696 = (_2856 * _2804.z) + _2764;
                        _2691 = (_2937 * _2821.x) + _2759;
                        _2692 = (_2937 * _2821.y) + _2760;
                        _2693 = (_2937 * _2821.z) + _2761;
                        if (_2766 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2759 = _2691;
                            _2760 = _2692;
                            _2761 = _2693;
                            _2762 = _2694;
                            _2763 = _2695;
                            _2764 = _2696;
                            _2765 = _2766;
                        }
                    }
                    frontier_phi_61_pred = _2691;
                    frontier_phi_61_pred_1 = _2696;
                    frontier_phi_61_pred_2 = _2695;
                    frontier_phi_61_pred_3 = _2694;
                    frontier_phi_61_pred_4 = _2693;
                    frontier_phi_61_pred_5 = _2692;
                }
                _2483 = frontier_phi_61_pred;
                _2493 = frontier_phi_61_pred_1;
                _2491 = frontier_phi_61_pred_2;
                _2489 = frontier_phi_61_pred_3;
                _2487 = frontier_phi_61_pred_4;
                _2485 = frontier_phi_61_pred_5;
                uint _2642 = _2641 + 1u;
                if (_2642 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2635 = _2483;
                    _2636 = _2485;
                    _2637 = _2487;
                    _2638 = _2489;
                    _2639 = _2491;
                    _2640 = _2493;
                    _2641 = _2642;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2482 = _2483;
            _2484 = _2485;
            _2486 = _2487;
            _2488 = _2489;
            _2490 = _2491;
            _2492 = _2493;
        }
        uvec4 _2496 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2497 = _2496.z;
        uint _2499 = (_2497 >> 8u) & 15u;
        float _2603;
        float _2605;
        float _2607;
        float _2609;
        float _2611;
        float _2613;
        if (((4294967295u << _2499) & _2352) == 0u)
        {
            _2603 = _2482;
            _2605 = _2484;
            _2607 = _2486;
            _2609 = _2488;
            _2611 = _2490;
            _2613 = _2492;
        }
        else
        {
            float _2628 = inversesqrt(dot(vec3(_2306, _2307, _2308), vec3(_2306, _2307, _2308)));
            float _2629 = _2628 * _2306;
            float _2630 = _2628 * _2307;
            float _2631 = _2628 * _2308;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2499 < ((_2497 >> 12u) & 15u))
            {
                float _2604;
                float _2606;
                float _2608;
                float _2610;
                float _2612;
                float _2614;
                float _2742 = _2482;
                float _2743 = _2484;
                float _2744 = _2486;
                float _2745 = _2488;
                float _2746 = _2490;
                float _2747 = _2492;
                uint _2748 = _2499;
                uint _2757;
                bool _2758;
                for (;;)
                {
                    _2757 = texelFetch(g_lightClassification, int((((_2346 << 5u) + (_2332 << 9u)) + (_2748 << 2u)) >> 2u)).x;
                    _2758 = _2757 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2758)
                    {
                        frontier_phi_67_pred = _2745;
                        frontier_phi_67_pred_1 = _2746;
                        frontier_phi_67_pred_2 = _2747;
                        frontier_phi_67_pred_3 = _2744;
                        frontier_phi_67_pred_4 = _2743;
                        frontier_phi_67_pred_5 = _2742;
                    }
                    else
                    {
                        float _2942;
                        float _2943;
                        float _2944;
                        float _2945;
                        float _2946;
                        float _2947;
                        float _3236;
                        float _3237;
                        float _3238;
                        float _3239;
                        float _3240;
                        float _3241;
                        float _2955 = _2742;
                        float _2956 = _2743;
                        float _2957 = _2744;
                        float _2958 = _2745;
                        float _2959 = _2746;
                        float _2960 = _2747;
                        uint _2961 = _2757;
                        uint _2962;
                        vec4 _2987;
                        float _2988;
                        vec4 _3003;
                        vec3 _3015;
                        vec4 _3030;
                        vec4 _3045;
                        float _3092;
                        bool _3093;
                        for (;;)
                        {
                            uint _2972 = ((_2748 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2961));
                            _2962 = (_2961 + 4294967295u) & _2961;
                            uint _2974 = _2972 * 40u;
                            _2987 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2974)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 3u)).x));
                            _2988 = _2987.w;
                            uint _2990 = (_2972 * 40u) + 4u;
                            _3003 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2990)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 3u)).x));
                            uint _3005 = (_2972 * 40u) + 8u;
                            _3015 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3005)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 2u)).x));
                            uint _3017 = (_2972 * 40u) + 16u;
                            _3030 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3017)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 3u)).x));
                            uint _3032 = (_2972 * 40u) + 20u;
                            _3045 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3032)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 3u)).x));
                            uint _3048 = (_2972 * 40u) + 24u;
                            vec4 _3061 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3048)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 3u)).x));
                            uint _3067 = (_2972 * 40u) + 28u;
                            vec4 _3080 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3067)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 3u)).x));
                            _3092 = fma(_2308, _3080.z, fma(_2307, _3080.y, _3080.x * _2306)) + _3080.w;
                            _3093 = !((fma(_2308, _3061.z, fma(_2307, _3061.y, _3061.x * _2306)) + _3061.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3093)
                            {
                                float _3120 = _2987.x - _2306;
                                float _3121 = _2987.y - _2307;
                                float _3122 = _2987.z - _2308;
                                float _3123 = dot(vec3(_3120, _3121, _3122), vec3(_3120, _3121, _3122));
                                float _3126 = inversesqrt(_3123);
                                float _3127 = _3126 * _3120;
                                float _3128 = _3126 * _3121;
                                float _3129 = _3126 * _3122;
                                float _3133 = 1.0 - (_3123 / (_2988 * _2988));
                                float _4169 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0));
                                float _3134 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
                                float _3138 = sqrt(_3123) * _3003.w;
                                float _3140 = 1.39999997615814208984375 / (_3138 + 1.39999997615814208984375);
                                float _3141 = _3140 * _3140;
                                float _3144 = ((1.0 - _3141) * dot(vec3(_3127, _3128, _3129), vec3(_584, _587, _590))) + _3141;
                                float _3147 = _3138 * _3138;
                                float _3151 = (fma(_2308, _3030.z, fma(_2307, _3030.y, _3030.x * _2306)) + _3030.w) / _3092;
                                float _3152 = (fma(_2308, _3045.z, fma(_2307, _3045.y, _3045.x * _2306)) + _3045.w) / _3092;
                                float _3156 = 1.0 - dot(vec2(_3151, _3152), vec2(_3151, _3152));
                                float _4185 = isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0));
                                float _3157 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
                                float _3158 = _3157 * (((isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : max(_3144, 0.0))) * _3134) / ((_3147 * 0.699999988079071044921875) + 1.0));
                                float _3170 = exp2(log2(1.0 / ((_3147 * 3.5) + 5.0)) * 0.25);
                                float _3171 = 1.0 - _644;
                                float _3178 = sqrt(1.0 - ((1.0 - (_3171 * _3171)) * (1.0 - (_3170 * _3170))));
                                float _3179 = _3178 * _3178;
                                float _3180 = _3179 * _3179;
                                float _3181 = _3127 - _2629;
                                float _3182 = _3128 - _2630;
                                float _3183 = _3129 - _2631;
                                float _3187 = inversesqrt(dot(vec3(_3181, _3182, _3183), vec3(_3181, _3182, _3183)));
                                float _3191 = dot(vec3(_584, _587, _590), vec3((-0.0) - _2629, (-0.0) - _2630, (-0.0) - _2631));
                                float _4196 = isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0));
                                float _3194 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
                                float _3195 = dot(vec3(_584, _587, _590), vec3(_3187 * _3181, _3187 * _3182, _3187 * _3183));
                                float _4207 = isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0));
                                float _3198 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
                                float _3202 = ((_3198 * _3198) * (_3180 + (-1.0))) + 1.0;
                                float _3203 = _3140 * _3179;
                                float _3204 = _3203 * _3203;
                                float _3210 = ((1.0 - _3204) * dot(vec3(_584, _587, _590), vec3(_3127, _3128, _3129))) + _3204;
                                float _4218 = isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0));
                                float _3211 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
                                float _3212 = 1.0 - _3179;
                                float _3222 = (0.5 / (((_3211 * ((_3194 * _3212) + _3179)) + 9.9999999392252902907785028219223e-09) + (((_3211 * _3212) + _3179) * _3194))) * _3211;
                                float _4229 = isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0));
                                float _3232 = (_3157 * _3134) * (((_3180 * 3.1415927410125732421875) * (isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0)))) / ((_3202 * _3202) * ((_3147 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3232 * _3015.x;
                                frontier_phi_73_pred_1 = _3232 * _3015.y;
                                frontier_phi_73_pred_2 = _3158 * _3003.z;
                                frontier_phi_73_pred_3 = _3158 * _3003.y;
                                frontier_phi_73_pred_4 = _3158 * _3003.x;
                                frontier_phi_73_pred_5 = _3232 * _3015.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3236 = frontier_phi_73_pred;
                            _3237 = frontier_phi_73_pred_1;
                            _3241 = frontier_phi_73_pred_2;
                            _3240 = frontier_phi_73_pred_3;
                            _3239 = frontier_phi_73_pred_4;
                            _3238 = frontier_phi_73_pred_5;
                            _2945 = _3239 + _2958;
                            _2946 = _3240 + _2959;
                            _2947 = _3241 + _2960;
                            _2942 = _3236 + _2955;
                            _2943 = _3237 + _2956;
                            _2944 = _3238 + _2957;
                            if (_2962 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2955 = _2942;
                                _2956 = _2943;
                                _2957 = _2944;
                                _2958 = _2945;
                                _2959 = _2946;
                                _2960 = _2947;
                                _2961 = _2962;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2945;
                        frontier_phi_67_pred_1 = _2946;
                        frontier_phi_67_pred_2 = _2947;
                        frontier_phi_67_pred_3 = _2944;
                        frontier_phi_67_pred_4 = _2943;
                        frontier_phi_67_pred_5 = _2942;
                    }
                    _2610 = frontier_phi_67_pred;
                    _2612 = frontier_phi_67_pred_1;
                    _2614 = frontier_phi_67_pred_2;
                    _2608 = frontier_phi_67_pred_3;
                    _2606 = frontier_phi_67_pred_4;
                    _2604 = frontier_phi_67_pred_5;
                    uint _2749 = _2748 + 1u;
                    if (_2749 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2742 = _2604;
                        _2743 = _2606;
                        _2744 = _2608;
                        _2745 = _2610;
                        _2746 = _2612;
                        _2747 = _2614;
                        _2748 = _2749;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2612;
                frontier_phi_55_56_ladder_1 = _2614;
                frontier_phi_55_56_ladder_2 = _2610;
                frontier_phi_55_56_ladder_3 = _2608;
                frontier_phi_55_56_ladder_4 = _2606;
                frontier_phi_55_56_ladder_5 = _2604;
            }
            else
            {
                frontier_phi_55_56_ladder = _2490;
                frontier_phi_55_56_ladder_1 = _2492;
                frontier_phi_55_56_ladder_2 = _2488;
                frontier_phi_55_56_ladder_3 = _2486;
                frontier_phi_55_56_ladder_4 = _2484;
                frontier_phi_55_56_ladder_5 = _2482;
            }
            _2603 = frontier_phi_55_56_ladder_5;
            _2605 = frontier_phi_55_56_ladder_4;
            _2607 = frontier_phi_55_56_ladder_3;
            _2609 = frontier_phi_55_56_ladder_2;
            _2611 = frontier_phi_55_56_ladder;
            _2613 = frontier_phi_55_56_ladder_1;
        }
        float _2618 = isnan(1.0) ? _628 : (isnan(_628) ? 1.0 : min(_628, 1.0));
        _2365 = (_2618 * _2609) + _1817;
        _2367 = (_2618 * _2611) + _1819;
        _2369 = (_2618 * _2613) + _1821;
        _2371 = ((_2603 * 0.039999999105930328369140625) * _2618) + _2150;
        _2373 = ((_2605 * 0.039999999105930328369140625) * _2618) + _2152;
        _2375 = ((_2607 * 0.039999999105930328369140625) * _2618) + _2154;
    }
    else
    {
        _2365 = _1817;
        _2367 = _1819;
        _2369 = _1821;
        _2371 = _2150;
        _2373 = _2152;
        _2375 = _2154;
    }
    uint _2381 = _604 + uint(cbMatDynParam._m0[0u].w);
    float _2387 = ((((((_429.x - _426) * _362) + _426) * cbMtdParam._m0[13u].x) + ((((_383.x - _380) * _362) + _380) * cbMtdParam._m0[11u].x)) * _457) * cbInstanceData._m0[_2381].x;
    float _2388 = ((((((_429.y - _427) * _362) + _427) * cbMtdParam._m0[13u].y) + ((((_383.y - _381) * _362) + _381) * cbMtdParam._m0[11u].y)) * _457) * cbInstanceData._m0[_2381].y;
    float _2389 = ((((((_429.z - _428) * _362) + _428) * cbMtdParam._m0[13u].z) + ((((_383.z - _382) * _362) + _382) * cbMtdParam._m0[11u].z)) * _457) * cbInstanceData._m0[_2381].z;
    float _4245 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _4256 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _4267 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _2406 = (((isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0))) * (_2365 + ((isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0))) * _628))) + ((_2371 + ((isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0))) * _1434)) * cbPerFrame._m0[3u].x)) + _2387;
    float _2408 = (_2388 + ((_2373 + ((isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0))) * _1434)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0))) * (_2367 + ((isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0))) * _628)));
    float _2410 = (_2389 + ((_2375 + ((isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0))) * _1434)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * (_2369 + ((isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0))) * _628)));
    float _4293 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2423 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
    uint _2424 = _603 + 6u;
    float _2432 = _562 / cbSceneParam._m0[86u].x;
    float _2433 = _563 / cbSceneParam._m0[86u].y;
    vec4 _2447 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2432, _2433, (log2((isnan(cbSceneParam._m0[77u].w) ? _496 : (isnan(_496) ? cbSceneParam._m0[77u].w : min(_496, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2449 = _2447.x;
    float _2450 = _2447.y;
    float _2451 = _2447.z;
    float _2452 = _2447.w;
    float _2544;
    float _2546;
    float _2548;
    float _2550;
    if (_496 > cbSceneParam._m0[78u].w)
    {
        float _2507 = isnan(_496) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _496 : min(cbSceneParam._m0[80u].w, _496));
        float _2508 = _2507 / _496;
        float _2519 = _2508 * _547;
        float _2520 = _548 * _2508;
        float _2521 = (-0.0) - _2520;
        float _2522 = _2508 * _549;
        float _2524 = (cbSceneParam._m0[77u].w * _2521) / _2507;
        float _2525 = _2524 + cbSceneParam._m0[79u].w;
        float _2526 = cbSceneParam._m0[79u].w - _2520;
        float _2532 = sqrt(((_2519 * _2519) + (_2520 * _2520)) + (_2522 * _2522));
        float _2535 = (1.0 - (cbSceneParam._m0[77u].w / _2507)) * _2532;
        float _2540 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2542 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2704;
        if (abs((_2521 - _2524) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2704 = ((((_2525 > 0.0) ? exp2(_2540 * _2525) : (2.0 - exp2(_2542 * _2525))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2535;
        }
        else
        {
            float _2664 = 1.0 / cbSceneParam._m0[80u].x;
            float _2665 = isnan(_2526) ? _2525 : (isnan(_2525) ? _2526 : max(_2525, _2526));
            float _2666 = isnan(_2526) ? _2525 : (isnan(_2525) ? _2526 : min(_2525, _2526));
            float _2675 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : min(_2665, 0.0));
            float _2676 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : min(_2666, 0.0));
            _2704 = ((abs(_2532 / _2521) * cbSceneParam._m0[80u].y) * ((((_2675 - _2676) * 2.0) - ((exp2(_2540 * (isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0)))) - exp2(_2540 * (isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0))))) * _2664)) - ((exp2(_2542 * _2675) - exp2(_2542 * _2676)) * _2664))) + (_2535 * cbSceneParam._m0[80u].z);
        }
        vec4 _2706 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2432, _2433, 1.0), 0.0);
        float _2715 = exp2((_2704 * (-1.44269502162933349609375)) * (1.0 - _2706.w));
        float _2716 = log2(_2715);
        float _2732 = log2(_2452);
        _2544 = (exp2(_2732 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2716 * cbSceneParam._m0[78u].x)) * _2706.x) / cbSceneParam._m0[78u].x)) + _2449;
        _2546 = (exp2(_2732 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2716 * cbSceneParam._m0[78u].y)) * _2706.y) / cbSceneParam._m0[78u].y)) + _2450;
        _2548 = (exp2(_2732 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2716 * cbSceneParam._m0[78u].z)) * _2706.z) / cbSceneParam._m0[78u].z)) + _2451;
        _2550 = _2715 * _2452;
    }
    else
    {
        _2544 = _2449;
        _2546 = _2450;
        _2548 = _2451;
        _2550 = _2452;
    }
    float _2562 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2563 = _2562 == 3.0;
    float _2564 = log2(_2550);
    float _2568 = exp2(_2564 * cbSceneParam._m0[78u].x);
    float _2569 = exp2(_2564 * cbSceneParam._m0[78u].y);
    float _2570 = exp2(_2564 * cbSceneParam._m0[78u].z);
    float _2571 = _2568 * (isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0)));
    float _2572 = _2569 * (isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0)));
    float _2573 = _2570 * (isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0)));
    float _2582 = (_2562 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2582 * (_2563 ? _2571 : (_2571 + (cbSceneParam._m0[72u].w * _2544)));
    SV_Target.y = _2582 * (_2563 ? _2572 : (_2572 + (cbSceneParam._m0[72u].w * _2546)));
    SV_Target.z = _2582 * (_2563 ? _2573 : (_2573 + (cbSceneParam._m0[72u].w * _2548)));
    SV_Target.w = cbInstanceData._m0[_2424].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2387) * _2423) * _2568) * _2582;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2388) * _2423) * _2569) * _2582;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2389) * _2423) * _2570) * _2582;
    SV_Target_1.w = cbInstanceData._m0[_2424].w;
}


