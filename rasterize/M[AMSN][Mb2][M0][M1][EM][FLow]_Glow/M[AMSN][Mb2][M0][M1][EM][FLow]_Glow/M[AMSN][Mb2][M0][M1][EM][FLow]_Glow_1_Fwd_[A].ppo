#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1041;
float _3442;
float _3443;
float _3444;
float _3445;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _191 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _192 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _193 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _199 = inversesqrt(dot(vec3(_191, _192, _193), vec3(_191, _192, _193)));
    float _206 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _213 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _235 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _241 = _235.x * cbMtdParam._m0[9u].x;
    float _242 = _235.y * cbMtdParam._m0[9u].y;
    float _243 = _235.z * cbMtdParam._m0[9u].z;
    vec4 _260 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    vec4 _274 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _278 = _274.z;
    float _282 = (_274.x * 2.0) + (-1.0);
    float _284 = (_274.y * 2.0) + (-1.0);
    float _285 = dot(vec2(_282, _284), vec2(_282, _284));
    float _3454 = isnan(0.0) ? _285 : (isnan(_285) ? 0.0 : max(_285, 0.0));
    float _291 = sqrt(1.0 - (isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0))));
    float _304 = (cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _305 = (cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _335 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * ((cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * ((cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[10u].w));
    float _340 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[15u].w;
    float _347 = ((_335.y * 0.5) + (-0.25)) * cbMtdParam._m0[15u].z;
    float _349 = (-0.0) - (cbMtdParam._m0[15u].z * ((_335.x * 0.5) + (-0.25)));
    float _351 = fract(_340);
    float _353 = fract(_340 + 0.5);
    float _354 = _351 * _349;
    float _355 = _347 * _351;
    float _358 = _353 * _349;
    float _359 = _347 * _353;
    float _364 = abs((_351 * 2.0) + (-1.0));
    vec4 _380 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_354 + _304) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_355 + _305) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _382 = _380.x;
    float _383 = _380.y;
    float _384 = _380.z;
    vec4 _385 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_358 + _304) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_359 + _305) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _412 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _413 = (cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _426 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_354 + _412) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_355 + _413) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _428 = _426.x;
    float _429 = _426.y;
    float _430 = _426.z;
    vec4 _431 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_358 + _412) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_359 + _413) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _458 = (TEXCOORD_9.x - ((cbMtdParam._m0[16u].y * (1.0 - TEXCOORD_9.x)) * (_260.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[16u].z + 1.0);
    float _3465 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _459 = isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0));
    float _465 = fma(_291, _206 * NORMAL.x, fma(_284, _213 * TANGENT.x, (_199 * _191) * _282));
    float _468 = fma(_291, _206 * NORMAL.y, fma(_284, _213 * TANGENT.y, (_199 * _192) * _282));
    float _471 = fma(_291, _206 * NORMAL.z, fma(_284, _213 * TANGENT.z, (_199 * _193) * _282));
    float _475 = inversesqrt(dot(vec3(_465, _468, _471), vec3(_465, _468, _471)));
    float _476 = _475 * _465;
    float _477 = _475 * _468;
    float _478 = _475 * _471;
    float _3476 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _479 = isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0));
    float _3487 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3498 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _3509 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _498 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _539 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _549 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _539);
    float _550 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _539);
    float _551 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _539);
    float _555 = inversesqrt(dot(vec3(_549, _550, _551), vec3(_549, _550, _551)));
    float _556 = _549 * _555;
    float _557 = _550 * _555;
    float _558 = _551 * _555;
    vec4 _563 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _565 = _563.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _722 = sqrt(((_549 * _549) + (_550 * _550)) + (_551 * _551));
        float _728 = (cbMatDynParam._m0[5u].x * _722) + cbMatDynParam._m0[5u].y;
        float _3520 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
        float _729 = isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0));
        float _733 = (cbMatDynParam._m0[5u].z * _722) + cbMatDynParam._m0[5u].w;
        float _3531 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0))) - _729)) + _729) < ((_565 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _577 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _578 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _598 = fma(_478, cbSceneParam._m0[5u].z, fma(_477, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _476));
    float _601 = fma(_478, cbSceneParam._m0[6u].z, fma(_477, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _476));
    float _604 = fma(_478, cbSceneParam._m0[7u].z, fma(_477, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _476));
    uint _617 = uint(roundEven(NORMAL.w)) * 13u;
    uint _618 = _617 + 9u;
    uint _619 = _618 + uint(cbMatDynParam._m0[0u].w);
    float _625 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0)))) * cbInstanceData._m0[_619].x;
    float _626 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0)))) * cbInstanceData._m0[_619].y;
    float _627 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0)))) * cbInstanceData._m0[_619].z;
    float _3542 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _628 = isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0));
    float _3553 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _629 = isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0));
    float _3564 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _630 = isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0));
    vec4 _639 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _577, cbSceneParam._m0[86u].y * _578));
    float _642 = _639.x * TEXCOORD_3.w;
    float _643 = dot(vec3(_476, _477, _478), vec3(_556, _557, _558));
    float _646 = _643 * 2.0;
    float _650 = (_646 * _476) - _556;
    float _651 = (_646 * _477) - _557;
    float _652 = (_646 * _478) - _558;
    float _656 = abs(dot(vec3(_556, _557, _558), vec3(_476, _477, _478)));
    float _3575 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _658 = sqrt(_479);
    float _671 = exp2((_658 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_658 * 3.0));
    float _703 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _707 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _711 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1040;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _766 = fma(_711, cbModelParam._m0[26u].z, fma(_707, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _703));
        float _770 = fma(_711, cbModelParam._m0[27u].z, fma(_707, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _703));
        float _774 = fma(_711, cbModelParam._m0[28u].z, fma(_707, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _703));
        float _798 = _703 + _476;
        float _799 = _707 + _477;
        float _800 = _711 + _478;
        float _810 = fma(_800, cbModelParam._m0[26u].z, fma(_799, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _798)) - _766;
        float _811 = fma(_800, cbModelParam._m0[27u].z, fma(_799, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _798)) - _770;
        float _812 = fma(_800, cbModelParam._m0[28u].z, fma(_799, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _798)) - _774;
        float _816 = inversesqrt(dot(vec3(_810, _811, _812), vec3(_810, _811, _812)));
        float _829 = ((_816 * _810) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_766 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _830 = ((_816 * _811) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_770 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _831 = ((_816 * _812) / cbModelParam._m0[34u].z) + ((((((_774 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _834 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_829, _830, _831), 0.0);
        vec4 _841 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_829, _830, _831), 0.0);
        vec4 _848 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_829, _830, _831), 0.0);
        vec4 _855 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_829, _830, _831), 0.0);
        float _868 = exp2((_834.w + (-0.5)) * 20.0) * 2.0;
        float _869 = _868 * (_834.x + (-0.5));
        float _870 = _868 * (_834.y + (-0.5));
        float _871 = _868 * (_834.z + (-0.5));
        float _878 = exp2((_841.w + (-0.5)) * 20.0) * 2.0;
        float _879 = _878 * (_841.x + (-0.5));
        float _880 = _878 * (_841.y + (-0.5));
        float _881 = _878 * (_841.z + (-0.5));
        float _888 = exp2((_848.w + (-0.5)) * 20.0) * 2.0;
        float _889 = _888 * (_848.x + (-0.5));
        float _890 = _888 * (_848.y + (-0.5));
        float _891 = _888 * (_848.z + (-0.5));
        float _898 = exp2((_855.w + (-0.5)) * 20.0) * 2.0;
        float _899 = _898 * (_855.x + (-0.5));
        float _900 = _898 * (_855.y + (-0.5));
        float _901 = _898 * (_855.z + (-0.5));
        float _902 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _903 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _904 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _905 = _869 * 0.5;
        float _906 = _879 * 0.5;
        float _907 = _889 * 0.5;
        float _908 = dot(vec3(_905, _906, _907), vec3(_905, _906, _907));
        float _913 = (_908 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_908);
        float _922 = (dot(vec3(_476, _477, _478), vec3(_913 * _905, _913 * _906, _913 * _907)) + 1.0) * 0.5;
        float _3601 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _932 = sqrt(((_906 * _906) + (_905 * _905)) + (_907 * _907)) / (_902 + 9.9999997473787516355514526367188e-06);
        float _3612 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _933 = isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0));
        float _934 = _933 * 2.0;
        float _938 = (1.0 - _933) / (_933 + 1.0);
        float _3623 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _939 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
        float _948 = ((((1.0 - _939) * (_934 + 2.0)) * exp2(log2(isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0))) * (_934 + 1.0))) + _939) * _902;
        float _949 = _870 * 0.5;
        float _950 = _880 * 0.5;
        float _951 = _890 * 0.5;
        float _952 = dot(vec3(_949, _950, _951), vec3(_949, _950, _951));
        float _957 = (_952 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_952);
        float _965 = (dot(vec3(_476, _477, _478), vec3(_957 * _949, _957 * _950, _957 * _951)) + 1.0) * 0.5;
        float _3634 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _974 = sqrt(((_950 * _950) + (_949 * _949)) + (_951 * _951)) / (_903 + 9.9999997473787516355514526367188e-06);
        float _3645 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _975 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
        float _976 = _975 * 2.0;
        float _980 = (1.0 - _975) / (_975 + 1.0);
        float _3656 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _981 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
        float _990 = ((((1.0 - _981) * (_976 + 2.0)) * exp2(log2(isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0))) * (_976 + 1.0))) + _981) * _903;
        float _991 = _871 * 0.5;
        float _992 = _881 * 0.5;
        float _993 = _891 * 0.5;
        float _994 = dot(vec3(_991, _992, _993), vec3(_991, _992, _993));
        float _999 = (_994 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_994);
        float _1007 = (dot(vec3(_476, _477, _478), vec3(_999 * _991, _999 * _992, _999 * _993)) + 1.0) * 0.5;
        float _3667 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1016 = sqrt(((_992 * _992) + (_991 * _991)) + (_993 * _993)) / (_904 + 9.9999997473787516355514526367188e-06);
        float _3678 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1017 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
        float _1018 = _1017 * 2.0;
        float _1022 = (1.0 - _1017) / (_1017 + 1.0);
        float _3689 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1023 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
        float _1032 = ((((1.0 - _1023) * (_1018 + 2.0)) * exp2(log2(isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0))) * (_1018 + 1.0))) + _1023) * _904;
        _1040 = _871;
        _1042 = _870;
        _1043 = _869;
        _1044 = _881;
        _1045 = _880;
        _1046 = _879;
        _1047 = _891;
        _1048 = _890;
        _1049 = _889;
        _1050 = _904;
        _1051 = _903;
        _1052 = _902;
        _1053 = cbModelParam._m0[36u].z * (isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0)));
        _1054 = cbModelParam._m0[36u].z * (isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0)));
        _1055 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0)));
    }
    else
    {
        _1040 = _1041;
        _1042 = _1041;
        _1043 = _1041;
        _1044 = _1041;
        _1045 = _1041;
        _1046 = _1041;
        _1047 = _1041;
        _1048 = _1041;
        _1049 = _1041;
        _1050 = _1041;
        _1051 = _1041;
        _1052 = _1041;
        _1053 = 0.0;
        _1054 = 0.0;
        _1055 = 0.0;
    }
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1084 = fma(_711, cbModelParam._m0[30u].z, fma(_707, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _703));
        float _1088 = fma(_711, cbModelParam._m0[31u].z, fma(_707, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _703));
        float _1092 = fma(_711, cbModelParam._m0[32u].z, fma(_707, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _703));
        float _1115 = _703 + _476;
        float _1116 = _707 + _477;
        float _1117 = _711 + _478;
        float _1127 = fma(_1117, cbModelParam._m0[30u].z, fma(_1116, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1115)) - _1084;
        float _1128 = fma(_1117, cbModelParam._m0[31u].z, fma(_1116, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1115)) - _1088;
        float _1129 = fma(_1117, cbModelParam._m0[32u].z, fma(_1116, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1115)) - _1092;
        float _1133 = inversesqrt(dot(vec3(_1127, _1128, _1129), vec3(_1127, _1128, _1129)));
        float _1146 = ((_1133 * _1127) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1084 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1147 = ((_1133 * _1128) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1088 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1148 = ((_1133 * _1129) / cbModelParam._m0[35u].z) + ((((((_1092 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1150 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1146, _1147, _1148), 0.0);
        vec4 _1157 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1146, _1147, _1148), 0.0);
        vec4 _1164 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1146, _1147, _1148), 0.0);
        vec4 _1171 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1146, _1147, _1148), 0.0);
        float _1183 = exp2((_1150.w + (-0.5)) * 20.0) * 2.0;
        float _1184 = _1183 * (_1150.x + (-0.5));
        float _1185 = _1183 * (_1150.y + (-0.5));
        float _1186 = _1183 * (_1150.z + (-0.5));
        float _1193 = exp2((_1157.w + (-0.5)) * 20.0) * 2.0;
        float _1194 = _1193 * (_1157.x + (-0.5));
        float _1195 = _1193 * (_1157.y + (-0.5));
        float _1196 = _1193 * (_1157.z + (-0.5));
        float _1203 = exp2((_1164.w + (-0.5)) * 20.0) * 2.0;
        float _1204 = _1203 * (_1164.x + (-0.5));
        float _1205 = _1203 * (_1164.y + (-0.5));
        float _1206 = _1203 * (_1164.z + (-0.5));
        float _1213 = exp2((_1171.w + (-0.5)) * 20.0) * 2.0;
        float _1214 = _1213 * (_1171.x + (-0.5));
        float _1215 = _1213 * (_1171.y + (-0.5));
        float _1216 = _1213 * (_1171.z + (-0.5));
        float _1217 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1218 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1219 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1220 = _1184 * 0.5;
        float _1221 = _1194 * 0.5;
        float _1222 = _1204 * 0.5;
        float _1223 = dot(vec3(_1220, _1221, _1222), vec3(_1220, _1221, _1222));
        float _1228 = (_1223 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1223);
        float _1236 = (dot(vec3(_476, _477, _478), vec3(_1228 * _1220, _1228 * _1221, _1228 * _1222)) + 1.0) * 0.5;
        float _3730 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1245 = sqrt(((_1221 * _1221) + (_1220 * _1220)) + (_1222 * _1222)) / (_1217 + 9.9999997473787516355514526367188e-06);
        float _3741 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
        float _1247 = _1246 * 2.0;
        float _1251 = (1.0 - _1246) / (_1246 + 1.0);
        float _3752 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
        float _1261 = ((((1.0 - _1252) * (_1247 + 2.0)) * exp2(log2(isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))) * (_1247 + 1.0))) + _1252) * _1217;
        float _1262 = _1185 * 0.5;
        float _1263 = _1195 * 0.5;
        float _1264 = _1205 * 0.5;
        float _1265 = dot(vec3(_1262, _1263, _1264), vec3(_1262, _1263, _1264));
        float _1270 = (_1265 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1265);
        float _1278 = (dot(vec3(_476, _477, _478), vec3(_1270 * _1262, _1270 * _1263, _1270 * _1264)) + 1.0) * 0.5;
        float _3763 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1287 = sqrt(((_1263 * _1263) + (_1262 * _1262)) + (_1264 * _1264)) / (_1218 + 9.9999997473787516355514526367188e-06);
        float _3774 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1288 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
        float _1289 = _1288 * 2.0;
        float _1293 = (1.0 - _1288) / (_1288 + 1.0);
        float _3785 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1294 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
        float _1303 = ((((1.0 - _1294) * (_1289 + 2.0)) * exp2(log2(isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0))) * (_1289 + 1.0))) + _1294) * _1218;
        float _1304 = _1186 * 0.5;
        float _1305 = _1196 * 0.5;
        float _1306 = _1206 * 0.5;
        float _1307 = dot(vec3(_1304, _1305, _1306), vec3(_1304, _1305, _1306));
        float _1312 = (_1307 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1307);
        float _1320 = (dot(vec3(_476, _477, _478), vec3(_1312 * _1304, _1312 * _1305, _1312 * _1306)) + 1.0) * 0.5;
        float _3796 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1329 = sqrt(((_1305 * _1305) + (_1304 * _1304)) + (_1306 * _1306)) / (_1219 + 9.9999997473787516355514526367188e-06);
        float _3807 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
        float _1331 = _1330 * 2.0;
        float _1335 = (1.0 - _1330) / (_1330 + 1.0);
        float _3818 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
        float _1345 = ((((1.0 - _1336) * (_1331 + 2.0)) * exp2(log2(isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0))) * (_1331 + 1.0))) + _1336) * _1219;
        _1353 = _1186;
        _1354 = _1185;
        _1355 = _1184;
        _1356 = _1196;
        _1357 = _1195;
        _1358 = _1194;
        _1359 = _1206;
        _1360 = _1205;
        _1361 = _1204;
        _1362 = _1219;
        _1363 = _1218;
        _1364 = _1217;
        _1365 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0)));
        _1366 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0)));
        _1367 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0)));
    }
    else
    {
        _1353 = _1041;
        _1354 = _1041;
        _1355 = _1041;
        _1356 = _1041;
        _1357 = _1041;
        _1358 = _1041;
        _1359 = _1041;
        _1360 = _1041;
        _1361 = _1041;
        _1362 = _1041;
        _1363 = _1041;
        _1364 = _1041;
        _1365 = 0.0;
        _1366 = 0.0;
        _1367 = 0.0;
    }
    float _1377 = (cbModelParam._m0[1u].x * (_1365 - _1053)) + _1053;
    float _1378 = (cbModelParam._m0[1u].x * (_1366 - _1054)) + _1054;
    float _1379 = (cbModelParam._m0[1u].x * (_1367 - _1055)) + _1055;
    float _1400 = fma(_1379, cbSceneParam._m0[89u].z, fma(_1378, cbSceneParam._m0[89u].y, _1377 * cbSceneParam._m0[89u].x));
    float _1403 = fma(_1379, cbSceneParam._m0[90u].z, fma(_1378, cbSceneParam._m0[90u].y, _1377 * cbSceneParam._m0[90u].x));
    float _1406 = fma(_1379, cbSceneParam._m0[91u].z, fma(_1378, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1377));
    float _1421 = _650 * 0.5;
    float _1422 = _651 * 0.5;
    float _1423 = _652 * 0.5;
    float _1424 = dot(vec4(_1421, _1422, _1423, 1.0), vec4(_1355, _1358, _1361, _1364));
    float _1427 = dot(vec4(_1421, _1422, _1423, 1.0), vec4(_1354, _1357, _1360, _1363));
    float _1430 = dot(vec4(_1421, _1422, _1423, 1.0), vec4(_1353, _1356, _1359, _1362));
    float _1464;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1437 = dot(vec4(_1421, _1422, _1423, 1.0), vec4(_1040, _1044, _1047, _1050));
        float _1441 = dot(vec4(_1421, _1422, _1423, 1.0), vec4(_1042, _1045, _1048, _1051));
        float _1445 = dot(vec4(_1421, _1422, _1423, 1.0), vec4(_1043, _1046, _1049, _1052));
        float _1452 = dot(vec4(cbModelParam._m0[39u]), vec4(_1421, _1422, _1423, 1.0));
        _1464 = dot(vec3(isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0)), isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0)), isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1452) ? 0.0 : (isnan(0.0) ? _1452 : max(0.0, _1452))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1464 = 1.0;
    }
    float _1475;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1466 = dot(vec4(cbModelParam._m0[40u]), vec4(_1421, _1422, _1423, 1.0));
        _1475 = dot(vec3(isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0)), isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0)), isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1466) ? 0.0 : (isnan(0.0) ? _1466 : max(0.0, _1466))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1475 = 1.0;
    }
    float _1479 = (_1475 * cbModelParam._m0[1u].x) + (_1464 * (1.0 - cbModelParam._m0[1u].x));
    float _1489 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _479);
    float _1490 = isnan(_1489) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1489 : min(cbModelParam._m0[25u].z, _1489));
    float _1571;
    float _1573;
    float _1575;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1538 = fma(_711, cbModelParam._m0[13u].z, fma(_707, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _703)) + cbModelParam._m0[13u].w;
        float _1542 = fma(_711, cbModelParam._m0[14u].z, fma(_707, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _703)) + cbModelParam._m0[14u].w;
        float _1546 = fma(_711, cbModelParam._m0[15u].z, fma(_707, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _703)) + cbModelParam._m0[15u].w;
        float _1549 = fma(_652, cbModelParam._m0[13u].z, fma(_651, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _650));
        float _1552 = fma(_652, cbModelParam._m0[14u].z, fma(_651, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _650));
        float _1555 = fma(_652, cbModelParam._m0[15u].z, fma(_651, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _650));
        float _1583;
        if (_1549 > 0.0)
        {
            _1583 = abs((1.0 - _1538) / _1549);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1549 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1538 + 1.0) / _1549);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1583 = frontier_phi_17_15_ladder;
        }
        float _1786;
        if (_1552 > 0.0)
        {
            _1786 = abs((1.0 - _1542) / _1552);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1552 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1542 + 1.0) / _1552);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1786 = frontier_phi_26_22_ladder;
        }
        float _2029;
        if (_1555 > 0.0)
        {
            _2029 = abs((1.0 - _1546) / _1555);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1555 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1546 + 1.0) / _1555);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2029 = frontier_phi_38_33_ladder;
        }
        float _2031 = isnan(_1786) ? _1583 : (isnan(_1583) ? _1786 : min(_1583, _1786));
        float _2032 = isnan(_2029) ? _2031 : (isnan(_2031) ? _2029 : min(_2031, _2029));
        float _2036 = (_2032 * _1549) + _1538;
        float _2037 = (_2032 * _1552) + _1542;
        float _2038 = (_2032 * _1555) + _1546;
        float _2039 = _2032 * 9.9999997473787516355514526367188e-05;
        float _2041 = (-1.0) - _2039;
        float _2043 = _2039 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2038 > _2043) || ((_2038 < _2041) || ((_2037 > _2043) || ((_2037 < _2041) || ((_2036 < _2041) || (_2036 > _2043))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2162 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2038, cbModelParam._m0[9u].z, fma(_2037, cbModelParam._m0[9u].y, _2036 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2038, cbModelParam._m0[10u].z, fma(_2037, cbModelParam._m0[10u].y, _2036 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2038, cbModelParam._m0[11u].z, fma(_2037, cbModelParam._m0[11u].y, _2036 * cbModelParam._m0[11u].x))), _1490);
            frontier_phi_16_38_ladder = _2162.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2162.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2162.x * cbModelParam._m0[1u].y;
        }
        _1571 = frontier_phi_16_38_ladder_2;
        _1573 = frontier_phi_16_38_ladder_1;
        _1575 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1559 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_650, _651, _652), _1490);
        _1571 = _1559.x * cbModelParam._m0[1u].y;
        _1573 = _1559.y * cbModelParam._m0[1u].y;
        _1575 = _1559.z * cbModelParam._m0[1u].y;
    }
    float _1579 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _479);
    float _1580 = isnan(_1579) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1579 : min(cbModelParam._m0[25u].w, _1579));
    float _1670;
    float _1672;
    float _1674;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1634 = fma(_711, cbModelParam._m0[21u].z, fma(_707, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _703)) + cbModelParam._m0[21u].w;
        float _1638 = fma(_711, cbModelParam._m0[22u].z, fma(_707, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _703)) + cbModelParam._m0[22u].w;
        float _1642 = fma(_711, cbModelParam._m0[23u].z, fma(_707, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _703)) + cbModelParam._m0[23u].w;
        float _1645 = fma(_652, cbModelParam._m0[21u].z, fma(_651, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _650));
        float _1648 = fma(_652, cbModelParam._m0[22u].z, fma(_651, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _650));
        float _1651 = fma(_652, cbModelParam._m0[23u].z, fma(_651, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _650));
        float _1791;
        if (_1645 > 0.0)
        {
            _1791 = abs((1.0 - _1634) / _1645);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1645 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1634 + 1.0) / _1645);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1791 = frontier_phi_28_24_ladder;
        }
        float _2056;
        if (_1648 > 0.0)
        {
            _2056 = abs((1.0 - _1638) / _1648);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1648 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1638 + 1.0) / _1648);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2056 = frontier_phi_40_35_ladder;
        }
        float _2261;
        if (_1651 > 0.0)
        {
            _2261 = abs((1.0 - _1642) / _1651);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1651 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1642 + 1.0) / _1651);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2261 = frontier_phi_49_46_ladder;
        }
        float _2263 = isnan(_2056) ? _1791 : (isnan(_1791) ? _2056 : min(_1791, _2056));
        float _2264 = isnan(_2261) ? _2263 : (isnan(_2263) ? _2261 : min(_2263, _2261));
        float _2268 = (_2264 * _1645) + _1634;
        float _2269 = (_2264 * _1648) + _1638;
        float _2270 = (_2264 * _1651) + _1642;
        float _2271 = _2264 * 9.9999997473787516355514526367188e-05;
        float _2272 = (-1.0) - _2271;
        float _2274 = _2271 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2270 > _2274) || ((_2270 < _2272) || ((_2269 > _2274) || ((_2269 < _2272) || ((_2268 < _2272) || (_2268 > _2274))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2498 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2270, cbModelParam._m0[17u].z, fma(_2269, cbModelParam._m0[17u].y, _2268 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2270, cbModelParam._m0[18u].z, fma(_2269, cbModelParam._m0[18u].y, _2268 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2270, cbModelParam._m0[19u].z, fma(_2269, cbModelParam._m0[19u].y, _2268 * cbModelParam._m0[19u].x))), _1580);
            frontier_phi_25_49_ladder = _2498.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2498.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2498.x * cbModelParam._m0[1u].z;
        }
        _1670 = frontier_phi_25_49_ladder_2;
        _1672 = frontier_phi_25_49_ladder_1;
        _1674 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1654 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_650, _651, _652), _1580);
        _1670 = _1654.x * cbModelParam._m0[1u].z;
        _1672 = _1654.y * cbModelParam._m0[1u].z;
        _1674 = _1654.z * cbModelParam._m0[1u].z;
    }
    float _1686 = ((((1.0 - _671) * ((_658 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_671 * _658)) * _642;
    float _1687 = _1686 * ((cbModelParam._m0[1u].w * (_1670 - _1571)) + _1571);
    float _1688 = _1686 * ((cbModelParam._m0[1u].w * (_1672 - _1573)) + _1573);
    float _1689 = _1686 * ((cbModelParam._m0[1u].w * (_1674 - _1575)) + _1575);
    float _1692 = fma(_1689, cbSceneParam._m0[89u].z, fma(_1688, cbSceneParam._m0[89u].y, _1687 * cbSceneParam._m0[89u].x));
    float _1695 = fma(_1689, cbSceneParam._m0[90u].z, fma(_1688, cbSceneParam._m0[90u].y, _1687 * cbSceneParam._m0[90u].x));
    float _1698 = fma(_1689, cbSceneParam._m0[91u].z, fma(_1688, cbSceneParam._m0[91u].y, _1687 * cbSceneParam._m0[91u].x));
    uvec4 _1708 = floatBitsToUint(cbInstanceData._m0[_617 + 5u]);
    uint _1710 = _1708.x * 14u;
    uint _1711 = _1710 + 13u;
    float _1718 = _642 + (-1.0);
    float _1723 = (cbLight._m0[_1711].x * _1718) + 1.0;
    float _1724 = (cbLight._m0[_1711].y * _1718) + 1.0;
    float _1725 = (cbLight._m0[_1711].z * _1718) + 1.0;
    float _1726 = (cbLight._m0[_1711].w * _1718) + 1.0;
    uint _1727 = _1710 + 5u;
    float _1733 = isnan(1.0) ? _1724 : (isnan(_1724) ? 1.0 : min(_1724, 1.0));
    uint _1737 = _1710 + 4u;
    float _1744 = isnan(1.0) ? _1723 : (isnan(_1723) ? 1.0 : min(_1723, 1.0));
    uint _1748 = _1710 | 1u;
    float _1759 = dot(vec3(cbLight._m0[_1710].xyz), vec3(_476, _477, _478));
    float _1762 = dot(vec3(cbLight._m0[_1748].xyz), vec3(_476, _477, _478));
    float _3954 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
    float _3965 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
    float _1767 = (isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0))) * 0.3183098733425140380859375;
    float _1769 = (isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0))) * 0.3183098733425140380859375;
    float _1776 = ((cbLight._m0[_1727].x * _1733) * _1769) + ((cbLight._m0[_1737].x * _1744) * _1767);
    float _1777 = ((_1733 * cbLight._m0[_1727].y) * _1769) + ((_1744 * cbLight._m0[_1737].y) * _1767);
    float _1778 = ((_1733 * cbLight._m0[_1727].z) * _1769) + ((_1744 * cbLight._m0[_1737].z) * _1767);
    uvec4 _1783 = floatBitsToUint(cbLight._m0[_1710 + 12u]);
    bool _1785 = _1783.x == 0u;
    float _1796;
    float _1798;
    float _1800;
    if (_1785)
    {
        _1796 = _1776;
        _1798 = _1777;
        _1800 = _1778;
    }
    else
    {
        uint _1804 = _1710 + 6u;
        float _1820 = (dot(vec3(cbLight._m0[_1710 + 2u].xyz), vec3(_476, _477, _478)) * 0.5) + 0.5;
        float _1821 = _1820 * _1820;
        float _3976 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
        float _1822 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
        float _1823 = isnan(1.0) ? _1725 : (isnan(_1725) ? 1.0 : min(_1725, 1.0));
        _1796 = (((cbLight._m0[_1804].x * 0.3183098733425140380859375) * _1822) * _1823) + _1776;
        _1798 = (((cbLight._m0[_1804].y * 0.3183098733425140380859375) * _1822) * _1823) + _1777;
        _1800 = (((cbLight._m0[_1804].z * 0.3183098733425140380859375) * _1822) * _1823) + _1778;
    }
    bool _1803 = _1783.y == 0u;
    float _1841;
    float _1843;
    float _1845;
    if (_1803)
    {
        _1841 = _1796;
        _1843 = _1798;
        _1845 = _1800;
    }
    else
    {
        uint _2000 = _1710 + 7u;
        float _2016 = (dot(vec3(cbLight._m0[_1710 + 3u].xyz), vec3(_476, _477, _478)) * 0.5) + 0.5;
        float _2017 = _2016 * _2016;
        float _3992 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
        float _2018 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
        float _2019 = isnan(1.0) ? _1726 : (isnan(_1726) ? 1.0 : min(_1726, 1.0));
        _1841 = (((cbLight._m0[_2000].x * 0.3183098733425140380859375) * _2018) * _2019) + _1796;
        _1843 = (((cbLight._m0[_2000].y * 0.3183098733425140380859375) * _2018) * _2019) + _1798;
        _1845 = (((cbLight._m0[_2000].z * 0.3183098733425140380859375) * _2018) * _2019) + _1800;
    }
    uint _1848 = _1710 + 8u;
    float _1861 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1710].w)) * _479) * 0.949999988079071044921875);
    float _1862 = _1861 * _1861;
    float _1863 = cbLight._m0[_1710].x + _556;
    float _1864 = cbLight._m0[_1710].y + _557;
    float _1865 = cbLight._m0[_1710].z + _558;
    float _1869 = inversesqrt(dot(vec3(_1863, _1864, _1865), vec3(_1863, _1864, _1865)));
    float _1870 = _1869 * _1863;
    float _1871 = _1869 * _1864;
    float _1872 = _1869 * _1865;
    float _1873 = dot(vec3(_476, _477, _478), vec3(cbLight._m0[_1710].xyz));
    float _4008 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
    float _1876 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
    float _4019 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _1877 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
    float _1878 = dot(vec3(_476, _477, _478), vec3(_1870, _1871, _1872));
    float _4030 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
    float _1881 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
    float _1882 = dot(vec3(cbLight._m0[_1710].xyz), vec3(_1870, _1871, _1872));
    float _4041 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
    float _1886 = _1862 * _1862;
    float _1890 = ((_1881 * _1881) * (_1886 + (-1.0))) + 1.0;
    float _1901 = (exp2(log2(1.0 - (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1902 = 1.0 - _1862;
    float _1913 = (0.5 / (((_1877 * ((_1876 * _1902) + _1862)) + 9.9999999392252902907785028219223e-09) + (((_1877 * _1902) + _1862) * _1876))) * _1876;
    float _4052 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
    float _1915 = (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * (_1886 / ((_1890 * _1890) * 3.141590118408203125));
    uint _1926 = _1710 + 9u;
    float _1937 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1748].w)) * _479) * 0.949999988079071044921875);
    float _1938 = _1937 * _1937;
    float _1939 = cbLight._m0[_1748].x + _556;
    float _1940 = cbLight._m0[_1748].y + _557;
    float _1941 = cbLight._m0[_1748].z + _558;
    float _1945 = inversesqrt(dot(vec3(_1939, _1940, _1941), vec3(_1939, _1940, _1941)));
    float _1946 = _1945 * _1939;
    float _1947 = _1945 * _1940;
    float _1948 = _1945 * _1941;
    float _1949 = dot(vec3(_476, _477, _478), vec3(cbLight._m0[_1748].xyz));
    float _4063 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
    float _1952 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
    float _1953 = dot(vec3(_476, _477, _478), vec3(_1946, _1947, _1948));
    float _4074 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
    float _1956 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
    float _1957 = dot(vec3(cbLight._m0[_1748].xyz), vec3(_1946, _1947, _1948));
    float _4085 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
    float _1961 = _1938 * _1938;
    float _1965 = ((_1956 * _1956) * (_1961 + (-1.0))) + 1.0;
    float _1974 = (exp2(log2(1.0 - (isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1975 = 1.0 - _1938;
    float _1985 = (0.5 / (((_1877 * ((_1952 * _1975) + _1938)) + 9.9999999392252902907785028219223e-09) + (((_1877 * _1975) + _1938) * _1952))) * _1952;
    float _4096 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
    float _1987 = (isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))) * (_1961 / ((_1965 * _1965) * 3.141590118408203125));
    float _1997 = (((_1974 * cbLight._m0[_1926].x) * _1987) * _1733) + (((_1901 * cbLight._m0[_1848].x) * _1915) * _1744);
    float _1998 = (((_1974 * cbLight._m0[_1926].y) * _1987) * _1733) + (((_1901 * cbLight._m0[_1848].y) * _1915) * _1744);
    float _1999 = (((_1974 * cbLight._m0[_1926].z) * _1987) * _1733) + (((_1901 * cbLight._m0[_1848].z) * _1915) * _1744);
    float _2061;
    float _2063;
    float _2065;
    if (_1785)
    {
        _2061 = _1997;
        _2063 = _1998;
        _2065 = _1999;
    }
    else
    {
        uint _2067 = _1710 + 2u;
        uint _2071 = _1710 + 10u;
        float _2085 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2067].w)) * _479) * 0.949999988079071044921875);
        float _2086 = _2085 * _2085;
        float _2087 = cbLight._m0[_2067].x + _556;
        float _2088 = cbLight._m0[_2067].y + _557;
        float _2089 = cbLight._m0[_2067].z + _558;
        float _2093 = inversesqrt(dot(vec3(_2087, _2088, _2089), vec3(_2087, _2088, _2089)));
        float _2094 = _2093 * _2087;
        float _2095 = _2093 * _2088;
        float _2096 = _2093 * _2089;
        float _2097 = dot(vec3(_476, _477, _478), vec3(cbLight._m0[_2067].xyz));
        float _4107 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
        float _2100 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
        float _2101 = dot(vec3(_476, _477, _478), vec3(_2094, _2095, _2096));
        float _4118 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
        float _2104 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _2105 = dot(vec3(cbLight._m0[_2067].xyz), vec3(_2094, _2095, _2096));
        float _4129 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
        float _2109 = _2086 * _2086;
        float _2113 = ((_2104 * _2104) * (_2109 + (-1.0))) + 1.0;
        float _2122 = (exp2(log2(1.0 - (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2123 = 1.0 - _2086;
        float _2133 = (0.5 / (((_1877 * ((_2100 * _2123) + _2086)) + 9.9999999392252902907785028219223e-09) + (((_1877 * _2123) + _2086) * _2100))) * _2100;
        float _4140 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
        float _2135 = (isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (_2109 / ((_2113 * _2113) * 3.141590118408203125));
        float _2136 = isnan(1.0) ? _1725 : (isnan(_1725) ? 1.0 : min(_1725, 1.0));
        _2061 = (((_2122 * cbLight._m0[_2071].x) * _2135) * _2136) + _1997;
        _2063 = (((_2122 * cbLight._m0[_2071].y) * _2135) * _2136) + _1998;
        _2065 = (((_2122 * cbLight._m0[_2071].z) * _2135) * _2136) + _1999;
    }
    float _2171;
    float _2173;
    float _2175;
    if (_1803)
    {
        _2171 = _2061;
        _2173 = _2063;
        _2175 = _2065;
    }
    else
    {
        uint _2182 = _1710 + 3u;
        uint _2186 = _1710 + 11u;
        float _2200 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2182].w)) * _479) * 0.949999988079071044921875);
        float _2201 = _2200 * _2200;
        float _2202 = cbLight._m0[_2182].x + _556;
        float _2203 = cbLight._m0[_2182].y + _557;
        float _2204 = cbLight._m0[_2182].z + _558;
        float _2208 = inversesqrt(dot(vec3(_2202, _2203, _2204), vec3(_2202, _2203, _2204)));
        float _2209 = _2208 * _2202;
        float _2210 = _2208 * _2203;
        float _2211 = _2208 * _2204;
        float _2212 = dot(vec3(_476, _477, _478), vec3(cbLight._m0[_2182].xyz));
        float _4156 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
        float _2215 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _2216 = dot(vec3(_476, _477, _478), vec3(_2209, _2210, _2211));
        float _4167 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
        float _2219 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _2220 = dot(vec3(cbLight._m0[_2182].xyz), vec3(_2209, _2210, _2211));
        float _4178 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
        float _2224 = _2201 * _2201;
        float _2228 = ((_2219 * _2219) * (_2224 + (-1.0))) + 1.0;
        float _2237 = (exp2(log2(1.0 - (isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2238 = 1.0 - _2201;
        float _2248 = (0.5 / (((_1877 * ((_2215 * _2238) + _2201)) + 9.9999999392252902907785028219223e-09) + (((_1877 * _2238) + _2201) * _2215))) * _2215;
        float _4189 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
        float _2250 = (isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0))) * (_2224 / ((_2228 * _2228) * 3.141590118408203125));
        float _2251 = isnan(1.0) ? _1726 : (isnan(_1726) ? 1.0 : min(_1726, 1.0));
        _2171 = (((_2237 * cbLight._m0[_2186].x) * _2250) * _2251) + _2061;
        _2173 = (((_2237 * cbLight._m0[_2186].y) * _2250) * _2251) + _2063;
        _2175 = (((_2237 * cbLight._m0[_2186].z) * _2250) * _2251) + _2065;
    }
    float _2386;
    float _2388;
    float _2390;
    float _2392;
    float _2394;
    float _2396;
    if (_1708.y == 0u)
    {
        float _2326 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2327 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2326;
        float _2328 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2326;
        float _2329 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2326;
        uvec4 _2341 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2342 = _2341.x;
        uint _2353 = uint((float(_2341.y) * floor(float(uint(cbSceneParam._m0[85u].y * _578) / _2342))) + floor(float(uint(cbSceneParam._m0[85u].x * _577) / _2342)));
        float _2363 = (log2(_2329 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2364 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
        uint _2367 = uint(isnan(14.0) ? _2364 : (isnan(_2364) ? 14.0 : min(_2364, 14.0)));
        uvec4 _2372 = texelFetch(g_lightClusterGridBuffer, int(((_2367 << 2u) + (_2353 << 6u)) >> 2u));
        uint _2373 = _2372.x;
        uint _2374 = _2341.z;
        float _2503;
        float _2505;
        float _2507;
        float _2509;
        float _2511;
        float _2513;
        if (((((1u << ((_2374 >> 4u) & 15u)) + 4294967295u) & _2373) == 0u) || ((_2374 & 240u) == 0u))
        {
            _2503 = 0.0;
            _2505 = 0.0;
            _2507 = 0.0;
            _2509 = 0.0;
            _2511 = 0.0;
            _2513 = 0.0;
        }
        else
        {
            float _2504;
            float _2506;
            float _2508;
            float _2510;
            float _2512;
            float _2514;
            float _2664 = 0.0;
            float _2665 = 0.0;
            float _2666 = 0.0;
            float _2667 = 0.0;
            float _2668 = 0.0;
            float _2669 = 0.0;
            uint _2670 = 0u;
            uint _2679;
            bool _2680;
            for (;;)
            {
                _2679 = texelFetch(g_lightClassification, int((((_2367 << 5u) + (_2353 << 9u)) + (_2670 << 2u)) >> 2u)).x;
                _2680 = _2679 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2680)
                {
                    frontier_phi_66_pred = _2664;
                    frontier_phi_66_pred_1 = _2669;
                    frontier_phi_66_pred_2 = _2668;
                    frontier_phi_66_pred_3 = _2667;
                    frontier_phi_66_pred_4 = _2666;
                    frontier_phi_66_pred_5 = _2665;
                }
                else
                {
                    float _2809;
                    float _2810;
                    float _2811;
                    float _2812;
                    float _2813;
                    float _2814;
                    uint _2815;
                    _2809 = _2664;
                    _2810 = _2665;
                    _2811 = _2666;
                    _2812 = _2667;
                    _2813 = _2668;
                    _2814 = _2669;
                    _2815 = _2679;
                    float _2736;
                    float _2737;
                    float _2738;
                    float _2739;
                    float _2740;
                    float _2741;
                    for (;;)
                    {
                        uint _2819 = uint(findLSB(_2815)) + (_2670 << 5u);
                        uint _2816 = (_2815 + 4294967295u) & _2815;
                        uint _2821 = _2819 * 48u;
                        vec4 _2835 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2821)).x, texelFetch(g_PointLightRenderingBuffer, int(_2821 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2821 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2821 + 3u)).x));
                        uint _2841 = (_2819 * 48u) + 4u;
                        vec4 _2854 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2841)).x, texelFetch(g_PointLightRenderingBuffer, int(_2841 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2841 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2841 + 3u)).x));
                        uint _2860 = (_2819 * 48u) + 8u;
                        vec3 _2871 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2860)).x, texelFetch(g_PointLightRenderingBuffer, int(_2860 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2860 + 2u)).x));
                        float _2875 = _2835.x - _2327;
                        float _2876 = _2835.y - _2328;
                        float _2877 = _2835.z - _2329;
                        float _2878 = dot(vec3(_2875, _2876, _2877), vec3(_2875, _2876, _2877));
                        float _2881 = inversesqrt(_2878);
                        float _2882 = _2881 * _2875;
                        float _2883 = _2881 * _2876;
                        float _2884 = _2881 * _2877;
                        float _2885 = dot(vec3(_598, _601, _604), vec3(_2882, _2883, _2884));
                        float _2890 = 1.0 - (_2878 * _2835.w);
                        float _4215 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0));
                        float _2891 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
                        float _2892 = sqrt(_2878) * _2854.w;
                        float _2895 = 1.39999997615814208984375 / (_2892 + 1.39999997615814208984375);
                        float _2896 = _2895 * _2895;
                        float _2899 = ((1.0 - _2896) * _2885) + _2896;
                        float _2902 = _2892 * _2892;
                        float _2906 = ((isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0))) * _2891) / ((_2902 * 0.699999988079071044921875) + 1.0);
                        float _2910 = (-0.0) - _2327;
                        float _2911 = (-0.0) - _2328;
                        float _2912 = (-0.0) - _2329;
                        float _2916 = inversesqrt(dot(vec3(_2910, _2911, _2912), vec3(_2910, _2911, _2912)));
                        float _2917 = _2916 * _2910;
                        float _2918 = _2916 * _2911;
                        float _2919 = _2916 * _2912;
                        float _2927 = exp2(log2(1.0 / ((_2902 * 3.5) + 5.0)) * 0.25);
                        float _2928 = 1.0 - _658;
                        float _2935 = sqrt(1.0 - ((1.0 - (_2928 * _2928)) * (1.0 - (_2927 * _2927))));
                        float _2936 = _2935 * _2935;
                        float _2937 = _2936 * _2936;
                        float _2938 = _2917 + _2882;
                        float _2939 = _2918 + _2883;
                        float _2940 = _2919 + _2884;
                        float _2944 = inversesqrt(dot(vec3(_2938, _2939, _2940), vec3(_2938, _2939, _2940)));
                        float _2948 = dot(vec3(_598, _601, _604), vec3(_2917, _2918, _2919));
                        float _4231 = isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0));
                        float _2951 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
                        float _2952 = dot(vec3(_598, _601, _604), vec3(_2944 * _2938, _2944 * _2939, _2944 * _2940));
                        float _4242 = isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : max(_2952, 0.0));
                        float _2955 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
                        float _2959 = ((_2955 * _2955) * (_2937 + (-1.0))) + 1.0;
                        float _2960 = _2895 * _2936;
                        float _2961 = _2960 * _2960;
                        float _2964 = ((1.0 - _2961) * _2885) + _2961;
                        float _4253 = isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0));
                        float _2965 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
                        float _2966 = 1.0 - _2936;
                        float _2976 = (0.5 / (((_2965 * ((_2951 * _2966) + _2936)) + 9.9999999392252902907785028219223e-09) + (((_2965 * _2966) + _2936) * _2951))) * _2965;
                        float _4264 = isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0));
                        float _2987 = (((_2937 * 3.1415927410125732421875) * (isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0)))) / ((_2959 * _2959) * ((_2902 * 2.1991131305694580078125) + 3.141590118408203125))) * _2891;
                        _2739 = (_2906 * _2854.x) + _2812;
                        _2740 = (_2906 * _2854.y) + _2813;
                        _2741 = (_2906 * _2854.z) + _2814;
                        _2736 = (_2987 * _2871.x) + _2809;
                        _2737 = (_2987 * _2871.y) + _2810;
                        _2738 = (_2987 * _2871.z) + _2811;
                        if (_2816 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2809 = _2736;
                            _2810 = _2737;
                            _2811 = _2738;
                            _2812 = _2739;
                            _2813 = _2740;
                            _2814 = _2741;
                            _2815 = _2816;
                        }
                    }
                    frontier_phi_66_pred = _2736;
                    frontier_phi_66_pred_1 = _2741;
                    frontier_phi_66_pred_2 = _2740;
                    frontier_phi_66_pred_3 = _2739;
                    frontier_phi_66_pred_4 = _2738;
                    frontier_phi_66_pred_5 = _2737;
                }
                _2504 = frontier_phi_66_pred;
                _2514 = frontier_phi_66_pred_1;
                _2512 = frontier_phi_66_pred_2;
                _2510 = frontier_phi_66_pred_3;
                _2508 = frontier_phi_66_pred_4;
                _2506 = frontier_phi_66_pred_5;
                uint _2671 = _2670 + 1u;
                if (_2671 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2664 = _2504;
                    _2665 = _2506;
                    _2666 = _2508;
                    _2667 = _2510;
                    _2668 = _2512;
                    _2669 = _2514;
                    _2670 = _2671;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2503 = _2504;
            _2505 = _2506;
            _2507 = _2508;
            _2509 = _2510;
            _2511 = _2512;
            _2513 = _2514;
        }
        uvec4 _2517 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2518 = _2517.z;
        uint _2520 = (_2518 >> 8u) & 15u;
        float _2632;
        float _2634;
        float _2636;
        float _2638;
        float _2640;
        float _2642;
        if (((4294967295u << _2520) & _2373) == 0u)
        {
            _2632 = _2503;
            _2634 = _2505;
            _2636 = _2507;
            _2638 = _2509;
            _2640 = _2511;
            _2642 = _2513;
        }
        else
        {
            float _2657 = inversesqrt(dot(vec3(_2327, _2328, _2329), vec3(_2327, _2328, _2329)));
            float _2658 = _2657 * _2327;
            float _2659 = _2657 * _2328;
            float _2660 = _2657 * _2329;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2520 < ((_2518 >> 12u) & 15u))
            {
                float _2633;
                float _2635;
                float _2637;
                float _2639;
                float _2641;
                float _2643;
                float _2792 = _2503;
                float _2793 = _2505;
                float _2794 = _2507;
                float _2795 = _2509;
                float _2796 = _2511;
                float _2797 = _2513;
                uint _2798 = _2520;
                uint _2807;
                bool _2808;
                for (;;)
                {
                    _2807 = texelFetch(g_lightClassification, int((((_2367 << 5u) + (_2353 << 9u)) + (_2798 << 2u)) >> 2u)).x;
                    _2808 = _2807 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2808)
                    {
                        frontier_phi_77_pred = _2797;
                        frontier_phi_77_pred_1 = _2796;
                        frontier_phi_77_pred_2 = _2795;
                        frontier_phi_77_pred_3 = _2794;
                        frontier_phi_77_pred_4 = _2793;
                        frontier_phi_77_pred_5 = _2792;
                    }
                    else
                    {
                        float _3001;
                        float _3002;
                        float _3003;
                        float _3004;
                        float _3005;
                        float _3006;
                        float _3295;
                        float _3296;
                        float _3297;
                        float _3298;
                        float _3299;
                        float _3300;
                        float _3014 = _2792;
                        float _3015 = _2793;
                        float _3016 = _2794;
                        float _3017 = _2795;
                        float _3018 = _2796;
                        float _3019 = _2797;
                        uint _3020 = _2807;
                        uint _3021;
                        vec4 _3046;
                        float _3047;
                        vec4 _3062;
                        vec3 _3074;
                        vec4 _3089;
                        vec4 _3104;
                        float _3151;
                        bool _3152;
                        for (;;)
                        {
                            uint _3031 = ((_2798 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3020));
                            _3021 = (_3020 + 4294967295u) & _3020;
                            uint _3033 = _3031 * 40u;
                            _3046 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3033)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 3u)).x));
                            _3047 = _3046.w;
                            uint _3049 = (_3031 * 40u) + 4u;
                            _3062 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3049)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 3u)).x));
                            uint _3064 = (_3031 * 40u) + 8u;
                            _3074 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3064)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 2u)).x));
                            uint _3076 = (_3031 * 40u) + 16u;
                            _3089 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3076)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 3u)).x));
                            uint _3091 = (_3031 * 40u) + 20u;
                            _3104 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3091)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 3u)).x));
                            uint _3107 = (_3031 * 40u) + 24u;
                            vec4 _3120 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3107)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 3u)).x));
                            uint _3126 = (_3031 * 40u) + 28u;
                            vec4 _3139 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3126)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 3u)).x));
                            _3151 = fma(_2329, _3139.z, fma(_2328, _3139.y, _3139.x * _2327)) + _3139.w;
                            _3152 = !((fma(_2329, _3120.z, fma(_2328, _3120.y, _3120.x * _2327)) + _3120.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3152)
                            {
                                float _3179 = _3046.x - _2327;
                                float _3180 = _3046.y - _2328;
                                float _3181 = _3046.z - _2329;
                                float _3182 = dot(vec3(_3179, _3180, _3181), vec3(_3179, _3180, _3181));
                                float _3185 = inversesqrt(_3182);
                                float _3186 = _3185 * _3179;
                                float _3187 = _3185 * _3180;
                                float _3188 = _3185 * _3181;
                                float _3192 = 1.0 - (_3182 / (_3047 * _3047));
                                float _4275 = isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0));
                                float _3193 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
                                float _3197 = sqrt(_3182) * _3062.w;
                                float _3199 = 1.39999997615814208984375 / (_3197 + 1.39999997615814208984375);
                                float _3200 = _3199 * _3199;
                                float _3203 = ((1.0 - _3200) * dot(vec3(_3186, _3187, _3188), vec3(_598, _601, _604))) + _3200;
                                float _3206 = _3197 * _3197;
                                float _3210 = (fma(_2329, _3089.z, fma(_2328, _3089.y, _3089.x * _2327)) + _3089.w) / _3151;
                                float _3211 = (fma(_2329, _3104.z, fma(_2328, _3104.y, _3104.x * _2327)) + _3104.w) / _3151;
                                float _3215 = 1.0 - dot(vec2(_3210, _3211), vec2(_3210, _3211));
                                float _4291 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0));
                                float _3216 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
                                float _3217 = _3216 * (((isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0))) * _3193) / ((_3206 * 0.699999988079071044921875) + 1.0));
                                float _3229 = exp2(log2(1.0 / ((_3206 * 3.5) + 5.0)) * 0.25);
                                float _3230 = 1.0 - _658;
                                float _3237 = sqrt(1.0 - ((1.0 - (_3230 * _3230)) * (1.0 - (_3229 * _3229))));
                                float _3238 = _3237 * _3237;
                                float _3239 = _3238 * _3238;
                                float _3240 = _3186 - _2658;
                                float _3241 = _3187 - _2659;
                                float _3242 = _3188 - _2660;
                                float _3246 = inversesqrt(dot(vec3(_3240, _3241, _3242), vec3(_3240, _3241, _3242)));
                                float _3250 = dot(vec3(_598, _601, _604), vec3((-0.0) - _2658, (-0.0) - _2659, (-0.0) - _2660));
                                float _4302 = isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0));
                                float _3253 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
                                float _3254 = dot(vec3(_598, _601, _604), vec3(_3246 * _3240, _3246 * _3241, _3246 * _3242));
                                float _4313 = isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0));
                                float _3257 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
                                float _3261 = ((_3257 * _3257) * (_3239 + (-1.0))) + 1.0;
                                float _3262 = _3199 * _3238;
                                float _3263 = _3262 * _3262;
                                float _3269 = ((1.0 - _3263) * dot(vec3(_598, _601, _604), vec3(_3186, _3187, _3188))) + _3263;
                                float _4324 = isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0));
                                float _3270 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
                                float _3271 = 1.0 - _3238;
                                float _3281 = (0.5 / (((_3270 * ((_3253 * _3271) + _3238)) + 9.9999999392252902907785028219223e-09) + (((_3270 * _3271) + _3238) * _3253))) * _3270;
                                float _4335 = isnan(0.0) ? _3281 : (isnan(_3281) ? 0.0 : max(_3281, 0.0));
                                float _3291 = (_3216 * _3193) * (((_3239 * 3.1415927410125732421875) * (isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0)))) / ((_3261 * _3261) * ((_3206 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3217 * _3062.y;
                                frontier_phi_83_pred_1 = _3217 * _3062.x;
                                frontier_phi_83_pred_2 = _3291 * _3074.z;
                                frontier_phi_83_pred_3 = _3291 * _3074.y;
                                frontier_phi_83_pred_4 = _3291 * _3074.x;
                                frontier_phi_83_pred_5 = _3217 * _3062.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3299 = frontier_phi_83_pred;
                            _3298 = frontier_phi_83_pred_1;
                            _3297 = frontier_phi_83_pred_2;
                            _3296 = frontier_phi_83_pred_3;
                            _3295 = frontier_phi_83_pred_4;
                            _3300 = frontier_phi_83_pred_5;
                            _3004 = _3298 + _3017;
                            _3005 = _3299 + _3018;
                            _3006 = _3300 + _3019;
                            _3001 = _3295 + _3014;
                            _3002 = _3296 + _3015;
                            _3003 = _3297 + _3016;
                            if (_3021 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3014 = _3001;
                                _3015 = _3002;
                                _3016 = _3003;
                                _3017 = _3004;
                                _3018 = _3005;
                                _3019 = _3006;
                                _3020 = _3021;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3006;
                        frontier_phi_77_pred_1 = _3005;
                        frontier_phi_77_pred_2 = _3004;
                        frontier_phi_77_pred_3 = _3003;
                        frontier_phi_77_pred_4 = _3002;
                        frontier_phi_77_pred_5 = _3001;
                    }
                    _2643 = frontier_phi_77_pred;
                    _2641 = frontier_phi_77_pred_1;
                    _2639 = frontier_phi_77_pred_2;
                    _2637 = frontier_phi_77_pred_3;
                    _2635 = frontier_phi_77_pred_4;
                    _2633 = frontier_phi_77_pred_5;
                    uint _2799 = _2798 + 1u;
                    if (_2799 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2792 = _2633;
                        _2793 = _2635;
                        _2794 = _2637;
                        _2795 = _2639;
                        _2796 = _2641;
                        _2797 = _2643;
                        _2798 = _2799;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2637;
                frontier_phi_58_59_ladder_1 = _2643;
                frontier_phi_58_59_ladder_2 = _2641;
                frontier_phi_58_59_ladder_3 = _2639;
                frontier_phi_58_59_ladder_4 = _2635;
                frontier_phi_58_59_ladder_5 = _2633;
            }
            else
            {
                frontier_phi_58_59_ladder = _2507;
                frontier_phi_58_59_ladder_1 = _2513;
                frontier_phi_58_59_ladder_2 = _2511;
                frontier_phi_58_59_ladder_3 = _2509;
                frontier_phi_58_59_ladder_4 = _2505;
                frontier_phi_58_59_ladder_5 = _2503;
            }
            _2632 = frontier_phi_58_59_ladder_5;
            _2634 = frontier_phi_58_59_ladder_4;
            _2636 = frontier_phi_58_59_ladder;
            _2638 = frontier_phi_58_59_ladder_3;
            _2640 = frontier_phi_58_59_ladder_2;
            _2642 = frontier_phi_58_59_ladder_1;
        }
        float _2647 = isnan(1.0) ? _642 : (isnan(_642) ? 1.0 : min(_642, 1.0));
        _2386 = (_2647 * _2638) + _1841;
        _2388 = (_2647 * _2640) + _1843;
        _2390 = (_2647 * _2642) + _1845;
        _2392 = ((_2632 * 0.039999999105930328369140625) * _2647) + _2171;
        _2394 = ((_2634 * 0.039999999105930328369140625) * _2647) + _2173;
        _2396 = ((_2636 * 0.039999999105930328369140625) * _2647) + _2175;
    }
    else
    {
        _2386 = _1841;
        _2388 = _1843;
        _2390 = _1845;
        _2392 = _2171;
        _2394 = _2173;
        _2396 = _2175;
    }
    uint _2402 = _618 + uint(cbMatDynParam._m0[0u].w);
    float _2408 = ((((((_431.x - _428) * _364) + _428) * cbMtdParam._m0[13u].x) + ((((_385.x - _382) * _364) + _382) * cbMtdParam._m0[11u].x)) * _459) * cbInstanceData._m0[_2402].x;
    float _2409 = ((((((_431.y - _429) * _364) + _429) * cbMtdParam._m0[13u].y) + ((((_385.y - _383) * _364) + _383) * cbMtdParam._m0[11u].y)) * _459) * cbInstanceData._m0[_2402].y;
    float _2410 = ((((((_431.z - _430) * _364) + _430) * cbMtdParam._m0[13u].z) + ((((_385.z - _384) * _364) + _384) * cbMtdParam._m0[11u].z)) * _459) * cbInstanceData._m0[_2402].z;
    float _4351 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _4362 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _4373 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _2427 = (((isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0))) * (_2386 + ((isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0))) * _642))) + ((_2392 + ((isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0))) * _1479)) * cbPerFrame._m0[3u].x)) + _2408;
    float _2429 = (_2409 + ((_2394 + ((isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0))) * _1479)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0))) * (_2388 + ((isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0))) * _642)));
    float _2431 = (_2410 + ((_2396 + ((isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0))) * _1479)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0))) * (_2390 + ((isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0))) * _642)));
    float _2432 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
    float _2433 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
    float _2434 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
    float _2440 = cbMtdParam._m0[2u].x * _2408;
    float _2441 = cbMtdParam._m0[2u].y * _2409;
    float _2442 = cbMtdParam._m0[2u].z * _2410;
    float _4399 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2444 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
    uint _2445 = _617 + 6u;
    float _2453 = _577 / cbSceneParam._m0[86u].x;
    float _2454 = _578 / cbSceneParam._m0[86u].y;
    vec4 _2468 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2453, _2454, (log2((isnan(cbSceneParam._m0[77u].w) ? _498 : (isnan(_498) ? cbSceneParam._m0[77u].w : min(_498, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2470 = _2468.x;
    float _2471 = _2468.y;
    float _2472 = _2468.z;
    float _2473 = _2468.w;
    float _2565;
    float _2567;
    float _2569;
    float _2571;
    if (_498 > cbSceneParam._m0[78u].w)
    {
        float _2528 = isnan(_498) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _498 : min(cbSceneParam._m0[80u].w, _498));
        float _2529 = _2528 / _498;
        float _2540 = _2529 * _549;
        float _2541 = _550 * _2529;
        float _2542 = (-0.0) - _2541;
        float _2543 = _2529 * _551;
        float _2545 = (cbSceneParam._m0[77u].w * _2542) / _2528;
        float _2546 = _2545 + cbSceneParam._m0[79u].w;
        float _2547 = cbSceneParam._m0[79u].w - _2541;
        float _2553 = sqrt(((_2540 * _2540) + (_2541 * _2541)) + (_2543 * _2543));
        float _2556 = (1.0 - (cbSceneParam._m0[77u].w / _2528)) * _2553;
        float _2561 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2563 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2749;
        if (abs((_2542 - _2545) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2749 = ((((_2546 > 0.0) ? exp2(_2561 * _2546) : (2.0 - exp2(_2563 * _2546))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2556;
        }
        else
        {
            float _2693 = 1.0 / cbSceneParam._m0[80u].x;
            float _2694 = isnan(_2547) ? _2546 : (isnan(_2546) ? _2547 : max(_2546, _2547));
            float _2695 = isnan(_2547) ? _2546 : (isnan(_2546) ? _2547 : min(_2546, _2547));
            float _2704 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : min(_2694, 0.0));
            float _2705 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : min(_2695, 0.0));
            _2749 = ((abs(_2553 / _2542) * cbSceneParam._m0[80u].y) * ((((_2704 - _2705) * 2.0) - ((exp2(_2561 * (isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0)))) - exp2(_2561 * (isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0))))) * _2693)) - ((exp2(_2563 * _2704) - exp2(_2563 * _2705)) * _2693))) + (_2556 * cbSceneParam._m0[80u].z);
        }
        vec4 _2751 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2453, _2454, 1.0), 0.0);
        float _2760 = exp2((_2749 * (-1.44269502162933349609375)) * (1.0 - _2751.w));
        float _2761 = log2(_2760);
        float _2777 = log2(_2473);
        _2565 = (exp2(_2777 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2761 * cbSceneParam._m0[78u].x)) * _2751.x) / cbSceneParam._m0[78u].x)) + _2470;
        _2567 = (exp2(_2777 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2761 * cbSceneParam._m0[78u].y)) * _2751.y) / cbSceneParam._m0[78u].y)) + _2471;
        _2569 = (exp2(_2777 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2761 * cbSceneParam._m0[78u].z)) * _2751.z) / cbSceneParam._m0[78u].z)) + _2472;
        _2571 = _2760 * _2473;
    }
    else
    {
        _2565 = _2470;
        _2567 = _2471;
        _2569 = _2472;
        _2571 = _2473;
    }
    bool _2787;
    vec4 _2581;
    vec4 _2603;
    float _2605;
    float _2609;
    float _2610;
    float _2611;
    float _2614;
    float _2617;
    float _2620;
    float _2621;
    bool _2631;
    for (;;)
    {
        _2581 = cbMatDynParam._m0[0u];
        float _2583 = roundEven(_2581.y);
        bool _2584 = _2583 == 3.0;
        float _2585 = log2(_2571);
        float _2589 = exp2(_2585 * cbSceneParam._m0[78u].x);
        float _2590 = exp2(_2585 * cbSceneParam._m0[78u].y);
        float _2591 = exp2(_2585 * cbSceneParam._m0[78u].z);
        float _2592 = _2589 * _2432;
        float _2593 = _2590 * _2433;
        float _2594 = _2591 * _2434;
        float _2601 = _565 + (-0.5);
        _2603 = cbMtdParam._m0[1u];
        _2605 = _2603.y * _2601;
        float _2608 = (_2583 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2609 = _2608 * (_2584 ? _2592 : (_2592 + (cbSceneParam._m0[72u].w * _2565)));
        _2610 = _2608 * (_2584 ? _2593 : (_2593 + (cbSceneParam._m0[72u].w * _2567)));
        _2611 = _2608 * (_2584 ? _2594 : (_2594 + (cbSceneParam._m0[72u].w * _2569)));
        _2614 = ((_2440 * _2444) * _2589) * _2608;
        _2617 = ((_2441 * _2444) * _2590) * _2608;
        _2620 = ((_2442 * _2444) * _2591) * _2608;
        _2621 = _2601 * 0.999000012874603271484375;
        _2631 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2631)
        {
            if ((cbInstanceData._m0[_617 + 7u].x + _2621) < 0.5)
            {
                _2787 = true;
                break;
            }
        }
        uint _2728 = _618 + uint(_2581.w);
        if ((cbInstanceData._m0[_2728].w < 1.0) && ((cbInstanceData._m0[_2728].w + _2621) < 0.5))
        {
            _2787 = true;
            break;
        }
        if ((_2605 + 1.0) < _2603.x)
        {
            _2787 = true;
            break;
        }
        _2787 = false;
        break;
    }
    float _2992;
    if (_2787)
    {
        discard_state = true;
        _2992 = 0.0;
    }
    else
    {
        _2992 = cbInstanceData._m0[_2445].w;
    }
    SV_Target.x = _2609;
    SV_Target.y = _2610;
    SV_Target.z = _2611;
    SV_Target.w = _2992;
    SV_Target_1.x = _2614;
    SV_Target_1.y = _2617;
    SV_Target_1.z = _2620;
    SV_Target_1.w = cbInstanceData._m0[_2445].w;
    discard_exit();
}


