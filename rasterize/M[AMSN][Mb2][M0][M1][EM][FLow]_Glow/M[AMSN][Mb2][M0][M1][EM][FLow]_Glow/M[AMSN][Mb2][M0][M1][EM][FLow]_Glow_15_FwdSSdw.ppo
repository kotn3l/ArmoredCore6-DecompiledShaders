#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1242;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _209 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _210 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _211 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _253 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _259 = _253.x * cbMtdParam._m0[9u].x;
    float _260 = _253.y * cbMtdParam._m0[9u].y;
    float _261 = _253.z * cbMtdParam._m0[9u].z;
    vec4 _299 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[5u].w));
    float _315 = (TEXCOORD_3.x - ((cbMtdParam._m0[14u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[14u].y + 1.0);
    float _3610 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _316 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
    float _323 = (((_299.x * cbMtdParam._m0[10u].x) - _259) * _316) + _259;
    float _324 = (((_299.y * cbMtdParam._m0[10u].y) - _260) * _316) + _260;
    float _325 = (((_299.z * cbMtdParam._m0[10u].z) - _261) * _316) + _261;
    vec4 _342 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _361 = TEXCOORD_9.x - ((cbMtdParam._m0[16u].y * (1.0 - TEXCOORD_9.x)) * (_342.x + 0.00999999977648258209228515625));
    float _363 = _361 * (cbMtdParam._m0[16u].z + 1.0);
    float _3621 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _364 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
    float _372 = ((((cbMtdParam._m0[12u].x - _323) * TEXCOORD_9.x) * cbMtdParam._m0[16u].x) * _364) + _323;
    float _373 = ((((cbMtdParam._m0[12u].y - _324) * TEXCOORD_9.y) * cbMtdParam._m0[16u].x) * _364) + _324;
    float _374 = (((cbMtdParam._m0[16u].x * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _325)) * _364) + _325;
    vec4 _387 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[4u].w));
    float _395 = (_387.x * 2.0) + (-1.0);
    float _397 = (_387.y * 2.0) + (-1.0);
    float _398 = dot(vec2(_395, _397), vec2(_395, _397));
    float _3632 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    vec4 _415 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _419 = _415.z;
    float _422 = (_415.x * 2.0) + (-1.0);
    float _423 = (_415.y * 2.0) + (-1.0);
    float _424 = dot(vec2(_422, _423), vec2(_422, _423));
    float _3643 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _429 = sqrt(1.0 - (isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0))));
    float _432 = (_316 * (_387.z - _419)) + _419;
    float _438 = _361 * (cbMtdParam._m0[16u].y + 1.0);
    float _3654 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _442 = ((cbMtdParam._m0[15u].y - _432) * (isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0)))) + _432;
    float _455 = (cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _456 = (cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _482 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * ((cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * ((cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[10u].w));
    float _487 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[15u].w;
    float _494 = ((_482.y * 0.5) + (-0.25)) * cbMtdParam._m0[15u].z;
    float _496 = (-0.0) - (cbMtdParam._m0[15u].z * ((_482.x * 0.5) + (-0.25)));
    float _498 = fract(_487);
    float _500 = fract(_487 + 0.5);
    float _501 = _498 * _496;
    float _502 = _494 * _498;
    float _505 = _500 * _496;
    float _506 = _494 * _500;
    float _511 = abs((_498 * 2.0) + (-1.0));
    vec4 _527 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_501 + _455) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_502 + _456) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _529 = _527.x;
    float _530 = _527.y;
    float _531 = _527.z;
    vec4 _532 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_505 + _455) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_506 + _456) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _559 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _560 = (cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _573 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_501 + _559) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_502 + _560) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _575 = _573.x;
    float _576 = _573.y;
    float _577 = _573.z;
    vec4 _578 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_505 + _559) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_506 + _560) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _627 = (TEXCOORD_6.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_6.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_5, SS_WrapLinear), vec2((((cbMtdParam._m0[18u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((cbMtdParam._m0[18u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].x + 1.0);
    float _3665 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _628 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
    float _629 = _628 * (((((_578.x - _575) * _511) + _575) * cbMtdParam._m0[13u].x) + ((((_532.x - _529) * _511) + _529) * cbMtdParam._m0[11u].x));
    float _630 = _628 * (((((_578.y - _576) * _511) + _576) * cbMtdParam._m0[13u].y) + ((((_532.y - _530) * _511) + _530) * cbMtdParam._m0[11u].y));
    float _631 = _628 * (((((_578.z - _577) * _511) + _577) * cbMtdParam._m0[13u].z) + ((((_532.z - _531) * _511) + _531) * cbMtdParam._m0[11u].z));
    vec4 _643 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[9u].w));
    float _645 = _643.x;
    float _658 = (_316 * (_395 - _422)) + _422;
    float _659 = (_316 * (_397 - _423)) + _423;
    float _660 = (_316 * (sqrt(1.0 - (isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0)))) - _429)) + _429;
    vec4 _679 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[16u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, (((cbMtdParam._m0[17u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w));
    float _685 = (_679.x * 2.0) + (-1.0);
    float _686 = (_679.y * 2.0) + (-1.0);
    float _687 = dot(vec2(_685, _686), vec2(_685, _686));
    float _3676 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _703 = (_364 * (((_658 * cbMtdParam._m0[14u].z) - _658) + _685)) + _658;
    float _704 = (_364 * (((_659 * cbMtdParam._m0[14u].z) - _659) + _686)) + _659;
    float _705 = (_364 * (sqrt(1.0 - (isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0)))) - _660)) + _660;
    float _708 = fma(_705, _224 * NORMAL.x, fma(_704, _231 * TANGENT.x, (_217 * _209) * _703));
    float _711 = fma(_705, _224 * NORMAL.y, fma(_704, _231 * TANGENT.y, (_217 * _210) * _703));
    float _714 = fma(_705, _224 * NORMAL.z, fma(_704, _231 * TANGENT.z, (_217 * _211) * _703));
    float _718 = inversesqrt(dot(vec3(_708, _711, _714), vec3(_708, _711, _714)));
    float _719 = _718 * _708;
    float _720 = _718 * _711;
    float _721 = _718 * _714;
    float _3687 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _722 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
    float _3698 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _3709 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _3720 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _741 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _781 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _791 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _781);
    float _792 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _781);
    float _793 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _781);
    float _797 = inversesqrt(dot(vec3(_791, _792, _793), vec3(_791, _792, _793)));
    float _798 = _791 * _797;
    float _799 = _792 * _797;
    float _800 = _793 * _797;
    float _806 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _807 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _827 = fma(_721, cbSceneParam._m0[5u].z, fma(_720, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _719));
    float _830 = fma(_721, cbSceneParam._m0[6u].z, fma(_720, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _719));
    float _833 = fma(_721, cbSceneParam._m0[7u].z, fma(_720, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _719));
    uint _846 = uint(roundEven(NORMAL.w)) * 13u;
    uint _847 = _846 + 9u;
    uint _848 = _847 + uint(cbMatDynParam._m0[0u].w);
    float _854 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0)))) * cbInstanceData._m0[_848].x;
    float _855 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0)))) * cbInstanceData._m0[_848].y;
    float _856 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0)))) * cbInstanceData._m0[_848].z;
    float _3731 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _857 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
    float _3742 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _858 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
    float _3753 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _859 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
    vec4 _868 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _806, cbSceneParam._m0[86u].y * _807));
    float _871 = _868.x * TEXCOORD_3.w;
    float _872 = dot(vec3(_719, _720, _721), vec3(_798, _799, _800));
    float _875 = _872 * 2.0;
    float _879 = (_875 * _719) - _798;
    float _880 = (_875 * _720) - _799;
    float _881 = (_875 * _721) - _800;
    float _885 = abs(dot(vec3(_798, _799, _800), vec3(_719, _720, _721)));
    float _3764 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _887 = sqrt(_722);
    float _900 = exp2((_887 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_887 * 3.0));
    float _932 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _936 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _940 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1241;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _967 = fma(_940, cbModelParam._m0[26u].z, fma(_936, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _932));
        float _971 = fma(_940, cbModelParam._m0[27u].z, fma(_936, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _932));
        float _975 = fma(_940, cbModelParam._m0[28u].z, fma(_936, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _932));
        float _999 = _932 + _719;
        float _1000 = _936 + _720;
        float _1001 = _940 + _721;
        float _1011 = fma(_1001, cbModelParam._m0[26u].z, fma(_1000, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _999)) - _967;
        float _1012 = fma(_1001, cbModelParam._m0[27u].z, fma(_1000, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _999)) - _971;
        float _1013 = fma(_1001, cbModelParam._m0[28u].z, fma(_1000, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _999)) - _975;
        float _1017 = inversesqrt(dot(vec3(_1011, _1012, _1013), vec3(_1011, _1012, _1013)));
        float _1030 = ((_1017 * _1011) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_967 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1031 = ((_1017 * _1012) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_971 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1032 = ((_1017 * _1013) / cbModelParam._m0[34u].z) + ((((((_975 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1035 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1030, _1031, _1032), 0.0);
        vec4 _1042 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1030, _1031, _1032), 0.0);
        vec4 _1049 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1030, _1031, _1032), 0.0);
        vec4 _1056 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1030, _1031, _1032), 0.0);
        float _1069 = exp2((_1035.w + (-0.5)) * 20.0) * 2.0;
        float _1070 = _1069 * (_1035.x + (-0.5));
        float _1071 = _1069 * (_1035.y + (-0.5));
        float _1072 = _1069 * (_1035.z + (-0.5));
        float _1079 = exp2((_1042.w + (-0.5)) * 20.0) * 2.0;
        float _1080 = _1079 * (_1042.x + (-0.5));
        float _1081 = _1079 * (_1042.y + (-0.5));
        float _1082 = _1079 * (_1042.z + (-0.5));
        float _1089 = exp2((_1049.w + (-0.5)) * 20.0) * 2.0;
        float _1090 = _1089 * (_1049.x + (-0.5));
        float _1091 = _1089 * (_1049.y + (-0.5));
        float _1092 = _1089 * (_1049.z + (-0.5));
        float _1099 = exp2((_1056.w + (-0.5)) * 20.0) * 2.0;
        float _1100 = _1099 * (_1056.x + (-0.5));
        float _1101 = _1099 * (_1056.y + (-0.5));
        float _1102 = _1099 * (_1056.z + (-0.5));
        float _1103 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1104 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1105 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1106 = _1070 * 0.5;
        float _1107 = _1080 * 0.5;
        float _1108 = _1090 * 0.5;
        float _1109 = dot(vec3(_1106, _1107, _1108), vec3(_1106, _1107, _1108));
        float _1114 = (_1109 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1109);
        float _1123 = (dot(vec3(_719, _720, _721), vec3(_1114 * _1106, _1114 * _1107, _1114 * _1108)) + 1.0) * 0.5;
        float _3790 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1133 = sqrt(((_1107 * _1107) + (_1106 * _1106)) + (_1108 * _1108)) / (_1103 + 9.9999997473787516355514526367188e-06);
        float _3801 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
        float _1135 = _1134 * 2.0;
        float _1139 = (1.0 - _1134) / (_1134 + 1.0);
        float _3812 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
        float _1149 = ((((1.0 - _1140) * (_1135 + 2.0)) * exp2(log2(isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0))) * (_1135 + 1.0))) + _1140) * _1103;
        float _1150 = _1071 * 0.5;
        float _1151 = _1081 * 0.5;
        float _1152 = _1091 * 0.5;
        float _1153 = dot(vec3(_1150, _1151, _1152), vec3(_1150, _1151, _1152));
        float _1158 = (_1153 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1153);
        float _1166 = (dot(vec3(_719, _720, _721), vec3(_1158 * _1150, _1158 * _1151, _1158 * _1152)) + 1.0) * 0.5;
        float _3823 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1175 = sqrt(((_1151 * _1151) + (_1150 * _1150)) + (_1152 * _1152)) / (_1104 + 9.9999997473787516355514526367188e-06);
        float _3834 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
        float _1177 = _1176 * 2.0;
        float _1181 = (1.0 - _1176) / (_1176 + 1.0);
        float _3845 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
        float _1191 = ((((1.0 - _1182) * (_1177 + 2.0)) * exp2(log2(isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0))) * (_1177 + 1.0))) + _1182) * _1104;
        float _1192 = _1072 * 0.5;
        float _1193 = _1082 * 0.5;
        float _1194 = _1092 * 0.5;
        float _1195 = dot(vec3(_1192, _1193, _1194), vec3(_1192, _1193, _1194));
        float _1200 = (_1195 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1195);
        float _1208 = (dot(vec3(_719, _720, _721), vec3(_1200 * _1192, _1200 * _1193, _1200 * _1194)) + 1.0) * 0.5;
        float _3856 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1217 = sqrt(((_1193 * _1193) + (_1192 * _1192)) + (_1194 * _1194)) / (_1105 + 9.9999997473787516355514526367188e-06);
        float _3867 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _1219 = _1218 * 2.0;
        float _1223 = (1.0 - _1218) / (_1218 + 1.0);
        float _3878 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1233 = ((((1.0 - _1224) * (_1219 + 2.0)) * exp2(log2(isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))) * (_1219 + 1.0))) + _1224) * _1105;
        _1241 = _1072;
        _1243 = _1071;
        _1244 = _1070;
        _1245 = _1082;
        _1246 = _1081;
        _1247 = _1080;
        _1248 = _1092;
        _1249 = _1091;
        _1250 = _1090;
        _1251 = _1105;
        _1252 = _1104;
        _1253 = _1103;
        _1254 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0)));
        _1255 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0)));
        _1256 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0)));
    }
    else
    {
        _1241 = _1242;
        _1243 = _1242;
        _1244 = _1242;
        _1245 = _1242;
        _1246 = _1242;
        _1247 = _1242;
        _1248 = _1242;
        _1249 = _1242;
        _1250 = _1242;
        _1251 = _1242;
        _1252 = _1242;
        _1253 = _1242;
        _1254 = 0.0;
        _1255 = 0.0;
        _1256 = 0.0;
    }
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1282 = fma(_940, cbModelParam._m0[30u].z, fma(_936, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _932));
        float _1286 = fma(_940, cbModelParam._m0[31u].z, fma(_936, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _932));
        float _1290 = fma(_940, cbModelParam._m0[32u].z, fma(_936, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _932));
        float _1313 = _932 + _719;
        float _1314 = _936 + _720;
        float _1315 = _940 + _721;
        float _1325 = fma(_1315, cbModelParam._m0[30u].z, fma(_1314, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1313)) - _1282;
        float _1326 = fma(_1315, cbModelParam._m0[31u].z, fma(_1314, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1313)) - _1286;
        float _1327 = fma(_1315, cbModelParam._m0[32u].z, fma(_1314, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1313)) - _1290;
        float _1331 = inversesqrt(dot(vec3(_1325, _1326, _1327), vec3(_1325, _1326, _1327)));
        float _1344 = ((_1331 * _1325) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1282 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1345 = ((_1331 * _1326) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1286 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1346 = ((_1331 * _1327) / cbModelParam._m0[35u].z) + ((((((_1290 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1348 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1344, _1345, _1346), 0.0);
        vec4 _1355 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1344, _1345, _1346), 0.0);
        vec4 _1362 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1344, _1345, _1346), 0.0);
        vec4 _1369 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1344, _1345, _1346), 0.0);
        float _1381 = exp2((_1348.w + (-0.5)) * 20.0) * 2.0;
        float _1382 = _1381 * (_1348.x + (-0.5));
        float _1383 = _1381 * (_1348.y + (-0.5));
        float _1384 = _1381 * (_1348.z + (-0.5));
        float _1391 = exp2((_1355.w + (-0.5)) * 20.0) * 2.0;
        float _1392 = _1391 * (_1355.x + (-0.5));
        float _1393 = _1391 * (_1355.y + (-0.5));
        float _1394 = _1391 * (_1355.z + (-0.5));
        float _1401 = exp2((_1362.w + (-0.5)) * 20.0) * 2.0;
        float _1402 = _1401 * (_1362.x + (-0.5));
        float _1403 = _1401 * (_1362.y + (-0.5));
        float _1404 = _1401 * (_1362.z + (-0.5));
        float _1411 = exp2((_1369.w + (-0.5)) * 20.0) * 2.0;
        float _1412 = _1411 * (_1369.x + (-0.5));
        float _1413 = _1411 * (_1369.y + (-0.5));
        float _1414 = _1411 * (_1369.z + (-0.5));
        float _1415 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1416 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1417 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1418 = _1382 * 0.5;
        float _1419 = _1392 * 0.5;
        float _1420 = _1402 * 0.5;
        float _1421 = dot(vec3(_1418, _1419, _1420), vec3(_1418, _1419, _1420));
        float _1426 = (_1421 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1421);
        float _1434 = (dot(vec3(_719, _720, _721), vec3(_1426 * _1418, _1426 * _1419, _1426 * _1420)) + 1.0) * 0.5;
        float _3919 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1443 = sqrt(((_1419 * _1419) + (_1418 * _1418)) + (_1420 * _1420)) / (_1415 + 9.9999997473787516355514526367188e-06);
        float _3930 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1444 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1445 = _1444 * 2.0;
        float _1449 = (1.0 - _1444) / (_1444 + 1.0);
        float _3941 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1450 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _1459 = ((((1.0 - _1450) * (_1445 + 2.0)) * exp2(log2(isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))) * (_1445 + 1.0))) + _1450) * _1415;
        float _1460 = _1383 * 0.5;
        float _1461 = _1393 * 0.5;
        float _1462 = _1403 * 0.5;
        float _1463 = dot(vec3(_1460, _1461, _1462), vec3(_1460, _1461, _1462));
        float _1468 = (_1463 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1463);
        float _1476 = (dot(vec3(_719, _720, _721), vec3(_1468 * _1460, _1468 * _1461, _1468 * _1462)) + 1.0) * 0.5;
        float _3952 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1485 = sqrt(((_1461 * _1461) + (_1460 * _1460)) + (_1462 * _1462)) / (_1416 + 9.9999997473787516355514526367188e-06);
        float _3963 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1486 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _1487 = _1486 * 2.0;
        float _1491 = (1.0 - _1486) / (_1486 + 1.0);
        float _3974 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1492 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1501 = ((((1.0 - _1492) * (_1487 + 2.0)) * exp2(log2(isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * (_1487 + 1.0))) + _1492) * _1416;
        float _1502 = _1384 * 0.5;
        float _1503 = _1394 * 0.5;
        float _1504 = _1404 * 0.5;
        float _1505 = dot(vec3(_1502, _1503, _1504), vec3(_1502, _1503, _1504));
        float _1510 = (_1505 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1505);
        float _1518 = (dot(vec3(_719, _720, _721), vec3(_1510 * _1502, _1510 * _1503, _1510 * _1504)) + 1.0) * 0.5;
        float _3985 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1527 = sqrt(((_1503 * _1503) + (_1502 * _1502)) + (_1504 * _1504)) / (_1417 + 9.9999997473787516355514526367188e-06);
        float _3996 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1528 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _1529 = _1528 * 2.0;
        float _1533 = (1.0 - _1528) / (_1528 + 1.0);
        float _4007 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1534 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1543 = ((((1.0 - _1534) * (_1529 + 2.0)) * exp2(log2(isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) * (_1529 + 1.0))) + _1534) * _1417;
        _1551 = _1384;
        _1552 = _1383;
        _1553 = _1382;
        _1554 = _1394;
        _1555 = _1393;
        _1556 = _1392;
        _1557 = _1404;
        _1558 = _1403;
        _1559 = _1402;
        _1560 = _1417;
        _1561 = _1416;
        _1562 = _1415;
        _1563 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0)));
        _1564 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0)));
        _1565 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0)));
    }
    else
    {
        _1551 = _1242;
        _1552 = _1242;
        _1553 = _1242;
        _1554 = _1242;
        _1555 = _1242;
        _1556 = _1242;
        _1557 = _1242;
        _1558 = _1242;
        _1559 = _1242;
        _1560 = _1242;
        _1561 = _1242;
        _1562 = _1242;
        _1563 = 0.0;
        _1564 = 0.0;
        _1565 = 0.0;
    }
    float _1575 = (cbModelParam._m0[1u].x * (_1563 - _1254)) + _1254;
    float _1576 = (cbModelParam._m0[1u].x * (_1564 - _1255)) + _1255;
    float _1577 = (cbModelParam._m0[1u].x * (_1565 - _1256)) + _1256;
    float _1598 = fma(_1577, cbSceneParam._m0[89u].z, fma(_1576, cbSceneParam._m0[89u].y, _1575 * cbSceneParam._m0[89u].x));
    float _1601 = fma(_1577, cbSceneParam._m0[90u].z, fma(_1576, cbSceneParam._m0[90u].y, _1575 * cbSceneParam._m0[90u].x));
    float _1604 = fma(_1577, cbSceneParam._m0[91u].z, fma(_1576, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1575));
    float _1619 = _879 * 0.5;
    float _1620 = _880 * 0.5;
    float _1621 = _881 * 0.5;
    float _1622 = dot(vec4(_1619, _1620, _1621, 1.0), vec4(_1553, _1556, _1559, _1562));
    float _1625 = dot(vec4(_1619, _1620, _1621, 1.0), vec4(_1552, _1555, _1558, _1561));
    float _1628 = dot(vec4(_1619, _1620, _1621, 1.0), vec4(_1551, _1554, _1557, _1560));
    float _1662;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1635 = dot(vec4(_1619, _1620, _1621, 1.0), vec4(_1241, _1245, _1248, _1251));
        float _1639 = dot(vec4(_1619, _1620, _1621, 1.0), vec4(_1243, _1246, _1249, _1252));
        float _1643 = dot(vec4(_1619, _1620, _1621, 1.0), vec4(_1244, _1247, _1250, _1253));
        float _1650 = dot(vec4(cbModelParam._m0[39u]), vec4(_1619, _1620, _1621, 1.0));
        _1662 = dot(vec3(isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0)), isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0)), isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1650) ? 0.0 : (isnan(0.0) ? _1650 : max(0.0, _1650))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1662 = 1.0;
    }
    float _1673;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1664 = dot(vec4(cbModelParam._m0[40u]), vec4(_1619, _1620, _1621, 1.0));
        _1673 = dot(vec3(isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0)), isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0)), isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1664) ? 0.0 : (isnan(0.0) ? _1664 : max(0.0, _1664))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1673 = 1.0;
    }
    float _1677 = (_1673 * cbModelParam._m0[1u].x) + (_1662 * (1.0 - cbModelParam._m0[1u].x));
    float _1687 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _722);
    float _1688 = isnan(_1687) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1687 : min(cbModelParam._m0[25u].z, _1687));
    float _1768;
    float _1770;
    float _1772;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1735 = fma(_940, cbModelParam._m0[13u].z, fma(_936, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _932)) + cbModelParam._m0[13u].w;
        float _1739 = fma(_940, cbModelParam._m0[14u].z, fma(_936, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _932)) + cbModelParam._m0[14u].w;
        float _1743 = fma(_940, cbModelParam._m0[15u].z, fma(_936, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _932)) + cbModelParam._m0[15u].w;
        float _1746 = fma(_881, cbModelParam._m0[13u].z, fma(_880, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _879));
        float _1749 = fma(_881, cbModelParam._m0[14u].z, fma(_880, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _879));
        float _1752 = fma(_881, cbModelParam._m0[15u].z, fma(_880, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _879));
        float _1780;
        if (_1746 > 0.0)
        {
            _1780 = abs((1.0 - _1735) / _1746);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1746 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1735 + 1.0) / _1746);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1780 = frontier_phi_14_12_ladder;
        }
        float _2002;
        if (_1749 > 0.0)
        {
            _2002 = abs((1.0 - _1739) / _1749);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1749 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1739 + 1.0) / _1749);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2002 = frontier_phi_23_19_ladder;
        }
        float _2248;
        if (_1752 > 0.0)
        {
            _2248 = abs((1.0 - _1743) / _1752);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1752 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1743 + 1.0) / _1752);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2248 = frontier_phi_35_30_ladder;
        }
        float _2250 = isnan(_2002) ? _1780 : (isnan(_1780) ? _2002 : min(_1780, _2002));
        float _2251 = isnan(_2248) ? _2250 : (isnan(_2250) ? _2248 : min(_2250, _2248));
        float _2255 = (_2251 * _1746) + _1735;
        float _2256 = (_2251 * _1749) + _1739;
        float _2257 = (_2251 * _1752) + _1743;
        float _2258 = _2251 * 9.9999997473787516355514526367188e-05;
        float _2260 = (-1.0) - _2258;
        float _2262 = _2258 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2257 > _2262) || ((_2257 < _2260) || ((_2256 > _2262) || ((_2256 < _2260) || ((_2255 < _2260) || (_2255 > _2262))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2381 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2257, cbModelParam._m0[9u].z, fma(_2256, cbModelParam._m0[9u].y, _2255 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2257, cbModelParam._m0[10u].z, fma(_2256, cbModelParam._m0[10u].y, _2255 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2257, cbModelParam._m0[11u].z, fma(_2256, cbModelParam._m0[11u].y, _2255 * cbModelParam._m0[11u].x))), _1688);
            frontier_phi_13_35_ladder = _2381.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2381.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2381.x * cbModelParam._m0[1u].y;
        }
        _1768 = frontier_phi_13_35_ladder_2;
        _1770 = frontier_phi_13_35_ladder_1;
        _1772 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1756 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_879, _880, _881), _1688);
        _1768 = _1756.x * cbModelParam._m0[1u].y;
        _1770 = _1756.y * cbModelParam._m0[1u].y;
        _1772 = _1756.z * cbModelParam._m0[1u].y;
    }
    float _1776 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _722);
    float _1777 = isnan(_1776) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1776 : min(cbModelParam._m0[25u].w, _1776));
    float _1867;
    float _1869;
    float _1871;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1831 = fma(_940, cbModelParam._m0[21u].z, fma(_936, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _932)) + cbModelParam._m0[21u].w;
        float _1835 = fma(_940, cbModelParam._m0[22u].z, fma(_936, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _932)) + cbModelParam._m0[22u].w;
        float _1839 = fma(_940, cbModelParam._m0[23u].z, fma(_936, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _932)) + cbModelParam._m0[23u].w;
        float _1842 = fma(_881, cbModelParam._m0[21u].z, fma(_880, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _879));
        float _1845 = fma(_881, cbModelParam._m0[22u].z, fma(_880, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _879));
        float _1848 = fma(_881, cbModelParam._m0[23u].z, fma(_880, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _879));
        float _2007;
        if (_1842 > 0.0)
        {
            _2007 = abs((1.0 - _1831) / _1842);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1842 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1831 + 1.0) / _1842);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2007 = frontier_phi_25_21_ladder;
        }
        float _2275;
        if (_1845 > 0.0)
        {
            _2275 = abs((1.0 - _1835) / _1845);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1845 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1835 + 1.0) / _1845);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2275 = frontier_phi_37_32_ladder;
        }
        float _2480;
        if (_1848 > 0.0)
        {
            _2480 = abs((1.0 - _1839) / _1848);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1848 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1839 + 1.0) / _1848);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2480 = frontier_phi_46_43_ladder;
        }
        float _2482 = isnan(_2275) ? _2007 : (isnan(_2007) ? _2275 : min(_2007, _2275));
        float _2483 = isnan(_2480) ? _2482 : (isnan(_2482) ? _2480 : min(_2482, _2480));
        float _2487 = (_2483 * _1842) + _1831;
        float _2488 = (_2483 * _1845) + _1835;
        float _2489 = (_2483 * _1848) + _1839;
        float _2490 = _2483 * 9.9999997473787516355514526367188e-05;
        float _2491 = (-1.0) - _2490;
        float _2493 = _2490 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2489 > _2493) || ((_2489 < _2491) || ((_2488 > _2493) || ((_2488 < _2491) || ((_2487 < _2491) || (_2487 > _2493))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2717 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2489, cbModelParam._m0[17u].z, fma(_2488, cbModelParam._m0[17u].y, _2487 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2489, cbModelParam._m0[18u].z, fma(_2488, cbModelParam._m0[18u].y, _2487 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2489, cbModelParam._m0[19u].z, fma(_2488, cbModelParam._m0[19u].y, _2487 * cbModelParam._m0[19u].x))), _1777);
            frontier_phi_22_46_ladder = _2717.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2717.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2717.x * cbModelParam._m0[1u].z;
        }
        _1867 = frontier_phi_22_46_ladder_2;
        _1869 = frontier_phi_22_46_ladder_1;
        _1871 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1851 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_879, _880, _881), _1777);
        _1867 = _1851.x * cbModelParam._m0[1u].z;
        _1869 = _1851.y * cbModelParam._m0[1u].z;
        _1871 = _1851.z * cbModelParam._m0[1u].z;
    }
    float _1883 = ((((1.0 - _900) * ((_887 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_900 * _887)) * _871;
    float _1884 = _1883 * ((cbModelParam._m0[1u].w * (_1867 - _1768)) + _1768);
    float _1885 = _1883 * ((cbModelParam._m0[1u].w * (_1869 - _1770)) + _1770);
    float _1886 = _1883 * ((cbModelParam._m0[1u].w * (_1871 - _1772)) + _1772);
    float _1889 = fma(_1886, cbSceneParam._m0[89u].z, fma(_1885, cbSceneParam._m0[89u].y, _1884 * cbSceneParam._m0[89u].x));
    float _1892 = fma(_1886, cbSceneParam._m0[90u].z, fma(_1885, cbSceneParam._m0[90u].y, _1884 * cbSceneParam._m0[90u].x));
    float _1895 = fma(_1886, cbSceneParam._m0[91u].z, fma(_1885, cbSceneParam._m0[91u].y, _1884 * cbSceneParam._m0[91u].x));
    vec4 _1903 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_806, _807));
    float _1905 = _1903.w;
    float _1917 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1905);
    float _1918 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1905);
    float _1919 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1905);
    uvec4 _1923 = floatBitsToUint(cbInstanceData._m0[_846 + 5u]);
    uint _1925 = _1923.x * 14u;
    uint _1926 = _1925 + 13u;
    float _1933 = _871 + (-1.0);
    float _1938 = (cbLight._m0[_1926].x * _1933) + 1.0;
    float _1939 = (cbLight._m0[_1926].y * _1933) + 1.0;
    float _1940 = (cbLight._m0[_1926].z * _1933) + 1.0;
    float _1941 = (cbLight._m0[_1926].w * _1933) + 1.0;
    uint _1942 = _1925 + 5u;
    float _1948 = isnan(1.0) ? _1939 : (isnan(_1939) ? 1.0 : min(_1939, 1.0));
    uint _1952 = _1925 + 4u;
    float _1961 = isnan(1.0) ? _1938 : (isnan(_1938) ? 1.0 : min(_1938, 1.0));
    uint _1965 = _1925 | 1u;
    float _1976 = dot(vec3(cbLight._m0[_1925].xyz), vec3(_719, _720, _721));
    float _1979 = dot(vec3(cbLight._m0[_1965].xyz), vec3(_719, _720, _721));
    float _4143 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
    float _4154 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
    float _1984 = (isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * 0.3183098733425140380859375;
    float _1986 = (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * 0.3183098733425140380859375;
    float _1993 = ((cbLight._m0[_1942].x * _1948) * _1986) + (((cbLight._m0[_1952].x * _1917) * _1961) * _1984);
    float _1994 = ((_1948 * cbLight._m0[_1942].y) * _1986) + (((cbLight._m0[_1952].y * _1918) * _1961) * _1984);
    float _1995 = ((_1948 * cbLight._m0[_1942].z) * _1986) + (((cbLight._m0[_1952].z * _1919) * _1961) * _1984);
    uvec4 _1999 = floatBitsToUint(cbLight._m0[_1925 + 12u]);
    bool _2001 = _1999.x == 0u;
    float _2012;
    float _2014;
    float _2016;
    if (_2001)
    {
        _2012 = _1993;
        _2014 = _1994;
        _2016 = _1995;
    }
    else
    {
        uint _2020 = _1925 + 6u;
        float _2036 = (dot(vec3(cbLight._m0[_1925 + 2u].xyz), vec3(_719, _720, _721)) * 0.5) + 0.5;
        float _2037 = _2036 * _2036;
        float _4165 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
        float _2038 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _2039 = isnan(1.0) ? _1940 : (isnan(_1940) ? 1.0 : min(_1940, 1.0));
        _2012 = (((cbLight._m0[_2020].x * 0.3183098733425140380859375) * _2038) * _2039) + _1993;
        _2014 = (((cbLight._m0[_2020].y * 0.3183098733425140380859375) * _2038) * _2039) + _1994;
        _2016 = (((cbLight._m0[_2020].z * 0.3183098733425140380859375) * _2038) * _2039) + _1995;
    }
    bool _2019 = _1999.y == 0u;
    float _2057;
    float _2059;
    float _2061;
    if (_2019)
    {
        _2057 = _2012;
        _2059 = _2014;
        _2061 = _2016;
    }
    else
    {
        uint _2219 = _1925 + 7u;
        float _2235 = (dot(vec3(cbLight._m0[_1925 + 3u].xyz), vec3(_719, _720, _721)) * 0.5) + 0.5;
        float _2236 = _2235 * _2235;
        float _4181 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
        float _2237 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _2238 = isnan(1.0) ? _1941 : (isnan(_1941) ? 1.0 : min(_1941, 1.0));
        _2057 = (((cbLight._m0[_2219].x * 0.3183098733425140380859375) * _2237) * _2238) + _2012;
        _2059 = (((cbLight._m0[_2219].y * 0.3183098733425140380859375) * _2237) * _2238) + _2014;
        _2061 = (((cbLight._m0[_2219].z * 0.3183098733425140380859375) * _2237) * _2238) + _2016;
    }
    uint _2064 = _1925 + 8u;
    float _2077 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1925].w)) * _722) * 0.949999988079071044921875);
    float _2078 = _2077 * _2077;
    float _2079 = cbLight._m0[_1925].x + _798;
    float _2080 = cbLight._m0[_1925].y + _799;
    float _2081 = cbLight._m0[_1925].z + _800;
    float _2085 = inversesqrt(dot(vec3(_2079, _2080, _2081), vec3(_2079, _2080, _2081)));
    float _2086 = _2085 * _2079;
    float _2087 = _2085 * _2080;
    float _2088 = _2085 * _2081;
    float _2089 = dot(vec3(_719, _720, _721), vec3(cbLight._m0[_1925].xyz));
    float _4197 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
    float _2092 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
    float _4208 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _2093 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
    float _2094 = dot(vec3(_719, _720, _721), vec3(_2086, _2087, _2088));
    float _4219 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
    float _2097 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
    float _2098 = dot(vec3(cbLight._m0[_1925].xyz), vec3(_2086, _2087, _2088));
    float _4230 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
    float _2102 = _2078 * _2078;
    float _2106 = ((_2097 * _2097) * (_2102 + (-1.0))) + 1.0;
    float _2117 = (exp2(log2(1.0 - (isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2118 = 1.0 - _2078;
    float _2129 = (0.5 / (((_2093 * ((_2092 * _2118) + _2078)) + 9.9999999392252902907785028219223e-09) + (((_2093 * _2118) + _2078) * _2092))) * _2092;
    float _4241 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
    float _2131 = (isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0))) * (_2102 / ((_2106 * _2106) * 3.141590118408203125));
    uint _2145 = _1925 + 9u;
    float _2156 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1965].w)) * _722) * 0.949999988079071044921875);
    float _2157 = _2156 * _2156;
    float _2158 = cbLight._m0[_1965].x + _798;
    float _2159 = cbLight._m0[_1965].y + _799;
    float _2160 = cbLight._m0[_1965].z + _800;
    float _2164 = inversesqrt(dot(vec3(_2158, _2159, _2160), vec3(_2158, _2159, _2160)));
    float _2165 = _2164 * _2158;
    float _2166 = _2164 * _2159;
    float _2167 = _2164 * _2160;
    float _2168 = dot(vec3(_719, _720, _721), vec3(cbLight._m0[_1965].xyz));
    float _4252 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
    float _2171 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
    float _2172 = dot(vec3(_719, _720, _721), vec3(_2165, _2166, _2167));
    float _4263 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
    float _2175 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
    float _2176 = dot(vec3(cbLight._m0[_1965].xyz), vec3(_2165, _2166, _2167));
    float _4274 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
    float _2180 = _2157 * _2157;
    float _2184 = ((_2175 * _2175) * (_2180 + (-1.0))) + 1.0;
    float _2193 = (exp2(log2(1.0 - (isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2194 = 1.0 - _2157;
    float _2204 = (0.5 / (((_2093 * ((_2171 * _2194) + _2157)) + 9.9999999392252902907785028219223e-09) + (((_2093 * _2194) + _2157) * _2171))) * _2171;
    float _4285 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
    float _2206 = (isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))) * (_2180 / ((_2184 * _2184) * 3.141590118408203125));
    float _2216 = (((_2193 * cbLight._m0[_2145].x) * _2206) * _1948) + ((((cbLight._m0[_2064].x * _1917) * _2117) * _2131) * _1961);
    float _2217 = (((_2193 * cbLight._m0[_2145].y) * _2206) * _1948) + ((((cbLight._m0[_2064].y * _1918) * _2117) * _2131) * _1961);
    float _2218 = (((_2193 * cbLight._m0[_2145].z) * _2206) * _1948) + ((((cbLight._m0[_2064].z * _1919) * _2117) * _2131) * _1961);
    float _2280;
    float _2282;
    float _2284;
    if (_2001)
    {
        _2280 = _2216;
        _2282 = _2217;
        _2284 = _2218;
    }
    else
    {
        uint _2286 = _1925 + 2u;
        uint _2290 = _1925 + 10u;
        float _2304 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2286].w)) * _722) * 0.949999988079071044921875);
        float _2305 = _2304 * _2304;
        float _2306 = cbLight._m0[_2286].x + _798;
        float _2307 = cbLight._m0[_2286].y + _799;
        float _2308 = cbLight._m0[_2286].z + _800;
        float _2312 = inversesqrt(dot(vec3(_2306, _2307, _2308), vec3(_2306, _2307, _2308)));
        float _2313 = _2312 * _2306;
        float _2314 = _2312 * _2307;
        float _2315 = _2312 * _2308;
        float _2316 = dot(vec3(_719, _720, _721), vec3(cbLight._m0[_2286].xyz));
        float _4296 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
        float _2319 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
        float _2320 = dot(vec3(_719, _720, _721), vec3(_2313, _2314, _2315));
        float _4307 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
        float _2323 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
        float _2324 = dot(vec3(cbLight._m0[_2286].xyz), vec3(_2313, _2314, _2315));
        float _4318 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
        float _2328 = _2305 * _2305;
        float _2332 = ((_2323 * _2323) * (_2328 + (-1.0))) + 1.0;
        float _2341 = (exp2(log2(1.0 - (isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2342 = 1.0 - _2305;
        float _2352 = (0.5 / (((_2093 * ((_2319 * _2342) + _2305)) + 9.9999999392252902907785028219223e-09) + (((_2093 * _2342) + _2305) * _2319))) * _2319;
        float _4329 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
        float _2354 = (isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0))) * (_2328 / ((_2332 * _2332) * 3.141590118408203125));
        float _2355 = isnan(1.0) ? _1940 : (isnan(_1940) ? 1.0 : min(_1940, 1.0));
        _2280 = (((_2341 * cbLight._m0[_2290].x) * _2354) * _2355) + _2216;
        _2282 = (((_2341 * cbLight._m0[_2290].y) * _2354) * _2355) + _2217;
        _2284 = (((_2341 * cbLight._m0[_2290].z) * _2354) * _2355) + _2218;
    }
    float _2390;
    float _2392;
    float _2394;
    if (_2019)
    {
        _2390 = _2280;
        _2392 = _2282;
        _2394 = _2284;
    }
    else
    {
        uint _2401 = _1925 + 3u;
        uint _2405 = _1925 + 11u;
        float _2419 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2401].w)) * _722) * 0.949999988079071044921875);
        float _2420 = _2419 * _2419;
        float _2421 = cbLight._m0[_2401].x + _798;
        float _2422 = cbLight._m0[_2401].y + _799;
        float _2423 = cbLight._m0[_2401].z + _800;
        float _2427 = inversesqrt(dot(vec3(_2421, _2422, _2423), vec3(_2421, _2422, _2423)));
        float _2428 = _2427 * _2421;
        float _2429 = _2427 * _2422;
        float _2430 = _2427 * _2423;
        float _2431 = dot(vec3(_719, _720, _721), vec3(cbLight._m0[_2401].xyz));
        float _4345 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
        float _2434 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
        float _2435 = dot(vec3(_719, _720, _721), vec3(_2428, _2429, _2430));
        float _4356 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
        float _2438 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
        float _2439 = dot(vec3(cbLight._m0[_2401].xyz), vec3(_2428, _2429, _2430));
        float _4367 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
        float _2443 = _2420 * _2420;
        float _2447 = ((_2438 * _2438) * (_2443 + (-1.0))) + 1.0;
        float _2456 = (exp2(log2(1.0 - (isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2457 = 1.0 - _2420;
        float _2467 = (0.5 / (((_2093 * ((_2434 * _2457) + _2420)) + 9.9999999392252902907785028219223e-09) + (((_2093 * _2457) + _2420) * _2434))) * _2434;
        float _4378 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
        float _2469 = (isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0))) * (_2443 / ((_2447 * _2447) * 3.141590118408203125));
        float _2470 = isnan(1.0) ? _1941 : (isnan(_1941) ? 1.0 : min(_1941, 1.0));
        _2390 = (((_2456 * cbLight._m0[_2405].x) * _2469) * _2470) + _2280;
        _2392 = (((_2456 * cbLight._m0[_2405].y) * _2469) * _2470) + _2282;
        _2394 = (((_2456 * cbLight._m0[_2405].z) * _2469) * _2470) + _2284;
    }
    float _2605;
    float _2607;
    float _2609;
    float _2611;
    float _2613;
    float _2615;
    if (_1923.y == 0u)
    {
        float _2545 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2546 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2545;
        float _2547 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2545;
        float _2548 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2545;
        uvec4 _2560 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2561 = _2560.x;
        uint _2572 = uint((float(_2560.y) * floor(float(uint(cbSceneParam._m0[85u].y * _807) / _2561))) + floor(float(uint(cbSceneParam._m0[85u].x * _806) / _2561)));
        float _2582 = (log2(_2548 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2583 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
        uint _2586 = uint(isnan(14.0) ? _2583 : (isnan(_2583) ? 14.0 : min(_2583, 14.0)));
        uvec4 _2591 = texelFetch(g_lightClusterGridBuffer, int(((_2586 << 2u) + (_2572 << 6u)) >> 2u));
        uint _2592 = _2591.x;
        uint _2593 = _2560.z;
        float _2722;
        float _2724;
        float _2726;
        float _2728;
        float _2730;
        float _2732;
        if (((((1u << ((_2593 >> 4u) & 15u)) + 4294967295u) & _2592) == 0u) || ((_2593 & 240u) == 0u))
        {
            _2722 = 0.0;
            _2724 = 0.0;
            _2726 = 0.0;
            _2728 = 0.0;
            _2730 = 0.0;
            _2732 = 0.0;
        }
        else
        {
            float _2723;
            float _2725;
            float _2727;
            float _2729;
            float _2731;
            float _2733;
            float _2875 = 0.0;
            float _2876 = 0.0;
            float _2877 = 0.0;
            float _2878 = 0.0;
            float _2879 = 0.0;
            float _2880 = 0.0;
            uint _2881 = 0u;
            uint _2890;
            bool _2891;
            for (;;)
            {
                _2890 = texelFetch(g_lightClassification, int((((_2586 << 5u) + (_2572 << 9u)) + (_2881 << 2u)) >> 2u)).x;
                _2891 = _2890 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2891)
                {
                    frontier_phi_61_pred = _2875;
                    frontier_phi_61_pred_1 = _2880;
                    frontier_phi_61_pred_2 = _2879;
                    frontier_phi_61_pred_3 = _2878;
                    frontier_phi_61_pred_4 = _2877;
                    frontier_phi_61_pred_5 = _2876;
                }
                else
                {
                    float _2999;
                    float _3000;
                    float _3001;
                    float _3002;
                    float _3003;
                    float _3004;
                    uint _3005;
                    _2999 = _2875;
                    _3000 = _2876;
                    _3001 = _2877;
                    _3002 = _2878;
                    _3003 = _2879;
                    _3004 = _2880;
                    _3005 = _2890;
                    float _2931;
                    float _2932;
                    float _2933;
                    float _2934;
                    float _2935;
                    float _2936;
                    for (;;)
                    {
                        uint _3009 = uint(findLSB(_3005)) + (_2881 << 5u);
                        uint _3006 = (_3005 + 4294967295u) & _3005;
                        uint _3011 = _3009 * 48u;
                        vec4 _3025 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3011)).x, texelFetch(g_PointLightRenderingBuffer, int(_3011 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3011 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3011 + 3u)).x));
                        uint _3031 = (_3009 * 48u) + 4u;
                        vec4 _3044 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3031)).x, texelFetch(g_PointLightRenderingBuffer, int(_3031 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3031 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3031 + 3u)).x));
                        uint _3050 = (_3009 * 48u) + 8u;
                        vec3 _3061 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3050)).x, texelFetch(g_PointLightRenderingBuffer, int(_3050 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3050 + 2u)).x));
                        float _3065 = _3025.x - _2546;
                        float _3066 = _3025.y - _2547;
                        float _3067 = _3025.z - _2548;
                        float _3068 = dot(vec3(_3065, _3066, _3067), vec3(_3065, _3066, _3067));
                        float _3071 = inversesqrt(_3068);
                        float _3072 = _3071 * _3065;
                        float _3073 = _3071 * _3066;
                        float _3074 = _3071 * _3067;
                        float _3075 = dot(vec3(_827, _830, _833), vec3(_3072, _3073, _3074));
                        float _3080 = 1.0 - (_3068 * _3025.w);
                        float _4404 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0));
                        float _3081 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
                        float _3082 = sqrt(_3068) * _3044.w;
                        float _3085 = 1.39999997615814208984375 / (_3082 + 1.39999997615814208984375);
                        float _3086 = _3085 * _3085;
                        float _3089 = ((1.0 - _3086) * _3075) + _3086;
                        float _3092 = _3082 * _3082;
                        float _3096 = ((isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0))) * _3081) / ((_3092 * 0.699999988079071044921875) + 1.0);
                        float _3100 = (-0.0) - _2546;
                        float _3101 = (-0.0) - _2547;
                        float _3102 = (-0.0) - _2548;
                        float _3106 = inversesqrt(dot(vec3(_3100, _3101, _3102), vec3(_3100, _3101, _3102)));
                        float _3107 = _3106 * _3100;
                        float _3108 = _3106 * _3101;
                        float _3109 = _3106 * _3102;
                        float _3117 = exp2(log2(1.0 / ((_3092 * 3.5) + 5.0)) * 0.25);
                        float _3118 = 1.0 - _887;
                        float _3125 = sqrt(1.0 - ((1.0 - (_3118 * _3118)) * (1.0 - (_3117 * _3117))));
                        float _3126 = _3125 * _3125;
                        float _3127 = _3126 * _3126;
                        float _3128 = _3107 + _3072;
                        float _3129 = _3108 + _3073;
                        float _3130 = _3109 + _3074;
                        float _3134 = inversesqrt(dot(vec3(_3128, _3129, _3130), vec3(_3128, _3129, _3130)));
                        float _3138 = dot(vec3(_827, _830, _833), vec3(_3107, _3108, _3109));
                        float _4420 = isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0));
                        float _3141 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
                        float _3142 = dot(vec3(_827, _830, _833), vec3(_3134 * _3128, _3134 * _3129, _3134 * _3130));
                        float _4431 = isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0));
                        float _3145 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
                        float _3149 = ((_3145 * _3145) * (_3127 + (-1.0))) + 1.0;
                        float _3150 = _3085 * _3126;
                        float _3151 = _3150 * _3150;
                        float _3154 = ((1.0 - _3151) * _3075) + _3151;
                        float _4442 = isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0));
                        float _3155 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
                        float _3156 = 1.0 - _3126;
                        float _3166 = (0.5 / (((_3155 * ((_3141 * _3156) + _3126)) + 9.9999999392252902907785028219223e-09) + (((_3155 * _3156) + _3126) * _3141))) * _3155;
                        float _4453 = isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0));
                        float _3177 = (((_3127 * 3.1415927410125732421875) * (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0)))) / ((_3149 * _3149) * ((_3092 * 2.1991131305694580078125) + 3.141590118408203125))) * _3081;
                        _2934 = (_3096 * _3044.x) + _3002;
                        _2935 = (_3096 * _3044.y) + _3003;
                        _2936 = (_3096 * _3044.z) + _3004;
                        _2931 = (_3177 * _3061.x) + _2999;
                        _2932 = (_3177 * _3061.y) + _3000;
                        _2933 = (_3177 * _3061.z) + _3001;
                        if (_3006 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2999 = _2931;
                            _3000 = _2932;
                            _3001 = _2933;
                            _3002 = _2934;
                            _3003 = _2935;
                            _3004 = _2936;
                            _3005 = _3006;
                        }
                    }
                    frontier_phi_61_pred = _2931;
                    frontier_phi_61_pred_1 = _2936;
                    frontier_phi_61_pred_2 = _2935;
                    frontier_phi_61_pred_3 = _2934;
                    frontier_phi_61_pred_4 = _2933;
                    frontier_phi_61_pred_5 = _2932;
                }
                _2723 = frontier_phi_61_pred;
                _2733 = frontier_phi_61_pred_1;
                _2731 = frontier_phi_61_pred_2;
                _2729 = frontier_phi_61_pred_3;
                _2727 = frontier_phi_61_pred_4;
                _2725 = frontier_phi_61_pred_5;
                uint _2882 = _2881 + 1u;
                if (_2882 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2875 = _2723;
                    _2876 = _2725;
                    _2877 = _2727;
                    _2878 = _2729;
                    _2879 = _2731;
                    _2880 = _2733;
                    _2881 = _2882;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2722 = _2723;
            _2724 = _2725;
            _2726 = _2727;
            _2728 = _2729;
            _2730 = _2731;
            _2732 = _2733;
        }
        uvec4 _2736 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2737 = _2736.z;
        uint _2739 = (_2737 >> 8u) & 15u;
        float _2843;
        float _2845;
        float _2847;
        float _2849;
        float _2851;
        float _2853;
        if (((4294967295u << _2739) & _2592) == 0u)
        {
            _2843 = _2722;
            _2845 = _2724;
            _2847 = _2726;
            _2849 = _2728;
            _2851 = _2730;
            _2853 = _2732;
        }
        else
        {
            float _2868 = inversesqrt(dot(vec3(_2546, _2547, _2548), vec3(_2546, _2547, _2548)));
            float _2869 = _2868 * _2546;
            float _2870 = _2868 * _2547;
            float _2871 = _2868 * _2548;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2739 < ((_2737 >> 12u) & 15u))
            {
                float _2844;
                float _2846;
                float _2848;
                float _2850;
                float _2852;
                float _2854;
                float _2982 = _2722;
                float _2983 = _2724;
                float _2984 = _2726;
                float _2985 = _2728;
                float _2986 = _2730;
                float _2987 = _2732;
                uint _2988 = _2739;
                uint _2997;
                bool _2998;
                for (;;)
                {
                    _2997 = texelFetch(g_lightClassification, int((((_2586 << 5u) + (_2572 << 9u)) + (_2988 << 2u)) >> 2u)).x;
                    _2998 = _2997 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2998)
                    {
                        frontier_phi_67_pred = _2985;
                        frontier_phi_67_pred_1 = _2986;
                        frontier_phi_67_pred_2 = _2987;
                        frontier_phi_67_pred_3 = _2984;
                        frontier_phi_67_pred_4 = _2983;
                        frontier_phi_67_pred_5 = _2982;
                    }
                    else
                    {
                        float _3182;
                        float _3183;
                        float _3184;
                        float _3185;
                        float _3186;
                        float _3187;
                        float _3476;
                        float _3477;
                        float _3478;
                        float _3479;
                        float _3480;
                        float _3481;
                        float _3195 = _2982;
                        float _3196 = _2983;
                        float _3197 = _2984;
                        float _3198 = _2985;
                        float _3199 = _2986;
                        float _3200 = _2987;
                        uint _3201 = _2997;
                        uint _3202;
                        vec4 _3227;
                        float _3228;
                        vec4 _3243;
                        vec3 _3255;
                        vec4 _3270;
                        vec4 _3285;
                        float _3332;
                        bool _3333;
                        for (;;)
                        {
                            uint _3212 = ((_2988 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3201));
                            _3202 = (_3201 + 4294967295u) & _3201;
                            uint _3214 = _3212 * 40u;
                            _3227 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3214)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 3u)).x));
                            _3228 = _3227.w;
                            uint _3230 = (_3212 * 40u) + 4u;
                            _3243 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3230)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 3u)).x));
                            uint _3245 = (_3212 * 40u) + 8u;
                            _3255 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3245)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 2u)).x));
                            uint _3257 = (_3212 * 40u) + 16u;
                            _3270 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3257)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 3u)).x));
                            uint _3272 = (_3212 * 40u) + 20u;
                            _3285 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3272)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 3u)).x));
                            uint _3288 = (_3212 * 40u) + 24u;
                            vec4 _3301 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3288)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 3u)).x));
                            uint _3307 = (_3212 * 40u) + 28u;
                            vec4 _3320 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3307)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 3u)).x));
                            _3332 = fma(_2548, _3320.z, fma(_2547, _3320.y, _3320.x * _2546)) + _3320.w;
                            _3333 = !((fma(_2548, _3301.z, fma(_2547, _3301.y, _3301.x * _2546)) + _3301.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3333)
                            {
                                float _3360 = _3227.x - _2546;
                                float _3361 = _3227.y - _2547;
                                float _3362 = _3227.z - _2548;
                                float _3363 = dot(vec3(_3360, _3361, _3362), vec3(_3360, _3361, _3362));
                                float _3366 = inversesqrt(_3363);
                                float _3367 = _3366 * _3360;
                                float _3368 = _3366 * _3361;
                                float _3369 = _3366 * _3362;
                                float _3373 = 1.0 - (_3363 / (_3228 * _3228));
                                float _4464 = isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0));
                                float _3374 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
                                float _3378 = sqrt(_3363) * _3243.w;
                                float _3380 = 1.39999997615814208984375 / (_3378 + 1.39999997615814208984375);
                                float _3381 = _3380 * _3380;
                                float _3384 = ((1.0 - _3381) * dot(vec3(_3367, _3368, _3369), vec3(_827, _830, _833))) + _3381;
                                float _3387 = _3378 * _3378;
                                float _3391 = (fma(_2548, _3270.z, fma(_2547, _3270.y, _3270.x * _2546)) + _3270.w) / _3332;
                                float _3392 = (fma(_2548, _3285.z, fma(_2547, _3285.y, _3285.x * _2546)) + _3285.w) / _3332;
                                float _3396 = 1.0 - dot(vec2(_3391, _3392), vec2(_3391, _3392));
                                float _4480 = isnan(0.0) ? _3396 : (isnan(_3396) ? 0.0 : max(_3396, 0.0));
                                float _3397 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
                                float _3398 = _3397 * (((isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : max(_3384, 0.0))) * _3374) / ((_3387 * 0.699999988079071044921875) + 1.0));
                                float _3410 = exp2(log2(1.0 / ((_3387 * 3.5) + 5.0)) * 0.25);
                                float _3411 = 1.0 - _887;
                                float _3418 = sqrt(1.0 - ((1.0 - (_3411 * _3411)) * (1.0 - (_3410 * _3410))));
                                float _3419 = _3418 * _3418;
                                float _3420 = _3419 * _3419;
                                float _3421 = _3367 - _2869;
                                float _3422 = _3368 - _2870;
                                float _3423 = _3369 - _2871;
                                float _3427 = inversesqrt(dot(vec3(_3421, _3422, _3423), vec3(_3421, _3422, _3423)));
                                float _3431 = dot(vec3(_827, _830, _833), vec3((-0.0) - _2869, (-0.0) - _2870, (-0.0) - _2871));
                                float _4491 = isnan(0.0) ? _3431 : (isnan(_3431) ? 0.0 : max(_3431, 0.0));
                                float _3434 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
                                float _3435 = dot(vec3(_827, _830, _833), vec3(_3427 * _3421, _3427 * _3422, _3427 * _3423));
                                float _4502 = isnan(0.0) ? _3435 : (isnan(_3435) ? 0.0 : max(_3435, 0.0));
                                float _3438 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
                                float _3442 = ((_3438 * _3438) * (_3420 + (-1.0))) + 1.0;
                                float _3443 = _3380 * _3419;
                                float _3444 = _3443 * _3443;
                                float _3450 = ((1.0 - _3444) * dot(vec3(_827, _830, _833), vec3(_3367, _3368, _3369))) + _3444;
                                float _4513 = isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0));
                                float _3451 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
                                float _3452 = 1.0 - _3419;
                                float _3462 = (0.5 / (((_3451 * ((_3434 * _3452) + _3419)) + 9.9999999392252902907785028219223e-09) + (((_3451 * _3452) + _3419) * _3434))) * _3451;
                                float _4524 = isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : max(_3462, 0.0));
                                float _3472 = (_3397 * _3374) * (((_3420 * 3.1415927410125732421875) * (isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0)))) / ((_3442 * _3442) * ((_3387 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3472 * _3255.x;
                                frontier_phi_73_pred_1 = _3472 * _3255.y;
                                frontier_phi_73_pred_2 = _3398 * _3243.z;
                                frontier_phi_73_pred_3 = _3398 * _3243.y;
                                frontier_phi_73_pred_4 = _3398 * _3243.x;
                                frontier_phi_73_pred_5 = _3472 * _3255.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3476 = frontier_phi_73_pred;
                            _3477 = frontier_phi_73_pred_1;
                            _3481 = frontier_phi_73_pred_2;
                            _3480 = frontier_phi_73_pred_3;
                            _3479 = frontier_phi_73_pred_4;
                            _3478 = frontier_phi_73_pred_5;
                            _3185 = _3479 + _3198;
                            _3186 = _3480 + _3199;
                            _3187 = _3481 + _3200;
                            _3182 = _3476 + _3195;
                            _3183 = _3477 + _3196;
                            _3184 = _3478 + _3197;
                            if (_3202 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3195 = _3182;
                                _3196 = _3183;
                                _3197 = _3184;
                                _3198 = _3185;
                                _3199 = _3186;
                                _3200 = _3187;
                                _3201 = _3202;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3185;
                        frontier_phi_67_pred_1 = _3186;
                        frontier_phi_67_pred_2 = _3187;
                        frontier_phi_67_pred_3 = _3184;
                        frontier_phi_67_pred_4 = _3183;
                        frontier_phi_67_pred_5 = _3182;
                    }
                    _2850 = frontier_phi_67_pred;
                    _2852 = frontier_phi_67_pred_1;
                    _2854 = frontier_phi_67_pred_2;
                    _2848 = frontier_phi_67_pred_3;
                    _2846 = frontier_phi_67_pred_4;
                    _2844 = frontier_phi_67_pred_5;
                    uint _2989 = _2988 + 1u;
                    if (_2989 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2982 = _2844;
                        _2983 = _2846;
                        _2984 = _2848;
                        _2985 = _2850;
                        _2986 = _2852;
                        _2987 = _2854;
                        _2988 = _2989;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2852;
                frontier_phi_55_56_ladder_1 = _2854;
                frontier_phi_55_56_ladder_2 = _2850;
                frontier_phi_55_56_ladder_3 = _2848;
                frontier_phi_55_56_ladder_4 = _2846;
                frontier_phi_55_56_ladder_5 = _2844;
            }
            else
            {
                frontier_phi_55_56_ladder = _2730;
                frontier_phi_55_56_ladder_1 = _2732;
                frontier_phi_55_56_ladder_2 = _2728;
                frontier_phi_55_56_ladder_3 = _2726;
                frontier_phi_55_56_ladder_4 = _2724;
                frontier_phi_55_56_ladder_5 = _2722;
            }
            _2843 = frontier_phi_55_56_ladder_5;
            _2845 = frontier_phi_55_56_ladder_4;
            _2847 = frontier_phi_55_56_ladder_3;
            _2849 = frontier_phi_55_56_ladder_2;
            _2851 = frontier_phi_55_56_ladder;
            _2853 = frontier_phi_55_56_ladder_1;
        }
        float _2858 = isnan(1.0) ? _871 : (isnan(_871) ? 1.0 : min(_871, 1.0));
        _2605 = (_2858 * _2849) + _2057;
        _2607 = (_2858 * _2851) + _2059;
        _2609 = (_2858 * _2853) + _2061;
        _2611 = ((_2843 * 0.039999999105930328369140625) * _2858) + _2390;
        _2613 = ((_2845 * 0.039999999105930328369140625) * _2858) + _2392;
        _2615 = ((_2847 * 0.039999999105930328369140625) * _2858) + _2394;
    }
    else
    {
        _2605 = _2057;
        _2607 = _2059;
        _2609 = _2061;
        _2611 = _2390;
        _2613 = _2392;
        _2615 = _2394;
    }
    uint _2621 = _847 + uint(cbMatDynParam._m0[0u].w);
    float _2627 = cbInstanceData._m0[_2621].x * (_629 - (_645 * _629));
    float _2628 = cbInstanceData._m0[_2621].y * (_630 - (_645 * _630));
    float _2629 = cbInstanceData._m0[_2621].z * (_631 - (_645 * _631));
    float _4540 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _4551 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _4562 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _2646 = (((isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0))) * (_2605 + ((isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0))) * _871))) + ((_2611 + ((isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0))) * _1677)) * cbPerFrame._m0[3u].x)) + _2627;
    float _2648 = (_2628 + ((_2613 + ((isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0))) * _1677)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0))) * (_2607 + ((isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0))) * _871)));
    float _2650 = (_2629 + ((_2615 + ((isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0))) * _1677)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0))) * (_2609 + ((isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0))) * _871)));
    float _4588 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2663 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
    uint _2664 = _846 + 6u;
    float _2672 = _806 / cbSceneParam._m0[86u].x;
    float _2673 = _807 / cbSceneParam._m0[86u].y;
    vec4 _2687 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2672, _2673, (log2((isnan(cbSceneParam._m0[77u].w) ? _741 : (isnan(_741) ? cbSceneParam._m0[77u].w : min(_741, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2689 = _2687.x;
    float _2690 = _2687.y;
    float _2691 = _2687.z;
    float _2692 = _2687.w;
    float _2784;
    float _2786;
    float _2788;
    float _2790;
    if (_741 > cbSceneParam._m0[78u].w)
    {
        float _2747 = isnan(_741) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _741 : min(cbSceneParam._m0[80u].w, _741));
        float _2748 = _2747 / _741;
        float _2759 = _2748 * _791;
        float _2760 = _792 * _2748;
        float _2761 = (-0.0) - _2760;
        float _2762 = _2748 * _793;
        float _2764 = (cbSceneParam._m0[77u].w * _2761) / _2747;
        float _2765 = _2764 + cbSceneParam._m0[79u].w;
        float _2766 = cbSceneParam._m0[79u].w - _2760;
        float _2772 = sqrt(((_2759 * _2759) + (_2760 * _2760)) + (_2762 * _2762));
        float _2775 = (1.0 - (cbSceneParam._m0[77u].w / _2747)) * _2772;
        float _2780 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2782 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2944;
        if (abs((_2761 - _2764) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2944 = ((((_2765 > 0.0) ? exp2(_2780 * _2765) : (2.0 - exp2(_2782 * _2765))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2775;
        }
        else
        {
            float _2904 = 1.0 / cbSceneParam._m0[80u].x;
            float _2905 = isnan(_2766) ? _2765 : (isnan(_2765) ? _2766 : max(_2765, _2766));
            float _2906 = isnan(_2766) ? _2765 : (isnan(_2765) ? _2766 : min(_2765, _2766));
            float _2915 = isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : min(_2905, 0.0));
            float _2916 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : min(_2906, 0.0));
            _2944 = ((abs(_2772 / _2761) * cbSceneParam._m0[80u].y) * ((((_2915 - _2916) * 2.0) - ((exp2(_2780 * (isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : max(_2905, 0.0)))) - exp2(_2780 * (isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0))))) * _2904)) - ((exp2(_2782 * _2915) - exp2(_2782 * _2916)) * _2904))) + (_2775 * cbSceneParam._m0[80u].z);
        }
        vec4 _2946 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2672, _2673, 1.0), 0.0);
        float _2955 = exp2((_2944 * (-1.44269502162933349609375)) * (1.0 - _2946.w));
        float _2956 = log2(_2955);
        float _2972 = log2(_2692);
        _2784 = (exp2(_2972 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2956 * cbSceneParam._m0[78u].x)) * _2946.x) / cbSceneParam._m0[78u].x)) + _2689;
        _2786 = (exp2(_2972 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2956 * cbSceneParam._m0[78u].y)) * _2946.y) / cbSceneParam._m0[78u].y)) + _2690;
        _2788 = (exp2(_2972 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2956 * cbSceneParam._m0[78u].z)) * _2946.z) / cbSceneParam._m0[78u].z)) + _2691;
        _2790 = _2955 * _2692;
    }
    else
    {
        _2784 = _2689;
        _2786 = _2690;
        _2788 = _2691;
        _2790 = _2692;
    }
    float _2802 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2803 = _2802 == 3.0;
    float _2804 = log2(_2790);
    float _2808 = exp2(_2804 * cbSceneParam._m0[78u].x);
    float _2809 = exp2(_2804 * cbSceneParam._m0[78u].y);
    float _2810 = exp2(_2804 * cbSceneParam._m0[78u].z);
    float _2811 = _2808 * (isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0)));
    float _2812 = _2809 * (isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0)));
    float _2813 = _2810 * (isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0)));
    float _2822 = (_2802 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2822 * (_2803 ? _2811 : (_2811 + (cbSceneParam._m0[72u].w * _2784)));
    SV_Target.y = _2822 * (_2803 ? _2812 : (_2812 + (cbSceneParam._m0[72u].w * _2786)));
    SV_Target.z = _2822 * (_2803 ? _2813 : (_2813 + (cbSceneParam._m0[72u].w * _2788)));
    SV_Target.w = cbInstanceData._m0[_2664].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2627) * _2663) * _2808) * _2822;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2628) * _2663) * _2809) * _2822;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2629) * _2663) * _2810) * _2822;
    SV_Target_1.w = cbInstanceData._m0[_2664].w;
}


