#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _997;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _187 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _188 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _189 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_187, _188, _189), vec3(_187, _188, _189)));
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _231 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _237 = _231.x * cbMtdParam._m0[9u].x;
    float _238 = _231.y * cbMtdParam._m0[9u].y;
    float _239 = _231.z * cbMtdParam._m0[9u].z;
    vec4 _256 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    vec4 _270 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _274 = _270.z;
    float _278 = (_270.x * 2.0) + (-1.0);
    float _280 = (_270.y * 2.0) + (-1.0);
    float _281 = dot(vec2(_278, _280), vec2(_278, _280));
    float _3344 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    float _287 = sqrt(1.0 - (isnan(1.0) ? _3344 : (isnan(_3344) ? 1.0 : min(_3344, 1.0))));
    float _300 = (cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _301 = (cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _331 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * ((cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * ((cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[10u].w));
    float _336 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[15u].w;
    float _343 = ((_331.y * 0.5) + (-0.25)) * cbMtdParam._m0[15u].z;
    float _345 = (-0.0) - (cbMtdParam._m0[15u].z * ((_331.x * 0.5) + (-0.25)));
    float _347 = fract(_336);
    float _349 = fract(_336 + 0.5);
    float _350 = _347 * _345;
    float _351 = _343 * _347;
    float _354 = _349 * _345;
    float _355 = _343 * _349;
    float _360 = abs((_347 * 2.0) + (-1.0));
    vec4 _376 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_350 + _300) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_351 + _301) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _378 = _376.x;
    float _379 = _376.y;
    float _380 = _376.z;
    vec4 _381 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_354 + _300) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_355 + _301) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _408 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _409 = (cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _422 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_350 + _408) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_351 + _409) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _424 = _422.x;
    float _425 = _422.y;
    float _426 = _422.z;
    vec4 _427 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_354 + _408) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_355 + _409) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _454 = (TEXCOORD_9.x - ((cbMtdParam._m0[16u].y * (1.0 - TEXCOORD_9.x)) * (_256.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[16u].z + 1.0);
    float _3355 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _455 = isnan(1.0) ? _3355 : (isnan(_3355) ? 1.0 : min(_3355, 1.0));
    float _461 = fma(_287, _202 * NORMAL.x, fma(_280, _209 * TANGENT.x, (_195 * _187) * _278));
    float _464 = fma(_287, _202 * NORMAL.y, fma(_280, _209 * TANGENT.y, (_195 * _188) * _278));
    float _467 = fma(_287, _202 * NORMAL.z, fma(_280, _209 * TANGENT.z, (_195 * _189) * _278));
    float _471 = inversesqrt(dot(vec3(_461, _464, _467), vec3(_461, _464, _467)));
    float _472 = _471 * _461;
    float _473 = _471 * _464;
    float _474 = _471 * _467;
    float _3366 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _475 = isnan(1.0) ? _3366 : (isnan(_3366) ? 1.0 : min(_3366, 1.0));
    float _3377 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3388 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _3399 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _494 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _535 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _545 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _535);
    float _546 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _535);
    float _547 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _535);
    float _551 = inversesqrt(dot(vec3(_545, _546, _547), vec3(_545, _546, _547)));
    float _552 = _545 * _551;
    float _553 = _546 * _551;
    float _554 = _547 * _551;
    float _560 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _561 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _582 = fma(_474, cbSceneParam._m0[5u].z, fma(_473, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _472));
    float _585 = fma(_474, cbSceneParam._m0[6u].z, fma(_473, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _472));
    float _588 = fma(_474, cbSceneParam._m0[7u].z, fma(_473, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _472));
    uint _601 = uint(roundEven(NORMAL.w)) * 13u;
    uint _602 = _601 + 9u;
    uint _603 = _602 + uint(cbMatDynParam._m0[0u].w);
    float _609 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0)))) * cbInstanceData._m0[_603].x;
    float _610 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0)))) * cbInstanceData._m0[_603].y;
    float _611 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0)))) * cbInstanceData._m0[_603].z;
    float _3410 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _612 = isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0));
    float _3421 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _613 = isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0));
    float _3432 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _614 = isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0));
    vec4 _623 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _560, cbSceneParam._m0[86u].y * _561));
    float _626 = _623.x * TEXCOORD_3.w;
    float _627 = dot(vec3(_472, _473, _474), vec3(_552, _553, _554));
    float _630 = _627 * 2.0;
    float _634 = (_630 * _472) - _552;
    float _635 = (_630 * _473) - _553;
    float _636 = (_630 * _474) - _554;
    float _640 = abs(dot(vec3(_552, _553, _554), vec3(_472, _473, _474)));
    float _3443 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _642 = sqrt(_475);
    float _655 = exp2((_642 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_642 * 3.0));
    float _687 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _691 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _695 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _996;
    float _998;
    float _999;
    float _1000;
    float _1001;
    float _1002;
    float _1003;
    float _1004;
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _722 = fma(_695, cbModelParam._m0[26u].z, fma(_691, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _687));
        float _726 = fma(_695, cbModelParam._m0[27u].z, fma(_691, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _687));
        float _730 = fma(_695, cbModelParam._m0[28u].z, fma(_691, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _687));
        float _754 = _687 + _472;
        float _755 = _691 + _473;
        float _756 = _695 + _474;
        float _766 = fma(_756, cbModelParam._m0[26u].z, fma(_755, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _754)) - _722;
        float _767 = fma(_756, cbModelParam._m0[27u].z, fma(_755, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _754)) - _726;
        float _768 = fma(_756, cbModelParam._m0[28u].z, fma(_755, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _754)) - _730;
        float _772 = inversesqrt(dot(vec3(_766, _767, _768), vec3(_766, _767, _768)));
        float _785 = ((_772 * _766) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_722 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _786 = ((_772 * _767) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_726 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _787 = ((_772 * _768) / cbModelParam._m0[34u].z) + ((((((_730 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _790 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_785, _786, _787), 0.0);
        vec4 _797 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_785, _786, _787), 0.0);
        vec4 _804 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_785, _786, _787), 0.0);
        vec4 _811 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_785, _786, _787), 0.0);
        float _824 = exp2((_790.w + (-0.5)) * 20.0) * 2.0;
        float _825 = _824 * (_790.x + (-0.5));
        float _826 = _824 * (_790.y + (-0.5));
        float _827 = _824 * (_790.z + (-0.5));
        float _834 = exp2((_797.w + (-0.5)) * 20.0) * 2.0;
        float _835 = _834 * (_797.x + (-0.5));
        float _836 = _834 * (_797.y + (-0.5));
        float _837 = _834 * (_797.z + (-0.5));
        float _844 = exp2((_804.w + (-0.5)) * 20.0) * 2.0;
        float _845 = _844 * (_804.x + (-0.5));
        float _846 = _844 * (_804.y + (-0.5));
        float _847 = _844 * (_804.z + (-0.5));
        float _854 = exp2((_811.w + (-0.5)) * 20.0) * 2.0;
        float _855 = _854 * (_811.x + (-0.5));
        float _856 = _854 * (_811.y + (-0.5));
        float _857 = _854 * (_811.z + (-0.5));
        float _858 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
        float _859 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
        float _860 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        float _861 = _825 * 0.5;
        float _862 = _835 * 0.5;
        float _863 = _845 * 0.5;
        float _864 = dot(vec3(_861, _862, _863), vec3(_861, _862, _863));
        float _869 = (_864 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_864);
        float _878 = (dot(vec3(_472, _473, _474), vec3(_869 * _861, _869 * _862, _869 * _863)) + 1.0) * 0.5;
        float _3469 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _888 = sqrt(((_862 * _862) + (_861 * _861)) + (_863 * _863)) / (_858 + 9.9999997473787516355514526367188e-06);
        float _3480 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _889 = isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0));
        float _890 = _889 * 2.0;
        float _894 = (1.0 - _889) / (_889 + 1.0);
        float _3491 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _895 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
        float _904 = ((((1.0 - _895) * (_890 + 2.0)) * exp2(log2(isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0))) * (_890 + 1.0))) + _895) * _858;
        float _905 = _826 * 0.5;
        float _906 = _836 * 0.5;
        float _907 = _846 * 0.5;
        float _908 = dot(vec3(_905, _906, _907), vec3(_905, _906, _907));
        float _913 = (_908 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_908);
        float _921 = (dot(vec3(_472, _473, _474), vec3(_913 * _905, _913 * _906, _913 * _907)) + 1.0) * 0.5;
        float _3502 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _930 = sqrt(((_906 * _906) + (_905 * _905)) + (_907 * _907)) / (_859 + 9.9999997473787516355514526367188e-06);
        float _3513 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _931 = isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0));
        float _932 = _931 * 2.0;
        float _936 = (1.0 - _931) / (_931 + 1.0);
        float _3524 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _937 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
        float _946 = ((((1.0 - _937) * (_932 + 2.0)) * exp2(log2(isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0))) * (_932 + 1.0))) + _937) * _859;
        float _947 = _827 * 0.5;
        float _948 = _837 * 0.5;
        float _949 = _847 * 0.5;
        float _950 = dot(vec3(_947, _948, _949), vec3(_947, _948, _949));
        float _955 = (_950 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_950);
        float _963 = (dot(vec3(_472, _473, _474), vec3(_955 * _947, _955 * _948, _955 * _949)) + 1.0) * 0.5;
        float _3535 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _972 = sqrt(((_948 * _948) + (_947 * _947)) + (_949 * _949)) / (_860 + 9.9999997473787516355514526367188e-06);
        float _3546 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _973 = isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0));
        float _974 = _973 * 2.0;
        float _978 = (1.0 - _973) / (_973 + 1.0);
        float _3557 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _979 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
        float _988 = ((((1.0 - _979) * (_974 + 2.0)) * exp2(log2(isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0))) * (_974 + 1.0))) + _979) * _860;
        _996 = _827;
        _998 = _826;
        _999 = _825;
        _1000 = _837;
        _1001 = _836;
        _1002 = _835;
        _1003 = _847;
        _1004 = _846;
        _1005 = _845;
        _1006 = _860;
        _1007 = _859;
        _1008 = _858;
        _1009 = cbModelParam._m0[36u].z * (isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0)));
        _1010 = cbModelParam._m0[36u].z * (isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0)));
        _1011 = cbModelParam._m0[36u].z * (isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0)));
    }
    else
    {
        _996 = _997;
        _998 = _997;
        _999 = _997;
        _1000 = _997;
        _1001 = _997;
        _1002 = _997;
        _1003 = _997;
        _1004 = _997;
        _1005 = _997;
        _1006 = _997;
        _1007 = _997;
        _1008 = _997;
        _1009 = 0.0;
        _1010 = 0.0;
        _1011 = 0.0;
    }
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1037 = fma(_695, cbModelParam._m0[30u].z, fma(_691, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _687));
        float _1041 = fma(_695, cbModelParam._m0[31u].z, fma(_691, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _687));
        float _1045 = fma(_695, cbModelParam._m0[32u].z, fma(_691, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _687));
        float _1068 = _687 + _472;
        float _1069 = _691 + _473;
        float _1070 = _695 + _474;
        float _1080 = fma(_1070, cbModelParam._m0[30u].z, fma(_1069, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1068)) - _1037;
        float _1081 = fma(_1070, cbModelParam._m0[31u].z, fma(_1069, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1068)) - _1041;
        float _1082 = fma(_1070, cbModelParam._m0[32u].z, fma(_1069, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1068)) - _1045;
        float _1086 = inversesqrt(dot(vec3(_1080, _1081, _1082), vec3(_1080, _1081, _1082)));
        float _1099 = ((_1086 * _1080) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1037 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1100 = ((_1086 * _1081) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1041 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1101 = ((_1086 * _1082) / cbModelParam._m0[35u].z) + ((((((_1045 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1103 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1099, _1100, _1101), 0.0);
        vec4 _1110 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1099, _1100, _1101), 0.0);
        vec4 _1117 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1099, _1100, _1101), 0.0);
        vec4 _1124 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1099, _1100, _1101), 0.0);
        float _1136 = exp2((_1103.w + (-0.5)) * 20.0) * 2.0;
        float _1137 = _1136 * (_1103.x + (-0.5));
        float _1138 = _1136 * (_1103.y + (-0.5));
        float _1139 = _1136 * (_1103.z + (-0.5));
        float _1146 = exp2((_1110.w + (-0.5)) * 20.0) * 2.0;
        float _1147 = _1146 * (_1110.x + (-0.5));
        float _1148 = _1146 * (_1110.y + (-0.5));
        float _1149 = _1146 * (_1110.z + (-0.5));
        float _1156 = exp2((_1117.w + (-0.5)) * 20.0) * 2.0;
        float _1157 = _1156 * (_1117.x + (-0.5));
        float _1158 = _1156 * (_1117.y + (-0.5));
        float _1159 = _1156 * (_1117.z + (-0.5));
        float _1166 = exp2((_1124.w + (-0.5)) * 20.0) * 2.0;
        float _1167 = _1166 * (_1124.x + (-0.5));
        float _1168 = _1166 * (_1124.y + (-0.5));
        float _1169 = _1166 * (_1124.z + (-0.5));
        float _1170 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1171 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1172 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1173 = _1137 * 0.5;
        float _1174 = _1147 * 0.5;
        float _1175 = _1157 * 0.5;
        float _1176 = dot(vec3(_1173, _1174, _1175), vec3(_1173, _1174, _1175));
        float _1181 = (_1176 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1176);
        float _1189 = (dot(vec3(_472, _473, _474), vec3(_1181 * _1173, _1181 * _1174, _1181 * _1175)) + 1.0) * 0.5;
        float _3598 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1198 = sqrt(((_1174 * _1174) + (_1173 * _1173)) + (_1175 * _1175)) / (_1170 + 9.9999997473787516355514526367188e-06);
        float _3609 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
        float _1200 = _1199 * 2.0;
        float _1204 = (1.0 - _1199) / (_1199 + 1.0);
        float _3620 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1205 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
        float _1214 = ((((1.0 - _1205) * (_1200 + 2.0)) * exp2(log2(isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0))) * (_1200 + 1.0))) + _1205) * _1170;
        float _1215 = _1138 * 0.5;
        float _1216 = _1148 * 0.5;
        float _1217 = _1158 * 0.5;
        float _1218 = dot(vec3(_1215, _1216, _1217), vec3(_1215, _1216, _1217));
        float _1223 = (_1218 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1218);
        float _1231 = (dot(vec3(_472, _473, _474), vec3(_1223 * _1215, _1223 * _1216, _1223 * _1217)) + 1.0) * 0.5;
        float _3631 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1240 = sqrt(((_1216 * _1216) + (_1215 * _1215)) + (_1217 * _1217)) / (_1171 + 9.9999997473787516355514526367188e-06);
        float _3642 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1241 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
        float _1242 = _1241 * 2.0;
        float _1246 = (1.0 - _1241) / (_1241 + 1.0);
        float _3653 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
        float _1256 = ((((1.0 - _1247) * (_1242 + 2.0)) * exp2(log2(isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0))) * (_1242 + 1.0))) + _1247) * _1171;
        float _1257 = _1139 * 0.5;
        float _1258 = _1149 * 0.5;
        float _1259 = _1159 * 0.5;
        float _1260 = dot(vec3(_1257, _1258, _1259), vec3(_1257, _1258, _1259));
        float _1265 = (_1260 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1260);
        float _1273 = (dot(vec3(_472, _473, _474), vec3(_1265 * _1257, _1265 * _1258, _1265 * _1259)) + 1.0) * 0.5;
        float _3664 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1282 = sqrt(((_1258 * _1258) + (_1257 * _1257)) + (_1259 * _1259)) / (_1172 + 9.9999997473787516355514526367188e-06);
        float _3675 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
        float _1284 = _1283 * 2.0;
        float _1288 = (1.0 - _1283) / (_1283 + 1.0);
        float _3686 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
        float _1298 = ((((1.0 - _1289) * (_1284 + 2.0)) * exp2(log2(isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0))) * (_1284 + 1.0))) + _1289) * _1172;
        _1306 = _1139;
        _1307 = _1138;
        _1308 = _1137;
        _1309 = _1149;
        _1310 = _1148;
        _1311 = _1147;
        _1312 = _1159;
        _1313 = _1158;
        _1314 = _1157;
        _1315 = _1172;
        _1316 = _1171;
        _1317 = _1170;
        _1318 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0)));
        _1319 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0)));
        _1320 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0)));
    }
    else
    {
        _1306 = _997;
        _1307 = _997;
        _1308 = _997;
        _1309 = _997;
        _1310 = _997;
        _1311 = _997;
        _1312 = _997;
        _1313 = _997;
        _1314 = _997;
        _1315 = _997;
        _1316 = _997;
        _1317 = _997;
        _1318 = 0.0;
        _1319 = 0.0;
        _1320 = 0.0;
    }
    float _1330 = (cbModelParam._m0[1u].x * (_1318 - _1009)) + _1009;
    float _1331 = (cbModelParam._m0[1u].x * (_1319 - _1010)) + _1010;
    float _1332 = (cbModelParam._m0[1u].x * (_1320 - _1011)) + _1011;
    float _1353 = fma(_1332, cbSceneParam._m0[89u].z, fma(_1331, cbSceneParam._m0[89u].y, _1330 * cbSceneParam._m0[89u].x));
    float _1356 = fma(_1332, cbSceneParam._m0[90u].z, fma(_1331, cbSceneParam._m0[90u].y, _1330 * cbSceneParam._m0[90u].x));
    float _1359 = fma(_1332, cbSceneParam._m0[91u].z, fma(_1331, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1330));
    float _1374 = _634 * 0.5;
    float _1375 = _635 * 0.5;
    float _1376 = _636 * 0.5;
    float _1377 = dot(vec4(_1374, _1375, _1376, 1.0), vec4(_1308, _1311, _1314, _1317));
    float _1380 = dot(vec4(_1374, _1375, _1376, 1.0), vec4(_1307, _1310, _1313, _1316));
    float _1383 = dot(vec4(_1374, _1375, _1376, 1.0), vec4(_1306, _1309, _1312, _1315));
    float _1417;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1390 = dot(vec4(_1374, _1375, _1376, 1.0), vec4(_996, _1000, _1003, _1006));
        float _1394 = dot(vec4(_1374, _1375, _1376, 1.0), vec4(_998, _1001, _1004, _1007));
        float _1398 = dot(vec4(_1374, _1375, _1376, 1.0), vec4(_999, _1002, _1005, _1008));
        float _1405 = dot(vec4(cbModelParam._m0[39u]), vec4(_1374, _1375, _1376, 1.0));
        _1417 = dot(vec3(isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0)), isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0)), isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1405) ? 0.0 : (isnan(0.0) ? _1405 : max(0.0, _1405))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1417 = 1.0;
    }
    float _1428;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1419 = dot(vec4(cbModelParam._m0[40u]), vec4(_1374, _1375, _1376, 1.0));
        _1428 = dot(vec3(isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0)), isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0)), isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1419) ? 0.0 : (isnan(0.0) ? _1419 : max(0.0, _1419))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1428 = 1.0;
    }
    float _1432 = (_1428 * cbModelParam._m0[1u].x) + (_1417 * (1.0 - cbModelParam._m0[1u].x));
    float _1442 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _475);
    float _1443 = isnan(_1442) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1442 : min(cbModelParam._m0[25u].z, _1442));
    float _1524;
    float _1526;
    float _1528;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1491 = fma(_695, cbModelParam._m0[13u].z, fma(_691, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _687)) + cbModelParam._m0[13u].w;
        float _1495 = fma(_695, cbModelParam._m0[14u].z, fma(_691, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _687)) + cbModelParam._m0[14u].w;
        float _1499 = fma(_695, cbModelParam._m0[15u].z, fma(_691, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _687)) + cbModelParam._m0[15u].w;
        float _1502 = fma(_636, cbModelParam._m0[13u].z, fma(_635, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _634));
        float _1505 = fma(_636, cbModelParam._m0[14u].z, fma(_635, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _634));
        float _1508 = fma(_636, cbModelParam._m0[15u].z, fma(_635, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _634));
        float _1536;
        if (_1502 > 0.0)
        {
            _1536 = abs((1.0 - _1491) / _1502);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1502 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1491 + 1.0) / _1502);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1536 = frontier_phi_14_12_ladder;
        }
        float _1739;
        if (_1505 > 0.0)
        {
            _1739 = abs((1.0 - _1495) / _1505);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1505 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1495 + 1.0) / _1505);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1739 = frontier_phi_23_19_ladder;
        }
        float _1982;
        if (_1508 > 0.0)
        {
            _1982 = abs((1.0 - _1499) / _1508);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1508 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1499 + 1.0) / _1508);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1982 = frontier_phi_35_30_ladder;
        }
        float _1984 = isnan(_1739) ? _1536 : (isnan(_1536) ? _1739 : min(_1536, _1739));
        float _1985 = isnan(_1982) ? _1984 : (isnan(_1984) ? _1982 : min(_1984, _1982));
        float _1989 = (_1985 * _1502) + _1491;
        float _1990 = (_1985 * _1505) + _1495;
        float _1991 = (_1985 * _1508) + _1499;
        float _1992 = _1985 * 9.9999997473787516355514526367188e-05;
        float _1994 = (-1.0) - _1992;
        float _1996 = _1992 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1991 > _1996) || ((_1991 < _1994) || ((_1990 > _1996) || ((_1990 < _1994) || ((_1989 < _1994) || (_1989 > _1996))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2115 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1991, cbModelParam._m0[9u].z, fma(_1990, cbModelParam._m0[9u].y, _1989 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1991, cbModelParam._m0[10u].z, fma(_1990, cbModelParam._m0[10u].y, _1989 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1991, cbModelParam._m0[11u].z, fma(_1990, cbModelParam._m0[11u].y, _1989 * cbModelParam._m0[11u].x))), _1443);
            frontier_phi_13_35_ladder = _2115.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2115.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2115.x * cbModelParam._m0[1u].y;
        }
        _1524 = frontier_phi_13_35_ladder_2;
        _1526 = frontier_phi_13_35_ladder_1;
        _1528 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1512 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_634, _635, _636), _1443);
        _1524 = _1512.x * cbModelParam._m0[1u].y;
        _1526 = _1512.y * cbModelParam._m0[1u].y;
        _1528 = _1512.z * cbModelParam._m0[1u].y;
    }
    float _1532 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _475);
    float _1533 = isnan(_1532) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1532 : min(cbModelParam._m0[25u].w, _1532));
    float _1623;
    float _1625;
    float _1627;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1587 = fma(_695, cbModelParam._m0[21u].z, fma(_691, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _687)) + cbModelParam._m0[21u].w;
        float _1591 = fma(_695, cbModelParam._m0[22u].z, fma(_691, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _687)) + cbModelParam._m0[22u].w;
        float _1595 = fma(_695, cbModelParam._m0[23u].z, fma(_691, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _687)) + cbModelParam._m0[23u].w;
        float _1598 = fma(_636, cbModelParam._m0[21u].z, fma(_635, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _634));
        float _1601 = fma(_636, cbModelParam._m0[22u].z, fma(_635, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _634));
        float _1604 = fma(_636, cbModelParam._m0[23u].z, fma(_635, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _634));
        float _1744;
        if (_1598 > 0.0)
        {
            _1744 = abs((1.0 - _1587) / _1598);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1598 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1587 + 1.0) / _1598);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1744 = frontier_phi_25_21_ladder;
        }
        float _2009;
        if (_1601 > 0.0)
        {
            _2009 = abs((1.0 - _1591) / _1601);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1601 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1591 + 1.0) / _1601);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2009 = frontier_phi_37_32_ladder;
        }
        float _2214;
        if (_1604 > 0.0)
        {
            _2214 = abs((1.0 - _1595) / _1604);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1604 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1595 + 1.0) / _1604);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2214 = frontier_phi_46_43_ladder;
        }
        float _2216 = isnan(_2009) ? _1744 : (isnan(_1744) ? _2009 : min(_1744, _2009));
        float _2217 = isnan(_2214) ? _2216 : (isnan(_2216) ? _2214 : min(_2216, _2214));
        float _2221 = (_2217 * _1598) + _1587;
        float _2222 = (_2217 * _1601) + _1591;
        float _2223 = (_2217 * _1604) + _1595;
        float _2224 = _2217 * 9.9999997473787516355514526367188e-05;
        float _2225 = (-1.0) - _2224;
        float _2227 = _2224 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2223 > _2227) || ((_2223 < _2225) || ((_2222 > _2227) || ((_2222 < _2225) || ((_2221 < _2225) || (_2221 > _2227))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2451 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2223, cbModelParam._m0[17u].z, fma(_2222, cbModelParam._m0[17u].y, _2221 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2223, cbModelParam._m0[18u].z, fma(_2222, cbModelParam._m0[18u].y, _2221 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2223, cbModelParam._m0[19u].z, fma(_2222, cbModelParam._m0[19u].y, _2221 * cbModelParam._m0[19u].x))), _1533);
            frontier_phi_22_46_ladder = _2451.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2451.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2451.x * cbModelParam._m0[1u].z;
        }
        _1623 = frontier_phi_22_46_ladder_2;
        _1625 = frontier_phi_22_46_ladder_1;
        _1627 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1607 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_634, _635, _636), _1533);
        _1623 = _1607.x * cbModelParam._m0[1u].z;
        _1625 = _1607.y * cbModelParam._m0[1u].z;
        _1627 = _1607.z * cbModelParam._m0[1u].z;
    }
    float _1639 = ((((1.0 - _655) * ((_642 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_655 * _642)) * _626;
    float _1640 = _1639 * ((cbModelParam._m0[1u].w * (_1623 - _1524)) + _1524);
    float _1641 = _1639 * ((cbModelParam._m0[1u].w * (_1625 - _1526)) + _1526);
    float _1642 = _1639 * ((cbModelParam._m0[1u].w * (_1627 - _1528)) + _1528);
    float _1645 = fma(_1642, cbSceneParam._m0[89u].z, fma(_1641, cbSceneParam._m0[89u].y, _1640 * cbSceneParam._m0[89u].x));
    float _1648 = fma(_1642, cbSceneParam._m0[90u].z, fma(_1641, cbSceneParam._m0[90u].y, _1640 * cbSceneParam._m0[90u].x));
    float _1651 = fma(_1642, cbSceneParam._m0[91u].z, fma(_1641, cbSceneParam._m0[91u].y, _1640 * cbSceneParam._m0[91u].x));
    uvec4 _1661 = floatBitsToUint(cbInstanceData._m0[_601 + 5u]);
    uint _1663 = _1661.x * 14u;
    uint _1664 = _1663 + 13u;
    float _1671 = _626 + (-1.0);
    float _1676 = (cbLight._m0[_1664].x * _1671) + 1.0;
    float _1677 = (cbLight._m0[_1664].y * _1671) + 1.0;
    float _1678 = (cbLight._m0[_1664].z * _1671) + 1.0;
    float _1679 = (cbLight._m0[_1664].w * _1671) + 1.0;
    uint _1680 = _1663 + 5u;
    float _1686 = isnan(1.0) ? _1677 : (isnan(_1677) ? 1.0 : min(_1677, 1.0));
    uint _1690 = _1663 + 4u;
    float _1697 = isnan(1.0) ? _1676 : (isnan(_1676) ? 1.0 : min(_1676, 1.0));
    uint _1701 = _1663 | 1u;
    float _1712 = dot(vec3(cbLight._m0[_1663].xyz), vec3(_472, _473, _474));
    float _1715 = dot(vec3(cbLight._m0[_1701].xyz), vec3(_472, _473, _474));
    float _3822 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
    float _3833 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
    float _1720 = (isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0))) * 0.3183098733425140380859375;
    float _1722 = (isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0))) * 0.3183098733425140380859375;
    float _1729 = ((cbLight._m0[_1680].x * _1686) * _1722) + ((cbLight._m0[_1690].x * _1697) * _1720);
    float _1730 = ((_1686 * cbLight._m0[_1680].y) * _1722) + ((_1697 * cbLight._m0[_1690].y) * _1720);
    float _1731 = ((_1686 * cbLight._m0[_1680].z) * _1722) + ((_1697 * cbLight._m0[_1690].z) * _1720);
    uvec4 _1736 = floatBitsToUint(cbLight._m0[_1663 + 12u]);
    bool _1738 = _1736.x == 0u;
    float _1749;
    float _1751;
    float _1753;
    if (_1738)
    {
        _1749 = _1729;
        _1751 = _1730;
        _1753 = _1731;
    }
    else
    {
        uint _1757 = _1663 + 6u;
        float _1773 = (dot(vec3(cbLight._m0[_1663 + 2u].xyz), vec3(_472, _473, _474)) * 0.5) + 0.5;
        float _1774 = _1773 * _1773;
        float _3844 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
        float _1775 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
        float _1776 = isnan(1.0) ? _1678 : (isnan(_1678) ? 1.0 : min(_1678, 1.0));
        _1749 = (((cbLight._m0[_1757].x * 0.3183098733425140380859375) * _1775) * _1776) + _1729;
        _1751 = (((cbLight._m0[_1757].y * 0.3183098733425140380859375) * _1775) * _1776) + _1730;
        _1753 = (((cbLight._m0[_1757].z * 0.3183098733425140380859375) * _1775) * _1776) + _1731;
    }
    bool _1756 = _1736.y == 0u;
    float _1794;
    float _1796;
    float _1798;
    if (_1756)
    {
        _1794 = _1749;
        _1796 = _1751;
        _1798 = _1753;
    }
    else
    {
        uint _1953 = _1663 + 7u;
        float _1969 = (dot(vec3(cbLight._m0[_1663 + 3u].xyz), vec3(_472, _473, _474)) * 0.5) + 0.5;
        float _1970 = _1969 * _1969;
        float _3860 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
        float _1971 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1972 = isnan(1.0) ? _1679 : (isnan(_1679) ? 1.0 : min(_1679, 1.0));
        _1794 = (((cbLight._m0[_1953].x * 0.3183098733425140380859375) * _1971) * _1972) + _1749;
        _1796 = (((cbLight._m0[_1953].y * 0.3183098733425140380859375) * _1971) * _1972) + _1751;
        _1798 = (((cbLight._m0[_1953].z * 0.3183098733425140380859375) * _1971) * _1972) + _1753;
    }
    uint _1801 = _1663 + 8u;
    float _1814 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1663].w)) * _475) * 0.949999988079071044921875);
    float _1815 = _1814 * _1814;
    float _1816 = cbLight._m0[_1663].x + _552;
    float _1817 = cbLight._m0[_1663].y + _553;
    float _1818 = cbLight._m0[_1663].z + _554;
    float _1822 = inversesqrt(dot(vec3(_1816, _1817, _1818), vec3(_1816, _1817, _1818)));
    float _1823 = _1822 * _1816;
    float _1824 = _1822 * _1817;
    float _1825 = _1822 * _1818;
    float _1826 = dot(vec3(_472, _473, _474), vec3(cbLight._m0[_1663].xyz));
    float _3876 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
    float _1829 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
    float _3887 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _1830 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
    float _1831 = dot(vec3(_472, _473, _474), vec3(_1823, _1824, _1825));
    float _3898 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
    float _1834 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
    float _1835 = dot(vec3(cbLight._m0[_1663].xyz), vec3(_1823, _1824, _1825));
    float _3909 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
    float _1839 = _1815 * _1815;
    float _1843 = ((_1834 * _1834) * (_1839 + (-1.0))) + 1.0;
    float _1854 = (exp2(log2(1.0 - (isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1855 = 1.0 - _1815;
    float _1866 = (0.5 / (((_1830 * ((_1829 * _1855) + _1815)) + 9.9999999392252902907785028219223e-09) + (((_1830 * _1855) + _1815) * _1829))) * _1829;
    float _3920 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
    float _1868 = (isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))) * (_1839 / ((_1843 * _1843) * 3.141590118408203125));
    uint _1879 = _1663 + 9u;
    float _1890 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1701].w)) * _475) * 0.949999988079071044921875);
    float _1891 = _1890 * _1890;
    float _1892 = cbLight._m0[_1701].x + _552;
    float _1893 = cbLight._m0[_1701].y + _553;
    float _1894 = cbLight._m0[_1701].z + _554;
    float _1898 = inversesqrt(dot(vec3(_1892, _1893, _1894), vec3(_1892, _1893, _1894)));
    float _1899 = _1898 * _1892;
    float _1900 = _1898 * _1893;
    float _1901 = _1898 * _1894;
    float _1902 = dot(vec3(_472, _473, _474), vec3(cbLight._m0[_1701].xyz));
    float _3931 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
    float _1905 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
    float _1906 = dot(vec3(_472, _473, _474), vec3(_1899, _1900, _1901));
    float _3942 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
    float _1909 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
    float _1910 = dot(vec3(cbLight._m0[_1701].xyz), vec3(_1899, _1900, _1901));
    float _3953 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
    float _1914 = _1891 * _1891;
    float _1918 = ((_1909 * _1909) * (_1914 + (-1.0))) + 1.0;
    float _1927 = (exp2(log2(1.0 - (isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1928 = 1.0 - _1891;
    float _1938 = (0.5 / (((_1830 * ((_1905 * _1928) + _1891)) + 9.9999999392252902907785028219223e-09) + (((_1830 * _1928) + _1891) * _1905))) * _1905;
    float _3964 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
    float _1940 = (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))) * (_1914 / ((_1918 * _1918) * 3.141590118408203125));
    float _1950 = (((_1927 * cbLight._m0[_1879].x) * _1940) * _1686) + (((_1854 * cbLight._m0[_1801].x) * _1868) * _1697);
    float _1951 = (((_1927 * cbLight._m0[_1879].y) * _1940) * _1686) + (((_1854 * cbLight._m0[_1801].y) * _1868) * _1697);
    float _1952 = (((_1927 * cbLight._m0[_1879].z) * _1940) * _1686) + (((_1854 * cbLight._m0[_1801].z) * _1868) * _1697);
    float _2014;
    float _2016;
    float _2018;
    if (_1738)
    {
        _2014 = _1950;
        _2016 = _1951;
        _2018 = _1952;
    }
    else
    {
        uint _2020 = _1663 + 2u;
        uint _2024 = _1663 + 10u;
        float _2038 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2020].w)) * _475) * 0.949999988079071044921875);
        float _2039 = _2038 * _2038;
        float _2040 = cbLight._m0[_2020].x + _552;
        float _2041 = cbLight._m0[_2020].y + _553;
        float _2042 = cbLight._m0[_2020].z + _554;
        float _2046 = inversesqrt(dot(vec3(_2040, _2041, _2042), vec3(_2040, _2041, _2042)));
        float _2047 = _2046 * _2040;
        float _2048 = _2046 * _2041;
        float _2049 = _2046 * _2042;
        float _2050 = dot(vec3(_472, _473, _474), vec3(cbLight._m0[_2020].xyz));
        float _3975 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
        float _2053 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _2054 = dot(vec3(_472, _473, _474), vec3(_2047, _2048, _2049));
        float _3986 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
        float _2057 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
        float _2058 = dot(vec3(cbLight._m0[_2020].xyz), vec3(_2047, _2048, _2049));
        float _3997 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
        float _2062 = _2039 * _2039;
        float _2066 = ((_2057 * _2057) * (_2062 + (-1.0))) + 1.0;
        float _2075 = (exp2(log2(1.0 - (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2076 = 1.0 - _2039;
        float _2086 = (0.5 / (((_1830 * ((_2053 * _2076) + _2039)) + 9.9999999392252902907785028219223e-09) + (((_1830 * _2076) + _2039) * _2053))) * _2053;
        float _4008 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
        float _2088 = (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0))) * (_2062 / ((_2066 * _2066) * 3.141590118408203125));
        float _2089 = isnan(1.0) ? _1678 : (isnan(_1678) ? 1.0 : min(_1678, 1.0));
        _2014 = (((_2075 * cbLight._m0[_2024].x) * _2088) * _2089) + _1950;
        _2016 = (((_2075 * cbLight._m0[_2024].y) * _2088) * _2089) + _1951;
        _2018 = (((_2075 * cbLight._m0[_2024].z) * _2088) * _2089) + _1952;
    }
    float _2124;
    float _2126;
    float _2128;
    if (_1756)
    {
        _2124 = _2014;
        _2126 = _2016;
        _2128 = _2018;
    }
    else
    {
        uint _2135 = _1663 + 3u;
        uint _2139 = _1663 + 11u;
        float _2153 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2135].w)) * _475) * 0.949999988079071044921875);
        float _2154 = _2153 * _2153;
        float _2155 = cbLight._m0[_2135].x + _552;
        float _2156 = cbLight._m0[_2135].y + _553;
        float _2157 = cbLight._m0[_2135].z + _554;
        float _2161 = inversesqrt(dot(vec3(_2155, _2156, _2157), vec3(_2155, _2156, _2157)));
        float _2162 = _2161 * _2155;
        float _2163 = _2161 * _2156;
        float _2164 = _2161 * _2157;
        float _2165 = dot(vec3(_472, _473, _474), vec3(cbLight._m0[_2135].xyz));
        float _4024 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
        float _2168 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _2169 = dot(vec3(_472, _473, _474), vec3(_2162, _2163, _2164));
        float _4035 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
        float _2172 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _2173 = dot(vec3(cbLight._m0[_2135].xyz), vec3(_2162, _2163, _2164));
        float _4046 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
        float _2177 = _2154 * _2154;
        float _2181 = ((_2172 * _2172) * (_2177 + (-1.0))) + 1.0;
        float _2190 = (exp2(log2(1.0 - (isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2191 = 1.0 - _2154;
        float _2201 = (0.5 / (((_1830 * ((_2168 * _2191) + _2154)) + 9.9999999392252902907785028219223e-09) + (((_1830 * _2191) + _2154) * _2168))) * _2168;
        float _4057 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
        float _2203 = (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))) * (_2177 / ((_2181 * _2181) * 3.141590118408203125));
        float _2204 = isnan(1.0) ? _1679 : (isnan(_1679) ? 1.0 : min(_1679, 1.0));
        _2124 = (((_2190 * cbLight._m0[_2139].x) * _2203) * _2204) + _2014;
        _2126 = (((_2190 * cbLight._m0[_2139].y) * _2203) * _2204) + _2016;
        _2128 = (((_2190 * cbLight._m0[_2139].z) * _2203) * _2204) + _2018;
    }
    float _2339;
    float _2341;
    float _2343;
    float _2345;
    float _2347;
    float _2349;
    if (_1661.y == 0u)
    {
        float _2279 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2280 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2279;
        float _2281 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2279;
        float _2282 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2279;
        uvec4 _2294 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2295 = _2294.x;
        uint _2306 = uint((float(_2294.y) * floor(float(uint(cbSceneParam._m0[85u].y * _561) / _2295))) + floor(float(uint(cbSceneParam._m0[85u].x * _560) / _2295)));
        float _2316 = (log2(_2282 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2317 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
        uint _2320 = uint(isnan(14.0) ? _2317 : (isnan(_2317) ? 14.0 : min(_2317, 14.0)));
        uvec4 _2325 = texelFetch(g_lightClusterGridBuffer, int(((_2320 << 2u) + (_2306 << 6u)) >> 2u));
        uint _2326 = _2325.x;
        uint _2327 = _2294.z;
        float _2456;
        float _2458;
        float _2460;
        float _2462;
        float _2464;
        float _2466;
        if (((((1u << ((_2327 >> 4u) & 15u)) + 4294967295u) & _2326) == 0u) || ((_2327 & 240u) == 0u))
        {
            _2456 = 0.0;
            _2458 = 0.0;
            _2460 = 0.0;
            _2462 = 0.0;
            _2464 = 0.0;
            _2466 = 0.0;
        }
        else
        {
            float _2457;
            float _2459;
            float _2461;
            float _2463;
            float _2465;
            float _2467;
            float _2609 = 0.0;
            float _2610 = 0.0;
            float _2611 = 0.0;
            float _2612 = 0.0;
            float _2613 = 0.0;
            float _2614 = 0.0;
            uint _2615 = 0u;
            uint _2624;
            bool _2625;
            for (;;)
            {
                _2624 = texelFetch(g_lightClassification, int((((_2320 << 5u) + (_2306 << 9u)) + (_2615 << 2u)) >> 2u)).x;
                _2625 = _2624 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2625)
                {
                    frontier_phi_61_pred = _2609;
                    frontier_phi_61_pred_1 = _2614;
                    frontier_phi_61_pred_2 = _2613;
                    frontier_phi_61_pred_3 = _2612;
                    frontier_phi_61_pred_4 = _2611;
                    frontier_phi_61_pred_5 = _2610;
                }
                else
                {
                    float _2733;
                    float _2734;
                    float _2735;
                    float _2736;
                    float _2737;
                    float _2738;
                    uint _2739;
                    _2733 = _2609;
                    _2734 = _2610;
                    _2735 = _2611;
                    _2736 = _2612;
                    _2737 = _2613;
                    _2738 = _2614;
                    _2739 = _2624;
                    float _2665;
                    float _2666;
                    float _2667;
                    float _2668;
                    float _2669;
                    float _2670;
                    for (;;)
                    {
                        uint _2743 = uint(findLSB(_2739)) + (_2615 << 5u);
                        uint _2740 = (_2739 + 4294967295u) & _2739;
                        uint _2745 = _2743 * 48u;
                        vec4 _2759 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2745)).x, texelFetch(g_PointLightRenderingBuffer, int(_2745 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2745 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2745 + 3u)).x));
                        uint _2765 = (_2743 * 48u) + 4u;
                        vec4 _2778 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2765)).x, texelFetch(g_PointLightRenderingBuffer, int(_2765 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2765 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2765 + 3u)).x));
                        uint _2784 = (_2743 * 48u) + 8u;
                        vec3 _2795 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2784)).x, texelFetch(g_PointLightRenderingBuffer, int(_2784 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2784 + 2u)).x));
                        float _2799 = _2759.x - _2280;
                        float _2800 = _2759.y - _2281;
                        float _2801 = _2759.z - _2282;
                        float _2802 = dot(vec3(_2799, _2800, _2801), vec3(_2799, _2800, _2801));
                        float _2805 = inversesqrt(_2802);
                        float _2806 = _2805 * _2799;
                        float _2807 = _2805 * _2800;
                        float _2808 = _2805 * _2801;
                        float _2809 = dot(vec3(_582, _585, _588), vec3(_2806, _2807, _2808));
                        float _2814 = 1.0 - (_2802 * _2759.w);
                        float _4083 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
                        float _2815 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
                        float _2816 = sqrt(_2802) * _2778.w;
                        float _2819 = 1.39999997615814208984375 / (_2816 + 1.39999997615814208984375);
                        float _2820 = _2819 * _2819;
                        float _2823 = ((1.0 - _2820) * _2809) + _2820;
                        float _2826 = _2816 * _2816;
                        float _2830 = ((isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0))) * _2815) / ((_2826 * 0.699999988079071044921875) + 1.0);
                        float _2834 = (-0.0) - _2280;
                        float _2835 = (-0.0) - _2281;
                        float _2836 = (-0.0) - _2282;
                        float _2840 = inversesqrt(dot(vec3(_2834, _2835, _2836), vec3(_2834, _2835, _2836)));
                        float _2841 = _2840 * _2834;
                        float _2842 = _2840 * _2835;
                        float _2843 = _2840 * _2836;
                        float _2851 = exp2(log2(1.0 / ((_2826 * 3.5) + 5.0)) * 0.25);
                        float _2852 = 1.0 - _642;
                        float _2859 = sqrt(1.0 - ((1.0 - (_2852 * _2852)) * (1.0 - (_2851 * _2851))));
                        float _2860 = _2859 * _2859;
                        float _2861 = _2860 * _2860;
                        float _2862 = _2841 + _2806;
                        float _2863 = _2842 + _2807;
                        float _2864 = _2843 + _2808;
                        float _2868 = inversesqrt(dot(vec3(_2862, _2863, _2864), vec3(_2862, _2863, _2864)));
                        float _2872 = dot(vec3(_582, _585, _588), vec3(_2841, _2842, _2843));
                        float _4099 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0));
                        float _2875 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
                        float _2876 = dot(vec3(_582, _585, _588), vec3(_2868 * _2862, _2868 * _2863, _2868 * _2864));
                        float _4110 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0));
                        float _2879 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
                        float _2883 = ((_2879 * _2879) * (_2861 + (-1.0))) + 1.0;
                        float _2884 = _2819 * _2860;
                        float _2885 = _2884 * _2884;
                        float _2888 = ((1.0 - _2885) * _2809) + _2885;
                        float _4121 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0));
                        float _2889 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
                        float _2890 = 1.0 - _2860;
                        float _2900 = (0.5 / (((_2889 * ((_2875 * _2890) + _2860)) + 9.9999999392252902907785028219223e-09) + (((_2889 * _2890) + _2860) * _2875))) * _2889;
                        float _4132 = isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : max(_2900, 0.0));
                        float _2911 = (((_2861 * 3.1415927410125732421875) * (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0)))) / ((_2883 * _2883) * ((_2826 * 2.1991131305694580078125) + 3.141590118408203125))) * _2815;
                        _2668 = (_2830 * _2778.x) + _2736;
                        _2669 = (_2830 * _2778.y) + _2737;
                        _2670 = (_2830 * _2778.z) + _2738;
                        _2665 = (_2911 * _2795.x) + _2733;
                        _2666 = (_2911 * _2795.y) + _2734;
                        _2667 = (_2911 * _2795.z) + _2735;
                        if (_2740 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2733 = _2665;
                            _2734 = _2666;
                            _2735 = _2667;
                            _2736 = _2668;
                            _2737 = _2669;
                            _2738 = _2670;
                            _2739 = _2740;
                        }
                    }
                    frontier_phi_61_pred = _2665;
                    frontier_phi_61_pred_1 = _2670;
                    frontier_phi_61_pred_2 = _2669;
                    frontier_phi_61_pred_3 = _2668;
                    frontier_phi_61_pred_4 = _2667;
                    frontier_phi_61_pred_5 = _2666;
                }
                _2457 = frontier_phi_61_pred;
                _2467 = frontier_phi_61_pred_1;
                _2465 = frontier_phi_61_pred_2;
                _2463 = frontier_phi_61_pred_3;
                _2461 = frontier_phi_61_pred_4;
                _2459 = frontier_phi_61_pred_5;
                uint _2616 = _2615 + 1u;
                if (_2616 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2609 = _2457;
                    _2610 = _2459;
                    _2611 = _2461;
                    _2612 = _2463;
                    _2613 = _2465;
                    _2614 = _2467;
                    _2615 = _2616;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2456 = _2457;
            _2458 = _2459;
            _2460 = _2461;
            _2462 = _2463;
            _2464 = _2465;
            _2466 = _2467;
        }
        uvec4 _2470 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2471 = _2470.z;
        uint _2473 = (_2471 >> 8u) & 15u;
        float _2577;
        float _2579;
        float _2581;
        float _2583;
        float _2585;
        float _2587;
        if (((4294967295u << _2473) & _2326) == 0u)
        {
            _2577 = _2456;
            _2579 = _2458;
            _2581 = _2460;
            _2583 = _2462;
            _2585 = _2464;
            _2587 = _2466;
        }
        else
        {
            float _2602 = inversesqrt(dot(vec3(_2280, _2281, _2282), vec3(_2280, _2281, _2282)));
            float _2603 = _2602 * _2280;
            float _2604 = _2602 * _2281;
            float _2605 = _2602 * _2282;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2473 < ((_2471 >> 12u) & 15u))
            {
                float _2578;
                float _2580;
                float _2582;
                float _2584;
                float _2586;
                float _2588;
                float _2716 = _2456;
                float _2717 = _2458;
                float _2718 = _2460;
                float _2719 = _2462;
                float _2720 = _2464;
                float _2721 = _2466;
                uint _2722 = _2473;
                uint _2731;
                bool _2732;
                for (;;)
                {
                    _2731 = texelFetch(g_lightClassification, int((((_2320 << 5u) + (_2306 << 9u)) + (_2722 << 2u)) >> 2u)).x;
                    _2732 = _2731 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2732)
                    {
                        frontier_phi_67_pred = _2719;
                        frontier_phi_67_pred_1 = _2720;
                        frontier_phi_67_pred_2 = _2721;
                        frontier_phi_67_pred_3 = _2718;
                        frontier_phi_67_pred_4 = _2717;
                        frontier_phi_67_pred_5 = _2716;
                    }
                    else
                    {
                        float _2916;
                        float _2917;
                        float _2918;
                        float _2919;
                        float _2920;
                        float _2921;
                        float _3210;
                        float _3211;
                        float _3212;
                        float _3213;
                        float _3214;
                        float _3215;
                        float _2929 = _2716;
                        float _2930 = _2717;
                        float _2931 = _2718;
                        float _2932 = _2719;
                        float _2933 = _2720;
                        float _2934 = _2721;
                        uint _2935 = _2731;
                        uint _2936;
                        vec4 _2961;
                        float _2962;
                        vec4 _2977;
                        vec3 _2989;
                        vec4 _3004;
                        vec4 _3019;
                        float _3066;
                        bool _3067;
                        for (;;)
                        {
                            uint _2946 = ((_2722 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2935));
                            _2936 = (_2935 + 4294967295u) & _2935;
                            uint _2948 = _2946 * 40u;
                            _2961 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2948)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2948 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2948 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2948 + 3u)).x));
                            _2962 = _2961.w;
                            uint _2964 = (_2946 * 40u) + 4u;
                            _2977 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2964)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 3u)).x));
                            uint _2979 = (_2946 * 40u) + 8u;
                            _2989 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2979)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2979 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2979 + 2u)).x));
                            uint _2991 = (_2946 * 40u) + 16u;
                            _3004 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2991)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 3u)).x));
                            uint _3006 = (_2946 * 40u) + 20u;
                            _3019 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3006)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 3u)).x));
                            uint _3022 = (_2946 * 40u) + 24u;
                            vec4 _3035 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3022)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 3u)).x));
                            uint _3041 = (_2946 * 40u) + 28u;
                            vec4 _3054 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3041)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3041 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3041 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3041 + 3u)).x));
                            _3066 = fma(_2282, _3054.z, fma(_2281, _3054.y, _3054.x * _2280)) + _3054.w;
                            _3067 = !((fma(_2282, _3035.z, fma(_2281, _3035.y, _3035.x * _2280)) + _3035.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3067)
                            {
                                float _3094 = _2961.x - _2280;
                                float _3095 = _2961.y - _2281;
                                float _3096 = _2961.z - _2282;
                                float _3097 = dot(vec3(_3094, _3095, _3096), vec3(_3094, _3095, _3096));
                                float _3100 = inversesqrt(_3097);
                                float _3101 = _3100 * _3094;
                                float _3102 = _3100 * _3095;
                                float _3103 = _3100 * _3096;
                                float _3107 = 1.0 - (_3097 / (_2962 * _2962));
                                float _4143 = isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : max(_3107, 0.0));
                                float _3108 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
                                float _3112 = sqrt(_3097) * _2977.w;
                                float _3114 = 1.39999997615814208984375 / (_3112 + 1.39999997615814208984375);
                                float _3115 = _3114 * _3114;
                                float _3118 = ((1.0 - _3115) * dot(vec3(_3101, _3102, _3103), vec3(_582, _585, _588))) + _3115;
                                float _3121 = _3112 * _3112;
                                float _3125 = (fma(_2282, _3004.z, fma(_2281, _3004.y, _3004.x * _2280)) + _3004.w) / _3066;
                                float _3126 = (fma(_2282, _3019.z, fma(_2281, _3019.y, _3019.x * _2280)) + _3019.w) / _3066;
                                float _3130 = 1.0 - dot(vec2(_3125, _3126), vec2(_3125, _3126));
                                float _4159 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0));
                                float _3131 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
                                float _3132 = _3131 * (((isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0))) * _3108) / ((_3121 * 0.699999988079071044921875) + 1.0));
                                float _3144 = exp2(log2(1.0 / ((_3121 * 3.5) + 5.0)) * 0.25);
                                float _3145 = 1.0 - _642;
                                float _3152 = sqrt(1.0 - ((1.0 - (_3145 * _3145)) * (1.0 - (_3144 * _3144))));
                                float _3153 = _3152 * _3152;
                                float _3154 = _3153 * _3153;
                                float _3155 = _3101 - _2603;
                                float _3156 = _3102 - _2604;
                                float _3157 = _3103 - _2605;
                                float _3161 = inversesqrt(dot(vec3(_3155, _3156, _3157), vec3(_3155, _3156, _3157)));
                                float _3165 = dot(vec3(_582, _585, _588), vec3((-0.0) - _2603, (-0.0) - _2604, (-0.0) - _2605));
                                float _4170 = isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0));
                                float _3168 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
                                float _3169 = dot(vec3(_582, _585, _588), vec3(_3161 * _3155, _3161 * _3156, _3161 * _3157));
                                float _4181 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0));
                                float _3172 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
                                float _3176 = ((_3172 * _3172) * (_3154 + (-1.0))) + 1.0;
                                float _3177 = _3114 * _3153;
                                float _3178 = _3177 * _3177;
                                float _3184 = ((1.0 - _3178) * dot(vec3(_582, _585, _588), vec3(_3101, _3102, _3103))) + _3178;
                                float _4192 = isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0));
                                float _3185 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
                                float _3186 = 1.0 - _3153;
                                float _3196 = (0.5 / (((_3185 * ((_3168 * _3186) + _3153)) + 9.9999999392252902907785028219223e-09) + (((_3185 * _3186) + _3153) * _3168))) * _3185;
                                float _4203 = isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : max(_3196, 0.0));
                                float _3206 = (_3131 * _3108) * (((_3154 * 3.1415927410125732421875) * (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0)))) / ((_3176 * _3176) * ((_3121 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3206 * _2989.x;
                                frontier_phi_73_pred_1 = _3206 * _2989.y;
                                frontier_phi_73_pred_2 = _3132 * _2977.z;
                                frontier_phi_73_pred_3 = _3132 * _2977.y;
                                frontier_phi_73_pred_4 = _3132 * _2977.x;
                                frontier_phi_73_pred_5 = _3206 * _2989.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3210 = frontier_phi_73_pred;
                            _3211 = frontier_phi_73_pred_1;
                            _3215 = frontier_phi_73_pred_2;
                            _3214 = frontier_phi_73_pred_3;
                            _3213 = frontier_phi_73_pred_4;
                            _3212 = frontier_phi_73_pred_5;
                            _2919 = _3213 + _2932;
                            _2920 = _3214 + _2933;
                            _2921 = _3215 + _2934;
                            _2916 = _3210 + _2929;
                            _2917 = _3211 + _2930;
                            _2918 = _3212 + _2931;
                            if (_2936 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2929 = _2916;
                                _2930 = _2917;
                                _2931 = _2918;
                                _2932 = _2919;
                                _2933 = _2920;
                                _2934 = _2921;
                                _2935 = _2936;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2919;
                        frontier_phi_67_pred_1 = _2920;
                        frontier_phi_67_pred_2 = _2921;
                        frontier_phi_67_pred_3 = _2918;
                        frontier_phi_67_pred_4 = _2917;
                        frontier_phi_67_pred_5 = _2916;
                    }
                    _2584 = frontier_phi_67_pred;
                    _2586 = frontier_phi_67_pred_1;
                    _2588 = frontier_phi_67_pred_2;
                    _2582 = frontier_phi_67_pred_3;
                    _2580 = frontier_phi_67_pred_4;
                    _2578 = frontier_phi_67_pred_5;
                    uint _2723 = _2722 + 1u;
                    if (_2723 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2716 = _2578;
                        _2717 = _2580;
                        _2718 = _2582;
                        _2719 = _2584;
                        _2720 = _2586;
                        _2721 = _2588;
                        _2722 = _2723;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2586;
                frontier_phi_55_56_ladder_1 = _2588;
                frontier_phi_55_56_ladder_2 = _2584;
                frontier_phi_55_56_ladder_3 = _2582;
                frontier_phi_55_56_ladder_4 = _2580;
                frontier_phi_55_56_ladder_5 = _2578;
            }
            else
            {
                frontier_phi_55_56_ladder = _2464;
                frontier_phi_55_56_ladder_1 = _2466;
                frontier_phi_55_56_ladder_2 = _2462;
                frontier_phi_55_56_ladder_3 = _2460;
                frontier_phi_55_56_ladder_4 = _2458;
                frontier_phi_55_56_ladder_5 = _2456;
            }
            _2577 = frontier_phi_55_56_ladder_5;
            _2579 = frontier_phi_55_56_ladder_4;
            _2581 = frontier_phi_55_56_ladder_3;
            _2583 = frontier_phi_55_56_ladder_2;
            _2585 = frontier_phi_55_56_ladder;
            _2587 = frontier_phi_55_56_ladder_1;
        }
        float _2592 = isnan(1.0) ? _626 : (isnan(_626) ? 1.0 : min(_626, 1.0));
        _2339 = (_2592 * _2583) + _1794;
        _2341 = (_2592 * _2585) + _1796;
        _2343 = (_2592 * _2587) + _1798;
        _2345 = ((_2577 * 0.039999999105930328369140625) * _2592) + _2124;
        _2347 = ((_2579 * 0.039999999105930328369140625) * _2592) + _2126;
        _2349 = ((_2581 * 0.039999999105930328369140625) * _2592) + _2128;
    }
    else
    {
        _2339 = _1794;
        _2341 = _1796;
        _2343 = _1798;
        _2345 = _2124;
        _2347 = _2126;
        _2349 = _2128;
    }
    uint _2355 = _602 + uint(cbMatDynParam._m0[0u].w);
    float _2361 = ((((((_427.x - _424) * _360) + _424) * cbMtdParam._m0[13u].x) + ((((_381.x - _378) * _360) + _378) * cbMtdParam._m0[11u].x)) * _455) * cbInstanceData._m0[_2355].x;
    float _2362 = ((((((_427.y - _425) * _360) + _425) * cbMtdParam._m0[13u].y) + ((((_381.y - _379) * _360) + _379) * cbMtdParam._m0[11u].y)) * _455) * cbInstanceData._m0[_2355].y;
    float _2363 = ((((((_427.z - _426) * _360) + _426) * cbMtdParam._m0[13u].z) + ((((_381.z - _380) * _360) + _380) * cbMtdParam._m0[11u].z)) * _455) * cbInstanceData._m0[_2355].z;
    float _4219 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _4230 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _4241 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _2380 = (((isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0))) * (_2339 + ((isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0))) * _626))) + ((_2345 + ((isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0))) * _1432)) * cbPerFrame._m0[3u].x)) + _2361;
    float _2382 = (_2362 + ((_2347 + ((isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0))) * _1432)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0))) * (_2341 + ((isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0))) * _626)));
    float _2384 = (_2363 + ((_2349 + ((isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0))) * _1432)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0))) * (_2343 + ((isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0))) * _626)));
    float _4267 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2397 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
    uint _2398 = _601 + 6u;
    float _2406 = _560 / cbSceneParam._m0[86u].x;
    float _2407 = _561 / cbSceneParam._m0[86u].y;
    vec4 _2421 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2406, _2407, (log2((isnan(cbSceneParam._m0[77u].w) ? _494 : (isnan(_494) ? cbSceneParam._m0[77u].w : min(_494, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2423 = _2421.x;
    float _2424 = _2421.y;
    float _2425 = _2421.z;
    float _2426 = _2421.w;
    float _2518;
    float _2520;
    float _2522;
    float _2524;
    if (_494 > cbSceneParam._m0[78u].w)
    {
        float _2481 = isnan(_494) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _494 : min(cbSceneParam._m0[80u].w, _494));
        float _2482 = _2481 / _494;
        float _2493 = _2482 * _545;
        float _2494 = _546 * _2482;
        float _2495 = (-0.0) - _2494;
        float _2496 = _2482 * _547;
        float _2498 = (cbSceneParam._m0[77u].w * _2495) / _2481;
        float _2499 = _2498 + cbSceneParam._m0[79u].w;
        float _2500 = cbSceneParam._m0[79u].w - _2494;
        float _2506 = sqrt(((_2493 * _2493) + (_2494 * _2494)) + (_2496 * _2496));
        float _2509 = (1.0 - (cbSceneParam._m0[77u].w / _2481)) * _2506;
        float _2514 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2516 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2678;
        if (abs((_2495 - _2498) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2678 = ((((_2499 > 0.0) ? exp2(_2514 * _2499) : (2.0 - exp2(_2516 * _2499))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2509;
        }
        else
        {
            float _2638 = 1.0 / cbSceneParam._m0[80u].x;
            float _2639 = isnan(_2500) ? _2499 : (isnan(_2499) ? _2500 : max(_2499, _2500));
            float _2640 = isnan(_2500) ? _2499 : (isnan(_2499) ? _2500 : min(_2499, _2500));
            float _2649 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : min(_2639, 0.0));
            float _2650 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : min(_2640, 0.0));
            _2678 = ((abs(_2506 / _2495) * cbSceneParam._m0[80u].y) * ((((_2649 - _2650) * 2.0) - ((exp2(_2514 * (isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0)))) - exp2(_2514 * (isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0))))) * _2638)) - ((exp2(_2516 * _2649) - exp2(_2516 * _2650)) * _2638))) + (_2509 * cbSceneParam._m0[80u].z);
        }
        vec4 _2680 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2406, _2407, 1.0), 0.0);
        float _2689 = exp2((_2678 * (-1.44269502162933349609375)) * (1.0 - _2680.w));
        float _2690 = log2(_2689);
        float _2706 = log2(_2426);
        _2518 = (exp2(_2706 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2690 * cbSceneParam._m0[78u].x)) * _2680.x) / cbSceneParam._m0[78u].x)) + _2423;
        _2520 = (exp2(_2706 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2690 * cbSceneParam._m0[78u].y)) * _2680.y) / cbSceneParam._m0[78u].y)) + _2424;
        _2522 = (exp2(_2706 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2690 * cbSceneParam._m0[78u].z)) * _2680.z) / cbSceneParam._m0[78u].z)) + _2425;
        _2524 = _2689 * _2426;
    }
    else
    {
        _2518 = _2423;
        _2520 = _2424;
        _2522 = _2425;
        _2524 = _2426;
    }
    float _2536 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2537 = _2536 == 3.0;
    float _2538 = log2(_2524);
    float _2542 = exp2(_2538 * cbSceneParam._m0[78u].x);
    float _2543 = exp2(_2538 * cbSceneParam._m0[78u].y);
    float _2544 = exp2(_2538 * cbSceneParam._m0[78u].z);
    float _2545 = _2542 * (isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0)));
    float _2546 = _2543 * (isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0)));
    float _2547 = _2544 * (isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0)));
    float _2556 = (_2536 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2556 * (_2537 ? _2545 : (_2545 + (cbSceneParam._m0[72u].w * _2518)));
    SV_Target.y = _2556 * (_2537 ? _2546 : (_2546 + (cbSceneParam._m0[72u].w * _2520)));
    SV_Target.z = _2556 * (_2537 ? _2547 : (_2547 + (cbSceneParam._m0[72u].w * _2522)));
    SV_Target.w = cbInstanceData._m0[_2398].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2361) * _2397) * _2542) * _2556;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2362) * _2397) * _2543) * _2556;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2363) * _2397) * _2544) * _2556;
    SV_Target_1.w = cbInstanceData._m0[_2398].w;
}


