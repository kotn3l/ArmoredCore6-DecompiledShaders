#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1126;
float _3549;
float _3550;
float _3551;
float _3552;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _199 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _200 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _201 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _207 = inversesqrt(dot(vec3(_199, _200, _201), vec3(_199, _200, _201)));
    float _214 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _243 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _249 = _243.x * cbMtdParam._m0[9u].x;
    float _250 = _243.y * cbMtdParam._m0[9u].y;
    float _251 = _243.z * cbMtdParam._m0[9u].z;
    vec4 _268 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _289 = TEXCOORD_9.x - ((cbMtdParam._m0[16u].y * (1.0 - TEXCOORD_9.x)) * (_268.x + 0.00999999977648258209228515625));
    float _291 = _289 * (cbMtdParam._m0[16u].z + 1.0);
    float _3561 = isnan(0.0) ? _291 : (isnan(_291) ? 0.0 : max(_291, 0.0));
    float _292 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
    float _300 = ((((cbMtdParam._m0[12u].x - _249) * TEXCOORD_9.x) * cbMtdParam._m0[16u].x) * _292) + _249;
    float _301 = ((((cbMtdParam._m0[12u].y - _250) * TEXCOORD_9.y) * cbMtdParam._m0[16u].x) * _292) + _250;
    float _302 = (((cbMtdParam._m0[16u].x * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _251)) * _292) + _251;
    vec4 _314 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _318 = _314.z;
    float _322 = (_314.x * 2.0) + (-1.0);
    float _324 = (_314.y * 2.0) + (-1.0);
    float _325 = dot(vec2(_322, _324), vec2(_322, _324));
    float _3572 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
    float _330 = sqrt(1.0 - (isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0))));
    float _336 = _289 * (cbMtdParam._m0[16u].y + 1.0);
    float _3583 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _340 = ((cbMtdParam._m0[15u].y - _318) * (isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0)))) + _318;
    float _353 = (cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _354 = (cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _381 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * ((cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * ((cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[10u].w));
    float _386 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[15u].w;
    float _393 = ((_381.y * 0.5) + (-0.25)) * cbMtdParam._m0[15u].z;
    float _395 = (-0.0) - (cbMtdParam._m0[15u].z * ((_381.x * 0.5) + (-0.25)));
    float _397 = fract(_386);
    float _399 = fract(_386 + 0.5);
    float _400 = _397 * _395;
    float _401 = _393 * _397;
    float _404 = _399 * _395;
    float _405 = _393 * _399;
    float _410 = abs((_397 * 2.0) + (-1.0));
    vec4 _426 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_400 + _353) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_401 + _354) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _428 = _426.x;
    float _429 = _426.y;
    float _430 = _426.z;
    vec4 _431 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_404 + _353) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_405 + _354) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _458 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _459 = (cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _472 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_400 + _458) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_401 + _459) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _474 = _472.x;
    float _475 = _472.y;
    float _476 = _472.z;
    vec4 _477 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_404 + _458) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_405 + _459) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    vec4 _521 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[16u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, (((cbMtdParam._m0[17u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w));
    float _527 = (_521.x * 2.0) + (-1.0);
    float _528 = (_521.y * 2.0) + (-1.0);
    float _529 = dot(vec2(_527, _528), vec2(_527, _528));
    float _3594 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _545 = (_292 * (((cbMtdParam._m0[14u].z * _322) - _322) + _527)) + _322;
    float _546 = (_292 * (((cbMtdParam._m0[14u].z * _324) - _324) + _528)) + _324;
    float _547 = (_292 * (sqrt(1.0 - (isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0)))) - _330)) + _330;
    float _550 = fma(_547, _214 * NORMAL.x, fma(_546, _221 * TANGENT.x, (_207 * _199) * _545));
    float _553 = fma(_547, _214 * NORMAL.y, fma(_546, _221 * TANGENT.y, (_207 * _200) * _545));
    float _556 = fma(_547, _214 * NORMAL.z, fma(_546, _221 * TANGENT.z, (_207 * _201) * _545));
    float _560 = inversesqrt(dot(vec3(_550, _553, _556), vec3(_550, _553, _556)));
    float _561 = _560 * _550;
    float _562 = _560 * _553;
    float _563 = _560 * _556;
    float _3605 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _564 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
    float _3616 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    float _3627 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _3638 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _583 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _624 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _634 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _624);
    float _635 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _624);
    float _636 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _624);
    float _640 = inversesqrt(dot(vec3(_634, _635, _636), vec3(_634, _635, _636)));
    float _641 = _634 * _640;
    float _642 = _635 * _640;
    float _643 = _636 * _640;
    vec4 _648 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _650 = _648.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _807 = sqrt(((_634 * _634) + (_635 * _635)) + (_636 * _636));
        float _813 = (cbMatDynParam._m0[5u].x * _807) + cbMatDynParam._m0[5u].y;
        float _3649 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
        float _814 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
        float _818 = (cbMatDynParam._m0[5u].z * _807) + cbMatDynParam._m0[5u].w;
        float _3660 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0))) - _814)) + _814) < ((_650 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _662 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _663 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _683 = fma(_563, cbSceneParam._m0[5u].z, fma(_562, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _561));
    float _686 = fma(_563, cbSceneParam._m0[6u].z, fma(_562, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _561));
    float _689 = fma(_563, cbSceneParam._m0[7u].z, fma(_562, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _561));
    uint _702 = uint(roundEven(NORMAL.w)) * 13u;
    uint _703 = _702 + 9u;
    uint _704 = _703 + uint(cbMatDynParam._m0[0u].w);
    float _710 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0)))) * cbInstanceData._m0[_704].x;
    float _711 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0)))) * cbInstanceData._m0[_704].y;
    float _712 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0)))) * cbInstanceData._m0[_704].z;
    float _3671 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _713 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
    float _3682 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _714 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
    float _3693 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _715 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
    vec4 _724 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _662, cbSceneParam._m0[86u].y * _663));
    float _727 = _724.x * TEXCOORD_3.w;
    float _728 = dot(vec3(_561, _562, _563), vec3(_641, _642, _643));
    float _731 = _728 * 2.0;
    float _735 = (_731 * _561) - _641;
    float _736 = (_731 * _562) - _642;
    float _737 = (_731 * _563) - _643;
    float _741 = abs(dot(vec3(_641, _642, _643), vec3(_561, _562, _563)));
    float _3704 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _743 = sqrt(_564);
    float _756 = exp2((_743 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_743 * 3.0));
    float _788 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _792 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _796 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1125;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _851 = fma(_796, cbModelParam._m0[26u].z, fma(_792, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _788));
        float _855 = fma(_796, cbModelParam._m0[27u].z, fma(_792, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _788));
        float _859 = fma(_796, cbModelParam._m0[28u].z, fma(_792, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _788));
        float _883 = _788 + _561;
        float _884 = _792 + _562;
        float _885 = _796 + _563;
        float _895 = fma(_885, cbModelParam._m0[26u].z, fma(_884, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _883)) - _851;
        float _896 = fma(_885, cbModelParam._m0[27u].z, fma(_884, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _883)) - _855;
        float _897 = fma(_885, cbModelParam._m0[28u].z, fma(_884, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _883)) - _859;
        float _901 = inversesqrt(dot(vec3(_895, _896, _897), vec3(_895, _896, _897)));
        float _914 = ((_901 * _895) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_851 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _915 = ((_901 * _896) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_855 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _916 = ((_901 * _897) / cbModelParam._m0[34u].z) + ((((((_859 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _919 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_914, _915, _916), 0.0);
        vec4 _926 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_914, _915, _916), 0.0);
        vec4 _933 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_914, _915, _916), 0.0);
        vec4 _940 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_914, _915, _916), 0.0);
        float _953 = exp2((_919.w + (-0.5)) * 20.0) * 2.0;
        float _954 = _953 * (_919.x + (-0.5));
        float _955 = _953 * (_919.y + (-0.5));
        float _956 = _953 * (_919.z + (-0.5));
        float _963 = exp2((_926.w + (-0.5)) * 20.0) * 2.0;
        float _964 = _963 * (_926.x + (-0.5));
        float _965 = _963 * (_926.y + (-0.5));
        float _966 = _963 * (_926.z + (-0.5));
        float _973 = exp2((_933.w + (-0.5)) * 20.0) * 2.0;
        float _974 = _973 * (_933.x + (-0.5));
        float _975 = _973 * (_933.y + (-0.5));
        float _976 = _973 * (_933.z + (-0.5));
        float _983 = exp2((_940.w + (-0.5)) * 20.0) * 2.0;
        float _984 = _983 * (_940.x + (-0.5));
        float _985 = _983 * (_940.y + (-0.5));
        float _986 = _983 * (_940.z + (-0.5));
        float _987 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _988 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _989 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _990 = _954 * 0.5;
        float _991 = _964 * 0.5;
        float _992 = _974 * 0.5;
        float _993 = dot(vec3(_990, _991, _992), vec3(_990, _991, _992));
        float _998 = (_993 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_993);
        float _1007 = (dot(vec3(_561, _562, _563), vec3(_998 * _990, _998 * _991, _998 * _992)) + 1.0) * 0.5;
        float _3730 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1017 = sqrt(((_991 * _991) + (_990 * _990)) + (_992 * _992)) / (_987 + 9.9999997473787516355514526367188e-06);
        float _3741 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1018 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
        float _1019 = _1018 * 2.0;
        float _1023 = (1.0 - _1018) / (_1018 + 1.0);
        float _3752 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1024 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
        float _1033 = ((((1.0 - _1024) * (_1019 + 2.0)) * exp2(log2(isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))) * (_1019 + 1.0))) + _1024) * _987;
        float _1034 = _955 * 0.5;
        float _1035 = _965 * 0.5;
        float _1036 = _975 * 0.5;
        float _1037 = dot(vec3(_1034, _1035, _1036), vec3(_1034, _1035, _1036));
        float _1042 = (_1037 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1037);
        float _1050 = (dot(vec3(_561, _562, _563), vec3(_1042 * _1034, _1042 * _1035, _1042 * _1036)) + 1.0) * 0.5;
        float _3763 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1059 = sqrt(((_1035 * _1035) + (_1034 * _1034)) + (_1036 * _1036)) / (_988 + 9.9999997473787516355514526367188e-06);
        float _3774 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1060 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
        float _1061 = _1060 * 2.0;
        float _1065 = (1.0 - _1060) / (_1060 + 1.0);
        float _3785 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
        float _1075 = ((((1.0 - _1066) * (_1061 + 2.0)) * exp2(log2(isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0))) * (_1061 + 1.0))) + _1066) * _988;
        float _1076 = _956 * 0.5;
        float _1077 = _966 * 0.5;
        float _1078 = _976 * 0.5;
        float _1079 = dot(vec3(_1076, _1077, _1078), vec3(_1076, _1077, _1078));
        float _1084 = (_1079 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1079);
        float _1092 = (dot(vec3(_561, _562, _563), vec3(_1084 * _1076, _1084 * _1077, _1084 * _1078)) + 1.0) * 0.5;
        float _3796 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1101 = sqrt(((_1077 * _1077) + (_1076 * _1076)) + (_1078 * _1078)) / (_989 + 9.9999997473787516355514526367188e-06);
        float _3807 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1102 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
        float _1103 = _1102 * 2.0;
        float _1107 = (1.0 - _1102) / (_1102 + 1.0);
        float _3818 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1108 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
        float _1117 = ((((1.0 - _1108) * (_1103 + 2.0)) * exp2(log2(isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0))) * (_1103 + 1.0))) + _1108) * _989;
        _1125 = _956;
        _1127 = _955;
        _1128 = _954;
        _1129 = _966;
        _1130 = _965;
        _1131 = _964;
        _1132 = _976;
        _1133 = _975;
        _1134 = _974;
        _1135 = _989;
        _1136 = _988;
        _1137 = _987;
        _1138 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0)));
        _1139 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0)));
        _1140 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0)));
    }
    else
    {
        _1125 = _1126;
        _1127 = _1126;
        _1128 = _1126;
        _1129 = _1126;
        _1130 = _1126;
        _1131 = _1126;
        _1132 = _1126;
        _1133 = _1126;
        _1134 = _1126;
        _1135 = _1126;
        _1136 = _1126;
        _1137 = _1126;
        _1138 = 0.0;
        _1139 = 0.0;
        _1140 = 0.0;
    }
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1169 = fma(_796, cbModelParam._m0[30u].z, fma(_792, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _788));
        float _1173 = fma(_796, cbModelParam._m0[31u].z, fma(_792, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _788));
        float _1177 = fma(_796, cbModelParam._m0[32u].z, fma(_792, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _788));
        float _1200 = _788 + _561;
        float _1201 = _792 + _562;
        float _1202 = _796 + _563;
        float _1212 = fma(_1202, cbModelParam._m0[30u].z, fma(_1201, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1200)) - _1169;
        float _1213 = fma(_1202, cbModelParam._m0[31u].z, fma(_1201, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1200)) - _1173;
        float _1214 = fma(_1202, cbModelParam._m0[32u].z, fma(_1201, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1200)) - _1177;
        float _1218 = inversesqrt(dot(vec3(_1212, _1213, _1214), vec3(_1212, _1213, _1214)));
        float _1231 = ((_1218 * _1212) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1169 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1232 = ((_1218 * _1213) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1173 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1233 = ((_1218 * _1214) / cbModelParam._m0[35u].z) + ((((((_1177 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1235 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1231, _1232, _1233), 0.0);
        vec4 _1242 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1231, _1232, _1233), 0.0);
        vec4 _1249 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1231, _1232, _1233), 0.0);
        vec4 _1256 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1231, _1232, _1233), 0.0);
        float _1268 = exp2((_1235.w + (-0.5)) * 20.0) * 2.0;
        float _1269 = _1268 * (_1235.x + (-0.5));
        float _1270 = _1268 * (_1235.y + (-0.5));
        float _1271 = _1268 * (_1235.z + (-0.5));
        float _1278 = exp2((_1242.w + (-0.5)) * 20.0) * 2.0;
        float _1279 = _1278 * (_1242.x + (-0.5));
        float _1280 = _1278 * (_1242.y + (-0.5));
        float _1281 = _1278 * (_1242.z + (-0.5));
        float _1288 = exp2((_1249.w + (-0.5)) * 20.0) * 2.0;
        float _1289 = _1288 * (_1249.x + (-0.5));
        float _1290 = _1288 * (_1249.y + (-0.5));
        float _1291 = _1288 * (_1249.z + (-0.5));
        float _1298 = exp2((_1256.w + (-0.5)) * 20.0) * 2.0;
        float _1299 = _1298 * (_1256.x + (-0.5));
        float _1300 = _1298 * (_1256.y + (-0.5));
        float _1301 = _1298 * (_1256.z + (-0.5));
        float _1302 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1303 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1304 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1305 = _1269 * 0.5;
        float _1306 = _1279 * 0.5;
        float _1307 = _1289 * 0.5;
        float _1308 = dot(vec3(_1305, _1306, _1307), vec3(_1305, _1306, _1307));
        float _1313 = (_1308 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1308);
        float _1321 = (dot(vec3(_561, _562, _563), vec3(_1313 * _1305, _1313 * _1306, _1313 * _1307)) + 1.0) * 0.5;
        float _3859 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1330 = sqrt(((_1306 * _1306) + (_1305 * _1305)) + (_1307 * _1307)) / (_1302 + 9.9999997473787516355514526367188e-06);
        float _3870 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
        float _1332 = _1331 * 2.0;
        float _1336 = (1.0 - _1331) / (_1331 + 1.0);
        float _3881 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _1346 = ((((1.0 - _1337) * (_1332 + 2.0)) * exp2(log2(isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0))) * (_1332 + 1.0))) + _1337) * _1302;
        float _1347 = _1270 * 0.5;
        float _1348 = _1280 * 0.5;
        float _1349 = _1290 * 0.5;
        float _1350 = dot(vec3(_1347, _1348, _1349), vec3(_1347, _1348, _1349));
        float _1355 = (_1350 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1350);
        float _1363 = (dot(vec3(_561, _562, _563), vec3(_1355 * _1347, _1355 * _1348, _1355 * _1349)) + 1.0) * 0.5;
        float _3892 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1372 = sqrt(((_1348 * _1348) + (_1347 * _1347)) + (_1349 * _1349)) / (_1303 + 9.9999997473787516355514526367188e-06);
        float _3903 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
        float _1374 = _1373 * 2.0;
        float _1378 = (1.0 - _1373) / (_1373 + 1.0);
        float _3914 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _1388 = ((((1.0 - _1379) * (_1374 + 2.0)) * exp2(log2(isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0))) * (_1374 + 1.0))) + _1379) * _1303;
        float _1389 = _1271 * 0.5;
        float _1390 = _1281 * 0.5;
        float _1391 = _1291 * 0.5;
        float _1392 = dot(vec3(_1389, _1390, _1391), vec3(_1389, _1390, _1391));
        float _1397 = (_1392 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1392);
        float _1405 = (dot(vec3(_561, _562, _563), vec3(_1397 * _1389, _1397 * _1390, _1397 * _1391)) + 1.0) * 0.5;
        float _3925 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1414 = sqrt(((_1390 * _1390) + (_1389 * _1389)) + (_1391 * _1391)) / (_1304 + 9.9999997473787516355514526367188e-06);
        float _3936 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1415 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
        float _1416 = _1415 * 2.0;
        float _1420 = (1.0 - _1415) / (_1415 + 1.0);
        float _3947 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1421 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _1430 = ((((1.0 - _1421) * (_1416 + 2.0)) * exp2(log2(isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0))) * (_1416 + 1.0))) + _1421) * _1304;
        _1438 = _1271;
        _1439 = _1270;
        _1440 = _1269;
        _1441 = _1281;
        _1442 = _1280;
        _1443 = _1279;
        _1444 = _1291;
        _1445 = _1290;
        _1446 = _1289;
        _1447 = _1304;
        _1448 = _1303;
        _1449 = _1302;
        _1450 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0)));
        _1451 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0)));
        _1452 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0)));
    }
    else
    {
        _1438 = _1126;
        _1439 = _1126;
        _1440 = _1126;
        _1441 = _1126;
        _1442 = _1126;
        _1443 = _1126;
        _1444 = _1126;
        _1445 = _1126;
        _1446 = _1126;
        _1447 = _1126;
        _1448 = _1126;
        _1449 = _1126;
        _1450 = 0.0;
        _1451 = 0.0;
        _1452 = 0.0;
    }
    float _1462 = (cbModelParam._m0[1u].x * (_1450 - _1138)) + _1138;
    float _1463 = (cbModelParam._m0[1u].x * (_1451 - _1139)) + _1139;
    float _1464 = (cbModelParam._m0[1u].x * (_1452 - _1140)) + _1140;
    float _1485 = fma(_1464, cbSceneParam._m0[89u].z, fma(_1463, cbSceneParam._m0[89u].y, _1462 * cbSceneParam._m0[89u].x));
    float _1488 = fma(_1464, cbSceneParam._m0[90u].z, fma(_1463, cbSceneParam._m0[90u].y, _1462 * cbSceneParam._m0[90u].x));
    float _1491 = fma(_1464, cbSceneParam._m0[91u].z, fma(_1463, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1462));
    float _1506 = _735 * 0.5;
    float _1507 = _736 * 0.5;
    float _1508 = _737 * 0.5;
    float _1509 = dot(vec4(_1506, _1507, _1508, 1.0), vec4(_1440, _1443, _1446, _1449));
    float _1512 = dot(vec4(_1506, _1507, _1508, 1.0), vec4(_1439, _1442, _1445, _1448));
    float _1515 = dot(vec4(_1506, _1507, _1508, 1.0), vec4(_1438, _1441, _1444, _1447));
    float _1549;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1522 = dot(vec4(_1506, _1507, _1508, 1.0), vec4(_1125, _1129, _1132, _1135));
        float _1526 = dot(vec4(_1506, _1507, _1508, 1.0), vec4(_1127, _1130, _1133, _1136));
        float _1530 = dot(vec4(_1506, _1507, _1508, 1.0), vec4(_1128, _1131, _1134, _1137));
        float _1537 = dot(vec4(cbModelParam._m0[39u]), vec4(_1506, _1507, _1508, 1.0));
        _1549 = dot(vec3(isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0)), isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0)), isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1537) ? 0.0 : (isnan(0.0) ? _1537 : max(0.0, _1537))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1549 = 1.0;
    }
    float _1560;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1551 = dot(vec4(cbModelParam._m0[40u]), vec4(_1506, _1507, _1508, 1.0));
        _1560 = dot(vec3(isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0)), isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0)), isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1551) ? 0.0 : (isnan(0.0) ? _1551 : max(0.0, _1551))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1560 = 1.0;
    }
    float _1564 = (_1560 * cbModelParam._m0[1u].x) + (_1549 * (1.0 - cbModelParam._m0[1u].x));
    float _1574 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _564);
    float _1575 = isnan(_1574) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1574 : min(cbModelParam._m0[25u].z, _1574));
    float _1655;
    float _1657;
    float _1659;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1622 = fma(_796, cbModelParam._m0[13u].z, fma(_792, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _788)) + cbModelParam._m0[13u].w;
        float _1626 = fma(_796, cbModelParam._m0[14u].z, fma(_792, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _788)) + cbModelParam._m0[14u].w;
        float _1630 = fma(_796, cbModelParam._m0[15u].z, fma(_792, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _788)) + cbModelParam._m0[15u].w;
        float _1633 = fma(_737, cbModelParam._m0[13u].z, fma(_736, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _735));
        float _1636 = fma(_737, cbModelParam._m0[14u].z, fma(_736, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _735));
        float _1639 = fma(_737, cbModelParam._m0[15u].z, fma(_736, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _735));
        float _1667;
        if (_1633 > 0.0)
        {
            _1667 = abs((1.0 - _1622) / _1633);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1633 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1622 + 1.0) / _1633);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1667 = frontier_phi_17_15_ladder;
        }
        float _1890;
        if (_1636 > 0.0)
        {
            _1890 = abs((1.0 - _1626) / _1636);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1636 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1626 + 1.0) / _1636);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1890 = frontier_phi_26_22_ladder;
        }
        float _2136;
        if (_1639 > 0.0)
        {
            _2136 = abs((1.0 - _1630) / _1639);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1639 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1630 + 1.0) / _1639);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2136 = frontier_phi_38_33_ladder;
        }
        float _2138 = isnan(_1890) ? _1667 : (isnan(_1667) ? _1890 : min(_1667, _1890));
        float _2139 = isnan(_2136) ? _2138 : (isnan(_2138) ? _2136 : min(_2138, _2136));
        float _2143 = (_2139 * _1633) + _1622;
        float _2144 = (_2139 * _1636) + _1626;
        float _2145 = (_2139 * _1639) + _1630;
        float _2146 = _2139 * 9.9999997473787516355514526367188e-05;
        float _2148 = (-1.0) - _2146;
        float _2150 = _2146 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2145 > _2150) || ((_2145 < _2148) || ((_2144 > _2150) || ((_2144 < _2148) || ((_2143 < _2148) || (_2143 > _2150))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2269 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2145, cbModelParam._m0[9u].z, fma(_2144, cbModelParam._m0[9u].y, _2143 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2145, cbModelParam._m0[10u].z, fma(_2144, cbModelParam._m0[10u].y, _2143 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2145, cbModelParam._m0[11u].z, fma(_2144, cbModelParam._m0[11u].y, _2143 * cbModelParam._m0[11u].x))), _1575);
            frontier_phi_16_38_ladder = _2269.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2269.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2269.x * cbModelParam._m0[1u].y;
        }
        _1655 = frontier_phi_16_38_ladder_2;
        _1657 = frontier_phi_16_38_ladder_1;
        _1659 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1643 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_735, _736, _737), _1575);
        _1655 = _1643.x * cbModelParam._m0[1u].y;
        _1657 = _1643.y * cbModelParam._m0[1u].y;
        _1659 = _1643.z * cbModelParam._m0[1u].y;
    }
    float _1663 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _564);
    float _1664 = isnan(_1663) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1663 : min(cbModelParam._m0[25u].w, _1663));
    float _1754;
    float _1756;
    float _1758;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1718 = fma(_796, cbModelParam._m0[21u].z, fma(_792, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _788)) + cbModelParam._m0[21u].w;
        float _1722 = fma(_796, cbModelParam._m0[22u].z, fma(_792, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _788)) + cbModelParam._m0[22u].w;
        float _1726 = fma(_796, cbModelParam._m0[23u].z, fma(_792, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _788)) + cbModelParam._m0[23u].w;
        float _1729 = fma(_737, cbModelParam._m0[21u].z, fma(_736, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _735));
        float _1732 = fma(_737, cbModelParam._m0[22u].z, fma(_736, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _735));
        float _1735 = fma(_737, cbModelParam._m0[23u].z, fma(_736, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _735));
        float _1895;
        if (_1729 > 0.0)
        {
            _1895 = abs((1.0 - _1718) / _1729);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1729 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1718 + 1.0) / _1729);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1895 = frontier_phi_28_24_ladder;
        }
        float _2163;
        if (_1732 > 0.0)
        {
            _2163 = abs((1.0 - _1722) / _1732);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1732 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1722 + 1.0) / _1732);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2163 = frontier_phi_40_35_ladder;
        }
        float _2368;
        if (_1735 > 0.0)
        {
            _2368 = abs((1.0 - _1726) / _1735);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1735 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1726 + 1.0) / _1735);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2368 = frontier_phi_49_46_ladder;
        }
        float _2370 = isnan(_2163) ? _1895 : (isnan(_1895) ? _2163 : min(_1895, _2163));
        float _2371 = isnan(_2368) ? _2370 : (isnan(_2370) ? _2368 : min(_2370, _2368));
        float _2375 = (_2371 * _1729) + _1718;
        float _2376 = (_2371 * _1732) + _1722;
        float _2377 = (_2371 * _1735) + _1726;
        float _2378 = _2371 * 9.9999997473787516355514526367188e-05;
        float _2379 = (-1.0) - _2378;
        float _2381 = _2378 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2377 > _2381) || ((_2377 < _2379) || ((_2376 > _2381) || ((_2376 < _2379) || ((_2375 < _2379) || (_2375 > _2381))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2605 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2377, cbModelParam._m0[17u].z, fma(_2376, cbModelParam._m0[17u].y, _2375 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2377, cbModelParam._m0[18u].z, fma(_2376, cbModelParam._m0[18u].y, _2375 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2377, cbModelParam._m0[19u].z, fma(_2376, cbModelParam._m0[19u].y, _2375 * cbModelParam._m0[19u].x))), _1664);
            frontier_phi_25_49_ladder = _2605.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2605.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2605.x * cbModelParam._m0[1u].z;
        }
        _1754 = frontier_phi_25_49_ladder_2;
        _1756 = frontier_phi_25_49_ladder_1;
        _1758 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1738 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_735, _736, _737), _1664);
        _1754 = _1738.x * cbModelParam._m0[1u].z;
        _1756 = _1738.y * cbModelParam._m0[1u].z;
        _1758 = _1738.z * cbModelParam._m0[1u].z;
    }
    float _1770 = ((((1.0 - _756) * ((_743 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_756 * _743)) * _727;
    float _1771 = _1770 * ((cbModelParam._m0[1u].w * (_1754 - _1655)) + _1655);
    float _1772 = _1770 * ((cbModelParam._m0[1u].w * (_1756 - _1657)) + _1657);
    float _1773 = _1770 * ((cbModelParam._m0[1u].w * (_1758 - _1659)) + _1659);
    float _1776 = fma(_1773, cbSceneParam._m0[89u].z, fma(_1772, cbSceneParam._m0[89u].y, _1771 * cbSceneParam._m0[89u].x));
    float _1779 = fma(_1773, cbSceneParam._m0[90u].z, fma(_1772, cbSceneParam._m0[90u].y, _1771 * cbSceneParam._m0[90u].x));
    float _1782 = fma(_1773, cbSceneParam._m0[91u].z, fma(_1772, cbSceneParam._m0[91u].y, _1771 * cbSceneParam._m0[91u].x));
    vec4 _1790 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_662, _663));
    float _1792 = _1790.w;
    float _1804 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1792);
    float _1805 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1792);
    float _1806 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1792);
    uvec4 _1810 = floatBitsToUint(cbInstanceData._m0[_702 + 5u]);
    uint _1812 = _1810.x * 14u;
    uint _1813 = _1812 + 13u;
    float _1820 = _727 + (-1.0);
    float _1825 = (cbLight._m0[_1813].x * _1820) + 1.0;
    float _1826 = (cbLight._m0[_1813].y * _1820) + 1.0;
    float _1827 = (cbLight._m0[_1813].z * _1820) + 1.0;
    float _1828 = (cbLight._m0[_1813].w * _1820) + 1.0;
    uint _1829 = _1812 + 5u;
    float _1835 = isnan(1.0) ? _1826 : (isnan(_1826) ? 1.0 : min(_1826, 1.0));
    uint _1839 = _1812 + 4u;
    float _1849 = isnan(1.0) ? _1825 : (isnan(_1825) ? 1.0 : min(_1825, 1.0));
    uint _1853 = _1812 | 1u;
    float _1864 = dot(vec3(cbLight._m0[_1812].xyz), vec3(_561, _562, _563));
    float _1867 = dot(vec3(cbLight._m0[_1853].xyz), vec3(_561, _562, _563));
    float _4083 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
    float _4094 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
    float _1872 = (isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0))) * 0.3183098733425140380859375;
    float _1874 = (isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * 0.3183098733425140380859375;
    float _1881 = ((cbLight._m0[_1829].x * _1835) * _1874) + (((cbLight._m0[_1839].x * _1804) * _1849) * _1872);
    float _1882 = ((_1835 * cbLight._m0[_1829].y) * _1874) + (((cbLight._m0[_1839].y * _1805) * _1849) * _1872);
    float _1883 = ((_1835 * cbLight._m0[_1829].z) * _1874) + (((cbLight._m0[_1839].z * _1806) * _1849) * _1872);
    uvec4 _1887 = floatBitsToUint(cbLight._m0[_1812 + 12u]);
    bool _1889 = _1887.x == 0u;
    float _1900;
    float _1902;
    float _1904;
    if (_1889)
    {
        _1900 = _1881;
        _1902 = _1882;
        _1904 = _1883;
    }
    else
    {
        uint _1908 = _1812 + 6u;
        float _1924 = (dot(vec3(cbLight._m0[_1812 + 2u].xyz), vec3(_561, _562, _563)) * 0.5) + 0.5;
        float _1925 = _1924 * _1924;
        float _4105 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
        float _1926 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _1927 = isnan(1.0) ? _1827 : (isnan(_1827) ? 1.0 : min(_1827, 1.0));
        _1900 = (((cbLight._m0[_1908].x * 0.3183098733425140380859375) * _1926) * _1927) + _1881;
        _1902 = (((cbLight._m0[_1908].y * 0.3183098733425140380859375) * _1926) * _1927) + _1882;
        _1904 = (((cbLight._m0[_1908].z * 0.3183098733425140380859375) * _1926) * _1927) + _1883;
    }
    bool _1907 = _1887.y == 0u;
    float _1945;
    float _1947;
    float _1949;
    if (_1907)
    {
        _1945 = _1900;
        _1947 = _1902;
        _1949 = _1904;
    }
    else
    {
        uint _2107 = _1812 + 7u;
        float _2123 = (dot(vec3(cbLight._m0[_1812 + 3u].xyz), vec3(_561, _562, _563)) * 0.5) + 0.5;
        float _2124 = _2123 * _2123;
        float _4121 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
        float _2125 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _2126 = isnan(1.0) ? _1828 : (isnan(_1828) ? 1.0 : min(_1828, 1.0));
        _1945 = (((cbLight._m0[_2107].x * 0.3183098733425140380859375) * _2125) * _2126) + _1900;
        _1947 = (((cbLight._m0[_2107].y * 0.3183098733425140380859375) * _2125) * _2126) + _1902;
        _1949 = (((cbLight._m0[_2107].z * 0.3183098733425140380859375) * _2125) * _2126) + _1904;
    }
    uint _1952 = _1812 + 8u;
    float _1965 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1812].w)) * _564) * 0.949999988079071044921875);
    float _1966 = _1965 * _1965;
    float _1967 = cbLight._m0[_1812].x + _641;
    float _1968 = cbLight._m0[_1812].y + _642;
    float _1969 = cbLight._m0[_1812].z + _643;
    float _1973 = inversesqrt(dot(vec3(_1967, _1968, _1969), vec3(_1967, _1968, _1969)));
    float _1974 = _1973 * _1967;
    float _1975 = _1973 * _1968;
    float _1976 = _1973 * _1969;
    float _1977 = dot(vec3(_561, _562, _563), vec3(cbLight._m0[_1812].xyz));
    float _4137 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
    float _1980 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
    float _4148 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _1981 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
    float _1982 = dot(vec3(_561, _562, _563), vec3(_1974, _1975, _1976));
    float _4159 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
    float _1985 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
    float _1986 = dot(vec3(cbLight._m0[_1812].xyz), vec3(_1974, _1975, _1976));
    float _4170 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
    float _1990 = _1966 * _1966;
    float _1994 = ((_1985 * _1985) * (_1990 + (-1.0))) + 1.0;
    float _2005 = (exp2(log2(1.0 - (isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2006 = 1.0 - _1966;
    float _2017 = (0.5 / (((_1981 * ((_1980 * _2006) + _1966)) + 9.9999999392252902907785028219223e-09) + (((_1981 * _2006) + _1966) * _1980))) * _1980;
    float _4181 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
    float _2019 = (isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * (_1990 / ((_1994 * _1994) * 3.141590118408203125));
    uint _2033 = _1812 + 9u;
    float _2044 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1853].w)) * _564) * 0.949999988079071044921875);
    float _2045 = _2044 * _2044;
    float _2046 = cbLight._m0[_1853].x + _641;
    float _2047 = cbLight._m0[_1853].y + _642;
    float _2048 = cbLight._m0[_1853].z + _643;
    float _2052 = inversesqrt(dot(vec3(_2046, _2047, _2048), vec3(_2046, _2047, _2048)));
    float _2053 = _2052 * _2046;
    float _2054 = _2052 * _2047;
    float _2055 = _2052 * _2048;
    float _2056 = dot(vec3(_561, _562, _563), vec3(cbLight._m0[_1853].xyz));
    float _4192 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
    float _2059 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
    float _2060 = dot(vec3(_561, _562, _563), vec3(_2053, _2054, _2055));
    float _4203 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
    float _2063 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
    float _2064 = dot(vec3(cbLight._m0[_1853].xyz), vec3(_2053, _2054, _2055));
    float _4214 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
    float _2068 = _2045 * _2045;
    float _2072 = ((_2063 * _2063) * (_2068 + (-1.0))) + 1.0;
    float _2081 = (exp2(log2(1.0 - (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2082 = 1.0 - _2045;
    float _2092 = (0.5 / (((_1981 * ((_2059 * _2082) + _2045)) + 9.9999999392252902907785028219223e-09) + (((_1981 * _2082) + _2045) * _2059))) * _2059;
    float _4225 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
    float _2094 = (isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0))) * (_2068 / ((_2072 * _2072) * 3.141590118408203125));
    float _2104 = (((_2081 * cbLight._m0[_2033].x) * _2094) * _1835) + ((((cbLight._m0[_1952].x * _1804) * _2005) * _2019) * _1849);
    float _2105 = (((_2081 * cbLight._m0[_2033].y) * _2094) * _1835) + ((((cbLight._m0[_1952].y * _1805) * _2005) * _2019) * _1849);
    float _2106 = (((_2081 * cbLight._m0[_2033].z) * _2094) * _1835) + ((((cbLight._m0[_1952].z * _1806) * _2005) * _2019) * _1849);
    float _2168;
    float _2170;
    float _2172;
    if (_1889)
    {
        _2168 = _2104;
        _2170 = _2105;
        _2172 = _2106;
    }
    else
    {
        uint _2174 = _1812 + 2u;
        uint _2178 = _1812 + 10u;
        float _2192 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2174].w)) * _564) * 0.949999988079071044921875);
        float _2193 = _2192 * _2192;
        float _2194 = cbLight._m0[_2174].x + _641;
        float _2195 = cbLight._m0[_2174].y + _642;
        float _2196 = cbLight._m0[_2174].z + _643;
        float _2200 = inversesqrt(dot(vec3(_2194, _2195, _2196), vec3(_2194, _2195, _2196)));
        float _2201 = _2200 * _2194;
        float _2202 = _2200 * _2195;
        float _2203 = _2200 * _2196;
        float _2204 = dot(vec3(_561, _562, _563), vec3(cbLight._m0[_2174].xyz));
        float _4236 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
        float _2207 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
        float _2208 = dot(vec3(_561, _562, _563), vec3(_2201, _2202, _2203));
        float _4247 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
        float _2211 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _2212 = dot(vec3(cbLight._m0[_2174].xyz), vec3(_2201, _2202, _2203));
        float _4258 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
        float _2216 = _2193 * _2193;
        float _2220 = ((_2211 * _2211) * (_2216 + (-1.0))) + 1.0;
        float _2229 = (exp2(log2(1.0 - (isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2230 = 1.0 - _2193;
        float _2240 = (0.5 / (((_1981 * ((_2207 * _2230) + _2193)) + 9.9999999392252902907785028219223e-09) + (((_1981 * _2230) + _2193) * _2207))) * _2207;
        float _4269 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
        float _2242 = (isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * (_2216 / ((_2220 * _2220) * 3.141590118408203125));
        float _2243 = isnan(1.0) ? _1827 : (isnan(_1827) ? 1.0 : min(_1827, 1.0));
        _2168 = (((_2229 * cbLight._m0[_2178].x) * _2242) * _2243) + _2104;
        _2170 = (((_2229 * cbLight._m0[_2178].y) * _2242) * _2243) + _2105;
        _2172 = (((_2229 * cbLight._m0[_2178].z) * _2242) * _2243) + _2106;
    }
    float _2278;
    float _2280;
    float _2282;
    if (_1907)
    {
        _2278 = _2168;
        _2280 = _2170;
        _2282 = _2172;
    }
    else
    {
        uint _2289 = _1812 + 3u;
        uint _2293 = _1812 + 11u;
        float _2307 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2289].w)) * _564) * 0.949999988079071044921875);
        float _2308 = _2307 * _2307;
        float _2309 = cbLight._m0[_2289].x + _641;
        float _2310 = cbLight._m0[_2289].y + _642;
        float _2311 = cbLight._m0[_2289].z + _643;
        float _2315 = inversesqrt(dot(vec3(_2309, _2310, _2311), vec3(_2309, _2310, _2311)));
        float _2316 = _2315 * _2309;
        float _2317 = _2315 * _2310;
        float _2318 = _2315 * _2311;
        float _2319 = dot(vec3(_561, _562, _563), vec3(cbLight._m0[_2289].xyz));
        float _4285 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
        float _2322 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
        float _2323 = dot(vec3(_561, _562, _563), vec3(_2316, _2317, _2318));
        float _4296 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
        float _2326 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
        float _2327 = dot(vec3(cbLight._m0[_2289].xyz), vec3(_2316, _2317, _2318));
        float _4307 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
        float _2331 = _2308 * _2308;
        float _2335 = ((_2326 * _2326) * (_2331 + (-1.0))) + 1.0;
        float _2344 = (exp2(log2(1.0 - (isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2345 = 1.0 - _2308;
        float _2355 = (0.5 / (((_1981 * ((_2322 * _2345) + _2308)) + 9.9999999392252902907785028219223e-09) + (((_1981 * _2345) + _2308) * _2322))) * _2322;
        float _4318 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
        float _2357 = (isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) * (_2331 / ((_2335 * _2335) * 3.141590118408203125));
        float _2358 = isnan(1.0) ? _1828 : (isnan(_1828) ? 1.0 : min(_1828, 1.0));
        _2278 = (((_2344 * cbLight._m0[_2293].x) * _2357) * _2358) + _2168;
        _2280 = (((_2344 * cbLight._m0[_2293].y) * _2357) * _2358) + _2170;
        _2282 = (((_2344 * cbLight._m0[_2293].z) * _2357) * _2358) + _2172;
    }
    float _2493;
    float _2495;
    float _2497;
    float _2499;
    float _2501;
    float _2503;
    if (_1810.y == 0u)
    {
        float _2433 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2434 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2433;
        float _2435 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2433;
        float _2436 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2433;
        uvec4 _2448 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2449 = _2448.x;
        uint _2460 = uint((float(_2448.y) * floor(float(uint(cbSceneParam._m0[85u].y * _663) / _2449))) + floor(float(uint(cbSceneParam._m0[85u].x * _662) / _2449)));
        float _2470 = (log2(_2436 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2471 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
        uint _2474 = uint(isnan(14.0) ? _2471 : (isnan(_2471) ? 14.0 : min(_2471, 14.0)));
        uvec4 _2479 = texelFetch(g_lightClusterGridBuffer, int(((_2474 << 2u) + (_2460 << 6u)) >> 2u));
        uint _2480 = _2479.x;
        uint _2481 = _2448.z;
        float _2610;
        float _2612;
        float _2614;
        float _2616;
        float _2618;
        float _2620;
        if (((((1u << ((_2481 >> 4u) & 15u)) + 4294967295u) & _2480) == 0u) || ((_2481 & 240u) == 0u))
        {
            _2610 = 0.0;
            _2612 = 0.0;
            _2614 = 0.0;
            _2616 = 0.0;
            _2618 = 0.0;
            _2620 = 0.0;
        }
        else
        {
            float _2611;
            float _2613;
            float _2615;
            float _2617;
            float _2619;
            float _2621;
            float _2771 = 0.0;
            float _2772 = 0.0;
            float _2773 = 0.0;
            float _2774 = 0.0;
            float _2775 = 0.0;
            float _2776 = 0.0;
            uint _2777 = 0u;
            uint _2786;
            bool _2787;
            for (;;)
            {
                _2786 = texelFetch(g_lightClassification, int((((_2474 << 5u) + (_2460 << 9u)) + (_2777 << 2u)) >> 2u)).x;
                _2787 = _2786 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2787)
                {
                    frontier_phi_66_pred = _2771;
                    frontier_phi_66_pred_1 = _2776;
                    frontier_phi_66_pred_2 = _2775;
                    frontier_phi_66_pred_3 = _2774;
                    frontier_phi_66_pred_4 = _2773;
                    frontier_phi_66_pred_5 = _2772;
                }
                else
                {
                    float _2916;
                    float _2917;
                    float _2918;
                    float _2919;
                    float _2920;
                    float _2921;
                    uint _2922;
                    _2916 = _2771;
                    _2917 = _2772;
                    _2918 = _2773;
                    _2919 = _2774;
                    _2920 = _2775;
                    _2921 = _2776;
                    _2922 = _2786;
                    float _2843;
                    float _2844;
                    float _2845;
                    float _2846;
                    float _2847;
                    float _2848;
                    for (;;)
                    {
                        uint _2926 = uint(findLSB(_2922)) + (_2777 << 5u);
                        uint _2923 = (_2922 + 4294967295u) & _2922;
                        uint _2928 = _2926 * 48u;
                        vec4 _2942 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2928)).x, texelFetch(g_PointLightRenderingBuffer, int(_2928 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2928 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2928 + 3u)).x));
                        uint _2948 = (_2926 * 48u) + 4u;
                        vec4 _2961 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2948)).x, texelFetch(g_PointLightRenderingBuffer, int(_2948 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2948 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2948 + 3u)).x));
                        uint _2967 = (_2926 * 48u) + 8u;
                        vec3 _2978 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2967)).x, texelFetch(g_PointLightRenderingBuffer, int(_2967 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2967 + 2u)).x));
                        float _2982 = _2942.x - _2434;
                        float _2983 = _2942.y - _2435;
                        float _2984 = _2942.z - _2436;
                        float _2985 = dot(vec3(_2982, _2983, _2984), vec3(_2982, _2983, _2984));
                        float _2988 = inversesqrt(_2985);
                        float _2989 = _2988 * _2982;
                        float _2990 = _2988 * _2983;
                        float _2991 = _2988 * _2984;
                        float _2992 = dot(vec3(_683, _686, _689), vec3(_2989, _2990, _2991));
                        float _2997 = 1.0 - (_2985 * _2942.w);
                        float _4344 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
                        float _2998 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
                        float _2999 = sqrt(_2985) * _2961.w;
                        float _3002 = 1.39999997615814208984375 / (_2999 + 1.39999997615814208984375);
                        float _3003 = _3002 * _3002;
                        float _3006 = ((1.0 - _3003) * _2992) + _3003;
                        float _3009 = _2999 * _2999;
                        float _3013 = ((isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0))) * _2998) / ((_3009 * 0.699999988079071044921875) + 1.0);
                        float _3017 = (-0.0) - _2434;
                        float _3018 = (-0.0) - _2435;
                        float _3019 = (-0.0) - _2436;
                        float _3023 = inversesqrt(dot(vec3(_3017, _3018, _3019), vec3(_3017, _3018, _3019)));
                        float _3024 = _3023 * _3017;
                        float _3025 = _3023 * _3018;
                        float _3026 = _3023 * _3019;
                        float _3034 = exp2(log2(1.0 / ((_3009 * 3.5) + 5.0)) * 0.25);
                        float _3035 = 1.0 - _743;
                        float _3042 = sqrt(1.0 - ((1.0 - (_3035 * _3035)) * (1.0 - (_3034 * _3034))));
                        float _3043 = _3042 * _3042;
                        float _3044 = _3043 * _3043;
                        float _3045 = _3024 + _2989;
                        float _3046 = _3025 + _2990;
                        float _3047 = _3026 + _2991;
                        float _3051 = inversesqrt(dot(vec3(_3045, _3046, _3047), vec3(_3045, _3046, _3047)));
                        float _3055 = dot(vec3(_683, _686, _689), vec3(_3024, _3025, _3026));
                        float _4360 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
                        float _3058 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
                        float _3059 = dot(vec3(_683, _686, _689), vec3(_3051 * _3045, _3051 * _3046, _3051 * _3047));
                        float _4371 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0));
                        float _3062 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
                        float _3066 = ((_3062 * _3062) * (_3044 + (-1.0))) + 1.0;
                        float _3067 = _3002 * _3043;
                        float _3068 = _3067 * _3067;
                        float _3071 = ((1.0 - _3068) * _2992) + _3068;
                        float _4382 = isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0));
                        float _3072 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
                        float _3073 = 1.0 - _3043;
                        float _3083 = (0.5 / (((_3072 * ((_3058 * _3073) + _3043)) + 9.9999999392252902907785028219223e-09) + (((_3072 * _3073) + _3043) * _3058))) * _3072;
                        float _4393 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0));
                        float _3094 = (((_3044 * 3.1415927410125732421875) * (isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0)))) / ((_3066 * _3066) * ((_3009 * 2.1991131305694580078125) + 3.141590118408203125))) * _2998;
                        _2846 = (_3013 * _2961.x) + _2919;
                        _2847 = (_3013 * _2961.y) + _2920;
                        _2848 = (_3013 * _2961.z) + _2921;
                        _2843 = (_3094 * _2978.x) + _2916;
                        _2844 = (_3094 * _2978.y) + _2917;
                        _2845 = (_3094 * _2978.z) + _2918;
                        if (_2923 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2916 = _2843;
                            _2917 = _2844;
                            _2918 = _2845;
                            _2919 = _2846;
                            _2920 = _2847;
                            _2921 = _2848;
                            _2922 = _2923;
                        }
                    }
                    frontier_phi_66_pred = _2843;
                    frontier_phi_66_pred_1 = _2848;
                    frontier_phi_66_pred_2 = _2847;
                    frontier_phi_66_pred_3 = _2846;
                    frontier_phi_66_pred_4 = _2845;
                    frontier_phi_66_pred_5 = _2844;
                }
                _2611 = frontier_phi_66_pred;
                _2621 = frontier_phi_66_pred_1;
                _2619 = frontier_phi_66_pred_2;
                _2617 = frontier_phi_66_pred_3;
                _2615 = frontier_phi_66_pred_4;
                _2613 = frontier_phi_66_pred_5;
                uint _2778 = _2777 + 1u;
                if (_2778 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2771 = _2611;
                    _2772 = _2613;
                    _2773 = _2615;
                    _2774 = _2617;
                    _2775 = _2619;
                    _2776 = _2621;
                    _2777 = _2778;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2610 = _2611;
            _2612 = _2613;
            _2614 = _2615;
            _2616 = _2617;
            _2618 = _2619;
            _2620 = _2621;
        }
        uvec4 _2624 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2625 = _2624.z;
        uint _2627 = (_2625 >> 8u) & 15u;
        float _2739;
        float _2741;
        float _2743;
        float _2745;
        float _2747;
        float _2749;
        if (((4294967295u << _2627) & _2480) == 0u)
        {
            _2739 = _2610;
            _2741 = _2612;
            _2743 = _2614;
            _2745 = _2616;
            _2747 = _2618;
            _2749 = _2620;
        }
        else
        {
            float _2764 = inversesqrt(dot(vec3(_2434, _2435, _2436), vec3(_2434, _2435, _2436)));
            float _2765 = _2764 * _2434;
            float _2766 = _2764 * _2435;
            float _2767 = _2764 * _2436;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2627 < ((_2625 >> 12u) & 15u))
            {
                float _2740;
                float _2742;
                float _2744;
                float _2746;
                float _2748;
                float _2750;
                float _2899 = _2610;
                float _2900 = _2612;
                float _2901 = _2614;
                float _2902 = _2616;
                float _2903 = _2618;
                float _2904 = _2620;
                uint _2905 = _2627;
                uint _2914;
                bool _2915;
                for (;;)
                {
                    _2914 = texelFetch(g_lightClassification, int((((_2474 << 5u) + (_2460 << 9u)) + (_2905 << 2u)) >> 2u)).x;
                    _2915 = _2914 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2915)
                    {
                        frontier_phi_77_pred = _2904;
                        frontier_phi_77_pred_1 = _2903;
                        frontier_phi_77_pred_2 = _2902;
                        frontier_phi_77_pred_3 = _2901;
                        frontier_phi_77_pred_4 = _2900;
                        frontier_phi_77_pred_5 = _2899;
                    }
                    else
                    {
                        float _3108;
                        float _3109;
                        float _3110;
                        float _3111;
                        float _3112;
                        float _3113;
                        float _3402;
                        float _3403;
                        float _3404;
                        float _3405;
                        float _3406;
                        float _3407;
                        float _3121 = _2899;
                        float _3122 = _2900;
                        float _3123 = _2901;
                        float _3124 = _2902;
                        float _3125 = _2903;
                        float _3126 = _2904;
                        uint _3127 = _2914;
                        uint _3128;
                        vec4 _3153;
                        float _3154;
                        vec4 _3169;
                        vec3 _3181;
                        vec4 _3196;
                        vec4 _3211;
                        float _3258;
                        bool _3259;
                        for (;;)
                        {
                            uint _3138 = ((_2905 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3127));
                            _3128 = (_3127 + 4294967295u) & _3127;
                            uint _3140 = _3138 * 40u;
                            _3153 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3140)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 3u)).x));
                            _3154 = _3153.w;
                            uint _3156 = (_3138 * 40u) + 4u;
                            _3169 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3156)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 3u)).x));
                            uint _3171 = (_3138 * 40u) + 8u;
                            _3181 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3171)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 2u)).x));
                            uint _3183 = (_3138 * 40u) + 16u;
                            _3196 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3183)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 3u)).x));
                            uint _3198 = (_3138 * 40u) + 20u;
                            _3211 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3198)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 3u)).x));
                            uint _3214 = (_3138 * 40u) + 24u;
                            vec4 _3227 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3214)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 3u)).x));
                            uint _3233 = (_3138 * 40u) + 28u;
                            vec4 _3246 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3233)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 3u)).x));
                            _3258 = fma(_2436, _3246.z, fma(_2435, _3246.y, _3246.x * _2434)) + _3246.w;
                            _3259 = !((fma(_2436, _3227.z, fma(_2435, _3227.y, _3227.x * _2434)) + _3227.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3259)
                            {
                                float _3286 = _3153.x - _2434;
                                float _3287 = _3153.y - _2435;
                                float _3288 = _3153.z - _2436;
                                float _3289 = dot(vec3(_3286, _3287, _3288), vec3(_3286, _3287, _3288));
                                float _3292 = inversesqrt(_3289);
                                float _3293 = _3292 * _3286;
                                float _3294 = _3292 * _3287;
                                float _3295 = _3292 * _3288;
                                float _3299 = 1.0 - (_3289 / (_3154 * _3154));
                                float _4404 = isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0));
                                float _3300 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
                                float _3304 = sqrt(_3289) * _3169.w;
                                float _3306 = 1.39999997615814208984375 / (_3304 + 1.39999997615814208984375);
                                float _3307 = _3306 * _3306;
                                float _3310 = ((1.0 - _3307) * dot(vec3(_3293, _3294, _3295), vec3(_683, _686, _689))) + _3307;
                                float _3313 = _3304 * _3304;
                                float _3317 = (fma(_2436, _3196.z, fma(_2435, _3196.y, _3196.x * _2434)) + _3196.w) / _3258;
                                float _3318 = (fma(_2436, _3211.z, fma(_2435, _3211.y, _3211.x * _2434)) + _3211.w) / _3258;
                                float _3322 = 1.0 - dot(vec2(_3317, _3318), vec2(_3317, _3318));
                                float _4420 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0));
                                float _3323 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
                                float _3324 = _3323 * (((isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0))) * _3300) / ((_3313 * 0.699999988079071044921875) + 1.0));
                                float _3336 = exp2(log2(1.0 / ((_3313 * 3.5) + 5.0)) * 0.25);
                                float _3337 = 1.0 - _743;
                                float _3344 = sqrt(1.0 - ((1.0 - (_3337 * _3337)) * (1.0 - (_3336 * _3336))));
                                float _3345 = _3344 * _3344;
                                float _3346 = _3345 * _3345;
                                float _3347 = _3293 - _2765;
                                float _3348 = _3294 - _2766;
                                float _3349 = _3295 - _2767;
                                float _3353 = inversesqrt(dot(vec3(_3347, _3348, _3349), vec3(_3347, _3348, _3349)));
                                float _3357 = dot(vec3(_683, _686, _689), vec3((-0.0) - _2765, (-0.0) - _2766, (-0.0) - _2767));
                                float _4431 = isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0));
                                float _3360 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
                                float _3361 = dot(vec3(_683, _686, _689), vec3(_3353 * _3347, _3353 * _3348, _3353 * _3349));
                                float _4442 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                                float _3364 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
                                float _3368 = ((_3364 * _3364) * (_3346 + (-1.0))) + 1.0;
                                float _3369 = _3306 * _3345;
                                float _3370 = _3369 * _3369;
                                float _3376 = ((1.0 - _3370) * dot(vec3(_683, _686, _689), vec3(_3293, _3294, _3295))) + _3370;
                                float _4453 = isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0));
                                float _3377 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
                                float _3378 = 1.0 - _3345;
                                float _3388 = (0.5 / (((_3377 * ((_3360 * _3378) + _3345)) + 9.9999999392252902907785028219223e-09) + (((_3377 * _3378) + _3345) * _3360))) * _3377;
                                float _4464 = isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0));
                                float _3398 = (_3323 * _3300) * (((_3346 * 3.1415927410125732421875) * (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0)))) / ((_3368 * _3368) * ((_3313 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3324 * _3169.y;
                                frontier_phi_83_pred_1 = _3324 * _3169.x;
                                frontier_phi_83_pred_2 = _3398 * _3181.z;
                                frontier_phi_83_pred_3 = _3398 * _3181.y;
                                frontier_phi_83_pred_4 = _3398 * _3181.x;
                                frontier_phi_83_pred_5 = _3324 * _3169.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3406 = frontier_phi_83_pred;
                            _3405 = frontier_phi_83_pred_1;
                            _3404 = frontier_phi_83_pred_2;
                            _3403 = frontier_phi_83_pred_3;
                            _3402 = frontier_phi_83_pred_4;
                            _3407 = frontier_phi_83_pred_5;
                            _3111 = _3405 + _3124;
                            _3112 = _3406 + _3125;
                            _3113 = _3407 + _3126;
                            _3108 = _3402 + _3121;
                            _3109 = _3403 + _3122;
                            _3110 = _3404 + _3123;
                            if (_3128 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3121 = _3108;
                                _3122 = _3109;
                                _3123 = _3110;
                                _3124 = _3111;
                                _3125 = _3112;
                                _3126 = _3113;
                                _3127 = _3128;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3113;
                        frontier_phi_77_pred_1 = _3112;
                        frontier_phi_77_pred_2 = _3111;
                        frontier_phi_77_pred_3 = _3110;
                        frontier_phi_77_pred_4 = _3109;
                        frontier_phi_77_pred_5 = _3108;
                    }
                    _2750 = frontier_phi_77_pred;
                    _2748 = frontier_phi_77_pred_1;
                    _2746 = frontier_phi_77_pred_2;
                    _2744 = frontier_phi_77_pred_3;
                    _2742 = frontier_phi_77_pred_4;
                    _2740 = frontier_phi_77_pred_5;
                    uint _2906 = _2905 + 1u;
                    if (_2906 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2899 = _2740;
                        _2900 = _2742;
                        _2901 = _2744;
                        _2902 = _2746;
                        _2903 = _2748;
                        _2904 = _2750;
                        _2905 = _2906;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2744;
                frontier_phi_58_59_ladder_1 = _2750;
                frontier_phi_58_59_ladder_2 = _2748;
                frontier_phi_58_59_ladder_3 = _2746;
                frontier_phi_58_59_ladder_4 = _2742;
                frontier_phi_58_59_ladder_5 = _2740;
            }
            else
            {
                frontier_phi_58_59_ladder = _2614;
                frontier_phi_58_59_ladder_1 = _2620;
                frontier_phi_58_59_ladder_2 = _2618;
                frontier_phi_58_59_ladder_3 = _2616;
                frontier_phi_58_59_ladder_4 = _2612;
                frontier_phi_58_59_ladder_5 = _2610;
            }
            _2739 = frontier_phi_58_59_ladder_5;
            _2741 = frontier_phi_58_59_ladder_4;
            _2743 = frontier_phi_58_59_ladder;
            _2745 = frontier_phi_58_59_ladder_3;
            _2747 = frontier_phi_58_59_ladder_2;
            _2749 = frontier_phi_58_59_ladder_1;
        }
        float _2754 = isnan(1.0) ? _727 : (isnan(_727) ? 1.0 : min(_727, 1.0));
        _2493 = (_2754 * _2745) + _1945;
        _2495 = (_2754 * _2747) + _1947;
        _2497 = (_2754 * _2749) + _1949;
        _2499 = ((_2739 * 0.039999999105930328369140625) * _2754) + _2278;
        _2501 = ((_2741 * 0.039999999105930328369140625) * _2754) + _2280;
        _2503 = ((_2743 * 0.039999999105930328369140625) * _2754) + _2282;
    }
    else
    {
        _2493 = _1945;
        _2495 = _1947;
        _2497 = _1949;
        _2499 = _2278;
        _2501 = _2280;
        _2503 = _2282;
    }
    uint _2509 = _703 + uint(cbMatDynParam._m0[0u].w);
    float _2515 = ((((((_477.x - _474) * _410) + _474) * cbMtdParam._m0[13u].x) + ((((_431.x - _428) * _410) + _428) * cbMtdParam._m0[11u].x)) * _292) * cbInstanceData._m0[_2509].x;
    float _2516 = ((((((_477.y - _475) * _410) + _475) * cbMtdParam._m0[13u].y) + ((((_431.y - _429) * _410) + _429) * cbMtdParam._m0[11u].y)) * _292) * cbInstanceData._m0[_2509].y;
    float _2517 = ((((((_477.z - _476) * _410) + _476) * cbMtdParam._m0[13u].z) + ((((_431.z - _430) * _410) + _430) * cbMtdParam._m0[11u].z)) * _292) * cbInstanceData._m0[_2509].z;
    float _4480 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _4491 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _4502 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _2534 = (((isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0))) * (_2493 + ((isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0))) * _727))) + ((_2499 + ((isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0))) * _1564)) * cbPerFrame._m0[3u].x)) + _2515;
    float _2536 = (_2516 + ((_2501 + ((isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0))) * _1564)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0))) * (_2495 + ((isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0))) * _727)));
    float _2538 = (_2517 + ((_2503 + ((isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0))) * _1564)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0))) * (_2497 + ((isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0))) * _727)));
    float _2539 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
    float _2540 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
    float _2541 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
    float _2547 = cbMtdParam._m0[2u].x * _2515;
    float _2548 = cbMtdParam._m0[2u].y * _2516;
    float _2549 = cbMtdParam._m0[2u].z * _2517;
    float _4528 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2551 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
    uint _2552 = _702 + 6u;
    float _2560 = _662 / cbSceneParam._m0[86u].x;
    float _2561 = _663 / cbSceneParam._m0[86u].y;
    vec4 _2575 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2560, _2561, (log2((isnan(cbSceneParam._m0[77u].w) ? _583 : (isnan(_583) ? cbSceneParam._m0[77u].w : min(_583, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2577 = _2575.x;
    float _2578 = _2575.y;
    float _2579 = _2575.z;
    float _2580 = _2575.w;
    float _2672;
    float _2674;
    float _2676;
    float _2678;
    if (_583 > cbSceneParam._m0[78u].w)
    {
        float _2635 = isnan(_583) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _583 : min(cbSceneParam._m0[80u].w, _583));
        float _2636 = _2635 / _583;
        float _2647 = _2636 * _634;
        float _2648 = _635 * _2636;
        float _2649 = (-0.0) - _2648;
        float _2650 = _2636 * _636;
        float _2652 = (cbSceneParam._m0[77u].w * _2649) / _2635;
        float _2653 = _2652 + cbSceneParam._m0[79u].w;
        float _2654 = cbSceneParam._m0[79u].w - _2648;
        float _2660 = sqrt(((_2647 * _2647) + (_2648 * _2648)) + (_2650 * _2650));
        float _2663 = (1.0 - (cbSceneParam._m0[77u].w / _2635)) * _2660;
        float _2668 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2670 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2856;
        if (abs((_2649 - _2652) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2856 = ((((_2653 > 0.0) ? exp2(_2668 * _2653) : (2.0 - exp2(_2670 * _2653))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2663;
        }
        else
        {
            float _2800 = 1.0 / cbSceneParam._m0[80u].x;
            float _2801 = isnan(_2654) ? _2653 : (isnan(_2653) ? _2654 : max(_2653, _2654));
            float _2802 = isnan(_2654) ? _2653 : (isnan(_2653) ? _2654 : min(_2653, _2654));
            float _2811 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : min(_2801, 0.0));
            float _2812 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : min(_2802, 0.0));
            _2856 = ((abs(_2660 / _2649) * cbSceneParam._m0[80u].y) * ((((_2811 - _2812) * 2.0) - ((exp2(_2668 * (isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0)))) - exp2(_2668 * (isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0))))) * _2800)) - ((exp2(_2670 * _2811) - exp2(_2670 * _2812)) * _2800))) + (_2663 * cbSceneParam._m0[80u].z);
        }
        vec4 _2858 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2560, _2561, 1.0), 0.0);
        float _2867 = exp2((_2856 * (-1.44269502162933349609375)) * (1.0 - _2858.w));
        float _2868 = log2(_2867);
        float _2884 = log2(_2580);
        _2672 = (exp2(_2884 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2868 * cbSceneParam._m0[78u].x)) * _2858.x) / cbSceneParam._m0[78u].x)) + _2577;
        _2674 = (exp2(_2884 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2868 * cbSceneParam._m0[78u].y)) * _2858.y) / cbSceneParam._m0[78u].y)) + _2578;
        _2676 = (exp2(_2884 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2868 * cbSceneParam._m0[78u].z)) * _2858.z) / cbSceneParam._m0[78u].z)) + _2579;
        _2678 = _2867 * _2580;
    }
    else
    {
        _2672 = _2577;
        _2674 = _2578;
        _2676 = _2579;
        _2678 = _2580;
    }
    bool _2894;
    vec4 _2688;
    vec4 _2710;
    float _2712;
    float _2716;
    float _2717;
    float _2718;
    float _2721;
    float _2724;
    float _2727;
    float _2728;
    bool _2738;
    for (;;)
    {
        _2688 = cbMatDynParam._m0[0u];
        float _2690 = roundEven(_2688.y);
        bool _2691 = _2690 == 3.0;
        float _2692 = log2(_2678);
        float _2696 = exp2(_2692 * cbSceneParam._m0[78u].x);
        float _2697 = exp2(_2692 * cbSceneParam._m0[78u].y);
        float _2698 = exp2(_2692 * cbSceneParam._m0[78u].z);
        float _2699 = _2696 * _2539;
        float _2700 = _2697 * _2540;
        float _2701 = _2698 * _2541;
        float _2708 = _650 + (-0.5);
        _2710 = cbMtdParam._m0[1u];
        _2712 = _2710.y * _2708;
        float _2715 = (_2690 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2716 = _2715 * (_2691 ? _2699 : (_2699 + (cbSceneParam._m0[72u].w * _2672)));
        _2717 = _2715 * (_2691 ? _2700 : (_2700 + (cbSceneParam._m0[72u].w * _2674)));
        _2718 = _2715 * (_2691 ? _2701 : (_2701 + (cbSceneParam._m0[72u].w * _2676)));
        _2721 = ((_2547 * _2551) * _2696) * _2715;
        _2724 = ((_2548 * _2551) * _2697) * _2715;
        _2727 = ((_2549 * _2551) * _2698) * _2715;
        _2728 = _2708 * 0.999000012874603271484375;
        _2738 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2738)
        {
            if ((cbInstanceData._m0[_702 + 7u].x + _2728) < 0.5)
            {
                _2894 = true;
                break;
            }
        }
        uint _2835 = _703 + uint(_2688.w);
        if ((cbInstanceData._m0[_2835].w < 1.0) && ((cbInstanceData._m0[_2835].w + _2728) < 0.5))
        {
            _2894 = true;
            break;
        }
        if ((_2712 + 1.0) < _2710.x)
        {
            _2894 = true;
            break;
        }
        _2894 = false;
        break;
    }
    float _3099;
    if (_2894)
    {
        discard_state = true;
        _3099 = 0.0;
    }
    else
    {
        _3099 = cbInstanceData._m0[_2552].w;
    }
    SV_Target.x = _2716;
    SV_Target.y = _2717;
    SV_Target.z = _2718;
    SV_Target.w = _3099;
    SV_Target_1.x = _2721;
    SV_Target_1.y = _2724;
    SV_Target_1.z = _2727;
    SV_Target_1.w = cbInstanceData._m0[_2552].w;
    discard_exit();
}


