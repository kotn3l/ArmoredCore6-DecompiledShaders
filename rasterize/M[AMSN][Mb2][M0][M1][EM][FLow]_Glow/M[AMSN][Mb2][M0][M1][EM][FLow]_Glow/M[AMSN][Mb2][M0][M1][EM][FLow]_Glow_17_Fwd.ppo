#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1171;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _201 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _202 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _203 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _209 = inversesqrt(dot(vec3(_201, _202, _203), vec3(_201, _202, _203)));
    float _216 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _245 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _251 = _245.x * cbMtdParam._m0[9u].x;
    float _252 = _245.y * cbMtdParam._m0[9u].y;
    float _253 = _245.z * cbMtdParam._m0[9u].z;
    float _291 = TEXCOORD_9.x - ((cbMtdParam._m0[16u].y * (1.0 - TEXCOORD_9.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w)).x + 0.00999999977648258209228515625));
    float _293 = _291 * (cbMtdParam._m0[16u].z + 1.0);
    float _3537 = isnan(0.0) ? _293 : (isnan(_293) ? 0.0 : max(_293, 0.0));
    float _294 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
    float _302 = ((((cbMtdParam._m0[12u].x - _251) * TEXCOORD_9.x) * cbMtdParam._m0[16u].x) * _294) + _251;
    float _303 = ((((cbMtdParam._m0[12u].y - _252) * TEXCOORD_9.y) * cbMtdParam._m0[16u].x) * _294) + _252;
    float _304 = (((cbMtdParam._m0[16u].x * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _253)) * _294) + _253;
    vec4 _317 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[6u].w));
    float _319 = _317.x;
    vec4 _331 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _335 = _331.z;
    float _339 = (_331.x * 2.0) + (-1.0);
    float _341 = (_331.y * 2.0) + (-1.0);
    float _342 = dot(vec2(_339, _341), vec2(_339, _341));
    float _3548 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _347 = sqrt(1.0 - (isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0))));
    float _353 = _291 * (cbMtdParam._m0[16u].y + 1.0);
    float _3559 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _357 = ((cbMtdParam._m0[15u].y - _335) * (isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0)))) + _335;
    float _370 = (cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _371 = (cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _398 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * ((cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * ((cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[10u].w));
    float _403 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[15u].w;
    float _410 = ((_398.y * 0.5) + (-0.25)) * cbMtdParam._m0[15u].z;
    float _412 = (-0.0) - (cbMtdParam._m0[15u].z * ((_398.x * 0.5) + (-0.25)));
    float _414 = fract(_403);
    float _416 = fract(_403 + 0.5);
    float _417 = _414 * _412;
    float _418 = _410 * _414;
    float _421 = _416 * _412;
    float _422 = _410 * _416;
    float _427 = abs((_414 * 2.0) + (-1.0));
    vec4 _443 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_417 + _370) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_418 + _371) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _445 = _443.x;
    float _446 = _443.y;
    float _447 = _443.z;
    vec4 _448 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_421 + _370) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_422 + _371) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _475 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _476 = (cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _489 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_417 + _475) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_418 + _476) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _491 = _489.x;
    float _492 = _489.y;
    float _493 = _489.z;
    vec4 _494 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_421 + _475) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_422 + _476) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _546 = (TEXCOORD_6.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_6.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_5, SS_WrapLinear), vec2((((cbMtdParam._m0[18u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((cbMtdParam._m0[18u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].x + 1.0);
    float _3570 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _547 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
    float _548 = _547 * (((((_494.x - _491) * _427) + _491) * cbMtdParam._m0[13u].x) + ((((_448.x - _445) * _427) + _445) * cbMtdParam._m0[11u].x));
    float _549 = _547 * (((((_494.y - _492) * _427) + _492) * cbMtdParam._m0[13u].y) + ((((_448.y - _446) * _427) + _446) * cbMtdParam._m0[11u].y));
    float _550 = _547 * (((((_494.z - _493) * _427) + _493) * cbMtdParam._m0[13u].z) + ((((_448.z - _447) * _427) + _447) * cbMtdParam._m0[11u].z));
    vec4 _562 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[9u].w));
    float _564 = _562.x;
    vec4 _589 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[16u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, (((cbMtdParam._m0[17u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w));
    float _595 = (_589.x * 2.0) + (-1.0);
    float _596 = (_589.y * 2.0) + (-1.0);
    float _597 = dot(vec2(_595, _596), vec2(_595, _596));
    float _3581 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _613 = (_294 * (((cbMtdParam._m0[14u].z * _339) - _339) + _595)) + _339;
    float _614 = (_294 * (((cbMtdParam._m0[14u].z * _341) - _341) + _596)) + _341;
    float _615 = (_294 * (sqrt(1.0 - (isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0)))) - _347)) + _347;
    float _618 = fma(_615, _216 * NORMAL.x, fma(_614, _223 * TANGENT.x, (_209 * _201) * _613));
    float _621 = fma(_615, _216 * NORMAL.y, fma(_614, _223 * TANGENT.y, (_209 * _202) * _613));
    float _624 = fma(_615, _216 * NORMAL.z, fma(_614, _223 * TANGENT.z, (_209 * _203) * _613));
    float _628 = inversesqrt(dot(vec3(_618, _621, _624), vec3(_618, _621, _624)));
    float _629 = _628 * _618;
    float _630 = _628 * _621;
    float _631 = _628 * _624;
    float _3592 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    float _632 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
    float _3603 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _3614 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _3625 = isnan(0.0) ? _304 : (isnan(_304) ? 0.0 : max(_304, 0.0));
    float _3636 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _636 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
    float _652 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _692 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _702 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _692);
    float _703 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _692);
    float _704 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _692);
    float _708 = inversesqrt(dot(vec3(_702, _703, _704), vec3(_702, _703, _704)));
    float _709 = _702 * _708;
    float _710 = _703 * _708;
    float _711 = _704 * _708;
    float _717 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _718 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _738 = fma(_631, cbSceneParam._m0[5u].z, fma(_630, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _629));
    float _741 = fma(_631, cbSceneParam._m0[6u].z, fma(_630, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _629));
    float _744 = fma(_631, cbSceneParam._m0[7u].z, fma(_630, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _629));
    uint _757 = uint(roundEven(NORMAL.w)) * 13u;
    uint _758 = _757 + 9u;
    uint _759 = _758 + uint(cbMatDynParam._m0[0u].w);
    float _765 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0)))) * cbInstanceData._m0[_759].x;
    float _766 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0)))) * cbInstanceData._m0[_759].y;
    float _767 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0)))) * cbInstanceData._m0[_759].z;
    float _3647 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _768 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
    float _3658 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _769 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
    float _3669 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _770 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
    float _771 = 1.0 - _636;
    float _772 = _768 * _771;
    float _773 = _769 * _771;
    float _774 = _770 * _771;
    float _779 = (_768 + (-0.039999999105930328369140625)) * _636;
    float _780 = (_769 + (-0.039999999105930328369140625)) * _636;
    float _781 = (_770 + (-0.039999999105930328369140625)) * _636;
    float _782 = _779 + 0.039999999105930328369140625;
    float _784 = _780 + 0.039999999105930328369140625;
    float _785 = _781 + 0.039999999105930328369140625;
    vec4 _794 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _717, cbSceneParam._m0[86u].y * _718));
    float _797 = _794.x * TEXCOORD_3.w;
    float _798 = dot(vec3(_629, _630, _631), vec3(_709, _710, _711));
    float _801 = _798 * 2.0;
    float _805 = (_801 * _629) - _709;
    float _806 = (_801 * _630) - _710;
    float _807 = (_801 * _631) - _711;
    float _811 = abs(dot(vec3(_709, _710, _711), vec3(_629, _630, _631)));
    float _3680 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _813 = sqrt(_632);
    float _826 = exp2((_813 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_813 * 3.0));
    float _832 = (1.0 - _826) * ((_813 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _833 = _826 * _813;
    float _861 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _865 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _869 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1170;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _896 = fma(_869, cbModelParam._m0[26u].z, fma(_865, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _861));
        float _900 = fma(_869, cbModelParam._m0[27u].z, fma(_865, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _861));
        float _904 = fma(_869, cbModelParam._m0[28u].z, fma(_865, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _861));
        float _928 = _861 + _629;
        float _929 = _865 + _630;
        float _930 = _869 + _631;
        float _940 = fma(_930, cbModelParam._m0[26u].z, fma(_929, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _928)) - _896;
        float _941 = fma(_930, cbModelParam._m0[27u].z, fma(_929, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _928)) - _900;
        float _942 = fma(_930, cbModelParam._m0[28u].z, fma(_929, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _928)) - _904;
        float _946 = inversesqrt(dot(vec3(_940, _941, _942), vec3(_940, _941, _942)));
        float _959 = ((_946 * _940) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_896 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _960 = ((_946 * _941) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_900 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _961 = ((_946 * _942) / cbModelParam._m0[34u].z) + ((((((_904 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _964 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        vec4 _971 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        vec4 _978 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        vec4 _985 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        float _998 = exp2((_964.w + (-0.5)) * 20.0) * 2.0;
        float _999 = _998 * (_964.x + (-0.5));
        float _1000 = _998 * (_964.y + (-0.5));
        float _1001 = _998 * (_964.z + (-0.5));
        float _1008 = exp2((_971.w + (-0.5)) * 20.0) * 2.0;
        float _1009 = _1008 * (_971.x + (-0.5));
        float _1010 = _1008 * (_971.y + (-0.5));
        float _1011 = _1008 * (_971.z + (-0.5));
        float _1018 = exp2((_978.w + (-0.5)) * 20.0) * 2.0;
        float _1019 = _1018 * (_978.x + (-0.5));
        float _1020 = _1018 * (_978.y + (-0.5));
        float _1021 = _1018 * (_978.z + (-0.5));
        float _1028 = exp2((_985.w + (-0.5)) * 20.0) * 2.0;
        float _1029 = _1028 * (_985.x + (-0.5));
        float _1030 = _1028 * (_985.y + (-0.5));
        float _1031 = _1028 * (_985.z + (-0.5));
        float _1032 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1033 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1034 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1035 = _999 * 0.5;
        float _1036 = _1009 * 0.5;
        float _1037 = _1019 * 0.5;
        float _1038 = dot(vec3(_1035, _1036, _1037), vec3(_1035, _1036, _1037));
        float _1043 = (_1038 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1038);
        float _1052 = (dot(vec3(_629, _630, _631), vec3(_1043 * _1035, _1043 * _1036, _1043 * _1037)) + 1.0) * 0.5;
        float _3706 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1062 = sqrt(((_1036 * _1036) + (_1035 * _1035)) + (_1037 * _1037)) / (_1032 + 9.9999997473787516355514526367188e-06);
        float _3717 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1063 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
        float _1064 = _1063 * 2.0;
        float _1068 = (1.0 - _1063) / (_1063 + 1.0);
        float _3728 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1069 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
        float _1078 = ((((1.0 - _1069) * (_1064 + 2.0)) * exp2(log2(isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0))) * (_1064 + 1.0))) + _1069) * _1032;
        float _1079 = _1000 * 0.5;
        float _1080 = _1010 * 0.5;
        float _1081 = _1020 * 0.5;
        float _1082 = dot(vec3(_1079, _1080, _1081), vec3(_1079, _1080, _1081));
        float _1087 = (_1082 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1082);
        float _1095 = (dot(vec3(_629, _630, _631), vec3(_1087 * _1079, _1087 * _1080, _1087 * _1081)) + 1.0) * 0.5;
        float _3739 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1104 = sqrt(((_1080 * _1080) + (_1079 * _1079)) + (_1081 * _1081)) / (_1033 + 9.9999997473787516355514526367188e-06);
        float _3750 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
        float _1106 = _1105 * 2.0;
        float _1110 = (1.0 - _1105) / (_1105 + 1.0);
        float _3761 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
        float _1120 = ((((1.0 - _1111) * (_1106 + 2.0)) * exp2(log2(isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0))) * (_1106 + 1.0))) + _1111) * _1033;
        float _1121 = _1001 * 0.5;
        float _1122 = _1011 * 0.5;
        float _1123 = _1021 * 0.5;
        float _1124 = dot(vec3(_1121, _1122, _1123), vec3(_1121, _1122, _1123));
        float _1129 = (_1124 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1124);
        float _1137 = (dot(vec3(_629, _630, _631), vec3(_1129 * _1121, _1129 * _1122, _1129 * _1123)) + 1.0) * 0.5;
        float _3772 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1146 = sqrt(((_1122 * _1122) + (_1121 * _1121)) + (_1123 * _1123)) / (_1034 + 9.9999997473787516355514526367188e-06);
        float _3783 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
        float _1148 = _1147 * 2.0;
        float _1152 = (1.0 - _1147) / (_1147 + 1.0);
        float _3794 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
        float _1162 = ((((1.0 - _1153) * (_1148 + 2.0)) * exp2(log2(isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0))) * (_1148 + 1.0))) + _1153) * _1034;
        _1170 = _1001;
        _1172 = _1000;
        _1173 = _999;
        _1174 = _1011;
        _1175 = _1010;
        _1176 = _1009;
        _1177 = _1021;
        _1178 = _1020;
        _1179 = _1019;
        _1180 = _1034;
        _1181 = _1033;
        _1182 = _1032;
        _1183 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0)));
        _1184 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0)));
        _1185 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0)));
    }
    else
    {
        _1170 = _1171;
        _1172 = _1171;
        _1173 = _1171;
        _1174 = _1171;
        _1175 = _1171;
        _1176 = _1171;
        _1177 = _1171;
        _1178 = _1171;
        _1179 = _1171;
        _1180 = _1171;
        _1181 = _1171;
        _1182 = _1171;
        _1183 = 0.0;
        _1184 = 0.0;
        _1185 = 0.0;
    }
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1211 = fma(_869, cbModelParam._m0[30u].z, fma(_865, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _861));
        float _1215 = fma(_869, cbModelParam._m0[31u].z, fma(_865, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _861));
        float _1219 = fma(_869, cbModelParam._m0[32u].z, fma(_865, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _861));
        float _1242 = _861 + _629;
        float _1243 = _865 + _630;
        float _1244 = _869 + _631;
        float _1254 = fma(_1244, cbModelParam._m0[30u].z, fma(_1243, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1242)) - _1211;
        float _1255 = fma(_1244, cbModelParam._m0[31u].z, fma(_1243, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1242)) - _1215;
        float _1256 = fma(_1244, cbModelParam._m0[32u].z, fma(_1243, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1242)) - _1219;
        float _1260 = inversesqrt(dot(vec3(_1254, _1255, _1256), vec3(_1254, _1255, _1256)));
        float _1273 = ((_1260 * _1254) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1211 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1274 = ((_1260 * _1255) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1215 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1275 = ((_1260 * _1256) / cbModelParam._m0[35u].z) + ((((((_1219 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1277 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1273, _1274, _1275), 0.0);
        vec4 _1284 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1273, _1274, _1275), 0.0);
        vec4 _1291 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1273, _1274, _1275), 0.0);
        vec4 _1298 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1273, _1274, _1275), 0.0);
        float _1310 = exp2((_1277.w + (-0.5)) * 20.0) * 2.0;
        float _1311 = _1310 * (_1277.x + (-0.5));
        float _1312 = _1310 * (_1277.y + (-0.5));
        float _1313 = _1310 * (_1277.z + (-0.5));
        float _1320 = exp2((_1284.w + (-0.5)) * 20.0) * 2.0;
        float _1321 = _1320 * (_1284.x + (-0.5));
        float _1322 = _1320 * (_1284.y + (-0.5));
        float _1323 = _1320 * (_1284.z + (-0.5));
        float _1330 = exp2((_1291.w + (-0.5)) * 20.0) * 2.0;
        float _1331 = _1330 * (_1291.x + (-0.5));
        float _1332 = _1330 * (_1291.y + (-0.5));
        float _1333 = _1330 * (_1291.z + (-0.5));
        float _1340 = exp2((_1298.w + (-0.5)) * 20.0) * 2.0;
        float _1341 = _1340 * (_1298.x + (-0.5));
        float _1342 = _1340 * (_1298.y + (-0.5));
        float _1343 = _1340 * (_1298.z + (-0.5));
        float _1344 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1345 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1346 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1347 = _1311 * 0.5;
        float _1348 = _1321 * 0.5;
        float _1349 = _1331 * 0.5;
        float _1350 = dot(vec3(_1347, _1348, _1349), vec3(_1347, _1348, _1349));
        float _1355 = (_1350 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1350);
        float _1363 = (dot(vec3(_629, _630, _631), vec3(_1355 * _1347, _1355 * _1348, _1355 * _1349)) + 1.0) * 0.5;
        float _3835 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1372 = sqrt(((_1348 * _1348) + (_1347 * _1347)) + (_1349 * _1349)) / (_1344 + 9.9999997473787516355514526367188e-06);
        float _3846 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
        float _1374 = _1373 * 2.0;
        float _1378 = (1.0 - _1373) / (_1373 + 1.0);
        float _3857 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
        float _1388 = ((((1.0 - _1379) * (_1374 + 2.0)) * exp2(log2(isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0))) * (_1374 + 1.0))) + _1379) * _1344;
        float _1389 = _1312 * 0.5;
        float _1390 = _1322 * 0.5;
        float _1391 = _1332 * 0.5;
        float _1392 = dot(vec3(_1389, _1390, _1391), vec3(_1389, _1390, _1391));
        float _1397 = (_1392 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1392);
        float _1405 = (dot(vec3(_629, _630, _631), vec3(_1397 * _1389, _1397 * _1390, _1397 * _1391)) + 1.0) * 0.5;
        float _3868 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1414 = sqrt(((_1390 * _1390) + (_1389 * _1389)) + (_1391 * _1391)) / (_1345 + 9.9999997473787516355514526367188e-06);
        float _3879 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1415 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
        float _1416 = _1415 * 2.0;
        float _1420 = (1.0 - _1415) / (_1415 + 1.0);
        float _3890 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1421 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
        float _1430 = ((((1.0 - _1421) * (_1416 + 2.0)) * exp2(log2(isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0))) * (_1416 + 1.0))) + _1421) * _1345;
        float _1431 = _1313 * 0.5;
        float _1432 = _1323 * 0.5;
        float _1433 = _1333 * 0.5;
        float _1434 = dot(vec3(_1431, _1432, _1433), vec3(_1431, _1432, _1433));
        float _1439 = (_1434 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1434);
        float _1447 = (dot(vec3(_629, _630, _631), vec3(_1439 * _1431, _1439 * _1432, _1439 * _1433)) + 1.0) * 0.5;
        float _3901 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1456 = sqrt(((_1432 * _1432) + (_1431 * _1431)) + (_1433 * _1433)) / (_1346 + 9.9999997473787516355514526367188e-06);
        float _3912 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1457 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _1458 = _1457 * 2.0;
        float _1462 = (1.0 - _1457) / (_1457 + 1.0);
        float _3923 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1463 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _1472 = ((((1.0 - _1463) * (_1458 + 2.0)) * exp2(log2(isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0))) * (_1458 + 1.0))) + _1463) * _1346;
        _1480 = _1313;
        _1481 = _1312;
        _1482 = _1311;
        _1483 = _1323;
        _1484 = _1322;
        _1485 = _1321;
        _1486 = _1333;
        _1487 = _1332;
        _1488 = _1331;
        _1489 = _1346;
        _1490 = _1345;
        _1491 = _1344;
        _1492 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0)));
        _1493 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0)));
        _1494 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0)));
    }
    else
    {
        _1480 = _1171;
        _1481 = _1171;
        _1482 = _1171;
        _1483 = _1171;
        _1484 = _1171;
        _1485 = _1171;
        _1486 = _1171;
        _1487 = _1171;
        _1488 = _1171;
        _1489 = _1171;
        _1490 = _1171;
        _1491 = _1171;
        _1492 = 0.0;
        _1493 = 0.0;
        _1494 = 0.0;
    }
    float _1504 = (cbModelParam._m0[1u].x * (_1492 - _1183)) + _1183;
    float _1505 = (cbModelParam._m0[1u].x * (_1493 - _1184)) + _1184;
    float _1506 = (cbModelParam._m0[1u].x * (_1494 - _1185)) + _1185;
    float _1527 = fma(_1506, cbSceneParam._m0[89u].z, fma(_1505, cbSceneParam._m0[89u].y, _1504 * cbSceneParam._m0[89u].x));
    float _1530 = fma(_1506, cbSceneParam._m0[90u].z, fma(_1505, cbSceneParam._m0[90u].y, _1504 * cbSceneParam._m0[90u].x));
    float _1533 = fma(_1506, cbSceneParam._m0[91u].z, fma(_1505, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1504));
    float _1548 = _805 * 0.5;
    float _1549 = _806 * 0.5;
    float _1550 = _807 * 0.5;
    float _1551 = dot(vec4(_1548, _1549, _1550, 1.0), vec4(_1482, _1485, _1488, _1491));
    float _1554 = dot(vec4(_1548, _1549, _1550, 1.0), vec4(_1481, _1484, _1487, _1490));
    float _1557 = dot(vec4(_1548, _1549, _1550, 1.0), vec4(_1480, _1483, _1486, _1489));
    float _1591;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1564 = dot(vec4(_1548, _1549, _1550, 1.0), vec4(_1170, _1174, _1177, _1180));
        float _1568 = dot(vec4(_1548, _1549, _1550, 1.0), vec4(_1172, _1175, _1178, _1181));
        float _1572 = dot(vec4(_1548, _1549, _1550, 1.0), vec4(_1173, _1176, _1179, _1182));
        float _1579 = dot(vec4(cbModelParam._m0[39u]), vec4(_1548, _1549, _1550, 1.0));
        _1591 = dot(vec3(isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0)), isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0)), isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1579) ? 0.0 : (isnan(0.0) ? _1579 : max(0.0, _1579))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1591 = 1.0;
    }
    float _1602;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1593 = dot(vec4(cbModelParam._m0[40u]), vec4(_1548, _1549, _1550, 1.0));
        _1602 = dot(vec3(isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0)), isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0)), isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1593) ? 0.0 : (isnan(0.0) ? _1593 : max(0.0, _1593))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1602 = 1.0;
    }
    float _1606 = (_1602 * cbModelParam._m0[1u].x) + (_1591 * (1.0 - cbModelParam._m0[1u].x));
    float _1616 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _632);
    float _1617 = isnan(_1616) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1616 : min(cbModelParam._m0[25u].z, _1616));
    float _1697;
    float _1699;
    float _1701;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1664 = fma(_869, cbModelParam._m0[13u].z, fma(_865, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _861)) + cbModelParam._m0[13u].w;
        float _1668 = fma(_869, cbModelParam._m0[14u].z, fma(_865, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _861)) + cbModelParam._m0[14u].w;
        float _1672 = fma(_869, cbModelParam._m0[15u].z, fma(_865, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _861)) + cbModelParam._m0[15u].w;
        float _1675 = fma(_807, cbModelParam._m0[13u].z, fma(_806, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _805));
        float _1678 = fma(_807, cbModelParam._m0[14u].z, fma(_806, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _805));
        float _1681 = fma(_807, cbModelParam._m0[15u].z, fma(_806, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _805));
        float _1709;
        if (_1675 > 0.0)
        {
            _1709 = abs((1.0 - _1664) / _1675);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1675 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1664 + 1.0) / _1675);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1709 = frontier_phi_14_12_ladder;
        }
        float _1913;
        if (_1678 > 0.0)
        {
            _1913 = abs((1.0 - _1668) / _1678);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1678 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1668 + 1.0) / _1678);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1913 = frontier_phi_23_19_ladder;
        }
        float _2167;
        if (_1681 > 0.0)
        {
            _2167 = abs((1.0 - _1672) / _1681);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1681 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1672 + 1.0) / _1681);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2167 = frontier_phi_35_30_ladder;
        }
        float _2169 = isnan(_1913) ? _1709 : (isnan(_1709) ? _1913 : min(_1709, _1913));
        float _2170 = isnan(_2167) ? _2169 : (isnan(_2169) ? _2167 : min(_2169, _2167));
        float _2174 = (_2170 * _1675) + _1664;
        float _2175 = (_2170 * _1678) + _1668;
        float _2176 = (_2170 * _1681) + _1672;
        float _2177 = _2170 * 9.9999997473787516355514526367188e-05;
        float _2179 = (-1.0) - _2177;
        float _2181 = _2177 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2176 > _2181) || ((_2176 < _2179) || ((_2175 > _2181) || ((_2175 < _2179) || ((_2174 < _2179) || (_2174 > _2181))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2304 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2176, cbModelParam._m0[9u].z, fma(_2175, cbModelParam._m0[9u].y, _2174 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2176, cbModelParam._m0[10u].z, fma(_2175, cbModelParam._m0[10u].y, _2174 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2176, cbModelParam._m0[11u].z, fma(_2175, cbModelParam._m0[11u].y, _2174 * cbModelParam._m0[11u].x))), _1617);
            frontier_phi_13_35_ladder = _2304.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2304.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2304.x * cbModelParam._m0[1u].y;
        }
        _1697 = frontier_phi_13_35_ladder_2;
        _1699 = frontier_phi_13_35_ladder_1;
        _1701 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1685 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_805, _806, _807), _1617);
        _1697 = _1685.x * cbModelParam._m0[1u].y;
        _1699 = _1685.y * cbModelParam._m0[1u].y;
        _1701 = _1685.z * cbModelParam._m0[1u].y;
    }
    float _1705 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _632);
    float _1706 = isnan(_1705) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1705 : min(cbModelParam._m0[25u].w, _1705));
    float _1796;
    float _1798;
    float _1800;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1760 = fma(_869, cbModelParam._m0[21u].z, fma(_865, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _861)) + cbModelParam._m0[21u].w;
        float _1764 = fma(_869, cbModelParam._m0[22u].z, fma(_865, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _861)) + cbModelParam._m0[22u].w;
        float _1768 = fma(_869, cbModelParam._m0[23u].z, fma(_865, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _861)) + cbModelParam._m0[23u].w;
        float _1771 = fma(_807, cbModelParam._m0[21u].z, fma(_806, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _805));
        float _1774 = fma(_807, cbModelParam._m0[22u].z, fma(_806, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _805));
        float _1777 = fma(_807, cbModelParam._m0[23u].z, fma(_806, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _805));
        float _1918;
        if (_1771 > 0.0)
        {
            _1918 = abs((1.0 - _1760) / _1771);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1771 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1760 + 1.0) / _1771);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1918 = frontier_phi_25_21_ladder;
        }
        float _2194;
        if (_1774 > 0.0)
        {
            _2194 = abs((1.0 - _1764) / _1774);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1774 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1764 + 1.0) / _1774);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2194 = frontier_phi_37_32_ladder;
        }
        float _2407;
        if (_1777 > 0.0)
        {
            _2407 = abs((1.0 - _1768) / _1777);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1777 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1768 + 1.0) / _1777);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2407 = frontier_phi_46_43_ladder;
        }
        float _2409 = isnan(_2194) ? _1918 : (isnan(_1918) ? _2194 : min(_1918, _2194));
        float _2410 = isnan(_2407) ? _2409 : (isnan(_2409) ? _2407 : min(_2409, _2407));
        float _2414 = (_2410 * _1771) + _1760;
        float _2415 = (_2410 * _1774) + _1764;
        float _2416 = (_2410 * _1777) + _1768;
        float _2417 = _2410 * 9.9999997473787516355514526367188e-05;
        float _2418 = (-1.0) - _2417;
        float _2420 = _2417 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2416 > _2420) || ((_2416 < _2418) || ((_2415 > _2420) || ((_2415 < _2418) || ((_2414 < _2418) || (_2414 > _2420))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2644 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2416, cbModelParam._m0[17u].z, fma(_2415, cbModelParam._m0[17u].y, _2414 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2416, cbModelParam._m0[18u].z, fma(_2415, cbModelParam._m0[18u].y, _2414 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2416, cbModelParam._m0[19u].z, fma(_2415, cbModelParam._m0[19u].y, _2414 * cbModelParam._m0[19u].x))), _1706);
            frontier_phi_22_46_ladder = _2644.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2644.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2644.x * cbModelParam._m0[1u].z;
        }
        _1796 = frontier_phi_22_46_ladder_2;
        _1798 = frontier_phi_22_46_ladder_1;
        _1800 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1780 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_805, _806, _807), _1706);
        _1796 = _1780.x * cbModelParam._m0[1u].z;
        _1798 = _1780.y * cbModelParam._m0[1u].z;
        _1800 = _1780.z * cbModelParam._m0[1u].z;
    }
    float _1813 = (((_832 * _782) + _833) * _797) * ((cbModelParam._m0[1u].w * (_1796 - _1697)) + _1697);
    float _1815 = (((_832 * _784) + _833) * _797) * ((cbModelParam._m0[1u].w * (_1798 - _1699)) + _1699);
    float _1817 = (((_832 * _785) + _833) * _797) * ((cbModelParam._m0[1u].w * (_1800 - _1701)) + _1701);
    float _1820 = fma(_1817, cbSceneParam._m0[89u].z, fma(_1815, cbSceneParam._m0[89u].y, _1813 * cbSceneParam._m0[89u].x));
    float _1823 = fma(_1817, cbSceneParam._m0[90u].z, fma(_1815, cbSceneParam._m0[90u].y, _1813 * cbSceneParam._m0[90u].x));
    float _1826 = fma(_1817, cbSceneParam._m0[91u].z, fma(_1815, cbSceneParam._m0[91u].y, _1813 * cbSceneParam._m0[91u].x));
    uvec4 _1836 = floatBitsToUint(cbInstanceData._m0[_757 + 5u]);
    uint _1838 = _1836.x * 14u;
    uint _1839 = _1838 + 13u;
    float _1846 = _797 + (-1.0);
    float _1851 = (cbLight._m0[_1839].x * _1846) + 1.0;
    float _1852 = (cbLight._m0[_1839].y * _1846) + 1.0;
    float _1853 = (cbLight._m0[_1839].z * _1846) + 1.0;
    float _1854 = (cbLight._m0[_1839].w * _1846) + 1.0;
    uint _1855 = _1838 + 5u;
    float _1861 = isnan(1.0) ? _1852 : (isnan(_1852) ? 1.0 : min(_1852, 1.0));
    uint _1865 = _1838 + 4u;
    float _1872 = isnan(1.0) ? _1851 : (isnan(_1851) ? 1.0 : min(_1851, 1.0));
    uint _1876 = _1838 | 1u;
    float _1887 = dot(vec3(cbLight._m0[_1838].xyz), vec3(_629, _630, _631));
    float _1890 = dot(vec3(cbLight._m0[_1876].xyz), vec3(_629, _630, _631));
    float _4059 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
    float _4070 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
    float _1895 = (isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) * 0.3183098733425140380859375;
    float _1897 = (isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0))) * 0.3183098733425140380859375;
    float _1904 = ((cbLight._m0[_1855].x * _1861) * _1897) + ((cbLight._m0[_1865].x * _1872) * _1895);
    float _1905 = ((_1861 * cbLight._m0[_1855].y) * _1897) + ((_1872 * cbLight._m0[_1865].y) * _1895);
    float _1906 = ((_1861 * cbLight._m0[_1855].z) * _1897) + ((_1872 * cbLight._m0[_1865].z) * _1895);
    uvec4 _1910 = floatBitsToUint(cbLight._m0[_1838 + 12u]);
    bool _1912 = _1910.x == 0u;
    float _1923;
    float _1925;
    float _1927;
    if (_1912)
    {
        _1923 = _1904;
        _1925 = _1905;
        _1927 = _1906;
    }
    else
    {
        uint _1931 = _1838 + 6u;
        float _1947 = (dot(vec3(cbLight._m0[_1838 + 2u].xyz), vec3(_629, _630, _631)) * 0.5) + 0.5;
        float _1948 = _1947 * _1947;
        float _4081 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
        float _1949 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _1950 = isnan(1.0) ? _1853 : (isnan(_1853) ? 1.0 : min(_1853, 1.0));
        _1923 = (((cbLight._m0[_1931].x * 0.3183098733425140380859375) * _1949) * _1950) + _1904;
        _1925 = (((cbLight._m0[_1931].y * 0.3183098733425140380859375) * _1949) * _1950) + _1905;
        _1927 = (((cbLight._m0[_1931].z * 0.3183098733425140380859375) * _1949) * _1950) + _1906;
    }
    bool _1930 = _1910.y == 0u;
    float _1968;
    float _1970;
    float _1972;
    if (_1930)
    {
        _1968 = _1923;
        _1970 = _1925;
        _1972 = _1927;
    }
    else
    {
        uint _2138 = _1838 + 7u;
        float _2154 = (dot(vec3(cbLight._m0[_1838 + 3u].xyz), vec3(_629, _630, _631)) * 0.5) + 0.5;
        float _2155 = _2154 * _2154;
        float _4097 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
        float _2156 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
        float _2157 = isnan(1.0) ? _1854 : (isnan(_1854) ? 1.0 : min(_1854, 1.0));
        _1968 = (((cbLight._m0[_2138].x * 0.3183098733425140380859375) * _2156) * _2157) + _1923;
        _1970 = (((cbLight._m0[_2138].y * 0.3183098733425140380859375) * _2156) * _2157) + _1925;
        _1972 = (((cbLight._m0[_2138].z * 0.3183098733425140380859375) * _2156) * _2157) + _1927;
    }
    uint _1975 = _1838 + 8u;
    float _1988 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1838].w)) * _632) * 0.949999988079071044921875);
    float _1989 = _1988 * _1988;
    float _1990 = cbLight._m0[_1838].x + _709;
    float _1991 = cbLight._m0[_1838].y + _710;
    float _1992 = cbLight._m0[_1838].z + _711;
    float _1996 = inversesqrt(dot(vec3(_1990, _1991, _1992), vec3(_1990, _1991, _1992)));
    float _1997 = _1996 * _1990;
    float _1998 = _1996 * _1991;
    float _1999 = _1996 * _1992;
    float _2000 = dot(vec3(_629, _630, _631), vec3(cbLight._m0[_1838].xyz));
    float _4113 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
    float _2003 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
    float _4124 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _2004 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
    float _2005 = dot(vec3(_629, _630, _631), vec3(_1997, _1998, _1999));
    float _4135 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
    float _2008 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
    float _2009 = dot(vec3(cbLight._m0[_1838].xyz), vec3(_1997, _1998, _1999));
    float _4146 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
    float _2013 = _1989 * _1989;
    float _2017 = ((_2008 * _2008) * (_2013 + (-1.0))) + 1.0;
    float _2025 = exp2(log2(1.0 - (isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0)))) * 5.0);
    float _2026 = 0.959999978542327880859375 - _779;
    float _2028 = 0.959999978542327880859375 - _780;
    float _2029 = 0.959999978542327880859375 - _781;
    float _2036 = 1.0 - _1989;
    float _2047 = (0.5 / (((_2004 * ((_2003 * _2036) + _1989)) + 9.9999999392252902907785028219223e-09) + (((_2004 * _2036) + _1989) * _2003))) * _2003;
    float _4157 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
    float _2049 = (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * (_2013 / ((_2017 * _2017) * 3.141590118408203125));
    uint _2060 = _1838 + 9u;
    float _2071 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1876].w)) * _632) * 0.949999988079071044921875);
    float _2072 = _2071 * _2071;
    float _2073 = cbLight._m0[_1876].x + _709;
    float _2074 = cbLight._m0[_1876].y + _710;
    float _2075 = cbLight._m0[_1876].z + _711;
    float _2079 = inversesqrt(dot(vec3(_2073, _2074, _2075), vec3(_2073, _2074, _2075)));
    float _2080 = _2079 * _2073;
    float _2081 = _2079 * _2074;
    float _2082 = _2079 * _2075;
    float _2083 = dot(vec3(_629, _630, _631), vec3(cbLight._m0[_1876].xyz));
    float _4168 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
    float _2086 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
    float _2087 = dot(vec3(_629, _630, _631), vec3(_2080, _2081, _2082));
    float _4179 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
    float _2090 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
    float _2091 = dot(vec3(cbLight._m0[_1876].xyz), vec3(_2080, _2081, _2082));
    float _4190 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
    float _2095 = _2072 * _2072;
    float _2099 = ((_2090 * _2090) * (_2095 + (-1.0))) + 1.0;
    float _2106 = exp2(log2(1.0 - (isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0)))) * 5.0);
    float _2113 = 1.0 - _2072;
    float _2123 = (0.5 / (((_2004 * ((_2086 * _2113) + _2072)) + 9.9999999392252902907785028219223e-09) + (((_2004 * _2113) + _2072) * _2086))) * _2086;
    float _4201 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
    float _2125 = (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0))) * (_2095 / ((_2099 * _2099) * 3.141590118408203125));
    float _2135 = (((((_2106 * _2026) + _782) * cbLight._m0[_2060].x) * _2125) * _1861) + (((((_2025 * _2026) + _782) * cbLight._m0[_1975].x) * _2049) * _1872);
    float _2136 = (((((_2106 * _2028) + _784) * cbLight._m0[_2060].y) * _2125) * _1861) + (((((_2025 * _2028) + _784) * cbLight._m0[_1975].y) * _2049) * _1872);
    float _2137 = (((((_2106 * _2029) + _785) * cbLight._m0[_2060].z) * _2125) * _1861) + (((((_2025 * _2029) + _785) * cbLight._m0[_1975].z) * _2049) * _1872);
    float _2199;
    float _2201;
    float _2203;
    if (_1912)
    {
        _2199 = _2135;
        _2201 = _2136;
        _2203 = _2137;
    }
    else
    {
        uint _2205 = _1838 + 2u;
        uint _2209 = _1838 + 10u;
        float _2223 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2205].w)) * _632) * 0.949999988079071044921875);
        float _2224 = _2223 * _2223;
        float _2225 = cbLight._m0[_2205].x + _709;
        float _2226 = cbLight._m0[_2205].y + _710;
        float _2227 = cbLight._m0[_2205].z + _711;
        float _2231 = inversesqrt(dot(vec3(_2225, _2226, _2227), vec3(_2225, _2226, _2227)));
        float _2232 = _2231 * _2225;
        float _2233 = _2231 * _2226;
        float _2234 = _2231 * _2227;
        float _2235 = dot(vec3(_629, _630, _631), vec3(cbLight._m0[_2205].xyz));
        float _4212 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
        float _2238 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _2239 = dot(vec3(_629, _630, _631), vec3(_2232, _2233, _2234));
        float _4223 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
        float _2242 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
        float _2243 = dot(vec3(cbLight._m0[_2205].xyz), vec3(_2232, _2233, _2234));
        float _4234 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
        float _2247 = _2224 * _2224;
        float _2251 = ((_2242 * _2242) * (_2247 + (-1.0))) + 1.0;
        float _2258 = exp2(log2(1.0 - (isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0)))) * 5.0);
        float _2265 = 1.0 - _2224;
        float _2275 = (0.5 / (((_2004 * ((_2238 * _2265) + _2224)) + 9.9999999392252902907785028219223e-09) + (((_2004 * _2265) + _2224) * _2238))) * _2238;
        float _4245 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
        float _2277 = (isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0))) * (_2247 / ((_2251 * _2251) * 3.141590118408203125));
        float _2278 = isnan(1.0) ? _1853 : (isnan(_1853) ? 1.0 : min(_1853, 1.0));
        _2199 = (((((_2258 * _2026) + _782) * cbLight._m0[_2209].x) * _2277) * _2278) + _2135;
        _2201 = (((((_2258 * _2028) + _784) * cbLight._m0[_2209].y) * _2277) * _2278) + _2136;
        _2203 = (((((_2258 * _2029) + _785) * cbLight._m0[_2209].z) * _2277) * _2278) + _2137;
    }
    float _2313;
    float _2315;
    float _2317;
    if (_1930)
    {
        _2313 = _2199;
        _2315 = _2201;
        _2317 = _2203;
    }
    else
    {
        uint _2324 = _1838 + 3u;
        uint _2328 = _1838 + 11u;
        float _2342 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2324].w)) * _632) * 0.949999988079071044921875);
        float _2343 = _2342 * _2342;
        float _2344 = cbLight._m0[_2324].x + _709;
        float _2345 = cbLight._m0[_2324].y + _710;
        float _2346 = cbLight._m0[_2324].z + _711;
        float _2350 = inversesqrt(dot(vec3(_2344, _2345, _2346), vec3(_2344, _2345, _2346)));
        float _2351 = _2350 * _2344;
        float _2352 = _2350 * _2345;
        float _2353 = _2350 * _2346;
        float _2354 = dot(vec3(_629, _630, _631), vec3(cbLight._m0[_2324].xyz));
        float _4261 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
        float _2357 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
        float _2358 = dot(vec3(_629, _630, _631), vec3(_2351, _2352, _2353));
        float _4272 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
        float _2361 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _2362 = dot(vec3(cbLight._m0[_2324].xyz), vec3(_2351, _2352, _2353));
        float _4283 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
        float _2366 = _2343 * _2343;
        float _2370 = ((_2361 * _2361) * (_2366 + (-1.0))) + 1.0;
        float _2377 = exp2(log2(1.0 - (isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0)))) * 5.0);
        float _2384 = 1.0 - _2343;
        float _2394 = (0.5 / (((_2004 * ((_2357 * _2384) + _2343)) + 9.9999999392252902907785028219223e-09) + (((_2004 * _2384) + _2343) * _2357))) * _2357;
        float _4294 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
        float _2396 = (isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0))) * (_2366 / ((_2370 * _2370) * 3.141590118408203125));
        float _2397 = isnan(1.0) ? _1854 : (isnan(_1854) ? 1.0 : min(_1854, 1.0));
        _2313 = (((((_2377 * _2026) + _782) * cbLight._m0[_2328].x) * _2396) * _2397) + _2199;
        _2315 = (((((_2377 * _2028) + _784) * cbLight._m0[_2328].y) * _2396) * _2397) + _2201;
        _2317 = (((((_2377 * _2029) + _785) * cbLight._m0[_2328].z) * _2396) * _2397) + _2203;
    }
    float _2532;
    float _2534;
    float _2536;
    float _2538;
    float _2540;
    float _2542;
    if (_1836.y == 0u)
    {
        float _2472 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2473 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2472;
        float _2474 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2472;
        float _2475 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2472;
        uvec4 _2487 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2488 = _2487.x;
        uint _2499 = uint((float(_2487.y) * floor(float(uint(cbSceneParam._m0[85u].y * _718) / _2488))) + floor(float(uint(cbSceneParam._m0[85u].x * _717) / _2488)));
        float _2509 = (log2(_2475 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2510 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
        uint _2513 = uint(isnan(14.0) ? _2510 : (isnan(_2510) ? 14.0 : min(_2510, 14.0)));
        uvec4 _2518 = texelFetch(g_lightClusterGridBuffer, int(((_2513 << 2u) + (_2499 << 6u)) >> 2u));
        uint _2519 = _2518.x;
        uint _2520 = _2487.z;
        float _2649;
        float _2651;
        float _2653;
        float _2655;
        float _2657;
        float _2659;
        if (((((1u << ((_2520 >> 4u) & 15u)) + 4294967295u) & _2519) == 0u) || ((_2520 & 240u) == 0u))
        {
            _2649 = 0.0;
            _2651 = 0.0;
            _2653 = 0.0;
            _2655 = 0.0;
            _2657 = 0.0;
            _2659 = 0.0;
        }
        else
        {
            float _2650;
            float _2652;
            float _2654;
            float _2656;
            float _2658;
            float _2660;
            float _2802 = 0.0;
            float _2803 = 0.0;
            float _2804 = 0.0;
            float _2805 = 0.0;
            float _2806 = 0.0;
            float _2807 = 0.0;
            uint _2808 = 0u;
            uint _2817;
            bool _2818;
            for (;;)
            {
                _2817 = texelFetch(g_lightClassification, int((((_2513 << 5u) + (_2499 << 9u)) + (_2808 << 2u)) >> 2u)).x;
                _2818 = _2817 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2818)
                {
                    frontier_phi_61_pred = _2802;
                    frontier_phi_61_pred_1 = _2807;
                    frontier_phi_61_pred_2 = _2806;
                    frontier_phi_61_pred_3 = _2805;
                    frontier_phi_61_pred_4 = _2804;
                    frontier_phi_61_pred_5 = _2803;
                }
                else
                {
                    float _2926;
                    float _2927;
                    float _2928;
                    float _2929;
                    float _2930;
                    float _2931;
                    uint _2932;
                    _2926 = _2802;
                    _2927 = _2803;
                    _2928 = _2804;
                    _2929 = _2805;
                    _2930 = _2806;
                    _2931 = _2807;
                    _2932 = _2817;
                    float _2858;
                    float _2859;
                    float _2860;
                    float _2861;
                    float _2862;
                    float _2863;
                    for (;;)
                    {
                        uint _2936 = uint(findLSB(_2932)) + (_2808 << 5u);
                        uint _2933 = (_2932 + 4294967295u) & _2932;
                        uint _2938 = _2936 * 48u;
                        vec4 _2952 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2938)).x, texelFetch(g_PointLightRenderingBuffer, int(_2938 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2938 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2938 + 3u)).x));
                        uint _2958 = (_2936 * 48u) + 4u;
                        vec4 _2971 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2958)).x, texelFetch(g_PointLightRenderingBuffer, int(_2958 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2958 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2958 + 3u)).x));
                        uint _2977 = (_2936 * 48u) + 8u;
                        vec3 _2988 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2977)).x, texelFetch(g_PointLightRenderingBuffer, int(_2977 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2977 + 2u)).x));
                        float _2992 = _2952.x - _2473;
                        float _2993 = _2952.y - _2474;
                        float _2994 = _2952.z - _2475;
                        float _2995 = dot(vec3(_2992, _2993, _2994), vec3(_2992, _2993, _2994));
                        float _2998 = inversesqrt(_2995);
                        float _2999 = _2998 * _2992;
                        float _3000 = _2998 * _2993;
                        float _3001 = _2998 * _2994;
                        float _3002 = dot(vec3(_738, _741, _744), vec3(_2999, _3000, _3001));
                        float _3007 = 1.0 - (_2995 * _2952.w);
                        float _4320 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0));
                        float _3008 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
                        float _3009 = sqrt(_2995) * _2971.w;
                        float _3012 = 1.39999997615814208984375 / (_3009 + 1.39999997615814208984375);
                        float _3013 = _3012 * _3012;
                        float _3016 = ((1.0 - _3013) * _3002) + _3013;
                        float _3019 = _3009 * _3009;
                        float _3023 = ((isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0))) * _3008) / ((_3019 * 0.699999988079071044921875) + 1.0);
                        float _3027 = (-0.0) - _2473;
                        float _3028 = (-0.0) - _2474;
                        float _3029 = (-0.0) - _2475;
                        float _3033 = inversesqrt(dot(vec3(_3027, _3028, _3029), vec3(_3027, _3028, _3029)));
                        float _3034 = _3033 * _3027;
                        float _3035 = _3033 * _3028;
                        float _3036 = _3033 * _3029;
                        float _3044 = exp2(log2(1.0 / ((_3019 * 3.5) + 5.0)) * 0.25);
                        float _3045 = 1.0 - _813;
                        float _3052 = sqrt(1.0 - ((1.0 - (_3045 * _3045)) * (1.0 - (_3044 * _3044))));
                        float _3053 = _3052 * _3052;
                        float _3054 = _3053 * _3053;
                        float _3055 = _3034 + _2999;
                        float _3056 = _3035 + _3000;
                        float _3057 = _3036 + _3001;
                        float _3061 = inversesqrt(dot(vec3(_3055, _3056, _3057), vec3(_3055, _3056, _3057)));
                        float _3065 = dot(vec3(_738, _741, _744), vec3(_3034, _3035, _3036));
                        float _4336 = isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0));
                        float _3068 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
                        float _3069 = dot(vec3(_738, _741, _744), vec3(_3061 * _3055, _3061 * _3056, _3061 * _3057));
                        float _4347 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0));
                        float _3072 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
                        float _3076 = ((_3072 * _3072) * (_3054 + (-1.0))) + 1.0;
                        float _3077 = _3012 * _3053;
                        float _3078 = _3077 * _3077;
                        float _3081 = ((1.0 - _3078) * _3002) + _3078;
                        float _4358 = isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0));
                        float _3082 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
                        float _3083 = 1.0 - _3053;
                        float _3093 = (0.5 / (((_3082 * ((_3068 * _3083) + _3053)) + 9.9999999392252902907785028219223e-09) + (((_3082 * _3083) + _3053) * _3068))) * _3082;
                        float _4369 = isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0));
                        float _3104 = (((_3054 * 3.1415927410125732421875) * (isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0)))) / ((_3076 * _3076) * ((_3019 * 2.1991131305694580078125) + 3.141590118408203125))) * _3008;
                        _2861 = (_3023 * _2971.x) + _2929;
                        _2862 = (_3023 * _2971.y) + _2930;
                        _2863 = (_3023 * _2971.z) + _2931;
                        _2858 = (_3104 * _2988.x) + _2926;
                        _2859 = (_3104 * _2988.y) + _2927;
                        _2860 = (_3104 * _2988.z) + _2928;
                        if (_2933 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2926 = _2858;
                            _2927 = _2859;
                            _2928 = _2860;
                            _2929 = _2861;
                            _2930 = _2862;
                            _2931 = _2863;
                            _2932 = _2933;
                        }
                    }
                    frontier_phi_61_pred = _2858;
                    frontier_phi_61_pred_1 = _2863;
                    frontier_phi_61_pred_2 = _2862;
                    frontier_phi_61_pred_3 = _2861;
                    frontier_phi_61_pred_4 = _2860;
                    frontier_phi_61_pred_5 = _2859;
                }
                _2650 = frontier_phi_61_pred;
                _2660 = frontier_phi_61_pred_1;
                _2658 = frontier_phi_61_pred_2;
                _2656 = frontier_phi_61_pred_3;
                _2654 = frontier_phi_61_pred_4;
                _2652 = frontier_phi_61_pred_5;
                uint _2809 = _2808 + 1u;
                if (_2809 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2802 = _2650;
                    _2803 = _2652;
                    _2804 = _2654;
                    _2805 = _2656;
                    _2806 = _2658;
                    _2807 = _2660;
                    _2808 = _2809;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2649 = _2650;
            _2651 = _2652;
            _2653 = _2654;
            _2655 = _2656;
            _2657 = _2658;
            _2659 = _2660;
        }
        uvec4 _2663 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2664 = _2663.z;
        uint _2666 = (_2664 >> 8u) & 15u;
        float _2770;
        float _2772;
        float _2774;
        float _2776;
        float _2778;
        float _2780;
        if (((4294967295u << _2666) & _2519) == 0u)
        {
            _2770 = _2649;
            _2772 = _2651;
            _2774 = _2653;
            _2776 = _2655;
            _2778 = _2657;
            _2780 = _2659;
        }
        else
        {
            float _2795 = inversesqrt(dot(vec3(_2473, _2474, _2475), vec3(_2473, _2474, _2475)));
            float _2796 = _2795 * _2473;
            float _2797 = _2795 * _2474;
            float _2798 = _2795 * _2475;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2666 < ((_2664 >> 12u) & 15u))
            {
                float _2771;
                float _2773;
                float _2775;
                float _2777;
                float _2779;
                float _2781;
                float _2909 = _2649;
                float _2910 = _2651;
                float _2911 = _2653;
                float _2912 = _2655;
                float _2913 = _2657;
                float _2914 = _2659;
                uint _2915 = _2666;
                uint _2924;
                bool _2925;
                for (;;)
                {
                    _2924 = texelFetch(g_lightClassification, int((((_2513 << 5u) + (_2499 << 9u)) + (_2915 << 2u)) >> 2u)).x;
                    _2925 = _2924 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2925)
                    {
                        frontier_phi_67_pred = _2912;
                        frontier_phi_67_pred_1 = _2913;
                        frontier_phi_67_pred_2 = _2914;
                        frontier_phi_67_pred_3 = _2911;
                        frontier_phi_67_pred_4 = _2910;
                        frontier_phi_67_pred_5 = _2909;
                    }
                    else
                    {
                        float _3109;
                        float _3110;
                        float _3111;
                        float _3112;
                        float _3113;
                        float _3114;
                        float _3403;
                        float _3404;
                        float _3405;
                        float _3406;
                        float _3407;
                        float _3408;
                        float _3122 = _2909;
                        float _3123 = _2910;
                        float _3124 = _2911;
                        float _3125 = _2912;
                        float _3126 = _2913;
                        float _3127 = _2914;
                        uint _3128 = _2924;
                        uint _3129;
                        vec4 _3154;
                        float _3155;
                        vec4 _3170;
                        vec3 _3182;
                        vec4 _3197;
                        vec4 _3212;
                        float _3259;
                        bool _3260;
                        for (;;)
                        {
                            uint _3139 = ((_2915 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3128));
                            _3129 = (_3128 + 4294967295u) & _3128;
                            uint _3141 = _3139 * 40u;
                            _3154 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3141)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 3u)).x));
                            _3155 = _3154.w;
                            uint _3157 = (_3139 * 40u) + 4u;
                            _3170 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3157)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 3u)).x));
                            uint _3172 = (_3139 * 40u) + 8u;
                            _3182 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3172)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 2u)).x));
                            uint _3184 = (_3139 * 40u) + 16u;
                            _3197 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3184)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 3u)).x));
                            uint _3199 = (_3139 * 40u) + 20u;
                            _3212 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3199)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 3u)).x));
                            uint _3215 = (_3139 * 40u) + 24u;
                            vec4 _3228 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3215)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 3u)).x));
                            uint _3234 = (_3139 * 40u) + 28u;
                            vec4 _3247 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3234)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 3u)).x));
                            _3259 = fma(_2475, _3247.z, fma(_2474, _3247.y, _3247.x * _2473)) + _3247.w;
                            _3260 = !((fma(_2475, _3228.z, fma(_2474, _3228.y, _3228.x * _2473)) + _3228.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3260)
                            {
                                float _3287 = _3154.x - _2473;
                                float _3288 = _3154.y - _2474;
                                float _3289 = _3154.z - _2475;
                                float _3290 = dot(vec3(_3287, _3288, _3289), vec3(_3287, _3288, _3289));
                                float _3293 = inversesqrt(_3290);
                                float _3294 = _3293 * _3287;
                                float _3295 = _3293 * _3288;
                                float _3296 = _3293 * _3289;
                                float _3300 = 1.0 - (_3290 / (_3155 * _3155));
                                float _4380 = isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : max(_3300, 0.0));
                                float _3301 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
                                float _3305 = sqrt(_3290) * _3170.w;
                                float _3307 = 1.39999997615814208984375 / (_3305 + 1.39999997615814208984375);
                                float _3308 = _3307 * _3307;
                                float _3311 = ((1.0 - _3308) * dot(vec3(_3294, _3295, _3296), vec3(_738, _741, _744))) + _3308;
                                float _3314 = _3305 * _3305;
                                float _3318 = (fma(_2475, _3197.z, fma(_2474, _3197.y, _3197.x * _2473)) + _3197.w) / _3259;
                                float _3319 = (fma(_2475, _3212.z, fma(_2474, _3212.y, _3212.x * _2473)) + _3212.w) / _3259;
                                float _3323 = 1.0 - dot(vec2(_3318, _3319), vec2(_3318, _3319));
                                float _4396 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0));
                                float _3324 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
                                float _3325 = _3324 * (((isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0))) * _3301) / ((_3314 * 0.699999988079071044921875) + 1.0));
                                float _3337 = exp2(log2(1.0 / ((_3314 * 3.5) + 5.0)) * 0.25);
                                float _3338 = 1.0 - _813;
                                float _3345 = sqrt(1.0 - ((1.0 - (_3338 * _3338)) * (1.0 - (_3337 * _3337))));
                                float _3346 = _3345 * _3345;
                                float _3347 = _3346 * _3346;
                                float _3348 = _3294 - _2796;
                                float _3349 = _3295 - _2797;
                                float _3350 = _3296 - _2798;
                                float _3354 = inversesqrt(dot(vec3(_3348, _3349, _3350), vec3(_3348, _3349, _3350)));
                                float _3358 = dot(vec3(_738, _741, _744), vec3((-0.0) - _2796, (-0.0) - _2797, (-0.0) - _2798));
                                float _4407 = isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0));
                                float _3361 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
                                float _3362 = dot(vec3(_738, _741, _744), vec3(_3354 * _3348, _3354 * _3349, _3354 * _3350));
                                float _4418 = isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0));
                                float _3365 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
                                float _3369 = ((_3365 * _3365) * (_3347 + (-1.0))) + 1.0;
                                float _3370 = _3307 * _3346;
                                float _3371 = _3370 * _3370;
                                float _3377 = ((1.0 - _3371) * dot(vec3(_738, _741, _744), vec3(_3294, _3295, _3296))) + _3371;
                                float _4429 = isnan(0.0) ? _3377 : (isnan(_3377) ? 0.0 : max(_3377, 0.0));
                                float _3378 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
                                float _3379 = 1.0 - _3346;
                                float _3389 = (0.5 / (((_3378 * ((_3361 * _3379) + _3346)) + 9.9999999392252902907785028219223e-09) + (((_3378 * _3379) + _3346) * _3361))) * _3378;
                                float _4440 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0));
                                float _3399 = (_3324 * _3301) * (((_3347 * 3.1415927410125732421875) * (isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0)))) / ((_3369 * _3369) * ((_3314 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3399 * _3182.x;
                                frontier_phi_73_pred_1 = _3399 * _3182.y;
                                frontier_phi_73_pred_2 = _3325 * _3170.z;
                                frontier_phi_73_pred_3 = _3325 * _3170.y;
                                frontier_phi_73_pred_4 = _3325 * _3170.x;
                                frontier_phi_73_pred_5 = _3399 * _3182.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3403 = frontier_phi_73_pred;
                            _3404 = frontier_phi_73_pred_1;
                            _3408 = frontier_phi_73_pred_2;
                            _3407 = frontier_phi_73_pred_3;
                            _3406 = frontier_phi_73_pred_4;
                            _3405 = frontier_phi_73_pred_5;
                            _3112 = _3406 + _3125;
                            _3113 = _3407 + _3126;
                            _3114 = _3408 + _3127;
                            _3109 = _3403 + _3122;
                            _3110 = _3404 + _3123;
                            _3111 = _3405 + _3124;
                            if (_3129 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3122 = _3109;
                                _3123 = _3110;
                                _3124 = _3111;
                                _3125 = _3112;
                                _3126 = _3113;
                                _3127 = _3114;
                                _3128 = _3129;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3112;
                        frontier_phi_67_pred_1 = _3113;
                        frontier_phi_67_pred_2 = _3114;
                        frontier_phi_67_pred_3 = _3111;
                        frontier_phi_67_pred_4 = _3110;
                        frontier_phi_67_pred_5 = _3109;
                    }
                    _2777 = frontier_phi_67_pred;
                    _2779 = frontier_phi_67_pred_1;
                    _2781 = frontier_phi_67_pred_2;
                    _2775 = frontier_phi_67_pred_3;
                    _2773 = frontier_phi_67_pred_4;
                    _2771 = frontier_phi_67_pred_5;
                    uint _2916 = _2915 + 1u;
                    if (_2916 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2909 = _2771;
                        _2910 = _2773;
                        _2911 = _2775;
                        _2912 = _2777;
                        _2913 = _2779;
                        _2914 = _2781;
                        _2915 = _2916;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2779;
                frontier_phi_55_56_ladder_1 = _2781;
                frontier_phi_55_56_ladder_2 = _2777;
                frontier_phi_55_56_ladder_3 = _2775;
                frontier_phi_55_56_ladder_4 = _2773;
                frontier_phi_55_56_ladder_5 = _2771;
            }
            else
            {
                frontier_phi_55_56_ladder = _2657;
                frontier_phi_55_56_ladder_1 = _2659;
                frontier_phi_55_56_ladder_2 = _2655;
                frontier_phi_55_56_ladder_3 = _2653;
                frontier_phi_55_56_ladder_4 = _2651;
                frontier_phi_55_56_ladder_5 = _2649;
            }
            _2770 = frontier_phi_55_56_ladder_5;
            _2772 = frontier_phi_55_56_ladder_4;
            _2774 = frontier_phi_55_56_ladder_3;
            _2776 = frontier_phi_55_56_ladder_2;
            _2778 = frontier_phi_55_56_ladder;
            _2780 = frontier_phi_55_56_ladder_1;
        }
        float _2785 = isnan(1.0) ? _797 : (isnan(_797) ? 1.0 : min(_797, 1.0));
        _2532 = (_2785 * _2776) + _1968;
        _2534 = (_2785 * _2778) + _1970;
        _2536 = (_2785 * _2780) + _1972;
        _2538 = ((_2770 * _782) * _2785) + _2313;
        _2540 = ((_2772 * _784) * _2785) + _2315;
        _2542 = ((_2774 * _785) * _2785) + _2317;
    }
    else
    {
        _2532 = _1968;
        _2534 = _1970;
        _2536 = _1972;
        _2538 = _2313;
        _2540 = _2315;
        _2542 = _2317;
    }
    uint _2548 = _758 + uint(cbMatDynParam._m0[0u].w);
    float _2554 = cbInstanceData._m0[_2548].x * (_548 - (_564 * _548));
    float _2555 = cbInstanceData._m0[_2548].y * (_549 - (_564 * _549));
    float _2556 = cbInstanceData._m0[_2548].z * (_550 - (_564 * _550));
    float _4456 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _4467 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _4478 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _2573 = (((isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0))) * (_2532 + ((isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0))) * _797))) + ((_2538 + ((isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0))) * _1606)) * cbPerFrame._m0[3u].x)) + _2554;
    float _2575 = (_2555 + ((_2540 + ((isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0))) * _1606)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0))) * (_2534 + ((isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0))) * _797)));
    float _2577 = (_2556 + ((_2542 + ((isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0))) * _1606)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0))) * (_2536 + ((isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0))) * _797)));
    float _4504 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2590 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
    uint _2591 = _757 + 6u;
    float _2599 = _717 / cbSceneParam._m0[86u].x;
    float _2600 = _718 / cbSceneParam._m0[86u].y;
    vec4 _2614 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2599, _2600, (log2((isnan(cbSceneParam._m0[77u].w) ? _652 : (isnan(_652) ? cbSceneParam._m0[77u].w : min(_652, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2616 = _2614.x;
    float _2617 = _2614.y;
    float _2618 = _2614.z;
    float _2619 = _2614.w;
    float _2711;
    float _2713;
    float _2715;
    float _2717;
    if (_652 > cbSceneParam._m0[78u].w)
    {
        float _2674 = isnan(_652) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _652 : min(cbSceneParam._m0[80u].w, _652));
        float _2675 = _2674 / _652;
        float _2686 = _2675 * _702;
        float _2687 = _703 * _2675;
        float _2688 = (-0.0) - _2687;
        float _2689 = _2675 * _704;
        float _2691 = (cbSceneParam._m0[77u].w * _2688) / _2674;
        float _2692 = _2691 + cbSceneParam._m0[79u].w;
        float _2693 = cbSceneParam._m0[79u].w - _2687;
        float _2699 = sqrt(((_2686 * _2686) + (_2687 * _2687)) + (_2689 * _2689));
        float _2702 = (1.0 - (cbSceneParam._m0[77u].w / _2674)) * _2699;
        float _2707 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2709 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2871;
        if (abs((_2688 - _2691) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2871 = ((((_2692 > 0.0) ? exp2(_2707 * _2692) : (2.0 - exp2(_2709 * _2692))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2702;
        }
        else
        {
            float _2831 = 1.0 / cbSceneParam._m0[80u].x;
            float _2832 = isnan(_2693) ? _2692 : (isnan(_2692) ? _2693 : max(_2692, _2693));
            float _2833 = isnan(_2693) ? _2692 : (isnan(_2692) ? _2693 : min(_2692, _2693));
            float _2842 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : min(_2832, 0.0));
            float _2843 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : min(_2833, 0.0));
            _2871 = ((abs(_2699 / _2688) * cbSceneParam._m0[80u].y) * ((((_2842 - _2843) * 2.0) - ((exp2(_2707 * (isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0)))) - exp2(_2707 * (isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0))))) * _2831)) - ((exp2(_2709 * _2842) - exp2(_2709 * _2843)) * _2831))) + (_2702 * cbSceneParam._m0[80u].z);
        }
        vec4 _2873 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2599, _2600, 1.0), 0.0);
        float _2882 = exp2((_2871 * (-1.44269502162933349609375)) * (1.0 - _2873.w));
        float _2883 = log2(_2882);
        float _2899 = log2(_2619);
        _2711 = (exp2(_2899 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2883 * cbSceneParam._m0[78u].x)) * _2873.x) / cbSceneParam._m0[78u].x)) + _2616;
        _2713 = (exp2(_2899 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2883 * cbSceneParam._m0[78u].y)) * _2873.y) / cbSceneParam._m0[78u].y)) + _2617;
        _2715 = (exp2(_2899 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2883 * cbSceneParam._m0[78u].z)) * _2873.z) / cbSceneParam._m0[78u].z)) + _2618;
        _2717 = _2882 * _2619;
    }
    else
    {
        _2711 = _2616;
        _2713 = _2617;
        _2715 = _2618;
        _2717 = _2619;
    }
    float _2729 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2730 = _2729 == 3.0;
    float _2731 = log2(_2717);
    float _2735 = exp2(_2731 * cbSceneParam._m0[78u].x);
    float _2736 = exp2(_2731 * cbSceneParam._m0[78u].y);
    float _2737 = exp2(_2731 * cbSceneParam._m0[78u].z);
    float _2738 = _2735 * (isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0)));
    float _2739 = _2736 * (isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0)));
    float _2740 = _2737 * (isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0)));
    float _2749 = (_2729 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2749 * (_2730 ? _2738 : (_2738 + (cbSceneParam._m0[72u].w * _2711)));
    SV_Target.y = _2749 * (_2730 ? _2739 : (_2739 + (cbSceneParam._m0[72u].w * _2713)));
    SV_Target.z = _2749 * (_2730 ? _2740 : (_2740 + (cbSceneParam._m0[72u].w * _2715)));
    SV_Target.w = cbInstanceData._m0[_2591].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2554) * _2590) * _2735) * _2749;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2555) * _2590) * _2736) * _2749;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2556) * _2590) * _2737) * _2749;
    SV_Target_1.w = cbInstanceData._m0[_2591].w;
}


