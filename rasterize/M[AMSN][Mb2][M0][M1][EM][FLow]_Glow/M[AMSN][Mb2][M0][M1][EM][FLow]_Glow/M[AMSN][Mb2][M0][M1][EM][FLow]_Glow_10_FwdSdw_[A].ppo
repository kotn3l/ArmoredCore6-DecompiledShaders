#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1206;
float _3909;
float _3910;
float _3911;
float _3912;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _251 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _257 = _251.x * cbMtdParam._m0[9u].x;
    float _258 = _251.y * cbMtdParam._m0[9u].y;
    float _259 = _251.z * cbMtdParam._m0[9u].z;
    vec4 _297 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[5u].w));
    float _313 = (TEXCOORD_3.x - ((cbMtdParam._m0[14u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[14u].y + 1.0);
    float _3921 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _314 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
    float _321 = (((_297.x * cbMtdParam._m0[10u].x) - _257) * _314) + _257;
    float _322 = (((_297.y * cbMtdParam._m0[10u].y) - _258) * _314) + _258;
    float _323 = (((_297.z * cbMtdParam._m0[10u].z) - _259) * _314) + _259;
    vec4 _340 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    vec4 _355 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[6u].w));
    float _357 = _355.x;
    float _375 = ((texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[7u].w)).x - _357) * _314) + _357;
    vec4 _388 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[4u].w));
    float _396 = (_388.x * 2.0) + (-1.0);
    float _398 = (_388.y * 2.0) + (-1.0);
    float _399 = dot(vec2(_396, _398), vec2(_396, _398));
    float _3932 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    vec4 _416 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _420 = _416.z;
    float _423 = (_416.x * 2.0) + (-1.0);
    float _424 = (_416.y * 2.0) + (-1.0);
    float _425 = dot(vec2(_423, _424), vec2(_423, _424));
    float _3943 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _430 = sqrt(1.0 - (isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0))));
    float _433 = (_314 * (_388.z - _420)) + _420;
    float _446 = (cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _447 = (cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _476 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * ((cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * ((cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[10u].w));
    float _481 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[15u].w;
    float _488 = ((_476.y * 0.5) + (-0.25)) * cbMtdParam._m0[15u].z;
    float _490 = (-0.0) - (cbMtdParam._m0[15u].z * ((_476.x * 0.5) + (-0.25)));
    float _492 = fract(_481);
    float _494 = fract(_481 + 0.5);
    float _495 = _492 * _490;
    float _496 = _488 * _492;
    float _499 = _494 * _490;
    float _500 = _488 * _494;
    float _505 = abs((_492 * 2.0) + (-1.0));
    vec4 _521 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_495 + _446) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_496 + _447) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _523 = _521.x;
    float _524 = _521.y;
    float _525 = _521.z;
    vec4 _526 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_499 + _446) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_500 + _447) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _553 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _554 = (cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _567 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_495 + _553) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_496 + _554) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _569 = _567.x;
    float _570 = _567.y;
    float _571 = _567.z;
    vec4 _572 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_499 + _553) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_500 + _554) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _598 = (TEXCOORD_9.x - ((cbMtdParam._m0[16u].y * (1.0 - TEXCOORD_9.x)) * (_340.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[16u].z + 1.0);
    float _3954 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _599 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
    float _609 = (_314 * (_396 - _423)) + _423;
    float _610 = (_314 * (_398 - _424)) + _424;
    float _611 = (_314 * (sqrt(1.0 - (isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0)))) - _430)) + _430;
    float _614 = fma(_611, _222 * NORMAL.x, fma(_610, _229 * TANGENT.x, (_215 * _207) * _609));
    float _617 = fma(_611, _222 * NORMAL.y, fma(_610, _229 * TANGENT.y, (_215 * _208) * _609));
    float _620 = fma(_611, _222 * NORMAL.z, fma(_610, _229 * TANGENT.z, (_215 * _209) * _609));
    float _624 = inversesqrt(dot(vec3(_614, _617, _620), vec3(_614, _617, _620)));
    float _625 = _624 * _614;
    float _626 = _624 * _617;
    float _627 = _624 * _620;
    float _3965 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _628 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
    float _3976 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _3987 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _3998 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _4009 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _632 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
    float _648 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _689 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _699 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _689);
    float _700 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _689);
    float _701 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _689);
    float _705 = inversesqrt(dot(vec3(_699, _700, _701), vec3(_699, _700, _701)));
    float _706 = _699 * _705;
    float _707 = _700 * _705;
    float _708 = _701 * _705;
    vec4 _713 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _715 = _713.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _887 = sqrt(((_699 * _699) + (_700 * _700)) + (_701 * _701));
        float _893 = (cbMatDynParam._m0[5u].x * _887) + cbMatDynParam._m0[5u].y;
        float _4020 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _894 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
        float _898 = (cbMatDynParam._m0[5u].z * _887) + cbMatDynParam._m0[5u].w;
        float _4031 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0))) - _894)) + _894) < ((_715 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _726 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _727 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _745 = fma(_627, cbSceneParam._m0[5u].z, fma(_626, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _625));
    float _748 = fma(_627, cbSceneParam._m0[6u].z, fma(_626, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _625));
    float _751 = fma(_627, cbSceneParam._m0[7u].z, fma(_626, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _625));
    uint _764 = uint(roundEven(NORMAL.w)) * 13u;
    uint _765 = _764 + 9u;
    uint _766 = _765 + uint(cbMatDynParam._m0[0u].w);
    float _772 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0)))) * cbInstanceData._m0[_766].x;
    float _773 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0)))) * cbInstanceData._m0[_766].y;
    float _774 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0)))) * cbInstanceData._m0[_766].z;
    float _4042 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _775 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
    float _4053 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _776 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
    float _4064 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _777 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
    float _778 = 1.0 - _632;
    float _779 = _775 * _778;
    float _780 = _776 * _778;
    float _781 = _777 * _778;
    float _786 = (_775 + (-0.039999999105930328369140625)) * _632;
    float _787 = (_776 + (-0.039999999105930328369140625)) * _632;
    float _788 = (_777 + (-0.039999999105930328369140625)) * _632;
    float _789 = _786 + 0.039999999105930328369140625;
    float _791 = _787 + 0.039999999105930328369140625;
    float _792 = _788 + 0.039999999105930328369140625;
    vec4 _801 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _726, cbSceneParam._m0[86u].y * _727));
    float _804 = _801.x * TEXCOORD_3.w;
    float _805 = dot(vec3(_625, _626, _627), vec3(_706, _707, _708));
    float _808 = _805 * 2.0;
    float _812 = (_808 * _625) - _706;
    float _813 = (_808 * _626) - _707;
    float _814 = (_808 * _627) - _708;
    float _818 = abs(dot(vec3(_706, _707, _708), vec3(_625, _626, _627)));
    float _4075 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _820 = sqrt(_628);
    float _833 = exp2((_820 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_820 * 3.0));
    float _839 = (1.0 - _833) * ((_820 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _840 = _833 * _820;
    float _868 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _872 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _876 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1205;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _931 = fma(_876, cbModelParam._m0[26u].z, fma(_872, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _868));
        float _935 = fma(_876, cbModelParam._m0[27u].z, fma(_872, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _868));
        float _939 = fma(_876, cbModelParam._m0[28u].z, fma(_872, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _868));
        float _963 = _868 + _625;
        float _964 = _872 + _626;
        float _965 = _876 + _627;
        float _975 = fma(_965, cbModelParam._m0[26u].z, fma(_964, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _963)) - _931;
        float _976 = fma(_965, cbModelParam._m0[27u].z, fma(_964, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _963)) - _935;
        float _977 = fma(_965, cbModelParam._m0[28u].z, fma(_964, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _963)) - _939;
        float _981 = inversesqrt(dot(vec3(_975, _976, _977), vec3(_975, _976, _977)));
        float _994 = ((_981 * _975) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_931 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _995 = ((_981 * _976) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_935 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _996 = ((_981 * _977) / cbModelParam._m0[34u].z) + ((((((_939 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _999 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_994, _995, _996), 0.0);
        vec4 _1006 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_994, _995, _996), 0.0);
        vec4 _1013 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_994, _995, _996), 0.0);
        vec4 _1020 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_994, _995, _996), 0.0);
        float _1033 = exp2((_999.w + (-0.5)) * 20.0) * 2.0;
        float _1034 = _1033 * (_999.x + (-0.5));
        float _1035 = _1033 * (_999.y + (-0.5));
        float _1036 = _1033 * (_999.z + (-0.5));
        float _1043 = exp2((_1006.w + (-0.5)) * 20.0) * 2.0;
        float _1044 = _1043 * (_1006.x + (-0.5));
        float _1045 = _1043 * (_1006.y + (-0.5));
        float _1046 = _1043 * (_1006.z + (-0.5));
        float _1053 = exp2((_1013.w + (-0.5)) * 20.0) * 2.0;
        float _1054 = _1053 * (_1013.x + (-0.5));
        float _1055 = _1053 * (_1013.y + (-0.5));
        float _1056 = _1053 * (_1013.z + (-0.5));
        float _1063 = exp2((_1020.w + (-0.5)) * 20.0) * 2.0;
        float _1064 = _1063 * (_1020.x + (-0.5));
        float _1065 = _1063 * (_1020.y + (-0.5));
        float _1066 = _1063 * (_1020.z + (-0.5));
        float _1067 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1068 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1069 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1070 = _1034 * 0.5;
        float _1071 = _1044 * 0.5;
        float _1072 = _1054 * 0.5;
        float _1073 = dot(vec3(_1070, _1071, _1072), vec3(_1070, _1071, _1072));
        float _1078 = (_1073 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1073);
        float _1087 = (dot(vec3(_625, _626, _627), vec3(_1078 * _1070, _1078 * _1071, _1078 * _1072)) + 1.0) * 0.5;
        float _4101 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1097 = sqrt(((_1071 * _1071) + (_1070 * _1070)) + (_1072 * _1072)) / (_1067 + 9.9999997473787516355514526367188e-06);
        float _4112 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1098 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
        float _1099 = _1098 * 2.0;
        float _1103 = (1.0 - _1098) / (_1098 + 1.0);
        float _4123 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1104 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _1113 = ((((1.0 - _1104) * (_1099 + 2.0)) * exp2(log2(isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0))) * (_1099 + 1.0))) + _1104) * _1067;
        float _1114 = _1035 * 0.5;
        float _1115 = _1045 * 0.5;
        float _1116 = _1055 * 0.5;
        float _1117 = dot(vec3(_1114, _1115, _1116), vec3(_1114, _1115, _1116));
        float _1122 = (_1117 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1117);
        float _1130 = (dot(vec3(_625, _626, _627), vec3(_1122 * _1114, _1122 * _1115, _1122 * _1116)) + 1.0) * 0.5;
        float _4134 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1139 = sqrt(((_1115 * _1115) + (_1114 * _1114)) + (_1116 * _1116)) / (_1068 + 9.9999997473787516355514526367188e-06);
        float _4145 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
        float _1141 = _1140 * 2.0;
        float _1145 = (1.0 - _1140) / (_1140 + 1.0);
        float _4156 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1146 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _1155 = ((((1.0 - _1146) * (_1141 + 2.0)) * exp2(log2(isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0))) * (_1141 + 1.0))) + _1146) * _1068;
        float _1156 = _1036 * 0.5;
        float _1157 = _1046 * 0.5;
        float _1158 = _1056 * 0.5;
        float _1159 = dot(vec3(_1156, _1157, _1158), vec3(_1156, _1157, _1158));
        float _1164 = (_1159 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1159);
        float _1172 = (dot(vec3(_625, _626, _627), vec3(_1164 * _1156, _1164 * _1157, _1164 * _1158)) + 1.0) * 0.5;
        float _4167 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1181 = sqrt(((_1157 * _1157) + (_1156 * _1156)) + (_1158 * _1158)) / (_1069 + 9.9999997473787516355514526367188e-06);
        float _4178 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _1183 = _1182 * 2.0;
        float _1187 = (1.0 - _1182) / (_1182 + 1.0);
        float _4189 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _1197 = ((((1.0 - _1188) * (_1183 + 2.0)) * exp2(log2(isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))) * (_1183 + 1.0))) + _1188) * _1069;
        _1205 = _1036;
        _1207 = _1035;
        _1208 = _1034;
        _1209 = _1046;
        _1210 = _1045;
        _1211 = _1044;
        _1212 = _1056;
        _1213 = _1055;
        _1214 = _1054;
        _1215 = _1069;
        _1216 = _1068;
        _1217 = _1067;
        _1218 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0)));
        _1219 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0)));
        _1220 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0)));
    }
    else
    {
        _1205 = _1206;
        _1207 = _1206;
        _1208 = _1206;
        _1209 = _1206;
        _1210 = _1206;
        _1211 = _1206;
        _1212 = _1206;
        _1213 = _1206;
        _1214 = _1206;
        _1215 = _1206;
        _1216 = _1206;
        _1217 = _1206;
        _1218 = 0.0;
        _1219 = 0.0;
        _1220 = 0.0;
    }
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1249 = fma(_876, cbModelParam._m0[30u].z, fma(_872, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _868));
        float _1253 = fma(_876, cbModelParam._m0[31u].z, fma(_872, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _868));
        float _1257 = fma(_876, cbModelParam._m0[32u].z, fma(_872, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _868));
        float _1280 = _868 + _625;
        float _1281 = _872 + _626;
        float _1282 = _876 + _627;
        float _1292 = fma(_1282, cbModelParam._m0[30u].z, fma(_1281, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1280)) - _1249;
        float _1293 = fma(_1282, cbModelParam._m0[31u].z, fma(_1281, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1280)) - _1253;
        float _1294 = fma(_1282, cbModelParam._m0[32u].z, fma(_1281, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1280)) - _1257;
        float _1298 = inversesqrt(dot(vec3(_1292, _1293, _1294), vec3(_1292, _1293, _1294)));
        float _1311 = ((_1298 * _1292) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1249 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1312 = ((_1298 * _1293) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1253 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1313 = ((_1298 * _1294) / cbModelParam._m0[35u].z) + ((((((_1257 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1315 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1311, _1312, _1313), 0.0);
        vec4 _1322 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1311, _1312, _1313), 0.0);
        vec4 _1329 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1311, _1312, _1313), 0.0);
        vec4 _1336 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1311, _1312, _1313), 0.0);
        float _1348 = exp2((_1315.w + (-0.5)) * 20.0) * 2.0;
        float _1349 = _1348 * (_1315.x + (-0.5));
        float _1350 = _1348 * (_1315.y + (-0.5));
        float _1351 = _1348 * (_1315.z + (-0.5));
        float _1358 = exp2((_1322.w + (-0.5)) * 20.0) * 2.0;
        float _1359 = _1358 * (_1322.x + (-0.5));
        float _1360 = _1358 * (_1322.y + (-0.5));
        float _1361 = _1358 * (_1322.z + (-0.5));
        float _1368 = exp2((_1329.w + (-0.5)) * 20.0) * 2.0;
        float _1369 = _1368 * (_1329.x + (-0.5));
        float _1370 = _1368 * (_1329.y + (-0.5));
        float _1371 = _1368 * (_1329.z + (-0.5));
        float _1378 = exp2((_1336.w + (-0.5)) * 20.0) * 2.0;
        float _1379 = _1378 * (_1336.x + (-0.5));
        float _1380 = _1378 * (_1336.y + (-0.5));
        float _1381 = _1378 * (_1336.z + (-0.5));
        float _1382 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1383 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1384 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1385 = _1349 * 0.5;
        float _1386 = _1359 * 0.5;
        float _1387 = _1369 * 0.5;
        float _1388 = dot(vec3(_1385, _1386, _1387), vec3(_1385, _1386, _1387));
        float _1393 = (_1388 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1388);
        float _1401 = (dot(vec3(_625, _626, _627), vec3(_1393 * _1385, _1393 * _1386, _1393 * _1387)) + 1.0) * 0.5;
        float _4230 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1410 = sqrt(((_1386 * _1386) + (_1385 * _1385)) + (_1387 * _1387)) / (_1382 + 9.9999997473787516355514526367188e-06);
        float _4241 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1411 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
        float _1412 = _1411 * 2.0;
        float _1416 = (1.0 - _1411) / (_1411 + 1.0);
        float _4252 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1417 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
        float _1426 = ((((1.0 - _1417) * (_1412 + 2.0)) * exp2(log2(isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0))) * (_1412 + 1.0))) + _1417) * _1382;
        float _1427 = _1350 * 0.5;
        float _1428 = _1360 * 0.5;
        float _1429 = _1370 * 0.5;
        float _1430 = dot(vec3(_1427, _1428, _1429), vec3(_1427, _1428, _1429));
        float _1435 = (_1430 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1430);
        float _1443 = (dot(vec3(_625, _626, _627), vec3(_1435 * _1427, _1435 * _1428, _1435 * _1429)) + 1.0) * 0.5;
        float _4263 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1452 = sqrt(((_1428 * _1428) + (_1427 * _1427)) + (_1429 * _1429)) / (_1383 + 9.9999997473787516355514526367188e-06);
        float _4274 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1453 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
        float _1454 = _1453 * 2.0;
        float _1458 = (1.0 - _1453) / (_1453 + 1.0);
        float _4285 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1459 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
        float _1468 = ((((1.0 - _1459) * (_1454 + 2.0)) * exp2(log2(isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0))) * (_1454 + 1.0))) + _1459) * _1383;
        float _1469 = _1351 * 0.5;
        float _1470 = _1361 * 0.5;
        float _1471 = _1371 * 0.5;
        float _1472 = dot(vec3(_1469, _1470, _1471), vec3(_1469, _1470, _1471));
        float _1477 = (_1472 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1472);
        float _1485 = (dot(vec3(_625, _626, _627), vec3(_1477 * _1469, _1477 * _1470, _1477 * _1471)) + 1.0) * 0.5;
        float _4296 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1494 = sqrt(((_1470 * _1470) + (_1469 * _1469)) + (_1471 * _1471)) / (_1384 + 9.9999997473787516355514526367188e-06);
        float _4307 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1495 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
        float _1496 = _1495 * 2.0;
        float _1500 = (1.0 - _1495) / (_1495 + 1.0);
        float _4318 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1501 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
        float _1510 = ((((1.0 - _1501) * (_1496 + 2.0)) * exp2(log2(isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0))) * (_1496 + 1.0))) + _1501) * _1384;
        _1518 = _1351;
        _1519 = _1350;
        _1520 = _1349;
        _1521 = _1361;
        _1522 = _1360;
        _1523 = _1359;
        _1524 = _1371;
        _1525 = _1370;
        _1526 = _1369;
        _1527 = _1384;
        _1528 = _1383;
        _1529 = _1382;
        _1530 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0)));
        _1531 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0)));
        _1532 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0)));
    }
    else
    {
        _1518 = _1206;
        _1519 = _1206;
        _1520 = _1206;
        _1521 = _1206;
        _1522 = _1206;
        _1523 = _1206;
        _1524 = _1206;
        _1525 = _1206;
        _1526 = _1206;
        _1527 = _1206;
        _1528 = _1206;
        _1529 = _1206;
        _1530 = 0.0;
        _1531 = 0.0;
        _1532 = 0.0;
    }
    float _1542 = (cbModelParam._m0[1u].x * (_1530 - _1218)) + _1218;
    float _1543 = (cbModelParam._m0[1u].x * (_1531 - _1219)) + _1219;
    float _1544 = (cbModelParam._m0[1u].x * (_1532 - _1220)) + _1220;
    float _1565 = fma(_1544, cbSceneParam._m0[89u].z, fma(_1543, cbSceneParam._m0[89u].y, _1542 * cbSceneParam._m0[89u].x));
    float _1568 = fma(_1544, cbSceneParam._m0[90u].z, fma(_1543, cbSceneParam._m0[90u].y, _1542 * cbSceneParam._m0[90u].x));
    float _1571 = fma(_1544, cbSceneParam._m0[91u].z, fma(_1543, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1542));
    float _1586 = _812 * 0.5;
    float _1587 = _813 * 0.5;
    float _1588 = _814 * 0.5;
    float _1589 = dot(vec4(_1586, _1587, _1588, 1.0), vec4(_1520, _1523, _1526, _1529));
    float _1592 = dot(vec4(_1586, _1587, _1588, 1.0), vec4(_1519, _1522, _1525, _1528));
    float _1595 = dot(vec4(_1586, _1587, _1588, 1.0), vec4(_1518, _1521, _1524, _1527));
    float _1629;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1602 = dot(vec4(_1586, _1587, _1588, 1.0), vec4(_1205, _1209, _1212, _1215));
        float _1606 = dot(vec4(_1586, _1587, _1588, 1.0), vec4(_1207, _1210, _1213, _1216));
        float _1610 = dot(vec4(_1586, _1587, _1588, 1.0), vec4(_1208, _1211, _1214, _1217));
        float _1617 = dot(vec4(cbModelParam._m0[39u]), vec4(_1586, _1587, _1588, 1.0));
        _1629 = dot(vec3(isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0)), isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0)), isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1617) ? 0.0 : (isnan(0.0) ? _1617 : max(0.0, _1617))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1629 = 1.0;
    }
    float _1640;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1631 = dot(vec4(cbModelParam._m0[40u]), vec4(_1586, _1587, _1588, 1.0));
        _1640 = dot(vec3(isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0)), isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0)), isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1631) ? 0.0 : (isnan(0.0) ? _1631 : max(0.0, _1631))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1640 = 1.0;
    }
    float _1644 = (_1640 * cbModelParam._m0[1u].x) + (_1629 * (1.0 - cbModelParam._m0[1u].x));
    float _1654 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _628);
    float _1655 = isnan(_1654) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1654 : min(cbModelParam._m0[25u].z, _1654));
    float _1735;
    float _1737;
    float _1739;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1702 = fma(_876, cbModelParam._m0[13u].z, fma(_872, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _868)) + cbModelParam._m0[13u].w;
        float _1706 = fma(_876, cbModelParam._m0[14u].z, fma(_872, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _868)) + cbModelParam._m0[14u].w;
        float _1710 = fma(_876, cbModelParam._m0[15u].z, fma(_872, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _868)) + cbModelParam._m0[15u].w;
        float _1713 = fma(_814, cbModelParam._m0[13u].z, fma(_813, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _812));
        float _1716 = fma(_814, cbModelParam._m0[14u].z, fma(_813, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _812));
        float _1719 = fma(_814, cbModelParam._m0[15u].z, fma(_813, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _812));
        float _1747;
        if (_1713 > 0.0)
        {
            _1747 = abs((1.0 - _1702) / _1713);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1713 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1702 + 1.0) / _1713);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1747 = frontier_phi_17_15_ladder;
        }
        float _1920;
        if (_1716 > 0.0)
        {
            _1920 = abs((1.0 - _1706) / _1716);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1716 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1706 + 1.0) / _1716);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1920 = frontier_phi_26_22_ladder;
        }
        float _2215;
        if (_1719 > 0.0)
        {
            _2215 = abs((1.0 - _1710) / _1719);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1719 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1710 + 1.0) / _1719);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2215 = frontier_phi_38_33_ladder;
        }
        float _2217 = isnan(_1920) ? _1747 : (isnan(_1747) ? _1920 : min(_1747, _1920));
        float _2218 = isnan(_2215) ? _2217 : (isnan(_2217) ? _2215 : min(_2217, _2215));
        float _2222 = (_2218 * _1713) + _1702;
        float _2223 = (_2218 * _1716) + _1706;
        float _2224 = (_2218 * _1719) + _1710;
        float _2225 = _2218 * 9.9999997473787516355514526367188e-05;
        float _2227 = (-1.0) - _2225;
        float _2229 = _2225 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2224 > _2229) || ((_2224 < _2227) || ((_2223 > _2229) || ((_2223 < _2227) || ((_2222 < _2227) || (_2222 > _2229))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2369 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2224, cbModelParam._m0[9u].z, fma(_2223, cbModelParam._m0[9u].y, _2222 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2224, cbModelParam._m0[10u].z, fma(_2223, cbModelParam._m0[10u].y, _2222 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2224, cbModelParam._m0[11u].z, fma(_2223, cbModelParam._m0[11u].y, _2222 * cbModelParam._m0[11u].x))), _1655);
            frontier_phi_16_38_ladder = _2369.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2369.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2369.x * cbModelParam._m0[1u].y;
        }
        _1735 = frontier_phi_16_38_ladder_2;
        _1737 = frontier_phi_16_38_ladder_1;
        _1739 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1723 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_812, _813, _814), _1655);
        _1735 = _1723.x * cbModelParam._m0[1u].y;
        _1737 = _1723.y * cbModelParam._m0[1u].y;
        _1739 = _1723.z * cbModelParam._m0[1u].y;
    }
    float _1743 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _628);
    float _1744 = isnan(_1743) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1743 : min(cbModelParam._m0[25u].w, _1743));
    float _1834;
    float _1836;
    float _1838;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1798 = fma(_876, cbModelParam._m0[21u].z, fma(_872, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _868)) + cbModelParam._m0[21u].w;
        float _1802 = fma(_876, cbModelParam._m0[22u].z, fma(_872, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _868)) + cbModelParam._m0[22u].w;
        float _1806 = fma(_876, cbModelParam._m0[23u].z, fma(_872, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _868)) + cbModelParam._m0[23u].w;
        float _1809 = fma(_814, cbModelParam._m0[21u].z, fma(_813, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _812));
        float _1812 = fma(_814, cbModelParam._m0[22u].z, fma(_813, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _812));
        float _1815 = fma(_814, cbModelParam._m0[23u].z, fma(_813, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _812));
        float _1925;
        if (_1809 > 0.0)
        {
            _1925 = abs((1.0 - _1798) / _1809);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1809 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1798 + 1.0) / _1809);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1925 = frontier_phi_28_24_ladder;
        }
        float _2242;
        if (_1812 > 0.0)
        {
            _2242 = abs((1.0 - _1802) / _1812);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1812 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1802 + 1.0) / _1812);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2242 = frontier_phi_40_35_ladder;
        }
        float _2580;
        if (_1815 > 0.0)
        {
            _2580 = abs((1.0 - _1806) / _1815);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1815 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1806 + 1.0) / _1815);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2580 = frontier_phi_50_47_ladder;
        }
        float _2582 = isnan(_2242) ? _1925 : (isnan(_1925) ? _2242 : min(_1925, _2242));
        float _2583 = isnan(_2580) ? _2582 : (isnan(_2582) ? _2580 : min(_2582, _2580));
        float _2587 = (_2583 * _1809) + _1798;
        float _2588 = (_2583 * _1812) + _1802;
        float _2589 = (_2583 * _1815) + _1806;
        float _2590 = _2583 * 9.9999997473787516355514526367188e-05;
        float _2591 = (-1.0) - _2590;
        float _2593 = _2590 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2589 > _2593) || ((_2589 < _2591) || ((_2588 > _2593) || ((_2588 < _2591) || ((_2587 < _2591) || (_2587 > _2593))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2711 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2589, cbModelParam._m0[17u].z, fma(_2588, cbModelParam._m0[17u].y, _2587 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2589, cbModelParam._m0[18u].z, fma(_2588, cbModelParam._m0[18u].y, _2587 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2589, cbModelParam._m0[19u].z, fma(_2588, cbModelParam._m0[19u].y, _2587 * cbModelParam._m0[19u].x))), _1744);
            frontier_phi_25_50_ladder = _2711.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2711.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2711.x * cbModelParam._m0[1u].z;
        }
        _1834 = frontier_phi_25_50_ladder_2;
        _1836 = frontier_phi_25_50_ladder_1;
        _1838 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1818 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_812, _813, _814), _1744);
        _1834 = _1818.x * cbModelParam._m0[1u].z;
        _1836 = _1818.y * cbModelParam._m0[1u].z;
        _1838 = _1818.z * cbModelParam._m0[1u].z;
    }
    float _1851 = (((_839 * _789) + _840) * _804) * ((cbModelParam._m0[1u].w * (_1834 - _1735)) + _1735);
    float _1853 = (((_839 * _791) + _840) * _804) * ((cbModelParam._m0[1u].w * (_1836 - _1737)) + _1737);
    float _1855 = (((_839 * _792) + _840) * _804) * ((cbModelParam._m0[1u].w * (_1838 - _1739)) + _1739);
    float _1858 = fma(_1855, cbSceneParam._m0[89u].z, fma(_1853, cbSceneParam._m0[89u].y, _1851 * cbSceneParam._m0[89u].x));
    float _1861 = fma(_1855, cbSceneParam._m0[90u].z, fma(_1853, cbSceneParam._m0[90u].y, _1851 * cbSceneParam._m0[90u].x));
    float _1864 = fma(_1855, cbSceneParam._m0[91u].z, fma(_1853, cbSceneParam._m0[91u].y, _1851 * cbSceneParam._m0[91u].x));
    float _1899 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1903 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1907 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1911 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1912 = _1899 / _1911;
    float _1913 = _1903 / _1911;
    float _1914 = _1907 / _1911;
    float _2061;
    float _2062;
    float _2063;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1941 = ((uint(_1914 > cbSceneParam._m0[59u].y) + uint(_1914 > cbSceneParam._m0[59u].x)) + uint(_1914 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1942 = _1941 + 43u;
        uint _1950 = _1941 + 44u;
        uint _1958 = _1941 + 45u;
        uint _1966 = _1941 + 46u;
        float _1977 = fma(_1911, cbSceneParam._m0[_1942].w, fma(_1907, cbSceneParam._m0[_1942].z, fma(_1903, cbSceneParam._m0[_1942].y, _1899 * cbSceneParam._m0[_1942].x)));
        float _1981 = fma(_1911, cbSceneParam._m0[_1950].w, fma(_1907, cbSceneParam._m0[_1950].z, fma(_1903, cbSceneParam._m0[_1950].y, _1899 * cbSceneParam._m0[_1950].x)));
        float _1989 = fma(_1911, cbSceneParam._m0[_1966].w, fma(_1907, cbSceneParam._m0[_1966].z, fma(_1903, cbSceneParam._m0[_1966].y, _1899 * cbSceneParam._m0[_1966].x)));
        float _1994 = cbSceneParam._m0[33u].z * _1989;
        float _1996 = cbSceneParam._m0[33u].w * _1989;
        float _1999 = fma(_1911, cbSceneParam._m0[_1958].w, fma(_1907, cbSceneParam._m0[_1958].z, fma(_1903, cbSceneParam._m0[_1958].y, _1899 * cbSceneParam._m0[_1958].x))) / _1989;
        float _2047 = (cbSceneParam._m0[33u].x - sqrt(((_1913 * _1913) + (_1912 * _1912)) + (_1914 * _1914))) * cbSceneParam._m0[33u].y;
        float _4444 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
        float _2054 = (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1994 + _1977) / _1989, (_1996 + _1981) / _1989), _1999), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1996 + _1977) / _1989, (_1981 - _1994) / _1989), _1999), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1977 - _1994) / _1989, (_1981 - _1996) / _1989), _1999), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1977 - _1996) / _1989, (_1994 + _1981) / _1989), _1999), 0.0)).x), vec4(0.25)));
        _2061 = 1.0 - (_2054 * cbSceneParam._m0[34u].x);
        _2062 = 1.0 - (_2054 * cbSceneParam._m0[34u].y);
        _2063 = 1.0 - (_2054 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2061 = 1.0;
        _2062 = 1.0;
        _2063 = 1.0;
    }
    float _2127;
    float _2129;
    float _2131;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2115 = fma(_1911, cbSceneParam._m0[63u].w, fma(_1907, cbSceneParam._m0[63u].z, fma(_1903, cbSceneParam._m0[63u].y, _1899 * cbSceneParam._m0[63u].x)));
        float _2116 = fma(_1911, cbSceneParam._m0[60u].w, fma(_1907, cbSceneParam._m0[60u].z, fma(_1903, cbSceneParam._m0[60u].y, _1899 * cbSceneParam._m0[60u].x))) / _2115;
        float _2117 = fma(_1911, cbSceneParam._m0[61u].w, fma(_1907, cbSceneParam._m0[61u].z, fma(_1903, cbSceneParam._m0[61u].y, _1899 * cbSceneParam._m0[61u].x))) / _2115;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2116 >= cbSceneParam._m0[64u].x) && (_2117 >= cbSceneParam._m0[64u].y)) && (_2116 <= cbSceneParam._m0[64u].z)) && (_2117 <= cbSceneParam._m0[64u].w))
        {
            float _2255 = fma(_1911, cbSceneParam._m0[62u].w, fma(_1907, cbSceneParam._m0[62u].z, fma(_1903, cbSceneParam._m0[62u].y, _1899 * cbSceneParam._m0[62u].x))) / _2115;
            float _2259 = isnan(cbSceneParam._m0[41u].w) ? _2255 : (isnan(_2255) ? cbSceneParam._m0[41u].w : max(_2255, cbSceneParam._m0[41u].w));
            float _2302 = (cbSceneParam._m0[33u].x - sqrt(((_1913 * _1913) + (_1912 * _1912)) + (_1914 * _1914))) * cbSceneParam._m0[33u].y;
            float _4460 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
            float _2309 = (isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2116, cbSceneParam._m0[33u].w + _2117), _2259), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2116, _2117 - cbSceneParam._m0[33u].z), _2259), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2116 - cbSceneParam._m0[33u].z, _2117 - cbSceneParam._m0[33u].w), _2259), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2116 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2117), _2259), 0.0)).x), vec4(0.25)));
            float _2313 = 1.0 - (_2309 * cbSceneParam._m0[34u].x);
            float _2314 = 1.0 - (_2309 * cbSceneParam._m0[34u].y);
            float _2315 = 1.0 - (_2309 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2315) ? _2063 : (isnan(_2063) ? _2315 : min(_2063, _2315));
            frontier_phi_37_36_ladder_1 = isnan(_2314) ? _2062 : (isnan(_2062) ? _2314 : min(_2062, _2314));
            frontier_phi_37_36_ladder_2 = isnan(_2313) ? _2061 : (isnan(_2061) ? _2313 : min(_2061, _2313));
        }
        else
        {
            frontier_phi_37_36_ladder = _2063;
            frontier_phi_37_36_ladder_1 = _2062;
            frontier_phi_37_36_ladder_2 = _2061;
        }
        _2127 = frontier_phi_37_36_ladder_2;
        _2129 = frontier_phi_37_36_ladder_1;
        _2131 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2127 = _2061;
        _2129 = _2062;
        _2131 = _2063;
    }
    uvec4 _2136 = floatBitsToUint(cbInstanceData._m0[_764 + 5u]);
    uint _2138 = _2136.x * 14u;
    uint _2139 = _2138 + 13u;
    float _2146 = _804 + (-1.0);
    float _2151 = (cbLight._m0[_2139].x * _2146) + 1.0;
    float _2152 = (cbLight._m0[_2139].y * _2146) + 1.0;
    float _2153 = (cbLight._m0[_2139].z * _2146) + 1.0;
    float _2154 = (cbLight._m0[_2139].w * _2146) + 1.0;
    uint _2155 = _2138 + 5u;
    float _2161 = isnan(1.0) ? _2152 : (isnan(_2152) ? 1.0 : min(_2152, 1.0));
    uint _2165 = _2138 + 4u;
    float _2174 = isnan(1.0) ? _2151 : (isnan(_2151) ? 1.0 : min(_2151, 1.0));
    uint _2178 = _2138 | 1u;
    float _2189 = dot(vec3(cbLight._m0[_2138].xyz), vec3(_625, _626, _627));
    float _2192 = dot(vec3(cbLight._m0[_2178].xyz), vec3(_625, _626, _627));
    float _4496 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
    float _4507 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
    float _2197 = (isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0))) * 0.3183098733425140380859375;
    float _2199 = (isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0))) * 0.3183098733425140380859375;
    float _2206 = ((cbLight._m0[_2155].x * _2161) * _2199) + (((cbLight._m0[_2165].x * _2127) * _2174) * _2197);
    float _2207 = ((_2161 * cbLight._m0[_2155].y) * _2199) + (((cbLight._m0[_2165].y * _2129) * _2174) * _2197);
    float _2208 = ((_2161 * cbLight._m0[_2155].z) * _2199) + (((cbLight._m0[_2165].z * _2131) * _2174) * _2197);
    uvec4 _2212 = floatBitsToUint(cbLight._m0[_2138 + 12u]);
    bool _2214 = _2212.x == 0u;
    float _2316;
    float _2318;
    float _2320;
    if (_2214)
    {
        _2316 = _2206;
        _2318 = _2207;
        _2320 = _2208;
    }
    else
    {
        uint _2324 = _2138 + 6u;
        float _2340 = (dot(vec3(cbLight._m0[_2138 + 2u].xyz), vec3(_625, _626, _627)) * 0.5) + 0.5;
        float _2341 = _2340 * _2340;
        float _4518 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
        float _2342 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
        float _2343 = isnan(1.0) ? _2153 : (isnan(_2153) ? 1.0 : min(_2153, 1.0));
        _2316 = (((cbLight._m0[_2324].x * 0.3183098733425140380859375) * _2342) * _2343) + _2206;
        _2318 = (((cbLight._m0[_2324].y * 0.3183098733425140380859375) * _2342) * _2343) + _2207;
        _2320 = (((cbLight._m0[_2324].z * 0.3183098733425140380859375) * _2342) * _2343) + _2208;
    }
    bool _2323 = _2212.y == 0u;
    float _2378;
    float _2380;
    float _2382;
    if (_2323)
    {
        _2378 = _2316;
        _2380 = _2318;
        _2382 = _2320;
    }
    else
    {
        uint _2551 = _2138 + 7u;
        float _2567 = (dot(vec3(cbLight._m0[_2138 + 3u].xyz), vec3(_625, _626, _627)) * 0.5) + 0.5;
        float _2568 = _2567 * _2567;
        float _4534 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
        float _2569 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
        float _2570 = isnan(1.0) ? _2154 : (isnan(_2154) ? 1.0 : min(_2154, 1.0));
        _2378 = (((cbLight._m0[_2551].x * 0.3183098733425140380859375) * _2569) * _2570) + _2316;
        _2380 = (((cbLight._m0[_2551].y * 0.3183098733425140380859375) * _2569) * _2570) + _2318;
        _2382 = (((cbLight._m0[_2551].z * 0.3183098733425140380859375) * _2569) * _2570) + _2320;
    }
    uint _2385 = _2138 + 8u;
    float _2398 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2138].w)) * _628) * 0.949999988079071044921875);
    float _2399 = _2398 * _2398;
    float _2400 = cbLight._m0[_2138].x + _706;
    float _2401 = cbLight._m0[_2138].y + _707;
    float _2402 = cbLight._m0[_2138].z + _708;
    float _2406 = inversesqrt(dot(vec3(_2400, _2401, _2402), vec3(_2400, _2401, _2402)));
    float _2407 = _2406 * _2400;
    float _2408 = _2406 * _2401;
    float _2409 = _2406 * _2402;
    float _2410 = dot(vec3(_625, _626, _627), vec3(cbLight._m0[_2138].xyz));
    float _4550 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
    float _2413 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
    float _4561 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _2414 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
    float _2415 = dot(vec3(_625, _626, _627), vec3(_2407, _2408, _2409));
    float _4572 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
    float _2418 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
    float _2419 = dot(vec3(cbLight._m0[_2138].xyz), vec3(_2407, _2408, _2409));
    float _4583 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
    float _2423 = _2399 * _2399;
    float _2427 = ((_2418 * _2418) * (_2423 + (-1.0))) + 1.0;
    float _2435 = exp2(log2(1.0 - (isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0)))) * 5.0);
    float _2436 = 0.959999978542327880859375 - _786;
    float _2438 = 0.959999978542327880859375 - _787;
    float _2439 = 0.959999978542327880859375 - _788;
    float _2446 = 1.0 - _2399;
    float _2457 = (0.5 / (((_2414 * ((_2413 * _2446) + _2399)) + 9.9999999392252902907785028219223e-09) + (((_2414 * _2446) + _2399) * _2413))) * _2413;
    float _4594 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
    float _2459 = (isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0))) * (_2423 / ((_2427 * _2427) * 3.141590118408203125));
    uint _2473 = _2138 + 9u;
    float _2484 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2178].w)) * _628) * 0.949999988079071044921875);
    float _2485 = _2484 * _2484;
    float _2486 = cbLight._m0[_2178].x + _706;
    float _2487 = cbLight._m0[_2178].y + _707;
    float _2488 = cbLight._m0[_2178].z + _708;
    float _2492 = inversesqrt(dot(vec3(_2486, _2487, _2488), vec3(_2486, _2487, _2488)));
    float _2493 = _2492 * _2486;
    float _2494 = _2492 * _2487;
    float _2495 = _2492 * _2488;
    float _2496 = dot(vec3(_625, _626, _627), vec3(cbLight._m0[_2178].xyz));
    float _4605 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
    float _2499 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
    float _2500 = dot(vec3(_625, _626, _627), vec3(_2493, _2494, _2495));
    float _4616 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
    float _2503 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
    float _2504 = dot(vec3(cbLight._m0[_2178].xyz), vec3(_2493, _2494, _2495));
    float _4627 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
    float _2508 = _2485 * _2485;
    float _2512 = ((_2503 * _2503) * (_2508 + (-1.0))) + 1.0;
    float _2519 = exp2(log2(1.0 - (isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0)))) * 5.0);
    float _2526 = 1.0 - _2485;
    float _2536 = (0.5 / (((_2414 * ((_2499 * _2526) + _2485)) + 9.9999999392252902907785028219223e-09) + (((_2414 * _2526) + _2485) * _2499))) * _2499;
    float _4638 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
    float _2538 = (isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0))) * (_2508 / ((_2512 * _2512) * 3.141590118408203125));
    float _2548 = (((((_2519 * _2436) + _789) * cbLight._m0[_2473].x) * _2538) * _2161) + ((((cbLight._m0[_2385].x * _2127) * ((_2435 * _2436) + _789)) * _2459) * _2174);
    float _2549 = (((((_2519 * _2438) + _791) * cbLight._m0[_2473].y) * _2538) * _2161) + ((((cbLight._m0[_2385].y * _2129) * ((_2435 * _2438) + _791)) * _2459) * _2174);
    float _2550 = (((((_2519 * _2439) + _792) * cbLight._m0[_2473].z) * _2538) * _2161) + ((((cbLight._m0[_2385].z * _2131) * ((_2435 * _2439) + _792)) * _2459) * _2174);
    float _2606;
    float _2608;
    float _2610;
    if (_2214)
    {
        _2606 = _2548;
        _2608 = _2549;
        _2610 = _2550;
    }
    else
    {
        uint _2612 = _2138 + 2u;
        uint _2616 = _2138 + 10u;
        float _2630 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2612].w)) * _628) * 0.949999988079071044921875);
        float _2631 = _2630 * _2630;
        float _2632 = cbLight._m0[_2612].x + _706;
        float _2633 = cbLight._m0[_2612].y + _707;
        float _2634 = cbLight._m0[_2612].z + _708;
        float _2638 = inversesqrt(dot(vec3(_2632, _2633, _2634), vec3(_2632, _2633, _2634)));
        float _2639 = _2638 * _2632;
        float _2640 = _2638 * _2633;
        float _2641 = _2638 * _2634;
        float _2642 = dot(vec3(_625, _626, _627), vec3(cbLight._m0[_2612].xyz));
        float _4649 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
        float _2645 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
        float _2646 = dot(vec3(_625, _626, _627), vec3(_2639, _2640, _2641));
        float _4660 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
        float _2649 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
        float _2650 = dot(vec3(cbLight._m0[_2612].xyz), vec3(_2639, _2640, _2641));
        float _4671 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
        float _2654 = _2631 * _2631;
        float _2658 = ((_2649 * _2649) * (_2654 + (-1.0))) + 1.0;
        float _2665 = exp2(log2(1.0 - (isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0)))) * 5.0);
        float _2672 = 1.0 - _2631;
        float _2682 = (0.5 / (((_2414 * ((_2645 * _2672) + _2631)) + 9.9999999392252902907785028219223e-09) + (((_2414 * _2672) + _2631) * _2645))) * _2645;
        float _4682 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
        float _2684 = (isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0))) * (_2654 / ((_2658 * _2658) * 3.141590118408203125));
        float _2685 = isnan(1.0) ? _2153 : (isnan(_2153) ? 1.0 : min(_2153, 1.0));
        _2606 = (((((_2665 * _2436) + _789) * cbLight._m0[_2616].x) * _2684) * _2685) + _2548;
        _2608 = (((((_2665 * _2438) + _791) * cbLight._m0[_2616].y) * _2684) * _2685) + _2549;
        _2610 = (((((_2665 * _2439) + _792) * cbLight._m0[_2616].z) * _2684) * _2685) + _2550;
    }
    float _2716;
    float _2718;
    float _2720;
    if (_2323)
    {
        _2716 = _2606;
        _2718 = _2608;
        _2720 = _2610;
    }
    else
    {
        uint _2727 = _2138 + 3u;
        uint _2731 = _2138 + 11u;
        float _2745 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2727].w)) * _628) * 0.949999988079071044921875);
        float _2746 = _2745 * _2745;
        float _2747 = cbLight._m0[_2727].x + _706;
        float _2748 = cbLight._m0[_2727].y + _707;
        float _2749 = cbLight._m0[_2727].z + _708;
        float _2753 = inversesqrt(dot(vec3(_2747, _2748, _2749), vec3(_2747, _2748, _2749)));
        float _2754 = _2753 * _2747;
        float _2755 = _2753 * _2748;
        float _2756 = _2753 * _2749;
        float _2757 = dot(vec3(_625, _626, _627), vec3(cbLight._m0[_2727].xyz));
        float _4698 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0));
        float _2760 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
        float _2761 = dot(vec3(_625, _626, _627), vec3(_2754, _2755, _2756));
        float _4709 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0));
        float _2764 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
        float _2765 = dot(vec3(cbLight._m0[_2727].xyz), vec3(_2754, _2755, _2756));
        float _4720 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
        float _2769 = _2746 * _2746;
        float _2773 = ((_2764 * _2764) * (_2769 + (-1.0))) + 1.0;
        float _2780 = exp2(log2(1.0 - (isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0)))) * 5.0);
        float _2787 = 1.0 - _2746;
        float _2797 = (0.5 / (((_2414 * ((_2760 * _2787) + _2746)) + 9.9999999392252902907785028219223e-09) + (((_2414 * _2787) + _2746) * _2760))) * _2760;
        float _4731 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
        float _2799 = (isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0))) * (_2769 / ((_2773 * _2773) * 3.141590118408203125));
        float _2800 = isnan(1.0) ? _2154 : (isnan(_2154) ? 1.0 : min(_2154, 1.0));
        _2716 = (((((_2780 * _2436) + _789) * cbLight._m0[_2731].x) * _2799) * _2800) + _2606;
        _2718 = (((((_2780 * _2438) + _791) * cbLight._m0[_2731].y) * _2799) * _2800) + _2608;
        _2720 = (((((_2780 * _2439) + _792) * cbLight._m0[_2731].z) * _2799) * _2800) + _2610;
    }
    float _2866;
    float _2868;
    float _2870;
    float _2872;
    float _2874;
    float _2876;
    if (_2136.y == 0u)
    {
        uvec4 _2821 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2822 = _2821.x;
        uint _2833 = uint((float(_2821.y) * floor(float(uint(cbSceneParam._m0[85u].y * _727) / _2822))) + floor(float(uint(cbSceneParam._m0[85u].x * _726) / _2822)));
        float _2843 = (log2(_1914 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2844 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0));
        uint _2847 = uint(isnan(14.0) ? _2844 : (isnan(_2844) ? 14.0 : min(_2844, 14.0)));
        uvec4 _2852 = texelFetch(g_lightClusterGridBuffer, int(((_2847 << 2u) + (_2833 << 6u)) >> 2u));
        uint _2853 = _2852.x;
        uint _2854 = _2821.z;
        float _2962;
        float _2964;
        float _2966;
        float _2968;
        float _2970;
        float _2972;
        if (((((1u << ((_2854 >> 4u) & 15u)) + 4294967295u) & _2853) == 0u) || ((_2854 & 240u) == 0u))
        {
            _2962 = 0.0;
            _2964 = 0.0;
            _2966 = 0.0;
            _2968 = 0.0;
            _2970 = 0.0;
            _2972 = 0.0;
        }
        else
        {
            float _2963;
            float _2965;
            float _2967;
            float _2969;
            float _2971;
            float _2973;
            float _3123 = 0.0;
            float _3124 = 0.0;
            float _3125 = 0.0;
            float _3126 = 0.0;
            float _3127 = 0.0;
            float _3128 = 0.0;
            uint _3129 = 0u;
            uint _3138;
            bool _3139;
            for (;;)
            {
                _3138 = texelFetch(g_lightClassification, int((((_2847 << 5u) + (_2833 << 9u)) + (_3129 << 2u)) >> 2u)).x;
                _3139 = _3138 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3139)
                {
                    frontier_phi_71_pred = _3128;
                    frontier_phi_71_pred_1 = _3127;
                    frontier_phi_71_pred_2 = _3126;
                    frontier_phi_71_pred_3 = _3125;
                    frontier_phi_71_pred_4 = _3124;
                    frontier_phi_71_pred_5 = _3123;
                }
                else
                {
                    float _3268;
                    float _3269;
                    float _3270;
                    float _3271;
                    float _3272;
                    float _3273;
                    uint _3274;
                    _3268 = _3123;
                    _3269 = _3124;
                    _3270 = _3125;
                    _3271 = _3126;
                    _3272 = _3127;
                    _3273 = _3128;
                    _3274 = _3138;
                    float _3195;
                    float _3196;
                    float _3197;
                    float _3198;
                    float _3199;
                    float _3200;
                    for (;;)
                    {
                        uint _3278 = uint(findLSB(_3274)) + (_3129 << 5u);
                        uint _3275 = (_3274 + 4294967295u) & _3274;
                        uint _3280 = _3278 * 48u;
                        vec4 _3294 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3280)).x, texelFetch(g_PointLightRenderingBuffer, int(_3280 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3280 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3280 + 3u)).x));
                        uint _3300 = (_3278 * 48u) + 4u;
                        vec4 _3313 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3300)).x, texelFetch(g_PointLightRenderingBuffer, int(_3300 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3300 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3300 + 3u)).x));
                        uint _3319 = (_3278 * 48u) + 8u;
                        vec3 _3330 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3319)).x, texelFetch(g_PointLightRenderingBuffer, int(_3319 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3319 + 2u)).x));
                        float _3334 = _3294.x - _1912;
                        float _3335 = _3294.y - _1913;
                        float _3336 = _3294.z - _1914;
                        float _3337 = dot(vec3(_3334, _3335, _3336), vec3(_3334, _3335, _3336));
                        float _3340 = inversesqrt(_3337);
                        float _3341 = _3340 * _3334;
                        float _3342 = _3340 * _3335;
                        float _3343 = _3340 * _3336;
                        float _3344 = dot(vec3(_745, _748, _751), vec3(_3341, _3342, _3343));
                        float _3349 = 1.0 - (_3337 * _3294.w);
                        float _4757 = isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0));
                        float _3350 = isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0));
                        float _3351 = sqrt(_3337) * _3313.w;
                        float _3354 = 1.39999997615814208984375 / (_3351 + 1.39999997615814208984375);
                        float _3355 = _3354 * _3354;
                        float _3358 = ((1.0 - _3355) * _3344) + _3355;
                        float _3361 = _3351 * _3351;
                        float _3365 = ((isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0))) * _3350) / ((_3361 * 0.699999988079071044921875) + 1.0);
                        float _3369 = (-0.0) - _1912;
                        float _3370 = (-0.0) - _1913;
                        float _3371 = (-0.0) - _1914;
                        float _3375 = inversesqrt(dot(vec3(_3369, _3370, _3371), vec3(_3369, _3370, _3371)));
                        float _3376 = _3375 * _3369;
                        float _3377 = _3375 * _3370;
                        float _3378 = _3375 * _3371;
                        float _3385 = exp2(log2(1.0 / ((_3361 * 3.5) + 5.0)) * 0.25);
                        float _3386 = 1.0 - _820;
                        float _3393 = sqrt(1.0 - ((1.0 - (_3386 * _3386)) * (1.0 - (_3385 * _3385))));
                        float _3394 = _3393 * _3393;
                        float _3395 = _3394 * _3394;
                        float _3396 = _3376 + _3341;
                        float _3397 = _3377 + _3342;
                        float _3398 = _3378 + _3343;
                        float _3402 = inversesqrt(dot(vec3(_3396, _3397, _3398), vec3(_3396, _3397, _3398)));
                        float _3406 = dot(vec3(_745, _748, _751), vec3(_3376, _3377, _3378));
                        float _4773 = isnan(0.0) ? _3406 : (isnan(_3406) ? 0.0 : max(_3406, 0.0));
                        float _3409 = isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0));
                        float _3410 = dot(vec3(_745, _748, _751), vec3(_3402 * _3396, _3402 * _3397, _3402 * _3398));
                        float _4784 = isnan(0.0) ? _3410 : (isnan(_3410) ? 0.0 : max(_3410, 0.0));
                        float _3413 = isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0));
                        float _3417 = ((_3413 * _3413) * (_3395 + (-1.0))) + 1.0;
                        float _3418 = _3354 * _3394;
                        float _3419 = _3418 * _3418;
                        float _3422 = ((1.0 - _3419) * _3344) + _3419;
                        float _4795 = isnan(0.0) ? _3422 : (isnan(_3422) ? 0.0 : max(_3422, 0.0));
                        float _3423 = isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0));
                        float _3424 = 1.0 - _3394;
                        float _3434 = (0.5 / (((_3423 * ((_3409 * _3424) + _3394)) + 9.9999999392252902907785028219223e-09) + (((_3423 * _3424) + _3394) * _3409))) * _3423;
                        float _4806 = isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0));
                        float _3445 = (((_3395 * 3.1415927410125732421875) * (isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0)))) / ((_3417 * _3417) * ((_3361 * 2.1991131305694580078125) + 3.141590118408203125))) * _3350;
                        _3198 = (_3365 * _3313.x) + _3271;
                        _3199 = (_3365 * _3313.y) + _3272;
                        _3200 = (_3365 * _3313.z) + _3273;
                        _3195 = (_3445 * _3330.x) + _3268;
                        _3196 = (_3445 * _3330.y) + _3269;
                        _3197 = (_3445 * _3330.z) + _3270;
                        if (_3275 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3268 = _3195;
                            _3269 = _3196;
                            _3270 = _3197;
                            _3271 = _3198;
                            _3272 = _3199;
                            _3273 = _3200;
                            _3274 = _3275;
                        }
                    }
                    frontier_phi_71_pred = _3200;
                    frontier_phi_71_pred_1 = _3199;
                    frontier_phi_71_pred_2 = _3198;
                    frontier_phi_71_pred_3 = _3197;
                    frontier_phi_71_pred_4 = _3196;
                    frontier_phi_71_pred_5 = _3195;
                }
                _2973 = frontier_phi_71_pred;
                _2971 = frontier_phi_71_pred_1;
                _2969 = frontier_phi_71_pred_2;
                _2967 = frontier_phi_71_pred_3;
                _2965 = frontier_phi_71_pred_4;
                _2963 = frontier_phi_71_pred_5;
                uint _3130 = _3129 + 1u;
                if (_3130 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3123 = _2963;
                    _3124 = _2965;
                    _3125 = _2967;
                    _3126 = _2969;
                    _3127 = _2971;
                    _3128 = _2973;
                    _3129 = _3130;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2962 = _2963;
            _2964 = _2965;
            _2966 = _2967;
            _2968 = _2969;
            _2970 = _2971;
            _2972 = _2973;
        }
        uvec4 _2976 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2977 = _2976.z;
        uint _2979 = (_2977 >> 8u) & 15u;
        float _3091;
        float _3093;
        float _3095;
        float _3097;
        float _3099;
        float _3101;
        if (((4294967295u << _2979) & _2853) == 0u)
        {
            _3091 = _2962;
            _3093 = _2964;
            _3095 = _2966;
            _3097 = _2968;
            _3099 = _2970;
            _3101 = _2972;
        }
        else
        {
            float _3116 = inversesqrt(dot(vec3(_1912, _1913, _1914), vec3(_1912, _1913, _1914)));
            float _3117 = _3116 * _1912;
            float _3118 = _3116 * _1913;
            float _3119 = _3116 * _1914;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2979 < ((_2977 >> 12u) & 15u))
            {
                float _3092;
                float _3094;
                float _3096;
                float _3098;
                float _3100;
                float _3102;
                float _3251 = _2962;
                float _3252 = _2964;
                float _3253 = _2966;
                float _3254 = _2968;
                float _3255 = _2970;
                float _3256 = _2972;
                uint _3257 = _2979;
                uint _3266;
                bool _3267;
                for (;;)
                {
                    _3266 = texelFetch(g_lightClassification, int((((_2847 << 5u) + (_2833 << 9u)) + (_3257 << 2u)) >> 2u)).x;
                    _3267 = _3266 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3267)
                    {
                        frontier_phi_82_pred = _3256;
                        frontier_phi_82_pred_1 = _3255;
                        frontier_phi_82_pred_2 = _3254;
                        frontier_phi_82_pred_3 = _3253;
                        frontier_phi_82_pred_4 = _3252;
                        frontier_phi_82_pred_5 = _3251;
                    }
                    else
                    {
                        float _3459;
                        float _3460;
                        float _3461;
                        float _3462;
                        float _3463;
                        float _3464;
                        float _3753;
                        float _3754;
                        float _3755;
                        float _3756;
                        float _3757;
                        float _3758;
                        float _3472 = _3251;
                        float _3473 = _3252;
                        float _3474 = _3253;
                        float _3475 = _3254;
                        float _3476 = _3255;
                        float _3477 = _3256;
                        uint _3478 = _3266;
                        uint _3479;
                        vec4 _3504;
                        float _3505;
                        vec4 _3520;
                        vec3 _3532;
                        vec4 _3547;
                        vec4 _3562;
                        float _3609;
                        bool _3610;
                        for (;;)
                        {
                            uint _3489 = ((_3257 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3478));
                            _3479 = (_3478 + 4294967295u) & _3478;
                            uint _3491 = _3489 * 40u;
                            _3504 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3491)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 3u)).x));
                            _3505 = _3504.w;
                            uint _3507 = (_3489 * 40u) + 4u;
                            _3520 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3507)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 3u)).x));
                            uint _3522 = (_3489 * 40u) + 8u;
                            _3532 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3522)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 2u)).x));
                            uint _3534 = (_3489 * 40u) + 16u;
                            _3547 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3534)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 3u)).x));
                            uint _3549 = (_3489 * 40u) + 20u;
                            _3562 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3549)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 3u)).x));
                            uint _3565 = (_3489 * 40u) + 24u;
                            vec4 _3578 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3565)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 3u)).x));
                            uint _3584 = (_3489 * 40u) + 28u;
                            vec4 _3597 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3584)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 3u)).x));
                            _3609 = fma(_1914, _3597.z, fma(_1913, _3597.y, _3597.x * _1912)) + _3597.w;
                            _3610 = !((fma(_1914, _3578.z, fma(_1913, _3578.y, _3578.x * _1912)) + _3578.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3610)
                            {
                                float _3637 = _3504.x - _1912;
                                float _3638 = _3504.y - _1913;
                                float _3639 = _3504.z - _1914;
                                float _3640 = dot(vec3(_3637, _3638, _3639), vec3(_3637, _3638, _3639));
                                float _3643 = inversesqrt(_3640);
                                float _3644 = _3643 * _3637;
                                float _3645 = _3643 * _3638;
                                float _3646 = _3643 * _3639;
                                float _3650 = 1.0 - (_3640 / (_3505 * _3505));
                                float _4817 = isnan(0.0) ? _3650 : (isnan(_3650) ? 0.0 : max(_3650, 0.0));
                                float _3651 = isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0));
                                float _3655 = sqrt(_3640) * _3520.w;
                                float _3657 = 1.39999997615814208984375 / (_3655 + 1.39999997615814208984375);
                                float _3658 = _3657 * _3657;
                                float _3661 = ((1.0 - _3658) * dot(vec3(_3644, _3645, _3646), vec3(_745, _748, _751))) + _3658;
                                float _3664 = _3655 * _3655;
                                float _3668 = (fma(_1914, _3547.z, fma(_1913, _3547.y, _3547.x * _1912)) + _3547.w) / _3609;
                                float _3669 = (fma(_1914, _3562.z, fma(_1913, _3562.y, _3562.x * _1912)) + _3562.w) / _3609;
                                float _3673 = 1.0 - dot(vec2(_3668, _3669), vec2(_3668, _3669));
                                float _4833 = isnan(0.0) ? _3673 : (isnan(_3673) ? 0.0 : max(_3673, 0.0));
                                float _3674 = isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0));
                                float _3675 = _3674 * (((isnan(0.0) ? _3661 : (isnan(_3661) ? 0.0 : max(_3661, 0.0))) * _3651) / ((_3664 * 0.699999988079071044921875) + 1.0));
                                float _3687 = exp2(log2(1.0 / ((_3664 * 3.5) + 5.0)) * 0.25);
                                float _3688 = 1.0 - _820;
                                float _3695 = sqrt(1.0 - ((1.0 - (_3688 * _3688)) * (1.0 - (_3687 * _3687))));
                                float _3696 = _3695 * _3695;
                                float _3697 = _3696 * _3696;
                                float _3698 = _3644 - _3117;
                                float _3699 = _3645 - _3118;
                                float _3700 = _3646 - _3119;
                                float _3704 = inversesqrt(dot(vec3(_3698, _3699, _3700), vec3(_3698, _3699, _3700)));
                                float _3708 = dot(vec3(_745, _748, _751), vec3((-0.0) - _3117, (-0.0) - _3118, (-0.0) - _3119));
                                float _4844 = isnan(0.0) ? _3708 : (isnan(_3708) ? 0.0 : max(_3708, 0.0));
                                float _3711 = isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0));
                                float _3712 = dot(vec3(_745, _748, _751), vec3(_3704 * _3698, _3704 * _3699, _3704 * _3700));
                                float _4855 = isnan(0.0) ? _3712 : (isnan(_3712) ? 0.0 : max(_3712, 0.0));
                                float _3715 = isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0));
                                float _3719 = ((_3715 * _3715) * (_3697 + (-1.0))) + 1.0;
                                float _3720 = _3657 * _3696;
                                float _3721 = _3720 * _3720;
                                float _3727 = ((1.0 - _3721) * dot(vec3(_745, _748, _751), vec3(_3644, _3645, _3646))) + _3721;
                                float _4866 = isnan(0.0) ? _3727 : (isnan(_3727) ? 0.0 : max(_3727, 0.0));
                                float _3728 = isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0));
                                float _3729 = 1.0 - _3696;
                                float _3739 = (0.5 / (((_3728 * ((_3711 * _3729) + _3696)) + 9.9999999392252902907785028219223e-09) + (((_3728 * _3729) + _3696) * _3711))) * _3728;
                                float _4877 = isnan(0.0) ? _3739 : (isnan(_3739) ? 0.0 : max(_3739, 0.0));
                                float _3749 = (_3674 * _3651) * (((_3697 * 3.1415927410125732421875) * (isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0)))) / ((_3719 * _3719) * ((_3664 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3675 * _3520.z;
                                frontier_phi_88_pred_1 = _3675 * _3520.y;
                                frontier_phi_88_pred_2 = _3675 * _3520.x;
                                frontier_phi_88_pred_3 = _3749 * _3532.z;
                                frontier_phi_88_pred_4 = _3749 * _3532.y;
                                frontier_phi_88_pred_5 = _3749 * _3532.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3758 = frontier_phi_88_pred;
                            _3757 = frontier_phi_88_pred_1;
                            _3756 = frontier_phi_88_pred_2;
                            _3755 = frontier_phi_88_pred_3;
                            _3754 = frontier_phi_88_pred_4;
                            _3753 = frontier_phi_88_pred_5;
                            _3462 = _3756 + _3475;
                            _3463 = _3757 + _3476;
                            _3464 = _3758 + _3477;
                            _3459 = _3753 + _3472;
                            _3460 = _3754 + _3473;
                            _3461 = _3755 + _3474;
                            if (_3479 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3472 = _3459;
                                _3473 = _3460;
                                _3474 = _3461;
                                _3475 = _3462;
                                _3476 = _3463;
                                _3477 = _3464;
                                _3478 = _3479;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3464;
                        frontier_phi_82_pred_1 = _3463;
                        frontier_phi_82_pred_2 = _3462;
                        frontier_phi_82_pred_3 = _3461;
                        frontier_phi_82_pred_4 = _3460;
                        frontier_phi_82_pred_5 = _3459;
                    }
                    _3102 = frontier_phi_82_pred;
                    _3100 = frontier_phi_82_pred_1;
                    _3098 = frontier_phi_82_pred_2;
                    _3096 = frontier_phi_82_pred_3;
                    _3094 = frontier_phi_82_pred_4;
                    _3092 = frontier_phi_82_pred_5;
                    uint _3258 = _3257 + 1u;
                    if (_3258 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3251 = _3092;
                        _3252 = _3094;
                        _3253 = _3096;
                        _3254 = _3098;
                        _3255 = _3100;
                        _3256 = _3102;
                        _3257 = _3258;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3098;
                frontier_phi_63_64_ladder_1 = _3102;
                frontier_phi_63_64_ladder_2 = _3100;
                frontier_phi_63_64_ladder_3 = _3096;
                frontier_phi_63_64_ladder_4 = _3094;
                frontier_phi_63_64_ladder_5 = _3092;
            }
            else
            {
                frontier_phi_63_64_ladder = _2968;
                frontier_phi_63_64_ladder_1 = _2972;
                frontier_phi_63_64_ladder_2 = _2970;
                frontier_phi_63_64_ladder_3 = _2966;
                frontier_phi_63_64_ladder_4 = _2964;
                frontier_phi_63_64_ladder_5 = _2962;
            }
            _3091 = frontier_phi_63_64_ladder_5;
            _3093 = frontier_phi_63_64_ladder_4;
            _3095 = frontier_phi_63_64_ladder_3;
            _3097 = frontier_phi_63_64_ladder;
            _3099 = frontier_phi_63_64_ladder_2;
            _3101 = frontier_phi_63_64_ladder_1;
        }
        float _3106 = isnan(1.0) ? _804 : (isnan(_804) ? 1.0 : min(_804, 1.0));
        _2866 = (_3106 * _3097) + _2378;
        _2868 = (_3106 * _3099) + _2380;
        _2870 = (_3106 * _3101) + _2382;
        _2872 = ((_3091 * _789) * _3106) + _2716;
        _2874 = ((_3093 * _791) * _3106) + _2718;
        _2876 = ((_3095 * _792) * _3106) + _2720;
    }
    else
    {
        _2866 = _2378;
        _2868 = _2380;
        _2870 = _2382;
        _2872 = _2716;
        _2874 = _2718;
        _2876 = _2720;
    }
    uint _2882 = _765 + uint(cbMatDynParam._m0[0u].w);
    float _2888 = ((((((_572.x - _569) * _505) + _569) * cbMtdParam._m0[13u].x) + ((((_526.x - _523) * _505) + _523) * cbMtdParam._m0[11u].x)) * _599) * cbInstanceData._m0[_2882].x;
    float _2889 = ((((((_572.y - _570) * _505) + _570) * cbMtdParam._m0[13u].y) + ((((_526.y - _524) * _505) + _524) * cbMtdParam._m0[11u].y)) * _599) * cbInstanceData._m0[_2882].y;
    float _2890 = ((((((_572.z - _571) * _505) + _571) * cbMtdParam._m0[13u].z) + ((((_526.z - _525) * _505) + _525) * cbMtdParam._m0[11u].z)) * _599) * cbInstanceData._m0[_2882].z;
    float _4893 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _4904 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _4915 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _2907 = (((isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0))) * (_2866 + ((isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0))) * _804))) + ((_2872 + ((isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0))) * _1644)) * cbPerFrame._m0[3u].x)) + _2888;
    float _2909 = (_2889 + ((_2874 + ((isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0))) * _1644)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0))) * (_2868 + ((isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0))) * _804)));
    float _2911 = (_2890 + ((_2876 + ((isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0))) * _1644)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4915 : (isnan(_4915) ? 1.0 : min(_4915, 1.0))) * (_2870 + ((isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0))) * _804)));
    float _2912 = isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0));
    float _2913 = isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0));
    float _2914 = isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0));
    float _2920 = cbMtdParam._m0[2u].x * _2888;
    float _2921 = cbMtdParam._m0[2u].y * _2889;
    float _2922 = cbMtdParam._m0[2u].z * _2890;
    float _4941 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2924 = isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0));
    uint _2925 = _764 + 6u;
    float _2933 = _726 / cbSceneParam._m0[86u].x;
    float _2934 = _727 / cbSceneParam._m0[86u].y;
    vec4 _2948 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2933, _2934, (log2((isnan(cbSceneParam._m0[77u].w) ? _648 : (isnan(_648) ? cbSceneParam._m0[77u].w : min(_648, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2950 = _2948.x;
    float _2951 = _2948.y;
    float _2952 = _2948.z;
    float _2953 = _2948.w;
    float _3024;
    float _3026;
    float _3028;
    float _3030;
    if (_648 > cbSceneParam._m0[78u].w)
    {
        float _2987 = isnan(_648) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _648 : min(cbSceneParam._m0[80u].w, _648));
        float _2988 = _2987 / _648;
        float _2999 = _2988 * _699;
        float _3000 = _700 * _2988;
        float _3001 = (-0.0) - _3000;
        float _3002 = _2988 * _701;
        float _3004 = (cbSceneParam._m0[77u].w * _3001) / _2987;
        float _3005 = _3004 + cbSceneParam._m0[79u].w;
        float _3006 = cbSceneParam._m0[79u].w - _3000;
        float _3012 = sqrt(((_2999 * _2999) + (_3000 * _3000)) + (_3002 * _3002));
        float _3015 = (1.0 - (cbSceneParam._m0[77u].w / _2987)) * _3012;
        float _3020 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3022 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3208;
        if (abs((_3001 - _3004) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3208 = ((((_3005 > 0.0) ? exp2(_3020 * _3005) : (2.0 - exp2(_3022 * _3005))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3015;
        }
        else
        {
            float _3152 = 1.0 / cbSceneParam._m0[80u].x;
            float _3153 = isnan(_3006) ? _3005 : (isnan(_3005) ? _3006 : max(_3005, _3006));
            float _3154 = isnan(_3006) ? _3005 : (isnan(_3005) ? _3006 : min(_3005, _3006));
            float _3163 = isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : min(_3153, 0.0));
            float _3164 = isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : min(_3154, 0.0));
            _3208 = ((abs(_3012 / _3001) * cbSceneParam._m0[80u].y) * ((((_3163 - _3164) * 2.0) - ((exp2(_3020 * (isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0)))) - exp2(_3020 * (isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0))))) * _3152)) - ((exp2(_3022 * _3163) - exp2(_3022 * _3164)) * _3152))) + (_3015 * cbSceneParam._m0[80u].z);
        }
        vec4 _3210 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2933, _2934, 1.0), 0.0);
        float _3219 = exp2((_3208 * (-1.44269502162933349609375)) * (1.0 - _3210.w));
        float _3220 = log2(_3219);
        float _3236 = log2(_2953);
        _3024 = (exp2(_3236 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3220 * cbSceneParam._m0[78u].x)) * _3210.x) / cbSceneParam._m0[78u].x)) + _2950;
        _3026 = (exp2(_3236 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3220 * cbSceneParam._m0[78u].y)) * _3210.y) / cbSceneParam._m0[78u].y)) + _2951;
        _3028 = (exp2(_3236 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3220 * cbSceneParam._m0[78u].z)) * _3210.z) / cbSceneParam._m0[78u].z)) + _2952;
        _3030 = _3219 * _2953;
    }
    else
    {
        _3024 = _2950;
        _3026 = _2951;
        _3028 = _2952;
        _3030 = _2953;
    }
    bool _3246;
    vec4 _3040;
    vec4 _3062;
    float _3064;
    float _3068;
    float _3069;
    float _3070;
    float _3073;
    float _3076;
    float _3079;
    float _3080;
    bool _3090;
    for (;;)
    {
        _3040 = cbMatDynParam._m0[0u];
        float _3042 = roundEven(_3040.y);
        bool _3043 = _3042 == 3.0;
        float _3044 = log2(_3030);
        float _3048 = exp2(_3044 * cbSceneParam._m0[78u].x);
        float _3049 = exp2(_3044 * cbSceneParam._m0[78u].y);
        float _3050 = exp2(_3044 * cbSceneParam._m0[78u].z);
        float _3051 = _3048 * _2912;
        float _3052 = _3049 * _2913;
        float _3053 = _3050 * _2914;
        float _3060 = _715 + (-0.5);
        _3062 = cbMtdParam._m0[1u];
        _3064 = _3062.y * _3060;
        float _3067 = (_3042 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3068 = _3067 * (_3043 ? _3051 : (_3051 + (cbSceneParam._m0[72u].w * _3024)));
        _3069 = _3067 * (_3043 ? _3052 : (_3052 + (cbSceneParam._m0[72u].w * _3026)));
        _3070 = _3067 * (_3043 ? _3053 : (_3053 + (cbSceneParam._m0[72u].w * _3028)));
        _3073 = ((_2920 * _2924) * _3048) * _3067;
        _3076 = ((_2921 * _2924) * _3049) * _3067;
        _3079 = ((_2922 * _2924) * _3050) * _3067;
        _3080 = _3060 * 0.999000012874603271484375;
        _3090 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3090)
        {
            if ((cbInstanceData._m0[_764 + 7u].x + _3080) < 0.5)
            {
                _3246 = true;
                break;
            }
        }
        uint _3187 = _765 + uint(_3040.w);
        if ((cbInstanceData._m0[_3187].w < 1.0) && ((cbInstanceData._m0[_3187].w + _3080) < 0.5))
        {
            _3246 = true;
            break;
        }
        if ((_3064 + 1.0) < _3062.x)
        {
            _3246 = true;
            break;
        }
        _3246 = false;
        break;
    }
    float _3450;
    if (_3246)
    {
        discard_state = true;
        _3450 = 0.0;
    }
    else
    {
        _3450 = cbInstanceData._m0[_2925].w;
    }
    SV_Target.x = _3068;
    SV_Target.y = _3069;
    SV_Target.z = _3070;
    SV_Target.w = _3450;
    SV_Target_1.x = _3073;
    SV_Target_1.y = _3076;
    SV_Target_1.z = _3079;
    SV_Target_1.w = cbInstanceData._m0[_2925].w;
    discard_exit();
}


