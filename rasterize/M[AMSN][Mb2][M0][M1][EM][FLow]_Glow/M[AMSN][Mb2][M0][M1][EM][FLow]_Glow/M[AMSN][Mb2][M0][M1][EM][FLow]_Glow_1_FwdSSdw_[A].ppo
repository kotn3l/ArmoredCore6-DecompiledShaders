#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1043;
float _3468;
float _3469;
float _3470;
float _3471;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _193 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _194 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _195 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _201 = inversesqrt(dot(vec3(_193, _194, _195), vec3(_193, _194, _195)));
    float _208 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _215 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _237 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _243 = _237.x * cbMtdParam._m0[9u].x;
    float _244 = _237.y * cbMtdParam._m0[9u].y;
    float _245 = _237.z * cbMtdParam._m0[9u].z;
    vec4 _262 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    vec4 _276 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _280 = _276.z;
    float _284 = (_276.x * 2.0) + (-1.0);
    float _286 = (_276.y * 2.0) + (-1.0);
    float _287 = dot(vec2(_284, _286), vec2(_284, _286));
    float _3480 = isnan(0.0) ? _287 : (isnan(_287) ? 0.0 : max(_287, 0.0));
    float _293 = sqrt(1.0 - (isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0))));
    float _306 = (cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _307 = (cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _337 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * ((cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * ((cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[10u].w));
    float _342 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[15u].w;
    float _349 = ((_337.y * 0.5) + (-0.25)) * cbMtdParam._m0[15u].z;
    float _351 = (-0.0) - (cbMtdParam._m0[15u].z * ((_337.x * 0.5) + (-0.25)));
    float _353 = fract(_342);
    float _355 = fract(_342 + 0.5);
    float _356 = _353 * _351;
    float _357 = _349 * _353;
    float _360 = _355 * _351;
    float _361 = _349 * _355;
    float _366 = abs((_353 * 2.0) + (-1.0));
    vec4 _382 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_356 + _306) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_357 + _307) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _384 = _382.x;
    float _385 = _382.y;
    float _386 = _382.z;
    vec4 _387 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_360 + _306) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_361 + _307) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _414 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _415 = (cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _428 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_356 + _414) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_357 + _415) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _430 = _428.x;
    float _431 = _428.y;
    float _432 = _428.z;
    vec4 _433 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_360 + _414) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_361 + _415) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _460 = (TEXCOORD_9.x - ((cbMtdParam._m0[16u].y * (1.0 - TEXCOORD_9.x)) * (_262.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[16u].z + 1.0);
    float _3491 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _461 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
    float _467 = fma(_293, _208 * NORMAL.x, fma(_286, _215 * TANGENT.x, (_201 * _193) * _284));
    float _470 = fma(_293, _208 * NORMAL.y, fma(_286, _215 * TANGENT.y, (_201 * _194) * _284));
    float _473 = fma(_293, _208 * NORMAL.z, fma(_286, _215 * TANGENT.z, (_201 * _195) * _284));
    float _477 = inversesqrt(dot(vec3(_467, _470, _473), vec3(_467, _470, _473)));
    float _478 = _477 * _467;
    float _479 = _477 * _470;
    float _480 = _477 * _473;
    float _3502 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _481 = isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0));
    float _3513 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3524 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _3535 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _500 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _541 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _551 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _541);
    float _552 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _541);
    float _553 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _541);
    float _557 = inversesqrt(dot(vec3(_551, _552, _553), vec3(_551, _552, _553)));
    float _558 = _551 * _557;
    float _559 = _552 * _557;
    float _560 = _553 * _557;
    vec4 _565 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _567 = _565.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _724 = sqrt(((_551 * _551) + (_552 * _552)) + (_553 * _553));
        float _730 = (cbMatDynParam._m0[5u].x * _724) + cbMatDynParam._m0[5u].y;
        float _3546 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
        float _731 = isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0));
        float _735 = (cbMatDynParam._m0[5u].z * _724) + cbMatDynParam._m0[5u].w;
        float _3557 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0))) - _731)) + _731) < ((_567 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _579 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _580 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _600 = fma(_480, cbSceneParam._m0[5u].z, fma(_479, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _478));
    float _603 = fma(_480, cbSceneParam._m0[6u].z, fma(_479, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _478));
    float _606 = fma(_480, cbSceneParam._m0[7u].z, fma(_479, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _478));
    uint _619 = uint(roundEven(NORMAL.w)) * 13u;
    uint _620 = _619 + 9u;
    uint _621 = _620 + uint(cbMatDynParam._m0[0u].w);
    float _627 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0)))) * cbInstanceData._m0[_621].x;
    float _628 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0)))) * cbInstanceData._m0[_621].y;
    float _629 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0)))) * cbInstanceData._m0[_621].z;
    float _3568 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _630 = isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0));
    float _3579 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _631 = isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0));
    float _3590 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _632 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
    vec4 _641 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _579, cbSceneParam._m0[86u].y * _580));
    float _644 = _641.x * TEXCOORD_3.w;
    float _645 = dot(vec3(_478, _479, _480), vec3(_558, _559, _560));
    float _648 = _645 * 2.0;
    float _652 = (_648 * _478) - _558;
    float _653 = (_648 * _479) - _559;
    float _654 = (_648 * _480) - _560;
    float _658 = abs(dot(vec3(_558, _559, _560), vec3(_478, _479, _480)));
    float _3601 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _660 = sqrt(_481);
    float _673 = exp2((_660 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_660 * 3.0));
    float _705 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _709 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _713 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1042;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _768 = fma(_713, cbModelParam._m0[26u].z, fma(_709, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _705));
        float _772 = fma(_713, cbModelParam._m0[27u].z, fma(_709, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _705));
        float _776 = fma(_713, cbModelParam._m0[28u].z, fma(_709, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _705));
        float _800 = _705 + _478;
        float _801 = _709 + _479;
        float _802 = _713 + _480;
        float _812 = fma(_802, cbModelParam._m0[26u].z, fma(_801, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _800)) - _768;
        float _813 = fma(_802, cbModelParam._m0[27u].z, fma(_801, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _800)) - _772;
        float _814 = fma(_802, cbModelParam._m0[28u].z, fma(_801, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _800)) - _776;
        float _818 = inversesqrt(dot(vec3(_812, _813, _814), vec3(_812, _813, _814)));
        float _831 = ((_818 * _812) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_768 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _832 = ((_818 * _813) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_772 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _833 = ((_818 * _814) / cbModelParam._m0[34u].z) + ((((((_776 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _836 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_831, _832, _833), 0.0);
        vec4 _843 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_831, _832, _833), 0.0);
        vec4 _850 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_831, _832, _833), 0.0);
        vec4 _857 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_831, _832, _833), 0.0);
        float _870 = exp2((_836.w + (-0.5)) * 20.0) * 2.0;
        float _871 = _870 * (_836.x + (-0.5));
        float _872 = _870 * (_836.y + (-0.5));
        float _873 = _870 * (_836.z + (-0.5));
        float _880 = exp2((_843.w + (-0.5)) * 20.0) * 2.0;
        float _881 = _880 * (_843.x + (-0.5));
        float _882 = _880 * (_843.y + (-0.5));
        float _883 = _880 * (_843.z + (-0.5));
        float _890 = exp2((_850.w + (-0.5)) * 20.0) * 2.0;
        float _891 = _890 * (_850.x + (-0.5));
        float _892 = _890 * (_850.y + (-0.5));
        float _893 = _890 * (_850.z + (-0.5));
        float _900 = exp2((_857.w + (-0.5)) * 20.0) * 2.0;
        float _901 = _900 * (_857.x + (-0.5));
        float _902 = _900 * (_857.y + (-0.5));
        float _903 = _900 * (_857.z + (-0.5));
        float _904 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _905 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _906 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _907 = _871 * 0.5;
        float _908 = _881 * 0.5;
        float _909 = _891 * 0.5;
        float _910 = dot(vec3(_907, _908, _909), vec3(_907, _908, _909));
        float _915 = (_910 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_910);
        float _924 = (dot(vec3(_478, _479, _480), vec3(_915 * _907, _915 * _908, _915 * _909)) + 1.0) * 0.5;
        float _3627 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _934 = sqrt(((_908 * _908) + (_907 * _907)) + (_909 * _909)) / (_904 + 9.9999997473787516355514526367188e-06);
        float _3638 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _935 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
        float _936 = _935 * 2.0;
        float _940 = (1.0 - _935) / (_935 + 1.0);
        float _3649 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _941 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
        float _950 = ((((1.0 - _941) * (_936 + 2.0)) * exp2(log2(isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0))) * (_936 + 1.0))) + _941) * _904;
        float _951 = _872 * 0.5;
        float _952 = _882 * 0.5;
        float _953 = _892 * 0.5;
        float _954 = dot(vec3(_951, _952, _953), vec3(_951, _952, _953));
        float _959 = (_954 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_954);
        float _967 = (dot(vec3(_478, _479, _480), vec3(_959 * _951, _959 * _952, _959 * _953)) + 1.0) * 0.5;
        float _3660 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _976 = sqrt(((_952 * _952) + (_951 * _951)) + (_953 * _953)) / (_905 + 9.9999997473787516355514526367188e-06);
        float _3671 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _977 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
        float _978 = _977 * 2.0;
        float _982 = (1.0 - _977) / (_977 + 1.0);
        float _3682 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _983 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
        float _992 = ((((1.0 - _983) * (_978 + 2.0)) * exp2(log2(isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0))) * (_978 + 1.0))) + _983) * _905;
        float _993 = _873 * 0.5;
        float _994 = _883 * 0.5;
        float _995 = _893 * 0.5;
        float _996 = dot(vec3(_993, _994, _995), vec3(_993, _994, _995));
        float _1001 = (_996 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_996);
        float _1009 = (dot(vec3(_478, _479, _480), vec3(_1001 * _993, _1001 * _994, _1001 * _995)) + 1.0) * 0.5;
        float _3693 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1018 = sqrt(((_994 * _994) + (_993 * _993)) + (_995 * _995)) / (_906 + 9.9999997473787516355514526367188e-06);
        float _3704 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1019 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
        float _1020 = _1019 * 2.0;
        float _1024 = (1.0 - _1019) / (_1019 + 1.0);
        float _3715 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1025 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
        float _1034 = ((((1.0 - _1025) * (_1020 + 2.0)) * exp2(log2(isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0))) * (_1020 + 1.0))) + _1025) * _906;
        _1042 = _873;
        _1044 = _872;
        _1045 = _871;
        _1046 = _883;
        _1047 = _882;
        _1048 = _881;
        _1049 = _893;
        _1050 = _892;
        _1051 = _891;
        _1052 = _906;
        _1053 = _905;
        _1054 = _904;
        _1055 = cbModelParam._m0[36u].z * (isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0)));
        _1056 = cbModelParam._m0[36u].z * (isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0)));
        _1057 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0)));
    }
    else
    {
        _1042 = _1043;
        _1044 = _1043;
        _1045 = _1043;
        _1046 = _1043;
        _1047 = _1043;
        _1048 = _1043;
        _1049 = _1043;
        _1050 = _1043;
        _1051 = _1043;
        _1052 = _1043;
        _1053 = _1043;
        _1054 = _1043;
        _1055 = 0.0;
        _1056 = 0.0;
        _1057 = 0.0;
    }
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1086 = fma(_713, cbModelParam._m0[30u].z, fma(_709, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _705));
        float _1090 = fma(_713, cbModelParam._m0[31u].z, fma(_709, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _705));
        float _1094 = fma(_713, cbModelParam._m0[32u].z, fma(_709, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _705));
        float _1117 = _705 + _478;
        float _1118 = _709 + _479;
        float _1119 = _713 + _480;
        float _1129 = fma(_1119, cbModelParam._m0[30u].z, fma(_1118, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1117)) - _1086;
        float _1130 = fma(_1119, cbModelParam._m0[31u].z, fma(_1118, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1117)) - _1090;
        float _1131 = fma(_1119, cbModelParam._m0[32u].z, fma(_1118, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1117)) - _1094;
        float _1135 = inversesqrt(dot(vec3(_1129, _1130, _1131), vec3(_1129, _1130, _1131)));
        float _1148 = ((_1135 * _1129) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1086 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1149 = ((_1135 * _1130) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1090 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1150 = ((_1135 * _1131) / cbModelParam._m0[35u].z) + ((((((_1094 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1152 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1148, _1149, _1150), 0.0);
        vec4 _1159 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1148, _1149, _1150), 0.0);
        vec4 _1166 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1148, _1149, _1150), 0.0);
        vec4 _1173 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1148, _1149, _1150), 0.0);
        float _1185 = exp2((_1152.w + (-0.5)) * 20.0) * 2.0;
        float _1186 = _1185 * (_1152.x + (-0.5));
        float _1187 = _1185 * (_1152.y + (-0.5));
        float _1188 = _1185 * (_1152.z + (-0.5));
        float _1195 = exp2((_1159.w + (-0.5)) * 20.0) * 2.0;
        float _1196 = _1195 * (_1159.x + (-0.5));
        float _1197 = _1195 * (_1159.y + (-0.5));
        float _1198 = _1195 * (_1159.z + (-0.5));
        float _1205 = exp2((_1166.w + (-0.5)) * 20.0) * 2.0;
        float _1206 = _1205 * (_1166.x + (-0.5));
        float _1207 = _1205 * (_1166.y + (-0.5));
        float _1208 = _1205 * (_1166.z + (-0.5));
        float _1215 = exp2((_1173.w + (-0.5)) * 20.0) * 2.0;
        float _1216 = _1215 * (_1173.x + (-0.5));
        float _1217 = _1215 * (_1173.y + (-0.5));
        float _1218 = _1215 * (_1173.z + (-0.5));
        float _1219 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1220 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1221 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1222 = _1186 * 0.5;
        float _1223 = _1196 * 0.5;
        float _1224 = _1206 * 0.5;
        float _1225 = dot(vec3(_1222, _1223, _1224), vec3(_1222, _1223, _1224));
        float _1230 = (_1225 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1225);
        float _1238 = (dot(vec3(_478, _479, _480), vec3(_1230 * _1222, _1230 * _1223, _1230 * _1224)) + 1.0) * 0.5;
        float _3756 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1247 = sqrt(((_1223 * _1223) + (_1222 * _1222)) + (_1224 * _1224)) / (_1219 + 9.9999997473787516355514526367188e-06);
        float _3767 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
        float _1249 = _1248 * 2.0;
        float _1253 = (1.0 - _1248) / (_1248 + 1.0);
        float _3778 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1254 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
        float _1263 = ((((1.0 - _1254) * (_1249 + 2.0)) * exp2(log2(isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0))) * (_1249 + 1.0))) + _1254) * _1219;
        float _1264 = _1187 * 0.5;
        float _1265 = _1197 * 0.5;
        float _1266 = _1207 * 0.5;
        float _1267 = dot(vec3(_1264, _1265, _1266), vec3(_1264, _1265, _1266));
        float _1272 = (_1267 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1267);
        float _1280 = (dot(vec3(_478, _479, _480), vec3(_1272 * _1264, _1272 * _1265, _1272 * _1266)) + 1.0) * 0.5;
        float _3789 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1289 = sqrt(((_1265 * _1265) + (_1264 * _1264)) + (_1266 * _1266)) / (_1220 + 9.9999997473787516355514526367188e-06);
        float _3800 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
        float _1291 = _1290 * 2.0;
        float _1295 = (1.0 - _1290) / (_1290 + 1.0);
        float _3811 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
        float _1305 = ((((1.0 - _1296) * (_1291 + 2.0)) * exp2(log2(isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0))) * (_1291 + 1.0))) + _1296) * _1220;
        float _1306 = _1188 * 0.5;
        float _1307 = _1198 * 0.5;
        float _1308 = _1208 * 0.5;
        float _1309 = dot(vec3(_1306, _1307, _1308), vec3(_1306, _1307, _1308));
        float _1314 = (_1309 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1309);
        float _1322 = (dot(vec3(_478, _479, _480), vec3(_1314 * _1306, _1314 * _1307, _1314 * _1308)) + 1.0) * 0.5;
        float _3822 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1331 = sqrt(((_1307 * _1307) + (_1306 * _1306)) + (_1308 * _1308)) / (_1221 + 9.9999997473787516355514526367188e-06);
        float _3833 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
        float _1333 = _1332 * 2.0;
        float _1337 = (1.0 - _1332) / (_1332 + 1.0);
        float _3844 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
        float _1347 = ((((1.0 - _1338) * (_1333 + 2.0)) * exp2(log2(isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0))) * (_1333 + 1.0))) + _1338) * _1221;
        _1355 = _1188;
        _1356 = _1187;
        _1357 = _1186;
        _1358 = _1198;
        _1359 = _1197;
        _1360 = _1196;
        _1361 = _1208;
        _1362 = _1207;
        _1363 = _1206;
        _1364 = _1221;
        _1365 = _1220;
        _1366 = _1219;
        _1367 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0)));
        _1368 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0)));
        _1369 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0)));
    }
    else
    {
        _1355 = _1043;
        _1356 = _1043;
        _1357 = _1043;
        _1358 = _1043;
        _1359 = _1043;
        _1360 = _1043;
        _1361 = _1043;
        _1362 = _1043;
        _1363 = _1043;
        _1364 = _1043;
        _1365 = _1043;
        _1366 = _1043;
        _1367 = 0.0;
        _1368 = 0.0;
        _1369 = 0.0;
    }
    float _1379 = (cbModelParam._m0[1u].x * (_1367 - _1055)) + _1055;
    float _1380 = (cbModelParam._m0[1u].x * (_1368 - _1056)) + _1056;
    float _1381 = (cbModelParam._m0[1u].x * (_1369 - _1057)) + _1057;
    float _1402 = fma(_1381, cbSceneParam._m0[89u].z, fma(_1380, cbSceneParam._m0[89u].y, _1379 * cbSceneParam._m0[89u].x));
    float _1405 = fma(_1381, cbSceneParam._m0[90u].z, fma(_1380, cbSceneParam._m0[90u].y, _1379 * cbSceneParam._m0[90u].x));
    float _1408 = fma(_1381, cbSceneParam._m0[91u].z, fma(_1380, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1379));
    float _1423 = _652 * 0.5;
    float _1424 = _653 * 0.5;
    float _1425 = _654 * 0.5;
    float _1426 = dot(vec4(_1423, _1424, _1425, 1.0), vec4(_1357, _1360, _1363, _1366));
    float _1429 = dot(vec4(_1423, _1424, _1425, 1.0), vec4(_1356, _1359, _1362, _1365));
    float _1432 = dot(vec4(_1423, _1424, _1425, 1.0), vec4(_1355, _1358, _1361, _1364));
    float _1466;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1439 = dot(vec4(_1423, _1424, _1425, 1.0), vec4(_1042, _1046, _1049, _1052));
        float _1443 = dot(vec4(_1423, _1424, _1425, 1.0), vec4(_1044, _1047, _1050, _1053));
        float _1447 = dot(vec4(_1423, _1424, _1425, 1.0), vec4(_1045, _1048, _1051, _1054));
        float _1454 = dot(vec4(cbModelParam._m0[39u]), vec4(_1423, _1424, _1425, 1.0));
        _1466 = dot(vec3(isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0)), isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0)), isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1454) ? 0.0 : (isnan(0.0) ? _1454 : max(0.0, _1454))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1466 = 1.0;
    }
    float _1477;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1468 = dot(vec4(cbModelParam._m0[40u]), vec4(_1423, _1424, _1425, 1.0));
        _1477 = dot(vec3(isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0)), isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0)), isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1468) ? 0.0 : (isnan(0.0) ? _1468 : max(0.0, _1468))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1477 = 1.0;
    }
    float _1481 = (_1477 * cbModelParam._m0[1u].x) + (_1466 * (1.0 - cbModelParam._m0[1u].x));
    float _1491 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _481);
    float _1492 = isnan(_1491) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1491 : min(cbModelParam._m0[25u].z, _1491));
    float _1573;
    float _1575;
    float _1577;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1540 = fma(_713, cbModelParam._m0[13u].z, fma(_709, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _705)) + cbModelParam._m0[13u].w;
        float _1544 = fma(_713, cbModelParam._m0[14u].z, fma(_709, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _705)) + cbModelParam._m0[14u].w;
        float _1548 = fma(_713, cbModelParam._m0[15u].z, fma(_709, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _705)) + cbModelParam._m0[15u].w;
        float _1551 = fma(_654, cbModelParam._m0[13u].z, fma(_653, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _652));
        float _1554 = fma(_654, cbModelParam._m0[14u].z, fma(_653, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _652));
        float _1557 = fma(_654, cbModelParam._m0[15u].z, fma(_653, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _652));
        float _1585;
        if (_1551 > 0.0)
        {
            _1585 = abs((1.0 - _1540) / _1551);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1551 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1540 + 1.0) / _1551);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1585 = frontier_phi_17_15_ladder;
        }
        float _1809;
        if (_1554 > 0.0)
        {
            _1809 = abs((1.0 - _1544) / _1554);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1554 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1544 + 1.0) / _1554);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1809 = frontier_phi_26_22_ladder;
        }
        float _2055;
        if (_1557 > 0.0)
        {
            _2055 = abs((1.0 - _1548) / _1557);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1557 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1548 + 1.0) / _1557);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2055 = frontier_phi_38_33_ladder;
        }
        float _2057 = isnan(_1809) ? _1585 : (isnan(_1585) ? _1809 : min(_1585, _1809));
        float _2058 = isnan(_2055) ? _2057 : (isnan(_2057) ? _2055 : min(_2057, _2055));
        float _2062 = (_2058 * _1551) + _1540;
        float _2063 = (_2058 * _1554) + _1544;
        float _2064 = (_2058 * _1557) + _1548;
        float _2065 = _2058 * 9.9999997473787516355514526367188e-05;
        float _2067 = (-1.0) - _2065;
        float _2069 = _2065 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2064 > _2069) || ((_2064 < _2067) || ((_2063 > _2069) || ((_2063 < _2067) || ((_2062 < _2067) || (_2062 > _2069))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2188 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2064, cbModelParam._m0[9u].z, fma(_2063, cbModelParam._m0[9u].y, _2062 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2064, cbModelParam._m0[10u].z, fma(_2063, cbModelParam._m0[10u].y, _2062 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2064, cbModelParam._m0[11u].z, fma(_2063, cbModelParam._m0[11u].y, _2062 * cbModelParam._m0[11u].x))), _1492);
            frontier_phi_16_38_ladder = _2188.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2188.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2188.x * cbModelParam._m0[1u].y;
        }
        _1573 = frontier_phi_16_38_ladder_2;
        _1575 = frontier_phi_16_38_ladder_1;
        _1577 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1561 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_652, _653, _654), _1492);
        _1573 = _1561.x * cbModelParam._m0[1u].y;
        _1575 = _1561.y * cbModelParam._m0[1u].y;
        _1577 = _1561.z * cbModelParam._m0[1u].y;
    }
    float _1581 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _481);
    float _1582 = isnan(_1581) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1581 : min(cbModelParam._m0[25u].w, _1581));
    float _1672;
    float _1674;
    float _1676;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1636 = fma(_713, cbModelParam._m0[21u].z, fma(_709, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _705)) + cbModelParam._m0[21u].w;
        float _1640 = fma(_713, cbModelParam._m0[22u].z, fma(_709, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _705)) + cbModelParam._m0[22u].w;
        float _1644 = fma(_713, cbModelParam._m0[23u].z, fma(_709, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _705)) + cbModelParam._m0[23u].w;
        float _1647 = fma(_654, cbModelParam._m0[21u].z, fma(_653, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _652));
        float _1650 = fma(_654, cbModelParam._m0[22u].z, fma(_653, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _652));
        float _1653 = fma(_654, cbModelParam._m0[23u].z, fma(_653, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _652));
        float _1814;
        if (_1647 > 0.0)
        {
            _1814 = abs((1.0 - _1636) / _1647);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1647 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1636 + 1.0) / _1647);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1814 = frontier_phi_28_24_ladder;
        }
        float _2082;
        if (_1650 > 0.0)
        {
            _2082 = abs((1.0 - _1640) / _1650);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1650 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1640 + 1.0) / _1650);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2082 = frontier_phi_40_35_ladder;
        }
        float _2287;
        if (_1653 > 0.0)
        {
            _2287 = abs((1.0 - _1644) / _1653);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1653 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1644 + 1.0) / _1653);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2287 = frontier_phi_49_46_ladder;
        }
        float _2289 = isnan(_2082) ? _1814 : (isnan(_1814) ? _2082 : min(_1814, _2082));
        float _2290 = isnan(_2287) ? _2289 : (isnan(_2289) ? _2287 : min(_2289, _2287));
        float _2294 = (_2290 * _1647) + _1636;
        float _2295 = (_2290 * _1650) + _1640;
        float _2296 = (_2290 * _1653) + _1644;
        float _2297 = _2290 * 9.9999997473787516355514526367188e-05;
        float _2298 = (-1.0) - _2297;
        float _2300 = _2297 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2296 > _2300) || ((_2296 < _2298) || ((_2295 > _2300) || ((_2295 < _2298) || ((_2294 < _2298) || (_2294 > _2300))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2524 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2296, cbModelParam._m0[17u].z, fma(_2295, cbModelParam._m0[17u].y, _2294 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2296, cbModelParam._m0[18u].z, fma(_2295, cbModelParam._m0[18u].y, _2294 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2296, cbModelParam._m0[19u].z, fma(_2295, cbModelParam._m0[19u].y, _2294 * cbModelParam._m0[19u].x))), _1582);
            frontier_phi_25_49_ladder = _2524.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2524.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2524.x * cbModelParam._m0[1u].z;
        }
        _1672 = frontier_phi_25_49_ladder_2;
        _1674 = frontier_phi_25_49_ladder_1;
        _1676 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1656 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_652, _653, _654), _1582);
        _1672 = _1656.x * cbModelParam._m0[1u].z;
        _1674 = _1656.y * cbModelParam._m0[1u].z;
        _1676 = _1656.z * cbModelParam._m0[1u].z;
    }
    float _1688 = ((((1.0 - _673) * ((_660 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_673 * _660)) * _644;
    float _1689 = _1688 * ((cbModelParam._m0[1u].w * (_1672 - _1573)) + _1573);
    float _1690 = _1688 * ((cbModelParam._m0[1u].w * (_1674 - _1575)) + _1575);
    float _1691 = _1688 * ((cbModelParam._m0[1u].w * (_1676 - _1577)) + _1577);
    float _1694 = fma(_1691, cbSceneParam._m0[89u].z, fma(_1690, cbSceneParam._m0[89u].y, _1689 * cbSceneParam._m0[89u].x));
    float _1697 = fma(_1691, cbSceneParam._m0[90u].z, fma(_1690, cbSceneParam._m0[90u].y, _1689 * cbSceneParam._m0[90u].x));
    float _1700 = fma(_1691, cbSceneParam._m0[91u].z, fma(_1690, cbSceneParam._m0[91u].y, _1689 * cbSceneParam._m0[91u].x));
    vec4 _1708 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_579, _580));
    float _1710 = _1708.w;
    float _1722 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1710);
    float _1723 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1710);
    float _1724 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1710);
    uvec4 _1728 = floatBitsToUint(cbInstanceData._m0[_619 + 5u]);
    uint _1730 = _1728.x * 14u;
    uint _1731 = _1730 + 13u;
    float _1738 = _644 + (-1.0);
    float _1743 = (cbLight._m0[_1731].x * _1738) + 1.0;
    float _1744 = (cbLight._m0[_1731].y * _1738) + 1.0;
    float _1745 = (cbLight._m0[_1731].z * _1738) + 1.0;
    float _1746 = (cbLight._m0[_1731].w * _1738) + 1.0;
    uint _1747 = _1730 + 5u;
    float _1753 = isnan(1.0) ? _1744 : (isnan(_1744) ? 1.0 : min(_1744, 1.0));
    uint _1757 = _1730 + 4u;
    float _1767 = isnan(1.0) ? _1743 : (isnan(_1743) ? 1.0 : min(_1743, 1.0));
    uint _1771 = _1730 | 1u;
    float _1782 = dot(vec3(cbLight._m0[_1730].xyz), vec3(_478, _479, _480));
    float _1785 = dot(vec3(cbLight._m0[_1771].xyz), vec3(_478, _479, _480));
    float _3980 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
    float _3991 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
    float _1790 = (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0))) * 0.3183098733425140380859375;
    float _1792 = (isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * 0.3183098733425140380859375;
    float _1799 = ((cbLight._m0[_1747].x * _1753) * _1792) + (((cbLight._m0[_1757].x * _1722) * _1767) * _1790);
    float _1800 = ((_1753 * cbLight._m0[_1747].y) * _1792) + (((cbLight._m0[_1757].y * _1723) * _1767) * _1790);
    float _1801 = ((_1753 * cbLight._m0[_1747].z) * _1792) + (((cbLight._m0[_1757].z * _1724) * _1767) * _1790);
    uvec4 _1806 = floatBitsToUint(cbLight._m0[_1730 + 12u]);
    bool _1808 = _1806.x == 0u;
    float _1819;
    float _1821;
    float _1823;
    if (_1808)
    {
        _1819 = _1799;
        _1821 = _1800;
        _1823 = _1801;
    }
    else
    {
        uint _1827 = _1730 + 6u;
        float _1843 = (dot(vec3(cbLight._m0[_1730 + 2u].xyz), vec3(_478, _479, _480)) * 0.5) + 0.5;
        float _1844 = _1843 * _1843;
        float _4002 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
        float _1845 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _1846 = isnan(1.0) ? _1745 : (isnan(_1745) ? 1.0 : min(_1745, 1.0));
        _1819 = (((cbLight._m0[_1827].x * 0.3183098733425140380859375) * _1845) * _1846) + _1799;
        _1821 = (((cbLight._m0[_1827].y * 0.3183098733425140380859375) * _1845) * _1846) + _1800;
        _1823 = (((cbLight._m0[_1827].z * 0.3183098733425140380859375) * _1845) * _1846) + _1801;
    }
    bool _1826 = _1806.y == 0u;
    float _1864;
    float _1866;
    float _1868;
    if (_1826)
    {
        _1864 = _1819;
        _1866 = _1821;
        _1868 = _1823;
    }
    else
    {
        uint _2026 = _1730 + 7u;
        float _2042 = (dot(vec3(cbLight._m0[_1730 + 3u].xyz), vec3(_478, _479, _480)) * 0.5) + 0.5;
        float _2043 = _2042 * _2042;
        float _4018 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
        float _2044 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _2045 = isnan(1.0) ? _1746 : (isnan(_1746) ? 1.0 : min(_1746, 1.0));
        _1864 = (((cbLight._m0[_2026].x * 0.3183098733425140380859375) * _2044) * _2045) + _1819;
        _1866 = (((cbLight._m0[_2026].y * 0.3183098733425140380859375) * _2044) * _2045) + _1821;
        _1868 = (((cbLight._m0[_2026].z * 0.3183098733425140380859375) * _2044) * _2045) + _1823;
    }
    uint _1871 = _1730 + 8u;
    float _1884 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1730].w)) * _481) * 0.949999988079071044921875);
    float _1885 = _1884 * _1884;
    float _1886 = cbLight._m0[_1730].x + _558;
    float _1887 = cbLight._m0[_1730].y + _559;
    float _1888 = cbLight._m0[_1730].z + _560;
    float _1892 = inversesqrt(dot(vec3(_1886, _1887, _1888), vec3(_1886, _1887, _1888)));
    float _1893 = _1892 * _1886;
    float _1894 = _1892 * _1887;
    float _1895 = _1892 * _1888;
    float _1896 = dot(vec3(_478, _479, _480), vec3(cbLight._m0[_1730].xyz));
    float _4034 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
    float _1899 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
    float _4045 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _1900 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
    float _1901 = dot(vec3(_478, _479, _480), vec3(_1893, _1894, _1895));
    float _4056 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
    float _1904 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
    float _1905 = dot(vec3(cbLight._m0[_1730].xyz), vec3(_1893, _1894, _1895));
    float _4067 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
    float _1909 = _1885 * _1885;
    float _1913 = ((_1904 * _1904) * (_1909 + (-1.0))) + 1.0;
    float _1924 = (exp2(log2(1.0 - (isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1925 = 1.0 - _1885;
    float _1936 = (0.5 / (((_1900 * ((_1899 * _1925) + _1885)) + 9.9999999392252902907785028219223e-09) + (((_1900 * _1925) + _1885) * _1899))) * _1899;
    float _4078 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
    float _1938 = (isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * (_1909 / ((_1913 * _1913) * 3.141590118408203125));
    uint _1952 = _1730 + 9u;
    float _1963 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1771].w)) * _481) * 0.949999988079071044921875);
    float _1964 = _1963 * _1963;
    float _1965 = cbLight._m0[_1771].x + _558;
    float _1966 = cbLight._m0[_1771].y + _559;
    float _1967 = cbLight._m0[_1771].z + _560;
    float _1971 = inversesqrt(dot(vec3(_1965, _1966, _1967), vec3(_1965, _1966, _1967)));
    float _1972 = _1971 * _1965;
    float _1973 = _1971 * _1966;
    float _1974 = _1971 * _1967;
    float _1975 = dot(vec3(_478, _479, _480), vec3(cbLight._m0[_1771].xyz));
    float _4089 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
    float _1978 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
    float _1979 = dot(vec3(_478, _479, _480), vec3(_1972, _1973, _1974));
    float _4100 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
    float _1982 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
    float _1983 = dot(vec3(cbLight._m0[_1771].xyz), vec3(_1972, _1973, _1974));
    float _4111 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
    float _1987 = _1964 * _1964;
    float _1991 = ((_1982 * _1982) * (_1987 + (-1.0))) + 1.0;
    float _2000 = (exp2(log2(1.0 - (isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2001 = 1.0 - _1964;
    float _2011 = (0.5 / (((_1900 * ((_1978 * _2001) + _1964)) + 9.9999999392252902907785028219223e-09) + (((_1900 * _2001) + _1964) * _1978))) * _1978;
    float _4122 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _2013 = (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * (_1987 / ((_1991 * _1991) * 3.141590118408203125));
    float _2023 = (((_2000 * cbLight._m0[_1952].x) * _2013) * _1753) + ((((cbLight._m0[_1871].x * _1722) * _1924) * _1938) * _1767);
    float _2024 = (((_2000 * cbLight._m0[_1952].y) * _2013) * _1753) + ((((cbLight._m0[_1871].y * _1723) * _1924) * _1938) * _1767);
    float _2025 = (((_2000 * cbLight._m0[_1952].z) * _2013) * _1753) + ((((cbLight._m0[_1871].z * _1724) * _1924) * _1938) * _1767);
    float _2087;
    float _2089;
    float _2091;
    if (_1808)
    {
        _2087 = _2023;
        _2089 = _2024;
        _2091 = _2025;
    }
    else
    {
        uint _2093 = _1730 + 2u;
        uint _2097 = _1730 + 10u;
        float _2111 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2093].w)) * _481) * 0.949999988079071044921875);
        float _2112 = _2111 * _2111;
        float _2113 = cbLight._m0[_2093].x + _558;
        float _2114 = cbLight._m0[_2093].y + _559;
        float _2115 = cbLight._m0[_2093].z + _560;
        float _2119 = inversesqrt(dot(vec3(_2113, _2114, _2115), vec3(_2113, _2114, _2115)));
        float _2120 = _2119 * _2113;
        float _2121 = _2119 * _2114;
        float _2122 = _2119 * _2115;
        float _2123 = dot(vec3(_478, _479, _480), vec3(cbLight._m0[_2093].xyz));
        float _4133 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
        float _2126 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _2127 = dot(vec3(_478, _479, _480), vec3(_2120, _2121, _2122));
        float _4144 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
        float _2130 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _2131 = dot(vec3(cbLight._m0[_2093].xyz), vec3(_2120, _2121, _2122));
        float _4155 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
        float _2135 = _2112 * _2112;
        float _2139 = ((_2130 * _2130) * (_2135 + (-1.0))) + 1.0;
        float _2148 = (exp2(log2(1.0 - (isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2149 = 1.0 - _2112;
        float _2159 = (0.5 / (((_1900 * ((_2126 * _2149) + _2112)) + 9.9999999392252902907785028219223e-09) + (((_1900 * _2149) + _2112) * _2126))) * _2126;
        float _4166 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
        float _2161 = (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * (_2135 / ((_2139 * _2139) * 3.141590118408203125));
        float _2162 = isnan(1.0) ? _1745 : (isnan(_1745) ? 1.0 : min(_1745, 1.0));
        _2087 = (((_2148 * cbLight._m0[_2097].x) * _2161) * _2162) + _2023;
        _2089 = (((_2148 * cbLight._m0[_2097].y) * _2161) * _2162) + _2024;
        _2091 = (((_2148 * cbLight._m0[_2097].z) * _2161) * _2162) + _2025;
    }
    float _2197;
    float _2199;
    float _2201;
    if (_1826)
    {
        _2197 = _2087;
        _2199 = _2089;
        _2201 = _2091;
    }
    else
    {
        uint _2208 = _1730 + 3u;
        uint _2212 = _1730 + 11u;
        float _2226 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2208].w)) * _481) * 0.949999988079071044921875);
        float _2227 = _2226 * _2226;
        float _2228 = cbLight._m0[_2208].x + _558;
        float _2229 = cbLight._m0[_2208].y + _559;
        float _2230 = cbLight._m0[_2208].z + _560;
        float _2234 = inversesqrt(dot(vec3(_2228, _2229, _2230), vec3(_2228, _2229, _2230)));
        float _2235 = _2234 * _2228;
        float _2236 = _2234 * _2229;
        float _2237 = _2234 * _2230;
        float _2238 = dot(vec3(_478, _479, _480), vec3(cbLight._m0[_2208].xyz));
        float _4182 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
        float _2241 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _2242 = dot(vec3(_478, _479, _480), vec3(_2235, _2236, _2237));
        float _4193 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
        float _2245 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _2246 = dot(vec3(cbLight._m0[_2208].xyz), vec3(_2235, _2236, _2237));
        float _4204 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
        float _2250 = _2227 * _2227;
        float _2254 = ((_2245 * _2245) * (_2250 + (-1.0))) + 1.0;
        float _2263 = (exp2(log2(1.0 - (isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2264 = 1.0 - _2227;
        float _2274 = (0.5 / (((_1900 * ((_2241 * _2264) + _2227)) + 9.9999999392252902907785028219223e-09) + (((_1900 * _2264) + _2227) * _2241))) * _2241;
        float _4215 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
        float _2276 = (isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))) * (_2250 / ((_2254 * _2254) * 3.141590118408203125));
        float _2277 = isnan(1.0) ? _1746 : (isnan(_1746) ? 1.0 : min(_1746, 1.0));
        _2197 = (((_2263 * cbLight._m0[_2212].x) * _2276) * _2277) + _2087;
        _2199 = (((_2263 * cbLight._m0[_2212].y) * _2276) * _2277) + _2089;
        _2201 = (((_2263 * cbLight._m0[_2212].z) * _2276) * _2277) + _2091;
    }
    float _2412;
    float _2414;
    float _2416;
    float _2418;
    float _2420;
    float _2422;
    if (_1728.y == 0u)
    {
        float _2352 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2353 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2352;
        float _2354 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2352;
        float _2355 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2352;
        uvec4 _2367 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2368 = _2367.x;
        uint _2379 = uint((float(_2367.y) * floor(float(uint(cbSceneParam._m0[85u].y * _580) / _2368))) + floor(float(uint(cbSceneParam._m0[85u].x * _579) / _2368)));
        float _2389 = (log2(_2355 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2390 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
        uint _2393 = uint(isnan(14.0) ? _2390 : (isnan(_2390) ? 14.0 : min(_2390, 14.0)));
        uvec4 _2398 = texelFetch(g_lightClusterGridBuffer, int(((_2393 << 2u) + (_2379 << 6u)) >> 2u));
        uint _2399 = _2398.x;
        uint _2400 = _2367.z;
        float _2529;
        float _2531;
        float _2533;
        float _2535;
        float _2537;
        float _2539;
        if (((((1u << ((_2400 >> 4u) & 15u)) + 4294967295u) & _2399) == 0u) || ((_2400 & 240u) == 0u))
        {
            _2529 = 0.0;
            _2531 = 0.0;
            _2533 = 0.0;
            _2535 = 0.0;
            _2537 = 0.0;
            _2539 = 0.0;
        }
        else
        {
            float _2530;
            float _2532;
            float _2534;
            float _2536;
            float _2538;
            float _2540;
            float _2690 = 0.0;
            float _2691 = 0.0;
            float _2692 = 0.0;
            float _2693 = 0.0;
            float _2694 = 0.0;
            float _2695 = 0.0;
            uint _2696 = 0u;
            uint _2705;
            bool _2706;
            for (;;)
            {
                _2705 = texelFetch(g_lightClassification, int((((_2393 << 5u) + (_2379 << 9u)) + (_2696 << 2u)) >> 2u)).x;
                _2706 = _2705 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2706)
                {
                    frontier_phi_66_pred = _2690;
                    frontier_phi_66_pred_1 = _2695;
                    frontier_phi_66_pred_2 = _2694;
                    frontier_phi_66_pred_3 = _2693;
                    frontier_phi_66_pred_4 = _2692;
                    frontier_phi_66_pred_5 = _2691;
                }
                else
                {
                    float _2835;
                    float _2836;
                    float _2837;
                    float _2838;
                    float _2839;
                    float _2840;
                    uint _2841;
                    _2835 = _2690;
                    _2836 = _2691;
                    _2837 = _2692;
                    _2838 = _2693;
                    _2839 = _2694;
                    _2840 = _2695;
                    _2841 = _2705;
                    float _2762;
                    float _2763;
                    float _2764;
                    float _2765;
                    float _2766;
                    float _2767;
                    for (;;)
                    {
                        uint _2845 = uint(findLSB(_2841)) + (_2696 << 5u);
                        uint _2842 = (_2841 + 4294967295u) & _2841;
                        uint _2847 = _2845 * 48u;
                        vec4 _2861 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2847)).x, texelFetch(g_PointLightRenderingBuffer, int(_2847 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2847 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2847 + 3u)).x));
                        uint _2867 = (_2845 * 48u) + 4u;
                        vec4 _2880 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2867)).x, texelFetch(g_PointLightRenderingBuffer, int(_2867 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2867 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2867 + 3u)).x));
                        uint _2886 = (_2845 * 48u) + 8u;
                        vec3 _2897 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2886)).x, texelFetch(g_PointLightRenderingBuffer, int(_2886 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2886 + 2u)).x));
                        float _2901 = _2861.x - _2353;
                        float _2902 = _2861.y - _2354;
                        float _2903 = _2861.z - _2355;
                        float _2904 = dot(vec3(_2901, _2902, _2903), vec3(_2901, _2902, _2903));
                        float _2907 = inversesqrt(_2904);
                        float _2908 = _2907 * _2901;
                        float _2909 = _2907 * _2902;
                        float _2910 = _2907 * _2903;
                        float _2911 = dot(vec3(_600, _603, _606), vec3(_2908, _2909, _2910));
                        float _2916 = 1.0 - (_2904 * _2861.w);
                        float _4241 = isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : max(_2916, 0.0));
                        float _2917 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
                        float _2918 = sqrt(_2904) * _2880.w;
                        float _2921 = 1.39999997615814208984375 / (_2918 + 1.39999997615814208984375);
                        float _2922 = _2921 * _2921;
                        float _2925 = ((1.0 - _2922) * _2911) + _2922;
                        float _2928 = _2918 * _2918;
                        float _2932 = ((isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : max(_2925, 0.0))) * _2917) / ((_2928 * 0.699999988079071044921875) + 1.0);
                        float _2936 = (-0.0) - _2353;
                        float _2937 = (-0.0) - _2354;
                        float _2938 = (-0.0) - _2355;
                        float _2942 = inversesqrt(dot(vec3(_2936, _2937, _2938), vec3(_2936, _2937, _2938)));
                        float _2943 = _2942 * _2936;
                        float _2944 = _2942 * _2937;
                        float _2945 = _2942 * _2938;
                        float _2953 = exp2(log2(1.0 / ((_2928 * 3.5) + 5.0)) * 0.25);
                        float _2954 = 1.0 - _660;
                        float _2961 = sqrt(1.0 - ((1.0 - (_2954 * _2954)) * (1.0 - (_2953 * _2953))));
                        float _2962 = _2961 * _2961;
                        float _2963 = _2962 * _2962;
                        float _2964 = _2943 + _2908;
                        float _2965 = _2944 + _2909;
                        float _2966 = _2945 + _2910;
                        float _2970 = inversesqrt(dot(vec3(_2964, _2965, _2966), vec3(_2964, _2965, _2966)));
                        float _2974 = dot(vec3(_600, _603, _606), vec3(_2943, _2944, _2945));
                        float _4257 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0));
                        float _2977 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
                        float _2978 = dot(vec3(_600, _603, _606), vec3(_2970 * _2964, _2970 * _2965, _2970 * _2966));
                        float _4268 = isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0));
                        float _2981 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
                        float _2985 = ((_2981 * _2981) * (_2963 + (-1.0))) + 1.0;
                        float _2986 = _2921 * _2962;
                        float _2987 = _2986 * _2986;
                        float _2990 = ((1.0 - _2987) * _2911) + _2987;
                        float _4279 = isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : max(_2990, 0.0));
                        float _2991 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
                        float _2992 = 1.0 - _2962;
                        float _3002 = (0.5 / (((_2991 * ((_2977 * _2992) + _2962)) + 9.9999999392252902907785028219223e-09) + (((_2991 * _2992) + _2962) * _2977))) * _2991;
                        float _4290 = isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : max(_3002, 0.0));
                        float _3013 = (((_2963 * 3.1415927410125732421875) * (isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0)))) / ((_2985 * _2985) * ((_2928 * 2.1991131305694580078125) + 3.141590118408203125))) * _2917;
                        _2765 = (_2932 * _2880.x) + _2838;
                        _2766 = (_2932 * _2880.y) + _2839;
                        _2767 = (_2932 * _2880.z) + _2840;
                        _2762 = (_3013 * _2897.x) + _2835;
                        _2763 = (_3013 * _2897.y) + _2836;
                        _2764 = (_3013 * _2897.z) + _2837;
                        if (_2842 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2835 = _2762;
                            _2836 = _2763;
                            _2837 = _2764;
                            _2838 = _2765;
                            _2839 = _2766;
                            _2840 = _2767;
                            _2841 = _2842;
                        }
                    }
                    frontier_phi_66_pred = _2762;
                    frontier_phi_66_pred_1 = _2767;
                    frontier_phi_66_pred_2 = _2766;
                    frontier_phi_66_pred_3 = _2765;
                    frontier_phi_66_pred_4 = _2764;
                    frontier_phi_66_pred_5 = _2763;
                }
                _2530 = frontier_phi_66_pred;
                _2540 = frontier_phi_66_pred_1;
                _2538 = frontier_phi_66_pred_2;
                _2536 = frontier_phi_66_pred_3;
                _2534 = frontier_phi_66_pred_4;
                _2532 = frontier_phi_66_pred_5;
                uint _2697 = _2696 + 1u;
                if (_2697 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2690 = _2530;
                    _2691 = _2532;
                    _2692 = _2534;
                    _2693 = _2536;
                    _2694 = _2538;
                    _2695 = _2540;
                    _2696 = _2697;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2529 = _2530;
            _2531 = _2532;
            _2533 = _2534;
            _2535 = _2536;
            _2537 = _2538;
            _2539 = _2540;
        }
        uvec4 _2543 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2544 = _2543.z;
        uint _2546 = (_2544 >> 8u) & 15u;
        float _2658;
        float _2660;
        float _2662;
        float _2664;
        float _2666;
        float _2668;
        if (((4294967295u << _2546) & _2399) == 0u)
        {
            _2658 = _2529;
            _2660 = _2531;
            _2662 = _2533;
            _2664 = _2535;
            _2666 = _2537;
            _2668 = _2539;
        }
        else
        {
            float _2683 = inversesqrt(dot(vec3(_2353, _2354, _2355), vec3(_2353, _2354, _2355)));
            float _2684 = _2683 * _2353;
            float _2685 = _2683 * _2354;
            float _2686 = _2683 * _2355;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2546 < ((_2544 >> 12u) & 15u))
            {
                float _2659;
                float _2661;
                float _2663;
                float _2665;
                float _2667;
                float _2669;
                float _2818 = _2529;
                float _2819 = _2531;
                float _2820 = _2533;
                float _2821 = _2535;
                float _2822 = _2537;
                float _2823 = _2539;
                uint _2824 = _2546;
                uint _2833;
                bool _2834;
                for (;;)
                {
                    _2833 = texelFetch(g_lightClassification, int((((_2393 << 5u) + (_2379 << 9u)) + (_2824 << 2u)) >> 2u)).x;
                    _2834 = _2833 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2834)
                    {
                        frontier_phi_77_pred = _2823;
                        frontier_phi_77_pred_1 = _2822;
                        frontier_phi_77_pred_2 = _2821;
                        frontier_phi_77_pred_3 = _2820;
                        frontier_phi_77_pred_4 = _2819;
                        frontier_phi_77_pred_5 = _2818;
                    }
                    else
                    {
                        float _3027;
                        float _3028;
                        float _3029;
                        float _3030;
                        float _3031;
                        float _3032;
                        float _3321;
                        float _3322;
                        float _3323;
                        float _3324;
                        float _3325;
                        float _3326;
                        float _3040 = _2818;
                        float _3041 = _2819;
                        float _3042 = _2820;
                        float _3043 = _2821;
                        float _3044 = _2822;
                        float _3045 = _2823;
                        uint _3046 = _2833;
                        uint _3047;
                        vec4 _3072;
                        float _3073;
                        vec4 _3088;
                        vec3 _3100;
                        vec4 _3115;
                        vec4 _3130;
                        float _3177;
                        bool _3178;
                        for (;;)
                        {
                            uint _3057 = ((_2824 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3046));
                            _3047 = (_3046 + 4294967295u) & _3046;
                            uint _3059 = _3057 * 40u;
                            _3072 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3059)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 3u)).x));
                            _3073 = _3072.w;
                            uint _3075 = (_3057 * 40u) + 4u;
                            _3088 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3075)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 3u)).x));
                            uint _3090 = (_3057 * 40u) + 8u;
                            _3100 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3090)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 2u)).x));
                            uint _3102 = (_3057 * 40u) + 16u;
                            _3115 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3102)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 3u)).x));
                            uint _3117 = (_3057 * 40u) + 20u;
                            _3130 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3117)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 3u)).x));
                            uint _3133 = (_3057 * 40u) + 24u;
                            vec4 _3146 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3133)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 3u)).x));
                            uint _3152 = (_3057 * 40u) + 28u;
                            vec4 _3165 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3152)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 3u)).x));
                            _3177 = fma(_2355, _3165.z, fma(_2354, _3165.y, _3165.x * _2353)) + _3165.w;
                            _3178 = !((fma(_2355, _3146.z, fma(_2354, _3146.y, _3146.x * _2353)) + _3146.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3178)
                            {
                                float _3205 = _3072.x - _2353;
                                float _3206 = _3072.y - _2354;
                                float _3207 = _3072.z - _2355;
                                float _3208 = dot(vec3(_3205, _3206, _3207), vec3(_3205, _3206, _3207));
                                float _3211 = inversesqrt(_3208);
                                float _3212 = _3211 * _3205;
                                float _3213 = _3211 * _3206;
                                float _3214 = _3211 * _3207;
                                float _3218 = 1.0 - (_3208 / (_3073 * _3073));
                                float _4301 = isnan(0.0) ? _3218 : (isnan(_3218) ? 0.0 : max(_3218, 0.0));
                                float _3219 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
                                float _3223 = sqrt(_3208) * _3088.w;
                                float _3225 = 1.39999997615814208984375 / (_3223 + 1.39999997615814208984375);
                                float _3226 = _3225 * _3225;
                                float _3229 = ((1.0 - _3226) * dot(vec3(_3212, _3213, _3214), vec3(_600, _603, _606))) + _3226;
                                float _3232 = _3223 * _3223;
                                float _3236 = (fma(_2355, _3115.z, fma(_2354, _3115.y, _3115.x * _2353)) + _3115.w) / _3177;
                                float _3237 = (fma(_2355, _3130.z, fma(_2354, _3130.y, _3130.x * _2353)) + _3130.w) / _3177;
                                float _3241 = 1.0 - dot(vec2(_3236, _3237), vec2(_3236, _3237));
                                float _4317 = isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0));
                                float _3242 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
                                float _3243 = _3242 * (((isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0))) * _3219) / ((_3232 * 0.699999988079071044921875) + 1.0));
                                float _3255 = exp2(log2(1.0 / ((_3232 * 3.5) + 5.0)) * 0.25);
                                float _3256 = 1.0 - _660;
                                float _3263 = sqrt(1.0 - ((1.0 - (_3256 * _3256)) * (1.0 - (_3255 * _3255))));
                                float _3264 = _3263 * _3263;
                                float _3265 = _3264 * _3264;
                                float _3266 = _3212 - _2684;
                                float _3267 = _3213 - _2685;
                                float _3268 = _3214 - _2686;
                                float _3272 = inversesqrt(dot(vec3(_3266, _3267, _3268), vec3(_3266, _3267, _3268)));
                                float _3276 = dot(vec3(_600, _603, _606), vec3((-0.0) - _2684, (-0.0) - _2685, (-0.0) - _2686));
                                float _4328 = isnan(0.0) ? _3276 : (isnan(_3276) ? 0.0 : max(_3276, 0.0));
                                float _3279 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
                                float _3280 = dot(vec3(_600, _603, _606), vec3(_3272 * _3266, _3272 * _3267, _3272 * _3268));
                                float _4339 = isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0));
                                float _3283 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
                                float _3287 = ((_3283 * _3283) * (_3265 + (-1.0))) + 1.0;
                                float _3288 = _3225 * _3264;
                                float _3289 = _3288 * _3288;
                                float _3295 = ((1.0 - _3289) * dot(vec3(_600, _603, _606), vec3(_3212, _3213, _3214))) + _3289;
                                float _4350 = isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0));
                                float _3296 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
                                float _3297 = 1.0 - _3264;
                                float _3307 = (0.5 / (((_3296 * ((_3279 * _3297) + _3264)) + 9.9999999392252902907785028219223e-09) + (((_3296 * _3297) + _3264) * _3279))) * _3296;
                                float _4361 = isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0));
                                float _3317 = (_3242 * _3219) * (((_3265 * 3.1415927410125732421875) * (isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0)))) / ((_3287 * _3287) * ((_3232 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3243 * _3088.y;
                                frontier_phi_83_pred_1 = _3243 * _3088.x;
                                frontier_phi_83_pred_2 = _3317 * _3100.z;
                                frontier_phi_83_pred_3 = _3317 * _3100.y;
                                frontier_phi_83_pred_4 = _3317 * _3100.x;
                                frontier_phi_83_pred_5 = _3243 * _3088.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3325 = frontier_phi_83_pred;
                            _3324 = frontier_phi_83_pred_1;
                            _3323 = frontier_phi_83_pred_2;
                            _3322 = frontier_phi_83_pred_3;
                            _3321 = frontier_phi_83_pred_4;
                            _3326 = frontier_phi_83_pred_5;
                            _3030 = _3324 + _3043;
                            _3031 = _3325 + _3044;
                            _3032 = _3326 + _3045;
                            _3027 = _3321 + _3040;
                            _3028 = _3322 + _3041;
                            _3029 = _3323 + _3042;
                            if (_3047 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3040 = _3027;
                                _3041 = _3028;
                                _3042 = _3029;
                                _3043 = _3030;
                                _3044 = _3031;
                                _3045 = _3032;
                                _3046 = _3047;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3032;
                        frontier_phi_77_pred_1 = _3031;
                        frontier_phi_77_pred_2 = _3030;
                        frontier_phi_77_pred_3 = _3029;
                        frontier_phi_77_pred_4 = _3028;
                        frontier_phi_77_pred_5 = _3027;
                    }
                    _2669 = frontier_phi_77_pred;
                    _2667 = frontier_phi_77_pred_1;
                    _2665 = frontier_phi_77_pred_2;
                    _2663 = frontier_phi_77_pred_3;
                    _2661 = frontier_phi_77_pred_4;
                    _2659 = frontier_phi_77_pred_5;
                    uint _2825 = _2824 + 1u;
                    if (_2825 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2818 = _2659;
                        _2819 = _2661;
                        _2820 = _2663;
                        _2821 = _2665;
                        _2822 = _2667;
                        _2823 = _2669;
                        _2824 = _2825;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2663;
                frontier_phi_58_59_ladder_1 = _2669;
                frontier_phi_58_59_ladder_2 = _2667;
                frontier_phi_58_59_ladder_3 = _2665;
                frontier_phi_58_59_ladder_4 = _2661;
                frontier_phi_58_59_ladder_5 = _2659;
            }
            else
            {
                frontier_phi_58_59_ladder = _2533;
                frontier_phi_58_59_ladder_1 = _2539;
                frontier_phi_58_59_ladder_2 = _2537;
                frontier_phi_58_59_ladder_3 = _2535;
                frontier_phi_58_59_ladder_4 = _2531;
                frontier_phi_58_59_ladder_5 = _2529;
            }
            _2658 = frontier_phi_58_59_ladder_5;
            _2660 = frontier_phi_58_59_ladder_4;
            _2662 = frontier_phi_58_59_ladder;
            _2664 = frontier_phi_58_59_ladder_3;
            _2666 = frontier_phi_58_59_ladder_2;
            _2668 = frontier_phi_58_59_ladder_1;
        }
        float _2673 = isnan(1.0) ? _644 : (isnan(_644) ? 1.0 : min(_644, 1.0));
        _2412 = (_2673 * _2664) + _1864;
        _2414 = (_2673 * _2666) + _1866;
        _2416 = (_2673 * _2668) + _1868;
        _2418 = ((_2658 * 0.039999999105930328369140625) * _2673) + _2197;
        _2420 = ((_2660 * 0.039999999105930328369140625) * _2673) + _2199;
        _2422 = ((_2662 * 0.039999999105930328369140625) * _2673) + _2201;
    }
    else
    {
        _2412 = _1864;
        _2414 = _1866;
        _2416 = _1868;
        _2418 = _2197;
        _2420 = _2199;
        _2422 = _2201;
    }
    uint _2428 = _620 + uint(cbMatDynParam._m0[0u].w);
    float _2434 = ((((((_433.x - _430) * _366) + _430) * cbMtdParam._m0[13u].x) + ((((_387.x - _384) * _366) + _384) * cbMtdParam._m0[11u].x)) * _461) * cbInstanceData._m0[_2428].x;
    float _2435 = ((((((_433.y - _431) * _366) + _431) * cbMtdParam._m0[13u].y) + ((((_387.y - _385) * _366) + _385) * cbMtdParam._m0[11u].y)) * _461) * cbInstanceData._m0[_2428].y;
    float _2436 = ((((((_433.z - _432) * _366) + _432) * cbMtdParam._m0[13u].z) + ((((_387.z - _386) * _366) + _386) * cbMtdParam._m0[11u].z)) * _461) * cbInstanceData._m0[_2428].z;
    float _4377 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _4388 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _4399 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _2453 = (((isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0))) * (_2412 + ((isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0))) * _644))) + ((_2418 + ((isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0))) * _1481)) * cbPerFrame._m0[3u].x)) + _2434;
    float _2455 = (_2435 + ((_2420 + ((isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0))) * _1481)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0))) * (_2414 + ((isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0))) * _644)));
    float _2457 = (_2436 + ((_2422 + ((isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0))) * _1481)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0))) * (_2416 + ((isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0))) * _644)));
    float _2458 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
    float _2459 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
    float _2460 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
    float _2466 = cbMtdParam._m0[2u].x * _2434;
    float _2467 = cbMtdParam._m0[2u].y * _2435;
    float _2468 = cbMtdParam._m0[2u].z * _2436;
    float _4425 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2470 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
    uint _2471 = _619 + 6u;
    float _2479 = _579 / cbSceneParam._m0[86u].x;
    float _2480 = _580 / cbSceneParam._m0[86u].y;
    vec4 _2494 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2479, _2480, (log2((isnan(cbSceneParam._m0[77u].w) ? _500 : (isnan(_500) ? cbSceneParam._m0[77u].w : min(_500, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2496 = _2494.x;
    float _2497 = _2494.y;
    float _2498 = _2494.z;
    float _2499 = _2494.w;
    float _2591;
    float _2593;
    float _2595;
    float _2597;
    if (_500 > cbSceneParam._m0[78u].w)
    {
        float _2554 = isnan(_500) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _500 : min(cbSceneParam._m0[80u].w, _500));
        float _2555 = _2554 / _500;
        float _2566 = _2555 * _551;
        float _2567 = _552 * _2555;
        float _2568 = (-0.0) - _2567;
        float _2569 = _2555 * _553;
        float _2571 = (cbSceneParam._m0[77u].w * _2568) / _2554;
        float _2572 = _2571 + cbSceneParam._m0[79u].w;
        float _2573 = cbSceneParam._m0[79u].w - _2567;
        float _2579 = sqrt(((_2566 * _2566) + (_2567 * _2567)) + (_2569 * _2569));
        float _2582 = (1.0 - (cbSceneParam._m0[77u].w / _2554)) * _2579;
        float _2587 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2589 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2775;
        if (abs((_2568 - _2571) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2775 = ((((_2572 > 0.0) ? exp2(_2587 * _2572) : (2.0 - exp2(_2589 * _2572))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2582;
        }
        else
        {
            float _2719 = 1.0 / cbSceneParam._m0[80u].x;
            float _2720 = isnan(_2573) ? _2572 : (isnan(_2572) ? _2573 : max(_2572, _2573));
            float _2721 = isnan(_2573) ? _2572 : (isnan(_2572) ? _2573 : min(_2572, _2573));
            float _2730 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : min(_2720, 0.0));
            float _2731 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : min(_2721, 0.0));
            _2775 = ((abs(_2579 / _2568) * cbSceneParam._m0[80u].y) * ((((_2730 - _2731) * 2.0) - ((exp2(_2587 * (isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0)))) - exp2(_2587 * (isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0))))) * _2719)) - ((exp2(_2589 * _2730) - exp2(_2589 * _2731)) * _2719))) + (_2582 * cbSceneParam._m0[80u].z);
        }
        vec4 _2777 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2479, _2480, 1.0), 0.0);
        float _2786 = exp2((_2775 * (-1.44269502162933349609375)) * (1.0 - _2777.w));
        float _2787 = log2(_2786);
        float _2803 = log2(_2499);
        _2591 = (exp2(_2803 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2787 * cbSceneParam._m0[78u].x)) * _2777.x) / cbSceneParam._m0[78u].x)) + _2496;
        _2593 = (exp2(_2803 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2787 * cbSceneParam._m0[78u].y)) * _2777.y) / cbSceneParam._m0[78u].y)) + _2497;
        _2595 = (exp2(_2803 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2787 * cbSceneParam._m0[78u].z)) * _2777.z) / cbSceneParam._m0[78u].z)) + _2498;
        _2597 = _2786 * _2499;
    }
    else
    {
        _2591 = _2496;
        _2593 = _2497;
        _2595 = _2498;
        _2597 = _2499;
    }
    bool _2813;
    vec4 _2607;
    vec4 _2629;
    float _2631;
    float _2635;
    float _2636;
    float _2637;
    float _2640;
    float _2643;
    float _2646;
    float _2647;
    bool _2657;
    for (;;)
    {
        _2607 = cbMatDynParam._m0[0u];
        float _2609 = roundEven(_2607.y);
        bool _2610 = _2609 == 3.0;
        float _2611 = log2(_2597);
        float _2615 = exp2(_2611 * cbSceneParam._m0[78u].x);
        float _2616 = exp2(_2611 * cbSceneParam._m0[78u].y);
        float _2617 = exp2(_2611 * cbSceneParam._m0[78u].z);
        float _2618 = _2615 * _2458;
        float _2619 = _2616 * _2459;
        float _2620 = _2617 * _2460;
        float _2627 = _567 + (-0.5);
        _2629 = cbMtdParam._m0[1u];
        _2631 = _2629.y * _2627;
        float _2634 = (_2609 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2635 = _2634 * (_2610 ? _2618 : (_2618 + (cbSceneParam._m0[72u].w * _2591)));
        _2636 = _2634 * (_2610 ? _2619 : (_2619 + (cbSceneParam._m0[72u].w * _2593)));
        _2637 = _2634 * (_2610 ? _2620 : (_2620 + (cbSceneParam._m0[72u].w * _2595)));
        _2640 = ((_2466 * _2470) * _2615) * _2634;
        _2643 = ((_2467 * _2470) * _2616) * _2634;
        _2646 = ((_2468 * _2470) * _2617) * _2634;
        _2647 = _2627 * 0.999000012874603271484375;
        _2657 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2657)
        {
            if ((cbInstanceData._m0[_619 + 7u].x + _2647) < 0.5)
            {
                _2813 = true;
                break;
            }
        }
        uint _2754 = _620 + uint(_2607.w);
        if ((cbInstanceData._m0[_2754].w < 1.0) && ((cbInstanceData._m0[_2754].w + _2647) < 0.5))
        {
            _2813 = true;
            break;
        }
        if ((_2631 + 1.0) < _2629.x)
        {
            _2813 = true;
            break;
        }
        _2813 = false;
        break;
    }
    float _3018;
    if (_2813)
    {
        discard_state = true;
        _3018 = 0.0;
    }
    else
    {
        _3018 = cbInstanceData._m0[_2471].w;
    }
    SV_Target.x = _2635;
    SV_Target.y = _2636;
    SV_Target.z = _2637;
    SV_Target.w = _3018;
    SV_Target_1.x = _2640;
    SV_Target_1.y = _2643;
    SV_Target_1.z = _2646;
    SV_Target_1.w = cbInstanceData._m0[_2471].w;
    discard_exit();
}


