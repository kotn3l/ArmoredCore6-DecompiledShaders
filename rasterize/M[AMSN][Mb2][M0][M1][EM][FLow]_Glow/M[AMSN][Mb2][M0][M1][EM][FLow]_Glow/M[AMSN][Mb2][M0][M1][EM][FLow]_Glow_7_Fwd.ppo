#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1032;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _189 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _190 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _191 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _197 = inversesqrt(dot(vec3(_189, _190, _191), vec3(_189, _190, _191)));
    float _204 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _211 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _233 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _239 = _233.x * cbMtdParam._m0[9u].x;
    float _240 = _233.y * cbMtdParam._m0[9u].y;
    float _241 = _233.z * cbMtdParam._m0[9u].z;
    vec4 _258 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    vec4 _273 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[6u].w));
    float _275 = _273.x;
    vec4 _287 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _291 = _287.z;
    float _295 = (_287.x * 2.0) + (-1.0);
    float _297 = (_287.y * 2.0) + (-1.0);
    float _298 = dot(vec2(_295, _297), vec2(_295, _297));
    float _3400 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _304 = sqrt(1.0 - (isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0))));
    float _317 = (cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _318 = (cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _348 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * ((cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * ((cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[10u].w));
    float _353 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[15u].w;
    float _360 = ((_348.y * 0.5) + (-0.25)) * cbMtdParam._m0[15u].z;
    float _362 = (-0.0) - (cbMtdParam._m0[15u].z * ((_348.x * 0.5) + (-0.25)));
    float _364 = fract(_353);
    float _366 = fract(_353 + 0.5);
    float _367 = _364 * _362;
    float _368 = _360 * _364;
    float _371 = _366 * _362;
    float _372 = _360 * _366;
    float _377 = abs((_364 * 2.0) + (-1.0));
    vec4 _393 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_367 + _317) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_368 + _318) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _395 = _393.x;
    float _396 = _393.y;
    float _397 = _393.z;
    vec4 _398 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_371 + _317) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_372 + _318) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _425 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _426 = (cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _439 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_367 + _425) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_368 + _426) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _441 = _439.x;
    float _442 = _439.y;
    float _443 = _439.z;
    vec4 _444 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_371 + _425) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_372 + _426) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _471 = (TEXCOORD_9.x - ((cbMtdParam._m0[16u].y * (1.0 - TEXCOORD_9.x)) * (_258.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[16u].z + 1.0);
    float _3411 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _472 = isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0));
    float _478 = fma(_304, _204 * NORMAL.x, fma(_297, _211 * TANGENT.x, (_197 * _189) * _295));
    float _481 = fma(_304, _204 * NORMAL.y, fma(_297, _211 * TANGENT.y, (_197 * _190) * _295));
    float _484 = fma(_304, _204 * NORMAL.z, fma(_297, _211 * TANGENT.z, (_197 * _191) * _295));
    float _488 = inversesqrt(dot(vec3(_478, _481, _484), vec3(_478, _481, _484)));
    float _489 = _488 * _478;
    float _490 = _488 * _481;
    float _491 = _488 * _484;
    float _3422 = isnan(0.0) ? _291 : (isnan(_291) ? 0.0 : max(_291, 0.0));
    float _492 = isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0));
    float _3433 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3444 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _3455 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3466 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _496 = isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0));
    float _512 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _553 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _563 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _553);
    float _564 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _553);
    float _565 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _553);
    float _569 = inversesqrt(dot(vec3(_563, _564, _565), vec3(_563, _564, _565)));
    float _570 = _563 * _569;
    float _571 = _564 * _569;
    float _572 = _565 * _569;
    float _578 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _579 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _599 = fma(_491, cbSceneParam._m0[5u].z, fma(_490, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _489));
    float _602 = fma(_491, cbSceneParam._m0[6u].z, fma(_490, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _489));
    float _605 = fma(_491, cbSceneParam._m0[7u].z, fma(_490, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _489));
    uint _618 = uint(roundEven(NORMAL.w)) * 13u;
    uint _619 = _618 + 9u;
    uint _620 = _619 + uint(cbMatDynParam._m0[0u].w);
    float _626 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0)))) * cbInstanceData._m0[_620].x;
    float _627 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0)))) * cbInstanceData._m0[_620].y;
    float _628 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0)))) * cbInstanceData._m0[_620].z;
    float _3477 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _629 = isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0));
    float _3488 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _630 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
    float _3499 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _631 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
    float _632 = 1.0 - _496;
    float _633 = _629 * _632;
    float _634 = _630 * _632;
    float _635 = _631 * _632;
    float _640 = (_629 + (-0.039999999105930328369140625)) * _496;
    float _641 = (_630 + (-0.039999999105930328369140625)) * _496;
    float _642 = (_631 + (-0.039999999105930328369140625)) * _496;
    float _643 = _640 + 0.039999999105930328369140625;
    float _645 = _641 + 0.039999999105930328369140625;
    float _646 = _642 + 0.039999999105930328369140625;
    vec4 _655 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _578, cbSceneParam._m0[86u].y * _579));
    float _658 = _655.x * TEXCOORD_3.w;
    float _659 = dot(vec3(_489, _490, _491), vec3(_570, _571, _572));
    float _662 = _659 * 2.0;
    float _666 = (_662 * _489) - _570;
    float _667 = (_662 * _490) - _571;
    float _668 = (_662 * _491) - _572;
    float _672 = abs(dot(vec3(_570, _571, _572), vec3(_489, _490, _491)));
    float _3510 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _674 = sqrt(_492);
    float _687 = exp2((_674 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_674 * 3.0));
    float _693 = (1.0 - _687) * ((_674 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _694 = _687 * _674;
    float _722 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _726 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _730 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1031;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _757 = fma(_730, cbModelParam._m0[26u].z, fma(_726, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _722));
        float _761 = fma(_730, cbModelParam._m0[27u].z, fma(_726, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _722));
        float _765 = fma(_730, cbModelParam._m0[28u].z, fma(_726, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _722));
        float _789 = _722 + _489;
        float _790 = _726 + _490;
        float _791 = _730 + _491;
        float _801 = fma(_791, cbModelParam._m0[26u].z, fma(_790, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _789)) - _757;
        float _802 = fma(_791, cbModelParam._m0[27u].z, fma(_790, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _789)) - _761;
        float _803 = fma(_791, cbModelParam._m0[28u].z, fma(_790, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _789)) - _765;
        float _807 = inversesqrt(dot(vec3(_801, _802, _803), vec3(_801, _802, _803)));
        float _820 = ((_807 * _801) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_757 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _821 = ((_807 * _802) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_761 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _822 = ((_807 * _803) / cbModelParam._m0[34u].z) + ((((((_765 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _825 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_820, _821, _822), 0.0);
        vec4 _832 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_820, _821, _822), 0.0);
        vec4 _839 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_820, _821, _822), 0.0);
        vec4 _846 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_820, _821, _822), 0.0);
        float _859 = exp2((_825.w + (-0.5)) * 20.0) * 2.0;
        float _860 = _859 * (_825.x + (-0.5));
        float _861 = _859 * (_825.y + (-0.5));
        float _862 = _859 * (_825.z + (-0.5));
        float _869 = exp2((_832.w + (-0.5)) * 20.0) * 2.0;
        float _870 = _869 * (_832.x + (-0.5));
        float _871 = _869 * (_832.y + (-0.5));
        float _872 = _869 * (_832.z + (-0.5));
        float _879 = exp2((_839.w + (-0.5)) * 20.0) * 2.0;
        float _880 = _879 * (_839.x + (-0.5));
        float _881 = _879 * (_839.y + (-0.5));
        float _882 = _879 * (_839.z + (-0.5));
        float _889 = exp2((_846.w + (-0.5)) * 20.0) * 2.0;
        float _890 = _889 * (_846.x + (-0.5));
        float _891 = _889 * (_846.y + (-0.5));
        float _892 = _889 * (_846.z + (-0.5));
        float _893 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _894 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _895 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _896 = _860 * 0.5;
        float _897 = _870 * 0.5;
        float _898 = _880 * 0.5;
        float _899 = dot(vec3(_896, _897, _898), vec3(_896, _897, _898));
        float _904 = (_899 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_899);
        float _913 = (dot(vec3(_489, _490, _491), vec3(_904 * _896, _904 * _897, _904 * _898)) + 1.0) * 0.5;
        float _3536 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _923 = sqrt(((_897 * _897) + (_896 * _896)) + (_898 * _898)) / (_893 + 9.9999997473787516355514526367188e-06);
        float _3547 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _924 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
        float _925 = _924 * 2.0;
        float _929 = (1.0 - _924) / (_924 + 1.0);
        float _3558 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _930 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
        float _939 = ((((1.0 - _930) * (_925 + 2.0)) * exp2(log2(isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0))) * (_925 + 1.0))) + _930) * _893;
        float _940 = _861 * 0.5;
        float _941 = _871 * 0.5;
        float _942 = _881 * 0.5;
        float _943 = dot(vec3(_940, _941, _942), vec3(_940, _941, _942));
        float _948 = (_943 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_943);
        float _956 = (dot(vec3(_489, _490, _491), vec3(_948 * _940, _948 * _941, _948 * _942)) + 1.0) * 0.5;
        float _3569 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _965 = sqrt(((_941 * _941) + (_940 * _940)) + (_942 * _942)) / (_894 + 9.9999997473787516355514526367188e-06);
        float _3580 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _966 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
        float _967 = _966 * 2.0;
        float _971 = (1.0 - _966) / (_966 + 1.0);
        float _3591 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _972 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
        float _981 = ((((1.0 - _972) * (_967 + 2.0)) * exp2(log2(isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0))) * (_967 + 1.0))) + _972) * _894;
        float _982 = _862 * 0.5;
        float _983 = _872 * 0.5;
        float _984 = _882 * 0.5;
        float _985 = dot(vec3(_982, _983, _984), vec3(_982, _983, _984));
        float _990 = (_985 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_985);
        float _998 = (dot(vec3(_489, _490, _491), vec3(_990 * _982, _990 * _983, _990 * _984)) + 1.0) * 0.5;
        float _3602 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _1007 = sqrt(((_983 * _983) + (_982 * _982)) + (_984 * _984)) / (_895 + 9.9999997473787516355514526367188e-06);
        float _3613 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1008 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
        float _1009 = _1008 * 2.0;
        float _1013 = (1.0 - _1008) / (_1008 + 1.0);
        float _3624 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1014 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
        float _1023 = ((((1.0 - _1014) * (_1009 + 2.0)) * exp2(log2(isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0))) * (_1009 + 1.0))) + _1014) * _895;
        _1031 = _862;
        _1033 = _861;
        _1034 = _860;
        _1035 = _872;
        _1036 = _871;
        _1037 = _870;
        _1038 = _882;
        _1039 = _881;
        _1040 = _880;
        _1041 = _895;
        _1042 = _894;
        _1043 = _893;
        _1044 = cbModelParam._m0[36u].z * (isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0)));
        _1045 = cbModelParam._m0[36u].z * (isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0)));
        _1046 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0)));
    }
    else
    {
        _1031 = _1032;
        _1033 = _1032;
        _1034 = _1032;
        _1035 = _1032;
        _1036 = _1032;
        _1037 = _1032;
        _1038 = _1032;
        _1039 = _1032;
        _1040 = _1032;
        _1041 = _1032;
        _1042 = _1032;
        _1043 = _1032;
        _1044 = 0.0;
        _1045 = 0.0;
        _1046 = 0.0;
    }
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1072 = fma(_730, cbModelParam._m0[30u].z, fma(_726, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _722));
        float _1076 = fma(_730, cbModelParam._m0[31u].z, fma(_726, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _722));
        float _1080 = fma(_730, cbModelParam._m0[32u].z, fma(_726, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _722));
        float _1103 = _722 + _489;
        float _1104 = _726 + _490;
        float _1105 = _730 + _491;
        float _1115 = fma(_1105, cbModelParam._m0[30u].z, fma(_1104, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1103)) - _1072;
        float _1116 = fma(_1105, cbModelParam._m0[31u].z, fma(_1104, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1103)) - _1076;
        float _1117 = fma(_1105, cbModelParam._m0[32u].z, fma(_1104, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1103)) - _1080;
        float _1121 = inversesqrt(dot(vec3(_1115, _1116, _1117), vec3(_1115, _1116, _1117)));
        float _1134 = ((_1121 * _1115) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1072 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1135 = ((_1121 * _1116) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1076 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1136 = ((_1121 * _1117) / cbModelParam._m0[35u].z) + ((((((_1080 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1138 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1134, _1135, _1136), 0.0);
        vec4 _1145 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1134, _1135, _1136), 0.0);
        vec4 _1152 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1134, _1135, _1136), 0.0);
        vec4 _1159 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1134, _1135, _1136), 0.0);
        float _1171 = exp2((_1138.w + (-0.5)) * 20.0) * 2.0;
        float _1172 = _1171 * (_1138.x + (-0.5));
        float _1173 = _1171 * (_1138.y + (-0.5));
        float _1174 = _1171 * (_1138.z + (-0.5));
        float _1181 = exp2((_1145.w + (-0.5)) * 20.0) * 2.0;
        float _1182 = _1181 * (_1145.x + (-0.5));
        float _1183 = _1181 * (_1145.y + (-0.5));
        float _1184 = _1181 * (_1145.z + (-0.5));
        float _1191 = exp2((_1152.w + (-0.5)) * 20.0) * 2.0;
        float _1192 = _1191 * (_1152.x + (-0.5));
        float _1193 = _1191 * (_1152.y + (-0.5));
        float _1194 = _1191 * (_1152.z + (-0.5));
        float _1201 = exp2((_1159.w + (-0.5)) * 20.0) * 2.0;
        float _1202 = _1201 * (_1159.x + (-0.5));
        float _1203 = _1201 * (_1159.y + (-0.5));
        float _1204 = _1201 * (_1159.z + (-0.5));
        float _1205 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1206 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1207 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1208 = _1172 * 0.5;
        float _1209 = _1182 * 0.5;
        float _1210 = _1192 * 0.5;
        float _1211 = dot(vec3(_1208, _1209, _1210), vec3(_1208, _1209, _1210));
        float _1216 = (_1211 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1211);
        float _1224 = (dot(vec3(_489, _490, _491), vec3(_1216 * _1208, _1216 * _1209, _1216 * _1210)) + 1.0) * 0.5;
        float _3665 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1233 = sqrt(((_1209 * _1209) + (_1208 * _1208)) + (_1210 * _1210)) / (_1205 + 9.9999997473787516355514526367188e-06);
        float _3676 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
        float _1235 = _1234 * 2.0;
        float _1239 = (1.0 - _1234) / (_1234 + 1.0);
        float _3687 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
        float _1249 = ((((1.0 - _1240) * (_1235 + 2.0)) * exp2(log2(isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0))) * (_1235 + 1.0))) + _1240) * _1205;
        float _1250 = _1173 * 0.5;
        float _1251 = _1183 * 0.5;
        float _1252 = _1193 * 0.5;
        float _1253 = dot(vec3(_1250, _1251, _1252), vec3(_1250, _1251, _1252));
        float _1258 = (_1253 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1253);
        float _1266 = (dot(vec3(_489, _490, _491), vec3(_1258 * _1250, _1258 * _1251, _1258 * _1252)) + 1.0) * 0.5;
        float _3698 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1275 = sqrt(((_1251 * _1251) + (_1250 * _1250)) + (_1252 * _1252)) / (_1206 + 9.9999997473787516355514526367188e-06);
        float _3709 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _1277 = _1276 * 2.0;
        float _1281 = (1.0 - _1276) / (_1276 + 1.0);
        float _3720 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
        float _1291 = ((((1.0 - _1282) * (_1277 + 2.0)) * exp2(log2(isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0))) * (_1277 + 1.0))) + _1282) * _1206;
        float _1292 = _1174 * 0.5;
        float _1293 = _1184 * 0.5;
        float _1294 = _1194 * 0.5;
        float _1295 = dot(vec3(_1292, _1293, _1294), vec3(_1292, _1293, _1294));
        float _1300 = (_1295 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1295);
        float _1308 = (dot(vec3(_489, _490, _491), vec3(_1300 * _1292, _1300 * _1293, _1300 * _1294)) + 1.0) * 0.5;
        float _3731 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1317 = sqrt(((_1293 * _1293) + (_1292 * _1292)) + (_1294 * _1294)) / (_1207 + 9.9999997473787516355514526367188e-06);
        float _3742 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _1319 = _1318 * 2.0;
        float _1323 = (1.0 - _1318) / (_1318 + 1.0);
        float _3753 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1324 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
        float _1333 = ((((1.0 - _1324) * (_1319 + 2.0)) * exp2(log2(isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0))) * (_1319 + 1.0))) + _1324) * _1207;
        _1341 = _1174;
        _1342 = _1173;
        _1343 = _1172;
        _1344 = _1184;
        _1345 = _1183;
        _1346 = _1182;
        _1347 = _1194;
        _1348 = _1193;
        _1349 = _1192;
        _1350 = _1207;
        _1351 = _1206;
        _1352 = _1205;
        _1353 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0)));
        _1354 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0)));
        _1355 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0)));
    }
    else
    {
        _1341 = _1032;
        _1342 = _1032;
        _1343 = _1032;
        _1344 = _1032;
        _1345 = _1032;
        _1346 = _1032;
        _1347 = _1032;
        _1348 = _1032;
        _1349 = _1032;
        _1350 = _1032;
        _1351 = _1032;
        _1352 = _1032;
        _1353 = 0.0;
        _1354 = 0.0;
        _1355 = 0.0;
    }
    float _1365 = (cbModelParam._m0[1u].x * (_1353 - _1044)) + _1044;
    float _1366 = (cbModelParam._m0[1u].x * (_1354 - _1045)) + _1045;
    float _1367 = (cbModelParam._m0[1u].x * (_1355 - _1046)) + _1046;
    float _1388 = fma(_1367, cbSceneParam._m0[89u].z, fma(_1366, cbSceneParam._m0[89u].y, _1365 * cbSceneParam._m0[89u].x));
    float _1391 = fma(_1367, cbSceneParam._m0[90u].z, fma(_1366, cbSceneParam._m0[90u].y, _1365 * cbSceneParam._m0[90u].x));
    float _1394 = fma(_1367, cbSceneParam._m0[91u].z, fma(_1366, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1365));
    float _1409 = _666 * 0.5;
    float _1410 = _667 * 0.5;
    float _1411 = _668 * 0.5;
    float _1412 = dot(vec4(_1409, _1410, _1411, 1.0), vec4(_1343, _1346, _1349, _1352));
    float _1415 = dot(vec4(_1409, _1410, _1411, 1.0), vec4(_1342, _1345, _1348, _1351));
    float _1418 = dot(vec4(_1409, _1410, _1411, 1.0), vec4(_1341, _1344, _1347, _1350));
    float _1452;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1425 = dot(vec4(_1409, _1410, _1411, 1.0), vec4(_1031, _1035, _1038, _1041));
        float _1429 = dot(vec4(_1409, _1410, _1411, 1.0), vec4(_1033, _1036, _1039, _1042));
        float _1433 = dot(vec4(_1409, _1410, _1411, 1.0), vec4(_1034, _1037, _1040, _1043));
        float _1440 = dot(vec4(cbModelParam._m0[39u]), vec4(_1409, _1410, _1411, 1.0));
        _1452 = dot(vec3(isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)), isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0)), isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1440) ? 0.0 : (isnan(0.0) ? _1440 : max(0.0, _1440))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1452 = 1.0;
    }
    float _1463;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1454 = dot(vec4(cbModelParam._m0[40u]), vec4(_1409, _1410, _1411, 1.0));
        _1463 = dot(vec3(isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0)), isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0)), isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1454) ? 0.0 : (isnan(0.0) ? _1454 : max(0.0, _1454))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1463 = 1.0;
    }
    float _1467 = (_1463 * cbModelParam._m0[1u].x) + (_1452 * (1.0 - cbModelParam._m0[1u].x));
    float _1477 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _492);
    float _1478 = isnan(_1477) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1477 : min(cbModelParam._m0[25u].z, _1477));
    float _1559;
    float _1561;
    float _1563;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1526 = fma(_730, cbModelParam._m0[13u].z, fma(_726, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _722)) + cbModelParam._m0[13u].w;
        float _1530 = fma(_730, cbModelParam._m0[14u].z, fma(_726, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _722)) + cbModelParam._m0[14u].w;
        float _1534 = fma(_730, cbModelParam._m0[15u].z, fma(_726, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _722)) + cbModelParam._m0[15u].w;
        float _1537 = fma(_668, cbModelParam._m0[13u].z, fma(_667, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _666));
        float _1540 = fma(_668, cbModelParam._m0[14u].z, fma(_667, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _666));
        float _1543 = fma(_668, cbModelParam._m0[15u].z, fma(_667, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _666));
        float _1571;
        if (_1537 > 0.0)
        {
            _1571 = abs((1.0 - _1526) / _1537);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1537 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1526 + 1.0) / _1537);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1571 = frontier_phi_14_12_ladder;
        }
        float _1776;
        if (_1540 > 0.0)
        {
            _1776 = abs((1.0 - _1530) / _1540);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1540 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1530 + 1.0) / _1540);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1776 = frontier_phi_23_19_ladder;
        }
        float _2030;
        if (_1543 > 0.0)
        {
            _2030 = abs((1.0 - _1534) / _1543);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1543 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1534 + 1.0) / _1543);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2030 = frontier_phi_35_30_ladder;
        }
        float _2032 = isnan(_1776) ? _1571 : (isnan(_1571) ? _1776 : min(_1571, _1776));
        float _2033 = isnan(_2030) ? _2032 : (isnan(_2032) ? _2030 : min(_2032, _2030));
        float _2037 = (_2033 * _1537) + _1526;
        float _2038 = (_2033 * _1540) + _1530;
        float _2039 = (_2033 * _1543) + _1534;
        float _2040 = _2033 * 9.9999997473787516355514526367188e-05;
        float _2042 = (-1.0) - _2040;
        float _2044 = _2040 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2039 > _2044) || ((_2039 < _2042) || ((_2038 > _2044) || ((_2038 < _2042) || ((_2037 < _2042) || (_2037 > _2044))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2167 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2039, cbModelParam._m0[9u].z, fma(_2038, cbModelParam._m0[9u].y, _2037 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2039, cbModelParam._m0[10u].z, fma(_2038, cbModelParam._m0[10u].y, _2037 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2039, cbModelParam._m0[11u].z, fma(_2038, cbModelParam._m0[11u].y, _2037 * cbModelParam._m0[11u].x))), _1478);
            frontier_phi_13_35_ladder = _2167.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2167.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2167.x * cbModelParam._m0[1u].y;
        }
        _1559 = frontier_phi_13_35_ladder_2;
        _1561 = frontier_phi_13_35_ladder_1;
        _1563 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1547 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_666, _667, _668), _1478);
        _1559 = _1547.x * cbModelParam._m0[1u].y;
        _1561 = _1547.y * cbModelParam._m0[1u].y;
        _1563 = _1547.z * cbModelParam._m0[1u].y;
    }
    float _1567 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _492);
    float _1568 = isnan(_1567) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1567 : min(cbModelParam._m0[25u].w, _1567));
    float _1658;
    float _1660;
    float _1662;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1622 = fma(_730, cbModelParam._m0[21u].z, fma(_726, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _722)) + cbModelParam._m0[21u].w;
        float _1626 = fma(_730, cbModelParam._m0[22u].z, fma(_726, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _722)) + cbModelParam._m0[22u].w;
        float _1630 = fma(_730, cbModelParam._m0[23u].z, fma(_726, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _722)) + cbModelParam._m0[23u].w;
        float _1633 = fma(_668, cbModelParam._m0[21u].z, fma(_667, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _666));
        float _1636 = fma(_668, cbModelParam._m0[22u].z, fma(_667, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _666));
        float _1639 = fma(_668, cbModelParam._m0[23u].z, fma(_667, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _666));
        float _1781;
        if (_1633 > 0.0)
        {
            _1781 = abs((1.0 - _1622) / _1633);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1633 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1622 + 1.0) / _1633);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1781 = frontier_phi_25_21_ladder;
        }
        float _2057;
        if (_1636 > 0.0)
        {
            _2057 = abs((1.0 - _1626) / _1636);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1636 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1626 + 1.0) / _1636);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2057 = frontier_phi_37_32_ladder;
        }
        float _2270;
        if (_1639 > 0.0)
        {
            _2270 = abs((1.0 - _1630) / _1639);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1639 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1630 + 1.0) / _1639);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2270 = frontier_phi_46_43_ladder;
        }
        float _2272 = isnan(_2057) ? _1781 : (isnan(_1781) ? _2057 : min(_1781, _2057));
        float _2273 = isnan(_2270) ? _2272 : (isnan(_2272) ? _2270 : min(_2272, _2270));
        float _2277 = (_2273 * _1633) + _1622;
        float _2278 = (_2273 * _1636) + _1626;
        float _2279 = (_2273 * _1639) + _1630;
        float _2280 = _2273 * 9.9999997473787516355514526367188e-05;
        float _2281 = (-1.0) - _2280;
        float _2283 = _2280 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2279 > _2283) || ((_2279 < _2281) || ((_2278 > _2283) || ((_2278 < _2281) || ((_2277 < _2281) || (_2277 > _2283))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2507 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2279, cbModelParam._m0[17u].z, fma(_2278, cbModelParam._m0[17u].y, _2277 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2279, cbModelParam._m0[18u].z, fma(_2278, cbModelParam._m0[18u].y, _2277 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2279, cbModelParam._m0[19u].z, fma(_2278, cbModelParam._m0[19u].y, _2277 * cbModelParam._m0[19u].x))), _1568);
            frontier_phi_22_46_ladder = _2507.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2507.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2507.x * cbModelParam._m0[1u].z;
        }
        _1658 = frontier_phi_22_46_ladder_2;
        _1660 = frontier_phi_22_46_ladder_1;
        _1662 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1642 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_666, _667, _668), _1568);
        _1658 = _1642.x * cbModelParam._m0[1u].z;
        _1660 = _1642.y * cbModelParam._m0[1u].z;
        _1662 = _1642.z * cbModelParam._m0[1u].z;
    }
    float _1675 = (((_693 * _643) + _694) * _658) * ((cbModelParam._m0[1u].w * (_1658 - _1559)) + _1559);
    float _1677 = (((_693 * _645) + _694) * _658) * ((cbModelParam._m0[1u].w * (_1660 - _1561)) + _1561);
    float _1679 = (((_693 * _646) + _694) * _658) * ((cbModelParam._m0[1u].w * (_1662 - _1563)) + _1563);
    float _1682 = fma(_1679, cbSceneParam._m0[89u].z, fma(_1677, cbSceneParam._m0[89u].y, _1675 * cbSceneParam._m0[89u].x));
    float _1685 = fma(_1679, cbSceneParam._m0[90u].z, fma(_1677, cbSceneParam._m0[90u].y, _1675 * cbSceneParam._m0[90u].x));
    float _1688 = fma(_1679, cbSceneParam._m0[91u].z, fma(_1677, cbSceneParam._m0[91u].y, _1675 * cbSceneParam._m0[91u].x));
    uvec4 _1698 = floatBitsToUint(cbInstanceData._m0[_618 + 5u]);
    uint _1700 = _1698.x * 14u;
    uint _1701 = _1700 + 13u;
    float _1708 = _658 + (-1.0);
    float _1713 = (cbLight._m0[_1701].x * _1708) + 1.0;
    float _1714 = (cbLight._m0[_1701].y * _1708) + 1.0;
    float _1715 = (cbLight._m0[_1701].z * _1708) + 1.0;
    float _1716 = (cbLight._m0[_1701].w * _1708) + 1.0;
    uint _1717 = _1700 + 5u;
    float _1723 = isnan(1.0) ? _1714 : (isnan(_1714) ? 1.0 : min(_1714, 1.0));
    uint _1727 = _1700 + 4u;
    float _1734 = isnan(1.0) ? _1713 : (isnan(_1713) ? 1.0 : min(_1713, 1.0));
    uint _1738 = _1700 | 1u;
    float _1749 = dot(vec3(cbLight._m0[_1700].xyz), vec3(_489, _490, _491));
    float _1752 = dot(vec3(cbLight._m0[_1738].xyz), vec3(_489, _490, _491));
    float _3889 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
    float _3900 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
    float _1757 = (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * 0.3183098733425140380859375;
    float _1759 = (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0))) * 0.3183098733425140380859375;
    float _1766 = ((cbLight._m0[_1717].x * _1723) * _1759) + ((cbLight._m0[_1727].x * _1734) * _1757);
    float _1767 = ((_1723 * cbLight._m0[_1717].y) * _1759) + ((_1734 * cbLight._m0[_1727].y) * _1757);
    float _1768 = ((_1723 * cbLight._m0[_1717].z) * _1759) + ((_1734 * cbLight._m0[_1727].z) * _1757);
    uvec4 _1773 = floatBitsToUint(cbLight._m0[_1700 + 12u]);
    bool _1775 = _1773.x == 0u;
    float _1786;
    float _1788;
    float _1790;
    if (_1775)
    {
        _1786 = _1766;
        _1788 = _1767;
        _1790 = _1768;
    }
    else
    {
        uint _1794 = _1700 + 6u;
        float _1810 = (dot(vec3(cbLight._m0[_1700 + 2u].xyz), vec3(_489, _490, _491)) * 0.5) + 0.5;
        float _1811 = _1810 * _1810;
        float _3911 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
        float _1812 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1813 = isnan(1.0) ? _1715 : (isnan(_1715) ? 1.0 : min(_1715, 1.0));
        _1786 = (((cbLight._m0[_1794].x * 0.3183098733425140380859375) * _1812) * _1813) + _1766;
        _1788 = (((cbLight._m0[_1794].y * 0.3183098733425140380859375) * _1812) * _1813) + _1767;
        _1790 = (((cbLight._m0[_1794].z * 0.3183098733425140380859375) * _1812) * _1813) + _1768;
    }
    bool _1793 = _1773.y == 0u;
    float _1831;
    float _1833;
    float _1835;
    if (_1793)
    {
        _1831 = _1786;
        _1833 = _1788;
        _1835 = _1790;
    }
    else
    {
        uint _2001 = _1700 + 7u;
        float _2017 = (dot(vec3(cbLight._m0[_1700 + 3u].xyz), vec3(_489, _490, _491)) * 0.5) + 0.5;
        float _2018 = _2017 * _2017;
        float _3927 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
        float _2019 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _2020 = isnan(1.0) ? _1716 : (isnan(_1716) ? 1.0 : min(_1716, 1.0));
        _1831 = (((cbLight._m0[_2001].x * 0.3183098733425140380859375) * _2019) * _2020) + _1786;
        _1833 = (((cbLight._m0[_2001].y * 0.3183098733425140380859375) * _2019) * _2020) + _1788;
        _1835 = (((cbLight._m0[_2001].z * 0.3183098733425140380859375) * _2019) * _2020) + _1790;
    }
    uint _1838 = _1700 + 8u;
    float _1851 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1700].w)) * _492) * 0.949999988079071044921875);
    float _1852 = _1851 * _1851;
    float _1853 = cbLight._m0[_1700].x + _570;
    float _1854 = cbLight._m0[_1700].y + _571;
    float _1855 = cbLight._m0[_1700].z + _572;
    float _1859 = inversesqrt(dot(vec3(_1853, _1854, _1855), vec3(_1853, _1854, _1855)));
    float _1860 = _1859 * _1853;
    float _1861 = _1859 * _1854;
    float _1862 = _1859 * _1855;
    float _1863 = dot(vec3(_489, _490, _491), vec3(cbLight._m0[_1700].xyz));
    float _3943 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
    float _1866 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
    float _3954 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _1867 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
    float _1868 = dot(vec3(_489, _490, _491), vec3(_1860, _1861, _1862));
    float _3965 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
    float _1871 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
    float _1872 = dot(vec3(cbLight._m0[_1700].xyz), vec3(_1860, _1861, _1862));
    float _3976 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
    float _1876 = _1852 * _1852;
    float _1880 = ((_1871 * _1871) * (_1876 + (-1.0))) + 1.0;
    float _1888 = exp2(log2(1.0 - (isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0)))) * 5.0);
    float _1889 = 0.959999978542327880859375 - _640;
    float _1891 = 0.959999978542327880859375 - _641;
    float _1892 = 0.959999978542327880859375 - _642;
    float _1899 = 1.0 - _1852;
    float _1910 = (0.5 / (((_1867 * ((_1866 * _1899) + _1852)) + 9.9999999392252902907785028219223e-09) + (((_1867 * _1899) + _1852) * _1866))) * _1866;
    float _3987 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
    float _1912 = (isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))) * (_1876 / ((_1880 * _1880) * 3.141590118408203125));
    uint _1923 = _1700 + 9u;
    float _1934 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1738].w)) * _492) * 0.949999988079071044921875);
    float _1935 = _1934 * _1934;
    float _1936 = cbLight._m0[_1738].x + _570;
    float _1937 = cbLight._m0[_1738].y + _571;
    float _1938 = cbLight._m0[_1738].z + _572;
    float _1942 = inversesqrt(dot(vec3(_1936, _1937, _1938), vec3(_1936, _1937, _1938)));
    float _1943 = _1942 * _1936;
    float _1944 = _1942 * _1937;
    float _1945 = _1942 * _1938;
    float _1946 = dot(vec3(_489, _490, _491), vec3(cbLight._m0[_1738].xyz));
    float _3998 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
    float _1949 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
    float _1950 = dot(vec3(_489, _490, _491), vec3(_1943, _1944, _1945));
    float _4009 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
    float _1953 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
    float _1954 = dot(vec3(cbLight._m0[_1738].xyz), vec3(_1943, _1944, _1945));
    float _4020 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
    float _1958 = _1935 * _1935;
    float _1962 = ((_1953 * _1953) * (_1958 + (-1.0))) + 1.0;
    float _1969 = exp2(log2(1.0 - (isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0)))) * 5.0);
    float _1976 = 1.0 - _1935;
    float _1986 = (0.5 / (((_1867 * ((_1949 * _1976) + _1935)) + 9.9999999392252902907785028219223e-09) + (((_1867 * _1976) + _1935) * _1949))) * _1949;
    float _4031 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
    float _1988 = (isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0))) * (_1958 / ((_1962 * _1962) * 3.141590118408203125));
    float _1998 = (((((_1969 * _1889) + _643) * cbLight._m0[_1923].x) * _1988) * _1723) + (((((_1888 * _1889) + _643) * cbLight._m0[_1838].x) * _1912) * _1734);
    float _1999 = (((((_1969 * _1891) + _645) * cbLight._m0[_1923].y) * _1988) * _1723) + (((((_1888 * _1891) + _645) * cbLight._m0[_1838].y) * _1912) * _1734);
    float _2000 = (((((_1969 * _1892) + _646) * cbLight._m0[_1923].z) * _1988) * _1723) + (((((_1888 * _1892) + _646) * cbLight._m0[_1838].z) * _1912) * _1734);
    float _2062;
    float _2064;
    float _2066;
    if (_1775)
    {
        _2062 = _1998;
        _2064 = _1999;
        _2066 = _2000;
    }
    else
    {
        uint _2068 = _1700 + 2u;
        uint _2072 = _1700 + 10u;
        float _2086 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2068].w)) * _492) * 0.949999988079071044921875);
        float _2087 = _2086 * _2086;
        float _2088 = cbLight._m0[_2068].x + _570;
        float _2089 = cbLight._m0[_2068].y + _571;
        float _2090 = cbLight._m0[_2068].z + _572;
        float _2094 = inversesqrt(dot(vec3(_2088, _2089, _2090), vec3(_2088, _2089, _2090)));
        float _2095 = _2094 * _2088;
        float _2096 = _2094 * _2089;
        float _2097 = _2094 * _2090;
        float _2098 = dot(vec3(_489, _490, _491), vec3(cbLight._m0[_2068].xyz));
        float _4042 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
        float _2101 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _2102 = dot(vec3(_489, _490, _491), vec3(_2095, _2096, _2097));
        float _4053 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
        float _2105 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
        float _2106 = dot(vec3(cbLight._m0[_2068].xyz), vec3(_2095, _2096, _2097));
        float _4064 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
        float _2110 = _2087 * _2087;
        float _2114 = ((_2105 * _2105) * (_2110 + (-1.0))) + 1.0;
        float _2121 = exp2(log2(1.0 - (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0)))) * 5.0);
        float _2128 = 1.0 - _2087;
        float _2138 = (0.5 / (((_1867 * ((_2101 * _2128) + _2087)) + 9.9999999392252902907785028219223e-09) + (((_1867 * _2128) + _2087) * _2101))) * _2101;
        float _4075 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
        float _2140 = (isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0))) * (_2110 / ((_2114 * _2114) * 3.141590118408203125));
        float _2141 = isnan(1.0) ? _1715 : (isnan(_1715) ? 1.0 : min(_1715, 1.0));
        _2062 = (((((_2121 * _1889) + _643) * cbLight._m0[_2072].x) * _2140) * _2141) + _1998;
        _2064 = (((((_2121 * _1891) + _645) * cbLight._m0[_2072].y) * _2140) * _2141) + _1999;
        _2066 = (((((_2121 * _1892) + _646) * cbLight._m0[_2072].z) * _2140) * _2141) + _2000;
    }
    float _2176;
    float _2178;
    float _2180;
    if (_1793)
    {
        _2176 = _2062;
        _2178 = _2064;
        _2180 = _2066;
    }
    else
    {
        uint _2187 = _1700 + 3u;
        uint _2191 = _1700 + 11u;
        float _2205 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2187].w)) * _492) * 0.949999988079071044921875);
        float _2206 = _2205 * _2205;
        float _2207 = cbLight._m0[_2187].x + _570;
        float _2208 = cbLight._m0[_2187].y + _571;
        float _2209 = cbLight._m0[_2187].z + _572;
        float _2213 = inversesqrt(dot(vec3(_2207, _2208, _2209), vec3(_2207, _2208, _2209)));
        float _2214 = _2213 * _2207;
        float _2215 = _2213 * _2208;
        float _2216 = _2213 * _2209;
        float _2217 = dot(vec3(_489, _490, _491), vec3(cbLight._m0[_2187].xyz));
        float _4091 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
        float _2220 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _2221 = dot(vec3(_489, _490, _491), vec3(_2214, _2215, _2216));
        float _4102 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
        float _2224 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _2225 = dot(vec3(cbLight._m0[_2187].xyz), vec3(_2214, _2215, _2216));
        float _4113 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
        float _2229 = _2206 * _2206;
        float _2233 = ((_2224 * _2224) * (_2229 + (-1.0))) + 1.0;
        float _2240 = exp2(log2(1.0 - (isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0)))) * 5.0);
        float _2247 = 1.0 - _2206;
        float _2257 = (0.5 / (((_1867 * ((_2220 * _2247) + _2206)) + 9.9999999392252902907785028219223e-09) + (((_1867 * _2247) + _2206) * _2220))) * _2220;
        float _4124 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
        float _2259 = (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * (_2229 / ((_2233 * _2233) * 3.141590118408203125));
        float _2260 = isnan(1.0) ? _1716 : (isnan(_1716) ? 1.0 : min(_1716, 1.0));
        _2176 = (((((_2240 * _1889) + _643) * cbLight._m0[_2191].x) * _2259) * _2260) + _2062;
        _2178 = (((((_2240 * _1891) + _645) * cbLight._m0[_2191].y) * _2259) * _2260) + _2064;
        _2180 = (((((_2240 * _1892) + _646) * cbLight._m0[_2191].z) * _2259) * _2260) + _2066;
    }
    float _2395;
    float _2397;
    float _2399;
    float _2401;
    float _2403;
    float _2405;
    if (_1698.y == 0u)
    {
        float _2335 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2336 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2335;
        float _2337 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2335;
        float _2338 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2335;
        uvec4 _2350 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2351 = _2350.x;
        uint _2362 = uint((float(_2350.y) * floor(float(uint(cbSceneParam._m0[85u].y * _579) / _2351))) + floor(float(uint(cbSceneParam._m0[85u].x * _578) / _2351)));
        float _2372 = (log2(_2338 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2373 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
        uint _2376 = uint(isnan(14.0) ? _2373 : (isnan(_2373) ? 14.0 : min(_2373, 14.0)));
        uvec4 _2381 = texelFetch(g_lightClusterGridBuffer, int(((_2376 << 2u) + (_2362 << 6u)) >> 2u));
        uint _2382 = _2381.x;
        uint _2383 = _2350.z;
        float _2512;
        float _2514;
        float _2516;
        float _2518;
        float _2520;
        float _2522;
        if (((((1u << ((_2383 >> 4u) & 15u)) + 4294967295u) & _2382) == 0u) || ((_2383 & 240u) == 0u))
        {
            _2512 = 0.0;
            _2514 = 0.0;
            _2516 = 0.0;
            _2518 = 0.0;
            _2520 = 0.0;
            _2522 = 0.0;
        }
        else
        {
            float _2513;
            float _2515;
            float _2517;
            float _2519;
            float _2521;
            float _2523;
            float _2665 = 0.0;
            float _2666 = 0.0;
            float _2667 = 0.0;
            float _2668 = 0.0;
            float _2669 = 0.0;
            float _2670 = 0.0;
            uint _2671 = 0u;
            uint _2680;
            bool _2681;
            for (;;)
            {
                _2680 = texelFetch(g_lightClassification, int((((_2376 << 5u) + (_2362 << 9u)) + (_2671 << 2u)) >> 2u)).x;
                _2681 = _2680 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2681)
                {
                    frontier_phi_61_pred = _2665;
                    frontier_phi_61_pred_1 = _2670;
                    frontier_phi_61_pred_2 = _2669;
                    frontier_phi_61_pred_3 = _2668;
                    frontier_phi_61_pred_4 = _2667;
                    frontier_phi_61_pred_5 = _2666;
                }
                else
                {
                    float _2789;
                    float _2790;
                    float _2791;
                    float _2792;
                    float _2793;
                    float _2794;
                    uint _2795;
                    _2789 = _2665;
                    _2790 = _2666;
                    _2791 = _2667;
                    _2792 = _2668;
                    _2793 = _2669;
                    _2794 = _2670;
                    _2795 = _2680;
                    float _2721;
                    float _2722;
                    float _2723;
                    float _2724;
                    float _2725;
                    float _2726;
                    for (;;)
                    {
                        uint _2799 = uint(findLSB(_2795)) + (_2671 << 5u);
                        uint _2796 = (_2795 + 4294967295u) & _2795;
                        uint _2801 = _2799 * 48u;
                        vec4 _2815 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2801)).x, texelFetch(g_PointLightRenderingBuffer, int(_2801 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2801 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2801 + 3u)).x));
                        uint _2821 = (_2799 * 48u) + 4u;
                        vec4 _2834 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2821)).x, texelFetch(g_PointLightRenderingBuffer, int(_2821 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2821 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2821 + 3u)).x));
                        uint _2840 = (_2799 * 48u) + 8u;
                        vec3 _2851 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2840)).x, texelFetch(g_PointLightRenderingBuffer, int(_2840 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2840 + 2u)).x));
                        float _2855 = _2815.x - _2336;
                        float _2856 = _2815.y - _2337;
                        float _2857 = _2815.z - _2338;
                        float _2858 = dot(vec3(_2855, _2856, _2857), vec3(_2855, _2856, _2857));
                        float _2861 = inversesqrt(_2858);
                        float _2862 = _2861 * _2855;
                        float _2863 = _2861 * _2856;
                        float _2864 = _2861 * _2857;
                        float _2865 = dot(vec3(_599, _602, _605), vec3(_2862, _2863, _2864));
                        float _2870 = 1.0 - (_2858 * _2815.w);
                        float _4150 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0));
                        float _2871 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
                        float _2872 = sqrt(_2858) * _2834.w;
                        float _2875 = 1.39999997615814208984375 / (_2872 + 1.39999997615814208984375);
                        float _2876 = _2875 * _2875;
                        float _2879 = ((1.0 - _2876) * _2865) + _2876;
                        float _2882 = _2872 * _2872;
                        float _2886 = ((isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : max(_2879, 0.0))) * _2871) / ((_2882 * 0.699999988079071044921875) + 1.0);
                        float _2890 = (-0.0) - _2336;
                        float _2891 = (-0.0) - _2337;
                        float _2892 = (-0.0) - _2338;
                        float _2896 = inversesqrt(dot(vec3(_2890, _2891, _2892), vec3(_2890, _2891, _2892)));
                        float _2897 = _2896 * _2890;
                        float _2898 = _2896 * _2891;
                        float _2899 = _2896 * _2892;
                        float _2907 = exp2(log2(1.0 / ((_2882 * 3.5) + 5.0)) * 0.25);
                        float _2908 = 1.0 - _674;
                        float _2915 = sqrt(1.0 - ((1.0 - (_2908 * _2908)) * (1.0 - (_2907 * _2907))));
                        float _2916 = _2915 * _2915;
                        float _2917 = _2916 * _2916;
                        float _2918 = _2897 + _2862;
                        float _2919 = _2898 + _2863;
                        float _2920 = _2899 + _2864;
                        float _2924 = inversesqrt(dot(vec3(_2918, _2919, _2920), vec3(_2918, _2919, _2920)));
                        float _2928 = dot(vec3(_599, _602, _605), vec3(_2897, _2898, _2899));
                        float _4166 = isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : max(_2928, 0.0));
                        float _2931 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
                        float _2932 = dot(vec3(_599, _602, _605), vec3(_2924 * _2918, _2924 * _2919, _2924 * _2920));
                        float _4177 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0));
                        float _2935 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
                        float _2939 = ((_2935 * _2935) * (_2917 + (-1.0))) + 1.0;
                        float _2940 = _2875 * _2916;
                        float _2941 = _2940 * _2940;
                        float _2944 = ((1.0 - _2941) * _2865) + _2941;
                        float _4188 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0));
                        float _2945 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
                        float _2946 = 1.0 - _2916;
                        float _2956 = (0.5 / (((_2945 * ((_2931 * _2946) + _2916)) + 9.9999999392252902907785028219223e-09) + (((_2945 * _2946) + _2916) * _2931))) * _2945;
                        float _4199 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0));
                        float _2967 = (((_2917 * 3.1415927410125732421875) * (isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0)))) / ((_2939 * _2939) * ((_2882 * 2.1991131305694580078125) + 3.141590118408203125))) * _2871;
                        _2724 = (_2886 * _2834.x) + _2792;
                        _2725 = (_2886 * _2834.y) + _2793;
                        _2726 = (_2886 * _2834.z) + _2794;
                        _2721 = (_2967 * _2851.x) + _2789;
                        _2722 = (_2967 * _2851.y) + _2790;
                        _2723 = (_2967 * _2851.z) + _2791;
                        if (_2796 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2789 = _2721;
                            _2790 = _2722;
                            _2791 = _2723;
                            _2792 = _2724;
                            _2793 = _2725;
                            _2794 = _2726;
                            _2795 = _2796;
                        }
                    }
                    frontier_phi_61_pred = _2721;
                    frontier_phi_61_pred_1 = _2726;
                    frontier_phi_61_pred_2 = _2725;
                    frontier_phi_61_pred_3 = _2724;
                    frontier_phi_61_pred_4 = _2723;
                    frontier_phi_61_pred_5 = _2722;
                }
                _2513 = frontier_phi_61_pred;
                _2523 = frontier_phi_61_pred_1;
                _2521 = frontier_phi_61_pred_2;
                _2519 = frontier_phi_61_pred_3;
                _2517 = frontier_phi_61_pred_4;
                _2515 = frontier_phi_61_pred_5;
                uint _2672 = _2671 + 1u;
                if (_2672 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2665 = _2513;
                    _2666 = _2515;
                    _2667 = _2517;
                    _2668 = _2519;
                    _2669 = _2521;
                    _2670 = _2523;
                    _2671 = _2672;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2512 = _2513;
            _2514 = _2515;
            _2516 = _2517;
            _2518 = _2519;
            _2520 = _2521;
            _2522 = _2523;
        }
        uvec4 _2526 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2527 = _2526.z;
        uint _2529 = (_2527 >> 8u) & 15u;
        float _2633;
        float _2635;
        float _2637;
        float _2639;
        float _2641;
        float _2643;
        if (((4294967295u << _2529) & _2382) == 0u)
        {
            _2633 = _2512;
            _2635 = _2514;
            _2637 = _2516;
            _2639 = _2518;
            _2641 = _2520;
            _2643 = _2522;
        }
        else
        {
            float _2658 = inversesqrt(dot(vec3(_2336, _2337, _2338), vec3(_2336, _2337, _2338)));
            float _2659 = _2658 * _2336;
            float _2660 = _2658 * _2337;
            float _2661 = _2658 * _2338;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2529 < ((_2527 >> 12u) & 15u))
            {
                float _2634;
                float _2636;
                float _2638;
                float _2640;
                float _2642;
                float _2644;
                float _2772 = _2512;
                float _2773 = _2514;
                float _2774 = _2516;
                float _2775 = _2518;
                float _2776 = _2520;
                float _2777 = _2522;
                uint _2778 = _2529;
                uint _2787;
                bool _2788;
                for (;;)
                {
                    _2787 = texelFetch(g_lightClassification, int((((_2376 << 5u) + (_2362 << 9u)) + (_2778 << 2u)) >> 2u)).x;
                    _2788 = _2787 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2788)
                    {
                        frontier_phi_67_pred = _2775;
                        frontier_phi_67_pred_1 = _2776;
                        frontier_phi_67_pred_2 = _2777;
                        frontier_phi_67_pred_3 = _2774;
                        frontier_phi_67_pred_4 = _2773;
                        frontier_phi_67_pred_5 = _2772;
                    }
                    else
                    {
                        float _2972;
                        float _2973;
                        float _2974;
                        float _2975;
                        float _2976;
                        float _2977;
                        float _3266;
                        float _3267;
                        float _3268;
                        float _3269;
                        float _3270;
                        float _3271;
                        float _2985 = _2772;
                        float _2986 = _2773;
                        float _2987 = _2774;
                        float _2988 = _2775;
                        float _2989 = _2776;
                        float _2990 = _2777;
                        uint _2991 = _2787;
                        uint _2992;
                        vec4 _3017;
                        float _3018;
                        vec4 _3033;
                        vec3 _3045;
                        vec4 _3060;
                        vec4 _3075;
                        float _3122;
                        bool _3123;
                        for (;;)
                        {
                            uint _3002 = ((_2778 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2991));
                            _2992 = (_2991 + 4294967295u) & _2991;
                            uint _3004 = _3002 * 40u;
                            _3017 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3004)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3004 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3004 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3004 + 3u)).x));
                            _3018 = _3017.w;
                            uint _3020 = (_3002 * 40u) + 4u;
                            _3033 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3020)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 3u)).x));
                            uint _3035 = (_3002 * 40u) + 8u;
                            _3045 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3035)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 2u)).x));
                            uint _3047 = (_3002 * 40u) + 16u;
                            _3060 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3047)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 3u)).x));
                            uint _3062 = (_3002 * 40u) + 20u;
                            _3075 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3062)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 3u)).x));
                            uint _3078 = (_3002 * 40u) + 24u;
                            vec4 _3091 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3078)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 3u)).x));
                            uint _3097 = (_3002 * 40u) + 28u;
                            vec4 _3110 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3097)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 3u)).x));
                            _3122 = fma(_2338, _3110.z, fma(_2337, _3110.y, _3110.x * _2336)) + _3110.w;
                            _3123 = !((fma(_2338, _3091.z, fma(_2337, _3091.y, _3091.x * _2336)) + _3091.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3123)
                            {
                                float _3150 = _3017.x - _2336;
                                float _3151 = _3017.y - _2337;
                                float _3152 = _3017.z - _2338;
                                float _3153 = dot(vec3(_3150, _3151, _3152), vec3(_3150, _3151, _3152));
                                float _3156 = inversesqrt(_3153);
                                float _3157 = _3156 * _3150;
                                float _3158 = _3156 * _3151;
                                float _3159 = _3156 * _3152;
                                float _3163 = 1.0 - (_3153 / (_3018 * _3018));
                                float _4210 = isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0));
                                float _3164 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
                                float _3168 = sqrt(_3153) * _3033.w;
                                float _3170 = 1.39999997615814208984375 / (_3168 + 1.39999997615814208984375);
                                float _3171 = _3170 * _3170;
                                float _3174 = ((1.0 - _3171) * dot(vec3(_3157, _3158, _3159), vec3(_599, _602, _605))) + _3171;
                                float _3177 = _3168 * _3168;
                                float _3181 = (fma(_2338, _3060.z, fma(_2337, _3060.y, _3060.x * _2336)) + _3060.w) / _3122;
                                float _3182 = (fma(_2338, _3075.z, fma(_2337, _3075.y, _3075.x * _2336)) + _3075.w) / _3122;
                                float _3186 = 1.0 - dot(vec2(_3181, _3182), vec2(_3181, _3182));
                                float _4226 = isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0));
                                float _3187 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
                                float _3188 = _3187 * (((isnan(0.0) ? _3174 : (isnan(_3174) ? 0.0 : max(_3174, 0.0))) * _3164) / ((_3177 * 0.699999988079071044921875) + 1.0));
                                float _3200 = exp2(log2(1.0 / ((_3177 * 3.5) + 5.0)) * 0.25);
                                float _3201 = 1.0 - _674;
                                float _3208 = sqrt(1.0 - ((1.0 - (_3201 * _3201)) * (1.0 - (_3200 * _3200))));
                                float _3209 = _3208 * _3208;
                                float _3210 = _3209 * _3209;
                                float _3211 = _3157 - _2659;
                                float _3212 = _3158 - _2660;
                                float _3213 = _3159 - _2661;
                                float _3217 = inversesqrt(dot(vec3(_3211, _3212, _3213), vec3(_3211, _3212, _3213)));
                                float _3221 = dot(vec3(_599, _602, _605), vec3((-0.0) - _2659, (-0.0) - _2660, (-0.0) - _2661));
                                float _4237 = isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0));
                                float _3224 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
                                float _3225 = dot(vec3(_599, _602, _605), vec3(_3217 * _3211, _3217 * _3212, _3217 * _3213));
                                float _4248 = isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0));
                                float _3228 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
                                float _3232 = ((_3228 * _3228) * (_3210 + (-1.0))) + 1.0;
                                float _3233 = _3170 * _3209;
                                float _3234 = _3233 * _3233;
                                float _3240 = ((1.0 - _3234) * dot(vec3(_599, _602, _605), vec3(_3157, _3158, _3159))) + _3234;
                                float _4259 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0));
                                float _3241 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
                                float _3242 = 1.0 - _3209;
                                float _3252 = (0.5 / (((_3241 * ((_3224 * _3242) + _3209)) + 9.9999999392252902907785028219223e-09) + (((_3241 * _3242) + _3209) * _3224))) * _3241;
                                float _4270 = isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : max(_3252, 0.0));
                                float _3262 = (_3187 * _3164) * (((_3210 * 3.1415927410125732421875) * (isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0)))) / ((_3232 * _3232) * ((_3177 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3262 * _3045.x;
                                frontier_phi_73_pred_1 = _3262 * _3045.y;
                                frontier_phi_73_pred_2 = _3188 * _3033.z;
                                frontier_phi_73_pred_3 = _3188 * _3033.y;
                                frontier_phi_73_pred_4 = _3188 * _3033.x;
                                frontier_phi_73_pred_5 = _3262 * _3045.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3266 = frontier_phi_73_pred;
                            _3267 = frontier_phi_73_pred_1;
                            _3271 = frontier_phi_73_pred_2;
                            _3270 = frontier_phi_73_pred_3;
                            _3269 = frontier_phi_73_pred_4;
                            _3268 = frontier_phi_73_pred_5;
                            _2975 = _3269 + _2988;
                            _2976 = _3270 + _2989;
                            _2977 = _3271 + _2990;
                            _2972 = _3266 + _2985;
                            _2973 = _3267 + _2986;
                            _2974 = _3268 + _2987;
                            if (_2992 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2985 = _2972;
                                _2986 = _2973;
                                _2987 = _2974;
                                _2988 = _2975;
                                _2989 = _2976;
                                _2990 = _2977;
                                _2991 = _2992;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2975;
                        frontier_phi_67_pred_1 = _2976;
                        frontier_phi_67_pred_2 = _2977;
                        frontier_phi_67_pred_3 = _2974;
                        frontier_phi_67_pred_4 = _2973;
                        frontier_phi_67_pred_5 = _2972;
                    }
                    _2640 = frontier_phi_67_pred;
                    _2642 = frontier_phi_67_pred_1;
                    _2644 = frontier_phi_67_pred_2;
                    _2638 = frontier_phi_67_pred_3;
                    _2636 = frontier_phi_67_pred_4;
                    _2634 = frontier_phi_67_pred_5;
                    uint _2779 = _2778 + 1u;
                    if (_2779 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2772 = _2634;
                        _2773 = _2636;
                        _2774 = _2638;
                        _2775 = _2640;
                        _2776 = _2642;
                        _2777 = _2644;
                        _2778 = _2779;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2642;
                frontier_phi_55_56_ladder_1 = _2644;
                frontier_phi_55_56_ladder_2 = _2640;
                frontier_phi_55_56_ladder_3 = _2638;
                frontier_phi_55_56_ladder_4 = _2636;
                frontier_phi_55_56_ladder_5 = _2634;
            }
            else
            {
                frontier_phi_55_56_ladder = _2520;
                frontier_phi_55_56_ladder_1 = _2522;
                frontier_phi_55_56_ladder_2 = _2518;
                frontier_phi_55_56_ladder_3 = _2516;
                frontier_phi_55_56_ladder_4 = _2514;
                frontier_phi_55_56_ladder_5 = _2512;
            }
            _2633 = frontier_phi_55_56_ladder_5;
            _2635 = frontier_phi_55_56_ladder_4;
            _2637 = frontier_phi_55_56_ladder_3;
            _2639 = frontier_phi_55_56_ladder_2;
            _2641 = frontier_phi_55_56_ladder;
            _2643 = frontier_phi_55_56_ladder_1;
        }
        float _2648 = isnan(1.0) ? _658 : (isnan(_658) ? 1.0 : min(_658, 1.0));
        _2395 = (_2648 * _2639) + _1831;
        _2397 = (_2648 * _2641) + _1833;
        _2399 = (_2648 * _2643) + _1835;
        _2401 = ((_2633 * _643) * _2648) + _2176;
        _2403 = ((_2635 * _645) * _2648) + _2178;
        _2405 = ((_2637 * _646) * _2648) + _2180;
    }
    else
    {
        _2395 = _1831;
        _2397 = _1833;
        _2399 = _1835;
        _2401 = _2176;
        _2403 = _2178;
        _2405 = _2180;
    }
    uint _2411 = _619 + uint(cbMatDynParam._m0[0u].w);
    float _2417 = ((((((_444.x - _441) * _377) + _441) * cbMtdParam._m0[13u].x) + ((((_398.x - _395) * _377) + _395) * cbMtdParam._m0[11u].x)) * _472) * cbInstanceData._m0[_2411].x;
    float _2418 = ((((((_444.y - _442) * _377) + _442) * cbMtdParam._m0[13u].y) + ((((_398.y - _396) * _377) + _396) * cbMtdParam._m0[11u].y)) * _472) * cbInstanceData._m0[_2411].y;
    float _2419 = ((((((_444.z - _443) * _377) + _443) * cbMtdParam._m0[13u].z) + ((((_398.z - _397) * _377) + _397) * cbMtdParam._m0[11u].z)) * _472) * cbInstanceData._m0[_2411].z;
    float _4286 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _4297 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _4308 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _2436 = (((isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0))) * (_2395 + ((isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0))) * _658))) + ((_2401 + ((isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0))) * _1467)) * cbPerFrame._m0[3u].x)) + _2417;
    float _2438 = (_2418 + ((_2403 + ((isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0))) * _1467)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0))) * (_2397 + ((isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0))) * _658)));
    float _2440 = (_2419 + ((_2405 + ((isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0))) * _1467)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0))) * (_2399 + ((isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0))) * _658)));
    float _4334 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2453 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
    uint _2454 = _618 + 6u;
    float _2462 = _578 / cbSceneParam._m0[86u].x;
    float _2463 = _579 / cbSceneParam._m0[86u].y;
    vec4 _2477 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2462, _2463, (log2((isnan(cbSceneParam._m0[77u].w) ? _512 : (isnan(_512) ? cbSceneParam._m0[77u].w : min(_512, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2479 = _2477.x;
    float _2480 = _2477.y;
    float _2481 = _2477.z;
    float _2482 = _2477.w;
    float _2574;
    float _2576;
    float _2578;
    float _2580;
    if (_512 > cbSceneParam._m0[78u].w)
    {
        float _2537 = isnan(_512) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _512 : min(cbSceneParam._m0[80u].w, _512));
        float _2538 = _2537 / _512;
        float _2549 = _2538 * _563;
        float _2550 = _564 * _2538;
        float _2551 = (-0.0) - _2550;
        float _2552 = _2538 * _565;
        float _2554 = (cbSceneParam._m0[77u].w * _2551) / _2537;
        float _2555 = _2554 + cbSceneParam._m0[79u].w;
        float _2556 = cbSceneParam._m0[79u].w - _2550;
        float _2562 = sqrt(((_2549 * _2549) + (_2550 * _2550)) + (_2552 * _2552));
        float _2565 = (1.0 - (cbSceneParam._m0[77u].w / _2537)) * _2562;
        float _2570 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2572 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2734;
        if (abs((_2551 - _2554) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2734 = ((((_2555 > 0.0) ? exp2(_2570 * _2555) : (2.0 - exp2(_2572 * _2555))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2565;
        }
        else
        {
            float _2694 = 1.0 / cbSceneParam._m0[80u].x;
            float _2695 = isnan(_2556) ? _2555 : (isnan(_2555) ? _2556 : max(_2555, _2556));
            float _2696 = isnan(_2556) ? _2555 : (isnan(_2555) ? _2556 : min(_2555, _2556));
            float _2705 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : min(_2695, 0.0));
            float _2706 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : min(_2696, 0.0));
            _2734 = ((abs(_2562 / _2551) * cbSceneParam._m0[80u].y) * ((((_2705 - _2706) * 2.0) - ((exp2(_2570 * (isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0)))) - exp2(_2570 * (isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0))))) * _2694)) - ((exp2(_2572 * _2705) - exp2(_2572 * _2706)) * _2694))) + (_2565 * cbSceneParam._m0[80u].z);
        }
        vec4 _2736 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2462, _2463, 1.0), 0.0);
        float _2745 = exp2((_2734 * (-1.44269502162933349609375)) * (1.0 - _2736.w));
        float _2746 = log2(_2745);
        float _2762 = log2(_2482);
        _2574 = (exp2(_2762 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2746 * cbSceneParam._m0[78u].x)) * _2736.x) / cbSceneParam._m0[78u].x)) + _2479;
        _2576 = (exp2(_2762 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2746 * cbSceneParam._m0[78u].y)) * _2736.y) / cbSceneParam._m0[78u].y)) + _2480;
        _2578 = (exp2(_2762 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2746 * cbSceneParam._m0[78u].z)) * _2736.z) / cbSceneParam._m0[78u].z)) + _2481;
        _2580 = _2745 * _2482;
    }
    else
    {
        _2574 = _2479;
        _2576 = _2480;
        _2578 = _2481;
        _2580 = _2482;
    }
    float _2592 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2593 = _2592 == 3.0;
    float _2594 = log2(_2580);
    float _2598 = exp2(_2594 * cbSceneParam._m0[78u].x);
    float _2599 = exp2(_2594 * cbSceneParam._m0[78u].y);
    float _2600 = exp2(_2594 * cbSceneParam._m0[78u].z);
    float _2601 = _2598 * (isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0)));
    float _2602 = _2599 * (isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0)));
    float _2603 = _2600 * (isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0)));
    float _2612 = (_2592 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2612 * (_2593 ? _2601 : (_2601 + (cbSceneParam._m0[72u].w * _2574)));
    SV_Target.y = _2612 * (_2593 ? _2602 : (_2602 + (cbSceneParam._m0[72u].w * _2576)));
    SV_Target.z = _2612 * (_2593 ? _2603 : (_2603 + (cbSceneParam._m0[72u].w * _2578)));
    SV_Target.w = cbInstanceData._m0[_2454].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2417) * _2453) * _2598) * _2612;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2418) * _2453) * _2599) * _2612;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2419) * _2453) * _2600) * _2612;
    SV_Target_1.w = cbInstanceData._m0[_2454].w;
}


