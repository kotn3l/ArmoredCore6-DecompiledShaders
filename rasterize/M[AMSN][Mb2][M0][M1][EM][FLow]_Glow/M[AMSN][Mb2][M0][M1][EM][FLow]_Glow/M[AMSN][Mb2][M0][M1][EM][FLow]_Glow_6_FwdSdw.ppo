#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _803;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _186 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _193 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _200 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _223 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _229 = _223.x * cbMtdParam._m0[9u].x;
    float _230 = _223.y * cbMtdParam._m0[9u].y;
    float _231 = _223.z * cbMtdParam._m0[9u].z;
    vec4 _243 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _247 = _243.z;
    float _251 = (_243.x * 2.0) + (-1.0);
    float _253 = (_243.y * 2.0) + (-1.0);
    float _254 = dot(vec2(_251, _253), vec2(_251, _253));
    float _3404 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _260 = sqrt(1.0 - (isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0))));
    float _263 = fma(_260, _193 * NORMAL.x, fma(_253, _200 * TANGENT.x, (_186 * _178) * _251));
    float _266 = fma(_260, _193 * NORMAL.y, fma(_253, _200 * TANGENT.y, (_186 * _179) * _251));
    float _269 = fma(_260, _193 * NORMAL.z, fma(_253, _200 * TANGENT.z, (_186 * _180) * _251));
    float _273 = inversesqrt(dot(vec3(_263, _266, _269), vec3(_263, _266, _269)));
    float _274 = _273 * _263;
    float _275 = _273 * _266;
    float _276 = _273 * _269;
    float _3415 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _277 = isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0));
    float _3426 = isnan(0.0) ? _229 : (isnan(_229) ? 0.0 : max(_229, 0.0));
    float _3437 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _3448 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _296 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _339 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _349 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _339);
    float _350 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _339);
    float _351 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _339);
    float _355 = inversesqrt(dot(vec3(_349, _350, _351), vec3(_349, _350, _351)));
    float _356 = _349 * _355;
    float _357 = _350 * _355;
    float _358 = _351 * _355;
    float _364 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _365 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _386 = fma(_276, cbSceneParam._m0[5u].z, fma(_275, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _274));
    float _389 = fma(_276, cbSceneParam._m0[6u].z, fma(_275, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _274));
    float _392 = fma(_276, cbSceneParam._m0[7u].z, fma(_275, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _274));
    uint _405 = uint(roundEven(NORMAL.w)) * 13u;
    uint _408 = (_405 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _414 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0)))) * cbInstanceData._m0[_408].x;
    float _415 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0)))) * cbInstanceData._m0[_408].y;
    float _416 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0)))) * cbInstanceData._m0[_408].z;
    float _3459 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _417 = isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0));
    float _3470 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _418 = isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0));
    float _3481 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _419 = isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0));
    vec4 _428 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _364, cbSceneParam._m0[86u].y * _365));
    float _431 = _428.x * TEXCOORD_3.w;
    float _432 = dot(vec3(_274, _275, _276), vec3(_356, _357, _358));
    float _435 = _432 * 2.0;
    float _439 = (_435 * _274) - _356;
    float _440 = (_435 * _275) - _357;
    float _441 = (_435 * _276) - _358;
    float _445 = abs(dot(vec3(_356, _357, _358), vec3(_274, _275, _276)));
    float _3492 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _447 = sqrt(_277);
    float _460 = exp2((_447 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_447 * 3.0));
    float _492 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _496 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _500 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _802;
    float _804;
    float _805;
    float _806;
    float _807;
    float _808;
    float _809;
    float _810;
    float _811;
    float _812;
    float _813;
    float _814;
    float _815;
    float _816;
    float _817;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _527 = fma(_500, cbModelParam._m0[26u].z, fma(_496, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _492));
        float _531 = fma(_500, cbModelParam._m0[27u].z, fma(_496, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _492));
        float _535 = fma(_500, cbModelParam._m0[28u].z, fma(_496, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _492));
        float _560 = _492 + _274;
        float _561 = _496 + _275;
        float _562 = _500 + _276;
        float _572 = fma(_562, cbModelParam._m0[26u].z, fma(_561, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _560)) - _527;
        float _573 = fma(_562, cbModelParam._m0[27u].z, fma(_561, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _560)) - _531;
        float _574 = fma(_562, cbModelParam._m0[28u].z, fma(_561, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _560)) - _535;
        float _578 = inversesqrt(dot(vec3(_572, _573, _574), vec3(_572, _573, _574)));
        float _591 = ((_578 * _572) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_527 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _592 = ((_578 * _573) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_531 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _593 = ((_578 * _574) / cbModelParam._m0[34u].z) + ((((((_535 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _596 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_591, _592, _593), 0.0);
        vec4 _603 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_591, _592, _593), 0.0);
        vec4 _610 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_591, _592, _593), 0.0);
        vec4 _617 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_591, _592, _593), 0.0);
        float _630 = exp2((_596.w + (-0.5)) * 20.0) * 2.0;
        float _631 = _630 * (_596.x + (-0.5));
        float _632 = _630 * (_596.y + (-0.5));
        float _633 = _630 * (_596.z + (-0.5));
        float _640 = exp2((_603.w + (-0.5)) * 20.0) * 2.0;
        float _641 = _640 * (_603.x + (-0.5));
        float _642 = _640 * (_603.y + (-0.5));
        float _643 = _640 * (_603.z + (-0.5));
        float _650 = exp2((_610.w + (-0.5)) * 20.0) * 2.0;
        float _651 = _650 * (_610.x + (-0.5));
        float _652 = _650 * (_610.y + (-0.5));
        float _653 = _650 * (_610.z + (-0.5));
        float _660 = exp2((_617.w + (-0.5)) * 20.0) * 2.0;
        float _661 = _660 * (_617.x + (-0.5));
        float _662 = _660 * (_617.y + (-0.5));
        float _663 = _660 * (_617.z + (-0.5));
        float _664 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
        float _665 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
        float _666 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
        float _667 = _631 * 0.5;
        float _668 = _641 * 0.5;
        float _669 = _651 * 0.5;
        float _670 = dot(vec3(_667, _668, _669), vec3(_667, _668, _669));
        float _675 = (_670 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_670);
        float _684 = (dot(vec3(_274, _275, _276), vec3(_675 * _667, _675 * _668, _675 * _669)) + 1.0) * 0.5;
        float _3518 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
        float _694 = sqrt(((_668 * _668) + (_667 * _667)) + (_669 * _669)) / (_664 + 9.9999997473787516355514526367188e-06);
        float _3529 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
        float _695 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
        float _696 = _695 * 2.0;
        float _700 = (1.0 - _695) / (_695 + 1.0);
        float _3540 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
        float _701 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
        float _710 = ((((1.0 - _701) * (_696 + 2.0)) * exp2(log2(isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0))) * (_696 + 1.0))) + _701) * _664;
        float _711 = _632 * 0.5;
        float _712 = _642 * 0.5;
        float _713 = _652 * 0.5;
        float _714 = dot(vec3(_711, _712, _713), vec3(_711, _712, _713));
        float _719 = (_714 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_714);
        float _727 = (dot(vec3(_274, _275, _276), vec3(_719 * _711, _719 * _712, _719 * _713)) + 1.0) * 0.5;
        float _3551 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
        float _736 = sqrt(((_712 * _712) + (_711 * _711)) + (_713 * _713)) / (_665 + 9.9999997473787516355514526367188e-06);
        float _3562 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
        float _737 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
        float _738 = _737 * 2.0;
        float _742 = (1.0 - _737) / (_737 + 1.0);
        float _3573 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
        float _743 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
        float _752 = ((((1.0 - _743) * (_738 + 2.0)) * exp2(log2(isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0))) * (_738 + 1.0))) + _743) * _665;
        float _753 = _633 * 0.5;
        float _754 = _643 * 0.5;
        float _755 = _653 * 0.5;
        float _756 = dot(vec3(_753, _754, _755), vec3(_753, _754, _755));
        float _761 = (_756 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_756);
        float _769 = (dot(vec3(_274, _275, _276), vec3(_761 * _753, _761 * _754, _761 * _755)) + 1.0) * 0.5;
        float _3584 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
        float _778 = sqrt(((_754 * _754) + (_753 * _753)) + (_755 * _755)) / (_666 + 9.9999997473787516355514526367188e-06);
        float _3595 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
        float _779 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
        float _780 = _779 * 2.0;
        float _784 = (1.0 - _779) / (_779 + 1.0);
        float _3606 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
        float _785 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
        float _794 = ((((1.0 - _785) * (_780 + 2.0)) * exp2(log2(isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0))) * (_780 + 1.0))) + _785) * _666;
        _802 = _633;
        _804 = _632;
        _805 = _631;
        _806 = _643;
        _807 = _642;
        _808 = _641;
        _809 = _653;
        _810 = _652;
        _811 = _651;
        _812 = _666;
        _813 = _665;
        _814 = _664;
        _815 = cbModelParam._m0[36u].z * (isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0)));
        _816 = cbModelParam._m0[36u].z * (isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0)));
        _817 = cbModelParam._m0[36u].z * (isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0)));
    }
    else
    {
        _802 = _803;
        _804 = _803;
        _805 = _803;
        _806 = _803;
        _807 = _803;
        _808 = _803;
        _809 = _803;
        _810 = _803;
        _811 = _803;
        _812 = _803;
        _813 = _803;
        _814 = _803;
        _815 = 0.0;
        _816 = 0.0;
        _817 = 0.0;
    }
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _843 = fma(_500, cbModelParam._m0[30u].z, fma(_496, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _492));
        float _847 = fma(_500, cbModelParam._m0[31u].z, fma(_496, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _492));
        float _851 = fma(_500, cbModelParam._m0[32u].z, fma(_496, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _492));
        float _874 = _492 + _274;
        float _875 = _496 + _275;
        float _876 = _500 + _276;
        float _886 = fma(_876, cbModelParam._m0[30u].z, fma(_875, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _874)) - _843;
        float _887 = fma(_876, cbModelParam._m0[31u].z, fma(_875, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _874)) - _847;
        float _888 = fma(_876, cbModelParam._m0[32u].z, fma(_875, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _874)) - _851;
        float _892 = inversesqrt(dot(vec3(_886, _887, _888), vec3(_886, _887, _888)));
        float _905 = ((_892 * _886) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_843 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _906 = ((_892 * _887) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_847 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _907 = ((_892 * _888) / cbModelParam._m0[35u].z) + ((((((_851 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _909 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_905, _906, _907), 0.0);
        vec4 _916 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_905, _906, _907), 0.0);
        vec4 _923 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_905, _906, _907), 0.0);
        vec4 _930 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_905, _906, _907), 0.0);
        float _942 = exp2((_909.w + (-0.5)) * 20.0) * 2.0;
        float _943 = _942 * (_909.x + (-0.5));
        float _944 = _942 * (_909.y + (-0.5));
        float _945 = _942 * (_909.z + (-0.5));
        float _952 = exp2((_916.w + (-0.5)) * 20.0) * 2.0;
        float _953 = _952 * (_916.x + (-0.5));
        float _954 = _952 * (_916.y + (-0.5));
        float _955 = _952 * (_916.z + (-0.5));
        float _962 = exp2((_923.w + (-0.5)) * 20.0) * 2.0;
        float _963 = _962 * (_923.x + (-0.5));
        float _964 = _962 * (_923.y + (-0.5));
        float _965 = _962 * (_923.z + (-0.5));
        float _972 = exp2((_930.w + (-0.5)) * 20.0) * 2.0;
        float _973 = _972 * (_930.x + (-0.5));
        float _974 = _972 * (_930.y + (-0.5));
        float _975 = _972 * (_930.z + (-0.5));
        float _976 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _977 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _978 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _979 = _943 * 0.5;
        float _980 = _953 * 0.5;
        float _981 = _963 * 0.5;
        float _982 = dot(vec3(_979, _980, _981), vec3(_979, _980, _981));
        float _987 = (_982 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_982);
        float _995 = (dot(vec3(_274, _275, _276), vec3(_987 * _979, _987 * _980, _987 * _981)) + 1.0) * 0.5;
        float _3647 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _1004 = sqrt(((_980 * _980) + (_979 * _979)) + (_981 * _981)) / (_976 + 9.9999997473787516355514526367188e-06);
        float _3658 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1005 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
        float _1006 = _1005 * 2.0;
        float _1010 = (1.0 - _1005) / (_1005 + 1.0);
        float _3669 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1011 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
        float _1020 = ((((1.0 - _1011) * (_1006 + 2.0)) * exp2(log2(isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0))) * (_1006 + 1.0))) + _1011) * _976;
        float _1021 = _944 * 0.5;
        float _1022 = _954 * 0.5;
        float _1023 = _964 * 0.5;
        float _1024 = dot(vec3(_1021, _1022, _1023), vec3(_1021, _1022, _1023));
        float _1029 = (_1024 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1024);
        float _1037 = (dot(vec3(_274, _275, _276), vec3(_1029 * _1021, _1029 * _1022, _1029 * _1023)) + 1.0) * 0.5;
        float _3680 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1046 = sqrt(((_1022 * _1022) + (_1021 * _1021)) + (_1023 * _1023)) / (_977 + 9.9999997473787516355514526367188e-06);
        float _3691 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1047 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
        float _1048 = _1047 * 2.0;
        float _1052 = (1.0 - _1047) / (_1047 + 1.0);
        float _3702 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1053 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
        float _1062 = ((((1.0 - _1053) * (_1048 + 2.0)) * exp2(log2(isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0))) * (_1048 + 1.0))) + _1053) * _977;
        float _1063 = _945 * 0.5;
        float _1064 = _955 * 0.5;
        float _1065 = _965 * 0.5;
        float _1066 = dot(vec3(_1063, _1064, _1065), vec3(_1063, _1064, _1065));
        float _1071 = (_1066 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1066);
        float _1079 = (dot(vec3(_274, _275, _276), vec3(_1071 * _1063, _1071 * _1064, _1071 * _1065)) + 1.0) * 0.5;
        float _3713 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1088 = sqrt(((_1064 * _1064) + (_1063 * _1063)) + (_1065 * _1065)) / (_978 + 9.9999997473787516355514526367188e-06);
        float _3724 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
        float _1090 = _1089 * 2.0;
        float _1094 = (1.0 - _1089) / (_1089 + 1.0);
        float _3735 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _1104 = ((((1.0 - _1095) * (_1090 + 2.0)) * exp2(log2(isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))) * (_1090 + 1.0))) + _1095) * _978;
        _1112 = _945;
        _1113 = _944;
        _1114 = _943;
        _1115 = _955;
        _1116 = _954;
        _1117 = _953;
        _1118 = _965;
        _1119 = _964;
        _1120 = _963;
        _1121 = _978;
        _1122 = _977;
        _1123 = _976;
        _1124 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0)));
        _1125 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0)));
        _1126 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0)));
    }
    else
    {
        _1112 = _803;
        _1113 = _803;
        _1114 = _803;
        _1115 = _803;
        _1116 = _803;
        _1117 = _803;
        _1118 = _803;
        _1119 = _803;
        _1120 = _803;
        _1121 = _803;
        _1122 = _803;
        _1123 = _803;
        _1124 = 0.0;
        _1125 = 0.0;
        _1126 = 0.0;
    }
    float _1136 = (cbModelParam._m0[1u].x * (_1124 - _815)) + _815;
    float _1137 = (cbModelParam._m0[1u].x * (_1125 - _816)) + _816;
    float _1138 = (cbModelParam._m0[1u].x * (_1126 - _817)) + _817;
    float _1159 = fma(_1138, cbSceneParam._m0[89u].z, fma(_1137, cbSceneParam._m0[89u].y, _1136 * cbSceneParam._m0[89u].x));
    float _1162 = fma(_1138, cbSceneParam._m0[90u].z, fma(_1137, cbSceneParam._m0[90u].y, _1136 * cbSceneParam._m0[90u].x));
    float _1165 = fma(_1138, cbSceneParam._m0[91u].z, fma(_1137, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1136));
    float _1180 = _439 * 0.5;
    float _1181 = _440 * 0.5;
    float _1182 = _441 * 0.5;
    float _1183 = dot(vec4(_1180, _1181, _1182, 1.0), vec4(_1114, _1117, _1120, _1123));
    float _1186 = dot(vec4(_1180, _1181, _1182, 1.0), vec4(_1113, _1116, _1119, _1122));
    float _1189 = dot(vec4(_1180, _1181, _1182, 1.0), vec4(_1112, _1115, _1118, _1121));
    float _1223;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1196 = dot(vec4(_1180, _1181, _1182, 1.0), vec4(_802, _806, _809, _812));
        float _1200 = dot(vec4(_1180, _1181, _1182, 1.0), vec4(_804, _807, _810, _813));
        float _1204 = dot(vec4(_1180, _1181, _1182, 1.0), vec4(_805, _808, _811, _814));
        float _1211 = dot(vec4(cbModelParam._m0[39u]), vec4(_1180, _1181, _1182, 1.0));
        _1223 = dot(vec3(isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0)), isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0)), isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1211) ? 0.0 : (isnan(0.0) ? _1211 : max(0.0, _1211))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1223 = 1.0;
    }
    float _1234;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1225 = dot(vec4(cbModelParam._m0[40u]), vec4(_1180, _1181, _1182, 1.0));
        _1234 = dot(vec3(isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0)), isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0)), isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1225) ? 0.0 : (isnan(0.0) ? _1225 : max(0.0, _1225))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1234 = 1.0;
    }
    float _1238 = (_1234 * cbModelParam._m0[1u].x) + (_1223 * (1.0 - cbModelParam._m0[1u].x));
    float _1248 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _277);
    float _1249 = isnan(_1248) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1248 : min(cbModelParam._m0[25u].z, _1248));
    float _1331;
    float _1333;
    float _1335;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1298 = fma(_500, cbModelParam._m0[13u].z, fma(_496, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _492)) + cbModelParam._m0[13u].w;
        float _1302 = fma(_500, cbModelParam._m0[14u].z, fma(_496, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _492)) + cbModelParam._m0[14u].w;
        float _1306 = fma(_500, cbModelParam._m0[15u].z, fma(_496, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _492)) + cbModelParam._m0[15u].w;
        float _1309 = fma(_441, cbModelParam._m0[13u].z, fma(_440, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _439));
        float _1312 = fma(_441, cbModelParam._m0[14u].z, fma(_440, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _439));
        float _1315 = fma(_441, cbModelParam._m0[15u].z, fma(_440, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _439));
        float _1343;
        if (_1309 > 0.0)
        {
            _1343 = abs((1.0 - _1298) / _1309);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1309 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1298 + 1.0) / _1309);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1343 = frontier_phi_14_12_ladder;
        }
        float _1517;
        if (_1312 > 0.0)
        {
            _1517 = abs((1.0 - _1302) / _1312);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1312 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1302 + 1.0) / _1312);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1517 = frontier_phi_23_19_ladder;
        }
        float _1813;
        if (_1315 > 0.0)
        {
            _1813 = abs((1.0 - _1306) / _1315);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1315 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1306 + 1.0) / _1315);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1813 = frontier_phi_35_30_ladder;
        }
        float _1815 = isnan(_1517) ? _1343 : (isnan(_1343) ? _1517 : min(_1343, _1517));
        float _1816 = isnan(_1813) ? _1815 : (isnan(_1815) ? _1813 : min(_1815, _1813));
        float _1820 = (_1816 * _1309) + _1298;
        float _1821 = (_1816 * _1312) + _1302;
        float _1822 = (_1816 * _1315) + _1306;
        float _1823 = _1816 * 9.9999997473787516355514526367188e-05;
        float _1825 = (-1.0) - _1823;
        float _1827 = _1823 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1822 > _1827) || ((_1822 < _1825) || ((_1821 > _1827) || ((_1821 < _1825) || ((_1820 < _1825) || (_1820 > _1827))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1967 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1822, cbModelParam._m0[9u].z, fma(_1821, cbModelParam._m0[9u].y, _1820 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1822, cbModelParam._m0[10u].z, fma(_1821, cbModelParam._m0[10u].y, _1820 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1822, cbModelParam._m0[11u].z, fma(_1821, cbModelParam._m0[11u].y, _1820 * cbModelParam._m0[11u].x))), _1249);
            frontier_phi_13_35_ladder = _1967.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1967.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1967.x * cbModelParam._m0[1u].y;
        }
        _1331 = frontier_phi_13_35_ladder_2;
        _1333 = frontier_phi_13_35_ladder_1;
        _1335 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1319 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_439, _440, _441), _1249);
        _1331 = _1319.x * cbModelParam._m0[1u].y;
        _1333 = _1319.y * cbModelParam._m0[1u].y;
        _1335 = _1319.z * cbModelParam._m0[1u].y;
    }
    float _1339 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _277);
    float _1340 = isnan(_1339) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1339 : min(cbModelParam._m0[25u].w, _1339));
    float _1433;
    float _1435;
    float _1437;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1397 = fma(_500, cbModelParam._m0[21u].z, fma(_496, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _492)) + cbModelParam._m0[21u].w;
        float _1401 = fma(_500, cbModelParam._m0[22u].z, fma(_496, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _492)) + cbModelParam._m0[22u].w;
        float _1405 = fma(_500, cbModelParam._m0[23u].z, fma(_496, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _492)) + cbModelParam._m0[23u].w;
        float _1408 = fma(_441, cbModelParam._m0[21u].z, fma(_440, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _439));
        float _1411 = fma(_441, cbModelParam._m0[22u].z, fma(_440, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _439));
        float _1414 = fma(_441, cbModelParam._m0[23u].z, fma(_440, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _439));
        float _1522;
        if (_1408 > 0.0)
        {
            _1522 = abs((1.0 - _1397) / _1408);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1408 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1397 + 1.0) / _1408);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1522 = frontier_phi_25_21_ladder;
        }
        float _1840;
        if (_1411 > 0.0)
        {
            _1840 = abs((1.0 - _1401) / _1411);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1411 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1401 + 1.0) / _1411);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1840 = frontier_phi_37_32_ladder;
        }
        float _2167;
        if (_1414 > 0.0)
        {
            _2167 = abs((1.0 - _1405) / _1414);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1414 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1405 + 1.0) / _1414);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2167 = frontier_phi_47_44_ladder;
        }
        float _2169 = isnan(_1840) ? _1522 : (isnan(_1522) ? _1840 : min(_1522, _1840));
        float _2170 = isnan(_2167) ? _2169 : (isnan(_2169) ? _2167 : min(_2169, _2167));
        float _2174 = (_2170 * _1408) + _1397;
        float _2175 = (_2170 * _1411) + _1401;
        float _2176 = (_2170 * _1414) + _1405;
        float _2177 = _2170 * 9.9999997473787516355514526367188e-05;
        float _2178 = (-1.0) - _2177;
        float _2180 = _2177 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2176 > _2180) || ((_2176 < _2178) || ((_2175 > _2180) || ((_2175 < _2178) || ((_2174 < _2178) || (_2174 > _2180))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2294 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2176, cbModelParam._m0[17u].z, fma(_2175, cbModelParam._m0[17u].y, _2174 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2176, cbModelParam._m0[18u].z, fma(_2175, cbModelParam._m0[18u].y, _2174 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2176, cbModelParam._m0[19u].z, fma(_2175, cbModelParam._m0[19u].y, _2174 * cbModelParam._m0[19u].x))), _1340);
            frontier_phi_22_47_ladder = _2294.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2294.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2294.x * cbModelParam._m0[1u].z;
        }
        _1433 = frontier_phi_22_47_ladder_2;
        _1435 = frontier_phi_22_47_ladder_1;
        _1437 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1417 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_439, _440, _441), _1340);
        _1433 = _1417.x * cbModelParam._m0[1u].z;
        _1435 = _1417.y * cbModelParam._m0[1u].z;
        _1437 = _1417.z * cbModelParam._m0[1u].z;
    }
    float _1449 = ((((1.0 - _460) * ((_447 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_460 * _447)) * _431;
    float _1450 = _1449 * ((cbModelParam._m0[1u].w * (_1433 - _1331)) + _1331);
    float _1451 = _1449 * ((cbModelParam._m0[1u].w * (_1435 - _1333)) + _1333);
    float _1452 = _1449 * ((cbModelParam._m0[1u].w * (_1437 - _1335)) + _1335);
    float _1455 = fma(_1452, cbSceneParam._m0[89u].z, fma(_1451, cbSceneParam._m0[89u].y, _1450 * cbSceneParam._m0[89u].x));
    float _1458 = fma(_1452, cbSceneParam._m0[90u].z, fma(_1451, cbSceneParam._m0[90u].y, _1450 * cbSceneParam._m0[90u].x));
    float _1461 = fma(_1452, cbSceneParam._m0[91u].z, fma(_1451, cbSceneParam._m0[91u].y, _1450 * cbSceneParam._m0[91u].x));
    float _1496 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1500 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1504 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1508 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1509 = _1496 / _1508;
    float _1510 = _1500 / _1508;
    float _1511 = _1504 / _1508;
    float _1658;
    float _1659;
    float _1660;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1538 = ((uint(_1511 > cbSceneParam._m0[59u].y) + uint(_1511 > cbSceneParam._m0[59u].x)) + uint(_1511 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1539 = _1538 + 43u;
        uint _1547 = _1538 + 44u;
        uint _1555 = _1538 + 45u;
        uint _1563 = _1538 + 46u;
        float _1574 = fma(_1508, cbSceneParam._m0[_1539].w, fma(_1504, cbSceneParam._m0[_1539].z, fma(_1500, cbSceneParam._m0[_1539].y, _1496 * cbSceneParam._m0[_1539].x)));
        float _1578 = fma(_1508, cbSceneParam._m0[_1547].w, fma(_1504, cbSceneParam._m0[_1547].z, fma(_1500, cbSceneParam._m0[_1547].y, _1496 * cbSceneParam._m0[_1547].x)));
        float _1586 = fma(_1508, cbSceneParam._m0[_1563].w, fma(_1504, cbSceneParam._m0[_1563].z, fma(_1500, cbSceneParam._m0[_1563].y, _1496 * cbSceneParam._m0[_1563].x)));
        float _1591 = cbSceneParam._m0[33u].z * _1586;
        float _1593 = cbSceneParam._m0[33u].w * _1586;
        float _1596 = fma(_1508, cbSceneParam._m0[_1555].w, fma(_1504, cbSceneParam._m0[_1555].z, fma(_1500, cbSceneParam._m0[_1555].y, _1496 * cbSceneParam._m0[_1555].x))) / _1586;
        float _1644 = (cbSceneParam._m0[33u].x - sqrt(((_1510 * _1510) + (_1509 * _1509)) + (_1511 * _1511))) * cbSceneParam._m0[33u].y;
        float _3861 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1651 = (isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1591 + _1574) / _1586, (_1593 + _1578) / _1586), _1596), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1593 + _1574) / _1586, (_1578 - _1591) / _1586), _1596), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1574 - _1591) / _1586, (_1578 - _1593) / _1586), _1596), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1574 - _1593) / _1586, (_1591 + _1578) / _1586), _1596), 0.0)).x), vec4(0.25)));
        _1658 = 1.0 - (_1651 * cbSceneParam._m0[34u].x);
        _1659 = 1.0 - (_1651 * cbSceneParam._m0[34u].y);
        _1660 = 1.0 - (_1651 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1658 = 1.0;
        _1659 = 1.0;
        _1660 = 1.0;
    }
    float _1724;
    float _1726;
    float _1728;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1712 = fma(_1508, cbSceneParam._m0[63u].w, fma(_1504, cbSceneParam._m0[63u].z, fma(_1500, cbSceneParam._m0[63u].y, _1496 * cbSceneParam._m0[63u].x)));
        float _1713 = fma(_1508, cbSceneParam._m0[60u].w, fma(_1504, cbSceneParam._m0[60u].z, fma(_1500, cbSceneParam._m0[60u].y, _1496 * cbSceneParam._m0[60u].x))) / _1712;
        float _1714 = fma(_1508, cbSceneParam._m0[61u].w, fma(_1504, cbSceneParam._m0[61u].z, fma(_1500, cbSceneParam._m0[61u].y, _1496 * cbSceneParam._m0[61u].x))) / _1712;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1713 >= cbSceneParam._m0[64u].x) && (_1714 >= cbSceneParam._m0[64u].y)) && (_1713 <= cbSceneParam._m0[64u].z)) && (_1714 <= cbSceneParam._m0[64u].w))
        {
            float _1853 = fma(_1508, cbSceneParam._m0[62u].w, fma(_1504, cbSceneParam._m0[62u].z, fma(_1500, cbSceneParam._m0[62u].y, _1496 * cbSceneParam._m0[62u].x))) / _1712;
            float _1857 = isnan(cbSceneParam._m0[41u].w) ? _1853 : (isnan(_1853) ? cbSceneParam._m0[41u].w : max(_1853, cbSceneParam._m0[41u].w));
            float _1900 = (cbSceneParam._m0[33u].x - sqrt(((_1510 * _1510) + (_1509 * _1509)) + (_1511 * _1511))) * cbSceneParam._m0[33u].y;
            float _3877 = isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0));
            float _1907 = (isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1713, cbSceneParam._m0[33u].w + _1714), _1857), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1713, _1714 - cbSceneParam._m0[33u].z), _1857), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1713 - cbSceneParam._m0[33u].z, _1714 - cbSceneParam._m0[33u].w), _1857), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1713 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1714), _1857), 0.0)).x), vec4(0.25)));
            float _1911 = 1.0 - (_1907 * cbSceneParam._m0[34u].x);
            float _1912 = 1.0 - (_1907 * cbSceneParam._m0[34u].y);
            float _1913 = 1.0 - (_1907 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_1913) ? _1660 : (isnan(_1660) ? _1913 : min(_1660, _1913));
            frontier_phi_34_33_ladder_1 = isnan(_1912) ? _1659 : (isnan(_1659) ? _1912 : min(_1659, _1912));
            frontier_phi_34_33_ladder_2 = isnan(_1911) ? _1658 : (isnan(_1658) ? _1911 : min(_1658, _1911));
        }
        else
        {
            frontier_phi_34_33_ladder = _1660;
            frontier_phi_34_33_ladder_1 = _1659;
            frontier_phi_34_33_ladder_2 = _1658;
        }
        _1724 = frontier_phi_34_33_ladder_2;
        _1726 = frontier_phi_34_33_ladder_1;
        _1728 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1724 = _1658;
        _1726 = _1659;
        _1728 = _1660;
    }
    uvec4 _1733 = floatBitsToUint(cbInstanceData._m0[_405 + 5u]);
    uint _1735 = _1733.x * 14u;
    uint _1736 = _1735 + 13u;
    float _1743 = _431 + (-1.0);
    float _1748 = (cbLight._m0[_1736].x * _1743) + 1.0;
    float _1749 = (cbLight._m0[_1736].y * _1743) + 1.0;
    float _1750 = (cbLight._m0[_1736].z * _1743) + 1.0;
    float _1751 = (cbLight._m0[_1736].w * _1743) + 1.0;
    uint _1752 = _1735 + 5u;
    float _1758 = isnan(1.0) ? _1749 : (isnan(_1749) ? 1.0 : min(_1749, 1.0));
    uint _1762 = _1735 + 4u;
    float _1772 = isnan(1.0) ? _1748 : (isnan(_1748) ? 1.0 : min(_1748, 1.0));
    uint _1776 = _1735 | 1u;
    float _1787 = dot(vec3(cbLight._m0[_1735].xyz), vec3(_274, _275, _276));
    float _1790 = dot(vec3(cbLight._m0[_1776].xyz), vec3(_274, _275, _276));
    float _3913 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
    float _3924 = isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0));
    float _1795 = (isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0))) * 0.3183098733425140380859375;
    float _1797 = (isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))) * 0.3183098733425140380859375;
    float _1804 = ((cbLight._m0[_1752].x * _1758) * _1797) + (((cbLight._m0[_1762].x * _1724) * _1772) * _1795);
    float _1805 = ((_1758 * cbLight._m0[_1752].y) * _1797) + (((cbLight._m0[_1762].y * _1726) * _1772) * _1795);
    float _1806 = ((_1758 * cbLight._m0[_1752].z) * _1797) + (((cbLight._m0[_1762].z * _1728) * _1772) * _1795);
    uvec4 _1810 = floatBitsToUint(cbLight._m0[_1735 + 12u]);
    bool _1812 = _1810.x == 0u;
    float _1914;
    float _1916;
    float _1918;
    if (_1812)
    {
        _1914 = _1804;
        _1916 = _1805;
        _1918 = _1806;
    }
    else
    {
        uint _1922 = _1735 + 6u;
        float _1938 = (dot(vec3(cbLight._m0[_1735 + 2u].xyz), vec3(_274, _275, _276)) * 0.5) + 0.5;
        float _1939 = _1938 * _1938;
        float _3935 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
        float _1940 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1941 = isnan(1.0) ? _1750 : (isnan(_1750) ? 1.0 : min(_1750, 1.0));
        _1914 = (((cbLight._m0[_1922].x * 0.3183098733425140380859375) * _1940) * _1941) + _1804;
        _1916 = (((cbLight._m0[_1922].y * 0.3183098733425140380859375) * _1940) * _1941) + _1805;
        _1918 = (((cbLight._m0[_1922].z * 0.3183098733425140380859375) * _1940) * _1941) + _1806;
    }
    bool _1921 = _1810.y == 0u;
    float _1976;
    float _1978;
    float _1980;
    if (_1921)
    {
        _1976 = _1914;
        _1978 = _1916;
        _1980 = _1918;
    }
    else
    {
        uint _2138 = _1735 + 7u;
        float _2154 = (dot(vec3(cbLight._m0[_1735 + 3u].xyz), vec3(_274, _275, _276)) * 0.5) + 0.5;
        float _2155 = _2154 * _2154;
        float _3951 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
        float _2156 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _2157 = isnan(1.0) ? _1751 : (isnan(_1751) ? 1.0 : min(_1751, 1.0));
        _1976 = (((cbLight._m0[_2138].x * 0.3183098733425140380859375) * _2156) * _2157) + _1914;
        _1978 = (((cbLight._m0[_2138].y * 0.3183098733425140380859375) * _2156) * _2157) + _1916;
        _1980 = (((cbLight._m0[_2138].z * 0.3183098733425140380859375) * _2156) * _2157) + _1918;
    }
    uint _1983 = _1735 + 8u;
    float _1996 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1735].w)) * _277) * 0.949999988079071044921875);
    float _1997 = _1996 * _1996;
    float _1998 = cbLight._m0[_1735].x + _356;
    float _1999 = cbLight._m0[_1735].y + _357;
    float _2000 = cbLight._m0[_1735].z + _358;
    float _2004 = inversesqrt(dot(vec3(_1998, _1999, _2000), vec3(_1998, _1999, _2000)));
    float _2005 = _2004 * _1998;
    float _2006 = _2004 * _1999;
    float _2007 = _2004 * _2000;
    float _2008 = dot(vec3(_274, _275, _276), vec3(cbLight._m0[_1735].xyz));
    float _3967 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
    float _2011 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
    float _3978 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _2012 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
    float _2013 = dot(vec3(_274, _275, _276), vec3(_2005, _2006, _2007));
    float _3989 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
    float _2016 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
    float _2017 = dot(vec3(cbLight._m0[_1735].xyz), vec3(_2005, _2006, _2007));
    float _4000 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
    float _2021 = _1997 * _1997;
    float _2025 = ((_2016 * _2016) * (_2021 + (-1.0))) + 1.0;
    float _2036 = (exp2(log2(1.0 - (isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2037 = 1.0 - _1997;
    float _2048 = (0.5 / (((_2012 * ((_2011 * _2037) + _1997)) + 9.9999999392252902907785028219223e-09) + (((_2012 * _2037) + _1997) * _2011))) * _2011;
    float _4011 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
    float _2050 = (isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * (_2021 / ((_2025 * _2025) * 3.141590118408203125));
    uint _2064 = _1735 + 9u;
    float _2075 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1776].w)) * _277) * 0.949999988079071044921875);
    float _2076 = _2075 * _2075;
    float _2077 = cbLight._m0[_1776].x + _356;
    float _2078 = cbLight._m0[_1776].y + _357;
    float _2079 = cbLight._m0[_1776].z + _358;
    float _2083 = inversesqrt(dot(vec3(_2077, _2078, _2079), vec3(_2077, _2078, _2079)));
    float _2084 = _2083 * _2077;
    float _2085 = _2083 * _2078;
    float _2086 = _2083 * _2079;
    float _2087 = dot(vec3(_274, _275, _276), vec3(cbLight._m0[_1776].xyz));
    float _4022 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
    float _2090 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
    float _2091 = dot(vec3(_274, _275, _276), vec3(_2084, _2085, _2086));
    float _4033 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
    float _2094 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
    float _2095 = dot(vec3(cbLight._m0[_1776].xyz), vec3(_2084, _2085, _2086));
    float _4044 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
    float _2099 = _2076 * _2076;
    float _2103 = ((_2094 * _2094) * (_2099 + (-1.0))) + 1.0;
    float _2112 = (exp2(log2(1.0 - (isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2113 = 1.0 - _2076;
    float _2123 = (0.5 / (((_2012 * ((_2090 * _2113) + _2076)) + 9.9999999392252902907785028219223e-09) + (((_2012 * _2113) + _2076) * _2090))) * _2090;
    float _4055 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
    float _2125 = (isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) * (_2099 / ((_2103 * _2103) * 3.141590118408203125));
    float _2135 = (((_2112 * cbLight._m0[_2064].x) * _2125) * _1758) + ((((cbLight._m0[_1983].x * _1724) * _2036) * _2050) * _1772);
    float _2136 = (((_2112 * cbLight._m0[_2064].y) * _2125) * _1758) + ((((cbLight._m0[_1983].y * _1726) * _2036) * _2050) * _1772);
    float _2137 = (((_2112 * cbLight._m0[_2064].z) * _2125) * _1758) + ((((cbLight._m0[_1983].z * _1728) * _2036) * _2050) * _1772);
    float _2193;
    float _2195;
    float _2197;
    if (_1812)
    {
        _2193 = _2135;
        _2195 = _2136;
        _2197 = _2137;
    }
    else
    {
        uint _2199 = _1735 + 2u;
        uint _2203 = _1735 + 10u;
        float _2217 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2199].w)) * _277) * 0.949999988079071044921875);
        float _2218 = _2217 * _2217;
        float _2219 = cbLight._m0[_2199].x + _356;
        float _2220 = cbLight._m0[_2199].y + _357;
        float _2221 = cbLight._m0[_2199].z + _358;
        float _2225 = inversesqrt(dot(vec3(_2219, _2220, _2221), vec3(_2219, _2220, _2221)));
        float _2226 = _2225 * _2219;
        float _2227 = _2225 * _2220;
        float _2228 = _2225 * _2221;
        float _2229 = dot(vec3(_274, _275, _276), vec3(cbLight._m0[_2199].xyz));
        float _4066 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
        float _2232 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _2233 = dot(vec3(_274, _275, _276), vec3(_2226, _2227, _2228));
        float _4077 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
        float _2236 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _2237 = dot(vec3(cbLight._m0[_2199].xyz), vec3(_2226, _2227, _2228));
        float _4088 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
        float _2241 = _2218 * _2218;
        float _2245 = ((_2236 * _2236) * (_2241 + (-1.0))) + 1.0;
        float _2254 = (exp2(log2(1.0 - (isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2255 = 1.0 - _2218;
        float _2265 = (0.5 / (((_2012 * ((_2232 * _2255) + _2218)) + 9.9999999392252902907785028219223e-09) + (((_2012 * _2255) + _2218) * _2232))) * _2232;
        float _4099 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
        float _2267 = (isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * (_2241 / ((_2245 * _2245) * 3.141590118408203125));
        float _2268 = isnan(1.0) ? _1750 : (isnan(_1750) ? 1.0 : min(_1750, 1.0));
        _2193 = (((_2254 * cbLight._m0[_2203].x) * _2267) * _2268) + _2135;
        _2195 = (((_2254 * cbLight._m0[_2203].y) * _2267) * _2268) + _2136;
        _2197 = (((_2254 * cbLight._m0[_2203].z) * _2267) * _2268) + _2137;
    }
    float _2299;
    float _2301;
    float _2303;
    if (_1921)
    {
        _2299 = _2193;
        _2301 = _2195;
        _2303 = _2197;
    }
    else
    {
        uint _2310 = _1735 + 3u;
        uint _2314 = _1735 + 11u;
        float _2328 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2310].w)) * _277) * 0.949999988079071044921875);
        float _2329 = _2328 * _2328;
        float _2330 = cbLight._m0[_2310].x + _356;
        float _2331 = cbLight._m0[_2310].y + _357;
        float _2332 = cbLight._m0[_2310].z + _358;
        float _2336 = inversesqrt(dot(vec3(_2330, _2331, _2332), vec3(_2330, _2331, _2332)));
        float _2337 = _2336 * _2330;
        float _2338 = _2336 * _2331;
        float _2339 = _2336 * _2332;
        float _2340 = dot(vec3(_274, _275, _276), vec3(cbLight._m0[_2310].xyz));
        float _4115 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
        float _2343 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _2344 = dot(vec3(_274, _275, _276), vec3(_2337, _2338, _2339));
        float _4126 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
        float _2347 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _2348 = dot(vec3(cbLight._m0[_2310].xyz), vec3(_2337, _2338, _2339));
        float _4137 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
        float _2352 = _2329 * _2329;
        float _2356 = ((_2347 * _2347) * (_2352 + (-1.0))) + 1.0;
        float _2365 = (exp2(log2(1.0 - (isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2366 = 1.0 - _2329;
        float _2376 = (0.5 / (((_2012 * ((_2343 * _2366) + _2329)) + 9.9999999392252902907785028219223e-09) + (((_2012 * _2366) + _2329) * _2343))) * _2343;
        float _4148 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
        float _2378 = (isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (_2352 / ((_2356 * _2356) * 3.141590118408203125));
        float _2379 = isnan(1.0) ? _1751 : (isnan(_1751) ? 1.0 : min(_1751, 1.0));
        _2299 = (((_2365 * cbLight._m0[_2314].x) * _2378) * _2379) + _2193;
        _2301 = (((_2365 * cbLight._m0[_2314].y) * _2378) * _2379) + _2195;
        _2303 = (((_2365 * cbLight._m0[_2314].z) * _2378) * _2379) + _2197;
    }
    float _2445;
    float _2447;
    float _2449;
    float _2451;
    float _2453;
    float _2455;
    if (_1733.y == 0u)
    {
        uvec4 _2400 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2401 = _2400.x;
        uint _2412 = uint((float(_2400.y) * floor(float(uint(cbSceneParam._m0[85u].y * _365) / _2401))) + floor(float(uint(cbSceneParam._m0[85u].x * _364) / _2401)));
        float _2422 = (log2(_1511 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2423 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
        uint _2426 = uint(isnan(14.0) ? _2423 : (isnan(_2423) ? 14.0 : min(_2423, 14.0)));
        uvec4 _2431 = texelFetch(g_lightClusterGridBuffer, int(((_2426 << 2u) + (_2412 << 6u)) >> 2u));
        uint _2432 = _2431.x;
        uint _2433 = _2400.z;
        float _2515;
        float _2517;
        float _2519;
        float _2521;
        float _2523;
        float _2525;
        if (((((1u << ((_2433 >> 4u) & 15u)) + 4294967295u) & _2432) == 0u) || ((_2433 & 240u) == 0u))
        {
            _2515 = 0.0;
            _2517 = 0.0;
            _2519 = 0.0;
            _2521 = 0.0;
            _2523 = 0.0;
            _2525 = 0.0;
        }
        else
        {
            float _2516;
            float _2518;
            float _2520;
            float _2522;
            float _2524;
            float _2526;
            float _2660 = 0.0;
            float _2661 = 0.0;
            float _2662 = 0.0;
            float _2663 = 0.0;
            float _2664 = 0.0;
            float _2665 = 0.0;
            uint _2666 = 0u;
            uint _2675;
            bool _2676;
            for (;;)
            {
                _2675 = texelFetch(g_lightClassification, int((((_2426 << 5u) + (_2412 << 9u)) + (_2666 << 2u)) >> 2u)).x;
                _2676 = _2675 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2676)
                {
                    frontier_phi_66_pred = _2665;
                    frontier_phi_66_pred_1 = _2664;
                    frontier_phi_66_pred_2 = _2663;
                    frontier_phi_66_pred_3 = _2662;
                    frontier_phi_66_pred_4 = _2661;
                    frontier_phi_66_pred_5 = _2660;
                }
                else
                {
                    float _2784;
                    float _2785;
                    float _2786;
                    float _2787;
                    float _2788;
                    float _2789;
                    uint _2790;
                    _2784 = _2660;
                    _2785 = _2661;
                    _2786 = _2662;
                    _2787 = _2663;
                    _2788 = _2664;
                    _2789 = _2665;
                    _2790 = _2675;
                    float _2716;
                    float _2717;
                    float _2718;
                    float _2719;
                    float _2720;
                    float _2721;
                    for (;;)
                    {
                        uint _2794 = uint(findLSB(_2790)) + (_2666 << 5u);
                        uint _2791 = (_2790 + 4294967295u) & _2790;
                        uint _2796 = _2794 * 48u;
                        vec4 _2810 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2796)).x, texelFetch(g_PointLightRenderingBuffer, int(_2796 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2796 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2796 + 3u)).x));
                        uint _2816 = (_2794 * 48u) + 4u;
                        vec4 _2829 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2816)).x, texelFetch(g_PointLightRenderingBuffer, int(_2816 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2816 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2816 + 3u)).x));
                        uint _2835 = (_2794 * 48u) + 8u;
                        vec3 _2846 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2835)).x, texelFetch(g_PointLightRenderingBuffer, int(_2835 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2835 + 2u)).x));
                        float _2850 = _2810.x - _1509;
                        float _2851 = _2810.y - _1510;
                        float _2852 = _2810.z - _1511;
                        float _2853 = dot(vec3(_2850, _2851, _2852), vec3(_2850, _2851, _2852));
                        float _2856 = inversesqrt(_2853);
                        float _2857 = _2856 * _2850;
                        float _2858 = _2856 * _2851;
                        float _2859 = _2856 * _2852;
                        float _2860 = dot(vec3(_386, _389, _392), vec3(_2857, _2858, _2859));
                        float _2865 = 1.0 - (_2853 * _2810.w);
                        float _4174 = isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0));
                        float _2866 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
                        float _2867 = sqrt(_2853) * _2829.w;
                        float _2870 = 1.39999997615814208984375 / (_2867 + 1.39999997615814208984375);
                        float _2871 = _2870 * _2870;
                        float _2874 = ((1.0 - _2871) * _2860) + _2871;
                        float _2877 = _2867 * _2867;
                        float _2881 = ((isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0))) * _2866) / ((_2877 * 0.699999988079071044921875) + 1.0);
                        float _2885 = (-0.0) - _1509;
                        float _2886 = (-0.0) - _1510;
                        float _2887 = (-0.0) - _1511;
                        float _2891 = inversesqrt(dot(vec3(_2885, _2886, _2887), vec3(_2885, _2886, _2887)));
                        float _2892 = _2891 * _2885;
                        float _2893 = _2891 * _2886;
                        float _2894 = _2891 * _2887;
                        float _2901 = exp2(log2(1.0 / ((_2877 * 3.5) + 5.0)) * 0.25);
                        float _2902 = 1.0 - _447;
                        float _2909 = sqrt(1.0 - ((1.0 - (_2902 * _2902)) * (1.0 - (_2901 * _2901))));
                        float _2910 = _2909 * _2909;
                        float _2911 = _2910 * _2910;
                        float _2912 = _2892 + _2857;
                        float _2913 = _2893 + _2858;
                        float _2914 = _2894 + _2859;
                        float _2918 = inversesqrt(dot(vec3(_2912, _2913, _2914), vec3(_2912, _2913, _2914)));
                        float _2922 = dot(vec3(_386, _389, _392), vec3(_2892, _2893, _2894));
                        float _4190 = isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0));
                        float _2925 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
                        float _2926 = dot(vec3(_386, _389, _392), vec3(_2918 * _2912, _2918 * _2913, _2918 * _2914));
                        float _4201 = isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0));
                        float _2929 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
                        float _2933 = ((_2929 * _2929) * (_2911 + (-1.0))) + 1.0;
                        float _2934 = _2870 * _2910;
                        float _2935 = _2934 * _2934;
                        float _2938 = ((1.0 - _2935) * _2860) + _2935;
                        float _4212 = isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0));
                        float _2939 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
                        float _2940 = 1.0 - _2910;
                        float _2950 = (0.5 / (((_2939 * ((_2925 * _2940) + _2910)) + 9.9999999392252902907785028219223e-09) + (((_2939 * _2940) + _2910) * _2925))) * _2939;
                        float _4223 = isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0));
                        float _2961 = (((_2911 * 3.1415927410125732421875) * (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0)))) / ((_2933 * _2933) * ((_2877 * 2.1991131305694580078125) + 3.141590118408203125))) * _2866;
                        _2719 = (_2881 * _2829.x) + _2787;
                        _2720 = (_2881 * _2829.y) + _2788;
                        _2721 = (_2881 * _2829.z) + _2789;
                        _2716 = (_2961 * _2846.x) + _2784;
                        _2717 = (_2961 * _2846.y) + _2785;
                        _2718 = (_2961 * _2846.z) + _2786;
                        if (_2791 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2784 = _2716;
                            _2785 = _2717;
                            _2786 = _2718;
                            _2787 = _2719;
                            _2788 = _2720;
                            _2789 = _2721;
                            _2790 = _2791;
                        }
                    }
                    frontier_phi_66_pred = _2721;
                    frontier_phi_66_pred_1 = _2720;
                    frontier_phi_66_pred_2 = _2719;
                    frontier_phi_66_pred_3 = _2718;
                    frontier_phi_66_pred_4 = _2717;
                    frontier_phi_66_pred_5 = _2716;
                }
                _2526 = frontier_phi_66_pred;
                _2524 = frontier_phi_66_pred_1;
                _2522 = frontier_phi_66_pred_2;
                _2520 = frontier_phi_66_pred_3;
                _2518 = frontier_phi_66_pred_4;
                _2516 = frontier_phi_66_pred_5;
                uint _2667 = _2666 + 1u;
                if (_2667 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2660 = _2516;
                    _2661 = _2518;
                    _2662 = _2520;
                    _2663 = _2522;
                    _2664 = _2524;
                    _2665 = _2526;
                    _2666 = _2667;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2515 = _2516;
            _2517 = _2518;
            _2519 = _2520;
            _2521 = _2522;
            _2523 = _2524;
            _2525 = _2526;
        }
        uvec4 _2529 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2530 = _2529.z;
        uint _2532 = (_2530 >> 8u) & 15u;
        float _2628;
        float _2630;
        float _2632;
        float _2634;
        float _2636;
        float _2638;
        if (((4294967295u << _2532) & _2432) == 0u)
        {
            _2628 = _2515;
            _2630 = _2517;
            _2632 = _2519;
            _2634 = _2521;
            _2636 = _2523;
            _2638 = _2525;
        }
        else
        {
            float _2653 = inversesqrt(dot(vec3(_1509, _1510, _1511), vec3(_1509, _1510, _1511)));
            float _2654 = _2653 * _1509;
            float _2655 = _2653 * _1510;
            float _2656 = _2653 * _1511;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2532 < ((_2530 >> 12u) & 15u))
            {
                float _2629;
                float _2631;
                float _2633;
                float _2635;
                float _2637;
                float _2639;
                float _2767 = _2515;
                float _2768 = _2517;
                float _2769 = _2519;
                float _2770 = _2521;
                float _2771 = _2523;
                float _2772 = _2525;
                uint _2773 = _2532;
                uint _2782;
                bool _2783;
                for (;;)
                {
                    _2782 = texelFetch(g_lightClassification, int((((_2426 << 5u) + (_2412 << 9u)) + (_2773 << 2u)) >> 2u)).x;
                    _2783 = _2782 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2783)
                    {
                        frontier_phi_72_pred = _2772;
                        frontier_phi_72_pred_1 = _2771;
                        frontier_phi_72_pred_2 = _2770;
                        frontier_phi_72_pred_3 = _2769;
                        frontier_phi_72_pred_4 = _2768;
                        frontier_phi_72_pred_5 = _2767;
                    }
                    else
                    {
                        float _2966;
                        float _2967;
                        float _2968;
                        float _2969;
                        float _2970;
                        float _2971;
                        float _3261;
                        float _3262;
                        float _3263;
                        float _3264;
                        float _3265;
                        float _3266;
                        float _2979 = _2767;
                        float _2980 = _2768;
                        float _2981 = _2769;
                        float _2982 = _2770;
                        float _2983 = _2771;
                        float _2984 = _2772;
                        uint _2985 = _2782;
                        uint _2986;
                        vec4 _3011;
                        float _3012;
                        vec4 _3027;
                        vec3 _3039;
                        vec4 _3055;
                        vec4 _3070;
                        float _3117;
                        bool _3118;
                        for (;;)
                        {
                            uint _2996 = ((_2773 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2985));
                            _2986 = (_2985 + 4294967295u) & _2985;
                            uint _2998 = _2996 * 40u;
                            _3011 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2998)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 3u)).x));
                            _3012 = _3011.w;
                            uint _3014 = (_2996 * 40u) + 4u;
                            _3027 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3014)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 3u)).x));
                            uint _3029 = (_2996 * 40u) + 8u;
                            _3039 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3029)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 2u)).x));
                            uint _3042 = (_2996 * 40u) + 16u;
                            _3055 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3042)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 3u)).x));
                            uint _3057 = (_2996 * 40u) + 20u;
                            _3070 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3057)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 3u)).x));
                            uint _3073 = (_2996 * 40u) + 24u;
                            vec4 _3086 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3073)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 3u)).x));
                            uint _3092 = (_2996 * 40u) + 28u;
                            vec4 _3105 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3092)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 3u)).x));
                            _3117 = fma(_1511, _3105.z, fma(_1510, _3105.y, _3105.x * _1509)) + _3105.w;
                            _3118 = !((fma(_1511, _3086.z, fma(_1510, _3086.y, _3086.x * _1509)) + _3086.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3118)
                            {
                                float _3145 = _3011.x - _1509;
                                float _3146 = _3011.y - _1510;
                                float _3147 = _3011.z - _1511;
                                float _3148 = dot(vec3(_3145, _3146, _3147), vec3(_3145, _3146, _3147));
                                float _3151 = inversesqrt(_3148);
                                float _3152 = _3151 * _3145;
                                float _3153 = _3151 * _3146;
                                float _3154 = _3151 * _3147;
                                float _3158 = 1.0 - (_3148 / (_3012 * _3012));
                                float _4234 = isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : max(_3158, 0.0));
                                float _3159 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
                                float _3163 = sqrt(_3148) * _3027.w;
                                float _3165 = 1.39999997615814208984375 / (_3163 + 1.39999997615814208984375);
                                float _3166 = _3165 * _3165;
                                float _3169 = ((1.0 - _3166) * dot(vec3(_3152, _3153, _3154), vec3(_386, _389, _392))) + _3166;
                                float _3172 = _3163 * _3163;
                                float _3176 = (fma(_1511, _3055.z, fma(_1510, _3055.y, _3055.x * _1509)) + _3055.w) / _3117;
                                float _3177 = (fma(_1511, _3070.z, fma(_1510, _3070.y, _3070.x * _1509)) + _3070.w) / _3117;
                                float _3181 = 1.0 - dot(vec2(_3176, _3177), vec2(_3176, _3177));
                                float _4250 = isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0));
                                float _3182 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
                                float _3183 = _3182 * (((isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0))) * _3159) / ((_3172 * 0.699999988079071044921875) + 1.0));
                                float _3195 = exp2(log2(1.0 / ((_3172 * 3.5) + 5.0)) * 0.25);
                                float _3196 = 1.0 - _447;
                                float _3203 = sqrt(1.0 - ((1.0 - (_3196 * _3196)) * (1.0 - (_3195 * _3195))));
                                float _3204 = _3203 * _3203;
                                float _3205 = _3204 * _3204;
                                float _3206 = _3152 - _2654;
                                float _3207 = _3153 - _2655;
                                float _3208 = _3154 - _2656;
                                float _3212 = inversesqrt(dot(vec3(_3206, _3207, _3208), vec3(_3206, _3207, _3208)));
                                float _3216 = dot(vec3(_386, _389, _392), vec3((-0.0) - _2654, (-0.0) - _2655, (-0.0) - _2656));
                                float _4261 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0));
                                float _3219 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
                                float _3220 = dot(vec3(_386, _389, _392), vec3(_3212 * _3206, _3212 * _3207, _3212 * _3208));
                                float _4272 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0));
                                float _3223 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
                                float _3227 = ((_3223 * _3223) * (_3205 + (-1.0))) + 1.0;
                                float _3228 = _3165 * _3204;
                                float _3229 = _3228 * _3228;
                                float _3235 = ((1.0 - _3229) * dot(vec3(_386, _389, _392), vec3(_3152, _3153, _3154))) + _3229;
                                float _4283 = isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0));
                                float _3236 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
                                float _3237 = 1.0 - _3204;
                                float _3247 = (0.5 / (((_3236 * ((_3219 * _3237) + _3204)) + 9.9999999392252902907785028219223e-09) + (((_3236 * _3237) + _3204) * _3219))) * _3236;
                                float _4294 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0));
                                float _3257 = (_3182 * _3159) * (((_3205 * 3.1415927410125732421875) * (isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0)))) / ((_3227 * _3227) * ((_3172 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3183 * _3027.y;
                                frontier_phi_78_pred_1 = _3183 * _3027.x;
                                frontier_phi_78_pred_2 = _3257 * _3039.z;
                                frontier_phi_78_pred_3 = _3257 * _3039.y;
                                frontier_phi_78_pred_4 = _3257 * _3039.x;
                                frontier_phi_78_pred_5 = _3183 * _3027.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3265 = frontier_phi_78_pred;
                            _3264 = frontier_phi_78_pred_1;
                            _3263 = frontier_phi_78_pred_2;
                            _3262 = frontier_phi_78_pred_3;
                            _3261 = frontier_phi_78_pred_4;
                            _3266 = frontier_phi_78_pred_5;
                            _2969 = _3264 + _2982;
                            _2970 = _3265 + _2983;
                            _2971 = _3266 + _2984;
                            _2966 = _3261 + _2979;
                            _2967 = _3262 + _2980;
                            _2968 = _3263 + _2981;
                            if (_2986 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2979 = _2966;
                                _2980 = _2967;
                                _2981 = _2968;
                                _2982 = _2969;
                                _2983 = _2970;
                                _2984 = _2971;
                                _2985 = _2986;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _2971;
                        frontier_phi_72_pred_1 = _2970;
                        frontier_phi_72_pred_2 = _2969;
                        frontier_phi_72_pred_3 = _2968;
                        frontier_phi_72_pred_4 = _2967;
                        frontier_phi_72_pred_5 = _2966;
                    }
                    _2639 = frontier_phi_72_pred;
                    _2637 = frontier_phi_72_pred_1;
                    _2635 = frontier_phi_72_pred_2;
                    _2633 = frontier_phi_72_pred_3;
                    _2631 = frontier_phi_72_pred_4;
                    _2629 = frontier_phi_72_pred_5;
                    uint _2774 = _2773 + 1u;
                    if (_2774 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2767 = _2629;
                        _2768 = _2631;
                        _2769 = _2633;
                        _2770 = _2635;
                        _2771 = _2637;
                        _2772 = _2639;
                        _2773 = _2774;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2639;
                frontier_phi_60_61_ladder_1 = _2637;
                frontier_phi_60_61_ladder_2 = _2633;
                frontier_phi_60_61_ladder_3 = _2631;
                frontier_phi_60_61_ladder_4 = _2629;
                frontier_phi_60_61_ladder_5 = _2635;
            }
            else
            {
                frontier_phi_60_61_ladder = _2525;
                frontier_phi_60_61_ladder_1 = _2523;
                frontier_phi_60_61_ladder_2 = _2519;
                frontier_phi_60_61_ladder_3 = _2517;
                frontier_phi_60_61_ladder_4 = _2515;
                frontier_phi_60_61_ladder_5 = _2521;
            }
            _2628 = frontier_phi_60_61_ladder_4;
            _2630 = frontier_phi_60_61_ladder_3;
            _2632 = frontier_phi_60_61_ladder_2;
            _2634 = frontier_phi_60_61_ladder_5;
            _2636 = frontier_phi_60_61_ladder_1;
            _2638 = frontier_phi_60_61_ladder;
        }
        float _2643 = isnan(1.0) ? _431 : (isnan(_431) ? 1.0 : min(_431, 1.0));
        _2445 = (_2643 * _2634) + _1976;
        _2447 = (_2643 * _2636) + _1978;
        _2449 = (_2643 * _2638) + _1980;
        _2451 = ((_2628 * 0.039999999105930328369140625) * _2643) + _2299;
        _2453 = ((_2630 * 0.039999999105930328369140625) * _2643) + _2301;
        _2455 = ((_2632 * 0.039999999105930328369140625) * _2643) + _2303;
    }
    else
    {
        _2445 = _1976;
        _2447 = _1978;
        _2449 = _1980;
        _2451 = _2299;
        _2453 = _2301;
        _2455 = _2303;
    }
    float _4310 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _4321 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _4332 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _2472 = ((isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0))) * (_2445 + ((isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0))) * _431))) + ((_2451 + ((isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0))) * _1238)) * cbPerFrame._m0[3u].x);
    float _2473 = ((isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0))) * (_2447 + ((isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0))) * _431))) + ((_2453 + ((isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0))) * _1238)) * cbPerFrame._m0[3u].x);
    float _2474 = ((isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0))) * (_2449 + ((isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0))) * _431))) + ((_2455 + ((isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0))) * _1238)) * cbPerFrame._m0[3u].x);
    uint _2478 = _405 + 6u;
    float _2486 = _364 / cbSceneParam._m0[86u].x;
    float _2487 = _365 / cbSceneParam._m0[86u].y;
    vec4 _2501 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2486, _2487, (log2((isnan(cbSceneParam._m0[77u].w) ? _296 : (isnan(_296) ? cbSceneParam._m0[77u].w : min(_296, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2503 = _2501.x;
    float _2504 = _2501.y;
    float _2505 = _2501.z;
    float _2506 = _2501.w;
    float _2578;
    float _2580;
    float _2582;
    float _2584;
    if (_296 > cbSceneParam._m0[78u].w)
    {
        float _2540 = isnan(_296) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _296 : min(cbSceneParam._m0[80u].w, _296));
        float _2541 = _2540 / _296;
        float _2552 = _2541 * _349;
        float _2553 = _350 * _2541;
        float _2554 = (-0.0) - _2553;
        float _2556 = _2541 * _351;
        float _2558 = (cbSceneParam._m0[77u].w * _2554) / _2540;
        float _2559 = _2558 + cbSceneParam._m0[79u].w;
        float _2560 = cbSceneParam._m0[79u].w - _2553;
        float _2566 = sqrt(((_2552 * _2552) + (_2553 * _2553)) + (_2556 * _2556));
        float _2569 = (1.0 - (cbSceneParam._m0[77u].w / _2540)) * _2566;
        float _2574 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2576 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2729;
        if (abs((_2554 - _2558) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2729 = ((((_2559 > 0.0) ? exp2(_2574 * _2559) : (2.0 - exp2(_2576 * _2559))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2569;
        }
        else
        {
            float _2689 = 1.0 / cbSceneParam._m0[80u].x;
            float _2690 = isnan(_2560) ? _2559 : (isnan(_2559) ? _2560 : max(_2559, _2560));
            float _2691 = isnan(_2560) ? _2559 : (isnan(_2559) ? _2560 : min(_2559, _2560));
            float _2700 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : min(_2690, 0.0));
            float _2701 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : min(_2691, 0.0));
            _2729 = ((abs(_2566 / _2554) * cbSceneParam._m0[80u].y) * ((((_2700 - _2701) * 2.0) - ((exp2(_2574 * (isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0)))) - exp2(_2574 * (isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0))))) * _2689)) - ((exp2(_2576 * _2700) - exp2(_2576 * _2701)) * _2689))) + (_2569 * cbSceneParam._m0[80u].z);
        }
        vec4 _2731 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2486, _2487, 1.0), 0.0);
        float _2740 = exp2((_2729 * (-1.44269502162933349609375)) * (1.0 - _2731.w));
        float _2741 = log2(_2740);
        float _2757 = log2(_2506);
        _2578 = (exp2(_2757 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2741 * cbSceneParam._m0[78u].x)) * _2731.x) / cbSceneParam._m0[78u].x)) + _2503;
        _2580 = (exp2(_2757 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2741 * cbSceneParam._m0[78u].y)) * _2731.y) / cbSceneParam._m0[78u].y)) + _2504;
        _2582 = (exp2(_2757 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2741 * cbSceneParam._m0[78u].z)) * _2731.z) / cbSceneParam._m0[78u].z)) + _2505;
        _2584 = _2740 * _2506;
    }
    else
    {
        _2578 = _2503;
        _2580 = _2504;
        _2582 = _2505;
        _2584 = _2506;
    }
    float _2596 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2597 = _2596 == 3.0;
    float _2598 = log2(_2584);
    float _2605 = exp2(_2598 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0)));
    float _2606 = exp2(_2598 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0)));
    float _2607 = exp2(_2598 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0)));
    float _2616 = (_2596 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2616 * (_2597 ? _2605 : (_2605 + (cbSceneParam._m0[72u].w * _2578)));
    SV_Target.y = _2616 * (_2597 ? _2606 : (_2606 + (cbSceneParam._m0[72u].w * _2580)));
    SV_Target.z = _2616 * (_2597 ? _2607 : (_2607 + (cbSceneParam._m0[72u].w * _2582)));
    SV_Target.w = cbInstanceData._m0[_2478].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2478].w;
}


