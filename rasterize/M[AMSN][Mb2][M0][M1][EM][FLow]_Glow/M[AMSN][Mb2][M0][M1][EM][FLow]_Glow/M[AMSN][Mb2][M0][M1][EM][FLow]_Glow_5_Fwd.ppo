#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1184;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _201 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _202 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _203 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _209 = inversesqrt(dot(vec3(_201, _202, _203), vec3(_201, _202, _203)));
    float _216 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _245 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _251 = _245.x * cbMtdParam._m0[9u].x;
    float _252 = _245.y * cbMtdParam._m0[9u].y;
    float _253 = _245.z * cbMtdParam._m0[9u].z;
    vec4 _291 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[5u].w));
    float _307 = (TEXCOORD_3.x - ((cbMtdParam._m0[14u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[14u].y + 1.0);
    float _3528 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _308 = isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0));
    float _315 = (((_291.x * cbMtdParam._m0[10u].x) - _251) * _308) + _251;
    float _316 = (((_291.y * cbMtdParam._m0[10u].y) - _252) * _308) + _252;
    float _317 = (((_291.z * cbMtdParam._m0[10u].z) - _253) * _308) + _253;
    vec4 _334 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _353 = TEXCOORD_9.x - ((cbMtdParam._m0[16u].y * (1.0 - TEXCOORD_9.x)) * (_334.x + 0.00999999977648258209228515625));
    float _355 = _353 * (cbMtdParam._m0[16u].z + 1.0);
    float _3539 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _356 = isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0));
    float _364 = ((((cbMtdParam._m0[12u].x - _315) * TEXCOORD_9.x) * cbMtdParam._m0[16u].x) * _356) + _315;
    float _365 = ((((cbMtdParam._m0[12u].y - _316) * TEXCOORD_9.y) * cbMtdParam._m0[16u].x) * _356) + _316;
    float _366 = (((cbMtdParam._m0[16u].x * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _317)) * _356) + _317;
    vec4 _379 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[4u].w));
    float _387 = (_379.x * 2.0) + (-1.0);
    float _389 = (_379.y * 2.0) + (-1.0);
    float _390 = dot(vec2(_387, _389), vec2(_387, _389));
    float _3550 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    vec4 _407 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _411 = _407.z;
    float _414 = (_407.x * 2.0) + (-1.0);
    float _415 = (_407.y * 2.0) + (-1.0);
    float _416 = dot(vec2(_414, _415), vec2(_414, _415));
    float _3561 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _421 = sqrt(1.0 - (isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0))));
    float _424 = (_308 * (_379.z - _411)) + _411;
    float _430 = _353 * (cbMtdParam._m0[16u].y + 1.0);
    float _3572 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _434 = ((cbMtdParam._m0[15u].y - _424) * (isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0)))) + _424;
    float _447 = (cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _448 = (cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _474 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * ((cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * ((cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[10u].w));
    float _479 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[15u].w;
    float _486 = ((_474.y * 0.5) + (-0.25)) * cbMtdParam._m0[15u].z;
    float _488 = (-0.0) - (cbMtdParam._m0[15u].z * ((_474.x * 0.5) + (-0.25)));
    float _490 = fract(_479);
    float _492 = fract(_479 + 0.5);
    float _493 = _490 * _488;
    float _494 = _486 * _490;
    float _497 = _492 * _488;
    float _498 = _486 * _492;
    float _503 = abs((_490 * 2.0) + (-1.0));
    vec4 _519 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_493 + _447) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_494 + _448) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _521 = _519.x;
    float _522 = _519.y;
    float _523 = _519.z;
    vec4 _524 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_497 + _447) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_498 + _448) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _551 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _552 = (cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _565 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_493 + _551) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_494 + _552) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _567 = _565.x;
    float _568 = _565.y;
    float _569 = _565.z;
    vec4 _570 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_497 + _551) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_498 + _552) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _599 = (_308 * (_387 - _414)) + _414;
    float _600 = (_308 * (_389 - _415)) + _415;
    float _601 = (_308 * (sqrt(1.0 - (isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0)))) - _421)) + _421;
    vec4 _620 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[16u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, (((cbMtdParam._m0[17u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w));
    float _626 = (_620.x * 2.0) + (-1.0);
    float _627 = (_620.y * 2.0) + (-1.0);
    float _628 = dot(vec2(_626, _627), vec2(_626, _627));
    float _3583 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _644 = (_356 * (((_599 * cbMtdParam._m0[14u].z) - _599) + _626)) + _599;
    float _645 = (_356 * (((_600 * cbMtdParam._m0[14u].z) - _600) + _627)) + _600;
    float _646 = (_356 * (sqrt(1.0 - (isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0)))) - _601)) + _601;
    float _649 = fma(_646, _216 * NORMAL.x, fma(_645, _223 * TANGENT.x, (_209 * _201) * _644));
    float _652 = fma(_646, _216 * NORMAL.y, fma(_645, _223 * TANGENT.y, (_209 * _202) * _644));
    float _655 = fma(_646, _216 * NORMAL.z, fma(_645, _223 * TANGENT.z, (_209 * _203) * _644));
    float _659 = inversesqrt(dot(vec3(_649, _652, _655), vec3(_649, _652, _655)));
    float _660 = _659 * _649;
    float _661 = _659 * _652;
    float _662 = _659 * _655;
    float _3594 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _663 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
    float _3605 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    float _3616 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _3627 = isnan(0.0) ? _366 : (isnan(_366) ? 0.0 : max(_366, 0.0));
    float _682 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _723 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _733 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _723);
    float _734 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _723);
    float _735 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _723);
    float _739 = inversesqrt(dot(vec3(_733, _734, _735), vec3(_733, _734, _735)));
    float _740 = _733 * _739;
    float _741 = _734 * _739;
    float _742 = _735 * _739;
    float _748 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _749 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _769 = fma(_662, cbSceneParam._m0[5u].z, fma(_661, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _660));
    float _772 = fma(_662, cbSceneParam._m0[6u].z, fma(_661, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _660));
    float _775 = fma(_662, cbSceneParam._m0[7u].z, fma(_661, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _660));
    uint _788 = uint(roundEven(NORMAL.w)) * 13u;
    uint _789 = _788 + 9u;
    uint _790 = _789 + uint(cbMatDynParam._m0[0u].w);
    float _796 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0)))) * cbInstanceData._m0[_790].x;
    float _797 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0)))) * cbInstanceData._m0[_790].y;
    float _798 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0)))) * cbInstanceData._m0[_790].z;
    float _3638 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _799 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
    float _3649 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _800 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
    float _3660 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _801 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
    vec4 _810 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _748, cbSceneParam._m0[86u].y * _749));
    float _813 = _810.x * TEXCOORD_3.w;
    float _814 = dot(vec3(_660, _661, _662), vec3(_740, _741, _742));
    float _817 = _814 * 2.0;
    float _821 = (_817 * _660) - _740;
    float _822 = (_817 * _661) - _741;
    float _823 = (_817 * _662) - _742;
    float _827 = abs(dot(vec3(_740, _741, _742), vec3(_660, _661, _662)));
    float _3671 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _829 = sqrt(_663);
    float _842 = exp2((_829 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_829 * 3.0));
    float _874 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _878 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _882 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1183;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _909 = fma(_882, cbModelParam._m0[26u].z, fma(_878, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _874));
        float _913 = fma(_882, cbModelParam._m0[27u].z, fma(_878, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _874));
        float _917 = fma(_882, cbModelParam._m0[28u].z, fma(_878, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _874));
        float _941 = _874 + _660;
        float _942 = _878 + _661;
        float _943 = _882 + _662;
        float _953 = fma(_943, cbModelParam._m0[26u].z, fma(_942, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _941)) - _909;
        float _954 = fma(_943, cbModelParam._m0[27u].z, fma(_942, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _941)) - _913;
        float _955 = fma(_943, cbModelParam._m0[28u].z, fma(_942, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _941)) - _917;
        float _959 = inversesqrt(dot(vec3(_953, _954, _955), vec3(_953, _954, _955)));
        float _972 = ((_959 * _953) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_909 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _973 = ((_959 * _954) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_913 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _974 = ((_959 * _955) / cbModelParam._m0[34u].z) + ((((((_917 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _977 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_972, _973, _974), 0.0);
        vec4 _984 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_972, _973, _974), 0.0);
        vec4 _991 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_972, _973, _974), 0.0);
        vec4 _998 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_972, _973, _974), 0.0);
        float _1011 = exp2((_977.w + (-0.5)) * 20.0) * 2.0;
        float _1012 = _1011 * (_977.x + (-0.5));
        float _1013 = _1011 * (_977.y + (-0.5));
        float _1014 = _1011 * (_977.z + (-0.5));
        float _1021 = exp2((_984.w + (-0.5)) * 20.0) * 2.0;
        float _1022 = _1021 * (_984.x + (-0.5));
        float _1023 = _1021 * (_984.y + (-0.5));
        float _1024 = _1021 * (_984.z + (-0.5));
        float _1031 = exp2((_991.w + (-0.5)) * 20.0) * 2.0;
        float _1032 = _1031 * (_991.x + (-0.5));
        float _1033 = _1031 * (_991.y + (-0.5));
        float _1034 = _1031 * (_991.z + (-0.5));
        float _1041 = exp2((_998.w + (-0.5)) * 20.0) * 2.0;
        float _1042 = _1041 * (_998.x + (-0.5));
        float _1043 = _1041 * (_998.y + (-0.5));
        float _1044 = _1041 * (_998.z + (-0.5));
        float _1045 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1046 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1047 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1048 = _1012 * 0.5;
        float _1049 = _1022 * 0.5;
        float _1050 = _1032 * 0.5;
        float _1051 = dot(vec3(_1048, _1049, _1050), vec3(_1048, _1049, _1050));
        float _1056 = (_1051 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1051);
        float _1065 = (dot(vec3(_660, _661, _662), vec3(_1056 * _1048, _1056 * _1049, _1056 * _1050)) + 1.0) * 0.5;
        float _3697 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1075 = sqrt(((_1049 * _1049) + (_1048 * _1048)) + (_1050 * _1050)) / (_1045 + 9.9999997473787516355514526367188e-06);
        float _3708 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
        float _1077 = _1076 * 2.0;
        float _1081 = (1.0 - _1076) / (_1076 + 1.0);
        float _3719 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1082 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
        float _1091 = ((((1.0 - _1082) * (_1077 + 2.0)) * exp2(log2(isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))) * (_1077 + 1.0))) + _1082) * _1045;
        float _1092 = _1013 * 0.5;
        float _1093 = _1023 * 0.5;
        float _1094 = _1033 * 0.5;
        float _1095 = dot(vec3(_1092, _1093, _1094), vec3(_1092, _1093, _1094));
        float _1100 = (_1095 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1095);
        float _1108 = (dot(vec3(_660, _661, _662), vec3(_1100 * _1092, _1100 * _1093, _1100 * _1094)) + 1.0) * 0.5;
        float _3730 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1117 = sqrt(((_1093 * _1093) + (_1092 * _1092)) + (_1094 * _1094)) / (_1046 + 9.9999997473787516355514526367188e-06);
        float _3741 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1118 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
        float _1119 = _1118 * 2.0;
        float _1123 = (1.0 - _1118) / (_1118 + 1.0);
        float _3752 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1124 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
        float _1133 = ((((1.0 - _1124) * (_1119 + 2.0)) * exp2(log2(isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))) * (_1119 + 1.0))) + _1124) * _1046;
        float _1134 = _1014 * 0.5;
        float _1135 = _1024 * 0.5;
        float _1136 = _1034 * 0.5;
        float _1137 = dot(vec3(_1134, _1135, _1136), vec3(_1134, _1135, _1136));
        float _1142 = (_1137 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1137);
        float _1150 = (dot(vec3(_660, _661, _662), vec3(_1142 * _1134, _1142 * _1135, _1142 * _1136)) + 1.0) * 0.5;
        float _3763 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1159 = sqrt(((_1135 * _1135) + (_1134 * _1134)) + (_1136 * _1136)) / (_1047 + 9.9999997473787516355514526367188e-06);
        float _3774 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1160 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
        float _1161 = _1160 * 2.0;
        float _1165 = (1.0 - _1160) / (_1160 + 1.0);
        float _3785 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1166 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
        float _1175 = ((((1.0 - _1166) * (_1161 + 2.0)) * exp2(log2(isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0))) * (_1161 + 1.0))) + _1166) * _1047;
        _1183 = _1014;
        _1185 = _1013;
        _1186 = _1012;
        _1187 = _1024;
        _1188 = _1023;
        _1189 = _1022;
        _1190 = _1034;
        _1191 = _1033;
        _1192 = _1032;
        _1193 = _1047;
        _1194 = _1046;
        _1195 = _1045;
        _1196 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0)));
        _1197 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0)));
        _1198 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0)));
    }
    else
    {
        _1183 = _1184;
        _1185 = _1184;
        _1186 = _1184;
        _1187 = _1184;
        _1188 = _1184;
        _1189 = _1184;
        _1190 = _1184;
        _1191 = _1184;
        _1192 = _1184;
        _1193 = _1184;
        _1194 = _1184;
        _1195 = _1184;
        _1196 = 0.0;
        _1197 = 0.0;
        _1198 = 0.0;
    }
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1224 = fma(_882, cbModelParam._m0[30u].z, fma(_878, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _874));
        float _1228 = fma(_882, cbModelParam._m0[31u].z, fma(_878, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _874));
        float _1232 = fma(_882, cbModelParam._m0[32u].z, fma(_878, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _874));
        float _1255 = _874 + _660;
        float _1256 = _878 + _661;
        float _1257 = _882 + _662;
        float _1267 = fma(_1257, cbModelParam._m0[30u].z, fma(_1256, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1255)) - _1224;
        float _1268 = fma(_1257, cbModelParam._m0[31u].z, fma(_1256, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1255)) - _1228;
        float _1269 = fma(_1257, cbModelParam._m0[32u].z, fma(_1256, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1255)) - _1232;
        float _1273 = inversesqrt(dot(vec3(_1267, _1268, _1269), vec3(_1267, _1268, _1269)));
        float _1286 = ((_1273 * _1267) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1224 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1287 = ((_1273 * _1268) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1228 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1288 = ((_1273 * _1269) / cbModelParam._m0[35u].z) + ((((((_1232 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1290 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1286, _1287, _1288), 0.0);
        vec4 _1297 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1286, _1287, _1288), 0.0);
        vec4 _1304 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1286, _1287, _1288), 0.0);
        vec4 _1311 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1286, _1287, _1288), 0.0);
        float _1323 = exp2((_1290.w + (-0.5)) * 20.0) * 2.0;
        float _1324 = _1323 * (_1290.x + (-0.5));
        float _1325 = _1323 * (_1290.y + (-0.5));
        float _1326 = _1323 * (_1290.z + (-0.5));
        float _1333 = exp2((_1297.w + (-0.5)) * 20.0) * 2.0;
        float _1334 = _1333 * (_1297.x + (-0.5));
        float _1335 = _1333 * (_1297.y + (-0.5));
        float _1336 = _1333 * (_1297.z + (-0.5));
        float _1343 = exp2((_1304.w + (-0.5)) * 20.0) * 2.0;
        float _1344 = _1343 * (_1304.x + (-0.5));
        float _1345 = _1343 * (_1304.y + (-0.5));
        float _1346 = _1343 * (_1304.z + (-0.5));
        float _1353 = exp2((_1311.w + (-0.5)) * 20.0) * 2.0;
        float _1354 = _1353 * (_1311.x + (-0.5));
        float _1355 = _1353 * (_1311.y + (-0.5));
        float _1356 = _1353 * (_1311.z + (-0.5));
        float _1357 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1358 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1359 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1360 = _1324 * 0.5;
        float _1361 = _1334 * 0.5;
        float _1362 = _1344 * 0.5;
        float _1363 = dot(vec3(_1360, _1361, _1362), vec3(_1360, _1361, _1362));
        float _1368 = (_1363 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1363);
        float _1376 = (dot(vec3(_660, _661, _662), vec3(_1368 * _1360, _1368 * _1361, _1368 * _1362)) + 1.0) * 0.5;
        float _3826 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1385 = sqrt(((_1361 * _1361) + (_1360 * _1360)) + (_1362 * _1362)) / (_1357 + 9.9999997473787516355514526367188e-06);
        float _3837 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1386 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
        float _1387 = _1386 * 2.0;
        float _1391 = (1.0 - _1386) / (_1386 + 1.0);
        float _3848 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1392 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _1401 = ((((1.0 - _1392) * (_1387 + 2.0)) * exp2(log2(isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0))) * (_1387 + 1.0))) + _1392) * _1357;
        float _1402 = _1325 * 0.5;
        float _1403 = _1335 * 0.5;
        float _1404 = _1345 * 0.5;
        float _1405 = dot(vec3(_1402, _1403, _1404), vec3(_1402, _1403, _1404));
        float _1410 = (_1405 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1405);
        float _1418 = (dot(vec3(_660, _661, _662), vec3(_1410 * _1402, _1410 * _1403, _1410 * _1404)) + 1.0) * 0.5;
        float _3859 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1427 = sqrt(((_1403 * _1403) + (_1402 * _1402)) + (_1404 * _1404)) / (_1358 + 9.9999997473787516355514526367188e-06);
        float _3870 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1428 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
        float _1429 = _1428 * 2.0;
        float _1433 = (1.0 - _1428) / (_1428 + 1.0);
        float _3881 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1434 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _1443 = ((((1.0 - _1434) * (_1429 + 2.0)) * exp2(log2(isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0))) * (_1429 + 1.0))) + _1434) * _1358;
        float _1444 = _1326 * 0.5;
        float _1445 = _1336 * 0.5;
        float _1446 = _1346 * 0.5;
        float _1447 = dot(vec3(_1444, _1445, _1446), vec3(_1444, _1445, _1446));
        float _1452 = (_1447 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1447);
        float _1460 = (dot(vec3(_660, _661, _662), vec3(_1452 * _1444, _1452 * _1445, _1452 * _1446)) + 1.0) * 0.5;
        float _3892 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1469 = sqrt(((_1445 * _1445) + (_1444 * _1444)) + (_1446 * _1446)) / (_1359 + 9.9999997473787516355514526367188e-06);
        float _3903 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1470 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
        float _1471 = _1470 * 2.0;
        float _1475 = (1.0 - _1470) / (_1470 + 1.0);
        float _3914 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1476 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _1485 = ((((1.0 - _1476) * (_1471 + 2.0)) * exp2(log2(isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0))) * (_1471 + 1.0))) + _1476) * _1359;
        _1493 = _1326;
        _1494 = _1325;
        _1495 = _1324;
        _1496 = _1336;
        _1497 = _1335;
        _1498 = _1334;
        _1499 = _1346;
        _1500 = _1345;
        _1501 = _1344;
        _1502 = _1359;
        _1503 = _1358;
        _1504 = _1357;
        _1505 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0)));
        _1506 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0)));
        _1507 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0)));
    }
    else
    {
        _1493 = _1184;
        _1494 = _1184;
        _1495 = _1184;
        _1496 = _1184;
        _1497 = _1184;
        _1498 = _1184;
        _1499 = _1184;
        _1500 = _1184;
        _1501 = _1184;
        _1502 = _1184;
        _1503 = _1184;
        _1504 = _1184;
        _1505 = 0.0;
        _1506 = 0.0;
        _1507 = 0.0;
    }
    float _1517 = (cbModelParam._m0[1u].x * (_1505 - _1196)) + _1196;
    float _1518 = (cbModelParam._m0[1u].x * (_1506 - _1197)) + _1197;
    float _1519 = (cbModelParam._m0[1u].x * (_1507 - _1198)) + _1198;
    float _1540 = fma(_1519, cbSceneParam._m0[89u].z, fma(_1518, cbSceneParam._m0[89u].y, _1517 * cbSceneParam._m0[89u].x));
    float _1543 = fma(_1519, cbSceneParam._m0[90u].z, fma(_1518, cbSceneParam._m0[90u].y, _1517 * cbSceneParam._m0[90u].x));
    float _1546 = fma(_1519, cbSceneParam._m0[91u].z, fma(_1518, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1517));
    float _1561 = _821 * 0.5;
    float _1562 = _822 * 0.5;
    float _1563 = _823 * 0.5;
    float _1564 = dot(vec4(_1561, _1562, _1563, 1.0), vec4(_1495, _1498, _1501, _1504));
    float _1567 = dot(vec4(_1561, _1562, _1563, 1.0), vec4(_1494, _1497, _1500, _1503));
    float _1570 = dot(vec4(_1561, _1562, _1563, 1.0), vec4(_1493, _1496, _1499, _1502));
    float _1604;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1577 = dot(vec4(_1561, _1562, _1563, 1.0), vec4(_1183, _1187, _1190, _1193));
        float _1581 = dot(vec4(_1561, _1562, _1563, 1.0), vec4(_1185, _1188, _1191, _1194));
        float _1585 = dot(vec4(_1561, _1562, _1563, 1.0), vec4(_1186, _1189, _1192, _1195));
        float _1592 = dot(vec4(cbModelParam._m0[39u]), vec4(_1561, _1562, _1563, 1.0));
        _1604 = dot(vec3(isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0)), isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0)), isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1592) ? 0.0 : (isnan(0.0) ? _1592 : max(0.0, _1592))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1604 = 1.0;
    }
    float _1615;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1606 = dot(vec4(cbModelParam._m0[40u]), vec4(_1561, _1562, _1563, 1.0));
        _1615 = dot(vec3(isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0)), isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0)), isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1606) ? 0.0 : (isnan(0.0) ? _1606 : max(0.0, _1606))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1615 = 1.0;
    }
    float _1619 = (_1615 * cbModelParam._m0[1u].x) + (_1604 * (1.0 - cbModelParam._m0[1u].x));
    float _1629 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _663);
    float _1630 = isnan(_1629) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1629 : min(cbModelParam._m0[25u].z, _1629));
    float _1710;
    float _1712;
    float _1714;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1677 = fma(_882, cbModelParam._m0[13u].z, fma(_878, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _874)) + cbModelParam._m0[13u].w;
        float _1681 = fma(_882, cbModelParam._m0[14u].z, fma(_878, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _874)) + cbModelParam._m0[14u].w;
        float _1685 = fma(_882, cbModelParam._m0[15u].z, fma(_878, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _874)) + cbModelParam._m0[15u].w;
        float _1688 = fma(_823, cbModelParam._m0[13u].z, fma(_822, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _821));
        float _1691 = fma(_823, cbModelParam._m0[14u].z, fma(_822, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _821));
        float _1694 = fma(_823, cbModelParam._m0[15u].z, fma(_822, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _821));
        float _1722;
        if (_1688 > 0.0)
        {
            _1722 = abs((1.0 - _1677) / _1688);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1688 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1677 + 1.0) / _1688);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1722 = frontier_phi_14_12_ladder;
        }
        float _1923;
        if (_1691 > 0.0)
        {
            _1923 = abs((1.0 - _1681) / _1691);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1691 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1681 + 1.0) / _1691);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1923 = frontier_phi_23_19_ladder;
        }
        float _2166;
        if (_1694 > 0.0)
        {
            _2166 = abs((1.0 - _1685) / _1694);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1694 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1685 + 1.0) / _1694);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2166 = frontier_phi_35_30_ladder;
        }
        float _2168 = isnan(_1923) ? _1722 : (isnan(_1722) ? _1923 : min(_1722, _1923));
        float _2169 = isnan(_2166) ? _2168 : (isnan(_2168) ? _2166 : min(_2168, _2166));
        float _2173 = (_2169 * _1688) + _1677;
        float _2174 = (_2169 * _1691) + _1681;
        float _2175 = (_2169 * _1694) + _1685;
        float _2176 = _2169 * 9.9999997473787516355514526367188e-05;
        float _2178 = (-1.0) - _2176;
        float _2180 = _2176 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2175 > _2180) || ((_2175 < _2178) || ((_2174 > _2180) || ((_2174 < _2178) || ((_2173 < _2178) || (_2173 > _2180))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2299 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2175, cbModelParam._m0[9u].z, fma(_2174, cbModelParam._m0[9u].y, _2173 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2175, cbModelParam._m0[10u].z, fma(_2174, cbModelParam._m0[10u].y, _2173 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2175, cbModelParam._m0[11u].z, fma(_2174, cbModelParam._m0[11u].y, _2173 * cbModelParam._m0[11u].x))), _1630);
            frontier_phi_13_35_ladder = _2299.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2299.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2299.x * cbModelParam._m0[1u].y;
        }
        _1710 = frontier_phi_13_35_ladder_2;
        _1712 = frontier_phi_13_35_ladder_1;
        _1714 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1698 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_821, _822, _823), _1630);
        _1710 = _1698.x * cbModelParam._m0[1u].y;
        _1712 = _1698.y * cbModelParam._m0[1u].y;
        _1714 = _1698.z * cbModelParam._m0[1u].y;
    }
    float _1718 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _663);
    float _1719 = isnan(_1718) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1718 : min(cbModelParam._m0[25u].w, _1718));
    float _1809;
    float _1811;
    float _1813;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1773 = fma(_882, cbModelParam._m0[21u].z, fma(_878, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _874)) + cbModelParam._m0[21u].w;
        float _1777 = fma(_882, cbModelParam._m0[22u].z, fma(_878, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _874)) + cbModelParam._m0[22u].w;
        float _1781 = fma(_882, cbModelParam._m0[23u].z, fma(_878, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _874)) + cbModelParam._m0[23u].w;
        float _1784 = fma(_823, cbModelParam._m0[21u].z, fma(_822, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _821));
        float _1787 = fma(_823, cbModelParam._m0[22u].z, fma(_822, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _821));
        float _1790 = fma(_823, cbModelParam._m0[23u].z, fma(_822, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _821));
        float _1928;
        if (_1784 > 0.0)
        {
            _1928 = abs((1.0 - _1773) / _1784);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1784 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1773 + 1.0) / _1784);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1928 = frontier_phi_25_21_ladder;
        }
        float _2193;
        if (_1787 > 0.0)
        {
            _2193 = abs((1.0 - _1777) / _1787);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1787 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1777 + 1.0) / _1787);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2193 = frontier_phi_37_32_ladder;
        }
        float _2398;
        if (_1790 > 0.0)
        {
            _2398 = abs((1.0 - _1781) / _1790);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1790 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1781 + 1.0) / _1790);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2398 = frontier_phi_46_43_ladder;
        }
        float _2400 = isnan(_2193) ? _1928 : (isnan(_1928) ? _2193 : min(_1928, _2193));
        float _2401 = isnan(_2398) ? _2400 : (isnan(_2400) ? _2398 : min(_2400, _2398));
        float _2405 = (_2401 * _1784) + _1773;
        float _2406 = (_2401 * _1787) + _1777;
        float _2407 = (_2401 * _1790) + _1781;
        float _2408 = _2401 * 9.9999997473787516355514526367188e-05;
        float _2409 = (-1.0) - _2408;
        float _2411 = _2408 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2407 > _2411) || ((_2407 < _2409) || ((_2406 > _2411) || ((_2406 < _2409) || ((_2405 < _2409) || (_2405 > _2411))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2635 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2407, cbModelParam._m0[17u].z, fma(_2406, cbModelParam._m0[17u].y, _2405 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2407, cbModelParam._m0[18u].z, fma(_2406, cbModelParam._m0[18u].y, _2405 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2407, cbModelParam._m0[19u].z, fma(_2406, cbModelParam._m0[19u].y, _2405 * cbModelParam._m0[19u].x))), _1719);
            frontier_phi_22_46_ladder = _2635.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2635.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2635.x * cbModelParam._m0[1u].z;
        }
        _1809 = frontier_phi_22_46_ladder_2;
        _1811 = frontier_phi_22_46_ladder_1;
        _1813 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1793 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_821, _822, _823), _1719);
        _1809 = _1793.x * cbModelParam._m0[1u].z;
        _1811 = _1793.y * cbModelParam._m0[1u].z;
        _1813 = _1793.z * cbModelParam._m0[1u].z;
    }
    float _1825 = ((((1.0 - _842) * ((_829 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_842 * _829)) * _813;
    float _1826 = _1825 * ((cbModelParam._m0[1u].w * (_1809 - _1710)) + _1710);
    float _1827 = _1825 * ((cbModelParam._m0[1u].w * (_1811 - _1712)) + _1712);
    float _1828 = _1825 * ((cbModelParam._m0[1u].w * (_1813 - _1714)) + _1714);
    float _1831 = fma(_1828, cbSceneParam._m0[89u].z, fma(_1827, cbSceneParam._m0[89u].y, _1826 * cbSceneParam._m0[89u].x));
    float _1834 = fma(_1828, cbSceneParam._m0[90u].z, fma(_1827, cbSceneParam._m0[90u].y, _1826 * cbSceneParam._m0[90u].x));
    float _1837 = fma(_1828, cbSceneParam._m0[91u].z, fma(_1827, cbSceneParam._m0[91u].y, _1826 * cbSceneParam._m0[91u].x));
    uvec4 _1847 = floatBitsToUint(cbInstanceData._m0[_788 + 5u]);
    uint _1849 = _1847.x * 14u;
    uint _1850 = _1849 + 13u;
    float _1857 = _813 + (-1.0);
    float _1862 = (cbLight._m0[_1850].x * _1857) + 1.0;
    float _1863 = (cbLight._m0[_1850].y * _1857) + 1.0;
    float _1864 = (cbLight._m0[_1850].z * _1857) + 1.0;
    float _1865 = (cbLight._m0[_1850].w * _1857) + 1.0;
    uint _1866 = _1849 + 5u;
    float _1872 = isnan(1.0) ? _1863 : (isnan(_1863) ? 1.0 : min(_1863, 1.0));
    uint _1876 = _1849 + 4u;
    float _1882 = isnan(1.0) ? _1862 : (isnan(_1862) ? 1.0 : min(_1862, 1.0));
    uint _1886 = _1849 | 1u;
    float _1897 = dot(vec3(cbLight._m0[_1849].xyz), vec3(_660, _661, _662));
    float _1900 = dot(vec3(cbLight._m0[_1886].xyz), vec3(_660, _661, _662));
    float _4050 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
    float _4061 = isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0));
    float _1905 = (isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0))) * 0.3183098733425140380859375;
    float _1907 = (isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) * 0.3183098733425140380859375;
    float _1914 = ((cbLight._m0[_1866].x * _1872) * _1907) + ((cbLight._m0[_1876].x * _1882) * _1905);
    float _1915 = ((_1872 * cbLight._m0[_1866].y) * _1907) + ((_1882 * cbLight._m0[_1876].y) * _1905);
    float _1916 = ((_1872 * cbLight._m0[_1866].z) * _1907) + ((_1882 * cbLight._m0[_1876].z) * _1905);
    uvec4 _1920 = floatBitsToUint(cbLight._m0[_1849 + 12u]);
    bool _1922 = _1920.x == 0u;
    float _1933;
    float _1935;
    float _1937;
    if (_1922)
    {
        _1933 = _1914;
        _1935 = _1915;
        _1937 = _1916;
    }
    else
    {
        uint _1941 = _1849 + 6u;
        float _1957 = (dot(vec3(cbLight._m0[_1849 + 2u].xyz), vec3(_660, _661, _662)) * 0.5) + 0.5;
        float _1958 = _1957 * _1957;
        float _4072 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
        float _1959 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _1960 = isnan(1.0) ? _1864 : (isnan(_1864) ? 1.0 : min(_1864, 1.0));
        _1933 = (((cbLight._m0[_1941].x * 0.3183098733425140380859375) * _1959) * _1960) + _1914;
        _1935 = (((cbLight._m0[_1941].y * 0.3183098733425140380859375) * _1959) * _1960) + _1915;
        _1937 = (((cbLight._m0[_1941].z * 0.3183098733425140380859375) * _1959) * _1960) + _1916;
    }
    bool _1940 = _1920.y == 0u;
    float _1978;
    float _1980;
    float _1982;
    if (_1940)
    {
        _1978 = _1933;
        _1980 = _1935;
        _1982 = _1937;
    }
    else
    {
        uint _2137 = _1849 + 7u;
        float _2153 = (dot(vec3(cbLight._m0[_1849 + 3u].xyz), vec3(_660, _661, _662)) * 0.5) + 0.5;
        float _2154 = _2153 * _2153;
        float _4088 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
        float _2155 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _2156 = isnan(1.0) ? _1865 : (isnan(_1865) ? 1.0 : min(_1865, 1.0));
        _1978 = (((cbLight._m0[_2137].x * 0.3183098733425140380859375) * _2155) * _2156) + _1933;
        _1980 = (((cbLight._m0[_2137].y * 0.3183098733425140380859375) * _2155) * _2156) + _1935;
        _1982 = (((cbLight._m0[_2137].z * 0.3183098733425140380859375) * _2155) * _2156) + _1937;
    }
    uint _1985 = _1849 + 8u;
    float _1998 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1849].w)) * _663) * 0.949999988079071044921875);
    float _1999 = _1998 * _1998;
    float _2000 = cbLight._m0[_1849].x + _740;
    float _2001 = cbLight._m0[_1849].y + _741;
    float _2002 = cbLight._m0[_1849].z + _742;
    float _2006 = inversesqrt(dot(vec3(_2000, _2001, _2002), vec3(_2000, _2001, _2002)));
    float _2007 = _2006 * _2000;
    float _2008 = _2006 * _2001;
    float _2009 = _2006 * _2002;
    float _2010 = dot(vec3(_660, _661, _662), vec3(cbLight._m0[_1849].xyz));
    float _4104 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
    float _2013 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
    float _4115 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _2014 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
    float _2015 = dot(vec3(_660, _661, _662), vec3(_2007, _2008, _2009));
    float _4126 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
    float _2018 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
    float _2019 = dot(vec3(cbLight._m0[_1849].xyz), vec3(_2007, _2008, _2009));
    float _4137 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
    float _2023 = _1999 * _1999;
    float _2027 = ((_2018 * _2018) * (_2023 + (-1.0))) + 1.0;
    float _2038 = (exp2(log2(1.0 - (isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2039 = 1.0 - _1999;
    float _2050 = (0.5 / (((_2014 * ((_2013 * _2039) + _1999)) + 9.9999999392252902907785028219223e-09) + (((_2014 * _2039) + _1999) * _2013))) * _2013;
    float _4148 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _2052 = (isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (_2023 / ((_2027 * _2027) * 3.141590118408203125));
    uint _2063 = _1849 + 9u;
    float _2074 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1886].w)) * _663) * 0.949999988079071044921875);
    float _2075 = _2074 * _2074;
    float _2076 = cbLight._m0[_1886].x + _740;
    float _2077 = cbLight._m0[_1886].y + _741;
    float _2078 = cbLight._m0[_1886].z + _742;
    float _2082 = inversesqrt(dot(vec3(_2076, _2077, _2078), vec3(_2076, _2077, _2078)));
    float _2083 = _2082 * _2076;
    float _2084 = _2082 * _2077;
    float _2085 = _2082 * _2078;
    float _2086 = dot(vec3(_660, _661, _662), vec3(cbLight._m0[_1886].xyz));
    float _4159 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
    float _2089 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
    float _2090 = dot(vec3(_660, _661, _662), vec3(_2083, _2084, _2085));
    float _4170 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
    float _2093 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
    float _2094 = dot(vec3(cbLight._m0[_1886].xyz), vec3(_2083, _2084, _2085));
    float _4181 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
    float _2098 = _2075 * _2075;
    float _2102 = ((_2093 * _2093) * (_2098 + (-1.0))) + 1.0;
    float _2111 = (exp2(log2(1.0 - (isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2112 = 1.0 - _2075;
    float _2122 = (0.5 / (((_2014 * ((_2089 * _2112) + _2075)) + 9.9999999392252902907785028219223e-09) + (((_2014 * _2112) + _2075) * _2089))) * _2089;
    float _4192 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
    float _2124 = (isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * (_2098 / ((_2102 * _2102) * 3.141590118408203125));
    float _2134 = (((_2111 * cbLight._m0[_2063].x) * _2124) * _1872) + (((_2038 * cbLight._m0[_1985].x) * _2052) * _1882);
    float _2135 = (((_2111 * cbLight._m0[_2063].y) * _2124) * _1872) + (((_2038 * cbLight._m0[_1985].y) * _2052) * _1882);
    float _2136 = (((_2111 * cbLight._m0[_2063].z) * _2124) * _1872) + (((_2038 * cbLight._m0[_1985].z) * _2052) * _1882);
    float _2198;
    float _2200;
    float _2202;
    if (_1922)
    {
        _2198 = _2134;
        _2200 = _2135;
        _2202 = _2136;
    }
    else
    {
        uint _2204 = _1849 + 2u;
        uint _2208 = _1849 + 10u;
        float _2222 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2204].w)) * _663) * 0.949999988079071044921875);
        float _2223 = _2222 * _2222;
        float _2224 = cbLight._m0[_2204].x + _740;
        float _2225 = cbLight._m0[_2204].y + _741;
        float _2226 = cbLight._m0[_2204].z + _742;
        float _2230 = inversesqrt(dot(vec3(_2224, _2225, _2226), vec3(_2224, _2225, _2226)));
        float _2231 = _2230 * _2224;
        float _2232 = _2230 * _2225;
        float _2233 = _2230 * _2226;
        float _2234 = dot(vec3(_660, _661, _662), vec3(cbLight._m0[_2204].xyz));
        float _4203 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
        float _2237 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _2238 = dot(vec3(_660, _661, _662), vec3(_2231, _2232, _2233));
        float _4214 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
        float _2241 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _2242 = dot(vec3(cbLight._m0[_2204].xyz), vec3(_2231, _2232, _2233));
        float _4225 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
        float _2246 = _2223 * _2223;
        float _2250 = ((_2241 * _2241) * (_2246 + (-1.0))) + 1.0;
        float _2259 = (exp2(log2(1.0 - (isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2260 = 1.0 - _2223;
        float _2270 = (0.5 / (((_2014 * ((_2237 * _2260) + _2223)) + 9.9999999392252902907785028219223e-09) + (((_2014 * _2260) + _2223) * _2237))) * _2237;
        float _4236 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
        float _2272 = (isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0))) * (_2246 / ((_2250 * _2250) * 3.141590118408203125));
        float _2273 = isnan(1.0) ? _1864 : (isnan(_1864) ? 1.0 : min(_1864, 1.0));
        _2198 = (((_2259 * cbLight._m0[_2208].x) * _2272) * _2273) + _2134;
        _2200 = (((_2259 * cbLight._m0[_2208].y) * _2272) * _2273) + _2135;
        _2202 = (((_2259 * cbLight._m0[_2208].z) * _2272) * _2273) + _2136;
    }
    float _2308;
    float _2310;
    float _2312;
    if (_1940)
    {
        _2308 = _2198;
        _2310 = _2200;
        _2312 = _2202;
    }
    else
    {
        uint _2319 = _1849 + 3u;
        uint _2323 = _1849 + 11u;
        float _2337 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2319].w)) * _663) * 0.949999988079071044921875);
        float _2338 = _2337 * _2337;
        float _2339 = cbLight._m0[_2319].x + _740;
        float _2340 = cbLight._m0[_2319].y + _741;
        float _2341 = cbLight._m0[_2319].z + _742;
        float _2345 = inversesqrt(dot(vec3(_2339, _2340, _2341), vec3(_2339, _2340, _2341)));
        float _2346 = _2345 * _2339;
        float _2347 = _2345 * _2340;
        float _2348 = _2345 * _2341;
        float _2349 = dot(vec3(_660, _661, _662), vec3(cbLight._m0[_2319].xyz));
        float _4252 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
        float _2352 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
        float _2353 = dot(vec3(_660, _661, _662), vec3(_2346, _2347, _2348));
        float _4263 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
        float _2356 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _2357 = dot(vec3(cbLight._m0[_2319].xyz), vec3(_2346, _2347, _2348));
        float _4274 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
        float _2361 = _2338 * _2338;
        float _2365 = ((_2356 * _2356) * (_2361 + (-1.0))) + 1.0;
        float _2374 = (exp2(log2(1.0 - (isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2375 = 1.0 - _2338;
        float _2385 = (0.5 / (((_2014 * ((_2352 * _2375) + _2338)) + 9.9999999392252902907785028219223e-09) + (((_2014 * _2375) + _2338) * _2352))) * _2352;
        float _4285 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
        float _2387 = (isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))) * (_2361 / ((_2365 * _2365) * 3.141590118408203125));
        float _2388 = isnan(1.0) ? _1865 : (isnan(_1865) ? 1.0 : min(_1865, 1.0));
        _2308 = (((_2374 * cbLight._m0[_2323].x) * _2387) * _2388) + _2198;
        _2310 = (((_2374 * cbLight._m0[_2323].y) * _2387) * _2388) + _2200;
        _2312 = (((_2374 * cbLight._m0[_2323].z) * _2387) * _2388) + _2202;
    }
    float _2523;
    float _2525;
    float _2527;
    float _2529;
    float _2531;
    float _2533;
    if (_1847.y == 0u)
    {
        float _2463 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2464 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2463;
        float _2465 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2463;
        float _2466 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2463;
        uvec4 _2478 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2479 = _2478.x;
        uint _2490 = uint((float(_2478.y) * floor(float(uint(cbSceneParam._m0[85u].y * _749) / _2479))) + floor(float(uint(cbSceneParam._m0[85u].x * _748) / _2479)));
        float _2500 = (log2(_2466 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2501 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
        uint _2504 = uint(isnan(14.0) ? _2501 : (isnan(_2501) ? 14.0 : min(_2501, 14.0)));
        uvec4 _2509 = texelFetch(g_lightClusterGridBuffer, int(((_2504 << 2u) + (_2490 << 6u)) >> 2u));
        uint _2510 = _2509.x;
        uint _2511 = _2478.z;
        float _2640;
        float _2642;
        float _2644;
        float _2646;
        float _2648;
        float _2650;
        if (((((1u << ((_2511 >> 4u) & 15u)) + 4294967295u) & _2510) == 0u) || ((_2511 & 240u) == 0u))
        {
            _2640 = 0.0;
            _2642 = 0.0;
            _2644 = 0.0;
            _2646 = 0.0;
            _2648 = 0.0;
            _2650 = 0.0;
        }
        else
        {
            float _2641;
            float _2643;
            float _2645;
            float _2647;
            float _2649;
            float _2651;
            float _2793 = 0.0;
            float _2794 = 0.0;
            float _2795 = 0.0;
            float _2796 = 0.0;
            float _2797 = 0.0;
            float _2798 = 0.0;
            uint _2799 = 0u;
            uint _2808;
            bool _2809;
            for (;;)
            {
                _2808 = texelFetch(g_lightClassification, int((((_2504 << 5u) + (_2490 << 9u)) + (_2799 << 2u)) >> 2u)).x;
                _2809 = _2808 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2809)
                {
                    frontier_phi_61_pred = _2793;
                    frontier_phi_61_pred_1 = _2798;
                    frontier_phi_61_pred_2 = _2797;
                    frontier_phi_61_pred_3 = _2796;
                    frontier_phi_61_pred_4 = _2795;
                    frontier_phi_61_pred_5 = _2794;
                }
                else
                {
                    float _2917;
                    float _2918;
                    float _2919;
                    float _2920;
                    float _2921;
                    float _2922;
                    uint _2923;
                    _2917 = _2793;
                    _2918 = _2794;
                    _2919 = _2795;
                    _2920 = _2796;
                    _2921 = _2797;
                    _2922 = _2798;
                    _2923 = _2808;
                    float _2849;
                    float _2850;
                    float _2851;
                    float _2852;
                    float _2853;
                    float _2854;
                    for (;;)
                    {
                        uint _2927 = uint(findLSB(_2923)) + (_2799 << 5u);
                        uint _2924 = (_2923 + 4294967295u) & _2923;
                        uint _2929 = _2927 * 48u;
                        vec4 _2943 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2929)).x, texelFetch(g_PointLightRenderingBuffer, int(_2929 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2929 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2929 + 3u)).x));
                        uint _2949 = (_2927 * 48u) + 4u;
                        vec4 _2962 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2949)).x, texelFetch(g_PointLightRenderingBuffer, int(_2949 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2949 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2949 + 3u)).x));
                        uint _2968 = (_2927 * 48u) + 8u;
                        vec3 _2979 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2968)).x, texelFetch(g_PointLightRenderingBuffer, int(_2968 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2968 + 2u)).x));
                        float _2983 = _2943.x - _2464;
                        float _2984 = _2943.y - _2465;
                        float _2985 = _2943.z - _2466;
                        float _2986 = dot(vec3(_2983, _2984, _2985), vec3(_2983, _2984, _2985));
                        float _2989 = inversesqrt(_2986);
                        float _2990 = _2989 * _2983;
                        float _2991 = _2989 * _2984;
                        float _2992 = _2989 * _2985;
                        float _2993 = dot(vec3(_769, _772, _775), vec3(_2990, _2991, _2992));
                        float _2998 = 1.0 - (_2986 * _2943.w);
                        float _4311 = isnan(0.0) ? _2998 : (isnan(_2998) ? 0.0 : max(_2998, 0.0));
                        float _2999 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
                        float _3000 = sqrt(_2986) * _2962.w;
                        float _3003 = 1.39999997615814208984375 / (_3000 + 1.39999997615814208984375);
                        float _3004 = _3003 * _3003;
                        float _3007 = ((1.0 - _3004) * _2993) + _3004;
                        float _3010 = _3000 * _3000;
                        float _3014 = ((isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0))) * _2999) / ((_3010 * 0.699999988079071044921875) + 1.0);
                        float _3018 = (-0.0) - _2464;
                        float _3019 = (-0.0) - _2465;
                        float _3020 = (-0.0) - _2466;
                        float _3024 = inversesqrt(dot(vec3(_3018, _3019, _3020), vec3(_3018, _3019, _3020)));
                        float _3025 = _3024 * _3018;
                        float _3026 = _3024 * _3019;
                        float _3027 = _3024 * _3020;
                        float _3035 = exp2(log2(1.0 / ((_3010 * 3.5) + 5.0)) * 0.25);
                        float _3036 = 1.0 - _829;
                        float _3043 = sqrt(1.0 - ((1.0 - (_3036 * _3036)) * (1.0 - (_3035 * _3035))));
                        float _3044 = _3043 * _3043;
                        float _3045 = _3044 * _3044;
                        float _3046 = _3025 + _2990;
                        float _3047 = _3026 + _2991;
                        float _3048 = _3027 + _2992;
                        float _3052 = inversesqrt(dot(vec3(_3046, _3047, _3048), vec3(_3046, _3047, _3048)));
                        float _3056 = dot(vec3(_769, _772, _775), vec3(_3025, _3026, _3027));
                        float _4327 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0));
                        float _3059 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
                        float _3060 = dot(vec3(_769, _772, _775), vec3(_3052 * _3046, _3052 * _3047, _3052 * _3048));
                        float _4338 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0));
                        float _3063 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
                        float _3067 = ((_3063 * _3063) * (_3045 + (-1.0))) + 1.0;
                        float _3068 = _3003 * _3044;
                        float _3069 = _3068 * _3068;
                        float _3072 = ((1.0 - _3069) * _2993) + _3069;
                        float _4349 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
                        float _3073 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
                        float _3074 = 1.0 - _3044;
                        float _3084 = (0.5 / (((_3073 * ((_3059 * _3074) + _3044)) + 9.9999999392252902907785028219223e-09) + (((_3073 * _3074) + _3044) * _3059))) * _3073;
                        float _4360 = isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : max(_3084, 0.0));
                        float _3095 = (((_3045 * 3.1415927410125732421875) * (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0)))) / ((_3067 * _3067) * ((_3010 * 2.1991131305694580078125) + 3.141590118408203125))) * _2999;
                        _2852 = (_3014 * _2962.x) + _2920;
                        _2853 = (_3014 * _2962.y) + _2921;
                        _2854 = (_3014 * _2962.z) + _2922;
                        _2849 = (_3095 * _2979.x) + _2917;
                        _2850 = (_3095 * _2979.y) + _2918;
                        _2851 = (_3095 * _2979.z) + _2919;
                        if (_2924 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2917 = _2849;
                            _2918 = _2850;
                            _2919 = _2851;
                            _2920 = _2852;
                            _2921 = _2853;
                            _2922 = _2854;
                            _2923 = _2924;
                        }
                    }
                    frontier_phi_61_pred = _2849;
                    frontier_phi_61_pred_1 = _2854;
                    frontier_phi_61_pred_2 = _2853;
                    frontier_phi_61_pred_3 = _2852;
                    frontier_phi_61_pred_4 = _2851;
                    frontier_phi_61_pred_5 = _2850;
                }
                _2641 = frontier_phi_61_pred;
                _2651 = frontier_phi_61_pred_1;
                _2649 = frontier_phi_61_pred_2;
                _2647 = frontier_phi_61_pred_3;
                _2645 = frontier_phi_61_pred_4;
                _2643 = frontier_phi_61_pred_5;
                uint _2800 = _2799 + 1u;
                if (_2800 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2793 = _2641;
                    _2794 = _2643;
                    _2795 = _2645;
                    _2796 = _2647;
                    _2797 = _2649;
                    _2798 = _2651;
                    _2799 = _2800;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2640 = _2641;
            _2642 = _2643;
            _2644 = _2645;
            _2646 = _2647;
            _2648 = _2649;
            _2650 = _2651;
        }
        uvec4 _2654 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2655 = _2654.z;
        uint _2657 = (_2655 >> 8u) & 15u;
        float _2761;
        float _2763;
        float _2765;
        float _2767;
        float _2769;
        float _2771;
        if (((4294967295u << _2657) & _2510) == 0u)
        {
            _2761 = _2640;
            _2763 = _2642;
            _2765 = _2644;
            _2767 = _2646;
            _2769 = _2648;
            _2771 = _2650;
        }
        else
        {
            float _2786 = inversesqrt(dot(vec3(_2464, _2465, _2466), vec3(_2464, _2465, _2466)));
            float _2787 = _2786 * _2464;
            float _2788 = _2786 * _2465;
            float _2789 = _2786 * _2466;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2657 < ((_2655 >> 12u) & 15u))
            {
                float _2762;
                float _2764;
                float _2766;
                float _2768;
                float _2770;
                float _2772;
                float _2900 = _2640;
                float _2901 = _2642;
                float _2902 = _2644;
                float _2903 = _2646;
                float _2904 = _2648;
                float _2905 = _2650;
                uint _2906 = _2657;
                uint _2915;
                bool _2916;
                for (;;)
                {
                    _2915 = texelFetch(g_lightClassification, int((((_2504 << 5u) + (_2490 << 9u)) + (_2906 << 2u)) >> 2u)).x;
                    _2916 = _2915 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2916)
                    {
                        frontier_phi_67_pred = _2903;
                        frontier_phi_67_pred_1 = _2904;
                        frontier_phi_67_pred_2 = _2905;
                        frontier_phi_67_pred_3 = _2902;
                        frontier_phi_67_pred_4 = _2901;
                        frontier_phi_67_pred_5 = _2900;
                    }
                    else
                    {
                        float _3100;
                        float _3101;
                        float _3102;
                        float _3103;
                        float _3104;
                        float _3105;
                        float _3394;
                        float _3395;
                        float _3396;
                        float _3397;
                        float _3398;
                        float _3399;
                        float _3113 = _2900;
                        float _3114 = _2901;
                        float _3115 = _2902;
                        float _3116 = _2903;
                        float _3117 = _2904;
                        float _3118 = _2905;
                        uint _3119 = _2915;
                        uint _3120;
                        vec4 _3145;
                        float _3146;
                        vec4 _3161;
                        vec3 _3173;
                        vec4 _3188;
                        vec4 _3203;
                        float _3250;
                        bool _3251;
                        for (;;)
                        {
                            uint _3130 = ((_2906 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3119));
                            _3120 = (_3119 + 4294967295u) & _3119;
                            uint _3132 = _3130 * 40u;
                            _3145 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3132)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 3u)).x));
                            _3146 = _3145.w;
                            uint _3148 = (_3130 * 40u) + 4u;
                            _3161 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3148)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 3u)).x));
                            uint _3163 = (_3130 * 40u) + 8u;
                            _3173 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3163)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 2u)).x));
                            uint _3175 = (_3130 * 40u) + 16u;
                            _3188 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3175)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3175 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3175 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3175 + 3u)).x));
                            uint _3190 = (_3130 * 40u) + 20u;
                            _3203 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3190)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 3u)).x));
                            uint _3206 = (_3130 * 40u) + 24u;
                            vec4 _3219 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3206)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 3u)).x));
                            uint _3225 = (_3130 * 40u) + 28u;
                            vec4 _3238 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3225)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 3u)).x));
                            _3250 = fma(_2466, _3238.z, fma(_2465, _3238.y, _3238.x * _2464)) + _3238.w;
                            _3251 = !((fma(_2466, _3219.z, fma(_2465, _3219.y, _3219.x * _2464)) + _3219.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3251)
                            {
                                float _3278 = _3145.x - _2464;
                                float _3279 = _3145.y - _2465;
                                float _3280 = _3145.z - _2466;
                                float _3281 = dot(vec3(_3278, _3279, _3280), vec3(_3278, _3279, _3280));
                                float _3284 = inversesqrt(_3281);
                                float _3285 = _3284 * _3278;
                                float _3286 = _3284 * _3279;
                                float _3287 = _3284 * _3280;
                                float _3291 = 1.0 - (_3281 / (_3146 * _3146));
                                float _4371 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0));
                                float _3292 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
                                float _3296 = sqrt(_3281) * _3161.w;
                                float _3298 = 1.39999997615814208984375 / (_3296 + 1.39999997615814208984375);
                                float _3299 = _3298 * _3298;
                                float _3302 = ((1.0 - _3299) * dot(vec3(_3285, _3286, _3287), vec3(_769, _772, _775))) + _3299;
                                float _3305 = _3296 * _3296;
                                float _3309 = (fma(_2466, _3188.z, fma(_2465, _3188.y, _3188.x * _2464)) + _3188.w) / _3250;
                                float _3310 = (fma(_2466, _3203.z, fma(_2465, _3203.y, _3203.x * _2464)) + _3203.w) / _3250;
                                float _3314 = 1.0 - dot(vec2(_3309, _3310), vec2(_3309, _3310));
                                float _4387 = isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0));
                                float _3315 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
                                float _3316 = _3315 * (((isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0))) * _3292) / ((_3305 * 0.699999988079071044921875) + 1.0));
                                float _3328 = exp2(log2(1.0 / ((_3305 * 3.5) + 5.0)) * 0.25);
                                float _3329 = 1.0 - _829;
                                float _3336 = sqrt(1.0 - ((1.0 - (_3329 * _3329)) * (1.0 - (_3328 * _3328))));
                                float _3337 = _3336 * _3336;
                                float _3338 = _3337 * _3337;
                                float _3339 = _3285 - _2787;
                                float _3340 = _3286 - _2788;
                                float _3341 = _3287 - _2789;
                                float _3345 = inversesqrt(dot(vec3(_3339, _3340, _3341), vec3(_3339, _3340, _3341)));
                                float _3349 = dot(vec3(_769, _772, _775), vec3((-0.0) - _2787, (-0.0) - _2788, (-0.0) - _2789));
                                float _4398 = isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0));
                                float _3352 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
                                float _3353 = dot(vec3(_769, _772, _775), vec3(_3345 * _3339, _3345 * _3340, _3345 * _3341));
                                float _4409 = isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0));
                                float _3356 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
                                float _3360 = ((_3356 * _3356) * (_3338 + (-1.0))) + 1.0;
                                float _3361 = _3298 * _3337;
                                float _3362 = _3361 * _3361;
                                float _3368 = ((1.0 - _3362) * dot(vec3(_769, _772, _775), vec3(_3285, _3286, _3287))) + _3362;
                                float _4420 = isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : max(_3368, 0.0));
                                float _3369 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
                                float _3370 = 1.0 - _3337;
                                float _3380 = (0.5 / (((_3369 * ((_3352 * _3370) + _3337)) + 9.9999999392252902907785028219223e-09) + (((_3369 * _3370) + _3337) * _3352))) * _3369;
                                float _4431 = isnan(0.0) ? _3380 : (isnan(_3380) ? 0.0 : max(_3380, 0.0));
                                float _3390 = (_3315 * _3292) * (((_3338 * 3.1415927410125732421875) * (isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0)))) / ((_3360 * _3360) * ((_3305 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3390 * _3173.x;
                                frontier_phi_73_pred_1 = _3390 * _3173.y;
                                frontier_phi_73_pred_2 = _3316 * _3161.z;
                                frontier_phi_73_pred_3 = _3316 * _3161.y;
                                frontier_phi_73_pred_4 = _3316 * _3161.x;
                                frontier_phi_73_pred_5 = _3390 * _3173.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3394 = frontier_phi_73_pred;
                            _3395 = frontier_phi_73_pred_1;
                            _3399 = frontier_phi_73_pred_2;
                            _3398 = frontier_phi_73_pred_3;
                            _3397 = frontier_phi_73_pred_4;
                            _3396 = frontier_phi_73_pred_5;
                            _3103 = _3397 + _3116;
                            _3104 = _3398 + _3117;
                            _3105 = _3399 + _3118;
                            _3100 = _3394 + _3113;
                            _3101 = _3395 + _3114;
                            _3102 = _3396 + _3115;
                            if (_3120 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3113 = _3100;
                                _3114 = _3101;
                                _3115 = _3102;
                                _3116 = _3103;
                                _3117 = _3104;
                                _3118 = _3105;
                                _3119 = _3120;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3103;
                        frontier_phi_67_pred_1 = _3104;
                        frontier_phi_67_pred_2 = _3105;
                        frontier_phi_67_pred_3 = _3102;
                        frontier_phi_67_pred_4 = _3101;
                        frontier_phi_67_pred_5 = _3100;
                    }
                    _2768 = frontier_phi_67_pred;
                    _2770 = frontier_phi_67_pred_1;
                    _2772 = frontier_phi_67_pred_2;
                    _2766 = frontier_phi_67_pred_3;
                    _2764 = frontier_phi_67_pred_4;
                    _2762 = frontier_phi_67_pred_5;
                    uint _2907 = _2906 + 1u;
                    if (_2907 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2900 = _2762;
                        _2901 = _2764;
                        _2902 = _2766;
                        _2903 = _2768;
                        _2904 = _2770;
                        _2905 = _2772;
                        _2906 = _2907;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2770;
                frontier_phi_55_56_ladder_1 = _2772;
                frontier_phi_55_56_ladder_2 = _2768;
                frontier_phi_55_56_ladder_3 = _2766;
                frontier_phi_55_56_ladder_4 = _2764;
                frontier_phi_55_56_ladder_5 = _2762;
            }
            else
            {
                frontier_phi_55_56_ladder = _2648;
                frontier_phi_55_56_ladder_1 = _2650;
                frontier_phi_55_56_ladder_2 = _2646;
                frontier_phi_55_56_ladder_3 = _2644;
                frontier_phi_55_56_ladder_4 = _2642;
                frontier_phi_55_56_ladder_5 = _2640;
            }
            _2761 = frontier_phi_55_56_ladder_5;
            _2763 = frontier_phi_55_56_ladder_4;
            _2765 = frontier_phi_55_56_ladder_3;
            _2767 = frontier_phi_55_56_ladder_2;
            _2769 = frontier_phi_55_56_ladder;
            _2771 = frontier_phi_55_56_ladder_1;
        }
        float _2776 = isnan(1.0) ? _813 : (isnan(_813) ? 1.0 : min(_813, 1.0));
        _2523 = (_2776 * _2767) + _1978;
        _2525 = (_2776 * _2769) + _1980;
        _2527 = (_2776 * _2771) + _1982;
        _2529 = ((_2761 * 0.039999999105930328369140625) * _2776) + _2308;
        _2531 = ((_2763 * 0.039999999105930328369140625) * _2776) + _2310;
        _2533 = ((_2765 * 0.039999999105930328369140625) * _2776) + _2312;
    }
    else
    {
        _2523 = _1978;
        _2525 = _1980;
        _2527 = _1982;
        _2529 = _2308;
        _2531 = _2310;
        _2533 = _2312;
    }
    uint _2539 = _789 + uint(cbMatDynParam._m0[0u].w);
    float _2545 = ((((((_570.x - _567) * _503) + _567) * cbMtdParam._m0[13u].x) + ((((_524.x - _521) * _503) + _521) * cbMtdParam._m0[11u].x)) * _356) * cbInstanceData._m0[_2539].x;
    float _2546 = ((((((_570.y - _568) * _503) + _568) * cbMtdParam._m0[13u].y) + ((((_524.y - _522) * _503) + _522) * cbMtdParam._m0[11u].y)) * _356) * cbInstanceData._m0[_2539].y;
    float _2547 = ((((((_570.z - _569) * _503) + _569) * cbMtdParam._m0[13u].z) + ((((_524.z - _523) * _503) + _523) * cbMtdParam._m0[11u].z)) * _356) * cbInstanceData._m0[_2539].z;
    float _4447 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _4458 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _4469 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _2564 = (((isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0))) * (_2523 + ((isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0))) * _813))) + ((_2529 + ((isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0))) * _1619)) * cbPerFrame._m0[3u].x)) + _2545;
    float _2566 = (_2546 + ((_2531 + ((isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0))) * _1619)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0))) * (_2525 + ((isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0))) * _813)));
    float _2568 = (_2547 + ((_2533 + ((isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0))) * _1619)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0))) * (_2527 + ((isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0))) * _813)));
    float _4495 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2581 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
    uint _2582 = _788 + 6u;
    float _2590 = _748 / cbSceneParam._m0[86u].x;
    float _2591 = _749 / cbSceneParam._m0[86u].y;
    vec4 _2605 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2590, _2591, (log2((isnan(cbSceneParam._m0[77u].w) ? _682 : (isnan(_682) ? cbSceneParam._m0[77u].w : min(_682, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2607 = _2605.x;
    float _2608 = _2605.y;
    float _2609 = _2605.z;
    float _2610 = _2605.w;
    float _2702;
    float _2704;
    float _2706;
    float _2708;
    if (_682 > cbSceneParam._m0[78u].w)
    {
        float _2665 = isnan(_682) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _682 : min(cbSceneParam._m0[80u].w, _682));
        float _2666 = _2665 / _682;
        float _2677 = _2666 * _733;
        float _2678 = _734 * _2666;
        float _2679 = (-0.0) - _2678;
        float _2680 = _2666 * _735;
        float _2682 = (cbSceneParam._m0[77u].w * _2679) / _2665;
        float _2683 = _2682 + cbSceneParam._m0[79u].w;
        float _2684 = cbSceneParam._m0[79u].w - _2678;
        float _2690 = sqrt(((_2677 * _2677) + (_2678 * _2678)) + (_2680 * _2680));
        float _2693 = (1.0 - (cbSceneParam._m0[77u].w / _2665)) * _2690;
        float _2698 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2700 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2862;
        if (abs((_2679 - _2682) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2862 = ((((_2683 > 0.0) ? exp2(_2698 * _2683) : (2.0 - exp2(_2700 * _2683))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2693;
        }
        else
        {
            float _2822 = 1.0 / cbSceneParam._m0[80u].x;
            float _2823 = isnan(_2684) ? _2683 : (isnan(_2683) ? _2684 : max(_2683, _2684));
            float _2824 = isnan(_2684) ? _2683 : (isnan(_2683) ? _2684 : min(_2683, _2684));
            float _2833 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : min(_2823, 0.0));
            float _2834 = isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : min(_2824, 0.0));
            _2862 = ((abs(_2690 / _2679) * cbSceneParam._m0[80u].y) * ((((_2833 - _2834) * 2.0) - ((exp2(_2698 * (isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0)))) - exp2(_2698 * (isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0))))) * _2822)) - ((exp2(_2700 * _2833) - exp2(_2700 * _2834)) * _2822))) + (_2693 * cbSceneParam._m0[80u].z);
        }
        vec4 _2864 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2590, _2591, 1.0), 0.0);
        float _2873 = exp2((_2862 * (-1.44269502162933349609375)) * (1.0 - _2864.w));
        float _2874 = log2(_2873);
        float _2890 = log2(_2610);
        _2702 = (exp2(_2890 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2874 * cbSceneParam._m0[78u].x)) * _2864.x) / cbSceneParam._m0[78u].x)) + _2607;
        _2704 = (exp2(_2890 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2874 * cbSceneParam._m0[78u].y)) * _2864.y) / cbSceneParam._m0[78u].y)) + _2608;
        _2706 = (exp2(_2890 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2874 * cbSceneParam._m0[78u].z)) * _2864.z) / cbSceneParam._m0[78u].z)) + _2609;
        _2708 = _2873 * _2610;
    }
    else
    {
        _2702 = _2607;
        _2704 = _2608;
        _2706 = _2609;
        _2708 = _2610;
    }
    float _2720 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2721 = _2720 == 3.0;
    float _2722 = log2(_2708);
    float _2726 = exp2(_2722 * cbSceneParam._m0[78u].x);
    float _2727 = exp2(_2722 * cbSceneParam._m0[78u].y);
    float _2728 = exp2(_2722 * cbSceneParam._m0[78u].z);
    float _2729 = _2726 * (isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0)));
    float _2730 = _2727 * (isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0)));
    float _2731 = _2728 * (isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0)));
    float _2740 = (_2720 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2740 * (_2721 ? _2729 : (_2729 + (cbSceneParam._m0[72u].w * _2702)));
    SV_Target.y = _2740 * (_2721 ? _2730 : (_2730 + (cbSceneParam._m0[72u].w * _2704)));
    SV_Target.z = _2740 * (_2721 ? _2731 : (_2731 + (cbSceneParam._m0[72u].w * _2706)));
    SV_Target.w = cbInstanceData._m0[_2582].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2545) * _2581) * _2726) * _2740;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2546) * _2581) * _2727) * _2740;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2547) * _2581) * _2728) * _2740;
    SV_Target_1.w = cbInstanceData._m0[_2582].w;
}


