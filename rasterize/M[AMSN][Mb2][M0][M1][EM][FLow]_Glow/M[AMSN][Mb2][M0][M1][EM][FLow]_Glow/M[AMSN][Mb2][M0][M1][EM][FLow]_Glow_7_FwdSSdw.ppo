#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1034;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _191 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _192 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _193 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _199 = inversesqrt(dot(vec3(_191, _192, _193), vec3(_191, _192, _193)));
    float _206 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _213 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _235 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _241 = _235.x * cbMtdParam._m0[9u].x;
    float _242 = _235.y * cbMtdParam._m0[9u].y;
    float _243 = _235.z * cbMtdParam._m0[9u].z;
    vec4 _260 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    vec4 _275 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[6u].w));
    float _277 = _275.x;
    vec4 _289 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _293 = _289.z;
    float _297 = (_289.x * 2.0) + (-1.0);
    float _299 = (_289.y * 2.0) + (-1.0);
    float _300 = dot(vec2(_297, _299), vec2(_297, _299));
    float _3426 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    float _306 = sqrt(1.0 - (isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0))));
    float _319 = (cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _320 = (cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _350 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * ((cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * ((cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[10u].w));
    float _355 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[15u].w;
    float _362 = ((_350.y * 0.5) + (-0.25)) * cbMtdParam._m0[15u].z;
    float _364 = (-0.0) - (cbMtdParam._m0[15u].z * ((_350.x * 0.5) + (-0.25)));
    float _366 = fract(_355);
    float _368 = fract(_355 + 0.5);
    float _369 = _366 * _364;
    float _370 = _362 * _366;
    float _373 = _368 * _364;
    float _374 = _362 * _368;
    float _379 = abs((_366 * 2.0) + (-1.0));
    vec4 _395 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_369 + _319) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_370 + _320) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _397 = _395.x;
    float _398 = _395.y;
    float _399 = _395.z;
    vec4 _400 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_373 + _319) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_374 + _320) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _427 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _428 = (cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _441 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_369 + _427) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_370 + _428) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _443 = _441.x;
    float _444 = _441.y;
    float _445 = _441.z;
    vec4 _446 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_373 + _427) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_374 + _428) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _473 = (TEXCOORD_9.x - ((cbMtdParam._m0[16u].y * (1.0 - TEXCOORD_9.x)) * (_260.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[16u].z + 1.0);
    float _3437 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _474 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
    float _480 = fma(_306, _206 * NORMAL.x, fma(_299, _213 * TANGENT.x, (_199 * _191) * _297));
    float _483 = fma(_306, _206 * NORMAL.y, fma(_299, _213 * TANGENT.y, (_199 * _192) * _297));
    float _486 = fma(_306, _206 * NORMAL.z, fma(_299, _213 * TANGENT.z, (_199 * _193) * _297));
    float _490 = inversesqrt(dot(vec3(_480, _483, _486), vec3(_480, _483, _486)));
    float _491 = _490 * _480;
    float _492 = _490 * _483;
    float _493 = _490 * _486;
    float _3448 = isnan(0.0) ? _293 : (isnan(_293) ? 0.0 : max(_293, 0.0));
    float _494 = isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0));
    float _3459 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3470 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _3481 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3492 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _498 = isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0));
    float _514 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _555 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _565 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _555);
    float _566 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _555);
    float _567 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _555);
    float _571 = inversesqrt(dot(vec3(_565, _566, _567), vec3(_565, _566, _567)));
    float _572 = _565 * _571;
    float _573 = _566 * _571;
    float _574 = _567 * _571;
    float _580 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _581 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _601 = fma(_493, cbSceneParam._m0[5u].z, fma(_492, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _491));
    float _604 = fma(_493, cbSceneParam._m0[6u].z, fma(_492, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _491));
    float _607 = fma(_493, cbSceneParam._m0[7u].z, fma(_492, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _491));
    uint _620 = uint(roundEven(NORMAL.w)) * 13u;
    uint _621 = _620 + 9u;
    uint _622 = _621 + uint(cbMatDynParam._m0[0u].w);
    float _628 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0)))) * cbInstanceData._m0[_622].x;
    float _629 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0)))) * cbInstanceData._m0[_622].y;
    float _630 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0)))) * cbInstanceData._m0[_622].z;
    float _3503 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _631 = isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0));
    float _3514 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _632 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
    float _3525 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _633 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
    float _634 = 1.0 - _498;
    float _635 = _631 * _634;
    float _636 = _632 * _634;
    float _637 = _633 * _634;
    float _642 = (_631 + (-0.039999999105930328369140625)) * _498;
    float _643 = (_632 + (-0.039999999105930328369140625)) * _498;
    float _644 = (_633 + (-0.039999999105930328369140625)) * _498;
    float _645 = _642 + 0.039999999105930328369140625;
    float _647 = _643 + 0.039999999105930328369140625;
    float _648 = _644 + 0.039999999105930328369140625;
    vec4 _657 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _580, cbSceneParam._m0[86u].y * _581));
    float _660 = _657.x * TEXCOORD_3.w;
    float _661 = dot(vec3(_491, _492, _493), vec3(_572, _573, _574));
    float _664 = _661 * 2.0;
    float _668 = (_664 * _491) - _572;
    float _669 = (_664 * _492) - _573;
    float _670 = (_664 * _493) - _574;
    float _674 = abs(dot(vec3(_572, _573, _574), vec3(_491, _492, _493)));
    float _3536 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _676 = sqrt(_494);
    float _689 = exp2((_676 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_676 * 3.0));
    float _695 = (1.0 - _689) * ((_676 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _696 = _689 * _676;
    float _724 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _728 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _732 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1033;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _759 = fma(_732, cbModelParam._m0[26u].z, fma(_728, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _724));
        float _763 = fma(_732, cbModelParam._m0[27u].z, fma(_728, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _724));
        float _767 = fma(_732, cbModelParam._m0[28u].z, fma(_728, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _724));
        float _791 = _724 + _491;
        float _792 = _728 + _492;
        float _793 = _732 + _493;
        float _803 = fma(_793, cbModelParam._m0[26u].z, fma(_792, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _791)) - _759;
        float _804 = fma(_793, cbModelParam._m0[27u].z, fma(_792, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _791)) - _763;
        float _805 = fma(_793, cbModelParam._m0[28u].z, fma(_792, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _791)) - _767;
        float _809 = inversesqrt(dot(vec3(_803, _804, _805), vec3(_803, _804, _805)));
        float _822 = ((_809 * _803) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_759 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _823 = ((_809 * _804) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_763 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _824 = ((_809 * _805) / cbModelParam._m0[34u].z) + ((((((_767 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _827 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_822, _823, _824), 0.0);
        vec4 _834 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_822, _823, _824), 0.0);
        vec4 _841 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_822, _823, _824), 0.0);
        vec4 _848 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_822, _823, _824), 0.0);
        float _861 = exp2((_827.w + (-0.5)) * 20.0) * 2.0;
        float _862 = _861 * (_827.x + (-0.5));
        float _863 = _861 * (_827.y + (-0.5));
        float _864 = _861 * (_827.z + (-0.5));
        float _871 = exp2((_834.w + (-0.5)) * 20.0) * 2.0;
        float _872 = _871 * (_834.x + (-0.5));
        float _873 = _871 * (_834.y + (-0.5));
        float _874 = _871 * (_834.z + (-0.5));
        float _881 = exp2((_841.w + (-0.5)) * 20.0) * 2.0;
        float _882 = _881 * (_841.x + (-0.5));
        float _883 = _881 * (_841.y + (-0.5));
        float _884 = _881 * (_841.z + (-0.5));
        float _891 = exp2((_848.w + (-0.5)) * 20.0) * 2.0;
        float _892 = _891 * (_848.x + (-0.5));
        float _893 = _891 * (_848.y + (-0.5));
        float _894 = _891 * (_848.z + (-0.5));
        float _895 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _896 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _897 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _898 = _862 * 0.5;
        float _899 = _872 * 0.5;
        float _900 = _882 * 0.5;
        float _901 = dot(vec3(_898, _899, _900), vec3(_898, _899, _900));
        float _906 = (_901 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_901);
        float _915 = (dot(vec3(_491, _492, _493), vec3(_906 * _898, _906 * _899, _906 * _900)) + 1.0) * 0.5;
        float _3562 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _925 = sqrt(((_899 * _899) + (_898 * _898)) + (_900 * _900)) / (_895 + 9.9999997473787516355514526367188e-06);
        float _3573 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _926 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
        float _927 = _926 * 2.0;
        float _931 = (1.0 - _926) / (_926 + 1.0);
        float _3584 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _932 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
        float _941 = ((((1.0 - _932) * (_927 + 2.0)) * exp2(log2(isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0))) * (_927 + 1.0))) + _932) * _895;
        float _942 = _863 * 0.5;
        float _943 = _873 * 0.5;
        float _944 = _883 * 0.5;
        float _945 = dot(vec3(_942, _943, _944), vec3(_942, _943, _944));
        float _950 = (_945 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_945);
        float _958 = (dot(vec3(_491, _492, _493), vec3(_950 * _942, _950 * _943, _950 * _944)) + 1.0) * 0.5;
        float _3595 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _967 = sqrt(((_943 * _943) + (_942 * _942)) + (_944 * _944)) / (_896 + 9.9999997473787516355514526367188e-06);
        float _3606 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _968 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
        float _969 = _968 * 2.0;
        float _973 = (1.0 - _968) / (_968 + 1.0);
        float _3617 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _974 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
        float _983 = ((((1.0 - _974) * (_969 + 2.0)) * exp2(log2(isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0))) * (_969 + 1.0))) + _974) * _896;
        float _984 = _864 * 0.5;
        float _985 = _874 * 0.5;
        float _986 = _884 * 0.5;
        float _987 = dot(vec3(_984, _985, _986), vec3(_984, _985, _986));
        float _992 = (_987 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_987);
        float _1000 = (dot(vec3(_491, _492, _493), vec3(_992 * _984, _992 * _985, _992 * _986)) + 1.0) * 0.5;
        float _3628 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1009 = sqrt(((_985 * _985) + (_984 * _984)) + (_986 * _986)) / (_897 + 9.9999997473787516355514526367188e-06);
        float _3639 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1010 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
        float _1011 = _1010 * 2.0;
        float _1015 = (1.0 - _1010) / (_1010 + 1.0);
        float _3650 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1016 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
        float _1025 = ((((1.0 - _1016) * (_1011 + 2.0)) * exp2(log2(isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0))) * (_1011 + 1.0))) + _1016) * _897;
        _1033 = _864;
        _1035 = _863;
        _1036 = _862;
        _1037 = _874;
        _1038 = _873;
        _1039 = _872;
        _1040 = _884;
        _1041 = _883;
        _1042 = _882;
        _1043 = _897;
        _1044 = _896;
        _1045 = _895;
        _1046 = cbModelParam._m0[36u].z * (isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0)));
        _1047 = cbModelParam._m0[36u].z * (isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0)));
        _1048 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0)));
    }
    else
    {
        _1033 = _1034;
        _1035 = _1034;
        _1036 = _1034;
        _1037 = _1034;
        _1038 = _1034;
        _1039 = _1034;
        _1040 = _1034;
        _1041 = _1034;
        _1042 = _1034;
        _1043 = _1034;
        _1044 = _1034;
        _1045 = _1034;
        _1046 = 0.0;
        _1047 = 0.0;
        _1048 = 0.0;
    }
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1074 = fma(_732, cbModelParam._m0[30u].z, fma(_728, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _724));
        float _1078 = fma(_732, cbModelParam._m0[31u].z, fma(_728, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _724));
        float _1082 = fma(_732, cbModelParam._m0[32u].z, fma(_728, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _724));
        float _1105 = _724 + _491;
        float _1106 = _728 + _492;
        float _1107 = _732 + _493;
        float _1117 = fma(_1107, cbModelParam._m0[30u].z, fma(_1106, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1105)) - _1074;
        float _1118 = fma(_1107, cbModelParam._m0[31u].z, fma(_1106, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1105)) - _1078;
        float _1119 = fma(_1107, cbModelParam._m0[32u].z, fma(_1106, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1105)) - _1082;
        float _1123 = inversesqrt(dot(vec3(_1117, _1118, _1119), vec3(_1117, _1118, _1119)));
        float _1136 = ((_1123 * _1117) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1074 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1137 = ((_1123 * _1118) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1078 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1138 = ((_1123 * _1119) / cbModelParam._m0[35u].z) + ((((((_1082 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1140 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1136, _1137, _1138), 0.0);
        vec4 _1147 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1136, _1137, _1138), 0.0);
        vec4 _1154 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1136, _1137, _1138), 0.0);
        vec4 _1161 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1136, _1137, _1138), 0.0);
        float _1173 = exp2((_1140.w + (-0.5)) * 20.0) * 2.0;
        float _1174 = _1173 * (_1140.x + (-0.5));
        float _1175 = _1173 * (_1140.y + (-0.5));
        float _1176 = _1173 * (_1140.z + (-0.5));
        float _1183 = exp2((_1147.w + (-0.5)) * 20.0) * 2.0;
        float _1184 = _1183 * (_1147.x + (-0.5));
        float _1185 = _1183 * (_1147.y + (-0.5));
        float _1186 = _1183 * (_1147.z + (-0.5));
        float _1193 = exp2((_1154.w + (-0.5)) * 20.0) * 2.0;
        float _1194 = _1193 * (_1154.x + (-0.5));
        float _1195 = _1193 * (_1154.y + (-0.5));
        float _1196 = _1193 * (_1154.z + (-0.5));
        float _1203 = exp2((_1161.w + (-0.5)) * 20.0) * 2.0;
        float _1204 = _1203 * (_1161.x + (-0.5));
        float _1205 = _1203 * (_1161.y + (-0.5));
        float _1206 = _1203 * (_1161.z + (-0.5));
        float _1207 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1208 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1209 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1210 = _1174 * 0.5;
        float _1211 = _1184 * 0.5;
        float _1212 = _1194 * 0.5;
        float _1213 = dot(vec3(_1210, _1211, _1212), vec3(_1210, _1211, _1212));
        float _1218 = (_1213 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1213);
        float _1226 = (dot(vec3(_491, _492, _493), vec3(_1218 * _1210, _1218 * _1211, _1218 * _1212)) + 1.0) * 0.5;
        float _3691 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1235 = sqrt(((_1211 * _1211) + (_1210 * _1210)) + (_1212 * _1212)) / (_1207 + 9.9999997473787516355514526367188e-06);
        float _3702 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
        float _1237 = _1236 * 2.0;
        float _1241 = (1.0 - _1236) / (_1236 + 1.0);
        float _3713 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
        float _1251 = ((((1.0 - _1242) * (_1237 + 2.0)) * exp2(log2(isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0))) * (_1237 + 1.0))) + _1242) * _1207;
        float _1252 = _1175 * 0.5;
        float _1253 = _1185 * 0.5;
        float _1254 = _1195 * 0.5;
        float _1255 = dot(vec3(_1252, _1253, _1254), vec3(_1252, _1253, _1254));
        float _1260 = (_1255 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1255);
        float _1268 = (dot(vec3(_491, _492, _493), vec3(_1260 * _1252, _1260 * _1253, _1260 * _1254)) + 1.0) * 0.5;
        float _3724 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1277 = sqrt(((_1253 * _1253) + (_1252 * _1252)) + (_1254 * _1254)) / (_1208 + 9.9999997473787516355514526367188e-06);
        float _3735 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _1279 = _1278 * 2.0;
        float _1283 = (1.0 - _1278) / (_1278 + 1.0);
        float _3746 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
        float _1293 = ((((1.0 - _1284) * (_1279 + 2.0)) * exp2(log2(isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0))) * (_1279 + 1.0))) + _1284) * _1208;
        float _1294 = _1176 * 0.5;
        float _1295 = _1186 * 0.5;
        float _1296 = _1196 * 0.5;
        float _1297 = dot(vec3(_1294, _1295, _1296), vec3(_1294, _1295, _1296));
        float _1302 = (_1297 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1297);
        float _1310 = (dot(vec3(_491, _492, _493), vec3(_1302 * _1294, _1302 * _1295, _1302 * _1296)) + 1.0) * 0.5;
        float _3757 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1319 = sqrt(((_1295 * _1295) + (_1294 * _1294)) + (_1296 * _1296)) / (_1209 + 9.9999997473787516355514526367188e-06);
        float _3768 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
        float _1321 = _1320 * 2.0;
        float _1325 = (1.0 - _1320) / (_1320 + 1.0);
        float _3779 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
        float _1335 = ((((1.0 - _1326) * (_1321 + 2.0)) * exp2(log2(isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0))) * (_1321 + 1.0))) + _1326) * _1209;
        _1343 = _1176;
        _1344 = _1175;
        _1345 = _1174;
        _1346 = _1186;
        _1347 = _1185;
        _1348 = _1184;
        _1349 = _1196;
        _1350 = _1195;
        _1351 = _1194;
        _1352 = _1209;
        _1353 = _1208;
        _1354 = _1207;
        _1355 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0)));
        _1356 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0)));
        _1357 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0)));
    }
    else
    {
        _1343 = _1034;
        _1344 = _1034;
        _1345 = _1034;
        _1346 = _1034;
        _1347 = _1034;
        _1348 = _1034;
        _1349 = _1034;
        _1350 = _1034;
        _1351 = _1034;
        _1352 = _1034;
        _1353 = _1034;
        _1354 = _1034;
        _1355 = 0.0;
        _1356 = 0.0;
        _1357 = 0.0;
    }
    float _1367 = (cbModelParam._m0[1u].x * (_1355 - _1046)) + _1046;
    float _1368 = (cbModelParam._m0[1u].x * (_1356 - _1047)) + _1047;
    float _1369 = (cbModelParam._m0[1u].x * (_1357 - _1048)) + _1048;
    float _1390 = fma(_1369, cbSceneParam._m0[89u].z, fma(_1368, cbSceneParam._m0[89u].y, _1367 * cbSceneParam._m0[89u].x));
    float _1393 = fma(_1369, cbSceneParam._m0[90u].z, fma(_1368, cbSceneParam._m0[90u].y, _1367 * cbSceneParam._m0[90u].x));
    float _1396 = fma(_1369, cbSceneParam._m0[91u].z, fma(_1368, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1367));
    float _1411 = _668 * 0.5;
    float _1412 = _669 * 0.5;
    float _1413 = _670 * 0.5;
    float _1414 = dot(vec4(_1411, _1412, _1413, 1.0), vec4(_1345, _1348, _1351, _1354));
    float _1417 = dot(vec4(_1411, _1412, _1413, 1.0), vec4(_1344, _1347, _1350, _1353));
    float _1420 = dot(vec4(_1411, _1412, _1413, 1.0), vec4(_1343, _1346, _1349, _1352));
    float _1454;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1427 = dot(vec4(_1411, _1412, _1413, 1.0), vec4(_1033, _1037, _1040, _1043));
        float _1431 = dot(vec4(_1411, _1412, _1413, 1.0), vec4(_1035, _1038, _1041, _1044));
        float _1435 = dot(vec4(_1411, _1412, _1413, 1.0), vec4(_1036, _1039, _1042, _1045));
        float _1442 = dot(vec4(cbModelParam._m0[39u]), vec4(_1411, _1412, _1413, 1.0));
        _1454 = dot(vec3(isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0)), isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0)), isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1442) ? 0.0 : (isnan(0.0) ? _1442 : max(0.0, _1442))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1454 = 1.0;
    }
    float _1465;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1456 = dot(vec4(cbModelParam._m0[40u]), vec4(_1411, _1412, _1413, 1.0));
        _1465 = dot(vec3(isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0)), isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0)), isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1456) ? 0.0 : (isnan(0.0) ? _1456 : max(0.0, _1456))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1465 = 1.0;
    }
    float _1469 = (_1465 * cbModelParam._m0[1u].x) + (_1454 * (1.0 - cbModelParam._m0[1u].x));
    float _1479 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _494);
    float _1480 = isnan(_1479) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1479 : min(cbModelParam._m0[25u].z, _1479));
    float _1561;
    float _1563;
    float _1565;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1528 = fma(_732, cbModelParam._m0[13u].z, fma(_728, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _724)) + cbModelParam._m0[13u].w;
        float _1532 = fma(_732, cbModelParam._m0[14u].z, fma(_728, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _724)) + cbModelParam._m0[14u].w;
        float _1536 = fma(_732, cbModelParam._m0[15u].z, fma(_728, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _724)) + cbModelParam._m0[15u].w;
        float _1539 = fma(_670, cbModelParam._m0[13u].z, fma(_669, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _668));
        float _1542 = fma(_670, cbModelParam._m0[14u].z, fma(_669, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _668));
        float _1545 = fma(_670, cbModelParam._m0[15u].z, fma(_669, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _668));
        float _1573;
        if (_1539 > 0.0)
        {
            _1573 = abs((1.0 - _1528) / _1539);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1539 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1528 + 1.0) / _1539);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1573 = frontier_phi_14_12_ladder;
        }
        float _1799;
        if (_1542 > 0.0)
        {
            _1799 = abs((1.0 - _1532) / _1542);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1542 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1532 + 1.0) / _1542);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1799 = frontier_phi_23_19_ladder;
        }
        float _2056;
        if (_1545 > 0.0)
        {
            _2056 = abs((1.0 - _1536) / _1545);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1545 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1536 + 1.0) / _1545);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2056 = frontier_phi_35_30_ladder;
        }
        float _2058 = isnan(_1799) ? _1573 : (isnan(_1573) ? _1799 : min(_1573, _1799));
        float _2059 = isnan(_2056) ? _2058 : (isnan(_2058) ? _2056 : min(_2058, _2056));
        float _2063 = (_2059 * _1539) + _1528;
        float _2064 = (_2059 * _1542) + _1532;
        float _2065 = (_2059 * _1545) + _1536;
        float _2066 = _2059 * 9.9999997473787516355514526367188e-05;
        float _2068 = (-1.0) - _2066;
        float _2070 = _2066 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2065 > _2070) || ((_2065 < _2068) || ((_2064 > _2070) || ((_2064 < _2068) || ((_2063 < _2068) || (_2063 > _2070))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2193 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2065, cbModelParam._m0[9u].z, fma(_2064, cbModelParam._m0[9u].y, _2063 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2065, cbModelParam._m0[10u].z, fma(_2064, cbModelParam._m0[10u].y, _2063 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2065, cbModelParam._m0[11u].z, fma(_2064, cbModelParam._m0[11u].y, _2063 * cbModelParam._m0[11u].x))), _1480);
            frontier_phi_13_35_ladder = _2193.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2193.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2193.x * cbModelParam._m0[1u].y;
        }
        _1561 = frontier_phi_13_35_ladder_2;
        _1563 = frontier_phi_13_35_ladder_1;
        _1565 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1549 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_668, _669, _670), _1480);
        _1561 = _1549.x * cbModelParam._m0[1u].y;
        _1563 = _1549.y * cbModelParam._m0[1u].y;
        _1565 = _1549.z * cbModelParam._m0[1u].y;
    }
    float _1569 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _494);
    float _1570 = isnan(_1569) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1569 : min(cbModelParam._m0[25u].w, _1569));
    float _1660;
    float _1662;
    float _1664;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1624 = fma(_732, cbModelParam._m0[21u].z, fma(_728, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _724)) + cbModelParam._m0[21u].w;
        float _1628 = fma(_732, cbModelParam._m0[22u].z, fma(_728, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _724)) + cbModelParam._m0[22u].w;
        float _1632 = fma(_732, cbModelParam._m0[23u].z, fma(_728, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _724)) + cbModelParam._m0[23u].w;
        float _1635 = fma(_670, cbModelParam._m0[21u].z, fma(_669, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _668));
        float _1638 = fma(_670, cbModelParam._m0[22u].z, fma(_669, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _668));
        float _1641 = fma(_670, cbModelParam._m0[23u].z, fma(_669, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _668));
        float _1804;
        if (_1635 > 0.0)
        {
            _1804 = abs((1.0 - _1624) / _1635);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1635 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1624 + 1.0) / _1635);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1804 = frontier_phi_25_21_ladder;
        }
        float _2083;
        if (_1638 > 0.0)
        {
            _2083 = abs((1.0 - _1628) / _1638);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1638 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1628 + 1.0) / _1638);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2083 = frontier_phi_37_32_ladder;
        }
        float _2296;
        if (_1641 > 0.0)
        {
            _2296 = abs((1.0 - _1632) / _1641);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1641 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1632 + 1.0) / _1641);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2296 = frontier_phi_46_43_ladder;
        }
        float _2298 = isnan(_2083) ? _1804 : (isnan(_1804) ? _2083 : min(_1804, _2083));
        float _2299 = isnan(_2296) ? _2298 : (isnan(_2298) ? _2296 : min(_2298, _2296));
        float _2303 = (_2299 * _1635) + _1624;
        float _2304 = (_2299 * _1638) + _1628;
        float _2305 = (_2299 * _1641) + _1632;
        float _2306 = _2299 * 9.9999997473787516355514526367188e-05;
        float _2307 = (-1.0) - _2306;
        float _2309 = _2306 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2305 > _2309) || ((_2305 < _2307) || ((_2304 > _2309) || ((_2304 < _2307) || ((_2303 < _2307) || (_2303 > _2309))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2533 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2305, cbModelParam._m0[17u].z, fma(_2304, cbModelParam._m0[17u].y, _2303 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2305, cbModelParam._m0[18u].z, fma(_2304, cbModelParam._m0[18u].y, _2303 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2305, cbModelParam._m0[19u].z, fma(_2304, cbModelParam._m0[19u].y, _2303 * cbModelParam._m0[19u].x))), _1570);
            frontier_phi_22_46_ladder = _2533.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2533.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2533.x * cbModelParam._m0[1u].z;
        }
        _1660 = frontier_phi_22_46_ladder_2;
        _1662 = frontier_phi_22_46_ladder_1;
        _1664 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1644 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_668, _669, _670), _1570);
        _1660 = _1644.x * cbModelParam._m0[1u].z;
        _1662 = _1644.y * cbModelParam._m0[1u].z;
        _1664 = _1644.z * cbModelParam._m0[1u].z;
    }
    float _1677 = (((_695 * _645) + _696) * _660) * ((cbModelParam._m0[1u].w * (_1660 - _1561)) + _1561);
    float _1679 = (((_695 * _647) + _696) * _660) * ((cbModelParam._m0[1u].w * (_1662 - _1563)) + _1563);
    float _1681 = (((_695 * _648) + _696) * _660) * ((cbModelParam._m0[1u].w * (_1664 - _1565)) + _1565);
    float _1684 = fma(_1681, cbSceneParam._m0[89u].z, fma(_1679, cbSceneParam._m0[89u].y, _1677 * cbSceneParam._m0[89u].x));
    float _1687 = fma(_1681, cbSceneParam._m0[90u].z, fma(_1679, cbSceneParam._m0[90u].y, _1677 * cbSceneParam._m0[90u].x));
    float _1690 = fma(_1681, cbSceneParam._m0[91u].z, fma(_1679, cbSceneParam._m0[91u].y, _1677 * cbSceneParam._m0[91u].x));
    vec4 _1698 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_580, _581));
    float _1700 = _1698.w;
    float _1712 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1700);
    float _1713 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1700);
    float _1714 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1700);
    uvec4 _1718 = floatBitsToUint(cbInstanceData._m0[_620 + 5u]);
    uint _1720 = _1718.x * 14u;
    uint _1721 = _1720 + 13u;
    float _1728 = _660 + (-1.0);
    float _1733 = (cbLight._m0[_1721].x * _1728) + 1.0;
    float _1734 = (cbLight._m0[_1721].y * _1728) + 1.0;
    float _1735 = (cbLight._m0[_1721].z * _1728) + 1.0;
    float _1736 = (cbLight._m0[_1721].w * _1728) + 1.0;
    uint _1737 = _1720 + 5u;
    float _1743 = isnan(1.0) ? _1734 : (isnan(_1734) ? 1.0 : min(_1734, 1.0));
    uint _1747 = _1720 + 4u;
    float _1757 = isnan(1.0) ? _1733 : (isnan(_1733) ? 1.0 : min(_1733, 1.0));
    uint _1761 = _1720 | 1u;
    float _1772 = dot(vec3(cbLight._m0[_1720].xyz), vec3(_491, _492, _493));
    float _1775 = dot(vec3(cbLight._m0[_1761].xyz), vec3(_491, _492, _493));
    float _3915 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
    float _3926 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
    float _1780 = (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) * 0.3183098733425140380859375;
    float _1782 = (isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0))) * 0.3183098733425140380859375;
    float _1789 = ((cbLight._m0[_1737].x * _1743) * _1782) + (((cbLight._m0[_1747].x * _1712) * _1757) * _1780);
    float _1790 = ((_1743 * cbLight._m0[_1737].y) * _1782) + (((cbLight._m0[_1747].y * _1713) * _1757) * _1780);
    float _1791 = ((_1743 * cbLight._m0[_1737].z) * _1782) + (((cbLight._m0[_1747].z * _1714) * _1757) * _1780);
    uvec4 _1796 = floatBitsToUint(cbLight._m0[_1720 + 12u]);
    bool _1798 = _1796.x == 0u;
    float _1809;
    float _1811;
    float _1813;
    if (_1798)
    {
        _1809 = _1789;
        _1811 = _1790;
        _1813 = _1791;
    }
    else
    {
        uint _1817 = _1720 + 6u;
        float _1833 = (dot(vec3(cbLight._m0[_1720 + 2u].xyz), vec3(_491, _492, _493)) * 0.5) + 0.5;
        float _1834 = _1833 * _1833;
        float _3937 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
        float _1835 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1836 = isnan(1.0) ? _1735 : (isnan(_1735) ? 1.0 : min(_1735, 1.0));
        _1809 = (((cbLight._m0[_1817].x * 0.3183098733425140380859375) * _1835) * _1836) + _1789;
        _1811 = (((cbLight._m0[_1817].y * 0.3183098733425140380859375) * _1835) * _1836) + _1790;
        _1813 = (((cbLight._m0[_1817].z * 0.3183098733425140380859375) * _1835) * _1836) + _1791;
    }
    bool _1816 = _1796.y == 0u;
    float _1854;
    float _1856;
    float _1858;
    if (_1816)
    {
        _1854 = _1809;
        _1856 = _1811;
        _1858 = _1813;
    }
    else
    {
        uint _2027 = _1720 + 7u;
        float _2043 = (dot(vec3(cbLight._m0[_1720 + 3u].xyz), vec3(_491, _492, _493)) * 0.5) + 0.5;
        float _2044 = _2043 * _2043;
        float _3953 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
        float _2045 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
        float _2046 = isnan(1.0) ? _1736 : (isnan(_1736) ? 1.0 : min(_1736, 1.0));
        _1854 = (((cbLight._m0[_2027].x * 0.3183098733425140380859375) * _2045) * _2046) + _1809;
        _1856 = (((cbLight._m0[_2027].y * 0.3183098733425140380859375) * _2045) * _2046) + _1811;
        _1858 = (((cbLight._m0[_2027].z * 0.3183098733425140380859375) * _2045) * _2046) + _1813;
    }
    uint _1861 = _1720 + 8u;
    float _1874 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1720].w)) * _494) * 0.949999988079071044921875);
    float _1875 = _1874 * _1874;
    float _1876 = cbLight._m0[_1720].x + _572;
    float _1877 = cbLight._m0[_1720].y + _573;
    float _1878 = cbLight._m0[_1720].z + _574;
    float _1882 = inversesqrt(dot(vec3(_1876, _1877, _1878), vec3(_1876, _1877, _1878)));
    float _1883 = _1882 * _1876;
    float _1884 = _1882 * _1877;
    float _1885 = _1882 * _1878;
    float _1886 = dot(vec3(_491, _492, _493), vec3(cbLight._m0[_1720].xyz));
    float _3969 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
    float _1889 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
    float _3980 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _1890 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
    float _1891 = dot(vec3(_491, _492, _493), vec3(_1883, _1884, _1885));
    float _3991 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
    float _1894 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
    float _1895 = dot(vec3(cbLight._m0[_1720].xyz), vec3(_1883, _1884, _1885));
    float _4002 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
    float _1899 = _1875 * _1875;
    float _1903 = ((_1894 * _1894) * (_1899 + (-1.0))) + 1.0;
    float _1911 = exp2(log2(1.0 - (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0)))) * 5.0);
    float _1912 = 0.959999978542327880859375 - _642;
    float _1914 = 0.959999978542327880859375 - _643;
    float _1915 = 0.959999978542327880859375 - _644;
    float _1922 = 1.0 - _1875;
    float _1933 = (0.5 / (((_1890 * ((_1889 * _1922) + _1875)) + 9.9999999392252902907785028219223e-09) + (((_1890 * _1922) + _1875) * _1889))) * _1889;
    float _4013 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
    float _1935 = (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) * (_1899 / ((_1903 * _1903) * 3.141590118408203125));
    uint _1949 = _1720 + 9u;
    float _1960 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1761].w)) * _494) * 0.949999988079071044921875);
    float _1961 = _1960 * _1960;
    float _1962 = cbLight._m0[_1761].x + _572;
    float _1963 = cbLight._m0[_1761].y + _573;
    float _1964 = cbLight._m0[_1761].z + _574;
    float _1968 = inversesqrt(dot(vec3(_1962, _1963, _1964), vec3(_1962, _1963, _1964)));
    float _1969 = _1968 * _1962;
    float _1970 = _1968 * _1963;
    float _1971 = _1968 * _1964;
    float _1972 = dot(vec3(_491, _492, _493), vec3(cbLight._m0[_1761].xyz));
    float _4024 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
    float _1975 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
    float _1976 = dot(vec3(_491, _492, _493), vec3(_1969, _1970, _1971));
    float _4035 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
    float _1979 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
    float _1980 = dot(vec3(cbLight._m0[_1761].xyz), vec3(_1969, _1970, _1971));
    float _4046 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
    float _1984 = _1961 * _1961;
    float _1988 = ((_1979 * _1979) * (_1984 + (-1.0))) + 1.0;
    float _1995 = exp2(log2(1.0 - (isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0)))) * 5.0);
    float _2002 = 1.0 - _1961;
    float _2012 = (0.5 / (((_1890 * ((_1975 * _2002) + _1961)) + 9.9999999392252902907785028219223e-09) + (((_1890 * _2002) + _1961) * _1975))) * _1975;
    float _4057 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
    float _2014 = (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))) * (_1984 / ((_1988 * _1988) * 3.141590118408203125));
    float _2024 = (((((_1995 * _1912) + _645) * cbLight._m0[_1949].x) * _2014) * _1743) + ((((cbLight._m0[_1861].x * _1712) * ((_1911 * _1912) + _645)) * _1935) * _1757);
    float _2025 = (((((_1995 * _1914) + _647) * cbLight._m0[_1949].y) * _2014) * _1743) + ((((cbLight._m0[_1861].y * _1713) * ((_1911 * _1914) + _647)) * _1935) * _1757);
    float _2026 = (((((_1995 * _1915) + _648) * cbLight._m0[_1949].z) * _2014) * _1743) + ((((cbLight._m0[_1861].z * _1714) * ((_1911 * _1915) + _648)) * _1935) * _1757);
    float _2088;
    float _2090;
    float _2092;
    if (_1798)
    {
        _2088 = _2024;
        _2090 = _2025;
        _2092 = _2026;
    }
    else
    {
        uint _2094 = _1720 + 2u;
        uint _2098 = _1720 + 10u;
        float _2112 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2094].w)) * _494) * 0.949999988079071044921875);
        float _2113 = _2112 * _2112;
        float _2114 = cbLight._m0[_2094].x + _572;
        float _2115 = cbLight._m0[_2094].y + _573;
        float _2116 = cbLight._m0[_2094].z + _574;
        float _2120 = inversesqrt(dot(vec3(_2114, _2115, _2116), vec3(_2114, _2115, _2116)));
        float _2121 = _2120 * _2114;
        float _2122 = _2120 * _2115;
        float _2123 = _2120 * _2116;
        float _2124 = dot(vec3(_491, _492, _493), vec3(cbLight._m0[_2094].xyz));
        float _4068 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
        float _2127 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _2128 = dot(vec3(_491, _492, _493), vec3(_2121, _2122, _2123));
        float _4079 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
        float _2131 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
        float _2132 = dot(vec3(cbLight._m0[_2094].xyz), vec3(_2121, _2122, _2123));
        float _4090 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
        float _2136 = _2113 * _2113;
        float _2140 = ((_2131 * _2131) * (_2136 + (-1.0))) + 1.0;
        float _2147 = exp2(log2(1.0 - (isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0)))) * 5.0);
        float _2154 = 1.0 - _2113;
        float _2164 = (0.5 / (((_1890 * ((_2127 * _2154) + _2113)) + 9.9999999392252902907785028219223e-09) + (((_1890 * _2154) + _2113) * _2127))) * _2127;
        float _4101 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
        float _2166 = (isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0))) * (_2136 / ((_2140 * _2140) * 3.141590118408203125));
        float _2167 = isnan(1.0) ? _1735 : (isnan(_1735) ? 1.0 : min(_1735, 1.0));
        _2088 = (((((_2147 * _1912) + _645) * cbLight._m0[_2098].x) * _2166) * _2167) + _2024;
        _2090 = (((((_2147 * _1914) + _647) * cbLight._m0[_2098].y) * _2166) * _2167) + _2025;
        _2092 = (((((_2147 * _1915) + _648) * cbLight._m0[_2098].z) * _2166) * _2167) + _2026;
    }
    float _2202;
    float _2204;
    float _2206;
    if (_1816)
    {
        _2202 = _2088;
        _2204 = _2090;
        _2206 = _2092;
    }
    else
    {
        uint _2213 = _1720 + 3u;
        uint _2217 = _1720 + 11u;
        float _2231 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2213].w)) * _494) * 0.949999988079071044921875);
        float _2232 = _2231 * _2231;
        float _2233 = cbLight._m0[_2213].x + _572;
        float _2234 = cbLight._m0[_2213].y + _573;
        float _2235 = cbLight._m0[_2213].z + _574;
        float _2239 = inversesqrt(dot(vec3(_2233, _2234, _2235), vec3(_2233, _2234, _2235)));
        float _2240 = _2239 * _2233;
        float _2241 = _2239 * _2234;
        float _2242 = _2239 * _2235;
        float _2243 = dot(vec3(_491, _492, _493), vec3(cbLight._m0[_2213].xyz));
        float _4117 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
        float _2246 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _2247 = dot(vec3(_491, _492, _493), vec3(_2240, _2241, _2242));
        float _4128 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
        float _2250 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _2251 = dot(vec3(cbLight._m0[_2213].xyz), vec3(_2240, _2241, _2242));
        float _4139 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
        float _2255 = _2232 * _2232;
        float _2259 = ((_2250 * _2250) * (_2255 + (-1.0))) + 1.0;
        float _2266 = exp2(log2(1.0 - (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0)))) * 5.0);
        float _2273 = 1.0 - _2232;
        float _2283 = (0.5 / (((_1890 * ((_2246 * _2273) + _2232)) + 9.9999999392252902907785028219223e-09) + (((_1890 * _2273) + _2232) * _2246))) * _2246;
        float _4150 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
        float _2285 = (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * (_2255 / ((_2259 * _2259) * 3.141590118408203125));
        float _2286 = isnan(1.0) ? _1736 : (isnan(_1736) ? 1.0 : min(_1736, 1.0));
        _2202 = (((((_2266 * _1912) + _645) * cbLight._m0[_2217].x) * _2285) * _2286) + _2088;
        _2204 = (((((_2266 * _1914) + _647) * cbLight._m0[_2217].y) * _2285) * _2286) + _2090;
        _2206 = (((((_2266 * _1915) + _648) * cbLight._m0[_2217].z) * _2285) * _2286) + _2092;
    }
    float _2421;
    float _2423;
    float _2425;
    float _2427;
    float _2429;
    float _2431;
    if (_1718.y == 0u)
    {
        float _2361 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2362 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2361;
        float _2363 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2361;
        float _2364 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2361;
        uvec4 _2376 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2377 = _2376.x;
        uint _2388 = uint((float(_2376.y) * floor(float(uint(cbSceneParam._m0[85u].y * _581) / _2377))) + floor(float(uint(cbSceneParam._m0[85u].x * _580) / _2377)));
        float _2398 = (log2(_2364 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2399 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
        uint _2402 = uint(isnan(14.0) ? _2399 : (isnan(_2399) ? 14.0 : min(_2399, 14.0)));
        uvec4 _2407 = texelFetch(g_lightClusterGridBuffer, int(((_2402 << 2u) + (_2388 << 6u)) >> 2u));
        uint _2408 = _2407.x;
        uint _2409 = _2376.z;
        float _2538;
        float _2540;
        float _2542;
        float _2544;
        float _2546;
        float _2548;
        if (((((1u << ((_2409 >> 4u) & 15u)) + 4294967295u) & _2408) == 0u) || ((_2409 & 240u) == 0u))
        {
            _2538 = 0.0;
            _2540 = 0.0;
            _2542 = 0.0;
            _2544 = 0.0;
            _2546 = 0.0;
            _2548 = 0.0;
        }
        else
        {
            float _2539;
            float _2541;
            float _2543;
            float _2545;
            float _2547;
            float _2549;
            float _2691 = 0.0;
            float _2692 = 0.0;
            float _2693 = 0.0;
            float _2694 = 0.0;
            float _2695 = 0.0;
            float _2696 = 0.0;
            uint _2697 = 0u;
            uint _2706;
            bool _2707;
            for (;;)
            {
                _2706 = texelFetch(g_lightClassification, int((((_2402 << 5u) + (_2388 << 9u)) + (_2697 << 2u)) >> 2u)).x;
                _2707 = _2706 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2707)
                {
                    frontier_phi_61_pred = _2691;
                    frontier_phi_61_pred_1 = _2696;
                    frontier_phi_61_pred_2 = _2695;
                    frontier_phi_61_pred_3 = _2694;
                    frontier_phi_61_pred_4 = _2693;
                    frontier_phi_61_pred_5 = _2692;
                }
                else
                {
                    float _2815;
                    float _2816;
                    float _2817;
                    float _2818;
                    float _2819;
                    float _2820;
                    uint _2821;
                    _2815 = _2691;
                    _2816 = _2692;
                    _2817 = _2693;
                    _2818 = _2694;
                    _2819 = _2695;
                    _2820 = _2696;
                    _2821 = _2706;
                    float _2747;
                    float _2748;
                    float _2749;
                    float _2750;
                    float _2751;
                    float _2752;
                    for (;;)
                    {
                        uint _2825 = uint(findLSB(_2821)) + (_2697 << 5u);
                        uint _2822 = (_2821 + 4294967295u) & _2821;
                        uint _2827 = _2825 * 48u;
                        vec4 _2841 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2827)).x, texelFetch(g_PointLightRenderingBuffer, int(_2827 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2827 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2827 + 3u)).x));
                        uint _2847 = (_2825 * 48u) + 4u;
                        vec4 _2860 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2847)).x, texelFetch(g_PointLightRenderingBuffer, int(_2847 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2847 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2847 + 3u)).x));
                        uint _2866 = (_2825 * 48u) + 8u;
                        vec3 _2877 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2866)).x, texelFetch(g_PointLightRenderingBuffer, int(_2866 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2866 + 2u)).x));
                        float _2881 = _2841.x - _2362;
                        float _2882 = _2841.y - _2363;
                        float _2883 = _2841.z - _2364;
                        float _2884 = dot(vec3(_2881, _2882, _2883), vec3(_2881, _2882, _2883));
                        float _2887 = inversesqrt(_2884);
                        float _2888 = _2887 * _2881;
                        float _2889 = _2887 * _2882;
                        float _2890 = _2887 * _2883;
                        float _2891 = dot(vec3(_601, _604, _607), vec3(_2888, _2889, _2890));
                        float _2896 = 1.0 - (_2884 * _2841.w);
                        float _4176 = isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0));
                        float _2897 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
                        float _2898 = sqrt(_2884) * _2860.w;
                        float _2901 = 1.39999997615814208984375 / (_2898 + 1.39999997615814208984375);
                        float _2902 = _2901 * _2901;
                        float _2905 = ((1.0 - _2902) * _2891) + _2902;
                        float _2908 = _2898 * _2898;
                        float _2912 = ((isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : max(_2905, 0.0))) * _2897) / ((_2908 * 0.699999988079071044921875) + 1.0);
                        float _2916 = (-0.0) - _2362;
                        float _2917 = (-0.0) - _2363;
                        float _2918 = (-0.0) - _2364;
                        float _2922 = inversesqrt(dot(vec3(_2916, _2917, _2918), vec3(_2916, _2917, _2918)));
                        float _2923 = _2922 * _2916;
                        float _2924 = _2922 * _2917;
                        float _2925 = _2922 * _2918;
                        float _2933 = exp2(log2(1.0 / ((_2908 * 3.5) + 5.0)) * 0.25);
                        float _2934 = 1.0 - _676;
                        float _2941 = sqrt(1.0 - ((1.0 - (_2934 * _2934)) * (1.0 - (_2933 * _2933))));
                        float _2942 = _2941 * _2941;
                        float _2943 = _2942 * _2942;
                        float _2944 = _2923 + _2888;
                        float _2945 = _2924 + _2889;
                        float _2946 = _2925 + _2890;
                        float _2950 = inversesqrt(dot(vec3(_2944, _2945, _2946), vec3(_2944, _2945, _2946)));
                        float _2954 = dot(vec3(_601, _604, _607), vec3(_2923, _2924, _2925));
                        float _4192 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0));
                        float _2957 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
                        float _2958 = dot(vec3(_601, _604, _607), vec3(_2950 * _2944, _2950 * _2945, _2950 * _2946));
                        float _4203 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0));
                        float _2961 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
                        float _2965 = ((_2961 * _2961) * (_2943 + (-1.0))) + 1.0;
                        float _2966 = _2901 * _2942;
                        float _2967 = _2966 * _2966;
                        float _2970 = ((1.0 - _2967) * _2891) + _2967;
                        float _4214 = isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0));
                        float _2971 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
                        float _2972 = 1.0 - _2942;
                        float _2982 = (0.5 / (((_2971 * ((_2957 * _2972) + _2942)) + 9.9999999392252902907785028219223e-09) + (((_2971 * _2972) + _2942) * _2957))) * _2971;
                        float _4225 = isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0));
                        float _2993 = (((_2943 * 3.1415927410125732421875) * (isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0)))) / ((_2965 * _2965) * ((_2908 * 2.1991131305694580078125) + 3.141590118408203125))) * _2897;
                        _2750 = (_2912 * _2860.x) + _2818;
                        _2751 = (_2912 * _2860.y) + _2819;
                        _2752 = (_2912 * _2860.z) + _2820;
                        _2747 = (_2993 * _2877.x) + _2815;
                        _2748 = (_2993 * _2877.y) + _2816;
                        _2749 = (_2993 * _2877.z) + _2817;
                        if (_2822 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2815 = _2747;
                            _2816 = _2748;
                            _2817 = _2749;
                            _2818 = _2750;
                            _2819 = _2751;
                            _2820 = _2752;
                            _2821 = _2822;
                        }
                    }
                    frontier_phi_61_pred = _2747;
                    frontier_phi_61_pred_1 = _2752;
                    frontier_phi_61_pred_2 = _2751;
                    frontier_phi_61_pred_3 = _2750;
                    frontier_phi_61_pred_4 = _2749;
                    frontier_phi_61_pred_5 = _2748;
                }
                _2539 = frontier_phi_61_pred;
                _2549 = frontier_phi_61_pred_1;
                _2547 = frontier_phi_61_pred_2;
                _2545 = frontier_phi_61_pred_3;
                _2543 = frontier_phi_61_pred_4;
                _2541 = frontier_phi_61_pred_5;
                uint _2698 = _2697 + 1u;
                if (_2698 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2691 = _2539;
                    _2692 = _2541;
                    _2693 = _2543;
                    _2694 = _2545;
                    _2695 = _2547;
                    _2696 = _2549;
                    _2697 = _2698;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2538 = _2539;
            _2540 = _2541;
            _2542 = _2543;
            _2544 = _2545;
            _2546 = _2547;
            _2548 = _2549;
        }
        uvec4 _2552 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2553 = _2552.z;
        uint _2555 = (_2553 >> 8u) & 15u;
        float _2659;
        float _2661;
        float _2663;
        float _2665;
        float _2667;
        float _2669;
        if (((4294967295u << _2555) & _2408) == 0u)
        {
            _2659 = _2538;
            _2661 = _2540;
            _2663 = _2542;
            _2665 = _2544;
            _2667 = _2546;
            _2669 = _2548;
        }
        else
        {
            float _2684 = inversesqrt(dot(vec3(_2362, _2363, _2364), vec3(_2362, _2363, _2364)));
            float _2685 = _2684 * _2362;
            float _2686 = _2684 * _2363;
            float _2687 = _2684 * _2364;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2555 < ((_2553 >> 12u) & 15u))
            {
                float _2660;
                float _2662;
                float _2664;
                float _2666;
                float _2668;
                float _2670;
                float _2798 = _2538;
                float _2799 = _2540;
                float _2800 = _2542;
                float _2801 = _2544;
                float _2802 = _2546;
                float _2803 = _2548;
                uint _2804 = _2555;
                uint _2813;
                bool _2814;
                for (;;)
                {
                    _2813 = texelFetch(g_lightClassification, int((((_2402 << 5u) + (_2388 << 9u)) + (_2804 << 2u)) >> 2u)).x;
                    _2814 = _2813 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2814)
                    {
                        frontier_phi_67_pred = _2801;
                        frontier_phi_67_pred_1 = _2802;
                        frontier_phi_67_pred_2 = _2803;
                        frontier_phi_67_pred_3 = _2800;
                        frontier_phi_67_pred_4 = _2799;
                        frontier_phi_67_pred_5 = _2798;
                    }
                    else
                    {
                        float _2998;
                        float _2999;
                        float _3000;
                        float _3001;
                        float _3002;
                        float _3003;
                        float _3292;
                        float _3293;
                        float _3294;
                        float _3295;
                        float _3296;
                        float _3297;
                        float _3011 = _2798;
                        float _3012 = _2799;
                        float _3013 = _2800;
                        float _3014 = _2801;
                        float _3015 = _2802;
                        float _3016 = _2803;
                        uint _3017 = _2813;
                        uint _3018;
                        vec4 _3043;
                        float _3044;
                        vec4 _3059;
                        vec3 _3071;
                        vec4 _3086;
                        vec4 _3101;
                        float _3148;
                        bool _3149;
                        for (;;)
                        {
                            uint _3028 = ((_2804 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3017));
                            _3018 = (_3017 + 4294967295u) & _3017;
                            uint _3030 = _3028 * 40u;
                            _3043 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3030)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 3u)).x));
                            _3044 = _3043.w;
                            uint _3046 = (_3028 * 40u) + 4u;
                            _3059 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3046)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 3u)).x));
                            uint _3061 = (_3028 * 40u) + 8u;
                            _3071 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3061)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 2u)).x));
                            uint _3073 = (_3028 * 40u) + 16u;
                            _3086 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3073)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 3u)).x));
                            uint _3088 = (_3028 * 40u) + 20u;
                            _3101 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3088)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 3u)).x));
                            uint _3104 = (_3028 * 40u) + 24u;
                            vec4 _3117 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3104)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 3u)).x));
                            uint _3123 = (_3028 * 40u) + 28u;
                            vec4 _3136 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3123)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 3u)).x));
                            _3148 = fma(_2364, _3136.z, fma(_2363, _3136.y, _3136.x * _2362)) + _3136.w;
                            _3149 = !((fma(_2364, _3117.z, fma(_2363, _3117.y, _3117.x * _2362)) + _3117.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3149)
                            {
                                float _3176 = _3043.x - _2362;
                                float _3177 = _3043.y - _2363;
                                float _3178 = _3043.z - _2364;
                                float _3179 = dot(vec3(_3176, _3177, _3178), vec3(_3176, _3177, _3178));
                                float _3182 = inversesqrt(_3179);
                                float _3183 = _3182 * _3176;
                                float _3184 = _3182 * _3177;
                                float _3185 = _3182 * _3178;
                                float _3189 = 1.0 - (_3179 / (_3044 * _3044));
                                float _4236 = isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : max(_3189, 0.0));
                                float _3190 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
                                float _3194 = sqrt(_3179) * _3059.w;
                                float _3196 = 1.39999997615814208984375 / (_3194 + 1.39999997615814208984375);
                                float _3197 = _3196 * _3196;
                                float _3200 = ((1.0 - _3197) * dot(vec3(_3183, _3184, _3185), vec3(_601, _604, _607))) + _3197;
                                float _3203 = _3194 * _3194;
                                float _3207 = (fma(_2364, _3086.z, fma(_2363, _3086.y, _3086.x * _2362)) + _3086.w) / _3148;
                                float _3208 = (fma(_2364, _3101.z, fma(_2363, _3101.y, _3101.x * _2362)) + _3101.w) / _3148;
                                float _3212 = 1.0 - dot(vec2(_3207, _3208), vec2(_3207, _3208));
                                float _4252 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0));
                                float _3213 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
                                float _3214 = _3213 * (((isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0))) * _3190) / ((_3203 * 0.699999988079071044921875) + 1.0));
                                float _3226 = exp2(log2(1.0 / ((_3203 * 3.5) + 5.0)) * 0.25);
                                float _3227 = 1.0 - _676;
                                float _3234 = sqrt(1.0 - ((1.0 - (_3227 * _3227)) * (1.0 - (_3226 * _3226))));
                                float _3235 = _3234 * _3234;
                                float _3236 = _3235 * _3235;
                                float _3237 = _3183 - _2685;
                                float _3238 = _3184 - _2686;
                                float _3239 = _3185 - _2687;
                                float _3243 = inversesqrt(dot(vec3(_3237, _3238, _3239), vec3(_3237, _3238, _3239)));
                                float _3247 = dot(vec3(_601, _604, _607), vec3((-0.0) - _2685, (-0.0) - _2686, (-0.0) - _2687));
                                float _4263 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0));
                                float _3250 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
                                float _3251 = dot(vec3(_601, _604, _607), vec3(_3243 * _3237, _3243 * _3238, _3243 * _3239));
                                float _4274 = isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : max(_3251, 0.0));
                                float _3254 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
                                float _3258 = ((_3254 * _3254) * (_3236 + (-1.0))) + 1.0;
                                float _3259 = _3196 * _3235;
                                float _3260 = _3259 * _3259;
                                float _3266 = ((1.0 - _3260) * dot(vec3(_601, _604, _607), vec3(_3183, _3184, _3185))) + _3260;
                                float _4285 = isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0));
                                float _3267 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
                                float _3268 = 1.0 - _3235;
                                float _3278 = (0.5 / (((_3267 * ((_3250 * _3268) + _3235)) + 9.9999999392252902907785028219223e-09) + (((_3267 * _3268) + _3235) * _3250))) * _3267;
                                float _4296 = isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0));
                                float _3288 = (_3213 * _3190) * (((_3236 * 3.1415927410125732421875) * (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0)))) / ((_3258 * _3258) * ((_3203 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3288 * _3071.x;
                                frontier_phi_73_pred_1 = _3288 * _3071.y;
                                frontier_phi_73_pred_2 = _3214 * _3059.z;
                                frontier_phi_73_pred_3 = _3214 * _3059.y;
                                frontier_phi_73_pred_4 = _3214 * _3059.x;
                                frontier_phi_73_pred_5 = _3288 * _3071.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3292 = frontier_phi_73_pred;
                            _3293 = frontier_phi_73_pred_1;
                            _3297 = frontier_phi_73_pred_2;
                            _3296 = frontier_phi_73_pred_3;
                            _3295 = frontier_phi_73_pred_4;
                            _3294 = frontier_phi_73_pred_5;
                            _3001 = _3295 + _3014;
                            _3002 = _3296 + _3015;
                            _3003 = _3297 + _3016;
                            _2998 = _3292 + _3011;
                            _2999 = _3293 + _3012;
                            _3000 = _3294 + _3013;
                            if (_3018 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3011 = _2998;
                                _3012 = _2999;
                                _3013 = _3000;
                                _3014 = _3001;
                                _3015 = _3002;
                                _3016 = _3003;
                                _3017 = _3018;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3001;
                        frontier_phi_67_pred_1 = _3002;
                        frontier_phi_67_pred_2 = _3003;
                        frontier_phi_67_pred_3 = _3000;
                        frontier_phi_67_pred_4 = _2999;
                        frontier_phi_67_pred_5 = _2998;
                    }
                    _2666 = frontier_phi_67_pred;
                    _2668 = frontier_phi_67_pred_1;
                    _2670 = frontier_phi_67_pred_2;
                    _2664 = frontier_phi_67_pred_3;
                    _2662 = frontier_phi_67_pred_4;
                    _2660 = frontier_phi_67_pred_5;
                    uint _2805 = _2804 + 1u;
                    if (_2805 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2798 = _2660;
                        _2799 = _2662;
                        _2800 = _2664;
                        _2801 = _2666;
                        _2802 = _2668;
                        _2803 = _2670;
                        _2804 = _2805;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2668;
                frontier_phi_55_56_ladder_1 = _2670;
                frontier_phi_55_56_ladder_2 = _2666;
                frontier_phi_55_56_ladder_3 = _2664;
                frontier_phi_55_56_ladder_4 = _2662;
                frontier_phi_55_56_ladder_5 = _2660;
            }
            else
            {
                frontier_phi_55_56_ladder = _2546;
                frontier_phi_55_56_ladder_1 = _2548;
                frontier_phi_55_56_ladder_2 = _2544;
                frontier_phi_55_56_ladder_3 = _2542;
                frontier_phi_55_56_ladder_4 = _2540;
                frontier_phi_55_56_ladder_5 = _2538;
            }
            _2659 = frontier_phi_55_56_ladder_5;
            _2661 = frontier_phi_55_56_ladder_4;
            _2663 = frontier_phi_55_56_ladder_3;
            _2665 = frontier_phi_55_56_ladder_2;
            _2667 = frontier_phi_55_56_ladder;
            _2669 = frontier_phi_55_56_ladder_1;
        }
        float _2674 = isnan(1.0) ? _660 : (isnan(_660) ? 1.0 : min(_660, 1.0));
        _2421 = (_2674 * _2665) + _1854;
        _2423 = (_2674 * _2667) + _1856;
        _2425 = (_2674 * _2669) + _1858;
        _2427 = ((_2659 * _645) * _2674) + _2202;
        _2429 = ((_2661 * _647) * _2674) + _2204;
        _2431 = ((_2663 * _648) * _2674) + _2206;
    }
    else
    {
        _2421 = _1854;
        _2423 = _1856;
        _2425 = _1858;
        _2427 = _2202;
        _2429 = _2204;
        _2431 = _2206;
    }
    uint _2437 = _621 + uint(cbMatDynParam._m0[0u].w);
    float _2443 = ((((((_446.x - _443) * _379) + _443) * cbMtdParam._m0[13u].x) + ((((_400.x - _397) * _379) + _397) * cbMtdParam._m0[11u].x)) * _474) * cbInstanceData._m0[_2437].x;
    float _2444 = ((((((_446.y - _444) * _379) + _444) * cbMtdParam._m0[13u].y) + ((((_400.y - _398) * _379) + _398) * cbMtdParam._m0[11u].y)) * _474) * cbInstanceData._m0[_2437].y;
    float _2445 = ((((((_446.z - _445) * _379) + _445) * cbMtdParam._m0[13u].z) + ((((_400.z - _399) * _379) + _399) * cbMtdParam._m0[11u].z)) * _474) * cbInstanceData._m0[_2437].z;
    float _4312 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _4323 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _4334 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _2462 = (((isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0))) * (_2421 + ((isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0))) * _660))) + ((_2427 + ((isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0))) * _1469)) * cbPerFrame._m0[3u].x)) + _2443;
    float _2464 = (_2444 + ((_2429 + ((isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0))) * _1469)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0))) * (_2423 + ((isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0))) * _660)));
    float _2466 = (_2445 + ((_2431 + ((isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0))) * _1469)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * (_2425 + ((isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0))) * _660)));
    float _4360 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2479 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
    uint _2480 = _620 + 6u;
    float _2488 = _580 / cbSceneParam._m0[86u].x;
    float _2489 = _581 / cbSceneParam._m0[86u].y;
    vec4 _2503 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2488, _2489, (log2((isnan(cbSceneParam._m0[77u].w) ? _514 : (isnan(_514) ? cbSceneParam._m0[77u].w : min(_514, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2505 = _2503.x;
    float _2506 = _2503.y;
    float _2507 = _2503.z;
    float _2508 = _2503.w;
    float _2600;
    float _2602;
    float _2604;
    float _2606;
    if (_514 > cbSceneParam._m0[78u].w)
    {
        float _2563 = isnan(_514) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _514 : min(cbSceneParam._m0[80u].w, _514));
        float _2564 = _2563 / _514;
        float _2575 = _2564 * _565;
        float _2576 = _566 * _2564;
        float _2577 = (-0.0) - _2576;
        float _2578 = _2564 * _567;
        float _2580 = (cbSceneParam._m0[77u].w * _2577) / _2563;
        float _2581 = _2580 + cbSceneParam._m0[79u].w;
        float _2582 = cbSceneParam._m0[79u].w - _2576;
        float _2588 = sqrt(((_2575 * _2575) + (_2576 * _2576)) + (_2578 * _2578));
        float _2591 = (1.0 - (cbSceneParam._m0[77u].w / _2563)) * _2588;
        float _2596 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2598 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2760;
        if (abs((_2577 - _2580) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2760 = ((((_2581 > 0.0) ? exp2(_2596 * _2581) : (2.0 - exp2(_2598 * _2581))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2591;
        }
        else
        {
            float _2720 = 1.0 / cbSceneParam._m0[80u].x;
            float _2721 = isnan(_2582) ? _2581 : (isnan(_2581) ? _2582 : max(_2581, _2582));
            float _2722 = isnan(_2582) ? _2581 : (isnan(_2581) ? _2582 : min(_2581, _2582));
            float _2731 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : min(_2721, 0.0));
            float _2732 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : min(_2722, 0.0));
            _2760 = ((abs(_2588 / _2577) * cbSceneParam._m0[80u].y) * ((((_2731 - _2732) * 2.0) - ((exp2(_2596 * (isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0)))) - exp2(_2596 * (isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0))))) * _2720)) - ((exp2(_2598 * _2731) - exp2(_2598 * _2732)) * _2720))) + (_2591 * cbSceneParam._m0[80u].z);
        }
        vec4 _2762 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2488, _2489, 1.0), 0.0);
        float _2771 = exp2((_2760 * (-1.44269502162933349609375)) * (1.0 - _2762.w));
        float _2772 = log2(_2771);
        float _2788 = log2(_2508);
        _2600 = (exp2(_2788 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2772 * cbSceneParam._m0[78u].x)) * _2762.x) / cbSceneParam._m0[78u].x)) + _2505;
        _2602 = (exp2(_2788 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2772 * cbSceneParam._m0[78u].y)) * _2762.y) / cbSceneParam._m0[78u].y)) + _2506;
        _2604 = (exp2(_2788 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2772 * cbSceneParam._m0[78u].z)) * _2762.z) / cbSceneParam._m0[78u].z)) + _2507;
        _2606 = _2771 * _2508;
    }
    else
    {
        _2600 = _2505;
        _2602 = _2506;
        _2604 = _2507;
        _2606 = _2508;
    }
    float _2618 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2619 = _2618 == 3.0;
    float _2620 = log2(_2606);
    float _2624 = exp2(_2620 * cbSceneParam._m0[78u].x);
    float _2625 = exp2(_2620 * cbSceneParam._m0[78u].y);
    float _2626 = exp2(_2620 * cbSceneParam._m0[78u].z);
    float _2627 = _2624 * (isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0)));
    float _2628 = _2625 * (isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0)));
    float _2629 = _2626 * (isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0)));
    float _2638 = (_2618 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2638 * (_2619 ? _2627 : (_2627 + (cbSceneParam._m0[72u].w * _2600)));
    SV_Target.y = _2638 * (_2619 ? _2628 : (_2628 + (cbSceneParam._m0[72u].w * _2602)));
    SV_Target.z = _2638 * (_2619 ? _2629 : (_2629 + (cbSceneParam._m0[72u].w * _2604)));
    SV_Target.w = cbInstanceData._m0[_2480].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2443) * _2479) * _2624) * _2638;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2444) * _2479) * _2625) * _2638;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2445) * _2479) * _2626) * _2638;
    SV_Target_1.w = cbInstanceData._m0[_2480].w;
}


