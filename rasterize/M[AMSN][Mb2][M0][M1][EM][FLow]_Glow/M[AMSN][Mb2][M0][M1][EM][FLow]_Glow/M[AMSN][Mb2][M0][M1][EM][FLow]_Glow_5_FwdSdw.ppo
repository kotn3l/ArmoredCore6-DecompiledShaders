#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1188;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _205 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _206 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _207 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _213 = inversesqrt(dot(vec3(_205, _206, _207), vec3(_205, _206, _207)));
    float _220 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _249 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _255 = _249.x * cbMtdParam._m0[9u].x;
    float _256 = _249.y * cbMtdParam._m0[9u].y;
    float _257 = _249.z * cbMtdParam._m0[9u].z;
    vec4 _295 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[5u].w));
    float _311 = (TEXCOORD_3.x - ((cbMtdParam._m0[14u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[14u].y + 1.0);
    float _3815 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _312 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
    float _319 = (((_295.x * cbMtdParam._m0[10u].x) - _255) * _312) + _255;
    float _320 = (((_295.y * cbMtdParam._m0[10u].y) - _256) * _312) + _256;
    float _321 = (((_295.z * cbMtdParam._m0[10u].z) - _257) * _312) + _257;
    vec4 _338 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _357 = TEXCOORD_9.x - ((cbMtdParam._m0[16u].y * (1.0 - TEXCOORD_9.x)) * (_338.x + 0.00999999977648258209228515625));
    float _359 = _357 * (cbMtdParam._m0[16u].z + 1.0);
    float _3826 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _360 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
    float _368 = ((((cbMtdParam._m0[12u].x - _319) * TEXCOORD_9.x) * cbMtdParam._m0[16u].x) * _360) + _319;
    float _369 = ((((cbMtdParam._m0[12u].y - _320) * TEXCOORD_9.y) * cbMtdParam._m0[16u].x) * _360) + _320;
    float _370 = (((cbMtdParam._m0[16u].x * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _321)) * _360) + _321;
    vec4 _383 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[4u].w));
    float _391 = (_383.x * 2.0) + (-1.0);
    float _393 = (_383.y * 2.0) + (-1.0);
    float _394 = dot(vec2(_391, _393), vec2(_391, _393));
    float _3837 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    vec4 _411 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _415 = _411.z;
    float _418 = (_411.x * 2.0) + (-1.0);
    float _419 = (_411.y * 2.0) + (-1.0);
    float _420 = dot(vec2(_418, _419), vec2(_418, _419));
    float _3848 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _425 = sqrt(1.0 - (isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0))));
    float _428 = (_312 * (_383.z - _415)) + _415;
    float _434 = _357 * (cbMtdParam._m0[16u].y + 1.0);
    float _3859 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _438 = ((cbMtdParam._m0[15u].y - _428) * (isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0)))) + _428;
    float _451 = (cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _452 = (cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _478 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * ((cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * ((cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[10u].w));
    float _483 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[15u].w;
    float _490 = ((_478.y * 0.5) + (-0.25)) * cbMtdParam._m0[15u].z;
    float _492 = (-0.0) - (cbMtdParam._m0[15u].z * ((_478.x * 0.5) + (-0.25)));
    float _494 = fract(_483);
    float _496 = fract(_483 + 0.5);
    float _497 = _494 * _492;
    float _498 = _490 * _494;
    float _501 = _496 * _492;
    float _502 = _490 * _496;
    float _507 = abs((_494 * 2.0) + (-1.0));
    vec4 _523 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_497 + _451) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_498 + _452) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _525 = _523.x;
    float _526 = _523.y;
    float _527 = _523.z;
    vec4 _528 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_501 + _451) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_502 + _452) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _555 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _556 = (cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _569 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_497 + _555) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_498 + _556) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _571 = _569.x;
    float _572 = _569.y;
    float _573 = _569.z;
    vec4 _574 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_501 + _555) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_502 + _556) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _603 = (_312 * (_391 - _418)) + _418;
    float _604 = (_312 * (_393 - _419)) + _419;
    float _605 = (_312 * (sqrt(1.0 - (isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0)))) - _425)) + _425;
    vec4 _624 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[16u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, (((cbMtdParam._m0[17u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w));
    float _630 = (_624.x * 2.0) + (-1.0);
    float _631 = (_624.y * 2.0) + (-1.0);
    float _632 = dot(vec2(_630, _631), vec2(_630, _631));
    float _3870 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _648 = (_360 * (((_603 * cbMtdParam._m0[14u].z) - _603) + _630)) + _603;
    float _649 = (_360 * (((_604 * cbMtdParam._m0[14u].z) - _604) + _631)) + _604;
    float _650 = (_360 * (sqrt(1.0 - (isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0)))) - _605)) + _605;
    float _653 = fma(_650, _220 * NORMAL.x, fma(_649, _227 * TANGENT.x, (_213 * _205) * _648));
    float _656 = fma(_650, _220 * NORMAL.y, fma(_649, _227 * TANGENT.y, (_213 * _206) * _648));
    float _659 = fma(_650, _220 * NORMAL.z, fma(_649, _227 * TANGENT.z, (_213 * _207) * _648));
    float _663 = inversesqrt(dot(vec3(_653, _656, _659), vec3(_653, _656, _659)));
    float _664 = _663 * _653;
    float _665 = _663 * _656;
    float _666 = _663 * _659;
    float _3881 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _667 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
    float _3892 = isnan(0.0) ? _368 : (isnan(_368) ? 0.0 : max(_368, 0.0));
    float _3903 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _3914 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _686 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _727 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _737 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _727);
    float _738 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _727);
    float _739 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _727);
    float _743 = inversesqrt(dot(vec3(_737, _738, _739), vec3(_737, _738, _739)));
    float _744 = _737 * _743;
    float _745 = _738 * _743;
    float _746 = _739 * _743;
    float _752 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _753 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _773 = fma(_666, cbSceneParam._m0[5u].z, fma(_665, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _664));
    float _776 = fma(_666, cbSceneParam._m0[6u].z, fma(_665, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _664));
    float _779 = fma(_666, cbSceneParam._m0[7u].z, fma(_665, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _664));
    uint _792 = uint(roundEven(NORMAL.w)) * 13u;
    uint _793 = _792 + 9u;
    uint _794 = _793 + uint(cbMatDynParam._m0[0u].w);
    float _800 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0)))) * cbInstanceData._m0[_794].x;
    float _801 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0)))) * cbInstanceData._m0[_794].y;
    float _802 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0)))) * cbInstanceData._m0[_794].z;
    float _3925 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _803 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
    float _3936 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _804 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    float _3947 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _805 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
    vec4 _814 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _752, cbSceneParam._m0[86u].y * _753));
    float _817 = _814.x * TEXCOORD_3.w;
    float _818 = dot(vec3(_664, _665, _666), vec3(_744, _745, _746));
    float _821 = _818 * 2.0;
    float _825 = (_821 * _664) - _744;
    float _826 = (_821 * _665) - _745;
    float _827 = (_821 * _666) - _746;
    float _831 = abs(dot(vec3(_744, _745, _746), vec3(_664, _665, _666)));
    float _3958 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _833 = sqrt(_667);
    float _846 = exp2((_833 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_833 * 3.0));
    float _878 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _882 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _886 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1187;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _913 = fma(_886, cbModelParam._m0[26u].z, fma(_882, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _878));
        float _917 = fma(_886, cbModelParam._m0[27u].z, fma(_882, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _878));
        float _921 = fma(_886, cbModelParam._m0[28u].z, fma(_882, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _878));
        float _945 = _878 + _664;
        float _946 = _882 + _665;
        float _947 = _886 + _666;
        float _957 = fma(_947, cbModelParam._m0[26u].z, fma(_946, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _945)) - _913;
        float _958 = fma(_947, cbModelParam._m0[27u].z, fma(_946, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _945)) - _917;
        float _959 = fma(_947, cbModelParam._m0[28u].z, fma(_946, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _945)) - _921;
        float _963 = inversesqrt(dot(vec3(_957, _958, _959), vec3(_957, _958, _959)));
        float _976 = ((_963 * _957) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_913 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _977 = ((_963 * _958) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_917 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _978 = ((_963 * _959) / cbModelParam._m0[34u].z) + ((((((_921 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _981 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_976, _977, _978), 0.0);
        vec4 _988 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_976, _977, _978), 0.0);
        vec4 _995 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_976, _977, _978), 0.0);
        vec4 _1002 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_976, _977, _978), 0.0);
        float _1015 = exp2((_981.w + (-0.5)) * 20.0) * 2.0;
        float _1016 = _1015 * (_981.x + (-0.5));
        float _1017 = _1015 * (_981.y + (-0.5));
        float _1018 = _1015 * (_981.z + (-0.5));
        float _1025 = exp2((_988.w + (-0.5)) * 20.0) * 2.0;
        float _1026 = _1025 * (_988.x + (-0.5));
        float _1027 = _1025 * (_988.y + (-0.5));
        float _1028 = _1025 * (_988.z + (-0.5));
        float _1035 = exp2((_995.w + (-0.5)) * 20.0) * 2.0;
        float _1036 = _1035 * (_995.x + (-0.5));
        float _1037 = _1035 * (_995.y + (-0.5));
        float _1038 = _1035 * (_995.z + (-0.5));
        float _1045 = exp2((_1002.w + (-0.5)) * 20.0) * 2.0;
        float _1046 = _1045 * (_1002.x + (-0.5));
        float _1047 = _1045 * (_1002.y + (-0.5));
        float _1048 = _1045 * (_1002.z + (-0.5));
        float _1049 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1050 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1051 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1052 = _1016 * 0.5;
        float _1053 = _1026 * 0.5;
        float _1054 = _1036 * 0.5;
        float _1055 = dot(vec3(_1052, _1053, _1054), vec3(_1052, _1053, _1054));
        float _1060 = (_1055 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1055);
        float _1069 = (dot(vec3(_664, _665, _666), vec3(_1060 * _1052, _1060 * _1053, _1060 * _1054)) + 1.0) * 0.5;
        float _3984 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1079 = sqrt(((_1053 * _1053) + (_1052 * _1052)) + (_1054 * _1054)) / (_1049 + 9.9999997473787516355514526367188e-06);
        float _3995 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1080 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _1081 = _1080 * 2.0;
        float _1085 = (1.0 - _1080) / (_1080 + 1.0);
        float _4006 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1086 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _1095 = ((((1.0 - _1086) * (_1081 + 2.0)) * exp2(log2(isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0))) * (_1081 + 1.0))) + _1086) * _1049;
        float _1096 = _1017 * 0.5;
        float _1097 = _1027 * 0.5;
        float _1098 = _1037 * 0.5;
        float _1099 = dot(vec3(_1096, _1097, _1098), vec3(_1096, _1097, _1098));
        float _1104 = (_1099 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1099);
        float _1112 = (dot(vec3(_664, _665, _666), vec3(_1104 * _1096, _1104 * _1097, _1104 * _1098)) + 1.0) * 0.5;
        float _4017 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1121 = sqrt(((_1097 * _1097) + (_1096 * _1096)) + (_1098 * _1098)) / (_1050 + 9.9999997473787516355514526367188e-06);
        float _4028 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1122 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _1123 = _1122 * 2.0;
        float _1127 = (1.0 - _1122) / (_1122 + 1.0);
        float _4039 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1128 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _1137 = ((((1.0 - _1128) * (_1123 + 2.0)) * exp2(log2(isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) * (_1123 + 1.0))) + _1128) * _1050;
        float _1138 = _1018 * 0.5;
        float _1139 = _1028 * 0.5;
        float _1140 = _1038 * 0.5;
        float _1141 = dot(vec3(_1138, _1139, _1140), vec3(_1138, _1139, _1140));
        float _1146 = (_1141 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1141);
        float _1154 = (dot(vec3(_664, _665, _666), vec3(_1146 * _1138, _1146 * _1139, _1146 * _1140)) + 1.0) * 0.5;
        float _4050 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1163 = sqrt(((_1139 * _1139) + (_1138 * _1138)) + (_1140 * _1140)) / (_1051 + 9.9999997473787516355514526367188e-06);
        float _4061 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1164 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _1165 = _1164 * 2.0;
        float _1169 = (1.0 - _1164) / (_1164 + 1.0);
        float _4072 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1170 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _1179 = ((((1.0 - _1170) * (_1165 + 2.0)) * exp2(log2(isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0))) * (_1165 + 1.0))) + _1170) * _1051;
        _1187 = _1018;
        _1189 = _1017;
        _1190 = _1016;
        _1191 = _1028;
        _1192 = _1027;
        _1193 = _1026;
        _1194 = _1038;
        _1195 = _1037;
        _1196 = _1036;
        _1197 = _1051;
        _1198 = _1050;
        _1199 = _1049;
        _1200 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0)));
        _1201 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0)));
        _1202 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0)));
    }
    else
    {
        _1187 = _1188;
        _1189 = _1188;
        _1190 = _1188;
        _1191 = _1188;
        _1192 = _1188;
        _1193 = _1188;
        _1194 = _1188;
        _1195 = _1188;
        _1196 = _1188;
        _1197 = _1188;
        _1198 = _1188;
        _1199 = _1188;
        _1200 = 0.0;
        _1201 = 0.0;
        _1202 = 0.0;
    }
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1228 = fma(_886, cbModelParam._m0[30u].z, fma(_882, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _878));
        float _1232 = fma(_886, cbModelParam._m0[31u].z, fma(_882, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _878));
        float _1236 = fma(_886, cbModelParam._m0[32u].z, fma(_882, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _878));
        float _1259 = _878 + _664;
        float _1260 = _882 + _665;
        float _1261 = _886 + _666;
        float _1271 = fma(_1261, cbModelParam._m0[30u].z, fma(_1260, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1259)) - _1228;
        float _1272 = fma(_1261, cbModelParam._m0[31u].z, fma(_1260, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1259)) - _1232;
        float _1273 = fma(_1261, cbModelParam._m0[32u].z, fma(_1260, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1259)) - _1236;
        float _1277 = inversesqrt(dot(vec3(_1271, _1272, _1273), vec3(_1271, _1272, _1273)));
        float _1290 = ((_1277 * _1271) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1228 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1291 = ((_1277 * _1272) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1232 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1292 = ((_1277 * _1273) / cbModelParam._m0[35u].z) + ((((((_1236 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1294 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1290, _1291, _1292), 0.0);
        vec4 _1301 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1290, _1291, _1292), 0.0);
        vec4 _1308 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1290, _1291, _1292), 0.0);
        vec4 _1315 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1290, _1291, _1292), 0.0);
        float _1327 = exp2((_1294.w + (-0.5)) * 20.0) * 2.0;
        float _1328 = _1327 * (_1294.x + (-0.5));
        float _1329 = _1327 * (_1294.y + (-0.5));
        float _1330 = _1327 * (_1294.z + (-0.5));
        float _1337 = exp2((_1301.w + (-0.5)) * 20.0) * 2.0;
        float _1338 = _1337 * (_1301.x + (-0.5));
        float _1339 = _1337 * (_1301.y + (-0.5));
        float _1340 = _1337 * (_1301.z + (-0.5));
        float _1347 = exp2((_1308.w + (-0.5)) * 20.0) * 2.0;
        float _1348 = _1347 * (_1308.x + (-0.5));
        float _1349 = _1347 * (_1308.y + (-0.5));
        float _1350 = _1347 * (_1308.z + (-0.5));
        float _1357 = exp2((_1315.w + (-0.5)) * 20.0) * 2.0;
        float _1358 = _1357 * (_1315.x + (-0.5));
        float _1359 = _1357 * (_1315.y + (-0.5));
        float _1360 = _1357 * (_1315.z + (-0.5));
        float _1361 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1362 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1363 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1364 = _1328 * 0.5;
        float _1365 = _1338 * 0.5;
        float _1366 = _1348 * 0.5;
        float _1367 = dot(vec3(_1364, _1365, _1366), vec3(_1364, _1365, _1366));
        float _1372 = (_1367 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1367);
        float _1380 = (dot(vec3(_664, _665, _666), vec3(_1372 * _1364, _1372 * _1365, _1372 * _1366)) + 1.0) * 0.5;
        float _4113 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1389 = sqrt(((_1365 * _1365) + (_1364 * _1364)) + (_1366 * _1366)) / (_1361 + 9.9999997473787516355514526367188e-06);
        float _4124 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1390 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _1391 = _1390 * 2.0;
        float _1395 = (1.0 - _1390) / (_1390 + 1.0);
        float _4135 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1396 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _1405 = ((((1.0 - _1396) * (_1391 + 2.0)) * exp2(log2(isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))) * (_1391 + 1.0))) + _1396) * _1361;
        float _1406 = _1329 * 0.5;
        float _1407 = _1339 * 0.5;
        float _1408 = _1349 * 0.5;
        float _1409 = dot(vec3(_1406, _1407, _1408), vec3(_1406, _1407, _1408));
        float _1414 = (_1409 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1409);
        float _1422 = (dot(vec3(_664, _665, _666), vec3(_1414 * _1406, _1414 * _1407, _1414 * _1408)) + 1.0) * 0.5;
        float _4146 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1431 = sqrt(((_1407 * _1407) + (_1406 * _1406)) + (_1408 * _1408)) / (_1362 + 9.9999997473787516355514526367188e-06);
        float _4157 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1432 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
        float _1433 = _1432 * 2.0;
        float _1437 = (1.0 - _1432) / (_1432 + 1.0);
        float _4168 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1438 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _1447 = ((((1.0 - _1438) * (_1433 + 2.0)) * exp2(log2(isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * (_1433 + 1.0))) + _1438) * _1362;
        float _1448 = _1330 * 0.5;
        float _1449 = _1340 * 0.5;
        float _1450 = _1350 * 0.5;
        float _1451 = dot(vec3(_1448, _1449, _1450), vec3(_1448, _1449, _1450));
        float _1456 = (_1451 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1451);
        float _1464 = (dot(vec3(_664, _665, _666), vec3(_1456 * _1448, _1456 * _1449, _1456 * _1450)) + 1.0) * 0.5;
        float _4179 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1473 = sqrt(((_1449 * _1449) + (_1448 * _1448)) + (_1450 * _1450)) / (_1363 + 9.9999997473787516355514526367188e-06);
        float _4190 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1474 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
        float _1475 = _1474 * 2.0;
        float _1479 = (1.0 - _1474) / (_1474 + 1.0);
        float _4201 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1480 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _1489 = ((((1.0 - _1480) * (_1475 + 2.0)) * exp2(log2(isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0))) * (_1475 + 1.0))) + _1480) * _1363;
        _1497 = _1330;
        _1498 = _1329;
        _1499 = _1328;
        _1500 = _1340;
        _1501 = _1339;
        _1502 = _1338;
        _1503 = _1350;
        _1504 = _1349;
        _1505 = _1348;
        _1506 = _1363;
        _1507 = _1362;
        _1508 = _1361;
        _1509 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0)));
        _1510 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0)));
        _1511 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0)));
    }
    else
    {
        _1497 = _1188;
        _1498 = _1188;
        _1499 = _1188;
        _1500 = _1188;
        _1501 = _1188;
        _1502 = _1188;
        _1503 = _1188;
        _1504 = _1188;
        _1505 = _1188;
        _1506 = _1188;
        _1507 = _1188;
        _1508 = _1188;
        _1509 = 0.0;
        _1510 = 0.0;
        _1511 = 0.0;
    }
    float _1521 = (cbModelParam._m0[1u].x * (_1509 - _1200)) + _1200;
    float _1522 = (cbModelParam._m0[1u].x * (_1510 - _1201)) + _1201;
    float _1523 = (cbModelParam._m0[1u].x * (_1511 - _1202)) + _1202;
    float _1544 = fma(_1523, cbSceneParam._m0[89u].z, fma(_1522, cbSceneParam._m0[89u].y, _1521 * cbSceneParam._m0[89u].x));
    float _1547 = fma(_1523, cbSceneParam._m0[90u].z, fma(_1522, cbSceneParam._m0[90u].y, _1521 * cbSceneParam._m0[90u].x));
    float _1550 = fma(_1523, cbSceneParam._m0[91u].z, fma(_1522, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1521));
    float _1565 = _825 * 0.5;
    float _1566 = _826 * 0.5;
    float _1567 = _827 * 0.5;
    float _1568 = dot(vec4(_1565, _1566, _1567, 1.0), vec4(_1499, _1502, _1505, _1508));
    float _1571 = dot(vec4(_1565, _1566, _1567, 1.0), vec4(_1498, _1501, _1504, _1507));
    float _1574 = dot(vec4(_1565, _1566, _1567, 1.0), vec4(_1497, _1500, _1503, _1506));
    float _1608;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1581 = dot(vec4(_1565, _1566, _1567, 1.0), vec4(_1187, _1191, _1194, _1197));
        float _1585 = dot(vec4(_1565, _1566, _1567, 1.0), vec4(_1189, _1192, _1195, _1198));
        float _1589 = dot(vec4(_1565, _1566, _1567, 1.0), vec4(_1190, _1193, _1196, _1199));
        float _1596 = dot(vec4(cbModelParam._m0[39u]), vec4(_1565, _1566, _1567, 1.0));
        _1608 = dot(vec3(isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0)), isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0)), isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1596) ? 0.0 : (isnan(0.0) ? _1596 : max(0.0, _1596))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1608 = 1.0;
    }
    float _1619;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1610 = dot(vec4(cbModelParam._m0[40u]), vec4(_1565, _1566, _1567, 1.0));
        _1619 = dot(vec3(isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0)), isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0)), isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1610) ? 0.0 : (isnan(0.0) ? _1610 : max(0.0, _1610))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1619 = 1.0;
    }
    float _1623 = (_1619 * cbModelParam._m0[1u].x) + (_1608 * (1.0 - cbModelParam._m0[1u].x));
    float _1633 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _667);
    float _1634 = isnan(_1633) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1633 : min(cbModelParam._m0[25u].z, _1633));
    float _1714;
    float _1716;
    float _1718;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1681 = fma(_886, cbModelParam._m0[13u].z, fma(_882, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _878)) + cbModelParam._m0[13u].w;
        float _1685 = fma(_886, cbModelParam._m0[14u].z, fma(_882, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _878)) + cbModelParam._m0[14u].w;
        float _1689 = fma(_886, cbModelParam._m0[15u].z, fma(_882, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _878)) + cbModelParam._m0[15u].w;
        float _1692 = fma(_827, cbModelParam._m0[13u].z, fma(_826, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _825));
        float _1695 = fma(_827, cbModelParam._m0[14u].z, fma(_826, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _825));
        float _1698 = fma(_827, cbModelParam._m0[15u].z, fma(_826, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _825));
        float _1726;
        if (_1692 > 0.0)
        {
            _1726 = abs((1.0 - _1681) / _1692);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1692 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1681 + 1.0) / _1692);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1726 = frontier_phi_14_12_ladder;
        }
        float _1896;
        if (_1695 > 0.0)
        {
            _1896 = abs((1.0 - _1685) / _1695);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1695 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1685 + 1.0) / _1695);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1896 = frontier_phi_23_19_ladder;
        }
        float _2191;
        if (_1698 > 0.0)
        {
            _2191 = abs((1.0 - _1689) / _1698);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1698 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1689 + 1.0) / _1698);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2191 = frontier_phi_35_30_ladder;
        }
        float _2193 = isnan(_1896) ? _1726 : (isnan(_1726) ? _1896 : min(_1726, _1896));
        float _2194 = isnan(_2191) ? _2193 : (isnan(_2193) ? _2191 : min(_2193, _2191));
        float _2198 = (_2194 * _1692) + _1681;
        float _2199 = (_2194 * _1695) + _1685;
        float _2200 = (_2194 * _1698) + _1689;
        float _2201 = _2194 * 9.9999997473787516355514526367188e-05;
        float _2203 = (-1.0) - _2201;
        float _2205 = _2201 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2200 > _2205) || ((_2200 < _2203) || ((_2199 > _2205) || ((_2199 < _2203) || ((_2198 < _2203) || (_2198 > _2205))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2345 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2200, cbModelParam._m0[9u].z, fma(_2199, cbModelParam._m0[9u].y, _2198 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2200, cbModelParam._m0[10u].z, fma(_2199, cbModelParam._m0[10u].y, _2198 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2200, cbModelParam._m0[11u].z, fma(_2199, cbModelParam._m0[11u].y, _2198 * cbModelParam._m0[11u].x))), _1634);
            frontier_phi_13_35_ladder = _2345.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2345.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2345.x * cbModelParam._m0[1u].y;
        }
        _1714 = frontier_phi_13_35_ladder_2;
        _1716 = frontier_phi_13_35_ladder_1;
        _1718 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1702 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_825, _826, _827), _1634);
        _1714 = _1702.x * cbModelParam._m0[1u].y;
        _1716 = _1702.y * cbModelParam._m0[1u].y;
        _1718 = _1702.z * cbModelParam._m0[1u].y;
    }
    float _1722 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _667);
    float _1723 = isnan(_1722) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1722 : min(cbModelParam._m0[25u].w, _1722));
    float _1813;
    float _1815;
    float _1817;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1777 = fma(_886, cbModelParam._m0[21u].z, fma(_882, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _878)) + cbModelParam._m0[21u].w;
        float _1781 = fma(_886, cbModelParam._m0[22u].z, fma(_882, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _878)) + cbModelParam._m0[22u].w;
        float _1785 = fma(_886, cbModelParam._m0[23u].z, fma(_882, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _878)) + cbModelParam._m0[23u].w;
        float _1788 = fma(_827, cbModelParam._m0[21u].z, fma(_826, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _825));
        float _1791 = fma(_827, cbModelParam._m0[22u].z, fma(_826, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _825));
        float _1794 = fma(_827, cbModelParam._m0[23u].z, fma(_826, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _825));
        float _1901;
        if (_1788 > 0.0)
        {
            _1901 = abs((1.0 - _1777) / _1788);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1788 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1777 + 1.0) / _1788);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1901 = frontier_phi_25_21_ladder;
        }
        float _2218;
        if (_1791 > 0.0)
        {
            _2218 = abs((1.0 - _1781) / _1791);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1791 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1781 + 1.0) / _1791);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2218 = frontier_phi_37_32_ladder;
        }
        float _2545;
        if (_1794 > 0.0)
        {
            _2545 = abs((1.0 - _1785) / _1794);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1794 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1785 + 1.0) / _1794);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2545 = frontier_phi_47_44_ladder;
        }
        float _2547 = isnan(_2218) ? _1901 : (isnan(_1901) ? _2218 : min(_1901, _2218));
        float _2548 = isnan(_2545) ? _2547 : (isnan(_2547) ? _2545 : min(_2547, _2545));
        float _2552 = (_2548 * _1788) + _1777;
        float _2553 = (_2548 * _1791) + _1781;
        float _2554 = (_2548 * _1794) + _1785;
        float _2555 = _2548 * 9.9999997473787516355514526367188e-05;
        float _2556 = (-1.0) - _2555;
        float _2558 = _2555 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2554 > _2558) || ((_2554 < _2556) || ((_2553 > _2558) || ((_2553 < _2556) || ((_2552 < _2556) || (_2552 > _2558))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2672 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2554, cbModelParam._m0[17u].z, fma(_2553, cbModelParam._m0[17u].y, _2552 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2554, cbModelParam._m0[18u].z, fma(_2553, cbModelParam._m0[18u].y, _2552 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2554, cbModelParam._m0[19u].z, fma(_2553, cbModelParam._m0[19u].y, _2552 * cbModelParam._m0[19u].x))), _1723);
            frontier_phi_22_47_ladder = _2672.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2672.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2672.x * cbModelParam._m0[1u].z;
        }
        _1813 = frontier_phi_22_47_ladder_2;
        _1815 = frontier_phi_22_47_ladder_1;
        _1817 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1797 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_825, _826, _827), _1723);
        _1813 = _1797.x * cbModelParam._m0[1u].z;
        _1815 = _1797.y * cbModelParam._m0[1u].z;
        _1817 = _1797.z * cbModelParam._m0[1u].z;
    }
    float _1829 = ((((1.0 - _846) * ((_833 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_846 * _833)) * _817;
    float _1830 = _1829 * ((cbModelParam._m0[1u].w * (_1813 - _1714)) + _1714);
    float _1831 = _1829 * ((cbModelParam._m0[1u].w * (_1815 - _1716)) + _1716);
    float _1832 = _1829 * ((cbModelParam._m0[1u].w * (_1817 - _1718)) + _1718);
    float _1835 = fma(_1832, cbSceneParam._m0[89u].z, fma(_1831, cbSceneParam._m0[89u].y, _1830 * cbSceneParam._m0[89u].x));
    float _1838 = fma(_1832, cbSceneParam._m0[90u].z, fma(_1831, cbSceneParam._m0[90u].y, _1830 * cbSceneParam._m0[90u].x));
    float _1841 = fma(_1832, cbSceneParam._m0[91u].z, fma(_1831, cbSceneParam._m0[91u].y, _1830 * cbSceneParam._m0[91u].x));
    float _1875 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1879 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1883 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1887 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1888 = _1875 / _1887;
    float _1889 = _1879 / _1887;
    float _1890 = _1883 / _1887;
    float _2037;
    float _2038;
    float _2039;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1917 = ((uint(_1890 > cbSceneParam._m0[59u].y) + uint(_1890 > cbSceneParam._m0[59u].x)) + uint(_1890 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1918 = _1917 + 43u;
        uint _1926 = _1917 + 44u;
        uint _1934 = _1917 + 45u;
        uint _1942 = _1917 + 46u;
        float _1953 = fma(_1887, cbSceneParam._m0[_1918].w, fma(_1883, cbSceneParam._m0[_1918].z, fma(_1879, cbSceneParam._m0[_1918].y, _1875 * cbSceneParam._m0[_1918].x)));
        float _1957 = fma(_1887, cbSceneParam._m0[_1926].w, fma(_1883, cbSceneParam._m0[_1926].z, fma(_1879, cbSceneParam._m0[_1926].y, _1875 * cbSceneParam._m0[_1926].x)));
        float _1965 = fma(_1887, cbSceneParam._m0[_1942].w, fma(_1883, cbSceneParam._m0[_1942].z, fma(_1879, cbSceneParam._m0[_1942].y, _1875 * cbSceneParam._m0[_1942].x)));
        float _1970 = cbSceneParam._m0[33u].z * _1965;
        float _1972 = cbSceneParam._m0[33u].w * _1965;
        float _1975 = fma(_1887, cbSceneParam._m0[_1934].w, fma(_1883, cbSceneParam._m0[_1934].z, fma(_1879, cbSceneParam._m0[_1934].y, _1875 * cbSceneParam._m0[_1934].x))) / _1965;
        float _2023 = (cbSceneParam._m0[33u].x - sqrt(((_1889 * _1889) + (_1888 * _1888)) + (_1890 * _1890))) * cbSceneParam._m0[33u].y;
        float _4327 = isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0));
        float _2030 = (isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1970 + _1953) / _1965, (_1972 + _1957) / _1965), _1975), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1972 + _1953) / _1965, (_1957 - _1970) / _1965), _1975), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1953 - _1970) / _1965, (_1957 - _1972) / _1965), _1975), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1953 - _1972) / _1965, (_1970 + _1957) / _1965), _1975), 0.0)).x), vec4(0.25)));
        _2037 = 1.0 - (_2030 * cbSceneParam._m0[34u].x);
        _2038 = 1.0 - (_2030 * cbSceneParam._m0[34u].y);
        _2039 = 1.0 - (_2030 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2037 = 1.0;
        _2038 = 1.0;
        _2039 = 1.0;
    }
    float _2103;
    float _2105;
    float _2107;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2091 = fma(_1887, cbSceneParam._m0[63u].w, fma(_1883, cbSceneParam._m0[63u].z, fma(_1879, cbSceneParam._m0[63u].y, _1875 * cbSceneParam._m0[63u].x)));
        float _2092 = fma(_1887, cbSceneParam._m0[60u].w, fma(_1883, cbSceneParam._m0[60u].z, fma(_1879, cbSceneParam._m0[60u].y, _1875 * cbSceneParam._m0[60u].x))) / _2091;
        float _2093 = fma(_1887, cbSceneParam._m0[61u].w, fma(_1883, cbSceneParam._m0[61u].z, fma(_1879, cbSceneParam._m0[61u].y, _1875 * cbSceneParam._m0[61u].x))) / _2091;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2092 >= cbSceneParam._m0[64u].x) && (_2093 >= cbSceneParam._m0[64u].y)) && (_2092 <= cbSceneParam._m0[64u].z)) && (_2093 <= cbSceneParam._m0[64u].w))
        {
            float _2231 = fma(_1887, cbSceneParam._m0[62u].w, fma(_1883, cbSceneParam._m0[62u].z, fma(_1879, cbSceneParam._m0[62u].y, _1875 * cbSceneParam._m0[62u].x))) / _2091;
            float _2235 = isnan(cbSceneParam._m0[41u].w) ? _2231 : (isnan(_2231) ? cbSceneParam._m0[41u].w : max(_2231, cbSceneParam._m0[41u].w));
            float _2278 = (cbSceneParam._m0[33u].x - sqrt(((_1889 * _1889) + (_1888 * _1888)) + (_1890 * _1890))) * cbSceneParam._m0[33u].y;
            float _4343 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
            float _2285 = (isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2092, cbSceneParam._m0[33u].w + _2093), _2235), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2092, _2093 - cbSceneParam._m0[33u].z), _2235), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2092 - cbSceneParam._m0[33u].z, _2093 - cbSceneParam._m0[33u].w), _2235), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2092 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2093), _2235), 0.0)).x), vec4(0.25)));
            float _2289 = 1.0 - (_2285 * cbSceneParam._m0[34u].x);
            float _2290 = 1.0 - (_2285 * cbSceneParam._m0[34u].y);
            float _2291 = 1.0 - (_2285 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2291) ? _2039 : (isnan(_2039) ? _2291 : min(_2039, _2291));
            frontier_phi_34_33_ladder_1 = isnan(_2290) ? _2038 : (isnan(_2038) ? _2290 : min(_2038, _2290));
            frontier_phi_34_33_ladder_2 = isnan(_2289) ? _2037 : (isnan(_2037) ? _2289 : min(_2037, _2289));
        }
        else
        {
            frontier_phi_34_33_ladder = _2039;
            frontier_phi_34_33_ladder_1 = _2038;
            frontier_phi_34_33_ladder_2 = _2037;
        }
        _2103 = frontier_phi_34_33_ladder_2;
        _2105 = frontier_phi_34_33_ladder_1;
        _2107 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2103 = _2037;
        _2105 = _2038;
        _2107 = _2039;
    }
    uvec4 _2112 = floatBitsToUint(cbInstanceData._m0[_792 + 5u]);
    uint _2114 = _2112.x * 14u;
    uint _2115 = _2114 + 13u;
    float _2122 = _817 + (-1.0);
    float _2127 = (cbLight._m0[_2115].x * _2122) + 1.0;
    float _2128 = (cbLight._m0[_2115].y * _2122) + 1.0;
    float _2129 = (cbLight._m0[_2115].z * _2122) + 1.0;
    float _2130 = (cbLight._m0[_2115].w * _2122) + 1.0;
    uint _2131 = _2114 + 5u;
    float _2137 = isnan(1.0) ? _2128 : (isnan(_2128) ? 1.0 : min(_2128, 1.0));
    uint _2141 = _2114 + 4u;
    float _2150 = isnan(1.0) ? _2127 : (isnan(_2127) ? 1.0 : min(_2127, 1.0));
    uint _2154 = _2114 | 1u;
    float _2165 = dot(vec3(cbLight._m0[_2114].xyz), vec3(_664, _665, _666));
    float _2168 = dot(vec3(cbLight._m0[_2154].xyz), vec3(_664, _665, _666));
    float _4379 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
    float _4390 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
    float _2173 = (isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0))) * 0.3183098733425140380859375;
    float _2175 = (isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0))) * 0.3183098733425140380859375;
    float _2182 = ((cbLight._m0[_2131].x * _2137) * _2175) + (((cbLight._m0[_2141].x * _2103) * _2150) * _2173);
    float _2183 = ((_2137 * cbLight._m0[_2131].y) * _2175) + (((cbLight._m0[_2141].y * _2105) * _2150) * _2173);
    float _2184 = ((_2137 * cbLight._m0[_2131].z) * _2175) + (((cbLight._m0[_2141].z * _2107) * _2150) * _2173);
    uvec4 _2188 = floatBitsToUint(cbLight._m0[_2114 + 12u]);
    bool _2190 = _2188.x == 0u;
    float _2292;
    float _2294;
    float _2296;
    if (_2190)
    {
        _2292 = _2182;
        _2294 = _2183;
        _2296 = _2184;
    }
    else
    {
        uint _2300 = _2114 + 6u;
        float _2316 = (dot(vec3(cbLight._m0[_2114 + 2u].xyz), vec3(_664, _665, _666)) * 0.5) + 0.5;
        float _2317 = _2316 * _2316;
        float _4401 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
        float _2318 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
        float _2319 = isnan(1.0) ? _2129 : (isnan(_2129) ? 1.0 : min(_2129, 1.0));
        _2292 = (((cbLight._m0[_2300].x * 0.3183098733425140380859375) * _2318) * _2319) + _2182;
        _2294 = (((cbLight._m0[_2300].y * 0.3183098733425140380859375) * _2318) * _2319) + _2183;
        _2296 = (((cbLight._m0[_2300].z * 0.3183098733425140380859375) * _2318) * _2319) + _2184;
    }
    bool _2299 = _2188.y == 0u;
    float _2354;
    float _2356;
    float _2358;
    if (_2299)
    {
        _2354 = _2292;
        _2356 = _2294;
        _2358 = _2296;
    }
    else
    {
        uint _2516 = _2114 + 7u;
        float _2532 = (dot(vec3(cbLight._m0[_2114 + 3u].xyz), vec3(_664, _665, _666)) * 0.5) + 0.5;
        float _2533 = _2532 * _2532;
        float _4417 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
        float _2534 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
        float _2535 = isnan(1.0) ? _2130 : (isnan(_2130) ? 1.0 : min(_2130, 1.0));
        _2354 = (((cbLight._m0[_2516].x * 0.3183098733425140380859375) * _2534) * _2535) + _2292;
        _2356 = (((cbLight._m0[_2516].y * 0.3183098733425140380859375) * _2534) * _2535) + _2294;
        _2358 = (((cbLight._m0[_2516].z * 0.3183098733425140380859375) * _2534) * _2535) + _2296;
    }
    uint _2361 = _2114 + 8u;
    float _2374 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2114].w)) * _667) * 0.949999988079071044921875);
    float _2375 = _2374 * _2374;
    float _2376 = cbLight._m0[_2114].x + _744;
    float _2377 = cbLight._m0[_2114].y + _745;
    float _2378 = cbLight._m0[_2114].z + _746;
    float _2382 = inversesqrt(dot(vec3(_2376, _2377, _2378), vec3(_2376, _2377, _2378)));
    float _2383 = _2382 * _2376;
    float _2384 = _2382 * _2377;
    float _2385 = _2382 * _2378;
    float _2386 = dot(vec3(_664, _665, _666), vec3(cbLight._m0[_2114].xyz));
    float _4433 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
    float _2389 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
    float _4444 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _2390 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
    float _2391 = dot(vec3(_664, _665, _666), vec3(_2383, _2384, _2385));
    float _4455 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
    float _2394 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
    float _2395 = dot(vec3(cbLight._m0[_2114].xyz), vec3(_2383, _2384, _2385));
    float _4466 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
    float _2399 = _2375 * _2375;
    float _2403 = ((_2394 * _2394) * (_2399 + (-1.0))) + 1.0;
    float _2414 = (exp2(log2(1.0 - (isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2415 = 1.0 - _2375;
    float _2426 = (0.5 / (((_2390 * ((_2389 * _2415) + _2375)) + 9.9999999392252902907785028219223e-09) + (((_2390 * _2415) + _2375) * _2389))) * _2389;
    float _4477 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
    float _2428 = (isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0))) * (_2399 / ((_2403 * _2403) * 3.141590118408203125));
    uint _2442 = _2114 + 9u;
    float _2453 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2154].w)) * _667) * 0.949999988079071044921875);
    float _2454 = _2453 * _2453;
    float _2455 = cbLight._m0[_2154].x + _744;
    float _2456 = cbLight._m0[_2154].y + _745;
    float _2457 = cbLight._m0[_2154].z + _746;
    float _2461 = inversesqrt(dot(vec3(_2455, _2456, _2457), vec3(_2455, _2456, _2457)));
    float _2462 = _2461 * _2455;
    float _2463 = _2461 * _2456;
    float _2464 = _2461 * _2457;
    float _2465 = dot(vec3(_664, _665, _666), vec3(cbLight._m0[_2154].xyz));
    float _4488 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
    float _2468 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
    float _2469 = dot(vec3(_664, _665, _666), vec3(_2462, _2463, _2464));
    float _4499 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
    float _2472 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
    float _2473 = dot(vec3(cbLight._m0[_2154].xyz), vec3(_2462, _2463, _2464));
    float _4510 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
    float _2477 = _2454 * _2454;
    float _2481 = ((_2472 * _2472) * (_2477 + (-1.0))) + 1.0;
    float _2490 = (exp2(log2(1.0 - (isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2491 = 1.0 - _2454;
    float _2501 = (0.5 / (((_2390 * ((_2468 * _2491) + _2454)) + 9.9999999392252902907785028219223e-09) + (((_2390 * _2491) + _2454) * _2468))) * _2468;
    float _4521 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
    float _2503 = (isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0))) * (_2477 / ((_2481 * _2481) * 3.141590118408203125));
    float _2513 = (((_2490 * cbLight._m0[_2442].x) * _2503) * _2137) + ((((cbLight._m0[_2361].x * _2103) * _2414) * _2428) * _2150);
    float _2514 = (((_2490 * cbLight._m0[_2442].y) * _2503) * _2137) + ((((cbLight._m0[_2361].y * _2105) * _2414) * _2428) * _2150);
    float _2515 = (((_2490 * cbLight._m0[_2442].z) * _2503) * _2137) + ((((cbLight._m0[_2361].z * _2107) * _2414) * _2428) * _2150);
    float _2571;
    float _2573;
    float _2575;
    if (_2190)
    {
        _2571 = _2513;
        _2573 = _2514;
        _2575 = _2515;
    }
    else
    {
        uint _2577 = _2114 + 2u;
        uint _2581 = _2114 + 10u;
        float _2595 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2577].w)) * _667) * 0.949999988079071044921875);
        float _2596 = _2595 * _2595;
        float _2597 = cbLight._m0[_2577].x + _744;
        float _2598 = cbLight._m0[_2577].y + _745;
        float _2599 = cbLight._m0[_2577].z + _746;
        float _2603 = inversesqrt(dot(vec3(_2597, _2598, _2599), vec3(_2597, _2598, _2599)));
        float _2604 = _2603 * _2597;
        float _2605 = _2603 * _2598;
        float _2606 = _2603 * _2599;
        float _2607 = dot(vec3(_664, _665, _666), vec3(cbLight._m0[_2577].xyz));
        float _4532 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
        float _2610 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
        float _2611 = dot(vec3(_664, _665, _666), vec3(_2604, _2605, _2606));
        float _4543 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
        float _2614 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
        float _2615 = dot(vec3(cbLight._m0[_2577].xyz), vec3(_2604, _2605, _2606));
        float _4554 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
        float _2619 = _2596 * _2596;
        float _2623 = ((_2614 * _2614) * (_2619 + (-1.0))) + 1.0;
        float _2632 = (exp2(log2(1.0 - (isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2633 = 1.0 - _2596;
        float _2643 = (0.5 / (((_2390 * ((_2610 * _2633) + _2596)) + 9.9999999392252902907785028219223e-09) + (((_2390 * _2633) + _2596) * _2610))) * _2610;
        float _4565 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
        float _2645 = (isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0))) * (_2619 / ((_2623 * _2623) * 3.141590118408203125));
        float _2646 = isnan(1.0) ? _2129 : (isnan(_2129) ? 1.0 : min(_2129, 1.0));
        _2571 = (((_2632 * cbLight._m0[_2581].x) * _2645) * _2646) + _2513;
        _2573 = (((_2632 * cbLight._m0[_2581].y) * _2645) * _2646) + _2514;
        _2575 = (((_2632 * cbLight._m0[_2581].z) * _2645) * _2646) + _2515;
    }
    float _2677;
    float _2679;
    float _2681;
    if (_2299)
    {
        _2677 = _2571;
        _2679 = _2573;
        _2681 = _2575;
    }
    else
    {
        uint _2688 = _2114 + 3u;
        uint _2692 = _2114 + 11u;
        float _2706 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2688].w)) * _667) * 0.949999988079071044921875);
        float _2707 = _2706 * _2706;
        float _2708 = cbLight._m0[_2688].x + _744;
        float _2709 = cbLight._m0[_2688].y + _745;
        float _2710 = cbLight._m0[_2688].z + _746;
        float _2714 = inversesqrt(dot(vec3(_2708, _2709, _2710), vec3(_2708, _2709, _2710)));
        float _2715 = _2714 * _2708;
        float _2716 = _2714 * _2709;
        float _2717 = _2714 * _2710;
        float _2718 = dot(vec3(_664, _665, _666), vec3(cbLight._m0[_2688].xyz));
        float _4581 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
        float _2721 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
        float _2722 = dot(vec3(_664, _665, _666), vec3(_2715, _2716, _2717));
        float _4592 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
        float _2725 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
        float _2726 = dot(vec3(cbLight._m0[_2688].xyz), vec3(_2715, _2716, _2717));
        float _4603 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
        float _2730 = _2707 * _2707;
        float _2734 = ((_2725 * _2725) * (_2730 + (-1.0))) + 1.0;
        float _2743 = (exp2(log2(1.0 - (isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2744 = 1.0 - _2707;
        float _2754 = (0.5 / (((_2390 * ((_2721 * _2744) + _2707)) + 9.9999999392252902907785028219223e-09) + (((_2390 * _2744) + _2707) * _2721))) * _2721;
        float _4614 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
        float _2756 = (isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0))) * (_2730 / ((_2734 * _2734) * 3.141590118408203125));
        float _2757 = isnan(1.0) ? _2130 : (isnan(_2130) ? 1.0 : min(_2130, 1.0));
        _2677 = (((_2743 * cbLight._m0[_2692].x) * _2756) * _2757) + _2571;
        _2679 = (((_2743 * cbLight._m0[_2692].y) * _2756) * _2757) + _2573;
        _2681 = (((_2743 * cbLight._m0[_2692].z) * _2756) * _2757) + _2575;
    }
    float _2823;
    float _2825;
    float _2827;
    float _2829;
    float _2831;
    float _2833;
    if (_2112.y == 0u)
    {
        uvec4 _2778 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2779 = _2778.x;
        uint _2790 = uint((float(_2778.y) * floor(float(uint(cbSceneParam._m0[85u].y * _753) / _2779))) + floor(float(uint(cbSceneParam._m0[85u].x * _752) / _2779)));
        float _2800 = (log2(_1890 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2801 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
        uint _2804 = uint(isnan(14.0) ? _2801 : (isnan(_2801) ? 14.0 : min(_2801, 14.0)));
        uvec4 _2809 = texelFetch(g_lightClusterGridBuffer, int(((_2804 << 2u) + (_2790 << 6u)) >> 2u));
        uint _2810 = _2809.x;
        uint _2811 = _2778.z;
        float _2919;
        float _2921;
        float _2923;
        float _2925;
        float _2927;
        float _2929;
        if (((((1u << ((_2811 >> 4u) & 15u)) + 4294967295u) & _2810) == 0u) || ((_2811 & 240u) == 0u))
        {
            _2919 = 0.0;
            _2921 = 0.0;
            _2923 = 0.0;
            _2925 = 0.0;
            _2927 = 0.0;
            _2929 = 0.0;
        }
        else
        {
            float _2920;
            float _2922;
            float _2924;
            float _2926;
            float _2928;
            float _2930;
            float _3072 = 0.0;
            float _3073 = 0.0;
            float _3074 = 0.0;
            float _3075 = 0.0;
            float _3076 = 0.0;
            float _3077 = 0.0;
            uint _3078 = 0u;
            uint _3087;
            bool _3088;
            for (;;)
            {
                _3087 = texelFetch(g_lightClassification, int((((_2804 << 5u) + (_2790 << 9u)) + (_3078 << 2u)) >> 2u)).x;
                _3088 = _3087 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3088)
                {
                    frontier_phi_66_pred = _3077;
                    frontier_phi_66_pred_1 = _3076;
                    frontier_phi_66_pred_2 = _3075;
                    frontier_phi_66_pred_3 = _3074;
                    frontier_phi_66_pred_4 = _3073;
                    frontier_phi_66_pred_5 = _3072;
                }
                else
                {
                    float _3196;
                    float _3197;
                    float _3198;
                    float _3199;
                    float _3200;
                    float _3201;
                    uint _3202;
                    _3196 = _3072;
                    _3197 = _3073;
                    _3198 = _3074;
                    _3199 = _3075;
                    _3200 = _3076;
                    _3201 = _3077;
                    _3202 = _3087;
                    float _3128;
                    float _3129;
                    float _3130;
                    float _3131;
                    float _3132;
                    float _3133;
                    for (;;)
                    {
                        uint _3206 = uint(findLSB(_3202)) + (_3078 << 5u);
                        uint _3203 = (_3202 + 4294967295u) & _3202;
                        uint _3208 = _3206 * 48u;
                        vec4 _3222 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3208)).x, texelFetch(g_PointLightRenderingBuffer, int(_3208 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3208 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3208 + 3u)).x));
                        uint _3228 = (_3206 * 48u) + 4u;
                        vec4 _3241 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3228)).x, texelFetch(g_PointLightRenderingBuffer, int(_3228 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3228 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3228 + 3u)).x));
                        uint _3247 = (_3206 * 48u) + 8u;
                        vec3 _3258 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3247)).x, texelFetch(g_PointLightRenderingBuffer, int(_3247 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3247 + 2u)).x));
                        float _3262 = _3222.x - _1888;
                        float _3263 = _3222.y - _1889;
                        float _3264 = _3222.z - _1890;
                        float _3265 = dot(vec3(_3262, _3263, _3264), vec3(_3262, _3263, _3264));
                        float _3268 = inversesqrt(_3265);
                        float _3269 = _3268 * _3262;
                        float _3270 = _3268 * _3263;
                        float _3271 = _3268 * _3264;
                        float _3272 = dot(vec3(_773, _776, _779), vec3(_3269, _3270, _3271));
                        float _3277 = 1.0 - (_3265 * _3222.w);
                        float _4640 = isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0));
                        float _3278 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
                        float _3279 = sqrt(_3265) * _3241.w;
                        float _3282 = 1.39999997615814208984375 / (_3279 + 1.39999997615814208984375);
                        float _3283 = _3282 * _3282;
                        float _3286 = ((1.0 - _3283) * _3272) + _3283;
                        float _3289 = _3279 * _3279;
                        float _3293 = ((isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0))) * _3278) / ((_3289 * 0.699999988079071044921875) + 1.0);
                        float _3297 = (-0.0) - _1888;
                        float _3298 = (-0.0) - _1889;
                        float _3299 = (-0.0) - _1890;
                        float _3303 = inversesqrt(dot(vec3(_3297, _3298, _3299), vec3(_3297, _3298, _3299)));
                        float _3304 = _3303 * _3297;
                        float _3305 = _3303 * _3298;
                        float _3306 = _3303 * _3299;
                        float _3313 = exp2(log2(1.0 / ((_3289 * 3.5) + 5.0)) * 0.25);
                        float _3314 = 1.0 - _833;
                        float _3321 = sqrt(1.0 - ((1.0 - (_3314 * _3314)) * (1.0 - (_3313 * _3313))));
                        float _3322 = _3321 * _3321;
                        float _3323 = _3322 * _3322;
                        float _3324 = _3304 + _3269;
                        float _3325 = _3305 + _3270;
                        float _3326 = _3306 + _3271;
                        float _3330 = inversesqrt(dot(vec3(_3324, _3325, _3326), vec3(_3324, _3325, _3326)));
                        float _3334 = dot(vec3(_773, _776, _779), vec3(_3304, _3305, _3306));
                        float _4656 = isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0));
                        float _3337 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
                        float _3338 = dot(vec3(_773, _776, _779), vec3(_3330 * _3324, _3330 * _3325, _3330 * _3326));
                        float _4667 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0));
                        float _3341 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
                        float _3345 = ((_3341 * _3341) * (_3323 + (-1.0))) + 1.0;
                        float _3346 = _3282 * _3322;
                        float _3347 = _3346 * _3346;
                        float _3350 = ((1.0 - _3347) * _3272) + _3347;
                        float _4678 = isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0));
                        float _3351 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
                        float _3352 = 1.0 - _3322;
                        float _3362 = (0.5 / (((_3351 * ((_3337 * _3352) + _3322)) + 9.9999999392252902907785028219223e-09) + (((_3351 * _3352) + _3322) * _3337))) * _3351;
                        float _4689 = isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0));
                        float _3373 = (((_3323 * 3.1415927410125732421875) * (isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0)))) / ((_3345 * _3345) * ((_3289 * 2.1991131305694580078125) + 3.141590118408203125))) * _3278;
                        _3131 = (_3293 * _3241.x) + _3199;
                        _3132 = (_3293 * _3241.y) + _3200;
                        _3133 = (_3293 * _3241.z) + _3201;
                        _3128 = (_3373 * _3258.x) + _3196;
                        _3129 = (_3373 * _3258.y) + _3197;
                        _3130 = (_3373 * _3258.z) + _3198;
                        if (_3203 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3196 = _3128;
                            _3197 = _3129;
                            _3198 = _3130;
                            _3199 = _3131;
                            _3200 = _3132;
                            _3201 = _3133;
                            _3202 = _3203;
                        }
                    }
                    frontier_phi_66_pred = _3133;
                    frontier_phi_66_pred_1 = _3132;
                    frontier_phi_66_pred_2 = _3131;
                    frontier_phi_66_pred_3 = _3130;
                    frontier_phi_66_pred_4 = _3129;
                    frontier_phi_66_pred_5 = _3128;
                }
                _2930 = frontier_phi_66_pred;
                _2928 = frontier_phi_66_pred_1;
                _2926 = frontier_phi_66_pred_2;
                _2924 = frontier_phi_66_pred_3;
                _2922 = frontier_phi_66_pred_4;
                _2920 = frontier_phi_66_pred_5;
                uint _3079 = _3078 + 1u;
                if (_3079 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3072 = _2920;
                    _3073 = _2922;
                    _3074 = _2924;
                    _3075 = _2926;
                    _3076 = _2928;
                    _3077 = _2930;
                    _3078 = _3079;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2919 = _2920;
            _2921 = _2922;
            _2923 = _2924;
            _2925 = _2926;
            _2927 = _2928;
            _2929 = _2930;
        }
        uvec4 _2933 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2934 = _2933.z;
        uint _2936 = (_2934 >> 8u) & 15u;
        float _3040;
        float _3042;
        float _3044;
        float _3046;
        float _3048;
        float _3050;
        if (((4294967295u << _2936) & _2810) == 0u)
        {
            _3040 = _2919;
            _3042 = _2921;
            _3044 = _2923;
            _3046 = _2925;
            _3048 = _2927;
            _3050 = _2929;
        }
        else
        {
            float _3065 = inversesqrt(dot(vec3(_1888, _1889, _1890), vec3(_1888, _1889, _1890)));
            float _3066 = _3065 * _1888;
            float _3067 = _3065 * _1889;
            float _3068 = _3065 * _1890;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2936 < ((_2934 >> 12u) & 15u))
            {
                float _3041;
                float _3043;
                float _3045;
                float _3047;
                float _3049;
                float _3051;
                float _3179 = _2919;
                float _3180 = _2921;
                float _3181 = _2923;
                float _3182 = _2925;
                float _3183 = _2927;
                float _3184 = _2929;
                uint _3185 = _2936;
                uint _3194;
                bool _3195;
                for (;;)
                {
                    _3194 = texelFetch(g_lightClassification, int((((_2804 << 5u) + (_2790 << 9u)) + (_3185 << 2u)) >> 2u)).x;
                    _3195 = _3194 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3195)
                    {
                        frontier_phi_72_pred = _3184;
                        frontier_phi_72_pred_1 = _3183;
                        frontier_phi_72_pred_2 = _3182;
                        frontier_phi_72_pred_3 = _3181;
                        frontier_phi_72_pred_4 = _3180;
                        frontier_phi_72_pred_5 = _3179;
                    }
                    else
                    {
                        float _3378;
                        float _3379;
                        float _3380;
                        float _3381;
                        float _3382;
                        float _3383;
                        float _3672;
                        float _3673;
                        float _3674;
                        float _3675;
                        float _3676;
                        float _3677;
                        float _3391 = _3179;
                        float _3392 = _3180;
                        float _3393 = _3181;
                        float _3394 = _3182;
                        float _3395 = _3183;
                        float _3396 = _3184;
                        uint _3397 = _3194;
                        uint _3398;
                        vec4 _3423;
                        float _3424;
                        vec4 _3439;
                        vec3 _3451;
                        vec4 _3466;
                        vec4 _3481;
                        float _3528;
                        bool _3529;
                        for (;;)
                        {
                            uint _3408 = ((_3185 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3397));
                            _3398 = (_3397 + 4294967295u) & _3397;
                            uint _3410 = _3408 * 40u;
                            _3423 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3410)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 3u)).x));
                            _3424 = _3423.w;
                            uint _3426 = (_3408 * 40u) + 4u;
                            _3439 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3426)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 3u)).x));
                            uint _3441 = (_3408 * 40u) + 8u;
                            _3451 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3441)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 2u)).x));
                            uint _3453 = (_3408 * 40u) + 16u;
                            _3466 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3453)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 3u)).x));
                            uint _3468 = (_3408 * 40u) + 20u;
                            _3481 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3468)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 3u)).x));
                            uint _3484 = (_3408 * 40u) + 24u;
                            vec4 _3497 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3484)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 3u)).x));
                            uint _3503 = (_3408 * 40u) + 28u;
                            vec4 _3516 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3503)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 3u)).x));
                            _3528 = fma(_1890, _3516.z, fma(_1889, _3516.y, _3516.x * _1888)) + _3516.w;
                            _3529 = !((fma(_1890, _3497.z, fma(_1889, _3497.y, _3497.x * _1888)) + _3497.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3529)
                            {
                                float _3556 = _3423.x - _1888;
                                float _3557 = _3423.y - _1889;
                                float _3558 = _3423.z - _1890;
                                float _3559 = dot(vec3(_3556, _3557, _3558), vec3(_3556, _3557, _3558));
                                float _3562 = inversesqrt(_3559);
                                float _3563 = _3562 * _3556;
                                float _3564 = _3562 * _3557;
                                float _3565 = _3562 * _3558;
                                float _3569 = 1.0 - (_3559 / (_3424 * _3424));
                                float _4700 = isnan(0.0) ? _3569 : (isnan(_3569) ? 0.0 : max(_3569, 0.0));
                                float _3570 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
                                float _3574 = sqrt(_3559) * _3439.w;
                                float _3576 = 1.39999997615814208984375 / (_3574 + 1.39999997615814208984375);
                                float _3577 = _3576 * _3576;
                                float _3580 = ((1.0 - _3577) * dot(vec3(_3563, _3564, _3565), vec3(_773, _776, _779))) + _3577;
                                float _3583 = _3574 * _3574;
                                float _3587 = (fma(_1890, _3466.z, fma(_1889, _3466.y, _3466.x * _1888)) + _3466.w) / _3528;
                                float _3588 = (fma(_1890, _3481.z, fma(_1889, _3481.y, _3481.x * _1888)) + _3481.w) / _3528;
                                float _3592 = 1.0 - dot(vec2(_3587, _3588), vec2(_3587, _3588));
                                float _4716 = isnan(0.0) ? _3592 : (isnan(_3592) ? 0.0 : max(_3592, 0.0));
                                float _3593 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
                                float _3594 = _3593 * (((isnan(0.0) ? _3580 : (isnan(_3580) ? 0.0 : max(_3580, 0.0))) * _3570) / ((_3583 * 0.699999988079071044921875) + 1.0));
                                float _3606 = exp2(log2(1.0 / ((_3583 * 3.5) + 5.0)) * 0.25);
                                float _3607 = 1.0 - _833;
                                float _3614 = sqrt(1.0 - ((1.0 - (_3607 * _3607)) * (1.0 - (_3606 * _3606))));
                                float _3615 = _3614 * _3614;
                                float _3616 = _3615 * _3615;
                                float _3617 = _3563 - _3066;
                                float _3618 = _3564 - _3067;
                                float _3619 = _3565 - _3068;
                                float _3623 = inversesqrt(dot(vec3(_3617, _3618, _3619), vec3(_3617, _3618, _3619)));
                                float _3627 = dot(vec3(_773, _776, _779), vec3((-0.0) - _3066, (-0.0) - _3067, (-0.0) - _3068));
                                float _4727 = isnan(0.0) ? _3627 : (isnan(_3627) ? 0.0 : max(_3627, 0.0));
                                float _3630 = isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0));
                                float _3631 = dot(vec3(_773, _776, _779), vec3(_3623 * _3617, _3623 * _3618, _3623 * _3619));
                                float _4738 = isnan(0.0) ? _3631 : (isnan(_3631) ? 0.0 : max(_3631, 0.0));
                                float _3634 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
                                float _3638 = ((_3634 * _3634) * (_3616 + (-1.0))) + 1.0;
                                float _3639 = _3576 * _3615;
                                float _3640 = _3639 * _3639;
                                float _3646 = ((1.0 - _3640) * dot(vec3(_773, _776, _779), vec3(_3563, _3564, _3565))) + _3640;
                                float _4749 = isnan(0.0) ? _3646 : (isnan(_3646) ? 0.0 : max(_3646, 0.0));
                                float _3647 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
                                float _3648 = 1.0 - _3615;
                                float _3658 = (0.5 / (((_3647 * ((_3630 * _3648) + _3615)) + 9.9999999392252902907785028219223e-09) + (((_3647 * _3648) + _3615) * _3630))) * _3647;
                                float _4760 = isnan(0.0) ? _3658 : (isnan(_3658) ? 0.0 : max(_3658, 0.0));
                                float _3668 = (_3593 * _3570) * (((_3616 * 3.1415927410125732421875) * (isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0)))) / ((_3638 * _3638) * ((_3583 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3594 * _3439.y;
                                frontier_phi_78_pred_1 = _3594 * _3439.x;
                                frontier_phi_78_pred_2 = _3668 * _3451.z;
                                frontier_phi_78_pred_3 = _3668 * _3451.y;
                                frontier_phi_78_pred_4 = _3668 * _3451.x;
                                frontier_phi_78_pred_5 = _3594 * _3439.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3676 = frontier_phi_78_pred;
                            _3675 = frontier_phi_78_pred_1;
                            _3674 = frontier_phi_78_pred_2;
                            _3673 = frontier_phi_78_pred_3;
                            _3672 = frontier_phi_78_pred_4;
                            _3677 = frontier_phi_78_pred_5;
                            _3381 = _3675 + _3394;
                            _3382 = _3676 + _3395;
                            _3383 = _3677 + _3396;
                            _3378 = _3672 + _3391;
                            _3379 = _3673 + _3392;
                            _3380 = _3674 + _3393;
                            if (_3398 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3391 = _3378;
                                _3392 = _3379;
                                _3393 = _3380;
                                _3394 = _3381;
                                _3395 = _3382;
                                _3396 = _3383;
                                _3397 = _3398;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3383;
                        frontier_phi_72_pred_1 = _3382;
                        frontier_phi_72_pred_2 = _3381;
                        frontier_phi_72_pred_3 = _3380;
                        frontier_phi_72_pred_4 = _3379;
                        frontier_phi_72_pred_5 = _3378;
                    }
                    _3051 = frontier_phi_72_pred;
                    _3049 = frontier_phi_72_pred_1;
                    _3047 = frontier_phi_72_pred_2;
                    _3045 = frontier_phi_72_pred_3;
                    _3043 = frontier_phi_72_pred_4;
                    _3041 = frontier_phi_72_pred_5;
                    uint _3186 = _3185 + 1u;
                    if (_3186 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3179 = _3041;
                        _3180 = _3043;
                        _3181 = _3045;
                        _3182 = _3047;
                        _3183 = _3049;
                        _3184 = _3051;
                        _3185 = _3186;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3051;
                frontier_phi_60_61_ladder_1 = _3049;
                frontier_phi_60_61_ladder_2 = _3045;
                frontier_phi_60_61_ladder_3 = _3043;
                frontier_phi_60_61_ladder_4 = _3041;
                frontier_phi_60_61_ladder_5 = _3047;
            }
            else
            {
                frontier_phi_60_61_ladder = _2929;
                frontier_phi_60_61_ladder_1 = _2927;
                frontier_phi_60_61_ladder_2 = _2923;
                frontier_phi_60_61_ladder_3 = _2921;
                frontier_phi_60_61_ladder_4 = _2919;
                frontier_phi_60_61_ladder_5 = _2925;
            }
            _3040 = frontier_phi_60_61_ladder_4;
            _3042 = frontier_phi_60_61_ladder_3;
            _3044 = frontier_phi_60_61_ladder_2;
            _3046 = frontier_phi_60_61_ladder_5;
            _3048 = frontier_phi_60_61_ladder_1;
            _3050 = frontier_phi_60_61_ladder;
        }
        float _3055 = isnan(1.0) ? _817 : (isnan(_817) ? 1.0 : min(_817, 1.0));
        _2823 = (_3055 * _3046) + _2354;
        _2825 = (_3055 * _3048) + _2356;
        _2827 = (_3055 * _3050) + _2358;
        _2829 = ((_3040 * 0.039999999105930328369140625) * _3055) + _2677;
        _2831 = ((_3042 * 0.039999999105930328369140625) * _3055) + _2679;
        _2833 = ((_3044 * 0.039999999105930328369140625) * _3055) + _2681;
    }
    else
    {
        _2823 = _2354;
        _2825 = _2356;
        _2827 = _2358;
        _2829 = _2677;
        _2831 = _2679;
        _2833 = _2681;
    }
    uint _2839 = _793 + uint(cbMatDynParam._m0[0u].w);
    float _2845 = ((((((_574.x - _571) * _507) + _571) * cbMtdParam._m0[13u].x) + ((((_528.x - _525) * _507) + _525) * cbMtdParam._m0[11u].x)) * _360) * cbInstanceData._m0[_2839].x;
    float _2846 = ((((((_574.y - _572) * _507) + _572) * cbMtdParam._m0[13u].y) + ((((_528.y - _526) * _507) + _526) * cbMtdParam._m0[11u].y)) * _360) * cbInstanceData._m0[_2839].y;
    float _2847 = ((((((_574.z - _573) * _507) + _573) * cbMtdParam._m0[13u].z) + ((((_528.z - _527) * _507) + _527) * cbMtdParam._m0[11u].z)) * _360) * cbInstanceData._m0[_2839].z;
    float _4776 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _4787 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _4798 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _2864 = (((isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0))) * (_2823 + ((isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0))) * _817))) + ((_2829 + ((isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0))) * _1623)) * cbPerFrame._m0[3u].x)) + _2845;
    float _2866 = (_2846 + ((_2831 + ((isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0))) * _1623)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0))) * (_2825 + ((isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0))) * _817)));
    float _2868 = (_2847 + ((_2833 + ((isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0))) * _1623)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0))) * (_2827 + ((isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0))) * _817)));
    float _4824 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2881 = isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0));
    uint _2882 = _792 + 6u;
    float _2890 = _752 / cbSceneParam._m0[86u].x;
    float _2891 = _753 / cbSceneParam._m0[86u].y;
    vec4 _2905 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2890, _2891, (log2((isnan(cbSceneParam._m0[77u].w) ? _686 : (isnan(_686) ? cbSceneParam._m0[77u].w : min(_686, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2907 = _2905.x;
    float _2908 = _2905.y;
    float _2909 = _2905.z;
    float _2910 = _2905.w;
    float _2981;
    float _2983;
    float _2985;
    float _2987;
    if (_686 > cbSceneParam._m0[78u].w)
    {
        float _2944 = isnan(_686) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _686 : min(cbSceneParam._m0[80u].w, _686));
        float _2945 = _2944 / _686;
        float _2956 = _2945 * _737;
        float _2957 = _738 * _2945;
        float _2958 = (-0.0) - _2957;
        float _2959 = _2945 * _739;
        float _2961 = (cbSceneParam._m0[77u].w * _2958) / _2944;
        float _2962 = _2961 + cbSceneParam._m0[79u].w;
        float _2963 = cbSceneParam._m0[79u].w - _2957;
        float _2969 = sqrt(((_2956 * _2956) + (_2957 * _2957)) + (_2959 * _2959));
        float _2972 = (1.0 - (cbSceneParam._m0[77u].w / _2944)) * _2969;
        float _2977 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2979 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3141;
        if (abs((_2958 - _2961) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3141 = ((((_2962 > 0.0) ? exp2(_2977 * _2962) : (2.0 - exp2(_2979 * _2962))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2972;
        }
        else
        {
            float _3101 = 1.0 / cbSceneParam._m0[80u].x;
            float _3102 = isnan(_2963) ? _2962 : (isnan(_2962) ? _2963 : max(_2962, _2963));
            float _3103 = isnan(_2963) ? _2962 : (isnan(_2962) ? _2963 : min(_2962, _2963));
            float _3112 = isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : min(_3102, 0.0));
            float _3113 = isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : min(_3103, 0.0));
            _3141 = ((abs(_2969 / _2958) * cbSceneParam._m0[80u].y) * ((((_3112 - _3113) * 2.0) - ((exp2(_2977 * (isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : max(_3102, 0.0)))) - exp2(_2977 * (isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : max(_3103, 0.0))))) * _3101)) - ((exp2(_2979 * _3112) - exp2(_2979 * _3113)) * _3101))) + (_2972 * cbSceneParam._m0[80u].z);
        }
        vec4 _3143 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2890, _2891, 1.0), 0.0);
        float _3152 = exp2((_3141 * (-1.44269502162933349609375)) * (1.0 - _3143.w));
        float _3153 = log2(_3152);
        float _3169 = log2(_2910);
        _2981 = (exp2(_3169 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3153 * cbSceneParam._m0[78u].x)) * _3143.x) / cbSceneParam._m0[78u].x)) + _2907;
        _2983 = (exp2(_3169 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3153 * cbSceneParam._m0[78u].y)) * _3143.y) / cbSceneParam._m0[78u].y)) + _2908;
        _2985 = (exp2(_3169 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3153 * cbSceneParam._m0[78u].z)) * _3143.z) / cbSceneParam._m0[78u].z)) + _2909;
        _2987 = _3152 * _2910;
    }
    else
    {
        _2981 = _2907;
        _2983 = _2908;
        _2985 = _2909;
        _2987 = _2910;
    }
    float _2999 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3000 = _2999 == 3.0;
    float _3001 = log2(_2987);
    float _3005 = exp2(_3001 * cbSceneParam._m0[78u].x);
    float _3006 = exp2(_3001 * cbSceneParam._m0[78u].y);
    float _3007 = exp2(_3001 * cbSceneParam._m0[78u].z);
    float _3008 = _3005 * (isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0)));
    float _3009 = _3006 * (isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0)));
    float _3010 = _3007 * (isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0)));
    float _3019 = (_2999 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3019 * (_3000 ? _3008 : (_3008 + (cbSceneParam._m0[72u].w * _2981)));
    SV_Target.y = _3019 * (_3000 ? _3009 : (_3009 + (cbSceneParam._m0[72u].w * _2983)));
    SV_Target.z = _3019 * (_3000 ? _3010 : (_3010 + (cbSceneParam._m0[72u].w * _2985)));
    SV_Target.w = cbInstanceData._m0[_2882].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2845) * _2881) * _3005) * _3019;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2846) * _2881) * _3006) * _3019;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2847) * _2881) * _3007) * _3019;
    SV_Target_1.w = cbInstanceData._m0[_2882].w;
}


