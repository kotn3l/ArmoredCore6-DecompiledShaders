#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1080;
float _3785;
float _3786;
float _3787;
float _3788;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _197 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _198 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _199 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _205 = inversesqrt(dot(vec3(_197, _198, _199), vec3(_197, _198, _199)));
    float _212 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _219 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _241 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _247 = _241.x * cbMtdParam._m0[9u].x;
    float _248 = _241.y * cbMtdParam._m0[9u].y;
    float _249 = _241.z * cbMtdParam._m0[9u].z;
    vec4 _266 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    vec4 _281 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[6u].w));
    float _283 = _281.x;
    vec4 _295 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _299 = _295.z;
    float _303 = (_295.x * 2.0) + (-1.0);
    float _305 = (_295.y * 2.0) + (-1.0);
    float _306 = dot(vec2(_303, _305), vec2(_303, _305));
    float _3797 = isnan(0.0) ? _306 : (isnan(_306) ? 0.0 : max(_306, 0.0));
    float _312 = sqrt(1.0 - (isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0))));
    float _325 = (cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _326 = (cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _356 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * ((cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * ((cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[10u].w));
    float _361 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[15u].w;
    float _368 = ((_356.y * 0.5) + (-0.25)) * cbMtdParam._m0[15u].z;
    float _370 = (-0.0) - (cbMtdParam._m0[15u].z * ((_356.x * 0.5) + (-0.25)));
    float _372 = fract(_361);
    float _374 = fract(_361 + 0.5);
    float _375 = _372 * _370;
    float _376 = _368 * _372;
    float _379 = _374 * _370;
    float _380 = _368 * _374;
    float _385 = abs((_372 * 2.0) + (-1.0));
    vec4 _401 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_375 + _325) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_376 + _326) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _403 = _401.x;
    float _404 = _401.y;
    float _405 = _401.z;
    vec4 _406 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_379 + _325) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_380 + _326) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _433 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _434 = (cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _447 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_375 + _433) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_376 + _434) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _449 = _447.x;
    float _450 = _447.y;
    float _451 = _447.z;
    vec4 _452 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_379 + _433) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_380 + _434) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _479 = (TEXCOORD_9.x - ((cbMtdParam._m0[16u].y * (1.0 - TEXCOORD_9.x)) * (_266.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[16u].z + 1.0);
    float _3808 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _480 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
    float _486 = fma(_312, _212 * NORMAL.x, fma(_305, _219 * TANGENT.x, (_205 * _197) * _303));
    float _489 = fma(_312, _212 * NORMAL.y, fma(_305, _219 * TANGENT.y, (_205 * _198) * _303));
    float _492 = fma(_312, _212 * NORMAL.z, fma(_305, _219 * TANGENT.z, (_205 * _199) * _303));
    float _496 = inversesqrt(dot(vec3(_486, _489, _492), vec3(_486, _489, _492)));
    float _497 = _496 * _486;
    float _498 = _496 * _489;
    float _499 = _496 * _492;
    float _3819 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _500 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
    float _3830 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _3841 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _3852 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _3863 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    float _504 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
    float _520 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _561 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _571 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _561);
    float _572 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _561);
    float _573 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _561);
    float _577 = inversesqrt(dot(vec3(_571, _572, _573), vec3(_571, _572, _573)));
    float _578 = _571 * _577;
    float _579 = _572 * _577;
    float _580 = _573 * _577;
    vec4 _585 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _587 = _585.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _761 = sqrt(((_571 * _571) + (_572 * _572)) + (_573 * _573));
        float _767 = (cbMatDynParam._m0[5u].x * _761) + cbMatDynParam._m0[5u].y;
        float _3874 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
        float _768 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _772 = (cbMatDynParam._m0[5u].z * _761) + cbMatDynParam._m0[5u].w;
        float _3885 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) - _768)) + _768) < ((_587 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _598 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _599 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _619 = fma(_499, cbSceneParam._m0[5u].z, fma(_498, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _497));
    float _622 = fma(_499, cbSceneParam._m0[6u].z, fma(_498, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _497));
    float _625 = fma(_499, cbSceneParam._m0[7u].z, fma(_498, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _497));
    uint _638 = uint(roundEven(NORMAL.w)) * 13u;
    uint _639 = _638 + 9u;
    uint _640 = _639 + uint(cbMatDynParam._m0[0u].w);
    float _646 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0)))) * cbInstanceData._m0[_640].x;
    float _647 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0)))) * cbInstanceData._m0[_640].y;
    float _648 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0)))) * cbInstanceData._m0[_640].z;
    float _3896 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _649 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
    float _3907 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _650 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
    float _3918 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _651 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
    float _652 = 1.0 - _504;
    float _653 = _649 * _652;
    float _654 = _650 * _652;
    float _655 = _651 * _652;
    float _660 = (_649 + (-0.039999999105930328369140625)) * _504;
    float _661 = (_650 + (-0.039999999105930328369140625)) * _504;
    float _662 = (_651 + (-0.039999999105930328369140625)) * _504;
    float _663 = _660 + 0.039999999105930328369140625;
    float _665 = _661 + 0.039999999105930328369140625;
    float _666 = _662 + 0.039999999105930328369140625;
    vec4 _675 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _598, cbSceneParam._m0[86u].y * _599));
    float _678 = _675.x * TEXCOORD_3.w;
    float _679 = dot(vec3(_497, _498, _499), vec3(_578, _579, _580));
    float _682 = _679 * 2.0;
    float _686 = (_682 * _497) - _578;
    float _687 = (_682 * _498) - _579;
    float _688 = (_682 * _499) - _580;
    float _692 = abs(dot(vec3(_578, _579, _580), vec3(_497, _498, _499)));
    float _3929 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _694 = sqrt(_500);
    float _707 = exp2((_694 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_694 * 3.0));
    float _713 = (1.0 - _707) * ((_694 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _714 = _707 * _694;
    float _742 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _746 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _750 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1079;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _805 = fma(_750, cbModelParam._m0[26u].z, fma(_746, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _742));
        float _809 = fma(_750, cbModelParam._m0[27u].z, fma(_746, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _742));
        float _813 = fma(_750, cbModelParam._m0[28u].z, fma(_746, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _742));
        float _837 = _742 + _497;
        float _838 = _746 + _498;
        float _839 = _750 + _499;
        float _849 = fma(_839, cbModelParam._m0[26u].z, fma(_838, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _837)) - _805;
        float _850 = fma(_839, cbModelParam._m0[27u].z, fma(_838, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _837)) - _809;
        float _851 = fma(_839, cbModelParam._m0[28u].z, fma(_838, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _837)) - _813;
        float _855 = inversesqrt(dot(vec3(_849, _850, _851), vec3(_849, _850, _851)));
        float _868 = ((_855 * _849) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_805 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _869 = ((_855 * _850) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_809 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _870 = ((_855 * _851) / cbModelParam._m0[34u].z) + ((((((_813 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _873 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_868, _869, _870), 0.0);
        vec4 _880 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_868, _869, _870), 0.0);
        vec4 _887 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_868, _869, _870), 0.0);
        vec4 _894 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_868, _869, _870), 0.0);
        float _907 = exp2((_873.w + (-0.5)) * 20.0) * 2.0;
        float _908 = _907 * (_873.x + (-0.5));
        float _909 = _907 * (_873.y + (-0.5));
        float _910 = _907 * (_873.z + (-0.5));
        float _917 = exp2((_880.w + (-0.5)) * 20.0) * 2.0;
        float _918 = _917 * (_880.x + (-0.5));
        float _919 = _917 * (_880.y + (-0.5));
        float _920 = _917 * (_880.z + (-0.5));
        float _927 = exp2((_887.w + (-0.5)) * 20.0) * 2.0;
        float _928 = _927 * (_887.x + (-0.5));
        float _929 = _927 * (_887.y + (-0.5));
        float _930 = _927 * (_887.z + (-0.5));
        float _937 = exp2((_894.w + (-0.5)) * 20.0) * 2.0;
        float _938 = _937 * (_894.x + (-0.5));
        float _939 = _937 * (_894.y + (-0.5));
        float _940 = _937 * (_894.z + (-0.5));
        float _941 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _942 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _943 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _944 = _908 * 0.5;
        float _945 = _918 * 0.5;
        float _946 = _928 * 0.5;
        float _947 = dot(vec3(_944, _945, _946), vec3(_944, _945, _946));
        float _952 = (_947 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_947);
        float _961 = (dot(vec3(_497, _498, _499), vec3(_952 * _944, _952 * _945, _952 * _946)) + 1.0) * 0.5;
        float _3955 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _971 = sqrt(((_945 * _945) + (_944 * _944)) + (_946 * _946)) / (_941 + 9.9999997473787516355514526367188e-06);
        float _3966 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _972 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
        float _973 = _972 * 2.0;
        float _977 = (1.0 - _972) / (_972 + 1.0);
        float _3977 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _978 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _987 = ((((1.0 - _978) * (_973 + 2.0)) * exp2(log2(isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))) * (_973 + 1.0))) + _978) * _941;
        float _988 = _909 * 0.5;
        float _989 = _919 * 0.5;
        float _990 = _929 * 0.5;
        float _991 = dot(vec3(_988, _989, _990), vec3(_988, _989, _990));
        float _996 = (_991 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_991);
        float _1004 = (dot(vec3(_497, _498, _499), vec3(_996 * _988, _996 * _989, _996 * _990)) + 1.0) * 0.5;
        float _3988 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1013 = sqrt(((_989 * _989) + (_988 * _988)) + (_990 * _990)) / (_942 + 9.9999997473787516355514526367188e-06);
        float _3999 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1014 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _1015 = _1014 * 2.0;
        float _1019 = (1.0 - _1014) / (_1014 + 1.0);
        float _4010 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1020 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1029 = ((((1.0 - _1020) * (_1015 + 2.0)) * exp2(log2(isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))) * (_1015 + 1.0))) + _1020) * _942;
        float _1030 = _910 * 0.5;
        float _1031 = _920 * 0.5;
        float _1032 = _930 * 0.5;
        float _1033 = dot(vec3(_1030, _1031, _1032), vec3(_1030, _1031, _1032));
        float _1038 = (_1033 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1033);
        float _1046 = (dot(vec3(_497, _498, _499), vec3(_1038 * _1030, _1038 * _1031, _1038 * _1032)) + 1.0) * 0.5;
        float _4021 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1055 = sqrt(((_1031 * _1031) + (_1030 * _1030)) + (_1032 * _1032)) / (_943 + 9.9999997473787516355514526367188e-06);
        float _4032 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1056 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _1057 = _1056 * 2.0;
        float _1061 = (1.0 - _1056) / (_1056 + 1.0);
        float _4043 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1062 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1071 = ((((1.0 - _1062) * (_1057 + 2.0)) * exp2(log2(isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * (_1057 + 1.0))) + _1062) * _943;
        _1079 = _910;
        _1081 = _909;
        _1082 = _908;
        _1083 = _920;
        _1084 = _919;
        _1085 = _918;
        _1086 = _930;
        _1087 = _929;
        _1088 = _928;
        _1089 = _943;
        _1090 = _942;
        _1091 = _941;
        _1092 = cbModelParam._m0[36u].z * (isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0)));
        _1093 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0)));
        _1094 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0)));
    }
    else
    {
        _1079 = _1080;
        _1081 = _1080;
        _1082 = _1080;
        _1083 = _1080;
        _1084 = _1080;
        _1085 = _1080;
        _1086 = _1080;
        _1087 = _1080;
        _1088 = _1080;
        _1089 = _1080;
        _1090 = _1080;
        _1091 = _1080;
        _1092 = 0.0;
        _1093 = 0.0;
        _1094 = 0.0;
    }
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1123 = fma(_750, cbModelParam._m0[30u].z, fma(_746, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _742));
        float _1127 = fma(_750, cbModelParam._m0[31u].z, fma(_746, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _742));
        float _1131 = fma(_750, cbModelParam._m0[32u].z, fma(_746, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _742));
        float _1154 = _742 + _497;
        float _1155 = _746 + _498;
        float _1156 = _750 + _499;
        float _1166 = fma(_1156, cbModelParam._m0[30u].z, fma(_1155, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1154)) - _1123;
        float _1167 = fma(_1156, cbModelParam._m0[31u].z, fma(_1155, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1154)) - _1127;
        float _1168 = fma(_1156, cbModelParam._m0[32u].z, fma(_1155, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1154)) - _1131;
        float _1172 = inversesqrt(dot(vec3(_1166, _1167, _1168), vec3(_1166, _1167, _1168)));
        float _1185 = ((_1172 * _1166) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1123 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1186 = ((_1172 * _1167) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1127 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1187 = ((_1172 * _1168) / cbModelParam._m0[35u].z) + ((((((_1131 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1189 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        vec4 _1196 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        vec4 _1203 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        vec4 _1210 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        float _1222 = exp2((_1189.w + (-0.5)) * 20.0) * 2.0;
        float _1223 = _1222 * (_1189.x + (-0.5));
        float _1224 = _1222 * (_1189.y + (-0.5));
        float _1225 = _1222 * (_1189.z + (-0.5));
        float _1232 = exp2((_1196.w + (-0.5)) * 20.0) * 2.0;
        float _1233 = _1232 * (_1196.x + (-0.5));
        float _1234 = _1232 * (_1196.y + (-0.5));
        float _1235 = _1232 * (_1196.z + (-0.5));
        float _1242 = exp2((_1203.w + (-0.5)) * 20.0) * 2.0;
        float _1243 = _1242 * (_1203.x + (-0.5));
        float _1244 = _1242 * (_1203.y + (-0.5));
        float _1245 = _1242 * (_1203.z + (-0.5));
        float _1252 = exp2((_1210.w + (-0.5)) * 20.0) * 2.0;
        float _1253 = _1252 * (_1210.x + (-0.5));
        float _1254 = _1252 * (_1210.y + (-0.5));
        float _1255 = _1252 * (_1210.z + (-0.5));
        float _1256 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1257 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1258 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1259 = _1223 * 0.5;
        float _1260 = _1233 * 0.5;
        float _1261 = _1243 * 0.5;
        float _1262 = dot(vec3(_1259, _1260, _1261), vec3(_1259, _1260, _1261));
        float _1267 = (_1262 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1262);
        float _1275 = (dot(vec3(_497, _498, _499), vec3(_1267 * _1259, _1267 * _1260, _1267 * _1261)) + 1.0) * 0.5;
        float _4084 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1284 = sqrt(((_1260 * _1260) + (_1259 * _1259)) + (_1261 * _1261)) / (_1256 + 9.9999997473787516355514526367188e-06);
        float _4095 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1285 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _1286 = _1285 * 2.0;
        float _1290 = (1.0 - _1285) / (_1285 + 1.0);
        float _4106 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _1300 = ((((1.0 - _1291) * (_1286 + 2.0)) * exp2(log2(isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) * (_1286 + 1.0))) + _1291) * _1256;
        float _1301 = _1224 * 0.5;
        float _1302 = _1234 * 0.5;
        float _1303 = _1244 * 0.5;
        float _1304 = dot(vec3(_1301, _1302, _1303), vec3(_1301, _1302, _1303));
        float _1309 = (_1304 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1304);
        float _1317 = (dot(vec3(_497, _498, _499), vec3(_1309 * _1301, _1309 * _1302, _1309 * _1303)) + 1.0) * 0.5;
        float _4117 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1326 = sqrt(((_1302 * _1302) + (_1301 * _1301)) + (_1303 * _1303)) / (_1257 + 9.9999997473787516355514526367188e-06);
        float _4128 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _1328 = _1327 * 2.0;
        float _1332 = (1.0 - _1327) / (_1327 + 1.0);
        float _4139 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _1342 = ((((1.0 - _1333) * (_1328 + 2.0)) * exp2(log2(isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * (_1328 + 1.0))) + _1333) * _1257;
        float _1343 = _1225 * 0.5;
        float _1344 = _1235 * 0.5;
        float _1345 = _1245 * 0.5;
        float _1346 = dot(vec3(_1343, _1344, _1345), vec3(_1343, _1344, _1345));
        float _1351 = (_1346 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1346);
        float _1359 = (dot(vec3(_497, _498, _499), vec3(_1351 * _1343, _1351 * _1344, _1351 * _1345)) + 1.0) * 0.5;
        float _4150 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1368 = sqrt(((_1344 * _1344) + (_1343 * _1343)) + (_1345 * _1345)) / (_1258 + 9.9999997473787516355514526367188e-06);
        float _4161 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1370 = _1369 * 2.0;
        float _1374 = (1.0 - _1369) / (_1369 + 1.0);
        float _4172 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1384 = ((((1.0 - _1375) * (_1370 + 2.0)) * exp2(log2(isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * (_1370 + 1.0))) + _1375) * _1258;
        _1392 = _1225;
        _1393 = _1224;
        _1394 = _1223;
        _1395 = _1235;
        _1396 = _1234;
        _1397 = _1233;
        _1398 = _1245;
        _1399 = _1244;
        _1400 = _1243;
        _1401 = _1258;
        _1402 = _1257;
        _1403 = _1256;
        _1404 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0)));
        _1405 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0)));
        _1406 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0)));
    }
    else
    {
        _1392 = _1080;
        _1393 = _1080;
        _1394 = _1080;
        _1395 = _1080;
        _1396 = _1080;
        _1397 = _1080;
        _1398 = _1080;
        _1399 = _1080;
        _1400 = _1080;
        _1401 = _1080;
        _1402 = _1080;
        _1403 = _1080;
        _1404 = 0.0;
        _1405 = 0.0;
        _1406 = 0.0;
    }
    float _1416 = (cbModelParam._m0[1u].x * (_1404 - _1092)) + _1092;
    float _1417 = (cbModelParam._m0[1u].x * (_1405 - _1093)) + _1093;
    float _1418 = (cbModelParam._m0[1u].x * (_1406 - _1094)) + _1094;
    float _1439 = fma(_1418, cbSceneParam._m0[89u].z, fma(_1417, cbSceneParam._m0[89u].y, _1416 * cbSceneParam._m0[89u].x));
    float _1442 = fma(_1418, cbSceneParam._m0[90u].z, fma(_1417, cbSceneParam._m0[90u].y, _1416 * cbSceneParam._m0[90u].x));
    float _1445 = fma(_1418, cbSceneParam._m0[91u].z, fma(_1417, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1416));
    float _1460 = _686 * 0.5;
    float _1461 = _687 * 0.5;
    float _1462 = _688 * 0.5;
    float _1463 = dot(vec4(_1460, _1461, _1462, 1.0), vec4(_1394, _1397, _1400, _1403));
    float _1466 = dot(vec4(_1460, _1461, _1462, 1.0), vec4(_1393, _1396, _1399, _1402));
    float _1469 = dot(vec4(_1460, _1461, _1462, 1.0), vec4(_1392, _1395, _1398, _1401));
    float _1503;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1476 = dot(vec4(_1460, _1461, _1462, 1.0), vec4(_1079, _1083, _1086, _1089));
        float _1480 = dot(vec4(_1460, _1461, _1462, 1.0), vec4(_1081, _1084, _1087, _1090));
        float _1484 = dot(vec4(_1460, _1461, _1462, 1.0), vec4(_1082, _1085, _1088, _1091));
        float _1491 = dot(vec4(cbModelParam._m0[39u]), vec4(_1460, _1461, _1462, 1.0));
        _1503 = dot(vec3(isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0)), isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0)), isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1491) ? 0.0 : (isnan(0.0) ? _1491 : max(0.0, _1491))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1503 = 1.0;
    }
    float _1514;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1505 = dot(vec4(cbModelParam._m0[40u]), vec4(_1460, _1461, _1462, 1.0));
        _1514 = dot(vec3(isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0)), isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0)), isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1505) ? 0.0 : (isnan(0.0) ? _1505 : max(0.0, _1505))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1514 = 1.0;
    }
    float _1518 = (_1514 * cbModelParam._m0[1u].x) + (_1503 * (1.0 - cbModelParam._m0[1u].x));
    float _1528 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _500);
    float _1529 = isnan(_1528) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1528 : min(cbModelParam._m0[25u].z, _1528));
    float _1610;
    float _1612;
    float _1614;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1577 = fma(_750, cbModelParam._m0[13u].z, fma(_746, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _742)) + cbModelParam._m0[13u].w;
        float _1581 = fma(_750, cbModelParam._m0[14u].z, fma(_746, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _742)) + cbModelParam._m0[14u].w;
        float _1585 = fma(_750, cbModelParam._m0[15u].z, fma(_746, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _742)) + cbModelParam._m0[15u].w;
        float _1588 = fma(_688, cbModelParam._m0[13u].z, fma(_687, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _686));
        float _1591 = fma(_688, cbModelParam._m0[14u].z, fma(_687, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _686));
        float _1594 = fma(_688, cbModelParam._m0[15u].z, fma(_687, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _686));
        float _1622;
        if (_1588 > 0.0)
        {
            _1622 = abs((1.0 - _1577) / _1588);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1588 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1577 + 1.0) / _1588);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1622 = frontier_phi_17_15_ladder;
        }
        float _1795;
        if (_1591 > 0.0)
        {
            _1795 = abs((1.0 - _1581) / _1591);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1591 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1581 + 1.0) / _1591);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1795 = frontier_phi_26_22_ladder;
        }
        float _2091;
        if (_1594 > 0.0)
        {
            _2091 = abs((1.0 - _1585) / _1594);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1594 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1585 + 1.0) / _1594);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2091 = frontier_phi_38_33_ladder;
        }
        float _2093 = isnan(_1795) ? _1622 : (isnan(_1622) ? _1795 : min(_1622, _1795));
        float _2094 = isnan(_2091) ? _2093 : (isnan(_2093) ? _2091 : min(_2093, _2091));
        float _2098 = (_2094 * _1588) + _1577;
        float _2099 = (_2094 * _1591) + _1581;
        float _2100 = (_2094 * _1594) + _1585;
        float _2101 = _2094 * 9.9999997473787516355514526367188e-05;
        float _2103 = (-1.0) - _2101;
        float _2105 = _2101 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2100 > _2105) || ((_2100 < _2103) || ((_2099 > _2105) || ((_2099 < _2103) || ((_2098 < _2103) || (_2098 > _2105))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2245 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2100, cbModelParam._m0[9u].z, fma(_2099, cbModelParam._m0[9u].y, _2098 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2100, cbModelParam._m0[10u].z, fma(_2099, cbModelParam._m0[10u].y, _2098 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2100, cbModelParam._m0[11u].z, fma(_2099, cbModelParam._m0[11u].y, _2098 * cbModelParam._m0[11u].x))), _1529);
            frontier_phi_16_38_ladder = _2245.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2245.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2245.x * cbModelParam._m0[1u].y;
        }
        _1610 = frontier_phi_16_38_ladder_2;
        _1612 = frontier_phi_16_38_ladder_1;
        _1614 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1598 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_686, _687, _688), _1529);
        _1610 = _1598.x * cbModelParam._m0[1u].y;
        _1612 = _1598.y * cbModelParam._m0[1u].y;
        _1614 = _1598.z * cbModelParam._m0[1u].y;
    }
    float _1618 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _500);
    float _1619 = isnan(_1618) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1618 : min(cbModelParam._m0[25u].w, _1618));
    float _1709;
    float _1711;
    float _1713;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1673 = fma(_750, cbModelParam._m0[21u].z, fma(_746, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _742)) + cbModelParam._m0[21u].w;
        float _1677 = fma(_750, cbModelParam._m0[22u].z, fma(_746, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _742)) + cbModelParam._m0[22u].w;
        float _1681 = fma(_750, cbModelParam._m0[23u].z, fma(_746, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _742)) + cbModelParam._m0[23u].w;
        float _1684 = fma(_688, cbModelParam._m0[21u].z, fma(_687, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _686));
        float _1687 = fma(_688, cbModelParam._m0[22u].z, fma(_687, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _686));
        float _1690 = fma(_688, cbModelParam._m0[23u].z, fma(_687, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _686));
        float _1800;
        if (_1684 > 0.0)
        {
            _1800 = abs((1.0 - _1673) / _1684);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1684 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1673 + 1.0) / _1684);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1800 = frontier_phi_28_24_ladder;
        }
        float _2118;
        if (_1687 > 0.0)
        {
            _2118 = abs((1.0 - _1677) / _1687);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1687 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1677 + 1.0) / _1687);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2118 = frontier_phi_40_35_ladder;
        }
        float _2456;
        if (_1690 > 0.0)
        {
            _2456 = abs((1.0 - _1681) / _1690);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1690 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1681 + 1.0) / _1690);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2456 = frontier_phi_50_47_ladder;
        }
        float _2458 = isnan(_2118) ? _1800 : (isnan(_1800) ? _2118 : min(_1800, _2118));
        float _2459 = isnan(_2456) ? _2458 : (isnan(_2458) ? _2456 : min(_2458, _2456));
        float _2463 = (_2459 * _1684) + _1673;
        float _2464 = (_2459 * _1687) + _1677;
        float _2465 = (_2459 * _1690) + _1681;
        float _2466 = _2459 * 9.9999997473787516355514526367188e-05;
        float _2467 = (-1.0) - _2466;
        float _2469 = _2466 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2465 > _2469) || ((_2465 < _2467) || ((_2464 > _2469) || ((_2464 < _2467) || ((_2463 < _2467) || (_2463 > _2469))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2587 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2465, cbModelParam._m0[17u].z, fma(_2464, cbModelParam._m0[17u].y, _2463 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2465, cbModelParam._m0[18u].z, fma(_2464, cbModelParam._m0[18u].y, _2463 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2465, cbModelParam._m0[19u].z, fma(_2464, cbModelParam._m0[19u].y, _2463 * cbModelParam._m0[19u].x))), _1619);
            frontier_phi_25_50_ladder = _2587.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2587.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2587.x * cbModelParam._m0[1u].z;
        }
        _1709 = frontier_phi_25_50_ladder_2;
        _1711 = frontier_phi_25_50_ladder_1;
        _1713 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1693 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_686, _687, _688), _1619);
        _1709 = _1693.x * cbModelParam._m0[1u].z;
        _1711 = _1693.y * cbModelParam._m0[1u].z;
        _1713 = _1693.z * cbModelParam._m0[1u].z;
    }
    float _1726 = (((_713 * _663) + _714) * _678) * ((cbModelParam._m0[1u].w * (_1709 - _1610)) + _1610);
    float _1728 = (((_713 * _665) + _714) * _678) * ((cbModelParam._m0[1u].w * (_1711 - _1612)) + _1612);
    float _1730 = (((_713 * _666) + _714) * _678) * ((cbModelParam._m0[1u].w * (_1713 - _1614)) + _1614);
    float _1733 = fma(_1730, cbSceneParam._m0[89u].z, fma(_1728, cbSceneParam._m0[89u].y, _1726 * cbSceneParam._m0[89u].x));
    float _1736 = fma(_1730, cbSceneParam._m0[90u].z, fma(_1728, cbSceneParam._m0[90u].y, _1726 * cbSceneParam._m0[90u].x));
    float _1739 = fma(_1730, cbSceneParam._m0[91u].z, fma(_1728, cbSceneParam._m0[91u].y, _1726 * cbSceneParam._m0[91u].x));
    float _1774 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1778 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1782 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1786 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1787 = _1774 / _1786;
    float _1788 = _1778 / _1786;
    float _1789 = _1782 / _1786;
    float _1936;
    float _1937;
    float _1938;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1816 = ((uint(_1789 > cbSceneParam._m0[59u].y) + uint(_1789 > cbSceneParam._m0[59u].x)) + uint(_1789 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1817 = _1816 + 43u;
        uint _1825 = _1816 + 44u;
        uint _1833 = _1816 + 45u;
        uint _1841 = _1816 + 46u;
        float _1852 = fma(_1786, cbSceneParam._m0[_1817].w, fma(_1782, cbSceneParam._m0[_1817].z, fma(_1778, cbSceneParam._m0[_1817].y, _1774 * cbSceneParam._m0[_1817].x)));
        float _1856 = fma(_1786, cbSceneParam._m0[_1825].w, fma(_1782, cbSceneParam._m0[_1825].z, fma(_1778, cbSceneParam._m0[_1825].y, _1774 * cbSceneParam._m0[_1825].x)));
        float _1864 = fma(_1786, cbSceneParam._m0[_1841].w, fma(_1782, cbSceneParam._m0[_1841].z, fma(_1778, cbSceneParam._m0[_1841].y, _1774 * cbSceneParam._m0[_1841].x)));
        float _1869 = cbSceneParam._m0[33u].z * _1864;
        float _1871 = cbSceneParam._m0[33u].w * _1864;
        float _1874 = fma(_1786, cbSceneParam._m0[_1833].w, fma(_1782, cbSceneParam._m0[_1833].z, fma(_1778, cbSceneParam._m0[_1833].y, _1774 * cbSceneParam._m0[_1833].x))) / _1864;
        float _1922 = (cbSceneParam._m0[33u].x - sqrt(((_1788 * _1788) + (_1787 * _1787)) + (_1789 * _1789))) * cbSceneParam._m0[33u].y;
        float _4298 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
        float _1929 = (isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1869 + _1852) / _1864, (_1871 + _1856) / _1864), _1874), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1871 + _1852) / _1864, (_1856 - _1869) / _1864), _1874), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1852 - _1869) / _1864, (_1856 - _1871) / _1864), _1874), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1852 - _1871) / _1864, (_1869 + _1856) / _1864), _1874), 0.0)).x), vec4(0.25)));
        _1936 = 1.0 - (_1929 * cbSceneParam._m0[34u].x);
        _1937 = 1.0 - (_1929 * cbSceneParam._m0[34u].y);
        _1938 = 1.0 - (_1929 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1936 = 1.0;
        _1937 = 1.0;
        _1938 = 1.0;
    }
    float _2002;
    float _2004;
    float _2006;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1990 = fma(_1786, cbSceneParam._m0[63u].w, fma(_1782, cbSceneParam._m0[63u].z, fma(_1778, cbSceneParam._m0[63u].y, _1774 * cbSceneParam._m0[63u].x)));
        float _1991 = fma(_1786, cbSceneParam._m0[60u].w, fma(_1782, cbSceneParam._m0[60u].z, fma(_1778, cbSceneParam._m0[60u].y, _1774 * cbSceneParam._m0[60u].x))) / _1990;
        float _1992 = fma(_1786, cbSceneParam._m0[61u].w, fma(_1782, cbSceneParam._m0[61u].z, fma(_1778, cbSceneParam._m0[61u].y, _1774 * cbSceneParam._m0[61u].x))) / _1990;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1991 >= cbSceneParam._m0[64u].x) && (_1992 >= cbSceneParam._m0[64u].y)) && (_1991 <= cbSceneParam._m0[64u].z)) && (_1992 <= cbSceneParam._m0[64u].w))
        {
            float _2131 = fma(_1786, cbSceneParam._m0[62u].w, fma(_1782, cbSceneParam._m0[62u].z, fma(_1778, cbSceneParam._m0[62u].y, _1774 * cbSceneParam._m0[62u].x))) / _1990;
            float _2135 = isnan(cbSceneParam._m0[41u].w) ? _2131 : (isnan(_2131) ? cbSceneParam._m0[41u].w : max(_2131, cbSceneParam._m0[41u].w));
            float _2178 = (cbSceneParam._m0[33u].x - sqrt(((_1788 * _1788) + (_1787 * _1787)) + (_1789 * _1789))) * cbSceneParam._m0[33u].y;
            float _4314 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
            float _2185 = (isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1991, cbSceneParam._m0[33u].w + _1992), _2135), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1991, _1992 - cbSceneParam._m0[33u].z), _2135), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1991 - cbSceneParam._m0[33u].z, _1992 - cbSceneParam._m0[33u].w), _2135), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1991 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1992), _2135), 0.0)).x), vec4(0.25)));
            float _2189 = 1.0 - (_2185 * cbSceneParam._m0[34u].x);
            float _2190 = 1.0 - (_2185 * cbSceneParam._m0[34u].y);
            float _2191 = 1.0 - (_2185 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2191) ? _1938 : (isnan(_1938) ? _2191 : min(_1938, _2191));
            frontier_phi_37_36_ladder_1 = isnan(_2190) ? _1937 : (isnan(_1937) ? _2190 : min(_1937, _2190));
            frontier_phi_37_36_ladder_2 = isnan(_2189) ? _1936 : (isnan(_1936) ? _2189 : min(_1936, _2189));
        }
        else
        {
            frontier_phi_37_36_ladder = _1938;
            frontier_phi_37_36_ladder_1 = _1937;
            frontier_phi_37_36_ladder_2 = _1936;
        }
        _2002 = frontier_phi_37_36_ladder_2;
        _2004 = frontier_phi_37_36_ladder_1;
        _2006 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2002 = _1936;
        _2004 = _1937;
        _2006 = _1938;
    }
    uvec4 _2011 = floatBitsToUint(cbInstanceData._m0[_638 + 5u]);
    uint _2013 = _2011.x * 14u;
    uint _2014 = _2013 + 13u;
    float _2021 = _678 + (-1.0);
    float _2026 = (cbLight._m0[_2014].x * _2021) + 1.0;
    float _2027 = (cbLight._m0[_2014].y * _2021) + 1.0;
    float _2028 = (cbLight._m0[_2014].z * _2021) + 1.0;
    float _2029 = (cbLight._m0[_2014].w * _2021) + 1.0;
    uint _2030 = _2013 + 5u;
    float _2036 = isnan(1.0) ? _2027 : (isnan(_2027) ? 1.0 : min(_2027, 1.0));
    uint _2040 = _2013 + 4u;
    float _2050 = isnan(1.0) ? _2026 : (isnan(_2026) ? 1.0 : min(_2026, 1.0));
    uint _2054 = _2013 | 1u;
    float _2065 = dot(vec3(cbLight._m0[_2013].xyz), vec3(_497, _498, _499));
    float _2068 = dot(vec3(cbLight._m0[_2054].xyz), vec3(_497, _498, _499));
    float _4350 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
    float _4361 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
    float _2073 = (isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * 0.3183098733425140380859375;
    float _2075 = (isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0))) * 0.3183098733425140380859375;
    float _2082 = ((cbLight._m0[_2030].x * _2036) * _2075) + (((cbLight._m0[_2040].x * _2002) * _2050) * _2073);
    float _2083 = ((_2036 * cbLight._m0[_2030].y) * _2075) + (((cbLight._m0[_2040].y * _2004) * _2050) * _2073);
    float _2084 = ((_2036 * cbLight._m0[_2030].z) * _2075) + (((cbLight._m0[_2040].z * _2006) * _2050) * _2073);
    uvec4 _2088 = floatBitsToUint(cbLight._m0[_2013 + 12u]);
    bool _2090 = _2088.x == 0u;
    float _2192;
    float _2194;
    float _2196;
    if (_2090)
    {
        _2192 = _2082;
        _2194 = _2083;
        _2196 = _2084;
    }
    else
    {
        uint _2200 = _2013 + 6u;
        float _2216 = (dot(vec3(cbLight._m0[_2013 + 2u].xyz), vec3(_497, _498, _499)) * 0.5) + 0.5;
        float _2217 = _2216 * _2216;
        float _4372 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
        float _2218 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
        float _2219 = isnan(1.0) ? _2028 : (isnan(_2028) ? 1.0 : min(_2028, 1.0));
        _2192 = (((cbLight._m0[_2200].x * 0.3183098733425140380859375) * _2218) * _2219) + _2082;
        _2194 = (((cbLight._m0[_2200].y * 0.3183098733425140380859375) * _2218) * _2219) + _2083;
        _2196 = (((cbLight._m0[_2200].z * 0.3183098733425140380859375) * _2218) * _2219) + _2084;
    }
    bool _2199 = _2088.y == 0u;
    float _2254;
    float _2256;
    float _2258;
    if (_2199)
    {
        _2254 = _2192;
        _2256 = _2194;
        _2258 = _2196;
    }
    else
    {
        uint _2427 = _2013 + 7u;
        float _2443 = (dot(vec3(cbLight._m0[_2013 + 3u].xyz), vec3(_497, _498, _499)) * 0.5) + 0.5;
        float _2444 = _2443 * _2443;
        float _4388 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
        float _2445 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
        float _2446 = isnan(1.0) ? _2029 : (isnan(_2029) ? 1.0 : min(_2029, 1.0));
        _2254 = (((cbLight._m0[_2427].x * 0.3183098733425140380859375) * _2445) * _2446) + _2192;
        _2256 = (((cbLight._m0[_2427].y * 0.3183098733425140380859375) * _2445) * _2446) + _2194;
        _2258 = (((cbLight._m0[_2427].z * 0.3183098733425140380859375) * _2445) * _2446) + _2196;
    }
    uint _2261 = _2013 + 8u;
    float _2274 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2013].w)) * _500) * 0.949999988079071044921875);
    float _2275 = _2274 * _2274;
    float _2276 = cbLight._m0[_2013].x + _578;
    float _2277 = cbLight._m0[_2013].y + _579;
    float _2278 = cbLight._m0[_2013].z + _580;
    float _2282 = inversesqrt(dot(vec3(_2276, _2277, _2278), vec3(_2276, _2277, _2278)));
    float _2283 = _2282 * _2276;
    float _2284 = _2282 * _2277;
    float _2285 = _2282 * _2278;
    float _2286 = dot(vec3(_497, _498, _499), vec3(cbLight._m0[_2013].xyz));
    float _4404 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
    float _2289 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
    float _4415 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _2290 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
    float _2291 = dot(vec3(_497, _498, _499), vec3(_2283, _2284, _2285));
    float _4426 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
    float _2294 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
    float _2295 = dot(vec3(cbLight._m0[_2013].xyz), vec3(_2283, _2284, _2285));
    float _4437 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
    float _2299 = _2275 * _2275;
    float _2303 = ((_2294 * _2294) * (_2299 + (-1.0))) + 1.0;
    float _2311 = exp2(log2(1.0 - (isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0)))) * 5.0);
    float _2312 = 0.959999978542327880859375 - _660;
    float _2314 = 0.959999978542327880859375 - _661;
    float _2315 = 0.959999978542327880859375 - _662;
    float _2322 = 1.0 - _2275;
    float _2333 = (0.5 / (((_2290 * ((_2289 * _2322) + _2275)) + 9.9999999392252902907785028219223e-09) + (((_2290 * _2322) + _2275) * _2289))) * _2289;
    float _4448 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
    float _2335 = (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0))) * (_2299 / ((_2303 * _2303) * 3.141590118408203125));
    uint _2349 = _2013 + 9u;
    float _2360 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2054].w)) * _500) * 0.949999988079071044921875);
    float _2361 = _2360 * _2360;
    float _2362 = cbLight._m0[_2054].x + _578;
    float _2363 = cbLight._m0[_2054].y + _579;
    float _2364 = cbLight._m0[_2054].z + _580;
    float _2368 = inversesqrt(dot(vec3(_2362, _2363, _2364), vec3(_2362, _2363, _2364)));
    float _2369 = _2368 * _2362;
    float _2370 = _2368 * _2363;
    float _2371 = _2368 * _2364;
    float _2372 = dot(vec3(_497, _498, _499), vec3(cbLight._m0[_2054].xyz));
    float _4459 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
    float _2375 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
    float _2376 = dot(vec3(_497, _498, _499), vec3(_2369, _2370, _2371));
    float _4470 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
    float _2379 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
    float _2380 = dot(vec3(cbLight._m0[_2054].xyz), vec3(_2369, _2370, _2371));
    float _4481 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
    float _2384 = _2361 * _2361;
    float _2388 = ((_2379 * _2379) * (_2384 + (-1.0))) + 1.0;
    float _2395 = exp2(log2(1.0 - (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0)))) * 5.0);
    float _2402 = 1.0 - _2361;
    float _2412 = (0.5 / (((_2290 * ((_2375 * _2402) + _2361)) + 9.9999999392252902907785028219223e-09) + (((_2290 * _2402) + _2361) * _2375))) * _2375;
    float _4492 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
    float _2414 = (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0))) * (_2384 / ((_2388 * _2388) * 3.141590118408203125));
    float _2424 = (((((_2395 * _2312) + _663) * cbLight._m0[_2349].x) * _2414) * _2036) + ((((cbLight._m0[_2261].x * _2002) * ((_2311 * _2312) + _663)) * _2335) * _2050);
    float _2425 = (((((_2395 * _2314) + _665) * cbLight._m0[_2349].y) * _2414) * _2036) + ((((cbLight._m0[_2261].y * _2004) * ((_2311 * _2314) + _665)) * _2335) * _2050);
    float _2426 = (((((_2395 * _2315) + _666) * cbLight._m0[_2349].z) * _2414) * _2036) + ((((cbLight._m0[_2261].z * _2006) * ((_2311 * _2315) + _666)) * _2335) * _2050);
    float _2482;
    float _2484;
    float _2486;
    if (_2090)
    {
        _2482 = _2424;
        _2484 = _2425;
        _2486 = _2426;
    }
    else
    {
        uint _2488 = _2013 + 2u;
        uint _2492 = _2013 + 10u;
        float _2506 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2488].w)) * _500) * 0.949999988079071044921875);
        float _2507 = _2506 * _2506;
        float _2508 = cbLight._m0[_2488].x + _578;
        float _2509 = cbLight._m0[_2488].y + _579;
        float _2510 = cbLight._m0[_2488].z + _580;
        float _2514 = inversesqrt(dot(vec3(_2508, _2509, _2510), vec3(_2508, _2509, _2510)));
        float _2515 = _2514 * _2508;
        float _2516 = _2514 * _2509;
        float _2517 = _2514 * _2510;
        float _2518 = dot(vec3(_497, _498, _499), vec3(cbLight._m0[_2488].xyz));
        float _4503 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
        float _2521 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
        float _2522 = dot(vec3(_497, _498, _499), vec3(_2515, _2516, _2517));
        float _4514 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
        float _2525 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
        float _2526 = dot(vec3(cbLight._m0[_2488].xyz), vec3(_2515, _2516, _2517));
        float _4525 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
        float _2530 = _2507 * _2507;
        float _2534 = ((_2525 * _2525) * (_2530 + (-1.0))) + 1.0;
        float _2541 = exp2(log2(1.0 - (isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0)))) * 5.0);
        float _2548 = 1.0 - _2507;
        float _2558 = (0.5 / (((_2290 * ((_2521 * _2548) + _2507)) + 9.9999999392252902907785028219223e-09) + (((_2290 * _2548) + _2507) * _2521))) * _2521;
        float _4536 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
        float _2560 = (isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0))) * (_2530 / ((_2534 * _2534) * 3.141590118408203125));
        float _2561 = isnan(1.0) ? _2028 : (isnan(_2028) ? 1.0 : min(_2028, 1.0));
        _2482 = (((((_2541 * _2312) + _663) * cbLight._m0[_2492].x) * _2560) * _2561) + _2424;
        _2484 = (((((_2541 * _2314) + _665) * cbLight._m0[_2492].y) * _2560) * _2561) + _2425;
        _2486 = (((((_2541 * _2315) + _666) * cbLight._m0[_2492].z) * _2560) * _2561) + _2426;
    }
    float _2592;
    float _2594;
    float _2596;
    if (_2199)
    {
        _2592 = _2482;
        _2594 = _2484;
        _2596 = _2486;
    }
    else
    {
        uint _2603 = _2013 + 3u;
        uint _2607 = _2013 + 11u;
        float _2621 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2603].w)) * _500) * 0.949999988079071044921875);
        float _2622 = _2621 * _2621;
        float _2623 = cbLight._m0[_2603].x + _578;
        float _2624 = cbLight._m0[_2603].y + _579;
        float _2625 = cbLight._m0[_2603].z + _580;
        float _2629 = inversesqrt(dot(vec3(_2623, _2624, _2625), vec3(_2623, _2624, _2625)));
        float _2630 = _2629 * _2623;
        float _2631 = _2629 * _2624;
        float _2632 = _2629 * _2625;
        float _2633 = dot(vec3(_497, _498, _499), vec3(cbLight._m0[_2603].xyz));
        float _4552 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
        float _2636 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
        float _2637 = dot(vec3(_497, _498, _499), vec3(_2630, _2631, _2632));
        float _4563 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
        float _2640 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
        float _2641 = dot(vec3(cbLight._m0[_2603].xyz), vec3(_2630, _2631, _2632));
        float _4574 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
        float _2645 = _2622 * _2622;
        float _2649 = ((_2640 * _2640) * (_2645 + (-1.0))) + 1.0;
        float _2656 = exp2(log2(1.0 - (isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0)))) * 5.0);
        float _2663 = 1.0 - _2622;
        float _2673 = (0.5 / (((_2290 * ((_2636 * _2663) + _2622)) + 9.9999999392252902907785028219223e-09) + (((_2290 * _2663) + _2622) * _2636))) * _2636;
        float _4585 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
        float _2675 = (isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0))) * (_2645 / ((_2649 * _2649) * 3.141590118408203125));
        float _2676 = isnan(1.0) ? _2029 : (isnan(_2029) ? 1.0 : min(_2029, 1.0));
        _2592 = (((((_2656 * _2312) + _663) * cbLight._m0[_2607].x) * _2675) * _2676) + _2482;
        _2594 = (((((_2656 * _2314) + _665) * cbLight._m0[_2607].y) * _2675) * _2676) + _2484;
        _2596 = (((((_2656 * _2315) + _666) * cbLight._m0[_2607].z) * _2675) * _2676) + _2486;
    }
    float _2742;
    float _2744;
    float _2746;
    float _2748;
    float _2750;
    float _2752;
    if (_2011.y == 0u)
    {
        uvec4 _2697 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2698 = _2697.x;
        uint _2709 = uint((float(_2697.y) * floor(float(uint(cbSceneParam._m0[85u].y * _599) / _2698))) + floor(float(uint(cbSceneParam._m0[85u].x * _598) / _2698)));
        float _2719 = (log2(_1789 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2720 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0));
        uint _2723 = uint(isnan(14.0) ? _2720 : (isnan(_2720) ? 14.0 : min(_2720, 14.0)));
        uvec4 _2728 = texelFetch(g_lightClusterGridBuffer, int(((_2723 << 2u) + (_2709 << 6u)) >> 2u));
        uint _2729 = _2728.x;
        uint _2730 = _2697.z;
        float _2838;
        float _2840;
        float _2842;
        float _2844;
        float _2846;
        float _2848;
        if (((((1u << ((_2730 >> 4u) & 15u)) + 4294967295u) & _2729) == 0u) || ((_2730 & 240u) == 0u))
        {
            _2838 = 0.0;
            _2840 = 0.0;
            _2842 = 0.0;
            _2844 = 0.0;
            _2846 = 0.0;
            _2848 = 0.0;
        }
        else
        {
            float _2839;
            float _2841;
            float _2843;
            float _2845;
            float _2847;
            float _2849;
            float _2999 = 0.0;
            float _3000 = 0.0;
            float _3001 = 0.0;
            float _3002 = 0.0;
            float _3003 = 0.0;
            float _3004 = 0.0;
            uint _3005 = 0u;
            uint _3014;
            bool _3015;
            for (;;)
            {
                _3014 = texelFetch(g_lightClassification, int((((_2723 << 5u) + (_2709 << 9u)) + (_3005 << 2u)) >> 2u)).x;
                _3015 = _3014 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3015)
                {
                    frontier_phi_71_pred = _3004;
                    frontier_phi_71_pred_1 = _3003;
                    frontier_phi_71_pred_2 = _3002;
                    frontier_phi_71_pred_3 = _3001;
                    frontier_phi_71_pred_4 = _3000;
                    frontier_phi_71_pred_5 = _2999;
                }
                else
                {
                    float _3144;
                    float _3145;
                    float _3146;
                    float _3147;
                    float _3148;
                    float _3149;
                    uint _3150;
                    _3144 = _2999;
                    _3145 = _3000;
                    _3146 = _3001;
                    _3147 = _3002;
                    _3148 = _3003;
                    _3149 = _3004;
                    _3150 = _3014;
                    float _3071;
                    float _3072;
                    float _3073;
                    float _3074;
                    float _3075;
                    float _3076;
                    for (;;)
                    {
                        uint _3154 = uint(findLSB(_3150)) + (_3005 << 5u);
                        uint _3151 = (_3150 + 4294967295u) & _3150;
                        uint _3156 = _3154 * 48u;
                        vec4 _3170 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3156)).x, texelFetch(g_PointLightRenderingBuffer, int(_3156 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3156 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3156 + 3u)).x));
                        uint _3176 = (_3154 * 48u) + 4u;
                        vec4 _3189 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3176)).x, texelFetch(g_PointLightRenderingBuffer, int(_3176 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3176 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3176 + 3u)).x));
                        uint _3195 = (_3154 * 48u) + 8u;
                        vec3 _3206 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3195)).x, texelFetch(g_PointLightRenderingBuffer, int(_3195 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3195 + 2u)).x));
                        float _3210 = _3170.x - _1787;
                        float _3211 = _3170.y - _1788;
                        float _3212 = _3170.z - _1789;
                        float _3213 = dot(vec3(_3210, _3211, _3212), vec3(_3210, _3211, _3212));
                        float _3216 = inversesqrt(_3213);
                        float _3217 = _3216 * _3210;
                        float _3218 = _3216 * _3211;
                        float _3219 = _3216 * _3212;
                        float _3220 = dot(vec3(_619, _622, _625), vec3(_3217, _3218, _3219));
                        float _3225 = 1.0 - (_3213 * _3170.w);
                        float _4611 = isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0));
                        float _3226 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
                        float _3227 = sqrt(_3213) * _3189.w;
                        float _3230 = 1.39999997615814208984375 / (_3227 + 1.39999997615814208984375);
                        float _3231 = _3230 * _3230;
                        float _3234 = ((1.0 - _3231) * _3220) + _3231;
                        float _3237 = _3227 * _3227;
                        float _3241 = ((isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0))) * _3226) / ((_3237 * 0.699999988079071044921875) + 1.0);
                        float _3245 = (-0.0) - _1787;
                        float _3246 = (-0.0) - _1788;
                        float _3247 = (-0.0) - _1789;
                        float _3251 = inversesqrt(dot(vec3(_3245, _3246, _3247), vec3(_3245, _3246, _3247)));
                        float _3252 = _3251 * _3245;
                        float _3253 = _3251 * _3246;
                        float _3254 = _3251 * _3247;
                        float _3261 = exp2(log2(1.0 / ((_3237 * 3.5) + 5.0)) * 0.25);
                        float _3262 = 1.0 - _694;
                        float _3269 = sqrt(1.0 - ((1.0 - (_3262 * _3262)) * (1.0 - (_3261 * _3261))));
                        float _3270 = _3269 * _3269;
                        float _3271 = _3270 * _3270;
                        float _3272 = _3252 + _3217;
                        float _3273 = _3253 + _3218;
                        float _3274 = _3254 + _3219;
                        float _3278 = inversesqrt(dot(vec3(_3272, _3273, _3274), vec3(_3272, _3273, _3274)));
                        float _3282 = dot(vec3(_619, _622, _625), vec3(_3252, _3253, _3254));
                        float _4627 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0));
                        float _3285 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
                        float _3286 = dot(vec3(_619, _622, _625), vec3(_3278 * _3272, _3278 * _3273, _3278 * _3274));
                        float _4638 = isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0));
                        float _3289 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
                        float _3293 = ((_3289 * _3289) * (_3271 + (-1.0))) + 1.0;
                        float _3294 = _3230 * _3270;
                        float _3295 = _3294 * _3294;
                        float _3298 = ((1.0 - _3295) * _3220) + _3295;
                        float _4649 = isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0));
                        float _3299 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
                        float _3300 = 1.0 - _3270;
                        float _3310 = (0.5 / (((_3299 * ((_3285 * _3300) + _3270)) + 9.9999999392252902907785028219223e-09) + (((_3299 * _3300) + _3270) * _3285))) * _3299;
                        float _4660 = isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0));
                        float _3321 = (((_3271 * 3.1415927410125732421875) * (isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0)))) / ((_3293 * _3293) * ((_3237 * 2.1991131305694580078125) + 3.141590118408203125))) * _3226;
                        _3074 = (_3241 * _3189.x) + _3147;
                        _3075 = (_3241 * _3189.y) + _3148;
                        _3076 = (_3241 * _3189.z) + _3149;
                        _3071 = (_3321 * _3206.x) + _3144;
                        _3072 = (_3321 * _3206.y) + _3145;
                        _3073 = (_3321 * _3206.z) + _3146;
                        if (_3151 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3144 = _3071;
                            _3145 = _3072;
                            _3146 = _3073;
                            _3147 = _3074;
                            _3148 = _3075;
                            _3149 = _3076;
                            _3150 = _3151;
                        }
                    }
                    frontier_phi_71_pred = _3076;
                    frontier_phi_71_pred_1 = _3075;
                    frontier_phi_71_pred_2 = _3074;
                    frontier_phi_71_pred_3 = _3073;
                    frontier_phi_71_pred_4 = _3072;
                    frontier_phi_71_pred_5 = _3071;
                }
                _2849 = frontier_phi_71_pred;
                _2847 = frontier_phi_71_pred_1;
                _2845 = frontier_phi_71_pred_2;
                _2843 = frontier_phi_71_pred_3;
                _2841 = frontier_phi_71_pred_4;
                _2839 = frontier_phi_71_pred_5;
                uint _3006 = _3005 + 1u;
                if (_3006 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2999 = _2839;
                    _3000 = _2841;
                    _3001 = _2843;
                    _3002 = _2845;
                    _3003 = _2847;
                    _3004 = _2849;
                    _3005 = _3006;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2838 = _2839;
            _2840 = _2841;
            _2842 = _2843;
            _2844 = _2845;
            _2846 = _2847;
            _2848 = _2849;
        }
        uvec4 _2852 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2853 = _2852.z;
        uint _2855 = (_2853 >> 8u) & 15u;
        float _2967;
        float _2969;
        float _2971;
        float _2973;
        float _2975;
        float _2977;
        if (((4294967295u << _2855) & _2729) == 0u)
        {
            _2967 = _2838;
            _2969 = _2840;
            _2971 = _2842;
            _2973 = _2844;
            _2975 = _2846;
            _2977 = _2848;
        }
        else
        {
            float _2992 = inversesqrt(dot(vec3(_1787, _1788, _1789), vec3(_1787, _1788, _1789)));
            float _2993 = _2992 * _1787;
            float _2994 = _2992 * _1788;
            float _2995 = _2992 * _1789;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2855 < ((_2853 >> 12u) & 15u))
            {
                float _2968;
                float _2970;
                float _2972;
                float _2974;
                float _2976;
                float _2978;
                float _3127 = _2838;
                float _3128 = _2840;
                float _3129 = _2842;
                float _3130 = _2844;
                float _3131 = _2846;
                float _3132 = _2848;
                uint _3133 = _2855;
                uint _3142;
                bool _3143;
                for (;;)
                {
                    _3142 = texelFetch(g_lightClassification, int((((_2723 << 5u) + (_2709 << 9u)) + (_3133 << 2u)) >> 2u)).x;
                    _3143 = _3142 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3143)
                    {
                        frontier_phi_82_pred = _3132;
                        frontier_phi_82_pred_1 = _3131;
                        frontier_phi_82_pred_2 = _3130;
                        frontier_phi_82_pred_3 = _3129;
                        frontier_phi_82_pred_4 = _3128;
                        frontier_phi_82_pred_5 = _3127;
                    }
                    else
                    {
                        float _3335;
                        float _3336;
                        float _3337;
                        float _3338;
                        float _3339;
                        float _3340;
                        float _3629;
                        float _3630;
                        float _3631;
                        float _3632;
                        float _3633;
                        float _3634;
                        float _3348 = _3127;
                        float _3349 = _3128;
                        float _3350 = _3129;
                        float _3351 = _3130;
                        float _3352 = _3131;
                        float _3353 = _3132;
                        uint _3354 = _3142;
                        uint _3355;
                        vec4 _3380;
                        float _3381;
                        vec4 _3396;
                        vec3 _3408;
                        vec4 _3423;
                        vec4 _3438;
                        float _3485;
                        bool _3486;
                        for (;;)
                        {
                            uint _3365 = ((_3133 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3354));
                            _3355 = (_3354 + 4294967295u) & _3354;
                            uint _3367 = _3365 * 40u;
                            _3380 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3367)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 3u)).x));
                            _3381 = _3380.w;
                            uint _3383 = (_3365 * 40u) + 4u;
                            _3396 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3383)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 3u)).x));
                            uint _3398 = (_3365 * 40u) + 8u;
                            _3408 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3398)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 2u)).x));
                            uint _3410 = (_3365 * 40u) + 16u;
                            _3423 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3410)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 3u)).x));
                            uint _3425 = (_3365 * 40u) + 20u;
                            _3438 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3425)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 3u)).x));
                            uint _3441 = (_3365 * 40u) + 24u;
                            vec4 _3454 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3441)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 3u)).x));
                            uint _3460 = (_3365 * 40u) + 28u;
                            vec4 _3473 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3460)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 3u)).x));
                            _3485 = fma(_1789, _3473.z, fma(_1788, _3473.y, _3473.x * _1787)) + _3473.w;
                            _3486 = !((fma(_1789, _3454.z, fma(_1788, _3454.y, _3454.x * _1787)) + _3454.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3486)
                            {
                                float _3513 = _3380.x - _1787;
                                float _3514 = _3380.y - _1788;
                                float _3515 = _3380.z - _1789;
                                float _3516 = dot(vec3(_3513, _3514, _3515), vec3(_3513, _3514, _3515));
                                float _3519 = inversesqrt(_3516);
                                float _3520 = _3519 * _3513;
                                float _3521 = _3519 * _3514;
                                float _3522 = _3519 * _3515;
                                float _3526 = 1.0 - (_3516 / (_3381 * _3381));
                                float _4671 = isnan(0.0) ? _3526 : (isnan(_3526) ? 0.0 : max(_3526, 0.0));
                                float _3527 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
                                float _3531 = sqrt(_3516) * _3396.w;
                                float _3533 = 1.39999997615814208984375 / (_3531 + 1.39999997615814208984375);
                                float _3534 = _3533 * _3533;
                                float _3537 = ((1.0 - _3534) * dot(vec3(_3520, _3521, _3522), vec3(_619, _622, _625))) + _3534;
                                float _3540 = _3531 * _3531;
                                float _3544 = (fma(_1789, _3423.z, fma(_1788, _3423.y, _3423.x * _1787)) + _3423.w) / _3485;
                                float _3545 = (fma(_1789, _3438.z, fma(_1788, _3438.y, _3438.x * _1787)) + _3438.w) / _3485;
                                float _3549 = 1.0 - dot(vec2(_3544, _3545), vec2(_3544, _3545));
                                float _4687 = isnan(0.0) ? _3549 : (isnan(_3549) ? 0.0 : max(_3549, 0.0));
                                float _3550 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
                                float _3551 = _3550 * (((isnan(0.0) ? _3537 : (isnan(_3537) ? 0.0 : max(_3537, 0.0))) * _3527) / ((_3540 * 0.699999988079071044921875) + 1.0));
                                float _3563 = exp2(log2(1.0 / ((_3540 * 3.5) + 5.0)) * 0.25);
                                float _3564 = 1.0 - _694;
                                float _3571 = sqrt(1.0 - ((1.0 - (_3564 * _3564)) * (1.0 - (_3563 * _3563))));
                                float _3572 = _3571 * _3571;
                                float _3573 = _3572 * _3572;
                                float _3574 = _3520 - _2993;
                                float _3575 = _3521 - _2994;
                                float _3576 = _3522 - _2995;
                                float _3580 = inversesqrt(dot(vec3(_3574, _3575, _3576), vec3(_3574, _3575, _3576)));
                                float _3584 = dot(vec3(_619, _622, _625), vec3((-0.0) - _2993, (-0.0) - _2994, (-0.0) - _2995));
                                float _4698 = isnan(0.0) ? _3584 : (isnan(_3584) ? 0.0 : max(_3584, 0.0));
                                float _3587 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
                                float _3588 = dot(vec3(_619, _622, _625), vec3(_3580 * _3574, _3580 * _3575, _3580 * _3576));
                                float _4709 = isnan(0.0) ? _3588 : (isnan(_3588) ? 0.0 : max(_3588, 0.0));
                                float _3591 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
                                float _3595 = ((_3591 * _3591) * (_3573 + (-1.0))) + 1.0;
                                float _3596 = _3533 * _3572;
                                float _3597 = _3596 * _3596;
                                float _3603 = ((1.0 - _3597) * dot(vec3(_619, _622, _625), vec3(_3520, _3521, _3522))) + _3597;
                                float _4720 = isnan(0.0) ? _3603 : (isnan(_3603) ? 0.0 : max(_3603, 0.0));
                                float _3604 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
                                float _3605 = 1.0 - _3572;
                                float _3615 = (0.5 / (((_3604 * ((_3587 * _3605) + _3572)) + 9.9999999392252902907785028219223e-09) + (((_3604 * _3605) + _3572) * _3587))) * _3604;
                                float _4731 = isnan(0.0) ? _3615 : (isnan(_3615) ? 0.0 : max(_3615, 0.0));
                                float _3625 = (_3550 * _3527) * (((_3573 * 3.1415927410125732421875) * (isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0)))) / ((_3595 * _3595) * ((_3540 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3551 * _3396.z;
                                frontier_phi_88_pred_1 = _3551 * _3396.y;
                                frontier_phi_88_pred_2 = _3551 * _3396.x;
                                frontier_phi_88_pred_3 = _3625 * _3408.z;
                                frontier_phi_88_pred_4 = _3625 * _3408.y;
                                frontier_phi_88_pred_5 = _3625 * _3408.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3634 = frontier_phi_88_pred;
                            _3633 = frontier_phi_88_pred_1;
                            _3632 = frontier_phi_88_pred_2;
                            _3631 = frontier_phi_88_pred_3;
                            _3630 = frontier_phi_88_pred_4;
                            _3629 = frontier_phi_88_pred_5;
                            _3338 = _3632 + _3351;
                            _3339 = _3633 + _3352;
                            _3340 = _3634 + _3353;
                            _3335 = _3629 + _3348;
                            _3336 = _3630 + _3349;
                            _3337 = _3631 + _3350;
                            if (_3355 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3348 = _3335;
                                _3349 = _3336;
                                _3350 = _3337;
                                _3351 = _3338;
                                _3352 = _3339;
                                _3353 = _3340;
                                _3354 = _3355;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3340;
                        frontier_phi_82_pred_1 = _3339;
                        frontier_phi_82_pred_2 = _3338;
                        frontier_phi_82_pred_3 = _3337;
                        frontier_phi_82_pred_4 = _3336;
                        frontier_phi_82_pred_5 = _3335;
                    }
                    _2978 = frontier_phi_82_pred;
                    _2976 = frontier_phi_82_pred_1;
                    _2974 = frontier_phi_82_pred_2;
                    _2972 = frontier_phi_82_pred_3;
                    _2970 = frontier_phi_82_pred_4;
                    _2968 = frontier_phi_82_pred_5;
                    uint _3134 = _3133 + 1u;
                    if (_3134 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3127 = _2968;
                        _3128 = _2970;
                        _3129 = _2972;
                        _3130 = _2974;
                        _3131 = _2976;
                        _3132 = _2978;
                        _3133 = _3134;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2974;
                frontier_phi_63_64_ladder_1 = _2978;
                frontier_phi_63_64_ladder_2 = _2976;
                frontier_phi_63_64_ladder_3 = _2972;
                frontier_phi_63_64_ladder_4 = _2970;
                frontier_phi_63_64_ladder_5 = _2968;
            }
            else
            {
                frontier_phi_63_64_ladder = _2844;
                frontier_phi_63_64_ladder_1 = _2848;
                frontier_phi_63_64_ladder_2 = _2846;
                frontier_phi_63_64_ladder_3 = _2842;
                frontier_phi_63_64_ladder_4 = _2840;
                frontier_phi_63_64_ladder_5 = _2838;
            }
            _2967 = frontier_phi_63_64_ladder_5;
            _2969 = frontier_phi_63_64_ladder_4;
            _2971 = frontier_phi_63_64_ladder_3;
            _2973 = frontier_phi_63_64_ladder;
            _2975 = frontier_phi_63_64_ladder_2;
            _2977 = frontier_phi_63_64_ladder_1;
        }
        float _2982 = isnan(1.0) ? _678 : (isnan(_678) ? 1.0 : min(_678, 1.0));
        _2742 = (_2982 * _2973) + _2254;
        _2744 = (_2982 * _2975) + _2256;
        _2746 = (_2982 * _2977) + _2258;
        _2748 = ((_2967 * _663) * _2982) + _2592;
        _2750 = ((_2969 * _665) * _2982) + _2594;
        _2752 = ((_2971 * _666) * _2982) + _2596;
    }
    else
    {
        _2742 = _2254;
        _2744 = _2256;
        _2746 = _2258;
        _2748 = _2592;
        _2750 = _2594;
        _2752 = _2596;
    }
    uint _2758 = _639 + uint(cbMatDynParam._m0[0u].w);
    float _2764 = ((((((_452.x - _449) * _385) + _449) * cbMtdParam._m0[13u].x) + ((((_406.x - _403) * _385) + _403) * cbMtdParam._m0[11u].x)) * _480) * cbInstanceData._m0[_2758].x;
    float _2765 = ((((((_452.y - _450) * _385) + _450) * cbMtdParam._m0[13u].y) + ((((_406.y - _404) * _385) + _404) * cbMtdParam._m0[11u].y)) * _480) * cbInstanceData._m0[_2758].y;
    float _2766 = ((((((_452.z - _451) * _385) + _451) * cbMtdParam._m0[13u].z) + ((((_406.z - _405) * _385) + _405) * cbMtdParam._m0[11u].z)) * _480) * cbInstanceData._m0[_2758].z;
    float _4747 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _4758 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _4769 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _2783 = (((isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0))) * (_2742 + ((isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0))) * _678))) + ((_2748 + ((isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0))) * _1518)) * cbPerFrame._m0[3u].x)) + _2764;
    float _2785 = (_2765 + ((_2750 + ((isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0))) * _1518)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0))) * (_2744 + ((isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0))) * _678)));
    float _2787 = (_2766 + ((_2752 + ((isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0))) * _1518)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0))) * (_2746 + ((isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0))) * _678)));
    float _2788 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
    float _2789 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
    float _2790 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
    float _2796 = cbMtdParam._m0[2u].x * _2764;
    float _2797 = cbMtdParam._m0[2u].y * _2765;
    float _2798 = cbMtdParam._m0[2u].z * _2766;
    float _4795 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2800 = isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0));
    uint _2801 = _638 + 6u;
    float _2809 = _598 / cbSceneParam._m0[86u].x;
    float _2810 = _599 / cbSceneParam._m0[86u].y;
    vec4 _2824 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2809, _2810, (log2((isnan(cbSceneParam._m0[77u].w) ? _520 : (isnan(_520) ? cbSceneParam._m0[77u].w : min(_520, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2826 = _2824.x;
    float _2827 = _2824.y;
    float _2828 = _2824.z;
    float _2829 = _2824.w;
    float _2900;
    float _2902;
    float _2904;
    float _2906;
    if (_520 > cbSceneParam._m0[78u].w)
    {
        float _2863 = isnan(_520) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _520 : min(cbSceneParam._m0[80u].w, _520));
        float _2864 = _2863 / _520;
        float _2875 = _2864 * _571;
        float _2876 = _572 * _2864;
        float _2877 = (-0.0) - _2876;
        float _2878 = _2864 * _573;
        float _2880 = (cbSceneParam._m0[77u].w * _2877) / _2863;
        float _2881 = _2880 + cbSceneParam._m0[79u].w;
        float _2882 = cbSceneParam._m0[79u].w - _2876;
        float _2888 = sqrt(((_2875 * _2875) + (_2876 * _2876)) + (_2878 * _2878));
        float _2891 = (1.0 - (cbSceneParam._m0[77u].w / _2863)) * _2888;
        float _2896 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2898 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3084;
        if (abs((_2877 - _2880) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3084 = ((((_2881 > 0.0) ? exp2(_2896 * _2881) : (2.0 - exp2(_2898 * _2881))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2891;
        }
        else
        {
            float _3028 = 1.0 / cbSceneParam._m0[80u].x;
            float _3029 = isnan(_2882) ? _2881 : (isnan(_2881) ? _2882 : max(_2881, _2882));
            float _3030 = isnan(_2882) ? _2881 : (isnan(_2881) ? _2882 : min(_2881, _2882));
            float _3039 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : min(_3029, 0.0));
            float _3040 = isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : min(_3030, 0.0));
            _3084 = ((abs(_2888 / _2877) * cbSceneParam._m0[80u].y) * ((((_3039 - _3040) * 2.0) - ((exp2(_2896 * (isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0)))) - exp2(_2896 * (isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0))))) * _3028)) - ((exp2(_2898 * _3039) - exp2(_2898 * _3040)) * _3028))) + (_2891 * cbSceneParam._m0[80u].z);
        }
        vec4 _3086 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2809, _2810, 1.0), 0.0);
        float _3095 = exp2((_3084 * (-1.44269502162933349609375)) * (1.0 - _3086.w));
        float _3096 = log2(_3095);
        float _3112 = log2(_2829);
        _2900 = (exp2(_3112 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3096 * cbSceneParam._m0[78u].x)) * _3086.x) / cbSceneParam._m0[78u].x)) + _2826;
        _2902 = (exp2(_3112 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3096 * cbSceneParam._m0[78u].y)) * _3086.y) / cbSceneParam._m0[78u].y)) + _2827;
        _2904 = (exp2(_3112 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3096 * cbSceneParam._m0[78u].z)) * _3086.z) / cbSceneParam._m0[78u].z)) + _2828;
        _2906 = _3095 * _2829;
    }
    else
    {
        _2900 = _2826;
        _2902 = _2827;
        _2904 = _2828;
        _2906 = _2829;
    }
    bool _3122;
    vec4 _2916;
    vec4 _2938;
    float _2940;
    float _2944;
    float _2945;
    float _2946;
    float _2949;
    float _2952;
    float _2955;
    float _2956;
    bool _2966;
    for (;;)
    {
        _2916 = cbMatDynParam._m0[0u];
        float _2918 = roundEven(_2916.y);
        bool _2919 = _2918 == 3.0;
        float _2920 = log2(_2906);
        float _2924 = exp2(_2920 * cbSceneParam._m0[78u].x);
        float _2925 = exp2(_2920 * cbSceneParam._m0[78u].y);
        float _2926 = exp2(_2920 * cbSceneParam._m0[78u].z);
        float _2927 = _2924 * _2788;
        float _2928 = _2925 * _2789;
        float _2929 = _2926 * _2790;
        float _2936 = _587 + (-0.5);
        _2938 = cbMtdParam._m0[1u];
        _2940 = _2938.y * _2936;
        float _2943 = (_2918 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2944 = _2943 * (_2919 ? _2927 : (_2927 + (cbSceneParam._m0[72u].w * _2900)));
        _2945 = _2943 * (_2919 ? _2928 : (_2928 + (cbSceneParam._m0[72u].w * _2902)));
        _2946 = _2943 * (_2919 ? _2929 : (_2929 + (cbSceneParam._m0[72u].w * _2904)));
        _2949 = ((_2796 * _2800) * _2924) * _2943;
        _2952 = ((_2797 * _2800) * _2925) * _2943;
        _2955 = ((_2798 * _2800) * _2926) * _2943;
        _2956 = _2936 * 0.999000012874603271484375;
        _2966 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2966)
        {
            if ((cbInstanceData._m0[_638 + 7u].x + _2956) < 0.5)
            {
                _3122 = true;
                break;
            }
        }
        uint _3063 = _639 + uint(_2916.w);
        if ((cbInstanceData._m0[_3063].w < 1.0) && ((cbInstanceData._m0[_3063].w + _2956) < 0.5))
        {
            _3122 = true;
            break;
        }
        if ((_2940 + 1.0) < _2938.x)
        {
            _3122 = true;
            break;
        }
        _3122 = false;
        break;
    }
    float _3326;
    if (_3122)
    {
        discard_state = true;
        _3326 = 0.0;
    }
    else
    {
        _3326 = cbInstanceData._m0[_2801].w;
    }
    SV_Target.x = _2944;
    SV_Target.y = _2945;
    SV_Target.z = _2946;
    SV_Target.w = _3326;
    SV_Target_1.x = _2949;
    SV_Target_1.y = _2952;
    SV_Target_1.z = _2955;
    SV_Target_1.w = cbInstanceData._m0[_2801].w;
    discard_exit();
}


