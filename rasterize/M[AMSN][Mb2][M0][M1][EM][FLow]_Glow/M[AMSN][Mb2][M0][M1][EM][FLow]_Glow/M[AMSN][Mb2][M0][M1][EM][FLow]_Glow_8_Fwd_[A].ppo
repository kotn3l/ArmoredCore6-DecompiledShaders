#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1159;
float _3579;
float _3580;
float _3581;
float _3582;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _199 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _200 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _201 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _207 = inversesqrt(dot(vec3(_199, _200, _201), vec3(_199, _200, _201)));
    float _214 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _243 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _249 = _243.x * cbMtdParam._m0[9u].x;
    float _250 = _243.y * cbMtdParam._m0[9u].y;
    float _251 = _243.z * cbMtdParam._m0[9u].z;
    vec4 _268 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _289 = TEXCOORD_9.x - ((cbMtdParam._m0[16u].y * (1.0 - TEXCOORD_9.x)) * (_268.x + 0.00999999977648258209228515625));
    float _291 = _289 * (cbMtdParam._m0[16u].z + 1.0);
    float _3591 = isnan(0.0) ? _291 : (isnan(_291) ? 0.0 : max(_291, 0.0));
    float _292 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
    float _300 = ((((cbMtdParam._m0[12u].x - _249) * TEXCOORD_9.x) * cbMtdParam._m0[16u].x) * _292) + _249;
    float _301 = ((((cbMtdParam._m0[12u].y - _250) * TEXCOORD_9.y) * cbMtdParam._m0[16u].x) * _292) + _250;
    float _302 = (((cbMtdParam._m0[16u].x * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _251)) * _292) + _251;
    vec4 _315 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[6u].w));
    float _317 = _315.x;
    vec4 _329 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _333 = _329.z;
    float _337 = (_329.x * 2.0) + (-1.0);
    float _339 = (_329.y * 2.0) + (-1.0);
    float _340 = dot(vec2(_337, _339), vec2(_337, _339));
    float _3602 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _345 = sqrt(1.0 - (isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0))));
    float _351 = _289 * (cbMtdParam._m0[16u].y + 1.0);
    float _3613 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _355 = ((cbMtdParam._m0[15u].y - _333) * (isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0)))) + _333;
    float _368 = (cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _369 = (cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _396 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * ((cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * ((cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[10u].w));
    float _401 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[15u].w;
    float _408 = ((_396.y * 0.5) + (-0.25)) * cbMtdParam._m0[15u].z;
    float _410 = (-0.0) - (cbMtdParam._m0[15u].z * ((_396.x * 0.5) + (-0.25)));
    float _412 = fract(_401);
    float _414 = fract(_401 + 0.5);
    float _415 = _412 * _410;
    float _416 = _408 * _412;
    float _419 = _414 * _410;
    float _420 = _408 * _414;
    float _425 = abs((_412 * 2.0) + (-1.0));
    vec4 _441 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_415 + _368) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_416 + _369) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _443 = _441.x;
    float _444 = _441.y;
    float _445 = _441.z;
    vec4 _446 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_419 + _368) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_420 + _369) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _473 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _474 = (cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _487 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_415 + _473) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_416 + _474) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _489 = _487.x;
    float _490 = _487.y;
    float _491 = _487.z;
    vec4 _492 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_419 + _473) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_420 + _474) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    vec4 _536 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[16u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, (((cbMtdParam._m0[17u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w));
    float _542 = (_536.x * 2.0) + (-1.0);
    float _543 = (_536.y * 2.0) + (-1.0);
    float _544 = dot(vec2(_542, _543), vec2(_542, _543));
    float _3624 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _560 = (_292 * (((cbMtdParam._m0[14u].z * _337) - _337) + _542)) + _337;
    float _561 = (_292 * (((cbMtdParam._m0[14u].z * _339) - _339) + _543)) + _339;
    float _562 = (_292 * (sqrt(1.0 - (isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0)))) - _345)) + _345;
    float _565 = fma(_562, _214 * NORMAL.x, fma(_561, _221 * TANGENT.x, (_207 * _199) * _560));
    float _568 = fma(_562, _214 * NORMAL.y, fma(_561, _221 * TANGENT.y, (_207 * _200) * _560));
    float _571 = fma(_562, _214 * NORMAL.z, fma(_561, _221 * TANGENT.z, (_207 * _201) * _560));
    float _575 = inversesqrt(dot(vec3(_565, _568, _571), vec3(_565, _568, _571)));
    float _576 = _575 * _565;
    float _577 = _575 * _568;
    float _578 = _575 * _571;
    float _3635 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _579 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
    float _3646 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    float _3657 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _3668 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _3679 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _583 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
    float _599 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _640 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _650 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _640);
    float _651 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _640);
    float _652 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _640);
    float _656 = inversesqrt(dot(vec3(_650, _651, _652), vec3(_650, _651, _652)));
    float _657 = _650 * _656;
    float _658 = _651 * _656;
    float _659 = _652 * _656;
    vec4 _664 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _666 = _664.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _840 = sqrt(((_650 * _650) + (_651 * _651)) + (_652 * _652));
        float _846 = (cbMatDynParam._m0[5u].x * _840) + cbMatDynParam._m0[5u].y;
        float _3690 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
        float _847 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
        float _851 = (cbMatDynParam._m0[5u].z * _840) + cbMatDynParam._m0[5u].w;
        float _3701 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0))) - _847)) + _847) < ((_666 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _677 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _678 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _698 = fma(_578, cbSceneParam._m0[5u].z, fma(_577, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _576));
    float _701 = fma(_578, cbSceneParam._m0[6u].z, fma(_577, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _576));
    float _704 = fma(_578, cbSceneParam._m0[7u].z, fma(_577, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _576));
    uint _717 = uint(roundEven(NORMAL.w)) * 13u;
    uint _718 = _717 + 9u;
    uint _719 = _718 + uint(cbMatDynParam._m0[0u].w);
    float _725 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0)))) * cbInstanceData._m0[_719].x;
    float _726 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0)))) * cbInstanceData._m0[_719].y;
    float _727 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0)))) * cbInstanceData._m0[_719].z;
    float _3712 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _728 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
    float _3723 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _729 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
    float _3734 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _730 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
    float _731 = 1.0 - _583;
    float _732 = _728 * _731;
    float _733 = _729 * _731;
    float _734 = _730 * _731;
    float _739 = (_728 + (-0.039999999105930328369140625)) * _583;
    float _740 = (_729 + (-0.039999999105930328369140625)) * _583;
    float _741 = (_730 + (-0.039999999105930328369140625)) * _583;
    float _742 = _739 + 0.039999999105930328369140625;
    float _744 = _740 + 0.039999999105930328369140625;
    float _745 = _741 + 0.039999999105930328369140625;
    vec4 _754 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _677, cbSceneParam._m0[86u].y * _678));
    float _757 = _754.x * TEXCOORD_3.w;
    float _758 = dot(vec3(_576, _577, _578), vec3(_657, _658, _659));
    float _761 = _758 * 2.0;
    float _765 = (_761 * _576) - _657;
    float _766 = (_761 * _577) - _658;
    float _767 = (_761 * _578) - _659;
    float _771 = abs(dot(vec3(_657, _658, _659), vec3(_576, _577, _578)));
    float _3745 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _773 = sqrt(_579);
    float _786 = exp2((_773 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_773 * 3.0));
    float _792 = (1.0 - _786) * ((_773 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _793 = _786 * _773;
    float _821 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _825 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _829 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1158;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _884 = fma(_829, cbModelParam._m0[26u].z, fma(_825, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _821));
        float _888 = fma(_829, cbModelParam._m0[27u].z, fma(_825, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _821));
        float _892 = fma(_829, cbModelParam._m0[28u].z, fma(_825, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _821));
        float _916 = _821 + _576;
        float _917 = _825 + _577;
        float _918 = _829 + _578;
        float _928 = fma(_918, cbModelParam._m0[26u].z, fma(_917, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _916)) - _884;
        float _929 = fma(_918, cbModelParam._m0[27u].z, fma(_917, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _916)) - _888;
        float _930 = fma(_918, cbModelParam._m0[28u].z, fma(_917, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _916)) - _892;
        float _934 = inversesqrt(dot(vec3(_928, _929, _930), vec3(_928, _929, _930)));
        float _947 = ((_934 * _928) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_884 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _948 = ((_934 * _929) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_888 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _949 = ((_934 * _930) / cbModelParam._m0[34u].z) + ((((((_892 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _952 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_947, _948, _949), 0.0);
        vec4 _959 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_947, _948, _949), 0.0);
        vec4 _966 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_947, _948, _949), 0.0);
        vec4 _973 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_947, _948, _949), 0.0);
        float _986 = exp2((_952.w + (-0.5)) * 20.0) * 2.0;
        float _987 = _986 * (_952.x + (-0.5));
        float _988 = _986 * (_952.y + (-0.5));
        float _989 = _986 * (_952.z + (-0.5));
        float _996 = exp2((_959.w + (-0.5)) * 20.0) * 2.0;
        float _997 = _996 * (_959.x + (-0.5));
        float _998 = _996 * (_959.y + (-0.5));
        float _999 = _996 * (_959.z + (-0.5));
        float _1006 = exp2((_966.w + (-0.5)) * 20.0) * 2.0;
        float _1007 = _1006 * (_966.x + (-0.5));
        float _1008 = _1006 * (_966.y + (-0.5));
        float _1009 = _1006 * (_966.z + (-0.5));
        float _1016 = exp2((_973.w + (-0.5)) * 20.0) * 2.0;
        float _1017 = _1016 * (_973.x + (-0.5));
        float _1018 = _1016 * (_973.y + (-0.5));
        float _1019 = _1016 * (_973.z + (-0.5));
        float _1020 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1021 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1022 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1023 = _987 * 0.5;
        float _1024 = _997 * 0.5;
        float _1025 = _1007 * 0.5;
        float _1026 = dot(vec3(_1023, _1024, _1025), vec3(_1023, _1024, _1025));
        float _1031 = (_1026 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1026);
        float _1040 = (dot(vec3(_576, _577, _578), vec3(_1031 * _1023, _1031 * _1024, _1031 * _1025)) + 1.0) * 0.5;
        float _3771 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1050 = sqrt(((_1024 * _1024) + (_1023 * _1023)) + (_1025 * _1025)) / (_1020 + 9.9999997473787516355514526367188e-06);
        float _3782 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1051 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
        float _1052 = _1051 * 2.0;
        float _1056 = (1.0 - _1051) / (_1051 + 1.0);
        float _3793 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1057 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
        float _1066 = ((((1.0 - _1057) * (_1052 + 2.0)) * exp2(log2(isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))) * (_1052 + 1.0))) + _1057) * _1020;
        float _1067 = _988 * 0.5;
        float _1068 = _998 * 0.5;
        float _1069 = _1008 * 0.5;
        float _1070 = dot(vec3(_1067, _1068, _1069), vec3(_1067, _1068, _1069));
        float _1075 = (_1070 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1070);
        float _1083 = (dot(vec3(_576, _577, _578), vec3(_1075 * _1067, _1075 * _1068, _1075 * _1069)) + 1.0) * 0.5;
        float _3804 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1092 = sqrt(((_1068 * _1068) + (_1067 * _1067)) + (_1069 * _1069)) / (_1021 + 9.9999997473787516355514526367188e-06);
        float _3815 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _1094 = _1093 * 2.0;
        float _1098 = (1.0 - _1093) / (_1093 + 1.0);
        float _3826 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
        float _1108 = ((((1.0 - _1099) * (_1094 + 2.0)) * exp2(log2(isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0))) * (_1094 + 1.0))) + _1099) * _1021;
        float _1109 = _989 * 0.5;
        float _1110 = _999 * 0.5;
        float _1111 = _1009 * 0.5;
        float _1112 = dot(vec3(_1109, _1110, _1111), vec3(_1109, _1110, _1111));
        float _1117 = (_1112 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1112);
        float _1125 = (dot(vec3(_576, _577, _578), vec3(_1117 * _1109, _1117 * _1110, _1117 * _1111)) + 1.0) * 0.5;
        float _3837 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1134 = sqrt(((_1110 * _1110) + (_1109 * _1109)) + (_1111 * _1111)) / (_1022 + 9.9999997473787516355514526367188e-06);
        float _3848 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _1136 = _1135 * 2.0;
        float _1140 = (1.0 - _1135) / (_1135 + 1.0);
        float _3859 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
        float _1150 = ((((1.0 - _1141) * (_1136 + 2.0)) * exp2(log2(isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0))) * (_1136 + 1.0))) + _1141) * _1022;
        _1158 = _989;
        _1160 = _988;
        _1161 = _987;
        _1162 = _999;
        _1163 = _998;
        _1164 = _997;
        _1165 = _1009;
        _1166 = _1008;
        _1167 = _1007;
        _1168 = _1022;
        _1169 = _1021;
        _1170 = _1020;
        _1171 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0)));
        _1172 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0)));
        _1173 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0)));
    }
    else
    {
        _1158 = _1159;
        _1160 = _1159;
        _1161 = _1159;
        _1162 = _1159;
        _1163 = _1159;
        _1164 = _1159;
        _1165 = _1159;
        _1166 = _1159;
        _1167 = _1159;
        _1168 = _1159;
        _1169 = _1159;
        _1170 = _1159;
        _1171 = 0.0;
        _1172 = 0.0;
        _1173 = 0.0;
    }
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1202 = fma(_829, cbModelParam._m0[30u].z, fma(_825, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _821));
        float _1206 = fma(_829, cbModelParam._m0[31u].z, fma(_825, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _821));
        float _1210 = fma(_829, cbModelParam._m0[32u].z, fma(_825, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _821));
        float _1233 = _821 + _576;
        float _1234 = _825 + _577;
        float _1235 = _829 + _578;
        float _1245 = fma(_1235, cbModelParam._m0[30u].z, fma(_1234, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1233)) - _1202;
        float _1246 = fma(_1235, cbModelParam._m0[31u].z, fma(_1234, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1233)) - _1206;
        float _1247 = fma(_1235, cbModelParam._m0[32u].z, fma(_1234, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1233)) - _1210;
        float _1251 = inversesqrt(dot(vec3(_1245, _1246, _1247), vec3(_1245, _1246, _1247)));
        float _1264 = ((_1251 * _1245) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1202 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1265 = ((_1251 * _1246) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1206 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1266 = ((_1251 * _1247) / cbModelParam._m0[35u].z) + ((((((_1210 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1268 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1264, _1265, _1266), 0.0);
        vec4 _1275 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1264, _1265, _1266), 0.0);
        vec4 _1282 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1264, _1265, _1266), 0.0);
        vec4 _1289 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1264, _1265, _1266), 0.0);
        float _1301 = exp2((_1268.w + (-0.5)) * 20.0) * 2.0;
        float _1302 = _1301 * (_1268.x + (-0.5));
        float _1303 = _1301 * (_1268.y + (-0.5));
        float _1304 = _1301 * (_1268.z + (-0.5));
        float _1311 = exp2((_1275.w + (-0.5)) * 20.0) * 2.0;
        float _1312 = _1311 * (_1275.x + (-0.5));
        float _1313 = _1311 * (_1275.y + (-0.5));
        float _1314 = _1311 * (_1275.z + (-0.5));
        float _1321 = exp2((_1282.w + (-0.5)) * 20.0) * 2.0;
        float _1322 = _1321 * (_1282.x + (-0.5));
        float _1323 = _1321 * (_1282.y + (-0.5));
        float _1324 = _1321 * (_1282.z + (-0.5));
        float _1331 = exp2((_1289.w + (-0.5)) * 20.0) * 2.0;
        float _1332 = _1331 * (_1289.x + (-0.5));
        float _1333 = _1331 * (_1289.y + (-0.5));
        float _1334 = _1331 * (_1289.z + (-0.5));
        float _1335 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1336 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1337 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1338 = _1302 * 0.5;
        float _1339 = _1312 * 0.5;
        float _1340 = _1322 * 0.5;
        float _1341 = dot(vec3(_1338, _1339, _1340), vec3(_1338, _1339, _1340));
        float _1346 = (_1341 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1341);
        float _1354 = (dot(vec3(_576, _577, _578), vec3(_1346 * _1338, _1346 * _1339, _1346 * _1340)) + 1.0) * 0.5;
        float _3900 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1363 = sqrt(((_1339 * _1339) + (_1338 * _1338)) + (_1340 * _1340)) / (_1335 + 9.9999997473787516355514526367188e-06);
        float _3911 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1364 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1365 = _1364 * 2.0;
        float _1369 = (1.0 - _1364) / (_1364 + 1.0);
        float _3922 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1370 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
        float _1379 = ((((1.0 - _1370) * (_1365 + 2.0)) * exp2(log2(isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0))) * (_1365 + 1.0))) + _1370) * _1335;
        float _1380 = _1303 * 0.5;
        float _1381 = _1313 * 0.5;
        float _1382 = _1323 * 0.5;
        float _1383 = dot(vec3(_1380, _1381, _1382), vec3(_1380, _1381, _1382));
        float _1388 = (_1383 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1383);
        float _1396 = (dot(vec3(_576, _577, _578), vec3(_1388 * _1380, _1388 * _1381, _1388 * _1382)) + 1.0) * 0.5;
        float _3933 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1405 = sqrt(((_1381 * _1381) + (_1380 * _1380)) + (_1382 * _1382)) / (_1336 + 9.9999997473787516355514526367188e-06);
        float _3944 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1406 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
        float _1407 = _1406 * 2.0;
        float _1411 = (1.0 - _1406) / (_1406 + 1.0);
        float _3955 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1412 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
        float _1421 = ((((1.0 - _1412) * (_1407 + 2.0)) * exp2(log2(isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0))) * (_1407 + 1.0))) + _1412) * _1336;
        float _1422 = _1304 * 0.5;
        float _1423 = _1314 * 0.5;
        float _1424 = _1324 * 0.5;
        float _1425 = dot(vec3(_1422, _1423, _1424), vec3(_1422, _1423, _1424));
        float _1430 = (_1425 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1425);
        float _1438 = (dot(vec3(_576, _577, _578), vec3(_1430 * _1422, _1430 * _1423, _1430 * _1424)) + 1.0) * 0.5;
        float _3966 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1447 = sqrt(((_1423 * _1423) + (_1422 * _1422)) + (_1424 * _1424)) / (_1337 + 9.9999997473787516355514526367188e-06);
        float _3977 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1448 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _1449 = _1448 * 2.0;
        float _1453 = (1.0 - _1448) / (_1448 + 1.0);
        float _3988 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1454 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _1463 = ((((1.0 - _1454) * (_1449 + 2.0)) * exp2(log2(isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * (_1449 + 1.0))) + _1454) * _1337;
        _1471 = _1304;
        _1472 = _1303;
        _1473 = _1302;
        _1474 = _1314;
        _1475 = _1313;
        _1476 = _1312;
        _1477 = _1324;
        _1478 = _1323;
        _1479 = _1322;
        _1480 = _1337;
        _1481 = _1336;
        _1482 = _1335;
        _1483 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0)));
        _1484 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0)));
        _1485 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0)));
    }
    else
    {
        _1471 = _1159;
        _1472 = _1159;
        _1473 = _1159;
        _1474 = _1159;
        _1475 = _1159;
        _1476 = _1159;
        _1477 = _1159;
        _1478 = _1159;
        _1479 = _1159;
        _1480 = _1159;
        _1481 = _1159;
        _1482 = _1159;
        _1483 = 0.0;
        _1484 = 0.0;
        _1485 = 0.0;
    }
    float _1495 = (cbModelParam._m0[1u].x * (_1483 - _1171)) + _1171;
    float _1496 = (cbModelParam._m0[1u].x * (_1484 - _1172)) + _1172;
    float _1497 = (cbModelParam._m0[1u].x * (_1485 - _1173)) + _1173;
    float _1518 = fma(_1497, cbSceneParam._m0[89u].z, fma(_1496, cbSceneParam._m0[89u].y, _1495 * cbSceneParam._m0[89u].x));
    float _1521 = fma(_1497, cbSceneParam._m0[90u].z, fma(_1496, cbSceneParam._m0[90u].y, _1495 * cbSceneParam._m0[90u].x));
    float _1524 = fma(_1497, cbSceneParam._m0[91u].z, fma(_1496, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1495));
    float _1539 = _765 * 0.5;
    float _1540 = _766 * 0.5;
    float _1541 = _767 * 0.5;
    float _1542 = dot(vec4(_1539, _1540, _1541, 1.0), vec4(_1473, _1476, _1479, _1482));
    float _1545 = dot(vec4(_1539, _1540, _1541, 1.0), vec4(_1472, _1475, _1478, _1481));
    float _1548 = dot(vec4(_1539, _1540, _1541, 1.0), vec4(_1471, _1474, _1477, _1480));
    float _1582;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1555 = dot(vec4(_1539, _1540, _1541, 1.0), vec4(_1158, _1162, _1165, _1168));
        float _1559 = dot(vec4(_1539, _1540, _1541, 1.0), vec4(_1160, _1163, _1166, _1169));
        float _1563 = dot(vec4(_1539, _1540, _1541, 1.0), vec4(_1161, _1164, _1167, _1170));
        float _1570 = dot(vec4(cbModelParam._m0[39u]), vec4(_1539, _1540, _1541, 1.0));
        _1582 = dot(vec3(isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0)), isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0)), isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1570) ? 0.0 : (isnan(0.0) ? _1570 : max(0.0, _1570))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1582 = 1.0;
    }
    float _1593;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1584 = dot(vec4(cbModelParam._m0[40u]), vec4(_1539, _1540, _1541, 1.0));
        _1593 = dot(vec3(isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0)), isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0)), isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1584) ? 0.0 : (isnan(0.0) ? _1584 : max(0.0, _1584))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1593 = 1.0;
    }
    float _1597 = (_1593 * cbModelParam._m0[1u].x) + (_1582 * (1.0 - cbModelParam._m0[1u].x));
    float _1607 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _579);
    float _1608 = isnan(_1607) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1607 : min(cbModelParam._m0[25u].z, _1607));
    float _1688;
    float _1690;
    float _1692;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1655 = fma(_829, cbModelParam._m0[13u].z, fma(_825, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _821)) + cbModelParam._m0[13u].w;
        float _1659 = fma(_829, cbModelParam._m0[14u].z, fma(_825, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _821)) + cbModelParam._m0[14u].w;
        float _1663 = fma(_829, cbModelParam._m0[15u].z, fma(_825, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _821)) + cbModelParam._m0[15u].w;
        float _1666 = fma(_767, cbModelParam._m0[13u].z, fma(_766, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _765));
        float _1669 = fma(_767, cbModelParam._m0[14u].z, fma(_766, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _765));
        float _1672 = fma(_767, cbModelParam._m0[15u].z, fma(_766, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _765));
        float _1700;
        if (_1666 > 0.0)
        {
            _1700 = abs((1.0 - _1655) / _1666);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1666 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1655 + 1.0) / _1666);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1700 = frontier_phi_17_15_ladder;
        }
        float _1904;
        if (_1669 > 0.0)
        {
            _1904 = abs((1.0 - _1659) / _1669);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1669 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1659 + 1.0) / _1669);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1904 = frontier_phi_26_22_ladder;
        }
        float _2158;
        if (_1672 > 0.0)
        {
            _2158 = abs((1.0 - _1663) / _1672);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1672 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1663 + 1.0) / _1672);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2158 = frontier_phi_38_33_ladder;
        }
        float _2160 = isnan(_1904) ? _1700 : (isnan(_1700) ? _1904 : min(_1700, _1904));
        float _2161 = isnan(_2158) ? _2160 : (isnan(_2160) ? _2158 : min(_2160, _2158));
        float _2165 = (_2161 * _1666) + _1655;
        float _2166 = (_2161 * _1669) + _1659;
        float _2167 = (_2161 * _1672) + _1663;
        float _2168 = _2161 * 9.9999997473787516355514526367188e-05;
        float _2170 = (-1.0) - _2168;
        float _2172 = _2168 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2167 > _2172) || ((_2167 < _2170) || ((_2166 > _2172) || ((_2166 < _2170) || ((_2165 < _2170) || (_2165 > _2172))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2295 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2167, cbModelParam._m0[9u].z, fma(_2166, cbModelParam._m0[9u].y, _2165 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2167, cbModelParam._m0[10u].z, fma(_2166, cbModelParam._m0[10u].y, _2165 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2167, cbModelParam._m0[11u].z, fma(_2166, cbModelParam._m0[11u].y, _2165 * cbModelParam._m0[11u].x))), _1608);
            frontier_phi_16_38_ladder = _2295.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2295.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2295.x * cbModelParam._m0[1u].y;
        }
        _1688 = frontier_phi_16_38_ladder_2;
        _1690 = frontier_phi_16_38_ladder_1;
        _1692 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1676 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_765, _766, _767), _1608);
        _1688 = _1676.x * cbModelParam._m0[1u].y;
        _1690 = _1676.y * cbModelParam._m0[1u].y;
        _1692 = _1676.z * cbModelParam._m0[1u].y;
    }
    float _1696 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _579);
    float _1697 = isnan(_1696) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1696 : min(cbModelParam._m0[25u].w, _1696));
    float _1787;
    float _1789;
    float _1791;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1751 = fma(_829, cbModelParam._m0[21u].z, fma(_825, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _821)) + cbModelParam._m0[21u].w;
        float _1755 = fma(_829, cbModelParam._m0[22u].z, fma(_825, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _821)) + cbModelParam._m0[22u].w;
        float _1759 = fma(_829, cbModelParam._m0[23u].z, fma(_825, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _821)) + cbModelParam._m0[23u].w;
        float _1762 = fma(_767, cbModelParam._m0[21u].z, fma(_766, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _765));
        float _1765 = fma(_767, cbModelParam._m0[22u].z, fma(_766, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _765));
        float _1768 = fma(_767, cbModelParam._m0[23u].z, fma(_766, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _765));
        float _1909;
        if (_1762 > 0.0)
        {
            _1909 = abs((1.0 - _1751) / _1762);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1762 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1751 + 1.0) / _1762);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1909 = frontier_phi_28_24_ladder;
        }
        float _2185;
        if (_1765 > 0.0)
        {
            _2185 = abs((1.0 - _1755) / _1765);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1765 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1755 + 1.0) / _1765);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2185 = frontier_phi_40_35_ladder;
        }
        float _2398;
        if (_1768 > 0.0)
        {
            _2398 = abs((1.0 - _1759) / _1768);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1768 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1759 + 1.0) / _1768);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2398 = frontier_phi_49_46_ladder;
        }
        float _2400 = isnan(_2185) ? _1909 : (isnan(_1909) ? _2185 : min(_1909, _2185));
        float _2401 = isnan(_2398) ? _2400 : (isnan(_2400) ? _2398 : min(_2400, _2398));
        float _2405 = (_2401 * _1762) + _1751;
        float _2406 = (_2401 * _1765) + _1755;
        float _2407 = (_2401 * _1768) + _1759;
        float _2408 = _2401 * 9.9999997473787516355514526367188e-05;
        float _2409 = (-1.0) - _2408;
        float _2411 = _2408 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2407 > _2411) || ((_2407 < _2409) || ((_2406 > _2411) || ((_2406 < _2409) || ((_2405 < _2409) || (_2405 > _2411))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2635 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2407, cbModelParam._m0[17u].z, fma(_2406, cbModelParam._m0[17u].y, _2405 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2407, cbModelParam._m0[18u].z, fma(_2406, cbModelParam._m0[18u].y, _2405 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2407, cbModelParam._m0[19u].z, fma(_2406, cbModelParam._m0[19u].y, _2405 * cbModelParam._m0[19u].x))), _1697);
            frontier_phi_25_49_ladder = _2635.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2635.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2635.x * cbModelParam._m0[1u].z;
        }
        _1787 = frontier_phi_25_49_ladder_2;
        _1789 = frontier_phi_25_49_ladder_1;
        _1791 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1771 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_765, _766, _767), _1697);
        _1787 = _1771.x * cbModelParam._m0[1u].z;
        _1789 = _1771.y * cbModelParam._m0[1u].z;
        _1791 = _1771.z * cbModelParam._m0[1u].z;
    }
    float _1804 = (((_792 * _742) + _793) * _757) * ((cbModelParam._m0[1u].w * (_1787 - _1688)) + _1688);
    float _1806 = (((_792 * _744) + _793) * _757) * ((cbModelParam._m0[1u].w * (_1789 - _1690)) + _1690);
    float _1808 = (((_792 * _745) + _793) * _757) * ((cbModelParam._m0[1u].w * (_1791 - _1692)) + _1692);
    float _1811 = fma(_1808, cbSceneParam._m0[89u].z, fma(_1806, cbSceneParam._m0[89u].y, _1804 * cbSceneParam._m0[89u].x));
    float _1814 = fma(_1808, cbSceneParam._m0[90u].z, fma(_1806, cbSceneParam._m0[90u].y, _1804 * cbSceneParam._m0[90u].x));
    float _1817 = fma(_1808, cbSceneParam._m0[91u].z, fma(_1806, cbSceneParam._m0[91u].y, _1804 * cbSceneParam._m0[91u].x));
    uvec4 _1827 = floatBitsToUint(cbInstanceData._m0[_717 + 5u]);
    uint _1829 = _1827.x * 14u;
    uint _1830 = _1829 + 13u;
    float _1837 = _757 + (-1.0);
    float _1842 = (cbLight._m0[_1830].x * _1837) + 1.0;
    float _1843 = (cbLight._m0[_1830].y * _1837) + 1.0;
    float _1844 = (cbLight._m0[_1830].z * _1837) + 1.0;
    float _1845 = (cbLight._m0[_1830].w * _1837) + 1.0;
    uint _1846 = _1829 + 5u;
    float _1852 = isnan(1.0) ? _1843 : (isnan(_1843) ? 1.0 : min(_1843, 1.0));
    uint _1856 = _1829 + 4u;
    float _1863 = isnan(1.0) ? _1842 : (isnan(_1842) ? 1.0 : min(_1842, 1.0));
    uint _1867 = _1829 | 1u;
    float _1878 = dot(vec3(cbLight._m0[_1829].xyz), vec3(_576, _577, _578));
    float _1881 = dot(vec3(cbLight._m0[_1867].xyz), vec3(_576, _577, _578));
    float _4124 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
    float _4135 = isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0));
    float _1886 = (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * 0.3183098733425140380859375;
    float _1888 = (isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))) * 0.3183098733425140380859375;
    float _1895 = ((cbLight._m0[_1846].x * _1852) * _1888) + ((cbLight._m0[_1856].x * _1863) * _1886);
    float _1896 = ((_1852 * cbLight._m0[_1846].y) * _1888) + ((_1863 * cbLight._m0[_1856].y) * _1886);
    float _1897 = ((_1852 * cbLight._m0[_1846].z) * _1888) + ((_1863 * cbLight._m0[_1856].z) * _1886);
    uvec4 _1901 = floatBitsToUint(cbLight._m0[_1829 + 12u]);
    bool _1903 = _1901.x == 0u;
    float _1914;
    float _1916;
    float _1918;
    if (_1903)
    {
        _1914 = _1895;
        _1916 = _1896;
        _1918 = _1897;
    }
    else
    {
        uint _1922 = _1829 + 6u;
        float _1938 = (dot(vec3(cbLight._m0[_1829 + 2u].xyz), vec3(_576, _577, _578)) * 0.5) + 0.5;
        float _1939 = _1938 * _1938;
        float _4146 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
        float _1940 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _1941 = isnan(1.0) ? _1844 : (isnan(_1844) ? 1.0 : min(_1844, 1.0));
        _1914 = (((cbLight._m0[_1922].x * 0.3183098733425140380859375) * _1940) * _1941) + _1895;
        _1916 = (((cbLight._m0[_1922].y * 0.3183098733425140380859375) * _1940) * _1941) + _1896;
        _1918 = (((cbLight._m0[_1922].z * 0.3183098733425140380859375) * _1940) * _1941) + _1897;
    }
    bool _1921 = _1901.y == 0u;
    float _1959;
    float _1961;
    float _1963;
    if (_1921)
    {
        _1959 = _1914;
        _1961 = _1916;
        _1963 = _1918;
    }
    else
    {
        uint _2129 = _1829 + 7u;
        float _2145 = (dot(vec3(cbLight._m0[_1829 + 3u].xyz), vec3(_576, _577, _578)) * 0.5) + 0.5;
        float _2146 = _2145 * _2145;
        float _4162 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
        float _2147 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _2148 = isnan(1.0) ? _1845 : (isnan(_1845) ? 1.0 : min(_1845, 1.0));
        _1959 = (((cbLight._m0[_2129].x * 0.3183098733425140380859375) * _2147) * _2148) + _1914;
        _1961 = (((cbLight._m0[_2129].y * 0.3183098733425140380859375) * _2147) * _2148) + _1916;
        _1963 = (((cbLight._m0[_2129].z * 0.3183098733425140380859375) * _2147) * _2148) + _1918;
    }
    uint _1966 = _1829 + 8u;
    float _1979 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1829].w)) * _579) * 0.949999988079071044921875);
    float _1980 = _1979 * _1979;
    float _1981 = cbLight._m0[_1829].x + _657;
    float _1982 = cbLight._m0[_1829].y + _658;
    float _1983 = cbLight._m0[_1829].z + _659;
    float _1987 = inversesqrt(dot(vec3(_1981, _1982, _1983), vec3(_1981, _1982, _1983)));
    float _1988 = _1987 * _1981;
    float _1989 = _1987 * _1982;
    float _1990 = _1987 * _1983;
    float _1991 = dot(vec3(_576, _577, _578), vec3(cbLight._m0[_1829].xyz));
    float _4178 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
    float _1994 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
    float _4189 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _1995 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
    float _1996 = dot(vec3(_576, _577, _578), vec3(_1988, _1989, _1990));
    float _4200 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
    float _1999 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
    float _2000 = dot(vec3(cbLight._m0[_1829].xyz), vec3(_1988, _1989, _1990));
    float _4211 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
    float _2004 = _1980 * _1980;
    float _2008 = ((_1999 * _1999) * (_2004 + (-1.0))) + 1.0;
    float _2016 = exp2(log2(1.0 - (isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0)))) * 5.0);
    float _2017 = 0.959999978542327880859375 - _739;
    float _2019 = 0.959999978542327880859375 - _740;
    float _2020 = 0.959999978542327880859375 - _741;
    float _2027 = 1.0 - _1980;
    float _2038 = (0.5 / (((_1995 * ((_1994 * _2027) + _1980)) + 9.9999999392252902907785028219223e-09) + (((_1995 * _2027) + _1980) * _1994))) * _1994;
    float _4222 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
    float _2040 = (isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0))) * (_2004 / ((_2008 * _2008) * 3.141590118408203125));
    uint _2051 = _1829 + 9u;
    float _2062 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1867].w)) * _579) * 0.949999988079071044921875);
    float _2063 = _2062 * _2062;
    float _2064 = cbLight._m0[_1867].x + _657;
    float _2065 = cbLight._m0[_1867].y + _658;
    float _2066 = cbLight._m0[_1867].z + _659;
    float _2070 = inversesqrt(dot(vec3(_2064, _2065, _2066), vec3(_2064, _2065, _2066)));
    float _2071 = _2070 * _2064;
    float _2072 = _2070 * _2065;
    float _2073 = _2070 * _2066;
    float _2074 = dot(vec3(_576, _577, _578), vec3(cbLight._m0[_1867].xyz));
    float _4233 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
    float _2077 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
    float _2078 = dot(vec3(_576, _577, _578), vec3(_2071, _2072, _2073));
    float _4244 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
    float _2081 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
    float _2082 = dot(vec3(cbLight._m0[_1867].xyz), vec3(_2071, _2072, _2073));
    float _4255 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
    float _2086 = _2063 * _2063;
    float _2090 = ((_2081 * _2081) * (_2086 + (-1.0))) + 1.0;
    float _2097 = exp2(log2(1.0 - (isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0)))) * 5.0);
    float _2104 = 1.0 - _2063;
    float _2114 = (0.5 / (((_1995 * ((_2077 * _2104) + _2063)) + 9.9999999392252902907785028219223e-09) + (((_1995 * _2104) + _2063) * _2077))) * _2077;
    float _4266 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
    float _2116 = (isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0))) * (_2086 / ((_2090 * _2090) * 3.141590118408203125));
    float _2126 = (((((_2097 * _2017) + _742) * cbLight._m0[_2051].x) * _2116) * _1852) + (((((_2016 * _2017) + _742) * cbLight._m0[_1966].x) * _2040) * _1863);
    float _2127 = (((((_2097 * _2019) + _744) * cbLight._m0[_2051].y) * _2116) * _1852) + (((((_2016 * _2019) + _744) * cbLight._m0[_1966].y) * _2040) * _1863);
    float _2128 = (((((_2097 * _2020) + _745) * cbLight._m0[_2051].z) * _2116) * _1852) + (((((_2016 * _2020) + _745) * cbLight._m0[_1966].z) * _2040) * _1863);
    float _2190;
    float _2192;
    float _2194;
    if (_1903)
    {
        _2190 = _2126;
        _2192 = _2127;
        _2194 = _2128;
    }
    else
    {
        uint _2196 = _1829 + 2u;
        uint _2200 = _1829 + 10u;
        float _2214 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2196].w)) * _579) * 0.949999988079071044921875);
        float _2215 = _2214 * _2214;
        float _2216 = cbLight._m0[_2196].x + _657;
        float _2217 = cbLight._m0[_2196].y + _658;
        float _2218 = cbLight._m0[_2196].z + _659;
        float _2222 = inversesqrt(dot(vec3(_2216, _2217, _2218), vec3(_2216, _2217, _2218)));
        float _2223 = _2222 * _2216;
        float _2224 = _2222 * _2217;
        float _2225 = _2222 * _2218;
        float _2226 = dot(vec3(_576, _577, _578), vec3(cbLight._m0[_2196].xyz));
        float _4277 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
        float _2229 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _2230 = dot(vec3(_576, _577, _578), vec3(_2223, _2224, _2225));
        float _4288 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
        float _2233 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _2234 = dot(vec3(cbLight._m0[_2196].xyz), vec3(_2223, _2224, _2225));
        float _4299 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
        float _2238 = _2215 * _2215;
        float _2242 = ((_2233 * _2233) * (_2238 + (-1.0))) + 1.0;
        float _2249 = exp2(log2(1.0 - (isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0)))) * 5.0);
        float _2256 = 1.0 - _2215;
        float _2266 = (0.5 / (((_1995 * ((_2229 * _2256) + _2215)) + 9.9999999392252902907785028219223e-09) + (((_1995 * _2256) + _2215) * _2229))) * _2229;
        float _4310 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
        float _2268 = (isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0))) * (_2238 / ((_2242 * _2242) * 3.141590118408203125));
        float _2269 = isnan(1.0) ? _1844 : (isnan(_1844) ? 1.0 : min(_1844, 1.0));
        _2190 = (((((_2249 * _2017) + _742) * cbLight._m0[_2200].x) * _2268) * _2269) + _2126;
        _2192 = (((((_2249 * _2019) + _744) * cbLight._m0[_2200].y) * _2268) * _2269) + _2127;
        _2194 = (((((_2249 * _2020) + _745) * cbLight._m0[_2200].z) * _2268) * _2269) + _2128;
    }
    float _2304;
    float _2306;
    float _2308;
    if (_1921)
    {
        _2304 = _2190;
        _2306 = _2192;
        _2308 = _2194;
    }
    else
    {
        uint _2315 = _1829 + 3u;
        uint _2319 = _1829 + 11u;
        float _2333 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2315].w)) * _579) * 0.949999988079071044921875);
        float _2334 = _2333 * _2333;
        float _2335 = cbLight._m0[_2315].x + _657;
        float _2336 = cbLight._m0[_2315].y + _658;
        float _2337 = cbLight._m0[_2315].z + _659;
        float _2341 = inversesqrt(dot(vec3(_2335, _2336, _2337), vec3(_2335, _2336, _2337)));
        float _2342 = _2341 * _2335;
        float _2343 = _2341 * _2336;
        float _2344 = _2341 * _2337;
        float _2345 = dot(vec3(_576, _577, _578), vec3(cbLight._m0[_2315].xyz));
        float _4326 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
        float _2348 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _2349 = dot(vec3(_576, _577, _578), vec3(_2342, _2343, _2344));
        float _4337 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
        float _2352 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
        float _2353 = dot(vec3(cbLight._m0[_2315].xyz), vec3(_2342, _2343, _2344));
        float _4348 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
        float _2357 = _2334 * _2334;
        float _2361 = ((_2352 * _2352) * (_2357 + (-1.0))) + 1.0;
        float _2368 = exp2(log2(1.0 - (isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0)))) * 5.0);
        float _2375 = 1.0 - _2334;
        float _2385 = (0.5 / (((_1995 * ((_2348 * _2375) + _2334)) + 9.9999999392252902907785028219223e-09) + (((_1995 * _2375) + _2334) * _2348))) * _2348;
        float _4359 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
        float _2387 = (isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0))) * (_2357 / ((_2361 * _2361) * 3.141590118408203125));
        float _2388 = isnan(1.0) ? _1845 : (isnan(_1845) ? 1.0 : min(_1845, 1.0));
        _2304 = (((((_2368 * _2017) + _742) * cbLight._m0[_2319].x) * _2387) * _2388) + _2190;
        _2306 = (((((_2368 * _2019) + _744) * cbLight._m0[_2319].y) * _2387) * _2388) + _2192;
        _2308 = (((((_2368 * _2020) + _745) * cbLight._m0[_2319].z) * _2387) * _2388) + _2194;
    }
    float _2523;
    float _2525;
    float _2527;
    float _2529;
    float _2531;
    float _2533;
    if (_1827.y == 0u)
    {
        float _2463 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2464 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2463;
        float _2465 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2463;
        float _2466 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2463;
        uvec4 _2478 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2479 = _2478.x;
        uint _2490 = uint((float(_2478.y) * floor(float(uint(cbSceneParam._m0[85u].y * _678) / _2479))) + floor(float(uint(cbSceneParam._m0[85u].x * _677) / _2479)));
        float _2500 = (log2(_2466 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2501 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
        uint _2504 = uint(isnan(14.0) ? _2501 : (isnan(_2501) ? 14.0 : min(_2501, 14.0)));
        uvec4 _2509 = texelFetch(g_lightClusterGridBuffer, int(((_2504 << 2u) + (_2490 << 6u)) >> 2u));
        uint _2510 = _2509.x;
        uint _2511 = _2478.z;
        float _2640;
        float _2642;
        float _2644;
        float _2646;
        float _2648;
        float _2650;
        if (((((1u << ((_2511 >> 4u) & 15u)) + 4294967295u) & _2510) == 0u) || ((_2511 & 240u) == 0u))
        {
            _2640 = 0.0;
            _2642 = 0.0;
            _2644 = 0.0;
            _2646 = 0.0;
            _2648 = 0.0;
            _2650 = 0.0;
        }
        else
        {
            float _2641;
            float _2643;
            float _2645;
            float _2647;
            float _2649;
            float _2651;
            float _2801 = 0.0;
            float _2802 = 0.0;
            float _2803 = 0.0;
            float _2804 = 0.0;
            float _2805 = 0.0;
            float _2806 = 0.0;
            uint _2807 = 0u;
            uint _2816;
            bool _2817;
            for (;;)
            {
                _2816 = texelFetch(g_lightClassification, int((((_2504 << 5u) + (_2490 << 9u)) + (_2807 << 2u)) >> 2u)).x;
                _2817 = _2816 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2817)
                {
                    frontier_phi_66_pred = _2801;
                    frontier_phi_66_pred_1 = _2806;
                    frontier_phi_66_pred_2 = _2805;
                    frontier_phi_66_pred_3 = _2804;
                    frontier_phi_66_pred_4 = _2803;
                    frontier_phi_66_pred_5 = _2802;
                }
                else
                {
                    float _2946;
                    float _2947;
                    float _2948;
                    float _2949;
                    float _2950;
                    float _2951;
                    uint _2952;
                    _2946 = _2801;
                    _2947 = _2802;
                    _2948 = _2803;
                    _2949 = _2804;
                    _2950 = _2805;
                    _2951 = _2806;
                    _2952 = _2816;
                    float _2873;
                    float _2874;
                    float _2875;
                    float _2876;
                    float _2877;
                    float _2878;
                    for (;;)
                    {
                        uint _2956 = uint(findLSB(_2952)) + (_2807 << 5u);
                        uint _2953 = (_2952 + 4294967295u) & _2952;
                        uint _2958 = _2956 * 48u;
                        vec4 _2972 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2958)).x, texelFetch(g_PointLightRenderingBuffer, int(_2958 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2958 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2958 + 3u)).x));
                        uint _2978 = (_2956 * 48u) + 4u;
                        vec4 _2991 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2978)).x, texelFetch(g_PointLightRenderingBuffer, int(_2978 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2978 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2978 + 3u)).x));
                        uint _2997 = (_2956 * 48u) + 8u;
                        vec3 _3008 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2997)).x, texelFetch(g_PointLightRenderingBuffer, int(_2997 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2997 + 2u)).x));
                        float _3012 = _2972.x - _2464;
                        float _3013 = _2972.y - _2465;
                        float _3014 = _2972.z - _2466;
                        float _3015 = dot(vec3(_3012, _3013, _3014), vec3(_3012, _3013, _3014));
                        float _3018 = inversesqrt(_3015);
                        float _3019 = _3018 * _3012;
                        float _3020 = _3018 * _3013;
                        float _3021 = _3018 * _3014;
                        float _3022 = dot(vec3(_698, _701, _704), vec3(_3019, _3020, _3021));
                        float _3027 = 1.0 - (_3015 * _2972.w);
                        float _4385 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0));
                        float _3028 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
                        float _3029 = sqrt(_3015) * _2991.w;
                        float _3032 = 1.39999997615814208984375 / (_3029 + 1.39999997615814208984375);
                        float _3033 = _3032 * _3032;
                        float _3036 = ((1.0 - _3033) * _3022) + _3033;
                        float _3039 = _3029 * _3029;
                        float _3043 = ((isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0))) * _3028) / ((_3039 * 0.699999988079071044921875) + 1.0);
                        float _3047 = (-0.0) - _2464;
                        float _3048 = (-0.0) - _2465;
                        float _3049 = (-0.0) - _2466;
                        float _3053 = inversesqrt(dot(vec3(_3047, _3048, _3049), vec3(_3047, _3048, _3049)));
                        float _3054 = _3053 * _3047;
                        float _3055 = _3053 * _3048;
                        float _3056 = _3053 * _3049;
                        float _3064 = exp2(log2(1.0 / ((_3039 * 3.5) + 5.0)) * 0.25);
                        float _3065 = 1.0 - _773;
                        float _3072 = sqrt(1.0 - ((1.0 - (_3065 * _3065)) * (1.0 - (_3064 * _3064))));
                        float _3073 = _3072 * _3072;
                        float _3074 = _3073 * _3073;
                        float _3075 = _3054 + _3019;
                        float _3076 = _3055 + _3020;
                        float _3077 = _3056 + _3021;
                        float _3081 = inversesqrt(dot(vec3(_3075, _3076, _3077), vec3(_3075, _3076, _3077)));
                        float _3085 = dot(vec3(_698, _701, _704), vec3(_3054, _3055, _3056));
                        float _4401 = isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0));
                        float _3088 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
                        float _3089 = dot(vec3(_698, _701, _704), vec3(_3081 * _3075, _3081 * _3076, _3081 * _3077));
                        float _4412 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0));
                        float _3092 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
                        float _3096 = ((_3092 * _3092) * (_3074 + (-1.0))) + 1.0;
                        float _3097 = _3032 * _3073;
                        float _3098 = _3097 * _3097;
                        float _3101 = ((1.0 - _3098) * _3022) + _3098;
                        float _4423 = isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0));
                        float _3102 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
                        float _3103 = 1.0 - _3073;
                        float _3113 = (0.5 / (((_3102 * ((_3088 * _3103) + _3073)) + 9.9999999392252902907785028219223e-09) + (((_3102 * _3103) + _3073) * _3088))) * _3102;
                        float _4434 = isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0));
                        float _3124 = (((_3074 * 3.1415927410125732421875) * (isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0)))) / ((_3096 * _3096) * ((_3039 * 2.1991131305694580078125) + 3.141590118408203125))) * _3028;
                        _2876 = (_3043 * _2991.x) + _2949;
                        _2877 = (_3043 * _2991.y) + _2950;
                        _2878 = (_3043 * _2991.z) + _2951;
                        _2873 = (_3124 * _3008.x) + _2946;
                        _2874 = (_3124 * _3008.y) + _2947;
                        _2875 = (_3124 * _3008.z) + _2948;
                        if (_2953 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2946 = _2873;
                            _2947 = _2874;
                            _2948 = _2875;
                            _2949 = _2876;
                            _2950 = _2877;
                            _2951 = _2878;
                            _2952 = _2953;
                        }
                    }
                    frontier_phi_66_pred = _2873;
                    frontier_phi_66_pred_1 = _2878;
                    frontier_phi_66_pred_2 = _2877;
                    frontier_phi_66_pred_3 = _2876;
                    frontier_phi_66_pred_4 = _2875;
                    frontier_phi_66_pred_5 = _2874;
                }
                _2641 = frontier_phi_66_pred;
                _2651 = frontier_phi_66_pred_1;
                _2649 = frontier_phi_66_pred_2;
                _2647 = frontier_phi_66_pred_3;
                _2645 = frontier_phi_66_pred_4;
                _2643 = frontier_phi_66_pred_5;
                uint _2808 = _2807 + 1u;
                if (_2808 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2801 = _2641;
                    _2802 = _2643;
                    _2803 = _2645;
                    _2804 = _2647;
                    _2805 = _2649;
                    _2806 = _2651;
                    _2807 = _2808;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2640 = _2641;
            _2642 = _2643;
            _2644 = _2645;
            _2646 = _2647;
            _2648 = _2649;
            _2650 = _2651;
        }
        uvec4 _2654 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2655 = _2654.z;
        uint _2657 = (_2655 >> 8u) & 15u;
        float _2769;
        float _2771;
        float _2773;
        float _2775;
        float _2777;
        float _2779;
        if (((4294967295u << _2657) & _2510) == 0u)
        {
            _2769 = _2640;
            _2771 = _2642;
            _2773 = _2644;
            _2775 = _2646;
            _2777 = _2648;
            _2779 = _2650;
        }
        else
        {
            float _2794 = inversesqrt(dot(vec3(_2464, _2465, _2466), vec3(_2464, _2465, _2466)));
            float _2795 = _2794 * _2464;
            float _2796 = _2794 * _2465;
            float _2797 = _2794 * _2466;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2657 < ((_2655 >> 12u) & 15u))
            {
                float _2770;
                float _2772;
                float _2774;
                float _2776;
                float _2778;
                float _2780;
                float _2929 = _2640;
                float _2930 = _2642;
                float _2931 = _2644;
                float _2932 = _2646;
                float _2933 = _2648;
                float _2934 = _2650;
                uint _2935 = _2657;
                uint _2944;
                bool _2945;
                for (;;)
                {
                    _2944 = texelFetch(g_lightClassification, int((((_2504 << 5u) + (_2490 << 9u)) + (_2935 << 2u)) >> 2u)).x;
                    _2945 = _2944 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2945)
                    {
                        frontier_phi_77_pred = _2934;
                        frontier_phi_77_pred_1 = _2933;
                        frontier_phi_77_pred_2 = _2932;
                        frontier_phi_77_pred_3 = _2931;
                        frontier_phi_77_pred_4 = _2930;
                        frontier_phi_77_pred_5 = _2929;
                    }
                    else
                    {
                        float _3138;
                        float _3139;
                        float _3140;
                        float _3141;
                        float _3142;
                        float _3143;
                        float _3432;
                        float _3433;
                        float _3434;
                        float _3435;
                        float _3436;
                        float _3437;
                        float _3151 = _2929;
                        float _3152 = _2930;
                        float _3153 = _2931;
                        float _3154 = _2932;
                        float _3155 = _2933;
                        float _3156 = _2934;
                        uint _3157 = _2944;
                        uint _3158;
                        vec4 _3183;
                        float _3184;
                        vec4 _3199;
                        vec3 _3211;
                        vec4 _3226;
                        vec4 _3241;
                        float _3288;
                        bool _3289;
                        for (;;)
                        {
                            uint _3168 = ((_2935 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3157));
                            _3158 = (_3157 + 4294967295u) & _3157;
                            uint _3170 = _3168 * 40u;
                            _3183 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3170)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 3u)).x));
                            _3184 = _3183.w;
                            uint _3186 = (_3168 * 40u) + 4u;
                            _3199 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3186)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 3u)).x));
                            uint _3201 = (_3168 * 40u) + 8u;
                            _3211 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3201)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 2u)).x));
                            uint _3213 = (_3168 * 40u) + 16u;
                            _3226 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3213)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 3u)).x));
                            uint _3228 = (_3168 * 40u) + 20u;
                            _3241 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3228)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 3u)).x));
                            uint _3244 = (_3168 * 40u) + 24u;
                            vec4 _3257 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3244)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 3u)).x));
                            uint _3263 = (_3168 * 40u) + 28u;
                            vec4 _3276 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3263)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 3u)).x));
                            _3288 = fma(_2466, _3276.z, fma(_2465, _3276.y, _3276.x * _2464)) + _3276.w;
                            _3289 = !((fma(_2466, _3257.z, fma(_2465, _3257.y, _3257.x * _2464)) + _3257.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3289)
                            {
                                float _3316 = _3183.x - _2464;
                                float _3317 = _3183.y - _2465;
                                float _3318 = _3183.z - _2466;
                                float _3319 = dot(vec3(_3316, _3317, _3318), vec3(_3316, _3317, _3318));
                                float _3322 = inversesqrt(_3319);
                                float _3323 = _3322 * _3316;
                                float _3324 = _3322 * _3317;
                                float _3325 = _3322 * _3318;
                                float _3329 = 1.0 - (_3319 / (_3184 * _3184));
                                float _4445 = isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0));
                                float _3330 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
                                float _3334 = sqrt(_3319) * _3199.w;
                                float _3336 = 1.39999997615814208984375 / (_3334 + 1.39999997615814208984375);
                                float _3337 = _3336 * _3336;
                                float _3340 = ((1.0 - _3337) * dot(vec3(_3323, _3324, _3325), vec3(_698, _701, _704))) + _3337;
                                float _3343 = _3334 * _3334;
                                float _3347 = (fma(_2466, _3226.z, fma(_2465, _3226.y, _3226.x * _2464)) + _3226.w) / _3288;
                                float _3348 = (fma(_2466, _3241.z, fma(_2465, _3241.y, _3241.x * _2464)) + _3241.w) / _3288;
                                float _3352 = 1.0 - dot(vec2(_3347, _3348), vec2(_3347, _3348));
                                float _4461 = isnan(0.0) ? _3352 : (isnan(_3352) ? 0.0 : max(_3352, 0.0));
                                float _3353 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
                                float _3354 = _3353 * (((isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : max(_3340, 0.0))) * _3330) / ((_3343 * 0.699999988079071044921875) + 1.0));
                                float _3366 = exp2(log2(1.0 / ((_3343 * 3.5) + 5.0)) * 0.25);
                                float _3367 = 1.0 - _773;
                                float _3374 = sqrt(1.0 - ((1.0 - (_3367 * _3367)) * (1.0 - (_3366 * _3366))));
                                float _3375 = _3374 * _3374;
                                float _3376 = _3375 * _3375;
                                float _3377 = _3323 - _2795;
                                float _3378 = _3324 - _2796;
                                float _3379 = _3325 - _2797;
                                float _3383 = inversesqrt(dot(vec3(_3377, _3378, _3379), vec3(_3377, _3378, _3379)));
                                float _3387 = dot(vec3(_698, _701, _704), vec3((-0.0) - _2795, (-0.0) - _2796, (-0.0) - _2797));
                                float _4472 = isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : max(_3387, 0.0));
                                float _3390 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
                                float _3391 = dot(vec3(_698, _701, _704), vec3(_3383 * _3377, _3383 * _3378, _3383 * _3379));
                                float _4483 = isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : max(_3391, 0.0));
                                float _3394 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
                                float _3398 = ((_3394 * _3394) * (_3376 + (-1.0))) + 1.0;
                                float _3399 = _3336 * _3375;
                                float _3400 = _3399 * _3399;
                                float _3406 = ((1.0 - _3400) * dot(vec3(_698, _701, _704), vec3(_3323, _3324, _3325))) + _3400;
                                float _4494 = isnan(0.0) ? _3406 : (isnan(_3406) ? 0.0 : max(_3406, 0.0));
                                float _3407 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
                                float _3408 = 1.0 - _3375;
                                float _3418 = (0.5 / (((_3407 * ((_3390 * _3408) + _3375)) + 9.9999999392252902907785028219223e-09) + (((_3407 * _3408) + _3375) * _3390))) * _3407;
                                float _4505 = isnan(0.0) ? _3418 : (isnan(_3418) ? 0.0 : max(_3418, 0.0));
                                float _3428 = (_3353 * _3330) * (((_3376 * 3.1415927410125732421875) * (isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0)))) / ((_3398 * _3398) * ((_3343 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3354 * _3199.y;
                                frontier_phi_83_pred_1 = _3354 * _3199.x;
                                frontier_phi_83_pred_2 = _3428 * _3211.z;
                                frontier_phi_83_pred_3 = _3428 * _3211.y;
                                frontier_phi_83_pred_4 = _3428 * _3211.x;
                                frontier_phi_83_pred_5 = _3354 * _3199.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3436 = frontier_phi_83_pred;
                            _3435 = frontier_phi_83_pred_1;
                            _3434 = frontier_phi_83_pred_2;
                            _3433 = frontier_phi_83_pred_3;
                            _3432 = frontier_phi_83_pred_4;
                            _3437 = frontier_phi_83_pred_5;
                            _3141 = _3435 + _3154;
                            _3142 = _3436 + _3155;
                            _3143 = _3437 + _3156;
                            _3138 = _3432 + _3151;
                            _3139 = _3433 + _3152;
                            _3140 = _3434 + _3153;
                            if (_3158 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3151 = _3138;
                                _3152 = _3139;
                                _3153 = _3140;
                                _3154 = _3141;
                                _3155 = _3142;
                                _3156 = _3143;
                                _3157 = _3158;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3143;
                        frontier_phi_77_pred_1 = _3142;
                        frontier_phi_77_pred_2 = _3141;
                        frontier_phi_77_pred_3 = _3140;
                        frontier_phi_77_pred_4 = _3139;
                        frontier_phi_77_pred_5 = _3138;
                    }
                    _2780 = frontier_phi_77_pred;
                    _2778 = frontier_phi_77_pred_1;
                    _2776 = frontier_phi_77_pred_2;
                    _2774 = frontier_phi_77_pred_3;
                    _2772 = frontier_phi_77_pred_4;
                    _2770 = frontier_phi_77_pred_5;
                    uint _2936 = _2935 + 1u;
                    if (_2936 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2929 = _2770;
                        _2930 = _2772;
                        _2931 = _2774;
                        _2932 = _2776;
                        _2933 = _2778;
                        _2934 = _2780;
                        _2935 = _2936;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2774;
                frontier_phi_58_59_ladder_1 = _2780;
                frontier_phi_58_59_ladder_2 = _2778;
                frontier_phi_58_59_ladder_3 = _2776;
                frontier_phi_58_59_ladder_4 = _2772;
                frontier_phi_58_59_ladder_5 = _2770;
            }
            else
            {
                frontier_phi_58_59_ladder = _2644;
                frontier_phi_58_59_ladder_1 = _2650;
                frontier_phi_58_59_ladder_2 = _2648;
                frontier_phi_58_59_ladder_3 = _2646;
                frontier_phi_58_59_ladder_4 = _2642;
                frontier_phi_58_59_ladder_5 = _2640;
            }
            _2769 = frontier_phi_58_59_ladder_5;
            _2771 = frontier_phi_58_59_ladder_4;
            _2773 = frontier_phi_58_59_ladder;
            _2775 = frontier_phi_58_59_ladder_3;
            _2777 = frontier_phi_58_59_ladder_2;
            _2779 = frontier_phi_58_59_ladder_1;
        }
        float _2784 = isnan(1.0) ? _757 : (isnan(_757) ? 1.0 : min(_757, 1.0));
        _2523 = (_2784 * _2775) + _1959;
        _2525 = (_2784 * _2777) + _1961;
        _2527 = (_2784 * _2779) + _1963;
        _2529 = ((_2769 * _742) * _2784) + _2304;
        _2531 = ((_2771 * _744) * _2784) + _2306;
        _2533 = ((_2773 * _745) * _2784) + _2308;
    }
    else
    {
        _2523 = _1959;
        _2525 = _1961;
        _2527 = _1963;
        _2529 = _2304;
        _2531 = _2306;
        _2533 = _2308;
    }
    uint _2539 = _718 + uint(cbMatDynParam._m0[0u].w);
    float _2545 = ((((((_492.x - _489) * _425) + _489) * cbMtdParam._m0[13u].x) + ((((_446.x - _443) * _425) + _443) * cbMtdParam._m0[11u].x)) * _292) * cbInstanceData._m0[_2539].x;
    float _2546 = ((((((_492.y - _490) * _425) + _490) * cbMtdParam._m0[13u].y) + ((((_446.y - _444) * _425) + _444) * cbMtdParam._m0[11u].y)) * _292) * cbInstanceData._m0[_2539].y;
    float _2547 = ((((((_492.z - _491) * _425) + _491) * cbMtdParam._m0[13u].z) + ((((_446.z - _445) * _425) + _445) * cbMtdParam._m0[11u].z)) * _292) * cbInstanceData._m0[_2539].z;
    float _4521 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _4532 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _4543 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _2564 = (((isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0))) * (_2523 + ((isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0))) * _757))) + ((_2529 + ((isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0))) * _1597)) * cbPerFrame._m0[3u].x)) + _2545;
    float _2566 = (_2546 + ((_2531 + ((isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0))) * _1597)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0))) * (_2525 + ((isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0))) * _757)));
    float _2568 = (_2547 + ((_2533 + ((isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0))) * _1597)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0))) * (_2527 + ((isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0))) * _757)));
    float _2569 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
    float _2570 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
    float _2571 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
    float _2577 = cbMtdParam._m0[2u].x * _2545;
    float _2578 = cbMtdParam._m0[2u].y * _2546;
    float _2579 = cbMtdParam._m0[2u].z * _2547;
    float _4569 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2581 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
    uint _2582 = _717 + 6u;
    float _2590 = _677 / cbSceneParam._m0[86u].x;
    float _2591 = _678 / cbSceneParam._m0[86u].y;
    vec4 _2605 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2590, _2591, (log2((isnan(cbSceneParam._m0[77u].w) ? _599 : (isnan(_599) ? cbSceneParam._m0[77u].w : min(_599, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2607 = _2605.x;
    float _2608 = _2605.y;
    float _2609 = _2605.z;
    float _2610 = _2605.w;
    float _2702;
    float _2704;
    float _2706;
    float _2708;
    if (_599 > cbSceneParam._m0[78u].w)
    {
        float _2665 = isnan(_599) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _599 : min(cbSceneParam._m0[80u].w, _599));
        float _2666 = _2665 / _599;
        float _2677 = _2666 * _650;
        float _2678 = _651 * _2666;
        float _2679 = (-0.0) - _2678;
        float _2680 = _2666 * _652;
        float _2682 = (cbSceneParam._m0[77u].w * _2679) / _2665;
        float _2683 = _2682 + cbSceneParam._m0[79u].w;
        float _2684 = cbSceneParam._m0[79u].w - _2678;
        float _2690 = sqrt(((_2677 * _2677) + (_2678 * _2678)) + (_2680 * _2680));
        float _2693 = (1.0 - (cbSceneParam._m0[77u].w / _2665)) * _2690;
        float _2698 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2700 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2886;
        if (abs((_2679 - _2682) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2886 = ((((_2683 > 0.0) ? exp2(_2698 * _2683) : (2.0 - exp2(_2700 * _2683))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2693;
        }
        else
        {
            float _2830 = 1.0 / cbSceneParam._m0[80u].x;
            float _2831 = isnan(_2684) ? _2683 : (isnan(_2683) ? _2684 : max(_2683, _2684));
            float _2832 = isnan(_2684) ? _2683 : (isnan(_2683) ? _2684 : min(_2683, _2684));
            float _2841 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : min(_2831, 0.0));
            float _2842 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : min(_2832, 0.0));
            _2886 = ((abs(_2690 / _2679) * cbSceneParam._m0[80u].y) * ((((_2841 - _2842) * 2.0) - ((exp2(_2698 * (isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0)))) - exp2(_2698 * (isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0))))) * _2830)) - ((exp2(_2700 * _2841) - exp2(_2700 * _2842)) * _2830))) + (_2693 * cbSceneParam._m0[80u].z);
        }
        vec4 _2888 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2590, _2591, 1.0), 0.0);
        float _2897 = exp2((_2886 * (-1.44269502162933349609375)) * (1.0 - _2888.w));
        float _2898 = log2(_2897);
        float _2914 = log2(_2610);
        _2702 = (exp2(_2914 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2898 * cbSceneParam._m0[78u].x)) * _2888.x) / cbSceneParam._m0[78u].x)) + _2607;
        _2704 = (exp2(_2914 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2898 * cbSceneParam._m0[78u].y)) * _2888.y) / cbSceneParam._m0[78u].y)) + _2608;
        _2706 = (exp2(_2914 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2898 * cbSceneParam._m0[78u].z)) * _2888.z) / cbSceneParam._m0[78u].z)) + _2609;
        _2708 = _2897 * _2610;
    }
    else
    {
        _2702 = _2607;
        _2704 = _2608;
        _2706 = _2609;
        _2708 = _2610;
    }
    bool _2924;
    vec4 _2718;
    vec4 _2740;
    float _2742;
    float _2746;
    float _2747;
    float _2748;
    float _2751;
    float _2754;
    float _2757;
    float _2758;
    bool _2768;
    for (;;)
    {
        _2718 = cbMatDynParam._m0[0u];
        float _2720 = roundEven(_2718.y);
        bool _2721 = _2720 == 3.0;
        float _2722 = log2(_2708);
        float _2726 = exp2(_2722 * cbSceneParam._m0[78u].x);
        float _2727 = exp2(_2722 * cbSceneParam._m0[78u].y);
        float _2728 = exp2(_2722 * cbSceneParam._m0[78u].z);
        float _2729 = _2726 * _2569;
        float _2730 = _2727 * _2570;
        float _2731 = _2728 * _2571;
        float _2738 = _666 + (-0.5);
        _2740 = cbMtdParam._m0[1u];
        _2742 = _2740.y * _2738;
        float _2745 = (_2720 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2746 = _2745 * (_2721 ? _2729 : (_2729 + (cbSceneParam._m0[72u].w * _2702)));
        _2747 = _2745 * (_2721 ? _2730 : (_2730 + (cbSceneParam._m0[72u].w * _2704)));
        _2748 = _2745 * (_2721 ? _2731 : (_2731 + (cbSceneParam._m0[72u].w * _2706)));
        _2751 = ((_2577 * _2581) * _2726) * _2745;
        _2754 = ((_2578 * _2581) * _2727) * _2745;
        _2757 = ((_2579 * _2581) * _2728) * _2745;
        _2758 = _2738 * 0.999000012874603271484375;
        _2768 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2768)
        {
            if ((cbInstanceData._m0[_717 + 7u].x + _2758) < 0.5)
            {
                _2924 = true;
                break;
            }
        }
        uint _2865 = _718 + uint(_2718.w);
        if ((cbInstanceData._m0[_2865].w < 1.0) && ((cbInstanceData._m0[_2865].w + _2758) < 0.5))
        {
            _2924 = true;
            break;
        }
        if ((_2742 + 1.0) < _2740.x)
        {
            _2924 = true;
            break;
        }
        _2924 = false;
        break;
    }
    float _3129;
    if (_2924)
    {
        discard_state = true;
        _3129 = 0.0;
    }
    else
    {
        _3129 = cbInstanceData._m0[_2582].w;
    }
    SV_Target.x = _2746;
    SV_Target.y = _2747;
    SV_Target.z = _2748;
    SV_Target.w = _3129;
    SV_Target_1.x = _2751;
    SV_Target_1.y = _2754;
    SV_Target_1.z = _2757;
    SV_Target_1.w = cbInstanceData._m0[_2582].w;
    discard_exit();
}


