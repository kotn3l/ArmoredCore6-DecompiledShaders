#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1128;
float _3810;
float _3811;
float _3812;
float _3813;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _201 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _202 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _203 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _209 = inversesqrt(dot(vec3(_201, _202, _203), vec3(_201, _202, _203)));
    float _216 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _245 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _251 = _245.x * cbMtdParam._m0[9u].x;
    float _252 = _245.y * cbMtdParam._m0[9u].y;
    float _253 = _245.z * cbMtdParam._m0[9u].z;
    vec4 _270 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _291 = TEXCOORD_9.x - ((cbMtdParam._m0[16u].y * (1.0 - TEXCOORD_9.x)) * (_270.x + 0.00999999977648258209228515625));
    float _293 = _291 * (cbMtdParam._m0[16u].z + 1.0);
    float _3822 = isnan(0.0) ? _293 : (isnan(_293) ? 0.0 : max(_293, 0.0));
    float _294 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
    float _302 = ((((cbMtdParam._m0[12u].x - _251) * TEXCOORD_9.x) * cbMtdParam._m0[16u].x) * _294) + _251;
    float _303 = ((((cbMtdParam._m0[12u].y - _252) * TEXCOORD_9.y) * cbMtdParam._m0[16u].x) * _294) + _252;
    float _304 = (((cbMtdParam._m0[16u].x * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _253)) * _294) + _253;
    vec4 _316 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _320 = _316.z;
    float _324 = (_316.x * 2.0) + (-1.0);
    float _326 = (_316.y * 2.0) + (-1.0);
    float _327 = dot(vec2(_324, _326), vec2(_324, _326));
    float _3833 = isnan(0.0) ? _327 : (isnan(_327) ? 0.0 : max(_327, 0.0));
    float _332 = sqrt(1.0 - (isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0))));
    float _338 = _291 * (cbMtdParam._m0[16u].y + 1.0);
    float _3844 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _342 = ((cbMtdParam._m0[15u].y - _320) * (isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0)))) + _320;
    float _355 = (cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _356 = (cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _383 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * ((cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * ((cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[10u].w));
    float _388 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[15u].w;
    float _395 = ((_383.y * 0.5) + (-0.25)) * cbMtdParam._m0[15u].z;
    float _397 = (-0.0) - (cbMtdParam._m0[15u].z * ((_383.x * 0.5) + (-0.25)));
    float _399 = fract(_388);
    float _401 = fract(_388 + 0.5);
    float _402 = _399 * _397;
    float _403 = _395 * _399;
    float _406 = _401 * _397;
    float _407 = _395 * _401;
    float _412 = abs((_399 * 2.0) + (-1.0));
    vec4 _428 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_402 + _355) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_403 + _356) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _430 = _428.x;
    float _431 = _428.y;
    float _432 = _428.z;
    vec4 _433 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_406 + _355) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_407 + _356) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _460 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _461 = (cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _474 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_402 + _460) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_403 + _461) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _476 = _474.x;
    float _477 = _474.y;
    float _478 = _474.z;
    vec4 _479 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_406 + _460) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_407 + _461) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    vec4 _523 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[16u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, (((cbMtdParam._m0[17u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w));
    float _529 = (_523.x * 2.0) + (-1.0);
    float _530 = (_523.y * 2.0) + (-1.0);
    float _531 = dot(vec2(_529, _530), vec2(_529, _530));
    float _3855 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _547 = (_294 * (((cbMtdParam._m0[14u].z * _324) - _324) + _529)) + _324;
    float _548 = (_294 * (((cbMtdParam._m0[14u].z * _326) - _326) + _530)) + _326;
    float _549 = (_294 * (sqrt(1.0 - (isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0)))) - _332)) + _332;
    float _552 = fma(_549, _216 * NORMAL.x, fma(_548, _223 * TANGENT.x, (_209 * _201) * _547));
    float _555 = fma(_549, _216 * NORMAL.y, fma(_548, _223 * TANGENT.y, (_209 * _202) * _547));
    float _558 = fma(_549, _216 * NORMAL.z, fma(_548, _223 * TANGENT.z, (_209 * _203) * _547));
    float _562 = inversesqrt(dot(vec3(_552, _555, _558), vec3(_552, _555, _558)));
    float _563 = _562 * _552;
    float _564 = _562 * _555;
    float _565 = _562 * _558;
    float _3866 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _566 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
    float _3877 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _3888 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _3899 = isnan(0.0) ? _304 : (isnan(_304) ? 0.0 : max(_304, 0.0));
    float _585 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _626 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _636 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _626);
    float _637 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _626);
    float _638 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _626);
    float _642 = inversesqrt(dot(vec3(_636, _637, _638), vec3(_636, _637, _638)));
    float _643 = _636 * _642;
    float _644 = _637 * _642;
    float _645 = _638 * _642;
    vec4 _650 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _652 = _650.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _809 = sqrt(((_636 * _636) + (_637 * _637)) + (_638 * _638));
        float _815 = (cbMatDynParam._m0[5u].x * _809) + cbMatDynParam._m0[5u].y;
        float _3910 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _816 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _820 = (cbMatDynParam._m0[5u].z * _809) + cbMatDynParam._m0[5u].w;
        float _3921 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0))) - _816)) + _816) < ((_652 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _664 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _665 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _685 = fma(_565, cbSceneParam._m0[5u].z, fma(_564, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _563));
    float _688 = fma(_565, cbSceneParam._m0[6u].z, fma(_564, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _563));
    float _691 = fma(_565, cbSceneParam._m0[7u].z, fma(_564, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _563));
    uint _704 = uint(roundEven(NORMAL.w)) * 13u;
    uint _705 = _704 + 9u;
    uint _706 = _705 + uint(cbMatDynParam._m0[0u].w);
    float _712 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0)))) * cbInstanceData._m0[_706].x;
    float _713 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0)))) * cbInstanceData._m0[_706].y;
    float _714 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0)))) * cbInstanceData._m0[_706].z;
    float _3932 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _715 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
    float _3943 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _716 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
    float _3954 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _717 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
    vec4 _726 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _664, cbSceneParam._m0[86u].y * _665));
    float _729 = _726.x * TEXCOORD_3.w;
    float _730 = dot(vec3(_563, _564, _565), vec3(_643, _644, _645));
    float _733 = _730 * 2.0;
    float _737 = (_733 * _563) - _643;
    float _738 = (_733 * _564) - _644;
    float _739 = (_733 * _565) - _645;
    float _743 = abs(dot(vec3(_643, _644, _645), vec3(_563, _564, _565)));
    float _3965 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _745 = sqrt(_566);
    float _758 = exp2((_745 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_745 * 3.0));
    float _790 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _794 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _798 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1127;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _853 = fma(_798, cbModelParam._m0[26u].z, fma(_794, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _790));
        float _857 = fma(_798, cbModelParam._m0[27u].z, fma(_794, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _790));
        float _861 = fma(_798, cbModelParam._m0[28u].z, fma(_794, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _790));
        float _885 = _790 + _563;
        float _886 = _794 + _564;
        float _887 = _798 + _565;
        float _897 = fma(_887, cbModelParam._m0[26u].z, fma(_886, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _885)) - _853;
        float _898 = fma(_887, cbModelParam._m0[27u].z, fma(_886, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _885)) - _857;
        float _899 = fma(_887, cbModelParam._m0[28u].z, fma(_886, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _885)) - _861;
        float _903 = inversesqrt(dot(vec3(_897, _898, _899), vec3(_897, _898, _899)));
        float _916 = ((_903 * _897) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_853 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _917 = ((_903 * _898) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_857 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _918 = ((_903 * _899) / cbModelParam._m0[34u].z) + ((((((_861 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _921 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_916, _917, _918), 0.0);
        vec4 _928 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_916, _917, _918), 0.0);
        vec4 _935 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_916, _917, _918), 0.0);
        vec4 _942 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_916, _917, _918), 0.0);
        float _955 = exp2((_921.w + (-0.5)) * 20.0) * 2.0;
        float _956 = _955 * (_921.x + (-0.5));
        float _957 = _955 * (_921.y + (-0.5));
        float _958 = _955 * (_921.z + (-0.5));
        float _965 = exp2((_928.w + (-0.5)) * 20.0) * 2.0;
        float _966 = _965 * (_928.x + (-0.5));
        float _967 = _965 * (_928.y + (-0.5));
        float _968 = _965 * (_928.z + (-0.5));
        float _975 = exp2((_935.w + (-0.5)) * 20.0) * 2.0;
        float _976 = _975 * (_935.x + (-0.5));
        float _977 = _975 * (_935.y + (-0.5));
        float _978 = _975 * (_935.z + (-0.5));
        float _985 = exp2((_942.w + (-0.5)) * 20.0) * 2.0;
        float _986 = _985 * (_942.x + (-0.5));
        float _987 = _985 * (_942.y + (-0.5));
        float _988 = _985 * (_942.z + (-0.5));
        float _989 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _990 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _991 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _992 = _956 * 0.5;
        float _993 = _966 * 0.5;
        float _994 = _976 * 0.5;
        float _995 = dot(vec3(_992, _993, _994), vec3(_992, _993, _994));
        float _1000 = (_995 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_995);
        float _1009 = (dot(vec3(_563, _564, _565), vec3(_1000 * _992, _1000 * _993, _1000 * _994)) + 1.0) * 0.5;
        float _3991 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1019 = sqrt(((_993 * _993) + (_992 * _992)) + (_994 * _994)) / (_989 + 9.9999997473787516355514526367188e-06);
        float _4002 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1020 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _1021 = _1020 * 2.0;
        float _1025 = (1.0 - _1020) / (_1020 + 1.0);
        float _4013 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1026 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _1035 = ((((1.0 - _1026) * (_1021 + 2.0)) * exp2(log2(isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * (_1021 + 1.0))) + _1026) * _989;
        float _1036 = _957 * 0.5;
        float _1037 = _967 * 0.5;
        float _1038 = _977 * 0.5;
        float _1039 = dot(vec3(_1036, _1037, _1038), vec3(_1036, _1037, _1038));
        float _1044 = (_1039 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1039);
        float _1052 = (dot(vec3(_563, _564, _565), vec3(_1044 * _1036, _1044 * _1037, _1044 * _1038)) + 1.0) * 0.5;
        float _4024 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1061 = sqrt(((_1037 * _1037) + (_1036 * _1036)) + (_1038 * _1038)) / (_990 + 9.9999997473787516355514526367188e-06);
        float _4035 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1062 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _1063 = _1062 * 2.0;
        float _1067 = (1.0 - _1062) / (_1062 + 1.0);
        float _4046 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1068 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
        float _1077 = ((((1.0 - _1068) * (_1063 + 2.0)) * exp2(log2(isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0))) * (_1063 + 1.0))) + _1068) * _990;
        float _1078 = _958 * 0.5;
        float _1079 = _968 * 0.5;
        float _1080 = _978 * 0.5;
        float _1081 = dot(vec3(_1078, _1079, _1080), vec3(_1078, _1079, _1080));
        float _1086 = (_1081 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1081);
        float _1094 = (dot(vec3(_563, _564, _565), vec3(_1086 * _1078, _1086 * _1079, _1086 * _1080)) + 1.0) * 0.5;
        float _4057 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1103 = sqrt(((_1079 * _1079) + (_1078 * _1078)) + (_1080 * _1080)) / (_991 + 9.9999997473787516355514526367188e-06);
        float _4068 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1104 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _1105 = _1104 * 2.0;
        float _1109 = (1.0 - _1104) / (_1104 + 1.0);
        float _4079 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1110 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
        float _1119 = ((((1.0 - _1110) * (_1105 + 2.0)) * exp2(log2(isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))) * (_1105 + 1.0))) + _1110) * _991;
        _1127 = _958;
        _1129 = _957;
        _1130 = _956;
        _1131 = _968;
        _1132 = _967;
        _1133 = _966;
        _1134 = _978;
        _1135 = _977;
        _1136 = _976;
        _1137 = _991;
        _1138 = _990;
        _1139 = _989;
        _1140 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0)));
        _1141 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0)));
        _1142 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0)));
    }
    else
    {
        _1127 = _1128;
        _1129 = _1128;
        _1130 = _1128;
        _1131 = _1128;
        _1132 = _1128;
        _1133 = _1128;
        _1134 = _1128;
        _1135 = _1128;
        _1136 = _1128;
        _1137 = _1128;
        _1138 = _1128;
        _1139 = _1128;
        _1140 = 0.0;
        _1141 = 0.0;
        _1142 = 0.0;
    }
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1171 = fma(_798, cbModelParam._m0[30u].z, fma(_794, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _790));
        float _1175 = fma(_798, cbModelParam._m0[31u].z, fma(_794, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _790));
        float _1179 = fma(_798, cbModelParam._m0[32u].z, fma(_794, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _790));
        float _1202 = _790 + _563;
        float _1203 = _794 + _564;
        float _1204 = _798 + _565;
        float _1214 = fma(_1204, cbModelParam._m0[30u].z, fma(_1203, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1202)) - _1171;
        float _1215 = fma(_1204, cbModelParam._m0[31u].z, fma(_1203, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1202)) - _1175;
        float _1216 = fma(_1204, cbModelParam._m0[32u].z, fma(_1203, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1202)) - _1179;
        float _1220 = inversesqrt(dot(vec3(_1214, _1215, _1216), vec3(_1214, _1215, _1216)));
        float _1233 = ((_1220 * _1214) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1171 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1234 = ((_1220 * _1215) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1175 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1235 = ((_1220 * _1216) / cbModelParam._m0[35u].z) + ((((((_1179 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1237 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1233, _1234, _1235), 0.0);
        vec4 _1244 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1233, _1234, _1235), 0.0);
        vec4 _1251 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1233, _1234, _1235), 0.0);
        vec4 _1258 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1233, _1234, _1235), 0.0);
        float _1270 = exp2((_1237.w + (-0.5)) * 20.0) * 2.0;
        float _1271 = _1270 * (_1237.x + (-0.5));
        float _1272 = _1270 * (_1237.y + (-0.5));
        float _1273 = _1270 * (_1237.z + (-0.5));
        float _1280 = exp2((_1244.w + (-0.5)) * 20.0) * 2.0;
        float _1281 = _1280 * (_1244.x + (-0.5));
        float _1282 = _1280 * (_1244.y + (-0.5));
        float _1283 = _1280 * (_1244.z + (-0.5));
        float _1290 = exp2((_1251.w + (-0.5)) * 20.0) * 2.0;
        float _1291 = _1290 * (_1251.x + (-0.5));
        float _1292 = _1290 * (_1251.y + (-0.5));
        float _1293 = _1290 * (_1251.z + (-0.5));
        float _1300 = exp2((_1258.w + (-0.5)) * 20.0) * 2.0;
        float _1301 = _1300 * (_1258.x + (-0.5));
        float _1302 = _1300 * (_1258.y + (-0.5));
        float _1303 = _1300 * (_1258.z + (-0.5));
        float _1304 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1305 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1306 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1307 = _1271 * 0.5;
        float _1308 = _1281 * 0.5;
        float _1309 = _1291 * 0.5;
        float _1310 = dot(vec3(_1307, _1308, _1309), vec3(_1307, _1308, _1309));
        float _1315 = (_1310 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1310);
        float _1323 = (dot(vec3(_563, _564, _565), vec3(_1315 * _1307, _1315 * _1308, _1315 * _1309)) + 1.0) * 0.5;
        float _4120 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1332 = sqrt(((_1308 * _1308) + (_1307 * _1307)) + (_1309 * _1309)) / (_1304 + 9.9999997473787516355514526367188e-06);
        float _4131 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
        float _1334 = _1333 * 2.0;
        float _1338 = (1.0 - _1333) / (_1333 + 1.0);
        float _4142 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
        float _1348 = ((((1.0 - _1339) * (_1334 + 2.0)) * exp2(log2(isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * (_1334 + 1.0))) + _1339) * _1304;
        float _1349 = _1272 * 0.5;
        float _1350 = _1282 * 0.5;
        float _1351 = _1292 * 0.5;
        float _1352 = dot(vec3(_1349, _1350, _1351), vec3(_1349, _1350, _1351));
        float _1357 = (_1352 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1352);
        float _1365 = (dot(vec3(_563, _564, _565), vec3(_1357 * _1349, _1357 * _1350, _1357 * _1351)) + 1.0) * 0.5;
        float _4153 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1374 = sqrt(((_1350 * _1350) + (_1349 * _1349)) + (_1351 * _1351)) / (_1305 + 9.9999997473787516355514526367188e-06);
        float _4164 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _1376 = _1375 * 2.0;
        float _1380 = (1.0 - _1375) / (_1375 + 1.0);
        float _4175 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1381 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _1390 = ((((1.0 - _1381) * (_1376 + 2.0)) * exp2(log2(isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0))) * (_1376 + 1.0))) + _1381) * _1305;
        float _1391 = _1273 * 0.5;
        float _1392 = _1283 * 0.5;
        float _1393 = _1293 * 0.5;
        float _1394 = dot(vec3(_1391, _1392, _1393), vec3(_1391, _1392, _1393));
        float _1399 = (_1394 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1394);
        float _1407 = (dot(vec3(_563, _564, _565), vec3(_1399 * _1391, _1399 * _1392, _1399 * _1393)) + 1.0) * 0.5;
        float _4186 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1416 = sqrt(((_1392 * _1392) + (_1391 * _1391)) + (_1393 * _1393)) / (_1306 + 9.9999997473787516355514526367188e-06);
        float _4197 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1417 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _1418 = _1417 * 2.0;
        float _1422 = (1.0 - _1417) / (_1417 + 1.0);
        float _4208 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1423 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
        float _1432 = ((((1.0 - _1423) * (_1418 + 2.0)) * exp2(log2(isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0))) * (_1418 + 1.0))) + _1423) * _1306;
        _1440 = _1273;
        _1441 = _1272;
        _1442 = _1271;
        _1443 = _1283;
        _1444 = _1282;
        _1445 = _1281;
        _1446 = _1293;
        _1447 = _1292;
        _1448 = _1291;
        _1449 = _1306;
        _1450 = _1305;
        _1451 = _1304;
        _1452 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0)));
        _1453 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0)));
        _1454 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0)));
    }
    else
    {
        _1440 = _1128;
        _1441 = _1128;
        _1442 = _1128;
        _1443 = _1128;
        _1444 = _1128;
        _1445 = _1128;
        _1446 = _1128;
        _1447 = _1128;
        _1448 = _1128;
        _1449 = _1128;
        _1450 = _1128;
        _1451 = _1128;
        _1452 = 0.0;
        _1453 = 0.0;
        _1454 = 0.0;
    }
    float _1464 = (cbModelParam._m0[1u].x * (_1452 - _1140)) + _1140;
    float _1465 = (cbModelParam._m0[1u].x * (_1453 - _1141)) + _1141;
    float _1466 = (cbModelParam._m0[1u].x * (_1454 - _1142)) + _1142;
    float _1487 = fma(_1466, cbSceneParam._m0[89u].z, fma(_1465, cbSceneParam._m0[89u].y, _1464 * cbSceneParam._m0[89u].x));
    float _1490 = fma(_1466, cbSceneParam._m0[90u].z, fma(_1465, cbSceneParam._m0[90u].y, _1464 * cbSceneParam._m0[90u].x));
    float _1493 = fma(_1466, cbSceneParam._m0[91u].z, fma(_1465, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1464));
    float _1508 = _737 * 0.5;
    float _1509 = _738 * 0.5;
    float _1510 = _739 * 0.5;
    float _1511 = dot(vec4(_1508, _1509, _1510, 1.0), vec4(_1442, _1445, _1448, _1451));
    float _1514 = dot(vec4(_1508, _1509, _1510, 1.0), vec4(_1441, _1444, _1447, _1450));
    float _1517 = dot(vec4(_1508, _1509, _1510, 1.0), vec4(_1440, _1443, _1446, _1449));
    float _1551;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1524 = dot(vec4(_1508, _1509, _1510, 1.0), vec4(_1127, _1131, _1134, _1137));
        float _1528 = dot(vec4(_1508, _1509, _1510, 1.0), vec4(_1129, _1132, _1135, _1138));
        float _1532 = dot(vec4(_1508, _1509, _1510, 1.0), vec4(_1130, _1133, _1136, _1139));
        float _1539 = dot(vec4(cbModelParam._m0[39u]), vec4(_1508, _1509, _1510, 1.0));
        _1551 = dot(vec3(isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0)), isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0)), isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1539) ? 0.0 : (isnan(0.0) ? _1539 : max(0.0, _1539))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1551 = 1.0;
    }
    float _1562;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1553 = dot(vec4(cbModelParam._m0[40u]), vec4(_1508, _1509, _1510, 1.0));
        _1562 = dot(vec3(isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0)), isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0)), isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1553) ? 0.0 : (isnan(0.0) ? _1553 : max(0.0, _1553))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1562 = 1.0;
    }
    float _1566 = (_1562 * cbModelParam._m0[1u].x) + (_1551 * (1.0 - cbModelParam._m0[1u].x));
    float _1576 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _566);
    float _1577 = isnan(_1576) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1576 : min(cbModelParam._m0[25u].z, _1576));
    float _1657;
    float _1659;
    float _1661;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1624 = fma(_798, cbModelParam._m0[13u].z, fma(_794, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _790)) + cbModelParam._m0[13u].w;
        float _1628 = fma(_798, cbModelParam._m0[14u].z, fma(_794, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _790)) + cbModelParam._m0[14u].w;
        float _1632 = fma(_798, cbModelParam._m0[15u].z, fma(_794, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _790)) + cbModelParam._m0[15u].w;
        float _1635 = fma(_739, cbModelParam._m0[13u].z, fma(_738, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _737));
        float _1638 = fma(_739, cbModelParam._m0[14u].z, fma(_738, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _737));
        float _1641 = fma(_739, cbModelParam._m0[15u].z, fma(_738, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _737));
        float _1669;
        if (_1635 > 0.0)
        {
            _1669 = abs((1.0 - _1624) / _1635);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1635 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1624 + 1.0) / _1635);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1669 = frontier_phi_17_15_ladder;
        }
        float _1839;
        if (_1638 > 0.0)
        {
            _1839 = abs((1.0 - _1628) / _1638);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1638 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1628 + 1.0) / _1638);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1839 = frontier_phi_26_22_ladder;
        }
        float _2135;
        if (_1641 > 0.0)
        {
            _2135 = abs((1.0 - _1632) / _1641);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1641 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1632 + 1.0) / _1641);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2135 = frontier_phi_38_33_ladder;
        }
        float _2137 = isnan(_1839) ? _1669 : (isnan(_1669) ? _1839 : min(_1669, _1839));
        float _2138 = isnan(_2135) ? _2137 : (isnan(_2137) ? _2135 : min(_2137, _2135));
        float _2142 = (_2138 * _1635) + _1624;
        float _2143 = (_2138 * _1638) + _1628;
        float _2144 = (_2138 * _1641) + _1632;
        float _2145 = _2138 * 9.9999997473787516355514526367188e-05;
        float _2147 = (-1.0) - _2145;
        float _2149 = _2145 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2144 > _2149) || ((_2144 < _2147) || ((_2143 > _2149) || ((_2143 < _2147) || ((_2142 < _2147) || (_2142 > _2149))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2289 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2144, cbModelParam._m0[9u].z, fma(_2143, cbModelParam._m0[9u].y, _2142 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2144, cbModelParam._m0[10u].z, fma(_2143, cbModelParam._m0[10u].y, _2142 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2144, cbModelParam._m0[11u].z, fma(_2143, cbModelParam._m0[11u].y, _2142 * cbModelParam._m0[11u].x))), _1577);
            frontier_phi_16_38_ladder = _2289.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2289.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2289.x * cbModelParam._m0[1u].y;
        }
        _1657 = frontier_phi_16_38_ladder_2;
        _1659 = frontier_phi_16_38_ladder_1;
        _1661 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1645 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_737, _738, _739), _1577);
        _1657 = _1645.x * cbModelParam._m0[1u].y;
        _1659 = _1645.y * cbModelParam._m0[1u].y;
        _1661 = _1645.z * cbModelParam._m0[1u].y;
    }
    float _1665 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _566);
    float _1666 = isnan(_1665) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1665 : min(cbModelParam._m0[25u].w, _1665));
    float _1756;
    float _1758;
    float _1760;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1720 = fma(_798, cbModelParam._m0[21u].z, fma(_794, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _790)) + cbModelParam._m0[21u].w;
        float _1724 = fma(_798, cbModelParam._m0[22u].z, fma(_794, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _790)) + cbModelParam._m0[22u].w;
        float _1728 = fma(_798, cbModelParam._m0[23u].z, fma(_794, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _790)) + cbModelParam._m0[23u].w;
        float _1731 = fma(_739, cbModelParam._m0[21u].z, fma(_738, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _737));
        float _1734 = fma(_739, cbModelParam._m0[22u].z, fma(_738, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _737));
        float _1737 = fma(_739, cbModelParam._m0[23u].z, fma(_738, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _737));
        float _1844;
        if (_1731 > 0.0)
        {
            _1844 = abs((1.0 - _1720) / _1731);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1731 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1720 + 1.0) / _1731);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1844 = frontier_phi_28_24_ladder;
        }
        float _2162;
        if (_1734 > 0.0)
        {
            _2162 = abs((1.0 - _1724) / _1734);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1734 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1724 + 1.0) / _1734);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2162 = frontier_phi_40_35_ladder;
        }
        float _2489;
        if (_1737 > 0.0)
        {
            _2489 = abs((1.0 - _1728) / _1737);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1737 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1728 + 1.0) / _1737);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2489 = frontier_phi_50_47_ladder;
        }
        float _2491 = isnan(_2162) ? _1844 : (isnan(_1844) ? _2162 : min(_1844, _2162));
        float _2492 = isnan(_2489) ? _2491 : (isnan(_2491) ? _2489 : min(_2491, _2489));
        float _2496 = (_2492 * _1731) + _1720;
        float _2497 = (_2492 * _1734) + _1724;
        float _2498 = (_2492 * _1737) + _1728;
        float _2499 = _2492 * 9.9999997473787516355514526367188e-05;
        float _2500 = (-1.0) - _2499;
        float _2502 = _2499 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2498 > _2502) || ((_2498 < _2500) || ((_2497 > _2502) || ((_2497 < _2500) || ((_2496 < _2500) || (_2496 > _2502))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2616 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2498, cbModelParam._m0[17u].z, fma(_2497, cbModelParam._m0[17u].y, _2496 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2498, cbModelParam._m0[18u].z, fma(_2497, cbModelParam._m0[18u].y, _2496 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2498, cbModelParam._m0[19u].z, fma(_2497, cbModelParam._m0[19u].y, _2496 * cbModelParam._m0[19u].x))), _1666);
            frontier_phi_25_50_ladder = _2616.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2616.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2616.x * cbModelParam._m0[1u].z;
        }
        _1756 = frontier_phi_25_50_ladder_2;
        _1758 = frontier_phi_25_50_ladder_1;
        _1760 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1740 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_737, _738, _739), _1666);
        _1756 = _1740.x * cbModelParam._m0[1u].z;
        _1758 = _1740.y * cbModelParam._m0[1u].z;
        _1760 = _1740.z * cbModelParam._m0[1u].z;
    }
    float _1772 = ((((1.0 - _758) * ((_745 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_758 * _745)) * _729;
    float _1773 = _1772 * ((cbModelParam._m0[1u].w * (_1756 - _1657)) + _1657);
    float _1774 = _1772 * ((cbModelParam._m0[1u].w * (_1758 - _1659)) + _1659);
    float _1775 = _1772 * ((cbModelParam._m0[1u].w * (_1760 - _1661)) + _1661);
    float _1778 = fma(_1775, cbSceneParam._m0[89u].z, fma(_1774, cbSceneParam._m0[89u].y, _1773 * cbSceneParam._m0[89u].x));
    float _1781 = fma(_1775, cbSceneParam._m0[90u].z, fma(_1774, cbSceneParam._m0[90u].y, _1773 * cbSceneParam._m0[90u].x));
    float _1784 = fma(_1775, cbSceneParam._m0[91u].z, fma(_1774, cbSceneParam._m0[91u].y, _1773 * cbSceneParam._m0[91u].x));
    float _1818 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1822 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1826 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1830 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1831 = _1818 / _1830;
    float _1832 = _1822 / _1830;
    float _1833 = _1826 / _1830;
    float _1980;
    float _1981;
    float _1982;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1860 = ((uint(_1833 > cbSceneParam._m0[59u].y) + uint(_1833 > cbSceneParam._m0[59u].x)) + uint(_1833 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1861 = _1860 + 43u;
        uint _1869 = _1860 + 44u;
        uint _1877 = _1860 + 45u;
        uint _1885 = _1860 + 46u;
        float _1896 = fma(_1830, cbSceneParam._m0[_1861].w, fma(_1826, cbSceneParam._m0[_1861].z, fma(_1822, cbSceneParam._m0[_1861].y, _1818 * cbSceneParam._m0[_1861].x)));
        float _1900 = fma(_1830, cbSceneParam._m0[_1869].w, fma(_1826, cbSceneParam._m0[_1869].z, fma(_1822, cbSceneParam._m0[_1869].y, _1818 * cbSceneParam._m0[_1869].x)));
        float _1908 = fma(_1830, cbSceneParam._m0[_1885].w, fma(_1826, cbSceneParam._m0[_1885].z, fma(_1822, cbSceneParam._m0[_1885].y, _1818 * cbSceneParam._m0[_1885].x)));
        float _1913 = cbSceneParam._m0[33u].z * _1908;
        float _1915 = cbSceneParam._m0[33u].w * _1908;
        float _1918 = fma(_1830, cbSceneParam._m0[_1877].w, fma(_1826, cbSceneParam._m0[_1877].z, fma(_1822, cbSceneParam._m0[_1877].y, _1818 * cbSceneParam._m0[_1877].x))) / _1908;
        float _1966 = (cbSceneParam._m0[33u].x - sqrt(((_1832 * _1832) + (_1831 * _1831)) + (_1833 * _1833))) * cbSceneParam._m0[33u].y;
        float _4334 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
        float _1973 = (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1913 + _1896) / _1908, (_1915 + _1900) / _1908), _1918), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1915 + _1896) / _1908, (_1900 - _1913) / _1908), _1918), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1896 - _1913) / _1908, (_1900 - _1915) / _1908), _1918), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1896 - _1915) / _1908, (_1913 + _1900) / _1908), _1918), 0.0)).x), vec4(0.25)));
        _1980 = 1.0 - (_1973 * cbSceneParam._m0[34u].x);
        _1981 = 1.0 - (_1973 * cbSceneParam._m0[34u].y);
        _1982 = 1.0 - (_1973 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1980 = 1.0;
        _1981 = 1.0;
        _1982 = 1.0;
    }
    float _2046;
    float _2048;
    float _2050;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2034 = fma(_1830, cbSceneParam._m0[63u].w, fma(_1826, cbSceneParam._m0[63u].z, fma(_1822, cbSceneParam._m0[63u].y, _1818 * cbSceneParam._m0[63u].x)));
        float _2035 = fma(_1830, cbSceneParam._m0[60u].w, fma(_1826, cbSceneParam._m0[60u].z, fma(_1822, cbSceneParam._m0[60u].y, _1818 * cbSceneParam._m0[60u].x))) / _2034;
        float _2036 = fma(_1830, cbSceneParam._m0[61u].w, fma(_1826, cbSceneParam._m0[61u].z, fma(_1822, cbSceneParam._m0[61u].y, _1818 * cbSceneParam._m0[61u].x))) / _2034;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2035 >= cbSceneParam._m0[64u].x) && (_2036 >= cbSceneParam._m0[64u].y)) && (_2035 <= cbSceneParam._m0[64u].z)) && (_2036 <= cbSceneParam._m0[64u].w))
        {
            float _2175 = fma(_1830, cbSceneParam._m0[62u].w, fma(_1826, cbSceneParam._m0[62u].z, fma(_1822, cbSceneParam._m0[62u].y, _1818 * cbSceneParam._m0[62u].x))) / _2034;
            float _2179 = isnan(cbSceneParam._m0[41u].w) ? _2175 : (isnan(_2175) ? cbSceneParam._m0[41u].w : max(_2175, cbSceneParam._m0[41u].w));
            float _2222 = (cbSceneParam._m0[33u].x - sqrt(((_1832 * _1832) + (_1831 * _1831)) + (_1833 * _1833))) * cbSceneParam._m0[33u].y;
            float _4350 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
            float _2229 = (isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2035, cbSceneParam._m0[33u].w + _2036), _2179), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2035, _2036 - cbSceneParam._m0[33u].z), _2179), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2035 - cbSceneParam._m0[33u].z, _2036 - cbSceneParam._m0[33u].w), _2179), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2035 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2036), _2179), 0.0)).x), vec4(0.25)));
            float _2233 = 1.0 - (_2229 * cbSceneParam._m0[34u].x);
            float _2234 = 1.0 - (_2229 * cbSceneParam._m0[34u].y);
            float _2235 = 1.0 - (_2229 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2235) ? _1982 : (isnan(_1982) ? _2235 : min(_1982, _2235));
            frontier_phi_37_36_ladder_1 = isnan(_2234) ? _1981 : (isnan(_1981) ? _2234 : min(_1981, _2234));
            frontier_phi_37_36_ladder_2 = isnan(_2233) ? _1980 : (isnan(_1980) ? _2233 : min(_1980, _2233));
        }
        else
        {
            frontier_phi_37_36_ladder = _1982;
            frontier_phi_37_36_ladder_1 = _1981;
            frontier_phi_37_36_ladder_2 = _1980;
        }
        _2046 = frontier_phi_37_36_ladder_2;
        _2048 = frontier_phi_37_36_ladder_1;
        _2050 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2046 = _1980;
        _2048 = _1981;
        _2050 = _1982;
    }
    uvec4 _2055 = floatBitsToUint(cbInstanceData._m0[_704 + 5u]);
    uint _2057 = _2055.x * 14u;
    uint _2058 = _2057 + 13u;
    float _2065 = _729 + (-1.0);
    float _2070 = (cbLight._m0[_2058].x * _2065) + 1.0;
    float _2071 = (cbLight._m0[_2058].y * _2065) + 1.0;
    float _2072 = (cbLight._m0[_2058].z * _2065) + 1.0;
    float _2073 = (cbLight._m0[_2058].w * _2065) + 1.0;
    uint _2074 = _2057 + 5u;
    float _2080 = isnan(1.0) ? _2071 : (isnan(_2071) ? 1.0 : min(_2071, 1.0));
    uint _2084 = _2057 + 4u;
    float _2094 = isnan(1.0) ? _2070 : (isnan(_2070) ? 1.0 : min(_2070, 1.0));
    uint _2098 = _2057 | 1u;
    float _2109 = dot(vec3(cbLight._m0[_2057].xyz), vec3(_563, _564, _565));
    float _2112 = dot(vec3(cbLight._m0[_2098].xyz), vec3(_563, _564, _565));
    float _4386 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
    float _4397 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
    float _2117 = (isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0))) * 0.3183098733425140380859375;
    float _2119 = (isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0))) * 0.3183098733425140380859375;
    float _2126 = ((cbLight._m0[_2074].x * _2080) * _2119) + (((cbLight._m0[_2084].x * _2046) * _2094) * _2117);
    float _2127 = ((_2080 * cbLight._m0[_2074].y) * _2119) + (((cbLight._m0[_2084].y * _2048) * _2094) * _2117);
    float _2128 = ((_2080 * cbLight._m0[_2074].z) * _2119) + (((cbLight._m0[_2084].z * _2050) * _2094) * _2117);
    uvec4 _2132 = floatBitsToUint(cbLight._m0[_2057 + 12u]);
    bool _2134 = _2132.x == 0u;
    float _2236;
    float _2238;
    float _2240;
    if (_2134)
    {
        _2236 = _2126;
        _2238 = _2127;
        _2240 = _2128;
    }
    else
    {
        uint _2244 = _2057 + 6u;
        float _2260 = (dot(vec3(cbLight._m0[_2057 + 2u].xyz), vec3(_563, _564, _565)) * 0.5) + 0.5;
        float _2261 = _2260 * _2260;
        float _4408 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
        float _2262 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
        float _2263 = isnan(1.0) ? _2072 : (isnan(_2072) ? 1.0 : min(_2072, 1.0));
        _2236 = (((cbLight._m0[_2244].x * 0.3183098733425140380859375) * _2262) * _2263) + _2126;
        _2238 = (((cbLight._m0[_2244].y * 0.3183098733425140380859375) * _2262) * _2263) + _2127;
        _2240 = (((cbLight._m0[_2244].z * 0.3183098733425140380859375) * _2262) * _2263) + _2128;
    }
    bool _2243 = _2132.y == 0u;
    float _2298;
    float _2300;
    float _2302;
    if (_2243)
    {
        _2298 = _2236;
        _2300 = _2238;
        _2302 = _2240;
    }
    else
    {
        uint _2460 = _2057 + 7u;
        float _2476 = (dot(vec3(cbLight._m0[_2057 + 3u].xyz), vec3(_563, _564, _565)) * 0.5) + 0.5;
        float _2477 = _2476 * _2476;
        float _4424 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
        float _2478 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
        float _2479 = isnan(1.0) ? _2073 : (isnan(_2073) ? 1.0 : min(_2073, 1.0));
        _2298 = (((cbLight._m0[_2460].x * 0.3183098733425140380859375) * _2478) * _2479) + _2236;
        _2300 = (((cbLight._m0[_2460].y * 0.3183098733425140380859375) * _2478) * _2479) + _2238;
        _2302 = (((cbLight._m0[_2460].z * 0.3183098733425140380859375) * _2478) * _2479) + _2240;
    }
    uint _2305 = _2057 + 8u;
    float _2318 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2057].w)) * _566) * 0.949999988079071044921875);
    float _2319 = _2318 * _2318;
    float _2320 = cbLight._m0[_2057].x + _643;
    float _2321 = cbLight._m0[_2057].y + _644;
    float _2322 = cbLight._m0[_2057].z + _645;
    float _2326 = inversesqrt(dot(vec3(_2320, _2321, _2322), vec3(_2320, _2321, _2322)));
    float _2327 = _2326 * _2320;
    float _2328 = _2326 * _2321;
    float _2329 = _2326 * _2322;
    float _2330 = dot(vec3(_563, _564, _565), vec3(cbLight._m0[_2057].xyz));
    float _4440 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
    float _2333 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
    float _4451 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _2334 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
    float _2335 = dot(vec3(_563, _564, _565), vec3(_2327, _2328, _2329));
    float _4462 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
    float _2338 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
    float _2339 = dot(vec3(cbLight._m0[_2057].xyz), vec3(_2327, _2328, _2329));
    float _4473 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
    float _2343 = _2319 * _2319;
    float _2347 = ((_2338 * _2338) * (_2343 + (-1.0))) + 1.0;
    float _2358 = (exp2(log2(1.0 - (isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2359 = 1.0 - _2319;
    float _2370 = (0.5 / (((_2334 * ((_2333 * _2359) + _2319)) + 9.9999999392252902907785028219223e-09) + (((_2334 * _2359) + _2319) * _2333))) * _2333;
    float _4484 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
    float _2372 = (isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0))) * (_2343 / ((_2347 * _2347) * 3.141590118408203125));
    uint _2386 = _2057 + 9u;
    float _2397 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2098].w)) * _566) * 0.949999988079071044921875);
    float _2398 = _2397 * _2397;
    float _2399 = cbLight._m0[_2098].x + _643;
    float _2400 = cbLight._m0[_2098].y + _644;
    float _2401 = cbLight._m0[_2098].z + _645;
    float _2405 = inversesqrt(dot(vec3(_2399, _2400, _2401), vec3(_2399, _2400, _2401)));
    float _2406 = _2405 * _2399;
    float _2407 = _2405 * _2400;
    float _2408 = _2405 * _2401;
    float _2409 = dot(vec3(_563, _564, _565), vec3(cbLight._m0[_2098].xyz));
    float _4495 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
    float _2412 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
    float _2413 = dot(vec3(_563, _564, _565), vec3(_2406, _2407, _2408));
    float _4506 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
    float _2416 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
    float _2417 = dot(vec3(cbLight._m0[_2098].xyz), vec3(_2406, _2407, _2408));
    float _4517 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
    float _2421 = _2398 * _2398;
    float _2425 = ((_2416 * _2416) * (_2421 + (-1.0))) + 1.0;
    float _2434 = (exp2(log2(1.0 - (isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2435 = 1.0 - _2398;
    float _2445 = (0.5 / (((_2334 * ((_2412 * _2435) + _2398)) + 9.9999999392252902907785028219223e-09) + (((_2334 * _2435) + _2398) * _2412))) * _2412;
    float _4528 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
    float _2447 = (isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0))) * (_2421 / ((_2425 * _2425) * 3.141590118408203125));
    float _2457 = (((_2434 * cbLight._m0[_2386].x) * _2447) * _2080) + ((((cbLight._m0[_2305].x * _2046) * _2358) * _2372) * _2094);
    float _2458 = (((_2434 * cbLight._m0[_2386].y) * _2447) * _2080) + ((((cbLight._m0[_2305].y * _2048) * _2358) * _2372) * _2094);
    float _2459 = (((_2434 * cbLight._m0[_2386].z) * _2447) * _2080) + ((((cbLight._m0[_2305].z * _2050) * _2358) * _2372) * _2094);
    float _2515;
    float _2517;
    float _2519;
    if (_2134)
    {
        _2515 = _2457;
        _2517 = _2458;
        _2519 = _2459;
    }
    else
    {
        uint _2521 = _2057 + 2u;
        uint _2525 = _2057 + 10u;
        float _2539 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2521].w)) * _566) * 0.949999988079071044921875);
        float _2540 = _2539 * _2539;
        float _2541 = cbLight._m0[_2521].x + _643;
        float _2542 = cbLight._m0[_2521].y + _644;
        float _2543 = cbLight._m0[_2521].z + _645;
        float _2547 = inversesqrt(dot(vec3(_2541, _2542, _2543), vec3(_2541, _2542, _2543)));
        float _2548 = _2547 * _2541;
        float _2549 = _2547 * _2542;
        float _2550 = _2547 * _2543;
        float _2551 = dot(vec3(_563, _564, _565), vec3(cbLight._m0[_2521].xyz));
        float _4539 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
        float _2554 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
        float _2555 = dot(vec3(_563, _564, _565), vec3(_2548, _2549, _2550));
        float _4550 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
        float _2558 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
        float _2559 = dot(vec3(cbLight._m0[_2521].xyz), vec3(_2548, _2549, _2550));
        float _4561 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
        float _2563 = _2540 * _2540;
        float _2567 = ((_2558 * _2558) * (_2563 + (-1.0))) + 1.0;
        float _2576 = (exp2(log2(1.0 - (isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2577 = 1.0 - _2540;
        float _2587 = (0.5 / (((_2334 * ((_2554 * _2577) + _2540)) + 9.9999999392252902907785028219223e-09) + (((_2334 * _2577) + _2540) * _2554))) * _2554;
        float _4572 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
        float _2589 = (isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0))) * (_2563 / ((_2567 * _2567) * 3.141590118408203125));
        float _2590 = isnan(1.0) ? _2072 : (isnan(_2072) ? 1.0 : min(_2072, 1.0));
        _2515 = (((_2576 * cbLight._m0[_2525].x) * _2589) * _2590) + _2457;
        _2517 = (((_2576 * cbLight._m0[_2525].y) * _2589) * _2590) + _2458;
        _2519 = (((_2576 * cbLight._m0[_2525].z) * _2589) * _2590) + _2459;
    }
    float _2621;
    float _2623;
    float _2625;
    if (_2243)
    {
        _2621 = _2515;
        _2623 = _2517;
        _2625 = _2519;
    }
    else
    {
        uint _2632 = _2057 + 3u;
        uint _2636 = _2057 + 11u;
        float _2650 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2632].w)) * _566) * 0.949999988079071044921875);
        float _2651 = _2650 * _2650;
        float _2652 = cbLight._m0[_2632].x + _643;
        float _2653 = cbLight._m0[_2632].y + _644;
        float _2654 = cbLight._m0[_2632].z + _645;
        float _2658 = inversesqrt(dot(vec3(_2652, _2653, _2654), vec3(_2652, _2653, _2654)));
        float _2659 = _2658 * _2652;
        float _2660 = _2658 * _2653;
        float _2661 = _2658 * _2654;
        float _2662 = dot(vec3(_563, _564, _565), vec3(cbLight._m0[_2632].xyz));
        float _4588 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
        float _2665 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
        float _2666 = dot(vec3(_563, _564, _565), vec3(_2659, _2660, _2661));
        float _4599 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
        float _2669 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
        float _2670 = dot(vec3(cbLight._m0[_2632].xyz), vec3(_2659, _2660, _2661));
        float _4610 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
        float _2674 = _2651 * _2651;
        float _2678 = ((_2669 * _2669) * (_2674 + (-1.0))) + 1.0;
        float _2687 = (exp2(log2(1.0 - (isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2688 = 1.0 - _2651;
        float _2698 = (0.5 / (((_2334 * ((_2665 * _2688) + _2651)) + 9.9999999392252902907785028219223e-09) + (((_2334 * _2688) + _2651) * _2665))) * _2665;
        float _4621 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
        float _2700 = (isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0))) * (_2674 / ((_2678 * _2678) * 3.141590118408203125));
        float _2701 = isnan(1.0) ? _2073 : (isnan(_2073) ? 1.0 : min(_2073, 1.0));
        _2621 = (((_2687 * cbLight._m0[_2636].x) * _2700) * _2701) + _2515;
        _2623 = (((_2687 * cbLight._m0[_2636].y) * _2700) * _2701) + _2517;
        _2625 = (((_2687 * cbLight._m0[_2636].z) * _2700) * _2701) + _2519;
    }
    float _2767;
    float _2769;
    float _2771;
    float _2773;
    float _2775;
    float _2777;
    if (_2055.y == 0u)
    {
        uvec4 _2722 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2723 = _2722.x;
        uint _2734 = uint((float(_2722.y) * floor(float(uint(cbSceneParam._m0[85u].y * _665) / _2723))) + floor(float(uint(cbSceneParam._m0[85u].x * _664) / _2723)));
        float _2744 = (log2(_1833 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2745 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
        uint _2748 = uint(isnan(14.0) ? _2745 : (isnan(_2745) ? 14.0 : min(_2745, 14.0)));
        uvec4 _2753 = texelFetch(g_lightClusterGridBuffer, int(((_2748 << 2u) + (_2734 << 6u)) >> 2u));
        uint _2754 = _2753.x;
        uint _2755 = _2722.z;
        float _2863;
        float _2865;
        float _2867;
        float _2869;
        float _2871;
        float _2873;
        if (((((1u << ((_2755 >> 4u) & 15u)) + 4294967295u) & _2754) == 0u) || ((_2755 & 240u) == 0u))
        {
            _2863 = 0.0;
            _2865 = 0.0;
            _2867 = 0.0;
            _2869 = 0.0;
            _2871 = 0.0;
            _2873 = 0.0;
        }
        else
        {
            float _2864;
            float _2866;
            float _2868;
            float _2870;
            float _2872;
            float _2874;
            float _3024 = 0.0;
            float _3025 = 0.0;
            float _3026 = 0.0;
            float _3027 = 0.0;
            float _3028 = 0.0;
            float _3029 = 0.0;
            uint _3030 = 0u;
            uint _3039;
            bool _3040;
            for (;;)
            {
                _3039 = texelFetch(g_lightClassification, int((((_2748 << 5u) + (_2734 << 9u)) + (_3030 << 2u)) >> 2u)).x;
                _3040 = _3039 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3040)
                {
                    frontier_phi_71_pred = _3029;
                    frontier_phi_71_pred_1 = _3028;
                    frontier_phi_71_pred_2 = _3027;
                    frontier_phi_71_pred_3 = _3026;
                    frontier_phi_71_pred_4 = _3025;
                    frontier_phi_71_pred_5 = _3024;
                }
                else
                {
                    float _3169;
                    float _3170;
                    float _3171;
                    float _3172;
                    float _3173;
                    float _3174;
                    uint _3175;
                    _3169 = _3024;
                    _3170 = _3025;
                    _3171 = _3026;
                    _3172 = _3027;
                    _3173 = _3028;
                    _3174 = _3029;
                    _3175 = _3039;
                    float _3096;
                    float _3097;
                    float _3098;
                    float _3099;
                    float _3100;
                    float _3101;
                    for (;;)
                    {
                        uint _3179 = uint(findLSB(_3175)) + (_3030 << 5u);
                        uint _3176 = (_3175 + 4294967295u) & _3175;
                        uint _3181 = _3179 * 48u;
                        vec4 _3195 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3181)).x, texelFetch(g_PointLightRenderingBuffer, int(_3181 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3181 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3181 + 3u)).x));
                        uint _3201 = (_3179 * 48u) + 4u;
                        vec4 _3214 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3201)).x, texelFetch(g_PointLightRenderingBuffer, int(_3201 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3201 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3201 + 3u)).x));
                        uint _3220 = (_3179 * 48u) + 8u;
                        vec3 _3231 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3220)).x, texelFetch(g_PointLightRenderingBuffer, int(_3220 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3220 + 2u)).x));
                        float _3235 = _3195.x - _1831;
                        float _3236 = _3195.y - _1832;
                        float _3237 = _3195.z - _1833;
                        float _3238 = dot(vec3(_3235, _3236, _3237), vec3(_3235, _3236, _3237));
                        float _3241 = inversesqrt(_3238);
                        float _3242 = _3241 * _3235;
                        float _3243 = _3241 * _3236;
                        float _3244 = _3241 * _3237;
                        float _3245 = dot(vec3(_685, _688, _691), vec3(_3242, _3243, _3244));
                        float _3250 = 1.0 - (_3238 * _3195.w);
                        float _4647 = isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0));
                        float _3251 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
                        float _3252 = sqrt(_3238) * _3214.w;
                        float _3255 = 1.39999997615814208984375 / (_3252 + 1.39999997615814208984375);
                        float _3256 = _3255 * _3255;
                        float _3259 = ((1.0 - _3256) * _3245) + _3256;
                        float _3262 = _3252 * _3252;
                        float _3266 = ((isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0))) * _3251) / ((_3262 * 0.699999988079071044921875) + 1.0);
                        float _3270 = (-0.0) - _1831;
                        float _3271 = (-0.0) - _1832;
                        float _3272 = (-0.0) - _1833;
                        float _3276 = inversesqrt(dot(vec3(_3270, _3271, _3272), vec3(_3270, _3271, _3272)));
                        float _3277 = _3276 * _3270;
                        float _3278 = _3276 * _3271;
                        float _3279 = _3276 * _3272;
                        float _3286 = exp2(log2(1.0 / ((_3262 * 3.5) + 5.0)) * 0.25);
                        float _3287 = 1.0 - _745;
                        float _3294 = sqrt(1.0 - ((1.0 - (_3287 * _3287)) * (1.0 - (_3286 * _3286))));
                        float _3295 = _3294 * _3294;
                        float _3296 = _3295 * _3295;
                        float _3297 = _3277 + _3242;
                        float _3298 = _3278 + _3243;
                        float _3299 = _3279 + _3244;
                        float _3303 = inversesqrt(dot(vec3(_3297, _3298, _3299), vec3(_3297, _3298, _3299)));
                        float _3307 = dot(vec3(_685, _688, _691), vec3(_3277, _3278, _3279));
                        float _4663 = isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0));
                        float _3310 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
                        float _3311 = dot(vec3(_685, _688, _691), vec3(_3303 * _3297, _3303 * _3298, _3303 * _3299));
                        float _4674 = isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0));
                        float _3314 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
                        float _3318 = ((_3314 * _3314) * (_3296 + (-1.0))) + 1.0;
                        float _3319 = _3255 * _3295;
                        float _3320 = _3319 * _3319;
                        float _3323 = ((1.0 - _3320) * _3245) + _3320;
                        float _4685 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0));
                        float _3324 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
                        float _3325 = 1.0 - _3295;
                        float _3335 = (0.5 / (((_3324 * ((_3310 * _3325) + _3295)) + 9.9999999392252902907785028219223e-09) + (((_3324 * _3325) + _3295) * _3310))) * _3324;
                        float _4696 = isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0));
                        float _3346 = (((_3296 * 3.1415927410125732421875) * (isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0)))) / ((_3318 * _3318) * ((_3262 * 2.1991131305694580078125) + 3.141590118408203125))) * _3251;
                        _3099 = (_3266 * _3214.x) + _3172;
                        _3100 = (_3266 * _3214.y) + _3173;
                        _3101 = (_3266 * _3214.z) + _3174;
                        _3096 = (_3346 * _3231.x) + _3169;
                        _3097 = (_3346 * _3231.y) + _3170;
                        _3098 = (_3346 * _3231.z) + _3171;
                        if (_3176 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3169 = _3096;
                            _3170 = _3097;
                            _3171 = _3098;
                            _3172 = _3099;
                            _3173 = _3100;
                            _3174 = _3101;
                            _3175 = _3176;
                        }
                    }
                    frontier_phi_71_pred = _3101;
                    frontier_phi_71_pred_1 = _3100;
                    frontier_phi_71_pred_2 = _3099;
                    frontier_phi_71_pred_3 = _3098;
                    frontier_phi_71_pred_4 = _3097;
                    frontier_phi_71_pred_5 = _3096;
                }
                _2874 = frontier_phi_71_pred;
                _2872 = frontier_phi_71_pred_1;
                _2870 = frontier_phi_71_pred_2;
                _2868 = frontier_phi_71_pred_3;
                _2866 = frontier_phi_71_pred_4;
                _2864 = frontier_phi_71_pred_5;
                uint _3031 = _3030 + 1u;
                if (_3031 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3024 = _2864;
                    _3025 = _2866;
                    _3026 = _2868;
                    _3027 = _2870;
                    _3028 = _2872;
                    _3029 = _2874;
                    _3030 = _3031;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2863 = _2864;
            _2865 = _2866;
            _2867 = _2868;
            _2869 = _2870;
            _2871 = _2872;
            _2873 = _2874;
        }
        uvec4 _2877 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2878 = _2877.z;
        uint _2880 = (_2878 >> 8u) & 15u;
        float _2992;
        float _2994;
        float _2996;
        float _2998;
        float _3000;
        float _3002;
        if (((4294967295u << _2880) & _2754) == 0u)
        {
            _2992 = _2863;
            _2994 = _2865;
            _2996 = _2867;
            _2998 = _2869;
            _3000 = _2871;
            _3002 = _2873;
        }
        else
        {
            float _3017 = inversesqrt(dot(vec3(_1831, _1832, _1833), vec3(_1831, _1832, _1833)));
            float _3018 = _3017 * _1831;
            float _3019 = _3017 * _1832;
            float _3020 = _3017 * _1833;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2880 < ((_2878 >> 12u) & 15u))
            {
                float _2993;
                float _2995;
                float _2997;
                float _2999;
                float _3001;
                float _3003;
                float _3152 = _2863;
                float _3153 = _2865;
                float _3154 = _2867;
                float _3155 = _2869;
                float _3156 = _2871;
                float _3157 = _2873;
                uint _3158 = _2880;
                uint _3167;
                bool _3168;
                for (;;)
                {
                    _3167 = texelFetch(g_lightClassification, int((((_2748 << 5u) + (_2734 << 9u)) + (_3158 << 2u)) >> 2u)).x;
                    _3168 = _3167 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3168)
                    {
                        frontier_phi_82_pred = _3157;
                        frontier_phi_82_pred_1 = _3156;
                        frontier_phi_82_pred_2 = _3155;
                        frontier_phi_82_pred_3 = _3154;
                        frontier_phi_82_pred_4 = _3153;
                        frontier_phi_82_pred_5 = _3152;
                    }
                    else
                    {
                        float _3360;
                        float _3361;
                        float _3362;
                        float _3363;
                        float _3364;
                        float _3365;
                        float _3654;
                        float _3655;
                        float _3656;
                        float _3657;
                        float _3658;
                        float _3659;
                        float _3373 = _3152;
                        float _3374 = _3153;
                        float _3375 = _3154;
                        float _3376 = _3155;
                        float _3377 = _3156;
                        float _3378 = _3157;
                        uint _3379 = _3167;
                        uint _3380;
                        vec4 _3405;
                        float _3406;
                        vec4 _3421;
                        vec3 _3433;
                        vec4 _3448;
                        vec4 _3463;
                        float _3510;
                        bool _3511;
                        for (;;)
                        {
                            uint _3390 = ((_3158 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3379));
                            _3380 = (_3379 + 4294967295u) & _3379;
                            uint _3392 = _3390 * 40u;
                            _3405 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3392)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 3u)).x));
                            _3406 = _3405.w;
                            uint _3408 = (_3390 * 40u) + 4u;
                            _3421 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3408)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 3u)).x));
                            uint _3423 = (_3390 * 40u) + 8u;
                            _3433 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3423)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 2u)).x));
                            uint _3435 = (_3390 * 40u) + 16u;
                            _3448 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3435)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 3u)).x));
                            uint _3450 = (_3390 * 40u) + 20u;
                            _3463 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3450)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 3u)).x));
                            uint _3466 = (_3390 * 40u) + 24u;
                            vec4 _3479 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3466)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 3u)).x));
                            uint _3485 = (_3390 * 40u) + 28u;
                            vec4 _3498 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3485)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 3u)).x));
                            _3510 = fma(_1833, _3498.z, fma(_1832, _3498.y, _3498.x * _1831)) + _3498.w;
                            _3511 = !((fma(_1833, _3479.z, fma(_1832, _3479.y, _3479.x * _1831)) + _3479.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3511)
                            {
                                float _3538 = _3405.x - _1831;
                                float _3539 = _3405.y - _1832;
                                float _3540 = _3405.z - _1833;
                                float _3541 = dot(vec3(_3538, _3539, _3540), vec3(_3538, _3539, _3540));
                                float _3544 = inversesqrt(_3541);
                                float _3545 = _3544 * _3538;
                                float _3546 = _3544 * _3539;
                                float _3547 = _3544 * _3540;
                                float _3551 = 1.0 - (_3541 / (_3406 * _3406));
                                float _4707 = isnan(0.0) ? _3551 : (isnan(_3551) ? 0.0 : max(_3551, 0.0));
                                float _3552 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
                                float _3556 = sqrt(_3541) * _3421.w;
                                float _3558 = 1.39999997615814208984375 / (_3556 + 1.39999997615814208984375);
                                float _3559 = _3558 * _3558;
                                float _3562 = ((1.0 - _3559) * dot(vec3(_3545, _3546, _3547), vec3(_685, _688, _691))) + _3559;
                                float _3565 = _3556 * _3556;
                                float _3569 = (fma(_1833, _3448.z, fma(_1832, _3448.y, _3448.x * _1831)) + _3448.w) / _3510;
                                float _3570 = (fma(_1833, _3463.z, fma(_1832, _3463.y, _3463.x * _1831)) + _3463.w) / _3510;
                                float _3574 = 1.0 - dot(vec2(_3569, _3570), vec2(_3569, _3570));
                                float _4723 = isnan(0.0) ? _3574 : (isnan(_3574) ? 0.0 : max(_3574, 0.0));
                                float _3575 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
                                float _3576 = _3575 * (((isnan(0.0) ? _3562 : (isnan(_3562) ? 0.0 : max(_3562, 0.0))) * _3552) / ((_3565 * 0.699999988079071044921875) + 1.0));
                                float _3588 = exp2(log2(1.0 / ((_3565 * 3.5) + 5.0)) * 0.25);
                                float _3589 = 1.0 - _745;
                                float _3596 = sqrt(1.0 - ((1.0 - (_3589 * _3589)) * (1.0 - (_3588 * _3588))));
                                float _3597 = _3596 * _3596;
                                float _3598 = _3597 * _3597;
                                float _3599 = _3545 - _3018;
                                float _3600 = _3546 - _3019;
                                float _3601 = _3547 - _3020;
                                float _3605 = inversesqrt(dot(vec3(_3599, _3600, _3601), vec3(_3599, _3600, _3601)));
                                float _3609 = dot(vec3(_685, _688, _691), vec3((-0.0) - _3018, (-0.0) - _3019, (-0.0) - _3020));
                                float _4734 = isnan(0.0) ? _3609 : (isnan(_3609) ? 0.0 : max(_3609, 0.0));
                                float _3612 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
                                float _3613 = dot(vec3(_685, _688, _691), vec3(_3605 * _3599, _3605 * _3600, _3605 * _3601));
                                float _4745 = isnan(0.0) ? _3613 : (isnan(_3613) ? 0.0 : max(_3613, 0.0));
                                float _3616 = isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0));
                                float _3620 = ((_3616 * _3616) * (_3598 + (-1.0))) + 1.0;
                                float _3621 = _3558 * _3597;
                                float _3622 = _3621 * _3621;
                                float _3628 = ((1.0 - _3622) * dot(vec3(_685, _688, _691), vec3(_3545, _3546, _3547))) + _3622;
                                float _4756 = isnan(0.0) ? _3628 : (isnan(_3628) ? 0.0 : max(_3628, 0.0));
                                float _3629 = isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0));
                                float _3630 = 1.0 - _3597;
                                float _3640 = (0.5 / (((_3629 * ((_3612 * _3630) + _3597)) + 9.9999999392252902907785028219223e-09) + (((_3629 * _3630) + _3597) * _3612))) * _3629;
                                float _4767 = isnan(0.0) ? _3640 : (isnan(_3640) ? 0.0 : max(_3640, 0.0));
                                float _3650 = (_3575 * _3552) * (((_3598 * 3.1415927410125732421875) * (isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0)))) / ((_3620 * _3620) * ((_3565 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3576 * _3421.z;
                                frontier_phi_88_pred_1 = _3576 * _3421.y;
                                frontier_phi_88_pred_2 = _3576 * _3421.x;
                                frontier_phi_88_pred_3 = _3650 * _3433.z;
                                frontier_phi_88_pred_4 = _3650 * _3433.y;
                                frontier_phi_88_pred_5 = _3650 * _3433.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3659 = frontier_phi_88_pred;
                            _3658 = frontier_phi_88_pred_1;
                            _3657 = frontier_phi_88_pred_2;
                            _3656 = frontier_phi_88_pred_3;
                            _3655 = frontier_phi_88_pred_4;
                            _3654 = frontier_phi_88_pred_5;
                            _3363 = _3657 + _3376;
                            _3364 = _3658 + _3377;
                            _3365 = _3659 + _3378;
                            _3360 = _3654 + _3373;
                            _3361 = _3655 + _3374;
                            _3362 = _3656 + _3375;
                            if (_3380 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3373 = _3360;
                                _3374 = _3361;
                                _3375 = _3362;
                                _3376 = _3363;
                                _3377 = _3364;
                                _3378 = _3365;
                                _3379 = _3380;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3365;
                        frontier_phi_82_pred_1 = _3364;
                        frontier_phi_82_pred_2 = _3363;
                        frontier_phi_82_pred_3 = _3362;
                        frontier_phi_82_pred_4 = _3361;
                        frontier_phi_82_pred_5 = _3360;
                    }
                    _3003 = frontier_phi_82_pred;
                    _3001 = frontier_phi_82_pred_1;
                    _2999 = frontier_phi_82_pred_2;
                    _2997 = frontier_phi_82_pred_3;
                    _2995 = frontier_phi_82_pred_4;
                    _2993 = frontier_phi_82_pred_5;
                    uint _3159 = _3158 + 1u;
                    if (_3159 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3152 = _2993;
                        _3153 = _2995;
                        _3154 = _2997;
                        _3155 = _2999;
                        _3156 = _3001;
                        _3157 = _3003;
                        _3158 = _3159;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2999;
                frontier_phi_63_64_ladder_1 = _3003;
                frontier_phi_63_64_ladder_2 = _3001;
                frontier_phi_63_64_ladder_3 = _2997;
                frontier_phi_63_64_ladder_4 = _2995;
                frontier_phi_63_64_ladder_5 = _2993;
            }
            else
            {
                frontier_phi_63_64_ladder = _2869;
                frontier_phi_63_64_ladder_1 = _2873;
                frontier_phi_63_64_ladder_2 = _2871;
                frontier_phi_63_64_ladder_3 = _2867;
                frontier_phi_63_64_ladder_4 = _2865;
                frontier_phi_63_64_ladder_5 = _2863;
            }
            _2992 = frontier_phi_63_64_ladder_5;
            _2994 = frontier_phi_63_64_ladder_4;
            _2996 = frontier_phi_63_64_ladder_3;
            _2998 = frontier_phi_63_64_ladder;
            _3000 = frontier_phi_63_64_ladder_2;
            _3002 = frontier_phi_63_64_ladder_1;
        }
        float _3007 = isnan(1.0) ? _729 : (isnan(_729) ? 1.0 : min(_729, 1.0));
        _2767 = (_3007 * _2998) + _2298;
        _2769 = (_3007 * _3000) + _2300;
        _2771 = (_3007 * _3002) + _2302;
        _2773 = ((_2992 * 0.039999999105930328369140625) * _3007) + _2621;
        _2775 = ((_2994 * 0.039999999105930328369140625) * _3007) + _2623;
        _2777 = ((_2996 * 0.039999999105930328369140625) * _3007) + _2625;
    }
    else
    {
        _2767 = _2298;
        _2769 = _2300;
        _2771 = _2302;
        _2773 = _2621;
        _2775 = _2623;
        _2777 = _2625;
    }
    uint _2783 = _705 + uint(cbMatDynParam._m0[0u].w);
    float _2789 = ((((((_479.x - _476) * _412) + _476) * cbMtdParam._m0[13u].x) + ((((_433.x - _430) * _412) + _430) * cbMtdParam._m0[11u].x)) * _294) * cbInstanceData._m0[_2783].x;
    float _2790 = ((((((_479.y - _477) * _412) + _477) * cbMtdParam._m0[13u].y) + ((((_433.y - _431) * _412) + _431) * cbMtdParam._m0[11u].y)) * _294) * cbInstanceData._m0[_2783].y;
    float _2791 = ((((((_479.z - _478) * _412) + _478) * cbMtdParam._m0[13u].z) + ((((_433.z - _432) * _412) + _432) * cbMtdParam._m0[11u].z)) * _294) * cbInstanceData._m0[_2783].z;
    float _4783 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _4794 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _4805 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _2808 = (((isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0))) * (_2767 + ((isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0))) * _729))) + ((_2773 + ((isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0))) * _1566)) * cbPerFrame._m0[3u].x)) + _2789;
    float _2810 = (_2790 + ((_2775 + ((isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0))) * _1566)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0))) * (_2769 + ((isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0))) * _729)));
    float _2812 = (_2791 + ((_2777 + ((isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0))) * _1566)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0))) * (_2771 + ((isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0))) * _729)));
    float _2813 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
    float _2814 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
    float _2815 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
    float _2821 = cbMtdParam._m0[2u].x * _2789;
    float _2822 = cbMtdParam._m0[2u].y * _2790;
    float _2823 = cbMtdParam._m0[2u].z * _2791;
    float _4831 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2825 = isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0));
    uint _2826 = _704 + 6u;
    float _2834 = _664 / cbSceneParam._m0[86u].x;
    float _2835 = _665 / cbSceneParam._m0[86u].y;
    vec4 _2849 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2834, _2835, (log2((isnan(cbSceneParam._m0[77u].w) ? _585 : (isnan(_585) ? cbSceneParam._m0[77u].w : min(_585, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2851 = _2849.x;
    float _2852 = _2849.y;
    float _2853 = _2849.z;
    float _2854 = _2849.w;
    float _2925;
    float _2927;
    float _2929;
    float _2931;
    if (_585 > cbSceneParam._m0[78u].w)
    {
        float _2888 = isnan(_585) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _585 : min(cbSceneParam._m0[80u].w, _585));
        float _2889 = _2888 / _585;
        float _2900 = _2889 * _636;
        float _2901 = _637 * _2889;
        float _2902 = (-0.0) - _2901;
        float _2903 = _2889 * _638;
        float _2905 = (cbSceneParam._m0[77u].w * _2902) / _2888;
        float _2906 = _2905 + cbSceneParam._m0[79u].w;
        float _2907 = cbSceneParam._m0[79u].w - _2901;
        float _2913 = sqrt(((_2900 * _2900) + (_2901 * _2901)) + (_2903 * _2903));
        float _2916 = (1.0 - (cbSceneParam._m0[77u].w / _2888)) * _2913;
        float _2921 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2923 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3109;
        if (abs((_2902 - _2905) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3109 = ((((_2906 > 0.0) ? exp2(_2921 * _2906) : (2.0 - exp2(_2923 * _2906))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2916;
        }
        else
        {
            float _3053 = 1.0 / cbSceneParam._m0[80u].x;
            float _3054 = isnan(_2907) ? _2906 : (isnan(_2906) ? _2907 : max(_2906, _2907));
            float _3055 = isnan(_2907) ? _2906 : (isnan(_2906) ? _2907 : min(_2906, _2907));
            float _3064 = isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : min(_3054, 0.0));
            float _3065 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : min(_3055, 0.0));
            _3109 = ((abs(_2913 / _2902) * cbSceneParam._m0[80u].y) * ((((_3064 - _3065) * 2.0) - ((exp2(_2921 * (isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0)))) - exp2(_2921 * (isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0))))) * _3053)) - ((exp2(_2923 * _3064) - exp2(_2923 * _3065)) * _3053))) + (_2916 * cbSceneParam._m0[80u].z);
        }
        vec4 _3111 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2834, _2835, 1.0), 0.0);
        float _3120 = exp2((_3109 * (-1.44269502162933349609375)) * (1.0 - _3111.w));
        float _3121 = log2(_3120);
        float _3137 = log2(_2854);
        _2925 = (exp2(_3137 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3121 * cbSceneParam._m0[78u].x)) * _3111.x) / cbSceneParam._m0[78u].x)) + _2851;
        _2927 = (exp2(_3137 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3121 * cbSceneParam._m0[78u].y)) * _3111.y) / cbSceneParam._m0[78u].y)) + _2852;
        _2929 = (exp2(_3137 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3121 * cbSceneParam._m0[78u].z)) * _3111.z) / cbSceneParam._m0[78u].z)) + _2853;
        _2931 = _3120 * _2854;
    }
    else
    {
        _2925 = _2851;
        _2927 = _2852;
        _2929 = _2853;
        _2931 = _2854;
    }
    bool _3147;
    vec4 _2941;
    vec4 _2963;
    float _2965;
    float _2969;
    float _2970;
    float _2971;
    float _2974;
    float _2977;
    float _2980;
    float _2981;
    bool _2991;
    for (;;)
    {
        _2941 = cbMatDynParam._m0[0u];
        float _2943 = roundEven(_2941.y);
        bool _2944 = _2943 == 3.0;
        float _2945 = log2(_2931);
        float _2949 = exp2(_2945 * cbSceneParam._m0[78u].x);
        float _2950 = exp2(_2945 * cbSceneParam._m0[78u].y);
        float _2951 = exp2(_2945 * cbSceneParam._m0[78u].z);
        float _2952 = _2949 * _2813;
        float _2953 = _2950 * _2814;
        float _2954 = _2951 * _2815;
        float _2961 = _652 + (-0.5);
        _2963 = cbMtdParam._m0[1u];
        _2965 = _2963.y * _2961;
        float _2968 = (_2943 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2969 = _2968 * (_2944 ? _2952 : (_2952 + (cbSceneParam._m0[72u].w * _2925)));
        _2970 = _2968 * (_2944 ? _2953 : (_2953 + (cbSceneParam._m0[72u].w * _2927)));
        _2971 = _2968 * (_2944 ? _2954 : (_2954 + (cbSceneParam._m0[72u].w * _2929)));
        _2974 = ((_2821 * _2825) * _2949) * _2968;
        _2977 = ((_2822 * _2825) * _2950) * _2968;
        _2980 = ((_2823 * _2825) * _2951) * _2968;
        _2981 = _2961 * 0.999000012874603271484375;
        _2991 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2991)
        {
            if ((cbInstanceData._m0[_704 + 7u].x + _2981) < 0.5)
            {
                _3147 = true;
                break;
            }
        }
        uint _3088 = _705 + uint(_2941.w);
        if ((cbInstanceData._m0[_3088].w < 1.0) && ((cbInstanceData._m0[_3088].w + _2981) < 0.5))
        {
            _3147 = true;
            break;
        }
        if ((_2965 + 1.0) < _2963.x)
        {
            _3147 = true;
            break;
        }
        _3147 = false;
        break;
    }
    float _3351;
    if (_3147)
    {
        discard_state = true;
        _3351 = 0.0;
    }
    else
    {
        _3351 = cbInstanceData._m0[_2826].w;
    }
    SV_Target.x = _2969;
    SV_Target.y = _2970;
    SV_Target.z = _2971;
    SV_Target.w = _3351;
    SV_Target_1.x = _2974;
    SV_Target_1.y = _2977;
    SV_Target_1.z = _2980;
    SV_Target_1.w = cbInstanceData._m0[_2826].w;
    discard_exit();
}


