#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1080;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _193 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _194 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _195 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _201 = inversesqrt(dot(vec3(_193, _194, _195), vec3(_193, _194, _195)));
    float _208 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _215 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _237 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _243 = _237.x * cbMtdParam._m0[9u].x;
    float _244 = _237.y * cbMtdParam._m0[9u].y;
    float _245 = _237.z * cbMtdParam._m0[9u].z;
    vec4 _262 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _283 = TEXCOORD_9.x - ((cbMtdParam._m0[16u].y * (1.0 - TEXCOORD_9.x)) * (_262.x + 0.00999999977648258209228515625));
    float _285 = _283 * (cbMtdParam._m0[16u].z + 1.0);
    float _3425 = isnan(0.0) ? _285 : (isnan(_285) ? 0.0 : max(_285, 0.0));
    float _286 = isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0));
    float _294 = ((((cbMtdParam._m0[12u].x - _243) * TEXCOORD_9.x) * cbMtdParam._m0[16u].x) * _286) + _243;
    float _295 = ((((cbMtdParam._m0[12u].y - _244) * TEXCOORD_9.y) * cbMtdParam._m0[16u].x) * _286) + _244;
    float _296 = (((cbMtdParam._m0[16u].x * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _245)) * _286) + _245;
    vec4 _308 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _312 = _308.z;
    float _316 = (_308.x * 2.0) + (-1.0);
    float _318 = (_308.y * 2.0) + (-1.0);
    float _319 = dot(vec2(_316, _318), vec2(_316, _318));
    float _3436 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _324 = sqrt(1.0 - (isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0))));
    float _330 = _283 * (cbMtdParam._m0[16u].y + 1.0);
    float _3447 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _334 = ((cbMtdParam._m0[15u].y - _312) * (isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0)))) + _312;
    float _347 = (cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _348 = (cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _375 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * ((cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * ((cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[10u].w));
    float _380 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[15u].w;
    float _387 = ((_375.y * 0.5) + (-0.25)) * cbMtdParam._m0[15u].z;
    float _389 = (-0.0) - (cbMtdParam._m0[15u].z * ((_375.x * 0.5) + (-0.25)));
    float _391 = fract(_380);
    float _393 = fract(_380 + 0.5);
    float _394 = _391 * _389;
    float _395 = _387 * _391;
    float _398 = _393 * _389;
    float _399 = _387 * _393;
    float _404 = abs((_391 * 2.0) + (-1.0));
    vec4 _420 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_394 + _347) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_395 + _348) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _422 = _420.x;
    float _423 = _420.y;
    float _424 = _420.z;
    vec4 _425 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_398 + _347) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_399 + _348) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _452 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _453 = (cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _466 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_394 + _452) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_395 + _453) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _468 = _466.x;
    float _469 = _466.y;
    float _470 = _466.z;
    vec4 _471 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_398 + _452) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_399 + _453) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    vec4 _515 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[16u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, (((cbMtdParam._m0[17u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w));
    float _521 = (_515.x * 2.0) + (-1.0);
    float _522 = (_515.y * 2.0) + (-1.0);
    float _523 = dot(vec2(_521, _522), vec2(_521, _522));
    float _3458 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _539 = (_286 * (((cbMtdParam._m0[14u].z * _316) - _316) + _521)) + _316;
    float _540 = (_286 * (((cbMtdParam._m0[14u].z * _318) - _318) + _522)) + _318;
    float _541 = (_286 * (sqrt(1.0 - (isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0)))) - _324)) + _324;
    float _544 = fma(_541, _208 * NORMAL.x, fma(_540, _215 * TANGENT.x, (_201 * _193) * _539));
    float _547 = fma(_541, _208 * NORMAL.y, fma(_540, _215 * TANGENT.y, (_201 * _194) * _539));
    float _550 = fma(_541, _208 * NORMAL.z, fma(_540, _215 * TANGENT.z, (_201 * _195) * _539));
    float _554 = inversesqrt(dot(vec3(_544, _547, _550), vec3(_544, _547, _550)));
    float _555 = _554 * _544;
    float _556 = _554 * _547;
    float _557 = _554 * _550;
    float _3469 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _558 = isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0));
    float _3480 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _3491 = isnan(0.0) ? _295 : (isnan(_295) ? 0.0 : max(_295, 0.0));
    float _3502 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _577 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _618 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _628 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _618);
    float _629 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _618);
    float _630 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _618);
    float _634 = inversesqrt(dot(vec3(_628, _629, _630), vec3(_628, _629, _630)));
    float _635 = _628 * _634;
    float _636 = _629 * _634;
    float _637 = _630 * _634;
    float _643 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _644 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _665 = fma(_557, cbSceneParam._m0[5u].z, fma(_556, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _555));
    float _668 = fma(_557, cbSceneParam._m0[6u].z, fma(_556, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _555));
    float _671 = fma(_557, cbSceneParam._m0[7u].z, fma(_556, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _555));
    uint _684 = uint(roundEven(NORMAL.w)) * 13u;
    uint _685 = _684 + 9u;
    uint _686 = _685 + uint(cbMatDynParam._m0[0u].w);
    float _692 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0)))) * cbInstanceData._m0[_686].x;
    float _693 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0)))) * cbInstanceData._m0[_686].y;
    float _694 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0)))) * cbInstanceData._m0[_686].z;
    float _3513 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _695 = isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0));
    float _3524 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _696 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
    float _3535 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _697 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
    vec4 _706 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _643, cbSceneParam._m0[86u].y * _644));
    float _709 = _706.x * TEXCOORD_3.w;
    float _710 = dot(vec3(_555, _556, _557), vec3(_635, _636, _637));
    float _713 = _710 * 2.0;
    float _717 = (_713 * _555) - _635;
    float _718 = (_713 * _556) - _636;
    float _719 = (_713 * _557) - _637;
    float _723 = abs(dot(vec3(_635, _636, _637), vec3(_555, _556, _557)));
    float _3546 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _725 = sqrt(_558);
    float _738 = exp2((_725 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_725 * 3.0));
    float _770 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _774 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _778 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1079;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _805 = fma(_778, cbModelParam._m0[26u].z, fma(_774, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _770));
        float _809 = fma(_778, cbModelParam._m0[27u].z, fma(_774, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _770));
        float _813 = fma(_778, cbModelParam._m0[28u].z, fma(_774, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _770));
        float _837 = _770 + _555;
        float _838 = _774 + _556;
        float _839 = _778 + _557;
        float _849 = fma(_839, cbModelParam._m0[26u].z, fma(_838, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _837)) - _805;
        float _850 = fma(_839, cbModelParam._m0[27u].z, fma(_838, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _837)) - _809;
        float _851 = fma(_839, cbModelParam._m0[28u].z, fma(_838, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _837)) - _813;
        float _855 = inversesqrt(dot(vec3(_849, _850, _851), vec3(_849, _850, _851)));
        float _868 = ((_855 * _849) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_805 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _869 = ((_855 * _850) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_809 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _870 = ((_855 * _851) / cbModelParam._m0[34u].z) + ((((((_813 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _873 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_868, _869, _870), 0.0);
        vec4 _880 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_868, _869, _870), 0.0);
        vec4 _887 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_868, _869, _870), 0.0);
        vec4 _894 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_868, _869, _870), 0.0);
        float _907 = exp2((_873.w + (-0.5)) * 20.0) * 2.0;
        float _908 = _907 * (_873.x + (-0.5));
        float _909 = _907 * (_873.y + (-0.5));
        float _910 = _907 * (_873.z + (-0.5));
        float _917 = exp2((_880.w + (-0.5)) * 20.0) * 2.0;
        float _918 = _917 * (_880.x + (-0.5));
        float _919 = _917 * (_880.y + (-0.5));
        float _920 = _917 * (_880.z + (-0.5));
        float _927 = exp2((_887.w + (-0.5)) * 20.0) * 2.0;
        float _928 = _927 * (_887.x + (-0.5));
        float _929 = _927 * (_887.y + (-0.5));
        float _930 = _927 * (_887.z + (-0.5));
        float _937 = exp2((_894.w + (-0.5)) * 20.0) * 2.0;
        float _938 = _937 * (_894.x + (-0.5));
        float _939 = _937 * (_894.y + (-0.5));
        float _940 = _937 * (_894.z + (-0.5));
        float _941 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _942 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _943 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _944 = _908 * 0.5;
        float _945 = _918 * 0.5;
        float _946 = _928 * 0.5;
        float _947 = dot(vec3(_944, _945, _946), vec3(_944, _945, _946));
        float _952 = (_947 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_947);
        float _961 = (dot(vec3(_555, _556, _557), vec3(_952 * _944, _952 * _945, _952 * _946)) + 1.0) * 0.5;
        float _3572 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _971 = sqrt(((_945 * _945) + (_944 * _944)) + (_946 * _946)) / (_941 + 9.9999997473787516355514526367188e-06);
        float _3583 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _972 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
        float _973 = _972 * 2.0;
        float _977 = (1.0 - _972) / (_972 + 1.0);
        float _3594 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _978 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
        float _987 = ((((1.0 - _978) * (_973 + 2.0)) * exp2(log2(isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0))) * (_973 + 1.0))) + _978) * _941;
        float _988 = _909 * 0.5;
        float _989 = _919 * 0.5;
        float _990 = _929 * 0.5;
        float _991 = dot(vec3(_988, _989, _990), vec3(_988, _989, _990));
        float _996 = (_991 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_991);
        float _1004 = (dot(vec3(_555, _556, _557), vec3(_996 * _988, _996 * _989, _996 * _990)) + 1.0) * 0.5;
        float _3605 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1013 = sqrt(((_989 * _989) + (_988 * _988)) + (_990 * _990)) / (_942 + 9.9999997473787516355514526367188e-06);
        float _3616 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1014 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
        float _1015 = _1014 * 2.0;
        float _1019 = (1.0 - _1014) / (_1014 + 1.0);
        float _3627 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1020 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
        float _1029 = ((((1.0 - _1020) * (_1015 + 2.0)) * exp2(log2(isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0))) * (_1015 + 1.0))) + _1020) * _942;
        float _1030 = _910 * 0.5;
        float _1031 = _920 * 0.5;
        float _1032 = _930 * 0.5;
        float _1033 = dot(vec3(_1030, _1031, _1032), vec3(_1030, _1031, _1032));
        float _1038 = (_1033 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1033);
        float _1046 = (dot(vec3(_555, _556, _557), vec3(_1038 * _1030, _1038 * _1031, _1038 * _1032)) + 1.0) * 0.5;
        float _3638 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1055 = sqrt(((_1031 * _1031) + (_1030 * _1030)) + (_1032 * _1032)) / (_943 + 9.9999997473787516355514526367188e-06);
        float _3649 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1056 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
        float _1057 = _1056 * 2.0;
        float _1061 = (1.0 - _1056) / (_1056 + 1.0);
        float _3660 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1062 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
        float _1071 = ((((1.0 - _1062) * (_1057 + 2.0)) * exp2(log2(isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0))) * (_1057 + 1.0))) + _1062) * _943;
        _1079 = _910;
        _1081 = _909;
        _1082 = _908;
        _1083 = _920;
        _1084 = _919;
        _1085 = _918;
        _1086 = _930;
        _1087 = _929;
        _1088 = _928;
        _1089 = _943;
        _1090 = _942;
        _1091 = _941;
        _1092 = cbModelParam._m0[36u].z * (isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0)));
        _1093 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0)));
        _1094 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0)));
    }
    else
    {
        _1079 = _1080;
        _1081 = _1080;
        _1082 = _1080;
        _1083 = _1080;
        _1084 = _1080;
        _1085 = _1080;
        _1086 = _1080;
        _1087 = _1080;
        _1088 = _1080;
        _1089 = _1080;
        _1090 = _1080;
        _1091 = _1080;
        _1092 = 0.0;
        _1093 = 0.0;
        _1094 = 0.0;
    }
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1120 = fma(_778, cbModelParam._m0[30u].z, fma(_774, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _770));
        float _1124 = fma(_778, cbModelParam._m0[31u].z, fma(_774, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _770));
        float _1128 = fma(_778, cbModelParam._m0[32u].z, fma(_774, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _770));
        float _1151 = _770 + _555;
        float _1152 = _774 + _556;
        float _1153 = _778 + _557;
        float _1163 = fma(_1153, cbModelParam._m0[30u].z, fma(_1152, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1151)) - _1120;
        float _1164 = fma(_1153, cbModelParam._m0[31u].z, fma(_1152, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1151)) - _1124;
        float _1165 = fma(_1153, cbModelParam._m0[32u].z, fma(_1152, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1151)) - _1128;
        float _1169 = inversesqrt(dot(vec3(_1163, _1164, _1165), vec3(_1163, _1164, _1165)));
        float _1182 = ((_1169 * _1163) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1120 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1183 = ((_1169 * _1164) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1124 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1184 = ((_1169 * _1165) / cbModelParam._m0[35u].z) + ((((((_1128 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1186 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1182, _1183, _1184), 0.0);
        vec4 _1193 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1182, _1183, _1184), 0.0);
        vec4 _1200 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1182, _1183, _1184), 0.0);
        vec4 _1207 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1182, _1183, _1184), 0.0);
        float _1219 = exp2((_1186.w + (-0.5)) * 20.0) * 2.0;
        float _1220 = _1219 * (_1186.x + (-0.5));
        float _1221 = _1219 * (_1186.y + (-0.5));
        float _1222 = _1219 * (_1186.z + (-0.5));
        float _1229 = exp2((_1193.w + (-0.5)) * 20.0) * 2.0;
        float _1230 = _1229 * (_1193.x + (-0.5));
        float _1231 = _1229 * (_1193.y + (-0.5));
        float _1232 = _1229 * (_1193.z + (-0.5));
        float _1239 = exp2((_1200.w + (-0.5)) * 20.0) * 2.0;
        float _1240 = _1239 * (_1200.x + (-0.5));
        float _1241 = _1239 * (_1200.y + (-0.5));
        float _1242 = _1239 * (_1200.z + (-0.5));
        float _1249 = exp2((_1207.w + (-0.5)) * 20.0) * 2.0;
        float _1250 = _1249 * (_1207.x + (-0.5));
        float _1251 = _1249 * (_1207.y + (-0.5));
        float _1252 = _1249 * (_1207.z + (-0.5));
        float _1253 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1254 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1255 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1256 = _1220 * 0.5;
        float _1257 = _1230 * 0.5;
        float _1258 = _1240 * 0.5;
        float _1259 = dot(vec3(_1256, _1257, _1258), vec3(_1256, _1257, _1258));
        float _1264 = (_1259 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1259);
        float _1272 = (dot(vec3(_555, _556, _557), vec3(_1264 * _1256, _1264 * _1257, _1264 * _1258)) + 1.0) * 0.5;
        float _3701 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1281 = sqrt(((_1257 * _1257) + (_1256 * _1256)) + (_1258 * _1258)) / (_1253 + 9.9999997473787516355514526367188e-06);
        float _3712 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
        float _1283 = _1282 * 2.0;
        float _1287 = (1.0 - _1282) / (_1282 + 1.0);
        float _3723 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1288 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
        float _1297 = ((((1.0 - _1288) * (_1283 + 2.0)) * exp2(log2(isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0))) * (_1283 + 1.0))) + _1288) * _1253;
        float _1298 = _1221 * 0.5;
        float _1299 = _1231 * 0.5;
        float _1300 = _1241 * 0.5;
        float _1301 = dot(vec3(_1298, _1299, _1300), vec3(_1298, _1299, _1300));
        float _1306 = (_1301 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1301);
        float _1314 = (dot(vec3(_555, _556, _557), vec3(_1306 * _1298, _1306 * _1299, _1306 * _1300)) + 1.0) * 0.5;
        float _3734 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1323 = sqrt(((_1299 * _1299) + (_1298 * _1298)) + (_1300 * _1300)) / (_1254 + 9.9999997473787516355514526367188e-06);
        float _3745 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1324 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
        float _1325 = _1324 * 2.0;
        float _1329 = (1.0 - _1324) / (_1324 + 1.0);
        float _3756 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
        float _1339 = ((((1.0 - _1330) * (_1325 + 2.0)) * exp2(log2(isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0))) * (_1325 + 1.0))) + _1330) * _1254;
        float _1340 = _1222 * 0.5;
        float _1341 = _1232 * 0.5;
        float _1342 = _1242 * 0.5;
        float _1343 = dot(vec3(_1340, _1341, _1342), vec3(_1340, _1341, _1342));
        float _1348 = (_1343 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1343);
        float _1356 = (dot(vec3(_555, _556, _557), vec3(_1348 * _1340, _1348 * _1341, _1348 * _1342)) + 1.0) * 0.5;
        float _3767 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1365 = sqrt(((_1341 * _1341) + (_1340 * _1340)) + (_1342 * _1342)) / (_1255 + 9.9999997473787516355514526367188e-06);
        float _3778 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1366 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
        float _1367 = _1366 * 2.0;
        float _1371 = (1.0 - _1366) / (_1366 + 1.0);
        float _3789 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
        float _1381 = ((((1.0 - _1372) * (_1367 + 2.0)) * exp2(log2(isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0))) * (_1367 + 1.0))) + _1372) * _1255;
        _1389 = _1222;
        _1390 = _1221;
        _1391 = _1220;
        _1392 = _1232;
        _1393 = _1231;
        _1394 = _1230;
        _1395 = _1242;
        _1396 = _1241;
        _1397 = _1240;
        _1398 = _1255;
        _1399 = _1254;
        _1400 = _1253;
        _1401 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0)));
        _1402 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0)));
        _1403 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0)));
    }
    else
    {
        _1389 = _1080;
        _1390 = _1080;
        _1391 = _1080;
        _1392 = _1080;
        _1393 = _1080;
        _1394 = _1080;
        _1395 = _1080;
        _1396 = _1080;
        _1397 = _1080;
        _1398 = _1080;
        _1399 = _1080;
        _1400 = _1080;
        _1401 = 0.0;
        _1402 = 0.0;
        _1403 = 0.0;
    }
    float _1413 = (cbModelParam._m0[1u].x * (_1401 - _1092)) + _1092;
    float _1414 = (cbModelParam._m0[1u].x * (_1402 - _1093)) + _1093;
    float _1415 = (cbModelParam._m0[1u].x * (_1403 - _1094)) + _1094;
    float _1436 = fma(_1415, cbSceneParam._m0[89u].z, fma(_1414, cbSceneParam._m0[89u].y, _1413 * cbSceneParam._m0[89u].x));
    float _1439 = fma(_1415, cbSceneParam._m0[90u].z, fma(_1414, cbSceneParam._m0[90u].y, _1413 * cbSceneParam._m0[90u].x));
    float _1442 = fma(_1415, cbSceneParam._m0[91u].z, fma(_1414, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1413));
    float _1457 = _717 * 0.5;
    float _1458 = _718 * 0.5;
    float _1459 = _719 * 0.5;
    float _1460 = dot(vec4(_1457, _1458, _1459, 1.0), vec4(_1391, _1394, _1397, _1400));
    float _1463 = dot(vec4(_1457, _1458, _1459, 1.0), vec4(_1390, _1393, _1396, _1399));
    float _1466 = dot(vec4(_1457, _1458, _1459, 1.0), vec4(_1389, _1392, _1395, _1398));
    float _1500;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1473 = dot(vec4(_1457, _1458, _1459, 1.0), vec4(_1079, _1083, _1086, _1089));
        float _1477 = dot(vec4(_1457, _1458, _1459, 1.0), vec4(_1081, _1084, _1087, _1090));
        float _1481 = dot(vec4(_1457, _1458, _1459, 1.0), vec4(_1082, _1085, _1088, _1091));
        float _1488 = dot(vec4(cbModelParam._m0[39u]), vec4(_1457, _1458, _1459, 1.0));
        _1500 = dot(vec3(isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0)), isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0)), isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1488) ? 0.0 : (isnan(0.0) ? _1488 : max(0.0, _1488))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1500 = 1.0;
    }
    float _1511;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1502 = dot(vec4(cbModelParam._m0[40u]), vec4(_1457, _1458, _1459, 1.0));
        _1511 = dot(vec3(isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0)), isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0)), isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1502) ? 0.0 : (isnan(0.0) ? _1502 : max(0.0, _1502))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1511 = 1.0;
    }
    float _1515 = (_1511 * cbModelParam._m0[1u].x) + (_1500 * (1.0 - cbModelParam._m0[1u].x));
    float _1525 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _558);
    float _1526 = isnan(_1525) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1525 : min(cbModelParam._m0[25u].z, _1525));
    float _1606;
    float _1608;
    float _1610;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1573 = fma(_778, cbModelParam._m0[13u].z, fma(_774, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _770)) + cbModelParam._m0[13u].w;
        float _1577 = fma(_778, cbModelParam._m0[14u].z, fma(_774, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _770)) + cbModelParam._m0[14u].w;
        float _1581 = fma(_778, cbModelParam._m0[15u].z, fma(_774, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _770)) + cbModelParam._m0[15u].w;
        float _1584 = fma(_719, cbModelParam._m0[13u].z, fma(_718, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _717));
        float _1587 = fma(_719, cbModelParam._m0[14u].z, fma(_718, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _717));
        float _1590 = fma(_719, cbModelParam._m0[15u].z, fma(_718, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _717));
        float _1618;
        if (_1584 > 0.0)
        {
            _1618 = abs((1.0 - _1573) / _1584);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1584 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1573 + 1.0) / _1584);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1618 = frontier_phi_14_12_ladder;
        }
        float _1820;
        if (_1587 > 0.0)
        {
            _1820 = abs((1.0 - _1577) / _1587);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1587 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1577 + 1.0) / _1587);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1820 = frontier_phi_23_19_ladder;
        }
        float _2063;
        if (_1590 > 0.0)
        {
            _2063 = abs((1.0 - _1581) / _1590);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1590 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1581 + 1.0) / _1590);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2063 = frontier_phi_35_30_ladder;
        }
        float _2065 = isnan(_1820) ? _1618 : (isnan(_1618) ? _1820 : min(_1618, _1820));
        float _2066 = isnan(_2063) ? _2065 : (isnan(_2065) ? _2063 : min(_2065, _2063));
        float _2070 = (_2066 * _1584) + _1573;
        float _2071 = (_2066 * _1587) + _1577;
        float _2072 = (_2066 * _1590) + _1581;
        float _2073 = _2066 * 9.9999997473787516355514526367188e-05;
        float _2075 = (-1.0) - _2073;
        float _2077 = _2073 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2072 > _2077) || ((_2072 < _2075) || ((_2071 > _2077) || ((_2071 < _2075) || ((_2070 < _2075) || (_2070 > _2077))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2196 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2072, cbModelParam._m0[9u].z, fma(_2071, cbModelParam._m0[9u].y, _2070 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2072, cbModelParam._m0[10u].z, fma(_2071, cbModelParam._m0[10u].y, _2070 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2072, cbModelParam._m0[11u].z, fma(_2071, cbModelParam._m0[11u].y, _2070 * cbModelParam._m0[11u].x))), _1526);
            frontier_phi_13_35_ladder = _2196.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2196.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2196.x * cbModelParam._m0[1u].y;
        }
        _1606 = frontier_phi_13_35_ladder_2;
        _1608 = frontier_phi_13_35_ladder_1;
        _1610 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1594 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_717, _718, _719), _1526);
        _1606 = _1594.x * cbModelParam._m0[1u].y;
        _1608 = _1594.y * cbModelParam._m0[1u].y;
        _1610 = _1594.z * cbModelParam._m0[1u].y;
    }
    float _1614 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _558);
    float _1615 = isnan(_1614) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1614 : min(cbModelParam._m0[25u].w, _1614));
    float _1705;
    float _1707;
    float _1709;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1669 = fma(_778, cbModelParam._m0[21u].z, fma(_774, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _770)) + cbModelParam._m0[21u].w;
        float _1673 = fma(_778, cbModelParam._m0[22u].z, fma(_774, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _770)) + cbModelParam._m0[22u].w;
        float _1677 = fma(_778, cbModelParam._m0[23u].z, fma(_774, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _770)) + cbModelParam._m0[23u].w;
        float _1680 = fma(_719, cbModelParam._m0[21u].z, fma(_718, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _717));
        float _1683 = fma(_719, cbModelParam._m0[22u].z, fma(_718, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _717));
        float _1686 = fma(_719, cbModelParam._m0[23u].z, fma(_718, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _717));
        float _1825;
        if (_1680 > 0.0)
        {
            _1825 = abs((1.0 - _1669) / _1680);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1680 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1669 + 1.0) / _1680);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1825 = frontier_phi_25_21_ladder;
        }
        float _2090;
        if (_1683 > 0.0)
        {
            _2090 = abs((1.0 - _1673) / _1683);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1683 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1673 + 1.0) / _1683);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2090 = frontier_phi_37_32_ladder;
        }
        float _2295;
        if (_1686 > 0.0)
        {
            _2295 = abs((1.0 - _1677) / _1686);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1686 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1677 + 1.0) / _1686);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2295 = frontier_phi_46_43_ladder;
        }
        float _2297 = isnan(_2090) ? _1825 : (isnan(_1825) ? _2090 : min(_1825, _2090));
        float _2298 = isnan(_2295) ? _2297 : (isnan(_2297) ? _2295 : min(_2297, _2295));
        float _2302 = (_2298 * _1680) + _1669;
        float _2303 = (_2298 * _1683) + _1673;
        float _2304 = (_2298 * _1686) + _1677;
        float _2305 = _2298 * 9.9999997473787516355514526367188e-05;
        float _2306 = (-1.0) - _2305;
        float _2308 = _2305 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2304 > _2308) || ((_2304 < _2306) || ((_2303 > _2308) || ((_2303 < _2306) || ((_2302 < _2306) || (_2302 > _2308))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2532 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2304, cbModelParam._m0[17u].z, fma(_2303, cbModelParam._m0[17u].y, _2302 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2304, cbModelParam._m0[18u].z, fma(_2303, cbModelParam._m0[18u].y, _2302 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2304, cbModelParam._m0[19u].z, fma(_2303, cbModelParam._m0[19u].y, _2302 * cbModelParam._m0[19u].x))), _1615);
            frontier_phi_22_46_ladder = _2532.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2532.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2532.x * cbModelParam._m0[1u].z;
        }
        _1705 = frontier_phi_22_46_ladder_2;
        _1707 = frontier_phi_22_46_ladder_1;
        _1709 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1689 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_717, _718, _719), _1615);
        _1705 = _1689.x * cbModelParam._m0[1u].z;
        _1707 = _1689.y * cbModelParam._m0[1u].z;
        _1709 = _1689.z * cbModelParam._m0[1u].z;
    }
    float _1721 = ((((1.0 - _738) * ((_725 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_738 * _725)) * _709;
    float _1722 = _1721 * ((cbModelParam._m0[1u].w * (_1705 - _1606)) + _1606);
    float _1723 = _1721 * ((cbModelParam._m0[1u].w * (_1707 - _1608)) + _1608);
    float _1724 = _1721 * ((cbModelParam._m0[1u].w * (_1709 - _1610)) + _1610);
    float _1727 = fma(_1724, cbSceneParam._m0[89u].z, fma(_1723, cbSceneParam._m0[89u].y, _1722 * cbSceneParam._m0[89u].x));
    float _1730 = fma(_1724, cbSceneParam._m0[90u].z, fma(_1723, cbSceneParam._m0[90u].y, _1722 * cbSceneParam._m0[90u].x));
    float _1733 = fma(_1724, cbSceneParam._m0[91u].z, fma(_1723, cbSceneParam._m0[91u].y, _1722 * cbSceneParam._m0[91u].x));
    uvec4 _1743 = floatBitsToUint(cbInstanceData._m0[_684 + 5u]);
    uint _1745 = _1743.x * 14u;
    uint _1746 = _1745 + 13u;
    float _1753 = _709 + (-1.0);
    float _1758 = (cbLight._m0[_1746].x * _1753) + 1.0;
    float _1759 = (cbLight._m0[_1746].y * _1753) + 1.0;
    float _1760 = (cbLight._m0[_1746].z * _1753) + 1.0;
    float _1761 = (cbLight._m0[_1746].w * _1753) + 1.0;
    uint _1762 = _1745 + 5u;
    float _1768 = isnan(1.0) ? _1759 : (isnan(_1759) ? 1.0 : min(_1759, 1.0));
    uint _1772 = _1745 + 4u;
    float _1779 = isnan(1.0) ? _1758 : (isnan(_1758) ? 1.0 : min(_1758, 1.0));
    uint _1783 = _1745 | 1u;
    float _1794 = dot(vec3(cbLight._m0[_1745].xyz), vec3(_555, _556, _557));
    float _1797 = dot(vec3(cbLight._m0[_1783].xyz), vec3(_555, _556, _557));
    float _3925 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
    float _3936 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
    float _1802 = (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0))) * 0.3183098733425140380859375;
    float _1804 = (isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0))) * 0.3183098733425140380859375;
    float _1811 = ((cbLight._m0[_1762].x * _1768) * _1804) + ((cbLight._m0[_1772].x * _1779) * _1802);
    float _1812 = ((_1768 * cbLight._m0[_1762].y) * _1804) + ((_1779 * cbLight._m0[_1772].y) * _1802);
    float _1813 = ((_1768 * cbLight._m0[_1762].z) * _1804) + ((_1779 * cbLight._m0[_1772].z) * _1802);
    uvec4 _1817 = floatBitsToUint(cbLight._m0[_1745 + 12u]);
    bool _1819 = _1817.x == 0u;
    float _1830;
    float _1832;
    float _1834;
    if (_1819)
    {
        _1830 = _1811;
        _1832 = _1812;
        _1834 = _1813;
    }
    else
    {
        uint _1838 = _1745 + 6u;
        float _1854 = (dot(vec3(cbLight._m0[_1745 + 2u].xyz), vec3(_555, _556, _557)) * 0.5) + 0.5;
        float _1855 = _1854 * _1854;
        float _3947 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
        float _1856 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _1857 = isnan(1.0) ? _1760 : (isnan(_1760) ? 1.0 : min(_1760, 1.0));
        _1830 = (((cbLight._m0[_1838].x * 0.3183098733425140380859375) * _1856) * _1857) + _1811;
        _1832 = (((cbLight._m0[_1838].y * 0.3183098733425140380859375) * _1856) * _1857) + _1812;
        _1834 = (((cbLight._m0[_1838].z * 0.3183098733425140380859375) * _1856) * _1857) + _1813;
    }
    bool _1837 = _1817.y == 0u;
    float _1875;
    float _1877;
    float _1879;
    if (_1837)
    {
        _1875 = _1830;
        _1877 = _1832;
        _1879 = _1834;
    }
    else
    {
        uint _2034 = _1745 + 7u;
        float _2050 = (dot(vec3(cbLight._m0[_1745 + 3u].xyz), vec3(_555, _556, _557)) * 0.5) + 0.5;
        float _2051 = _2050 * _2050;
        float _3963 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
        float _2052 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _2053 = isnan(1.0) ? _1761 : (isnan(_1761) ? 1.0 : min(_1761, 1.0));
        _1875 = (((cbLight._m0[_2034].x * 0.3183098733425140380859375) * _2052) * _2053) + _1830;
        _1877 = (((cbLight._m0[_2034].y * 0.3183098733425140380859375) * _2052) * _2053) + _1832;
        _1879 = (((cbLight._m0[_2034].z * 0.3183098733425140380859375) * _2052) * _2053) + _1834;
    }
    uint _1882 = _1745 + 8u;
    float _1895 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1745].w)) * _558) * 0.949999988079071044921875);
    float _1896 = _1895 * _1895;
    float _1897 = cbLight._m0[_1745].x + _635;
    float _1898 = cbLight._m0[_1745].y + _636;
    float _1899 = cbLight._m0[_1745].z + _637;
    float _1903 = inversesqrt(dot(vec3(_1897, _1898, _1899), vec3(_1897, _1898, _1899)));
    float _1904 = _1903 * _1897;
    float _1905 = _1903 * _1898;
    float _1906 = _1903 * _1899;
    float _1907 = dot(vec3(_555, _556, _557), vec3(cbLight._m0[_1745].xyz));
    float _3979 = isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0));
    float _1910 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
    float _3990 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _1911 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
    float _1912 = dot(vec3(_555, _556, _557), vec3(_1904, _1905, _1906));
    float _4001 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
    float _1915 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
    float _1916 = dot(vec3(cbLight._m0[_1745].xyz), vec3(_1904, _1905, _1906));
    float _4012 = isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0));
    float _1920 = _1896 * _1896;
    float _1924 = ((_1915 * _1915) * (_1920 + (-1.0))) + 1.0;
    float _1935 = (exp2(log2(1.0 - (isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1936 = 1.0 - _1896;
    float _1947 = (0.5 / (((_1911 * ((_1910 * _1936) + _1896)) + 9.9999999392252902907785028219223e-09) + (((_1911 * _1936) + _1896) * _1910))) * _1910;
    float _4023 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
    float _1949 = (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))) * (_1920 / ((_1924 * _1924) * 3.141590118408203125));
    uint _1960 = _1745 + 9u;
    float _1971 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1783].w)) * _558) * 0.949999988079071044921875);
    float _1972 = _1971 * _1971;
    float _1973 = cbLight._m0[_1783].x + _635;
    float _1974 = cbLight._m0[_1783].y + _636;
    float _1975 = cbLight._m0[_1783].z + _637;
    float _1979 = inversesqrt(dot(vec3(_1973, _1974, _1975), vec3(_1973, _1974, _1975)));
    float _1980 = _1979 * _1973;
    float _1981 = _1979 * _1974;
    float _1982 = _1979 * _1975;
    float _1983 = dot(vec3(_555, _556, _557), vec3(cbLight._m0[_1783].xyz));
    float _4034 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
    float _1986 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
    float _1987 = dot(vec3(_555, _556, _557), vec3(_1980, _1981, _1982));
    float _4045 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
    float _1990 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
    float _1991 = dot(vec3(cbLight._m0[_1783].xyz), vec3(_1980, _1981, _1982));
    float _4056 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
    float _1995 = _1972 * _1972;
    float _1999 = ((_1990 * _1990) * (_1995 + (-1.0))) + 1.0;
    float _2008 = (exp2(log2(1.0 - (isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2009 = 1.0 - _1972;
    float _2019 = (0.5 / (((_1911 * ((_1986 * _2009) + _1972)) + 9.9999999392252902907785028219223e-09) + (((_1911 * _2009) + _1972) * _1986))) * _1986;
    float _4067 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
    float _2021 = (isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0))) * (_1995 / ((_1999 * _1999) * 3.141590118408203125));
    float _2031 = (((_2008 * cbLight._m0[_1960].x) * _2021) * _1768) + (((_1935 * cbLight._m0[_1882].x) * _1949) * _1779);
    float _2032 = (((_2008 * cbLight._m0[_1960].y) * _2021) * _1768) + (((_1935 * cbLight._m0[_1882].y) * _1949) * _1779);
    float _2033 = (((_2008 * cbLight._m0[_1960].z) * _2021) * _1768) + (((_1935 * cbLight._m0[_1882].z) * _1949) * _1779);
    float _2095;
    float _2097;
    float _2099;
    if (_1819)
    {
        _2095 = _2031;
        _2097 = _2032;
        _2099 = _2033;
    }
    else
    {
        uint _2101 = _1745 + 2u;
        uint _2105 = _1745 + 10u;
        float _2119 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2101].w)) * _558) * 0.949999988079071044921875);
        float _2120 = _2119 * _2119;
        float _2121 = cbLight._m0[_2101].x + _635;
        float _2122 = cbLight._m0[_2101].y + _636;
        float _2123 = cbLight._m0[_2101].z + _637;
        float _2127 = inversesqrt(dot(vec3(_2121, _2122, _2123), vec3(_2121, _2122, _2123)));
        float _2128 = _2127 * _2121;
        float _2129 = _2127 * _2122;
        float _2130 = _2127 * _2123;
        float _2131 = dot(vec3(_555, _556, _557), vec3(cbLight._m0[_2101].xyz));
        float _4078 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
        float _2134 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
        float _2135 = dot(vec3(_555, _556, _557), vec3(_2128, _2129, _2130));
        float _4089 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
        float _2138 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _2139 = dot(vec3(cbLight._m0[_2101].xyz), vec3(_2128, _2129, _2130));
        float _4100 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
        float _2143 = _2120 * _2120;
        float _2147 = ((_2138 * _2138) * (_2143 + (-1.0))) + 1.0;
        float _2156 = (exp2(log2(1.0 - (isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2157 = 1.0 - _2120;
        float _2167 = (0.5 / (((_1911 * ((_2134 * _2157) + _2120)) + 9.9999999392252902907785028219223e-09) + (((_1911 * _2157) + _2120) * _2134))) * _2134;
        float _4111 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
        float _2169 = (isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * (_2143 / ((_2147 * _2147) * 3.141590118408203125));
        float _2170 = isnan(1.0) ? _1760 : (isnan(_1760) ? 1.0 : min(_1760, 1.0));
        _2095 = (((_2156 * cbLight._m0[_2105].x) * _2169) * _2170) + _2031;
        _2097 = (((_2156 * cbLight._m0[_2105].y) * _2169) * _2170) + _2032;
        _2099 = (((_2156 * cbLight._m0[_2105].z) * _2169) * _2170) + _2033;
    }
    float _2205;
    float _2207;
    float _2209;
    if (_1837)
    {
        _2205 = _2095;
        _2207 = _2097;
        _2209 = _2099;
    }
    else
    {
        uint _2216 = _1745 + 3u;
        uint _2220 = _1745 + 11u;
        float _2234 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2216].w)) * _558) * 0.949999988079071044921875);
        float _2235 = _2234 * _2234;
        float _2236 = cbLight._m0[_2216].x + _635;
        float _2237 = cbLight._m0[_2216].y + _636;
        float _2238 = cbLight._m0[_2216].z + _637;
        float _2242 = inversesqrt(dot(vec3(_2236, _2237, _2238), vec3(_2236, _2237, _2238)));
        float _2243 = _2242 * _2236;
        float _2244 = _2242 * _2237;
        float _2245 = _2242 * _2238;
        float _2246 = dot(vec3(_555, _556, _557), vec3(cbLight._m0[_2216].xyz));
        float _4127 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
        float _2249 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _2250 = dot(vec3(_555, _556, _557), vec3(_2243, _2244, _2245));
        float _4138 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
        float _2253 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _2254 = dot(vec3(cbLight._m0[_2216].xyz), vec3(_2243, _2244, _2245));
        float _4149 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
        float _2258 = _2235 * _2235;
        float _2262 = ((_2253 * _2253) * (_2258 + (-1.0))) + 1.0;
        float _2271 = (exp2(log2(1.0 - (isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2272 = 1.0 - _2235;
        float _2282 = (0.5 / (((_1911 * ((_2249 * _2272) + _2235)) + 9.9999999392252902907785028219223e-09) + (((_1911 * _2272) + _2235) * _2249))) * _2249;
        float _4160 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
        float _2284 = (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0))) * (_2258 / ((_2262 * _2262) * 3.141590118408203125));
        float _2285 = isnan(1.0) ? _1761 : (isnan(_1761) ? 1.0 : min(_1761, 1.0));
        _2205 = (((_2271 * cbLight._m0[_2220].x) * _2284) * _2285) + _2095;
        _2207 = (((_2271 * cbLight._m0[_2220].y) * _2284) * _2285) + _2097;
        _2209 = (((_2271 * cbLight._m0[_2220].z) * _2284) * _2285) + _2099;
    }
    float _2420;
    float _2422;
    float _2424;
    float _2426;
    float _2428;
    float _2430;
    if (_1743.y == 0u)
    {
        float _2360 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2361 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2360;
        float _2362 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2360;
        float _2363 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2360;
        uvec4 _2375 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2376 = _2375.x;
        uint _2387 = uint((float(_2375.y) * floor(float(uint(cbSceneParam._m0[85u].y * _644) / _2376))) + floor(float(uint(cbSceneParam._m0[85u].x * _643) / _2376)));
        float _2397 = (log2(_2363 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2398 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
        uint _2401 = uint(isnan(14.0) ? _2398 : (isnan(_2398) ? 14.0 : min(_2398, 14.0)));
        uvec4 _2406 = texelFetch(g_lightClusterGridBuffer, int(((_2401 << 2u) + (_2387 << 6u)) >> 2u));
        uint _2407 = _2406.x;
        uint _2408 = _2375.z;
        float _2537;
        float _2539;
        float _2541;
        float _2543;
        float _2545;
        float _2547;
        if (((((1u << ((_2408 >> 4u) & 15u)) + 4294967295u) & _2407) == 0u) || ((_2408 & 240u) == 0u))
        {
            _2537 = 0.0;
            _2539 = 0.0;
            _2541 = 0.0;
            _2543 = 0.0;
            _2545 = 0.0;
            _2547 = 0.0;
        }
        else
        {
            float _2538;
            float _2540;
            float _2542;
            float _2544;
            float _2546;
            float _2548;
            float _2690 = 0.0;
            float _2691 = 0.0;
            float _2692 = 0.0;
            float _2693 = 0.0;
            float _2694 = 0.0;
            float _2695 = 0.0;
            uint _2696 = 0u;
            uint _2705;
            bool _2706;
            for (;;)
            {
                _2705 = texelFetch(g_lightClassification, int((((_2401 << 5u) + (_2387 << 9u)) + (_2696 << 2u)) >> 2u)).x;
                _2706 = _2705 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2706)
                {
                    frontier_phi_61_pred = _2690;
                    frontier_phi_61_pred_1 = _2695;
                    frontier_phi_61_pred_2 = _2694;
                    frontier_phi_61_pred_3 = _2693;
                    frontier_phi_61_pred_4 = _2692;
                    frontier_phi_61_pred_5 = _2691;
                }
                else
                {
                    float _2814;
                    float _2815;
                    float _2816;
                    float _2817;
                    float _2818;
                    float _2819;
                    uint _2820;
                    _2814 = _2690;
                    _2815 = _2691;
                    _2816 = _2692;
                    _2817 = _2693;
                    _2818 = _2694;
                    _2819 = _2695;
                    _2820 = _2705;
                    float _2746;
                    float _2747;
                    float _2748;
                    float _2749;
                    float _2750;
                    float _2751;
                    for (;;)
                    {
                        uint _2824 = uint(findLSB(_2820)) + (_2696 << 5u);
                        uint _2821 = (_2820 + 4294967295u) & _2820;
                        uint _2826 = _2824 * 48u;
                        vec4 _2840 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2826)).x, texelFetch(g_PointLightRenderingBuffer, int(_2826 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2826 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2826 + 3u)).x));
                        uint _2846 = (_2824 * 48u) + 4u;
                        vec4 _2859 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2846)).x, texelFetch(g_PointLightRenderingBuffer, int(_2846 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2846 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2846 + 3u)).x));
                        uint _2865 = (_2824 * 48u) + 8u;
                        vec3 _2876 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2865)).x, texelFetch(g_PointLightRenderingBuffer, int(_2865 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2865 + 2u)).x));
                        float _2880 = _2840.x - _2361;
                        float _2881 = _2840.y - _2362;
                        float _2882 = _2840.z - _2363;
                        float _2883 = dot(vec3(_2880, _2881, _2882), vec3(_2880, _2881, _2882));
                        float _2886 = inversesqrt(_2883);
                        float _2887 = _2886 * _2880;
                        float _2888 = _2886 * _2881;
                        float _2889 = _2886 * _2882;
                        float _2890 = dot(vec3(_665, _668, _671), vec3(_2887, _2888, _2889));
                        float _2895 = 1.0 - (_2883 * _2840.w);
                        float _4186 = isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0));
                        float _2896 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
                        float _2897 = sqrt(_2883) * _2859.w;
                        float _2900 = 1.39999997615814208984375 / (_2897 + 1.39999997615814208984375);
                        float _2901 = _2900 * _2900;
                        float _2904 = ((1.0 - _2901) * _2890) + _2901;
                        float _2907 = _2897 * _2897;
                        float _2911 = ((isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : max(_2904, 0.0))) * _2896) / ((_2907 * 0.699999988079071044921875) + 1.0);
                        float _2915 = (-0.0) - _2361;
                        float _2916 = (-0.0) - _2362;
                        float _2917 = (-0.0) - _2363;
                        float _2921 = inversesqrt(dot(vec3(_2915, _2916, _2917), vec3(_2915, _2916, _2917)));
                        float _2922 = _2921 * _2915;
                        float _2923 = _2921 * _2916;
                        float _2924 = _2921 * _2917;
                        float _2932 = exp2(log2(1.0 / ((_2907 * 3.5) + 5.0)) * 0.25);
                        float _2933 = 1.0 - _725;
                        float _2940 = sqrt(1.0 - ((1.0 - (_2933 * _2933)) * (1.0 - (_2932 * _2932))));
                        float _2941 = _2940 * _2940;
                        float _2942 = _2941 * _2941;
                        float _2943 = _2922 + _2887;
                        float _2944 = _2923 + _2888;
                        float _2945 = _2924 + _2889;
                        float _2949 = inversesqrt(dot(vec3(_2943, _2944, _2945), vec3(_2943, _2944, _2945)));
                        float _2953 = dot(vec3(_665, _668, _671), vec3(_2922, _2923, _2924));
                        float _4202 = isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0));
                        float _2956 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
                        float _2957 = dot(vec3(_665, _668, _671), vec3(_2949 * _2943, _2949 * _2944, _2949 * _2945));
                        float _4213 = isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0));
                        float _2960 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
                        float _2964 = ((_2960 * _2960) * (_2942 + (-1.0))) + 1.0;
                        float _2965 = _2900 * _2941;
                        float _2966 = _2965 * _2965;
                        float _2969 = ((1.0 - _2966) * _2890) + _2966;
                        float _4224 = isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0));
                        float _2970 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
                        float _2971 = 1.0 - _2941;
                        float _2981 = (0.5 / (((_2970 * ((_2956 * _2971) + _2941)) + 9.9999999392252902907785028219223e-09) + (((_2970 * _2971) + _2941) * _2956))) * _2970;
                        float _4235 = isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0));
                        float _2992 = (((_2942 * 3.1415927410125732421875) * (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0)))) / ((_2964 * _2964) * ((_2907 * 2.1991131305694580078125) + 3.141590118408203125))) * _2896;
                        _2749 = (_2911 * _2859.x) + _2817;
                        _2750 = (_2911 * _2859.y) + _2818;
                        _2751 = (_2911 * _2859.z) + _2819;
                        _2746 = (_2992 * _2876.x) + _2814;
                        _2747 = (_2992 * _2876.y) + _2815;
                        _2748 = (_2992 * _2876.z) + _2816;
                        if (_2821 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2814 = _2746;
                            _2815 = _2747;
                            _2816 = _2748;
                            _2817 = _2749;
                            _2818 = _2750;
                            _2819 = _2751;
                            _2820 = _2821;
                        }
                    }
                    frontier_phi_61_pred = _2746;
                    frontier_phi_61_pred_1 = _2751;
                    frontier_phi_61_pred_2 = _2750;
                    frontier_phi_61_pred_3 = _2749;
                    frontier_phi_61_pred_4 = _2748;
                    frontier_phi_61_pred_5 = _2747;
                }
                _2538 = frontier_phi_61_pred;
                _2548 = frontier_phi_61_pred_1;
                _2546 = frontier_phi_61_pred_2;
                _2544 = frontier_phi_61_pred_3;
                _2542 = frontier_phi_61_pred_4;
                _2540 = frontier_phi_61_pred_5;
                uint _2697 = _2696 + 1u;
                if (_2697 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2690 = _2538;
                    _2691 = _2540;
                    _2692 = _2542;
                    _2693 = _2544;
                    _2694 = _2546;
                    _2695 = _2548;
                    _2696 = _2697;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2537 = _2538;
            _2539 = _2540;
            _2541 = _2542;
            _2543 = _2544;
            _2545 = _2546;
            _2547 = _2548;
        }
        uvec4 _2551 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2552 = _2551.z;
        uint _2554 = (_2552 >> 8u) & 15u;
        float _2658;
        float _2660;
        float _2662;
        float _2664;
        float _2666;
        float _2668;
        if (((4294967295u << _2554) & _2407) == 0u)
        {
            _2658 = _2537;
            _2660 = _2539;
            _2662 = _2541;
            _2664 = _2543;
            _2666 = _2545;
            _2668 = _2547;
        }
        else
        {
            float _2683 = inversesqrt(dot(vec3(_2361, _2362, _2363), vec3(_2361, _2362, _2363)));
            float _2684 = _2683 * _2361;
            float _2685 = _2683 * _2362;
            float _2686 = _2683 * _2363;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2554 < ((_2552 >> 12u) & 15u))
            {
                float _2659;
                float _2661;
                float _2663;
                float _2665;
                float _2667;
                float _2669;
                float _2797 = _2537;
                float _2798 = _2539;
                float _2799 = _2541;
                float _2800 = _2543;
                float _2801 = _2545;
                float _2802 = _2547;
                uint _2803 = _2554;
                uint _2812;
                bool _2813;
                for (;;)
                {
                    _2812 = texelFetch(g_lightClassification, int((((_2401 << 5u) + (_2387 << 9u)) + (_2803 << 2u)) >> 2u)).x;
                    _2813 = _2812 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2813)
                    {
                        frontier_phi_67_pred = _2800;
                        frontier_phi_67_pred_1 = _2801;
                        frontier_phi_67_pred_2 = _2802;
                        frontier_phi_67_pred_3 = _2799;
                        frontier_phi_67_pred_4 = _2798;
                        frontier_phi_67_pred_5 = _2797;
                    }
                    else
                    {
                        float _2997;
                        float _2998;
                        float _2999;
                        float _3000;
                        float _3001;
                        float _3002;
                        float _3291;
                        float _3292;
                        float _3293;
                        float _3294;
                        float _3295;
                        float _3296;
                        float _3010 = _2797;
                        float _3011 = _2798;
                        float _3012 = _2799;
                        float _3013 = _2800;
                        float _3014 = _2801;
                        float _3015 = _2802;
                        uint _3016 = _2812;
                        uint _3017;
                        vec4 _3042;
                        float _3043;
                        vec4 _3058;
                        vec3 _3070;
                        vec4 _3085;
                        vec4 _3100;
                        float _3147;
                        bool _3148;
                        for (;;)
                        {
                            uint _3027 = ((_2803 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3016));
                            _3017 = (_3016 + 4294967295u) & _3016;
                            uint _3029 = _3027 * 40u;
                            _3042 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3029)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 3u)).x));
                            _3043 = _3042.w;
                            uint _3045 = (_3027 * 40u) + 4u;
                            _3058 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3045)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 3u)).x));
                            uint _3060 = (_3027 * 40u) + 8u;
                            _3070 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3060)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 2u)).x));
                            uint _3072 = (_3027 * 40u) + 16u;
                            _3085 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3072)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 3u)).x));
                            uint _3087 = (_3027 * 40u) + 20u;
                            _3100 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3087)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 3u)).x));
                            uint _3103 = (_3027 * 40u) + 24u;
                            vec4 _3116 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3103)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 3u)).x));
                            uint _3122 = (_3027 * 40u) + 28u;
                            vec4 _3135 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3122)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 3u)).x));
                            _3147 = fma(_2363, _3135.z, fma(_2362, _3135.y, _3135.x * _2361)) + _3135.w;
                            _3148 = !((fma(_2363, _3116.z, fma(_2362, _3116.y, _3116.x * _2361)) + _3116.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3148)
                            {
                                float _3175 = _3042.x - _2361;
                                float _3176 = _3042.y - _2362;
                                float _3177 = _3042.z - _2363;
                                float _3178 = dot(vec3(_3175, _3176, _3177), vec3(_3175, _3176, _3177));
                                float _3181 = inversesqrt(_3178);
                                float _3182 = _3181 * _3175;
                                float _3183 = _3181 * _3176;
                                float _3184 = _3181 * _3177;
                                float _3188 = 1.0 - (_3178 / (_3043 * _3043));
                                float _4246 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0));
                                float _3189 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
                                float _3193 = sqrt(_3178) * _3058.w;
                                float _3195 = 1.39999997615814208984375 / (_3193 + 1.39999997615814208984375);
                                float _3196 = _3195 * _3195;
                                float _3199 = ((1.0 - _3196) * dot(vec3(_3182, _3183, _3184), vec3(_665, _668, _671))) + _3196;
                                float _3202 = _3193 * _3193;
                                float _3206 = (fma(_2363, _3085.z, fma(_2362, _3085.y, _3085.x * _2361)) + _3085.w) / _3147;
                                float _3207 = (fma(_2363, _3100.z, fma(_2362, _3100.y, _3100.x * _2361)) + _3100.w) / _3147;
                                float _3211 = 1.0 - dot(vec2(_3206, _3207), vec2(_3206, _3207));
                                float _4262 = isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : max(_3211, 0.0));
                                float _3212 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
                                float _3213 = _3212 * (((isnan(0.0) ? _3199 : (isnan(_3199) ? 0.0 : max(_3199, 0.0))) * _3189) / ((_3202 * 0.699999988079071044921875) + 1.0));
                                float _3225 = exp2(log2(1.0 / ((_3202 * 3.5) + 5.0)) * 0.25);
                                float _3226 = 1.0 - _725;
                                float _3233 = sqrt(1.0 - ((1.0 - (_3226 * _3226)) * (1.0 - (_3225 * _3225))));
                                float _3234 = _3233 * _3233;
                                float _3235 = _3234 * _3234;
                                float _3236 = _3182 - _2684;
                                float _3237 = _3183 - _2685;
                                float _3238 = _3184 - _2686;
                                float _3242 = inversesqrt(dot(vec3(_3236, _3237, _3238), vec3(_3236, _3237, _3238)));
                                float _3246 = dot(vec3(_665, _668, _671), vec3((-0.0) - _2684, (-0.0) - _2685, (-0.0) - _2686));
                                float _4273 = isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0));
                                float _3249 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
                                float _3250 = dot(vec3(_665, _668, _671), vec3(_3242 * _3236, _3242 * _3237, _3242 * _3238));
                                float _4284 = isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0));
                                float _3253 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
                                float _3257 = ((_3253 * _3253) * (_3235 + (-1.0))) + 1.0;
                                float _3258 = _3195 * _3234;
                                float _3259 = _3258 * _3258;
                                float _3265 = ((1.0 - _3259) * dot(vec3(_665, _668, _671), vec3(_3182, _3183, _3184))) + _3259;
                                float _4295 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0));
                                float _3266 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
                                float _3267 = 1.0 - _3234;
                                float _3277 = (0.5 / (((_3266 * ((_3249 * _3267) + _3234)) + 9.9999999392252902907785028219223e-09) + (((_3266 * _3267) + _3234) * _3249))) * _3266;
                                float _4306 = isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0));
                                float _3287 = (_3212 * _3189) * (((_3235 * 3.1415927410125732421875) * (isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0)))) / ((_3257 * _3257) * ((_3202 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3287 * _3070.x;
                                frontier_phi_73_pred_1 = _3287 * _3070.y;
                                frontier_phi_73_pred_2 = _3213 * _3058.z;
                                frontier_phi_73_pred_3 = _3213 * _3058.y;
                                frontier_phi_73_pred_4 = _3213 * _3058.x;
                                frontier_phi_73_pred_5 = _3287 * _3070.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3291 = frontier_phi_73_pred;
                            _3292 = frontier_phi_73_pred_1;
                            _3296 = frontier_phi_73_pred_2;
                            _3295 = frontier_phi_73_pred_3;
                            _3294 = frontier_phi_73_pred_4;
                            _3293 = frontier_phi_73_pred_5;
                            _3000 = _3294 + _3013;
                            _3001 = _3295 + _3014;
                            _3002 = _3296 + _3015;
                            _2997 = _3291 + _3010;
                            _2998 = _3292 + _3011;
                            _2999 = _3293 + _3012;
                            if (_3017 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3010 = _2997;
                                _3011 = _2998;
                                _3012 = _2999;
                                _3013 = _3000;
                                _3014 = _3001;
                                _3015 = _3002;
                                _3016 = _3017;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3000;
                        frontier_phi_67_pred_1 = _3001;
                        frontier_phi_67_pred_2 = _3002;
                        frontier_phi_67_pred_3 = _2999;
                        frontier_phi_67_pred_4 = _2998;
                        frontier_phi_67_pred_5 = _2997;
                    }
                    _2665 = frontier_phi_67_pred;
                    _2667 = frontier_phi_67_pred_1;
                    _2669 = frontier_phi_67_pred_2;
                    _2663 = frontier_phi_67_pred_3;
                    _2661 = frontier_phi_67_pred_4;
                    _2659 = frontier_phi_67_pred_5;
                    uint _2804 = _2803 + 1u;
                    if (_2804 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2797 = _2659;
                        _2798 = _2661;
                        _2799 = _2663;
                        _2800 = _2665;
                        _2801 = _2667;
                        _2802 = _2669;
                        _2803 = _2804;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2667;
                frontier_phi_55_56_ladder_1 = _2669;
                frontier_phi_55_56_ladder_2 = _2665;
                frontier_phi_55_56_ladder_3 = _2663;
                frontier_phi_55_56_ladder_4 = _2661;
                frontier_phi_55_56_ladder_5 = _2659;
            }
            else
            {
                frontier_phi_55_56_ladder = _2545;
                frontier_phi_55_56_ladder_1 = _2547;
                frontier_phi_55_56_ladder_2 = _2543;
                frontier_phi_55_56_ladder_3 = _2541;
                frontier_phi_55_56_ladder_4 = _2539;
                frontier_phi_55_56_ladder_5 = _2537;
            }
            _2658 = frontier_phi_55_56_ladder_5;
            _2660 = frontier_phi_55_56_ladder_4;
            _2662 = frontier_phi_55_56_ladder_3;
            _2664 = frontier_phi_55_56_ladder_2;
            _2666 = frontier_phi_55_56_ladder;
            _2668 = frontier_phi_55_56_ladder_1;
        }
        float _2673 = isnan(1.0) ? _709 : (isnan(_709) ? 1.0 : min(_709, 1.0));
        _2420 = (_2673 * _2664) + _1875;
        _2422 = (_2673 * _2666) + _1877;
        _2424 = (_2673 * _2668) + _1879;
        _2426 = ((_2658 * 0.039999999105930328369140625) * _2673) + _2205;
        _2428 = ((_2660 * 0.039999999105930328369140625) * _2673) + _2207;
        _2430 = ((_2662 * 0.039999999105930328369140625) * _2673) + _2209;
    }
    else
    {
        _2420 = _1875;
        _2422 = _1877;
        _2424 = _1879;
        _2426 = _2205;
        _2428 = _2207;
        _2430 = _2209;
    }
    uint _2436 = _685 + uint(cbMatDynParam._m0[0u].w);
    float _2442 = ((((((_471.x - _468) * _404) + _468) * cbMtdParam._m0[13u].x) + ((((_425.x - _422) * _404) + _422) * cbMtdParam._m0[11u].x)) * _286) * cbInstanceData._m0[_2436].x;
    float _2443 = ((((((_471.y - _469) * _404) + _469) * cbMtdParam._m0[13u].y) + ((((_425.y - _423) * _404) + _423) * cbMtdParam._m0[11u].y)) * _286) * cbInstanceData._m0[_2436].y;
    float _2444 = ((((((_471.z - _470) * _404) + _470) * cbMtdParam._m0[13u].z) + ((((_425.z - _424) * _404) + _424) * cbMtdParam._m0[11u].z)) * _286) * cbInstanceData._m0[_2436].z;
    float _4322 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _4333 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _4344 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _2461 = (((isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0))) * (_2420 + ((isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0))) * _709))) + ((_2426 + ((isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0))) * _1515)) * cbPerFrame._m0[3u].x)) + _2442;
    float _2463 = (_2443 + ((_2428 + ((isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0))) * _1515)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0))) * (_2422 + ((isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0))) * _709)));
    float _2465 = (_2444 + ((_2430 + ((isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0))) * _1515)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0))) * (_2424 + ((isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0))) * _709)));
    float _4370 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2478 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
    uint _2479 = _684 + 6u;
    float _2487 = _643 / cbSceneParam._m0[86u].x;
    float _2488 = _644 / cbSceneParam._m0[86u].y;
    vec4 _2502 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2487, _2488, (log2((isnan(cbSceneParam._m0[77u].w) ? _577 : (isnan(_577) ? cbSceneParam._m0[77u].w : min(_577, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2504 = _2502.x;
    float _2505 = _2502.y;
    float _2506 = _2502.z;
    float _2507 = _2502.w;
    float _2599;
    float _2601;
    float _2603;
    float _2605;
    if (_577 > cbSceneParam._m0[78u].w)
    {
        float _2562 = isnan(_577) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _577 : min(cbSceneParam._m0[80u].w, _577));
        float _2563 = _2562 / _577;
        float _2574 = _2563 * _628;
        float _2575 = _629 * _2563;
        float _2576 = (-0.0) - _2575;
        float _2577 = _2563 * _630;
        float _2579 = (cbSceneParam._m0[77u].w * _2576) / _2562;
        float _2580 = _2579 + cbSceneParam._m0[79u].w;
        float _2581 = cbSceneParam._m0[79u].w - _2575;
        float _2587 = sqrt(((_2574 * _2574) + (_2575 * _2575)) + (_2577 * _2577));
        float _2590 = (1.0 - (cbSceneParam._m0[77u].w / _2562)) * _2587;
        float _2595 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2597 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2759;
        if (abs((_2576 - _2579) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2759 = ((((_2580 > 0.0) ? exp2(_2595 * _2580) : (2.0 - exp2(_2597 * _2580))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2590;
        }
        else
        {
            float _2719 = 1.0 / cbSceneParam._m0[80u].x;
            float _2720 = isnan(_2581) ? _2580 : (isnan(_2580) ? _2581 : max(_2580, _2581));
            float _2721 = isnan(_2581) ? _2580 : (isnan(_2580) ? _2581 : min(_2580, _2581));
            float _2730 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : min(_2720, 0.0));
            float _2731 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : min(_2721, 0.0));
            _2759 = ((abs(_2587 / _2576) * cbSceneParam._m0[80u].y) * ((((_2730 - _2731) * 2.0) - ((exp2(_2595 * (isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0)))) - exp2(_2595 * (isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0))))) * _2719)) - ((exp2(_2597 * _2730) - exp2(_2597 * _2731)) * _2719))) + (_2590 * cbSceneParam._m0[80u].z);
        }
        vec4 _2761 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2487, _2488, 1.0), 0.0);
        float _2770 = exp2((_2759 * (-1.44269502162933349609375)) * (1.0 - _2761.w));
        float _2771 = log2(_2770);
        float _2787 = log2(_2507);
        _2599 = (exp2(_2787 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2771 * cbSceneParam._m0[78u].x)) * _2761.x) / cbSceneParam._m0[78u].x)) + _2504;
        _2601 = (exp2(_2787 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2771 * cbSceneParam._m0[78u].y)) * _2761.y) / cbSceneParam._m0[78u].y)) + _2505;
        _2603 = (exp2(_2787 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2771 * cbSceneParam._m0[78u].z)) * _2761.z) / cbSceneParam._m0[78u].z)) + _2506;
        _2605 = _2770 * _2507;
    }
    else
    {
        _2599 = _2504;
        _2601 = _2505;
        _2603 = _2506;
        _2605 = _2507;
    }
    float _2617 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2618 = _2617 == 3.0;
    float _2619 = log2(_2605);
    float _2623 = exp2(_2619 * cbSceneParam._m0[78u].x);
    float _2624 = exp2(_2619 * cbSceneParam._m0[78u].y);
    float _2625 = exp2(_2619 * cbSceneParam._m0[78u].z);
    float _2626 = _2623 * (isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0)));
    float _2627 = _2624 * (isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0)));
    float _2628 = _2625 * (isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0)));
    float _2637 = (_2617 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2637 * (_2618 ? _2626 : (_2626 + (cbSceneParam._m0[72u].w * _2599)));
    SV_Target.y = _2637 * (_2618 ? _2627 : (_2627 + (cbSceneParam._m0[72u].w * _2601)));
    SV_Target.z = _2637 * (_2618 ? _2628 : (_2628 + (cbSceneParam._m0[72u].w * _2603)));
    SV_Target.w = cbInstanceData._m0[_2479].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2442) * _2478) * _2623) * _2637;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2443) * _2478) * _2624) * _2637;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2444) * _2478) * _2625) * _2637;
    SV_Target_1.w = cbInstanceData._m0[_2479].w;
}


