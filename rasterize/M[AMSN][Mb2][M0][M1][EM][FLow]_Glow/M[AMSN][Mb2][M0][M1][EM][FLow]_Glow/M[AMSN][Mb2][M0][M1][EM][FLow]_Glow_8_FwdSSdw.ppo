#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1117;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _197 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _198 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _199 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _205 = inversesqrt(dot(vec3(_197, _198, _199), vec3(_197, _198, _199)));
    float _212 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _219 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _241 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _247 = _241.x * cbMtdParam._m0[9u].x;
    float _248 = _241.y * cbMtdParam._m0[9u].y;
    float _249 = _241.z * cbMtdParam._m0[9u].z;
    vec4 _266 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _287 = TEXCOORD_9.x - ((cbMtdParam._m0[16u].y * (1.0 - TEXCOORD_9.x)) * (_266.x + 0.00999999977648258209228515625));
    float _289 = _287 * (cbMtdParam._m0[16u].z + 1.0);
    float _3507 = isnan(0.0) ? _289 : (isnan(_289) ? 0.0 : max(_289, 0.0));
    float _290 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
    float _298 = ((((cbMtdParam._m0[12u].x - _247) * TEXCOORD_9.x) * cbMtdParam._m0[16u].x) * _290) + _247;
    float _299 = ((((cbMtdParam._m0[12u].y - _248) * TEXCOORD_9.y) * cbMtdParam._m0[16u].x) * _290) + _248;
    float _300 = (((cbMtdParam._m0[16u].x * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _249)) * _290) + _249;
    vec4 _313 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[6u].w));
    float _315 = _313.x;
    vec4 _327 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _331 = _327.z;
    float _335 = (_327.x * 2.0) + (-1.0);
    float _337 = (_327.y * 2.0) + (-1.0);
    float _338 = dot(vec2(_335, _337), vec2(_335, _337));
    float _3518 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _343 = sqrt(1.0 - (isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0))));
    float _349 = _287 * (cbMtdParam._m0[16u].y + 1.0);
    float _3529 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _353 = ((cbMtdParam._m0[15u].y - _331) * (isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0)))) + _331;
    float _366 = (cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _367 = (cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _394 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * ((cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * ((cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[10u].w));
    float _399 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[15u].w;
    float _406 = ((_394.y * 0.5) + (-0.25)) * cbMtdParam._m0[15u].z;
    float _408 = (-0.0) - (cbMtdParam._m0[15u].z * ((_394.x * 0.5) + (-0.25)));
    float _410 = fract(_399);
    float _412 = fract(_399 + 0.5);
    float _413 = _410 * _408;
    float _414 = _406 * _410;
    float _417 = _412 * _408;
    float _418 = _406 * _412;
    float _423 = abs((_410 * 2.0) + (-1.0));
    vec4 _439 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_413 + _366) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_414 + _367) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _441 = _439.x;
    float _442 = _439.y;
    float _443 = _439.z;
    vec4 _444 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_417 + _366) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_418 + _367) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _471 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _472 = (cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _485 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_413 + _471) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_414 + _472) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _487 = _485.x;
    float _488 = _485.y;
    float _489 = _485.z;
    vec4 _490 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_417 + _471) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_418 + _472) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    vec4 _534 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[16u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, (((cbMtdParam._m0[17u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w));
    float _540 = (_534.x * 2.0) + (-1.0);
    float _541 = (_534.y * 2.0) + (-1.0);
    float _542 = dot(vec2(_540, _541), vec2(_540, _541));
    float _3540 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _558 = (_290 * (((cbMtdParam._m0[14u].z * _335) - _335) + _540)) + _335;
    float _559 = (_290 * (((cbMtdParam._m0[14u].z * _337) - _337) + _541)) + _337;
    float _560 = (_290 * (sqrt(1.0 - (isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0)))) - _343)) + _343;
    float _563 = fma(_560, _212 * NORMAL.x, fma(_559, _219 * TANGENT.x, (_205 * _197) * _558));
    float _566 = fma(_560, _212 * NORMAL.y, fma(_559, _219 * TANGENT.y, (_205 * _198) * _558));
    float _569 = fma(_560, _212 * NORMAL.z, fma(_559, _219 * TANGENT.z, (_205 * _199) * _558));
    float _573 = inversesqrt(dot(vec3(_563, _566, _569), vec3(_563, _566, _569)));
    float _574 = _573 * _563;
    float _575 = _573 * _566;
    float _576 = _573 * _569;
    float _3551 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _577 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
    float _3562 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _3573 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _3584 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    float _3595 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _581 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
    float _597 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _638 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _648 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _638);
    float _649 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _638);
    float _650 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _638);
    float _654 = inversesqrt(dot(vec3(_648, _649, _650), vec3(_648, _649, _650)));
    float _655 = _648 * _654;
    float _656 = _649 * _654;
    float _657 = _650 * _654;
    float _663 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _664 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _684 = fma(_576, cbSceneParam._m0[5u].z, fma(_575, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _574));
    float _687 = fma(_576, cbSceneParam._m0[6u].z, fma(_575, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _574));
    float _690 = fma(_576, cbSceneParam._m0[7u].z, fma(_575, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _574));
    uint _703 = uint(roundEven(NORMAL.w)) * 13u;
    uint _704 = _703 + 9u;
    uint _705 = _704 + uint(cbMatDynParam._m0[0u].w);
    float _711 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0)))) * cbInstanceData._m0[_705].x;
    float _712 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0)))) * cbInstanceData._m0[_705].y;
    float _713 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0)))) * cbInstanceData._m0[_705].z;
    float _3606 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _714 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
    float _3617 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _715 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
    float _3628 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _716 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
    float _717 = 1.0 - _581;
    float _718 = _714 * _717;
    float _719 = _715 * _717;
    float _720 = _716 * _717;
    float _725 = (_714 + (-0.039999999105930328369140625)) * _581;
    float _726 = (_715 + (-0.039999999105930328369140625)) * _581;
    float _727 = (_716 + (-0.039999999105930328369140625)) * _581;
    float _728 = _725 + 0.039999999105930328369140625;
    float _730 = _726 + 0.039999999105930328369140625;
    float _731 = _727 + 0.039999999105930328369140625;
    vec4 _740 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _663, cbSceneParam._m0[86u].y * _664));
    float _743 = _740.x * TEXCOORD_3.w;
    float _744 = dot(vec3(_574, _575, _576), vec3(_655, _656, _657));
    float _747 = _744 * 2.0;
    float _751 = (_747 * _574) - _655;
    float _752 = (_747 * _575) - _656;
    float _753 = (_747 * _576) - _657;
    float _757 = abs(dot(vec3(_655, _656, _657), vec3(_574, _575, _576)));
    float _3639 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _759 = sqrt(_577);
    float _772 = exp2((_759 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_759 * 3.0));
    float _778 = (1.0 - _772) * ((_759 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _779 = _772 * _759;
    float _807 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _811 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _815 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1116;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _842 = fma(_815, cbModelParam._m0[26u].z, fma(_811, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _807));
        float _846 = fma(_815, cbModelParam._m0[27u].z, fma(_811, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _807));
        float _850 = fma(_815, cbModelParam._m0[28u].z, fma(_811, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _807));
        float _874 = _807 + _574;
        float _875 = _811 + _575;
        float _876 = _815 + _576;
        float _886 = fma(_876, cbModelParam._m0[26u].z, fma(_875, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _874)) - _842;
        float _887 = fma(_876, cbModelParam._m0[27u].z, fma(_875, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _874)) - _846;
        float _888 = fma(_876, cbModelParam._m0[28u].z, fma(_875, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _874)) - _850;
        float _892 = inversesqrt(dot(vec3(_886, _887, _888), vec3(_886, _887, _888)));
        float _905 = ((_892 * _886) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_842 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _906 = ((_892 * _887) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_846 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _907 = ((_892 * _888) / cbModelParam._m0[34u].z) + ((((((_850 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _910 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_905, _906, _907), 0.0);
        vec4 _917 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_905, _906, _907), 0.0);
        vec4 _924 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_905, _906, _907), 0.0);
        vec4 _931 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_905, _906, _907), 0.0);
        float _944 = exp2((_910.w + (-0.5)) * 20.0) * 2.0;
        float _945 = _944 * (_910.x + (-0.5));
        float _946 = _944 * (_910.y + (-0.5));
        float _947 = _944 * (_910.z + (-0.5));
        float _954 = exp2((_917.w + (-0.5)) * 20.0) * 2.0;
        float _955 = _954 * (_917.x + (-0.5));
        float _956 = _954 * (_917.y + (-0.5));
        float _957 = _954 * (_917.z + (-0.5));
        float _964 = exp2((_924.w + (-0.5)) * 20.0) * 2.0;
        float _965 = _964 * (_924.x + (-0.5));
        float _966 = _964 * (_924.y + (-0.5));
        float _967 = _964 * (_924.z + (-0.5));
        float _974 = exp2((_931.w + (-0.5)) * 20.0) * 2.0;
        float _975 = _974 * (_931.x + (-0.5));
        float _976 = _974 * (_931.y + (-0.5));
        float _977 = _974 * (_931.z + (-0.5));
        float _978 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _979 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _980 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _981 = _945 * 0.5;
        float _982 = _955 * 0.5;
        float _983 = _965 * 0.5;
        float _984 = dot(vec3(_981, _982, _983), vec3(_981, _982, _983));
        float _989 = (_984 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_984);
        float _998 = (dot(vec3(_574, _575, _576), vec3(_989 * _981, _989 * _982, _989 * _983)) + 1.0) * 0.5;
        float _3665 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _1008 = sqrt(((_982 * _982) + (_981 * _981)) + (_983 * _983)) / (_978 + 9.9999997473787516355514526367188e-06);
        float _3676 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1009 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
        float _1010 = _1009 * 2.0;
        float _1014 = (1.0 - _1009) / (_1009 + 1.0);
        float _3687 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1015 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
        float _1024 = ((((1.0 - _1015) * (_1010 + 2.0)) * exp2(log2(isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0))) * (_1010 + 1.0))) + _1015) * _978;
        float _1025 = _946 * 0.5;
        float _1026 = _956 * 0.5;
        float _1027 = _966 * 0.5;
        float _1028 = dot(vec3(_1025, _1026, _1027), vec3(_1025, _1026, _1027));
        float _1033 = (_1028 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1028);
        float _1041 = (dot(vec3(_574, _575, _576), vec3(_1033 * _1025, _1033 * _1026, _1033 * _1027)) + 1.0) * 0.5;
        float _3698 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1050 = sqrt(((_1026 * _1026) + (_1025 * _1025)) + (_1027 * _1027)) / (_979 + 9.9999997473787516355514526367188e-06);
        float _3709 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1051 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _1052 = _1051 * 2.0;
        float _1056 = (1.0 - _1051) / (_1051 + 1.0);
        float _3720 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1057 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
        float _1066 = ((((1.0 - _1057) * (_1052 + 2.0)) * exp2(log2(isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0))) * (_1052 + 1.0))) + _1057) * _979;
        float _1067 = _947 * 0.5;
        float _1068 = _957 * 0.5;
        float _1069 = _967 * 0.5;
        float _1070 = dot(vec3(_1067, _1068, _1069), vec3(_1067, _1068, _1069));
        float _1075 = (_1070 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1070);
        float _1083 = (dot(vec3(_574, _575, _576), vec3(_1075 * _1067, _1075 * _1068, _1075 * _1069)) + 1.0) * 0.5;
        float _3731 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1092 = sqrt(((_1068 * _1068) + (_1067 * _1067)) + (_1069 * _1069)) / (_980 + 9.9999997473787516355514526367188e-06);
        float _3742 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _1094 = _1093 * 2.0;
        float _1098 = (1.0 - _1093) / (_1093 + 1.0);
        float _3753 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
        float _1108 = ((((1.0 - _1099) * (_1094 + 2.0)) * exp2(log2(isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0))) * (_1094 + 1.0))) + _1099) * _980;
        _1116 = _947;
        _1118 = _946;
        _1119 = _945;
        _1120 = _957;
        _1121 = _956;
        _1122 = _955;
        _1123 = _967;
        _1124 = _966;
        _1125 = _965;
        _1126 = _980;
        _1127 = _979;
        _1128 = _978;
        _1129 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0)));
        _1130 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0)));
        _1131 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0)));
    }
    else
    {
        _1116 = _1117;
        _1118 = _1117;
        _1119 = _1117;
        _1120 = _1117;
        _1121 = _1117;
        _1122 = _1117;
        _1123 = _1117;
        _1124 = _1117;
        _1125 = _1117;
        _1126 = _1117;
        _1127 = _1117;
        _1128 = _1117;
        _1129 = 0.0;
        _1130 = 0.0;
        _1131 = 0.0;
    }
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1157 = fma(_815, cbModelParam._m0[30u].z, fma(_811, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _807));
        float _1161 = fma(_815, cbModelParam._m0[31u].z, fma(_811, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _807));
        float _1165 = fma(_815, cbModelParam._m0[32u].z, fma(_811, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _807));
        float _1188 = _807 + _574;
        float _1189 = _811 + _575;
        float _1190 = _815 + _576;
        float _1200 = fma(_1190, cbModelParam._m0[30u].z, fma(_1189, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1188)) - _1157;
        float _1201 = fma(_1190, cbModelParam._m0[31u].z, fma(_1189, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1188)) - _1161;
        float _1202 = fma(_1190, cbModelParam._m0[32u].z, fma(_1189, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1188)) - _1165;
        float _1206 = inversesqrt(dot(vec3(_1200, _1201, _1202), vec3(_1200, _1201, _1202)));
        float _1219 = ((_1206 * _1200) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1157 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1220 = ((_1206 * _1201) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1161 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1221 = ((_1206 * _1202) / cbModelParam._m0[35u].z) + ((((((_1165 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1223 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1219, _1220, _1221), 0.0);
        vec4 _1230 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1219, _1220, _1221), 0.0);
        vec4 _1237 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1219, _1220, _1221), 0.0);
        vec4 _1244 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1219, _1220, _1221), 0.0);
        float _1256 = exp2((_1223.w + (-0.5)) * 20.0) * 2.0;
        float _1257 = _1256 * (_1223.x + (-0.5));
        float _1258 = _1256 * (_1223.y + (-0.5));
        float _1259 = _1256 * (_1223.z + (-0.5));
        float _1266 = exp2((_1230.w + (-0.5)) * 20.0) * 2.0;
        float _1267 = _1266 * (_1230.x + (-0.5));
        float _1268 = _1266 * (_1230.y + (-0.5));
        float _1269 = _1266 * (_1230.z + (-0.5));
        float _1276 = exp2((_1237.w + (-0.5)) * 20.0) * 2.0;
        float _1277 = _1276 * (_1237.x + (-0.5));
        float _1278 = _1276 * (_1237.y + (-0.5));
        float _1279 = _1276 * (_1237.z + (-0.5));
        float _1286 = exp2((_1244.w + (-0.5)) * 20.0) * 2.0;
        float _1287 = _1286 * (_1244.x + (-0.5));
        float _1288 = _1286 * (_1244.y + (-0.5));
        float _1289 = _1286 * (_1244.z + (-0.5));
        float _1290 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1291 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1292 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1293 = _1257 * 0.5;
        float _1294 = _1267 * 0.5;
        float _1295 = _1277 * 0.5;
        float _1296 = dot(vec3(_1293, _1294, _1295), vec3(_1293, _1294, _1295));
        float _1301 = (_1296 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1296);
        float _1309 = (dot(vec3(_574, _575, _576), vec3(_1301 * _1293, _1301 * _1294, _1301 * _1295)) + 1.0) * 0.5;
        float _3794 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1318 = sqrt(((_1294 * _1294) + (_1293 * _1293)) + (_1295 * _1295)) / (_1290 + 9.9999997473787516355514526367188e-06);
        float _3805 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1319 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
        float _1320 = _1319 * 2.0;
        float _1324 = (1.0 - _1319) / (_1319 + 1.0);
        float _3816 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _1334 = ((((1.0 - _1325) * (_1320 + 2.0)) * exp2(log2(isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) * (_1320 + 1.0))) + _1325) * _1290;
        float _1335 = _1258 * 0.5;
        float _1336 = _1268 * 0.5;
        float _1337 = _1278 * 0.5;
        float _1338 = dot(vec3(_1335, _1336, _1337), vec3(_1335, _1336, _1337));
        float _1343 = (_1338 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1338);
        float _1351 = (dot(vec3(_574, _575, _576), vec3(_1343 * _1335, _1343 * _1336, _1343 * _1337)) + 1.0) * 0.5;
        float _3827 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1360 = sqrt(((_1336 * _1336) + (_1335 * _1335)) + (_1337 * _1337)) / (_1291 + 9.9999997473787516355514526367188e-06);
        float _3838 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
        float _1362 = _1361 * 2.0;
        float _1366 = (1.0 - _1361) / (_1361 + 1.0);
        float _3849 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _1376 = ((((1.0 - _1367) * (_1362 + 2.0)) * exp2(log2(isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0))) * (_1362 + 1.0))) + _1367) * _1291;
        float _1377 = _1259 * 0.5;
        float _1378 = _1269 * 0.5;
        float _1379 = _1279 * 0.5;
        float _1380 = dot(vec3(_1377, _1378, _1379), vec3(_1377, _1378, _1379));
        float _1385 = (_1380 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1380);
        float _1393 = (dot(vec3(_574, _575, _576), vec3(_1385 * _1377, _1385 * _1378, _1385 * _1379)) + 1.0) * 0.5;
        float _3860 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1402 = sqrt(((_1378 * _1378) + (_1377 * _1377)) + (_1379 * _1379)) / (_1292 + 9.9999997473787516355514526367188e-06);
        float _3871 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1403 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _1404 = _1403 * 2.0;
        float _1408 = (1.0 - _1403) / (_1403 + 1.0);
        float _3882 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1409 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _1418 = ((((1.0 - _1409) * (_1404 + 2.0)) * exp2(log2(isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0))) * (_1404 + 1.0))) + _1409) * _1292;
        _1426 = _1259;
        _1427 = _1258;
        _1428 = _1257;
        _1429 = _1269;
        _1430 = _1268;
        _1431 = _1267;
        _1432 = _1279;
        _1433 = _1278;
        _1434 = _1277;
        _1435 = _1292;
        _1436 = _1291;
        _1437 = _1290;
        _1438 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0)));
        _1439 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0)));
        _1440 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0)));
    }
    else
    {
        _1426 = _1117;
        _1427 = _1117;
        _1428 = _1117;
        _1429 = _1117;
        _1430 = _1117;
        _1431 = _1117;
        _1432 = _1117;
        _1433 = _1117;
        _1434 = _1117;
        _1435 = _1117;
        _1436 = _1117;
        _1437 = _1117;
        _1438 = 0.0;
        _1439 = 0.0;
        _1440 = 0.0;
    }
    float _1450 = (cbModelParam._m0[1u].x * (_1438 - _1129)) + _1129;
    float _1451 = (cbModelParam._m0[1u].x * (_1439 - _1130)) + _1130;
    float _1452 = (cbModelParam._m0[1u].x * (_1440 - _1131)) + _1131;
    float _1473 = fma(_1452, cbSceneParam._m0[89u].z, fma(_1451, cbSceneParam._m0[89u].y, _1450 * cbSceneParam._m0[89u].x));
    float _1476 = fma(_1452, cbSceneParam._m0[90u].z, fma(_1451, cbSceneParam._m0[90u].y, _1450 * cbSceneParam._m0[90u].x));
    float _1479 = fma(_1452, cbSceneParam._m0[91u].z, fma(_1451, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1450));
    float _1494 = _751 * 0.5;
    float _1495 = _752 * 0.5;
    float _1496 = _753 * 0.5;
    float _1497 = dot(vec4(_1494, _1495, _1496, 1.0), vec4(_1428, _1431, _1434, _1437));
    float _1500 = dot(vec4(_1494, _1495, _1496, 1.0), vec4(_1427, _1430, _1433, _1436));
    float _1503 = dot(vec4(_1494, _1495, _1496, 1.0), vec4(_1426, _1429, _1432, _1435));
    float _1537;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1510 = dot(vec4(_1494, _1495, _1496, 1.0), vec4(_1116, _1120, _1123, _1126));
        float _1514 = dot(vec4(_1494, _1495, _1496, 1.0), vec4(_1118, _1121, _1124, _1127));
        float _1518 = dot(vec4(_1494, _1495, _1496, 1.0), vec4(_1119, _1122, _1125, _1128));
        float _1525 = dot(vec4(cbModelParam._m0[39u]), vec4(_1494, _1495, _1496, 1.0));
        _1537 = dot(vec3(isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0)), isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0)), isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1525) ? 0.0 : (isnan(0.0) ? _1525 : max(0.0, _1525))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1537 = 1.0;
    }
    float _1548;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1539 = dot(vec4(cbModelParam._m0[40u]), vec4(_1494, _1495, _1496, 1.0));
        _1548 = dot(vec3(isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0)), isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0)), isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1539) ? 0.0 : (isnan(0.0) ? _1539 : max(0.0, _1539))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1548 = 1.0;
    }
    float _1552 = (_1548 * cbModelParam._m0[1u].x) + (_1537 * (1.0 - cbModelParam._m0[1u].x));
    float _1562 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _577);
    float _1563 = isnan(_1562) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1562 : min(cbModelParam._m0[25u].z, _1562));
    float _1643;
    float _1645;
    float _1647;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1610 = fma(_815, cbModelParam._m0[13u].z, fma(_811, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _807)) + cbModelParam._m0[13u].w;
        float _1614 = fma(_815, cbModelParam._m0[14u].z, fma(_811, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _807)) + cbModelParam._m0[14u].w;
        float _1618 = fma(_815, cbModelParam._m0[15u].z, fma(_811, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _807)) + cbModelParam._m0[15u].w;
        float _1621 = fma(_753, cbModelParam._m0[13u].z, fma(_752, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _751));
        float _1624 = fma(_753, cbModelParam._m0[14u].z, fma(_752, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _751));
        float _1627 = fma(_753, cbModelParam._m0[15u].z, fma(_752, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _751));
        float _1655;
        if (_1621 > 0.0)
        {
            _1655 = abs((1.0 - _1610) / _1621);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1621 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1610 + 1.0) / _1621);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1655 = frontier_phi_14_12_ladder;
        }
        float _1880;
        if (_1624 > 0.0)
        {
            _1880 = abs((1.0 - _1614) / _1624);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1624 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1614 + 1.0) / _1624);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1880 = frontier_phi_23_19_ladder;
        }
        float _2137;
        if (_1627 > 0.0)
        {
            _2137 = abs((1.0 - _1618) / _1627);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1627 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1618 + 1.0) / _1627);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2137 = frontier_phi_35_30_ladder;
        }
        float _2139 = isnan(_1880) ? _1655 : (isnan(_1655) ? _1880 : min(_1655, _1880));
        float _2140 = isnan(_2137) ? _2139 : (isnan(_2139) ? _2137 : min(_2139, _2137));
        float _2144 = (_2140 * _1621) + _1610;
        float _2145 = (_2140 * _1624) + _1614;
        float _2146 = (_2140 * _1627) + _1618;
        float _2147 = _2140 * 9.9999997473787516355514526367188e-05;
        float _2149 = (-1.0) - _2147;
        float _2151 = _2147 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2146 > _2151) || ((_2146 < _2149) || ((_2145 > _2151) || ((_2145 < _2149) || ((_2144 < _2149) || (_2144 > _2151))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2274 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2146, cbModelParam._m0[9u].z, fma(_2145, cbModelParam._m0[9u].y, _2144 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2146, cbModelParam._m0[10u].z, fma(_2145, cbModelParam._m0[10u].y, _2144 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2146, cbModelParam._m0[11u].z, fma(_2145, cbModelParam._m0[11u].y, _2144 * cbModelParam._m0[11u].x))), _1563);
            frontier_phi_13_35_ladder = _2274.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2274.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2274.x * cbModelParam._m0[1u].y;
        }
        _1643 = frontier_phi_13_35_ladder_2;
        _1645 = frontier_phi_13_35_ladder_1;
        _1647 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1631 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_751, _752, _753), _1563);
        _1643 = _1631.x * cbModelParam._m0[1u].y;
        _1645 = _1631.y * cbModelParam._m0[1u].y;
        _1647 = _1631.z * cbModelParam._m0[1u].y;
    }
    float _1651 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _577);
    float _1652 = isnan(_1651) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1651 : min(cbModelParam._m0[25u].w, _1651));
    float _1742;
    float _1744;
    float _1746;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1706 = fma(_815, cbModelParam._m0[21u].z, fma(_811, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _807)) + cbModelParam._m0[21u].w;
        float _1710 = fma(_815, cbModelParam._m0[22u].z, fma(_811, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _807)) + cbModelParam._m0[22u].w;
        float _1714 = fma(_815, cbModelParam._m0[23u].z, fma(_811, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _807)) + cbModelParam._m0[23u].w;
        float _1717 = fma(_753, cbModelParam._m0[21u].z, fma(_752, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _751));
        float _1720 = fma(_753, cbModelParam._m0[22u].z, fma(_752, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _751));
        float _1723 = fma(_753, cbModelParam._m0[23u].z, fma(_752, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _751));
        float _1885;
        if (_1717 > 0.0)
        {
            _1885 = abs((1.0 - _1706) / _1717);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1717 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1706 + 1.0) / _1717);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1885 = frontier_phi_25_21_ladder;
        }
        float _2164;
        if (_1720 > 0.0)
        {
            _2164 = abs((1.0 - _1710) / _1720);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1720 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1710 + 1.0) / _1720);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2164 = frontier_phi_37_32_ladder;
        }
        float _2377;
        if (_1723 > 0.0)
        {
            _2377 = abs((1.0 - _1714) / _1723);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1723 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1714 + 1.0) / _1723);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2377 = frontier_phi_46_43_ladder;
        }
        float _2379 = isnan(_2164) ? _1885 : (isnan(_1885) ? _2164 : min(_1885, _2164));
        float _2380 = isnan(_2377) ? _2379 : (isnan(_2379) ? _2377 : min(_2379, _2377));
        float _2384 = (_2380 * _1717) + _1706;
        float _2385 = (_2380 * _1720) + _1710;
        float _2386 = (_2380 * _1723) + _1714;
        float _2387 = _2380 * 9.9999997473787516355514526367188e-05;
        float _2388 = (-1.0) - _2387;
        float _2390 = _2387 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2386 > _2390) || ((_2386 < _2388) || ((_2385 > _2390) || ((_2385 < _2388) || ((_2384 < _2388) || (_2384 > _2390))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2614 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2386, cbModelParam._m0[17u].z, fma(_2385, cbModelParam._m0[17u].y, _2384 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2386, cbModelParam._m0[18u].z, fma(_2385, cbModelParam._m0[18u].y, _2384 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2386, cbModelParam._m0[19u].z, fma(_2385, cbModelParam._m0[19u].y, _2384 * cbModelParam._m0[19u].x))), _1652);
            frontier_phi_22_46_ladder = _2614.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2614.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2614.x * cbModelParam._m0[1u].z;
        }
        _1742 = frontier_phi_22_46_ladder_2;
        _1744 = frontier_phi_22_46_ladder_1;
        _1746 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1726 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_751, _752, _753), _1652);
        _1742 = _1726.x * cbModelParam._m0[1u].z;
        _1744 = _1726.y * cbModelParam._m0[1u].z;
        _1746 = _1726.z * cbModelParam._m0[1u].z;
    }
    float _1759 = (((_778 * _728) + _779) * _743) * ((cbModelParam._m0[1u].w * (_1742 - _1643)) + _1643);
    float _1761 = (((_778 * _730) + _779) * _743) * ((cbModelParam._m0[1u].w * (_1744 - _1645)) + _1645);
    float _1763 = (((_778 * _731) + _779) * _743) * ((cbModelParam._m0[1u].w * (_1746 - _1647)) + _1647);
    float _1766 = fma(_1763, cbSceneParam._m0[89u].z, fma(_1761, cbSceneParam._m0[89u].y, _1759 * cbSceneParam._m0[89u].x));
    float _1769 = fma(_1763, cbSceneParam._m0[90u].z, fma(_1761, cbSceneParam._m0[90u].y, _1759 * cbSceneParam._m0[90u].x));
    float _1772 = fma(_1763, cbSceneParam._m0[91u].z, fma(_1761, cbSceneParam._m0[91u].y, _1759 * cbSceneParam._m0[91u].x));
    vec4 _1780 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_663, _664));
    float _1782 = _1780.w;
    float _1794 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1782);
    float _1795 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1782);
    float _1796 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1782);
    uvec4 _1800 = floatBitsToUint(cbInstanceData._m0[_703 + 5u]);
    uint _1802 = _1800.x * 14u;
    uint _1803 = _1802 + 13u;
    float _1810 = _743 + (-1.0);
    float _1815 = (cbLight._m0[_1803].x * _1810) + 1.0;
    float _1816 = (cbLight._m0[_1803].y * _1810) + 1.0;
    float _1817 = (cbLight._m0[_1803].z * _1810) + 1.0;
    float _1818 = (cbLight._m0[_1803].w * _1810) + 1.0;
    uint _1819 = _1802 + 5u;
    float _1825 = isnan(1.0) ? _1816 : (isnan(_1816) ? 1.0 : min(_1816, 1.0));
    uint _1829 = _1802 + 4u;
    float _1839 = isnan(1.0) ? _1815 : (isnan(_1815) ? 1.0 : min(_1815, 1.0));
    uint _1843 = _1802 | 1u;
    float _1854 = dot(vec3(cbLight._m0[_1802].xyz), vec3(_574, _575, _576));
    float _1857 = dot(vec3(cbLight._m0[_1843].xyz), vec3(_574, _575, _576));
    float _4018 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
    float _4029 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
    float _1862 = (isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * 0.3183098733425140380859375;
    float _1864 = (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) * 0.3183098733425140380859375;
    float _1871 = ((cbLight._m0[_1819].x * _1825) * _1864) + (((cbLight._m0[_1829].x * _1794) * _1839) * _1862);
    float _1872 = ((_1825 * cbLight._m0[_1819].y) * _1864) + (((cbLight._m0[_1829].y * _1795) * _1839) * _1862);
    float _1873 = ((_1825 * cbLight._m0[_1819].z) * _1864) + (((cbLight._m0[_1829].z * _1796) * _1839) * _1862);
    uvec4 _1877 = floatBitsToUint(cbLight._m0[_1802 + 12u]);
    bool _1879 = _1877.x == 0u;
    float _1890;
    float _1892;
    float _1894;
    if (_1879)
    {
        _1890 = _1871;
        _1892 = _1872;
        _1894 = _1873;
    }
    else
    {
        uint _1898 = _1802 + 6u;
        float _1914 = (dot(vec3(cbLight._m0[_1802 + 2u].xyz), vec3(_574, _575, _576)) * 0.5) + 0.5;
        float _1915 = _1914 * _1914;
        float _4040 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
        float _1916 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1917 = isnan(1.0) ? _1817 : (isnan(_1817) ? 1.0 : min(_1817, 1.0));
        _1890 = (((cbLight._m0[_1898].x * 0.3183098733425140380859375) * _1916) * _1917) + _1871;
        _1892 = (((cbLight._m0[_1898].y * 0.3183098733425140380859375) * _1916) * _1917) + _1872;
        _1894 = (((cbLight._m0[_1898].z * 0.3183098733425140380859375) * _1916) * _1917) + _1873;
    }
    bool _1897 = _1877.y == 0u;
    float _1935;
    float _1937;
    float _1939;
    if (_1897)
    {
        _1935 = _1890;
        _1937 = _1892;
        _1939 = _1894;
    }
    else
    {
        uint _2108 = _1802 + 7u;
        float _2124 = (dot(vec3(cbLight._m0[_1802 + 3u].xyz), vec3(_574, _575, _576)) * 0.5) + 0.5;
        float _2125 = _2124 * _2124;
        float _4056 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
        float _2126 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _2127 = isnan(1.0) ? _1818 : (isnan(_1818) ? 1.0 : min(_1818, 1.0));
        _1935 = (((cbLight._m0[_2108].x * 0.3183098733425140380859375) * _2126) * _2127) + _1890;
        _1937 = (((cbLight._m0[_2108].y * 0.3183098733425140380859375) * _2126) * _2127) + _1892;
        _1939 = (((cbLight._m0[_2108].z * 0.3183098733425140380859375) * _2126) * _2127) + _1894;
    }
    uint _1942 = _1802 + 8u;
    float _1955 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1802].w)) * _577) * 0.949999988079071044921875);
    float _1956 = _1955 * _1955;
    float _1957 = cbLight._m0[_1802].x + _655;
    float _1958 = cbLight._m0[_1802].y + _656;
    float _1959 = cbLight._m0[_1802].z + _657;
    float _1963 = inversesqrt(dot(vec3(_1957, _1958, _1959), vec3(_1957, _1958, _1959)));
    float _1964 = _1963 * _1957;
    float _1965 = _1963 * _1958;
    float _1966 = _1963 * _1959;
    float _1967 = dot(vec3(_574, _575, _576), vec3(cbLight._m0[_1802].xyz));
    float _4072 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
    float _1970 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
    float _4083 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _1971 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
    float _1972 = dot(vec3(_574, _575, _576), vec3(_1964, _1965, _1966));
    float _4094 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
    float _1975 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
    float _1976 = dot(vec3(cbLight._m0[_1802].xyz), vec3(_1964, _1965, _1966));
    float _4105 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
    float _1980 = _1956 * _1956;
    float _1984 = ((_1975 * _1975) * (_1980 + (-1.0))) + 1.0;
    float _1992 = exp2(log2(1.0 - (isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0)))) * 5.0);
    float _1993 = 0.959999978542327880859375 - _725;
    float _1995 = 0.959999978542327880859375 - _726;
    float _1996 = 0.959999978542327880859375 - _727;
    float _2003 = 1.0 - _1956;
    float _2014 = (0.5 / (((_1971 * ((_1970 * _2003) + _1956)) + 9.9999999392252902907785028219223e-09) + (((_1971 * _2003) + _1956) * _1970))) * _1970;
    float _4116 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
    float _2016 = (isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))) * (_1980 / ((_1984 * _1984) * 3.141590118408203125));
    uint _2030 = _1802 + 9u;
    float _2041 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1843].w)) * _577) * 0.949999988079071044921875);
    float _2042 = _2041 * _2041;
    float _2043 = cbLight._m0[_1843].x + _655;
    float _2044 = cbLight._m0[_1843].y + _656;
    float _2045 = cbLight._m0[_1843].z + _657;
    float _2049 = inversesqrt(dot(vec3(_2043, _2044, _2045), vec3(_2043, _2044, _2045)));
    float _2050 = _2049 * _2043;
    float _2051 = _2049 * _2044;
    float _2052 = _2049 * _2045;
    float _2053 = dot(vec3(_574, _575, _576), vec3(cbLight._m0[_1843].xyz));
    float _4127 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
    float _2056 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
    float _2057 = dot(vec3(_574, _575, _576), vec3(_2050, _2051, _2052));
    float _4138 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
    float _2060 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
    float _2061 = dot(vec3(cbLight._m0[_1843].xyz), vec3(_2050, _2051, _2052));
    float _4149 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
    float _2065 = _2042 * _2042;
    float _2069 = ((_2060 * _2060) * (_2065 + (-1.0))) + 1.0;
    float _2076 = exp2(log2(1.0 - (isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0)))) * 5.0);
    float _2083 = 1.0 - _2042;
    float _2093 = (0.5 / (((_1971 * ((_2056 * _2083) + _2042)) + 9.9999999392252902907785028219223e-09) + (((_1971 * _2083) + _2042) * _2056))) * _2056;
    float _4160 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
    float _2095 = (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0))) * (_2065 / ((_2069 * _2069) * 3.141590118408203125));
    float _2105 = (((((_2076 * _1993) + _728) * cbLight._m0[_2030].x) * _2095) * _1825) + ((((cbLight._m0[_1942].x * _1794) * ((_1992 * _1993) + _728)) * _2016) * _1839);
    float _2106 = (((((_2076 * _1995) + _730) * cbLight._m0[_2030].y) * _2095) * _1825) + ((((cbLight._m0[_1942].y * _1795) * ((_1992 * _1995) + _730)) * _2016) * _1839);
    float _2107 = (((((_2076 * _1996) + _731) * cbLight._m0[_2030].z) * _2095) * _1825) + ((((cbLight._m0[_1942].z * _1796) * ((_1992 * _1996) + _731)) * _2016) * _1839);
    float _2169;
    float _2171;
    float _2173;
    if (_1879)
    {
        _2169 = _2105;
        _2171 = _2106;
        _2173 = _2107;
    }
    else
    {
        uint _2175 = _1802 + 2u;
        uint _2179 = _1802 + 10u;
        float _2193 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2175].w)) * _577) * 0.949999988079071044921875);
        float _2194 = _2193 * _2193;
        float _2195 = cbLight._m0[_2175].x + _655;
        float _2196 = cbLight._m0[_2175].y + _656;
        float _2197 = cbLight._m0[_2175].z + _657;
        float _2201 = inversesqrt(dot(vec3(_2195, _2196, _2197), vec3(_2195, _2196, _2197)));
        float _2202 = _2201 * _2195;
        float _2203 = _2201 * _2196;
        float _2204 = _2201 * _2197;
        float _2205 = dot(vec3(_574, _575, _576), vec3(cbLight._m0[_2175].xyz));
        float _4171 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
        float _2208 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _2209 = dot(vec3(_574, _575, _576), vec3(_2202, _2203, _2204));
        float _4182 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
        float _2212 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _2213 = dot(vec3(cbLight._m0[_2175].xyz), vec3(_2202, _2203, _2204));
        float _4193 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
        float _2217 = _2194 * _2194;
        float _2221 = ((_2212 * _2212) * (_2217 + (-1.0))) + 1.0;
        float _2228 = exp2(log2(1.0 - (isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0)))) * 5.0);
        float _2235 = 1.0 - _2194;
        float _2245 = (0.5 / (((_1971 * ((_2208 * _2235) + _2194)) + 9.9999999392252902907785028219223e-09) + (((_1971 * _2235) + _2194) * _2208))) * _2208;
        float _4204 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
        float _2247 = (isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0))) * (_2217 / ((_2221 * _2221) * 3.141590118408203125));
        float _2248 = isnan(1.0) ? _1817 : (isnan(_1817) ? 1.0 : min(_1817, 1.0));
        _2169 = (((((_2228 * _1993) + _728) * cbLight._m0[_2179].x) * _2247) * _2248) + _2105;
        _2171 = (((((_2228 * _1995) + _730) * cbLight._m0[_2179].y) * _2247) * _2248) + _2106;
        _2173 = (((((_2228 * _1996) + _731) * cbLight._m0[_2179].z) * _2247) * _2248) + _2107;
    }
    float _2283;
    float _2285;
    float _2287;
    if (_1897)
    {
        _2283 = _2169;
        _2285 = _2171;
        _2287 = _2173;
    }
    else
    {
        uint _2294 = _1802 + 3u;
        uint _2298 = _1802 + 11u;
        float _2312 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2294].w)) * _577) * 0.949999988079071044921875);
        float _2313 = _2312 * _2312;
        float _2314 = cbLight._m0[_2294].x + _655;
        float _2315 = cbLight._m0[_2294].y + _656;
        float _2316 = cbLight._m0[_2294].z + _657;
        float _2320 = inversesqrt(dot(vec3(_2314, _2315, _2316), vec3(_2314, _2315, _2316)));
        float _2321 = _2320 * _2314;
        float _2322 = _2320 * _2315;
        float _2323 = _2320 * _2316;
        float _2324 = dot(vec3(_574, _575, _576), vec3(cbLight._m0[_2294].xyz));
        float _4220 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
        float _2327 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _2328 = dot(vec3(_574, _575, _576), vec3(_2321, _2322, _2323));
        float _4231 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
        float _2331 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _2332 = dot(vec3(cbLight._m0[_2294].xyz), vec3(_2321, _2322, _2323));
        float _4242 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
        float _2336 = _2313 * _2313;
        float _2340 = ((_2331 * _2331) * (_2336 + (-1.0))) + 1.0;
        float _2347 = exp2(log2(1.0 - (isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0)))) * 5.0);
        float _2354 = 1.0 - _2313;
        float _2364 = (0.5 / (((_1971 * ((_2327 * _2354) + _2313)) + 9.9999999392252902907785028219223e-09) + (((_1971 * _2354) + _2313) * _2327))) * _2327;
        float _4253 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
        float _2366 = (isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * (_2336 / ((_2340 * _2340) * 3.141590118408203125));
        float _2367 = isnan(1.0) ? _1818 : (isnan(_1818) ? 1.0 : min(_1818, 1.0));
        _2283 = (((((_2347 * _1993) + _728) * cbLight._m0[_2298].x) * _2366) * _2367) + _2169;
        _2285 = (((((_2347 * _1995) + _730) * cbLight._m0[_2298].y) * _2366) * _2367) + _2171;
        _2287 = (((((_2347 * _1996) + _731) * cbLight._m0[_2298].z) * _2366) * _2367) + _2173;
    }
    float _2502;
    float _2504;
    float _2506;
    float _2508;
    float _2510;
    float _2512;
    if (_1800.y == 0u)
    {
        float _2442 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2443 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2442;
        float _2444 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2442;
        float _2445 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2442;
        uvec4 _2457 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2458 = _2457.x;
        uint _2469 = uint((float(_2457.y) * floor(float(uint(cbSceneParam._m0[85u].y * _664) / _2458))) + floor(float(uint(cbSceneParam._m0[85u].x * _663) / _2458)));
        float _2479 = (log2(_2445 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2480 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
        uint _2483 = uint(isnan(14.0) ? _2480 : (isnan(_2480) ? 14.0 : min(_2480, 14.0)));
        uvec4 _2488 = texelFetch(g_lightClusterGridBuffer, int(((_2483 << 2u) + (_2469 << 6u)) >> 2u));
        uint _2489 = _2488.x;
        uint _2490 = _2457.z;
        float _2619;
        float _2621;
        float _2623;
        float _2625;
        float _2627;
        float _2629;
        if (((((1u << ((_2490 >> 4u) & 15u)) + 4294967295u) & _2489) == 0u) || ((_2490 & 240u) == 0u))
        {
            _2619 = 0.0;
            _2621 = 0.0;
            _2623 = 0.0;
            _2625 = 0.0;
            _2627 = 0.0;
            _2629 = 0.0;
        }
        else
        {
            float _2620;
            float _2622;
            float _2624;
            float _2626;
            float _2628;
            float _2630;
            float _2772 = 0.0;
            float _2773 = 0.0;
            float _2774 = 0.0;
            float _2775 = 0.0;
            float _2776 = 0.0;
            float _2777 = 0.0;
            uint _2778 = 0u;
            uint _2787;
            bool _2788;
            for (;;)
            {
                _2787 = texelFetch(g_lightClassification, int((((_2483 << 5u) + (_2469 << 9u)) + (_2778 << 2u)) >> 2u)).x;
                _2788 = _2787 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2788)
                {
                    frontier_phi_61_pred = _2772;
                    frontier_phi_61_pred_1 = _2777;
                    frontier_phi_61_pred_2 = _2776;
                    frontier_phi_61_pred_3 = _2775;
                    frontier_phi_61_pred_4 = _2774;
                    frontier_phi_61_pred_5 = _2773;
                }
                else
                {
                    float _2896;
                    float _2897;
                    float _2898;
                    float _2899;
                    float _2900;
                    float _2901;
                    uint _2902;
                    _2896 = _2772;
                    _2897 = _2773;
                    _2898 = _2774;
                    _2899 = _2775;
                    _2900 = _2776;
                    _2901 = _2777;
                    _2902 = _2787;
                    float _2828;
                    float _2829;
                    float _2830;
                    float _2831;
                    float _2832;
                    float _2833;
                    for (;;)
                    {
                        uint _2906 = uint(findLSB(_2902)) + (_2778 << 5u);
                        uint _2903 = (_2902 + 4294967295u) & _2902;
                        uint _2908 = _2906 * 48u;
                        vec4 _2922 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2908)).x, texelFetch(g_PointLightRenderingBuffer, int(_2908 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2908 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2908 + 3u)).x));
                        uint _2928 = (_2906 * 48u) + 4u;
                        vec4 _2941 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2928)).x, texelFetch(g_PointLightRenderingBuffer, int(_2928 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2928 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2928 + 3u)).x));
                        uint _2947 = (_2906 * 48u) + 8u;
                        vec3 _2958 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2947)).x, texelFetch(g_PointLightRenderingBuffer, int(_2947 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2947 + 2u)).x));
                        float _2962 = _2922.x - _2443;
                        float _2963 = _2922.y - _2444;
                        float _2964 = _2922.z - _2445;
                        float _2965 = dot(vec3(_2962, _2963, _2964), vec3(_2962, _2963, _2964));
                        float _2968 = inversesqrt(_2965);
                        float _2969 = _2968 * _2962;
                        float _2970 = _2968 * _2963;
                        float _2971 = _2968 * _2964;
                        float _2972 = dot(vec3(_684, _687, _690), vec3(_2969, _2970, _2971));
                        float _2977 = 1.0 - (_2965 * _2922.w);
                        float _4279 = isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0));
                        float _2978 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
                        float _2979 = sqrt(_2965) * _2941.w;
                        float _2982 = 1.39999997615814208984375 / (_2979 + 1.39999997615814208984375);
                        float _2983 = _2982 * _2982;
                        float _2986 = ((1.0 - _2983) * _2972) + _2983;
                        float _2989 = _2979 * _2979;
                        float _2993 = ((isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0))) * _2978) / ((_2989 * 0.699999988079071044921875) + 1.0);
                        float _2997 = (-0.0) - _2443;
                        float _2998 = (-0.0) - _2444;
                        float _2999 = (-0.0) - _2445;
                        float _3003 = inversesqrt(dot(vec3(_2997, _2998, _2999), vec3(_2997, _2998, _2999)));
                        float _3004 = _3003 * _2997;
                        float _3005 = _3003 * _2998;
                        float _3006 = _3003 * _2999;
                        float _3014 = exp2(log2(1.0 / ((_2989 * 3.5) + 5.0)) * 0.25);
                        float _3015 = 1.0 - _759;
                        float _3022 = sqrt(1.0 - ((1.0 - (_3015 * _3015)) * (1.0 - (_3014 * _3014))));
                        float _3023 = _3022 * _3022;
                        float _3024 = _3023 * _3023;
                        float _3025 = _3004 + _2969;
                        float _3026 = _3005 + _2970;
                        float _3027 = _3006 + _2971;
                        float _3031 = inversesqrt(dot(vec3(_3025, _3026, _3027), vec3(_3025, _3026, _3027)));
                        float _3035 = dot(vec3(_684, _687, _690), vec3(_3004, _3005, _3006));
                        float _4295 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0));
                        float _3038 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
                        float _3039 = dot(vec3(_684, _687, _690), vec3(_3031 * _3025, _3031 * _3026, _3031 * _3027));
                        float _4306 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0));
                        float _3042 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
                        float _3046 = ((_3042 * _3042) * (_3024 + (-1.0))) + 1.0;
                        float _3047 = _2982 * _3023;
                        float _3048 = _3047 * _3047;
                        float _3051 = ((1.0 - _3048) * _2972) + _3048;
                        float _4317 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0));
                        float _3052 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
                        float _3053 = 1.0 - _3023;
                        float _3063 = (0.5 / (((_3052 * ((_3038 * _3053) + _3023)) + 9.9999999392252902907785028219223e-09) + (((_3052 * _3053) + _3023) * _3038))) * _3052;
                        float _4328 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0));
                        float _3074 = (((_3024 * 3.1415927410125732421875) * (isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0)))) / ((_3046 * _3046) * ((_2989 * 2.1991131305694580078125) + 3.141590118408203125))) * _2978;
                        _2831 = (_2993 * _2941.x) + _2899;
                        _2832 = (_2993 * _2941.y) + _2900;
                        _2833 = (_2993 * _2941.z) + _2901;
                        _2828 = (_3074 * _2958.x) + _2896;
                        _2829 = (_3074 * _2958.y) + _2897;
                        _2830 = (_3074 * _2958.z) + _2898;
                        if (_2903 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2896 = _2828;
                            _2897 = _2829;
                            _2898 = _2830;
                            _2899 = _2831;
                            _2900 = _2832;
                            _2901 = _2833;
                            _2902 = _2903;
                        }
                    }
                    frontier_phi_61_pred = _2828;
                    frontier_phi_61_pred_1 = _2833;
                    frontier_phi_61_pred_2 = _2832;
                    frontier_phi_61_pred_3 = _2831;
                    frontier_phi_61_pred_4 = _2830;
                    frontier_phi_61_pred_5 = _2829;
                }
                _2620 = frontier_phi_61_pred;
                _2630 = frontier_phi_61_pred_1;
                _2628 = frontier_phi_61_pred_2;
                _2626 = frontier_phi_61_pred_3;
                _2624 = frontier_phi_61_pred_4;
                _2622 = frontier_phi_61_pred_5;
                uint _2779 = _2778 + 1u;
                if (_2779 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2772 = _2620;
                    _2773 = _2622;
                    _2774 = _2624;
                    _2775 = _2626;
                    _2776 = _2628;
                    _2777 = _2630;
                    _2778 = _2779;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2619 = _2620;
            _2621 = _2622;
            _2623 = _2624;
            _2625 = _2626;
            _2627 = _2628;
            _2629 = _2630;
        }
        uvec4 _2633 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2634 = _2633.z;
        uint _2636 = (_2634 >> 8u) & 15u;
        float _2740;
        float _2742;
        float _2744;
        float _2746;
        float _2748;
        float _2750;
        if (((4294967295u << _2636) & _2489) == 0u)
        {
            _2740 = _2619;
            _2742 = _2621;
            _2744 = _2623;
            _2746 = _2625;
            _2748 = _2627;
            _2750 = _2629;
        }
        else
        {
            float _2765 = inversesqrt(dot(vec3(_2443, _2444, _2445), vec3(_2443, _2444, _2445)));
            float _2766 = _2765 * _2443;
            float _2767 = _2765 * _2444;
            float _2768 = _2765 * _2445;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2636 < ((_2634 >> 12u) & 15u))
            {
                float _2741;
                float _2743;
                float _2745;
                float _2747;
                float _2749;
                float _2751;
                float _2879 = _2619;
                float _2880 = _2621;
                float _2881 = _2623;
                float _2882 = _2625;
                float _2883 = _2627;
                float _2884 = _2629;
                uint _2885 = _2636;
                uint _2894;
                bool _2895;
                for (;;)
                {
                    _2894 = texelFetch(g_lightClassification, int((((_2483 << 5u) + (_2469 << 9u)) + (_2885 << 2u)) >> 2u)).x;
                    _2895 = _2894 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2895)
                    {
                        frontier_phi_67_pred = _2882;
                        frontier_phi_67_pred_1 = _2883;
                        frontier_phi_67_pred_2 = _2884;
                        frontier_phi_67_pred_3 = _2881;
                        frontier_phi_67_pred_4 = _2880;
                        frontier_phi_67_pred_5 = _2879;
                    }
                    else
                    {
                        float _3079;
                        float _3080;
                        float _3081;
                        float _3082;
                        float _3083;
                        float _3084;
                        float _3373;
                        float _3374;
                        float _3375;
                        float _3376;
                        float _3377;
                        float _3378;
                        float _3092 = _2879;
                        float _3093 = _2880;
                        float _3094 = _2881;
                        float _3095 = _2882;
                        float _3096 = _2883;
                        float _3097 = _2884;
                        uint _3098 = _2894;
                        uint _3099;
                        vec4 _3124;
                        float _3125;
                        vec4 _3140;
                        vec3 _3152;
                        vec4 _3167;
                        vec4 _3182;
                        float _3229;
                        bool _3230;
                        for (;;)
                        {
                            uint _3109 = ((_2885 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3098));
                            _3099 = (_3098 + 4294967295u) & _3098;
                            uint _3111 = _3109 * 40u;
                            _3124 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3111)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 3u)).x));
                            _3125 = _3124.w;
                            uint _3127 = (_3109 * 40u) + 4u;
                            _3140 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3127)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 3u)).x));
                            uint _3142 = (_3109 * 40u) + 8u;
                            _3152 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3142)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 2u)).x));
                            uint _3154 = (_3109 * 40u) + 16u;
                            _3167 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3154)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 3u)).x));
                            uint _3169 = (_3109 * 40u) + 20u;
                            _3182 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3169)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 3u)).x));
                            uint _3185 = (_3109 * 40u) + 24u;
                            vec4 _3198 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3185)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 3u)).x));
                            uint _3204 = (_3109 * 40u) + 28u;
                            vec4 _3217 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3204)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 3u)).x));
                            _3229 = fma(_2445, _3217.z, fma(_2444, _3217.y, _3217.x * _2443)) + _3217.w;
                            _3230 = !((fma(_2445, _3198.z, fma(_2444, _3198.y, _3198.x * _2443)) + _3198.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3230)
                            {
                                float _3257 = _3124.x - _2443;
                                float _3258 = _3124.y - _2444;
                                float _3259 = _3124.z - _2445;
                                float _3260 = dot(vec3(_3257, _3258, _3259), vec3(_3257, _3258, _3259));
                                float _3263 = inversesqrt(_3260);
                                float _3264 = _3263 * _3257;
                                float _3265 = _3263 * _3258;
                                float _3266 = _3263 * _3259;
                                float _3270 = 1.0 - (_3260 / (_3125 * _3125));
                                float _4339 = isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0));
                                float _3271 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
                                float _3275 = sqrt(_3260) * _3140.w;
                                float _3277 = 1.39999997615814208984375 / (_3275 + 1.39999997615814208984375);
                                float _3278 = _3277 * _3277;
                                float _3281 = ((1.0 - _3278) * dot(vec3(_3264, _3265, _3266), vec3(_684, _687, _690))) + _3278;
                                float _3284 = _3275 * _3275;
                                float _3288 = (fma(_2445, _3167.z, fma(_2444, _3167.y, _3167.x * _2443)) + _3167.w) / _3229;
                                float _3289 = (fma(_2445, _3182.z, fma(_2444, _3182.y, _3182.x * _2443)) + _3182.w) / _3229;
                                float _3293 = 1.0 - dot(vec2(_3288, _3289), vec2(_3288, _3289));
                                float _4355 = isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0));
                                float _3294 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
                                float _3295 = _3294 * (((isnan(0.0) ? _3281 : (isnan(_3281) ? 0.0 : max(_3281, 0.0))) * _3271) / ((_3284 * 0.699999988079071044921875) + 1.0));
                                float _3307 = exp2(log2(1.0 / ((_3284 * 3.5) + 5.0)) * 0.25);
                                float _3308 = 1.0 - _759;
                                float _3315 = sqrt(1.0 - ((1.0 - (_3308 * _3308)) * (1.0 - (_3307 * _3307))));
                                float _3316 = _3315 * _3315;
                                float _3317 = _3316 * _3316;
                                float _3318 = _3264 - _2766;
                                float _3319 = _3265 - _2767;
                                float _3320 = _3266 - _2768;
                                float _3324 = inversesqrt(dot(vec3(_3318, _3319, _3320), vec3(_3318, _3319, _3320)));
                                float _3328 = dot(vec3(_684, _687, _690), vec3((-0.0) - _2766, (-0.0) - _2767, (-0.0) - _2768));
                                float _4366 = isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0));
                                float _3331 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
                                float _3332 = dot(vec3(_684, _687, _690), vec3(_3324 * _3318, _3324 * _3319, _3324 * _3320));
                                float _4377 = isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0));
                                float _3335 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
                                float _3339 = ((_3335 * _3335) * (_3317 + (-1.0))) + 1.0;
                                float _3340 = _3277 * _3316;
                                float _3341 = _3340 * _3340;
                                float _3347 = ((1.0 - _3341) * dot(vec3(_684, _687, _690), vec3(_3264, _3265, _3266))) + _3341;
                                float _4388 = isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : max(_3347, 0.0));
                                float _3348 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
                                float _3349 = 1.0 - _3316;
                                float _3359 = (0.5 / (((_3348 * ((_3331 * _3349) + _3316)) + 9.9999999392252902907785028219223e-09) + (((_3348 * _3349) + _3316) * _3331))) * _3348;
                                float _4399 = isnan(0.0) ? _3359 : (isnan(_3359) ? 0.0 : max(_3359, 0.0));
                                float _3369 = (_3294 * _3271) * (((_3317 * 3.1415927410125732421875) * (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0)))) / ((_3339 * _3339) * ((_3284 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3369 * _3152.x;
                                frontier_phi_73_pred_1 = _3369 * _3152.y;
                                frontier_phi_73_pred_2 = _3295 * _3140.z;
                                frontier_phi_73_pred_3 = _3295 * _3140.y;
                                frontier_phi_73_pred_4 = _3295 * _3140.x;
                                frontier_phi_73_pred_5 = _3369 * _3152.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3373 = frontier_phi_73_pred;
                            _3374 = frontier_phi_73_pred_1;
                            _3378 = frontier_phi_73_pred_2;
                            _3377 = frontier_phi_73_pred_3;
                            _3376 = frontier_phi_73_pred_4;
                            _3375 = frontier_phi_73_pred_5;
                            _3082 = _3376 + _3095;
                            _3083 = _3377 + _3096;
                            _3084 = _3378 + _3097;
                            _3079 = _3373 + _3092;
                            _3080 = _3374 + _3093;
                            _3081 = _3375 + _3094;
                            if (_3099 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3092 = _3079;
                                _3093 = _3080;
                                _3094 = _3081;
                                _3095 = _3082;
                                _3096 = _3083;
                                _3097 = _3084;
                                _3098 = _3099;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3082;
                        frontier_phi_67_pred_1 = _3083;
                        frontier_phi_67_pred_2 = _3084;
                        frontier_phi_67_pred_3 = _3081;
                        frontier_phi_67_pred_4 = _3080;
                        frontier_phi_67_pred_5 = _3079;
                    }
                    _2747 = frontier_phi_67_pred;
                    _2749 = frontier_phi_67_pred_1;
                    _2751 = frontier_phi_67_pred_2;
                    _2745 = frontier_phi_67_pred_3;
                    _2743 = frontier_phi_67_pred_4;
                    _2741 = frontier_phi_67_pred_5;
                    uint _2886 = _2885 + 1u;
                    if (_2886 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2879 = _2741;
                        _2880 = _2743;
                        _2881 = _2745;
                        _2882 = _2747;
                        _2883 = _2749;
                        _2884 = _2751;
                        _2885 = _2886;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2749;
                frontier_phi_55_56_ladder_1 = _2751;
                frontier_phi_55_56_ladder_2 = _2747;
                frontier_phi_55_56_ladder_3 = _2745;
                frontier_phi_55_56_ladder_4 = _2743;
                frontier_phi_55_56_ladder_5 = _2741;
            }
            else
            {
                frontier_phi_55_56_ladder = _2627;
                frontier_phi_55_56_ladder_1 = _2629;
                frontier_phi_55_56_ladder_2 = _2625;
                frontier_phi_55_56_ladder_3 = _2623;
                frontier_phi_55_56_ladder_4 = _2621;
                frontier_phi_55_56_ladder_5 = _2619;
            }
            _2740 = frontier_phi_55_56_ladder_5;
            _2742 = frontier_phi_55_56_ladder_4;
            _2744 = frontier_phi_55_56_ladder_3;
            _2746 = frontier_phi_55_56_ladder_2;
            _2748 = frontier_phi_55_56_ladder;
            _2750 = frontier_phi_55_56_ladder_1;
        }
        float _2755 = isnan(1.0) ? _743 : (isnan(_743) ? 1.0 : min(_743, 1.0));
        _2502 = (_2755 * _2746) + _1935;
        _2504 = (_2755 * _2748) + _1937;
        _2506 = (_2755 * _2750) + _1939;
        _2508 = ((_2740 * _728) * _2755) + _2283;
        _2510 = ((_2742 * _730) * _2755) + _2285;
        _2512 = ((_2744 * _731) * _2755) + _2287;
    }
    else
    {
        _2502 = _1935;
        _2504 = _1937;
        _2506 = _1939;
        _2508 = _2283;
        _2510 = _2285;
        _2512 = _2287;
    }
    uint _2518 = _704 + uint(cbMatDynParam._m0[0u].w);
    float _2524 = ((((((_490.x - _487) * _423) + _487) * cbMtdParam._m0[13u].x) + ((((_444.x - _441) * _423) + _441) * cbMtdParam._m0[11u].x)) * _290) * cbInstanceData._m0[_2518].x;
    float _2525 = ((((((_490.y - _488) * _423) + _488) * cbMtdParam._m0[13u].y) + ((((_444.y - _442) * _423) + _442) * cbMtdParam._m0[11u].y)) * _290) * cbInstanceData._m0[_2518].y;
    float _2526 = ((((((_490.z - _489) * _423) + _489) * cbMtdParam._m0[13u].z) + ((((_444.z - _443) * _423) + _443) * cbMtdParam._m0[11u].z)) * _290) * cbInstanceData._m0[_2518].z;
    float _4415 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _4426 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _4437 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _2543 = (((isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0))) * (_2502 + ((isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0))) * _743))) + ((_2508 + ((isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0))) * _1552)) * cbPerFrame._m0[3u].x)) + _2524;
    float _2545 = (_2525 + ((_2510 + ((isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0))) * _1552)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0))) * (_2504 + ((isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0))) * _743)));
    float _2547 = (_2526 + ((_2512 + ((isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0))) * _1552)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0))) * (_2506 + ((isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0))) * _743)));
    float _4463 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2560 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
    uint _2561 = _703 + 6u;
    float _2569 = _663 / cbSceneParam._m0[86u].x;
    float _2570 = _664 / cbSceneParam._m0[86u].y;
    vec4 _2584 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2569, _2570, (log2((isnan(cbSceneParam._m0[77u].w) ? _597 : (isnan(_597) ? cbSceneParam._m0[77u].w : min(_597, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2586 = _2584.x;
    float _2587 = _2584.y;
    float _2588 = _2584.z;
    float _2589 = _2584.w;
    float _2681;
    float _2683;
    float _2685;
    float _2687;
    if (_597 > cbSceneParam._m0[78u].w)
    {
        float _2644 = isnan(_597) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _597 : min(cbSceneParam._m0[80u].w, _597));
        float _2645 = _2644 / _597;
        float _2656 = _2645 * _648;
        float _2657 = _649 * _2645;
        float _2658 = (-0.0) - _2657;
        float _2659 = _2645 * _650;
        float _2661 = (cbSceneParam._m0[77u].w * _2658) / _2644;
        float _2662 = _2661 + cbSceneParam._m0[79u].w;
        float _2663 = cbSceneParam._m0[79u].w - _2657;
        float _2669 = sqrt(((_2656 * _2656) + (_2657 * _2657)) + (_2659 * _2659));
        float _2672 = (1.0 - (cbSceneParam._m0[77u].w / _2644)) * _2669;
        float _2677 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2679 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2841;
        if (abs((_2658 - _2661) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2841 = ((((_2662 > 0.0) ? exp2(_2677 * _2662) : (2.0 - exp2(_2679 * _2662))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2672;
        }
        else
        {
            float _2801 = 1.0 / cbSceneParam._m0[80u].x;
            float _2802 = isnan(_2663) ? _2662 : (isnan(_2662) ? _2663 : max(_2662, _2663));
            float _2803 = isnan(_2663) ? _2662 : (isnan(_2662) ? _2663 : min(_2662, _2663));
            float _2812 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : min(_2802, 0.0));
            float _2813 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : min(_2803, 0.0));
            _2841 = ((abs(_2669 / _2658) * cbSceneParam._m0[80u].y) * ((((_2812 - _2813) * 2.0) - ((exp2(_2677 * (isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0)))) - exp2(_2677 * (isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0))))) * _2801)) - ((exp2(_2679 * _2812) - exp2(_2679 * _2813)) * _2801))) + (_2672 * cbSceneParam._m0[80u].z);
        }
        vec4 _2843 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2569, _2570, 1.0), 0.0);
        float _2852 = exp2((_2841 * (-1.44269502162933349609375)) * (1.0 - _2843.w));
        float _2853 = log2(_2852);
        float _2869 = log2(_2589);
        _2681 = (exp2(_2869 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2853 * cbSceneParam._m0[78u].x)) * _2843.x) / cbSceneParam._m0[78u].x)) + _2586;
        _2683 = (exp2(_2869 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2853 * cbSceneParam._m0[78u].y)) * _2843.y) / cbSceneParam._m0[78u].y)) + _2587;
        _2685 = (exp2(_2869 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2853 * cbSceneParam._m0[78u].z)) * _2843.z) / cbSceneParam._m0[78u].z)) + _2588;
        _2687 = _2852 * _2589;
    }
    else
    {
        _2681 = _2586;
        _2683 = _2587;
        _2685 = _2588;
        _2687 = _2589;
    }
    float _2699 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2700 = _2699 == 3.0;
    float _2701 = log2(_2687);
    float _2705 = exp2(_2701 * cbSceneParam._m0[78u].x);
    float _2706 = exp2(_2701 * cbSceneParam._m0[78u].y);
    float _2707 = exp2(_2701 * cbSceneParam._m0[78u].z);
    float _2708 = _2705 * (isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0)));
    float _2709 = _2706 * (isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0)));
    float _2710 = _2707 * (isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0)));
    float _2719 = (_2699 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2719 * (_2700 ? _2708 : (_2708 + (cbSceneParam._m0[72u].w * _2681)));
    SV_Target.y = _2719 * (_2700 ? _2709 : (_2709 + (cbSceneParam._m0[72u].w * _2683)));
    SV_Target.z = _2719 * (_2700 ? _2710 : (_2710 + (cbSceneParam._m0[72u].w * _2685)));
    SV_Target.w = cbInstanceData._m0[_2561].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2524) * _2560) * _2705) * _2719;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2525) * _2560) * _2706) * _2719;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2526) * _2560) * _2707) * _2719;
    SV_Target_1.w = cbInstanceData._m0[_2561].w;
}


