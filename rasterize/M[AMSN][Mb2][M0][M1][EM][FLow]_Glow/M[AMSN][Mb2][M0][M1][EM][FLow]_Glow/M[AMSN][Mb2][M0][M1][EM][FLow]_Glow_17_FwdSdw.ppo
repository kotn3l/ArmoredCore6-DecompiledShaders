#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1175;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _205 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _206 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _207 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _213 = inversesqrt(dot(vec3(_205, _206, _207), vec3(_205, _206, _207)));
    float _220 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _249 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _255 = _249.x * cbMtdParam._m0[9u].x;
    float _256 = _249.y * cbMtdParam._m0[9u].y;
    float _257 = _249.z * cbMtdParam._m0[9u].z;
    float _295 = TEXCOORD_9.x - ((cbMtdParam._m0[16u].y * (1.0 - TEXCOORD_9.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w)).x + 0.00999999977648258209228515625));
    float _297 = _295 * (cbMtdParam._m0[16u].z + 1.0);
    float _3824 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _298 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
    float _306 = ((((cbMtdParam._m0[12u].x - _255) * TEXCOORD_9.x) * cbMtdParam._m0[16u].x) * _298) + _255;
    float _307 = ((((cbMtdParam._m0[12u].y - _256) * TEXCOORD_9.y) * cbMtdParam._m0[16u].x) * _298) + _256;
    float _308 = (((cbMtdParam._m0[16u].x * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _257)) * _298) + _257;
    vec4 _321 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[6u].w));
    float _323 = _321.x;
    vec4 _335 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _339 = _335.z;
    float _343 = (_335.x * 2.0) + (-1.0);
    float _345 = (_335.y * 2.0) + (-1.0);
    float _346 = dot(vec2(_343, _345), vec2(_343, _345));
    float _3835 = isnan(0.0) ? _346 : (isnan(_346) ? 0.0 : max(_346, 0.0));
    float _351 = sqrt(1.0 - (isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0))));
    float _357 = _295 * (cbMtdParam._m0[16u].y + 1.0);
    float _3846 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    float _361 = ((cbMtdParam._m0[15u].y - _339) * (isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0)))) + _339;
    float _374 = (cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _375 = (cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _402 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * ((cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * ((cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[10u].w));
    float _407 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[15u].w;
    float _414 = ((_402.y * 0.5) + (-0.25)) * cbMtdParam._m0[15u].z;
    float _416 = (-0.0) - (cbMtdParam._m0[15u].z * ((_402.x * 0.5) + (-0.25)));
    float _418 = fract(_407);
    float _420 = fract(_407 + 0.5);
    float _421 = _418 * _416;
    float _422 = _414 * _418;
    float _425 = _420 * _416;
    float _426 = _414 * _420;
    float _431 = abs((_418 * 2.0) + (-1.0));
    vec4 _447 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_421 + _374) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_422 + _375) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _449 = _447.x;
    float _450 = _447.y;
    float _451 = _447.z;
    vec4 _452 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_425 + _374) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_426 + _375) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _479 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _480 = (cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _493 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_421 + _479) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_422 + _480) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _495 = _493.x;
    float _496 = _493.y;
    float _497 = _493.z;
    vec4 _498 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_425 + _479) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_426 + _480) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _550 = (TEXCOORD_6.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_6.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_5, SS_WrapLinear), vec2((((cbMtdParam._m0[18u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((cbMtdParam._m0[18u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].x + 1.0);
    float _3857 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _551 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
    float _552 = _551 * (((((_498.x - _495) * _431) + _495) * cbMtdParam._m0[13u].x) + ((((_452.x - _449) * _431) + _449) * cbMtdParam._m0[11u].x));
    float _553 = _551 * (((((_498.y - _496) * _431) + _496) * cbMtdParam._m0[13u].y) + ((((_452.y - _450) * _431) + _450) * cbMtdParam._m0[11u].y));
    float _554 = _551 * (((((_498.z - _497) * _431) + _497) * cbMtdParam._m0[13u].z) + ((((_452.z - _451) * _431) + _451) * cbMtdParam._m0[11u].z));
    vec4 _566 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[9u].w));
    float _568 = _566.x;
    vec4 _593 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[16u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, (((cbMtdParam._m0[17u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w));
    float _599 = (_593.x * 2.0) + (-1.0);
    float _600 = (_593.y * 2.0) + (-1.0);
    float _601 = dot(vec2(_599, _600), vec2(_599, _600));
    float _3868 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _617 = (_298 * (((cbMtdParam._m0[14u].z * _343) - _343) + _599)) + _343;
    float _618 = (_298 * (((cbMtdParam._m0[14u].z * _345) - _345) + _600)) + _345;
    float _619 = (_298 * (sqrt(1.0 - (isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0)))) - _351)) + _351;
    float _622 = fma(_619, _220 * NORMAL.x, fma(_618, _227 * TANGENT.x, (_213 * _205) * _617));
    float _625 = fma(_619, _220 * NORMAL.y, fma(_618, _227 * TANGENT.y, (_213 * _206) * _617));
    float _628 = fma(_619, _220 * NORMAL.z, fma(_618, _227 * TANGENT.z, (_213 * _207) * _617));
    float _632 = inversesqrt(dot(vec3(_622, _625, _628), vec3(_622, _625, _628)));
    float _633 = _632 * _622;
    float _634 = _632 * _625;
    float _635 = _632 * _628;
    float _3879 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _636 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
    float _3890 = isnan(0.0) ? _306 : (isnan(_306) ? 0.0 : max(_306, 0.0));
    float _3901 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _3912 = isnan(0.0) ? _308 : (isnan(_308) ? 0.0 : max(_308, 0.0));
    float _3923 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _640 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
    float _656 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _696 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _706 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _696);
    float _707 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _696);
    float _708 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _696);
    float _712 = inversesqrt(dot(vec3(_706, _707, _708), vec3(_706, _707, _708)));
    float _713 = _706 * _712;
    float _714 = _707 * _712;
    float _715 = _708 * _712;
    float _721 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _722 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _742 = fma(_635, cbSceneParam._m0[5u].z, fma(_634, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _633));
    float _745 = fma(_635, cbSceneParam._m0[6u].z, fma(_634, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _633));
    float _748 = fma(_635, cbSceneParam._m0[7u].z, fma(_634, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _633));
    uint _761 = uint(roundEven(NORMAL.w)) * 13u;
    uint _762 = _761 + 9u;
    uint _763 = _762 + uint(cbMatDynParam._m0[0u].w);
    float _769 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0)))) * cbInstanceData._m0[_763].x;
    float _770 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0)))) * cbInstanceData._m0[_763].y;
    float _771 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0)))) * cbInstanceData._m0[_763].z;
    float _3934 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _772 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
    float _3945 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _773 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
    float _3956 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _774 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
    float _775 = 1.0 - _640;
    float _776 = _772 * _775;
    float _777 = _773 * _775;
    float _778 = _774 * _775;
    float _783 = (_772 + (-0.039999999105930328369140625)) * _640;
    float _784 = (_773 + (-0.039999999105930328369140625)) * _640;
    float _785 = (_774 + (-0.039999999105930328369140625)) * _640;
    float _786 = _783 + 0.039999999105930328369140625;
    float _788 = _784 + 0.039999999105930328369140625;
    float _789 = _785 + 0.039999999105930328369140625;
    vec4 _798 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _721, cbSceneParam._m0[86u].y * _722));
    float _801 = _798.x * TEXCOORD_3.w;
    float _802 = dot(vec3(_633, _634, _635), vec3(_713, _714, _715));
    float _805 = _802 * 2.0;
    float _809 = (_805 * _633) - _713;
    float _810 = (_805 * _634) - _714;
    float _811 = (_805 * _635) - _715;
    float _815 = abs(dot(vec3(_713, _714, _715), vec3(_633, _634, _635)));
    float _3967 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _817 = sqrt(_636);
    float _830 = exp2((_817 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_817 * 3.0));
    float _836 = (1.0 - _830) * ((_817 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _837 = _830 * _817;
    float _865 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _869 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _873 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1174;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _900 = fma(_873, cbModelParam._m0[26u].z, fma(_869, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _865));
        float _904 = fma(_873, cbModelParam._m0[27u].z, fma(_869, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _865));
        float _908 = fma(_873, cbModelParam._m0[28u].z, fma(_869, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _865));
        float _932 = _865 + _633;
        float _933 = _869 + _634;
        float _934 = _873 + _635;
        float _944 = fma(_934, cbModelParam._m0[26u].z, fma(_933, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _932)) - _900;
        float _945 = fma(_934, cbModelParam._m0[27u].z, fma(_933, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _932)) - _904;
        float _946 = fma(_934, cbModelParam._m0[28u].z, fma(_933, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _932)) - _908;
        float _950 = inversesqrt(dot(vec3(_944, _945, _946), vec3(_944, _945, _946)));
        float _963 = ((_950 * _944) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_900 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _964 = ((_950 * _945) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_904 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _965 = ((_950 * _946) / cbModelParam._m0[34u].z) + ((((((_908 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _968 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        vec4 _975 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        vec4 _982 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        vec4 _989 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        float _1002 = exp2((_968.w + (-0.5)) * 20.0) * 2.0;
        float _1003 = _1002 * (_968.x + (-0.5));
        float _1004 = _1002 * (_968.y + (-0.5));
        float _1005 = _1002 * (_968.z + (-0.5));
        float _1012 = exp2((_975.w + (-0.5)) * 20.0) * 2.0;
        float _1013 = _1012 * (_975.x + (-0.5));
        float _1014 = _1012 * (_975.y + (-0.5));
        float _1015 = _1012 * (_975.z + (-0.5));
        float _1022 = exp2((_982.w + (-0.5)) * 20.0) * 2.0;
        float _1023 = _1022 * (_982.x + (-0.5));
        float _1024 = _1022 * (_982.y + (-0.5));
        float _1025 = _1022 * (_982.z + (-0.5));
        float _1032 = exp2((_989.w + (-0.5)) * 20.0) * 2.0;
        float _1033 = _1032 * (_989.x + (-0.5));
        float _1034 = _1032 * (_989.y + (-0.5));
        float _1035 = _1032 * (_989.z + (-0.5));
        float _1036 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1037 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1038 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1039 = _1003 * 0.5;
        float _1040 = _1013 * 0.5;
        float _1041 = _1023 * 0.5;
        float _1042 = dot(vec3(_1039, _1040, _1041), vec3(_1039, _1040, _1041));
        float _1047 = (_1042 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1042);
        float _1056 = (dot(vec3(_633, _634, _635), vec3(_1047 * _1039, _1047 * _1040, _1047 * _1041)) + 1.0) * 0.5;
        float _3993 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1066 = sqrt(((_1040 * _1040) + (_1039 * _1039)) + (_1041 * _1041)) / (_1036 + 9.9999997473787516355514526367188e-06);
        float _4004 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1067 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _1068 = _1067 * 2.0;
        float _1072 = (1.0 - _1067) / (_1067 + 1.0);
        float _4015 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1073 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _1082 = ((((1.0 - _1073) * (_1068 + 2.0)) * exp2(log2(isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0))) * (_1068 + 1.0))) + _1073) * _1036;
        float _1083 = _1004 * 0.5;
        float _1084 = _1014 * 0.5;
        float _1085 = _1024 * 0.5;
        float _1086 = dot(vec3(_1083, _1084, _1085), vec3(_1083, _1084, _1085));
        float _1091 = (_1086 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1086);
        float _1099 = (dot(vec3(_633, _634, _635), vec3(_1091 * _1083, _1091 * _1084, _1091 * _1085)) + 1.0) * 0.5;
        float _4026 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1108 = sqrt(((_1084 * _1084) + (_1083 * _1083)) + (_1085 * _1085)) / (_1037 + 9.9999997473787516355514526367188e-06);
        float _4037 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1110 = _1109 * 2.0;
        float _1114 = (1.0 - _1109) / (_1109 + 1.0);
        float _4048 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1124 = ((((1.0 - _1115) * (_1110 + 2.0)) * exp2(log2(isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0))) * (_1110 + 1.0))) + _1115) * _1037;
        float _1125 = _1005 * 0.5;
        float _1126 = _1015 * 0.5;
        float _1127 = _1025 * 0.5;
        float _1128 = dot(vec3(_1125, _1126, _1127), vec3(_1125, _1126, _1127));
        float _1133 = (_1128 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1128);
        float _1141 = (dot(vec3(_633, _634, _635), vec3(_1133 * _1125, _1133 * _1126, _1133 * _1127)) + 1.0) * 0.5;
        float _4059 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1150 = sqrt(((_1126 * _1126) + (_1125 * _1125)) + (_1127 * _1127)) / (_1038 + 9.9999997473787516355514526367188e-06);
        float _4070 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1152 = _1151 * 2.0;
        float _1156 = (1.0 - _1151) / (_1151 + 1.0);
        float _4081 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _1166 = ((((1.0 - _1157) * (_1152 + 2.0)) * exp2(log2(isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) * (_1152 + 1.0))) + _1157) * _1038;
        _1174 = _1005;
        _1176 = _1004;
        _1177 = _1003;
        _1178 = _1015;
        _1179 = _1014;
        _1180 = _1013;
        _1181 = _1025;
        _1182 = _1024;
        _1183 = _1023;
        _1184 = _1038;
        _1185 = _1037;
        _1186 = _1036;
        _1187 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0)));
        _1188 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0)));
        _1189 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0)));
    }
    else
    {
        _1174 = _1175;
        _1176 = _1175;
        _1177 = _1175;
        _1178 = _1175;
        _1179 = _1175;
        _1180 = _1175;
        _1181 = _1175;
        _1182 = _1175;
        _1183 = _1175;
        _1184 = _1175;
        _1185 = _1175;
        _1186 = _1175;
        _1187 = 0.0;
        _1188 = 0.0;
        _1189 = 0.0;
    }
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1215 = fma(_873, cbModelParam._m0[30u].z, fma(_869, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _865));
        float _1219 = fma(_873, cbModelParam._m0[31u].z, fma(_869, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _865));
        float _1223 = fma(_873, cbModelParam._m0[32u].z, fma(_869, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _865));
        float _1246 = _865 + _633;
        float _1247 = _869 + _634;
        float _1248 = _873 + _635;
        float _1258 = fma(_1248, cbModelParam._m0[30u].z, fma(_1247, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1246)) - _1215;
        float _1259 = fma(_1248, cbModelParam._m0[31u].z, fma(_1247, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1246)) - _1219;
        float _1260 = fma(_1248, cbModelParam._m0[32u].z, fma(_1247, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1246)) - _1223;
        float _1264 = inversesqrt(dot(vec3(_1258, _1259, _1260), vec3(_1258, _1259, _1260)));
        float _1277 = ((_1264 * _1258) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1215 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1278 = ((_1264 * _1259) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1219 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1279 = ((_1264 * _1260) / cbModelParam._m0[35u].z) + ((((((_1223 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1281 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1277, _1278, _1279), 0.0);
        vec4 _1288 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1277, _1278, _1279), 0.0);
        vec4 _1295 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1277, _1278, _1279), 0.0);
        vec4 _1302 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1277, _1278, _1279), 0.0);
        float _1314 = exp2((_1281.w + (-0.5)) * 20.0) * 2.0;
        float _1315 = _1314 * (_1281.x + (-0.5));
        float _1316 = _1314 * (_1281.y + (-0.5));
        float _1317 = _1314 * (_1281.z + (-0.5));
        float _1324 = exp2((_1288.w + (-0.5)) * 20.0) * 2.0;
        float _1325 = _1324 * (_1288.x + (-0.5));
        float _1326 = _1324 * (_1288.y + (-0.5));
        float _1327 = _1324 * (_1288.z + (-0.5));
        float _1334 = exp2((_1295.w + (-0.5)) * 20.0) * 2.0;
        float _1335 = _1334 * (_1295.x + (-0.5));
        float _1336 = _1334 * (_1295.y + (-0.5));
        float _1337 = _1334 * (_1295.z + (-0.5));
        float _1344 = exp2((_1302.w + (-0.5)) * 20.0) * 2.0;
        float _1345 = _1344 * (_1302.x + (-0.5));
        float _1346 = _1344 * (_1302.y + (-0.5));
        float _1347 = _1344 * (_1302.z + (-0.5));
        float _1348 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1349 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1350 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1351 = _1315 * 0.5;
        float _1352 = _1325 * 0.5;
        float _1353 = _1335 * 0.5;
        float _1354 = dot(vec3(_1351, _1352, _1353), vec3(_1351, _1352, _1353));
        float _1359 = (_1354 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1354);
        float _1367 = (dot(vec3(_633, _634, _635), vec3(_1359 * _1351, _1359 * _1352, _1359 * _1353)) + 1.0) * 0.5;
        float _4122 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1376 = sqrt(((_1352 * _1352) + (_1351 * _1351)) + (_1353 * _1353)) / (_1348 + 9.9999997473787516355514526367188e-06);
        float _4133 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _1378 = _1377 * 2.0;
        float _1382 = (1.0 - _1377) / (_1377 + 1.0);
        float _4144 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1383 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _1392 = ((((1.0 - _1383) * (_1378 + 2.0)) * exp2(log2(isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * (_1378 + 1.0))) + _1383) * _1348;
        float _1393 = _1316 * 0.5;
        float _1394 = _1326 * 0.5;
        float _1395 = _1336 * 0.5;
        float _1396 = dot(vec3(_1393, _1394, _1395), vec3(_1393, _1394, _1395));
        float _1401 = (_1396 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1396);
        float _1409 = (dot(vec3(_633, _634, _635), vec3(_1401 * _1393, _1401 * _1394, _1401 * _1395)) + 1.0) * 0.5;
        float _4155 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1418 = sqrt(((_1394 * _1394) + (_1393 * _1393)) + (_1395 * _1395)) / (_1349 + 9.9999997473787516355514526367188e-06);
        float _4166 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1419 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1420 = _1419 * 2.0;
        float _1424 = (1.0 - _1419) / (_1419 + 1.0);
        float _4177 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1425 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1434 = ((((1.0 - _1425) * (_1420 + 2.0)) * exp2(log2(isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * (_1420 + 1.0))) + _1425) * _1349;
        float _1435 = _1317 * 0.5;
        float _1436 = _1327 * 0.5;
        float _1437 = _1337 * 0.5;
        float _1438 = dot(vec3(_1435, _1436, _1437), vec3(_1435, _1436, _1437));
        float _1443 = (_1438 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1438);
        float _1451 = (dot(vec3(_633, _634, _635), vec3(_1443 * _1435, _1443 * _1436, _1443 * _1437)) + 1.0) * 0.5;
        float _4188 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1460 = sqrt(((_1436 * _1436) + (_1435 * _1435)) + (_1437 * _1437)) / (_1350 + 9.9999997473787516355514526367188e-06);
        float _4199 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1461 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1462 = _1461 * 2.0;
        float _1466 = (1.0 - _1461) / (_1461 + 1.0);
        float _4210 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1467 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _1476 = ((((1.0 - _1467) * (_1462 + 2.0)) * exp2(log2(isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * (_1462 + 1.0))) + _1467) * _1350;
        _1484 = _1317;
        _1485 = _1316;
        _1486 = _1315;
        _1487 = _1327;
        _1488 = _1326;
        _1489 = _1325;
        _1490 = _1337;
        _1491 = _1336;
        _1492 = _1335;
        _1493 = _1350;
        _1494 = _1349;
        _1495 = _1348;
        _1496 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0)));
        _1497 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0)));
        _1498 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0)));
    }
    else
    {
        _1484 = _1175;
        _1485 = _1175;
        _1486 = _1175;
        _1487 = _1175;
        _1488 = _1175;
        _1489 = _1175;
        _1490 = _1175;
        _1491 = _1175;
        _1492 = _1175;
        _1493 = _1175;
        _1494 = _1175;
        _1495 = _1175;
        _1496 = 0.0;
        _1497 = 0.0;
        _1498 = 0.0;
    }
    float _1508 = (cbModelParam._m0[1u].x * (_1496 - _1187)) + _1187;
    float _1509 = (cbModelParam._m0[1u].x * (_1497 - _1188)) + _1188;
    float _1510 = (cbModelParam._m0[1u].x * (_1498 - _1189)) + _1189;
    float _1531 = fma(_1510, cbSceneParam._m0[89u].z, fma(_1509, cbSceneParam._m0[89u].y, _1508 * cbSceneParam._m0[89u].x));
    float _1534 = fma(_1510, cbSceneParam._m0[90u].z, fma(_1509, cbSceneParam._m0[90u].y, _1508 * cbSceneParam._m0[90u].x));
    float _1537 = fma(_1510, cbSceneParam._m0[91u].z, fma(_1509, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1508));
    float _1552 = _809 * 0.5;
    float _1553 = _810 * 0.5;
    float _1554 = _811 * 0.5;
    float _1555 = dot(vec4(_1552, _1553, _1554, 1.0), vec4(_1486, _1489, _1492, _1495));
    float _1558 = dot(vec4(_1552, _1553, _1554, 1.0), vec4(_1485, _1488, _1491, _1494));
    float _1561 = dot(vec4(_1552, _1553, _1554, 1.0), vec4(_1484, _1487, _1490, _1493));
    float _1595;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1568 = dot(vec4(_1552, _1553, _1554, 1.0), vec4(_1174, _1178, _1181, _1184));
        float _1572 = dot(vec4(_1552, _1553, _1554, 1.0), vec4(_1176, _1179, _1182, _1185));
        float _1576 = dot(vec4(_1552, _1553, _1554, 1.0), vec4(_1177, _1180, _1183, _1186));
        float _1583 = dot(vec4(cbModelParam._m0[39u]), vec4(_1552, _1553, _1554, 1.0));
        _1595 = dot(vec3(isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0)), isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0)), isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1583) ? 0.0 : (isnan(0.0) ? _1583 : max(0.0, _1583))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1595 = 1.0;
    }
    float _1606;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1597 = dot(vec4(cbModelParam._m0[40u]), vec4(_1552, _1553, _1554, 1.0));
        _1606 = dot(vec3(isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0)), isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0)), isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1597) ? 0.0 : (isnan(0.0) ? _1597 : max(0.0, _1597))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1606 = 1.0;
    }
    float _1610 = (_1606 * cbModelParam._m0[1u].x) + (_1595 * (1.0 - cbModelParam._m0[1u].x));
    float _1620 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _636);
    float _1621 = isnan(_1620) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1620 : min(cbModelParam._m0[25u].z, _1620));
    float _1701;
    float _1703;
    float _1705;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1668 = fma(_873, cbModelParam._m0[13u].z, fma(_869, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _865)) + cbModelParam._m0[13u].w;
        float _1672 = fma(_873, cbModelParam._m0[14u].z, fma(_869, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _865)) + cbModelParam._m0[14u].w;
        float _1676 = fma(_873, cbModelParam._m0[15u].z, fma(_869, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _865)) + cbModelParam._m0[15u].w;
        float _1679 = fma(_811, cbModelParam._m0[13u].z, fma(_810, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _809));
        float _1682 = fma(_811, cbModelParam._m0[14u].z, fma(_810, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _809));
        float _1685 = fma(_811, cbModelParam._m0[15u].z, fma(_810, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _809));
        float _1713;
        if (_1679 > 0.0)
        {
            _1713 = abs((1.0 - _1668) / _1679);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1679 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1668 + 1.0) / _1679);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1713 = frontier_phi_14_12_ladder;
        }
        float _1885;
        if (_1682 > 0.0)
        {
            _1885 = abs((1.0 - _1672) / _1682);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1682 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1672 + 1.0) / _1682);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1885 = frontier_phi_23_19_ladder;
        }
        float _2181;
        if (_1685 > 0.0)
        {
            _2181 = abs((1.0 - _1676) / _1685);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1685 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1676 + 1.0) / _1685);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2181 = frontier_phi_35_30_ladder;
        }
        float _2183 = isnan(_1885) ? _1713 : (isnan(_1713) ? _1885 : min(_1713, _1885));
        float _2184 = isnan(_2181) ? _2183 : (isnan(_2183) ? _2181 : min(_2183, _2181));
        float _2188 = (_2184 * _1679) + _1668;
        float _2189 = (_2184 * _1682) + _1672;
        float _2190 = (_2184 * _1685) + _1676;
        float _2191 = _2184 * 9.9999997473787516355514526367188e-05;
        float _2193 = (-1.0) - _2191;
        float _2195 = _2191 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2190 > _2195) || ((_2190 < _2193) || ((_2189 > _2195) || ((_2189 < _2193) || ((_2188 < _2193) || (_2188 > _2195))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2335 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2190, cbModelParam._m0[9u].z, fma(_2189, cbModelParam._m0[9u].y, _2188 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2190, cbModelParam._m0[10u].z, fma(_2189, cbModelParam._m0[10u].y, _2188 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2190, cbModelParam._m0[11u].z, fma(_2189, cbModelParam._m0[11u].y, _2188 * cbModelParam._m0[11u].x))), _1621);
            frontier_phi_13_35_ladder = _2335.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2335.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2335.x * cbModelParam._m0[1u].y;
        }
        _1701 = frontier_phi_13_35_ladder_2;
        _1703 = frontier_phi_13_35_ladder_1;
        _1705 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1689 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_809, _810, _811), _1621);
        _1701 = _1689.x * cbModelParam._m0[1u].y;
        _1703 = _1689.y * cbModelParam._m0[1u].y;
        _1705 = _1689.z * cbModelParam._m0[1u].y;
    }
    float _1709 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _636);
    float _1710 = isnan(_1709) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1709 : min(cbModelParam._m0[25u].w, _1709));
    float _1800;
    float _1802;
    float _1804;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1764 = fma(_873, cbModelParam._m0[21u].z, fma(_869, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _865)) + cbModelParam._m0[21u].w;
        float _1768 = fma(_873, cbModelParam._m0[22u].z, fma(_869, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _865)) + cbModelParam._m0[22u].w;
        float _1772 = fma(_873, cbModelParam._m0[23u].z, fma(_869, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _865)) + cbModelParam._m0[23u].w;
        float _1775 = fma(_811, cbModelParam._m0[21u].z, fma(_810, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _809));
        float _1778 = fma(_811, cbModelParam._m0[22u].z, fma(_810, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _809));
        float _1781 = fma(_811, cbModelParam._m0[23u].z, fma(_810, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _809));
        float _1890;
        if (_1775 > 0.0)
        {
            _1890 = abs((1.0 - _1764) / _1775);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1775 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1764 + 1.0) / _1775);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1890 = frontier_phi_25_21_ladder;
        }
        float _2208;
        if (_1778 > 0.0)
        {
            _2208 = abs((1.0 - _1768) / _1778);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1778 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1768 + 1.0) / _1778);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2208 = frontier_phi_37_32_ladder;
        }
        float _2546;
        if (_1781 > 0.0)
        {
            _2546 = abs((1.0 - _1772) / _1781);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1781 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1772 + 1.0) / _1781);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2546 = frontier_phi_47_44_ladder;
        }
        float _2548 = isnan(_2208) ? _1890 : (isnan(_1890) ? _2208 : min(_1890, _2208));
        float _2549 = isnan(_2546) ? _2548 : (isnan(_2548) ? _2546 : min(_2548, _2546));
        float _2553 = (_2549 * _1775) + _1764;
        float _2554 = (_2549 * _1778) + _1768;
        float _2555 = (_2549 * _1781) + _1772;
        float _2556 = _2549 * 9.9999997473787516355514526367188e-05;
        float _2557 = (-1.0) - _2556;
        float _2559 = _2556 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2555 > _2559) || ((_2555 < _2557) || ((_2554 > _2559) || ((_2554 < _2557) || ((_2553 < _2557) || (_2553 > _2559))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2677 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2555, cbModelParam._m0[17u].z, fma(_2554, cbModelParam._m0[17u].y, _2553 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2555, cbModelParam._m0[18u].z, fma(_2554, cbModelParam._m0[18u].y, _2553 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2555, cbModelParam._m0[19u].z, fma(_2554, cbModelParam._m0[19u].y, _2553 * cbModelParam._m0[19u].x))), _1710);
            frontier_phi_22_47_ladder = _2677.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2677.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2677.x * cbModelParam._m0[1u].z;
        }
        _1800 = frontier_phi_22_47_ladder_2;
        _1802 = frontier_phi_22_47_ladder_1;
        _1804 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1784 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_809, _810, _811), _1710);
        _1800 = _1784.x * cbModelParam._m0[1u].z;
        _1802 = _1784.y * cbModelParam._m0[1u].z;
        _1804 = _1784.z * cbModelParam._m0[1u].z;
    }
    float _1817 = (((_836 * _786) + _837) * _801) * ((cbModelParam._m0[1u].w * (_1800 - _1701)) + _1701);
    float _1819 = (((_836 * _788) + _837) * _801) * ((cbModelParam._m0[1u].w * (_1802 - _1703)) + _1703);
    float _1821 = (((_836 * _789) + _837) * _801) * ((cbModelParam._m0[1u].w * (_1804 - _1705)) + _1705);
    float _1824 = fma(_1821, cbSceneParam._m0[89u].z, fma(_1819, cbSceneParam._m0[89u].y, _1817 * cbSceneParam._m0[89u].x));
    float _1827 = fma(_1821, cbSceneParam._m0[90u].z, fma(_1819, cbSceneParam._m0[90u].y, _1817 * cbSceneParam._m0[90u].x));
    float _1830 = fma(_1821, cbSceneParam._m0[91u].z, fma(_1819, cbSceneParam._m0[91u].y, _1817 * cbSceneParam._m0[91u].x));
    float _1864 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1868 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1872 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1876 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1877 = _1864 / _1876;
    float _1878 = _1868 / _1876;
    float _1879 = _1872 / _1876;
    float _2026;
    float _2027;
    float _2028;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1906 = ((uint(_1879 > cbSceneParam._m0[59u].y) + uint(_1879 > cbSceneParam._m0[59u].x)) + uint(_1879 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1907 = _1906 + 43u;
        uint _1915 = _1906 + 44u;
        uint _1923 = _1906 + 45u;
        uint _1931 = _1906 + 46u;
        float _1942 = fma(_1876, cbSceneParam._m0[_1907].w, fma(_1872, cbSceneParam._m0[_1907].z, fma(_1868, cbSceneParam._m0[_1907].y, _1864 * cbSceneParam._m0[_1907].x)));
        float _1946 = fma(_1876, cbSceneParam._m0[_1915].w, fma(_1872, cbSceneParam._m0[_1915].z, fma(_1868, cbSceneParam._m0[_1915].y, _1864 * cbSceneParam._m0[_1915].x)));
        float _1954 = fma(_1876, cbSceneParam._m0[_1931].w, fma(_1872, cbSceneParam._m0[_1931].z, fma(_1868, cbSceneParam._m0[_1931].y, _1864 * cbSceneParam._m0[_1931].x)));
        float _1959 = cbSceneParam._m0[33u].z * _1954;
        float _1961 = cbSceneParam._m0[33u].w * _1954;
        float _1964 = fma(_1876, cbSceneParam._m0[_1923].w, fma(_1872, cbSceneParam._m0[_1923].z, fma(_1868, cbSceneParam._m0[_1923].y, _1864 * cbSceneParam._m0[_1923].x))) / _1954;
        float _2012 = (cbSceneParam._m0[33u].x - sqrt(((_1878 * _1878) + (_1877 * _1877)) + (_1879 * _1879))) * cbSceneParam._m0[33u].y;
        float _4336 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
        float _2019 = (isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1959 + _1942) / _1954, (_1961 + _1946) / _1954), _1964), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1961 + _1942) / _1954, (_1946 - _1959) / _1954), _1964), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1942 - _1959) / _1954, (_1946 - _1961) / _1954), _1964), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1942 - _1961) / _1954, (_1959 + _1946) / _1954), _1964), 0.0)).x), vec4(0.25)));
        _2026 = 1.0 - (_2019 * cbSceneParam._m0[34u].x);
        _2027 = 1.0 - (_2019 * cbSceneParam._m0[34u].y);
        _2028 = 1.0 - (_2019 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2026 = 1.0;
        _2027 = 1.0;
        _2028 = 1.0;
    }
    float _2092;
    float _2094;
    float _2096;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2080 = fma(_1876, cbSceneParam._m0[63u].w, fma(_1872, cbSceneParam._m0[63u].z, fma(_1868, cbSceneParam._m0[63u].y, _1864 * cbSceneParam._m0[63u].x)));
        float _2081 = fma(_1876, cbSceneParam._m0[60u].w, fma(_1872, cbSceneParam._m0[60u].z, fma(_1868, cbSceneParam._m0[60u].y, _1864 * cbSceneParam._m0[60u].x))) / _2080;
        float _2082 = fma(_1876, cbSceneParam._m0[61u].w, fma(_1872, cbSceneParam._m0[61u].z, fma(_1868, cbSceneParam._m0[61u].y, _1864 * cbSceneParam._m0[61u].x))) / _2080;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2081 >= cbSceneParam._m0[64u].x) && (_2082 >= cbSceneParam._m0[64u].y)) && (_2081 <= cbSceneParam._m0[64u].z)) && (_2082 <= cbSceneParam._m0[64u].w))
        {
            float _2221 = fma(_1876, cbSceneParam._m0[62u].w, fma(_1872, cbSceneParam._m0[62u].z, fma(_1868, cbSceneParam._m0[62u].y, _1864 * cbSceneParam._m0[62u].x))) / _2080;
            float _2225 = isnan(cbSceneParam._m0[41u].w) ? _2221 : (isnan(_2221) ? cbSceneParam._m0[41u].w : max(_2221, cbSceneParam._m0[41u].w));
            float _2268 = (cbSceneParam._m0[33u].x - sqrt(((_1878 * _1878) + (_1877 * _1877)) + (_1879 * _1879))) * cbSceneParam._m0[33u].y;
            float _4352 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
            float _2275 = (isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2081, cbSceneParam._m0[33u].w + _2082), _2225), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2081, _2082 - cbSceneParam._m0[33u].z), _2225), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2081 - cbSceneParam._m0[33u].z, _2082 - cbSceneParam._m0[33u].w), _2225), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2081 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2082), _2225), 0.0)).x), vec4(0.25)));
            float _2279 = 1.0 - (_2275 * cbSceneParam._m0[34u].x);
            float _2280 = 1.0 - (_2275 * cbSceneParam._m0[34u].y);
            float _2281 = 1.0 - (_2275 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2281) ? _2028 : (isnan(_2028) ? _2281 : min(_2028, _2281));
            frontier_phi_34_33_ladder_1 = isnan(_2280) ? _2027 : (isnan(_2027) ? _2280 : min(_2027, _2280));
            frontier_phi_34_33_ladder_2 = isnan(_2279) ? _2026 : (isnan(_2026) ? _2279 : min(_2026, _2279));
        }
        else
        {
            frontier_phi_34_33_ladder = _2028;
            frontier_phi_34_33_ladder_1 = _2027;
            frontier_phi_34_33_ladder_2 = _2026;
        }
        _2092 = frontier_phi_34_33_ladder_2;
        _2094 = frontier_phi_34_33_ladder_1;
        _2096 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2092 = _2026;
        _2094 = _2027;
        _2096 = _2028;
    }
    uvec4 _2101 = floatBitsToUint(cbInstanceData._m0[_761 + 5u]);
    uint _2103 = _2101.x * 14u;
    uint _2104 = _2103 + 13u;
    float _2111 = _801 + (-1.0);
    float _2116 = (cbLight._m0[_2104].x * _2111) + 1.0;
    float _2117 = (cbLight._m0[_2104].y * _2111) + 1.0;
    float _2118 = (cbLight._m0[_2104].z * _2111) + 1.0;
    float _2119 = (cbLight._m0[_2104].w * _2111) + 1.0;
    uint _2120 = _2103 + 5u;
    float _2126 = isnan(1.0) ? _2117 : (isnan(_2117) ? 1.0 : min(_2117, 1.0));
    uint _2130 = _2103 + 4u;
    float _2140 = isnan(1.0) ? _2116 : (isnan(_2116) ? 1.0 : min(_2116, 1.0));
    uint _2144 = _2103 | 1u;
    float _2155 = dot(vec3(cbLight._m0[_2103].xyz), vec3(_633, _634, _635));
    float _2158 = dot(vec3(cbLight._m0[_2144].xyz), vec3(_633, _634, _635));
    float _4388 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
    float _4399 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
    float _2163 = (isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0))) * 0.3183098733425140380859375;
    float _2165 = (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0))) * 0.3183098733425140380859375;
    float _2172 = ((cbLight._m0[_2120].x * _2126) * _2165) + (((cbLight._m0[_2130].x * _2092) * _2140) * _2163);
    float _2173 = ((_2126 * cbLight._m0[_2120].y) * _2165) + (((cbLight._m0[_2130].y * _2094) * _2140) * _2163);
    float _2174 = ((_2126 * cbLight._m0[_2120].z) * _2165) + (((cbLight._m0[_2130].z * _2096) * _2140) * _2163);
    uvec4 _2178 = floatBitsToUint(cbLight._m0[_2103 + 12u]);
    bool _2180 = _2178.x == 0u;
    float _2282;
    float _2284;
    float _2286;
    if (_2180)
    {
        _2282 = _2172;
        _2284 = _2173;
        _2286 = _2174;
    }
    else
    {
        uint _2290 = _2103 + 6u;
        float _2306 = (dot(vec3(cbLight._m0[_2103 + 2u].xyz), vec3(_633, _634, _635)) * 0.5) + 0.5;
        float _2307 = _2306 * _2306;
        float _4410 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
        float _2308 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
        float _2309 = isnan(1.0) ? _2118 : (isnan(_2118) ? 1.0 : min(_2118, 1.0));
        _2282 = (((cbLight._m0[_2290].x * 0.3183098733425140380859375) * _2308) * _2309) + _2172;
        _2284 = (((cbLight._m0[_2290].y * 0.3183098733425140380859375) * _2308) * _2309) + _2173;
        _2286 = (((cbLight._m0[_2290].z * 0.3183098733425140380859375) * _2308) * _2309) + _2174;
    }
    bool _2289 = _2178.y == 0u;
    float _2344;
    float _2346;
    float _2348;
    if (_2289)
    {
        _2344 = _2282;
        _2346 = _2284;
        _2348 = _2286;
    }
    else
    {
        uint _2517 = _2103 + 7u;
        float _2533 = (dot(vec3(cbLight._m0[_2103 + 3u].xyz), vec3(_633, _634, _635)) * 0.5) + 0.5;
        float _2534 = _2533 * _2533;
        float _4426 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
        float _2535 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
        float _2536 = isnan(1.0) ? _2119 : (isnan(_2119) ? 1.0 : min(_2119, 1.0));
        _2344 = (((cbLight._m0[_2517].x * 0.3183098733425140380859375) * _2535) * _2536) + _2282;
        _2346 = (((cbLight._m0[_2517].y * 0.3183098733425140380859375) * _2535) * _2536) + _2284;
        _2348 = (((cbLight._m0[_2517].z * 0.3183098733425140380859375) * _2535) * _2536) + _2286;
    }
    uint _2351 = _2103 + 8u;
    float _2364 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2103].w)) * _636) * 0.949999988079071044921875);
    float _2365 = _2364 * _2364;
    float _2366 = cbLight._m0[_2103].x + _713;
    float _2367 = cbLight._m0[_2103].y + _714;
    float _2368 = cbLight._m0[_2103].z + _715;
    float _2372 = inversesqrt(dot(vec3(_2366, _2367, _2368), vec3(_2366, _2367, _2368)));
    float _2373 = _2372 * _2366;
    float _2374 = _2372 * _2367;
    float _2375 = _2372 * _2368;
    float _2376 = dot(vec3(_633, _634, _635), vec3(cbLight._m0[_2103].xyz));
    float _4442 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
    float _2379 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
    float _4453 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _2380 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
    float _2381 = dot(vec3(_633, _634, _635), vec3(_2373, _2374, _2375));
    float _4464 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
    float _2384 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
    float _2385 = dot(vec3(cbLight._m0[_2103].xyz), vec3(_2373, _2374, _2375));
    float _4475 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
    float _2389 = _2365 * _2365;
    float _2393 = ((_2384 * _2384) * (_2389 + (-1.0))) + 1.0;
    float _2401 = exp2(log2(1.0 - (isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0)))) * 5.0);
    float _2402 = 0.959999978542327880859375 - _783;
    float _2404 = 0.959999978542327880859375 - _784;
    float _2405 = 0.959999978542327880859375 - _785;
    float _2412 = 1.0 - _2365;
    float _2423 = (0.5 / (((_2380 * ((_2379 * _2412) + _2365)) + 9.9999999392252902907785028219223e-09) + (((_2380 * _2412) + _2365) * _2379))) * _2379;
    float _4486 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
    float _2425 = (isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0))) * (_2389 / ((_2393 * _2393) * 3.141590118408203125));
    uint _2439 = _2103 + 9u;
    float _2450 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2144].w)) * _636) * 0.949999988079071044921875);
    float _2451 = _2450 * _2450;
    float _2452 = cbLight._m0[_2144].x + _713;
    float _2453 = cbLight._m0[_2144].y + _714;
    float _2454 = cbLight._m0[_2144].z + _715;
    float _2458 = inversesqrt(dot(vec3(_2452, _2453, _2454), vec3(_2452, _2453, _2454)));
    float _2459 = _2458 * _2452;
    float _2460 = _2458 * _2453;
    float _2461 = _2458 * _2454;
    float _2462 = dot(vec3(_633, _634, _635), vec3(cbLight._m0[_2144].xyz));
    float _4497 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
    float _2465 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
    float _2466 = dot(vec3(_633, _634, _635), vec3(_2459, _2460, _2461));
    float _4508 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
    float _2469 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
    float _2470 = dot(vec3(cbLight._m0[_2144].xyz), vec3(_2459, _2460, _2461));
    float _4519 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
    float _2474 = _2451 * _2451;
    float _2478 = ((_2469 * _2469) * (_2474 + (-1.0))) + 1.0;
    float _2485 = exp2(log2(1.0 - (isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0)))) * 5.0);
    float _2492 = 1.0 - _2451;
    float _2502 = (0.5 / (((_2380 * ((_2465 * _2492) + _2451)) + 9.9999999392252902907785028219223e-09) + (((_2380 * _2492) + _2451) * _2465))) * _2465;
    float _4530 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
    float _2504 = (isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0))) * (_2474 / ((_2478 * _2478) * 3.141590118408203125));
    float _2514 = (((((_2485 * _2402) + _786) * cbLight._m0[_2439].x) * _2504) * _2126) + ((((cbLight._m0[_2351].x * _2092) * ((_2401 * _2402) + _786)) * _2425) * _2140);
    float _2515 = (((((_2485 * _2404) + _788) * cbLight._m0[_2439].y) * _2504) * _2126) + ((((cbLight._m0[_2351].y * _2094) * ((_2401 * _2404) + _788)) * _2425) * _2140);
    float _2516 = (((((_2485 * _2405) + _789) * cbLight._m0[_2439].z) * _2504) * _2126) + ((((cbLight._m0[_2351].z * _2096) * ((_2401 * _2405) + _789)) * _2425) * _2140);
    float _2572;
    float _2574;
    float _2576;
    if (_2180)
    {
        _2572 = _2514;
        _2574 = _2515;
        _2576 = _2516;
    }
    else
    {
        uint _2578 = _2103 + 2u;
        uint _2582 = _2103 + 10u;
        float _2596 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2578].w)) * _636) * 0.949999988079071044921875);
        float _2597 = _2596 * _2596;
        float _2598 = cbLight._m0[_2578].x + _713;
        float _2599 = cbLight._m0[_2578].y + _714;
        float _2600 = cbLight._m0[_2578].z + _715;
        float _2604 = inversesqrt(dot(vec3(_2598, _2599, _2600), vec3(_2598, _2599, _2600)));
        float _2605 = _2604 * _2598;
        float _2606 = _2604 * _2599;
        float _2607 = _2604 * _2600;
        float _2608 = dot(vec3(_633, _634, _635), vec3(cbLight._m0[_2578].xyz));
        float _4541 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
        float _2611 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
        float _2612 = dot(vec3(_633, _634, _635), vec3(_2605, _2606, _2607));
        float _4552 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
        float _2615 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
        float _2616 = dot(vec3(cbLight._m0[_2578].xyz), vec3(_2605, _2606, _2607));
        float _4563 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
        float _2620 = _2597 * _2597;
        float _2624 = ((_2615 * _2615) * (_2620 + (-1.0))) + 1.0;
        float _2631 = exp2(log2(1.0 - (isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0)))) * 5.0);
        float _2638 = 1.0 - _2597;
        float _2648 = (0.5 / (((_2380 * ((_2611 * _2638) + _2597)) + 9.9999999392252902907785028219223e-09) + (((_2380 * _2638) + _2597) * _2611))) * _2611;
        float _4574 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
        float _2650 = (isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0))) * (_2620 / ((_2624 * _2624) * 3.141590118408203125));
        float _2651 = isnan(1.0) ? _2118 : (isnan(_2118) ? 1.0 : min(_2118, 1.0));
        _2572 = (((((_2631 * _2402) + _786) * cbLight._m0[_2582].x) * _2650) * _2651) + _2514;
        _2574 = (((((_2631 * _2404) + _788) * cbLight._m0[_2582].y) * _2650) * _2651) + _2515;
        _2576 = (((((_2631 * _2405) + _789) * cbLight._m0[_2582].z) * _2650) * _2651) + _2516;
    }
    float _2682;
    float _2684;
    float _2686;
    if (_2289)
    {
        _2682 = _2572;
        _2684 = _2574;
        _2686 = _2576;
    }
    else
    {
        uint _2693 = _2103 + 3u;
        uint _2697 = _2103 + 11u;
        float _2711 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2693].w)) * _636) * 0.949999988079071044921875);
        float _2712 = _2711 * _2711;
        float _2713 = cbLight._m0[_2693].x + _713;
        float _2714 = cbLight._m0[_2693].y + _714;
        float _2715 = cbLight._m0[_2693].z + _715;
        float _2719 = inversesqrt(dot(vec3(_2713, _2714, _2715), vec3(_2713, _2714, _2715)));
        float _2720 = _2719 * _2713;
        float _2721 = _2719 * _2714;
        float _2722 = _2719 * _2715;
        float _2723 = dot(vec3(_633, _634, _635), vec3(cbLight._m0[_2693].xyz));
        float _4590 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
        float _2726 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
        float _2727 = dot(vec3(_633, _634, _635), vec3(_2720, _2721, _2722));
        float _4601 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
        float _2730 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
        float _2731 = dot(vec3(cbLight._m0[_2693].xyz), vec3(_2720, _2721, _2722));
        float _4612 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
        float _2735 = _2712 * _2712;
        float _2739 = ((_2730 * _2730) * (_2735 + (-1.0))) + 1.0;
        float _2746 = exp2(log2(1.0 - (isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0)))) * 5.0);
        float _2753 = 1.0 - _2712;
        float _2763 = (0.5 / (((_2380 * ((_2726 * _2753) + _2712)) + 9.9999999392252902907785028219223e-09) + (((_2380 * _2753) + _2712) * _2726))) * _2726;
        float _4623 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
        float _2765 = (isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0))) * (_2735 / ((_2739 * _2739) * 3.141590118408203125));
        float _2766 = isnan(1.0) ? _2119 : (isnan(_2119) ? 1.0 : min(_2119, 1.0));
        _2682 = (((((_2746 * _2402) + _786) * cbLight._m0[_2697].x) * _2765) * _2766) + _2572;
        _2684 = (((((_2746 * _2404) + _788) * cbLight._m0[_2697].y) * _2765) * _2766) + _2574;
        _2686 = (((((_2746 * _2405) + _789) * cbLight._m0[_2697].z) * _2765) * _2766) + _2576;
    }
    float _2832;
    float _2834;
    float _2836;
    float _2838;
    float _2840;
    float _2842;
    if (_2101.y == 0u)
    {
        uvec4 _2787 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2788 = _2787.x;
        uint _2799 = uint((float(_2787.y) * floor(float(uint(cbSceneParam._m0[85u].y * _722) / _2788))) + floor(float(uint(cbSceneParam._m0[85u].x * _721) / _2788)));
        float _2809 = (log2(_1879 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2810 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0));
        uint _2813 = uint(isnan(14.0) ? _2810 : (isnan(_2810) ? 14.0 : min(_2810, 14.0)));
        uvec4 _2818 = texelFetch(g_lightClusterGridBuffer, int(((_2813 << 2u) + (_2799 << 6u)) >> 2u));
        uint _2819 = _2818.x;
        uint _2820 = _2787.z;
        float _2928;
        float _2930;
        float _2932;
        float _2934;
        float _2936;
        float _2938;
        if (((((1u << ((_2820 >> 4u) & 15u)) + 4294967295u) & _2819) == 0u) || ((_2820 & 240u) == 0u))
        {
            _2928 = 0.0;
            _2930 = 0.0;
            _2932 = 0.0;
            _2934 = 0.0;
            _2936 = 0.0;
            _2938 = 0.0;
        }
        else
        {
            float _2929;
            float _2931;
            float _2933;
            float _2935;
            float _2937;
            float _2939;
            float _3081 = 0.0;
            float _3082 = 0.0;
            float _3083 = 0.0;
            float _3084 = 0.0;
            float _3085 = 0.0;
            float _3086 = 0.0;
            uint _3087 = 0u;
            uint _3096;
            bool _3097;
            for (;;)
            {
                _3096 = texelFetch(g_lightClassification, int((((_2813 << 5u) + (_2799 << 9u)) + (_3087 << 2u)) >> 2u)).x;
                _3097 = _3096 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3097)
                {
                    frontier_phi_66_pred = _3086;
                    frontier_phi_66_pred_1 = _3085;
                    frontier_phi_66_pred_2 = _3084;
                    frontier_phi_66_pred_3 = _3083;
                    frontier_phi_66_pred_4 = _3082;
                    frontier_phi_66_pred_5 = _3081;
                }
                else
                {
                    float _3205;
                    float _3206;
                    float _3207;
                    float _3208;
                    float _3209;
                    float _3210;
                    uint _3211;
                    _3205 = _3081;
                    _3206 = _3082;
                    _3207 = _3083;
                    _3208 = _3084;
                    _3209 = _3085;
                    _3210 = _3086;
                    _3211 = _3096;
                    float _3137;
                    float _3138;
                    float _3139;
                    float _3140;
                    float _3141;
                    float _3142;
                    for (;;)
                    {
                        uint _3215 = uint(findLSB(_3211)) + (_3087 << 5u);
                        uint _3212 = (_3211 + 4294967295u) & _3211;
                        uint _3217 = _3215 * 48u;
                        vec4 _3231 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3217)).x, texelFetch(g_PointLightRenderingBuffer, int(_3217 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3217 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3217 + 3u)).x));
                        uint _3237 = (_3215 * 48u) + 4u;
                        vec4 _3250 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3237)).x, texelFetch(g_PointLightRenderingBuffer, int(_3237 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3237 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3237 + 3u)).x));
                        uint _3256 = (_3215 * 48u) + 8u;
                        vec3 _3267 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3256)).x, texelFetch(g_PointLightRenderingBuffer, int(_3256 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3256 + 2u)).x));
                        float _3271 = _3231.x - _1877;
                        float _3272 = _3231.y - _1878;
                        float _3273 = _3231.z - _1879;
                        float _3274 = dot(vec3(_3271, _3272, _3273), vec3(_3271, _3272, _3273));
                        float _3277 = inversesqrt(_3274);
                        float _3278 = _3277 * _3271;
                        float _3279 = _3277 * _3272;
                        float _3280 = _3277 * _3273;
                        float _3281 = dot(vec3(_742, _745, _748), vec3(_3278, _3279, _3280));
                        float _3286 = 1.0 - (_3274 * _3231.w);
                        float _4649 = isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0));
                        float _3287 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
                        float _3288 = sqrt(_3274) * _3250.w;
                        float _3291 = 1.39999997615814208984375 / (_3288 + 1.39999997615814208984375);
                        float _3292 = _3291 * _3291;
                        float _3295 = ((1.0 - _3292) * _3281) + _3292;
                        float _3298 = _3288 * _3288;
                        float _3302 = ((isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0))) * _3287) / ((_3298 * 0.699999988079071044921875) + 1.0);
                        float _3306 = (-0.0) - _1877;
                        float _3307 = (-0.0) - _1878;
                        float _3308 = (-0.0) - _1879;
                        float _3312 = inversesqrt(dot(vec3(_3306, _3307, _3308), vec3(_3306, _3307, _3308)));
                        float _3313 = _3312 * _3306;
                        float _3314 = _3312 * _3307;
                        float _3315 = _3312 * _3308;
                        float _3322 = exp2(log2(1.0 / ((_3298 * 3.5) + 5.0)) * 0.25);
                        float _3323 = 1.0 - _817;
                        float _3330 = sqrt(1.0 - ((1.0 - (_3323 * _3323)) * (1.0 - (_3322 * _3322))));
                        float _3331 = _3330 * _3330;
                        float _3332 = _3331 * _3331;
                        float _3333 = _3313 + _3278;
                        float _3334 = _3314 + _3279;
                        float _3335 = _3315 + _3280;
                        float _3339 = inversesqrt(dot(vec3(_3333, _3334, _3335), vec3(_3333, _3334, _3335)));
                        float _3343 = dot(vec3(_742, _745, _748), vec3(_3313, _3314, _3315));
                        float _4665 = isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0));
                        float _3346 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
                        float _3347 = dot(vec3(_742, _745, _748), vec3(_3339 * _3333, _3339 * _3334, _3339 * _3335));
                        float _4676 = isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : max(_3347, 0.0));
                        float _3350 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
                        float _3354 = ((_3350 * _3350) * (_3332 + (-1.0))) + 1.0;
                        float _3355 = _3291 * _3331;
                        float _3356 = _3355 * _3355;
                        float _3359 = ((1.0 - _3356) * _3281) + _3356;
                        float _4687 = isnan(0.0) ? _3359 : (isnan(_3359) ? 0.0 : max(_3359, 0.0));
                        float _3360 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
                        float _3361 = 1.0 - _3331;
                        float _3371 = (0.5 / (((_3360 * ((_3346 * _3361) + _3331)) + 9.9999999392252902907785028219223e-09) + (((_3360 * _3361) + _3331) * _3346))) * _3360;
                        float _4698 = isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0));
                        float _3382 = (((_3332 * 3.1415927410125732421875) * (isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0)))) / ((_3354 * _3354) * ((_3298 * 2.1991131305694580078125) + 3.141590118408203125))) * _3287;
                        _3140 = (_3302 * _3250.x) + _3208;
                        _3141 = (_3302 * _3250.y) + _3209;
                        _3142 = (_3302 * _3250.z) + _3210;
                        _3137 = (_3382 * _3267.x) + _3205;
                        _3138 = (_3382 * _3267.y) + _3206;
                        _3139 = (_3382 * _3267.z) + _3207;
                        if (_3212 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3205 = _3137;
                            _3206 = _3138;
                            _3207 = _3139;
                            _3208 = _3140;
                            _3209 = _3141;
                            _3210 = _3142;
                            _3211 = _3212;
                        }
                    }
                    frontier_phi_66_pred = _3142;
                    frontier_phi_66_pred_1 = _3141;
                    frontier_phi_66_pred_2 = _3140;
                    frontier_phi_66_pred_3 = _3139;
                    frontier_phi_66_pred_4 = _3138;
                    frontier_phi_66_pred_5 = _3137;
                }
                _2939 = frontier_phi_66_pred;
                _2937 = frontier_phi_66_pred_1;
                _2935 = frontier_phi_66_pred_2;
                _2933 = frontier_phi_66_pred_3;
                _2931 = frontier_phi_66_pred_4;
                _2929 = frontier_phi_66_pred_5;
                uint _3088 = _3087 + 1u;
                if (_3088 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3081 = _2929;
                    _3082 = _2931;
                    _3083 = _2933;
                    _3084 = _2935;
                    _3085 = _2937;
                    _3086 = _2939;
                    _3087 = _3088;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2928 = _2929;
            _2930 = _2931;
            _2932 = _2933;
            _2934 = _2935;
            _2936 = _2937;
            _2938 = _2939;
        }
        uvec4 _2942 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2943 = _2942.z;
        uint _2945 = (_2943 >> 8u) & 15u;
        float _3049;
        float _3051;
        float _3053;
        float _3055;
        float _3057;
        float _3059;
        if (((4294967295u << _2945) & _2819) == 0u)
        {
            _3049 = _2928;
            _3051 = _2930;
            _3053 = _2932;
            _3055 = _2934;
            _3057 = _2936;
            _3059 = _2938;
        }
        else
        {
            float _3074 = inversesqrt(dot(vec3(_1877, _1878, _1879), vec3(_1877, _1878, _1879)));
            float _3075 = _3074 * _1877;
            float _3076 = _3074 * _1878;
            float _3077 = _3074 * _1879;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2945 < ((_2943 >> 12u) & 15u))
            {
                float _3050;
                float _3052;
                float _3054;
                float _3056;
                float _3058;
                float _3060;
                float _3188 = _2928;
                float _3189 = _2930;
                float _3190 = _2932;
                float _3191 = _2934;
                float _3192 = _2936;
                float _3193 = _2938;
                uint _3194 = _2945;
                uint _3203;
                bool _3204;
                for (;;)
                {
                    _3203 = texelFetch(g_lightClassification, int((((_2813 << 5u) + (_2799 << 9u)) + (_3194 << 2u)) >> 2u)).x;
                    _3204 = _3203 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3204)
                    {
                        frontier_phi_72_pred = _3193;
                        frontier_phi_72_pred_1 = _3192;
                        frontier_phi_72_pred_2 = _3191;
                        frontier_phi_72_pred_3 = _3190;
                        frontier_phi_72_pred_4 = _3189;
                        frontier_phi_72_pred_5 = _3188;
                    }
                    else
                    {
                        float _3387;
                        float _3388;
                        float _3389;
                        float _3390;
                        float _3391;
                        float _3392;
                        float _3681;
                        float _3682;
                        float _3683;
                        float _3684;
                        float _3685;
                        float _3686;
                        float _3400 = _3188;
                        float _3401 = _3189;
                        float _3402 = _3190;
                        float _3403 = _3191;
                        float _3404 = _3192;
                        float _3405 = _3193;
                        uint _3406 = _3203;
                        uint _3407;
                        vec4 _3432;
                        float _3433;
                        vec4 _3448;
                        vec3 _3460;
                        vec4 _3475;
                        vec4 _3490;
                        float _3537;
                        bool _3538;
                        for (;;)
                        {
                            uint _3417 = ((_3194 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3406));
                            _3407 = (_3406 + 4294967295u) & _3406;
                            uint _3419 = _3417 * 40u;
                            _3432 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3419)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 3u)).x));
                            _3433 = _3432.w;
                            uint _3435 = (_3417 * 40u) + 4u;
                            _3448 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3435)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 3u)).x));
                            uint _3450 = (_3417 * 40u) + 8u;
                            _3460 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3450)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 2u)).x));
                            uint _3462 = (_3417 * 40u) + 16u;
                            _3475 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3462)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 3u)).x));
                            uint _3477 = (_3417 * 40u) + 20u;
                            _3490 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3477)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 3u)).x));
                            uint _3493 = (_3417 * 40u) + 24u;
                            vec4 _3506 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3493)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 3u)).x));
                            uint _3512 = (_3417 * 40u) + 28u;
                            vec4 _3525 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3512)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 3u)).x));
                            _3537 = fma(_1879, _3525.z, fma(_1878, _3525.y, _3525.x * _1877)) + _3525.w;
                            _3538 = !((fma(_1879, _3506.z, fma(_1878, _3506.y, _3506.x * _1877)) + _3506.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3538)
                            {
                                float _3565 = _3432.x - _1877;
                                float _3566 = _3432.y - _1878;
                                float _3567 = _3432.z - _1879;
                                float _3568 = dot(vec3(_3565, _3566, _3567), vec3(_3565, _3566, _3567));
                                float _3571 = inversesqrt(_3568);
                                float _3572 = _3571 * _3565;
                                float _3573 = _3571 * _3566;
                                float _3574 = _3571 * _3567;
                                float _3578 = 1.0 - (_3568 / (_3433 * _3433));
                                float _4709 = isnan(0.0) ? _3578 : (isnan(_3578) ? 0.0 : max(_3578, 0.0));
                                float _3579 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
                                float _3583 = sqrt(_3568) * _3448.w;
                                float _3585 = 1.39999997615814208984375 / (_3583 + 1.39999997615814208984375);
                                float _3586 = _3585 * _3585;
                                float _3589 = ((1.0 - _3586) * dot(vec3(_3572, _3573, _3574), vec3(_742, _745, _748))) + _3586;
                                float _3592 = _3583 * _3583;
                                float _3596 = (fma(_1879, _3475.z, fma(_1878, _3475.y, _3475.x * _1877)) + _3475.w) / _3537;
                                float _3597 = (fma(_1879, _3490.z, fma(_1878, _3490.y, _3490.x * _1877)) + _3490.w) / _3537;
                                float _3601 = 1.0 - dot(vec2(_3596, _3597), vec2(_3596, _3597));
                                float _4725 = isnan(0.0) ? _3601 : (isnan(_3601) ? 0.0 : max(_3601, 0.0));
                                float _3602 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
                                float _3603 = _3602 * (((isnan(0.0) ? _3589 : (isnan(_3589) ? 0.0 : max(_3589, 0.0))) * _3579) / ((_3592 * 0.699999988079071044921875) + 1.0));
                                float _3615 = exp2(log2(1.0 / ((_3592 * 3.5) + 5.0)) * 0.25);
                                float _3616 = 1.0 - _817;
                                float _3623 = sqrt(1.0 - ((1.0 - (_3616 * _3616)) * (1.0 - (_3615 * _3615))));
                                float _3624 = _3623 * _3623;
                                float _3625 = _3624 * _3624;
                                float _3626 = _3572 - _3075;
                                float _3627 = _3573 - _3076;
                                float _3628 = _3574 - _3077;
                                float _3632 = inversesqrt(dot(vec3(_3626, _3627, _3628), vec3(_3626, _3627, _3628)));
                                float _3636 = dot(vec3(_742, _745, _748), vec3((-0.0) - _3075, (-0.0) - _3076, (-0.0) - _3077));
                                float _4736 = isnan(0.0) ? _3636 : (isnan(_3636) ? 0.0 : max(_3636, 0.0));
                                float _3639 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
                                float _3640 = dot(vec3(_742, _745, _748), vec3(_3632 * _3626, _3632 * _3627, _3632 * _3628));
                                float _4747 = isnan(0.0) ? _3640 : (isnan(_3640) ? 0.0 : max(_3640, 0.0));
                                float _3643 = isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0));
                                float _3647 = ((_3643 * _3643) * (_3625 + (-1.0))) + 1.0;
                                float _3648 = _3585 * _3624;
                                float _3649 = _3648 * _3648;
                                float _3655 = ((1.0 - _3649) * dot(vec3(_742, _745, _748), vec3(_3572, _3573, _3574))) + _3649;
                                float _4758 = isnan(0.0) ? _3655 : (isnan(_3655) ? 0.0 : max(_3655, 0.0));
                                float _3656 = isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0));
                                float _3657 = 1.0 - _3624;
                                float _3667 = (0.5 / (((_3656 * ((_3639 * _3657) + _3624)) + 9.9999999392252902907785028219223e-09) + (((_3656 * _3657) + _3624) * _3639))) * _3656;
                                float _4769 = isnan(0.0) ? _3667 : (isnan(_3667) ? 0.0 : max(_3667, 0.0));
                                float _3677 = (_3602 * _3579) * (((_3625 * 3.1415927410125732421875) * (isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0)))) / ((_3647 * _3647) * ((_3592 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3603 * _3448.y;
                                frontier_phi_78_pred_1 = _3603 * _3448.x;
                                frontier_phi_78_pred_2 = _3677 * _3460.z;
                                frontier_phi_78_pred_3 = _3677 * _3460.y;
                                frontier_phi_78_pred_4 = _3677 * _3460.x;
                                frontier_phi_78_pred_5 = _3603 * _3448.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3685 = frontier_phi_78_pred;
                            _3684 = frontier_phi_78_pred_1;
                            _3683 = frontier_phi_78_pred_2;
                            _3682 = frontier_phi_78_pred_3;
                            _3681 = frontier_phi_78_pred_4;
                            _3686 = frontier_phi_78_pred_5;
                            _3390 = _3684 + _3403;
                            _3391 = _3685 + _3404;
                            _3392 = _3686 + _3405;
                            _3387 = _3681 + _3400;
                            _3388 = _3682 + _3401;
                            _3389 = _3683 + _3402;
                            if (_3407 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3400 = _3387;
                                _3401 = _3388;
                                _3402 = _3389;
                                _3403 = _3390;
                                _3404 = _3391;
                                _3405 = _3392;
                                _3406 = _3407;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3392;
                        frontier_phi_72_pred_1 = _3391;
                        frontier_phi_72_pred_2 = _3390;
                        frontier_phi_72_pred_3 = _3389;
                        frontier_phi_72_pred_4 = _3388;
                        frontier_phi_72_pred_5 = _3387;
                    }
                    _3060 = frontier_phi_72_pred;
                    _3058 = frontier_phi_72_pred_1;
                    _3056 = frontier_phi_72_pred_2;
                    _3054 = frontier_phi_72_pred_3;
                    _3052 = frontier_phi_72_pred_4;
                    _3050 = frontier_phi_72_pred_5;
                    uint _3195 = _3194 + 1u;
                    if (_3195 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3188 = _3050;
                        _3189 = _3052;
                        _3190 = _3054;
                        _3191 = _3056;
                        _3192 = _3058;
                        _3193 = _3060;
                        _3194 = _3195;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3060;
                frontier_phi_60_61_ladder_1 = _3058;
                frontier_phi_60_61_ladder_2 = _3054;
                frontier_phi_60_61_ladder_3 = _3052;
                frontier_phi_60_61_ladder_4 = _3050;
                frontier_phi_60_61_ladder_5 = _3056;
            }
            else
            {
                frontier_phi_60_61_ladder = _2938;
                frontier_phi_60_61_ladder_1 = _2936;
                frontier_phi_60_61_ladder_2 = _2932;
                frontier_phi_60_61_ladder_3 = _2930;
                frontier_phi_60_61_ladder_4 = _2928;
                frontier_phi_60_61_ladder_5 = _2934;
            }
            _3049 = frontier_phi_60_61_ladder_4;
            _3051 = frontier_phi_60_61_ladder_3;
            _3053 = frontier_phi_60_61_ladder_2;
            _3055 = frontier_phi_60_61_ladder_5;
            _3057 = frontier_phi_60_61_ladder_1;
            _3059 = frontier_phi_60_61_ladder;
        }
        float _3064 = isnan(1.0) ? _801 : (isnan(_801) ? 1.0 : min(_801, 1.0));
        _2832 = (_3064 * _3055) + _2344;
        _2834 = (_3064 * _3057) + _2346;
        _2836 = (_3064 * _3059) + _2348;
        _2838 = ((_3049 * _786) * _3064) + _2682;
        _2840 = ((_3051 * _788) * _3064) + _2684;
        _2842 = ((_3053 * _789) * _3064) + _2686;
    }
    else
    {
        _2832 = _2344;
        _2834 = _2346;
        _2836 = _2348;
        _2838 = _2682;
        _2840 = _2684;
        _2842 = _2686;
    }
    uint _2848 = _762 + uint(cbMatDynParam._m0[0u].w);
    float _2854 = cbInstanceData._m0[_2848].x * (_552 - (_568 * _552));
    float _2855 = cbInstanceData._m0[_2848].y * (_553 - (_568 * _553));
    float _2856 = cbInstanceData._m0[_2848].z * (_554 - (_568 * _554));
    float _4785 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _4796 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _4807 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _2873 = (((isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0))) * (_2832 + ((isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0))) * _801))) + ((_2838 + ((isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0))) * _1610)) * cbPerFrame._m0[3u].x)) + _2854;
    float _2875 = (_2855 + ((_2840 + ((isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0))) * _1610)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0))) * (_2834 + ((isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0))) * _801)));
    float _2877 = (_2856 + ((_2842 + ((isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0))) * _1610)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0))) * (_2836 + ((isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0))) * _801)));
    float _4833 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2890 = isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0));
    uint _2891 = _761 + 6u;
    float _2899 = _721 / cbSceneParam._m0[86u].x;
    float _2900 = _722 / cbSceneParam._m0[86u].y;
    vec4 _2914 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2899, _2900, (log2((isnan(cbSceneParam._m0[77u].w) ? _656 : (isnan(_656) ? cbSceneParam._m0[77u].w : min(_656, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2916 = _2914.x;
    float _2917 = _2914.y;
    float _2918 = _2914.z;
    float _2919 = _2914.w;
    float _2990;
    float _2992;
    float _2994;
    float _2996;
    if (_656 > cbSceneParam._m0[78u].w)
    {
        float _2953 = isnan(_656) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _656 : min(cbSceneParam._m0[80u].w, _656));
        float _2954 = _2953 / _656;
        float _2965 = _2954 * _706;
        float _2966 = _707 * _2954;
        float _2967 = (-0.0) - _2966;
        float _2968 = _2954 * _708;
        float _2970 = (cbSceneParam._m0[77u].w * _2967) / _2953;
        float _2971 = _2970 + cbSceneParam._m0[79u].w;
        float _2972 = cbSceneParam._m0[79u].w - _2966;
        float _2978 = sqrt(((_2965 * _2965) + (_2966 * _2966)) + (_2968 * _2968));
        float _2981 = (1.0 - (cbSceneParam._m0[77u].w / _2953)) * _2978;
        float _2986 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2988 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3150;
        if (abs((_2967 - _2970) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3150 = ((((_2971 > 0.0) ? exp2(_2986 * _2971) : (2.0 - exp2(_2988 * _2971))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2981;
        }
        else
        {
            float _3110 = 1.0 / cbSceneParam._m0[80u].x;
            float _3111 = isnan(_2972) ? _2971 : (isnan(_2971) ? _2972 : max(_2971, _2972));
            float _3112 = isnan(_2972) ? _2971 : (isnan(_2971) ? _2972 : min(_2971, _2972));
            float _3121 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : min(_3111, 0.0));
            float _3122 = isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : min(_3112, 0.0));
            _3150 = ((abs(_2978 / _2967) * cbSceneParam._m0[80u].y) * ((((_3121 - _3122) * 2.0) - ((exp2(_2986 * (isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0)))) - exp2(_2986 * (isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : max(_3112, 0.0))))) * _3110)) - ((exp2(_2988 * _3121) - exp2(_2988 * _3122)) * _3110))) + (_2981 * cbSceneParam._m0[80u].z);
        }
        vec4 _3152 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2899, _2900, 1.0), 0.0);
        float _3161 = exp2((_3150 * (-1.44269502162933349609375)) * (1.0 - _3152.w));
        float _3162 = log2(_3161);
        float _3178 = log2(_2919);
        _2990 = (exp2(_3178 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3162 * cbSceneParam._m0[78u].x)) * _3152.x) / cbSceneParam._m0[78u].x)) + _2916;
        _2992 = (exp2(_3178 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3162 * cbSceneParam._m0[78u].y)) * _3152.y) / cbSceneParam._m0[78u].y)) + _2917;
        _2994 = (exp2(_3178 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3162 * cbSceneParam._m0[78u].z)) * _3152.z) / cbSceneParam._m0[78u].z)) + _2918;
        _2996 = _3161 * _2919;
    }
    else
    {
        _2990 = _2916;
        _2992 = _2917;
        _2994 = _2918;
        _2996 = _2919;
    }
    float _3008 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3009 = _3008 == 3.0;
    float _3010 = log2(_2996);
    float _3014 = exp2(_3010 * cbSceneParam._m0[78u].x);
    float _3015 = exp2(_3010 * cbSceneParam._m0[78u].y);
    float _3016 = exp2(_3010 * cbSceneParam._m0[78u].z);
    float _3017 = _3014 * (isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0)));
    float _3018 = _3015 * (isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0)));
    float _3019 = _3016 * (isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : max(_2877, 0.0)));
    float _3028 = (_3008 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3028 * (_3009 ? _3017 : (_3017 + (cbSceneParam._m0[72u].w * _2990)));
    SV_Target.y = _3028 * (_3009 ? _3018 : (_3018 + (cbSceneParam._m0[72u].w * _2992)));
    SV_Target.z = _3028 * (_3009 ? _3019 : (_3019 + (cbSceneParam._m0[72u].w * _2994)));
    SV_Target.w = cbInstanceData._m0[_2891].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2854) * _2890) * _3014) * _3028;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2855) * _2890) * _3015) * _3028;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2856) * _2890) * _3016) * _3028;
    SV_Target_1.w = cbInstanceData._m0[_2891].w;
}


