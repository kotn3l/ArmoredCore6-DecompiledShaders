#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _846;
float _3242;
float _3243;
float _3244;
float _3245;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _188 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _195 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _202 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _225 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _231 = _225.x * cbMtdParam._m0[9u].x;
    float _232 = _225.y * cbMtdParam._m0[9u].y;
    float _233 = _225.z * cbMtdParam._m0[9u].z;
    vec4 _245 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _249 = _245.z;
    float _253 = (_245.x * 2.0) + (-1.0);
    float _255 = (_245.y * 2.0) + (-1.0);
    float _256 = dot(vec2(_253, _255), vec2(_253, _255));
    float _3254 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _262 = sqrt(1.0 - (isnan(1.0) ? _3254 : (isnan(_3254) ? 1.0 : min(_3254, 1.0))));
    float _265 = fma(_262, _195 * NORMAL.x, fma(_255, _202 * TANGENT.x, (_188 * _180) * _253));
    float _268 = fma(_262, _195 * NORMAL.y, fma(_255, _202 * TANGENT.y, (_188 * _181) * _253));
    float _271 = fma(_262, _195 * NORMAL.z, fma(_255, _202 * TANGENT.z, (_188 * _182) * _253));
    float _275 = inversesqrt(dot(vec3(_265, _268, _271), vec3(_265, _268, _271)));
    float _276 = _275 * _265;
    float _277 = _275 * _268;
    float _278 = _275 * _271;
    float _3265 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _279 = isnan(1.0) ? _3265 : (isnan(_3265) ? 1.0 : min(_3265, 1.0));
    float _3276 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _3287 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3298 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _298 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _341 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _351 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _341);
    float _352 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _341);
    float _353 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _341);
    float _357 = inversesqrt(dot(vec3(_351, _352, _353), vec3(_351, _352, _353)));
    float _358 = _351 * _357;
    float _359 = _352 * _357;
    float _360 = _353 * _357;
    vec4 _365 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _367 = _365.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _525 = sqrt(((_351 * _351) + (_352 * _352)) + (_353 * _353));
        float _531 = (cbMatDynParam._m0[5u].x * _525) + cbMatDynParam._m0[5u].y;
        float _3309 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
        float _532 = isnan(1.0) ? _3309 : (isnan(_3309) ? 1.0 : min(_3309, 1.0));
        float _536 = (cbMatDynParam._m0[5u].z * _525) + cbMatDynParam._m0[5u].w;
        float _3320 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3320 : (isnan(_3320) ? 1.0 : min(_3320, 1.0))) - _532)) + _532) < ((_367 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _379 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _380 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _400 = fma(_278, cbSceneParam._m0[5u].z, fma(_277, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _276));
    float _403 = fma(_278, cbSceneParam._m0[6u].z, fma(_277, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _276));
    float _406 = fma(_278, cbSceneParam._m0[7u].z, fma(_277, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _276));
    uint _419 = uint(roundEven(NORMAL.w)) * 13u;
    uint _421 = _419 + 9u;
    uint _422 = _421 + uint(cbMatDynParam._m0[0u].w);
    float _428 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3276 : (isnan(_3276) ? 1.0 : min(_3276, 1.0)))) * cbInstanceData._m0[_422].x;
    float _429 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3287 : (isnan(_3287) ? 1.0 : min(_3287, 1.0)))) * cbInstanceData._m0[_422].y;
    float _430 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3298 : (isnan(_3298) ? 1.0 : min(_3298, 1.0)))) * cbInstanceData._m0[_422].z;
    float _3331 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _431 = isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0));
    float _3342 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _432 = isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0));
    float _3353 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _433 = isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0));
    vec4 _442 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _379, cbSceneParam._m0[86u].y * _380));
    float _445 = _442.x * TEXCOORD_3.w;
    float _446 = dot(vec3(_276, _277, _278), vec3(_358, _359, _360));
    float _449 = _446 * 2.0;
    float _453 = (_449 * _276) - _358;
    float _454 = (_449 * _277) - _359;
    float _455 = (_449 * _278) - _360;
    float _459 = abs(dot(vec3(_358, _359, _360), vec3(_276, _277, _278)));
    float _3364 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _461 = sqrt(_279);
    float _474 = exp2((_461 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_461 * 3.0));
    float _506 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _510 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _514 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _845;
    float _847;
    float _848;
    float _849;
    float _850;
    float _851;
    float _852;
    float _853;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _570 = fma(_514, cbModelParam._m0[26u].z, fma(_510, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _506));
        float _574 = fma(_514, cbModelParam._m0[27u].z, fma(_510, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _506));
        float _578 = fma(_514, cbModelParam._m0[28u].z, fma(_510, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _506));
        float _603 = _506 + _276;
        float _604 = _510 + _277;
        float _605 = _514 + _278;
        float _615 = fma(_605, cbModelParam._m0[26u].z, fma(_604, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _603)) - _570;
        float _616 = fma(_605, cbModelParam._m0[27u].z, fma(_604, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _603)) - _574;
        float _617 = fma(_605, cbModelParam._m0[28u].z, fma(_604, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _603)) - _578;
        float _621 = inversesqrt(dot(vec3(_615, _616, _617), vec3(_615, _616, _617)));
        float _634 = ((_621 * _615) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_570 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _635 = ((_621 * _616) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_574 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _636 = ((_621 * _617) / cbModelParam._m0[34u].z) + ((((((_578 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _639 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_634, _635, _636), 0.0);
        vec4 _646 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_634, _635, _636), 0.0);
        vec4 _653 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_634, _635, _636), 0.0);
        vec4 _660 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_634, _635, _636), 0.0);
        float _673 = exp2((_639.w + (-0.5)) * 20.0) * 2.0;
        float _674 = _673 * (_639.x + (-0.5));
        float _675 = _673 * (_639.y + (-0.5));
        float _676 = _673 * (_639.z + (-0.5));
        float _683 = exp2((_646.w + (-0.5)) * 20.0) * 2.0;
        float _684 = _683 * (_646.x + (-0.5));
        float _685 = _683 * (_646.y + (-0.5));
        float _686 = _683 * (_646.z + (-0.5));
        float _693 = exp2((_653.w + (-0.5)) * 20.0) * 2.0;
        float _694 = _693 * (_653.x + (-0.5));
        float _695 = _693 * (_653.y + (-0.5));
        float _696 = _693 * (_653.z + (-0.5));
        float _703 = exp2((_660.w + (-0.5)) * 20.0) * 2.0;
        float _704 = _703 * (_660.x + (-0.5));
        float _705 = _703 * (_660.y + (-0.5));
        float _706 = _703 * (_660.z + (-0.5));
        float _707 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
        float _708 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
        float _709 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
        float _710 = _674 * 0.5;
        float _711 = _684 * 0.5;
        float _712 = _694 * 0.5;
        float _713 = dot(vec3(_710, _711, _712), vec3(_710, _711, _712));
        float _718 = (_713 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_713);
        float _727 = (dot(vec3(_276, _277, _278), vec3(_718 * _710, _718 * _711, _718 * _712)) + 1.0) * 0.5;
        float _3390 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
        float _737 = sqrt(((_711 * _711) + (_710 * _710)) + (_712 * _712)) / (_707 + 9.9999997473787516355514526367188e-06);
        float _3401 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
        float _738 = isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0));
        float _739 = _738 * 2.0;
        float _743 = (1.0 - _738) / (_738 + 1.0);
        float _3412 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
        float _744 = isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0));
        float _753 = ((((1.0 - _744) * (_739 + 2.0)) * exp2(log2(isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0))) * (_739 + 1.0))) + _744) * _707;
        float _754 = _675 * 0.5;
        float _755 = _685 * 0.5;
        float _756 = _695 * 0.5;
        float _757 = dot(vec3(_754, _755, _756), vec3(_754, _755, _756));
        float _762 = (_757 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_757);
        float _770 = (dot(vec3(_276, _277, _278), vec3(_762 * _754, _762 * _755, _762 * _756)) + 1.0) * 0.5;
        float _3423 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _779 = sqrt(((_755 * _755) + (_754 * _754)) + (_756 * _756)) / (_708 + 9.9999997473787516355514526367188e-06);
        float _3434 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
        float _780 = isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0));
        float _781 = _780 * 2.0;
        float _785 = (1.0 - _780) / (_780 + 1.0);
        float _3445 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
        float _786 = isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0));
        float _795 = ((((1.0 - _786) * (_781 + 2.0)) * exp2(log2(isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0))) * (_781 + 1.0))) + _786) * _708;
        float _796 = _676 * 0.5;
        float _797 = _686 * 0.5;
        float _798 = _696 * 0.5;
        float _799 = dot(vec3(_796, _797, _798), vec3(_796, _797, _798));
        float _804 = (_799 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_799);
        float _812 = (dot(vec3(_276, _277, _278), vec3(_804 * _796, _804 * _797, _804 * _798)) + 1.0) * 0.5;
        float _3456 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
        float _821 = sqrt(((_797 * _797) + (_796 * _796)) + (_798 * _798)) / (_709 + 9.9999997473787516355514526367188e-06);
        float _3467 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
        float _822 = isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0));
        float _823 = _822 * 2.0;
        float _827 = (1.0 - _822) / (_822 + 1.0);
        float _3478 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _828 = isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0));
        float _837 = ((((1.0 - _828) * (_823 + 2.0)) * exp2(log2(isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0))) * (_823 + 1.0))) + _828) * _709;
        _845 = _676;
        _847 = _675;
        _848 = _674;
        _849 = _686;
        _850 = _685;
        _851 = _684;
        _852 = _696;
        _853 = _695;
        _854 = _694;
        _855 = _709;
        _856 = _708;
        _857 = _707;
        _858 = cbModelParam._m0[36u].z * (isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0)));
        _859 = cbModelParam._m0[36u].z * (isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0)));
        _860 = cbModelParam._m0[36u].z * (isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0)));
    }
    else
    {
        _845 = _846;
        _847 = _846;
        _848 = _846;
        _849 = _846;
        _850 = _846;
        _851 = _846;
        _852 = _846;
        _853 = _846;
        _854 = _846;
        _855 = _846;
        _856 = _846;
        _857 = _846;
        _858 = 0.0;
        _859 = 0.0;
        _860 = 0.0;
    }
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _889 = fma(_514, cbModelParam._m0[30u].z, fma(_510, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _506));
        float _893 = fma(_514, cbModelParam._m0[31u].z, fma(_510, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _506));
        float _897 = fma(_514, cbModelParam._m0[32u].z, fma(_510, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _506));
        float _920 = _506 + _276;
        float _921 = _510 + _277;
        float _922 = _514 + _278;
        float _932 = fma(_922, cbModelParam._m0[30u].z, fma(_921, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _920)) - _889;
        float _933 = fma(_922, cbModelParam._m0[31u].z, fma(_921, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _920)) - _893;
        float _934 = fma(_922, cbModelParam._m0[32u].z, fma(_921, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _920)) - _897;
        float _938 = inversesqrt(dot(vec3(_932, _933, _934), vec3(_932, _933, _934)));
        float _951 = ((_938 * _932) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_889 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _952 = ((_938 * _933) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_893 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _953 = ((_938 * _934) / cbModelParam._m0[35u].z) + ((((((_897 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _955 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_951, _952, _953), 0.0);
        vec4 _962 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_951, _952, _953), 0.0);
        vec4 _969 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_951, _952, _953), 0.0);
        vec4 _976 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_951, _952, _953), 0.0);
        float _988 = exp2((_955.w + (-0.5)) * 20.0) * 2.0;
        float _989 = _988 * (_955.x + (-0.5));
        float _990 = _988 * (_955.y + (-0.5));
        float _991 = _988 * (_955.z + (-0.5));
        float _998 = exp2((_962.w + (-0.5)) * 20.0) * 2.0;
        float _999 = _998 * (_962.x + (-0.5));
        float _1000 = _998 * (_962.y + (-0.5));
        float _1001 = _998 * (_962.z + (-0.5));
        float _1008 = exp2((_969.w + (-0.5)) * 20.0) * 2.0;
        float _1009 = _1008 * (_969.x + (-0.5));
        float _1010 = _1008 * (_969.y + (-0.5));
        float _1011 = _1008 * (_969.z + (-0.5));
        float _1018 = exp2((_976.w + (-0.5)) * 20.0) * 2.0;
        float _1019 = _1018 * (_976.x + (-0.5));
        float _1020 = _1018 * (_976.y + (-0.5));
        float _1021 = _1018 * (_976.z + (-0.5));
        float _1022 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1023 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1024 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1025 = _989 * 0.5;
        float _1026 = _999 * 0.5;
        float _1027 = _1009 * 0.5;
        float _1028 = dot(vec3(_1025, _1026, _1027), vec3(_1025, _1026, _1027));
        float _1033 = (_1028 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1028);
        float _1041 = (dot(vec3(_276, _277, _278), vec3(_1033 * _1025, _1033 * _1026, _1033 * _1027)) + 1.0) * 0.5;
        float _3519 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1050 = sqrt(((_1026 * _1026) + (_1025 * _1025)) + (_1027 * _1027)) / (_1022 + 9.9999997473787516355514526367188e-06);
        float _3530 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1051 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
        float _1052 = _1051 * 2.0;
        float _1056 = (1.0 - _1051) / (_1051 + 1.0);
        float _3541 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1057 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
        float _1066 = ((((1.0 - _1057) * (_1052 + 2.0)) * exp2(log2(isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0))) * (_1052 + 1.0))) + _1057) * _1022;
        float _1067 = _990 * 0.5;
        float _1068 = _1000 * 0.5;
        float _1069 = _1010 * 0.5;
        float _1070 = dot(vec3(_1067, _1068, _1069), vec3(_1067, _1068, _1069));
        float _1075 = (_1070 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1070);
        float _1083 = (dot(vec3(_276, _277, _278), vec3(_1075 * _1067, _1075 * _1068, _1075 * _1069)) + 1.0) * 0.5;
        float _3552 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1092 = sqrt(((_1068 * _1068) + (_1067 * _1067)) + (_1069 * _1069)) / (_1023 + 9.9999997473787516355514526367188e-06);
        float _3563 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0));
        float _1094 = _1093 * 2.0;
        float _1098 = (1.0 - _1093) / (_1093 + 1.0);
        float _3574 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
        float _1108 = ((((1.0 - _1099) * (_1094 + 2.0)) * exp2(log2(isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0))) * (_1094 + 1.0))) + _1099) * _1023;
        float _1109 = _991 * 0.5;
        float _1110 = _1001 * 0.5;
        float _1111 = _1011 * 0.5;
        float _1112 = dot(vec3(_1109, _1110, _1111), vec3(_1109, _1110, _1111));
        float _1117 = (_1112 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1112);
        float _1125 = (dot(vec3(_276, _277, _278), vec3(_1117 * _1109, _1117 * _1110, _1117 * _1111)) + 1.0) * 0.5;
        float _3585 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1134 = sqrt(((_1110 * _1110) + (_1109 * _1109)) + (_1111 * _1111)) / (_1024 + 9.9999997473787516355514526367188e-06);
        float _3596 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
        float _1136 = _1135 * 2.0;
        float _1140 = (1.0 - _1135) / (_1135 + 1.0);
        float _3607 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
        float _1150 = ((((1.0 - _1141) * (_1136 + 2.0)) * exp2(log2(isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0))) * (_1136 + 1.0))) + _1141) * _1024;
        _1158 = _991;
        _1159 = _990;
        _1160 = _989;
        _1161 = _1001;
        _1162 = _1000;
        _1163 = _999;
        _1164 = _1011;
        _1165 = _1010;
        _1166 = _1009;
        _1167 = _1024;
        _1168 = _1023;
        _1169 = _1022;
        _1170 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0)));
        _1171 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0)));
        _1172 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0)));
    }
    else
    {
        _1158 = _846;
        _1159 = _846;
        _1160 = _846;
        _1161 = _846;
        _1162 = _846;
        _1163 = _846;
        _1164 = _846;
        _1165 = _846;
        _1166 = _846;
        _1167 = _846;
        _1168 = _846;
        _1169 = _846;
        _1170 = 0.0;
        _1171 = 0.0;
        _1172 = 0.0;
    }
    float _1182 = (cbModelParam._m0[1u].x * (_1170 - _858)) + _858;
    float _1183 = (cbModelParam._m0[1u].x * (_1171 - _859)) + _859;
    float _1184 = (cbModelParam._m0[1u].x * (_1172 - _860)) + _860;
    float _1205 = fma(_1184, cbSceneParam._m0[89u].z, fma(_1183, cbSceneParam._m0[89u].y, _1182 * cbSceneParam._m0[89u].x));
    float _1208 = fma(_1184, cbSceneParam._m0[90u].z, fma(_1183, cbSceneParam._m0[90u].y, _1182 * cbSceneParam._m0[90u].x));
    float _1211 = fma(_1184, cbSceneParam._m0[91u].z, fma(_1183, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1182));
    float _1226 = _453 * 0.5;
    float _1227 = _454 * 0.5;
    float _1228 = _455 * 0.5;
    float _1229 = dot(vec4(_1226, _1227, _1228, 1.0), vec4(_1160, _1163, _1166, _1169));
    float _1232 = dot(vec4(_1226, _1227, _1228, 1.0), vec4(_1159, _1162, _1165, _1168));
    float _1235 = dot(vec4(_1226, _1227, _1228, 1.0), vec4(_1158, _1161, _1164, _1167));
    float _1269;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1242 = dot(vec4(_1226, _1227, _1228, 1.0), vec4(_845, _849, _852, _855));
        float _1246 = dot(vec4(_1226, _1227, _1228, 1.0), vec4(_847, _850, _853, _856));
        float _1250 = dot(vec4(_1226, _1227, _1228, 1.0), vec4(_848, _851, _854, _857));
        float _1257 = dot(vec4(cbModelParam._m0[39u]), vec4(_1226, _1227, _1228, 1.0));
        _1269 = dot(vec3(isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0)), isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0)), isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1257) ? 0.0 : (isnan(0.0) ? _1257 : max(0.0, _1257))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1269 = 1.0;
    }
    float _1280;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1271 = dot(vec4(cbModelParam._m0[40u]), vec4(_1226, _1227, _1228, 1.0));
        _1280 = dot(vec3(isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0)), isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0)), isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1271) ? 0.0 : (isnan(0.0) ? _1271 : max(0.0, _1271))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1280 = 1.0;
    }
    float _1284 = (_1280 * cbModelParam._m0[1u].x) + (_1269 * (1.0 - cbModelParam._m0[1u].x));
    float _1294 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _279);
    float _1295 = isnan(_1294) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1294 : min(cbModelParam._m0[25u].z, _1294));
    float _1377;
    float _1379;
    float _1381;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1344 = fma(_514, cbModelParam._m0[13u].z, fma(_510, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _506)) + cbModelParam._m0[13u].w;
        float _1348 = fma(_514, cbModelParam._m0[14u].z, fma(_510, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _506)) + cbModelParam._m0[14u].w;
        float _1352 = fma(_514, cbModelParam._m0[15u].z, fma(_510, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _506)) + cbModelParam._m0[15u].w;
        float _1355 = fma(_455, cbModelParam._m0[13u].z, fma(_454, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _453));
        float _1358 = fma(_455, cbModelParam._m0[14u].z, fma(_454, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _453));
        float _1361 = fma(_455, cbModelParam._m0[15u].z, fma(_454, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _453));
        float _1389;
        if (_1355 > 0.0)
        {
            _1389 = abs((1.0 - _1344) / _1355);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1355 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1344 + 1.0) / _1355);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1389 = frontier_phi_17_15_ladder;
        }
        float _1616;
        if (_1358 > 0.0)
        {
            _1616 = abs((1.0 - _1348) / _1358);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1358 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1348 + 1.0) / _1358);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1616 = frontier_phi_26_22_ladder;
        }
        float _1862;
        if (_1361 > 0.0)
        {
            _1862 = abs((1.0 - _1352) / _1361);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1361 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1352 + 1.0) / _1361);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1862 = frontier_phi_38_33_ladder;
        }
        float _1864 = isnan(_1616) ? _1389 : (isnan(_1389) ? _1616 : min(_1389, _1616));
        float _1865 = isnan(_1862) ? _1864 : (isnan(_1864) ? _1862 : min(_1864, _1862));
        float _1869 = (_1865 * _1355) + _1344;
        float _1870 = (_1865 * _1358) + _1348;
        float _1871 = (_1865 * _1361) + _1352;
        float _1872 = _1865 * 9.9999997473787516355514526367188e-05;
        float _1874 = (-1.0) - _1872;
        float _1876 = _1872 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1871 > _1876) || ((_1871 < _1874) || ((_1870 > _1876) || ((_1870 < _1874) || ((_1869 < _1874) || (_1869 > _1876))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1995 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1871, cbModelParam._m0[9u].z, fma(_1870, cbModelParam._m0[9u].y, _1869 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1871, cbModelParam._m0[10u].z, fma(_1870, cbModelParam._m0[10u].y, _1869 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1871, cbModelParam._m0[11u].z, fma(_1870, cbModelParam._m0[11u].y, _1869 * cbModelParam._m0[11u].x))), _1295);
            frontier_phi_16_38_ladder = _1995.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1995.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1995.x * cbModelParam._m0[1u].y;
        }
        _1377 = frontier_phi_16_38_ladder_2;
        _1379 = frontier_phi_16_38_ladder_1;
        _1381 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1365 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_453, _454, _455), _1295);
        _1377 = _1365.x * cbModelParam._m0[1u].y;
        _1379 = _1365.y * cbModelParam._m0[1u].y;
        _1381 = _1365.z * cbModelParam._m0[1u].y;
    }
    float _1385 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _279);
    float _1386 = isnan(_1385) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1385 : min(cbModelParam._m0[25u].w, _1385));
    float _1479;
    float _1481;
    float _1483;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1443 = fma(_514, cbModelParam._m0[21u].z, fma(_510, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _506)) + cbModelParam._m0[21u].w;
        float _1447 = fma(_514, cbModelParam._m0[22u].z, fma(_510, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _506)) + cbModelParam._m0[22u].w;
        float _1451 = fma(_514, cbModelParam._m0[23u].z, fma(_510, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _506)) + cbModelParam._m0[23u].w;
        float _1454 = fma(_455, cbModelParam._m0[21u].z, fma(_454, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _453));
        float _1457 = fma(_455, cbModelParam._m0[22u].z, fma(_454, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _453));
        float _1460 = fma(_455, cbModelParam._m0[23u].z, fma(_454, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _453));
        float _1621;
        if (_1454 > 0.0)
        {
            _1621 = abs((1.0 - _1443) / _1454);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1454 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1443 + 1.0) / _1454);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1621 = frontier_phi_28_24_ladder;
        }
        float _1889;
        if (_1457 > 0.0)
        {
            _1889 = abs((1.0 - _1447) / _1457);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1457 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1447 + 1.0) / _1457);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1889 = frontier_phi_40_35_ladder;
        }
        float _2094;
        if (_1460 > 0.0)
        {
            _2094 = abs((1.0 - _1451) / _1460);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1460 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1451 + 1.0) / _1460);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2094 = frontier_phi_49_46_ladder;
        }
        float _2096 = isnan(_1889) ? _1621 : (isnan(_1621) ? _1889 : min(_1621, _1889));
        float _2097 = isnan(_2094) ? _2096 : (isnan(_2096) ? _2094 : min(_2096, _2094));
        float _2101 = (_2097 * _1454) + _1443;
        float _2102 = (_2097 * _1457) + _1447;
        float _2103 = (_2097 * _1460) + _1451;
        float _2104 = _2097 * 9.9999997473787516355514526367188e-05;
        float _2105 = (-1.0) - _2104;
        float _2107 = _2104 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2103 > _2107) || ((_2103 < _2105) || ((_2102 > _2107) || ((_2102 < _2105) || ((_2101 < _2105) || (_2101 > _2107))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2305 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2103, cbModelParam._m0[17u].z, fma(_2102, cbModelParam._m0[17u].y, _2101 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2103, cbModelParam._m0[18u].z, fma(_2102, cbModelParam._m0[18u].y, _2101 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2103, cbModelParam._m0[19u].z, fma(_2102, cbModelParam._m0[19u].y, _2101 * cbModelParam._m0[19u].x))), _1386);
            frontier_phi_25_49_ladder = _2305.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2305.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2305.x * cbModelParam._m0[1u].z;
        }
        _1479 = frontier_phi_25_49_ladder_2;
        _1481 = frontier_phi_25_49_ladder_1;
        _1483 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1463 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_453, _454, _455), _1386);
        _1479 = _1463.x * cbModelParam._m0[1u].z;
        _1481 = _1463.y * cbModelParam._m0[1u].z;
        _1483 = _1463.z * cbModelParam._m0[1u].z;
    }
    float _1495 = ((((1.0 - _474) * ((_461 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_474 * _461)) * _445;
    float _1496 = _1495 * ((cbModelParam._m0[1u].w * (_1479 - _1377)) + _1377);
    float _1497 = _1495 * ((cbModelParam._m0[1u].w * (_1481 - _1379)) + _1379);
    float _1498 = _1495 * ((cbModelParam._m0[1u].w * (_1483 - _1381)) + _1381);
    float _1501 = fma(_1498, cbSceneParam._m0[89u].z, fma(_1497, cbSceneParam._m0[89u].y, _1496 * cbSceneParam._m0[89u].x));
    float _1504 = fma(_1498, cbSceneParam._m0[90u].z, fma(_1497, cbSceneParam._m0[90u].y, _1496 * cbSceneParam._m0[90u].x));
    float _1507 = fma(_1498, cbSceneParam._m0[91u].z, fma(_1497, cbSceneParam._m0[91u].y, _1496 * cbSceneParam._m0[91u].x));
    vec4 _1515 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_379, _380));
    float _1517 = _1515.w;
    float _1529 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1517);
    float _1530 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1517);
    float _1531 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1517);
    uvec4 _1535 = floatBitsToUint(cbInstanceData._m0[_419 + 5u]);
    uint _1537 = _1535.x * 14u;
    uint _1538 = _1537 + 13u;
    float _1545 = _445 + (-1.0);
    float _1550 = (cbLight._m0[_1538].x * _1545) + 1.0;
    float _1551 = (cbLight._m0[_1538].y * _1545) + 1.0;
    float _1552 = (cbLight._m0[_1538].z * _1545) + 1.0;
    float _1553 = (cbLight._m0[_1538].w * _1545) + 1.0;
    uint _1554 = _1537 + 5u;
    float _1560 = isnan(1.0) ? _1551 : (isnan(_1551) ? 1.0 : min(_1551, 1.0));
    uint _1564 = _1537 + 4u;
    float _1574 = isnan(1.0) ? _1550 : (isnan(_1550) ? 1.0 : min(_1550, 1.0));
    uint _1578 = _1537 | 1u;
    float _1589 = dot(vec3(cbLight._m0[_1537].xyz), vec3(_276, _277, _278));
    float _1592 = dot(vec3(cbLight._m0[_1578].xyz), vec3(_276, _277, _278));
    float _3743 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
    float _3754 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
    float _1597 = (isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0))) * 0.3183098733425140380859375;
    float _1599 = (isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0))) * 0.3183098733425140380859375;
    float _1606 = ((cbLight._m0[_1554].x * _1560) * _1599) + (((cbLight._m0[_1564].x * _1529) * _1574) * _1597);
    float _1607 = ((_1560 * cbLight._m0[_1554].y) * _1599) + (((cbLight._m0[_1564].y * _1530) * _1574) * _1597);
    float _1608 = ((_1560 * cbLight._m0[_1554].z) * _1599) + (((cbLight._m0[_1564].z * _1531) * _1574) * _1597);
    uvec4 _1613 = floatBitsToUint(cbLight._m0[_1537 + 12u]);
    bool _1615 = _1613.x == 0u;
    float _1626;
    float _1628;
    float _1630;
    if (_1615)
    {
        _1626 = _1606;
        _1628 = _1607;
        _1630 = _1608;
    }
    else
    {
        uint _1634 = _1537 + 6u;
        float _1650 = (dot(vec3(cbLight._m0[_1537 + 2u].xyz), vec3(_276, _277, _278)) * 0.5) + 0.5;
        float _1651 = _1650 * _1650;
        float _3765 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1652 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
        float _1653 = isnan(1.0) ? _1552 : (isnan(_1552) ? 1.0 : min(_1552, 1.0));
        _1626 = (((cbLight._m0[_1634].x * 0.3183098733425140380859375) * _1652) * _1653) + _1606;
        _1628 = (((cbLight._m0[_1634].y * 0.3183098733425140380859375) * _1652) * _1653) + _1607;
        _1630 = (((cbLight._m0[_1634].z * 0.3183098733425140380859375) * _1652) * _1653) + _1608;
    }
    bool _1633 = _1613.y == 0u;
    float _1671;
    float _1673;
    float _1675;
    if (_1633)
    {
        _1671 = _1626;
        _1673 = _1628;
        _1675 = _1630;
    }
    else
    {
        uint _1833 = _1537 + 7u;
        float _1849 = (dot(vec3(cbLight._m0[_1537 + 3u].xyz), vec3(_276, _277, _278)) * 0.5) + 0.5;
        float _1850 = _1849 * _1849;
        float _3781 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
        float _1851 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
        float _1852 = isnan(1.0) ? _1553 : (isnan(_1553) ? 1.0 : min(_1553, 1.0));
        _1671 = (((cbLight._m0[_1833].x * 0.3183098733425140380859375) * _1851) * _1852) + _1626;
        _1673 = (((cbLight._m0[_1833].y * 0.3183098733425140380859375) * _1851) * _1852) + _1628;
        _1675 = (((cbLight._m0[_1833].z * 0.3183098733425140380859375) * _1851) * _1852) + _1630;
    }
    uint _1678 = _1537 + 8u;
    float _1691 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1537].w)) * _279) * 0.949999988079071044921875);
    float _1692 = _1691 * _1691;
    float _1693 = cbLight._m0[_1537].x + _358;
    float _1694 = cbLight._m0[_1537].y + _359;
    float _1695 = cbLight._m0[_1537].z + _360;
    float _1699 = inversesqrt(dot(vec3(_1693, _1694, _1695), vec3(_1693, _1694, _1695)));
    float _1700 = _1699 * _1693;
    float _1701 = _1699 * _1694;
    float _1702 = _1699 * _1695;
    float _1703 = dot(vec3(_276, _277, _278), vec3(cbLight._m0[_1537].xyz));
    float _3797 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
    float _1706 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
    float _3808 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _1707 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
    float _1708 = dot(vec3(_276, _277, _278), vec3(_1700, _1701, _1702));
    float _3819 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
    float _1711 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
    float _1712 = dot(vec3(cbLight._m0[_1537].xyz), vec3(_1700, _1701, _1702));
    float _3830 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
    float _1716 = _1692 * _1692;
    float _1720 = ((_1711 * _1711) * (_1716 + (-1.0))) + 1.0;
    float _1731 = (exp2(log2(1.0 - (isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1732 = 1.0 - _1692;
    float _1743 = (0.5 / (((_1707 * ((_1706 * _1732) + _1692)) + 9.9999999392252902907785028219223e-09) + (((_1707 * _1732) + _1692) * _1706))) * _1706;
    float _3841 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
    float _1745 = (isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0))) * (_1716 / ((_1720 * _1720) * 3.141590118408203125));
    uint _1759 = _1537 + 9u;
    float _1770 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1578].w)) * _279) * 0.949999988079071044921875);
    float _1771 = _1770 * _1770;
    float _1772 = cbLight._m0[_1578].x + _358;
    float _1773 = cbLight._m0[_1578].y + _359;
    float _1774 = cbLight._m0[_1578].z + _360;
    float _1778 = inversesqrt(dot(vec3(_1772, _1773, _1774), vec3(_1772, _1773, _1774)));
    float _1779 = _1778 * _1772;
    float _1780 = _1778 * _1773;
    float _1781 = _1778 * _1774;
    float _1782 = dot(vec3(_276, _277, _278), vec3(cbLight._m0[_1578].xyz));
    float _3852 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
    float _1785 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
    float _1786 = dot(vec3(_276, _277, _278), vec3(_1779, _1780, _1781));
    float _3863 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
    float _1789 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
    float _1790 = dot(vec3(cbLight._m0[_1578].xyz), vec3(_1779, _1780, _1781));
    float _3874 = isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0));
    float _1794 = _1771 * _1771;
    float _1798 = ((_1789 * _1789) * (_1794 + (-1.0))) + 1.0;
    float _1807 = (exp2(log2(1.0 - (isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1808 = 1.0 - _1771;
    float _1818 = (0.5 / (((_1707 * ((_1785 * _1808) + _1771)) + 9.9999999392252902907785028219223e-09) + (((_1707 * _1808) + _1771) * _1785))) * _1785;
    float _3885 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
    float _1820 = (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) * (_1794 / ((_1798 * _1798) * 3.141590118408203125));
    float _1830 = (((_1807 * cbLight._m0[_1759].x) * _1820) * _1560) + ((((cbLight._m0[_1678].x * _1529) * _1731) * _1745) * _1574);
    float _1831 = (((_1807 * cbLight._m0[_1759].y) * _1820) * _1560) + ((((cbLight._m0[_1678].y * _1530) * _1731) * _1745) * _1574);
    float _1832 = (((_1807 * cbLight._m0[_1759].z) * _1820) * _1560) + ((((cbLight._m0[_1678].z * _1531) * _1731) * _1745) * _1574);
    float _1894;
    float _1896;
    float _1898;
    if (_1615)
    {
        _1894 = _1830;
        _1896 = _1831;
        _1898 = _1832;
    }
    else
    {
        uint _1900 = _1537 + 2u;
        uint _1904 = _1537 + 10u;
        float _1918 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1900].w)) * _279) * 0.949999988079071044921875);
        float _1919 = _1918 * _1918;
        float _1920 = cbLight._m0[_1900].x + _358;
        float _1921 = cbLight._m0[_1900].y + _359;
        float _1922 = cbLight._m0[_1900].z + _360;
        float _1926 = inversesqrt(dot(vec3(_1920, _1921, _1922), vec3(_1920, _1921, _1922)));
        float _1927 = _1926 * _1920;
        float _1928 = _1926 * _1921;
        float _1929 = _1926 * _1922;
        float _1930 = dot(vec3(_276, _277, _278), vec3(cbLight._m0[_1900].xyz));
        float _3896 = isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0));
        float _1933 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
        float _1934 = dot(vec3(_276, _277, _278), vec3(_1927, _1928, _1929));
        float _3907 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
        float _1937 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _1938 = dot(vec3(cbLight._m0[_1900].xyz), vec3(_1927, _1928, _1929));
        float _3918 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
        float _1942 = _1919 * _1919;
        float _1946 = ((_1937 * _1937) * (_1942 + (-1.0))) + 1.0;
        float _1955 = (exp2(log2(1.0 - (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1956 = 1.0 - _1919;
        float _1966 = (0.5 / (((_1707 * ((_1933 * _1956) + _1919)) + 9.9999999392252902907785028219223e-09) + (((_1707 * _1956) + _1919) * _1933))) * _1933;
        float _3929 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
        float _1968 = (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0))) * (_1942 / ((_1946 * _1946) * 3.141590118408203125));
        float _1969 = isnan(1.0) ? _1552 : (isnan(_1552) ? 1.0 : min(_1552, 1.0));
        _1894 = (((_1955 * cbLight._m0[_1904].x) * _1968) * _1969) + _1830;
        _1896 = (((_1955 * cbLight._m0[_1904].y) * _1968) * _1969) + _1831;
        _1898 = (((_1955 * cbLight._m0[_1904].z) * _1968) * _1969) + _1832;
    }
    float _2004;
    float _2006;
    float _2008;
    if (_1633)
    {
        _2004 = _1894;
        _2006 = _1896;
        _2008 = _1898;
    }
    else
    {
        uint _2015 = _1537 + 3u;
        uint _2019 = _1537 + 11u;
        float _2033 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2015].w)) * _279) * 0.949999988079071044921875);
        float _2034 = _2033 * _2033;
        float _2035 = cbLight._m0[_2015].x + _358;
        float _2036 = cbLight._m0[_2015].y + _359;
        float _2037 = cbLight._m0[_2015].z + _360;
        float _2041 = inversesqrt(dot(vec3(_2035, _2036, _2037), vec3(_2035, _2036, _2037)));
        float _2042 = _2041 * _2035;
        float _2043 = _2041 * _2036;
        float _2044 = _2041 * _2037;
        float _2045 = dot(vec3(_276, _277, _278), vec3(cbLight._m0[_2015].xyz));
        float _3945 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
        float _2048 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _2049 = dot(vec3(_276, _277, _278), vec3(_2042, _2043, _2044));
        float _3956 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
        float _2052 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _2053 = dot(vec3(cbLight._m0[_2015].xyz), vec3(_2042, _2043, _2044));
        float _3967 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
        float _2057 = _2034 * _2034;
        float _2061 = ((_2052 * _2052) * (_2057 + (-1.0))) + 1.0;
        float _2070 = (exp2(log2(1.0 - (isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2071 = 1.0 - _2034;
        float _2081 = (0.5 / (((_1707 * ((_2048 * _2071) + _2034)) + 9.9999999392252902907785028219223e-09) + (((_1707 * _2071) + _2034) * _2048))) * _2048;
        float _3978 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
        float _2083 = (isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) * (_2057 / ((_2061 * _2061) * 3.141590118408203125));
        float _2084 = isnan(1.0) ? _1553 : (isnan(_1553) ? 1.0 : min(_1553, 1.0));
        _2004 = (((_2070 * cbLight._m0[_2019].x) * _2083) * _2084) + _1894;
        _2006 = (((_2070 * cbLight._m0[_2019].y) * _2083) * _2084) + _1896;
        _2008 = (((_2070 * cbLight._m0[_2019].z) * _2083) * _2084) + _1898;
    }
    float _2219;
    float _2221;
    float _2223;
    float _2225;
    float _2227;
    float _2229;
    if (_1535.y == 0u)
    {
        float _2159 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2160 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2159;
        float _2161 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2159;
        float _2162 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2159;
        uvec4 _2174 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2175 = _2174.x;
        uint _2186 = uint((float(_2174.y) * floor(float(uint(cbSceneParam._m0[85u].y * _380) / _2175))) + floor(float(uint(cbSceneParam._m0[85u].x * _379) / _2175)));
        float _2196 = (log2(_2162 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2197 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
        uint _2200 = uint(isnan(14.0) ? _2197 : (isnan(_2197) ? 14.0 : min(_2197, 14.0)));
        uvec4 _2205 = texelFetch(g_lightClusterGridBuffer, int(((_2200 << 2u) + (_2186 << 6u)) >> 2u));
        uint _2206 = _2205.x;
        uint _2207 = _2174.z;
        float _2310;
        float _2312;
        float _2314;
        float _2316;
        float _2318;
        float _2320;
        if (((((1u << ((_2207 >> 4u) & 15u)) + 4294967295u) & _2206) == 0u) || ((_2207 & 240u) == 0u))
        {
            _2310 = 0.0;
            _2312 = 0.0;
            _2314 = 0.0;
            _2316 = 0.0;
            _2318 = 0.0;
            _2320 = 0.0;
        }
        else
        {
            float _2311;
            float _2313;
            float _2315;
            float _2317;
            float _2319;
            float _2321;
            float _2463 = 0.0;
            float _2464 = 0.0;
            float _2465 = 0.0;
            float _2466 = 0.0;
            float _2467 = 0.0;
            float _2468 = 0.0;
            uint _2469 = 0u;
            uint _2478;
            bool _2479;
            for (;;)
            {
                _2478 = texelFetch(g_lightClassification, int((((_2200 << 5u) + (_2186 << 9u)) + (_2469 << 2u)) >> 2u)).x;
                _2479 = _2478 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2479)
                {
                    frontier_phi_66_pred = _2463;
                    frontier_phi_66_pred_1 = _2468;
                    frontier_phi_66_pred_2 = _2467;
                    frontier_phi_66_pred_3 = _2466;
                    frontier_phi_66_pred_4 = _2465;
                    frontier_phi_66_pred_5 = _2464;
                }
                else
                {
                    float _2608;
                    float _2609;
                    float _2610;
                    float _2611;
                    float _2612;
                    float _2613;
                    uint _2614;
                    _2608 = _2463;
                    _2609 = _2464;
                    _2610 = _2465;
                    _2611 = _2466;
                    _2612 = _2467;
                    _2613 = _2468;
                    _2614 = _2478;
                    float _2535;
                    float _2536;
                    float _2537;
                    float _2538;
                    float _2539;
                    float _2540;
                    for (;;)
                    {
                        uint _2618 = uint(findLSB(_2614)) + (_2469 << 5u);
                        uint _2615 = (_2614 + 4294967295u) & _2614;
                        uint _2620 = _2618 * 48u;
                        vec4 _2634 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2620)).x, texelFetch(g_PointLightRenderingBuffer, int(_2620 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2620 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2620 + 3u)).x));
                        uint _2640 = (_2618 * 48u) + 4u;
                        vec4 _2653 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2640)).x, texelFetch(g_PointLightRenderingBuffer, int(_2640 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2640 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2640 + 3u)).x));
                        uint _2659 = (_2618 * 48u) + 8u;
                        vec3 _2670 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2659)).x, texelFetch(g_PointLightRenderingBuffer, int(_2659 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2659 + 2u)).x));
                        float _2674 = _2634.x - _2160;
                        float _2675 = _2634.y - _2161;
                        float _2676 = _2634.z - _2162;
                        float _2677 = dot(vec3(_2674, _2675, _2676), vec3(_2674, _2675, _2676));
                        float _2680 = inversesqrt(_2677);
                        float _2681 = _2680 * _2674;
                        float _2682 = _2680 * _2675;
                        float _2683 = _2680 * _2676;
                        float _2684 = dot(vec3(_400, _403, _406), vec3(_2681, _2682, _2683));
                        float _2689 = 1.0 - (_2677 * _2634.w);
                        float _4004 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
                        float _2690 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
                        float _2691 = sqrt(_2677) * _2653.w;
                        float _2694 = 1.39999997615814208984375 / (_2691 + 1.39999997615814208984375);
                        float _2695 = _2694 * _2694;
                        float _2698 = ((1.0 - _2695) * _2684) + _2695;
                        float _2701 = _2691 * _2691;
                        float _2705 = ((isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0))) * _2690) / ((_2701 * 0.699999988079071044921875) + 1.0);
                        float _2709 = (-0.0) - _2160;
                        float _2710 = (-0.0) - _2161;
                        float _2711 = (-0.0) - _2162;
                        float _2715 = inversesqrt(dot(vec3(_2709, _2710, _2711), vec3(_2709, _2710, _2711)));
                        float _2716 = _2715 * _2709;
                        float _2717 = _2715 * _2710;
                        float _2718 = _2715 * _2711;
                        float _2726 = exp2(log2(1.0 / ((_2701 * 3.5) + 5.0)) * 0.25);
                        float _2727 = 1.0 - _461;
                        float _2734 = sqrt(1.0 - ((1.0 - (_2727 * _2727)) * (1.0 - (_2726 * _2726))));
                        float _2735 = _2734 * _2734;
                        float _2736 = _2735 * _2735;
                        float _2737 = _2716 + _2681;
                        float _2738 = _2717 + _2682;
                        float _2739 = _2718 + _2683;
                        float _2743 = inversesqrt(dot(vec3(_2737, _2738, _2739), vec3(_2737, _2738, _2739)));
                        float _2747 = dot(vec3(_400, _403, _406), vec3(_2716, _2717, _2718));
                        float _4020 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
                        float _2750 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
                        float _2751 = dot(vec3(_400, _403, _406), vec3(_2743 * _2737, _2743 * _2738, _2743 * _2739));
                        float _4031 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
                        float _2754 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
                        float _2758 = ((_2754 * _2754) * (_2736 + (-1.0))) + 1.0;
                        float _2759 = _2694 * _2735;
                        float _2760 = _2759 * _2759;
                        float _2763 = ((1.0 - _2760) * _2684) + _2760;
                        float _4042 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
                        float _2764 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
                        float _2765 = 1.0 - _2735;
                        float _2775 = (0.5 / (((_2764 * ((_2750 * _2765) + _2735)) + 9.9999999392252902907785028219223e-09) + (((_2764 * _2765) + _2735) * _2750))) * _2764;
                        float _4053 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
                        float _2786 = (((_2736 * 3.1415927410125732421875) * (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0)))) / ((_2758 * _2758) * ((_2701 * 2.1991131305694580078125) + 3.141590118408203125))) * _2690;
                        _2538 = (_2705 * _2653.x) + _2611;
                        _2539 = (_2705 * _2653.y) + _2612;
                        _2540 = (_2705 * _2653.z) + _2613;
                        _2535 = (_2786 * _2670.x) + _2608;
                        _2536 = (_2786 * _2670.y) + _2609;
                        _2537 = (_2786 * _2670.z) + _2610;
                        if (_2615 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2608 = _2535;
                            _2609 = _2536;
                            _2610 = _2537;
                            _2611 = _2538;
                            _2612 = _2539;
                            _2613 = _2540;
                            _2614 = _2615;
                        }
                    }
                    frontier_phi_66_pred = _2535;
                    frontier_phi_66_pred_1 = _2540;
                    frontier_phi_66_pred_2 = _2539;
                    frontier_phi_66_pred_3 = _2538;
                    frontier_phi_66_pred_4 = _2537;
                    frontier_phi_66_pred_5 = _2536;
                }
                _2311 = frontier_phi_66_pred;
                _2321 = frontier_phi_66_pred_1;
                _2319 = frontier_phi_66_pred_2;
                _2317 = frontier_phi_66_pred_3;
                _2315 = frontier_phi_66_pred_4;
                _2313 = frontier_phi_66_pred_5;
                uint _2470 = _2469 + 1u;
                if (_2470 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2463 = _2311;
                    _2464 = _2313;
                    _2465 = _2315;
                    _2466 = _2317;
                    _2467 = _2319;
                    _2468 = _2321;
                    _2469 = _2470;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2310 = _2311;
            _2312 = _2313;
            _2314 = _2315;
            _2316 = _2317;
            _2318 = _2319;
            _2320 = _2321;
        }
        uvec4 _2324 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2325 = _2324.z;
        uint _2327 = (_2325 >> 8u) & 15u;
        float _2431;
        float _2433;
        float _2435;
        float _2437;
        float _2439;
        float _2441;
        if (((4294967295u << _2327) & _2206) == 0u)
        {
            _2431 = _2310;
            _2433 = _2312;
            _2435 = _2314;
            _2437 = _2316;
            _2439 = _2318;
            _2441 = _2320;
        }
        else
        {
            float _2456 = inversesqrt(dot(vec3(_2160, _2161, _2162), vec3(_2160, _2161, _2162)));
            float _2457 = _2456 * _2160;
            float _2458 = _2456 * _2161;
            float _2459 = _2456 * _2162;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2327 < ((_2325 >> 12u) & 15u))
            {
                float _2432;
                float _2434;
                float _2436;
                float _2438;
                float _2440;
                float _2442;
                float _2591 = _2310;
                float _2592 = _2312;
                float _2593 = _2314;
                float _2594 = _2316;
                float _2595 = _2318;
                float _2596 = _2320;
                uint _2597 = _2327;
                uint _2606;
                bool _2607;
                for (;;)
                {
                    _2606 = texelFetch(g_lightClassification, int((((_2200 << 5u) + (_2186 << 9u)) + (_2597 << 2u)) >> 2u)).x;
                    _2607 = _2606 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2607)
                    {
                        frontier_phi_77_pred = _2596;
                        frontier_phi_77_pred_1 = _2595;
                        frontier_phi_77_pred_2 = _2594;
                        frontier_phi_77_pred_3 = _2593;
                        frontier_phi_77_pred_4 = _2592;
                        frontier_phi_77_pred_5 = _2591;
                    }
                    else
                    {
                        float _2800;
                        float _2801;
                        float _2802;
                        float _2803;
                        float _2804;
                        float _2805;
                        float _3095;
                        float _3096;
                        float _3097;
                        float _3098;
                        float _3099;
                        float _3100;
                        float _2813 = _2591;
                        float _2814 = _2592;
                        float _2815 = _2593;
                        float _2816 = _2594;
                        float _2817 = _2595;
                        float _2818 = _2596;
                        uint _2819 = _2606;
                        uint _2820;
                        vec4 _2845;
                        float _2846;
                        vec4 _2861;
                        vec3 _2873;
                        vec4 _2889;
                        vec4 _2904;
                        float _2951;
                        bool _2952;
                        for (;;)
                        {
                            uint _2830 = ((_2597 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2819));
                            _2820 = (_2819 + 4294967295u) & _2819;
                            uint _2832 = _2830 * 40u;
                            _2845 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2832)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2832 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2832 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2832 + 3u)).x));
                            _2846 = _2845.w;
                            uint _2848 = (_2830 * 40u) + 4u;
                            _2861 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2848)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2848 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2848 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2848 + 3u)).x));
                            uint _2863 = (_2830 * 40u) + 8u;
                            _2873 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2863)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2863 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2863 + 2u)).x));
                            uint _2876 = (_2830 * 40u) + 16u;
                            _2889 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2876)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2876 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2876 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2876 + 3u)).x));
                            uint _2891 = (_2830 * 40u) + 20u;
                            _2904 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2891)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2891 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2891 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2891 + 3u)).x));
                            uint _2907 = (_2830 * 40u) + 24u;
                            vec4 _2920 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2907)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2907 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2907 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2907 + 3u)).x));
                            uint _2926 = (_2830 * 40u) + 28u;
                            vec4 _2939 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2926)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 3u)).x));
                            _2951 = fma(_2162, _2939.z, fma(_2161, _2939.y, _2939.x * _2160)) + _2939.w;
                            _2952 = !((fma(_2162, _2920.z, fma(_2161, _2920.y, _2920.x * _2160)) + _2920.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2952)
                            {
                                float _2979 = _2845.x - _2160;
                                float _2980 = _2845.y - _2161;
                                float _2981 = _2845.z - _2162;
                                float _2982 = dot(vec3(_2979, _2980, _2981), vec3(_2979, _2980, _2981));
                                float _2985 = inversesqrt(_2982);
                                float _2986 = _2985 * _2979;
                                float _2987 = _2985 * _2980;
                                float _2988 = _2985 * _2981;
                                float _2992 = 1.0 - (_2982 / (_2846 * _2846));
                                float _4064 = isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0));
                                float _2993 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
                                float _2997 = sqrt(_2982) * _2861.w;
                                float _2999 = 1.39999997615814208984375 / (_2997 + 1.39999997615814208984375);
                                float _3000 = _2999 * _2999;
                                float _3003 = ((1.0 - _3000) * dot(vec3(_2986, _2987, _2988), vec3(_400, _403, _406))) + _3000;
                                float _3006 = _2997 * _2997;
                                float _3010 = (fma(_2162, _2889.z, fma(_2161, _2889.y, _2889.x * _2160)) + _2889.w) / _2951;
                                float _3011 = (fma(_2162, _2904.z, fma(_2161, _2904.y, _2904.x * _2160)) + _2904.w) / _2951;
                                float _3015 = 1.0 - dot(vec2(_3010, _3011), vec2(_3010, _3011));
                                float _4080 = isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0));
                                float _3016 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
                                float _3017 = _3016 * (((isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0))) * _2993) / ((_3006 * 0.699999988079071044921875) + 1.0));
                                float _3029 = exp2(log2(1.0 / ((_3006 * 3.5) + 5.0)) * 0.25);
                                float _3030 = 1.0 - _461;
                                float _3037 = sqrt(1.0 - ((1.0 - (_3030 * _3030)) * (1.0 - (_3029 * _3029))));
                                float _3038 = _3037 * _3037;
                                float _3039 = _3038 * _3038;
                                float _3040 = _2986 - _2457;
                                float _3041 = _2987 - _2458;
                                float _3042 = _2988 - _2459;
                                float _3046 = inversesqrt(dot(vec3(_3040, _3041, _3042), vec3(_3040, _3041, _3042)));
                                float _3050 = dot(vec3(_400, _403, _406), vec3((-0.0) - _2457, (-0.0) - _2458, (-0.0) - _2459));
                                float _4091 = isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0));
                                float _3053 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
                                float _3054 = dot(vec3(_400, _403, _406), vec3(_3046 * _3040, _3046 * _3041, _3046 * _3042));
                                float _4102 = isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0));
                                float _3057 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
                                float _3061 = ((_3057 * _3057) * (_3039 + (-1.0))) + 1.0;
                                float _3062 = _2999 * _3038;
                                float _3063 = _3062 * _3062;
                                float _3069 = ((1.0 - _3063) * dot(vec3(_400, _403, _406), vec3(_2986, _2987, _2988))) + _3063;
                                float _4113 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0));
                                float _3070 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
                                float _3071 = 1.0 - _3038;
                                float _3081 = (0.5 / (((_3070 * ((_3053 * _3071) + _3038)) + 9.9999999392252902907785028219223e-09) + (((_3070 * _3071) + _3038) * _3053))) * _3070;
                                float _4124 = isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0));
                                float _3091 = (_3016 * _2993) * (((_3039 * 3.1415927410125732421875) * (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0)))) / ((_3061 * _3061) * ((_3006 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3017 * _2861.y;
                                frontier_phi_83_pred_1 = _3017 * _2861.x;
                                frontier_phi_83_pred_2 = _3091 * _2873.z;
                                frontier_phi_83_pred_3 = _3091 * _2873.y;
                                frontier_phi_83_pred_4 = _3091 * _2873.x;
                                frontier_phi_83_pred_5 = _3017 * _2861.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3099 = frontier_phi_83_pred;
                            _3098 = frontier_phi_83_pred_1;
                            _3097 = frontier_phi_83_pred_2;
                            _3096 = frontier_phi_83_pred_3;
                            _3095 = frontier_phi_83_pred_4;
                            _3100 = frontier_phi_83_pred_5;
                            _2803 = _3098 + _2816;
                            _2804 = _3099 + _2817;
                            _2805 = _3100 + _2818;
                            _2800 = _3095 + _2813;
                            _2801 = _3096 + _2814;
                            _2802 = _3097 + _2815;
                            if (_2820 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2813 = _2800;
                                _2814 = _2801;
                                _2815 = _2802;
                                _2816 = _2803;
                                _2817 = _2804;
                                _2818 = _2805;
                                _2819 = _2820;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2805;
                        frontier_phi_77_pred_1 = _2804;
                        frontier_phi_77_pred_2 = _2803;
                        frontier_phi_77_pred_3 = _2802;
                        frontier_phi_77_pred_4 = _2801;
                        frontier_phi_77_pred_5 = _2800;
                    }
                    _2442 = frontier_phi_77_pred;
                    _2440 = frontier_phi_77_pred_1;
                    _2438 = frontier_phi_77_pred_2;
                    _2436 = frontier_phi_77_pred_3;
                    _2434 = frontier_phi_77_pred_4;
                    _2432 = frontier_phi_77_pred_5;
                    uint _2598 = _2597 + 1u;
                    if (_2598 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2591 = _2432;
                        _2592 = _2434;
                        _2593 = _2436;
                        _2594 = _2438;
                        _2595 = _2440;
                        _2596 = _2442;
                        _2597 = _2598;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2436;
                frontier_phi_58_59_ladder_1 = _2442;
                frontier_phi_58_59_ladder_2 = _2440;
                frontier_phi_58_59_ladder_3 = _2438;
                frontier_phi_58_59_ladder_4 = _2434;
                frontier_phi_58_59_ladder_5 = _2432;
            }
            else
            {
                frontier_phi_58_59_ladder = _2314;
                frontier_phi_58_59_ladder_1 = _2320;
                frontier_phi_58_59_ladder_2 = _2318;
                frontier_phi_58_59_ladder_3 = _2316;
                frontier_phi_58_59_ladder_4 = _2312;
                frontier_phi_58_59_ladder_5 = _2310;
            }
            _2431 = frontier_phi_58_59_ladder_5;
            _2433 = frontier_phi_58_59_ladder_4;
            _2435 = frontier_phi_58_59_ladder;
            _2437 = frontier_phi_58_59_ladder_3;
            _2439 = frontier_phi_58_59_ladder_2;
            _2441 = frontier_phi_58_59_ladder_1;
        }
        float _2446 = isnan(1.0) ? _445 : (isnan(_445) ? 1.0 : min(_445, 1.0));
        _2219 = (_2446 * _2437) + _1671;
        _2221 = (_2446 * _2439) + _1673;
        _2223 = (_2446 * _2441) + _1675;
        _2225 = ((_2431 * 0.039999999105930328369140625) * _2446) + _2004;
        _2227 = ((_2433 * 0.039999999105930328369140625) * _2446) + _2006;
        _2229 = ((_2435 * 0.039999999105930328369140625) * _2446) + _2008;
    }
    else
    {
        _2219 = _1671;
        _2221 = _1673;
        _2223 = _1675;
        _2225 = _2004;
        _2227 = _2006;
        _2229 = _2008;
    }
    float _4140 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _4151 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _4162 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _2246 = ((isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (_2219 + ((isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0))) * _445))) + ((_2225 + ((isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0))) * _1284)) * cbPerFrame._m0[3u].x);
    float _2247 = ((isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * (_2221 + ((isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0))) * _445))) + ((_2227 + ((isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0))) * _1284)) * cbPerFrame._m0[3u].x);
    float _2248 = ((isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * (_2223 + ((isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0))) * _445))) + ((_2229 + ((isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0))) * _1284)) * cbPerFrame._m0[3u].x);
    float _2249 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
    float _2250 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
    float _2251 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
    uint _2252 = _419 + 6u;
    float _2260 = _379 / cbSceneParam._m0[86u].x;
    float _2261 = _380 / cbSceneParam._m0[86u].y;
    vec4 _2275 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2260, _2261, (log2((isnan(cbSceneParam._m0[77u].w) ? _298 : (isnan(_298) ? cbSceneParam._m0[77u].w : min(_298, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2277 = _2275.x;
    float _2278 = _2275.y;
    float _2279 = _2275.z;
    float _2280 = _2275.w;
    float _2373;
    float _2375;
    float _2377;
    float _2379;
    if (_298 > cbSceneParam._m0[78u].w)
    {
        float _2335 = isnan(_298) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _298 : min(cbSceneParam._m0[80u].w, _298));
        float _2336 = _2335 / _298;
        float _2347 = _2336 * _351;
        float _2348 = _352 * _2336;
        float _2349 = (-0.0) - _2348;
        float _2351 = _2336 * _353;
        float _2353 = (cbSceneParam._m0[77u].w * _2349) / _2335;
        float _2354 = _2353 + cbSceneParam._m0[79u].w;
        float _2355 = cbSceneParam._m0[79u].w - _2348;
        float _2361 = sqrt(((_2347 * _2347) + (_2348 * _2348)) + (_2351 * _2351));
        float _2364 = (1.0 - (cbSceneParam._m0[77u].w / _2335)) * _2361;
        float _2369 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2371 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2548;
        if (abs((_2349 - _2353) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2548 = ((((_2354 > 0.0) ? exp2(_2369 * _2354) : (2.0 - exp2(_2371 * _2354))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2364;
        }
        else
        {
            float _2492 = 1.0 / cbSceneParam._m0[80u].x;
            float _2493 = isnan(_2355) ? _2354 : (isnan(_2354) ? _2355 : max(_2354, _2355));
            float _2494 = isnan(_2355) ? _2354 : (isnan(_2354) ? _2355 : min(_2354, _2355));
            float _2503 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : min(_2493, 0.0));
            float _2504 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : min(_2494, 0.0));
            _2548 = ((abs(_2361 / _2349) * cbSceneParam._m0[80u].y) * ((((_2503 - _2504) * 2.0) - ((exp2(_2369 * (isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0)))) - exp2(_2369 * (isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0))))) * _2492)) - ((exp2(_2371 * _2503) - exp2(_2371 * _2504)) * _2492))) + (_2364 * cbSceneParam._m0[80u].z);
        }
        vec4 _2550 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2260, _2261, 1.0), 0.0);
        float _2559 = exp2((_2548 * (-1.44269502162933349609375)) * (1.0 - _2550.w));
        float _2560 = log2(_2559);
        float _2576 = log2(_2280);
        _2373 = (exp2(_2576 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2560 * cbSceneParam._m0[78u].x)) * _2550.x) / cbSceneParam._m0[78u].x)) + _2277;
        _2375 = (exp2(_2576 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2560 * cbSceneParam._m0[78u].y)) * _2550.y) / cbSceneParam._m0[78u].y)) + _2278;
        _2377 = (exp2(_2576 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2560 * cbSceneParam._m0[78u].z)) * _2550.z) / cbSceneParam._m0[78u].z)) + _2279;
        _2379 = _2559 * _2280;
    }
    else
    {
        _2373 = _2277;
        _2375 = _2278;
        _2377 = _2279;
        _2379 = _2280;
    }
    bool _2586;
    vec4 _2389;
    vec4 _2411;
    float _2413;
    float _2417;
    float _2418;
    float _2419;
    float _2420;
    bool _2430;
    for (;;)
    {
        _2389 = cbMatDynParam._m0[0u];
        float _2391 = roundEven(_2389.y);
        bool _2392 = _2391 == 3.0;
        float _2393 = log2(_2379);
        float _2400 = exp2(_2393 * cbSceneParam._m0[78u].x) * _2249;
        float _2401 = exp2(_2393 * cbSceneParam._m0[78u].y) * _2250;
        float _2402 = exp2(_2393 * cbSceneParam._m0[78u].z) * _2251;
        float _2409 = _367 + (-0.5);
        _2411 = cbMtdParam._m0[1u];
        _2413 = _2411.y * _2409;
        float _2416 = (_2391 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2417 = _2416 * (_2392 ? _2400 : (_2400 + (cbSceneParam._m0[72u].w * _2373)));
        _2418 = _2416 * (_2392 ? _2401 : (_2401 + (cbSceneParam._m0[72u].w * _2375)));
        _2419 = _2416 * (_2392 ? _2402 : (_2402 + (cbSceneParam._m0[72u].w * _2377)));
        _2420 = _2409 * 0.999000012874603271484375;
        _2430 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2430)
        {
            if ((cbInstanceData._m0[_419 + 7u].x + _2420) < 0.5)
            {
                _2586 = true;
                break;
            }
        }
        uint _2527 = _421 + uint(_2389.w);
        if ((cbInstanceData._m0[_2527].w < 1.0) && ((cbInstanceData._m0[_2527].w + _2420) < 0.5))
        {
            _2586 = true;
            break;
        }
        if ((_2413 + 1.0) < _2411.x)
        {
            _2586 = true;
            break;
        }
        _2586 = false;
        break;
    }
    float _2791;
    if (_2586)
    {
        discard_state = true;
        _2791 = 0.0;
    }
    else
    {
        _2791 = cbInstanceData._m0[_2252].w;
    }
    SV_Target.x = _2417;
    SV_Target.y = _2418;
    SV_Target.z = _2419;
    SV_Target.w = _2791;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2252].w;
    discard_exit();
}


