#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1228;
float _3626;
float _3627;
float _3628;
float _3629;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _205 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _206 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _207 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _213 = inversesqrt(dot(vec3(_205, _206, _207), vec3(_205, _206, _207)));
    float _220 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _249 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _255 = _249.x * cbMtdParam._m0[9u].x;
    float _256 = _249.y * cbMtdParam._m0[9u].y;
    float _257 = _249.z * cbMtdParam._m0[9u].z;
    vec4 _295 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[5u].w));
    float _311 = (TEXCOORD_3.x - ((cbMtdParam._m0[14u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[14u].y + 1.0);
    float _3638 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _312 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
    float _319 = (((_295.x * cbMtdParam._m0[10u].x) - _255) * _312) + _255;
    float _320 = (((_295.y * cbMtdParam._m0[10u].y) - _256) * _312) + _256;
    float _321 = (((_295.z * cbMtdParam._m0[10u].z) - _257) * _312) + _257;
    vec4 _338 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _357 = TEXCOORD_9.x - ((cbMtdParam._m0[16u].y * (1.0 - TEXCOORD_9.x)) * (_338.x + 0.00999999977648258209228515625));
    float _359 = _357 * (cbMtdParam._m0[16u].z + 1.0);
    float _3649 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _360 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
    float _368 = ((((cbMtdParam._m0[12u].x - _319) * TEXCOORD_9.x) * cbMtdParam._m0[16u].x) * _360) + _319;
    float _369 = ((((cbMtdParam._m0[12u].y - _320) * TEXCOORD_9.y) * cbMtdParam._m0[16u].x) * _360) + _320;
    float _370 = (((cbMtdParam._m0[16u].x * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _321)) * _360) + _321;
    vec4 _383 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[4u].w));
    float _391 = (_383.x * 2.0) + (-1.0);
    float _393 = (_383.y * 2.0) + (-1.0);
    float _394 = dot(vec2(_391, _393), vec2(_391, _393));
    float _3660 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    vec4 _411 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _415 = _411.z;
    float _418 = (_411.x * 2.0) + (-1.0);
    float _419 = (_411.y * 2.0) + (-1.0);
    float _420 = dot(vec2(_418, _419), vec2(_418, _419));
    float _3671 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _425 = sqrt(1.0 - (isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0))));
    float _428 = (_312 * (_383.z - _415)) + _415;
    float _434 = _357 * (cbMtdParam._m0[16u].y + 1.0);
    float _3682 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _438 = ((cbMtdParam._m0[15u].y - _428) * (isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0)))) + _428;
    float _451 = (cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _452 = (cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _478 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * ((cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * ((cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[10u].w));
    float _483 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[15u].w;
    float _490 = ((_478.y * 0.5) + (-0.25)) * cbMtdParam._m0[15u].z;
    float _492 = (-0.0) - (cbMtdParam._m0[15u].z * ((_478.x * 0.5) + (-0.25)));
    float _494 = fract(_483);
    float _496 = fract(_483 + 0.5);
    float _497 = _494 * _492;
    float _498 = _490 * _494;
    float _501 = _496 * _492;
    float _502 = _490 * _496;
    float _507 = abs((_494 * 2.0) + (-1.0));
    vec4 _523 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_497 + _451) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_498 + _452) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _525 = _523.x;
    float _526 = _523.y;
    float _527 = _523.z;
    vec4 _528 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_501 + _451) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_502 + _452) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _555 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _556 = (cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _569 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_497 + _555) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_498 + _556) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _571 = _569.x;
    float _572 = _569.y;
    float _573 = _569.z;
    vec4 _574 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_501 + _555) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_502 + _556) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _603 = (_312 * (_391 - _418)) + _418;
    float _604 = (_312 * (_393 - _419)) + _419;
    float _605 = (_312 * (sqrt(1.0 - (isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0)))) - _425)) + _425;
    vec4 _624 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[16u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, (((cbMtdParam._m0[17u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w));
    float _630 = (_624.x * 2.0) + (-1.0);
    float _631 = (_624.y * 2.0) + (-1.0);
    float _632 = dot(vec2(_630, _631), vec2(_630, _631));
    float _3693 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _648 = (_360 * (((_603 * cbMtdParam._m0[14u].z) - _603) + _630)) + _603;
    float _649 = (_360 * (((_604 * cbMtdParam._m0[14u].z) - _604) + _631)) + _604;
    float _650 = (_360 * (sqrt(1.0 - (isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0)))) - _605)) + _605;
    float _653 = fma(_650, _220 * NORMAL.x, fma(_649, _227 * TANGENT.x, (_213 * _205) * _648));
    float _656 = fma(_650, _220 * NORMAL.y, fma(_649, _227 * TANGENT.y, (_213 * _206) * _648));
    float _659 = fma(_650, _220 * NORMAL.z, fma(_649, _227 * TANGENT.z, (_213 * _207) * _648));
    float _663 = inversesqrt(dot(vec3(_653, _656, _659), vec3(_653, _656, _659)));
    float _664 = _663 * _653;
    float _665 = _663 * _656;
    float _666 = _663 * _659;
    float _3704 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _667 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
    float _3715 = isnan(0.0) ? _368 : (isnan(_368) ? 0.0 : max(_368, 0.0));
    float _3726 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _3737 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _686 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _727 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _737 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _727);
    float _738 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _727);
    float _739 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _727);
    float _743 = inversesqrt(dot(vec3(_737, _738, _739), vec3(_737, _738, _739)));
    float _744 = _737 * _743;
    float _745 = _738 * _743;
    float _746 = _739 * _743;
    vec4 _751 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _753 = _751.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _909 = sqrt(((_737 * _737) + (_738 * _738)) + (_739 * _739));
        float _915 = (cbMatDynParam._m0[5u].x * _909) + cbMatDynParam._m0[5u].y;
        float _3748 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _916 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
        float _920 = (cbMatDynParam._m0[5u].z * _909) + cbMatDynParam._m0[5u].w;
        float _3759 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0))) - _916)) + _916) < ((_753 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _765 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _766 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _785 = fma(_666, cbSceneParam._m0[5u].z, fma(_665, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _664));
    float _788 = fma(_666, cbSceneParam._m0[6u].z, fma(_665, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _664));
    float _791 = fma(_666, cbSceneParam._m0[7u].z, fma(_665, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _664));
    uint _804 = uint(roundEven(NORMAL.w)) * 13u;
    uint _805 = _804 + 9u;
    uint _806 = _805 + uint(cbMatDynParam._m0[0u].w);
    float _812 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0)))) * cbInstanceData._m0[_806].x;
    float _813 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0)))) * cbInstanceData._m0[_806].y;
    float _814 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0)))) * cbInstanceData._m0[_806].z;
    float _3770 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _815 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
    float _3781 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _816 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
    float _3792 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _817 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
    vec4 _826 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _765, cbSceneParam._m0[86u].y * _766));
    float _829 = _826.x * TEXCOORD_3.w;
    float _830 = dot(vec3(_664, _665, _666), vec3(_744, _745, _746));
    float _833 = _830 * 2.0;
    float _837 = (_833 * _664) - _744;
    float _838 = (_833 * _665) - _745;
    float _839 = (_833 * _666) - _746;
    float _843 = abs(dot(vec3(_744, _745, _746), vec3(_664, _665, _666)));
    float _3803 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _845 = sqrt(_667);
    float _858 = exp2((_845 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_845 * 3.0));
    float _890 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _894 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _898 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1227;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _953 = fma(_898, cbModelParam._m0[26u].z, fma(_894, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _890));
        float _957 = fma(_898, cbModelParam._m0[27u].z, fma(_894, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _890));
        float _961 = fma(_898, cbModelParam._m0[28u].z, fma(_894, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _890));
        float _985 = _890 + _664;
        float _986 = _894 + _665;
        float _987 = _898 + _666;
        float _997 = fma(_987, cbModelParam._m0[26u].z, fma(_986, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _985)) - _953;
        float _998 = fma(_987, cbModelParam._m0[27u].z, fma(_986, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _985)) - _957;
        float _999 = fma(_987, cbModelParam._m0[28u].z, fma(_986, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _985)) - _961;
        float _1003 = inversesqrt(dot(vec3(_997, _998, _999), vec3(_997, _998, _999)));
        float _1016 = ((_1003 * _997) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_953 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1017 = ((_1003 * _998) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_957 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1018 = ((_1003 * _999) / cbModelParam._m0[34u].z) + ((((((_961 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1021 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1016, _1017, _1018), 0.0);
        vec4 _1028 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1016, _1017, _1018), 0.0);
        vec4 _1035 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1016, _1017, _1018), 0.0);
        vec4 _1042 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1016, _1017, _1018), 0.0);
        float _1055 = exp2((_1021.w + (-0.5)) * 20.0) * 2.0;
        float _1056 = _1055 * (_1021.x + (-0.5));
        float _1057 = _1055 * (_1021.y + (-0.5));
        float _1058 = _1055 * (_1021.z + (-0.5));
        float _1065 = exp2((_1028.w + (-0.5)) * 20.0) * 2.0;
        float _1066 = _1065 * (_1028.x + (-0.5));
        float _1067 = _1065 * (_1028.y + (-0.5));
        float _1068 = _1065 * (_1028.z + (-0.5));
        float _1075 = exp2((_1035.w + (-0.5)) * 20.0) * 2.0;
        float _1076 = _1075 * (_1035.x + (-0.5));
        float _1077 = _1075 * (_1035.y + (-0.5));
        float _1078 = _1075 * (_1035.z + (-0.5));
        float _1085 = exp2((_1042.w + (-0.5)) * 20.0) * 2.0;
        float _1086 = _1085 * (_1042.x + (-0.5));
        float _1087 = _1085 * (_1042.y + (-0.5));
        float _1088 = _1085 * (_1042.z + (-0.5));
        float _1089 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1090 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1091 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1092 = _1056 * 0.5;
        float _1093 = _1066 * 0.5;
        float _1094 = _1076 * 0.5;
        float _1095 = dot(vec3(_1092, _1093, _1094), vec3(_1092, _1093, _1094));
        float _1100 = (_1095 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1095);
        float _1109 = (dot(vec3(_664, _665, _666), vec3(_1100 * _1092, _1100 * _1093, _1100 * _1094)) + 1.0) * 0.5;
        float _3829 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1119 = sqrt(((_1093 * _1093) + (_1092 * _1092)) + (_1094 * _1094)) / (_1089 + 9.9999997473787516355514526367188e-06);
        float _3840 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1120 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
        float _1121 = _1120 * 2.0;
        float _1125 = (1.0 - _1120) / (_1120 + 1.0);
        float _3851 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1126 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
        float _1135 = ((((1.0 - _1126) * (_1121 + 2.0)) * exp2(log2(isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0))) * (_1121 + 1.0))) + _1126) * _1089;
        float _1136 = _1057 * 0.5;
        float _1137 = _1067 * 0.5;
        float _1138 = _1077 * 0.5;
        float _1139 = dot(vec3(_1136, _1137, _1138), vec3(_1136, _1137, _1138));
        float _1144 = (_1139 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1139);
        float _1152 = (dot(vec3(_664, _665, _666), vec3(_1144 * _1136, _1144 * _1137, _1144 * _1138)) + 1.0) * 0.5;
        float _3862 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1161 = sqrt(((_1137 * _1137) + (_1136 * _1136)) + (_1138 * _1138)) / (_1090 + 9.9999997473787516355514526367188e-06);
        float _3873 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _1163 = _1162 * 2.0;
        float _1167 = (1.0 - _1162) / (_1162 + 1.0);
        float _3884 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _1177 = ((((1.0 - _1168) * (_1163 + 2.0)) * exp2(log2(isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * (_1163 + 1.0))) + _1168) * _1090;
        float _1178 = _1058 * 0.5;
        float _1179 = _1068 * 0.5;
        float _1180 = _1078 * 0.5;
        float _1181 = dot(vec3(_1178, _1179, _1180), vec3(_1178, _1179, _1180));
        float _1186 = (_1181 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1181);
        float _1194 = (dot(vec3(_664, _665, _666), vec3(_1186 * _1178, _1186 * _1179, _1186 * _1180)) + 1.0) * 0.5;
        float _3895 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1203 = sqrt(((_1179 * _1179) + (_1178 * _1178)) + (_1180 * _1180)) / (_1091 + 9.9999997473787516355514526367188e-06);
        float _3906 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _1205 = _1204 * 2.0;
        float _1209 = (1.0 - _1204) / (_1204 + 1.0);
        float _3917 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1210 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
        float _1219 = ((((1.0 - _1210) * (_1205 + 2.0)) * exp2(log2(isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0))) * (_1205 + 1.0))) + _1210) * _1091;
        _1227 = _1058;
        _1229 = _1057;
        _1230 = _1056;
        _1231 = _1068;
        _1232 = _1067;
        _1233 = _1066;
        _1234 = _1078;
        _1235 = _1077;
        _1236 = _1076;
        _1237 = _1091;
        _1238 = _1090;
        _1239 = _1089;
        _1240 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0)));
        _1241 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0)));
        _1242 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0)));
    }
    else
    {
        _1227 = _1228;
        _1229 = _1228;
        _1230 = _1228;
        _1231 = _1228;
        _1232 = _1228;
        _1233 = _1228;
        _1234 = _1228;
        _1235 = _1228;
        _1236 = _1228;
        _1237 = _1228;
        _1238 = _1228;
        _1239 = _1228;
        _1240 = 0.0;
        _1241 = 0.0;
        _1242 = 0.0;
    }
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1271 = fma(_898, cbModelParam._m0[30u].z, fma(_894, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _890));
        float _1275 = fma(_898, cbModelParam._m0[31u].z, fma(_894, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _890));
        float _1279 = fma(_898, cbModelParam._m0[32u].z, fma(_894, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _890));
        float _1302 = _890 + _664;
        float _1303 = _894 + _665;
        float _1304 = _898 + _666;
        float _1314 = fma(_1304, cbModelParam._m0[30u].z, fma(_1303, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1302)) - _1271;
        float _1315 = fma(_1304, cbModelParam._m0[31u].z, fma(_1303, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1302)) - _1275;
        float _1316 = fma(_1304, cbModelParam._m0[32u].z, fma(_1303, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1302)) - _1279;
        float _1320 = inversesqrt(dot(vec3(_1314, _1315, _1316), vec3(_1314, _1315, _1316)));
        float _1333 = ((_1320 * _1314) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1271 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1334 = ((_1320 * _1315) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1275 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1335 = ((_1320 * _1316) / cbModelParam._m0[35u].z) + ((((((_1279 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1337 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1333, _1334, _1335), 0.0);
        vec4 _1344 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1333, _1334, _1335), 0.0);
        vec4 _1351 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1333, _1334, _1335), 0.0);
        vec4 _1358 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1333, _1334, _1335), 0.0);
        float _1370 = exp2((_1337.w + (-0.5)) * 20.0) * 2.0;
        float _1371 = _1370 * (_1337.x + (-0.5));
        float _1372 = _1370 * (_1337.y + (-0.5));
        float _1373 = _1370 * (_1337.z + (-0.5));
        float _1380 = exp2((_1344.w + (-0.5)) * 20.0) * 2.0;
        float _1381 = _1380 * (_1344.x + (-0.5));
        float _1382 = _1380 * (_1344.y + (-0.5));
        float _1383 = _1380 * (_1344.z + (-0.5));
        float _1390 = exp2((_1351.w + (-0.5)) * 20.0) * 2.0;
        float _1391 = _1390 * (_1351.x + (-0.5));
        float _1392 = _1390 * (_1351.y + (-0.5));
        float _1393 = _1390 * (_1351.z + (-0.5));
        float _1400 = exp2((_1358.w + (-0.5)) * 20.0) * 2.0;
        float _1401 = _1400 * (_1358.x + (-0.5));
        float _1402 = _1400 * (_1358.y + (-0.5));
        float _1403 = _1400 * (_1358.z + (-0.5));
        float _1404 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1405 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1406 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1407 = _1371 * 0.5;
        float _1408 = _1381 * 0.5;
        float _1409 = _1391 * 0.5;
        float _1410 = dot(vec3(_1407, _1408, _1409), vec3(_1407, _1408, _1409));
        float _1415 = (_1410 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1410);
        float _1423 = (dot(vec3(_664, _665, _666), vec3(_1415 * _1407, _1415 * _1408, _1415 * _1409)) + 1.0) * 0.5;
        float _3958 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1432 = sqrt(((_1408 * _1408) + (_1407 * _1407)) + (_1409 * _1409)) / (_1404 + 9.9999997473787516355514526367188e-06);
        float _3969 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1433 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
        float _1434 = _1433 * 2.0;
        float _1438 = (1.0 - _1433) / (_1433 + 1.0);
        float _3980 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1439 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
        float _1448 = ((((1.0 - _1439) * (_1434 + 2.0)) * exp2(log2(isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0))) * (_1434 + 1.0))) + _1439) * _1404;
        float _1449 = _1372 * 0.5;
        float _1450 = _1382 * 0.5;
        float _1451 = _1392 * 0.5;
        float _1452 = dot(vec3(_1449, _1450, _1451), vec3(_1449, _1450, _1451));
        float _1457 = (_1452 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1452);
        float _1465 = (dot(vec3(_664, _665, _666), vec3(_1457 * _1449, _1457 * _1450, _1457 * _1451)) + 1.0) * 0.5;
        float _3991 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1474 = sqrt(((_1450 * _1450) + (_1449 * _1449)) + (_1451 * _1451)) / (_1405 + 9.9999997473787516355514526367188e-06);
        float _4002 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1475 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _1476 = _1475 * 2.0;
        float _1480 = (1.0 - _1475) / (_1475 + 1.0);
        float _4013 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1481 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _1490 = ((((1.0 - _1481) * (_1476 + 2.0)) * exp2(log2(isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * (_1476 + 1.0))) + _1481) * _1405;
        float _1491 = _1373 * 0.5;
        float _1492 = _1383 * 0.5;
        float _1493 = _1393 * 0.5;
        float _1494 = dot(vec3(_1491, _1492, _1493), vec3(_1491, _1492, _1493));
        float _1499 = (_1494 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1494);
        float _1507 = (dot(vec3(_664, _665, _666), vec3(_1499 * _1491, _1499 * _1492, _1499 * _1493)) + 1.0) * 0.5;
        float _4024 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1516 = sqrt(((_1492 * _1492) + (_1491 * _1491)) + (_1493 * _1493)) / (_1406 + 9.9999997473787516355514526367188e-06);
        float _4035 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1517 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _1518 = _1517 * 2.0;
        float _1522 = (1.0 - _1517) / (_1517 + 1.0);
        float _4046 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1523 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
        float _1532 = ((((1.0 - _1523) * (_1518 + 2.0)) * exp2(log2(isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0))) * (_1518 + 1.0))) + _1523) * _1406;
        _1540 = _1373;
        _1541 = _1372;
        _1542 = _1371;
        _1543 = _1383;
        _1544 = _1382;
        _1545 = _1381;
        _1546 = _1393;
        _1547 = _1392;
        _1548 = _1391;
        _1549 = _1406;
        _1550 = _1405;
        _1551 = _1404;
        _1552 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0)));
        _1553 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0)));
        _1554 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0)));
    }
    else
    {
        _1540 = _1228;
        _1541 = _1228;
        _1542 = _1228;
        _1543 = _1228;
        _1544 = _1228;
        _1545 = _1228;
        _1546 = _1228;
        _1547 = _1228;
        _1548 = _1228;
        _1549 = _1228;
        _1550 = _1228;
        _1551 = _1228;
        _1552 = 0.0;
        _1553 = 0.0;
        _1554 = 0.0;
    }
    float _1564 = (cbModelParam._m0[1u].x * (_1552 - _1240)) + _1240;
    float _1565 = (cbModelParam._m0[1u].x * (_1553 - _1241)) + _1241;
    float _1566 = (cbModelParam._m0[1u].x * (_1554 - _1242)) + _1242;
    float _1587 = fma(_1566, cbSceneParam._m0[89u].z, fma(_1565, cbSceneParam._m0[89u].y, _1564 * cbSceneParam._m0[89u].x));
    float _1590 = fma(_1566, cbSceneParam._m0[90u].z, fma(_1565, cbSceneParam._m0[90u].y, _1564 * cbSceneParam._m0[90u].x));
    float _1593 = fma(_1566, cbSceneParam._m0[91u].z, fma(_1565, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1564));
    float _1608 = _837 * 0.5;
    float _1609 = _838 * 0.5;
    float _1610 = _839 * 0.5;
    float _1611 = dot(vec4(_1608, _1609, _1610, 1.0), vec4(_1542, _1545, _1548, _1551));
    float _1614 = dot(vec4(_1608, _1609, _1610, 1.0), vec4(_1541, _1544, _1547, _1550));
    float _1617 = dot(vec4(_1608, _1609, _1610, 1.0), vec4(_1540, _1543, _1546, _1549));
    float _1651;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1624 = dot(vec4(_1608, _1609, _1610, 1.0), vec4(_1227, _1231, _1234, _1237));
        float _1628 = dot(vec4(_1608, _1609, _1610, 1.0), vec4(_1229, _1232, _1235, _1238));
        float _1632 = dot(vec4(_1608, _1609, _1610, 1.0), vec4(_1230, _1233, _1236, _1239));
        float _1639 = dot(vec4(cbModelParam._m0[39u]), vec4(_1608, _1609, _1610, 1.0));
        _1651 = dot(vec3(isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0)), isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0)), isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1639) ? 0.0 : (isnan(0.0) ? _1639 : max(0.0, _1639))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1651 = 1.0;
    }
    float _1662;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1653 = dot(vec4(cbModelParam._m0[40u]), vec4(_1608, _1609, _1610, 1.0));
        _1662 = dot(vec3(isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0)), isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0)), isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1653) ? 0.0 : (isnan(0.0) ? _1653 : max(0.0, _1653))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1662 = 1.0;
    }
    float _1666 = (_1662 * cbModelParam._m0[1u].x) + (_1651 * (1.0 - cbModelParam._m0[1u].x));
    float _1676 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _667);
    float _1677 = isnan(_1676) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1676 : min(cbModelParam._m0[25u].z, _1676));
    float _1757;
    float _1759;
    float _1761;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1724 = fma(_898, cbModelParam._m0[13u].z, fma(_894, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _890)) + cbModelParam._m0[13u].w;
        float _1728 = fma(_898, cbModelParam._m0[14u].z, fma(_894, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _890)) + cbModelParam._m0[14u].w;
        float _1732 = fma(_898, cbModelParam._m0[15u].z, fma(_894, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _890)) + cbModelParam._m0[15u].w;
        float _1735 = fma(_839, cbModelParam._m0[13u].z, fma(_838, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _837));
        float _1738 = fma(_839, cbModelParam._m0[14u].z, fma(_838, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _837));
        float _1741 = fma(_839, cbModelParam._m0[15u].z, fma(_838, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _837));
        float _1769;
        if (_1735 > 0.0)
        {
            _1769 = abs((1.0 - _1724) / _1735);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1735 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1724 + 1.0) / _1735);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1769 = frontier_phi_17_15_ladder;
        }
        float _1970;
        if (_1738 > 0.0)
        {
            _1970 = abs((1.0 - _1728) / _1738);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1738 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1728 + 1.0) / _1738);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1970 = frontier_phi_26_22_ladder;
        }
        float _2213;
        if (_1741 > 0.0)
        {
            _2213 = abs((1.0 - _1732) / _1741);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1741 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1732 + 1.0) / _1741);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2213 = frontier_phi_38_33_ladder;
        }
        float _2215 = isnan(_1970) ? _1769 : (isnan(_1769) ? _1970 : min(_1769, _1970));
        float _2216 = isnan(_2213) ? _2215 : (isnan(_2215) ? _2213 : min(_2215, _2213));
        float _2220 = (_2216 * _1735) + _1724;
        float _2221 = (_2216 * _1738) + _1728;
        float _2222 = (_2216 * _1741) + _1732;
        float _2223 = _2216 * 9.9999997473787516355514526367188e-05;
        float _2225 = (-1.0) - _2223;
        float _2227 = _2223 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2222 > _2227) || ((_2222 < _2225) || ((_2221 > _2227) || ((_2221 < _2225) || ((_2220 < _2225) || (_2220 > _2227))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2346 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2222, cbModelParam._m0[9u].z, fma(_2221, cbModelParam._m0[9u].y, _2220 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2222, cbModelParam._m0[10u].z, fma(_2221, cbModelParam._m0[10u].y, _2220 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2222, cbModelParam._m0[11u].z, fma(_2221, cbModelParam._m0[11u].y, _2220 * cbModelParam._m0[11u].x))), _1677);
            frontier_phi_16_38_ladder = _2346.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2346.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2346.x * cbModelParam._m0[1u].y;
        }
        _1757 = frontier_phi_16_38_ladder_2;
        _1759 = frontier_phi_16_38_ladder_1;
        _1761 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1745 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_837, _838, _839), _1677);
        _1757 = _1745.x * cbModelParam._m0[1u].y;
        _1759 = _1745.y * cbModelParam._m0[1u].y;
        _1761 = _1745.z * cbModelParam._m0[1u].y;
    }
    float _1765 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _667);
    float _1766 = isnan(_1765) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1765 : min(cbModelParam._m0[25u].w, _1765));
    float _1856;
    float _1858;
    float _1860;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1820 = fma(_898, cbModelParam._m0[21u].z, fma(_894, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _890)) + cbModelParam._m0[21u].w;
        float _1824 = fma(_898, cbModelParam._m0[22u].z, fma(_894, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _890)) + cbModelParam._m0[22u].w;
        float _1828 = fma(_898, cbModelParam._m0[23u].z, fma(_894, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _890)) + cbModelParam._m0[23u].w;
        float _1831 = fma(_839, cbModelParam._m0[21u].z, fma(_838, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _837));
        float _1834 = fma(_839, cbModelParam._m0[22u].z, fma(_838, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _837));
        float _1837 = fma(_839, cbModelParam._m0[23u].z, fma(_838, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _837));
        float _1975;
        if (_1831 > 0.0)
        {
            _1975 = abs((1.0 - _1820) / _1831);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1831 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1820 + 1.0) / _1831);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1975 = frontier_phi_28_24_ladder;
        }
        float _2240;
        if (_1834 > 0.0)
        {
            _2240 = abs((1.0 - _1824) / _1834);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1834 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1824 + 1.0) / _1834);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2240 = frontier_phi_40_35_ladder;
        }
        float _2445;
        if (_1837 > 0.0)
        {
            _2445 = abs((1.0 - _1828) / _1837);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1837 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1828 + 1.0) / _1837);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2445 = frontier_phi_49_46_ladder;
        }
        float _2447 = isnan(_2240) ? _1975 : (isnan(_1975) ? _2240 : min(_1975, _2240));
        float _2448 = isnan(_2445) ? _2447 : (isnan(_2447) ? _2445 : min(_2447, _2445));
        float _2452 = (_2448 * _1831) + _1820;
        float _2453 = (_2448 * _1834) + _1824;
        float _2454 = (_2448 * _1837) + _1828;
        float _2455 = _2448 * 9.9999997473787516355514526367188e-05;
        float _2456 = (-1.0) - _2455;
        float _2458 = _2455 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2454 > _2458) || ((_2454 < _2456) || ((_2453 > _2458) || ((_2453 < _2456) || ((_2452 < _2456) || (_2452 > _2458))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2682 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2454, cbModelParam._m0[17u].z, fma(_2453, cbModelParam._m0[17u].y, _2452 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2454, cbModelParam._m0[18u].z, fma(_2453, cbModelParam._m0[18u].y, _2452 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2454, cbModelParam._m0[19u].z, fma(_2453, cbModelParam._m0[19u].y, _2452 * cbModelParam._m0[19u].x))), _1766);
            frontier_phi_25_49_ladder = _2682.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2682.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2682.x * cbModelParam._m0[1u].z;
        }
        _1856 = frontier_phi_25_49_ladder_2;
        _1858 = frontier_phi_25_49_ladder_1;
        _1860 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1840 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_837, _838, _839), _1766);
        _1856 = _1840.x * cbModelParam._m0[1u].z;
        _1858 = _1840.y * cbModelParam._m0[1u].z;
        _1860 = _1840.z * cbModelParam._m0[1u].z;
    }
    float _1872 = ((((1.0 - _858) * ((_845 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_858 * _845)) * _829;
    float _1873 = _1872 * ((cbModelParam._m0[1u].w * (_1856 - _1757)) + _1757);
    float _1874 = _1872 * ((cbModelParam._m0[1u].w * (_1858 - _1759)) + _1759);
    float _1875 = _1872 * ((cbModelParam._m0[1u].w * (_1860 - _1761)) + _1761);
    float _1878 = fma(_1875, cbSceneParam._m0[89u].z, fma(_1874, cbSceneParam._m0[89u].y, _1873 * cbSceneParam._m0[89u].x));
    float _1881 = fma(_1875, cbSceneParam._m0[90u].z, fma(_1874, cbSceneParam._m0[90u].y, _1873 * cbSceneParam._m0[90u].x));
    float _1884 = fma(_1875, cbSceneParam._m0[91u].z, fma(_1874, cbSceneParam._m0[91u].y, _1873 * cbSceneParam._m0[91u].x));
    uvec4 _1894 = floatBitsToUint(cbInstanceData._m0[_804 + 5u]);
    uint _1896 = _1894.x * 14u;
    uint _1897 = _1896 + 13u;
    float _1904 = _829 + (-1.0);
    float _1909 = (cbLight._m0[_1897].x * _1904) + 1.0;
    float _1910 = (cbLight._m0[_1897].y * _1904) + 1.0;
    float _1911 = (cbLight._m0[_1897].z * _1904) + 1.0;
    float _1912 = (cbLight._m0[_1897].w * _1904) + 1.0;
    uint _1913 = _1896 + 5u;
    float _1919 = isnan(1.0) ? _1910 : (isnan(_1910) ? 1.0 : min(_1910, 1.0));
    uint _1923 = _1896 + 4u;
    float _1929 = isnan(1.0) ? _1909 : (isnan(_1909) ? 1.0 : min(_1909, 1.0));
    uint _1933 = _1896 | 1u;
    float _1944 = dot(vec3(cbLight._m0[_1896].xyz), vec3(_664, _665, _666));
    float _1947 = dot(vec3(cbLight._m0[_1933].xyz), vec3(_664, _665, _666));
    float _4182 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
    float _4193 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
    float _1952 = (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * 0.3183098733425140380859375;
    float _1954 = (isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0))) * 0.3183098733425140380859375;
    float _1961 = ((cbLight._m0[_1913].x * _1919) * _1954) + ((cbLight._m0[_1923].x * _1929) * _1952);
    float _1962 = ((_1919 * cbLight._m0[_1913].y) * _1954) + ((_1929 * cbLight._m0[_1923].y) * _1952);
    float _1963 = ((_1919 * cbLight._m0[_1913].z) * _1954) + ((_1929 * cbLight._m0[_1923].z) * _1952);
    uvec4 _1967 = floatBitsToUint(cbLight._m0[_1896 + 12u]);
    bool _1969 = _1967.x == 0u;
    float _1980;
    float _1982;
    float _1984;
    if (_1969)
    {
        _1980 = _1961;
        _1982 = _1962;
        _1984 = _1963;
    }
    else
    {
        uint _1988 = _1896 + 6u;
        float _2004 = (dot(vec3(cbLight._m0[_1896 + 2u].xyz), vec3(_664, _665, _666)) * 0.5) + 0.5;
        float _2005 = _2004 * _2004;
        float _4204 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
        float _2006 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
        float _2007 = isnan(1.0) ? _1911 : (isnan(_1911) ? 1.0 : min(_1911, 1.0));
        _1980 = (((cbLight._m0[_1988].x * 0.3183098733425140380859375) * _2006) * _2007) + _1961;
        _1982 = (((cbLight._m0[_1988].y * 0.3183098733425140380859375) * _2006) * _2007) + _1962;
        _1984 = (((cbLight._m0[_1988].z * 0.3183098733425140380859375) * _2006) * _2007) + _1963;
    }
    bool _1987 = _1967.y == 0u;
    float _2025;
    float _2027;
    float _2029;
    if (_1987)
    {
        _2025 = _1980;
        _2027 = _1982;
        _2029 = _1984;
    }
    else
    {
        uint _2184 = _1896 + 7u;
        float _2200 = (dot(vec3(cbLight._m0[_1896 + 3u].xyz), vec3(_664, _665, _666)) * 0.5) + 0.5;
        float _2201 = _2200 * _2200;
        float _4220 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
        float _2202 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _2203 = isnan(1.0) ? _1912 : (isnan(_1912) ? 1.0 : min(_1912, 1.0));
        _2025 = (((cbLight._m0[_2184].x * 0.3183098733425140380859375) * _2202) * _2203) + _1980;
        _2027 = (((cbLight._m0[_2184].y * 0.3183098733425140380859375) * _2202) * _2203) + _1982;
        _2029 = (((cbLight._m0[_2184].z * 0.3183098733425140380859375) * _2202) * _2203) + _1984;
    }
    uint _2032 = _1896 + 8u;
    float _2045 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1896].w)) * _667) * 0.949999988079071044921875);
    float _2046 = _2045 * _2045;
    float _2047 = cbLight._m0[_1896].x + _744;
    float _2048 = cbLight._m0[_1896].y + _745;
    float _2049 = cbLight._m0[_1896].z + _746;
    float _2053 = inversesqrt(dot(vec3(_2047, _2048, _2049), vec3(_2047, _2048, _2049)));
    float _2054 = _2053 * _2047;
    float _2055 = _2053 * _2048;
    float _2056 = _2053 * _2049;
    float _2057 = dot(vec3(_664, _665, _666), vec3(cbLight._m0[_1896].xyz));
    float _4236 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
    float _2060 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
    float _4247 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _2061 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
    float _2062 = dot(vec3(_664, _665, _666), vec3(_2054, _2055, _2056));
    float _4258 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
    float _2065 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
    float _2066 = dot(vec3(cbLight._m0[_1896].xyz), vec3(_2054, _2055, _2056));
    float _4269 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
    float _2070 = _2046 * _2046;
    float _2074 = ((_2065 * _2065) * (_2070 + (-1.0))) + 1.0;
    float _2085 = (exp2(log2(1.0 - (isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2086 = 1.0 - _2046;
    float _2097 = (0.5 / (((_2061 * ((_2060 * _2086) + _2046)) + 9.9999999392252902907785028219223e-09) + (((_2061 * _2086) + _2046) * _2060))) * _2060;
    float _4280 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
    float _2099 = (isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * (_2070 / ((_2074 * _2074) * 3.141590118408203125));
    uint _2110 = _1896 + 9u;
    float _2121 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1933].w)) * _667) * 0.949999988079071044921875);
    float _2122 = _2121 * _2121;
    float _2123 = cbLight._m0[_1933].x + _744;
    float _2124 = cbLight._m0[_1933].y + _745;
    float _2125 = cbLight._m0[_1933].z + _746;
    float _2129 = inversesqrt(dot(vec3(_2123, _2124, _2125), vec3(_2123, _2124, _2125)));
    float _2130 = _2129 * _2123;
    float _2131 = _2129 * _2124;
    float _2132 = _2129 * _2125;
    float _2133 = dot(vec3(_664, _665, _666), vec3(cbLight._m0[_1933].xyz));
    float _4291 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
    float _2136 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
    float _2137 = dot(vec3(_664, _665, _666), vec3(_2130, _2131, _2132));
    float _4302 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
    float _2140 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
    float _2141 = dot(vec3(cbLight._m0[_1933].xyz), vec3(_2130, _2131, _2132));
    float _4313 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
    float _2145 = _2122 * _2122;
    float _2149 = ((_2140 * _2140) * (_2145 + (-1.0))) + 1.0;
    float _2158 = (exp2(log2(1.0 - (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2159 = 1.0 - _2122;
    float _2169 = (0.5 / (((_2061 * ((_2136 * _2159) + _2122)) + 9.9999999392252902907785028219223e-09) + (((_2061 * _2159) + _2122) * _2136))) * _2136;
    float _4324 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
    float _2171 = (isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * (_2145 / ((_2149 * _2149) * 3.141590118408203125));
    float _2181 = (((_2158 * cbLight._m0[_2110].x) * _2171) * _1919) + (((_2085 * cbLight._m0[_2032].x) * _2099) * _1929);
    float _2182 = (((_2158 * cbLight._m0[_2110].y) * _2171) * _1919) + (((_2085 * cbLight._m0[_2032].y) * _2099) * _1929);
    float _2183 = (((_2158 * cbLight._m0[_2110].z) * _2171) * _1919) + (((_2085 * cbLight._m0[_2032].z) * _2099) * _1929);
    float _2245;
    float _2247;
    float _2249;
    if (_1969)
    {
        _2245 = _2181;
        _2247 = _2182;
        _2249 = _2183;
    }
    else
    {
        uint _2251 = _1896 + 2u;
        uint _2255 = _1896 + 10u;
        float _2269 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2251].w)) * _667) * 0.949999988079071044921875);
        float _2270 = _2269 * _2269;
        float _2271 = cbLight._m0[_2251].x + _744;
        float _2272 = cbLight._m0[_2251].y + _745;
        float _2273 = cbLight._m0[_2251].z + _746;
        float _2277 = inversesqrt(dot(vec3(_2271, _2272, _2273), vec3(_2271, _2272, _2273)));
        float _2278 = _2277 * _2271;
        float _2279 = _2277 * _2272;
        float _2280 = _2277 * _2273;
        float _2281 = dot(vec3(_664, _665, _666), vec3(cbLight._m0[_2251].xyz));
        float _4335 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
        float _2284 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _2285 = dot(vec3(_664, _665, _666), vec3(_2278, _2279, _2280));
        float _4346 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
        float _2288 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _2289 = dot(vec3(cbLight._m0[_2251].xyz), vec3(_2278, _2279, _2280));
        float _4357 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
        float _2293 = _2270 * _2270;
        float _2297 = ((_2288 * _2288) * (_2293 + (-1.0))) + 1.0;
        float _2306 = (exp2(log2(1.0 - (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2307 = 1.0 - _2270;
        float _2317 = (0.5 / (((_2061 * ((_2284 * _2307) + _2270)) + 9.9999999392252902907785028219223e-09) + (((_2061 * _2307) + _2270) * _2284))) * _2284;
        float _4368 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
        float _2319 = (isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) * (_2293 / ((_2297 * _2297) * 3.141590118408203125));
        float _2320 = isnan(1.0) ? _1911 : (isnan(_1911) ? 1.0 : min(_1911, 1.0));
        _2245 = (((_2306 * cbLight._m0[_2255].x) * _2319) * _2320) + _2181;
        _2247 = (((_2306 * cbLight._m0[_2255].y) * _2319) * _2320) + _2182;
        _2249 = (((_2306 * cbLight._m0[_2255].z) * _2319) * _2320) + _2183;
    }
    float _2355;
    float _2357;
    float _2359;
    if (_1987)
    {
        _2355 = _2245;
        _2357 = _2247;
        _2359 = _2249;
    }
    else
    {
        uint _2366 = _1896 + 3u;
        uint _2370 = _1896 + 11u;
        float _2384 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2366].w)) * _667) * 0.949999988079071044921875);
        float _2385 = _2384 * _2384;
        float _2386 = cbLight._m0[_2366].x + _744;
        float _2387 = cbLight._m0[_2366].y + _745;
        float _2388 = cbLight._m0[_2366].z + _746;
        float _2392 = inversesqrt(dot(vec3(_2386, _2387, _2388), vec3(_2386, _2387, _2388)));
        float _2393 = _2392 * _2386;
        float _2394 = _2392 * _2387;
        float _2395 = _2392 * _2388;
        float _2396 = dot(vec3(_664, _665, _666), vec3(cbLight._m0[_2366].xyz));
        float _4384 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
        float _2399 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
        float _2400 = dot(vec3(_664, _665, _666), vec3(_2393, _2394, _2395));
        float _4395 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
        float _2403 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
        float _2404 = dot(vec3(cbLight._m0[_2366].xyz), vec3(_2393, _2394, _2395));
        float _4406 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
        float _2408 = _2385 * _2385;
        float _2412 = ((_2403 * _2403) * (_2408 + (-1.0))) + 1.0;
        float _2421 = (exp2(log2(1.0 - (isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2422 = 1.0 - _2385;
        float _2432 = (0.5 / (((_2061 * ((_2399 * _2422) + _2385)) + 9.9999999392252902907785028219223e-09) + (((_2061 * _2422) + _2385) * _2399))) * _2399;
        float _4417 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
        float _2434 = (isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0))) * (_2408 / ((_2412 * _2412) * 3.141590118408203125));
        float _2435 = isnan(1.0) ? _1912 : (isnan(_1912) ? 1.0 : min(_1912, 1.0));
        _2355 = (((_2421 * cbLight._m0[_2370].x) * _2434) * _2435) + _2245;
        _2357 = (((_2421 * cbLight._m0[_2370].y) * _2434) * _2435) + _2247;
        _2359 = (((_2421 * cbLight._m0[_2370].z) * _2434) * _2435) + _2249;
    }
    float _2570;
    float _2572;
    float _2574;
    float _2576;
    float _2578;
    float _2580;
    if (_1894.y == 0u)
    {
        float _2510 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2511 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2510;
        float _2512 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2510;
        float _2513 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2510;
        uvec4 _2525 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2526 = _2525.x;
        uint _2537 = uint((float(_2525.y) * floor(float(uint(cbSceneParam._m0[85u].y * _766) / _2526))) + floor(float(uint(cbSceneParam._m0[85u].x * _765) / _2526)));
        float _2547 = (log2(_2513 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2548 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
        uint _2551 = uint(isnan(14.0) ? _2548 : (isnan(_2548) ? 14.0 : min(_2548, 14.0)));
        uvec4 _2556 = texelFetch(g_lightClusterGridBuffer, int(((_2551 << 2u) + (_2537 << 6u)) >> 2u));
        uint _2557 = _2556.x;
        uint _2558 = _2525.z;
        float _2687;
        float _2689;
        float _2691;
        float _2693;
        float _2695;
        float _2697;
        if (((((1u << ((_2558 >> 4u) & 15u)) + 4294967295u) & _2557) == 0u) || ((_2558 & 240u) == 0u))
        {
            _2687 = 0.0;
            _2689 = 0.0;
            _2691 = 0.0;
            _2693 = 0.0;
            _2695 = 0.0;
            _2697 = 0.0;
        }
        else
        {
            float _2688;
            float _2690;
            float _2692;
            float _2694;
            float _2696;
            float _2698;
            float _2848 = 0.0;
            float _2849 = 0.0;
            float _2850 = 0.0;
            float _2851 = 0.0;
            float _2852 = 0.0;
            float _2853 = 0.0;
            uint _2854 = 0u;
            uint _2863;
            bool _2864;
            for (;;)
            {
                _2863 = texelFetch(g_lightClassification, int((((_2551 << 5u) + (_2537 << 9u)) + (_2854 << 2u)) >> 2u)).x;
                _2864 = _2863 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2864)
                {
                    frontier_phi_66_pred = _2848;
                    frontier_phi_66_pred_1 = _2853;
                    frontier_phi_66_pred_2 = _2852;
                    frontier_phi_66_pred_3 = _2851;
                    frontier_phi_66_pred_4 = _2850;
                    frontier_phi_66_pred_5 = _2849;
                }
                else
                {
                    float _2993;
                    float _2994;
                    float _2995;
                    float _2996;
                    float _2997;
                    float _2998;
                    uint _2999;
                    _2993 = _2848;
                    _2994 = _2849;
                    _2995 = _2850;
                    _2996 = _2851;
                    _2997 = _2852;
                    _2998 = _2853;
                    _2999 = _2863;
                    float _2920;
                    float _2921;
                    float _2922;
                    float _2923;
                    float _2924;
                    float _2925;
                    for (;;)
                    {
                        uint _3003 = uint(findLSB(_2999)) + (_2854 << 5u);
                        uint _3000 = (_2999 + 4294967295u) & _2999;
                        uint _3005 = _3003 * 48u;
                        vec4 _3019 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3005)).x, texelFetch(g_PointLightRenderingBuffer, int(_3005 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3005 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3005 + 3u)).x));
                        uint _3025 = (_3003 * 48u) + 4u;
                        vec4 _3038 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3025)).x, texelFetch(g_PointLightRenderingBuffer, int(_3025 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3025 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3025 + 3u)).x));
                        uint _3044 = (_3003 * 48u) + 8u;
                        vec3 _3055 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3044)).x, texelFetch(g_PointLightRenderingBuffer, int(_3044 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3044 + 2u)).x));
                        float _3059 = _3019.x - _2511;
                        float _3060 = _3019.y - _2512;
                        float _3061 = _3019.z - _2513;
                        float _3062 = dot(vec3(_3059, _3060, _3061), vec3(_3059, _3060, _3061));
                        float _3065 = inversesqrt(_3062);
                        float _3066 = _3065 * _3059;
                        float _3067 = _3065 * _3060;
                        float _3068 = _3065 * _3061;
                        float _3069 = dot(vec3(_785, _788, _791), vec3(_3066, _3067, _3068));
                        float _3074 = 1.0 - (_3062 * _3019.w);
                        float _4443 = isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0));
                        float _3075 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
                        float _3076 = sqrt(_3062) * _3038.w;
                        float _3079 = 1.39999997615814208984375 / (_3076 + 1.39999997615814208984375);
                        float _3080 = _3079 * _3079;
                        float _3083 = ((1.0 - _3080) * _3069) + _3080;
                        float _3086 = _3076 * _3076;
                        float _3090 = ((isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0))) * _3075) / ((_3086 * 0.699999988079071044921875) + 1.0);
                        float _3094 = (-0.0) - _2511;
                        float _3095 = (-0.0) - _2512;
                        float _3096 = (-0.0) - _2513;
                        float _3100 = inversesqrt(dot(vec3(_3094, _3095, _3096), vec3(_3094, _3095, _3096)));
                        float _3101 = _3100 * _3094;
                        float _3102 = _3100 * _3095;
                        float _3103 = _3100 * _3096;
                        float _3111 = exp2(log2(1.0 / ((_3086 * 3.5) + 5.0)) * 0.25);
                        float _3112 = 1.0 - _845;
                        float _3119 = sqrt(1.0 - ((1.0 - (_3112 * _3112)) * (1.0 - (_3111 * _3111))));
                        float _3120 = _3119 * _3119;
                        float _3121 = _3120 * _3120;
                        float _3122 = _3101 + _3066;
                        float _3123 = _3102 + _3067;
                        float _3124 = _3103 + _3068;
                        float _3128 = inversesqrt(dot(vec3(_3122, _3123, _3124), vec3(_3122, _3123, _3124)));
                        float _3132 = dot(vec3(_785, _788, _791), vec3(_3101, _3102, _3103));
                        float _4459 = isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0));
                        float _3135 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
                        float _3136 = dot(vec3(_785, _788, _791), vec3(_3128 * _3122, _3128 * _3123, _3128 * _3124));
                        float _4470 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0));
                        float _3139 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
                        float _3143 = ((_3139 * _3139) * (_3121 + (-1.0))) + 1.0;
                        float _3144 = _3079 * _3120;
                        float _3145 = _3144 * _3144;
                        float _3148 = ((1.0 - _3145) * _3069) + _3145;
                        float _4481 = isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0));
                        float _3149 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
                        float _3150 = 1.0 - _3120;
                        float _3160 = (0.5 / (((_3149 * ((_3135 * _3150) + _3120)) + 9.9999999392252902907785028219223e-09) + (((_3149 * _3150) + _3120) * _3135))) * _3149;
                        float _4492 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0));
                        float _3171 = (((_3121 * 3.1415927410125732421875) * (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0)))) / ((_3143 * _3143) * ((_3086 * 2.1991131305694580078125) + 3.141590118408203125))) * _3075;
                        _2923 = (_3090 * _3038.x) + _2996;
                        _2924 = (_3090 * _3038.y) + _2997;
                        _2925 = (_3090 * _3038.z) + _2998;
                        _2920 = (_3171 * _3055.x) + _2993;
                        _2921 = (_3171 * _3055.y) + _2994;
                        _2922 = (_3171 * _3055.z) + _2995;
                        if (_3000 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2993 = _2920;
                            _2994 = _2921;
                            _2995 = _2922;
                            _2996 = _2923;
                            _2997 = _2924;
                            _2998 = _2925;
                            _2999 = _3000;
                        }
                    }
                    frontier_phi_66_pred = _2920;
                    frontier_phi_66_pred_1 = _2925;
                    frontier_phi_66_pred_2 = _2924;
                    frontier_phi_66_pred_3 = _2923;
                    frontier_phi_66_pred_4 = _2922;
                    frontier_phi_66_pred_5 = _2921;
                }
                _2688 = frontier_phi_66_pred;
                _2698 = frontier_phi_66_pred_1;
                _2696 = frontier_phi_66_pred_2;
                _2694 = frontier_phi_66_pred_3;
                _2692 = frontier_phi_66_pred_4;
                _2690 = frontier_phi_66_pred_5;
                uint _2855 = _2854 + 1u;
                if (_2855 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2848 = _2688;
                    _2849 = _2690;
                    _2850 = _2692;
                    _2851 = _2694;
                    _2852 = _2696;
                    _2853 = _2698;
                    _2854 = _2855;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2687 = _2688;
            _2689 = _2690;
            _2691 = _2692;
            _2693 = _2694;
            _2695 = _2696;
            _2697 = _2698;
        }
        uvec4 _2701 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2702 = _2701.z;
        uint _2704 = (_2702 >> 8u) & 15u;
        float _2816;
        float _2818;
        float _2820;
        float _2822;
        float _2824;
        float _2826;
        if (((4294967295u << _2704) & _2557) == 0u)
        {
            _2816 = _2687;
            _2818 = _2689;
            _2820 = _2691;
            _2822 = _2693;
            _2824 = _2695;
            _2826 = _2697;
        }
        else
        {
            float _2841 = inversesqrt(dot(vec3(_2511, _2512, _2513), vec3(_2511, _2512, _2513)));
            float _2842 = _2841 * _2511;
            float _2843 = _2841 * _2512;
            float _2844 = _2841 * _2513;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2704 < ((_2702 >> 12u) & 15u))
            {
                float _2817;
                float _2819;
                float _2821;
                float _2823;
                float _2825;
                float _2827;
                float _2976 = _2687;
                float _2977 = _2689;
                float _2978 = _2691;
                float _2979 = _2693;
                float _2980 = _2695;
                float _2981 = _2697;
                uint _2982 = _2704;
                uint _2991;
                bool _2992;
                for (;;)
                {
                    _2991 = texelFetch(g_lightClassification, int((((_2551 << 5u) + (_2537 << 9u)) + (_2982 << 2u)) >> 2u)).x;
                    _2992 = _2991 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2992)
                    {
                        frontier_phi_77_pred = _2981;
                        frontier_phi_77_pred_1 = _2980;
                        frontier_phi_77_pred_2 = _2979;
                        frontier_phi_77_pred_3 = _2978;
                        frontier_phi_77_pred_4 = _2977;
                        frontier_phi_77_pred_5 = _2976;
                    }
                    else
                    {
                        float _3185;
                        float _3186;
                        float _3187;
                        float _3188;
                        float _3189;
                        float _3190;
                        float _3479;
                        float _3480;
                        float _3481;
                        float _3482;
                        float _3483;
                        float _3484;
                        float _3198 = _2976;
                        float _3199 = _2977;
                        float _3200 = _2978;
                        float _3201 = _2979;
                        float _3202 = _2980;
                        float _3203 = _2981;
                        uint _3204 = _2991;
                        uint _3205;
                        vec4 _3230;
                        float _3231;
                        vec4 _3246;
                        vec3 _3258;
                        vec4 _3273;
                        vec4 _3288;
                        float _3335;
                        bool _3336;
                        for (;;)
                        {
                            uint _3215 = ((_2982 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3204));
                            _3205 = (_3204 + 4294967295u) & _3204;
                            uint _3217 = _3215 * 40u;
                            _3230 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3217)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 3u)).x));
                            _3231 = _3230.w;
                            uint _3233 = (_3215 * 40u) + 4u;
                            _3246 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3233)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 3u)).x));
                            uint _3248 = (_3215 * 40u) + 8u;
                            _3258 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3248)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 2u)).x));
                            uint _3260 = (_3215 * 40u) + 16u;
                            _3273 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3260)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 3u)).x));
                            uint _3275 = (_3215 * 40u) + 20u;
                            _3288 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3275)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 3u)).x));
                            uint _3291 = (_3215 * 40u) + 24u;
                            vec4 _3304 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3291)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 3u)).x));
                            uint _3310 = (_3215 * 40u) + 28u;
                            vec4 _3323 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3310)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 3u)).x));
                            _3335 = fma(_2513, _3323.z, fma(_2512, _3323.y, _3323.x * _2511)) + _3323.w;
                            _3336 = !((fma(_2513, _3304.z, fma(_2512, _3304.y, _3304.x * _2511)) + _3304.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3336)
                            {
                                float _3363 = _3230.x - _2511;
                                float _3364 = _3230.y - _2512;
                                float _3365 = _3230.z - _2513;
                                float _3366 = dot(vec3(_3363, _3364, _3365), vec3(_3363, _3364, _3365));
                                float _3369 = inversesqrt(_3366);
                                float _3370 = _3369 * _3363;
                                float _3371 = _3369 * _3364;
                                float _3372 = _3369 * _3365;
                                float _3376 = 1.0 - (_3366 / (_3231 * _3231));
                                float _4503 = isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0));
                                float _3377 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
                                float _3381 = sqrt(_3366) * _3246.w;
                                float _3383 = 1.39999997615814208984375 / (_3381 + 1.39999997615814208984375);
                                float _3384 = _3383 * _3383;
                                float _3387 = ((1.0 - _3384) * dot(vec3(_3370, _3371, _3372), vec3(_785, _788, _791))) + _3384;
                                float _3390 = _3381 * _3381;
                                float _3394 = (fma(_2513, _3273.z, fma(_2512, _3273.y, _3273.x * _2511)) + _3273.w) / _3335;
                                float _3395 = (fma(_2513, _3288.z, fma(_2512, _3288.y, _3288.x * _2511)) + _3288.w) / _3335;
                                float _3399 = 1.0 - dot(vec2(_3394, _3395), vec2(_3394, _3395));
                                float _4519 = isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : max(_3399, 0.0));
                                float _3400 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
                                float _3401 = _3400 * (((isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : max(_3387, 0.0))) * _3377) / ((_3390 * 0.699999988079071044921875) + 1.0));
                                float _3413 = exp2(log2(1.0 / ((_3390 * 3.5) + 5.0)) * 0.25);
                                float _3414 = 1.0 - _845;
                                float _3421 = sqrt(1.0 - ((1.0 - (_3414 * _3414)) * (1.0 - (_3413 * _3413))));
                                float _3422 = _3421 * _3421;
                                float _3423 = _3422 * _3422;
                                float _3424 = _3370 - _2842;
                                float _3425 = _3371 - _2843;
                                float _3426 = _3372 - _2844;
                                float _3430 = inversesqrt(dot(vec3(_3424, _3425, _3426), vec3(_3424, _3425, _3426)));
                                float _3434 = dot(vec3(_785, _788, _791), vec3((-0.0) - _2842, (-0.0) - _2843, (-0.0) - _2844));
                                float _4530 = isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0));
                                float _3437 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
                                float _3438 = dot(vec3(_785, _788, _791), vec3(_3430 * _3424, _3430 * _3425, _3430 * _3426));
                                float _4541 = isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : max(_3438, 0.0));
                                float _3441 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
                                float _3445 = ((_3441 * _3441) * (_3423 + (-1.0))) + 1.0;
                                float _3446 = _3383 * _3422;
                                float _3447 = _3446 * _3446;
                                float _3453 = ((1.0 - _3447) * dot(vec3(_785, _788, _791), vec3(_3370, _3371, _3372))) + _3447;
                                float _4552 = isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0));
                                float _3454 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
                                float _3455 = 1.0 - _3422;
                                float _3465 = (0.5 / (((_3454 * ((_3437 * _3455) + _3422)) + 9.9999999392252902907785028219223e-09) + (((_3454 * _3455) + _3422) * _3437))) * _3454;
                                float _4563 = isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0));
                                float _3475 = (_3400 * _3377) * (((_3423 * 3.1415927410125732421875) * (isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0)))) / ((_3445 * _3445) * ((_3390 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3401 * _3246.y;
                                frontier_phi_83_pred_1 = _3401 * _3246.x;
                                frontier_phi_83_pred_2 = _3475 * _3258.z;
                                frontier_phi_83_pred_3 = _3475 * _3258.y;
                                frontier_phi_83_pred_4 = _3475 * _3258.x;
                                frontier_phi_83_pred_5 = _3401 * _3246.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3483 = frontier_phi_83_pred;
                            _3482 = frontier_phi_83_pred_1;
                            _3481 = frontier_phi_83_pred_2;
                            _3480 = frontier_phi_83_pred_3;
                            _3479 = frontier_phi_83_pred_4;
                            _3484 = frontier_phi_83_pred_5;
                            _3188 = _3482 + _3201;
                            _3189 = _3483 + _3202;
                            _3190 = _3484 + _3203;
                            _3185 = _3479 + _3198;
                            _3186 = _3480 + _3199;
                            _3187 = _3481 + _3200;
                            if (_3205 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3198 = _3185;
                                _3199 = _3186;
                                _3200 = _3187;
                                _3201 = _3188;
                                _3202 = _3189;
                                _3203 = _3190;
                                _3204 = _3205;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3190;
                        frontier_phi_77_pred_1 = _3189;
                        frontier_phi_77_pred_2 = _3188;
                        frontier_phi_77_pred_3 = _3187;
                        frontier_phi_77_pred_4 = _3186;
                        frontier_phi_77_pred_5 = _3185;
                    }
                    _2827 = frontier_phi_77_pred;
                    _2825 = frontier_phi_77_pred_1;
                    _2823 = frontier_phi_77_pred_2;
                    _2821 = frontier_phi_77_pred_3;
                    _2819 = frontier_phi_77_pred_4;
                    _2817 = frontier_phi_77_pred_5;
                    uint _2983 = _2982 + 1u;
                    if (_2983 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2976 = _2817;
                        _2977 = _2819;
                        _2978 = _2821;
                        _2979 = _2823;
                        _2980 = _2825;
                        _2981 = _2827;
                        _2982 = _2983;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2821;
                frontier_phi_58_59_ladder_1 = _2827;
                frontier_phi_58_59_ladder_2 = _2825;
                frontier_phi_58_59_ladder_3 = _2823;
                frontier_phi_58_59_ladder_4 = _2819;
                frontier_phi_58_59_ladder_5 = _2817;
            }
            else
            {
                frontier_phi_58_59_ladder = _2691;
                frontier_phi_58_59_ladder_1 = _2697;
                frontier_phi_58_59_ladder_2 = _2695;
                frontier_phi_58_59_ladder_3 = _2693;
                frontier_phi_58_59_ladder_4 = _2689;
                frontier_phi_58_59_ladder_5 = _2687;
            }
            _2816 = frontier_phi_58_59_ladder_5;
            _2818 = frontier_phi_58_59_ladder_4;
            _2820 = frontier_phi_58_59_ladder;
            _2822 = frontier_phi_58_59_ladder_3;
            _2824 = frontier_phi_58_59_ladder_2;
            _2826 = frontier_phi_58_59_ladder_1;
        }
        float _2831 = isnan(1.0) ? _829 : (isnan(_829) ? 1.0 : min(_829, 1.0));
        _2570 = (_2831 * _2822) + _2025;
        _2572 = (_2831 * _2824) + _2027;
        _2574 = (_2831 * _2826) + _2029;
        _2576 = ((_2816 * 0.039999999105930328369140625) * _2831) + _2355;
        _2578 = ((_2818 * 0.039999999105930328369140625) * _2831) + _2357;
        _2580 = ((_2820 * 0.039999999105930328369140625) * _2831) + _2359;
    }
    else
    {
        _2570 = _2025;
        _2572 = _2027;
        _2574 = _2029;
        _2576 = _2355;
        _2578 = _2357;
        _2580 = _2359;
    }
    uint _2586 = _805 + uint(cbMatDynParam._m0[0u].w);
    float _2592 = ((((((_574.x - _571) * _507) + _571) * cbMtdParam._m0[13u].x) + ((((_528.x - _525) * _507) + _525) * cbMtdParam._m0[11u].x)) * _360) * cbInstanceData._m0[_2586].x;
    float _2593 = ((((((_574.y - _572) * _507) + _572) * cbMtdParam._m0[13u].y) + ((((_528.y - _526) * _507) + _526) * cbMtdParam._m0[11u].y)) * _360) * cbInstanceData._m0[_2586].y;
    float _2594 = ((((((_574.z - _573) * _507) + _573) * cbMtdParam._m0[13u].z) + ((((_528.z - _527) * _507) + _527) * cbMtdParam._m0[11u].z)) * _360) * cbInstanceData._m0[_2586].z;
    float _4579 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _4590 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _4601 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _2611 = (((isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0))) * (_2570 + ((isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0))) * _829))) + ((_2576 + ((isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0))) * _1666)) * cbPerFrame._m0[3u].x)) + _2592;
    float _2613 = (_2593 + ((_2578 + ((isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0))) * _1666)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0))) * (_2572 + ((isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0))) * _829)));
    float _2615 = (_2594 + ((_2580 + ((isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0))) * _1666)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0))) * (_2574 + ((isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0))) * _829)));
    float _2616 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
    float _2617 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
    float _2618 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
    float _2624 = cbMtdParam._m0[2u].x * _2592;
    float _2625 = cbMtdParam._m0[2u].y * _2593;
    float _2626 = cbMtdParam._m0[2u].z * _2594;
    float _4627 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2628 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
    uint _2629 = _804 + 6u;
    float _2637 = _765 / cbSceneParam._m0[86u].x;
    float _2638 = _766 / cbSceneParam._m0[86u].y;
    vec4 _2652 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2637, _2638, (log2((isnan(cbSceneParam._m0[77u].w) ? _686 : (isnan(_686) ? cbSceneParam._m0[77u].w : min(_686, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2654 = _2652.x;
    float _2655 = _2652.y;
    float _2656 = _2652.z;
    float _2657 = _2652.w;
    float _2749;
    float _2751;
    float _2753;
    float _2755;
    if (_686 > cbSceneParam._m0[78u].w)
    {
        float _2712 = isnan(_686) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _686 : min(cbSceneParam._m0[80u].w, _686));
        float _2713 = _2712 / _686;
        float _2724 = _2713 * _737;
        float _2725 = _738 * _2713;
        float _2726 = (-0.0) - _2725;
        float _2727 = _2713 * _739;
        float _2729 = (cbSceneParam._m0[77u].w * _2726) / _2712;
        float _2730 = _2729 + cbSceneParam._m0[79u].w;
        float _2731 = cbSceneParam._m0[79u].w - _2725;
        float _2737 = sqrt(((_2724 * _2724) + (_2725 * _2725)) + (_2727 * _2727));
        float _2740 = (1.0 - (cbSceneParam._m0[77u].w / _2712)) * _2737;
        float _2745 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2747 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2933;
        if (abs((_2726 - _2729) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2933 = ((((_2730 > 0.0) ? exp2(_2745 * _2730) : (2.0 - exp2(_2747 * _2730))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2740;
        }
        else
        {
            float _2877 = 1.0 / cbSceneParam._m0[80u].x;
            float _2878 = isnan(_2731) ? _2730 : (isnan(_2730) ? _2731 : max(_2730, _2731));
            float _2879 = isnan(_2731) ? _2730 : (isnan(_2730) ? _2731 : min(_2730, _2731));
            float _2888 = isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : min(_2878, 0.0));
            float _2889 = isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : min(_2879, 0.0));
            _2933 = ((abs(_2737 / _2726) * cbSceneParam._m0[80u].y) * ((((_2888 - _2889) * 2.0) - ((exp2(_2745 * (isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0)))) - exp2(_2745 * (isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : max(_2879, 0.0))))) * _2877)) - ((exp2(_2747 * _2888) - exp2(_2747 * _2889)) * _2877))) + (_2740 * cbSceneParam._m0[80u].z);
        }
        vec4 _2935 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2637, _2638, 1.0), 0.0);
        float _2944 = exp2((_2933 * (-1.44269502162933349609375)) * (1.0 - _2935.w));
        float _2945 = log2(_2944);
        float _2961 = log2(_2657);
        _2749 = (exp2(_2961 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2945 * cbSceneParam._m0[78u].x)) * _2935.x) / cbSceneParam._m0[78u].x)) + _2654;
        _2751 = (exp2(_2961 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2945 * cbSceneParam._m0[78u].y)) * _2935.y) / cbSceneParam._m0[78u].y)) + _2655;
        _2753 = (exp2(_2961 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2945 * cbSceneParam._m0[78u].z)) * _2935.z) / cbSceneParam._m0[78u].z)) + _2656;
        _2755 = _2944 * _2657;
    }
    else
    {
        _2749 = _2654;
        _2751 = _2655;
        _2753 = _2656;
        _2755 = _2657;
    }
    bool _2971;
    vec4 _2765;
    vec4 _2787;
    float _2789;
    float _2793;
    float _2794;
    float _2795;
    float _2798;
    float _2801;
    float _2804;
    float _2805;
    bool _2815;
    for (;;)
    {
        _2765 = cbMatDynParam._m0[0u];
        float _2767 = roundEven(_2765.y);
        bool _2768 = _2767 == 3.0;
        float _2769 = log2(_2755);
        float _2773 = exp2(_2769 * cbSceneParam._m0[78u].x);
        float _2774 = exp2(_2769 * cbSceneParam._m0[78u].y);
        float _2775 = exp2(_2769 * cbSceneParam._m0[78u].z);
        float _2776 = _2773 * _2616;
        float _2777 = _2774 * _2617;
        float _2778 = _2775 * _2618;
        float _2785 = _753 + (-0.5);
        _2787 = cbMtdParam._m0[1u];
        _2789 = _2787.y * _2785;
        float _2792 = (_2767 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2793 = _2792 * (_2768 ? _2776 : (_2776 + (cbSceneParam._m0[72u].w * _2749)));
        _2794 = _2792 * (_2768 ? _2777 : (_2777 + (cbSceneParam._m0[72u].w * _2751)));
        _2795 = _2792 * (_2768 ? _2778 : (_2778 + (cbSceneParam._m0[72u].w * _2753)));
        _2798 = ((_2624 * _2628) * _2773) * _2792;
        _2801 = ((_2625 * _2628) * _2774) * _2792;
        _2804 = ((_2626 * _2628) * _2775) * _2792;
        _2805 = _2785 * 0.999000012874603271484375;
        _2815 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2815)
        {
            if ((cbInstanceData._m0[_804 + 7u].x + _2805) < 0.5)
            {
                _2971 = true;
                break;
            }
        }
        uint _2912 = _805 + uint(_2765.w);
        if ((cbInstanceData._m0[_2912].w < 1.0) && ((cbInstanceData._m0[_2912].w + _2805) < 0.5))
        {
            _2971 = true;
            break;
        }
        if ((_2789 + 1.0) < _2787.x)
        {
            _2971 = true;
            break;
        }
        _2971 = false;
        break;
    }
    float _3176;
    if (_2971)
    {
        discard_state = true;
        _3176 = 0.0;
    }
    else
    {
        _3176 = cbInstanceData._m0[_2629].w;
    }
    SV_Target.x = _2793;
    SV_Target.y = _2794;
    SV_Target.z = _2795;
    SV_Target.w = _3176;
    SV_Target_1.x = _2798;
    SV_Target_1.y = _2801;
    SV_Target_1.z = _2804;
    SV_Target_1.w = cbInstanceData._m0[_2629].w;
    discard_exit();
}


