#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1106;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _197 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _198 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _199 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _205 = inversesqrt(dot(vec3(_197, _198, _199), vec3(_197, _198, _199)));
    float _212 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _219 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _241 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _247 = _241.x * cbMtdParam._m0[9u].x;
    float _248 = _241.y * cbMtdParam._m0[9u].y;
    float _249 = _241.z * cbMtdParam._m0[9u].z;
    vec4 _287 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[5u].w));
    float _303 = (TEXCOORD_3.x - ((cbMtdParam._m0[14u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[14u].y + 1.0);
    float _3475 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _304 = isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0));
    float _311 = (((_287.x * cbMtdParam._m0[10u].x) - _247) * _304) + _247;
    float _312 = (((_287.y * cbMtdParam._m0[10u].y) - _248) * _304) + _248;
    float _313 = (((_287.z * cbMtdParam._m0[10u].z) - _249) * _304) + _249;
    vec4 _330 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    vec4 _345 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[4u].w));
    float _353 = (_345.x * 2.0) + (-1.0);
    float _355 = (_345.y * 2.0) + (-1.0);
    float _356 = dot(vec2(_353, _355), vec2(_353, _355));
    float _3486 = isnan(0.0) ? _356 : (isnan(_356) ? 0.0 : max(_356, 0.0));
    vec4 _373 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _377 = _373.z;
    float _380 = (_373.x * 2.0) + (-1.0);
    float _381 = (_373.y * 2.0) + (-1.0);
    float _382 = dot(vec2(_380, _381), vec2(_380, _381));
    float _3497 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _387 = sqrt(1.0 - (isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0))));
    float _390 = (_304 * (_345.z - _377)) + _377;
    float _403 = (cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _404 = (cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _433 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * ((cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * ((cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[10u].w));
    float _438 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[15u].w;
    float _445 = ((_433.y * 0.5) + (-0.25)) * cbMtdParam._m0[15u].z;
    float _447 = (-0.0) - (cbMtdParam._m0[15u].z * ((_433.x * 0.5) + (-0.25)));
    float _449 = fract(_438);
    float _451 = fract(_438 + 0.5);
    float _452 = _449 * _447;
    float _453 = _445 * _449;
    float _456 = _451 * _447;
    float _457 = _445 * _451;
    float _462 = abs((_449 * 2.0) + (-1.0));
    vec4 _478 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_452 + _403) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_453 + _404) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _480 = _478.x;
    float _481 = _478.y;
    float _482 = _478.z;
    vec4 _483 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_456 + _403) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_457 + _404) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _510 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _511 = (cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _524 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_452 + _510) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_453 + _511) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _526 = _524.x;
    float _527 = _524.y;
    float _528 = _524.z;
    vec4 _529 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_456 + _510) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_457 + _511) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _555 = (TEXCOORD_9.x - ((cbMtdParam._m0[16u].y * (1.0 - TEXCOORD_9.x)) * (_330.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[16u].z + 1.0);
    float _3508 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _556 = isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0));
    float _566 = (_304 * (_353 - _380)) + _380;
    float _567 = (_304 * (_355 - _381)) + _381;
    float _568 = (_304 * (sqrt(1.0 - (isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0)))) - _387)) + _387;
    float _571 = fma(_568, _212 * NORMAL.x, fma(_567, _219 * TANGENT.x, (_205 * _197) * _566));
    float _574 = fma(_568, _212 * NORMAL.y, fma(_567, _219 * TANGENT.y, (_205 * _198) * _566));
    float _577 = fma(_568, _212 * NORMAL.z, fma(_567, _219 * TANGENT.z, (_205 * _199) * _566));
    float _581 = inversesqrt(dot(vec3(_571, _574, _577), vec3(_571, _574, _577)));
    float _582 = _581 * _571;
    float _583 = _581 * _574;
    float _584 = _581 * _577;
    float _3519 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _585 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
    float _3530 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _3541 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _3552 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _604 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _645 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _655 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _645);
    float _656 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _645);
    float _657 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _645);
    float _661 = inversesqrt(dot(vec3(_655, _656, _657), vec3(_655, _656, _657)));
    float _662 = _655 * _661;
    float _663 = _656 * _661;
    float _664 = _657 * _661;
    float _670 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _671 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _691 = fma(_584, cbSceneParam._m0[5u].z, fma(_583, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _582));
    float _694 = fma(_584, cbSceneParam._m0[6u].z, fma(_583, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _582));
    float _697 = fma(_584, cbSceneParam._m0[7u].z, fma(_583, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _582));
    uint _710 = uint(roundEven(NORMAL.w)) * 13u;
    uint _711 = _710 + 9u;
    uint _712 = _711 + uint(cbMatDynParam._m0[0u].w);
    float _718 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0)))) * cbInstanceData._m0[_712].x;
    float _719 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0)))) * cbInstanceData._m0[_712].y;
    float _720 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0)))) * cbInstanceData._m0[_712].z;
    float _3563 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _721 = isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0));
    float _3574 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _722 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
    float _3585 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _723 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
    vec4 _732 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _670, cbSceneParam._m0[86u].y * _671));
    float _735 = _732.x * TEXCOORD_3.w;
    float _736 = dot(vec3(_582, _583, _584), vec3(_662, _663, _664));
    float _739 = _736 * 2.0;
    float _743 = (_739 * _582) - _662;
    float _744 = (_739 * _583) - _663;
    float _745 = (_739 * _584) - _664;
    float _749 = abs(dot(vec3(_662, _663, _664), vec3(_582, _583, _584)));
    float _3596 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _751 = sqrt(_585);
    float _764 = exp2((_751 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_751 * 3.0));
    float _796 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _800 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _804 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1105;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _831 = fma(_804, cbModelParam._m0[26u].z, fma(_800, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _796));
        float _835 = fma(_804, cbModelParam._m0[27u].z, fma(_800, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _796));
        float _839 = fma(_804, cbModelParam._m0[28u].z, fma(_800, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _796));
        float _863 = _796 + _582;
        float _864 = _800 + _583;
        float _865 = _804 + _584;
        float _875 = fma(_865, cbModelParam._m0[26u].z, fma(_864, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _863)) - _831;
        float _876 = fma(_865, cbModelParam._m0[27u].z, fma(_864, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _863)) - _835;
        float _877 = fma(_865, cbModelParam._m0[28u].z, fma(_864, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _863)) - _839;
        float _881 = inversesqrt(dot(vec3(_875, _876, _877), vec3(_875, _876, _877)));
        float _894 = ((_881 * _875) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_831 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _895 = ((_881 * _876) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_835 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _896 = ((_881 * _877) / cbModelParam._m0[34u].z) + ((((((_839 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _899 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_894, _895, _896), 0.0);
        vec4 _906 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_894, _895, _896), 0.0);
        vec4 _913 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_894, _895, _896), 0.0);
        vec4 _920 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_894, _895, _896), 0.0);
        float _933 = exp2((_899.w + (-0.5)) * 20.0) * 2.0;
        float _934 = _933 * (_899.x + (-0.5));
        float _935 = _933 * (_899.y + (-0.5));
        float _936 = _933 * (_899.z + (-0.5));
        float _943 = exp2((_906.w + (-0.5)) * 20.0) * 2.0;
        float _944 = _943 * (_906.x + (-0.5));
        float _945 = _943 * (_906.y + (-0.5));
        float _946 = _943 * (_906.z + (-0.5));
        float _953 = exp2((_913.w + (-0.5)) * 20.0) * 2.0;
        float _954 = _953 * (_913.x + (-0.5));
        float _955 = _953 * (_913.y + (-0.5));
        float _956 = _953 * (_913.z + (-0.5));
        float _963 = exp2((_920.w + (-0.5)) * 20.0) * 2.0;
        float _964 = _963 * (_920.x + (-0.5));
        float _965 = _963 * (_920.y + (-0.5));
        float _966 = _963 * (_920.z + (-0.5));
        float _967 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _968 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _969 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _970 = _934 * 0.5;
        float _971 = _944 * 0.5;
        float _972 = _954 * 0.5;
        float _973 = dot(vec3(_970, _971, _972), vec3(_970, _971, _972));
        float _978 = (_973 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_973);
        float _987 = (dot(vec3(_582, _583, _584), vec3(_978 * _970, _978 * _971, _978 * _972)) + 1.0) * 0.5;
        float _3622 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _997 = sqrt(((_971 * _971) + (_970 * _970)) + (_972 * _972)) / (_967 + 9.9999997473787516355514526367188e-06);
        float _3633 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _998 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
        float _999 = _998 * 2.0;
        float _1003 = (1.0 - _998) / (_998 + 1.0);
        float _3644 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1004 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
        float _1013 = ((((1.0 - _1004) * (_999 + 2.0)) * exp2(log2(isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0))) * (_999 + 1.0))) + _1004) * _967;
        float _1014 = _935 * 0.5;
        float _1015 = _945 * 0.5;
        float _1016 = _955 * 0.5;
        float _1017 = dot(vec3(_1014, _1015, _1016), vec3(_1014, _1015, _1016));
        float _1022 = (_1017 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1017);
        float _1030 = (dot(vec3(_582, _583, _584), vec3(_1022 * _1014, _1022 * _1015, _1022 * _1016)) + 1.0) * 0.5;
        float _3655 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1039 = sqrt(((_1015 * _1015) + (_1014 * _1014)) + (_1016 * _1016)) / (_968 + 9.9999997473787516355514526367188e-06);
        float _3666 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1040 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
        float _1041 = _1040 * 2.0;
        float _1045 = (1.0 - _1040) / (_1040 + 1.0);
        float _3677 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1046 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
        float _1055 = ((((1.0 - _1046) * (_1041 + 2.0)) * exp2(log2(isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0))) * (_1041 + 1.0))) + _1046) * _968;
        float _1056 = _936 * 0.5;
        float _1057 = _946 * 0.5;
        float _1058 = _956 * 0.5;
        float _1059 = dot(vec3(_1056, _1057, _1058), vec3(_1056, _1057, _1058));
        float _1064 = (_1059 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1059);
        float _1072 = (dot(vec3(_582, _583, _584), vec3(_1064 * _1056, _1064 * _1057, _1064 * _1058)) + 1.0) * 0.5;
        float _3688 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1081 = sqrt(((_1057 * _1057) + (_1056 * _1056)) + (_1058 * _1058)) / (_969 + 9.9999997473787516355514526367188e-06);
        float _3699 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1082 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
        float _1083 = _1082 * 2.0;
        float _1087 = (1.0 - _1082) / (_1082 + 1.0);
        float _3710 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
        float _1097 = ((((1.0 - _1088) * (_1083 + 2.0)) * exp2(log2(isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0))) * (_1083 + 1.0))) + _1088) * _969;
        _1105 = _936;
        _1107 = _935;
        _1108 = _934;
        _1109 = _946;
        _1110 = _945;
        _1111 = _944;
        _1112 = _956;
        _1113 = _955;
        _1114 = _954;
        _1115 = _969;
        _1116 = _968;
        _1117 = _967;
        _1118 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0)));
        _1119 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0)));
        _1120 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0)));
    }
    else
    {
        _1105 = _1106;
        _1107 = _1106;
        _1108 = _1106;
        _1109 = _1106;
        _1110 = _1106;
        _1111 = _1106;
        _1112 = _1106;
        _1113 = _1106;
        _1114 = _1106;
        _1115 = _1106;
        _1116 = _1106;
        _1117 = _1106;
        _1118 = 0.0;
        _1119 = 0.0;
        _1120 = 0.0;
    }
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1146 = fma(_804, cbModelParam._m0[30u].z, fma(_800, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _796));
        float _1150 = fma(_804, cbModelParam._m0[31u].z, fma(_800, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _796));
        float _1154 = fma(_804, cbModelParam._m0[32u].z, fma(_800, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _796));
        float _1177 = _796 + _582;
        float _1178 = _800 + _583;
        float _1179 = _804 + _584;
        float _1189 = fma(_1179, cbModelParam._m0[30u].z, fma(_1178, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1177)) - _1146;
        float _1190 = fma(_1179, cbModelParam._m0[31u].z, fma(_1178, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1177)) - _1150;
        float _1191 = fma(_1179, cbModelParam._m0[32u].z, fma(_1178, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1177)) - _1154;
        float _1195 = inversesqrt(dot(vec3(_1189, _1190, _1191), vec3(_1189, _1190, _1191)));
        float _1208 = ((_1195 * _1189) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1146 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1209 = ((_1195 * _1190) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1150 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1210 = ((_1195 * _1191) / cbModelParam._m0[35u].z) + ((((((_1154 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1212 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1208, _1209, _1210), 0.0);
        vec4 _1219 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1208, _1209, _1210), 0.0);
        vec4 _1226 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1208, _1209, _1210), 0.0);
        vec4 _1233 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1208, _1209, _1210), 0.0);
        float _1245 = exp2((_1212.w + (-0.5)) * 20.0) * 2.0;
        float _1246 = _1245 * (_1212.x + (-0.5));
        float _1247 = _1245 * (_1212.y + (-0.5));
        float _1248 = _1245 * (_1212.z + (-0.5));
        float _1255 = exp2((_1219.w + (-0.5)) * 20.0) * 2.0;
        float _1256 = _1255 * (_1219.x + (-0.5));
        float _1257 = _1255 * (_1219.y + (-0.5));
        float _1258 = _1255 * (_1219.z + (-0.5));
        float _1265 = exp2((_1226.w + (-0.5)) * 20.0) * 2.0;
        float _1266 = _1265 * (_1226.x + (-0.5));
        float _1267 = _1265 * (_1226.y + (-0.5));
        float _1268 = _1265 * (_1226.z + (-0.5));
        float _1275 = exp2((_1233.w + (-0.5)) * 20.0) * 2.0;
        float _1276 = _1275 * (_1233.x + (-0.5));
        float _1277 = _1275 * (_1233.y + (-0.5));
        float _1278 = _1275 * (_1233.z + (-0.5));
        float _1279 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1280 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1281 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1282 = _1246 * 0.5;
        float _1283 = _1256 * 0.5;
        float _1284 = _1266 * 0.5;
        float _1285 = dot(vec3(_1282, _1283, _1284), vec3(_1282, _1283, _1284));
        float _1290 = (_1285 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1285);
        float _1298 = (dot(vec3(_582, _583, _584), vec3(_1290 * _1282, _1290 * _1283, _1290 * _1284)) + 1.0) * 0.5;
        float _3751 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1307 = sqrt(((_1283 * _1283) + (_1282 * _1282)) + (_1284 * _1284)) / (_1279 + 9.9999997473787516355514526367188e-06);
        float _3762 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
        float _1309 = _1308 * 2.0;
        float _1313 = (1.0 - _1308) / (_1308 + 1.0);
        float _3773 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _1323 = ((((1.0 - _1314) * (_1309 + 2.0)) * exp2(log2(isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0))) * (_1309 + 1.0))) + _1314) * _1279;
        float _1324 = _1247 * 0.5;
        float _1325 = _1257 * 0.5;
        float _1326 = _1267 * 0.5;
        float _1327 = dot(vec3(_1324, _1325, _1326), vec3(_1324, _1325, _1326));
        float _1332 = (_1327 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1327);
        float _1340 = (dot(vec3(_582, _583, _584), vec3(_1332 * _1324, _1332 * _1325, _1332 * _1326)) + 1.0) * 0.5;
        float _3784 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1349 = sqrt(((_1325 * _1325) + (_1324 * _1324)) + (_1326 * _1326)) / (_1280 + 9.9999997473787516355514526367188e-06);
        float _3795 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
        float _1351 = _1350 * 2.0;
        float _1355 = (1.0 - _1350) / (_1350 + 1.0);
        float _3806 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _1365 = ((((1.0 - _1356) * (_1351 + 2.0)) * exp2(log2(isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0))) * (_1351 + 1.0))) + _1356) * _1280;
        float _1366 = _1248 * 0.5;
        float _1367 = _1258 * 0.5;
        float _1368 = _1268 * 0.5;
        float _1369 = dot(vec3(_1366, _1367, _1368), vec3(_1366, _1367, _1368));
        float _1374 = (_1369 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1369);
        float _1382 = (dot(vec3(_582, _583, _584), vec3(_1374 * _1366, _1374 * _1367, _1374 * _1368)) + 1.0) * 0.5;
        float _3817 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1391 = sqrt(((_1367 * _1367) + (_1366 * _1366)) + (_1368 * _1368)) / (_1281 + 9.9999997473787516355514526367188e-06);
        float _3828 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1392 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
        float _1393 = _1392 * 2.0;
        float _1397 = (1.0 - _1392) / (_1392 + 1.0);
        float _3839 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1398 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _1407 = ((((1.0 - _1398) * (_1393 + 2.0)) * exp2(log2(isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))) * (_1393 + 1.0))) + _1398) * _1281;
        _1415 = _1248;
        _1416 = _1247;
        _1417 = _1246;
        _1418 = _1258;
        _1419 = _1257;
        _1420 = _1256;
        _1421 = _1268;
        _1422 = _1267;
        _1423 = _1266;
        _1424 = _1281;
        _1425 = _1280;
        _1426 = _1279;
        _1427 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0)));
        _1428 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0)));
        _1429 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0)));
    }
    else
    {
        _1415 = _1106;
        _1416 = _1106;
        _1417 = _1106;
        _1418 = _1106;
        _1419 = _1106;
        _1420 = _1106;
        _1421 = _1106;
        _1422 = _1106;
        _1423 = _1106;
        _1424 = _1106;
        _1425 = _1106;
        _1426 = _1106;
        _1427 = 0.0;
        _1428 = 0.0;
        _1429 = 0.0;
    }
    float _1439 = (cbModelParam._m0[1u].x * (_1427 - _1118)) + _1118;
    float _1440 = (cbModelParam._m0[1u].x * (_1428 - _1119)) + _1119;
    float _1441 = (cbModelParam._m0[1u].x * (_1429 - _1120)) + _1120;
    float _1462 = fma(_1441, cbSceneParam._m0[89u].z, fma(_1440, cbSceneParam._m0[89u].y, _1439 * cbSceneParam._m0[89u].x));
    float _1465 = fma(_1441, cbSceneParam._m0[90u].z, fma(_1440, cbSceneParam._m0[90u].y, _1439 * cbSceneParam._m0[90u].x));
    float _1468 = fma(_1441, cbSceneParam._m0[91u].z, fma(_1440, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1439));
    float _1483 = _743 * 0.5;
    float _1484 = _744 * 0.5;
    float _1485 = _745 * 0.5;
    float _1486 = dot(vec4(_1483, _1484, _1485, 1.0), vec4(_1417, _1420, _1423, _1426));
    float _1489 = dot(vec4(_1483, _1484, _1485, 1.0), vec4(_1416, _1419, _1422, _1425));
    float _1492 = dot(vec4(_1483, _1484, _1485, 1.0), vec4(_1415, _1418, _1421, _1424));
    float _1526;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1499 = dot(vec4(_1483, _1484, _1485, 1.0), vec4(_1105, _1109, _1112, _1115));
        float _1503 = dot(vec4(_1483, _1484, _1485, 1.0), vec4(_1107, _1110, _1113, _1116));
        float _1507 = dot(vec4(_1483, _1484, _1485, 1.0), vec4(_1108, _1111, _1114, _1117));
        float _1514 = dot(vec4(cbModelParam._m0[39u]), vec4(_1483, _1484, _1485, 1.0));
        _1526 = dot(vec3(isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0)), isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0)), isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1514) ? 0.0 : (isnan(0.0) ? _1514 : max(0.0, _1514))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1526 = 1.0;
    }
    float _1537;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1528 = dot(vec4(cbModelParam._m0[40u]), vec4(_1483, _1484, _1485, 1.0));
        _1537 = dot(vec3(isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0)), isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0)), isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1528) ? 0.0 : (isnan(0.0) ? _1528 : max(0.0, _1528))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1537 = 1.0;
    }
    float _1541 = (_1537 * cbModelParam._m0[1u].x) + (_1526 * (1.0 - cbModelParam._m0[1u].x));
    float _1551 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _585);
    float _1552 = isnan(_1551) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1551 : min(cbModelParam._m0[25u].z, _1551));
    float _1632;
    float _1634;
    float _1636;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1599 = fma(_804, cbModelParam._m0[13u].z, fma(_800, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _796)) + cbModelParam._m0[13u].w;
        float _1603 = fma(_804, cbModelParam._m0[14u].z, fma(_800, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _796)) + cbModelParam._m0[14u].w;
        float _1607 = fma(_804, cbModelParam._m0[15u].z, fma(_800, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _796)) + cbModelParam._m0[15u].w;
        float _1610 = fma(_745, cbModelParam._m0[13u].z, fma(_744, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _743));
        float _1613 = fma(_745, cbModelParam._m0[14u].z, fma(_744, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _743));
        float _1616 = fma(_745, cbModelParam._m0[15u].z, fma(_744, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _743));
        float _1644;
        if (_1610 > 0.0)
        {
            _1644 = abs((1.0 - _1599) / _1610);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1610 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1599 + 1.0) / _1610);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1644 = frontier_phi_14_12_ladder;
        }
        float _1867;
        if (_1613 > 0.0)
        {
            _1867 = abs((1.0 - _1603) / _1613);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1613 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1603 + 1.0) / _1613);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1867 = frontier_phi_23_19_ladder;
        }
        float _2113;
        if (_1616 > 0.0)
        {
            _2113 = abs((1.0 - _1607) / _1616);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1616 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1607 + 1.0) / _1616);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2113 = frontier_phi_35_30_ladder;
        }
        float _2115 = isnan(_1867) ? _1644 : (isnan(_1644) ? _1867 : min(_1644, _1867));
        float _2116 = isnan(_2113) ? _2115 : (isnan(_2115) ? _2113 : min(_2115, _2113));
        float _2120 = (_2116 * _1610) + _1599;
        float _2121 = (_2116 * _1613) + _1603;
        float _2122 = (_2116 * _1616) + _1607;
        float _2123 = _2116 * 9.9999997473787516355514526367188e-05;
        float _2125 = (-1.0) - _2123;
        float _2127 = _2123 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2122 > _2127) || ((_2122 < _2125) || ((_2121 > _2127) || ((_2121 < _2125) || ((_2120 < _2125) || (_2120 > _2127))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2246 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2122, cbModelParam._m0[9u].z, fma(_2121, cbModelParam._m0[9u].y, _2120 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2122, cbModelParam._m0[10u].z, fma(_2121, cbModelParam._m0[10u].y, _2120 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2122, cbModelParam._m0[11u].z, fma(_2121, cbModelParam._m0[11u].y, _2120 * cbModelParam._m0[11u].x))), _1552);
            frontier_phi_13_35_ladder = _2246.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2246.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2246.x * cbModelParam._m0[1u].y;
        }
        _1632 = frontier_phi_13_35_ladder_2;
        _1634 = frontier_phi_13_35_ladder_1;
        _1636 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1620 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_743, _744, _745), _1552);
        _1632 = _1620.x * cbModelParam._m0[1u].y;
        _1634 = _1620.y * cbModelParam._m0[1u].y;
        _1636 = _1620.z * cbModelParam._m0[1u].y;
    }
    float _1640 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _585);
    float _1641 = isnan(_1640) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1640 : min(cbModelParam._m0[25u].w, _1640));
    float _1731;
    float _1733;
    float _1735;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1695 = fma(_804, cbModelParam._m0[21u].z, fma(_800, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _796)) + cbModelParam._m0[21u].w;
        float _1699 = fma(_804, cbModelParam._m0[22u].z, fma(_800, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _796)) + cbModelParam._m0[22u].w;
        float _1703 = fma(_804, cbModelParam._m0[23u].z, fma(_800, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _796)) + cbModelParam._m0[23u].w;
        float _1706 = fma(_745, cbModelParam._m0[21u].z, fma(_744, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _743));
        float _1709 = fma(_745, cbModelParam._m0[22u].z, fma(_744, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _743));
        float _1712 = fma(_745, cbModelParam._m0[23u].z, fma(_744, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _743));
        float _1872;
        if (_1706 > 0.0)
        {
            _1872 = abs((1.0 - _1695) / _1706);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1706 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1695 + 1.0) / _1706);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1872 = frontier_phi_25_21_ladder;
        }
        float _2140;
        if (_1709 > 0.0)
        {
            _2140 = abs((1.0 - _1699) / _1709);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1709 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1699 + 1.0) / _1709);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2140 = frontier_phi_37_32_ladder;
        }
        float _2345;
        if (_1712 > 0.0)
        {
            _2345 = abs((1.0 - _1703) / _1712);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1712 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1703 + 1.0) / _1712);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2345 = frontier_phi_46_43_ladder;
        }
        float _2347 = isnan(_2140) ? _1872 : (isnan(_1872) ? _2140 : min(_1872, _2140));
        float _2348 = isnan(_2345) ? _2347 : (isnan(_2347) ? _2345 : min(_2347, _2345));
        float _2352 = (_2348 * _1706) + _1695;
        float _2353 = (_2348 * _1709) + _1699;
        float _2354 = (_2348 * _1712) + _1703;
        float _2355 = _2348 * 9.9999997473787516355514526367188e-05;
        float _2356 = (-1.0) - _2355;
        float _2358 = _2355 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2354 > _2358) || ((_2354 < _2356) || ((_2353 > _2358) || ((_2353 < _2356) || ((_2352 < _2356) || (_2352 > _2358))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2582 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2354, cbModelParam._m0[17u].z, fma(_2353, cbModelParam._m0[17u].y, _2352 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2354, cbModelParam._m0[18u].z, fma(_2353, cbModelParam._m0[18u].y, _2352 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2354, cbModelParam._m0[19u].z, fma(_2353, cbModelParam._m0[19u].y, _2352 * cbModelParam._m0[19u].x))), _1641);
            frontier_phi_22_46_ladder = _2582.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2582.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2582.x * cbModelParam._m0[1u].z;
        }
        _1731 = frontier_phi_22_46_ladder_2;
        _1733 = frontier_phi_22_46_ladder_1;
        _1735 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1715 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_743, _744, _745), _1641);
        _1731 = _1715.x * cbModelParam._m0[1u].z;
        _1733 = _1715.y * cbModelParam._m0[1u].z;
        _1735 = _1715.z * cbModelParam._m0[1u].z;
    }
    float _1747 = ((((1.0 - _764) * ((_751 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_764 * _751)) * _735;
    float _1748 = _1747 * ((cbModelParam._m0[1u].w * (_1731 - _1632)) + _1632);
    float _1749 = _1747 * ((cbModelParam._m0[1u].w * (_1733 - _1634)) + _1634);
    float _1750 = _1747 * ((cbModelParam._m0[1u].w * (_1735 - _1636)) + _1636);
    float _1753 = fma(_1750, cbSceneParam._m0[89u].z, fma(_1749, cbSceneParam._m0[89u].y, _1748 * cbSceneParam._m0[89u].x));
    float _1756 = fma(_1750, cbSceneParam._m0[90u].z, fma(_1749, cbSceneParam._m0[90u].y, _1748 * cbSceneParam._m0[90u].x));
    float _1759 = fma(_1750, cbSceneParam._m0[91u].z, fma(_1749, cbSceneParam._m0[91u].y, _1748 * cbSceneParam._m0[91u].x));
    vec4 _1767 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_670, _671));
    float _1769 = _1767.w;
    float _1781 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1769);
    float _1782 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1769);
    float _1783 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1769);
    uvec4 _1787 = floatBitsToUint(cbInstanceData._m0[_710 + 5u]);
    uint _1789 = _1787.x * 14u;
    uint _1790 = _1789 + 13u;
    float _1797 = _735 + (-1.0);
    float _1802 = (cbLight._m0[_1790].x * _1797) + 1.0;
    float _1803 = (cbLight._m0[_1790].y * _1797) + 1.0;
    float _1804 = (cbLight._m0[_1790].z * _1797) + 1.0;
    float _1805 = (cbLight._m0[_1790].w * _1797) + 1.0;
    uint _1806 = _1789 + 5u;
    float _1812 = isnan(1.0) ? _1803 : (isnan(_1803) ? 1.0 : min(_1803, 1.0));
    uint _1816 = _1789 + 4u;
    float _1825 = isnan(1.0) ? _1802 : (isnan(_1802) ? 1.0 : min(_1802, 1.0));
    uint _1829 = _1789 | 1u;
    float _1840 = dot(vec3(cbLight._m0[_1789].xyz), vec3(_582, _583, _584));
    float _1843 = dot(vec3(cbLight._m0[_1829].xyz), vec3(_582, _583, _584));
    float _3975 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
    float _3986 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
    float _1848 = (isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0))) * 0.3183098733425140380859375;
    float _1850 = (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) * 0.3183098733425140380859375;
    float _1857 = ((cbLight._m0[_1806].x * _1812) * _1850) + (((cbLight._m0[_1816].x * _1781) * _1825) * _1848);
    float _1858 = ((_1812 * cbLight._m0[_1806].y) * _1850) + (((cbLight._m0[_1816].y * _1782) * _1825) * _1848);
    float _1859 = ((_1812 * cbLight._m0[_1806].z) * _1850) + (((cbLight._m0[_1816].z * _1783) * _1825) * _1848);
    uvec4 _1864 = floatBitsToUint(cbLight._m0[_1789 + 12u]);
    bool _1866 = _1864.x == 0u;
    float _1877;
    float _1879;
    float _1881;
    if (_1866)
    {
        _1877 = _1857;
        _1879 = _1858;
        _1881 = _1859;
    }
    else
    {
        uint _1885 = _1789 + 6u;
        float _1901 = (dot(vec3(cbLight._m0[_1789 + 2u].xyz), vec3(_582, _583, _584)) * 0.5) + 0.5;
        float _1902 = _1901 * _1901;
        float _3997 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
        float _1903 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
        float _1904 = isnan(1.0) ? _1804 : (isnan(_1804) ? 1.0 : min(_1804, 1.0));
        _1877 = (((cbLight._m0[_1885].x * 0.3183098733425140380859375) * _1903) * _1904) + _1857;
        _1879 = (((cbLight._m0[_1885].y * 0.3183098733425140380859375) * _1903) * _1904) + _1858;
        _1881 = (((cbLight._m0[_1885].z * 0.3183098733425140380859375) * _1903) * _1904) + _1859;
    }
    bool _1884 = _1864.y == 0u;
    float _1922;
    float _1924;
    float _1926;
    if (_1884)
    {
        _1922 = _1877;
        _1924 = _1879;
        _1926 = _1881;
    }
    else
    {
        uint _2084 = _1789 + 7u;
        float _2100 = (dot(vec3(cbLight._m0[_1789 + 3u].xyz), vec3(_582, _583, _584)) * 0.5) + 0.5;
        float _2101 = _2100 * _2100;
        float _4013 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
        float _2102 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _2103 = isnan(1.0) ? _1805 : (isnan(_1805) ? 1.0 : min(_1805, 1.0));
        _1922 = (((cbLight._m0[_2084].x * 0.3183098733425140380859375) * _2102) * _2103) + _1877;
        _1924 = (((cbLight._m0[_2084].y * 0.3183098733425140380859375) * _2102) * _2103) + _1879;
        _1926 = (((cbLight._m0[_2084].z * 0.3183098733425140380859375) * _2102) * _2103) + _1881;
    }
    uint _1929 = _1789 + 8u;
    float _1942 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1789].w)) * _585) * 0.949999988079071044921875);
    float _1943 = _1942 * _1942;
    float _1944 = cbLight._m0[_1789].x + _662;
    float _1945 = cbLight._m0[_1789].y + _663;
    float _1946 = cbLight._m0[_1789].z + _664;
    float _1950 = inversesqrt(dot(vec3(_1944, _1945, _1946), vec3(_1944, _1945, _1946)));
    float _1951 = _1950 * _1944;
    float _1952 = _1950 * _1945;
    float _1953 = _1950 * _1946;
    float _1954 = dot(vec3(_582, _583, _584), vec3(cbLight._m0[_1789].xyz));
    float _4029 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
    float _1957 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
    float _4040 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _1958 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
    float _1959 = dot(vec3(_582, _583, _584), vec3(_1951, _1952, _1953));
    float _4051 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
    float _1962 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
    float _1963 = dot(vec3(cbLight._m0[_1789].xyz), vec3(_1951, _1952, _1953));
    float _4062 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
    float _1967 = _1943 * _1943;
    float _1971 = ((_1962 * _1962) * (_1967 + (-1.0))) + 1.0;
    float _1982 = (exp2(log2(1.0 - (isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1983 = 1.0 - _1943;
    float _1994 = (0.5 / (((_1958 * ((_1957 * _1983) + _1943)) + 9.9999999392252902907785028219223e-09) + (((_1958 * _1983) + _1943) * _1957))) * _1957;
    float _4073 = isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0));
    float _1996 = (isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * (_1967 / ((_1971 * _1971) * 3.141590118408203125));
    uint _2010 = _1789 + 9u;
    float _2021 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1829].w)) * _585) * 0.949999988079071044921875);
    float _2022 = _2021 * _2021;
    float _2023 = cbLight._m0[_1829].x + _662;
    float _2024 = cbLight._m0[_1829].y + _663;
    float _2025 = cbLight._m0[_1829].z + _664;
    float _2029 = inversesqrt(dot(vec3(_2023, _2024, _2025), vec3(_2023, _2024, _2025)));
    float _2030 = _2029 * _2023;
    float _2031 = _2029 * _2024;
    float _2032 = _2029 * _2025;
    float _2033 = dot(vec3(_582, _583, _584), vec3(cbLight._m0[_1829].xyz));
    float _4084 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
    float _2036 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
    float _2037 = dot(vec3(_582, _583, _584), vec3(_2030, _2031, _2032));
    float _4095 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
    float _2040 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
    float _2041 = dot(vec3(cbLight._m0[_1829].xyz), vec3(_2030, _2031, _2032));
    float _4106 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
    float _2045 = _2022 * _2022;
    float _2049 = ((_2040 * _2040) * (_2045 + (-1.0))) + 1.0;
    float _2058 = (exp2(log2(1.0 - (isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2059 = 1.0 - _2022;
    float _2069 = (0.5 / (((_1958 * ((_2036 * _2059) + _2022)) + 9.9999999392252902907785028219223e-09) + (((_1958 * _2059) + _2022) * _2036))) * _2036;
    float _4117 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
    float _2071 = (isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * (_2045 / ((_2049 * _2049) * 3.141590118408203125));
    float _2081 = (((_2058 * cbLight._m0[_2010].x) * _2071) * _1812) + ((((cbLight._m0[_1929].x * _1781) * _1982) * _1996) * _1825);
    float _2082 = (((_2058 * cbLight._m0[_2010].y) * _2071) * _1812) + ((((cbLight._m0[_1929].y * _1782) * _1982) * _1996) * _1825);
    float _2083 = (((_2058 * cbLight._m0[_2010].z) * _2071) * _1812) + ((((cbLight._m0[_1929].z * _1783) * _1982) * _1996) * _1825);
    float _2145;
    float _2147;
    float _2149;
    if (_1866)
    {
        _2145 = _2081;
        _2147 = _2082;
        _2149 = _2083;
    }
    else
    {
        uint _2151 = _1789 + 2u;
        uint _2155 = _1789 + 10u;
        float _2169 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2151].w)) * _585) * 0.949999988079071044921875);
        float _2170 = _2169 * _2169;
        float _2171 = cbLight._m0[_2151].x + _662;
        float _2172 = cbLight._m0[_2151].y + _663;
        float _2173 = cbLight._m0[_2151].z + _664;
        float _2177 = inversesqrt(dot(vec3(_2171, _2172, _2173), vec3(_2171, _2172, _2173)));
        float _2178 = _2177 * _2171;
        float _2179 = _2177 * _2172;
        float _2180 = _2177 * _2173;
        float _2181 = dot(vec3(_582, _583, _584), vec3(cbLight._m0[_2151].xyz));
        float _4128 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
        float _2184 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _2185 = dot(vec3(_582, _583, _584), vec3(_2178, _2179, _2180));
        float _4139 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
        float _2188 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _2189 = dot(vec3(cbLight._m0[_2151].xyz), vec3(_2178, _2179, _2180));
        float _4150 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
        float _2193 = _2170 * _2170;
        float _2197 = ((_2188 * _2188) * (_2193 + (-1.0))) + 1.0;
        float _2206 = (exp2(log2(1.0 - (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2207 = 1.0 - _2170;
        float _2217 = (0.5 / (((_1958 * ((_2184 * _2207) + _2170)) + 9.9999999392252902907785028219223e-09) + (((_1958 * _2207) + _2170) * _2184))) * _2184;
        float _4161 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
        float _2219 = (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * (_2193 / ((_2197 * _2197) * 3.141590118408203125));
        float _2220 = isnan(1.0) ? _1804 : (isnan(_1804) ? 1.0 : min(_1804, 1.0));
        _2145 = (((_2206 * cbLight._m0[_2155].x) * _2219) * _2220) + _2081;
        _2147 = (((_2206 * cbLight._m0[_2155].y) * _2219) * _2220) + _2082;
        _2149 = (((_2206 * cbLight._m0[_2155].z) * _2219) * _2220) + _2083;
    }
    float _2255;
    float _2257;
    float _2259;
    if (_1884)
    {
        _2255 = _2145;
        _2257 = _2147;
        _2259 = _2149;
    }
    else
    {
        uint _2266 = _1789 + 3u;
        uint _2270 = _1789 + 11u;
        float _2284 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2266].w)) * _585) * 0.949999988079071044921875);
        float _2285 = _2284 * _2284;
        float _2286 = cbLight._m0[_2266].x + _662;
        float _2287 = cbLight._m0[_2266].y + _663;
        float _2288 = cbLight._m0[_2266].z + _664;
        float _2292 = inversesqrt(dot(vec3(_2286, _2287, _2288), vec3(_2286, _2287, _2288)));
        float _2293 = _2292 * _2286;
        float _2294 = _2292 * _2287;
        float _2295 = _2292 * _2288;
        float _2296 = dot(vec3(_582, _583, _584), vec3(cbLight._m0[_2266].xyz));
        float _4177 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
        float _2299 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _2300 = dot(vec3(_582, _583, _584), vec3(_2293, _2294, _2295));
        float _4188 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
        float _2303 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _2304 = dot(vec3(cbLight._m0[_2266].xyz), vec3(_2293, _2294, _2295));
        float _4199 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
        float _2308 = _2285 * _2285;
        float _2312 = ((_2303 * _2303) * (_2308 + (-1.0))) + 1.0;
        float _2321 = (exp2(log2(1.0 - (isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2322 = 1.0 - _2285;
        float _2332 = (0.5 / (((_1958 * ((_2299 * _2322) + _2285)) + 9.9999999392252902907785028219223e-09) + (((_1958 * _2322) + _2285) * _2299))) * _2299;
        float _4210 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
        float _2334 = (isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * (_2308 / ((_2312 * _2312) * 3.141590118408203125));
        float _2335 = isnan(1.0) ? _1805 : (isnan(_1805) ? 1.0 : min(_1805, 1.0));
        _2255 = (((_2321 * cbLight._m0[_2270].x) * _2334) * _2335) + _2145;
        _2257 = (((_2321 * cbLight._m0[_2270].y) * _2334) * _2335) + _2147;
        _2259 = (((_2321 * cbLight._m0[_2270].z) * _2334) * _2335) + _2149;
    }
    float _2470;
    float _2472;
    float _2474;
    float _2476;
    float _2478;
    float _2480;
    if (_1787.y == 0u)
    {
        float _2410 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2411 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2410;
        float _2412 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2410;
        float _2413 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2410;
        uvec4 _2425 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2426 = _2425.x;
        uint _2437 = uint((float(_2425.y) * floor(float(uint(cbSceneParam._m0[85u].y * _671) / _2426))) + floor(float(uint(cbSceneParam._m0[85u].x * _670) / _2426)));
        float _2447 = (log2(_2413 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2448 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
        uint _2451 = uint(isnan(14.0) ? _2448 : (isnan(_2448) ? 14.0 : min(_2448, 14.0)));
        uvec4 _2456 = texelFetch(g_lightClusterGridBuffer, int(((_2451 << 2u) + (_2437 << 6u)) >> 2u));
        uint _2457 = _2456.x;
        uint _2458 = _2425.z;
        float _2587;
        float _2589;
        float _2591;
        float _2593;
        float _2595;
        float _2597;
        if (((((1u << ((_2458 >> 4u) & 15u)) + 4294967295u) & _2457) == 0u) || ((_2458 & 240u) == 0u))
        {
            _2587 = 0.0;
            _2589 = 0.0;
            _2591 = 0.0;
            _2593 = 0.0;
            _2595 = 0.0;
            _2597 = 0.0;
        }
        else
        {
            float _2588;
            float _2590;
            float _2592;
            float _2594;
            float _2596;
            float _2598;
            float _2740 = 0.0;
            float _2741 = 0.0;
            float _2742 = 0.0;
            float _2743 = 0.0;
            float _2744 = 0.0;
            float _2745 = 0.0;
            uint _2746 = 0u;
            uint _2755;
            bool _2756;
            for (;;)
            {
                _2755 = texelFetch(g_lightClassification, int((((_2451 << 5u) + (_2437 << 9u)) + (_2746 << 2u)) >> 2u)).x;
                _2756 = _2755 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2756)
                {
                    frontier_phi_61_pred = _2740;
                    frontier_phi_61_pred_1 = _2745;
                    frontier_phi_61_pred_2 = _2744;
                    frontier_phi_61_pred_3 = _2743;
                    frontier_phi_61_pred_4 = _2742;
                    frontier_phi_61_pred_5 = _2741;
                }
                else
                {
                    float _2864;
                    float _2865;
                    float _2866;
                    float _2867;
                    float _2868;
                    float _2869;
                    uint _2870;
                    _2864 = _2740;
                    _2865 = _2741;
                    _2866 = _2742;
                    _2867 = _2743;
                    _2868 = _2744;
                    _2869 = _2745;
                    _2870 = _2755;
                    float _2796;
                    float _2797;
                    float _2798;
                    float _2799;
                    float _2800;
                    float _2801;
                    for (;;)
                    {
                        uint _2874 = uint(findLSB(_2870)) + (_2746 << 5u);
                        uint _2871 = (_2870 + 4294967295u) & _2870;
                        uint _2876 = _2874 * 48u;
                        vec4 _2890 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2876)).x, texelFetch(g_PointLightRenderingBuffer, int(_2876 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2876 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2876 + 3u)).x));
                        uint _2896 = (_2874 * 48u) + 4u;
                        vec4 _2909 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2896)).x, texelFetch(g_PointLightRenderingBuffer, int(_2896 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2896 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2896 + 3u)).x));
                        uint _2915 = (_2874 * 48u) + 8u;
                        vec3 _2926 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2915)).x, texelFetch(g_PointLightRenderingBuffer, int(_2915 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2915 + 2u)).x));
                        float _2930 = _2890.x - _2411;
                        float _2931 = _2890.y - _2412;
                        float _2932 = _2890.z - _2413;
                        float _2933 = dot(vec3(_2930, _2931, _2932), vec3(_2930, _2931, _2932));
                        float _2936 = inversesqrt(_2933);
                        float _2937 = _2936 * _2930;
                        float _2938 = _2936 * _2931;
                        float _2939 = _2936 * _2932;
                        float _2940 = dot(vec3(_691, _694, _697), vec3(_2937, _2938, _2939));
                        float _2945 = 1.0 - (_2933 * _2890.w);
                        float _4236 = isnan(0.0) ? _2945 : (isnan(_2945) ? 0.0 : max(_2945, 0.0));
                        float _2946 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
                        float _2947 = sqrt(_2933) * _2909.w;
                        float _2950 = 1.39999997615814208984375 / (_2947 + 1.39999997615814208984375);
                        float _2951 = _2950 * _2950;
                        float _2954 = ((1.0 - _2951) * _2940) + _2951;
                        float _2957 = _2947 * _2947;
                        float _2961 = ((isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0))) * _2946) / ((_2957 * 0.699999988079071044921875) + 1.0);
                        float _2965 = (-0.0) - _2411;
                        float _2966 = (-0.0) - _2412;
                        float _2967 = (-0.0) - _2413;
                        float _2971 = inversesqrt(dot(vec3(_2965, _2966, _2967), vec3(_2965, _2966, _2967)));
                        float _2972 = _2971 * _2965;
                        float _2973 = _2971 * _2966;
                        float _2974 = _2971 * _2967;
                        float _2982 = exp2(log2(1.0 / ((_2957 * 3.5) + 5.0)) * 0.25);
                        float _2983 = 1.0 - _751;
                        float _2990 = sqrt(1.0 - ((1.0 - (_2983 * _2983)) * (1.0 - (_2982 * _2982))));
                        float _2991 = _2990 * _2990;
                        float _2992 = _2991 * _2991;
                        float _2993 = _2972 + _2937;
                        float _2994 = _2973 + _2938;
                        float _2995 = _2974 + _2939;
                        float _2999 = inversesqrt(dot(vec3(_2993, _2994, _2995), vec3(_2993, _2994, _2995)));
                        float _3003 = dot(vec3(_691, _694, _697), vec3(_2972, _2973, _2974));
                        float _4252 = isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0));
                        float _3006 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
                        float _3007 = dot(vec3(_691, _694, _697), vec3(_2999 * _2993, _2999 * _2994, _2999 * _2995));
                        float _4263 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0));
                        float _3010 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
                        float _3014 = ((_3010 * _3010) * (_2992 + (-1.0))) + 1.0;
                        float _3015 = _2950 * _2991;
                        float _3016 = _3015 * _3015;
                        float _3019 = ((1.0 - _3016) * _2940) + _3016;
                        float _4274 = isnan(0.0) ? _3019 : (isnan(_3019) ? 0.0 : max(_3019, 0.0));
                        float _3020 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
                        float _3021 = 1.0 - _2991;
                        float _3031 = (0.5 / (((_3020 * ((_3006 * _3021) + _2991)) + 9.9999999392252902907785028219223e-09) + (((_3020 * _3021) + _2991) * _3006))) * _3020;
                        float _4285 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0));
                        float _3042 = (((_2992 * 3.1415927410125732421875) * (isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0)))) / ((_3014 * _3014) * ((_2957 * 2.1991131305694580078125) + 3.141590118408203125))) * _2946;
                        _2799 = (_2961 * _2909.x) + _2867;
                        _2800 = (_2961 * _2909.y) + _2868;
                        _2801 = (_2961 * _2909.z) + _2869;
                        _2796 = (_3042 * _2926.x) + _2864;
                        _2797 = (_3042 * _2926.y) + _2865;
                        _2798 = (_3042 * _2926.z) + _2866;
                        if (_2871 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2864 = _2796;
                            _2865 = _2797;
                            _2866 = _2798;
                            _2867 = _2799;
                            _2868 = _2800;
                            _2869 = _2801;
                            _2870 = _2871;
                        }
                    }
                    frontier_phi_61_pred = _2796;
                    frontier_phi_61_pred_1 = _2801;
                    frontier_phi_61_pred_2 = _2800;
                    frontier_phi_61_pred_3 = _2799;
                    frontier_phi_61_pred_4 = _2798;
                    frontier_phi_61_pred_5 = _2797;
                }
                _2588 = frontier_phi_61_pred;
                _2598 = frontier_phi_61_pred_1;
                _2596 = frontier_phi_61_pred_2;
                _2594 = frontier_phi_61_pred_3;
                _2592 = frontier_phi_61_pred_4;
                _2590 = frontier_phi_61_pred_5;
                uint _2747 = _2746 + 1u;
                if (_2747 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2740 = _2588;
                    _2741 = _2590;
                    _2742 = _2592;
                    _2743 = _2594;
                    _2744 = _2596;
                    _2745 = _2598;
                    _2746 = _2747;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2587 = _2588;
            _2589 = _2590;
            _2591 = _2592;
            _2593 = _2594;
            _2595 = _2596;
            _2597 = _2598;
        }
        uvec4 _2601 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2602 = _2601.z;
        uint _2604 = (_2602 >> 8u) & 15u;
        float _2708;
        float _2710;
        float _2712;
        float _2714;
        float _2716;
        float _2718;
        if (((4294967295u << _2604) & _2457) == 0u)
        {
            _2708 = _2587;
            _2710 = _2589;
            _2712 = _2591;
            _2714 = _2593;
            _2716 = _2595;
            _2718 = _2597;
        }
        else
        {
            float _2733 = inversesqrt(dot(vec3(_2411, _2412, _2413), vec3(_2411, _2412, _2413)));
            float _2734 = _2733 * _2411;
            float _2735 = _2733 * _2412;
            float _2736 = _2733 * _2413;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2604 < ((_2602 >> 12u) & 15u))
            {
                float _2709;
                float _2711;
                float _2713;
                float _2715;
                float _2717;
                float _2719;
                float _2847 = _2587;
                float _2848 = _2589;
                float _2849 = _2591;
                float _2850 = _2593;
                float _2851 = _2595;
                float _2852 = _2597;
                uint _2853 = _2604;
                uint _2862;
                bool _2863;
                for (;;)
                {
                    _2862 = texelFetch(g_lightClassification, int((((_2451 << 5u) + (_2437 << 9u)) + (_2853 << 2u)) >> 2u)).x;
                    _2863 = _2862 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2863)
                    {
                        frontier_phi_67_pred = _2850;
                        frontier_phi_67_pred_1 = _2851;
                        frontier_phi_67_pred_2 = _2852;
                        frontier_phi_67_pred_3 = _2849;
                        frontier_phi_67_pred_4 = _2848;
                        frontier_phi_67_pred_5 = _2847;
                    }
                    else
                    {
                        float _3047;
                        float _3048;
                        float _3049;
                        float _3050;
                        float _3051;
                        float _3052;
                        float _3341;
                        float _3342;
                        float _3343;
                        float _3344;
                        float _3345;
                        float _3346;
                        float _3060 = _2847;
                        float _3061 = _2848;
                        float _3062 = _2849;
                        float _3063 = _2850;
                        float _3064 = _2851;
                        float _3065 = _2852;
                        uint _3066 = _2862;
                        uint _3067;
                        vec4 _3092;
                        float _3093;
                        vec4 _3108;
                        vec3 _3120;
                        vec4 _3135;
                        vec4 _3150;
                        float _3197;
                        bool _3198;
                        for (;;)
                        {
                            uint _3077 = ((_2853 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3066));
                            _3067 = (_3066 + 4294967295u) & _3066;
                            uint _3079 = _3077 * 40u;
                            _3092 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3079)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 3u)).x));
                            _3093 = _3092.w;
                            uint _3095 = (_3077 * 40u) + 4u;
                            _3108 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3095)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 3u)).x));
                            uint _3110 = (_3077 * 40u) + 8u;
                            _3120 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3110)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 2u)).x));
                            uint _3122 = (_3077 * 40u) + 16u;
                            _3135 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3122)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 3u)).x));
                            uint _3137 = (_3077 * 40u) + 20u;
                            _3150 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3137)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 3u)).x));
                            uint _3153 = (_3077 * 40u) + 24u;
                            vec4 _3166 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3153)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 3u)).x));
                            uint _3172 = (_3077 * 40u) + 28u;
                            vec4 _3185 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3172)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 3u)).x));
                            _3197 = fma(_2413, _3185.z, fma(_2412, _3185.y, _3185.x * _2411)) + _3185.w;
                            _3198 = !((fma(_2413, _3166.z, fma(_2412, _3166.y, _3166.x * _2411)) + _3166.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3198)
                            {
                                float _3225 = _3092.x - _2411;
                                float _3226 = _3092.y - _2412;
                                float _3227 = _3092.z - _2413;
                                float _3228 = dot(vec3(_3225, _3226, _3227), vec3(_3225, _3226, _3227));
                                float _3231 = inversesqrt(_3228);
                                float _3232 = _3231 * _3225;
                                float _3233 = _3231 * _3226;
                                float _3234 = _3231 * _3227;
                                float _3238 = 1.0 - (_3228 / (_3093 * _3093));
                                float _4296 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0));
                                float _3239 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
                                float _3243 = sqrt(_3228) * _3108.w;
                                float _3245 = 1.39999997615814208984375 / (_3243 + 1.39999997615814208984375);
                                float _3246 = _3245 * _3245;
                                float _3249 = ((1.0 - _3246) * dot(vec3(_3232, _3233, _3234), vec3(_691, _694, _697))) + _3246;
                                float _3252 = _3243 * _3243;
                                float _3256 = (fma(_2413, _3135.z, fma(_2412, _3135.y, _3135.x * _2411)) + _3135.w) / _3197;
                                float _3257 = (fma(_2413, _3150.z, fma(_2412, _3150.y, _3150.x * _2411)) + _3150.w) / _3197;
                                float _3261 = 1.0 - dot(vec2(_3256, _3257), vec2(_3256, _3257));
                                float _4312 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0));
                                float _3262 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
                                float _3263 = _3262 * (((isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0))) * _3239) / ((_3252 * 0.699999988079071044921875) + 1.0));
                                float _3275 = exp2(log2(1.0 / ((_3252 * 3.5) + 5.0)) * 0.25);
                                float _3276 = 1.0 - _751;
                                float _3283 = sqrt(1.0 - ((1.0 - (_3276 * _3276)) * (1.0 - (_3275 * _3275))));
                                float _3284 = _3283 * _3283;
                                float _3285 = _3284 * _3284;
                                float _3286 = _3232 - _2734;
                                float _3287 = _3233 - _2735;
                                float _3288 = _3234 - _2736;
                                float _3292 = inversesqrt(dot(vec3(_3286, _3287, _3288), vec3(_3286, _3287, _3288)));
                                float _3296 = dot(vec3(_691, _694, _697), vec3((-0.0) - _2734, (-0.0) - _2735, (-0.0) - _2736));
                                float _4323 = isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0));
                                float _3299 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
                                float _3300 = dot(vec3(_691, _694, _697), vec3(_3292 * _3286, _3292 * _3287, _3292 * _3288));
                                float _4334 = isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : max(_3300, 0.0));
                                float _3303 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
                                float _3307 = ((_3303 * _3303) * (_3285 + (-1.0))) + 1.0;
                                float _3308 = _3245 * _3284;
                                float _3309 = _3308 * _3308;
                                float _3315 = ((1.0 - _3309) * dot(vec3(_691, _694, _697), vec3(_3232, _3233, _3234))) + _3309;
                                float _4345 = isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : max(_3315, 0.0));
                                float _3316 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
                                float _3317 = 1.0 - _3284;
                                float _3327 = (0.5 / (((_3316 * ((_3299 * _3317) + _3284)) + 9.9999999392252902907785028219223e-09) + (((_3316 * _3317) + _3284) * _3299))) * _3316;
                                float _4356 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0));
                                float _3337 = (_3262 * _3239) * (((_3285 * 3.1415927410125732421875) * (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0)))) / ((_3307 * _3307) * ((_3252 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3337 * _3120.x;
                                frontier_phi_73_pred_1 = _3337 * _3120.y;
                                frontier_phi_73_pred_2 = _3263 * _3108.z;
                                frontier_phi_73_pred_3 = _3263 * _3108.y;
                                frontier_phi_73_pred_4 = _3263 * _3108.x;
                                frontier_phi_73_pred_5 = _3337 * _3120.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3341 = frontier_phi_73_pred;
                            _3342 = frontier_phi_73_pred_1;
                            _3346 = frontier_phi_73_pred_2;
                            _3345 = frontier_phi_73_pred_3;
                            _3344 = frontier_phi_73_pred_4;
                            _3343 = frontier_phi_73_pred_5;
                            _3050 = _3344 + _3063;
                            _3051 = _3345 + _3064;
                            _3052 = _3346 + _3065;
                            _3047 = _3341 + _3060;
                            _3048 = _3342 + _3061;
                            _3049 = _3343 + _3062;
                            if (_3067 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3060 = _3047;
                                _3061 = _3048;
                                _3062 = _3049;
                                _3063 = _3050;
                                _3064 = _3051;
                                _3065 = _3052;
                                _3066 = _3067;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3050;
                        frontier_phi_67_pred_1 = _3051;
                        frontier_phi_67_pred_2 = _3052;
                        frontier_phi_67_pred_3 = _3049;
                        frontier_phi_67_pred_4 = _3048;
                        frontier_phi_67_pred_5 = _3047;
                    }
                    _2715 = frontier_phi_67_pred;
                    _2717 = frontier_phi_67_pred_1;
                    _2719 = frontier_phi_67_pred_2;
                    _2713 = frontier_phi_67_pred_3;
                    _2711 = frontier_phi_67_pred_4;
                    _2709 = frontier_phi_67_pred_5;
                    uint _2854 = _2853 + 1u;
                    if (_2854 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2847 = _2709;
                        _2848 = _2711;
                        _2849 = _2713;
                        _2850 = _2715;
                        _2851 = _2717;
                        _2852 = _2719;
                        _2853 = _2854;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2717;
                frontier_phi_55_56_ladder_1 = _2719;
                frontier_phi_55_56_ladder_2 = _2715;
                frontier_phi_55_56_ladder_3 = _2713;
                frontier_phi_55_56_ladder_4 = _2711;
                frontier_phi_55_56_ladder_5 = _2709;
            }
            else
            {
                frontier_phi_55_56_ladder = _2595;
                frontier_phi_55_56_ladder_1 = _2597;
                frontier_phi_55_56_ladder_2 = _2593;
                frontier_phi_55_56_ladder_3 = _2591;
                frontier_phi_55_56_ladder_4 = _2589;
                frontier_phi_55_56_ladder_5 = _2587;
            }
            _2708 = frontier_phi_55_56_ladder_5;
            _2710 = frontier_phi_55_56_ladder_4;
            _2712 = frontier_phi_55_56_ladder_3;
            _2714 = frontier_phi_55_56_ladder_2;
            _2716 = frontier_phi_55_56_ladder;
            _2718 = frontier_phi_55_56_ladder_1;
        }
        float _2723 = isnan(1.0) ? _735 : (isnan(_735) ? 1.0 : min(_735, 1.0));
        _2470 = (_2723 * _2714) + _1922;
        _2472 = (_2723 * _2716) + _1924;
        _2474 = (_2723 * _2718) + _1926;
        _2476 = ((_2708 * 0.039999999105930328369140625) * _2723) + _2255;
        _2478 = ((_2710 * 0.039999999105930328369140625) * _2723) + _2257;
        _2480 = ((_2712 * 0.039999999105930328369140625) * _2723) + _2259;
    }
    else
    {
        _2470 = _1922;
        _2472 = _1924;
        _2474 = _1926;
        _2476 = _2255;
        _2478 = _2257;
        _2480 = _2259;
    }
    uint _2486 = _711 + uint(cbMatDynParam._m0[0u].w);
    float _2492 = ((((((_529.x - _526) * _462) + _526) * cbMtdParam._m0[13u].x) + ((((_483.x - _480) * _462) + _480) * cbMtdParam._m0[11u].x)) * _556) * cbInstanceData._m0[_2486].x;
    float _2493 = ((((((_529.y - _527) * _462) + _527) * cbMtdParam._m0[13u].y) + ((((_483.y - _481) * _462) + _481) * cbMtdParam._m0[11u].y)) * _556) * cbInstanceData._m0[_2486].y;
    float _2494 = ((((((_529.z - _528) * _462) + _528) * cbMtdParam._m0[13u].z) + ((((_483.z - _482) * _462) + _482) * cbMtdParam._m0[11u].z)) * _556) * cbInstanceData._m0[_2486].z;
    float _4372 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _4383 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _4394 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _2511 = (((isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0))) * (_2470 + ((isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0))) * _735))) + ((_2476 + ((isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0))) * _1541)) * cbPerFrame._m0[3u].x)) + _2492;
    float _2513 = (_2493 + ((_2478 + ((isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0))) * _1541)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * (_2472 + ((isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0))) * _735)));
    float _2515 = (_2494 + ((_2480 + ((isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0))) * _1541)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0))) * (_2474 + ((isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0))) * _735)));
    float _4420 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2528 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
    uint _2529 = _710 + 6u;
    float _2537 = _670 / cbSceneParam._m0[86u].x;
    float _2538 = _671 / cbSceneParam._m0[86u].y;
    vec4 _2552 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2537, _2538, (log2((isnan(cbSceneParam._m0[77u].w) ? _604 : (isnan(_604) ? cbSceneParam._m0[77u].w : min(_604, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2554 = _2552.x;
    float _2555 = _2552.y;
    float _2556 = _2552.z;
    float _2557 = _2552.w;
    float _2649;
    float _2651;
    float _2653;
    float _2655;
    if (_604 > cbSceneParam._m0[78u].w)
    {
        float _2612 = isnan(_604) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _604 : min(cbSceneParam._m0[80u].w, _604));
        float _2613 = _2612 / _604;
        float _2624 = _2613 * _655;
        float _2625 = _656 * _2613;
        float _2626 = (-0.0) - _2625;
        float _2627 = _2613 * _657;
        float _2629 = (cbSceneParam._m0[77u].w * _2626) / _2612;
        float _2630 = _2629 + cbSceneParam._m0[79u].w;
        float _2631 = cbSceneParam._m0[79u].w - _2625;
        float _2637 = sqrt(((_2624 * _2624) + (_2625 * _2625)) + (_2627 * _2627));
        float _2640 = (1.0 - (cbSceneParam._m0[77u].w / _2612)) * _2637;
        float _2645 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2647 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2809;
        if (abs((_2626 - _2629) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2809 = ((((_2630 > 0.0) ? exp2(_2645 * _2630) : (2.0 - exp2(_2647 * _2630))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2640;
        }
        else
        {
            float _2769 = 1.0 / cbSceneParam._m0[80u].x;
            float _2770 = isnan(_2631) ? _2630 : (isnan(_2630) ? _2631 : max(_2630, _2631));
            float _2771 = isnan(_2631) ? _2630 : (isnan(_2630) ? _2631 : min(_2630, _2631));
            float _2780 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : min(_2770, 0.0));
            float _2781 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : min(_2771, 0.0));
            _2809 = ((abs(_2637 / _2626) * cbSceneParam._m0[80u].y) * ((((_2780 - _2781) * 2.0) - ((exp2(_2645 * (isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0)))) - exp2(_2645 * (isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0))))) * _2769)) - ((exp2(_2647 * _2780) - exp2(_2647 * _2781)) * _2769))) + (_2640 * cbSceneParam._m0[80u].z);
        }
        vec4 _2811 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2537, _2538, 1.0), 0.0);
        float _2820 = exp2((_2809 * (-1.44269502162933349609375)) * (1.0 - _2811.w));
        float _2821 = log2(_2820);
        float _2837 = log2(_2557);
        _2649 = (exp2(_2837 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2821 * cbSceneParam._m0[78u].x)) * _2811.x) / cbSceneParam._m0[78u].x)) + _2554;
        _2651 = (exp2(_2837 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2821 * cbSceneParam._m0[78u].y)) * _2811.y) / cbSceneParam._m0[78u].y)) + _2555;
        _2653 = (exp2(_2837 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2821 * cbSceneParam._m0[78u].z)) * _2811.z) / cbSceneParam._m0[78u].z)) + _2556;
        _2655 = _2820 * _2557;
    }
    else
    {
        _2649 = _2554;
        _2651 = _2555;
        _2653 = _2556;
        _2655 = _2557;
    }
    float _2667 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2668 = _2667 == 3.0;
    float _2669 = log2(_2655);
    float _2673 = exp2(_2669 * cbSceneParam._m0[78u].x);
    float _2674 = exp2(_2669 * cbSceneParam._m0[78u].y);
    float _2675 = exp2(_2669 * cbSceneParam._m0[78u].z);
    float _2676 = _2673 * (isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0)));
    float _2677 = _2674 * (isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0)));
    float _2678 = _2675 * (isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0)));
    float _2687 = (_2667 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2687 * (_2668 ? _2676 : (_2676 + (cbSceneParam._m0[72u].w * _2649)));
    SV_Target.y = _2687 * (_2668 ? _2677 : (_2677 + (cbSceneParam._m0[72u].w * _2651)));
    SV_Target.z = _2687 * (_2668 ? _2678 : (_2678 + (cbSceneParam._m0[72u].w * _2653)));
    SV_Target.w = cbInstanceData._m0[_2529].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2492) * _2528) * _2673) * _2687;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2493) * _2528) * _2674) * _2687;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2494) * _2528) * _2675) * _2687;
    SV_Target_1.w = cbInstanceData._m0[_2529].w;
}


