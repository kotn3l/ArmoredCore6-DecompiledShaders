#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1242;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _209 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _210 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _211 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _253 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _259 = _253.x * cbMtdParam._m0[9u].x;
    float _260 = _253.y * cbMtdParam._m0[9u].y;
    float _261 = _253.z * cbMtdParam._m0[9u].z;
    vec4 _299 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[5u].w));
    float _315 = (TEXCOORD_3.x - ((cbMtdParam._m0[14u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[14u].y + 1.0);
    float _3890 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _316 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
    float _323 = (((_299.x * cbMtdParam._m0[10u].x) - _259) * _316) + _259;
    float _324 = (((_299.y * cbMtdParam._m0[10u].y) - _260) * _316) + _260;
    float _325 = (((_299.z * cbMtdParam._m0[10u].z) - _261) * _316) + _261;
    vec4 _342 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _361 = TEXCOORD_9.x - ((cbMtdParam._m0[16u].y * (1.0 - TEXCOORD_9.x)) * (_342.x + 0.00999999977648258209228515625));
    float _363 = _361 * (cbMtdParam._m0[16u].z + 1.0);
    float _3901 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _364 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
    float _372 = ((((cbMtdParam._m0[12u].x - _323) * TEXCOORD_9.x) * cbMtdParam._m0[16u].x) * _364) + _323;
    float _373 = ((((cbMtdParam._m0[12u].y - _324) * TEXCOORD_9.y) * cbMtdParam._m0[16u].x) * _364) + _324;
    float _374 = (((cbMtdParam._m0[16u].x * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _325)) * _364) + _325;
    vec4 _387 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[6u].w));
    float _389 = _387.x;
    float _407 = ((texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[7u].w)).x - _389) * _316) + _389;
    vec4 _420 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[4u].w));
    float _428 = (_420.x * 2.0) + (-1.0);
    float _430 = (_420.y * 2.0) + (-1.0);
    float _431 = dot(vec2(_428, _430), vec2(_428, _430));
    float _3912 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    vec4 _448 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _452 = _448.z;
    float _455 = (_448.x * 2.0) + (-1.0);
    float _456 = (_448.y * 2.0) + (-1.0);
    float _457 = dot(vec2(_455, _456), vec2(_455, _456));
    float _3923 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _462 = sqrt(1.0 - (isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))));
    float _465 = (_316 * (_420.z - _452)) + _452;
    float _471 = _361 * (cbMtdParam._m0[16u].y + 1.0);
    float _3934 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _475 = ((cbMtdParam._m0[15u].y - _465) * (isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0)))) + _465;
    float _488 = (cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _489 = (cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _515 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * ((cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * ((cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[10u].w));
    float _520 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[15u].w;
    float _527 = ((_515.y * 0.5) + (-0.25)) * cbMtdParam._m0[15u].z;
    float _529 = (-0.0) - (cbMtdParam._m0[15u].z * ((_515.x * 0.5) + (-0.25)));
    float _531 = fract(_520);
    float _533 = fract(_520 + 0.5);
    float _534 = _531 * _529;
    float _535 = _527 * _531;
    float _538 = _533 * _529;
    float _539 = _527 * _533;
    float _544 = abs((_531 * 2.0) + (-1.0));
    vec4 _560 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_534 + _488) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_535 + _489) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _562 = _560.x;
    float _563 = _560.y;
    float _564 = _560.z;
    vec4 _565 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_538 + _488) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_539 + _489) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _592 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _593 = (cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _606 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_534 + _592) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_535 + _593) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _608 = _606.x;
    float _609 = _606.y;
    float _610 = _606.z;
    vec4 _611 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_538 + _592) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_539 + _593) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _640 = (_316 * (_428 - _455)) + _455;
    float _641 = (_316 * (_430 - _456)) + _456;
    float _642 = (_316 * (sqrt(1.0 - (isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0)))) - _462)) + _462;
    vec4 _661 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[16u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, (((cbMtdParam._m0[17u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w));
    float _667 = (_661.x * 2.0) + (-1.0);
    float _668 = (_661.y * 2.0) + (-1.0);
    float _669 = dot(vec2(_667, _668), vec2(_667, _668));
    float _3945 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _685 = (_364 * (((_640 * cbMtdParam._m0[14u].z) - _640) + _667)) + _640;
    float _686 = (_364 * (((_641 * cbMtdParam._m0[14u].z) - _641) + _668)) + _641;
    float _687 = (_364 * (sqrt(1.0 - (isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0)))) - _642)) + _642;
    float _690 = fma(_687, _224 * NORMAL.x, fma(_686, _231 * TANGENT.x, (_217 * _209) * _685));
    float _693 = fma(_687, _224 * NORMAL.y, fma(_686, _231 * TANGENT.y, (_217 * _210) * _685));
    float _696 = fma(_687, _224 * NORMAL.z, fma(_686, _231 * TANGENT.z, (_217 * _211) * _685));
    float _700 = inversesqrt(dot(vec3(_690, _693, _696), vec3(_690, _693, _696)));
    float _701 = _700 * _690;
    float _702 = _700 * _693;
    float _703 = _700 * _696;
    float _3956 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _704 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
    float _3967 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _3978 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _3989 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _4000 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _708 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
    float _724 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _765 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _775 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _765);
    float _776 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _765);
    float _777 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _765);
    float _781 = inversesqrt(dot(vec3(_775, _776, _777), vec3(_775, _776, _777)));
    float _782 = _775 * _781;
    float _783 = _776 * _781;
    float _784 = _777 * _781;
    float _790 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _791 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _809 = fma(_703, cbSceneParam._m0[5u].z, fma(_702, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _701));
    float _812 = fma(_703, cbSceneParam._m0[6u].z, fma(_702, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _701));
    float _815 = fma(_703, cbSceneParam._m0[7u].z, fma(_702, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _701));
    uint _828 = uint(roundEven(NORMAL.w)) * 13u;
    uint _829 = _828 + 9u;
    uint _830 = _829 + uint(cbMatDynParam._m0[0u].w);
    float _836 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0)))) * cbInstanceData._m0[_830].x;
    float _837 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0)))) * cbInstanceData._m0[_830].y;
    float _838 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0)))) * cbInstanceData._m0[_830].z;
    float _4011 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _839 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
    float _4022 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _840 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
    float _4033 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _841 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
    float _842 = 1.0 - _708;
    float _843 = _839 * _842;
    float _844 = _840 * _842;
    float _845 = _841 * _842;
    float _850 = (_839 + (-0.039999999105930328369140625)) * _708;
    float _851 = (_840 + (-0.039999999105930328369140625)) * _708;
    float _852 = (_841 + (-0.039999999105930328369140625)) * _708;
    float _853 = _850 + 0.039999999105930328369140625;
    float _855 = _851 + 0.039999999105930328369140625;
    float _856 = _852 + 0.039999999105930328369140625;
    vec4 _865 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _790, cbSceneParam._m0[86u].y * _791));
    float _868 = _865.x * TEXCOORD_3.w;
    float _869 = dot(vec3(_701, _702, _703), vec3(_782, _783, _784));
    float _872 = _869 * 2.0;
    float _876 = (_872 * _701) - _782;
    float _877 = (_872 * _702) - _783;
    float _878 = (_872 * _703) - _784;
    float _882 = abs(dot(vec3(_782, _783, _784), vec3(_701, _702, _703)));
    float _4044 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _884 = sqrt(_704);
    float _897 = exp2((_884 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_884 * 3.0));
    float _903 = (1.0 - _897) * ((_884 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _904 = _897 * _884;
    float _932 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _936 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _940 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1241;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _967 = fma(_940, cbModelParam._m0[26u].z, fma(_936, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _932));
        float _971 = fma(_940, cbModelParam._m0[27u].z, fma(_936, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _932));
        float _975 = fma(_940, cbModelParam._m0[28u].z, fma(_936, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _932));
        float _999 = _932 + _701;
        float _1000 = _936 + _702;
        float _1001 = _940 + _703;
        float _1011 = fma(_1001, cbModelParam._m0[26u].z, fma(_1000, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _999)) - _967;
        float _1012 = fma(_1001, cbModelParam._m0[27u].z, fma(_1000, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _999)) - _971;
        float _1013 = fma(_1001, cbModelParam._m0[28u].z, fma(_1000, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _999)) - _975;
        float _1017 = inversesqrt(dot(vec3(_1011, _1012, _1013), vec3(_1011, _1012, _1013)));
        float _1030 = ((_1017 * _1011) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_967 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1031 = ((_1017 * _1012) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_971 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1032 = ((_1017 * _1013) / cbModelParam._m0[34u].z) + ((((((_975 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1035 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1030, _1031, _1032), 0.0);
        vec4 _1042 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1030, _1031, _1032), 0.0);
        vec4 _1049 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1030, _1031, _1032), 0.0);
        vec4 _1056 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1030, _1031, _1032), 0.0);
        float _1069 = exp2((_1035.w + (-0.5)) * 20.0) * 2.0;
        float _1070 = _1069 * (_1035.x + (-0.5));
        float _1071 = _1069 * (_1035.y + (-0.5));
        float _1072 = _1069 * (_1035.z + (-0.5));
        float _1079 = exp2((_1042.w + (-0.5)) * 20.0) * 2.0;
        float _1080 = _1079 * (_1042.x + (-0.5));
        float _1081 = _1079 * (_1042.y + (-0.5));
        float _1082 = _1079 * (_1042.z + (-0.5));
        float _1089 = exp2((_1049.w + (-0.5)) * 20.0) * 2.0;
        float _1090 = _1089 * (_1049.x + (-0.5));
        float _1091 = _1089 * (_1049.y + (-0.5));
        float _1092 = _1089 * (_1049.z + (-0.5));
        float _1099 = exp2((_1056.w + (-0.5)) * 20.0) * 2.0;
        float _1100 = _1099 * (_1056.x + (-0.5));
        float _1101 = _1099 * (_1056.y + (-0.5));
        float _1102 = _1099 * (_1056.z + (-0.5));
        float _1103 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1104 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1105 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1106 = _1070 * 0.5;
        float _1107 = _1080 * 0.5;
        float _1108 = _1090 * 0.5;
        float _1109 = dot(vec3(_1106, _1107, _1108), vec3(_1106, _1107, _1108));
        float _1114 = (_1109 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1109);
        float _1123 = (dot(vec3(_701, _702, _703), vec3(_1114 * _1106, _1114 * _1107, _1114 * _1108)) + 1.0) * 0.5;
        float _4070 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1133 = sqrt(((_1107 * _1107) + (_1106 * _1106)) + (_1108 * _1108)) / (_1103 + 9.9999997473787516355514526367188e-06);
        float _4081 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _1135 = _1134 * 2.0;
        float _1139 = (1.0 - _1134) / (_1134 + 1.0);
        float _4092 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _1149 = ((((1.0 - _1140) * (_1135 + 2.0)) * exp2(log2(isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0))) * (_1135 + 1.0))) + _1140) * _1103;
        float _1150 = _1071 * 0.5;
        float _1151 = _1081 * 0.5;
        float _1152 = _1091 * 0.5;
        float _1153 = dot(vec3(_1150, _1151, _1152), vec3(_1150, _1151, _1152));
        float _1158 = (_1153 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1153);
        float _1166 = (dot(vec3(_701, _702, _703), vec3(_1158 * _1150, _1158 * _1151, _1158 * _1152)) + 1.0) * 0.5;
        float _4103 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1175 = sqrt(((_1151 * _1151) + (_1150 * _1150)) + (_1152 * _1152)) / (_1104 + 9.9999997473787516355514526367188e-06);
        float _4114 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _1177 = _1176 * 2.0;
        float _1181 = (1.0 - _1176) / (_1176 + 1.0);
        float _4125 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _1191 = ((((1.0 - _1182) * (_1177 + 2.0)) * exp2(log2(isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))) * (_1177 + 1.0))) + _1182) * _1104;
        float _1192 = _1072 * 0.5;
        float _1193 = _1082 * 0.5;
        float _1194 = _1092 * 0.5;
        float _1195 = dot(vec3(_1192, _1193, _1194), vec3(_1192, _1193, _1194));
        float _1200 = (_1195 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1195);
        float _1208 = (dot(vec3(_701, _702, _703), vec3(_1200 * _1192, _1200 * _1193, _1200 * _1194)) + 1.0) * 0.5;
        float _4136 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1217 = sqrt(((_1193 * _1193) + (_1192 * _1192)) + (_1194 * _1194)) / (_1105 + 9.9999997473787516355514526367188e-06);
        float _4147 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _1219 = _1218 * 2.0;
        float _1223 = (1.0 - _1218) / (_1218 + 1.0);
        float _4158 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1233 = ((((1.0 - _1224) * (_1219 + 2.0)) * exp2(log2(isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * (_1219 + 1.0))) + _1224) * _1105;
        _1241 = _1072;
        _1243 = _1071;
        _1244 = _1070;
        _1245 = _1082;
        _1246 = _1081;
        _1247 = _1080;
        _1248 = _1092;
        _1249 = _1091;
        _1250 = _1090;
        _1251 = _1105;
        _1252 = _1104;
        _1253 = _1103;
        _1254 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0)));
        _1255 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0)));
        _1256 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0)));
    }
    else
    {
        _1241 = _1242;
        _1243 = _1242;
        _1244 = _1242;
        _1245 = _1242;
        _1246 = _1242;
        _1247 = _1242;
        _1248 = _1242;
        _1249 = _1242;
        _1250 = _1242;
        _1251 = _1242;
        _1252 = _1242;
        _1253 = _1242;
        _1254 = 0.0;
        _1255 = 0.0;
        _1256 = 0.0;
    }
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1282 = fma(_940, cbModelParam._m0[30u].z, fma(_936, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _932));
        float _1286 = fma(_940, cbModelParam._m0[31u].z, fma(_936, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _932));
        float _1290 = fma(_940, cbModelParam._m0[32u].z, fma(_936, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _932));
        float _1313 = _932 + _701;
        float _1314 = _936 + _702;
        float _1315 = _940 + _703;
        float _1325 = fma(_1315, cbModelParam._m0[30u].z, fma(_1314, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1313)) - _1282;
        float _1326 = fma(_1315, cbModelParam._m0[31u].z, fma(_1314, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1313)) - _1286;
        float _1327 = fma(_1315, cbModelParam._m0[32u].z, fma(_1314, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1313)) - _1290;
        float _1331 = inversesqrt(dot(vec3(_1325, _1326, _1327), vec3(_1325, _1326, _1327)));
        float _1344 = ((_1331 * _1325) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1282 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1345 = ((_1331 * _1326) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1286 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1346 = ((_1331 * _1327) / cbModelParam._m0[35u].z) + ((((((_1290 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1348 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1344, _1345, _1346), 0.0);
        vec4 _1355 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1344, _1345, _1346), 0.0);
        vec4 _1362 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1344, _1345, _1346), 0.0);
        vec4 _1369 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1344, _1345, _1346), 0.0);
        float _1381 = exp2((_1348.w + (-0.5)) * 20.0) * 2.0;
        float _1382 = _1381 * (_1348.x + (-0.5));
        float _1383 = _1381 * (_1348.y + (-0.5));
        float _1384 = _1381 * (_1348.z + (-0.5));
        float _1391 = exp2((_1355.w + (-0.5)) * 20.0) * 2.0;
        float _1392 = _1391 * (_1355.x + (-0.5));
        float _1393 = _1391 * (_1355.y + (-0.5));
        float _1394 = _1391 * (_1355.z + (-0.5));
        float _1401 = exp2((_1362.w + (-0.5)) * 20.0) * 2.0;
        float _1402 = _1401 * (_1362.x + (-0.5));
        float _1403 = _1401 * (_1362.y + (-0.5));
        float _1404 = _1401 * (_1362.z + (-0.5));
        float _1411 = exp2((_1369.w + (-0.5)) * 20.0) * 2.0;
        float _1412 = _1411 * (_1369.x + (-0.5));
        float _1413 = _1411 * (_1369.y + (-0.5));
        float _1414 = _1411 * (_1369.z + (-0.5));
        float _1415 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1416 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1417 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1418 = _1382 * 0.5;
        float _1419 = _1392 * 0.5;
        float _1420 = _1402 * 0.5;
        float _1421 = dot(vec3(_1418, _1419, _1420), vec3(_1418, _1419, _1420));
        float _1426 = (_1421 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1421);
        float _1434 = (dot(vec3(_701, _702, _703), vec3(_1426 * _1418, _1426 * _1419, _1426 * _1420)) + 1.0) * 0.5;
        float _4199 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1443 = sqrt(((_1419 * _1419) + (_1418 * _1418)) + (_1420 * _1420)) / (_1415 + 9.9999997473787516355514526367188e-06);
        float _4210 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1444 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _1445 = _1444 * 2.0;
        float _1449 = (1.0 - _1444) / (_1444 + 1.0);
        float _4221 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1450 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _1459 = ((((1.0 - _1450) * (_1445 + 2.0)) * exp2(log2(isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0))) * (_1445 + 1.0))) + _1450) * _1415;
        float _1460 = _1383 * 0.5;
        float _1461 = _1393 * 0.5;
        float _1462 = _1403 * 0.5;
        float _1463 = dot(vec3(_1460, _1461, _1462), vec3(_1460, _1461, _1462));
        float _1468 = (_1463 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1463);
        float _1476 = (dot(vec3(_701, _702, _703), vec3(_1468 * _1460, _1468 * _1461, _1468 * _1462)) + 1.0) * 0.5;
        float _4232 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1485 = sqrt(((_1461 * _1461) + (_1460 * _1460)) + (_1462 * _1462)) / (_1416 + 9.9999997473787516355514526367188e-06);
        float _4243 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1486 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _1487 = _1486 * 2.0;
        float _1491 = (1.0 - _1486) / (_1486 + 1.0);
        float _4254 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1492 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _1501 = ((((1.0 - _1492) * (_1487 + 2.0)) * exp2(log2(isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * (_1487 + 1.0))) + _1492) * _1416;
        float _1502 = _1384 * 0.5;
        float _1503 = _1394 * 0.5;
        float _1504 = _1404 * 0.5;
        float _1505 = dot(vec3(_1502, _1503, _1504), vec3(_1502, _1503, _1504));
        float _1510 = (_1505 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1505);
        float _1518 = (dot(vec3(_701, _702, _703), vec3(_1510 * _1502, _1510 * _1503, _1510 * _1504)) + 1.0) * 0.5;
        float _4265 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1527 = sqrt(((_1503 * _1503) + (_1502 * _1502)) + (_1504 * _1504)) / (_1417 + 9.9999997473787516355514526367188e-06);
        float _4276 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1528 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _1529 = _1528 * 2.0;
        float _1533 = (1.0 - _1528) / (_1528 + 1.0);
        float _4287 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1534 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
        float _1543 = ((((1.0 - _1534) * (_1529 + 2.0)) * exp2(log2(isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0))) * (_1529 + 1.0))) + _1534) * _1417;
        _1551 = _1384;
        _1552 = _1383;
        _1553 = _1382;
        _1554 = _1394;
        _1555 = _1393;
        _1556 = _1392;
        _1557 = _1404;
        _1558 = _1403;
        _1559 = _1402;
        _1560 = _1417;
        _1561 = _1416;
        _1562 = _1415;
        _1563 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0)));
        _1564 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0)));
        _1565 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0)));
    }
    else
    {
        _1551 = _1242;
        _1552 = _1242;
        _1553 = _1242;
        _1554 = _1242;
        _1555 = _1242;
        _1556 = _1242;
        _1557 = _1242;
        _1558 = _1242;
        _1559 = _1242;
        _1560 = _1242;
        _1561 = _1242;
        _1562 = _1242;
        _1563 = 0.0;
        _1564 = 0.0;
        _1565 = 0.0;
    }
    float _1575 = (cbModelParam._m0[1u].x * (_1563 - _1254)) + _1254;
    float _1576 = (cbModelParam._m0[1u].x * (_1564 - _1255)) + _1255;
    float _1577 = (cbModelParam._m0[1u].x * (_1565 - _1256)) + _1256;
    float _1598 = fma(_1577, cbSceneParam._m0[89u].z, fma(_1576, cbSceneParam._m0[89u].y, _1575 * cbSceneParam._m0[89u].x));
    float _1601 = fma(_1577, cbSceneParam._m0[90u].z, fma(_1576, cbSceneParam._m0[90u].y, _1575 * cbSceneParam._m0[90u].x));
    float _1604 = fma(_1577, cbSceneParam._m0[91u].z, fma(_1576, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1575));
    float _1619 = _876 * 0.5;
    float _1620 = _877 * 0.5;
    float _1621 = _878 * 0.5;
    float _1622 = dot(vec4(_1619, _1620, _1621, 1.0), vec4(_1553, _1556, _1559, _1562));
    float _1625 = dot(vec4(_1619, _1620, _1621, 1.0), vec4(_1552, _1555, _1558, _1561));
    float _1628 = dot(vec4(_1619, _1620, _1621, 1.0), vec4(_1551, _1554, _1557, _1560));
    float _1662;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1635 = dot(vec4(_1619, _1620, _1621, 1.0), vec4(_1241, _1245, _1248, _1251));
        float _1639 = dot(vec4(_1619, _1620, _1621, 1.0), vec4(_1243, _1246, _1249, _1252));
        float _1643 = dot(vec4(_1619, _1620, _1621, 1.0), vec4(_1244, _1247, _1250, _1253));
        float _1650 = dot(vec4(cbModelParam._m0[39u]), vec4(_1619, _1620, _1621, 1.0));
        _1662 = dot(vec3(isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0)), isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0)), isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1650) ? 0.0 : (isnan(0.0) ? _1650 : max(0.0, _1650))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1662 = 1.0;
    }
    float _1673;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1664 = dot(vec4(cbModelParam._m0[40u]), vec4(_1619, _1620, _1621, 1.0));
        _1673 = dot(vec3(isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0)), isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0)), isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1664) ? 0.0 : (isnan(0.0) ? _1664 : max(0.0, _1664))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1673 = 1.0;
    }
    float _1677 = (_1673 * cbModelParam._m0[1u].x) + (_1662 * (1.0 - cbModelParam._m0[1u].x));
    float _1687 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _704);
    float _1688 = isnan(_1687) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1687 : min(cbModelParam._m0[25u].z, _1687));
    float _1768;
    float _1770;
    float _1772;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1735 = fma(_940, cbModelParam._m0[13u].z, fma(_936, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _932)) + cbModelParam._m0[13u].w;
        float _1739 = fma(_940, cbModelParam._m0[14u].z, fma(_936, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _932)) + cbModelParam._m0[14u].w;
        float _1743 = fma(_940, cbModelParam._m0[15u].z, fma(_936, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _932)) + cbModelParam._m0[15u].w;
        float _1746 = fma(_878, cbModelParam._m0[13u].z, fma(_877, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _876));
        float _1749 = fma(_878, cbModelParam._m0[14u].z, fma(_877, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _876));
        float _1752 = fma(_878, cbModelParam._m0[15u].z, fma(_877, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _876));
        float _1780;
        if (_1746 > 0.0)
        {
            _1780 = abs((1.0 - _1735) / _1746);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1746 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1735 + 1.0) / _1746);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1780 = frontier_phi_14_12_ladder;
        }
        float _1952;
        if (_1749 > 0.0)
        {
            _1952 = abs((1.0 - _1739) / _1749);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1749 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1739 + 1.0) / _1749);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1952 = frontier_phi_23_19_ladder;
        }
        float _2247;
        if (_1752 > 0.0)
        {
            _2247 = abs((1.0 - _1743) / _1752);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1752 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1743 + 1.0) / _1752);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2247 = frontier_phi_35_30_ladder;
        }
        float _2249 = isnan(_1952) ? _1780 : (isnan(_1780) ? _1952 : min(_1780, _1952));
        float _2250 = isnan(_2247) ? _2249 : (isnan(_2249) ? _2247 : min(_2249, _2247));
        float _2254 = (_2250 * _1746) + _1735;
        float _2255 = (_2250 * _1749) + _1739;
        float _2256 = (_2250 * _1752) + _1743;
        float _2257 = _2250 * 9.9999997473787516355514526367188e-05;
        float _2259 = (-1.0) - _2257;
        float _2261 = _2257 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2256 > _2261) || ((_2256 < _2259) || ((_2255 > _2261) || ((_2255 < _2259) || ((_2254 < _2259) || (_2254 > _2261))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2401 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2256, cbModelParam._m0[9u].z, fma(_2255, cbModelParam._m0[9u].y, _2254 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2256, cbModelParam._m0[10u].z, fma(_2255, cbModelParam._m0[10u].y, _2254 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2256, cbModelParam._m0[11u].z, fma(_2255, cbModelParam._m0[11u].y, _2254 * cbModelParam._m0[11u].x))), _1688);
            frontier_phi_13_35_ladder = _2401.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2401.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2401.x * cbModelParam._m0[1u].y;
        }
        _1768 = frontier_phi_13_35_ladder_2;
        _1770 = frontier_phi_13_35_ladder_1;
        _1772 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1756 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_876, _877, _878), _1688);
        _1768 = _1756.x * cbModelParam._m0[1u].y;
        _1770 = _1756.y * cbModelParam._m0[1u].y;
        _1772 = _1756.z * cbModelParam._m0[1u].y;
    }
    float _1776 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _704);
    float _1777 = isnan(_1776) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1776 : min(cbModelParam._m0[25u].w, _1776));
    float _1867;
    float _1869;
    float _1871;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1831 = fma(_940, cbModelParam._m0[21u].z, fma(_936, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _932)) + cbModelParam._m0[21u].w;
        float _1835 = fma(_940, cbModelParam._m0[22u].z, fma(_936, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _932)) + cbModelParam._m0[22u].w;
        float _1839 = fma(_940, cbModelParam._m0[23u].z, fma(_936, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _932)) + cbModelParam._m0[23u].w;
        float _1842 = fma(_878, cbModelParam._m0[21u].z, fma(_877, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _876));
        float _1845 = fma(_878, cbModelParam._m0[22u].z, fma(_877, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _876));
        float _1848 = fma(_878, cbModelParam._m0[23u].z, fma(_877, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _876));
        float _1957;
        if (_1842 > 0.0)
        {
            _1957 = abs((1.0 - _1831) / _1842);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1842 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1831 + 1.0) / _1842);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1957 = frontier_phi_25_21_ladder;
        }
        float _2274;
        if (_1845 > 0.0)
        {
            _2274 = abs((1.0 - _1835) / _1845);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1845 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1835 + 1.0) / _1845);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2274 = frontier_phi_37_32_ladder;
        }
        float _2612;
        if (_1848 > 0.0)
        {
            _2612 = abs((1.0 - _1839) / _1848);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1848 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1839 + 1.0) / _1848);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2612 = frontier_phi_47_44_ladder;
        }
        float _2614 = isnan(_2274) ? _1957 : (isnan(_1957) ? _2274 : min(_1957, _2274));
        float _2615 = isnan(_2612) ? _2614 : (isnan(_2614) ? _2612 : min(_2614, _2612));
        float _2619 = (_2615 * _1842) + _1831;
        float _2620 = (_2615 * _1845) + _1835;
        float _2621 = (_2615 * _1848) + _1839;
        float _2622 = _2615 * 9.9999997473787516355514526367188e-05;
        float _2623 = (-1.0) - _2622;
        float _2625 = _2622 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2621 > _2625) || ((_2621 < _2623) || ((_2620 > _2625) || ((_2620 < _2623) || ((_2619 < _2623) || (_2619 > _2625))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2743 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2621, cbModelParam._m0[17u].z, fma(_2620, cbModelParam._m0[17u].y, _2619 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2621, cbModelParam._m0[18u].z, fma(_2620, cbModelParam._m0[18u].y, _2619 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2621, cbModelParam._m0[19u].z, fma(_2620, cbModelParam._m0[19u].y, _2619 * cbModelParam._m0[19u].x))), _1777);
            frontier_phi_22_47_ladder = _2743.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2743.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2743.x * cbModelParam._m0[1u].z;
        }
        _1867 = frontier_phi_22_47_ladder_2;
        _1869 = frontier_phi_22_47_ladder_1;
        _1871 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1851 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_876, _877, _878), _1777);
        _1867 = _1851.x * cbModelParam._m0[1u].z;
        _1869 = _1851.y * cbModelParam._m0[1u].z;
        _1871 = _1851.z * cbModelParam._m0[1u].z;
    }
    float _1884 = (((_903 * _853) + _904) * _868) * ((cbModelParam._m0[1u].w * (_1867 - _1768)) + _1768);
    float _1886 = (((_903 * _855) + _904) * _868) * ((cbModelParam._m0[1u].w * (_1869 - _1770)) + _1770);
    float _1888 = (((_903 * _856) + _904) * _868) * ((cbModelParam._m0[1u].w * (_1871 - _1772)) + _1772);
    float _1891 = fma(_1888, cbSceneParam._m0[89u].z, fma(_1886, cbSceneParam._m0[89u].y, _1884 * cbSceneParam._m0[89u].x));
    float _1894 = fma(_1888, cbSceneParam._m0[90u].z, fma(_1886, cbSceneParam._m0[90u].y, _1884 * cbSceneParam._m0[90u].x));
    float _1897 = fma(_1888, cbSceneParam._m0[91u].z, fma(_1886, cbSceneParam._m0[91u].y, _1884 * cbSceneParam._m0[91u].x));
    float _1931 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1935 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1939 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1943 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1944 = _1931 / _1943;
    float _1945 = _1935 / _1943;
    float _1946 = _1939 / _1943;
    float _2093;
    float _2094;
    float _2095;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1973 = ((uint(_1946 > cbSceneParam._m0[59u].y) + uint(_1946 > cbSceneParam._m0[59u].x)) + uint(_1946 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1974 = _1973 + 43u;
        uint _1982 = _1973 + 44u;
        uint _1990 = _1973 + 45u;
        uint _1998 = _1973 + 46u;
        float _2009 = fma(_1943, cbSceneParam._m0[_1974].w, fma(_1939, cbSceneParam._m0[_1974].z, fma(_1935, cbSceneParam._m0[_1974].y, _1931 * cbSceneParam._m0[_1974].x)));
        float _2013 = fma(_1943, cbSceneParam._m0[_1982].w, fma(_1939, cbSceneParam._m0[_1982].z, fma(_1935, cbSceneParam._m0[_1982].y, _1931 * cbSceneParam._m0[_1982].x)));
        float _2021 = fma(_1943, cbSceneParam._m0[_1998].w, fma(_1939, cbSceneParam._m0[_1998].z, fma(_1935, cbSceneParam._m0[_1998].y, _1931 * cbSceneParam._m0[_1998].x)));
        float _2026 = cbSceneParam._m0[33u].z * _2021;
        float _2028 = cbSceneParam._m0[33u].w * _2021;
        float _2031 = fma(_1943, cbSceneParam._m0[_1990].w, fma(_1939, cbSceneParam._m0[_1990].z, fma(_1935, cbSceneParam._m0[_1990].y, _1931 * cbSceneParam._m0[_1990].x))) / _2021;
        float _2079 = (cbSceneParam._m0[33u].x - sqrt(((_1945 * _1945) + (_1944 * _1944)) + (_1946 * _1946))) * cbSceneParam._m0[33u].y;
        float _4413 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
        float _2086 = (isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2026 + _2009) / _2021, (_2028 + _2013) / _2021), _2031), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2028 + _2009) / _2021, (_2013 - _2026) / _2021), _2031), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2009 - _2026) / _2021, (_2013 - _2028) / _2021), _2031), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2009 - _2028) / _2021, (_2026 + _2013) / _2021), _2031), 0.0)).x), vec4(0.25)));
        _2093 = 1.0 - (_2086 * cbSceneParam._m0[34u].x);
        _2094 = 1.0 - (_2086 * cbSceneParam._m0[34u].y);
        _2095 = 1.0 - (_2086 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2093 = 1.0;
        _2094 = 1.0;
        _2095 = 1.0;
    }
    float _2159;
    float _2161;
    float _2163;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2147 = fma(_1943, cbSceneParam._m0[63u].w, fma(_1939, cbSceneParam._m0[63u].z, fma(_1935, cbSceneParam._m0[63u].y, _1931 * cbSceneParam._m0[63u].x)));
        float _2148 = fma(_1943, cbSceneParam._m0[60u].w, fma(_1939, cbSceneParam._m0[60u].z, fma(_1935, cbSceneParam._m0[60u].y, _1931 * cbSceneParam._m0[60u].x))) / _2147;
        float _2149 = fma(_1943, cbSceneParam._m0[61u].w, fma(_1939, cbSceneParam._m0[61u].z, fma(_1935, cbSceneParam._m0[61u].y, _1931 * cbSceneParam._m0[61u].x))) / _2147;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2148 >= cbSceneParam._m0[64u].x) && (_2149 >= cbSceneParam._m0[64u].y)) && (_2148 <= cbSceneParam._m0[64u].z)) && (_2149 <= cbSceneParam._m0[64u].w))
        {
            float _2287 = fma(_1943, cbSceneParam._m0[62u].w, fma(_1939, cbSceneParam._m0[62u].z, fma(_1935, cbSceneParam._m0[62u].y, _1931 * cbSceneParam._m0[62u].x))) / _2147;
            float _2291 = isnan(cbSceneParam._m0[41u].w) ? _2287 : (isnan(_2287) ? cbSceneParam._m0[41u].w : max(_2287, cbSceneParam._m0[41u].w));
            float _2334 = (cbSceneParam._m0[33u].x - sqrt(((_1945 * _1945) + (_1944 * _1944)) + (_1946 * _1946))) * cbSceneParam._m0[33u].y;
            float _4429 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
            float _2341 = (isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2148, cbSceneParam._m0[33u].w + _2149), _2291), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2148, _2149 - cbSceneParam._m0[33u].z), _2291), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2148 - cbSceneParam._m0[33u].z, _2149 - cbSceneParam._m0[33u].w), _2291), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2148 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2149), _2291), 0.0)).x), vec4(0.25)));
            float _2345 = 1.0 - (_2341 * cbSceneParam._m0[34u].x);
            float _2346 = 1.0 - (_2341 * cbSceneParam._m0[34u].y);
            float _2347 = 1.0 - (_2341 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2347) ? _2095 : (isnan(_2095) ? _2347 : min(_2095, _2347));
            frontier_phi_34_33_ladder_1 = isnan(_2346) ? _2094 : (isnan(_2094) ? _2346 : min(_2094, _2346));
            frontier_phi_34_33_ladder_2 = isnan(_2345) ? _2093 : (isnan(_2093) ? _2345 : min(_2093, _2345));
        }
        else
        {
            frontier_phi_34_33_ladder = _2095;
            frontier_phi_34_33_ladder_1 = _2094;
            frontier_phi_34_33_ladder_2 = _2093;
        }
        _2159 = frontier_phi_34_33_ladder_2;
        _2161 = frontier_phi_34_33_ladder_1;
        _2163 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2159 = _2093;
        _2161 = _2094;
        _2163 = _2095;
    }
    uvec4 _2168 = floatBitsToUint(cbInstanceData._m0[_828 + 5u]);
    uint _2170 = _2168.x * 14u;
    uint _2171 = _2170 + 13u;
    float _2178 = _868 + (-1.0);
    float _2183 = (cbLight._m0[_2171].x * _2178) + 1.0;
    float _2184 = (cbLight._m0[_2171].y * _2178) + 1.0;
    float _2185 = (cbLight._m0[_2171].z * _2178) + 1.0;
    float _2186 = (cbLight._m0[_2171].w * _2178) + 1.0;
    uint _2187 = _2170 + 5u;
    float _2193 = isnan(1.0) ? _2184 : (isnan(_2184) ? 1.0 : min(_2184, 1.0));
    uint _2197 = _2170 + 4u;
    float _2206 = isnan(1.0) ? _2183 : (isnan(_2183) ? 1.0 : min(_2183, 1.0));
    uint _2210 = _2170 | 1u;
    float _2221 = dot(vec3(cbLight._m0[_2170].xyz), vec3(_701, _702, _703));
    float _2224 = dot(vec3(cbLight._m0[_2210].xyz), vec3(_701, _702, _703));
    float _4465 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
    float _4476 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
    float _2229 = (isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0))) * 0.3183098733425140380859375;
    float _2231 = (isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0))) * 0.3183098733425140380859375;
    float _2238 = ((cbLight._m0[_2187].x * _2193) * _2231) + (((cbLight._m0[_2197].x * _2159) * _2206) * _2229);
    float _2239 = ((_2193 * cbLight._m0[_2187].y) * _2231) + (((cbLight._m0[_2197].y * _2161) * _2206) * _2229);
    float _2240 = ((_2193 * cbLight._m0[_2187].z) * _2231) + (((cbLight._m0[_2197].z * _2163) * _2206) * _2229);
    uvec4 _2244 = floatBitsToUint(cbLight._m0[_2170 + 12u]);
    bool _2246 = _2244.x == 0u;
    float _2348;
    float _2350;
    float _2352;
    if (_2246)
    {
        _2348 = _2238;
        _2350 = _2239;
        _2352 = _2240;
    }
    else
    {
        uint _2356 = _2170 + 6u;
        float _2372 = (dot(vec3(cbLight._m0[_2170 + 2u].xyz), vec3(_701, _702, _703)) * 0.5) + 0.5;
        float _2373 = _2372 * _2372;
        float _4487 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
        float _2374 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
        float _2375 = isnan(1.0) ? _2185 : (isnan(_2185) ? 1.0 : min(_2185, 1.0));
        _2348 = (((cbLight._m0[_2356].x * 0.3183098733425140380859375) * _2374) * _2375) + _2238;
        _2350 = (((cbLight._m0[_2356].y * 0.3183098733425140380859375) * _2374) * _2375) + _2239;
        _2352 = (((cbLight._m0[_2356].z * 0.3183098733425140380859375) * _2374) * _2375) + _2240;
    }
    bool _2355 = _2244.y == 0u;
    float _2410;
    float _2412;
    float _2414;
    if (_2355)
    {
        _2410 = _2348;
        _2412 = _2350;
        _2414 = _2352;
    }
    else
    {
        uint _2583 = _2170 + 7u;
        float _2599 = (dot(vec3(cbLight._m0[_2170 + 3u].xyz), vec3(_701, _702, _703)) * 0.5) + 0.5;
        float _2600 = _2599 * _2599;
        float _4503 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
        float _2601 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
        float _2602 = isnan(1.0) ? _2186 : (isnan(_2186) ? 1.0 : min(_2186, 1.0));
        _2410 = (((cbLight._m0[_2583].x * 0.3183098733425140380859375) * _2601) * _2602) + _2348;
        _2412 = (((cbLight._m0[_2583].y * 0.3183098733425140380859375) * _2601) * _2602) + _2350;
        _2414 = (((cbLight._m0[_2583].z * 0.3183098733425140380859375) * _2601) * _2602) + _2352;
    }
    uint _2417 = _2170 + 8u;
    float _2430 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2170].w)) * _704) * 0.949999988079071044921875);
    float _2431 = _2430 * _2430;
    float _2432 = cbLight._m0[_2170].x + _782;
    float _2433 = cbLight._m0[_2170].y + _783;
    float _2434 = cbLight._m0[_2170].z + _784;
    float _2438 = inversesqrt(dot(vec3(_2432, _2433, _2434), vec3(_2432, _2433, _2434)));
    float _2439 = _2438 * _2432;
    float _2440 = _2438 * _2433;
    float _2441 = _2438 * _2434;
    float _2442 = dot(vec3(_701, _702, _703), vec3(cbLight._m0[_2170].xyz));
    float _4519 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
    float _2445 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
    float _4530 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _2446 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
    float _2447 = dot(vec3(_701, _702, _703), vec3(_2439, _2440, _2441));
    float _4541 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
    float _2450 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
    float _2451 = dot(vec3(cbLight._m0[_2170].xyz), vec3(_2439, _2440, _2441));
    float _4552 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
    float _2455 = _2431 * _2431;
    float _2459 = ((_2450 * _2450) * (_2455 + (-1.0))) + 1.0;
    float _2467 = exp2(log2(1.0 - (isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0)))) * 5.0);
    float _2468 = 0.959999978542327880859375 - _850;
    float _2470 = 0.959999978542327880859375 - _851;
    float _2471 = 0.959999978542327880859375 - _852;
    float _2478 = 1.0 - _2431;
    float _2489 = (0.5 / (((_2446 * ((_2445 * _2478) + _2431)) + 9.9999999392252902907785028219223e-09) + (((_2446 * _2478) + _2431) * _2445))) * _2445;
    float _4563 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
    float _2491 = (isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0))) * (_2455 / ((_2459 * _2459) * 3.141590118408203125));
    uint _2505 = _2170 + 9u;
    float _2516 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2210].w)) * _704) * 0.949999988079071044921875);
    float _2517 = _2516 * _2516;
    float _2518 = cbLight._m0[_2210].x + _782;
    float _2519 = cbLight._m0[_2210].y + _783;
    float _2520 = cbLight._m0[_2210].z + _784;
    float _2524 = inversesqrt(dot(vec3(_2518, _2519, _2520), vec3(_2518, _2519, _2520)));
    float _2525 = _2524 * _2518;
    float _2526 = _2524 * _2519;
    float _2527 = _2524 * _2520;
    float _2528 = dot(vec3(_701, _702, _703), vec3(cbLight._m0[_2210].xyz));
    float _4574 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
    float _2531 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
    float _2532 = dot(vec3(_701, _702, _703), vec3(_2525, _2526, _2527));
    float _4585 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
    float _2535 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
    float _2536 = dot(vec3(cbLight._m0[_2210].xyz), vec3(_2525, _2526, _2527));
    float _4596 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
    float _2540 = _2517 * _2517;
    float _2544 = ((_2535 * _2535) * (_2540 + (-1.0))) + 1.0;
    float _2551 = exp2(log2(1.0 - (isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0)))) * 5.0);
    float _2558 = 1.0 - _2517;
    float _2568 = (0.5 / (((_2446 * ((_2531 * _2558) + _2517)) + 9.9999999392252902907785028219223e-09) + (((_2446 * _2558) + _2517) * _2531))) * _2531;
    float _4607 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
    float _2570 = (isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0))) * (_2540 / ((_2544 * _2544) * 3.141590118408203125));
    float _2580 = (((((_2551 * _2468) + _853) * cbLight._m0[_2505].x) * _2570) * _2193) + ((((cbLight._m0[_2417].x * _2159) * ((_2467 * _2468) + _853)) * _2491) * _2206);
    float _2581 = (((((_2551 * _2470) + _855) * cbLight._m0[_2505].y) * _2570) * _2193) + ((((cbLight._m0[_2417].y * _2161) * ((_2467 * _2470) + _855)) * _2491) * _2206);
    float _2582 = (((((_2551 * _2471) + _856) * cbLight._m0[_2505].z) * _2570) * _2193) + ((((cbLight._m0[_2417].z * _2163) * ((_2467 * _2471) + _856)) * _2491) * _2206);
    float _2638;
    float _2640;
    float _2642;
    if (_2246)
    {
        _2638 = _2580;
        _2640 = _2581;
        _2642 = _2582;
    }
    else
    {
        uint _2644 = _2170 + 2u;
        uint _2648 = _2170 + 10u;
        float _2662 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2644].w)) * _704) * 0.949999988079071044921875);
        float _2663 = _2662 * _2662;
        float _2664 = cbLight._m0[_2644].x + _782;
        float _2665 = cbLight._m0[_2644].y + _783;
        float _2666 = cbLight._m0[_2644].z + _784;
        float _2670 = inversesqrt(dot(vec3(_2664, _2665, _2666), vec3(_2664, _2665, _2666)));
        float _2671 = _2670 * _2664;
        float _2672 = _2670 * _2665;
        float _2673 = _2670 * _2666;
        float _2674 = dot(vec3(_701, _702, _703), vec3(cbLight._m0[_2644].xyz));
        float _4618 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
        float _2677 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
        float _2678 = dot(vec3(_701, _702, _703), vec3(_2671, _2672, _2673));
        float _4629 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
        float _2681 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
        float _2682 = dot(vec3(cbLight._m0[_2644].xyz), vec3(_2671, _2672, _2673));
        float _4640 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
        float _2686 = _2663 * _2663;
        float _2690 = ((_2681 * _2681) * (_2686 + (-1.0))) + 1.0;
        float _2697 = exp2(log2(1.0 - (isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0)))) * 5.0);
        float _2704 = 1.0 - _2663;
        float _2714 = (0.5 / (((_2446 * ((_2677 * _2704) + _2663)) + 9.9999999392252902907785028219223e-09) + (((_2446 * _2704) + _2663) * _2677))) * _2677;
        float _4651 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
        float _2716 = (isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0))) * (_2686 / ((_2690 * _2690) * 3.141590118408203125));
        float _2717 = isnan(1.0) ? _2185 : (isnan(_2185) ? 1.0 : min(_2185, 1.0));
        _2638 = (((((_2697 * _2468) + _853) * cbLight._m0[_2648].x) * _2716) * _2717) + _2580;
        _2640 = (((((_2697 * _2470) + _855) * cbLight._m0[_2648].y) * _2716) * _2717) + _2581;
        _2642 = (((((_2697 * _2471) + _856) * cbLight._m0[_2648].z) * _2716) * _2717) + _2582;
    }
    float _2748;
    float _2750;
    float _2752;
    if (_2355)
    {
        _2748 = _2638;
        _2750 = _2640;
        _2752 = _2642;
    }
    else
    {
        uint _2759 = _2170 + 3u;
        uint _2763 = _2170 + 11u;
        float _2777 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2759].w)) * _704) * 0.949999988079071044921875);
        float _2778 = _2777 * _2777;
        float _2779 = cbLight._m0[_2759].x + _782;
        float _2780 = cbLight._m0[_2759].y + _783;
        float _2781 = cbLight._m0[_2759].z + _784;
        float _2785 = inversesqrt(dot(vec3(_2779, _2780, _2781), vec3(_2779, _2780, _2781)));
        float _2786 = _2785 * _2779;
        float _2787 = _2785 * _2780;
        float _2788 = _2785 * _2781;
        float _2789 = dot(vec3(_701, _702, _703), vec3(cbLight._m0[_2759].xyz));
        float _4667 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
        float _2792 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
        float _2793 = dot(vec3(_701, _702, _703), vec3(_2786, _2787, _2788));
        float _4678 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
        float _2796 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
        float _2797 = dot(vec3(cbLight._m0[_2759].xyz), vec3(_2786, _2787, _2788));
        float _4689 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
        float _2801 = _2778 * _2778;
        float _2805 = ((_2796 * _2796) * (_2801 + (-1.0))) + 1.0;
        float _2812 = exp2(log2(1.0 - (isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0)))) * 5.0);
        float _2819 = 1.0 - _2778;
        float _2829 = (0.5 / (((_2446 * ((_2792 * _2819) + _2778)) + 9.9999999392252902907785028219223e-09) + (((_2446 * _2819) + _2778) * _2792))) * _2792;
        float _4700 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0));
        float _2831 = (isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0))) * (_2801 / ((_2805 * _2805) * 3.141590118408203125));
        float _2832 = isnan(1.0) ? _2186 : (isnan(_2186) ? 1.0 : min(_2186, 1.0));
        _2748 = (((((_2812 * _2468) + _853) * cbLight._m0[_2763].x) * _2831) * _2832) + _2638;
        _2750 = (((((_2812 * _2470) + _855) * cbLight._m0[_2763].y) * _2831) * _2832) + _2640;
        _2752 = (((((_2812 * _2471) + _856) * cbLight._m0[_2763].z) * _2831) * _2832) + _2642;
    }
    float _2898;
    float _2900;
    float _2902;
    float _2904;
    float _2906;
    float _2908;
    if (_2168.y == 0u)
    {
        uvec4 _2853 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2854 = _2853.x;
        uint _2865 = uint((float(_2853.y) * floor(float(uint(cbSceneParam._m0[85u].y * _791) / _2854))) + floor(float(uint(cbSceneParam._m0[85u].x * _790) / _2854)));
        float _2875 = (log2(_1946 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2876 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0));
        uint _2879 = uint(isnan(14.0) ? _2876 : (isnan(_2876) ? 14.0 : min(_2876, 14.0)));
        uvec4 _2884 = texelFetch(g_lightClusterGridBuffer, int(((_2879 << 2u) + (_2865 << 6u)) >> 2u));
        uint _2885 = _2884.x;
        uint _2886 = _2853.z;
        float _2994;
        float _2996;
        float _2998;
        float _3000;
        float _3002;
        float _3004;
        if (((((1u << ((_2886 >> 4u) & 15u)) + 4294967295u) & _2885) == 0u) || ((_2886 & 240u) == 0u))
        {
            _2994 = 0.0;
            _2996 = 0.0;
            _2998 = 0.0;
            _3000 = 0.0;
            _3002 = 0.0;
            _3004 = 0.0;
        }
        else
        {
            float _2995;
            float _2997;
            float _2999;
            float _3001;
            float _3003;
            float _3005;
            float _3147 = 0.0;
            float _3148 = 0.0;
            float _3149 = 0.0;
            float _3150 = 0.0;
            float _3151 = 0.0;
            float _3152 = 0.0;
            uint _3153 = 0u;
            uint _3162;
            bool _3163;
            for (;;)
            {
                _3162 = texelFetch(g_lightClassification, int((((_2879 << 5u) + (_2865 << 9u)) + (_3153 << 2u)) >> 2u)).x;
                _3163 = _3162 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3163)
                {
                    frontier_phi_66_pred = _3152;
                    frontier_phi_66_pred_1 = _3151;
                    frontier_phi_66_pred_2 = _3150;
                    frontier_phi_66_pred_3 = _3149;
                    frontier_phi_66_pred_4 = _3148;
                    frontier_phi_66_pred_5 = _3147;
                }
                else
                {
                    float _3271;
                    float _3272;
                    float _3273;
                    float _3274;
                    float _3275;
                    float _3276;
                    uint _3277;
                    _3271 = _3147;
                    _3272 = _3148;
                    _3273 = _3149;
                    _3274 = _3150;
                    _3275 = _3151;
                    _3276 = _3152;
                    _3277 = _3162;
                    float _3203;
                    float _3204;
                    float _3205;
                    float _3206;
                    float _3207;
                    float _3208;
                    for (;;)
                    {
                        uint _3281 = uint(findLSB(_3277)) + (_3153 << 5u);
                        uint _3278 = (_3277 + 4294967295u) & _3277;
                        uint _3283 = _3281 * 48u;
                        vec4 _3297 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3283)).x, texelFetch(g_PointLightRenderingBuffer, int(_3283 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3283 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3283 + 3u)).x));
                        uint _3303 = (_3281 * 48u) + 4u;
                        vec4 _3316 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3303)).x, texelFetch(g_PointLightRenderingBuffer, int(_3303 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3303 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3303 + 3u)).x));
                        uint _3322 = (_3281 * 48u) + 8u;
                        vec3 _3333 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3322)).x, texelFetch(g_PointLightRenderingBuffer, int(_3322 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3322 + 2u)).x));
                        float _3337 = _3297.x - _1944;
                        float _3338 = _3297.y - _1945;
                        float _3339 = _3297.z - _1946;
                        float _3340 = dot(vec3(_3337, _3338, _3339), vec3(_3337, _3338, _3339));
                        float _3343 = inversesqrt(_3340);
                        float _3344 = _3343 * _3337;
                        float _3345 = _3343 * _3338;
                        float _3346 = _3343 * _3339;
                        float _3347 = dot(vec3(_809, _812, _815), vec3(_3344, _3345, _3346));
                        float _3352 = 1.0 - (_3340 * _3297.w);
                        float _4726 = isnan(0.0) ? _3352 : (isnan(_3352) ? 0.0 : max(_3352, 0.0));
                        float _3353 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
                        float _3354 = sqrt(_3340) * _3316.w;
                        float _3357 = 1.39999997615814208984375 / (_3354 + 1.39999997615814208984375);
                        float _3358 = _3357 * _3357;
                        float _3361 = ((1.0 - _3358) * _3347) + _3358;
                        float _3364 = _3354 * _3354;
                        float _3368 = ((isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0))) * _3353) / ((_3364 * 0.699999988079071044921875) + 1.0);
                        float _3372 = (-0.0) - _1944;
                        float _3373 = (-0.0) - _1945;
                        float _3374 = (-0.0) - _1946;
                        float _3378 = inversesqrt(dot(vec3(_3372, _3373, _3374), vec3(_3372, _3373, _3374)));
                        float _3379 = _3378 * _3372;
                        float _3380 = _3378 * _3373;
                        float _3381 = _3378 * _3374;
                        float _3388 = exp2(log2(1.0 / ((_3364 * 3.5) + 5.0)) * 0.25);
                        float _3389 = 1.0 - _884;
                        float _3396 = sqrt(1.0 - ((1.0 - (_3389 * _3389)) * (1.0 - (_3388 * _3388))));
                        float _3397 = _3396 * _3396;
                        float _3398 = _3397 * _3397;
                        float _3399 = _3379 + _3344;
                        float _3400 = _3380 + _3345;
                        float _3401 = _3381 + _3346;
                        float _3405 = inversesqrt(dot(vec3(_3399, _3400, _3401), vec3(_3399, _3400, _3401)));
                        float _3409 = dot(vec3(_809, _812, _815), vec3(_3379, _3380, _3381));
                        float _4742 = isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0));
                        float _3412 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
                        float _3413 = dot(vec3(_809, _812, _815), vec3(_3405 * _3399, _3405 * _3400, _3405 * _3401));
                        float _4753 = isnan(0.0) ? _3413 : (isnan(_3413) ? 0.0 : max(_3413, 0.0));
                        float _3416 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
                        float _3420 = ((_3416 * _3416) * (_3398 + (-1.0))) + 1.0;
                        float _3421 = _3357 * _3397;
                        float _3422 = _3421 * _3421;
                        float _3425 = ((1.0 - _3422) * _3347) + _3422;
                        float _4764 = isnan(0.0) ? _3425 : (isnan(_3425) ? 0.0 : max(_3425, 0.0));
                        float _3426 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
                        float _3427 = 1.0 - _3397;
                        float _3437 = (0.5 / (((_3426 * ((_3412 * _3427) + _3397)) + 9.9999999392252902907785028219223e-09) + (((_3426 * _3427) + _3397) * _3412))) * _3426;
                        float _4775 = isnan(0.0) ? _3437 : (isnan(_3437) ? 0.0 : max(_3437, 0.0));
                        float _3448 = (((_3398 * 3.1415927410125732421875) * (isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0)))) / ((_3420 * _3420) * ((_3364 * 2.1991131305694580078125) + 3.141590118408203125))) * _3353;
                        _3206 = (_3368 * _3316.x) + _3274;
                        _3207 = (_3368 * _3316.y) + _3275;
                        _3208 = (_3368 * _3316.z) + _3276;
                        _3203 = (_3448 * _3333.x) + _3271;
                        _3204 = (_3448 * _3333.y) + _3272;
                        _3205 = (_3448 * _3333.z) + _3273;
                        if (_3278 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3271 = _3203;
                            _3272 = _3204;
                            _3273 = _3205;
                            _3274 = _3206;
                            _3275 = _3207;
                            _3276 = _3208;
                            _3277 = _3278;
                        }
                    }
                    frontier_phi_66_pred = _3208;
                    frontier_phi_66_pred_1 = _3207;
                    frontier_phi_66_pred_2 = _3206;
                    frontier_phi_66_pred_3 = _3205;
                    frontier_phi_66_pred_4 = _3204;
                    frontier_phi_66_pred_5 = _3203;
                }
                _3005 = frontier_phi_66_pred;
                _3003 = frontier_phi_66_pred_1;
                _3001 = frontier_phi_66_pred_2;
                _2999 = frontier_phi_66_pred_3;
                _2997 = frontier_phi_66_pred_4;
                _2995 = frontier_phi_66_pred_5;
                uint _3154 = _3153 + 1u;
                if (_3154 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3147 = _2995;
                    _3148 = _2997;
                    _3149 = _2999;
                    _3150 = _3001;
                    _3151 = _3003;
                    _3152 = _3005;
                    _3153 = _3154;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2994 = _2995;
            _2996 = _2997;
            _2998 = _2999;
            _3000 = _3001;
            _3002 = _3003;
            _3004 = _3005;
        }
        uvec4 _3008 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3009 = _3008.z;
        uint _3011 = (_3009 >> 8u) & 15u;
        float _3115;
        float _3117;
        float _3119;
        float _3121;
        float _3123;
        float _3125;
        if (((4294967295u << _3011) & _2885) == 0u)
        {
            _3115 = _2994;
            _3117 = _2996;
            _3119 = _2998;
            _3121 = _3000;
            _3123 = _3002;
            _3125 = _3004;
        }
        else
        {
            float _3140 = inversesqrt(dot(vec3(_1944, _1945, _1946), vec3(_1944, _1945, _1946)));
            float _3141 = _3140 * _1944;
            float _3142 = _3140 * _1945;
            float _3143 = _3140 * _1946;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3011 < ((_3009 >> 12u) & 15u))
            {
                float _3116;
                float _3118;
                float _3120;
                float _3122;
                float _3124;
                float _3126;
                float _3254 = _2994;
                float _3255 = _2996;
                float _3256 = _2998;
                float _3257 = _3000;
                float _3258 = _3002;
                float _3259 = _3004;
                uint _3260 = _3011;
                uint _3269;
                bool _3270;
                for (;;)
                {
                    _3269 = texelFetch(g_lightClassification, int((((_2879 << 5u) + (_2865 << 9u)) + (_3260 << 2u)) >> 2u)).x;
                    _3270 = _3269 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3270)
                    {
                        frontier_phi_72_pred = _3259;
                        frontier_phi_72_pred_1 = _3258;
                        frontier_phi_72_pred_2 = _3257;
                        frontier_phi_72_pred_3 = _3256;
                        frontier_phi_72_pred_4 = _3255;
                        frontier_phi_72_pred_5 = _3254;
                    }
                    else
                    {
                        float _3453;
                        float _3454;
                        float _3455;
                        float _3456;
                        float _3457;
                        float _3458;
                        float _3747;
                        float _3748;
                        float _3749;
                        float _3750;
                        float _3751;
                        float _3752;
                        float _3466 = _3254;
                        float _3467 = _3255;
                        float _3468 = _3256;
                        float _3469 = _3257;
                        float _3470 = _3258;
                        float _3471 = _3259;
                        uint _3472 = _3269;
                        uint _3473;
                        vec4 _3498;
                        float _3499;
                        vec4 _3514;
                        vec3 _3526;
                        vec4 _3541;
                        vec4 _3556;
                        float _3603;
                        bool _3604;
                        for (;;)
                        {
                            uint _3483 = ((_3260 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3472));
                            _3473 = (_3472 + 4294967295u) & _3472;
                            uint _3485 = _3483 * 40u;
                            _3498 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3485)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 3u)).x));
                            _3499 = _3498.w;
                            uint _3501 = (_3483 * 40u) + 4u;
                            _3514 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3501)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 3u)).x));
                            uint _3516 = (_3483 * 40u) + 8u;
                            _3526 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3516)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 2u)).x));
                            uint _3528 = (_3483 * 40u) + 16u;
                            _3541 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3528)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 3u)).x));
                            uint _3543 = (_3483 * 40u) + 20u;
                            _3556 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3543)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 3u)).x));
                            uint _3559 = (_3483 * 40u) + 24u;
                            vec4 _3572 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3559)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 3u)).x));
                            uint _3578 = (_3483 * 40u) + 28u;
                            vec4 _3591 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3578)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 3u)).x));
                            _3603 = fma(_1946, _3591.z, fma(_1945, _3591.y, _3591.x * _1944)) + _3591.w;
                            _3604 = !((fma(_1946, _3572.z, fma(_1945, _3572.y, _3572.x * _1944)) + _3572.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3604)
                            {
                                float _3631 = _3498.x - _1944;
                                float _3632 = _3498.y - _1945;
                                float _3633 = _3498.z - _1946;
                                float _3634 = dot(vec3(_3631, _3632, _3633), vec3(_3631, _3632, _3633));
                                float _3637 = inversesqrt(_3634);
                                float _3638 = _3637 * _3631;
                                float _3639 = _3637 * _3632;
                                float _3640 = _3637 * _3633;
                                float _3644 = 1.0 - (_3634 / (_3499 * _3499));
                                float _4786 = isnan(0.0) ? _3644 : (isnan(_3644) ? 0.0 : max(_3644, 0.0));
                                float _3645 = isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0));
                                float _3649 = sqrt(_3634) * _3514.w;
                                float _3651 = 1.39999997615814208984375 / (_3649 + 1.39999997615814208984375);
                                float _3652 = _3651 * _3651;
                                float _3655 = ((1.0 - _3652) * dot(vec3(_3638, _3639, _3640), vec3(_809, _812, _815))) + _3652;
                                float _3658 = _3649 * _3649;
                                float _3662 = (fma(_1946, _3541.z, fma(_1945, _3541.y, _3541.x * _1944)) + _3541.w) / _3603;
                                float _3663 = (fma(_1946, _3556.z, fma(_1945, _3556.y, _3556.x * _1944)) + _3556.w) / _3603;
                                float _3667 = 1.0 - dot(vec2(_3662, _3663), vec2(_3662, _3663));
                                float _4802 = isnan(0.0) ? _3667 : (isnan(_3667) ? 0.0 : max(_3667, 0.0));
                                float _3668 = isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0));
                                float _3669 = _3668 * (((isnan(0.0) ? _3655 : (isnan(_3655) ? 0.0 : max(_3655, 0.0))) * _3645) / ((_3658 * 0.699999988079071044921875) + 1.0));
                                float _3681 = exp2(log2(1.0 / ((_3658 * 3.5) + 5.0)) * 0.25);
                                float _3682 = 1.0 - _884;
                                float _3689 = sqrt(1.0 - ((1.0 - (_3682 * _3682)) * (1.0 - (_3681 * _3681))));
                                float _3690 = _3689 * _3689;
                                float _3691 = _3690 * _3690;
                                float _3692 = _3638 - _3141;
                                float _3693 = _3639 - _3142;
                                float _3694 = _3640 - _3143;
                                float _3698 = inversesqrt(dot(vec3(_3692, _3693, _3694), vec3(_3692, _3693, _3694)));
                                float _3702 = dot(vec3(_809, _812, _815), vec3((-0.0) - _3141, (-0.0) - _3142, (-0.0) - _3143));
                                float _4813 = isnan(0.0) ? _3702 : (isnan(_3702) ? 0.0 : max(_3702, 0.0));
                                float _3705 = isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0));
                                float _3706 = dot(vec3(_809, _812, _815), vec3(_3698 * _3692, _3698 * _3693, _3698 * _3694));
                                float _4824 = isnan(0.0) ? _3706 : (isnan(_3706) ? 0.0 : max(_3706, 0.0));
                                float _3709 = isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0));
                                float _3713 = ((_3709 * _3709) * (_3691 + (-1.0))) + 1.0;
                                float _3714 = _3651 * _3690;
                                float _3715 = _3714 * _3714;
                                float _3721 = ((1.0 - _3715) * dot(vec3(_809, _812, _815), vec3(_3638, _3639, _3640))) + _3715;
                                float _4835 = isnan(0.0) ? _3721 : (isnan(_3721) ? 0.0 : max(_3721, 0.0));
                                float _3722 = isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0));
                                float _3723 = 1.0 - _3690;
                                float _3733 = (0.5 / (((_3722 * ((_3705 * _3723) + _3690)) + 9.9999999392252902907785028219223e-09) + (((_3722 * _3723) + _3690) * _3705))) * _3722;
                                float _4846 = isnan(0.0) ? _3733 : (isnan(_3733) ? 0.0 : max(_3733, 0.0));
                                float _3743 = (_3668 * _3645) * (((_3691 * 3.1415927410125732421875) * (isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0)))) / ((_3713 * _3713) * ((_3658 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3669 * _3514.y;
                                frontier_phi_78_pred_1 = _3669 * _3514.x;
                                frontier_phi_78_pred_2 = _3743 * _3526.z;
                                frontier_phi_78_pred_3 = _3743 * _3526.y;
                                frontier_phi_78_pred_4 = _3743 * _3526.x;
                                frontier_phi_78_pred_5 = _3669 * _3514.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3751 = frontier_phi_78_pred;
                            _3750 = frontier_phi_78_pred_1;
                            _3749 = frontier_phi_78_pred_2;
                            _3748 = frontier_phi_78_pred_3;
                            _3747 = frontier_phi_78_pred_4;
                            _3752 = frontier_phi_78_pred_5;
                            _3456 = _3750 + _3469;
                            _3457 = _3751 + _3470;
                            _3458 = _3752 + _3471;
                            _3453 = _3747 + _3466;
                            _3454 = _3748 + _3467;
                            _3455 = _3749 + _3468;
                            if (_3473 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3466 = _3453;
                                _3467 = _3454;
                                _3468 = _3455;
                                _3469 = _3456;
                                _3470 = _3457;
                                _3471 = _3458;
                                _3472 = _3473;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3458;
                        frontier_phi_72_pred_1 = _3457;
                        frontier_phi_72_pred_2 = _3456;
                        frontier_phi_72_pred_3 = _3455;
                        frontier_phi_72_pred_4 = _3454;
                        frontier_phi_72_pred_5 = _3453;
                    }
                    _3126 = frontier_phi_72_pred;
                    _3124 = frontier_phi_72_pred_1;
                    _3122 = frontier_phi_72_pred_2;
                    _3120 = frontier_phi_72_pred_3;
                    _3118 = frontier_phi_72_pred_4;
                    _3116 = frontier_phi_72_pred_5;
                    uint _3261 = _3260 + 1u;
                    if (_3261 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3254 = _3116;
                        _3255 = _3118;
                        _3256 = _3120;
                        _3257 = _3122;
                        _3258 = _3124;
                        _3259 = _3126;
                        _3260 = _3261;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3126;
                frontier_phi_60_61_ladder_1 = _3124;
                frontier_phi_60_61_ladder_2 = _3120;
                frontier_phi_60_61_ladder_3 = _3118;
                frontier_phi_60_61_ladder_4 = _3116;
                frontier_phi_60_61_ladder_5 = _3122;
            }
            else
            {
                frontier_phi_60_61_ladder = _3004;
                frontier_phi_60_61_ladder_1 = _3002;
                frontier_phi_60_61_ladder_2 = _2998;
                frontier_phi_60_61_ladder_3 = _2996;
                frontier_phi_60_61_ladder_4 = _2994;
                frontier_phi_60_61_ladder_5 = _3000;
            }
            _3115 = frontier_phi_60_61_ladder_4;
            _3117 = frontier_phi_60_61_ladder_3;
            _3119 = frontier_phi_60_61_ladder_2;
            _3121 = frontier_phi_60_61_ladder_5;
            _3123 = frontier_phi_60_61_ladder_1;
            _3125 = frontier_phi_60_61_ladder;
        }
        float _3130 = isnan(1.0) ? _868 : (isnan(_868) ? 1.0 : min(_868, 1.0));
        _2898 = (_3130 * _3121) + _2410;
        _2900 = (_3130 * _3123) + _2412;
        _2902 = (_3130 * _3125) + _2414;
        _2904 = ((_3115 * _853) * _3130) + _2748;
        _2906 = ((_3117 * _855) * _3130) + _2750;
        _2908 = ((_3119 * _856) * _3130) + _2752;
    }
    else
    {
        _2898 = _2410;
        _2900 = _2412;
        _2902 = _2414;
        _2904 = _2748;
        _2906 = _2750;
        _2908 = _2752;
    }
    uint _2914 = _829 + uint(cbMatDynParam._m0[0u].w);
    float _2920 = ((((((_611.x - _608) * _544) + _608) * cbMtdParam._m0[13u].x) + ((((_565.x - _562) * _544) + _562) * cbMtdParam._m0[11u].x)) * _364) * cbInstanceData._m0[_2914].x;
    float _2921 = ((((((_611.y - _609) * _544) + _609) * cbMtdParam._m0[13u].y) + ((((_565.y - _563) * _544) + _563) * cbMtdParam._m0[11u].y)) * _364) * cbInstanceData._m0[_2914].y;
    float _2922 = ((((((_611.z - _610) * _544) + _610) * cbMtdParam._m0[13u].z) + ((((_565.z - _564) * _544) + _564) * cbMtdParam._m0[11u].z)) * _364) * cbInstanceData._m0[_2914].z;
    float _4862 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _4873 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _4884 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _2939 = (((isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0))) * (_2898 + ((isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0))) * _868))) + ((_2904 + ((isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0))) * _1677)) * cbPerFrame._m0[3u].x)) + _2920;
    float _2941 = (_2921 + ((_2906 + ((isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0))) * _1677)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0))) * (_2900 + ((isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0))) * _868)));
    float _2943 = (_2922 + ((_2908 + ((isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0))) * _1677)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0))) * (_2902 + ((isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0))) * _868)));
    float _4910 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2956 = isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0));
    uint _2957 = _828 + 6u;
    float _2965 = _790 / cbSceneParam._m0[86u].x;
    float _2966 = _791 / cbSceneParam._m0[86u].y;
    vec4 _2980 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2965, _2966, (log2((isnan(cbSceneParam._m0[77u].w) ? _724 : (isnan(_724) ? cbSceneParam._m0[77u].w : min(_724, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2982 = _2980.x;
    float _2983 = _2980.y;
    float _2984 = _2980.z;
    float _2985 = _2980.w;
    float _3056;
    float _3058;
    float _3060;
    float _3062;
    if (_724 > cbSceneParam._m0[78u].w)
    {
        float _3019 = isnan(_724) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _724 : min(cbSceneParam._m0[80u].w, _724));
        float _3020 = _3019 / _724;
        float _3031 = _3020 * _775;
        float _3032 = _776 * _3020;
        float _3033 = (-0.0) - _3032;
        float _3034 = _3020 * _777;
        float _3036 = (cbSceneParam._m0[77u].w * _3033) / _3019;
        float _3037 = _3036 + cbSceneParam._m0[79u].w;
        float _3038 = cbSceneParam._m0[79u].w - _3032;
        float _3044 = sqrt(((_3031 * _3031) + (_3032 * _3032)) + (_3034 * _3034));
        float _3047 = (1.0 - (cbSceneParam._m0[77u].w / _3019)) * _3044;
        float _3052 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3054 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3216;
        if (abs((_3033 - _3036) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3216 = ((((_3037 > 0.0) ? exp2(_3052 * _3037) : (2.0 - exp2(_3054 * _3037))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3047;
        }
        else
        {
            float _3176 = 1.0 / cbSceneParam._m0[80u].x;
            float _3177 = isnan(_3038) ? _3037 : (isnan(_3037) ? _3038 : max(_3037, _3038));
            float _3178 = isnan(_3038) ? _3037 : (isnan(_3037) ? _3038 : min(_3037, _3038));
            float _3187 = isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : min(_3177, 0.0));
            float _3188 = isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : min(_3178, 0.0));
            _3216 = ((abs(_3044 / _3033) * cbSceneParam._m0[80u].y) * ((((_3187 - _3188) * 2.0) - ((exp2(_3052 * (isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : max(_3177, 0.0)))) - exp2(_3052 * (isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : max(_3178, 0.0))))) * _3176)) - ((exp2(_3054 * _3187) - exp2(_3054 * _3188)) * _3176))) + (_3047 * cbSceneParam._m0[80u].z);
        }
        vec4 _3218 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2965, _2966, 1.0), 0.0);
        float _3227 = exp2((_3216 * (-1.44269502162933349609375)) * (1.0 - _3218.w));
        float _3228 = log2(_3227);
        float _3244 = log2(_2985);
        _3056 = (exp2(_3244 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3228 * cbSceneParam._m0[78u].x)) * _3218.x) / cbSceneParam._m0[78u].x)) + _2982;
        _3058 = (exp2(_3244 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3228 * cbSceneParam._m0[78u].y)) * _3218.y) / cbSceneParam._m0[78u].y)) + _2983;
        _3060 = (exp2(_3244 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3228 * cbSceneParam._m0[78u].z)) * _3218.z) / cbSceneParam._m0[78u].z)) + _2984;
        _3062 = _3227 * _2985;
    }
    else
    {
        _3056 = _2982;
        _3058 = _2983;
        _3060 = _2984;
        _3062 = _2985;
    }
    float _3074 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3075 = _3074 == 3.0;
    float _3076 = log2(_3062);
    float _3080 = exp2(_3076 * cbSceneParam._m0[78u].x);
    float _3081 = exp2(_3076 * cbSceneParam._m0[78u].y);
    float _3082 = exp2(_3076 * cbSceneParam._m0[78u].z);
    float _3083 = _3080 * (isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0)));
    float _3084 = _3081 * (isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0)));
    float _3085 = _3082 * (isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0)));
    float _3094 = (_3074 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3094 * (_3075 ? _3083 : (_3083 + (cbSceneParam._m0[72u].w * _3056)));
    SV_Target.y = _3094 * (_3075 ? _3084 : (_3084 + (cbSceneParam._m0[72u].w * _3058)));
    SV_Target.z = _3094 * (_3075 ? _3085 : (_3085 + (cbSceneParam._m0[72u].w * _3060)));
    SV_Target.w = cbInstanceData._m0[_2957].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2920) * _2956) * _3080) * _3094;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2921) * _2956) * _3081) * _3094;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2922) * _2956) * _3082) * _3094;
    SV_Target_1.w = cbInstanceData._m0[_2957].w;
}


