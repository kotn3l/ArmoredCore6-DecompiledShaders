#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1136;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _199 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _200 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _201 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _207 = inversesqrt(dot(vec3(_199, _200, _201), vec3(_199, _200, _201)));
    float _214 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _243 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _249 = _243.x * cbMtdParam._m0[9u].x;
    float _250 = _243.y * cbMtdParam._m0[9u].y;
    float _251 = _243.z * cbMtdParam._m0[9u].z;
    float _289 = TEXCOORD_9.x - ((cbMtdParam._m0[16u].y * (1.0 - TEXCOORD_9.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w)).x + 0.00999999977648258209228515625));
    float _291 = _289 * (cbMtdParam._m0[16u].z + 1.0);
    float _3481 = isnan(0.0) ? _291 : (isnan(_291) ? 0.0 : max(_291, 0.0));
    float _292 = isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0));
    float _300 = ((((cbMtdParam._m0[12u].x - _249) * TEXCOORD_9.x) * cbMtdParam._m0[16u].x) * _292) + _249;
    float _301 = ((((cbMtdParam._m0[12u].y - _250) * TEXCOORD_9.y) * cbMtdParam._m0[16u].x) * _292) + _250;
    float _302 = (((cbMtdParam._m0[16u].x * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _251)) * _292) + _251;
    vec4 _314 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _318 = _314.z;
    float _322 = (_314.x * 2.0) + (-1.0);
    float _324 = (_314.y * 2.0) + (-1.0);
    float _325 = dot(vec2(_322, _324), vec2(_322, _324));
    float _3492 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
    float _330 = sqrt(1.0 - (isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0))));
    float _336 = _289 * (cbMtdParam._m0[16u].y + 1.0);
    float _3503 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _340 = ((cbMtdParam._m0[15u].y - _318) * (isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0)))) + _318;
    float _353 = (cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _354 = (cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _381 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * ((cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * ((cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[10u].w));
    float _386 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[15u].w;
    float _393 = ((_381.y * 0.5) + (-0.25)) * cbMtdParam._m0[15u].z;
    float _395 = (-0.0) - (cbMtdParam._m0[15u].z * ((_381.x * 0.5) + (-0.25)));
    float _397 = fract(_386);
    float _399 = fract(_386 + 0.5);
    float _400 = _397 * _395;
    float _401 = _393 * _397;
    float _404 = _399 * _395;
    float _405 = _393 * _399;
    float _410 = abs((_397 * 2.0) + (-1.0));
    vec4 _426 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_400 + _353) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_401 + _354) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _428 = _426.x;
    float _429 = _426.y;
    float _430 = _426.z;
    vec4 _431 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_404 + _353) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_405 + _354) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _458 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _459 = (cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _472 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_400 + _458) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_401 + _459) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _474 = _472.x;
    float _475 = _472.y;
    float _476 = _472.z;
    vec4 _477 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_404 + _458) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_405 + _459) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _529 = (TEXCOORD_6.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_6.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_5, SS_WrapLinear), vec2((((cbMtdParam._m0[18u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((cbMtdParam._m0[18u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].x + 1.0);
    float _3514 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _530 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
    float _531 = _530 * (((((_477.x - _474) * _410) + _474) * cbMtdParam._m0[13u].x) + ((((_431.x - _428) * _410) + _428) * cbMtdParam._m0[11u].x));
    float _532 = _530 * (((((_477.y - _475) * _410) + _475) * cbMtdParam._m0[13u].y) + ((((_431.y - _429) * _410) + _429) * cbMtdParam._m0[11u].y));
    float _533 = _530 * (((((_477.z - _476) * _410) + _476) * cbMtdParam._m0[13u].z) + ((((_431.z - _430) * _410) + _430) * cbMtdParam._m0[11u].z));
    vec4 _545 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[9u].w));
    float _547 = _545.x;
    vec4 _572 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[16u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, (((cbMtdParam._m0[17u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w));
    float _578 = (_572.x * 2.0) + (-1.0);
    float _579 = (_572.y * 2.0) + (-1.0);
    float _580 = dot(vec2(_578, _579), vec2(_578, _579));
    float _3525 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _596 = (_292 * (((cbMtdParam._m0[14u].z * _322) - _322) + _578)) + _322;
    float _597 = (_292 * (((cbMtdParam._m0[14u].z * _324) - _324) + _579)) + _324;
    float _598 = (_292 * (sqrt(1.0 - (isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0)))) - _330)) + _330;
    float _601 = fma(_598, _214 * NORMAL.x, fma(_597, _221 * TANGENT.x, (_207 * _199) * _596));
    float _604 = fma(_598, _214 * NORMAL.y, fma(_597, _221 * TANGENT.y, (_207 * _200) * _596));
    float _607 = fma(_598, _214 * NORMAL.z, fma(_597, _221 * TANGENT.z, (_207 * _201) * _596));
    float _611 = inversesqrt(dot(vec3(_601, _604, _607), vec3(_601, _604, _607)));
    float _612 = _611 * _601;
    float _613 = _611 * _604;
    float _614 = _611 * _607;
    float _3536 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _615 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
    float _3547 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    float _3558 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _3569 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _634 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _674 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _684 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _674);
    float _685 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _674);
    float _686 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _674);
    float _690 = inversesqrt(dot(vec3(_684, _685, _686), vec3(_684, _685, _686)));
    float _691 = _684 * _690;
    float _692 = _685 * _690;
    float _693 = _686 * _690;
    float _699 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _700 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _721 = fma(_614, cbSceneParam._m0[5u].z, fma(_613, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _612));
    float _724 = fma(_614, cbSceneParam._m0[6u].z, fma(_613, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _612));
    float _727 = fma(_614, cbSceneParam._m0[7u].z, fma(_613, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _612));
    uint _740 = uint(roundEven(NORMAL.w)) * 13u;
    uint _741 = _740 + 9u;
    uint _742 = _741 + uint(cbMatDynParam._m0[0u].w);
    float _748 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0)))) * cbInstanceData._m0[_742].x;
    float _749 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0)))) * cbInstanceData._m0[_742].y;
    float _750 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0)))) * cbInstanceData._m0[_742].z;
    float _3580 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _751 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
    float _3591 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _752 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
    float _3602 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _753 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
    vec4 _762 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _699, cbSceneParam._m0[86u].y * _700));
    float _765 = _762.x * TEXCOORD_3.w;
    float _766 = dot(vec3(_612, _613, _614), vec3(_691, _692, _693));
    float _769 = _766 * 2.0;
    float _773 = (_769 * _612) - _691;
    float _774 = (_769 * _613) - _692;
    float _775 = (_769 * _614) - _693;
    float _779 = abs(dot(vec3(_691, _692, _693), vec3(_612, _613, _614)));
    float _3613 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _781 = sqrt(_615);
    float _794 = exp2((_781 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_781 * 3.0));
    float _826 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _830 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _834 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1135;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _861 = fma(_834, cbModelParam._m0[26u].z, fma(_830, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _826));
        float _865 = fma(_834, cbModelParam._m0[27u].z, fma(_830, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _826));
        float _869 = fma(_834, cbModelParam._m0[28u].z, fma(_830, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _826));
        float _893 = _826 + _612;
        float _894 = _830 + _613;
        float _895 = _834 + _614;
        float _905 = fma(_895, cbModelParam._m0[26u].z, fma(_894, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _893)) - _861;
        float _906 = fma(_895, cbModelParam._m0[27u].z, fma(_894, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _893)) - _865;
        float _907 = fma(_895, cbModelParam._m0[28u].z, fma(_894, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _893)) - _869;
        float _911 = inversesqrt(dot(vec3(_905, _906, _907), vec3(_905, _906, _907)));
        float _924 = ((_911 * _905) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_861 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _925 = ((_911 * _906) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_865 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _926 = ((_911 * _907) / cbModelParam._m0[34u].z) + ((((((_869 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _929 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_924, _925, _926), 0.0);
        vec4 _936 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_924, _925, _926), 0.0);
        vec4 _943 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_924, _925, _926), 0.0);
        vec4 _950 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_924, _925, _926), 0.0);
        float _963 = exp2((_929.w + (-0.5)) * 20.0) * 2.0;
        float _964 = _963 * (_929.x + (-0.5));
        float _965 = _963 * (_929.y + (-0.5));
        float _966 = _963 * (_929.z + (-0.5));
        float _973 = exp2((_936.w + (-0.5)) * 20.0) * 2.0;
        float _974 = _973 * (_936.x + (-0.5));
        float _975 = _973 * (_936.y + (-0.5));
        float _976 = _973 * (_936.z + (-0.5));
        float _983 = exp2((_943.w + (-0.5)) * 20.0) * 2.0;
        float _984 = _983 * (_943.x + (-0.5));
        float _985 = _983 * (_943.y + (-0.5));
        float _986 = _983 * (_943.z + (-0.5));
        float _993 = exp2((_950.w + (-0.5)) * 20.0) * 2.0;
        float _994 = _993 * (_950.x + (-0.5));
        float _995 = _993 * (_950.y + (-0.5));
        float _996 = _993 * (_950.z + (-0.5));
        float _997 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _998 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _999 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _1000 = _964 * 0.5;
        float _1001 = _974 * 0.5;
        float _1002 = _984 * 0.5;
        float _1003 = dot(vec3(_1000, _1001, _1002), vec3(_1000, _1001, _1002));
        float _1008 = (_1003 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1003);
        float _1017 = (dot(vec3(_612, _613, _614), vec3(_1008 * _1000, _1008 * _1001, _1008 * _1002)) + 1.0) * 0.5;
        float _3639 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1027 = sqrt(((_1001 * _1001) + (_1000 * _1000)) + (_1002 * _1002)) / (_997 + 9.9999997473787516355514526367188e-06);
        float _3650 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1028 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
        float _1029 = _1028 * 2.0;
        float _1033 = (1.0 - _1028) / (_1028 + 1.0);
        float _3661 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1034 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
        float _1043 = ((((1.0 - _1034) * (_1029 + 2.0)) * exp2(log2(isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0))) * (_1029 + 1.0))) + _1034) * _997;
        float _1044 = _965 * 0.5;
        float _1045 = _975 * 0.5;
        float _1046 = _985 * 0.5;
        float _1047 = dot(vec3(_1044, _1045, _1046), vec3(_1044, _1045, _1046));
        float _1052 = (_1047 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1047);
        float _1060 = (dot(vec3(_612, _613, _614), vec3(_1052 * _1044, _1052 * _1045, _1052 * _1046)) + 1.0) * 0.5;
        float _3672 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1069 = sqrt(((_1045 * _1045) + (_1044 * _1044)) + (_1046 * _1046)) / (_998 + 9.9999997473787516355514526367188e-06);
        float _3683 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
        float _1071 = _1070 * 2.0;
        float _1075 = (1.0 - _1070) / (_1070 + 1.0);
        float _3694 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
        float _1085 = ((((1.0 - _1076) * (_1071 + 2.0)) * exp2(log2(isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0))) * (_1071 + 1.0))) + _1076) * _998;
        float _1086 = _966 * 0.5;
        float _1087 = _976 * 0.5;
        float _1088 = _986 * 0.5;
        float _1089 = dot(vec3(_1086, _1087, _1088), vec3(_1086, _1087, _1088));
        float _1094 = (_1089 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1089);
        float _1102 = (dot(vec3(_612, _613, _614), vec3(_1094 * _1086, _1094 * _1087, _1094 * _1088)) + 1.0) * 0.5;
        float _3705 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1111 = sqrt(((_1087 * _1087) + (_1086 * _1086)) + (_1088 * _1088)) / (_999 + 9.9999997473787516355514526367188e-06);
        float _3716 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1112 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
        float _1113 = _1112 * 2.0;
        float _1117 = (1.0 - _1112) / (_1112 + 1.0);
        float _3727 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1118 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
        float _1127 = ((((1.0 - _1118) * (_1113 + 2.0)) * exp2(log2(isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0))) * (_1113 + 1.0))) + _1118) * _999;
        _1135 = _966;
        _1137 = _965;
        _1138 = _964;
        _1139 = _976;
        _1140 = _975;
        _1141 = _974;
        _1142 = _986;
        _1143 = _985;
        _1144 = _984;
        _1145 = _999;
        _1146 = _998;
        _1147 = _997;
        _1148 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0)));
        _1149 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0)));
        _1150 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0)));
    }
    else
    {
        _1135 = _1136;
        _1137 = _1136;
        _1138 = _1136;
        _1139 = _1136;
        _1140 = _1136;
        _1141 = _1136;
        _1142 = _1136;
        _1143 = _1136;
        _1144 = _1136;
        _1145 = _1136;
        _1146 = _1136;
        _1147 = _1136;
        _1148 = 0.0;
        _1149 = 0.0;
        _1150 = 0.0;
    }
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1176 = fma(_834, cbModelParam._m0[30u].z, fma(_830, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _826));
        float _1180 = fma(_834, cbModelParam._m0[31u].z, fma(_830, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _826));
        float _1184 = fma(_834, cbModelParam._m0[32u].z, fma(_830, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _826));
        float _1207 = _826 + _612;
        float _1208 = _830 + _613;
        float _1209 = _834 + _614;
        float _1219 = fma(_1209, cbModelParam._m0[30u].z, fma(_1208, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1207)) - _1176;
        float _1220 = fma(_1209, cbModelParam._m0[31u].z, fma(_1208, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1207)) - _1180;
        float _1221 = fma(_1209, cbModelParam._m0[32u].z, fma(_1208, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1207)) - _1184;
        float _1225 = inversesqrt(dot(vec3(_1219, _1220, _1221), vec3(_1219, _1220, _1221)));
        float _1238 = ((_1225 * _1219) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1176 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1239 = ((_1225 * _1220) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1180 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1240 = ((_1225 * _1221) / cbModelParam._m0[35u].z) + ((((((_1184 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1242 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1238, _1239, _1240), 0.0);
        vec4 _1249 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1238, _1239, _1240), 0.0);
        vec4 _1256 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1238, _1239, _1240), 0.0);
        vec4 _1263 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1238, _1239, _1240), 0.0);
        float _1275 = exp2((_1242.w + (-0.5)) * 20.0) * 2.0;
        float _1276 = _1275 * (_1242.x + (-0.5));
        float _1277 = _1275 * (_1242.y + (-0.5));
        float _1278 = _1275 * (_1242.z + (-0.5));
        float _1285 = exp2((_1249.w + (-0.5)) * 20.0) * 2.0;
        float _1286 = _1285 * (_1249.x + (-0.5));
        float _1287 = _1285 * (_1249.y + (-0.5));
        float _1288 = _1285 * (_1249.z + (-0.5));
        float _1295 = exp2((_1256.w + (-0.5)) * 20.0) * 2.0;
        float _1296 = _1295 * (_1256.x + (-0.5));
        float _1297 = _1295 * (_1256.y + (-0.5));
        float _1298 = _1295 * (_1256.z + (-0.5));
        float _1305 = exp2((_1263.w + (-0.5)) * 20.0) * 2.0;
        float _1306 = _1305 * (_1263.x + (-0.5));
        float _1307 = _1305 * (_1263.y + (-0.5));
        float _1308 = _1305 * (_1263.z + (-0.5));
        float _1309 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1310 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1311 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1312 = _1276 * 0.5;
        float _1313 = _1286 * 0.5;
        float _1314 = _1296 * 0.5;
        float _1315 = dot(vec3(_1312, _1313, _1314), vec3(_1312, _1313, _1314));
        float _1320 = (_1315 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1315);
        float _1328 = (dot(vec3(_612, _613, _614), vec3(_1320 * _1312, _1320 * _1313, _1320 * _1314)) + 1.0) * 0.5;
        float _3768 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1337 = sqrt(((_1313 * _1313) + (_1312 * _1312)) + (_1314 * _1314)) / (_1309 + 9.9999997473787516355514526367188e-06);
        float _3779 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
        float _1339 = _1338 * 2.0;
        float _1343 = (1.0 - _1338) / (_1338 + 1.0);
        float _3790 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
        float _1353 = ((((1.0 - _1344) * (_1339 + 2.0)) * exp2(log2(isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0))) * (_1339 + 1.0))) + _1344) * _1309;
        float _1354 = _1277 * 0.5;
        float _1355 = _1287 * 0.5;
        float _1356 = _1297 * 0.5;
        float _1357 = dot(vec3(_1354, _1355, _1356), vec3(_1354, _1355, _1356));
        float _1362 = (_1357 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1357);
        float _1370 = (dot(vec3(_612, _613, _614), vec3(_1362 * _1354, _1362 * _1355, _1362 * _1356)) + 1.0) * 0.5;
        float _3801 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1379 = sqrt(((_1355 * _1355) + (_1354 * _1354)) + (_1356 * _1356)) / (_1310 + 9.9999997473787516355514526367188e-06);
        float _3812 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
        float _1381 = _1380 * 2.0;
        float _1385 = (1.0 - _1380) / (_1380 + 1.0);
        float _3823 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1386 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
        float _1395 = ((((1.0 - _1386) * (_1381 + 2.0)) * exp2(log2(isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0))) * (_1381 + 1.0))) + _1386) * _1310;
        float _1396 = _1278 * 0.5;
        float _1397 = _1288 * 0.5;
        float _1398 = _1298 * 0.5;
        float _1399 = dot(vec3(_1396, _1397, _1398), vec3(_1396, _1397, _1398));
        float _1404 = (_1399 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1399);
        float _1412 = (dot(vec3(_612, _613, _614), vec3(_1404 * _1396, _1404 * _1397, _1404 * _1398)) + 1.0) * 0.5;
        float _3834 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1421 = sqrt(((_1397 * _1397) + (_1396 * _1396)) + (_1398 * _1398)) / (_1311 + 9.9999997473787516355514526367188e-06);
        float _3845 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1422 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
        float _1423 = _1422 * 2.0;
        float _1427 = (1.0 - _1422) / (_1422 + 1.0);
        float _3856 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1428 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _1437 = ((((1.0 - _1428) * (_1423 + 2.0)) * exp2(log2(isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) * (_1423 + 1.0))) + _1428) * _1311;
        _1445 = _1278;
        _1446 = _1277;
        _1447 = _1276;
        _1448 = _1288;
        _1449 = _1287;
        _1450 = _1286;
        _1451 = _1298;
        _1452 = _1297;
        _1453 = _1296;
        _1454 = _1311;
        _1455 = _1310;
        _1456 = _1309;
        _1457 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0)));
        _1458 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0)));
        _1459 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0)));
    }
    else
    {
        _1445 = _1136;
        _1446 = _1136;
        _1447 = _1136;
        _1448 = _1136;
        _1449 = _1136;
        _1450 = _1136;
        _1451 = _1136;
        _1452 = _1136;
        _1453 = _1136;
        _1454 = _1136;
        _1455 = _1136;
        _1456 = _1136;
        _1457 = 0.0;
        _1458 = 0.0;
        _1459 = 0.0;
    }
    float _1469 = (cbModelParam._m0[1u].x * (_1457 - _1148)) + _1148;
    float _1470 = (cbModelParam._m0[1u].x * (_1458 - _1149)) + _1149;
    float _1471 = (cbModelParam._m0[1u].x * (_1459 - _1150)) + _1150;
    float _1492 = fma(_1471, cbSceneParam._m0[89u].z, fma(_1470, cbSceneParam._m0[89u].y, _1469 * cbSceneParam._m0[89u].x));
    float _1495 = fma(_1471, cbSceneParam._m0[90u].z, fma(_1470, cbSceneParam._m0[90u].y, _1469 * cbSceneParam._m0[90u].x));
    float _1498 = fma(_1471, cbSceneParam._m0[91u].z, fma(_1470, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1469));
    float _1513 = _773 * 0.5;
    float _1514 = _774 * 0.5;
    float _1515 = _775 * 0.5;
    float _1516 = dot(vec4(_1513, _1514, _1515, 1.0), vec4(_1447, _1450, _1453, _1456));
    float _1519 = dot(vec4(_1513, _1514, _1515, 1.0), vec4(_1446, _1449, _1452, _1455));
    float _1522 = dot(vec4(_1513, _1514, _1515, 1.0), vec4(_1445, _1448, _1451, _1454));
    float _1556;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1529 = dot(vec4(_1513, _1514, _1515, 1.0), vec4(_1135, _1139, _1142, _1145));
        float _1533 = dot(vec4(_1513, _1514, _1515, 1.0), vec4(_1137, _1140, _1143, _1146));
        float _1537 = dot(vec4(_1513, _1514, _1515, 1.0), vec4(_1138, _1141, _1144, _1147));
        float _1544 = dot(vec4(cbModelParam._m0[39u]), vec4(_1513, _1514, _1515, 1.0));
        _1556 = dot(vec3(isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0)), isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0)), isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1544) ? 0.0 : (isnan(0.0) ? _1544 : max(0.0, _1544))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1556 = 1.0;
    }
    float _1567;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1558 = dot(vec4(cbModelParam._m0[40u]), vec4(_1513, _1514, _1515, 1.0));
        _1567 = dot(vec3(isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0)), isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0)), isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1558) ? 0.0 : (isnan(0.0) ? _1558 : max(0.0, _1558))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1567 = 1.0;
    }
    float _1571 = (_1567 * cbModelParam._m0[1u].x) + (_1556 * (1.0 - cbModelParam._m0[1u].x));
    float _1581 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _615);
    float _1582 = isnan(_1581) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1581 : min(cbModelParam._m0[25u].z, _1581));
    float _1662;
    float _1664;
    float _1666;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1629 = fma(_834, cbModelParam._m0[13u].z, fma(_830, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _826)) + cbModelParam._m0[13u].w;
        float _1633 = fma(_834, cbModelParam._m0[14u].z, fma(_830, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _826)) + cbModelParam._m0[14u].w;
        float _1637 = fma(_834, cbModelParam._m0[15u].z, fma(_830, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _826)) + cbModelParam._m0[15u].w;
        float _1640 = fma(_775, cbModelParam._m0[13u].z, fma(_774, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _773));
        float _1643 = fma(_775, cbModelParam._m0[14u].z, fma(_774, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _773));
        float _1646 = fma(_775, cbModelParam._m0[15u].z, fma(_774, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _773));
        float _1674;
        if (_1640 > 0.0)
        {
            _1674 = abs((1.0 - _1629) / _1640);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1640 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1629 + 1.0) / _1640);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1674 = frontier_phi_14_12_ladder;
        }
        float _1876;
        if (_1643 > 0.0)
        {
            _1876 = abs((1.0 - _1633) / _1643);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1643 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1633 + 1.0) / _1643);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1876 = frontier_phi_23_19_ladder;
        }
        float _2119;
        if (_1646 > 0.0)
        {
            _2119 = abs((1.0 - _1637) / _1646);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1646 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1637 + 1.0) / _1646);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2119 = frontier_phi_35_30_ladder;
        }
        float _2121 = isnan(_1876) ? _1674 : (isnan(_1674) ? _1876 : min(_1674, _1876));
        float _2122 = isnan(_2119) ? _2121 : (isnan(_2121) ? _2119 : min(_2121, _2119));
        float _2126 = (_2122 * _1640) + _1629;
        float _2127 = (_2122 * _1643) + _1633;
        float _2128 = (_2122 * _1646) + _1637;
        float _2129 = _2122 * 9.9999997473787516355514526367188e-05;
        float _2131 = (-1.0) - _2129;
        float _2133 = _2129 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2128 > _2133) || ((_2128 < _2131) || ((_2127 > _2133) || ((_2127 < _2131) || ((_2126 < _2131) || (_2126 > _2133))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2252 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2128, cbModelParam._m0[9u].z, fma(_2127, cbModelParam._m0[9u].y, _2126 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2128, cbModelParam._m0[10u].z, fma(_2127, cbModelParam._m0[10u].y, _2126 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2128, cbModelParam._m0[11u].z, fma(_2127, cbModelParam._m0[11u].y, _2126 * cbModelParam._m0[11u].x))), _1582);
            frontier_phi_13_35_ladder = _2252.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2252.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2252.x * cbModelParam._m0[1u].y;
        }
        _1662 = frontier_phi_13_35_ladder_2;
        _1664 = frontier_phi_13_35_ladder_1;
        _1666 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1650 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_773, _774, _775), _1582);
        _1662 = _1650.x * cbModelParam._m0[1u].y;
        _1664 = _1650.y * cbModelParam._m0[1u].y;
        _1666 = _1650.z * cbModelParam._m0[1u].y;
    }
    float _1670 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _615);
    float _1671 = isnan(_1670) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1670 : min(cbModelParam._m0[25u].w, _1670));
    float _1761;
    float _1763;
    float _1765;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1725 = fma(_834, cbModelParam._m0[21u].z, fma(_830, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _826)) + cbModelParam._m0[21u].w;
        float _1729 = fma(_834, cbModelParam._m0[22u].z, fma(_830, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _826)) + cbModelParam._m0[22u].w;
        float _1733 = fma(_834, cbModelParam._m0[23u].z, fma(_830, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _826)) + cbModelParam._m0[23u].w;
        float _1736 = fma(_775, cbModelParam._m0[21u].z, fma(_774, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _773));
        float _1739 = fma(_775, cbModelParam._m0[22u].z, fma(_774, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _773));
        float _1742 = fma(_775, cbModelParam._m0[23u].z, fma(_774, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _773));
        float _1881;
        if (_1736 > 0.0)
        {
            _1881 = abs((1.0 - _1725) / _1736);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1736 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1725 + 1.0) / _1736);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1881 = frontier_phi_25_21_ladder;
        }
        float _2146;
        if (_1739 > 0.0)
        {
            _2146 = abs((1.0 - _1729) / _1739);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1739 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1729 + 1.0) / _1739);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2146 = frontier_phi_37_32_ladder;
        }
        float _2351;
        if (_1742 > 0.0)
        {
            _2351 = abs((1.0 - _1733) / _1742);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1742 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1733 + 1.0) / _1742);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2351 = frontier_phi_46_43_ladder;
        }
        float _2353 = isnan(_2146) ? _1881 : (isnan(_1881) ? _2146 : min(_1881, _2146));
        float _2354 = isnan(_2351) ? _2353 : (isnan(_2353) ? _2351 : min(_2353, _2351));
        float _2358 = (_2354 * _1736) + _1725;
        float _2359 = (_2354 * _1739) + _1729;
        float _2360 = (_2354 * _1742) + _1733;
        float _2361 = _2354 * 9.9999997473787516355514526367188e-05;
        float _2362 = (-1.0) - _2361;
        float _2364 = _2361 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2360 > _2364) || ((_2360 < _2362) || ((_2359 > _2364) || ((_2359 < _2362) || ((_2358 < _2362) || (_2358 > _2364))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2588 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2360, cbModelParam._m0[17u].z, fma(_2359, cbModelParam._m0[17u].y, _2358 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2360, cbModelParam._m0[18u].z, fma(_2359, cbModelParam._m0[18u].y, _2358 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2360, cbModelParam._m0[19u].z, fma(_2359, cbModelParam._m0[19u].y, _2358 * cbModelParam._m0[19u].x))), _1671);
            frontier_phi_22_46_ladder = _2588.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2588.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2588.x * cbModelParam._m0[1u].z;
        }
        _1761 = frontier_phi_22_46_ladder_2;
        _1763 = frontier_phi_22_46_ladder_1;
        _1765 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1745 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_773, _774, _775), _1671);
        _1761 = _1745.x * cbModelParam._m0[1u].z;
        _1763 = _1745.y * cbModelParam._m0[1u].z;
        _1765 = _1745.z * cbModelParam._m0[1u].z;
    }
    float _1777 = ((((1.0 - _794) * ((_781 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_794 * _781)) * _765;
    float _1778 = _1777 * ((cbModelParam._m0[1u].w * (_1761 - _1662)) + _1662);
    float _1779 = _1777 * ((cbModelParam._m0[1u].w * (_1763 - _1664)) + _1664);
    float _1780 = _1777 * ((cbModelParam._m0[1u].w * (_1765 - _1666)) + _1666);
    float _1783 = fma(_1780, cbSceneParam._m0[89u].z, fma(_1779, cbSceneParam._m0[89u].y, _1778 * cbSceneParam._m0[89u].x));
    float _1786 = fma(_1780, cbSceneParam._m0[90u].z, fma(_1779, cbSceneParam._m0[90u].y, _1778 * cbSceneParam._m0[90u].x));
    float _1789 = fma(_1780, cbSceneParam._m0[91u].z, fma(_1779, cbSceneParam._m0[91u].y, _1778 * cbSceneParam._m0[91u].x));
    uvec4 _1799 = floatBitsToUint(cbInstanceData._m0[_740 + 5u]);
    uint _1801 = _1799.x * 14u;
    uint _1802 = _1801 + 13u;
    float _1809 = _765 + (-1.0);
    float _1814 = (cbLight._m0[_1802].x * _1809) + 1.0;
    float _1815 = (cbLight._m0[_1802].y * _1809) + 1.0;
    float _1816 = (cbLight._m0[_1802].z * _1809) + 1.0;
    float _1817 = (cbLight._m0[_1802].w * _1809) + 1.0;
    uint _1818 = _1801 + 5u;
    float _1824 = isnan(1.0) ? _1815 : (isnan(_1815) ? 1.0 : min(_1815, 1.0));
    uint _1828 = _1801 + 4u;
    float _1835 = isnan(1.0) ? _1814 : (isnan(_1814) ? 1.0 : min(_1814, 1.0));
    uint _1839 = _1801 | 1u;
    float _1850 = dot(vec3(cbLight._m0[_1801].xyz), vec3(_612, _613, _614));
    float _1853 = dot(vec3(cbLight._m0[_1839].xyz), vec3(_612, _613, _614));
    float _3992 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
    float _4003 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
    float _1858 = (isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))) * 0.3183098733425140380859375;
    float _1860 = (isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * 0.3183098733425140380859375;
    float _1867 = ((cbLight._m0[_1818].x * _1824) * _1860) + ((cbLight._m0[_1828].x * _1835) * _1858);
    float _1868 = ((_1824 * cbLight._m0[_1818].y) * _1860) + ((_1835 * cbLight._m0[_1828].y) * _1858);
    float _1869 = ((_1824 * cbLight._m0[_1818].z) * _1860) + ((_1835 * cbLight._m0[_1828].z) * _1858);
    uvec4 _1873 = floatBitsToUint(cbLight._m0[_1801 + 12u]);
    bool _1875 = _1873.x == 0u;
    float _1886;
    float _1888;
    float _1890;
    if (_1875)
    {
        _1886 = _1867;
        _1888 = _1868;
        _1890 = _1869;
    }
    else
    {
        uint _1894 = _1801 + 6u;
        float _1910 = (dot(vec3(cbLight._m0[_1801 + 2u].xyz), vec3(_612, _613, _614)) * 0.5) + 0.5;
        float _1911 = _1910 * _1910;
        float _4014 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
        float _1912 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _1913 = isnan(1.0) ? _1816 : (isnan(_1816) ? 1.0 : min(_1816, 1.0));
        _1886 = (((cbLight._m0[_1894].x * 0.3183098733425140380859375) * _1912) * _1913) + _1867;
        _1888 = (((cbLight._m0[_1894].y * 0.3183098733425140380859375) * _1912) * _1913) + _1868;
        _1890 = (((cbLight._m0[_1894].z * 0.3183098733425140380859375) * _1912) * _1913) + _1869;
    }
    bool _1893 = _1873.y == 0u;
    float _1931;
    float _1933;
    float _1935;
    if (_1893)
    {
        _1931 = _1886;
        _1933 = _1888;
        _1935 = _1890;
    }
    else
    {
        uint _2090 = _1801 + 7u;
        float _2106 = (dot(vec3(cbLight._m0[_1801 + 3u].xyz), vec3(_612, _613, _614)) * 0.5) + 0.5;
        float _2107 = _2106 * _2106;
        float _4030 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
        float _2108 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _2109 = isnan(1.0) ? _1817 : (isnan(_1817) ? 1.0 : min(_1817, 1.0));
        _1931 = (((cbLight._m0[_2090].x * 0.3183098733425140380859375) * _2108) * _2109) + _1886;
        _1933 = (((cbLight._m0[_2090].y * 0.3183098733425140380859375) * _2108) * _2109) + _1888;
        _1935 = (((cbLight._m0[_2090].z * 0.3183098733425140380859375) * _2108) * _2109) + _1890;
    }
    uint _1938 = _1801 + 8u;
    float _1951 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1801].w)) * _615) * 0.949999988079071044921875);
    float _1952 = _1951 * _1951;
    float _1953 = cbLight._m0[_1801].x + _691;
    float _1954 = cbLight._m0[_1801].y + _692;
    float _1955 = cbLight._m0[_1801].z + _693;
    float _1959 = inversesqrt(dot(vec3(_1953, _1954, _1955), vec3(_1953, _1954, _1955)));
    float _1960 = _1959 * _1953;
    float _1961 = _1959 * _1954;
    float _1962 = _1959 * _1955;
    float _1963 = dot(vec3(_612, _613, _614), vec3(cbLight._m0[_1801].xyz));
    float _4046 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
    float _1966 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
    float _4057 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _1967 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
    float _1968 = dot(vec3(_612, _613, _614), vec3(_1960, _1961, _1962));
    float _4068 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
    float _1971 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
    float _1972 = dot(vec3(cbLight._m0[_1801].xyz), vec3(_1960, _1961, _1962));
    float _4079 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
    float _1976 = _1952 * _1952;
    float _1980 = ((_1971 * _1971) * (_1976 + (-1.0))) + 1.0;
    float _1991 = (exp2(log2(1.0 - (isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1992 = 1.0 - _1952;
    float _2003 = (0.5 / (((_1967 * ((_1966 * _1992) + _1952)) + 9.9999999392252902907785028219223e-09) + (((_1967 * _1992) + _1952) * _1966))) * _1966;
    float _4090 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
    float _2005 = (isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0))) * (_1976 / ((_1980 * _1980) * 3.141590118408203125));
    uint _2016 = _1801 + 9u;
    float _2027 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1839].w)) * _615) * 0.949999988079071044921875);
    float _2028 = _2027 * _2027;
    float _2029 = cbLight._m0[_1839].x + _691;
    float _2030 = cbLight._m0[_1839].y + _692;
    float _2031 = cbLight._m0[_1839].z + _693;
    float _2035 = inversesqrt(dot(vec3(_2029, _2030, _2031), vec3(_2029, _2030, _2031)));
    float _2036 = _2035 * _2029;
    float _2037 = _2035 * _2030;
    float _2038 = _2035 * _2031;
    float _2039 = dot(vec3(_612, _613, _614), vec3(cbLight._m0[_1839].xyz));
    float _4101 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
    float _2042 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
    float _2043 = dot(vec3(_612, _613, _614), vec3(_2036, _2037, _2038));
    float _4112 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
    float _2046 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
    float _2047 = dot(vec3(cbLight._m0[_1839].xyz), vec3(_2036, _2037, _2038));
    float _4123 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
    float _2051 = _2028 * _2028;
    float _2055 = ((_2046 * _2046) * (_2051 + (-1.0))) + 1.0;
    float _2064 = (exp2(log2(1.0 - (isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2065 = 1.0 - _2028;
    float _2075 = (0.5 / (((_1967 * ((_2042 * _2065) + _2028)) + 9.9999999392252902907785028219223e-09) + (((_1967 * _2065) + _2028) * _2042))) * _2042;
    float _4134 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
    float _2077 = (isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0))) * (_2051 / ((_2055 * _2055) * 3.141590118408203125));
    float _2087 = (((_2064 * cbLight._m0[_2016].x) * _2077) * _1824) + (((_1991 * cbLight._m0[_1938].x) * _2005) * _1835);
    float _2088 = (((_2064 * cbLight._m0[_2016].y) * _2077) * _1824) + (((_1991 * cbLight._m0[_1938].y) * _2005) * _1835);
    float _2089 = (((_2064 * cbLight._m0[_2016].z) * _2077) * _1824) + (((_1991 * cbLight._m0[_1938].z) * _2005) * _1835);
    float _2151;
    float _2153;
    float _2155;
    if (_1875)
    {
        _2151 = _2087;
        _2153 = _2088;
        _2155 = _2089;
    }
    else
    {
        uint _2157 = _1801 + 2u;
        uint _2161 = _1801 + 10u;
        float _2175 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2157].w)) * _615) * 0.949999988079071044921875);
        float _2176 = _2175 * _2175;
        float _2177 = cbLight._m0[_2157].x + _691;
        float _2178 = cbLight._m0[_2157].y + _692;
        float _2179 = cbLight._m0[_2157].z + _693;
        float _2183 = inversesqrt(dot(vec3(_2177, _2178, _2179), vec3(_2177, _2178, _2179)));
        float _2184 = _2183 * _2177;
        float _2185 = _2183 * _2178;
        float _2186 = _2183 * _2179;
        float _2187 = dot(vec3(_612, _613, _614), vec3(cbLight._m0[_2157].xyz));
        float _4145 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
        float _2190 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
        float _2191 = dot(vec3(_612, _613, _614), vec3(_2184, _2185, _2186));
        float _4156 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
        float _2194 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _2195 = dot(vec3(cbLight._m0[_2157].xyz), vec3(_2184, _2185, _2186));
        float _4167 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
        float _2199 = _2176 * _2176;
        float _2203 = ((_2194 * _2194) * (_2199 + (-1.0))) + 1.0;
        float _2212 = (exp2(log2(1.0 - (isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2213 = 1.0 - _2176;
        float _2223 = (0.5 / (((_1967 * ((_2190 * _2213) + _2176)) + 9.9999999392252902907785028219223e-09) + (((_1967 * _2213) + _2176) * _2190))) * _2190;
        float _4178 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
        float _2225 = (isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0))) * (_2199 / ((_2203 * _2203) * 3.141590118408203125));
        float _2226 = isnan(1.0) ? _1816 : (isnan(_1816) ? 1.0 : min(_1816, 1.0));
        _2151 = (((_2212 * cbLight._m0[_2161].x) * _2225) * _2226) + _2087;
        _2153 = (((_2212 * cbLight._m0[_2161].y) * _2225) * _2226) + _2088;
        _2155 = (((_2212 * cbLight._m0[_2161].z) * _2225) * _2226) + _2089;
    }
    float _2261;
    float _2263;
    float _2265;
    if (_1893)
    {
        _2261 = _2151;
        _2263 = _2153;
        _2265 = _2155;
    }
    else
    {
        uint _2272 = _1801 + 3u;
        uint _2276 = _1801 + 11u;
        float _2290 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2272].w)) * _615) * 0.949999988079071044921875);
        float _2291 = _2290 * _2290;
        float _2292 = cbLight._m0[_2272].x + _691;
        float _2293 = cbLight._m0[_2272].y + _692;
        float _2294 = cbLight._m0[_2272].z + _693;
        float _2298 = inversesqrt(dot(vec3(_2292, _2293, _2294), vec3(_2292, _2293, _2294)));
        float _2299 = _2298 * _2292;
        float _2300 = _2298 * _2293;
        float _2301 = _2298 * _2294;
        float _2302 = dot(vec3(_612, _613, _614), vec3(cbLight._m0[_2272].xyz));
        float _4194 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
        float _2305 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _2306 = dot(vec3(_612, _613, _614), vec3(_2299, _2300, _2301));
        float _4205 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
        float _2309 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _2310 = dot(vec3(cbLight._m0[_2272].xyz), vec3(_2299, _2300, _2301));
        float _4216 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
        float _2314 = _2291 * _2291;
        float _2318 = ((_2309 * _2309) * (_2314 + (-1.0))) + 1.0;
        float _2327 = (exp2(log2(1.0 - (isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2328 = 1.0 - _2291;
        float _2338 = (0.5 / (((_1967 * ((_2305 * _2328) + _2291)) + 9.9999999392252902907785028219223e-09) + (((_1967 * _2328) + _2291) * _2305))) * _2305;
        float _4227 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
        float _2340 = (isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0))) * (_2314 / ((_2318 * _2318) * 3.141590118408203125));
        float _2341 = isnan(1.0) ? _1817 : (isnan(_1817) ? 1.0 : min(_1817, 1.0));
        _2261 = (((_2327 * cbLight._m0[_2276].x) * _2340) * _2341) + _2151;
        _2263 = (((_2327 * cbLight._m0[_2276].y) * _2340) * _2341) + _2153;
        _2265 = (((_2327 * cbLight._m0[_2276].z) * _2340) * _2341) + _2155;
    }
    float _2476;
    float _2478;
    float _2480;
    float _2482;
    float _2484;
    float _2486;
    if (_1799.y == 0u)
    {
        float _2416 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2417 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2416;
        float _2418 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2416;
        float _2419 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2416;
        uvec4 _2431 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2432 = _2431.x;
        uint _2443 = uint((float(_2431.y) * floor(float(uint(cbSceneParam._m0[85u].y * _700) / _2432))) + floor(float(uint(cbSceneParam._m0[85u].x * _699) / _2432)));
        float _2453 = (log2(_2419 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2454 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
        uint _2457 = uint(isnan(14.0) ? _2454 : (isnan(_2454) ? 14.0 : min(_2454, 14.0)));
        uvec4 _2462 = texelFetch(g_lightClusterGridBuffer, int(((_2457 << 2u) + (_2443 << 6u)) >> 2u));
        uint _2463 = _2462.x;
        uint _2464 = _2431.z;
        float _2593;
        float _2595;
        float _2597;
        float _2599;
        float _2601;
        float _2603;
        if (((((1u << ((_2464 >> 4u) & 15u)) + 4294967295u) & _2463) == 0u) || ((_2464 & 240u) == 0u))
        {
            _2593 = 0.0;
            _2595 = 0.0;
            _2597 = 0.0;
            _2599 = 0.0;
            _2601 = 0.0;
            _2603 = 0.0;
        }
        else
        {
            float _2594;
            float _2596;
            float _2598;
            float _2600;
            float _2602;
            float _2604;
            float _2746 = 0.0;
            float _2747 = 0.0;
            float _2748 = 0.0;
            float _2749 = 0.0;
            float _2750 = 0.0;
            float _2751 = 0.0;
            uint _2752 = 0u;
            uint _2761;
            bool _2762;
            for (;;)
            {
                _2761 = texelFetch(g_lightClassification, int((((_2457 << 5u) + (_2443 << 9u)) + (_2752 << 2u)) >> 2u)).x;
                _2762 = _2761 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2762)
                {
                    frontier_phi_61_pred = _2746;
                    frontier_phi_61_pred_1 = _2751;
                    frontier_phi_61_pred_2 = _2750;
                    frontier_phi_61_pred_3 = _2749;
                    frontier_phi_61_pred_4 = _2748;
                    frontier_phi_61_pred_5 = _2747;
                }
                else
                {
                    float _2870;
                    float _2871;
                    float _2872;
                    float _2873;
                    float _2874;
                    float _2875;
                    uint _2876;
                    _2870 = _2746;
                    _2871 = _2747;
                    _2872 = _2748;
                    _2873 = _2749;
                    _2874 = _2750;
                    _2875 = _2751;
                    _2876 = _2761;
                    float _2802;
                    float _2803;
                    float _2804;
                    float _2805;
                    float _2806;
                    float _2807;
                    for (;;)
                    {
                        uint _2880 = uint(findLSB(_2876)) + (_2752 << 5u);
                        uint _2877 = (_2876 + 4294967295u) & _2876;
                        uint _2882 = _2880 * 48u;
                        vec4 _2896 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2882)).x, texelFetch(g_PointLightRenderingBuffer, int(_2882 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2882 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2882 + 3u)).x));
                        uint _2902 = (_2880 * 48u) + 4u;
                        vec4 _2915 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2902)).x, texelFetch(g_PointLightRenderingBuffer, int(_2902 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2902 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2902 + 3u)).x));
                        uint _2921 = (_2880 * 48u) + 8u;
                        vec3 _2932 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2921)).x, texelFetch(g_PointLightRenderingBuffer, int(_2921 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2921 + 2u)).x));
                        float _2936 = _2896.x - _2417;
                        float _2937 = _2896.y - _2418;
                        float _2938 = _2896.z - _2419;
                        float _2939 = dot(vec3(_2936, _2937, _2938), vec3(_2936, _2937, _2938));
                        float _2942 = inversesqrt(_2939);
                        float _2943 = _2942 * _2936;
                        float _2944 = _2942 * _2937;
                        float _2945 = _2942 * _2938;
                        float _2946 = dot(vec3(_721, _724, _727), vec3(_2943, _2944, _2945));
                        float _2951 = 1.0 - (_2939 * _2896.w);
                        float _4253 = isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : max(_2951, 0.0));
                        float _2952 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
                        float _2953 = sqrt(_2939) * _2915.w;
                        float _2956 = 1.39999997615814208984375 / (_2953 + 1.39999997615814208984375);
                        float _2957 = _2956 * _2956;
                        float _2960 = ((1.0 - _2957) * _2946) + _2957;
                        float _2963 = _2953 * _2953;
                        float _2967 = ((isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0))) * _2952) / ((_2963 * 0.699999988079071044921875) + 1.0);
                        float _2971 = (-0.0) - _2417;
                        float _2972 = (-0.0) - _2418;
                        float _2973 = (-0.0) - _2419;
                        float _2977 = inversesqrt(dot(vec3(_2971, _2972, _2973), vec3(_2971, _2972, _2973)));
                        float _2978 = _2977 * _2971;
                        float _2979 = _2977 * _2972;
                        float _2980 = _2977 * _2973;
                        float _2988 = exp2(log2(1.0 / ((_2963 * 3.5) + 5.0)) * 0.25);
                        float _2989 = 1.0 - _781;
                        float _2996 = sqrt(1.0 - ((1.0 - (_2989 * _2989)) * (1.0 - (_2988 * _2988))));
                        float _2997 = _2996 * _2996;
                        float _2998 = _2997 * _2997;
                        float _2999 = _2978 + _2943;
                        float _3000 = _2979 + _2944;
                        float _3001 = _2980 + _2945;
                        float _3005 = inversesqrt(dot(vec3(_2999, _3000, _3001), vec3(_2999, _3000, _3001)));
                        float _3009 = dot(vec3(_721, _724, _727), vec3(_2978, _2979, _2980));
                        float _4269 = isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0));
                        float _3012 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
                        float _3013 = dot(vec3(_721, _724, _727), vec3(_3005 * _2999, _3005 * _3000, _3005 * _3001));
                        float _4280 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0));
                        float _3016 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
                        float _3020 = ((_3016 * _3016) * (_2998 + (-1.0))) + 1.0;
                        float _3021 = _2956 * _2997;
                        float _3022 = _3021 * _3021;
                        float _3025 = ((1.0 - _3022) * _2946) + _3022;
                        float _4291 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0));
                        float _3026 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
                        float _3027 = 1.0 - _2997;
                        float _3037 = (0.5 / (((_3026 * ((_3012 * _3027) + _2997)) + 9.9999999392252902907785028219223e-09) + (((_3026 * _3027) + _2997) * _3012))) * _3026;
                        float _4302 = isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0));
                        float _3048 = (((_2998 * 3.1415927410125732421875) * (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0)))) / ((_3020 * _3020) * ((_2963 * 2.1991131305694580078125) + 3.141590118408203125))) * _2952;
                        _2805 = (_2967 * _2915.x) + _2873;
                        _2806 = (_2967 * _2915.y) + _2874;
                        _2807 = (_2967 * _2915.z) + _2875;
                        _2802 = (_3048 * _2932.x) + _2870;
                        _2803 = (_3048 * _2932.y) + _2871;
                        _2804 = (_3048 * _2932.z) + _2872;
                        if (_2877 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2870 = _2802;
                            _2871 = _2803;
                            _2872 = _2804;
                            _2873 = _2805;
                            _2874 = _2806;
                            _2875 = _2807;
                            _2876 = _2877;
                        }
                    }
                    frontier_phi_61_pred = _2802;
                    frontier_phi_61_pred_1 = _2807;
                    frontier_phi_61_pred_2 = _2806;
                    frontier_phi_61_pred_3 = _2805;
                    frontier_phi_61_pred_4 = _2804;
                    frontier_phi_61_pred_5 = _2803;
                }
                _2594 = frontier_phi_61_pred;
                _2604 = frontier_phi_61_pred_1;
                _2602 = frontier_phi_61_pred_2;
                _2600 = frontier_phi_61_pred_3;
                _2598 = frontier_phi_61_pred_4;
                _2596 = frontier_phi_61_pred_5;
                uint _2753 = _2752 + 1u;
                if (_2753 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2746 = _2594;
                    _2747 = _2596;
                    _2748 = _2598;
                    _2749 = _2600;
                    _2750 = _2602;
                    _2751 = _2604;
                    _2752 = _2753;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2593 = _2594;
            _2595 = _2596;
            _2597 = _2598;
            _2599 = _2600;
            _2601 = _2602;
            _2603 = _2604;
        }
        uvec4 _2607 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2608 = _2607.z;
        uint _2610 = (_2608 >> 8u) & 15u;
        float _2714;
        float _2716;
        float _2718;
        float _2720;
        float _2722;
        float _2724;
        if (((4294967295u << _2610) & _2463) == 0u)
        {
            _2714 = _2593;
            _2716 = _2595;
            _2718 = _2597;
            _2720 = _2599;
            _2722 = _2601;
            _2724 = _2603;
        }
        else
        {
            float _2739 = inversesqrt(dot(vec3(_2417, _2418, _2419), vec3(_2417, _2418, _2419)));
            float _2740 = _2739 * _2417;
            float _2741 = _2739 * _2418;
            float _2742 = _2739 * _2419;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2610 < ((_2608 >> 12u) & 15u))
            {
                float _2715;
                float _2717;
                float _2719;
                float _2721;
                float _2723;
                float _2725;
                float _2853 = _2593;
                float _2854 = _2595;
                float _2855 = _2597;
                float _2856 = _2599;
                float _2857 = _2601;
                float _2858 = _2603;
                uint _2859 = _2610;
                uint _2868;
                bool _2869;
                for (;;)
                {
                    _2868 = texelFetch(g_lightClassification, int((((_2457 << 5u) + (_2443 << 9u)) + (_2859 << 2u)) >> 2u)).x;
                    _2869 = _2868 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2869)
                    {
                        frontier_phi_67_pred = _2856;
                        frontier_phi_67_pred_1 = _2857;
                        frontier_phi_67_pred_2 = _2858;
                        frontier_phi_67_pred_3 = _2855;
                        frontier_phi_67_pred_4 = _2854;
                        frontier_phi_67_pred_5 = _2853;
                    }
                    else
                    {
                        float _3053;
                        float _3054;
                        float _3055;
                        float _3056;
                        float _3057;
                        float _3058;
                        float _3347;
                        float _3348;
                        float _3349;
                        float _3350;
                        float _3351;
                        float _3352;
                        float _3066 = _2853;
                        float _3067 = _2854;
                        float _3068 = _2855;
                        float _3069 = _2856;
                        float _3070 = _2857;
                        float _3071 = _2858;
                        uint _3072 = _2868;
                        uint _3073;
                        vec4 _3098;
                        float _3099;
                        vec4 _3114;
                        vec3 _3126;
                        vec4 _3141;
                        vec4 _3156;
                        float _3203;
                        bool _3204;
                        for (;;)
                        {
                            uint _3083 = ((_2859 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3072));
                            _3073 = (_3072 + 4294967295u) & _3072;
                            uint _3085 = _3083 * 40u;
                            _3098 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3085)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 3u)).x));
                            _3099 = _3098.w;
                            uint _3101 = (_3083 * 40u) + 4u;
                            _3114 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3101)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 3u)).x));
                            uint _3116 = (_3083 * 40u) + 8u;
                            _3126 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3116)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 2u)).x));
                            uint _3128 = (_3083 * 40u) + 16u;
                            _3141 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3128)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 3u)).x));
                            uint _3143 = (_3083 * 40u) + 20u;
                            _3156 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3143)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 3u)).x));
                            uint _3159 = (_3083 * 40u) + 24u;
                            vec4 _3172 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3159)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 3u)).x));
                            uint _3178 = (_3083 * 40u) + 28u;
                            vec4 _3191 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3178)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 3u)).x));
                            _3203 = fma(_2419, _3191.z, fma(_2418, _3191.y, _3191.x * _2417)) + _3191.w;
                            _3204 = !((fma(_2419, _3172.z, fma(_2418, _3172.y, _3172.x * _2417)) + _3172.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3204)
                            {
                                float _3231 = _3098.x - _2417;
                                float _3232 = _3098.y - _2418;
                                float _3233 = _3098.z - _2419;
                                float _3234 = dot(vec3(_3231, _3232, _3233), vec3(_3231, _3232, _3233));
                                float _3237 = inversesqrt(_3234);
                                float _3238 = _3237 * _3231;
                                float _3239 = _3237 * _3232;
                                float _3240 = _3237 * _3233;
                                float _3244 = 1.0 - (_3234 / (_3099 * _3099));
                                float _4313 = isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0));
                                float _3245 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
                                float _3249 = sqrt(_3234) * _3114.w;
                                float _3251 = 1.39999997615814208984375 / (_3249 + 1.39999997615814208984375);
                                float _3252 = _3251 * _3251;
                                float _3255 = ((1.0 - _3252) * dot(vec3(_3238, _3239, _3240), vec3(_721, _724, _727))) + _3252;
                                float _3258 = _3249 * _3249;
                                float _3262 = (fma(_2419, _3141.z, fma(_2418, _3141.y, _3141.x * _2417)) + _3141.w) / _3203;
                                float _3263 = (fma(_2419, _3156.z, fma(_2418, _3156.y, _3156.x * _2417)) + _3156.w) / _3203;
                                float _3267 = 1.0 - dot(vec2(_3262, _3263), vec2(_3262, _3263));
                                float _4329 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0));
                                float _3268 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
                                float _3269 = _3268 * (((isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : max(_3255, 0.0))) * _3245) / ((_3258 * 0.699999988079071044921875) + 1.0));
                                float _3281 = exp2(log2(1.0 / ((_3258 * 3.5) + 5.0)) * 0.25);
                                float _3282 = 1.0 - _781;
                                float _3289 = sqrt(1.0 - ((1.0 - (_3282 * _3282)) * (1.0 - (_3281 * _3281))));
                                float _3290 = _3289 * _3289;
                                float _3291 = _3290 * _3290;
                                float _3292 = _3238 - _2740;
                                float _3293 = _3239 - _2741;
                                float _3294 = _3240 - _2742;
                                float _3298 = inversesqrt(dot(vec3(_3292, _3293, _3294), vec3(_3292, _3293, _3294)));
                                float _3302 = dot(vec3(_721, _724, _727), vec3((-0.0) - _2740, (-0.0) - _2741, (-0.0) - _2742));
                                float _4340 = isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0));
                                float _3305 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
                                float _3306 = dot(vec3(_721, _724, _727), vec3(_3298 * _3292, _3298 * _3293, _3298 * _3294));
                                float _4351 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
                                float _3309 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
                                float _3313 = ((_3309 * _3309) * (_3291 + (-1.0))) + 1.0;
                                float _3314 = _3251 * _3290;
                                float _3315 = _3314 * _3314;
                                float _3321 = ((1.0 - _3315) * dot(vec3(_721, _724, _727), vec3(_3238, _3239, _3240))) + _3315;
                                float _4362 = isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : max(_3321, 0.0));
                                float _3322 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
                                float _3323 = 1.0 - _3290;
                                float _3333 = (0.5 / (((_3322 * ((_3305 * _3323) + _3290)) + 9.9999999392252902907785028219223e-09) + (((_3322 * _3323) + _3290) * _3305))) * _3322;
                                float _4373 = isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : max(_3333, 0.0));
                                float _3343 = (_3268 * _3245) * (((_3291 * 3.1415927410125732421875) * (isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0)))) / ((_3313 * _3313) * ((_3258 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3343 * _3126.x;
                                frontier_phi_73_pred_1 = _3343 * _3126.y;
                                frontier_phi_73_pred_2 = _3269 * _3114.z;
                                frontier_phi_73_pred_3 = _3269 * _3114.y;
                                frontier_phi_73_pred_4 = _3269 * _3114.x;
                                frontier_phi_73_pred_5 = _3343 * _3126.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3347 = frontier_phi_73_pred;
                            _3348 = frontier_phi_73_pred_1;
                            _3352 = frontier_phi_73_pred_2;
                            _3351 = frontier_phi_73_pred_3;
                            _3350 = frontier_phi_73_pred_4;
                            _3349 = frontier_phi_73_pred_5;
                            _3056 = _3350 + _3069;
                            _3057 = _3351 + _3070;
                            _3058 = _3352 + _3071;
                            _3053 = _3347 + _3066;
                            _3054 = _3348 + _3067;
                            _3055 = _3349 + _3068;
                            if (_3073 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3066 = _3053;
                                _3067 = _3054;
                                _3068 = _3055;
                                _3069 = _3056;
                                _3070 = _3057;
                                _3071 = _3058;
                                _3072 = _3073;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3056;
                        frontier_phi_67_pred_1 = _3057;
                        frontier_phi_67_pred_2 = _3058;
                        frontier_phi_67_pred_3 = _3055;
                        frontier_phi_67_pred_4 = _3054;
                        frontier_phi_67_pred_5 = _3053;
                    }
                    _2721 = frontier_phi_67_pred;
                    _2723 = frontier_phi_67_pred_1;
                    _2725 = frontier_phi_67_pred_2;
                    _2719 = frontier_phi_67_pred_3;
                    _2717 = frontier_phi_67_pred_4;
                    _2715 = frontier_phi_67_pred_5;
                    uint _2860 = _2859 + 1u;
                    if (_2860 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2853 = _2715;
                        _2854 = _2717;
                        _2855 = _2719;
                        _2856 = _2721;
                        _2857 = _2723;
                        _2858 = _2725;
                        _2859 = _2860;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2723;
                frontier_phi_55_56_ladder_1 = _2725;
                frontier_phi_55_56_ladder_2 = _2721;
                frontier_phi_55_56_ladder_3 = _2719;
                frontier_phi_55_56_ladder_4 = _2717;
                frontier_phi_55_56_ladder_5 = _2715;
            }
            else
            {
                frontier_phi_55_56_ladder = _2601;
                frontier_phi_55_56_ladder_1 = _2603;
                frontier_phi_55_56_ladder_2 = _2599;
                frontier_phi_55_56_ladder_3 = _2597;
                frontier_phi_55_56_ladder_4 = _2595;
                frontier_phi_55_56_ladder_5 = _2593;
            }
            _2714 = frontier_phi_55_56_ladder_5;
            _2716 = frontier_phi_55_56_ladder_4;
            _2718 = frontier_phi_55_56_ladder_3;
            _2720 = frontier_phi_55_56_ladder_2;
            _2722 = frontier_phi_55_56_ladder;
            _2724 = frontier_phi_55_56_ladder_1;
        }
        float _2729 = isnan(1.0) ? _765 : (isnan(_765) ? 1.0 : min(_765, 1.0));
        _2476 = (_2729 * _2720) + _1931;
        _2478 = (_2729 * _2722) + _1933;
        _2480 = (_2729 * _2724) + _1935;
        _2482 = ((_2714 * 0.039999999105930328369140625) * _2729) + _2261;
        _2484 = ((_2716 * 0.039999999105930328369140625) * _2729) + _2263;
        _2486 = ((_2718 * 0.039999999105930328369140625) * _2729) + _2265;
    }
    else
    {
        _2476 = _1931;
        _2478 = _1933;
        _2480 = _1935;
        _2482 = _2261;
        _2484 = _2263;
        _2486 = _2265;
    }
    uint _2492 = _741 + uint(cbMatDynParam._m0[0u].w);
    float _2498 = cbInstanceData._m0[_2492].x * (_531 - (_547 * _531));
    float _2499 = cbInstanceData._m0[_2492].y * (_532 - (_547 * _532));
    float _2500 = cbInstanceData._m0[_2492].z * (_533 - (_547 * _533));
    float _4389 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _4400 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _4411 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _2517 = (((isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0))) * (_2476 + ((isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0))) * _765))) + ((_2482 + ((isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0))) * _1571)) * cbPerFrame._m0[3u].x)) + _2498;
    float _2519 = (_2499 + ((_2484 + ((isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0))) * _1571)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0))) * (_2478 + ((isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0))) * _765)));
    float _2521 = (_2500 + ((_2486 + ((isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0))) * _1571)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0))) * (_2480 + ((isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0))) * _765)));
    float _4437 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2534 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
    uint _2535 = _740 + 6u;
    float _2543 = _699 / cbSceneParam._m0[86u].x;
    float _2544 = _700 / cbSceneParam._m0[86u].y;
    vec4 _2558 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2543, _2544, (log2((isnan(cbSceneParam._m0[77u].w) ? _634 : (isnan(_634) ? cbSceneParam._m0[77u].w : min(_634, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2560 = _2558.x;
    float _2561 = _2558.y;
    float _2562 = _2558.z;
    float _2563 = _2558.w;
    float _2655;
    float _2657;
    float _2659;
    float _2661;
    if (_634 > cbSceneParam._m0[78u].w)
    {
        float _2618 = isnan(_634) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _634 : min(cbSceneParam._m0[80u].w, _634));
        float _2619 = _2618 / _634;
        float _2630 = _2619 * _684;
        float _2631 = _685 * _2619;
        float _2632 = (-0.0) - _2631;
        float _2633 = _2619 * _686;
        float _2635 = (cbSceneParam._m0[77u].w * _2632) / _2618;
        float _2636 = _2635 + cbSceneParam._m0[79u].w;
        float _2637 = cbSceneParam._m0[79u].w - _2631;
        float _2643 = sqrt(((_2630 * _2630) + (_2631 * _2631)) + (_2633 * _2633));
        float _2646 = (1.0 - (cbSceneParam._m0[77u].w / _2618)) * _2643;
        float _2651 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2653 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2815;
        if (abs((_2632 - _2635) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2815 = ((((_2636 > 0.0) ? exp2(_2651 * _2636) : (2.0 - exp2(_2653 * _2636))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2646;
        }
        else
        {
            float _2775 = 1.0 / cbSceneParam._m0[80u].x;
            float _2776 = isnan(_2637) ? _2636 : (isnan(_2636) ? _2637 : max(_2636, _2637));
            float _2777 = isnan(_2637) ? _2636 : (isnan(_2636) ? _2637 : min(_2636, _2637));
            float _2786 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : min(_2776, 0.0));
            float _2787 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : min(_2777, 0.0));
            _2815 = ((abs(_2643 / _2632) * cbSceneParam._m0[80u].y) * ((((_2786 - _2787) * 2.0) - ((exp2(_2651 * (isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0)))) - exp2(_2651 * (isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0))))) * _2775)) - ((exp2(_2653 * _2786) - exp2(_2653 * _2787)) * _2775))) + (_2646 * cbSceneParam._m0[80u].z);
        }
        vec4 _2817 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2543, _2544, 1.0), 0.0);
        float _2826 = exp2((_2815 * (-1.44269502162933349609375)) * (1.0 - _2817.w));
        float _2827 = log2(_2826);
        float _2843 = log2(_2563);
        _2655 = (exp2(_2843 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2827 * cbSceneParam._m0[78u].x)) * _2817.x) / cbSceneParam._m0[78u].x)) + _2560;
        _2657 = (exp2(_2843 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2827 * cbSceneParam._m0[78u].y)) * _2817.y) / cbSceneParam._m0[78u].y)) + _2561;
        _2659 = (exp2(_2843 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2827 * cbSceneParam._m0[78u].z)) * _2817.z) / cbSceneParam._m0[78u].z)) + _2562;
        _2661 = _2826 * _2563;
    }
    else
    {
        _2655 = _2560;
        _2657 = _2561;
        _2659 = _2562;
        _2661 = _2563;
    }
    float _2673 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2674 = _2673 == 3.0;
    float _2675 = log2(_2661);
    float _2679 = exp2(_2675 * cbSceneParam._m0[78u].x);
    float _2680 = exp2(_2675 * cbSceneParam._m0[78u].y);
    float _2681 = exp2(_2675 * cbSceneParam._m0[78u].z);
    float _2682 = _2679 * (isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0)));
    float _2683 = _2680 * (isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0)));
    float _2684 = _2681 * (isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0)));
    float _2693 = (_2673 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2693 * (_2674 ? _2682 : (_2682 + (cbSceneParam._m0[72u].w * _2655)));
    SV_Target.y = _2693 * (_2674 ? _2683 : (_2683 + (cbSceneParam._m0[72u].w * _2657)));
    SV_Target.z = _2693 * (_2674 ? _2684 : (_2684 + (cbSceneParam._m0[72u].w * _2659)));
    SV_Target.w = cbInstanceData._m0[_2535].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2498) * _2534) * _2679) * _2693;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2499) * _2534) * _2680) * _2693;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2500) * _2534) * _2681) * _2693;
    SV_Target_1.w = cbInstanceData._m0[_2535].w;
}


