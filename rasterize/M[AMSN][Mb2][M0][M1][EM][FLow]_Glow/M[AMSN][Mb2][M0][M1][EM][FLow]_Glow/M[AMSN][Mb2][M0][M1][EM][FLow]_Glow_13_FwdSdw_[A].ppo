#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1184;
float _3866;
float _3867;
float _3868;
float _3869;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _251 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _257 = _251.x * cbMtdParam._m0[9u].x;
    float _258 = _251.y * cbMtdParam._m0[9u].y;
    float _259 = _251.z * cbMtdParam._m0[9u].z;
    float _297 = TEXCOORD_9.x - ((cbMtdParam._m0[16u].y * (1.0 - TEXCOORD_9.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w)).x + 0.00999999977648258209228515625));
    float _299 = _297 * (cbMtdParam._m0[16u].z + 1.0);
    float _3878 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _300 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
    float _308 = ((((cbMtdParam._m0[12u].x - _257) * TEXCOORD_9.x) * cbMtdParam._m0[16u].x) * _300) + _257;
    float _309 = ((((cbMtdParam._m0[12u].y - _258) * TEXCOORD_9.y) * cbMtdParam._m0[16u].x) * _300) + _258;
    float _310 = (((cbMtdParam._m0[16u].x * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _259)) * _300) + _259;
    vec4 _322 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _326 = _322.z;
    float _330 = (_322.x * 2.0) + (-1.0);
    float _332 = (_322.y * 2.0) + (-1.0);
    float _333 = dot(vec2(_330, _332), vec2(_330, _332));
    float _3889 = isnan(0.0) ? _333 : (isnan(_333) ? 0.0 : max(_333, 0.0));
    float _338 = sqrt(1.0 - (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))));
    float _344 = _297 * (cbMtdParam._m0[16u].y + 1.0);
    float _3900 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    float _348 = ((cbMtdParam._m0[15u].y - _326) * (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0)))) + _326;
    float _361 = (cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _362 = (cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _389 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * ((cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * ((cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[10u].w));
    float _394 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[15u].w;
    float _401 = ((_389.y * 0.5) + (-0.25)) * cbMtdParam._m0[15u].z;
    float _403 = (-0.0) - (cbMtdParam._m0[15u].z * ((_389.x * 0.5) + (-0.25)));
    float _405 = fract(_394);
    float _407 = fract(_394 + 0.5);
    float _408 = _405 * _403;
    float _409 = _401 * _405;
    float _412 = _407 * _403;
    float _413 = _401 * _407;
    float _418 = abs((_405 * 2.0) + (-1.0));
    vec4 _434 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_408 + _361) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_409 + _362) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _436 = _434.x;
    float _437 = _434.y;
    float _438 = _434.z;
    vec4 _439 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_412 + _361) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_413 + _362) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _466 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _467 = (cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _480 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_408 + _466) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_409 + _467) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _482 = _480.x;
    float _483 = _480.y;
    float _484 = _480.z;
    vec4 _485 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_412 + _466) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_413 + _467) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _537 = (TEXCOORD_6.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_6.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_5, SS_WrapLinear), vec2((((cbMtdParam._m0[18u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((cbMtdParam._m0[18u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].x + 1.0);
    float _3911 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _538 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
    float _539 = _538 * (((((_485.x - _482) * _418) + _482) * cbMtdParam._m0[13u].x) + ((((_439.x - _436) * _418) + _436) * cbMtdParam._m0[11u].x));
    float _540 = _538 * (((((_485.y - _483) * _418) + _483) * cbMtdParam._m0[13u].y) + ((((_439.y - _437) * _418) + _437) * cbMtdParam._m0[11u].y));
    float _541 = _538 * (((((_485.z - _484) * _418) + _484) * cbMtdParam._m0[13u].z) + ((((_439.z - _438) * _418) + _438) * cbMtdParam._m0[11u].z));
    vec4 _553 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[9u].w));
    float _555 = _553.x;
    vec4 _580 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[16u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, (((cbMtdParam._m0[17u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w));
    float _586 = (_580.x * 2.0) + (-1.0);
    float _587 = (_580.y * 2.0) + (-1.0);
    float _588 = dot(vec2(_586, _587), vec2(_586, _587));
    float _3922 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _604 = (_300 * (((cbMtdParam._m0[14u].z * _330) - _330) + _586)) + _330;
    float _605 = (_300 * (((cbMtdParam._m0[14u].z * _332) - _332) + _587)) + _332;
    float _606 = (_300 * (sqrt(1.0 - (isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0)))) - _338)) + _338;
    float _609 = fma(_606, _222 * NORMAL.x, fma(_605, _229 * TANGENT.x, (_215 * _207) * _604));
    float _612 = fma(_606, _222 * NORMAL.y, fma(_605, _229 * TANGENT.y, (_215 * _208) * _604));
    float _615 = fma(_606, _222 * NORMAL.z, fma(_605, _229 * TANGENT.z, (_215 * _209) * _604));
    float _619 = inversesqrt(dot(vec3(_609, _612, _615), vec3(_609, _612, _615)));
    float _620 = _619 * _609;
    float _621 = _619 * _612;
    float _622 = _619 * _615;
    float _3933 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    float _623 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
    float _3944 = isnan(0.0) ? _308 : (isnan(_308) ? 0.0 : max(_308, 0.0));
    float _3955 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _3966 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
    float _642 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _682 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _692 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _682);
    float _693 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _682);
    float _694 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _682);
    float _698 = inversesqrt(dot(vec3(_692, _693, _694), vec3(_692, _693, _694)));
    float _699 = _692 * _698;
    float _700 = _693 * _698;
    float _701 = _694 * _698;
    vec4 _706 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _708 = _706.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _865 = sqrt(((_692 * _692) + (_693 * _693)) + (_694 * _694));
        float _871 = (cbMatDynParam._m0[5u].x * _865) + cbMatDynParam._m0[5u].y;
        float _3977 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
        float _872 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _876 = (cbMatDynParam._m0[5u].z * _865) + cbMatDynParam._m0[5u].w;
        float _3988 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))) - _872)) + _872) < ((_708 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _720 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _721 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _741 = fma(_622, cbSceneParam._m0[5u].z, fma(_621, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _620));
    float _744 = fma(_622, cbSceneParam._m0[6u].z, fma(_621, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _620));
    float _747 = fma(_622, cbSceneParam._m0[7u].z, fma(_621, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _620));
    uint _760 = uint(roundEven(NORMAL.w)) * 13u;
    uint _761 = _760 + 9u;
    uint _762 = _761 + uint(cbMatDynParam._m0[0u].w);
    float _768 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0)))) * cbInstanceData._m0[_762].x;
    float _769 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0)))) * cbInstanceData._m0[_762].y;
    float _770 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0)))) * cbInstanceData._m0[_762].z;
    float _3999 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _771 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
    float _4010 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _772 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
    float _4021 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _773 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
    vec4 _782 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _720, cbSceneParam._m0[86u].y * _721));
    float _785 = _782.x * TEXCOORD_3.w;
    float _786 = dot(vec3(_620, _621, _622), vec3(_699, _700, _701));
    float _789 = _786 * 2.0;
    float _793 = (_789 * _620) - _699;
    float _794 = (_789 * _621) - _700;
    float _795 = (_789 * _622) - _701;
    float _799 = abs(dot(vec3(_699, _700, _701), vec3(_620, _621, _622)));
    float _4032 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _801 = sqrt(_623);
    float _814 = exp2((_801 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_801 * 3.0));
    float _846 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _850 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _854 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1183;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _909 = fma(_854, cbModelParam._m0[26u].z, fma(_850, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _846));
        float _913 = fma(_854, cbModelParam._m0[27u].z, fma(_850, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _846));
        float _917 = fma(_854, cbModelParam._m0[28u].z, fma(_850, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _846));
        float _941 = _846 + _620;
        float _942 = _850 + _621;
        float _943 = _854 + _622;
        float _953 = fma(_943, cbModelParam._m0[26u].z, fma(_942, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _941)) - _909;
        float _954 = fma(_943, cbModelParam._m0[27u].z, fma(_942, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _941)) - _913;
        float _955 = fma(_943, cbModelParam._m0[28u].z, fma(_942, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _941)) - _917;
        float _959 = inversesqrt(dot(vec3(_953, _954, _955), vec3(_953, _954, _955)));
        float _972 = ((_959 * _953) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_909 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _973 = ((_959 * _954) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_913 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _974 = ((_959 * _955) / cbModelParam._m0[34u].z) + ((((((_917 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _977 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_972, _973, _974), 0.0);
        vec4 _984 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_972, _973, _974), 0.0);
        vec4 _991 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_972, _973, _974), 0.0);
        vec4 _998 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_972, _973, _974), 0.0);
        float _1011 = exp2((_977.w + (-0.5)) * 20.0) * 2.0;
        float _1012 = _1011 * (_977.x + (-0.5));
        float _1013 = _1011 * (_977.y + (-0.5));
        float _1014 = _1011 * (_977.z + (-0.5));
        float _1021 = exp2((_984.w + (-0.5)) * 20.0) * 2.0;
        float _1022 = _1021 * (_984.x + (-0.5));
        float _1023 = _1021 * (_984.y + (-0.5));
        float _1024 = _1021 * (_984.z + (-0.5));
        float _1031 = exp2((_991.w + (-0.5)) * 20.0) * 2.0;
        float _1032 = _1031 * (_991.x + (-0.5));
        float _1033 = _1031 * (_991.y + (-0.5));
        float _1034 = _1031 * (_991.z + (-0.5));
        float _1041 = exp2((_998.w + (-0.5)) * 20.0) * 2.0;
        float _1042 = _1041 * (_998.x + (-0.5));
        float _1043 = _1041 * (_998.y + (-0.5));
        float _1044 = _1041 * (_998.z + (-0.5));
        float _1045 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1046 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1047 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1048 = _1012 * 0.5;
        float _1049 = _1022 * 0.5;
        float _1050 = _1032 * 0.5;
        float _1051 = dot(vec3(_1048, _1049, _1050), vec3(_1048, _1049, _1050));
        float _1056 = (_1051 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1051);
        float _1065 = (dot(vec3(_620, _621, _622), vec3(_1056 * _1048, _1056 * _1049, _1056 * _1050)) + 1.0) * 0.5;
        float _4058 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1075 = sqrt(((_1049 * _1049) + (_1048 * _1048)) + (_1050 * _1050)) / (_1045 + 9.9999997473787516355514526367188e-06);
        float _4069 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _1077 = _1076 * 2.0;
        float _1081 = (1.0 - _1076) / (_1076 + 1.0);
        float _4080 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1082 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _1091 = ((((1.0 - _1082) * (_1077 + 2.0)) * exp2(log2(isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * (_1077 + 1.0))) + _1082) * _1045;
        float _1092 = _1013 * 0.5;
        float _1093 = _1023 * 0.5;
        float _1094 = _1033 * 0.5;
        float _1095 = dot(vec3(_1092, _1093, _1094), vec3(_1092, _1093, _1094));
        float _1100 = (_1095 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1095);
        float _1108 = (dot(vec3(_620, _621, _622), vec3(_1100 * _1092, _1100 * _1093, _1100 * _1094)) + 1.0) * 0.5;
        float _4091 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1117 = sqrt(((_1093 * _1093) + (_1092 * _1092)) + (_1094 * _1094)) / (_1046 + 9.9999997473787516355514526367188e-06);
        float _4102 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1118 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _1119 = _1118 * 2.0;
        float _1123 = (1.0 - _1118) / (_1118 + 1.0);
        float _4113 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1124 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _1133 = ((((1.0 - _1124) * (_1119 + 2.0)) * exp2(log2(isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * (_1119 + 1.0))) + _1124) * _1046;
        float _1134 = _1014 * 0.5;
        float _1135 = _1024 * 0.5;
        float _1136 = _1034 * 0.5;
        float _1137 = dot(vec3(_1134, _1135, _1136), vec3(_1134, _1135, _1136));
        float _1142 = (_1137 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1137);
        float _1150 = (dot(vec3(_620, _621, _622), vec3(_1142 * _1134, _1142 * _1135, _1142 * _1136)) + 1.0) * 0.5;
        float _4124 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1159 = sqrt(((_1135 * _1135) + (_1134 * _1134)) + (_1136 * _1136)) / (_1047 + 9.9999997473787516355514526367188e-06);
        float _4135 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1160 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _1161 = _1160 * 2.0;
        float _1165 = (1.0 - _1160) / (_1160 + 1.0);
        float _4146 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1166 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _1175 = ((((1.0 - _1166) * (_1161 + 2.0)) * exp2(log2(isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * (_1161 + 1.0))) + _1166) * _1047;
        _1183 = _1014;
        _1185 = _1013;
        _1186 = _1012;
        _1187 = _1024;
        _1188 = _1023;
        _1189 = _1022;
        _1190 = _1034;
        _1191 = _1033;
        _1192 = _1032;
        _1193 = _1047;
        _1194 = _1046;
        _1195 = _1045;
        _1196 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0)));
        _1197 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0)));
        _1198 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0)));
    }
    else
    {
        _1183 = _1184;
        _1185 = _1184;
        _1186 = _1184;
        _1187 = _1184;
        _1188 = _1184;
        _1189 = _1184;
        _1190 = _1184;
        _1191 = _1184;
        _1192 = _1184;
        _1193 = _1184;
        _1194 = _1184;
        _1195 = _1184;
        _1196 = 0.0;
        _1197 = 0.0;
        _1198 = 0.0;
    }
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1227 = fma(_854, cbModelParam._m0[30u].z, fma(_850, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _846));
        float _1231 = fma(_854, cbModelParam._m0[31u].z, fma(_850, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _846));
        float _1235 = fma(_854, cbModelParam._m0[32u].z, fma(_850, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _846));
        float _1258 = _846 + _620;
        float _1259 = _850 + _621;
        float _1260 = _854 + _622;
        float _1270 = fma(_1260, cbModelParam._m0[30u].z, fma(_1259, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1258)) - _1227;
        float _1271 = fma(_1260, cbModelParam._m0[31u].z, fma(_1259, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1258)) - _1231;
        float _1272 = fma(_1260, cbModelParam._m0[32u].z, fma(_1259, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1258)) - _1235;
        float _1276 = inversesqrt(dot(vec3(_1270, _1271, _1272), vec3(_1270, _1271, _1272)));
        float _1289 = ((_1276 * _1270) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1227 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1290 = ((_1276 * _1271) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1231 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1291 = ((_1276 * _1272) / cbModelParam._m0[35u].z) + ((((((_1235 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1293 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1289, _1290, _1291), 0.0);
        vec4 _1300 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1289, _1290, _1291), 0.0);
        vec4 _1307 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1289, _1290, _1291), 0.0);
        vec4 _1314 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1289, _1290, _1291), 0.0);
        float _1326 = exp2((_1293.w + (-0.5)) * 20.0) * 2.0;
        float _1327 = _1326 * (_1293.x + (-0.5));
        float _1328 = _1326 * (_1293.y + (-0.5));
        float _1329 = _1326 * (_1293.z + (-0.5));
        float _1336 = exp2((_1300.w + (-0.5)) * 20.0) * 2.0;
        float _1337 = _1336 * (_1300.x + (-0.5));
        float _1338 = _1336 * (_1300.y + (-0.5));
        float _1339 = _1336 * (_1300.z + (-0.5));
        float _1346 = exp2((_1307.w + (-0.5)) * 20.0) * 2.0;
        float _1347 = _1346 * (_1307.x + (-0.5));
        float _1348 = _1346 * (_1307.y + (-0.5));
        float _1349 = _1346 * (_1307.z + (-0.5));
        float _1356 = exp2((_1314.w + (-0.5)) * 20.0) * 2.0;
        float _1357 = _1356 * (_1314.x + (-0.5));
        float _1358 = _1356 * (_1314.y + (-0.5));
        float _1359 = _1356 * (_1314.z + (-0.5));
        float _1360 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1361 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1362 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1363 = _1327 * 0.5;
        float _1364 = _1337 * 0.5;
        float _1365 = _1347 * 0.5;
        float _1366 = dot(vec3(_1363, _1364, _1365), vec3(_1363, _1364, _1365));
        float _1371 = (_1366 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1366);
        float _1379 = (dot(vec3(_620, _621, _622), vec3(_1371 * _1363, _1371 * _1364, _1371 * _1365)) + 1.0) * 0.5;
        float _4187 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1388 = sqrt(((_1364 * _1364) + (_1363 * _1363)) + (_1365 * _1365)) / (_1360 + 9.9999997473787516355514526367188e-06);
        float _4198 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1389 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _1390 = _1389 * 2.0;
        float _1394 = (1.0 - _1389) / (_1389 + 1.0);
        float _4209 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1395 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _1404 = ((((1.0 - _1395) * (_1390 + 2.0)) * exp2(log2(isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * (_1390 + 1.0))) + _1395) * _1360;
        float _1405 = _1328 * 0.5;
        float _1406 = _1338 * 0.5;
        float _1407 = _1348 * 0.5;
        float _1408 = dot(vec3(_1405, _1406, _1407), vec3(_1405, _1406, _1407));
        float _1413 = (_1408 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1408);
        float _1421 = (dot(vec3(_620, _621, _622), vec3(_1413 * _1405, _1413 * _1406, _1413 * _1407)) + 1.0) * 0.5;
        float _4220 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1430 = sqrt(((_1406 * _1406) + (_1405 * _1405)) + (_1407 * _1407)) / (_1361 + 9.9999997473787516355514526367188e-06);
        float _4231 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1431 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _1432 = _1431 * 2.0;
        float _1436 = (1.0 - _1431) / (_1431 + 1.0);
        float _4242 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1437 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
        float _1446 = ((((1.0 - _1437) * (_1432 + 2.0)) * exp2(log2(isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))) * (_1432 + 1.0))) + _1437) * _1361;
        float _1447 = _1329 * 0.5;
        float _1448 = _1339 * 0.5;
        float _1449 = _1349 * 0.5;
        float _1450 = dot(vec3(_1447, _1448, _1449), vec3(_1447, _1448, _1449));
        float _1455 = (_1450 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1450);
        float _1463 = (dot(vec3(_620, _621, _622), vec3(_1455 * _1447, _1455 * _1448, _1455 * _1449)) + 1.0) * 0.5;
        float _4253 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1472 = sqrt(((_1448 * _1448) + (_1447 * _1447)) + (_1449 * _1449)) / (_1362 + 9.9999997473787516355514526367188e-06);
        float _4264 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1473 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _1474 = _1473 * 2.0;
        float _1478 = (1.0 - _1473) / (_1473 + 1.0);
        float _4275 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1479 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _1488 = ((((1.0 - _1479) * (_1474 + 2.0)) * exp2(log2(isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * (_1474 + 1.0))) + _1479) * _1362;
        _1496 = _1329;
        _1497 = _1328;
        _1498 = _1327;
        _1499 = _1339;
        _1500 = _1338;
        _1501 = _1337;
        _1502 = _1349;
        _1503 = _1348;
        _1504 = _1347;
        _1505 = _1362;
        _1506 = _1361;
        _1507 = _1360;
        _1508 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0)));
        _1509 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0)));
        _1510 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0)));
    }
    else
    {
        _1496 = _1184;
        _1497 = _1184;
        _1498 = _1184;
        _1499 = _1184;
        _1500 = _1184;
        _1501 = _1184;
        _1502 = _1184;
        _1503 = _1184;
        _1504 = _1184;
        _1505 = _1184;
        _1506 = _1184;
        _1507 = _1184;
        _1508 = 0.0;
        _1509 = 0.0;
        _1510 = 0.0;
    }
    float _1520 = (cbModelParam._m0[1u].x * (_1508 - _1196)) + _1196;
    float _1521 = (cbModelParam._m0[1u].x * (_1509 - _1197)) + _1197;
    float _1522 = (cbModelParam._m0[1u].x * (_1510 - _1198)) + _1198;
    float _1543 = fma(_1522, cbSceneParam._m0[89u].z, fma(_1521, cbSceneParam._m0[89u].y, _1520 * cbSceneParam._m0[89u].x));
    float _1546 = fma(_1522, cbSceneParam._m0[90u].z, fma(_1521, cbSceneParam._m0[90u].y, _1520 * cbSceneParam._m0[90u].x));
    float _1549 = fma(_1522, cbSceneParam._m0[91u].z, fma(_1521, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1520));
    float _1564 = _793 * 0.5;
    float _1565 = _794 * 0.5;
    float _1566 = _795 * 0.5;
    float _1567 = dot(vec4(_1564, _1565, _1566, 1.0), vec4(_1498, _1501, _1504, _1507));
    float _1570 = dot(vec4(_1564, _1565, _1566, 1.0), vec4(_1497, _1500, _1503, _1506));
    float _1573 = dot(vec4(_1564, _1565, _1566, 1.0), vec4(_1496, _1499, _1502, _1505));
    float _1607;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1580 = dot(vec4(_1564, _1565, _1566, 1.0), vec4(_1183, _1187, _1190, _1193));
        float _1584 = dot(vec4(_1564, _1565, _1566, 1.0), vec4(_1185, _1188, _1191, _1194));
        float _1588 = dot(vec4(_1564, _1565, _1566, 1.0), vec4(_1186, _1189, _1192, _1195));
        float _1595 = dot(vec4(cbModelParam._m0[39u]), vec4(_1564, _1565, _1566, 1.0));
        _1607 = dot(vec3(isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0)), isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0)), isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1595) ? 0.0 : (isnan(0.0) ? _1595 : max(0.0, _1595))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1607 = 1.0;
    }
    float _1618;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1609 = dot(vec4(cbModelParam._m0[40u]), vec4(_1564, _1565, _1566, 1.0));
        _1618 = dot(vec3(isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0)), isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0)), isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1609) ? 0.0 : (isnan(0.0) ? _1609 : max(0.0, _1609))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1618 = 1.0;
    }
    float _1622 = (_1618 * cbModelParam._m0[1u].x) + (_1607 * (1.0 - cbModelParam._m0[1u].x));
    float _1632 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _623);
    float _1633 = isnan(_1632) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1632 : min(cbModelParam._m0[25u].z, _1632));
    float _1713;
    float _1715;
    float _1717;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1680 = fma(_854, cbModelParam._m0[13u].z, fma(_850, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _846)) + cbModelParam._m0[13u].w;
        float _1684 = fma(_854, cbModelParam._m0[14u].z, fma(_850, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _846)) + cbModelParam._m0[14u].w;
        float _1688 = fma(_854, cbModelParam._m0[15u].z, fma(_850, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _846)) + cbModelParam._m0[15u].w;
        float _1691 = fma(_795, cbModelParam._m0[13u].z, fma(_794, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _793));
        float _1694 = fma(_795, cbModelParam._m0[14u].z, fma(_794, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _793));
        float _1697 = fma(_795, cbModelParam._m0[15u].z, fma(_794, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _793));
        float _1725;
        if (_1691 > 0.0)
        {
            _1725 = abs((1.0 - _1680) / _1691);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1691 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1680 + 1.0) / _1691);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1725 = frontier_phi_17_15_ladder;
        }
        float _1895;
        if (_1694 > 0.0)
        {
            _1895 = abs((1.0 - _1684) / _1694);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1694 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1684 + 1.0) / _1694);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1895 = frontier_phi_26_22_ladder;
        }
        float _2191;
        if (_1697 > 0.0)
        {
            _2191 = abs((1.0 - _1688) / _1697);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1697 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1688 + 1.0) / _1697);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2191 = frontier_phi_38_33_ladder;
        }
        float _2193 = isnan(_1895) ? _1725 : (isnan(_1725) ? _1895 : min(_1725, _1895));
        float _2194 = isnan(_2191) ? _2193 : (isnan(_2193) ? _2191 : min(_2193, _2191));
        float _2198 = (_2194 * _1691) + _1680;
        float _2199 = (_2194 * _1694) + _1684;
        float _2200 = (_2194 * _1697) + _1688;
        float _2201 = _2194 * 9.9999997473787516355514526367188e-05;
        float _2203 = (-1.0) - _2201;
        float _2205 = _2201 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2200 > _2205) || ((_2200 < _2203) || ((_2199 > _2205) || ((_2199 < _2203) || ((_2198 < _2203) || (_2198 > _2205))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2345 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2200, cbModelParam._m0[9u].z, fma(_2199, cbModelParam._m0[9u].y, _2198 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2200, cbModelParam._m0[10u].z, fma(_2199, cbModelParam._m0[10u].y, _2198 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2200, cbModelParam._m0[11u].z, fma(_2199, cbModelParam._m0[11u].y, _2198 * cbModelParam._m0[11u].x))), _1633);
            frontier_phi_16_38_ladder = _2345.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2345.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2345.x * cbModelParam._m0[1u].y;
        }
        _1713 = frontier_phi_16_38_ladder_2;
        _1715 = frontier_phi_16_38_ladder_1;
        _1717 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1701 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_793, _794, _795), _1633);
        _1713 = _1701.x * cbModelParam._m0[1u].y;
        _1715 = _1701.y * cbModelParam._m0[1u].y;
        _1717 = _1701.z * cbModelParam._m0[1u].y;
    }
    float _1721 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _623);
    float _1722 = isnan(_1721) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1721 : min(cbModelParam._m0[25u].w, _1721));
    float _1812;
    float _1814;
    float _1816;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1776 = fma(_854, cbModelParam._m0[21u].z, fma(_850, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _846)) + cbModelParam._m0[21u].w;
        float _1780 = fma(_854, cbModelParam._m0[22u].z, fma(_850, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _846)) + cbModelParam._m0[22u].w;
        float _1784 = fma(_854, cbModelParam._m0[23u].z, fma(_850, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _846)) + cbModelParam._m0[23u].w;
        float _1787 = fma(_795, cbModelParam._m0[21u].z, fma(_794, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _793));
        float _1790 = fma(_795, cbModelParam._m0[22u].z, fma(_794, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _793));
        float _1793 = fma(_795, cbModelParam._m0[23u].z, fma(_794, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _793));
        float _1900;
        if (_1787 > 0.0)
        {
            _1900 = abs((1.0 - _1776) / _1787);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1787 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1776 + 1.0) / _1787);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1900 = frontier_phi_28_24_ladder;
        }
        float _2218;
        if (_1790 > 0.0)
        {
            _2218 = abs((1.0 - _1780) / _1790);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1790 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1780 + 1.0) / _1790);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2218 = frontier_phi_40_35_ladder;
        }
        float _2545;
        if (_1793 > 0.0)
        {
            _2545 = abs((1.0 - _1784) / _1793);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1793 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1784 + 1.0) / _1793);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2545 = frontier_phi_50_47_ladder;
        }
        float _2547 = isnan(_2218) ? _1900 : (isnan(_1900) ? _2218 : min(_1900, _2218));
        float _2548 = isnan(_2545) ? _2547 : (isnan(_2547) ? _2545 : min(_2547, _2545));
        float _2552 = (_2548 * _1787) + _1776;
        float _2553 = (_2548 * _1790) + _1780;
        float _2554 = (_2548 * _1793) + _1784;
        float _2555 = _2548 * 9.9999997473787516355514526367188e-05;
        float _2556 = (-1.0) - _2555;
        float _2558 = _2555 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2554 > _2558) || ((_2554 < _2556) || ((_2553 > _2558) || ((_2553 < _2556) || ((_2552 < _2556) || (_2552 > _2558))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2672 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2554, cbModelParam._m0[17u].z, fma(_2553, cbModelParam._m0[17u].y, _2552 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2554, cbModelParam._m0[18u].z, fma(_2553, cbModelParam._m0[18u].y, _2552 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2554, cbModelParam._m0[19u].z, fma(_2553, cbModelParam._m0[19u].y, _2552 * cbModelParam._m0[19u].x))), _1722);
            frontier_phi_25_50_ladder = _2672.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2672.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2672.x * cbModelParam._m0[1u].z;
        }
        _1812 = frontier_phi_25_50_ladder_2;
        _1814 = frontier_phi_25_50_ladder_1;
        _1816 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1796 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_793, _794, _795), _1722);
        _1812 = _1796.x * cbModelParam._m0[1u].z;
        _1814 = _1796.y * cbModelParam._m0[1u].z;
        _1816 = _1796.z * cbModelParam._m0[1u].z;
    }
    float _1828 = ((((1.0 - _814) * ((_801 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_814 * _801)) * _785;
    float _1829 = _1828 * ((cbModelParam._m0[1u].w * (_1812 - _1713)) + _1713);
    float _1830 = _1828 * ((cbModelParam._m0[1u].w * (_1814 - _1715)) + _1715);
    float _1831 = _1828 * ((cbModelParam._m0[1u].w * (_1816 - _1717)) + _1717);
    float _1834 = fma(_1831, cbSceneParam._m0[89u].z, fma(_1830, cbSceneParam._m0[89u].y, _1829 * cbSceneParam._m0[89u].x));
    float _1837 = fma(_1831, cbSceneParam._m0[90u].z, fma(_1830, cbSceneParam._m0[90u].y, _1829 * cbSceneParam._m0[90u].x));
    float _1840 = fma(_1831, cbSceneParam._m0[91u].z, fma(_1830, cbSceneParam._m0[91u].y, _1829 * cbSceneParam._m0[91u].x));
    float _1874 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1878 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1882 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1886 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1887 = _1874 / _1886;
    float _1888 = _1878 / _1886;
    float _1889 = _1882 / _1886;
    float _2036;
    float _2037;
    float _2038;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1916 = ((uint(_1889 > cbSceneParam._m0[59u].y) + uint(_1889 > cbSceneParam._m0[59u].x)) + uint(_1889 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1917 = _1916 + 43u;
        uint _1925 = _1916 + 44u;
        uint _1933 = _1916 + 45u;
        uint _1941 = _1916 + 46u;
        float _1952 = fma(_1886, cbSceneParam._m0[_1917].w, fma(_1882, cbSceneParam._m0[_1917].z, fma(_1878, cbSceneParam._m0[_1917].y, _1874 * cbSceneParam._m0[_1917].x)));
        float _1956 = fma(_1886, cbSceneParam._m0[_1925].w, fma(_1882, cbSceneParam._m0[_1925].z, fma(_1878, cbSceneParam._m0[_1925].y, _1874 * cbSceneParam._m0[_1925].x)));
        float _1964 = fma(_1886, cbSceneParam._m0[_1941].w, fma(_1882, cbSceneParam._m0[_1941].z, fma(_1878, cbSceneParam._m0[_1941].y, _1874 * cbSceneParam._m0[_1941].x)));
        float _1969 = cbSceneParam._m0[33u].z * _1964;
        float _1971 = cbSceneParam._m0[33u].w * _1964;
        float _1974 = fma(_1886, cbSceneParam._m0[_1933].w, fma(_1882, cbSceneParam._m0[_1933].z, fma(_1878, cbSceneParam._m0[_1933].y, _1874 * cbSceneParam._m0[_1933].x))) / _1964;
        float _2022 = (cbSceneParam._m0[33u].x - sqrt(((_1888 * _1888) + (_1887 * _1887)) + (_1889 * _1889))) * cbSceneParam._m0[33u].y;
        float _4401 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
        float _2029 = (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1969 + _1952) / _1964, (_1971 + _1956) / _1964), _1974), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1971 + _1952) / _1964, (_1956 - _1969) / _1964), _1974), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1952 - _1969) / _1964, (_1956 - _1971) / _1964), _1974), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1952 - _1971) / _1964, (_1969 + _1956) / _1964), _1974), 0.0)).x), vec4(0.25)));
        _2036 = 1.0 - (_2029 * cbSceneParam._m0[34u].x);
        _2037 = 1.0 - (_2029 * cbSceneParam._m0[34u].y);
        _2038 = 1.0 - (_2029 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2036 = 1.0;
        _2037 = 1.0;
        _2038 = 1.0;
    }
    float _2102;
    float _2104;
    float _2106;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2090 = fma(_1886, cbSceneParam._m0[63u].w, fma(_1882, cbSceneParam._m0[63u].z, fma(_1878, cbSceneParam._m0[63u].y, _1874 * cbSceneParam._m0[63u].x)));
        float _2091 = fma(_1886, cbSceneParam._m0[60u].w, fma(_1882, cbSceneParam._m0[60u].z, fma(_1878, cbSceneParam._m0[60u].y, _1874 * cbSceneParam._m0[60u].x))) / _2090;
        float _2092 = fma(_1886, cbSceneParam._m0[61u].w, fma(_1882, cbSceneParam._m0[61u].z, fma(_1878, cbSceneParam._m0[61u].y, _1874 * cbSceneParam._m0[61u].x))) / _2090;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2091 >= cbSceneParam._m0[64u].x) && (_2092 >= cbSceneParam._m0[64u].y)) && (_2091 <= cbSceneParam._m0[64u].z)) && (_2092 <= cbSceneParam._m0[64u].w))
        {
            float _2231 = fma(_1886, cbSceneParam._m0[62u].w, fma(_1882, cbSceneParam._m0[62u].z, fma(_1878, cbSceneParam._m0[62u].y, _1874 * cbSceneParam._m0[62u].x))) / _2090;
            float _2235 = isnan(cbSceneParam._m0[41u].w) ? _2231 : (isnan(_2231) ? cbSceneParam._m0[41u].w : max(_2231, cbSceneParam._m0[41u].w));
            float _2278 = (cbSceneParam._m0[33u].x - sqrt(((_1888 * _1888) + (_1887 * _1887)) + (_1889 * _1889))) * cbSceneParam._m0[33u].y;
            float _4417 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
            float _2285 = (isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2091, cbSceneParam._m0[33u].w + _2092), _2235), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2091, _2092 - cbSceneParam._m0[33u].z), _2235), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2091 - cbSceneParam._m0[33u].z, _2092 - cbSceneParam._m0[33u].w), _2235), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2091 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2092), _2235), 0.0)).x), vec4(0.25)));
            float _2289 = 1.0 - (_2285 * cbSceneParam._m0[34u].x);
            float _2290 = 1.0 - (_2285 * cbSceneParam._m0[34u].y);
            float _2291 = 1.0 - (_2285 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2291) ? _2038 : (isnan(_2038) ? _2291 : min(_2038, _2291));
            frontier_phi_37_36_ladder_1 = isnan(_2290) ? _2037 : (isnan(_2037) ? _2290 : min(_2037, _2290));
            frontier_phi_37_36_ladder_2 = isnan(_2289) ? _2036 : (isnan(_2036) ? _2289 : min(_2036, _2289));
        }
        else
        {
            frontier_phi_37_36_ladder = _2038;
            frontier_phi_37_36_ladder_1 = _2037;
            frontier_phi_37_36_ladder_2 = _2036;
        }
        _2102 = frontier_phi_37_36_ladder_2;
        _2104 = frontier_phi_37_36_ladder_1;
        _2106 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2102 = _2036;
        _2104 = _2037;
        _2106 = _2038;
    }
    uvec4 _2111 = floatBitsToUint(cbInstanceData._m0[_760 + 5u]);
    uint _2113 = _2111.x * 14u;
    uint _2114 = _2113 + 13u;
    float _2121 = _785 + (-1.0);
    float _2126 = (cbLight._m0[_2114].x * _2121) + 1.0;
    float _2127 = (cbLight._m0[_2114].y * _2121) + 1.0;
    float _2128 = (cbLight._m0[_2114].z * _2121) + 1.0;
    float _2129 = (cbLight._m0[_2114].w * _2121) + 1.0;
    uint _2130 = _2113 + 5u;
    float _2136 = isnan(1.0) ? _2127 : (isnan(_2127) ? 1.0 : min(_2127, 1.0));
    uint _2140 = _2113 + 4u;
    float _2150 = isnan(1.0) ? _2126 : (isnan(_2126) ? 1.0 : min(_2126, 1.0));
    uint _2154 = _2113 | 1u;
    float _2165 = dot(vec3(cbLight._m0[_2113].xyz), vec3(_620, _621, _622));
    float _2168 = dot(vec3(cbLight._m0[_2154].xyz), vec3(_620, _621, _622));
    float _4453 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
    float _4464 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
    float _2173 = (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0))) * 0.3183098733425140380859375;
    float _2175 = (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * 0.3183098733425140380859375;
    float _2182 = ((cbLight._m0[_2130].x * _2136) * _2175) + (((cbLight._m0[_2140].x * _2102) * _2150) * _2173);
    float _2183 = ((_2136 * cbLight._m0[_2130].y) * _2175) + (((cbLight._m0[_2140].y * _2104) * _2150) * _2173);
    float _2184 = ((_2136 * cbLight._m0[_2130].z) * _2175) + (((cbLight._m0[_2140].z * _2106) * _2150) * _2173);
    uvec4 _2188 = floatBitsToUint(cbLight._m0[_2113 + 12u]);
    bool _2190 = _2188.x == 0u;
    float _2292;
    float _2294;
    float _2296;
    if (_2190)
    {
        _2292 = _2182;
        _2294 = _2183;
        _2296 = _2184;
    }
    else
    {
        uint _2300 = _2113 + 6u;
        float _2316 = (dot(vec3(cbLight._m0[_2113 + 2u].xyz), vec3(_620, _621, _622)) * 0.5) + 0.5;
        float _2317 = _2316 * _2316;
        float _4475 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
        float _2318 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
        float _2319 = isnan(1.0) ? _2128 : (isnan(_2128) ? 1.0 : min(_2128, 1.0));
        _2292 = (((cbLight._m0[_2300].x * 0.3183098733425140380859375) * _2318) * _2319) + _2182;
        _2294 = (((cbLight._m0[_2300].y * 0.3183098733425140380859375) * _2318) * _2319) + _2183;
        _2296 = (((cbLight._m0[_2300].z * 0.3183098733425140380859375) * _2318) * _2319) + _2184;
    }
    bool _2299 = _2188.y == 0u;
    float _2354;
    float _2356;
    float _2358;
    if (_2299)
    {
        _2354 = _2292;
        _2356 = _2294;
        _2358 = _2296;
    }
    else
    {
        uint _2516 = _2113 + 7u;
        float _2532 = (dot(vec3(cbLight._m0[_2113 + 3u].xyz), vec3(_620, _621, _622)) * 0.5) + 0.5;
        float _2533 = _2532 * _2532;
        float _4491 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
        float _2534 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
        float _2535 = isnan(1.0) ? _2129 : (isnan(_2129) ? 1.0 : min(_2129, 1.0));
        _2354 = (((cbLight._m0[_2516].x * 0.3183098733425140380859375) * _2534) * _2535) + _2292;
        _2356 = (((cbLight._m0[_2516].y * 0.3183098733425140380859375) * _2534) * _2535) + _2294;
        _2358 = (((cbLight._m0[_2516].z * 0.3183098733425140380859375) * _2534) * _2535) + _2296;
    }
    uint _2361 = _2113 + 8u;
    float _2374 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2113].w)) * _623) * 0.949999988079071044921875);
    float _2375 = _2374 * _2374;
    float _2376 = cbLight._m0[_2113].x + _699;
    float _2377 = cbLight._m0[_2113].y + _700;
    float _2378 = cbLight._m0[_2113].z + _701;
    float _2382 = inversesqrt(dot(vec3(_2376, _2377, _2378), vec3(_2376, _2377, _2378)));
    float _2383 = _2382 * _2376;
    float _2384 = _2382 * _2377;
    float _2385 = _2382 * _2378;
    float _2386 = dot(vec3(_620, _621, _622), vec3(cbLight._m0[_2113].xyz));
    float _4507 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
    float _2389 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
    float _4518 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _2390 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
    float _2391 = dot(vec3(_620, _621, _622), vec3(_2383, _2384, _2385));
    float _4529 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
    float _2394 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
    float _2395 = dot(vec3(cbLight._m0[_2113].xyz), vec3(_2383, _2384, _2385));
    float _4540 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
    float _2399 = _2375 * _2375;
    float _2403 = ((_2394 * _2394) * (_2399 + (-1.0))) + 1.0;
    float _2414 = (exp2(log2(1.0 - (isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2415 = 1.0 - _2375;
    float _2426 = (0.5 / (((_2390 * ((_2389 * _2415) + _2375)) + 9.9999999392252902907785028219223e-09) + (((_2390 * _2415) + _2375) * _2389))) * _2389;
    float _4551 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
    float _2428 = (isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0))) * (_2399 / ((_2403 * _2403) * 3.141590118408203125));
    uint _2442 = _2113 + 9u;
    float _2453 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2154].w)) * _623) * 0.949999988079071044921875);
    float _2454 = _2453 * _2453;
    float _2455 = cbLight._m0[_2154].x + _699;
    float _2456 = cbLight._m0[_2154].y + _700;
    float _2457 = cbLight._m0[_2154].z + _701;
    float _2461 = inversesqrt(dot(vec3(_2455, _2456, _2457), vec3(_2455, _2456, _2457)));
    float _2462 = _2461 * _2455;
    float _2463 = _2461 * _2456;
    float _2464 = _2461 * _2457;
    float _2465 = dot(vec3(_620, _621, _622), vec3(cbLight._m0[_2154].xyz));
    float _4562 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
    float _2468 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
    float _2469 = dot(vec3(_620, _621, _622), vec3(_2462, _2463, _2464));
    float _4573 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
    float _2472 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
    float _2473 = dot(vec3(cbLight._m0[_2154].xyz), vec3(_2462, _2463, _2464));
    float _4584 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
    float _2477 = _2454 * _2454;
    float _2481 = ((_2472 * _2472) * (_2477 + (-1.0))) + 1.0;
    float _2490 = (exp2(log2(1.0 - (isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2491 = 1.0 - _2454;
    float _2501 = (0.5 / (((_2390 * ((_2468 * _2491) + _2454)) + 9.9999999392252902907785028219223e-09) + (((_2390 * _2491) + _2454) * _2468))) * _2468;
    float _4595 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
    float _2503 = (isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0))) * (_2477 / ((_2481 * _2481) * 3.141590118408203125));
    float _2513 = (((_2490 * cbLight._m0[_2442].x) * _2503) * _2136) + ((((cbLight._m0[_2361].x * _2102) * _2414) * _2428) * _2150);
    float _2514 = (((_2490 * cbLight._m0[_2442].y) * _2503) * _2136) + ((((cbLight._m0[_2361].y * _2104) * _2414) * _2428) * _2150);
    float _2515 = (((_2490 * cbLight._m0[_2442].z) * _2503) * _2136) + ((((cbLight._m0[_2361].z * _2106) * _2414) * _2428) * _2150);
    float _2571;
    float _2573;
    float _2575;
    if (_2190)
    {
        _2571 = _2513;
        _2573 = _2514;
        _2575 = _2515;
    }
    else
    {
        uint _2577 = _2113 + 2u;
        uint _2581 = _2113 + 10u;
        float _2595 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2577].w)) * _623) * 0.949999988079071044921875);
        float _2596 = _2595 * _2595;
        float _2597 = cbLight._m0[_2577].x + _699;
        float _2598 = cbLight._m0[_2577].y + _700;
        float _2599 = cbLight._m0[_2577].z + _701;
        float _2603 = inversesqrt(dot(vec3(_2597, _2598, _2599), vec3(_2597, _2598, _2599)));
        float _2604 = _2603 * _2597;
        float _2605 = _2603 * _2598;
        float _2606 = _2603 * _2599;
        float _2607 = dot(vec3(_620, _621, _622), vec3(cbLight._m0[_2577].xyz));
        float _4606 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
        float _2610 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
        float _2611 = dot(vec3(_620, _621, _622), vec3(_2604, _2605, _2606));
        float _4617 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
        float _2614 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
        float _2615 = dot(vec3(cbLight._m0[_2577].xyz), vec3(_2604, _2605, _2606));
        float _4628 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
        float _2619 = _2596 * _2596;
        float _2623 = ((_2614 * _2614) * (_2619 + (-1.0))) + 1.0;
        float _2632 = (exp2(log2(1.0 - (isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2633 = 1.0 - _2596;
        float _2643 = (0.5 / (((_2390 * ((_2610 * _2633) + _2596)) + 9.9999999392252902907785028219223e-09) + (((_2390 * _2633) + _2596) * _2610))) * _2610;
        float _4639 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
        float _2645 = (isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0))) * (_2619 / ((_2623 * _2623) * 3.141590118408203125));
        float _2646 = isnan(1.0) ? _2128 : (isnan(_2128) ? 1.0 : min(_2128, 1.0));
        _2571 = (((_2632 * cbLight._m0[_2581].x) * _2645) * _2646) + _2513;
        _2573 = (((_2632 * cbLight._m0[_2581].y) * _2645) * _2646) + _2514;
        _2575 = (((_2632 * cbLight._m0[_2581].z) * _2645) * _2646) + _2515;
    }
    float _2677;
    float _2679;
    float _2681;
    if (_2299)
    {
        _2677 = _2571;
        _2679 = _2573;
        _2681 = _2575;
    }
    else
    {
        uint _2688 = _2113 + 3u;
        uint _2692 = _2113 + 11u;
        float _2706 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2688].w)) * _623) * 0.949999988079071044921875);
        float _2707 = _2706 * _2706;
        float _2708 = cbLight._m0[_2688].x + _699;
        float _2709 = cbLight._m0[_2688].y + _700;
        float _2710 = cbLight._m0[_2688].z + _701;
        float _2714 = inversesqrt(dot(vec3(_2708, _2709, _2710), vec3(_2708, _2709, _2710)));
        float _2715 = _2714 * _2708;
        float _2716 = _2714 * _2709;
        float _2717 = _2714 * _2710;
        float _2718 = dot(vec3(_620, _621, _622), vec3(cbLight._m0[_2688].xyz));
        float _4655 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
        float _2721 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
        float _2722 = dot(vec3(_620, _621, _622), vec3(_2715, _2716, _2717));
        float _4666 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
        float _2725 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
        float _2726 = dot(vec3(cbLight._m0[_2688].xyz), vec3(_2715, _2716, _2717));
        float _4677 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
        float _2730 = _2707 * _2707;
        float _2734 = ((_2725 * _2725) * (_2730 + (-1.0))) + 1.0;
        float _2743 = (exp2(log2(1.0 - (isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2744 = 1.0 - _2707;
        float _2754 = (0.5 / (((_2390 * ((_2721 * _2744) + _2707)) + 9.9999999392252902907785028219223e-09) + (((_2390 * _2744) + _2707) * _2721))) * _2721;
        float _4688 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
        float _2756 = (isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0))) * (_2730 / ((_2734 * _2734) * 3.141590118408203125));
        float _2757 = isnan(1.0) ? _2129 : (isnan(_2129) ? 1.0 : min(_2129, 1.0));
        _2677 = (((_2743 * cbLight._m0[_2692].x) * _2756) * _2757) + _2571;
        _2679 = (((_2743 * cbLight._m0[_2692].y) * _2756) * _2757) + _2573;
        _2681 = (((_2743 * cbLight._m0[_2692].z) * _2756) * _2757) + _2575;
    }
    float _2823;
    float _2825;
    float _2827;
    float _2829;
    float _2831;
    float _2833;
    if (_2111.y == 0u)
    {
        uvec4 _2778 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2779 = _2778.x;
        uint _2790 = uint((float(_2778.y) * floor(float(uint(cbSceneParam._m0[85u].y * _721) / _2779))) + floor(float(uint(cbSceneParam._m0[85u].x * _720) / _2779)));
        float _2800 = (log2(_1889 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2801 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
        uint _2804 = uint(isnan(14.0) ? _2801 : (isnan(_2801) ? 14.0 : min(_2801, 14.0)));
        uvec4 _2809 = texelFetch(g_lightClusterGridBuffer, int(((_2804 << 2u) + (_2790 << 6u)) >> 2u));
        uint _2810 = _2809.x;
        uint _2811 = _2778.z;
        float _2919;
        float _2921;
        float _2923;
        float _2925;
        float _2927;
        float _2929;
        if (((((1u << ((_2811 >> 4u) & 15u)) + 4294967295u) & _2810) == 0u) || ((_2811 & 240u) == 0u))
        {
            _2919 = 0.0;
            _2921 = 0.0;
            _2923 = 0.0;
            _2925 = 0.0;
            _2927 = 0.0;
            _2929 = 0.0;
        }
        else
        {
            float _2920;
            float _2922;
            float _2924;
            float _2926;
            float _2928;
            float _2930;
            float _3080 = 0.0;
            float _3081 = 0.0;
            float _3082 = 0.0;
            float _3083 = 0.0;
            float _3084 = 0.0;
            float _3085 = 0.0;
            uint _3086 = 0u;
            uint _3095;
            bool _3096;
            for (;;)
            {
                _3095 = texelFetch(g_lightClassification, int((((_2804 << 5u) + (_2790 << 9u)) + (_3086 << 2u)) >> 2u)).x;
                _3096 = _3095 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3096)
                {
                    frontier_phi_71_pred = _3085;
                    frontier_phi_71_pred_1 = _3084;
                    frontier_phi_71_pred_2 = _3083;
                    frontier_phi_71_pred_3 = _3082;
                    frontier_phi_71_pred_4 = _3081;
                    frontier_phi_71_pred_5 = _3080;
                }
                else
                {
                    float _3225;
                    float _3226;
                    float _3227;
                    float _3228;
                    float _3229;
                    float _3230;
                    uint _3231;
                    _3225 = _3080;
                    _3226 = _3081;
                    _3227 = _3082;
                    _3228 = _3083;
                    _3229 = _3084;
                    _3230 = _3085;
                    _3231 = _3095;
                    float _3152;
                    float _3153;
                    float _3154;
                    float _3155;
                    float _3156;
                    float _3157;
                    for (;;)
                    {
                        uint _3235 = uint(findLSB(_3231)) + (_3086 << 5u);
                        uint _3232 = (_3231 + 4294967295u) & _3231;
                        uint _3237 = _3235 * 48u;
                        vec4 _3251 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3237)).x, texelFetch(g_PointLightRenderingBuffer, int(_3237 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3237 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3237 + 3u)).x));
                        uint _3257 = (_3235 * 48u) + 4u;
                        vec4 _3270 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3257)).x, texelFetch(g_PointLightRenderingBuffer, int(_3257 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3257 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3257 + 3u)).x));
                        uint _3276 = (_3235 * 48u) + 8u;
                        vec3 _3287 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3276)).x, texelFetch(g_PointLightRenderingBuffer, int(_3276 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3276 + 2u)).x));
                        float _3291 = _3251.x - _1887;
                        float _3292 = _3251.y - _1888;
                        float _3293 = _3251.z - _1889;
                        float _3294 = dot(vec3(_3291, _3292, _3293), vec3(_3291, _3292, _3293));
                        float _3297 = inversesqrt(_3294);
                        float _3298 = _3297 * _3291;
                        float _3299 = _3297 * _3292;
                        float _3300 = _3297 * _3293;
                        float _3301 = dot(vec3(_741, _744, _747), vec3(_3298, _3299, _3300));
                        float _3306 = 1.0 - (_3294 * _3251.w);
                        float _4714 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
                        float _3307 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
                        float _3308 = sqrt(_3294) * _3270.w;
                        float _3311 = 1.39999997615814208984375 / (_3308 + 1.39999997615814208984375);
                        float _3312 = _3311 * _3311;
                        float _3315 = ((1.0 - _3312) * _3301) + _3312;
                        float _3318 = _3308 * _3308;
                        float _3322 = ((isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : max(_3315, 0.0))) * _3307) / ((_3318 * 0.699999988079071044921875) + 1.0);
                        float _3326 = (-0.0) - _1887;
                        float _3327 = (-0.0) - _1888;
                        float _3328 = (-0.0) - _1889;
                        float _3332 = inversesqrt(dot(vec3(_3326, _3327, _3328), vec3(_3326, _3327, _3328)));
                        float _3333 = _3332 * _3326;
                        float _3334 = _3332 * _3327;
                        float _3335 = _3332 * _3328;
                        float _3342 = exp2(log2(1.0 / ((_3318 * 3.5) + 5.0)) * 0.25);
                        float _3343 = 1.0 - _801;
                        float _3350 = sqrt(1.0 - ((1.0 - (_3343 * _3343)) * (1.0 - (_3342 * _3342))));
                        float _3351 = _3350 * _3350;
                        float _3352 = _3351 * _3351;
                        float _3353 = _3333 + _3298;
                        float _3354 = _3334 + _3299;
                        float _3355 = _3335 + _3300;
                        float _3359 = inversesqrt(dot(vec3(_3353, _3354, _3355), vec3(_3353, _3354, _3355)));
                        float _3363 = dot(vec3(_741, _744, _747), vec3(_3333, _3334, _3335));
                        float _4730 = isnan(0.0) ? _3363 : (isnan(_3363) ? 0.0 : max(_3363, 0.0));
                        float _3366 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
                        float _3367 = dot(vec3(_741, _744, _747), vec3(_3359 * _3353, _3359 * _3354, _3359 * _3355));
                        float _4741 = isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0));
                        float _3370 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
                        float _3374 = ((_3370 * _3370) * (_3352 + (-1.0))) + 1.0;
                        float _3375 = _3311 * _3351;
                        float _3376 = _3375 * _3375;
                        float _3379 = ((1.0 - _3376) * _3301) + _3376;
                        float _4752 = isnan(0.0) ? _3379 : (isnan(_3379) ? 0.0 : max(_3379, 0.0));
                        float _3380 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
                        float _3381 = 1.0 - _3351;
                        float _3391 = (0.5 / (((_3380 * ((_3366 * _3381) + _3351)) + 9.9999999392252902907785028219223e-09) + (((_3380 * _3381) + _3351) * _3366))) * _3380;
                        float _4763 = isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : max(_3391, 0.0));
                        float _3402 = (((_3352 * 3.1415927410125732421875) * (isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0)))) / ((_3374 * _3374) * ((_3318 * 2.1991131305694580078125) + 3.141590118408203125))) * _3307;
                        _3155 = (_3322 * _3270.x) + _3228;
                        _3156 = (_3322 * _3270.y) + _3229;
                        _3157 = (_3322 * _3270.z) + _3230;
                        _3152 = (_3402 * _3287.x) + _3225;
                        _3153 = (_3402 * _3287.y) + _3226;
                        _3154 = (_3402 * _3287.z) + _3227;
                        if (_3232 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3225 = _3152;
                            _3226 = _3153;
                            _3227 = _3154;
                            _3228 = _3155;
                            _3229 = _3156;
                            _3230 = _3157;
                            _3231 = _3232;
                        }
                    }
                    frontier_phi_71_pred = _3157;
                    frontier_phi_71_pred_1 = _3156;
                    frontier_phi_71_pred_2 = _3155;
                    frontier_phi_71_pred_3 = _3154;
                    frontier_phi_71_pred_4 = _3153;
                    frontier_phi_71_pred_5 = _3152;
                }
                _2930 = frontier_phi_71_pred;
                _2928 = frontier_phi_71_pred_1;
                _2926 = frontier_phi_71_pred_2;
                _2924 = frontier_phi_71_pred_3;
                _2922 = frontier_phi_71_pred_4;
                _2920 = frontier_phi_71_pred_5;
                uint _3087 = _3086 + 1u;
                if (_3087 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3080 = _2920;
                    _3081 = _2922;
                    _3082 = _2924;
                    _3083 = _2926;
                    _3084 = _2928;
                    _3085 = _2930;
                    _3086 = _3087;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2919 = _2920;
            _2921 = _2922;
            _2923 = _2924;
            _2925 = _2926;
            _2927 = _2928;
            _2929 = _2930;
        }
        uvec4 _2933 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2934 = _2933.z;
        uint _2936 = (_2934 >> 8u) & 15u;
        float _3048;
        float _3050;
        float _3052;
        float _3054;
        float _3056;
        float _3058;
        if (((4294967295u << _2936) & _2810) == 0u)
        {
            _3048 = _2919;
            _3050 = _2921;
            _3052 = _2923;
            _3054 = _2925;
            _3056 = _2927;
            _3058 = _2929;
        }
        else
        {
            float _3073 = inversesqrt(dot(vec3(_1887, _1888, _1889), vec3(_1887, _1888, _1889)));
            float _3074 = _3073 * _1887;
            float _3075 = _3073 * _1888;
            float _3076 = _3073 * _1889;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2936 < ((_2934 >> 12u) & 15u))
            {
                float _3049;
                float _3051;
                float _3053;
                float _3055;
                float _3057;
                float _3059;
                float _3208 = _2919;
                float _3209 = _2921;
                float _3210 = _2923;
                float _3211 = _2925;
                float _3212 = _2927;
                float _3213 = _2929;
                uint _3214 = _2936;
                uint _3223;
                bool _3224;
                for (;;)
                {
                    _3223 = texelFetch(g_lightClassification, int((((_2804 << 5u) + (_2790 << 9u)) + (_3214 << 2u)) >> 2u)).x;
                    _3224 = _3223 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3224)
                    {
                        frontier_phi_82_pred = _3213;
                        frontier_phi_82_pred_1 = _3212;
                        frontier_phi_82_pred_2 = _3211;
                        frontier_phi_82_pred_3 = _3210;
                        frontier_phi_82_pred_4 = _3209;
                        frontier_phi_82_pred_5 = _3208;
                    }
                    else
                    {
                        float _3416;
                        float _3417;
                        float _3418;
                        float _3419;
                        float _3420;
                        float _3421;
                        float _3710;
                        float _3711;
                        float _3712;
                        float _3713;
                        float _3714;
                        float _3715;
                        float _3429 = _3208;
                        float _3430 = _3209;
                        float _3431 = _3210;
                        float _3432 = _3211;
                        float _3433 = _3212;
                        float _3434 = _3213;
                        uint _3435 = _3223;
                        uint _3436;
                        vec4 _3461;
                        float _3462;
                        vec4 _3477;
                        vec3 _3489;
                        vec4 _3504;
                        vec4 _3519;
                        float _3566;
                        bool _3567;
                        for (;;)
                        {
                            uint _3446 = ((_3214 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3435));
                            _3436 = (_3435 + 4294967295u) & _3435;
                            uint _3448 = _3446 * 40u;
                            _3461 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3448)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 3u)).x));
                            _3462 = _3461.w;
                            uint _3464 = (_3446 * 40u) + 4u;
                            _3477 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3464)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 3u)).x));
                            uint _3479 = (_3446 * 40u) + 8u;
                            _3489 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3479)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 2u)).x));
                            uint _3491 = (_3446 * 40u) + 16u;
                            _3504 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3491)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 3u)).x));
                            uint _3506 = (_3446 * 40u) + 20u;
                            _3519 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3506)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 3u)).x));
                            uint _3522 = (_3446 * 40u) + 24u;
                            vec4 _3535 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3522)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 3u)).x));
                            uint _3541 = (_3446 * 40u) + 28u;
                            vec4 _3554 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3541)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 3u)).x));
                            _3566 = fma(_1889, _3554.z, fma(_1888, _3554.y, _3554.x * _1887)) + _3554.w;
                            _3567 = !((fma(_1889, _3535.z, fma(_1888, _3535.y, _3535.x * _1887)) + _3535.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3567)
                            {
                                float _3594 = _3461.x - _1887;
                                float _3595 = _3461.y - _1888;
                                float _3596 = _3461.z - _1889;
                                float _3597 = dot(vec3(_3594, _3595, _3596), vec3(_3594, _3595, _3596));
                                float _3600 = inversesqrt(_3597);
                                float _3601 = _3600 * _3594;
                                float _3602 = _3600 * _3595;
                                float _3603 = _3600 * _3596;
                                float _3607 = 1.0 - (_3597 / (_3462 * _3462));
                                float _4774 = isnan(0.0) ? _3607 : (isnan(_3607) ? 0.0 : max(_3607, 0.0));
                                float _3608 = isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0));
                                float _3612 = sqrt(_3597) * _3477.w;
                                float _3614 = 1.39999997615814208984375 / (_3612 + 1.39999997615814208984375);
                                float _3615 = _3614 * _3614;
                                float _3618 = ((1.0 - _3615) * dot(vec3(_3601, _3602, _3603), vec3(_741, _744, _747))) + _3615;
                                float _3621 = _3612 * _3612;
                                float _3625 = (fma(_1889, _3504.z, fma(_1888, _3504.y, _3504.x * _1887)) + _3504.w) / _3566;
                                float _3626 = (fma(_1889, _3519.z, fma(_1888, _3519.y, _3519.x * _1887)) + _3519.w) / _3566;
                                float _3630 = 1.0 - dot(vec2(_3625, _3626), vec2(_3625, _3626));
                                float _4790 = isnan(0.0) ? _3630 : (isnan(_3630) ? 0.0 : max(_3630, 0.0));
                                float _3631 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
                                float _3632 = _3631 * (((isnan(0.0) ? _3618 : (isnan(_3618) ? 0.0 : max(_3618, 0.0))) * _3608) / ((_3621 * 0.699999988079071044921875) + 1.0));
                                float _3644 = exp2(log2(1.0 / ((_3621 * 3.5) + 5.0)) * 0.25);
                                float _3645 = 1.0 - _801;
                                float _3652 = sqrt(1.0 - ((1.0 - (_3645 * _3645)) * (1.0 - (_3644 * _3644))));
                                float _3653 = _3652 * _3652;
                                float _3654 = _3653 * _3653;
                                float _3655 = _3601 - _3074;
                                float _3656 = _3602 - _3075;
                                float _3657 = _3603 - _3076;
                                float _3661 = inversesqrt(dot(vec3(_3655, _3656, _3657), vec3(_3655, _3656, _3657)));
                                float _3665 = dot(vec3(_741, _744, _747), vec3((-0.0) - _3074, (-0.0) - _3075, (-0.0) - _3076));
                                float _4801 = isnan(0.0) ? _3665 : (isnan(_3665) ? 0.0 : max(_3665, 0.0));
                                float _3668 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
                                float _3669 = dot(vec3(_741, _744, _747), vec3(_3661 * _3655, _3661 * _3656, _3661 * _3657));
                                float _4812 = isnan(0.0) ? _3669 : (isnan(_3669) ? 0.0 : max(_3669, 0.0));
                                float _3672 = isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0));
                                float _3676 = ((_3672 * _3672) * (_3654 + (-1.0))) + 1.0;
                                float _3677 = _3614 * _3653;
                                float _3678 = _3677 * _3677;
                                float _3684 = ((1.0 - _3678) * dot(vec3(_741, _744, _747), vec3(_3601, _3602, _3603))) + _3678;
                                float _4823 = isnan(0.0) ? _3684 : (isnan(_3684) ? 0.0 : max(_3684, 0.0));
                                float _3685 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
                                float _3686 = 1.0 - _3653;
                                float _3696 = (0.5 / (((_3685 * ((_3668 * _3686) + _3653)) + 9.9999999392252902907785028219223e-09) + (((_3685 * _3686) + _3653) * _3668))) * _3685;
                                float _4834 = isnan(0.0) ? _3696 : (isnan(_3696) ? 0.0 : max(_3696, 0.0));
                                float _3706 = (_3631 * _3608) * (((_3654 * 3.1415927410125732421875) * (isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0)))) / ((_3676 * _3676) * ((_3621 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3632 * _3477.z;
                                frontier_phi_88_pred_1 = _3632 * _3477.y;
                                frontier_phi_88_pred_2 = _3632 * _3477.x;
                                frontier_phi_88_pred_3 = _3706 * _3489.z;
                                frontier_phi_88_pred_4 = _3706 * _3489.y;
                                frontier_phi_88_pred_5 = _3706 * _3489.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3715 = frontier_phi_88_pred;
                            _3714 = frontier_phi_88_pred_1;
                            _3713 = frontier_phi_88_pred_2;
                            _3712 = frontier_phi_88_pred_3;
                            _3711 = frontier_phi_88_pred_4;
                            _3710 = frontier_phi_88_pred_5;
                            _3419 = _3713 + _3432;
                            _3420 = _3714 + _3433;
                            _3421 = _3715 + _3434;
                            _3416 = _3710 + _3429;
                            _3417 = _3711 + _3430;
                            _3418 = _3712 + _3431;
                            if (_3436 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3429 = _3416;
                                _3430 = _3417;
                                _3431 = _3418;
                                _3432 = _3419;
                                _3433 = _3420;
                                _3434 = _3421;
                                _3435 = _3436;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3421;
                        frontier_phi_82_pred_1 = _3420;
                        frontier_phi_82_pred_2 = _3419;
                        frontier_phi_82_pred_3 = _3418;
                        frontier_phi_82_pred_4 = _3417;
                        frontier_phi_82_pred_5 = _3416;
                    }
                    _3059 = frontier_phi_82_pred;
                    _3057 = frontier_phi_82_pred_1;
                    _3055 = frontier_phi_82_pred_2;
                    _3053 = frontier_phi_82_pred_3;
                    _3051 = frontier_phi_82_pred_4;
                    _3049 = frontier_phi_82_pred_5;
                    uint _3215 = _3214 + 1u;
                    if (_3215 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3208 = _3049;
                        _3209 = _3051;
                        _3210 = _3053;
                        _3211 = _3055;
                        _3212 = _3057;
                        _3213 = _3059;
                        _3214 = _3215;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3055;
                frontier_phi_63_64_ladder_1 = _3059;
                frontier_phi_63_64_ladder_2 = _3057;
                frontier_phi_63_64_ladder_3 = _3053;
                frontier_phi_63_64_ladder_4 = _3051;
                frontier_phi_63_64_ladder_5 = _3049;
            }
            else
            {
                frontier_phi_63_64_ladder = _2925;
                frontier_phi_63_64_ladder_1 = _2929;
                frontier_phi_63_64_ladder_2 = _2927;
                frontier_phi_63_64_ladder_3 = _2923;
                frontier_phi_63_64_ladder_4 = _2921;
                frontier_phi_63_64_ladder_5 = _2919;
            }
            _3048 = frontier_phi_63_64_ladder_5;
            _3050 = frontier_phi_63_64_ladder_4;
            _3052 = frontier_phi_63_64_ladder_3;
            _3054 = frontier_phi_63_64_ladder;
            _3056 = frontier_phi_63_64_ladder_2;
            _3058 = frontier_phi_63_64_ladder_1;
        }
        float _3063 = isnan(1.0) ? _785 : (isnan(_785) ? 1.0 : min(_785, 1.0));
        _2823 = (_3063 * _3054) + _2354;
        _2825 = (_3063 * _3056) + _2356;
        _2827 = (_3063 * _3058) + _2358;
        _2829 = ((_3048 * 0.039999999105930328369140625) * _3063) + _2677;
        _2831 = ((_3050 * 0.039999999105930328369140625) * _3063) + _2679;
        _2833 = ((_3052 * 0.039999999105930328369140625) * _3063) + _2681;
    }
    else
    {
        _2823 = _2354;
        _2825 = _2356;
        _2827 = _2358;
        _2829 = _2677;
        _2831 = _2679;
        _2833 = _2681;
    }
    uint _2839 = _761 + uint(cbMatDynParam._m0[0u].w);
    float _2845 = cbInstanceData._m0[_2839].x * (_539 - (_555 * _539));
    float _2846 = cbInstanceData._m0[_2839].y * (_540 - (_555 * _540));
    float _2847 = cbInstanceData._m0[_2839].z * (_541 - (_555 * _541));
    float _4850 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _4861 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _4872 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _2864 = (((isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0))) * (_2823 + ((isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0))) * _785))) + ((_2829 + ((isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0))) * _1622)) * cbPerFrame._m0[3u].x)) + _2845;
    float _2866 = (_2846 + ((_2831 + ((isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0))) * _1622)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0))) * (_2825 + ((isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0))) * _785)));
    float _2868 = (_2847 + ((_2833 + ((isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0))) * _1622)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0))) * (_2827 + ((isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0))) * _785)));
    float _2869 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0));
    float _2870 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0));
    float _2871 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0));
    float _2877 = cbMtdParam._m0[2u].x * _2845;
    float _2878 = cbMtdParam._m0[2u].y * _2846;
    float _2879 = cbMtdParam._m0[2u].z * _2847;
    float _4898 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2881 = isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0));
    uint _2882 = _760 + 6u;
    float _2890 = _720 / cbSceneParam._m0[86u].x;
    float _2891 = _721 / cbSceneParam._m0[86u].y;
    vec4 _2905 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2890, _2891, (log2((isnan(cbSceneParam._m0[77u].w) ? _642 : (isnan(_642) ? cbSceneParam._m0[77u].w : min(_642, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2907 = _2905.x;
    float _2908 = _2905.y;
    float _2909 = _2905.z;
    float _2910 = _2905.w;
    float _2981;
    float _2983;
    float _2985;
    float _2987;
    if (_642 > cbSceneParam._m0[78u].w)
    {
        float _2944 = isnan(_642) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _642 : min(cbSceneParam._m0[80u].w, _642));
        float _2945 = _2944 / _642;
        float _2956 = _2945 * _692;
        float _2957 = _693 * _2945;
        float _2958 = (-0.0) - _2957;
        float _2959 = _2945 * _694;
        float _2961 = (cbSceneParam._m0[77u].w * _2958) / _2944;
        float _2962 = _2961 + cbSceneParam._m0[79u].w;
        float _2963 = cbSceneParam._m0[79u].w - _2957;
        float _2969 = sqrt(((_2956 * _2956) + (_2957 * _2957)) + (_2959 * _2959));
        float _2972 = (1.0 - (cbSceneParam._m0[77u].w / _2944)) * _2969;
        float _2977 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2979 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3165;
        if (abs((_2958 - _2961) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3165 = ((((_2962 > 0.0) ? exp2(_2977 * _2962) : (2.0 - exp2(_2979 * _2962))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2972;
        }
        else
        {
            float _3109 = 1.0 / cbSceneParam._m0[80u].x;
            float _3110 = isnan(_2963) ? _2962 : (isnan(_2962) ? _2963 : max(_2962, _2963));
            float _3111 = isnan(_2963) ? _2962 : (isnan(_2962) ? _2963 : min(_2962, _2963));
            float _3120 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : min(_3110, 0.0));
            float _3121 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : min(_3111, 0.0));
            _3165 = ((abs(_2969 / _2958) * cbSceneParam._m0[80u].y) * ((((_3120 - _3121) * 2.0) - ((exp2(_2977 * (isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0)))) - exp2(_2977 * (isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0))))) * _3109)) - ((exp2(_2979 * _3120) - exp2(_2979 * _3121)) * _3109))) + (_2972 * cbSceneParam._m0[80u].z);
        }
        vec4 _3167 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2890, _2891, 1.0), 0.0);
        float _3176 = exp2((_3165 * (-1.44269502162933349609375)) * (1.0 - _3167.w));
        float _3177 = log2(_3176);
        float _3193 = log2(_2910);
        _2981 = (exp2(_3193 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3177 * cbSceneParam._m0[78u].x)) * _3167.x) / cbSceneParam._m0[78u].x)) + _2907;
        _2983 = (exp2(_3193 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3177 * cbSceneParam._m0[78u].y)) * _3167.y) / cbSceneParam._m0[78u].y)) + _2908;
        _2985 = (exp2(_3193 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3177 * cbSceneParam._m0[78u].z)) * _3167.z) / cbSceneParam._m0[78u].z)) + _2909;
        _2987 = _3176 * _2910;
    }
    else
    {
        _2981 = _2907;
        _2983 = _2908;
        _2985 = _2909;
        _2987 = _2910;
    }
    bool _3203;
    vec4 _2997;
    vec4 _3019;
    float _3021;
    float _3025;
    float _3026;
    float _3027;
    float _3030;
    float _3033;
    float _3036;
    float _3037;
    bool _3047;
    for (;;)
    {
        _2997 = cbMatDynParam._m0[0u];
        float _2999 = roundEven(_2997.y);
        bool _3000 = _2999 == 3.0;
        float _3001 = log2(_2987);
        float _3005 = exp2(_3001 * cbSceneParam._m0[78u].x);
        float _3006 = exp2(_3001 * cbSceneParam._m0[78u].y);
        float _3007 = exp2(_3001 * cbSceneParam._m0[78u].z);
        float _3008 = _3005 * _2869;
        float _3009 = _3006 * _2870;
        float _3010 = _3007 * _2871;
        float _3017 = _708 + (-0.5);
        _3019 = cbMtdParam._m0[1u];
        _3021 = _3019.y * _3017;
        float _3024 = (_2999 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3025 = _3024 * (_3000 ? _3008 : (_3008 + (cbSceneParam._m0[72u].w * _2981)));
        _3026 = _3024 * (_3000 ? _3009 : (_3009 + (cbSceneParam._m0[72u].w * _2983)));
        _3027 = _3024 * (_3000 ? _3010 : (_3010 + (cbSceneParam._m0[72u].w * _2985)));
        _3030 = ((_2877 * _2881) * _3005) * _3024;
        _3033 = ((_2878 * _2881) * _3006) * _3024;
        _3036 = ((_2879 * _2881) * _3007) * _3024;
        _3037 = _3017 * 0.999000012874603271484375;
        _3047 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3047)
        {
            if ((cbInstanceData._m0[_760 + 7u].x + _3037) < 0.5)
            {
                _3203 = true;
                break;
            }
        }
        uint _3144 = _761 + uint(_2997.w);
        if ((cbInstanceData._m0[_3144].w < 1.0) && ((cbInstanceData._m0[_3144].w + _3037) < 0.5))
        {
            _3203 = true;
            break;
        }
        if ((_3021 + 1.0) < _3019.x)
        {
            _3203 = true;
            break;
        }
        _3203 = false;
        break;
    }
    float _3407;
    if (_3203)
    {
        discard_state = true;
        _3407 = 0.0;
    }
    else
    {
        _3407 = cbInstanceData._m0[_2882].w;
    }
    SV_Target.x = _3025;
    SV_Target.y = _3026;
    SV_Target.z = _3027;
    SV_Target.w = _3407;
    SV_Target_1.x = _3030;
    SV_Target_1.y = _3033;
    SV_Target_1.z = _3036;
    SV_Target_1.w = cbInstanceData._m0[_2882].w;
    discard_exit();
}


