#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1163;
float _3866;
float _3867;
float _3868;
float _3869;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _203 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _204 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _205 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_203, _204, _205), vec3(_203, _204, _205)));
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _247 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _253 = _247.x * cbMtdParam._m0[9u].x;
    float _254 = _247.y * cbMtdParam._m0[9u].y;
    float _255 = _247.z * cbMtdParam._m0[9u].z;
    vec4 _272 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _293 = TEXCOORD_9.x - ((cbMtdParam._m0[16u].y * (1.0 - TEXCOORD_9.x)) * (_272.x + 0.00999999977648258209228515625));
    float _295 = _293 * (cbMtdParam._m0[16u].z + 1.0);
    float _3878 = isnan(0.0) ? _295 : (isnan(_295) ? 0.0 : max(_295, 0.0));
    float _296 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
    float _304 = ((((cbMtdParam._m0[12u].x - _253) * TEXCOORD_9.x) * cbMtdParam._m0[16u].x) * _296) + _253;
    float _305 = ((((cbMtdParam._m0[12u].y - _254) * TEXCOORD_9.y) * cbMtdParam._m0[16u].x) * _296) + _254;
    float _306 = (((cbMtdParam._m0[16u].x * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _255)) * _296) + _255;
    vec4 _319 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[6u].w));
    float _321 = _319.x;
    vec4 _333 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _337 = _333.z;
    float _341 = (_333.x * 2.0) + (-1.0);
    float _343 = (_333.y * 2.0) + (-1.0);
    float _344 = dot(vec2(_341, _343), vec2(_341, _343));
    float _3889 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    float _349 = sqrt(1.0 - (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))));
    float _355 = _293 * (cbMtdParam._m0[16u].y + 1.0);
    float _3900 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _359 = ((cbMtdParam._m0[15u].y - _337) * (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0)))) + _337;
    float _372 = (cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _373 = (cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _400 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * ((cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * ((cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[10u].w));
    float _405 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[15u].w;
    float _412 = ((_400.y * 0.5) + (-0.25)) * cbMtdParam._m0[15u].z;
    float _414 = (-0.0) - (cbMtdParam._m0[15u].z * ((_400.x * 0.5) + (-0.25)));
    float _416 = fract(_405);
    float _418 = fract(_405 + 0.5);
    float _419 = _416 * _414;
    float _420 = _412 * _416;
    float _423 = _418 * _414;
    float _424 = _412 * _418;
    float _429 = abs((_416 * 2.0) + (-1.0));
    vec4 _445 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_419 + _372) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_420 + _373) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _447 = _445.x;
    float _448 = _445.y;
    float _449 = _445.z;
    vec4 _450 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_423 + _372) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_424 + _373) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _477 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _478 = (cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _491 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_419 + _477) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_420 + _478) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _493 = _491.x;
    float _494 = _491.y;
    float _495 = _491.z;
    vec4 _496 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_423 + _477) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_424 + _478) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    vec4 _540 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[16u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, (((cbMtdParam._m0[17u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w));
    float _546 = (_540.x * 2.0) + (-1.0);
    float _547 = (_540.y * 2.0) + (-1.0);
    float _548 = dot(vec2(_546, _547), vec2(_546, _547));
    float _3911 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _564 = (_296 * (((cbMtdParam._m0[14u].z * _341) - _341) + _546)) + _341;
    float _565 = (_296 * (((cbMtdParam._m0[14u].z * _343) - _343) + _547)) + _343;
    float _566 = (_296 * (sqrt(1.0 - (isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0)))) - _349)) + _349;
    float _569 = fma(_566, _218 * NORMAL.x, fma(_565, _225 * TANGENT.x, (_211 * _203) * _564));
    float _572 = fma(_566, _218 * NORMAL.y, fma(_565, _225 * TANGENT.y, (_211 * _204) * _564));
    float _575 = fma(_566, _218 * NORMAL.z, fma(_565, _225 * TANGENT.z, (_211 * _205) * _564));
    float _579 = inversesqrt(dot(vec3(_569, _572, _575), vec3(_569, _572, _575)));
    float _580 = _579 * _569;
    float _581 = _579 * _572;
    float _582 = _579 * _575;
    float _3922 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _583 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
    float _3933 = isnan(0.0) ? _304 : (isnan(_304) ? 0.0 : max(_304, 0.0));
    float _3944 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _3955 = isnan(0.0) ? _306 : (isnan(_306) ? 0.0 : max(_306, 0.0));
    float _3966 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _587 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
    float _603 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _644 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _654 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _644);
    float _655 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _644);
    float _656 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _644);
    float _660 = inversesqrt(dot(vec3(_654, _655, _656), vec3(_654, _655, _656)));
    float _661 = _654 * _660;
    float _662 = _655 * _660;
    float _663 = _656 * _660;
    vec4 _668 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _670 = _668.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _844 = sqrt(((_654 * _654) + (_655 * _655)) + (_656 * _656));
        float _850 = (cbMatDynParam._m0[5u].x * _844) + cbMatDynParam._m0[5u].y;
        float _3977 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        float _851 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _855 = (cbMatDynParam._m0[5u].z * _844) + cbMatDynParam._m0[5u].w;
        float _3988 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))) - _851)) + _851) < ((_670 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _681 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _682 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _702 = fma(_582, cbSceneParam._m0[5u].z, fma(_581, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _580));
    float _705 = fma(_582, cbSceneParam._m0[6u].z, fma(_581, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _580));
    float _708 = fma(_582, cbSceneParam._m0[7u].z, fma(_581, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _580));
    uint _721 = uint(roundEven(NORMAL.w)) * 13u;
    uint _722 = _721 + 9u;
    uint _723 = _722 + uint(cbMatDynParam._m0[0u].w);
    float _729 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0)))) * cbInstanceData._m0[_723].x;
    float _730 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0)))) * cbInstanceData._m0[_723].y;
    float _731 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0)))) * cbInstanceData._m0[_723].z;
    float _3999 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _732 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
    float _4010 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _733 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
    float _4021 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _734 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
    float _735 = 1.0 - _587;
    float _736 = _732 * _735;
    float _737 = _733 * _735;
    float _738 = _734 * _735;
    float _743 = (_732 + (-0.039999999105930328369140625)) * _587;
    float _744 = (_733 + (-0.039999999105930328369140625)) * _587;
    float _745 = (_734 + (-0.039999999105930328369140625)) * _587;
    float _746 = _743 + 0.039999999105930328369140625;
    float _748 = _744 + 0.039999999105930328369140625;
    float _749 = _745 + 0.039999999105930328369140625;
    vec4 _758 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _681, cbSceneParam._m0[86u].y * _682));
    float _761 = _758.x * TEXCOORD_3.w;
    float _762 = dot(vec3(_580, _581, _582), vec3(_661, _662, _663));
    float _765 = _762 * 2.0;
    float _769 = (_765 * _580) - _661;
    float _770 = (_765 * _581) - _662;
    float _771 = (_765 * _582) - _663;
    float _775 = abs(dot(vec3(_661, _662, _663), vec3(_580, _581, _582)));
    float _4032 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _777 = sqrt(_583);
    float _790 = exp2((_777 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_777 * 3.0));
    float _796 = (1.0 - _790) * ((_777 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _797 = _790 * _777;
    float _825 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _829 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _833 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1162;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _888 = fma(_833, cbModelParam._m0[26u].z, fma(_829, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _825));
        float _892 = fma(_833, cbModelParam._m0[27u].z, fma(_829, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _825));
        float _896 = fma(_833, cbModelParam._m0[28u].z, fma(_829, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _825));
        float _920 = _825 + _580;
        float _921 = _829 + _581;
        float _922 = _833 + _582;
        float _932 = fma(_922, cbModelParam._m0[26u].z, fma(_921, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _920)) - _888;
        float _933 = fma(_922, cbModelParam._m0[27u].z, fma(_921, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _920)) - _892;
        float _934 = fma(_922, cbModelParam._m0[28u].z, fma(_921, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _920)) - _896;
        float _938 = inversesqrt(dot(vec3(_932, _933, _934), vec3(_932, _933, _934)));
        float _951 = ((_938 * _932) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_888 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _952 = ((_938 * _933) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_892 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _953 = ((_938 * _934) / cbModelParam._m0[34u].z) + ((((((_896 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _956 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_951, _952, _953), 0.0);
        vec4 _963 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_951, _952, _953), 0.0);
        vec4 _970 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_951, _952, _953), 0.0);
        vec4 _977 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_951, _952, _953), 0.0);
        float _990 = exp2((_956.w + (-0.5)) * 20.0) * 2.0;
        float _991 = _990 * (_956.x + (-0.5));
        float _992 = _990 * (_956.y + (-0.5));
        float _993 = _990 * (_956.z + (-0.5));
        float _1000 = exp2((_963.w + (-0.5)) * 20.0) * 2.0;
        float _1001 = _1000 * (_963.x + (-0.5));
        float _1002 = _1000 * (_963.y + (-0.5));
        float _1003 = _1000 * (_963.z + (-0.5));
        float _1010 = exp2((_970.w + (-0.5)) * 20.0) * 2.0;
        float _1011 = _1010 * (_970.x + (-0.5));
        float _1012 = _1010 * (_970.y + (-0.5));
        float _1013 = _1010 * (_970.z + (-0.5));
        float _1020 = exp2((_977.w + (-0.5)) * 20.0) * 2.0;
        float _1021 = _1020 * (_977.x + (-0.5));
        float _1022 = _1020 * (_977.y + (-0.5));
        float _1023 = _1020 * (_977.z + (-0.5));
        float _1024 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1025 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1026 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1027 = _991 * 0.5;
        float _1028 = _1001 * 0.5;
        float _1029 = _1011 * 0.5;
        float _1030 = dot(vec3(_1027, _1028, _1029), vec3(_1027, _1028, _1029));
        float _1035 = (_1030 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1030);
        float _1044 = (dot(vec3(_580, _581, _582), vec3(_1035 * _1027, _1035 * _1028, _1035 * _1029)) + 1.0) * 0.5;
        float _4058 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1054 = sqrt(((_1028 * _1028) + (_1027 * _1027)) + (_1029 * _1029)) / (_1024 + 9.9999997473787516355514526367188e-06);
        float _4069 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1055 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _1056 = _1055 * 2.0;
        float _1060 = (1.0 - _1055) / (_1055 + 1.0);
        float _4080 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1061 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _1070 = ((((1.0 - _1061) * (_1056 + 2.0)) * exp2(log2(isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * (_1056 + 1.0))) + _1061) * _1024;
        float _1071 = _992 * 0.5;
        float _1072 = _1002 * 0.5;
        float _1073 = _1012 * 0.5;
        float _1074 = dot(vec3(_1071, _1072, _1073), vec3(_1071, _1072, _1073));
        float _1079 = (_1074 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1074);
        float _1087 = (dot(vec3(_580, _581, _582), vec3(_1079 * _1071, _1079 * _1072, _1079 * _1073)) + 1.0) * 0.5;
        float _4091 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1096 = sqrt(((_1072 * _1072) + (_1071 * _1071)) + (_1073 * _1073)) / (_1025 + 9.9999997473787516355514526367188e-06);
        float _4102 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _1098 = _1097 * 2.0;
        float _1102 = (1.0 - _1097) / (_1097 + 1.0);
        float _4113 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1103 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _1112 = ((((1.0 - _1103) * (_1098 + 2.0)) * exp2(log2(isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * (_1098 + 1.0))) + _1103) * _1025;
        float _1113 = _993 * 0.5;
        float _1114 = _1003 * 0.5;
        float _1115 = _1013 * 0.5;
        float _1116 = dot(vec3(_1113, _1114, _1115), vec3(_1113, _1114, _1115));
        float _1121 = (_1116 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1116);
        float _1129 = (dot(vec3(_580, _581, _582), vec3(_1121 * _1113, _1121 * _1114, _1121 * _1115)) + 1.0) * 0.5;
        float _4124 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1138 = sqrt(((_1114 * _1114) + (_1113 * _1113)) + (_1115 * _1115)) / (_1026 + 9.9999997473787516355514526367188e-06);
        float _4135 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _1140 = _1139 * 2.0;
        float _1144 = (1.0 - _1139) / (_1139 + 1.0);
        float _4146 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _1154 = ((((1.0 - _1145) * (_1140 + 2.0)) * exp2(log2(isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * (_1140 + 1.0))) + _1145) * _1026;
        _1162 = _993;
        _1164 = _992;
        _1165 = _991;
        _1166 = _1003;
        _1167 = _1002;
        _1168 = _1001;
        _1169 = _1013;
        _1170 = _1012;
        _1171 = _1011;
        _1172 = _1026;
        _1173 = _1025;
        _1174 = _1024;
        _1175 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0)));
        _1176 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0)));
        _1177 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0)));
    }
    else
    {
        _1162 = _1163;
        _1164 = _1163;
        _1165 = _1163;
        _1166 = _1163;
        _1167 = _1163;
        _1168 = _1163;
        _1169 = _1163;
        _1170 = _1163;
        _1171 = _1163;
        _1172 = _1163;
        _1173 = _1163;
        _1174 = _1163;
        _1175 = 0.0;
        _1176 = 0.0;
        _1177 = 0.0;
    }
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1206 = fma(_833, cbModelParam._m0[30u].z, fma(_829, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _825));
        float _1210 = fma(_833, cbModelParam._m0[31u].z, fma(_829, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _825));
        float _1214 = fma(_833, cbModelParam._m0[32u].z, fma(_829, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _825));
        float _1237 = _825 + _580;
        float _1238 = _829 + _581;
        float _1239 = _833 + _582;
        float _1249 = fma(_1239, cbModelParam._m0[30u].z, fma(_1238, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1237)) - _1206;
        float _1250 = fma(_1239, cbModelParam._m0[31u].z, fma(_1238, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1237)) - _1210;
        float _1251 = fma(_1239, cbModelParam._m0[32u].z, fma(_1238, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1237)) - _1214;
        float _1255 = inversesqrt(dot(vec3(_1249, _1250, _1251), vec3(_1249, _1250, _1251)));
        float _1268 = ((_1255 * _1249) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1206 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1269 = ((_1255 * _1250) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1210 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1270 = ((_1255 * _1251) / cbModelParam._m0[35u].z) + ((((((_1214 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1272 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1268, _1269, _1270), 0.0);
        vec4 _1279 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1268, _1269, _1270), 0.0);
        vec4 _1286 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1268, _1269, _1270), 0.0);
        vec4 _1293 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1268, _1269, _1270), 0.0);
        float _1305 = exp2((_1272.w + (-0.5)) * 20.0) * 2.0;
        float _1306 = _1305 * (_1272.x + (-0.5));
        float _1307 = _1305 * (_1272.y + (-0.5));
        float _1308 = _1305 * (_1272.z + (-0.5));
        float _1315 = exp2((_1279.w + (-0.5)) * 20.0) * 2.0;
        float _1316 = _1315 * (_1279.x + (-0.5));
        float _1317 = _1315 * (_1279.y + (-0.5));
        float _1318 = _1315 * (_1279.z + (-0.5));
        float _1325 = exp2((_1286.w + (-0.5)) * 20.0) * 2.0;
        float _1326 = _1325 * (_1286.x + (-0.5));
        float _1327 = _1325 * (_1286.y + (-0.5));
        float _1328 = _1325 * (_1286.z + (-0.5));
        float _1335 = exp2((_1293.w + (-0.5)) * 20.0) * 2.0;
        float _1336 = _1335 * (_1293.x + (-0.5));
        float _1337 = _1335 * (_1293.y + (-0.5));
        float _1338 = _1335 * (_1293.z + (-0.5));
        float _1339 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1340 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1341 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1342 = _1306 * 0.5;
        float _1343 = _1316 * 0.5;
        float _1344 = _1326 * 0.5;
        float _1345 = dot(vec3(_1342, _1343, _1344), vec3(_1342, _1343, _1344));
        float _1350 = (_1345 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1345);
        float _1358 = (dot(vec3(_580, _581, _582), vec3(_1350 * _1342, _1350 * _1343, _1350 * _1344)) + 1.0) * 0.5;
        float _4187 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1367 = sqrt(((_1343 * _1343) + (_1342 * _1342)) + (_1344 * _1344)) / (_1339 + 9.9999997473787516355514526367188e-06);
        float _4198 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1368 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _1369 = _1368 * 2.0;
        float _1373 = (1.0 - _1368) / (_1368 + 1.0);
        float _4209 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _1383 = ((((1.0 - _1374) * (_1369 + 2.0)) * exp2(log2(isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * (_1369 + 1.0))) + _1374) * _1339;
        float _1384 = _1307 * 0.5;
        float _1385 = _1317 * 0.5;
        float _1386 = _1327 * 0.5;
        float _1387 = dot(vec3(_1384, _1385, _1386), vec3(_1384, _1385, _1386));
        float _1392 = (_1387 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1387);
        float _1400 = (dot(vec3(_580, _581, _582), vec3(_1392 * _1384, _1392 * _1385, _1392 * _1386)) + 1.0) * 0.5;
        float _4220 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1409 = sqrt(((_1385 * _1385) + (_1384 * _1384)) + (_1386 * _1386)) / (_1340 + 9.9999997473787516355514526367188e-06);
        float _4231 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1410 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _1411 = _1410 * 2.0;
        float _1415 = (1.0 - _1410) / (_1410 + 1.0);
        float _4242 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
        float _1425 = ((((1.0 - _1416) * (_1411 + 2.0)) * exp2(log2(isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))) * (_1411 + 1.0))) + _1416) * _1340;
        float _1426 = _1308 * 0.5;
        float _1427 = _1318 * 0.5;
        float _1428 = _1328 * 0.5;
        float _1429 = dot(vec3(_1426, _1427, _1428), vec3(_1426, _1427, _1428));
        float _1434 = (_1429 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1429);
        float _1442 = (dot(vec3(_580, _581, _582), vec3(_1434 * _1426, _1434 * _1427, _1434 * _1428)) + 1.0) * 0.5;
        float _4253 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1451 = sqrt(((_1427 * _1427) + (_1426 * _1426)) + (_1428 * _1428)) / (_1341 + 9.9999997473787516355514526367188e-06);
        float _4264 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1452 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _1453 = _1452 * 2.0;
        float _1457 = (1.0 - _1452) / (_1452 + 1.0);
        float _4275 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1458 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _1467 = ((((1.0 - _1458) * (_1453 + 2.0)) * exp2(log2(isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * (_1453 + 1.0))) + _1458) * _1341;
        _1475 = _1308;
        _1476 = _1307;
        _1477 = _1306;
        _1478 = _1318;
        _1479 = _1317;
        _1480 = _1316;
        _1481 = _1328;
        _1482 = _1327;
        _1483 = _1326;
        _1484 = _1341;
        _1485 = _1340;
        _1486 = _1339;
        _1487 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0)));
        _1488 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0)));
        _1489 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0)));
    }
    else
    {
        _1475 = _1163;
        _1476 = _1163;
        _1477 = _1163;
        _1478 = _1163;
        _1479 = _1163;
        _1480 = _1163;
        _1481 = _1163;
        _1482 = _1163;
        _1483 = _1163;
        _1484 = _1163;
        _1485 = _1163;
        _1486 = _1163;
        _1487 = 0.0;
        _1488 = 0.0;
        _1489 = 0.0;
    }
    float _1499 = (cbModelParam._m0[1u].x * (_1487 - _1175)) + _1175;
    float _1500 = (cbModelParam._m0[1u].x * (_1488 - _1176)) + _1176;
    float _1501 = (cbModelParam._m0[1u].x * (_1489 - _1177)) + _1177;
    float _1522 = fma(_1501, cbSceneParam._m0[89u].z, fma(_1500, cbSceneParam._m0[89u].y, _1499 * cbSceneParam._m0[89u].x));
    float _1525 = fma(_1501, cbSceneParam._m0[90u].z, fma(_1500, cbSceneParam._m0[90u].y, _1499 * cbSceneParam._m0[90u].x));
    float _1528 = fma(_1501, cbSceneParam._m0[91u].z, fma(_1500, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1499));
    float _1543 = _769 * 0.5;
    float _1544 = _770 * 0.5;
    float _1545 = _771 * 0.5;
    float _1546 = dot(vec4(_1543, _1544, _1545, 1.0), vec4(_1477, _1480, _1483, _1486));
    float _1549 = dot(vec4(_1543, _1544, _1545, 1.0), vec4(_1476, _1479, _1482, _1485));
    float _1552 = dot(vec4(_1543, _1544, _1545, 1.0), vec4(_1475, _1478, _1481, _1484));
    float _1586;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1559 = dot(vec4(_1543, _1544, _1545, 1.0), vec4(_1162, _1166, _1169, _1172));
        float _1563 = dot(vec4(_1543, _1544, _1545, 1.0), vec4(_1164, _1167, _1170, _1173));
        float _1567 = dot(vec4(_1543, _1544, _1545, 1.0), vec4(_1165, _1168, _1171, _1174));
        float _1574 = dot(vec4(cbModelParam._m0[39u]), vec4(_1543, _1544, _1545, 1.0));
        _1586 = dot(vec3(isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0)), isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0)), isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1574) ? 0.0 : (isnan(0.0) ? _1574 : max(0.0, _1574))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1586 = 1.0;
    }
    float _1597;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1588 = dot(vec4(cbModelParam._m0[40u]), vec4(_1543, _1544, _1545, 1.0));
        _1597 = dot(vec3(isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0)), isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0)), isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1588) ? 0.0 : (isnan(0.0) ? _1588 : max(0.0, _1588))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1597 = 1.0;
    }
    float _1601 = (_1597 * cbModelParam._m0[1u].x) + (_1586 * (1.0 - cbModelParam._m0[1u].x));
    float _1611 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _583);
    float _1612 = isnan(_1611) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1611 : min(cbModelParam._m0[25u].z, _1611));
    float _1692;
    float _1694;
    float _1696;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1659 = fma(_833, cbModelParam._m0[13u].z, fma(_829, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _825)) + cbModelParam._m0[13u].w;
        float _1663 = fma(_833, cbModelParam._m0[14u].z, fma(_829, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _825)) + cbModelParam._m0[14u].w;
        float _1667 = fma(_833, cbModelParam._m0[15u].z, fma(_829, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _825)) + cbModelParam._m0[15u].w;
        float _1670 = fma(_771, cbModelParam._m0[13u].z, fma(_770, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _769));
        float _1673 = fma(_771, cbModelParam._m0[14u].z, fma(_770, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _769));
        float _1676 = fma(_771, cbModelParam._m0[15u].z, fma(_770, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _769));
        float _1704;
        if (_1670 > 0.0)
        {
            _1704 = abs((1.0 - _1659) / _1670);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1670 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1659 + 1.0) / _1670);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1704 = frontier_phi_17_15_ladder;
        }
        float _1876;
        if (_1673 > 0.0)
        {
            _1876 = abs((1.0 - _1663) / _1673);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1673 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1663 + 1.0) / _1673);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1876 = frontier_phi_26_22_ladder;
        }
        float _2172;
        if (_1676 > 0.0)
        {
            _2172 = abs((1.0 - _1667) / _1676);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1676 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1667 + 1.0) / _1676);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2172 = frontier_phi_38_33_ladder;
        }
        float _2174 = isnan(_1876) ? _1704 : (isnan(_1704) ? _1876 : min(_1704, _1876));
        float _2175 = isnan(_2172) ? _2174 : (isnan(_2174) ? _2172 : min(_2174, _2172));
        float _2179 = (_2175 * _1670) + _1659;
        float _2180 = (_2175 * _1673) + _1663;
        float _2181 = (_2175 * _1676) + _1667;
        float _2182 = _2175 * 9.9999997473787516355514526367188e-05;
        float _2184 = (-1.0) - _2182;
        float _2186 = _2182 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2181 > _2186) || ((_2181 < _2184) || ((_2180 > _2186) || ((_2180 < _2184) || ((_2179 < _2184) || (_2179 > _2186))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2326 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2181, cbModelParam._m0[9u].z, fma(_2180, cbModelParam._m0[9u].y, _2179 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2181, cbModelParam._m0[10u].z, fma(_2180, cbModelParam._m0[10u].y, _2179 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2181, cbModelParam._m0[11u].z, fma(_2180, cbModelParam._m0[11u].y, _2179 * cbModelParam._m0[11u].x))), _1612);
            frontier_phi_16_38_ladder = _2326.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2326.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2326.x * cbModelParam._m0[1u].y;
        }
        _1692 = frontier_phi_16_38_ladder_2;
        _1694 = frontier_phi_16_38_ladder_1;
        _1696 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1680 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_769, _770, _771), _1612);
        _1692 = _1680.x * cbModelParam._m0[1u].y;
        _1694 = _1680.y * cbModelParam._m0[1u].y;
        _1696 = _1680.z * cbModelParam._m0[1u].y;
    }
    float _1700 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _583);
    float _1701 = isnan(_1700) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1700 : min(cbModelParam._m0[25u].w, _1700));
    float _1791;
    float _1793;
    float _1795;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1755 = fma(_833, cbModelParam._m0[21u].z, fma(_829, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _825)) + cbModelParam._m0[21u].w;
        float _1759 = fma(_833, cbModelParam._m0[22u].z, fma(_829, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _825)) + cbModelParam._m0[22u].w;
        float _1763 = fma(_833, cbModelParam._m0[23u].z, fma(_829, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _825)) + cbModelParam._m0[23u].w;
        float _1766 = fma(_771, cbModelParam._m0[21u].z, fma(_770, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _769));
        float _1769 = fma(_771, cbModelParam._m0[22u].z, fma(_770, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _769));
        float _1772 = fma(_771, cbModelParam._m0[23u].z, fma(_770, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _769));
        float _1881;
        if (_1766 > 0.0)
        {
            _1881 = abs((1.0 - _1755) / _1766);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1766 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1755 + 1.0) / _1766);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1881 = frontier_phi_28_24_ladder;
        }
        float _2199;
        if (_1769 > 0.0)
        {
            _2199 = abs((1.0 - _1759) / _1769);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1769 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1759 + 1.0) / _1769);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2199 = frontier_phi_40_35_ladder;
        }
        float _2537;
        if (_1772 > 0.0)
        {
            _2537 = abs((1.0 - _1763) / _1772);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1772 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1763 + 1.0) / _1772);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2537 = frontier_phi_50_47_ladder;
        }
        float _2539 = isnan(_2199) ? _1881 : (isnan(_1881) ? _2199 : min(_1881, _2199));
        float _2540 = isnan(_2537) ? _2539 : (isnan(_2539) ? _2537 : min(_2539, _2537));
        float _2544 = (_2540 * _1766) + _1755;
        float _2545 = (_2540 * _1769) + _1759;
        float _2546 = (_2540 * _1772) + _1763;
        float _2547 = _2540 * 9.9999997473787516355514526367188e-05;
        float _2548 = (-1.0) - _2547;
        float _2550 = _2547 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2546 > _2550) || ((_2546 < _2548) || ((_2545 > _2550) || ((_2545 < _2548) || ((_2544 < _2548) || (_2544 > _2550))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2668 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2546, cbModelParam._m0[17u].z, fma(_2545, cbModelParam._m0[17u].y, _2544 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2546, cbModelParam._m0[18u].z, fma(_2545, cbModelParam._m0[18u].y, _2544 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2546, cbModelParam._m0[19u].z, fma(_2545, cbModelParam._m0[19u].y, _2544 * cbModelParam._m0[19u].x))), _1701);
            frontier_phi_25_50_ladder = _2668.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2668.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2668.x * cbModelParam._m0[1u].z;
        }
        _1791 = frontier_phi_25_50_ladder_2;
        _1793 = frontier_phi_25_50_ladder_1;
        _1795 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1775 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_769, _770, _771), _1701);
        _1791 = _1775.x * cbModelParam._m0[1u].z;
        _1793 = _1775.y * cbModelParam._m0[1u].z;
        _1795 = _1775.z * cbModelParam._m0[1u].z;
    }
    float _1808 = (((_796 * _746) + _797) * _761) * ((cbModelParam._m0[1u].w * (_1791 - _1692)) + _1692);
    float _1810 = (((_796 * _748) + _797) * _761) * ((cbModelParam._m0[1u].w * (_1793 - _1694)) + _1694);
    float _1812 = (((_796 * _749) + _797) * _761) * ((cbModelParam._m0[1u].w * (_1795 - _1696)) + _1696);
    float _1815 = fma(_1812, cbSceneParam._m0[89u].z, fma(_1810, cbSceneParam._m0[89u].y, _1808 * cbSceneParam._m0[89u].x));
    float _1818 = fma(_1812, cbSceneParam._m0[90u].z, fma(_1810, cbSceneParam._m0[90u].y, _1808 * cbSceneParam._m0[90u].x));
    float _1821 = fma(_1812, cbSceneParam._m0[91u].z, fma(_1810, cbSceneParam._m0[91u].y, _1808 * cbSceneParam._m0[91u].x));
    float _1855 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1859 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1863 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1867 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1868 = _1855 / _1867;
    float _1869 = _1859 / _1867;
    float _1870 = _1863 / _1867;
    float _2017;
    float _2018;
    float _2019;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1897 = ((uint(_1870 > cbSceneParam._m0[59u].y) + uint(_1870 > cbSceneParam._m0[59u].x)) + uint(_1870 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1898 = _1897 + 43u;
        uint _1906 = _1897 + 44u;
        uint _1914 = _1897 + 45u;
        uint _1922 = _1897 + 46u;
        float _1933 = fma(_1867, cbSceneParam._m0[_1898].w, fma(_1863, cbSceneParam._m0[_1898].z, fma(_1859, cbSceneParam._m0[_1898].y, _1855 * cbSceneParam._m0[_1898].x)));
        float _1937 = fma(_1867, cbSceneParam._m0[_1906].w, fma(_1863, cbSceneParam._m0[_1906].z, fma(_1859, cbSceneParam._m0[_1906].y, _1855 * cbSceneParam._m0[_1906].x)));
        float _1945 = fma(_1867, cbSceneParam._m0[_1922].w, fma(_1863, cbSceneParam._m0[_1922].z, fma(_1859, cbSceneParam._m0[_1922].y, _1855 * cbSceneParam._m0[_1922].x)));
        float _1950 = cbSceneParam._m0[33u].z * _1945;
        float _1952 = cbSceneParam._m0[33u].w * _1945;
        float _1955 = fma(_1867, cbSceneParam._m0[_1914].w, fma(_1863, cbSceneParam._m0[_1914].z, fma(_1859, cbSceneParam._m0[_1914].y, _1855 * cbSceneParam._m0[_1914].x))) / _1945;
        float _2003 = (cbSceneParam._m0[33u].x - sqrt(((_1869 * _1869) + (_1868 * _1868)) + (_1870 * _1870))) * cbSceneParam._m0[33u].y;
        float _4401 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
        float _2010 = (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1950 + _1933) / _1945, (_1952 + _1937) / _1945), _1955), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1952 + _1933) / _1945, (_1937 - _1950) / _1945), _1955), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1933 - _1950) / _1945, (_1937 - _1952) / _1945), _1955), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1933 - _1952) / _1945, (_1950 + _1937) / _1945), _1955), 0.0)).x), vec4(0.25)));
        _2017 = 1.0 - (_2010 * cbSceneParam._m0[34u].x);
        _2018 = 1.0 - (_2010 * cbSceneParam._m0[34u].y);
        _2019 = 1.0 - (_2010 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2017 = 1.0;
        _2018 = 1.0;
        _2019 = 1.0;
    }
    float _2083;
    float _2085;
    float _2087;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2071 = fma(_1867, cbSceneParam._m0[63u].w, fma(_1863, cbSceneParam._m0[63u].z, fma(_1859, cbSceneParam._m0[63u].y, _1855 * cbSceneParam._m0[63u].x)));
        float _2072 = fma(_1867, cbSceneParam._m0[60u].w, fma(_1863, cbSceneParam._m0[60u].z, fma(_1859, cbSceneParam._m0[60u].y, _1855 * cbSceneParam._m0[60u].x))) / _2071;
        float _2073 = fma(_1867, cbSceneParam._m0[61u].w, fma(_1863, cbSceneParam._m0[61u].z, fma(_1859, cbSceneParam._m0[61u].y, _1855 * cbSceneParam._m0[61u].x))) / _2071;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2072 >= cbSceneParam._m0[64u].x) && (_2073 >= cbSceneParam._m0[64u].y)) && (_2072 <= cbSceneParam._m0[64u].z)) && (_2073 <= cbSceneParam._m0[64u].w))
        {
            float _2212 = fma(_1867, cbSceneParam._m0[62u].w, fma(_1863, cbSceneParam._m0[62u].z, fma(_1859, cbSceneParam._m0[62u].y, _1855 * cbSceneParam._m0[62u].x))) / _2071;
            float _2216 = isnan(cbSceneParam._m0[41u].w) ? _2212 : (isnan(_2212) ? cbSceneParam._m0[41u].w : max(_2212, cbSceneParam._m0[41u].w));
            float _2259 = (cbSceneParam._m0[33u].x - sqrt(((_1869 * _1869) + (_1868 * _1868)) + (_1870 * _1870))) * cbSceneParam._m0[33u].y;
            float _4417 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
            float _2266 = (isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2072, cbSceneParam._m0[33u].w + _2073), _2216), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2072, _2073 - cbSceneParam._m0[33u].z), _2216), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2072 - cbSceneParam._m0[33u].z, _2073 - cbSceneParam._m0[33u].w), _2216), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2072 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2073), _2216), 0.0)).x), vec4(0.25)));
            float _2270 = 1.0 - (_2266 * cbSceneParam._m0[34u].x);
            float _2271 = 1.0 - (_2266 * cbSceneParam._m0[34u].y);
            float _2272 = 1.0 - (_2266 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2272) ? _2019 : (isnan(_2019) ? _2272 : min(_2019, _2272));
            frontier_phi_37_36_ladder_1 = isnan(_2271) ? _2018 : (isnan(_2018) ? _2271 : min(_2018, _2271));
            frontier_phi_37_36_ladder_2 = isnan(_2270) ? _2017 : (isnan(_2017) ? _2270 : min(_2017, _2270));
        }
        else
        {
            frontier_phi_37_36_ladder = _2019;
            frontier_phi_37_36_ladder_1 = _2018;
            frontier_phi_37_36_ladder_2 = _2017;
        }
        _2083 = frontier_phi_37_36_ladder_2;
        _2085 = frontier_phi_37_36_ladder_1;
        _2087 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2083 = _2017;
        _2085 = _2018;
        _2087 = _2019;
    }
    uvec4 _2092 = floatBitsToUint(cbInstanceData._m0[_721 + 5u]);
    uint _2094 = _2092.x * 14u;
    uint _2095 = _2094 + 13u;
    float _2102 = _761 + (-1.0);
    float _2107 = (cbLight._m0[_2095].x * _2102) + 1.0;
    float _2108 = (cbLight._m0[_2095].y * _2102) + 1.0;
    float _2109 = (cbLight._m0[_2095].z * _2102) + 1.0;
    float _2110 = (cbLight._m0[_2095].w * _2102) + 1.0;
    uint _2111 = _2094 + 5u;
    float _2117 = isnan(1.0) ? _2108 : (isnan(_2108) ? 1.0 : min(_2108, 1.0));
    uint _2121 = _2094 + 4u;
    float _2131 = isnan(1.0) ? _2107 : (isnan(_2107) ? 1.0 : min(_2107, 1.0));
    uint _2135 = _2094 | 1u;
    float _2146 = dot(vec3(cbLight._m0[_2094].xyz), vec3(_580, _581, _582));
    float _2149 = dot(vec3(cbLight._m0[_2135].xyz), vec3(_580, _581, _582));
    float _4453 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
    float _4464 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
    float _2154 = (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0))) * 0.3183098733425140380859375;
    float _2156 = (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * 0.3183098733425140380859375;
    float _2163 = ((cbLight._m0[_2111].x * _2117) * _2156) + (((cbLight._m0[_2121].x * _2083) * _2131) * _2154);
    float _2164 = ((_2117 * cbLight._m0[_2111].y) * _2156) + (((cbLight._m0[_2121].y * _2085) * _2131) * _2154);
    float _2165 = ((_2117 * cbLight._m0[_2111].z) * _2156) + (((cbLight._m0[_2121].z * _2087) * _2131) * _2154);
    uvec4 _2169 = floatBitsToUint(cbLight._m0[_2094 + 12u]);
    bool _2171 = _2169.x == 0u;
    float _2273;
    float _2275;
    float _2277;
    if (_2171)
    {
        _2273 = _2163;
        _2275 = _2164;
        _2277 = _2165;
    }
    else
    {
        uint _2281 = _2094 + 6u;
        float _2297 = (dot(vec3(cbLight._m0[_2094 + 2u].xyz), vec3(_580, _581, _582)) * 0.5) + 0.5;
        float _2298 = _2297 * _2297;
        float _4475 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
        float _2299 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
        float _2300 = isnan(1.0) ? _2109 : (isnan(_2109) ? 1.0 : min(_2109, 1.0));
        _2273 = (((cbLight._m0[_2281].x * 0.3183098733425140380859375) * _2299) * _2300) + _2163;
        _2275 = (((cbLight._m0[_2281].y * 0.3183098733425140380859375) * _2299) * _2300) + _2164;
        _2277 = (((cbLight._m0[_2281].z * 0.3183098733425140380859375) * _2299) * _2300) + _2165;
    }
    bool _2280 = _2169.y == 0u;
    float _2335;
    float _2337;
    float _2339;
    if (_2280)
    {
        _2335 = _2273;
        _2337 = _2275;
        _2339 = _2277;
    }
    else
    {
        uint _2508 = _2094 + 7u;
        float _2524 = (dot(vec3(cbLight._m0[_2094 + 3u].xyz), vec3(_580, _581, _582)) * 0.5) + 0.5;
        float _2525 = _2524 * _2524;
        float _4491 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
        float _2526 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
        float _2527 = isnan(1.0) ? _2110 : (isnan(_2110) ? 1.0 : min(_2110, 1.0));
        _2335 = (((cbLight._m0[_2508].x * 0.3183098733425140380859375) * _2526) * _2527) + _2273;
        _2337 = (((cbLight._m0[_2508].y * 0.3183098733425140380859375) * _2526) * _2527) + _2275;
        _2339 = (((cbLight._m0[_2508].z * 0.3183098733425140380859375) * _2526) * _2527) + _2277;
    }
    uint _2342 = _2094 + 8u;
    float _2355 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2094].w)) * _583) * 0.949999988079071044921875);
    float _2356 = _2355 * _2355;
    float _2357 = cbLight._m0[_2094].x + _661;
    float _2358 = cbLight._m0[_2094].y + _662;
    float _2359 = cbLight._m0[_2094].z + _663;
    float _2363 = inversesqrt(dot(vec3(_2357, _2358, _2359), vec3(_2357, _2358, _2359)));
    float _2364 = _2363 * _2357;
    float _2365 = _2363 * _2358;
    float _2366 = _2363 * _2359;
    float _2367 = dot(vec3(_580, _581, _582), vec3(cbLight._m0[_2094].xyz));
    float _4507 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
    float _2370 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
    float _4518 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _2371 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
    float _2372 = dot(vec3(_580, _581, _582), vec3(_2364, _2365, _2366));
    float _4529 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
    float _2375 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
    float _2376 = dot(vec3(cbLight._m0[_2094].xyz), vec3(_2364, _2365, _2366));
    float _4540 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
    float _2380 = _2356 * _2356;
    float _2384 = ((_2375 * _2375) * (_2380 + (-1.0))) + 1.0;
    float _2392 = exp2(log2(1.0 - (isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0)))) * 5.0);
    float _2393 = 0.959999978542327880859375 - _743;
    float _2395 = 0.959999978542327880859375 - _744;
    float _2396 = 0.959999978542327880859375 - _745;
    float _2403 = 1.0 - _2356;
    float _2414 = (0.5 / (((_2371 * ((_2370 * _2403) + _2356)) + 9.9999999392252902907785028219223e-09) + (((_2371 * _2403) + _2356) * _2370))) * _2370;
    float _4551 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
    float _2416 = (isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0))) * (_2380 / ((_2384 * _2384) * 3.141590118408203125));
    uint _2430 = _2094 + 9u;
    float _2441 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2135].w)) * _583) * 0.949999988079071044921875);
    float _2442 = _2441 * _2441;
    float _2443 = cbLight._m0[_2135].x + _661;
    float _2444 = cbLight._m0[_2135].y + _662;
    float _2445 = cbLight._m0[_2135].z + _663;
    float _2449 = inversesqrt(dot(vec3(_2443, _2444, _2445), vec3(_2443, _2444, _2445)));
    float _2450 = _2449 * _2443;
    float _2451 = _2449 * _2444;
    float _2452 = _2449 * _2445;
    float _2453 = dot(vec3(_580, _581, _582), vec3(cbLight._m0[_2135].xyz));
    float _4562 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
    float _2456 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
    float _2457 = dot(vec3(_580, _581, _582), vec3(_2450, _2451, _2452));
    float _4573 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
    float _2460 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
    float _2461 = dot(vec3(cbLight._m0[_2135].xyz), vec3(_2450, _2451, _2452));
    float _4584 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
    float _2465 = _2442 * _2442;
    float _2469 = ((_2460 * _2460) * (_2465 + (-1.0))) + 1.0;
    float _2476 = exp2(log2(1.0 - (isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0)))) * 5.0);
    float _2483 = 1.0 - _2442;
    float _2493 = (0.5 / (((_2371 * ((_2456 * _2483) + _2442)) + 9.9999999392252902907785028219223e-09) + (((_2371 * _2483) + _2442) * _2456))) * _2456;
    float _4595 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
    float _2495 = (isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0))) * (_2465 / ((_2469 * _2469) * 3.141590118408203125));
    float _2505 = (((((_2476 * _2393) + _746) * cbLight._m0[_2430].x) * _2495) * _2117) + ((((cbLight._m0[_2342].x * _2083) * ((_2392 * _2393) + _746)) * _2416) * _2131);
    float _2506 = (((((_2476 * _2395) + _748) * cbLight._m0[_2430].y) * _2495) * _2117) + ((((cbLight._m0[_2342].y * _2085) * ((_2392 * _2395) + _748)) * _2416) * _2131);
    float _2507 = (((((_2476 * _2396) + _749) * cbLight._m0[_2430].z) * _2495) * _2117) + ((((cbLight._m0[_2342].z * _2087) * ((_2392 * _2396) + _749)) * _2416) * _2131);
    float _2563;
    float _2565;
    float _2567;
    if (_2171)
    {
        _2563 = _2505;
        _2565 = _2506;
        _2567 = _2507;
    }
    else
    {
        uint _2569 = _2094 + 2u;
        uint _2573 = _2094 + 10u;
        float _2587 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2569].w)) * _583) * 0.949999988079071044921875);
        float _2588 = _2587 * _2587;
        float _2589 = cbLight._m0[_2569].x + _661;
        float _2590 = cbLight._m0[_2569].y + _662;
        float _2591 = cbLight._m0[_2569].z + _663;
        float _2595 = inversesqrt(dot(vec3(_2589, _2590, _2591), vec3(_2589, _2590, _2591)));
        float _2596 = _2595 * _2589;
        float _2597 = _2595 * _2590;
        float _2598 = _2595 * _2591;
        float _2599 = dot(vec3(_580, _581, _582), vec3(cbLight._m0[_2569].xyz));
        float _4606 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
        float _2602 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
        float _2603 = dot(vec3(_580, _581, _582), vec3(_2596, _2597, _2598));
        float _4617 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
        float _2606 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
        float _2607 = dot(vec3(cbLight._m0[_2569].xyz), vec3(_2596, _2597, _2598));
        float _4628 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
        float _2611 = _2588 * _2588;
        float _2615 = ((_2606 * _2606) * (_2611 + (-1.0))) + 1.0;
        float _2622 = exp2(log2(1.0 - (isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0)))) * 5.0);
        float _2629 = 1.0 - _2588;
        float _2639 = (0.5 / (((_2371 * ((_2602 * _2629) + _2588)) + 9.9999999392252902907785028219223e-09) + (((_2371 * _2629) + _2588) * _2602))) * _2602;
        float _4639 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
        float _2641 = (isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0))) * (_2611 / ((_2615 * _2615) * 3.141590118408203125));
        float _2642 = isnan(1.0) ? _2109 : (isnan(_2109) ? 1.0 : min(_2109, 1.0));
        _2563 = (((((_2622 * _2393) + _746) * cbLight._m0[_2573].x) * _2641) * _2642) + _2505;
        _2565 = (((((_2622 * _2395) + _748) * cbLight._m0[_2573].y) * _2641) * _2642) + _2506;
        _2567 = (((((_2622 * _2396) + _749) * cbLight._m0[_2573].z) * _2641) * _2642) + _2507;
    }
    float _2673;
    float _2675;
    float _2677;
    if (_2280)
    {
        _2673 = _2563;
        _2675 = _2565;
        _2677 = _2567;
    }
    else
    {
        uint _2684 = _2094 + 3u;
        uint _2688 = _2094 + 11u;
        float _2702 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2684].w)) * _583) * 0.949999988079071044921875);
        float _2703 = _2702 * _2702;
        float _2704 = cbLight._m0[_2684].x + _661;
        float _2705 = cbLight._m0[_2684].y + _662;
        float _2706 = cbLight._m0[_2684].z + _663;
        float _2710 = inversesqrt(dot(vec3(_2704, _2705, _2706), vec3(_2704, _2705, _2706)));
        float _2711 = _2710 * _2704;
        float _2712 = _2710 * _2705;
        float _2713 = _2710 * _2706;
        float _2714 = dot(vec3(_580, _581, _582), vec3(cbLight._m0[_2684].xyz));
        float _4655 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
        float _2717 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
        float _2718 = dot(vec3(_580, _581, _582), vec3(_2711, _2712, _2713));
        float _4666 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
        float _2721 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
        float _2722 = dot(vec3(cbLight._m0[_2684].xyz), vec3(_2711, _2712, _2713));
        float _4677 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
        float _2726 = _2703 * _2703;
        float _2730 = ((_2721 * _2721) * (_2726 + (-1.0))) + 1.0;
        float _2737 = exp2(log2(1.0 - (isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0)))) * 5.0);
        float _2744 = 1.0 - _2703;
        float _2754 = (0.5 / (((_2371 * ((_2717 * _2744) + _2703)) + 9.9999999392252902907785028219223e-09) + (((_2371 * _2744) + _2703) * _2717))) * _2717;
        float _4688 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
        float _2756 = (isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0))) * (_2726 / ((_2730 * _2730) * 3.141590118408203125));
        float _2757 = isnan(1.0) ? _2110 : (isnan(_2110) ? 1.0 : min(_2110, 1.0));
        _2673 = (((((_2737 * _2393) + _746) * cbLight._m0[_2688].x) * _2756) * _2757) + _2563;
        _2675 = (((((_2737 * _2395) + _748) * cbLight._m0[_2688].y) * _2756) * _2757) + _2565;
        _2677 = (((((_2737 * _2396) + _749) * cbLight._m0[_2688].z) * _2756) * _2757) + _2567;
    }
    float _2823;
    float _2825;
    float _2827;
    float _2829;
    float _2831;
    float _2833;
    if (_2092.y == 0u)
    {
        uvec4 _2778 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2779 = _2778.x;
        uint _2790 = uint((float(_2778.y) * floor(float(uint(cbSceneParam._m0[85u].y * _682) / _2779))) + floor(float(uint(cbSceneParam._m0[85u].x * _681) / _2779)));
        float _2800 = (log2(_1870 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2801 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
        uint _2804 = uint(isnan(14.0) ? _2801 : (isnan(_2801) ? 14.0 : min(_2801, 14.0)));
        uvec4 _2809 = texelFetch(g_lightClusterGridBuffer, int(((_2804 << 2u) + (_2790 << 6u)) >> 2u));
        uint _2810 = _2809.x;
        uint _2811 = _2778.z;
        float _2919;
        float _2921;
        float _2923;
        float _2925;
        float _2927;
        float _2929;
        if (((((1u << ((_2811 >> 4u) & 15u)) + 4294967295u) & _2810) == 0u) || ((_2811 & 240u) == 0u))
        {
            _2919 = 0.0;
            _2921 = 0.0;
            _2923 = 0.0;
            _2925 = 0.0;
            _2927 = 0.0;
            _2929 = 0.0;
        }
        else
        {
            float _2920;
            float _2922;
            float _2924;
            float _2926;
            float _2928;
            float _2930;
            float _3080 = 0.0;
            float _3081 = 0.0;
            float _3082 = 0.0;
            float _3083 = 0.0;
            float _3084 = 0.0;
            float _3085 = 0.0;
            uint _3086 = 0u;
            uint _3095;
            bool _3096;
            for (;;)
            {
                _3095 = texelFetch(g_lightClassification, int((((_2804 << 5u) + (_2790 << 9u)) + (_3086 << 2u)) >> 2u)).x;
                _3096 = _3095 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3096)
                {
                    frontier_phi_71_pred = _3085;
                    frontier_phi_71_pred_1 = _3084;
                    frontier_phi_71_pred_2 = _3083;
                    frontier_phi_71_pred_3 = _3082;
                    frontier_phi_71_pred_4 = _3081;
                    frontier_phi_71_pred_5 = _3080;
                }
                else
                {
                    float _3225;
                    float _3226;
                    float _3227;
                    float _3228;
                    float _3229;
                    float _3230;
                    uint _3231;
                    _3225 = _3080;
                    _3226 = _3081;
                    _3227 = _3082;
                    _3228 = _3083;
                    _3229 = _3084;
                    _3230 = _3085;
                    _3231 = _3095;
                    float _3152;
                    float _3153;
                    float _3154;
                    float _3155;
                    float _3156;
                    float _3157;
                    for (;;)
                    {
                        uint _3235 = uint(findLSB(_3231)) + (_3086 << 5u);
                        uint _3232 = (_3231 + 4294967295u) & _3231;
                        uint _3237 = _3235 * 48u;
                        vec4 _3251 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3237)).x, texelFetch(g_PointLightRenderingBuffer, int(_3237 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3237 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3237 + 3u)).x));
                        uint _3257 = (_3235 * 48u) + 4u;
                        vec4 _3270 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3257)).x, texelFetch(g_PointLightRenderingBuffer, int(_3257 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3257 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3257 + 3u)).x));
                        uint _3276 = (_3235 * 48u) + 8u;
                        vec3 _3287 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3276)).x, texelFetch(g_PointLightRenderingBuffer, int(_3276 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3276 + 2u)).x));
                        float _3291 = _3251.x - _1868;
                        float _3292 = _3251.y - _1869;
                        float _3293 = _3251.z - _1870;
                        float _3294 = dot(vec3(_3291, _3292, _3293), vec3(_3291, _3292, _3293));
                        float _3297 = inversesqrt(_3294);
                        float _3298 = _3297 * _3291;
                        float _3299 = _3297 * _3292;
                        float _3300 = _3297 * _3293;
                        float _3301 = dot(vec3(_702, _705, _708), vec3(_3298, _3299, _3300));
                        float _3306 = 1.0 - (_3294 * _3251.w);
                        float _4714 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
                        float _3307 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
                        float _3308 = sqrt(_3294) * _3270.w;
                        float _3311 = 1.39999997615814208984375 / (_3308 + 1.39999997615814208984375);
                        float _3312 = _3311 * _3311;
                        float _3315 = ((1.0 - _3312) * _3301) + _3312;
                        float _3318 = _3308 * _3308;
                        float _3322 = ((isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : max(_3315, 0.0))) * _3307) / ((_3318 * 0.699999988079071044921875) + 1.0);
                        float _3326 = (-0.0) - _1868;
                        float _3327 = (-0.0) - _1869;
                        float _3328 = (-0.0) - _1870;
                        float _3332 = inversesqrt(dot(vec3(_3326, _3327, _3328), vec3(_3326, _3327, _3328)));
                        float _3333 = _3332 * _3326;
                        float _3334 = _3332 * _3327;
                        float _3335 = _3332 * _3328;
                        float _3342 = exp2(log2(1.0 / ((_3318 * 3.5) + 5.0)) * 0.25);
                        float _3343 = 1.0 - _777;
                        float _3350 = sqrt(1.0 - ((1.0 - (_3343 * _3343)) * (1.0 - (_3342 * _3342))));
                        float _3351 = _3350 * _3350;
                        float _3352 = _3351 * _3351;
                        float _3353 = _3333 + _3298;
                        float _3354 = _3334 + _3299;
                        float _3355 = _3335 + _3300;
                        float _3359 = inversesqrt(dot(vec3(_3353, _3354, _3355), vec3(_3353, _3354, _3355)));
                        float _3363 = dot(vec3(_702, _705, _708), vec3(_3333, _3334, _3335));
                        float _4730 = isnan(0.0) ? _3363 : (isnan(_3363) ? 0.0 : max(_3363, 0.0));
                        float _3366 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
                        float _3367 = dot(vec3(_702, _705, _708), vec3(_3359 * _3353, _3359 * _3354, _3359 * _3355));
                        float _4741 = isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0));
                        float _3370 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
                        float _3374 = ((_3370 * _3370) * (_3352 + (-1.0))) + 1.0;
                        float _3375 = _3311 * _3351;
                        float _3376 = _3375 * _3375;
                        float _3379 = ((1.0 - _3376) * _3301) + _3376;
                        float _4752 = isnan(0.0) ? _3379 : (isnan(_3379) ? 0.0 : max(_3379, 0.0));
                        float _3380 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
                        float _3381 = 1.0 - _3351;
                        float _3391 = (0.5 / (((_3380 * ((_3366 * _3381) + _3351)) + 9.9999999392252902907785028219223e-09) + (((_3380 * _3381) + _3351) * _3366))) * _3380;
                        float _4763 = isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : max(_3391, 0.0));
                        float _3402 = (((_3352 * 3.1415927410125732421875) * (isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0)))) / ((_3374 * _3374) * ((_3318 * 2.1991131305694580078125) + 3.141590118408203125))) * _3307;
                        _3155 = (_3322 * _3270.x) + _3228;
                        _3156 = (_3322 * _3270.y) + _3229;
                        _3157 = (_3322 * _3270.z) + _3230;
                        _3152 = (_3402 * _3287.x) + _3225;
                        _3153 = (_3402 * _3287.y) + _3226;
                        _3154 = (_3402 * _3287.z) + _3227;
                        if (_3232 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3225 = _3152;
                            _3226 = _3153;
                            _3227 = _3154;
                            _3228 = _3155;
                            _3229 = _3156;
                            _3230 = _3157;
                            _3231 = _3232;
                        }
                    }
                    frontier_phi_71_pred = _3157;
                    frontier_phi_71_pred_1 = _3156;
                    frontier_phi_71_pred_2 = _3155;
                    frontier_phi_71_pred_3 = _3154;
                    frontier_phi_71_pred_4 = _3153;
                    frontier_phi_71_pred_5 = _3152;
                }
                _2930 = frontier_phi_71_pred;
                _2928 = frontier_phi_71_pred_1;
                _2926 = frontier_phi_71_pred_2;
                _2924 = frontier_phi_71_pred_3;
                _2922 = frontier_phi_71_pred_4;
                _2920 = frontier_phi_71_pred_5;
                uint _3087 = _3086 + 1u;
                if (_3087 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3080 = _2920;
                    _3081 = _2922;
                    _3082 = _2924;
                    _3083 = _2926;
                    _3084 = _2928;
                    _3085 = _2930;
                    _3086 = _3087;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2919 = _2920;
            _2921 = _2922;
            _2923 = _2924;
            _2925 = _2926;
            _2927 = _2928;
            _2929 = _2930;
        }
        uvec4 _2933 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2934 = _2933.z;
        uint _2936 = (_2934 >> 8u) & 15u;
        float _3048;
        float _3050;
        float _3052;
        float _3054;
        float _3056;
        float _3058;
        if (((4294967295u << _2936) & _2810) == 0u)
        {
            _3048 = _2919;
            _3050 = _2921;
            _3052 = _2923;
            _3054 = _2925;
            _3056 = _2927;
            _3058 = _2929;
        }
        else
        {
            float _3073 = inversesqrt(dot(vec3(_1868, _1869, _1870), vec3(_1868, _1869, _1870)));
            float _3074 = _3073 * _1868;
            float _3075 = _3073 * _1869;
            float _3076 = _3073 * _1870;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2936 < ((_2934 >> 12u) & 15u))
            {
                float _3049;
                float _3051;
                float _3053;
                float _3055;
                float _3057;
                float _3059;
                float _3208 = _2919;
                float _3209 = _2921;
                float _3210 = _2923;
                float _3211 = _2925;
                float _3212 = _2927;
                float _3213 = _2929;
                uint _3214 = _2936;
                uint _3223;
                bool _3224;
                for (;;)
                {
                    _3223 = texelFetch(g_lightClassification, int((((_2804 << 5u) + (_2790 << 9u)) + (_3214 << 2u)) >> 2u)).x;
                    _3224 = _3223 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3224)
                    {
                        frontier_phi_82_pred = _3213;
                        frontier_phi_82_pred_1 = _3212;
                        frontier_phi_82_pred_2 = _3211;
                        frontier_phi_82_pred_3 = _3210;
                        frontier_phi_82_pred_4 = _3209;
                        frontier_phi_82_pred_5 = _3208;
                    }
                    else
                    {
                        float _3416;
                        float _3417;
                        float _3418;
                        float _3419;
                        float _3420;
                        float _3421;
                        float _3710;
                        float _3711;
                        float _3712;
                        float _3713;
                        float _3714;
                        float _3715;
                        float _3429 = _3208;
                        float _3430 = _3209;
                        float _3431 = _3210;
                        float _3432 = _3211;
                        float _3433 = _3212;
                        float _3434 = _3213;
                        uint _3435 = _3223;
                        uint _3436;
                        vec4 _3461;
                        float _3462;
                        vec4 _3477;
                        vec3 _3489;
                        vec4 _3504;
                        vec4 _3519;
                        float _3566;
                        bool _3567;
                        for (;;)
                        {
                            uint _3446 = ((_3214 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3435));
                            _3436 = (_3435 + 4294967295u) & _3435;
                            uint _3448 = _3446 * 40u;
                            _3461 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3448)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 3u)).x));
                            _3462 = _3461.w;
                            uint _3464 = (_3446 * 40u) + 4u;
                            _3477 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3464)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 3u)).x));
                            uint _3479 = (_3446 * 40u) + 8u;
                            _3489 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3479)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 2u)).x));
                            uint _3491 = (_3446 * 40u) + 16u;
                            _3504 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3491)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 3u)).x));
                            uint _3506 = (_3446 * 40u) + 20u;
                            _3519 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3506)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 3u)).x));
                            uint _3522 = (_3446 * 40u) + 24u;
                            vec4 _3535 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3522)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 3u)).x));
                            uint _3541 = (_3446 * 40u) + 28u;
                            vec4 _3554 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3541)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 3u)).x));
                            _3566 = fma(_1870, _3554.z, fma(_1869, _3554.y, _3554.x * _1868)) + _3554.w;
                            _3567 = !((fma(_1870, _3535.z, fma(_1869, _3535.y, _3535.x * _1868)) + _3535.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3567)
                            {
                                float _3594 = _3461.x - _1868;
                                float _3595 = _3461.y - _1869;
                                float _3596 = _3461.z - _1870;
                                float _3597 = dot(vec3(_3594, _3595, _3596), vec3(_3594, _3595, _3596));
                                float _3600 = inversesqrt(_3597);
                                float _3601 = _3600 * _3594;
                                float _3602 = _3600 * _3595;
                                float _3603 = _3600 * _3596;
                                float _3607 = 1.0 - (_3597 / (_3462 * _3462));
                                float _4774 = isnan(0.0) ? _3607 : (isnan(_3607) ? 0.0 : max(_3607, 0.0));
                                float _3608 = isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0));
                                float _3612 = sqrt(_3597) * _3477.w;
                                float _3614 = 1.39999997615814208984375 / (_3612 + 1.39999997615814208984375);
                                float _3615 = _3614 * _3614;
                                float _3618 = ((1.0 - _3615) * dot(vec3(_3601, _3602, _3603), vec3(_702, _705, _708))) + _3615;
                                float _3621 = _3612 * _3612;
                                float _3625 = (fma(_1870, _3504.z, fma(_1869, _3504.y, _3504.x * _1868)) + _3504.w) / _3566;
                                float _3626 = (fma(_1870, _3519.z, fma(_1869, _3519.y, _3519.x * _1868)) + _3519.w) / _3566;
                                float _3630 = 1.0 - dot(vec2(_3625, _3626), vec2(_3625, _3626));
                                float _4790 = isnan(0.0) ? _3630 : (isnan(_3630) ? 0.0 : max(_3630, 0.0));
                                float _3631 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
                                float _3632 = _3631 * (((isnan(0.0) ? _3618 : (isnan(_3618) ? 0.0 : max(_3618, 0.0))) * _3608) / ((_3621 * 0.699999988079071044921875) + 1.0));
                                float _3644 = exp2(log2(1.0 / ((_3621 * 3.5) + 5.0)) * 0.25);
                                float _3645 = 1.0 - _777;
                                float _3652 = sqrt(1.0 - ((1.0 - (_3645 * _3645)) * (1.0 - (_3644 * _3644))));
                                float _3653 = _3652 * _3652;
                                float _3654 = _3653 * _3653;
                                float _3655 = _3601 - _3074;
                                float _3656 = _3602 - _3075;
                                float _3657 = _3603 - _3076;
                                float _3661 = inversesqrt(dot(vec3(_3655, _3656, _3657), vec3(_3655, _3656, _3657)));
                                float _3665 = dot(vec3(_702, _705, _708), vec3((-0.0) - _3074, (-0.0) - _3075, (-0.0) - _3076));
                                float _4801 = isnan(0.0) ? _3665 : (isnan(_3665) ? 0.0 : max(_3665, 0.0));
                                float _3668 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
                                float _3669 = dot(vec3(_702, _705, _708), vec3(_3661 * _3655, _3661 * _3656, _3661 * _3657));
                                float _4812 = isnan(0.0) ? _3669 : (isnan(_3669) ? 0.0 : max(_3669, 0.0));
                                float _3672 = isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0));
                                float _3676 = ((_3672 * _3672) * (_3654 + (-1.0))) + 1.0;
                                float _3677 = _3614 * _3653;
                                float _3678 = _3677 * _3677;
                                float _3684 = ((1.0 - _3678) * dot(vec3(_702, _705, _708), vec3(_3601, _3602, _3603))) + _3678;
                                float _4823 = isnan(0.0) ? _3684 : (isnan(_3684) ? 0.0 : max(_3684, 0.0));
                                float _3685 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
                                float _3686 = 1.0 - _3653;
                                float _3696 = (0.5 / (((_3685 * ((_3668 * _3686) + _3653)) + 9.9999999392252902907785028219223e-09) + (((_3685 * _3686) + _3653) * _3668))) * _3685;
                                float _4834 = isnan(0.0) ? _3696 : (isnan(_3696) ? 0.0 : max(_3696, 0.0));
                                float _3706 = (_3631 * _3608) * (((_3654 * 3.1415927410125732421875) * (isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0)))) / ((_3676 * _3676) * ((_3621 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3632 * _3477.z;
                                frontier_phi_88_pred_1 = _3632 * _3477.y;
                                frontier_phi_88_pred_2 = _3632 * _3477.x;
                                frontier_phi_88_pred_3 = _3706 * _3489.z;
                                frontier_phi_88_pred_4 = _3706 * _3489.y;
                                frontier_phi_88_pred_5 = _3706 * _3489.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3715 = frontier_phi_88_pred;
                            _3714 = frontier_phi_88_pred_1;
                            _3713 = frontier_phi_88_pred_2;
                            _3712 = frontier_phi_88_pred_3;
                            _3711 = frontier_phi_88_pred_4;
                            _3710 = frontier_phi_88_pred_5;
                            _3419 = _3713 + _3432;
                            _3420 = _3714 + _3433;
                            _3421 = _3715 + _3434;
                            _3416 = _3710 + _3429;
                            _3417 = _3711 + _3430;
                            _3418 = _3712 + _3431;
                            if (_3436 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3429 = _3416;
                                _3430 = _3417;
                                _3431 = _3418;
                                _3432 = _3419;
                                _3433 = _3420;
                                _3434 = _3421;
                                _3435 = _3436;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3421;
                        frontier_phi_82_pred_1 = _3420;
                        frontier_phi_82_pred_2 = _3419;
                        frontier_phi_82_pred_3 = _3418;
                        frontier_phi_82_pred_4 = _3417;
                        frontier_phi_82_pred_5 = _3416;
                    }
                    _3059 = frontier_phi_82_pred;
                    _3057 = frontier_phi_82_pred_1;
                    _3055 = frontier_phi_82_pred_2;
                    _3053 = frontier_phi_82_pred_3;
                    _3051 = frontier_phi_82_pred_4;
                    _3049 = frontier_phi_82_pred_5;
                    uint _3215 = _3214 + 1u;
                    if (_3215 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3208 = _3049;
                        _3209 = _3051;
                        _3210 = _3053;
                        _3211 = _3055;
                        _3212 = _3057;
                        _3213 = _3059;
                        _3214 = _3215;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3055;
                frontier_phi_63_64_ladder_1 = _3059;
                frontier_phi_63_64_ladder_2 = _3057;
                frontier_phi_63_64_ladder_3 = _3053;
                frontier_phi_63_64_ladder_4 = _3051;
                frontier_phi_63_64_ladder_5 = _3049;
            }
            else
            {
                frontier_phi_63_64_ladder = _2925;
                frontier_phi_63_64_ladder_1 = _2929;
                frontier_phi_63_64_ladder_2 = _2927;
                frontier_phi_63_64_ladder_3 = _2923;
                frontier_phi_63_64_ladder_4 = _2921;
                frontier_phi_63_64_ladder_5 = _2919;
            }
            _3048 = frontier_phi_63_64_ladder_5;
            _3050 = frontier_phi_63_64_ladder_4;
            _3052 = frontier_phi_63_64_ladder_3;
            _3054 = frontier_phi_63_64_ladder;
            _3056 = frontier_phi_63_64_ladder_2;
            _3058 = frontier_phi_63_64_ladder_1;
        }
        float _3063 = isnan(1.0) ? _761 : (isnan(_761) ? 1.0 : min(_761, 1.0));
        _2823 = (_3063 * _3054) + _2335;
        _2825 = (_3063 * _3056) + _2337;
        _2827 = (_3063 * _3058) + _2339;
        _2829 = ((_3048 * _746) * _3063) + _2673;
        _2831 = ((_3050 * _748) * _3063) + _2675;
        _2833 = ((_3052 * _749) * _3063) + _2677;
    }
    else
    {
        _2823 = _2335;
        _2825 = _2337;
        _2827 = _2339;
        _2829 = _2673;
        _2831 = _2675;
        _2833 = _2677;
    }
    uint _2839 = _722 + uint(cbMatDynParam._m0[0u].w);
    float _2845 = ((((((_496.x - _493) * _429) + _493) * cbMtdParam._m0[13u].x) + ((((_450.x - _447) * _429) + _447) * cbMtdParam._m0[11u].x)) * _296) * cbInstanceData._m0[_2839].x;
    float _2846 = ((((((_496.y - _494) * _429) + _494) * cbMtdParam._m0[13u].y) + ((((_450.y - _448) * _429) + _448) * cbMtdParam._m0[11u].y)) * _296) * cbInstanceData._m0[_2839].y;
    float _2847 = ((((((_496.z - _495) * _429) + _495) * cbMtdParam._m0[13u].z) + ((((_450.z - _449) * _429) + _449) * cbMtdParam._m0[11u].z)) * _296) * cbInstanceData._m0[_2839].z;
    float _4850 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _4861 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _4872 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _2864 = (((isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0))) * (_2823 + ((isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0))) * _761))) + ((_2829 + ((isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0))) * _1601)) * cbPerFrame._m0[3u].x)) + _2845;
    float _2866 = (_2846 + ((_2831 + ((isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0))) * _1601)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0))) * (_2825 + ((isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0))) * _761)));
    float _2868 = (_2847 + ((_2833 + ((isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0))) * _1601)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0))) * (_2827 + ((isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0))) * _761)));
    float _2869 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0));
    float _2870 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0));
    float _2871 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0));
    float _2877 = cbMtdParam._m0[2u].x * _2845;
    float _2878 = cbMtdParam._m0[2u].y * _2846;
    float _2879 = cbMtdParam._m0[2u].z * _2847;
    float _4898 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2881 = isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0));
    uint _2882 = _721 + 6u;
    float _2890 = _681 / cbSceneParam._m0[86u].x;
    float _2891 = _682 / cbSceneParam._m0[86u].y;
    vec4 _2905 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2890, _2891, (log2((isnan(cbSceneParam._m0[77u].w) ? _603 : (isnan(_603) ? cbSceneParam._m0[77u].w : min(_603, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2907 = _2905.x;
    float _2908 = _2905.y;
    float _2909 = _2905.z;
    float _2910 = _2905.w;
    float _2981;
    float _2983;
    float _2985;
    float _2987;
    if (_603 > cbSceneParam._m0[78u].w)
    {
        float _2944 = isnan(_603) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _603 : min(cbSceneParam._m0[80u].w, _603));
        float _2945 = _2944 / _603;
        float _2956 = _2945 * _654;
        float _2957 = _655 * _2945;
        float _2958 = (-0.0) - _2957;
        float _2959 = _2945 * _656;
        float _2961 = (cbSceneParam._m0[77u].w * _2958) / _2944;
        float _2962 = _2961 + cbSceneParam._m0[79u].w;
        float _2963 = cbSceneParam._m0[79u].w - _2957;
        float _2969 = sqrt(((_2956 * _2956) + (_2957 * _2957)) + (_2959 * _2959));
        float _2972 = (1.0 - (cbSceneParam._m0[77u].w / _2944)) * _2969;
        float _2977 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2979 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3165;
        if (abs((_2958 - _2961) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3165 = ((((_2962 > 0.0) ? exp2(_2977 * _2962) : (2.0 - exp2(_2979 * _2962))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2972;
        }
        else
        {
            float _3109 = 1.0 / cbSceneParam._m0[80u].x;
            float _3110 = isnan(_2963) ? _2962 : (isnan(_2962) ? _2963 : max(_2962, _2963));
            float _3111 = isnan(_2963) ? _2962 : (isnan(_2962) ? _2963 : min(_2962, _2963));
            float _3120 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : min(_3110, 0.0));
            float _3121 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : min(_3111, 0.0));
            _3165 = ((abs(_2969 / _2958) * cbSceneParam._m0[80u].y) * ((((_3120 - _3121) * 2.0) - ((exp2(_2977 * (isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0)))) - exp2(_2977 * (isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0))))) * _3109)) - ((exp2(_2979 * _3120) - exp2(_2979 * _3121)) * _3109))) + (_2972 * cbSceneParam._m0[80u].z);
        }
        vec4 _3167 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2890, _2891, 1.0), 0.0);
        float _3176 = exp2((_3165 * (-1.44269502162933349609375)) * (1.0 - _3167.w));
        float _3177 = log2(_3176);
        float _3193 = log2(_2910);
        _2981 = (exp2(_3193 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3177 * cbSceneParam._m0[78u].x)) * _3167.x) / cbSceneParam._m0[78u].x)) + _2907;
        _2983 = (exp2(_3193 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3177 * cbSceneParam._m0[78u].y)) * _3167.y) / cbSceneParam._m0[78u].y)) + _2908;
        _2985 = (exp2(_3193 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3177 * cbSceneParam._m0[78u].z)) * _3167.z) / cbSceneParam._m0[78u].z)) + _2909;
        _2987 = _3176 * _2910;
    }
    else
    {
        _2981 = _2907;
        _2983 = _2908;
        _2985 = _2909;
        _2987 = _2910;
    }
    bool _3203;
    vec4 _2997;
    vec4 _3019;
    float _3021;
    float _3025;
    float _3026;
    float _3027;
    float _3030;
    float _3033;
    float _3036;
    float _3037;
    bool _3047;
    for (;;)
    {
        _2997 = cbMatDynParam._m0[0u];
        float _2999 = roundEven(_2997.y);
        bool _3000 = _2999 == 3.0;
        float _3001 = log2(_2987);
        float _3005 = exp2(_3001 * cbSceneParam._m0[78u].x);
        float _3006 = exp2(_3001 * cbSceneParam._m0[78u].y);
        float _3007 = exp2(_3001 * cbSceneParam._m0[78u].z);
        float _3008 = _3005 * _2869;
        float _3009 = _3006 * _2870;
        float _3010 = _3007 * _2871;
        float _3017 = _670 + (-0.5);
        _3019 = cbMtdParam._m0[1u];
        _3021 = _3019.y * _3017;
        float _3024 = (_2999 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3025 = _3024 * (_3000 ? _3008 : (_3008 + (cbSceneParam._m0[72u].w * _2981)));
        _3026 = _3024 * (_3000 ? _3009 : (_3009 + (cbSceneParam._m0[72u].w * _2983)));
        _3027 = _3024 * (_3000 ? _3010 : (_3010 + (cbSceneParam._m0[72u].w * _2985)));
        _3030 = ((_2877 * _2881) * _3005) * _3024;
        _3033 = ((_2878 * _2881) * _3006) * _3024;
        _3036 = ((_2879 * _2881) * _3007) * _3024;
        _3037 = _3017 * 0.999000012874603271484375;
        _3047 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3047)
        {
            if ((cbInstanceData._m0[_721 + 7u].x + _3037) < 0.5)
            {
                _3203 = true;
                break;
            }
        }
        uint _3144 = _722 + uint(_2997.w);
        if ((cbInstanceData._m0[_3144].w < 1.0) && ((cbInstanceData._m0[_3144].w + _3037) < 0.5))
        {
            _3203 = true;
            break;
        }
        if ((_3021 + 1.0) < _3019.x)
        {
            _3203 = true;
            break;
        }
        _3203 = false;
        break;
    }
    float _3407;
    if (_3203)
    {
        discard_state = true;
        _3407 = 0.0;
    }
    else
    {
        _3407 = cbInstanceData._m0[_2882].w;
    }
    SV_Target.x = _3025;
    SV_Target.y = _3026;
    SV_Target.z = _3027;
    SV_Target.w = _3407;
    SV_Target_1.x = _3030;
    SV_Target_1.y = _3033;
    SV_Target_1.z = _3036;
    SV_Target_1.w = cbInstanceData._m0[_2882].w;
    discard_exit();
}


