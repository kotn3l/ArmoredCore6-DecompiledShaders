#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1182;
float _3605;
float _3606;
float _3607;
float _3608;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _205 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _206 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _207 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _213 = inversesqrt(dot(vec3(_205, _206, _207), vec3(_205, _206, _207)));
    float _220 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _249 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _255 = _249.x * cbMtdParam._m0[9u].x;
    float _256 = _249.y * cbMtdParam._m0[9u].y;
    float _257 = _249.z * cbMtdParam._m0[9u].z;
    float _295 = TEXCOORD_9.x - ((cbMtdParam._m0[16u].y * (1.0 - TEXCOORD_9.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w)).x + 0.00999999977648258209228515625));
    float _297 = _295 * (cbMtdParam._m0[16u].z + 1.0);
    float _3617 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _298 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
    float _306 = ((((cbMtdParam._m0[12u].x - _255) * TEXCOORD_9.x) * cbMtdParam._m0[16u].x) * _298) + _255;
    float _307 = ((((cbMtdParam._m0[12u].y - _256) * TEXCOORD_9.y) * cbMtdParam._m0[16u].x) * _298) + _256;
    float _308 = (((cbMtdParam._m0[16u].x * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _257)) * _298) + _257;
    vec4 _320 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _324 = _320.z;
    float _328 = (_320.x * 2.0) + (-1.0);
    float _330 = (_320.y * 2.0) + (-1.0);
    float _331 = dot(vec2(_328, _330), vec2(_328, _330));
    float _3628 = isnan(0.0) ? _331 : (isnan(_331) ? 0.0 : max(_331, 0.0));
    float _336 = sqrt(1.0 - (isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0))));
    float _342 = _295 * (cbMtdParam._m0[16u].y + 1.0);
    float _3639 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _346 = ((cbMtdParam._m0[15u].y - _324) * (isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0)))) + _324;
    float _359 = (cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _360 = (cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _387 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * ((cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * ((cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[10u].w));
    float _392 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[15u].w;
    float _399 = ((_387.y * 0.5) + (-0.25)) * cbMtdParam._m0[15u].z;
    float _401 = (-0.0) - (cbMtdParam._m0[15u].z * ((_387.x * 0.5) + (-0.25)));
    float _403 = fract(_392);
    float _405 = fract(_392 + 0.5);
    float _406 = _403 * _401;
    float _407 = _399 * _403;
    float _410 = _405 * _401;
    float _411 = _399 * _405;
    float _416 = abs((_403 * 2.0) + (-1.0));
    vec4 _432 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_406 + _359) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_407 + _360) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _434 = _432.x;
    float _435 = _432.y;
    float _436 = _432.z;
    vec4 _437 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_410 + _359) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_411 + _360) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _464 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _465 = (cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _478 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_406 + _464) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_407 + _465) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _480 = _478.x;
    float _481 = _478.y;
    float _482 = _478.z;
    vec4 _483 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_410 + _464) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_411 + _465) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _535 = (TEXCOORD_6.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_6.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_5, SS_WrapLinear), vec2((((cbMtdParam._m0[18u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((cbMtdParam._m0[18u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].x + 1.0);
    float _3650 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _536 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
    float _537 = _536 * (((((_483.x - _480) * _416) + _480) * cbMtdParam._m0[13u].x) + ((((_437.x - _434) * _416) + _434) * cbMtdParam._m0[11u].x));
    float _538 = _536 * (((((_483.y - _481) * _416) + _481) * cbMtdParam._m0[13u].y) + ((((_437.y - _435) * _416) + _435) * cbMtdParam._m0[11u].y));
    float _539 = _536 * (((((_483.z - _482) * _416) + _482) * cbMtdParam._m0[13u].z) + ((((_437.z - _436) * _416) + _436) * cbMtdParam._m0[11u].z));
    vec4 _551 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[9u].w));
    float _553 = _551.x;
    vec4 _578 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[16u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, (((cbMtdParam._m0[17u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w));
    float _584 = (_578.x * 2.0) + (-1.0);
    float _585 = (_578.y * 2.0) + (-1.0);
    float _586 = dot(vec2(_584, _585), vec2(_584, _585));
    float _3661 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _602 = (_298 * (((cbMtdParam._m0[14u].z * _328) - _328) + _584)) + _328;
    float _603 = (_298 * (((cbMtdParam._m0[14u].z * _330) - _330) + _585)) + _330;
    float _604 = (_298 * (sqrt(1.0 - (isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0)))) - _336)) + _336;
    float _607 = fma(_604, _220 * NORMAL.x, fma(_603, _227 * TANGENT.x, (_213 * _205) * _602));
    float _610 = fma(_604, _220 * NORMAL.y, fma(_603, _227 * TANGENT.y, (_213 * _206) * _602));
    float _613 = fma(_604, _220 * NORMAL.z, fma(_603, _227 * TANGENT.z, (_213 * _207) * _602));
    float _617 = inversesqrt(dot(vec3(_607, _610, _613), vec3(_607, _610, _613)));
    float _618 = _617 * _607;
    float _619 = _617 * _610;
    float _620 = _617 * _613;
    float _3672 = isnan(0.0) ? _346 : (isnan(_346) ? 0.0 : max(_346, 0.0));
    float _621 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
    float _3683 = isnan(0.0) ? _306 : (isnan(_306) ? 0.0 : max(_306, 0.0));
    float _3694 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _3705 = isnan(0.0) ? _308 : (isnan(_308) ? 0.0 : max(_308, 0.0));
    float _640 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _680 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _690 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _680);
    float _691 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _680);
    float _692 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _680);
    float _696 = inversesqrt(dot(vec3(_690, _691, _692), vec3(_690, _691, _692)));
    float _697 = _690 * _696;
    float _698 = _691 * _696;
    float _699 = _692 * _696;
    vec4 _704 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _706 = _704.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _863 = sqrt(((_690 * _690) + (_691 * _691)) + (_692 * _692));
        float _869 = (cbMatDynParam._m0[5u].x * _863) + cbMatDynParam._m0[5u].y;
        float _3716 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
        float _870 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
        float _874 = (cbMatDynParam._m0[5u].z * _863) + cbMatDynParam._m0[5u].w;
        float _3727 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0))) - _870)) + _870) < ((_706 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _718 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _719 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _739 = fma(_620, cbSceneParam._m0[5u].z, fma(_619, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _618));
    float _742 = fma(_620, cbSceneParam._m0[6u].z, fma(_619, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _618));
    float _745 = fma(_620, cbSceneParam._m0[7u].z, fma(_619, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _618));
    uint _758 = uint(roundEven(NORMAL.w)) * 13u;
    uint _759 = _758 + 9u;
    uint _760 = _759 + uint(cbMatDynParam._m0[0u].w);
    float _766 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0)))) * cbInstanceData._m0[_760].x;
    float _767 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0)))) * cbInstanceData._m0[_760].y;
    float _768 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0)))) * cbInstanceData._m0[_760].z;
    float _3738 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _769 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
    float _3749 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _770 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
    float _3760 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _771 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
    vec4 _780 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _718, cbSceneParam._m0[86u].y * _719));
    float _783 = _780.x * TEXCOORD_3.w;
    float _784 = dot(vec3(_618, _619, _620), vec3(_697, _698, _699));
    float _787 = _784 * 2.0;
    float _791 = (_787 * _618) - _697;
    float _792 = (_787 * _619) - _698;
    float _793 = (_787 * _620) - _699;
    float _797 = abs(dot(vec3(_697, _698, _699), vec3(_618, _619, _620)));
    float _3771 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _799 = sqrt(_621);
    float _812 = exp2((_799 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_799 * 3.0));
    float _844 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _848 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _852 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1181;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _907 = fma(_852, cbModelParam._m0[26u].z, fma(_848, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _844));
        float _911 = fma(_852, cbModelParam._m0[27u].z, fma(_848, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _844));
        float _915 = fma(_852, cbModelParam._m0[28u].z, fma(_848, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _844));
        float _939 = _844 + _618;
        float _940 = _848 + _619;
        float _941 = _852 + _620;
        float _951 = fma(_941, cbModelParam._m0[26u].z, fma(_940, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _939)) - _907;
        float _952 = fma(_941, cbModelParam._m0[27u].z, fma(_940, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _939)) - _911;
        float _953 = fma(_941, cbModelParam._m0[28u].z, fma(_940, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _939)) - _915;
        float _957 = inversesqrt(dot(vec3(_951, _952, _953), vec3(_951, _952, _953)));
        float _970 = ((_957 * _951) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_907 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _971 = ((_957 * _952) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_911 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _972 = ((_957 * _953) / cbModelParam._m0[34u].z) + ((((((_915 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _975 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_970, _971, _972), 0.0);
        vec4 _982 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_970, _971, _972), 0.0);
        vec4 _989 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_970, _971, _972), 0.0);
        vec4 _996 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_970, _971, _972), 0.0);
        float _1009 = exp2((_975.w + (-0.5)) * 20.0) * 2.0;
        float _1010 = _1009 * (_975.x + (-0.5));
        float _1011 = _1009 * (_975.y + (-0.5));
        float _1012 = _1009 * (_975.z + (-0.5));
        float _1019 = exp2((_982.w + (-0.5)) * 20.0) * 2.0;
        float _1020 = _1019 * (_982.x + (-0.5));
        float _1021 = _1019 * (_982.y + (-0.5));
        float _1022 = _1019 * (_982.z + (-0.5));
        float _1029 = exp2((_989.w + (-0.5)) * 20.0) * 2.0;
        float _1030 = _1029 * (_989.x + (-0.5));
        float _1031 = _1029 * (_989.y + (-0.5));
        float _1032 = _1029 * (_989.z + (-0.5));
        float _1039 = exp2((_996.w + (-0.5)) * 20.0) * 2.0;
        float _1040 = _1039 * (_996.x + (-0.5));
        float _1041 = _1039 * (_996.y + (-0.5));
        float _1042 = _1039 * (_996.z + (-0.5));
        float _1043 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1044 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1045 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1046 = _1010 * 0.5;
        float _1047 = _1020 * 0.5;
        float _1048 = _1030 * 0.5;
        float _1049 = dot(vec3(_1046, _1047, _1048), vec3(_1046, _1047, _1048));
        float _1054 = (_1049 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1049);
        float _1063 = (dot(vec3(_618, _619, _620), vec3(_1054 * _1046, _1054 * _1047, _1054 * _1048)) + 1.0) * 0.5;
        float _3797 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1073 = sqrt(((_1047 * _1047) + (_1046 * _1046)) + (_1048 * _1048)) / (_1043 + 9.9999997473787516355514526367188e-06);
        float _3808 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1074 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
        float _1075 = _1074 * 2.0;
        float _1079 = (1.0 - _1074) / (_1074 + 1.0);
        float _3819 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1080 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
        float _1089 = ((((1.0 - _1080) * (_1075 + 2.0)) * exp2(log2(isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0))) * (_1075 + 1.0))) + _1080) * _1043;
        float _1090 = _1011 * 0.5;
        float _1091 = _1021 * 0.5;
        float _1092 = _1031 * 0.5;
        float _1093 = dot(vec3(_1090, _1091, _1092), vec3(_1090, _1091, _1092));
        float _1098 = (_1093 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1093);
        float _1106 = (dot(vec3(_618, _619, _620), vec3(_1098 * _1090, _1098 * _1091, _1098 * _1092)) + 1.0) * 0.5;
        float _3830 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1115 = sqrt(((_1091 * _1091) + (_1090 * _1090)) + (_1092 * _1092)) / (_1044 + 9.9999997473787516355514526367188e-06);
        float _3841 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1116 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
        float _1117 = _1116 * 2.0;
        float _1121 = (1.0 - _1116) / (_1116 + 1.0);
        float _3852 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1122 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
        float _1131 = ((((1.0 - _1122) * (_1117 + 2.0)) * exp2(log2(isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0))) * (_1117 + 1.0))) + _1122) * _1044;
        float _1132 = _1012 * 0.5;
        float _1133 = _1022 * 0.5;
        float _1134 = _1032 * 0.5;
        float _1135 = dot(vec3(_1132, _1133, _1134), vec3(_1132, _1133, _1134));
        float _1140 = (_1135 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1135);
        float _1148 = (dot(vec3(_618, _619, _620), vec3(_1140 * _1132, _1140 * _1133, _1140 * _1134)) + 1.0) * 0.5;
        float _3863 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1157 = sqrt(((_1133 * _1133) + (_1132 * _1132)) + (_1134 * _1134)) / (_1045 + 9.9999997473787516355514526367188e-06);
        float _3874 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _1159 = _1158 * 2.0;
        float _1163 = (1.0 - _1158) / (_1158 + 1.0);
        float _3885 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1164 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
        float _1173 = ((((1.0 - _1164) * (_1159 + 2.0)) * exp2(log2(isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0))) * (_1159 + 1.0))) + _1164) * _1045;
        _1181 = _1012;
        _1183 = _1011;
        _1184 = _1010;
        _1185 = _1022;
        _1186 = _1021;
        _1187 = _1020;
        _1188 = _1032;
        _1189 = _1031;
        _1190 = _1030;
        _1191 = _1045;
        _1192 = _1044;
        _1193 = _1043;
        _1194 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0)));
        _1195 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0)));
        _1196 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0)));
    }
    else
    {
        _1181 = _1182;
        _1183 = _1182;
        _1184 = _1182;
        _1185 = _1182;
        _1186 = _1182;
        _1187 = _1182;
        _1188 = _1182;
        _1189 = _1182;
        _1190 = _1182;
        _1191 = _1182;
        _1192 = _1182;
        _1193 = _1182;
        _1194 = 0.0;
        _1195 = 0.0;
        _1196 = 0.0;
    }
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1225 = fma(_852, cbModelParam._m0[30u].z, fma(_848, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _844));
        float _1229 = fma(_852, cbModelParam._m0[31u].z, fma(_848, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _844));
        float _1233 = fma(_852, cbModelParam._m0[32u].z, fma(_848, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _844));
        float _1256 = _844 + _618;
        float _1257 = _848 + _619;
        float _1258 = _852 + _620;
        float _1268 = fma(_1258, cbModelParam._m0[30u].z, fma(_1257, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1256)) - _1225;
        float _1269 = fma(_1258, cbModelParam._m0[31u].z, fma(_1257, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1256)) - _1229;
        float _1270 = fma(_1258, cbModelParam._m0[32u].z, fma(_1257, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1256)) - _1233;
        float _1274 = inversesqrt(dot(vec3(_1268, _1269, _1270), vec3(_1268, _1269, _1270)));
        float _1287 = ((_1274 * _1268) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1225 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1288 = ((_1274 * _1269) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1229 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1289 = ((_1274 * _1270) / cbModelParam._m0[35u].z) + ((((((_1233 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1291 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1287, _1288, _1289), 0.0);
        vec4 _1298 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1287, _1288, _1289), 0.0);
        vec4 _1305 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1287, _1288, _1289), 0.0);
        vec4 _1312 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1287, _1288, _1289), 0.0);
        float _1324 = exp2((_1291.w + (-0.5)) * 20.0) * 2.0;
        float _1325 = _1324 * (_1291.x + (-0.5));
        float _1326 = _1324 * (_1291.y + (-0.5));
        float _1327 = _1324 * (_1291.z + (-0.5));
        float _1334 = exp2((_1298.w + (-0.5)) * 20.0) * 2.0;
        float _1335 = _1334 * (_1298.x + (-0.5));
        float _1336 = _1334 * (_1298.y + (-0.5));
        float _1337 = _1334 * (_1298.z + (-0.5));
        float _1344 = exp2((_1305.w + (-0.5)) * 20.0) * 2.0;
        float _1345 = _1344 * (_1305.x + (-0.5));
        float _1346 = _1344 * (_1305.y + (-0.5));
        float _1347 = _1344 * (_1305.z + (-0.5));
        float _1354 = exp2((_1312.w + (-0.5)) * 20.0) * 2.0;
        float _1355 = _1354 * (_1312.x + (-0.5));
        float _1356 = _1354 * (_1312.y + (-0.5));
        float _1357 = _1354 * (_1312.z + (-0.5));
        float _1358 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1359 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1360 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1361 = _1325 * 0.5;
        float _1362 = _1335 * 0.5;
        float _1363 = _1345 * 0.5;
        float _1364 = dot(vec3(_1361, _1362, _1363), vec3(_1361, _1362, _1363));
        float _1369 = (_1364 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1364);
        float _1377 = (dot(vec3(_618, _619, _620), vec3(_1369 * _1361, _1369 * _1362, _1369 * _1363)) + 1.0) * 0.5;
        float _3926 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1386 = sqrt(((_1362 * _1362) + (_1361 * _1361)) + (_1363 * _1363)) / (_1358 + 9.9999997473787516355514526367188e-06);
        float _3937 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1387 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1388 = _1387 * 2.0;
        float _1392 = (1.0 - _1387) / (_1387 + 1.0);
        float _3948 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1393 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1402 = ((((1.0 - _1393) * (_1388 + 2.0)) * exp2(log2(isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0))) * (_1388 + 1.0))) + _1393) * _1358;
        float _1403 = _1326 * 0.5;
        float _1404 = _1336 * 0.5;
        float _1405 = _1346 * 0.5;
        float _1406 = dot(vec3(_1403, _1404, _1405), vec3(_1403, _1404, _1405));
        float _1411 = (_1406 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1406);
        float _1419 = (dot(vec3(_618, _619, _620), vec3(_1411 * _1403, _1411 * _1404, _1411 * _1405)) + 1.0) * 0.5;
        float _3959 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1428 = sqrt(((_1404 * _1404) + (_1403 * _1403)) + (_1405 * _1405)) / (_1359 + 9.9999997473787516355514526367188e-06);
        float _3970 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1429 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
        float _1430 = _1429 * 2.0;
        float _1434 = (1.0 - _1429) / (_1429 + 1.0);
        float _3981 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1435 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
        float _1444 = ((((1.0 - _1435) * (_1430 + 2.0)) * exp2(log2(isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0))) * (_1430 + 1.0))) + _1435) * _1359;
        float _1445 = _1327 * 0.5;
        float _1446 = _1337 * 0.5;
        float _1447 = _1347 * 0.5;
        float _1448 = dot(vec3(_1445, _1446, _1447), vec3(_1445, _1446, _1447));
        float _1453 = (_1448 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1448);
        float _1461 = (dot(vec3(_618, _619, _620), vec3(_1453 * _1445, _1453 * _1446, _1453 * _1447)) + 1.0) * 0.5;
        float _3992 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1470 = sqrt(((_1446 * _1446) + (_1445 * _1445)) + (_1447 * _1447)) / (_1360 + 9.9999997473787516355514526367188e-06);
        float _4003 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1471 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _1472 = _1471 * 2.0;
        float _1476 = (1.0 - _1471) / (_1471 + 1.0);
        float _4014 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1477 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _1486 = ((((1.0 - _1477) * (_1472 + 2.0)) * exp2(log2(isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))) * (_1472 + 1.0))) + _1477) * _1360;
        _1494 = _1327;
        _1495 = _1326;
        _1496 = _1325;
        _1497 = _1337;
        _1498 = _1336;
        _1499 = _1335;
        _1500 = _1347;
        _1501 = _1346;
        _1502 = _1345;
        _1503 = _1360;
        _1504 = _1359;
        _1505 = _1358;
        _1506 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0)));
        _1507 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0)));
        _1508 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0)));
    }
    else
    {
        _1494 = _1182;
        _1495 = _1182;
        _1496 = _1182;
        _1497 = _1182;
        _1498 = _1182;
        _1499 = _1182;
        _1500 = _1182;
        _1501 = _1182;
        _1502 = _1182;
        _1503 = _1182;
        _1504 = _1182;
        _1505 = _1182;
        _1506 = 0.0;
        _1507 = 0.0;
        _1508 = 0.0;
    }
    float _1518 = (cbModelParam._m0[1u].x * (_1506 - _1194)) + _1194;
    float _1519 = (cbModelParam._m0[1u].x * (_1507 - _1195)) + _1195;
    float _1520 = (cbModelParam._m0[1u].x * (_1508 - _1196)) + _1196;
    float _1541 = fma(_1520, cbSceneParam._m0[89u].z, fma(_1519, cbSceneParam._m0[89u].y, _1518 * cbSceneParam._m0[89u].x));
    float _1544 = fma(_1520, cbSceneParam._m0[90u].z, fma(_1519, cbSceneParam._m0[90u].y, _1518 * cbSceneParam._m0[90u].x));
    float _1547 = fma(_1520, cbSceneParam._m0[91u].z, fma(_1519, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1518));
    float _1562 = _791 * 0.5;
    float _1563 = _792 * 0.5;
    float _1564 = _793 * 0.5;
    float _1565 = dot(vec4(_1562, _1563, _1564, 1.0), vec4(_1496, _1499, _1502, _1505));
    float _1568 = dot(vec4(_1562, _1563, _1564, 1.0), vec4(_1495, _1498, _1501, _1504));
    float _1571 = dot(vec4(_1562, _1563, _1564, 1.0), vec4(_1494, _1497, _1500, _1503));
    float _1605;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1578 = dot(vec4(_1562, _1563, _1564, 1.0), vec4(_1181, _1185, _1188, _1191));
        float _1582 = dot(vec4(_1562, _1563, _1564, 1.0), vec4(_1183, _1186, _1189, _1192));
        float _1586 = dot(vec4(_1562, _1563, _1564, 1.0), vec4(_1184, _1187, _1190, _1193));
        float _1593 = dot(vec4(cbModelParam._m0[39u]), vec4(_1562, _1563, _1564, 1.0));
        _1605 = dot(vec3(isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0)), isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0)), isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1593) ? 0.0 : (isnan(0.0) ? _1593 : max(0.0, _1593))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1605 = 1.0;
    }
    float _1616;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1607 = dot(vec4(cbModelParam._m0[40u]), vec4(_1562, _1563, _1564, 1.0));
        _1616 = dot(vec3(isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0)), isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0)), isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1607) ? 0.0 : (isnan(0.0) ? _1607 : max(0.0, _1607))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1616 = 1.0;
    }
    float _1620 = (_1616 * cbModelParam._m0[1u].x) + (_1605 * (1.0 - cbModelParam._m0[1u].x));
    float _1630 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _621);
    float _1631 = isnan(_1630) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1630 : min(cbModelParam._m0[25u].z, _1630));
    float _1711;
    float _1713;
    float _1715;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1678 = fma(_852, cbModelParam._m0[13u].z, fma(_848, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _844)) + cbModelParam._m0[13u].w;
        float _1682 = fma(_852, cbModelParam._m0[14u].z, fma(_848, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _844)) + cbModelParam._m0[14u].w;
        float _1686 = fma(_852, cbModelParam._m0[15u].z, fma(_848, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _844)) + cbModelParam._m0[15u].w;
        float _1689 = fma(_793, cbModelParam._m0[13u].z, fma(_792, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _791));
        float _1692 = fma(_793, cbModelParam._m0[14u].z, fma(_792, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _791));
        float _1695 = fma(_793, cbModelParam._m0[15u].z, fma(_792, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _791));
        float _1723;
        if (_1689 > 0.0)
        {
            _1723 = abs((1.0 - _1678) / _1689);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1689 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1678 + 1.0) / _1689);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1723 = frontier_phi_17_15_ladder;
        }
        float _1946;
        if (_1692 > 0.0)
        {
            _1946 = abs((1.0 - _1682) / _1692);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1692 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1682 + 1.0) / _1692);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1946 = frontier_phi_26_22_ladder;
        }
        float _2192;
        if (_1695 > 0.0)
        {
            _2192 = abs((1.0 - _1686) / _1695);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1695 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1686 + 1.0) / _1695);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2192 = frontier_phi_38_33_ladder;
        }
        float _2194 = isnan(_1946) ? _1723 : (isnan(_1723) ? _1946 : min(_1723, _1946));
        float _2195 = isnan(_2192) ? _2194 : (isnan(_2194) ? _2192 : min(_2194, _2192));
        float _2199 = (_2195 * _1689) + _1678;
        float _2200 = (_2195 * _1692) + _1682;
        float _2201 = (_2195 * _1695) + _1686;
        float _2202 = _2195 * 9.9999997473787516355514526367188e-05;
        float _2204 = (-1.0) - _2202;
        float _2206 = _2202 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2201 > _2206) || ((_2201 < _2204) || ((_2200 > _2206) || ((_2200 < _2204) || ((_2199 < _2204) || (_2199 > _2206))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2325 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2201, cbModelParam._m0[9u].z, fma(_2200, cbModelParam._m0[9u].y, _2199 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2201, cbModelParam._m0[10u].z, fma(_2200, cbModelParam._m0[10u].y, _2199 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2201, cbModelParam._m0[11u].z, fma(_2200, cbModelParam._m0[11u].y, _2199 * cbModelParam._m0[11u].x))), _1631);
            frontier_phi_16_38_ladder = _2325.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2325.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2325.x * cbModelParam._m0[1u].y;
        }
        _1711 = frontier_phi_16_38_ladder_2;
        _1713 = frontier_phi_16_38_ladder_1;
        _1715 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1699 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_791, _792, _793), _1631);
        _1711 = _1699.x * cbModelParam._m0[1u].y;
        _1713 = _1699.y * cbModelParam._m0[1u].y;
        _1715 = _1699.z * cbModelParam._m0[1u].y;
    }
    float _1719 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _621);
    float _1720 = isnan(_1719) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1719 : min(cbModelParam._m0[25u].w, _1719));
    float _1810;
    float _1812;
    float _1814;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1774 = fma(_852, cbModelParam._m0[21u].z, fma(_848, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _844)) + cbModelParam._m0[21u].w;
        float _1778 = fma(_852, cbModelParam._m0[22u].z, fma(_848, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _844)) + cbModelParam._m0[22u].w;
        float _1782 = fma(_852, cbModelParam._m0[23u].z, fma(_848, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _844)) + cbModelParam._m0[23u].w;
        float _1785 = fma(_793, cbModelParam._m0[21u].z, fma(_792, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _791));
        float _1788 = fma(_793, cbModelParam._m0[22u].z, fma(_792, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _791));
        float _1791 = fma(_793, cbModelParam._m0[23u].z, fma(_792, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _791));
        float _1951;
        if (_1785 > 0.0)
        {
            _1951 = abs((1.0 - _1774) / _1785);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1785 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1774 + 1.0) / _1785);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1951 = frontier_phi_28_24_ladder;
        }
        float _2219;
        if (_1788 > 0.0)
        {
            _2219 = abs((1.0 - _1778) / _1788);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1788 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1778 + 1.0) / _1788);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2219 = frontier_phi_40_35_ladder;
        }
        float _2424;
        if (_1791 > 0.0)
        {
            _2424 = abs((1.0 - _1782) / _1791);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1791 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1782 + 1.0) / _1791);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2424 = frontier_phi_49_46_ladder;
        }
        float _2426 = isnan(_2219) ? _1951 : (isnan(_1951) ? _2219 : min(_1951, _2219));
        float _2427 = isnan(_2424) ? _2426 : (isnan(_2426) ? _2424 : min(_2426, _2424));
        float _2431 = (_2427 * _1785) + _1774;
        float _2432 = (_2427 * _1788) + _1778;
        float _2433 = (_2427 * _1791) + _1782;
        float _2434 = _2427 * 9.9999997473787516355514526367188e-05;
        float _2435 = (-1.0) - _2434;
        float _2437 = _2434 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2433 > _2437) || ((_2433 < _2435) || ((_2432 > _2437) || ((_2432 < _2435) || ((_2431 < _2435) || (_2431 > _2437))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2661 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2433, cbModelParam._m0[17u].z, fma(_2432, cbModelParam._m0[17u].y, _2431 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2433, cbModelParam._m0[18u].z, fma(_2432, cbModelParam._m0[18u].y, _2431 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2433, cbModelParam._m0[19u].z, fma(_2432, cbModelParam._m0[19u].y, _2431 * cbModelParam._m0[19u].x))), _1720);
            frontier_phi_25_49_ladder = _2661.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2661.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2661.x * cbModelParam._m0[1u].z;
        }
        _1810 = frontier_phi_25_49_ladder_2;
        _1812 = frontier_phi_25_49_ladder_1;
        _1814 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1794 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_791, _792, _793), _1720);
        _1810 = _1794.x * cbModelParam._m0[1u].z;
        _1812 = _1794.y * cbModelParam._m0[1u].z;
        _1814 = _1794.z * cbModelParam._m0[1u].z;
    }
    float _1826 = ((((1.0 - _812) * ((_799 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_812 * _799)) * _783;
    float _1827 = _1826 * ((cbModelParam._m0[1u].w * (_1810 - _1711)) + _1711);
    float _1828 = _1826 * ((cbModelParam._m0[1u].w * (_1812 - _1713)) + _1713);
    float _1829 = _1826 * ((cbModelParam._m0[1u].w * (_1814 - _1715)) + _1715);
    float _1832 = fma(_1829, cbSceneParam._m0[89u].z, fma(_1828, cbSceneParam._m0[89u].y, _1827 * cbSceneParam._m0[89u].x));
    float _1835 = fma(_1829, cbSceneParam._m0[90u].z, fma(_1828, cbSceneParam._m0[90u].y, _1827 * cbSceneParam._m0[90u].x));
    float _1838 = fma(_1829, cbSceneParam._m0[91u].z, fma(_1828, cbSceneParam._m0[91u].y, _1827 * cbSceneParam._m0[91u].x));
    vec4 _1846 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_718, _719));
    float _1848 = _1846.w;
    float _1860 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1848);
    float _1861 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1848);
    float _1862 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1848);
    uvec4 _1866 = floatBitsToUint(cbInstanceData._m0[_758 + 5u]);
    uint _1868 = _1866.x * 14u;
    uint _1869 = _1868 + 13u;
    float _1876 = _783 + (-1.0);
    float _1881 = (cbLight._m0[_1869].x * _1876) + 1.0;
    float _1882 = (cbLight._m0[_1869].y * _1876) + 1.0;
    float _1883 = (cbLight._m0[_1869].z * _1876) + 1.0;
    float _1884 = (cbLight._m0[_1869].w * _1876) + 1.0;
    uint _1885 = _1868 + 5u;
    float _1891 = isnan(1.0) ? _1882 : (isnan(_1882) ? 1.0 : min(_1882, 1.0));
    uint _1895 = _1868 + 4u;
    float _1905 = isnan(1.0) ? _1881 : (isnan(_1881) ? 1.0 : min(_1881, 1.0));
    uint _1909 = _1868 | 1u;
    float _1920 = dot(vec3(cbLight._m0[_1868].xyz), vec3(_618, _619, _620));
    float _1923 = dot(vec3(cbLight._m0[_1909].xyz), vec3(_618, _619, _620));
    float _4150 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
    float _4161 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
    float _1928 = (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * 0.3183098733425140380859375;
    float _1930 = (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * 0.3183098733425140380859375;
    float _1937 = ((cbLight._m0[_1885].x * _1891) * _1930) + (((cbLight._m0[_1895].x * _1860) * _1905) * _1928);
    float _1938 = ((_1891 * cbLight._m0[_1885].y) * _1930) + (((cbLight._m0[_1895].y * _1861) * _1905) * _1928);
    float _1939 = ((_1891 * cbLight._m0[_1885].z) * _1930) + (((cbLight._m0[_1895].z * _1862) * _1905) * _1928);
    uvec4 _1943 = floatBitsToUint(cbLight._m0[_1868 + 12u]);
    bool _1945 = _1943.x == 0u;
    float _1956;
    float _1958;
    float _1960;
    if (_1945)
    {
        _1956 = _1937;
        _1958 = _1938;
        _1960 = _1939;
    }
    else
    {
        uint _1964 = _1868 + 6u;
        float _1980 = (dot(vec3(cbLight._m0[_1868 + 2u].xyz), vec3(_618, _619, _620)) * 0.5) + 0.5;
        float _1981 = _1980 * _1980;
        float _4172 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
        float _1982 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1983 = isnan(1.0) ? _1883 : (isnan(_1883) ? 1.0 : min(_1883, 1.0));
        _1956 = (((cbLight._m0[_1964].x * 0.3183098733425140380859375) * _1982) * _1983) + _1937;
        _1958 = (((cbLight._m0[_1964].y * 0.3183098733425140380859375) * _1982) * _1983) + _1938;
        _1960 = (((cbLight._m0[_1964].z * 0.3183098733425140380859375) * _1982) * _1983) + _1939;
    }
    bool _1963 = _1943.y == 0u;
    float _2001;
    float _2003;
    float _2005;
    if (_1963)
    {
        _2001 = _1956;
        _2003 = _1958;
        _2005 = _1960;
    }
    else
    {
        uint _2163 = _1868 + 7u;
        float _2179 = (dot(vec3(cbLight._m0[_1868 + 3u].xyz), vec3(_618, _619, _620)) * 0.5) + 0.5;
        float _2180 = _2179 * _2179;
        float _4188 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
        float _2181 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _2182 = isnan(1.0) ? _1884 : (isnan(_1884) ? 1.0 : min(_1884, 1.0));
        _2001 = (((cbLight._m0[_2163].x * 0.3183098733425140380859375) * _2181) * _2182) + _1956;
        _2003 = (((cbLight._m0[_2163].y * 0.3183098733425140380859375) * _2181) * _2182) + _1958;
        _2005 = (((cbLight._m0[_2163].z * 0.3183098733425140380859375) * _2181) * _2182) + _1960;
    }
    uint _2008 = _1868 + 8u;
    float _2021 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1868].w)) * _621) * 0.949999988079071044921875);
    float _2022 = _2021 * _2021;
    float _2023 = cbLight._m0[_1868].x + _697;
    float _2024 = cbLight._m0[_1868].y + _698;
    float _2025 = cbLight._m0[_1868].z + _699;
    float _2029 = inversesqrt(dot(vec3(_2023, _2024, _2025), vec3(_2023, _2024, _2025)));
    float _2030 = _2029 * _2023;
    float _2031 = _2029 * _2024;
    float _2032 = _2029 * _2025;
    float _2033 = dot(vec3(_618, _619, _620), vec3(cbLight._m0[_1868].xyz));
    float _4204 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
    float _2036 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
    float _4215 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _2037 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
    float _2038 = dot(vec3(_618, _619, _620), vec3(_2030, _2031, _2032));
    float _4226 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
    float _2041 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
    float _2042 = dot(vec3(cbLight._m0[_1868].xyz), vec3(_2030, _2031, _2032));
    float _4237 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
    float _2046 = _2022 * _2022;
    float _2050 = ((_2041 * _2041) * (_2046 + (-1.0))) + 1.0;
    float _2061 = (exp2(log2(1.0 - (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2062 = 1.0 - _2022;
    float _2073 = (0.5 / (((_2037 * ((_2036 * _2062) + _2022)) + 9.9999999392252902907785028219223e-09) + (((_2037 * _2062) + _2022) * _2036))) * _2036;
    float _4248 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
    float _2075 = (isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0))) * (_2046 / ((_2050 * _2050) * 3.141590118408203125));
    uint _2089 = _1868 + 9u;
    float _2100 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1909].w)) * _621) * 0.949999988079071044921875);
    float _2101 = _2100 * _2100;
    float _2102 = cbLight._m0[_1909].x + _697;
    float _2103 = cbLight._m0[_1909].y + _698;
    float _2104 = cbLight._m0[_1909].z + _699;
    float _2108 = inversesqrt(dot(vec3(_2102, _2103, _2104), vec3(_2102, _2103, _2104)));
    float _2109 = _2108 * _2102;
    float _2110 = _2108 * _2103;
    float _2111 = _2108 * _2104;
    float _2112 = dot(vec3(_618, _619, _620), vec3(cbLight._m0[_1909].xyz));
    float _4259 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
    float _2115 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
    float _2116 = dot(vec3(_618, _619, _620), vec3(_2109, _2110, _2111));
    float _4270 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
    float _2119 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
    float _2120 = dot(vec3(cbLight._m0[_1909].xyz), vec3(_2109, _2110, _2111));
    float _4281 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
    float _2124 = _2101 * _2101;
    float _2128 = ((_2119 * _2119) * (_2124 + (-1.0))) + 1.0;
    float _2137 = (exp2(log2(1.0 - (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2138 = 1.0 - _2101;
    float _2148 = (0.5 / (((_2037 * ((_2115 * _2138) + _2101)) + 9.9999999392252902907785028219223e-09) + (((_2037 * _2138) + _2101) * _2115))) * _2115;
    float _4292 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
    float _2150 = (isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0))) * (_2124 / ((_2128 * _2128) * 3.141590118408203125));
    float _2160 = (((_2137 * cbLight._m0[_2089].x) * _2150) * _1891) + ((((cbLight._m0[_2008].x * _1860) * _2061) * _2075) * _1905);
    float _2161 = (((_2137 * cbLight._m0[_2089].y) * _2150) * _1891) + ((((cbLight._m0[_2008].y * _1861) * _2061) * _2075) * _1905);
    float _2162 = (((_2137 * cbLight._m0[_2089].z) * _2150) * _1891) + ((((cbLight._m0[_2008].z * _1862) * _2061) * _2075) * _1905);
    float _2224;
    float _2226;
    float _2228;
    if (_1945)
    {
        _2224 = _2160;
        _2226 = _2161;
        _2228 = _2162;
    }
    else
    {
        uint _2230 = _1868 + 2u;
        uint _2234 = _1868 + 10u;
        float _2248 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2230].w)) * _621) * 0.949999988079071044921875);
        float _2249 = _2248 * _2248;
        float _2250 = cbLight._m0[_2230].x + _697;
        float _2251 = cbLight._m0[_2230].y + _698;
        float _2252 = cbLight._m0[_2230].z + _699;
        float _2256 = inversesqrt(dot(vec3(_2250, _2251, _2252), vec3(_2250, _2251, _2252)));
        float _2257 = _2256 * _2250;
        float _2258 = _2256 * _2251;
        float _2259 = _2256 * _2252;
        float _2260 = dot(vec3(_618, _619, _620), vec3(cbLight._m0[_2230].xyz));
        float _4303 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
        float _2263 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
        float _2264 = dot(vec3(_618, _619, _620), vec3(_2257, _2258, _2259));
        float _4314 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
        float _2267 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
        float _2268 = dot(vec3(cbLight._m0[_2230].xyz), vec3(_2257, _2258, _2259));
        float _4325 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
        float _2272 = _2249 * _2249;
        float _2276 = ((_2267 * _2267) * (_2272 + (-1.0))) + 1.0;
        float _2285 = (exp2(log2(1.0 - (isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2286 = 1.0 - _2249;
        float _2296 = (0.5 / (((_2037 * ((_2263 * _2286) + _2249)) + 9.9999999392252902907785028219223e-09) + (((_2037 * _2286) + _2249) * _2263))) * _2263;
        float _4336 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
        float _2298 = (isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0))) * (_2272 / ((_2276 * _2276) * 3.141590118408203125));
        float _2299 = isnan(1.0) ? _1883 : (isnan(_1883) ? 1.0 : min(_1883, 1.0));
        _2224 = (((_2285 * cbLight._m0[_2234].x) * _2298) * _2299) + _2160;
        _2226 = (((_2285 * cbLight._m0[_2234].y) * _2298) * _2299) + _2161;
        _2228 = (((_2285 * cbLight._m0[_2234].z) * _2298) * _2299) + _2162;
    }
    float _2334;
    float _2336;
    float _2338;
    if (_1963)
    {
        _2334 = _2224;
        _2336 = _2226;
        _2338 = _2228;
    }
    else
    {
        uint _2345 = _1868 + 3u;
        uint _2349 = _1868 + 11u;
        float _2363 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2345].w)) * _621) * 0.949999988079071044921875);
        float _2364 = _2363 * _2363;
        float _2365 = cbLight._m0[_2345].x + _697;
        float _2366 = cbLight._m0[_2345].y + _698;
        float _2367 = cbLight._m0[_2345].z + _699;
        float _2371 = inversesqrt(dot(vec3(_2365, _2366, _2367), vec3(_2365, _2366, _2367)));
        float _2372 = _2371 * _2365;
        float _2373 = _2371 * _2366;
        float _2374 = _2371 * _2367;
        float _2375 = dot(vec3(_618, _619, _620), vec3(cbLight._m0[_2345].xyz));
        float _4352 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
        float _2378 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
        float _2379 = dot(vec3(_618, _619, _620), vec3(_2372, _2373, _2374));
        float _4363 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
        float _2382 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
        float _2383 = dot(vec3(cbLight._m0[_2345].xyz), vec3(_2372, _2373, _2374));
        float _4374 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
        float _2387 = _2364 * _2364;
        float _2391 = ((_2382 * _2382) * (_2387 + (-1.0))) + 1.0;
        float _2400 = (exp2(log2(1.0 - (isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2401 = 1.0 - _2364;
        float _2411 = (0.5 / (((_2037 * ((_2378 * _2401) + _2364)) + 9.9999999392252902907785028219223e-09) + (((_2037 * _2401) + _2364) * _2378))) * _2378;
        float _4385 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
        float _2413 = (isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))) * (_2387 / ((_2391 * _2391) * 3.141590118408203125));
        float _2414 = isnan(1.0) ? _1884 : (isnan(_1884) ? 1.0 : min(_1884, 1.0));
        _2334 = (((_2400 * cbLight._m0[_2349].x) * _2413) * _2414) + _2224;
        _2336 = (((_2400 * cbLight._m0[_2349].y) * _2413) * _2414) + _2226;
        _2338 = (((_2400 * cbLight._m0[_2349].z) * _2413) * _2414) + _2228;
    }
    float _2549;
    float _2551;
    float _2553;
    float _2555;
    float _2557;
    float _2559;
    if (_1866.y == 0u)
    {
        float _2489 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2490 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2489;
        float _2491 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2489;
        float _2492 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2489;
        uvec4 _2504 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2505 = _2504.x;
        uint _2516 = uint((float(_2504.y) * floor(float(uint(cbSceneParam._m0[85u].y * _719) / _2505))) + floor(float(uint(cbSceneParam._m0[85u].x * _718) / _2505)));
        float _2526 = (log2(_2492 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2527 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
        uint _2530 = uint(isnan(14.0) ? _2527 : (isnan(_2527) ? 14.0 : min(_2527, 14.0)));
        uvec4 _2535 = texelFetch(g_lightClusterGridBuffer, int(((_2530 << 2u) + (_2516 << 6u)) >> 2u));
        uint _2536 = _2535.x;
        uint _2537 = _2504.z;
        float _2666;
        float _2668;
        float _2670;
        float _2672;
        float _2674;
        float _2676;
        if (((((1u << ((_2537 >> 4u) & 15u)) + 4294967295u) & _2536) == 0u) || ((_2537 & 240u) == 0u))
        {
            _2666 = 0.0;
            _2668 = 0.0;
            _2670 = 0.0;
            _2672 = 0.0;
            _2674 = 0.0;
            _2676 = 0.0;
        }
        else
        {
            float _2667;
            float _2669;
            float _2671;
            float _2673;
            float _2675;
            float _2677;
            float _2827 = 0.0;
            float _2828 = 0.0;
            float _2829 = 0.0;
            float _2830 = 0.0;
            float _2831 = 0.0;
            float _2832 = 0.0;
            uint _2833 = 0u;
            uint _2842;
            bool _2843;
            for (;;)
            {
                _2842 = texelFetch(g_lightClassification, int((((_2530 << 5u) + (_2516 << 9u)) + (_2833 << 2u)) >> 2u)).x;
                _2843 = _2842 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2843)
                {
                    frontier_phi_66_pred = _2827;
                    frontier_phi_66_pred_1 = _2832;
                    frontier_phi_66_pred_2 = _2831;
                    frontier_phi_66_pred_3 = _2830;
                    frontier_phi_66_pred_4 = _2829;
                    frontier_phi_66_pred_5 = _2828;
                }
                else
                {
                    float _2972;
                    float _2973;
                    float _2974;
                    float _2975;
                    float _2976;
                    float _2977;
                    uint _2978;
                    _2972 = _2827;
                    _2973 = _2828;
                    _2974 = _2829;
                    _2975 = _2830;
                    _2976 = _2831;
                    _2977 = _2832;
                    _2978 = _2842;
                    float _2899;
                    float _2900;
                    float _2901;
                    float _2902;
                    float _2903;
                    float _2904;
                    for (;;)
                    {
                        uint _2982 = uint(findLSB(_2978)) + (_2833 << 5u);
                        uint _2979 = (_2978 + 4294967295u) & _2978;
                        uint _2984 = _2982 * 48u;
                        vec4 _2998 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2984)).x, texelFetch(g_PointLightRenderingBuffer, int(_2984 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2984 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2984 + 3u)).x));
                        uint _3004 = (_2982 * 48u) + 4u;
                        vec4 _3017 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3004)).x, texelFetch(g_PointLightRenderingBuffer, int(_3004 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3004 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3004 + 3u)).x));
                        uint _3023 = (_2982 * 48u) + 8u;
                        vec3 _3034 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3023)).x, texelFetch(g_PointLightRenderingBuffer, int(_3023 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3023 + 2u)).x));
                        float _3038 = _2998.x - _2490;
                        float _3039 = _2998.y - _2491;
                        float _3040 = _2998.z - _2492;
                        float _3041 = dot(vec3(_3038, _3039, _3040), vec3(_3038, _3039, _3040));
                        float _3044 = inversesqrt(_3041);
                        float _3045 = _3044 * _3038;
                        float _3046 = _3044 * _3039;
                        float _3047 = _3044 * _3040;
                        float _3048 = dot(vec3(_739, _742, _745), vec3(_3045, _3046, _3047));
                        float _3053 = 1.0 - (_3041 * _2998.w);
                        float _4411 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0));
                        float _3054 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
                        float _3055 = sqrt(_3041) * _3017.w;
                        float _3058 = 1.39999997615814208984375 / (_3055 + 1.39999997615814208984375);
                        float _3059 = _3058 * _3058;
                        float _3062 = ((1.0 - _3059) * _3048) + _3059;
                        float _3065 = _3055 * _3055;
                        float _3069 = ((isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0))) * _3054) / ((_3065 * 0.699999988079071044921875) + 1.0);
                        float _3073 = (-0.0) - _2490;
                        float _3074 = (-0.0) - _2491;
                        float _3075 = (-0.0) - _2492;
                        float _3079 = inversesqrt(dot(vec3(_3073, _3074, _3075), vec3(_3073, _3074, _3075)));
                        float _3080 = _3079 * _3073;
                        float _3081 = _3079 * _3074;
                        float _3082 = _3079 * _3075;
                        float _3090 = exp2(log2(1.0 / ((_3065 * 3.5) + 5.0)) * 0.25);
                        float _3091 = 1.0 - _799;
                        float _3098 = sqrt(1.0 - ((1.0 - (_3091 * _3091)) * (1.0 - (_3090 * _3090))));
                        float _3099 = _3098 * _3098;
                        float _3100 = _3099 * _3099;
                        float _3101 = _3080 + _3045;
                        float _3102 = _3081 + _3046;
                        float _3103 = _3082 + _3047;
                        float _3107 = inversesqrt(dot(vec3(_3101, _3102, _3103), vec3(_3101, _3102, _3103)));
                        float _3111 = dot(vec3(_739, _742, _745), vec3(_3080, _3081, _3082));
                        float _4427 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0));
                        float _3114 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
                        float _3115 = dot(vec3(_739, _742, _745), vec3(_3107 * _3101, _3107 * _3102, _3107 * _3103));
                        float _4438 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0));
                        float _3118 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
                        float _3122 = ((_3118 * _3118) * (_3100 + (-1.0))) + 1.0;
                        float _3123 = _3058 * _3099;
                        float _3124 = _3123 * _3123;
                        float _3127 = ((1.0 - _3124) * _3048) + _3124;
                        float _4449 = isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0));
                        float _3128 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
                        float _3129 = 1.0 - _3099;
                        float _3139 = (0.5 / (((_3128 * ((_3114 * _3129) + _3099)) + 9.9999999392252902907785028219223e-09) + (((_3128 * _3129) + _3099) * _3114))) * _3128;
                        float _4460 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0));
                        float _3150 = (((_3100 * 3.1415927410125732421875) * (isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0)))) / ((_3122 * _3122) * ((_3065 * 2.1991131305694580078125) + 3.141590118408203125))) * _3054;
                        _2902 = (_3069 * _3017.x) + _2975;
                        _2903 = (_3069 * _3017.y) + _2976;
                        _2904 = (_3069 * _3017.z) + _2977;
                        _2899 = (_3150 * _3034.x) + _2972;
                        _2900 = (_3150 * _3034.y) + _2973;
                        _2901 = (_3150 * _3034.z) + _2974;
                        if (_2979 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2972 = _2899;
                            _2973 = _2900;
                            _2974 = _2901;
                            _2975 = _2902;
                            _2976 = _2903;
                            _2977 = _2904;
                            _2978 = _2979;
                        }
                    }
                    frontier_phi_66_pred = _2899;
                    frontier_phi_66_pred_1 = _2904;
                    frontier_phi_66_pred_2 = _2903;
                    frontier_phi_66_pred_3 = _2902;
                    frontier_phi_66_pred_4 = _2901;
                    frontier_phi_66_pred_5 = _2900;
                }
                _2667 = frontier_phi_66_pred;
                _2677 = frontier_phi_66_pred_1;
                _2675 = frontier_phi_66_pred_2;
                _2673 = frontier_phi_66_pred_3;
                _2671 = frontier_phi_66_pred_4;
                _2669 = frontier_phi_66_pred_5;
                uint _2834 = _2833 + 1u;
                if (_2834 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2827 = _2667;
                    _2828 = _2669;
                    _2829 = _2671;
                    _2830 = _2673;
                    _2831 = _2675;
                    _2832 = _2677;
                    _2833 = _2834;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2666 = _2667;
            _2668 = _2669;
            _2670 = _2671;
            _2672 = _2673;
            _2674 = _2675;
            _2676 = _2677;
        }
        uvec4 _2680 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2681 = _2680.z;
        uint _2683 = (_2681 >> 8u) & 15u;
        float _2795;
        float _2797;
        float _2799;
        float _2801;
        float _2803;
        float _2805;
        if (((4294967295u << _2683) & _2536) == 0u)
        {
            _2795 = _2666;
            _2797 = _2668;
            _2799 = _2670;
            _2801 = _2672;
            _2803 = _2674;
            _2805 = _2676;
        }
        else
        {
            float _2820 = inversesqrt(dot(vec3(_2490, _2491, _2492), vec3(_2490, _2491, _2492)));
            float _2821 = _2820 * _2490;
            float _2822 = _2820 * _2491;
            float _2823 = _2820 * _2492;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2683 < ((_2681 >> 12u) & 15u))
            {
                float _2796;
                float _2798;
                float _2800;
                float _2802;
                float _2804;
                float _2806;
                float _2955 = _2666;
                float _2956 = _2668;
                float _2957 = _2670;
                float _2958 = _2672;
                float _2959 = _2674;
                float _2960 = _2676;
                uint _2961 = _2683;
                uint _2970;
                bool _2971;
                for (;;)
                {
                    _2970 = texelFetch(g_lightClassification, int((((_2530 << 5u) + (_2516 << 9u)) + (_2961 << 2u)) >> 2u)).x;
                    _2971 = _2970 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2971)
                    {
                        frontier_phi_77_pred = _2960;
                        frontier_phi_77_pred_1 = _2959;
                        frontier_phi_77_pred_2 = _2958;
                        frontier_phi_77_pred_3 = _2957;
                        frontier_phi_77_pred_4 = _2956;
                        frontier_phi_77_pred_5 = _2955;
                    }
                    else
                    {
                        float _3164;
                        float _3165;
                        float _3166;
                        float _3167;
                        float _3168;
                        float _3169;
                        float _3458;
                        float _3459;
                        float _3460;
                        float _3461;
                        float _3462;
                        float _3463;
                        float _3177 = _2955;
                        float _3178 = _2956;
                        float _3179 = _2957;
                        float _3180 = _2958;
                        float _3181 = _2959;
                        float _3182 = _2960;
                        uint _3183 = _2970;
                        uint _3184;
                        vec4 _3209;
                        float _3210;
                        vec4 _3225;
                        vec3 _3237;
                        vec4 _3252;
                        vec4 _3267;
                        float _3314;
                        bool _3315;
                        for (;;)
                        {
                            uint _3194 = ((_2961 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3183));
                            _3184 = (_3183 + 4294967295u) & _3183;
                            uint _3196 = _3194 * 40u;
                            _3209 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3196)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 3u)).x));
                            _3210 = _3209.w;
                            uint _3212 = (_3194 * 40u) + 4u;
                            _3225 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3212)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 3u)).x));
                            uint _3227 = (_3194 * 40u) + 8u;
                            _3237 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3227)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 2u)).x));
                            uint _3239 = (_3194 * 40u) + 16u;
                            _3252 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3239)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 3u)).x));
                            uint _3254 = (_3194 * 40u) + 20u;
                            _3267 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3254)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 3u)).x));
                            uint _3270 = (_3194 * 40u) + 24u;
                            vec4 _3283 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3270)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 3u)).x));
                            uint _3289 = (_3194 * 40u) + 28u;
                            vec4 _3302 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3289)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 3u)).x));
                            _3314 = fma(_2492, _3302.z, fma(_2491, _3302.y, _3302.x * _2490)) + _3302.w;
                            _3315 = !((fma(_2492, _3283.z, fma(_2491, _3283.y, _3283.x * _2490)) + _3283.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3315)
                            {
                                float _3342 = _3209.x - _2490;
                                float _3343 = _3209.y - _2491;
                                float _3344 = _3209.z - _2492;
                                float _3345 = dot(vec3(_3342, _3343, _3344), vec3(_3342, _3343, _3344));
                                float _3348 = inversesqrt(_3345);
                                float _3349 = _3348 * _3342;
                                float _3350 = _3348 * _3343;
                                float _3351 = _3348 * _3344;
                                float _3355 = 1.0 - (_3345 / (_3210 * _3210));
                                float _4471 = isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0));
                                float _3356 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
                                float _3360 = sqrt(_3345) * _3225.w;
                                float _3362 = 1.39999997615814208984375 / (_3360 + 1.39999997615814208984375);
                                float _3363 = _3362 * _3362;
                                float _3366 = ((1.0 - _3363) * dot(vec3(_3349, _3350, _3351), vec3(_739, _742, _745))) + _3363;
                                float _3369 = _3360 * _3360;
                                float _3373 = (fma(_2492, _3252.z, fma(_2491, _3252.y, _3252.x * _2490)) + _3252.w) / _3314;
                                float _3374 = (fma(_2492, _3267.z, fma(_2491, _3267.y, _3267.x * _2490)) + _3267.w) / _3314;
                                float _3378 = 1.0 - dot(vec2(_3373, _3374), vec2(_3373, _3374));
                                float _4487 = isnan(0.0) ? _3378 : (isnan(_3378) ? 0.0 : max(_3378, 0.0));
                                float _3379 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
                                float _3380 = _3379 * (((isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0))) * _3356) / ((_3369 * 0.699999988079071044921875) + 1.0));
                                float _3392 = exp2(log2(1.0 / ((_3369 * 3.5) + 5.0)) * 0.25);
                                float _3393 = 1.0 - _799;
                                float _3400 = sqrt(1.0 - ((1.0 - (_3393 * _3393)) * (1.0 - (_3392 * _3392))));
                                float _3401 = _3400 * _3400;
                                float _3402 = _3401 * _3401;
                                float _3403 = _3349 - _2821;
                                float _3404 = _3350 - _2822;
                                float _3405 = _3351 - _2823;
                                float _3409 = inversesqrt(dot(vec3(_3403, _3404, _3405), vec3(_3403, _3404, _3405)));
                                float _3413 = dot(vec3(_739, _742, _745), vec3((-0.0) - _2821, (-0.0) - _2822, (-0.0) - _2823));
                                float _4498 = isnan(0.0) ? _3413 : (isnan(_3413) ? 0.0 : max(_3413, 0.0));
                                float _3416 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
                                float _3417 = dot(vec3(_739, _742, _745), vec3(_3409 * _3403, _3409 * _3404, _3409 * _3405));
                                float _4509 = isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0));
                                float _3420 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
                                float _3424 = ((_3420 * _3420) * (_3402 + (-1.0))) + 1.0;
                                float _3425 = _3362 * _3401;
                                float _3426 = _3425 * _3425;
                                float _3432 = ((1.0 - _3426) * dot(vec3(_739, _742, _745), vec3(_3349, _3350, _3351))) + _3426;
                                float _4520 = isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0));
                                float _3433 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
                                float _3434 = 1.0 - _3401;
                                float _3444 = (0.5 / (((_3433 * ((_3416 * _3434) + _3401)) + 9.9999999392252902907785028219223e-09) + (((_3433 * _3434) + _3401) * _3416))) * _3433;
                                float _4531 = isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0));
                                float _3454 = (_3379 * _3356) * (((_3402 * 3.1415927410125732421875) * (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0)))) / ((_3424 * _3424) * ((_3369 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3380 * _3225.y;
                                frontier_phi_83_pred_1 = _3380 * _3225.x;
                                frontier_phi_83_pred_2 = _3454 * _3237.z;
                                frontier_phi_83_pred_3 = _3454 * _3237.y;
                                frontier_phi_83_pred_4 = _3454 * _3237.x;
                                frontier_phi_83_pred_5 = _3380 * _3225.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3462 = frontier_phi_83_pred;
                            _3461 = frontier_phi_83_pred_1;
                            _3460 = frontier_phi_83_pred_2;
                            _3459 = frontier_phi_83_pred_3;
                            _3458 = frontier_phi_83_pred_4;
                            _3463 = frontier_phi_83_pred_5;
                            _3167 = _3461 + _3180;
                            _3168 = _3462 + _3181;
                            _3169 = _3463 + _3182;
                            _3164 = _3458 + _3177;
                            _3165 = _3459 + _3178;
                            _3166 = _3460 + _3179;
                            if (_3184 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3177 = _3164;
                                _3178 = _3165;
                                _3179 = _3166;
                                _3180 = _3167;
                                _3181 = _3168;
                                _3182 = _3169;
                                _3183 = _3184;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3169;
                        frontier_phi_77_pred_1 = _3168;
                        frontier_phi_77_pred_2 = _3167;
                        frontier_phi_77_pred_3 = _3166;
                        frontier_phi_77_pred_4 = _3165;
                        frontier_phi_77_pred_5 = _3164;
                    }
                    _2806 = frontier_phi_77_pred;
                    _2804 = frontier_phi_77_pred_1;
                    _2802 = frontier_phi_77_pred_2;
                    _2800 = frontier_phi_77_pred_3;
                    _2798 = frontier_phi_77_pred_4;
                    _2796 = frontier_phi_77_pred_5;
                    uint _2962 = _2961 + 1u;
                    if (_2962 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2955 = _2796;
                        _2956 = _2798;
                        _2957 = _2800;
                        _2958 = _2802;
                        _2959 = _2804;
                        _2960 = _2806;
                        _2961 = _2962;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2800;
                frontier_phi_58_59_ladder_1 = _2806;
                frontier_phi_58_59_ladder_2 = _2804;
                frontier_phi_58_59_ladder_3 = _2802;
                frontier_phi_58_59_ladder_4 = _2798;
                frontier_phi_58_59_ladder_5 = _2796;
            }
            else
            {
                frontier_phi_58_59_ladder = _2670;
                frontier_phi_58_59_ladder_1 = _2676;
                frontier_phi_58_59_ladder_2 = _2674;
                frontier_phi_58_59_ladder_3 = _2672;
                frontier_phi_58_59_ladder_4 = _2668;
                frontier_phi_58_59_ladder_5 = _2666;
            }
            _2795 = frontier_phi_58_59_ladder_5;
            _2797 = frontier_phi_58_59_ladder_4;
            _2799 = frontier_phi_58_59_ladder;
            _2801 = frontier_phi_58_59_ladder_3;
            _2803 = frontier_phi_58_59_ladder_2;
            _2805 = frontier_phi_58_59_ladder_1;
        }
        float _2810 = isnan(1.0) ? _783 : (isnan(_783) ? 1.0 : min(_783, 1.0));
        _2549 = (_2810 * _2801) + _2001;
        _2551 = (_2810 * _2803) + _2003;
        _2553 = (_2810 * _2805) + _2005;
        _2555 = ((_2795 * 0.039999999105930328369140625) * _2810) + _2334;
        _2557 = ((_2797 * 0.039999999105930328369140625) * _2810) + _2336;
        _2559 = ((_2799 * 0.039999999105930328369140625) * _2810) + _2338;
    }
    else
    {
        _2549 = _2001;
        _2551 = _2003;
        _2553 = _2005;
        _2555 = _2334;
        _2557 = _2336;
        _2559 = _2338;
    }
    uint _2565 = _759 + uint(cbMatDynParam._m0[0u].w);
    float _2571 = cbInstanceData._m0[_2565].x * (_537 - (_553 * _537));
    float _2572 = cbInstanceData._m0[_2565].y * (_538 - (_553 * _538));
    float _2573 = cbInstanceData._m0[_2565].z * (_539 - (_553 * _539));
    float _4547 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _4558 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _4569 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _2590 = (((isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0))) * (_2549 + ((isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0))) * _783))) + ((_2555 + ((isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0))) * _1620)) * cbPerFrame._m0[3u].x)) + _2571;
    float _2592 = (_2572 + ((_2557 + ((isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0))) * _1620)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0))) * (_2551 + ((isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0))) * _783)));
    float _2594 = (_2573 + ((_2559 + ((isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0))) * _1620)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0))) * (_2553 + ((isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0))) * _783)));
    float _2595 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
    float _2596 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
    float _2597 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
    float _2603 = cbMtdParam._m0[2u].x * _2571;
    float _2604 = cbMtdParam._m0[2u].y * _2572;
    float _2605 = cbMtdParam._m0[2u].z * _2573;
    float _4595 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2607 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
    uint _2608 = _758 + 6u;
    float _2616 = _718 / cbSceneParam._m0[86u].x;
    float _2617 = _719 / cbSceneParam._m0[86u].y;
    vec4 _2631 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2616, _2617, (log2((isnan(cbSceneParam._m0[77u].w) ? _640 : (isnan(_640) ? cbSceneParam._m0[77u].w : min(_640, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2633 = _2631.x;
    float _2634 = _2631.y;
    float _2635 = _2631.z;
    float _2636 = _2631.w;
    float _2728;
    float _2730;
    float _2732;
    float _2734;
    if (_640 > cbSceneParam._m0[78u].w)
    {
        float _2691 = isnan(_640) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _640 : min(cbSceneParam._m0[80u].w, _640));
        float _2692 = _2691 / _640;
        float _2703 = _2692 * _690;
        float _2704 = _691 * _2692;
        float _2705 = (-0.0) - _2704;
        float _2706 = _2692 * _692;
        float _2708 = (cbSceneParam._m0[77u].w * _2705) / _2691;
        float _2709 = _2708 + cbSceneParam._m0[79u].w;
        float _2710 = cbSceneParam._m0[79u].w - _2704;
        float _2716 = sqrt(((_2703 * _2703) + (_2704 * _2704)) + (_2706 * _2706));
        float _2719 = (1.0 - (cbSceneParam._m0[77u].w / _2691)) * _2716;
        float _2724 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2726 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2912;
        if (abs((_2705 - _2708) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2912 = ((((_2709 > 0.0) ? exp2(_2724 * _2709) : (2.0 - exp2(_2726 * _2709))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2719;
        }
        else
        {
            float _2856 = 1.0 / cbSceneParam._m0[80u].x;
            float _2857 = isnan(_2710) ? _2709 : (isnan(_2709) ? _2710 : max(_2709, _2710));
            float _2858 = isnan(_2710) ? _2709 : (isnan(_2709) ? _2710 : min(_2709, _2710));
            float _2867 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : min(_2857, 0.0));
            float _2868 = isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : min(_2858, 0.0));
            _2912 = ((abs(_2716 / _2705) * cbSceneParam._m0[80u].y) * ((((_2867 - _2868) * 2.0) - ((exp2(_2724 * (isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0)))) - exp2(_2724 * (isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0))))) * _2856)) - ((exp2(_2726 * _2867) - exp2(_2726 * _2868)) * _2856))) + (_2719 * cbSceneParam._m0[80u].z);
        }
        vec4 _2914 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2616, _2617, 1.0), 0.0);
        float _2923 = exp2((_2912 * (-1.44269502162933349609375)) * (1.0 - _2914.w));
        float _2924 = log2(_2923);
        float _2940 = log2(_2636);
        _2728 = (exp2(_2940 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2924 * cbSceneParam._m0[78u].x)) * _2914.x) / cbSceneParam._m0[78u].x)) + _2633;
        _2730 = (exp2(_2940 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2924 * cbSceneParam._m0[78u].y)) * _2914.y) / cbSceneParam._m0[78u].y)) + _2634;
        _2732 = (exp2(_2940 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2924 * cbSceneParam._m0[78u].z)) * _2914.z) / cbSceneParam._m0[78u].z)) + _2635;
        _2734 = _2923 * _2636;
    }
    else
    {
        _2728 = _2633;
        _2730 = _2634;
        _2732 = _2635;
        _2734 = _2636;
    }
    bool _2950;
    vec4 _2744;
    vec4 _2766;
    float _2768;
    float _2772;
    float _2773;
    float _2774;
    float _2777;
    float _2780;
    float _2783;
    float _2784;
    bool _2794;
    for (;;)
    {
        _2744 = cbMatDynParam._m0[0u];
        float _2746 = roundEven(_2744.y);
        bool _2747 = _2746 == 3.0;
        float _2748 = log2(_2734);
        float _2752 = exp2(_2748 * cbSceneParam._m0[78u].x);
        float _2753 = exp2(_2748 * cbSceneParam._m0[78u].y);
        float _2754 = exp2(_2748 * cbSceneParam._m0[78u].z);
        float _2755 = _2752 * _2595;
        float _2756 = _2753 * _2596;
        float _2757 = _2754 * _2597;
        float _2764 = _706 + (-0.5);
        _2766 = cbMtdParam._m0[1u];
        _2768 = _2766.y * _2764;
        float _2771 = (_2746 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2772 = _2771 * (_2747 ? _2755 : (_2755 + (cbSceneParam._m0[72u].w * _2728)));
        _2773 = _2771 * (_2747 ? _2756 : (_2756 + (cbSceneParam._m0[72u].w * _2730)));
        _2774 = _2771 * (_2747 ? _2757 : (_2757 + (cbSceneParam._m0[72u].w * _2732)));
        _2777 = ((_2603 * _2607) * _2752) * _2771;
        _2780 = ((_2604 * _2607) * _2753) * _2771;
        _2783 = ((_2605 * _2607) * _2754) * _2771;
        _2784 = _2764 * 0.999000012874603271484375;
        _2794 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2794)
        {
            if ((cbInstanceData._m0[_758 + 7u].x + _2784) < 0.5)
            {
                _2950 = true;
                break;
            }
        }
        uint _2891 = _759 + uint(_2744.w);
        if ((cbInstanceData._m0[_2891].w < 1.0) && ((cbInstanceData._m0[_2891].w + _2784) < 0.5))
        {
            _2950 = true;
            break;
        }
        if ((_2768 + 1.0) < _2766.x)
        {
            _2950 = true;
            break;
        }
        _2950 = false;
        break;
    }
    float _3155;
    if (_2950)
    {
        discard_state = true;
        _3155 = 0.0;
    }
    else
    {
        _3155 = cbInstanceData._m0[_2608].w;
    }
    SV_Target.x = _2772;
    SV_Target.y = _2773;
    SV_Target.z = _2774;
    SV_Target.w = _3155;
    SV_Target_1.x = _2777;
    SV_Target_1.y = _2780;
    SV_Target_1.z = _2783;
    SV_Target_1.w = cbInstanceData._m0[_2608].w;
    discard_exit();
}


