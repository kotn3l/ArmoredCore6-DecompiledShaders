#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1045;
float _3729;
float _3730;
float _3731;
float _3732;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _195 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _196 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _197 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _203 = inversesqrt(dot(vec3(_195, _196, _197), vec3(_195, _196, _197)));
    float _210 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _217 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _239 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _245 = _239.x * cbMtdParam._m0[9u].x;
    float _246 = _239.y * cbMtdParam._m0[9u].y;
    float _247 = _239.z * cbMtdParam._m0[9u].z;
    vec4 _264 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    vec4 _278 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _282 = _278.z;
    float _286 = (_278.x * 2.0) + (-1.0);
    float _288 = (_278.y * 2.0) + (-1.0);
    float _289 = dot(vec2(_286, _288), vec2(_286, _288));
    float _3741 = isnan(0.0) ? _289 : (isnan(_289) ? 0.0 : max(_289, 0.0));
    float _295 = sqrt(1.0 - (isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0))));
    float _308 = (cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _309 = (cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _339 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * ((cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * ((cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[10u].w));
    float _344 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[15u].w;
    float _351 = ((_339.y * 0.5) + (-0.25)) * cbMtdParam._m0[15u].z;
    float _353 = (-0.0) - (cbMtdParam._m0[15u].z * ((_339.x * 0.5) + (-0.25)));
    float _355 = fract(_344);
    float _357 = fract(_344 + 0.5);
    float _358 = _355 * _353;
    float _359 = _351 * _355;
    float _362 = _357 * _353;
    float _363 = _351 * _357;
    float _368 = abs((_355 * 2.0) + (-1.0));
    vec4 _384 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_358 + _308) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_359 + _309) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _386 = _384.x;
    float _387 = _384.y;
    float _388 = _384.z;
    vec4 _389 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_362 + _308) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_363 + _309) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _416 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _417 = (cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _430 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_358 + _416) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_359 + _417) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _432 = _430.x;
    float _433 = _430.y;
    float _434 = _430.z;
    vec4 _435 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_362 + _416) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_363 + _417) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _462 = (TEXCOORD_9.x - ((cbMtdParam._m0[16u].y * (1.0 - TEXCOORD_9.x)) * (_264.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[16u].z + 1.0);
    float _3752 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _463 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
    float _469 = fma(_295, _210 * NORMAL.x, fma(_288, _217 * TANGENT.x, (_203 * _195) * _286));
    float _472 = fma(_295, _210 * NORMAL.y, fma(_288, _217 * TANGENT.y, (_203 * _196) * _286));
    float _475 = fma(_295, _210 * NORMAL.z, fma(_288, _217 * TANGENT.z, (_203 * _197) * _286));
    float _479 = inversesqrt(dot(vec3(_469, _472, _475), vec3(_469, _472, _475)));
    float _480 = _479 * _469;
    float _481 = _479 * _472;
    float _482 = _479 * _475;
    float _3763 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _483 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
    float _3774 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _3785 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    float _3796 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _502 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _543 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _553 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _543);
    float _554 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _543);
    float _555 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _543);
    float _559 = inversesqrt(dot(vec3(_553, _554, _555), vec3(_553, _554, _555)));
    float _560 = _553 * _559;
    float _561 = _554 * _559;
    float _562 = _555 * _559;
    vec4 _567 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _569 = _567.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _726 = sqrt(((_553 * _553) + (_554 * _554)) + (_555 * _555));
        float _732 = (cbMatDynParam._m0[5u].x * _726) + cbMatDynParam._m0[5u].y;
        float _3807 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
        float _733 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
        float _737 = (cbMatDynParam._m0[5u].z * _726) + cbMatDynParam._m0[5u].w;
        float _3818 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0))) - _733)) + _733) < ((_569 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _581 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _582 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _602 = fma(_482, cbSceneParam._m0[5u].z, fma(_481, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _480));
    float _605 = fma(_482, cbSceneParam._m0[6u].z, fma(_481, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _480));
    float _608 = fma(_482, cbSceneParam._m0[7u].z, fma(_481, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _480));
    uint _621 = uint(roundEven(NORMAL.w)) * 13u;
    uint _622 = _621 + 9u;
    uint _623 = _622 + uint(cbMatDynParam._m0[0u].w);
    float _629 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0)))) * cbInstanceData._m0[_623].x;
    float _630 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0)))) * cbInstanceData._m0[_623].y;
    float _631 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0)))) * cbInstanceData._m0[_623].z;
    float _3829 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _632 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
    float _3840 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _633 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
    float _3851 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _634 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
    vec4 _643 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _581, cbSceneParam._m0[86u].y * _582));
    float _646 = _643.x * TEXCOORD_3.w;
    float _647 = dot(vec3(_480, _481, _482), vec3(_560, _561, _562));
    float _650 = _647 * 2.0;
    float _654 = (_650 * _480) - _560;
    float _655 = (_650 * _481) - _561;
    float _656 = (_650 * _482) - _562;
    float _660 = abs(dot(vec3(_560, _561, _562), vec3(_480, _481, _482)));
    float _3862 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _662 = sqrt(_483);
    float _675 = exp2((_662 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_662 * 3.0));
    float _707 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _711 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _715 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1044;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _770 = fma(_715, cbModelParam._m0[26u].z, fma(_711, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _707));
        float _774 = fma(_715, cbModelParam._m0[27u].z, fma(_711, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _707));
        float _778 = fma(_715, cbModelParam._m0[28u].z, fma(_711, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _707));
        float _802 = _707 + _480;
        float _803 = _711 + _481;
        float _804 = _715 + _482;
        float _814 = fma(_804, cbModelParam._m0[26u].z, fma(_803, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _802)) - _770;
        float _815 = fma(_804, cbModelParam._m0[27u].z, fma(_803, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _802)) - _774;
        float _816 = fma(_804, cbModelParam._m0[28u].z, fma(_803, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _802)) - _778;
        float _820 = inversesqrt(dot(vec3(_814, _815, _816), vec3(_814, _815, _816)));
        float _833 = ((_820 * _814) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_770 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _834 = ((_820 * _815) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_774 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _835 = ((_820 * _816) / cbModelParam._m0[34u].z) + ((((((_778 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _838 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        vec4 _845 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        vec4 _852 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        vec4 _859 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        float _872 = exp2((_838.w + (-0.5)) * 20.0) * 2.0;
        float _873 = _872 * (_838.x + (-0.5));
        float _874 = _872 * (_838.y + (-0.5));
        float _875 = _872 * (_838.z + (-0.5));
        float _882 = exp2((_845.w + (-0.5)) * 20.0) * 2.0;
        float _883 = _882 * (_845.x + (-0.5));
        float _884 = _882 * (_845.y + (-0.5));
        float _885 = _882 * (_845.z + (-0.5));
        float _892 = exp2((_852.w + (-0.5)) * 20.0) * 2.0;
        float _893 = _892 * (_852.x + (-0.5));
        float _894 = _892 * (_852.y + (-0.5));
        float _895 = _892 * (_852.z + (-0.5));
        float _902 = exp2((_859.w + (-0.5)) * 20.0) * 2.0;
        float _903 = _902 * (_859.x + (-0.5));
        float _904 = _902 * (_859.y + (-0.5));
        float _905 = _902 * (_859.z + (-0.5));
        float _906 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _907 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _908 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _909 = _873 * 0.5;
        float _910 = _883 * 0.5;
        float _911 = _893 * 0.5;
        float _912 = dot(vec3(_909, _910, _911), vec3(_909, _910, _911));
        float _917 = (_912 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_912);
        float _926 = (dot(vec3(_480, _481, _482), vec3(_917 * _909, _917 * _910, _917 * _911)) + 1.0) * 0.5;
        float _3888 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _936 = sqrt(((_910 * _910) + (_909 * _909)) + (_911 * _911)) / (_906 + 9.9999997473787516355514526367188e-06);
        float _3899 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _937 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _938 = _937 * 2.0;
        float _942 = (1.0 - _937) / (_937 + 1.0);
        float _3910 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _943 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _952 = ((((1.0 - _943) * (_938 + 2.0)) * exp2(log2(isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))) * (_938 + 1.0))) + _943) * _906;
        float _953 = _874 * 0.5;
        float _954 = _884 * 0.5;
        float _955 = _894 * 0.5;
        float _956 = dot(vec3(_953, _954, _955), vec3(_953, _954, _955));
        float _961 = (_956 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_956);
        float _969 = (dot(vec3(_480, _481, _482), vec3(_961 * _953, _961 * _954, _961 * _955)) + 1.0) * 0.5;
        float _3921 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _978 = sqrt(((_954 * _954) + (_953 * _953)) + (_955 * _955)) / (_907 + 9.9999997473787516355514526367188e-06);
        float _3932 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _979 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _980 = _979 * 2.0;
        float _984 = (1.0 - _979) / (_979 + 1.0);
        float _3943 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _985 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _994 = ((((1.0 - _985) * (_980 + 2.0)) * exp2(log2(isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0))) * (_980 + 1.0))) + _985) * _907;
        float _995 = _875 * 0.5;
        float _996 = _885 * 0.5;
        float _997 = _895 * 0.5;
        float _998 = dot(vec3(_995, _996, _997), vec3(_995, _996, _997));
        float _1003 = (_998 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_998);
        float _1011 = (dot(vec3(_480, _481, _482), vec3(_1003 * _995, _1003 * _996, _1003 * _997)) + 1.0) * 0.5;
        float _3954 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1020 = sqrt(((_996 * _996) + (_995 * _995)) + (_997 * _997)) / (_908 + 9.9999997473787516355514526367188e-06);
        float _3965 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1021 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
        float _1022 = _1021 * 2.0;
        float _1026 = (1.0 - _1021) / (_1021 + 1.0);
        float _3976 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1027 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
        float _1036 = ((((1.0 - _1027) * (_1022 + 2.0)) * exp2(log2(isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0))) * (_1022 + 1.0))) + _1027) * _908;
        _1044 = _875;
        _1046 = _874;
        _1047 = _873;
        _1048 = _885;
        _1049 = _884;
        _1050 = _883;
        _1051 = _895;
        _1052 = _894;
        _1053 = _893;
        _1054 = _908;
        _1055 = _907;
        _1056 = _906;
        _1057 = cbModelParam._m0[36u].z * (isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0)));
        _1058 = cbModelParam._m0[36u].z * (isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0)));
        _1059 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0)));
    }
    else
    {
        _1044 = _1045;
        _1046 = _1045;
        _1047 = _1045;
        _1048 = _1045;
        _1049 = _1045;
        _1050 = _1045;
        _1051 = _1045;
        _1052 = _1045;
        _1053 = _1045;
        _1054 = _1045;
        _1055 = _1045;
        _1056 = _1045;
        _1057 = 0.0;
        _1058 = 0.0;
        _1059 = 0.0;
    }
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1088 = fma(_715, cbModelParam._m0[30u].z, fma(_711, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _707));
        float _1092 = fma(_715, cbModelParam._m0[31u].z, fma(_711, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _707));
        float _1096 = fma(_715, cbModelParam._m0[32u].z, fma(_711, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _707));
        float _1119 = _707 + _480;
        float _1120 = _711 + _481;
        float _1121 = _715 + _482;
        float _1131 = fma(_1121, cbModelParam._m0[30u].z, fma(_1120, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1119)) - _1088;
        float _1132 = fma(_1121, cbModelParam._m0[31u].z, fma(_1120, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1119)) - _1092;
        float _1133 = fma(_1121, cbModelParam._m0[32u].z, fma(_1120, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1119)) - _1096;
        float _1137 = inversesqrt(dot(vec3(_1131, _1132, _1133), vec3(_1131, _1132, _1133)));
        float _1150 = ((_1137 * _1131) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1088 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1151 = ((_1137 * _1132) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1092 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1152 = ((_1137 * _1133) / cbModelParam._m0[35u].z) + ((((((_1096 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1154 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1150, _1151, _1152), 0.0);
        vec4 _1161 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1150, _1151, _1152), 0.0);
        vec4 _1168 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1150, _1151, _1152), 0.0);
        vec4 _1175 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1150, _1151, _1152), 0.0);
        float _1187 = exp2((_1154.w + (-0.5)) * 20.0) * 2.0;
        float _1188 = _1187 * (_1154.x + (-0.5));
        float _1189 = _1187 * (_1154.y + (-0.5));
        float _1190 = _1187 * (_1154.z + (-0.5));
        float _1197 = exp2((_1161.w + (-0.5)) * 20.0) * 2.0;
        float _1198 = _1197 * (_1161.x + (-0.5));
        float _1199 = _1197 * (_1161.y + (-0.5));
        float _1200 = _1197 * (_1161.z + (-0.5));
        float _1207 = exp2((_1168.w + (-0.5)) * 20.0) * 2.0;
        float _1208 = _1207 * (_1168.x + (-0.5));
        float _1209 = _1207 * (_1168.y + (-0.5));
        float _1210 = _1207 * (_1168.z + (-0.5));
        float _1217 = exp2((_1175.w + (-0.5)) * 20.0) * 2.0;
        float _1218 = _1217 * (_1175.x + (-0.5));
        float _1219 = _1217 * (_1175.y + (-0.5));
        float _1220 = _1217 * (_1175.z + (-0.5));
        float _1221 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1222 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1223 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1224 = _1188 * 0.5;
        float _1225 = _1198 * 0.5;
        float _1226 = _1208 * 0.5;
        float _1227 = dot(vec3(_1224, _1225, _1226), vec3(_1224, _1225, _1226));
        float _1232 = (_1227 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1227);
        float _1240 = (dot(vec3(_480, _481, _482), vec3(_1232 * _1224, _1232 * _1225, _1232 * _1226)) + 1.0) * 0.5;
        float _4017 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1249 = sqrt(((_1225 * _1225) + (_1224 * _1224)) + (_1226 * _1226)) / (_1221 + 9.9999997473787516355514526367188e-06);
        float _4028 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1250 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _1251 = _1250 * 2.0;
        float _1255 = (1.0 - _1250) / (_1250 + 1.0);
        float _4039 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _1265 = ((((1.0 - _1256) * (_1251 + 2.0)) * exp2(log2(isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) * (_1251 + 1.0))) + _1256) * _1221;
        float _1266 = _1189 * 0.5;
        float _1267 = _1199 * 0.5;
        float _1268 = _1209 * 0.5;
        float _1269 = dot(vec3(_1266, _1267, _1268), vec3(_1266, _1267, _1268));
        float _1274 = (_1269 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1269);
        float _1282 = (dot(vec3(_480, _481, _482), vec3(_1274 * _1266, _1274 * _1267, _1274 * _1268)) + 1.0) * 0.5;
        float _4050 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1291 = sqrt(((_1267 * _1267) + (_1266 * _1266)) + (_1268 * _1268)) / (_1222 + 9.9999997473787516355514526367188e-06);
        float _4061 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _1293 = _1292 * 2.0;
        float _1297 = (1.0 - _1292) / (_1292 + 1.0);
        float _4072 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _1307 = ((((1.0 - _1298) * (_1293 + 2.0)) * exp2(log2(isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0))) * (_1293 + 1.0))) + _1298) * _1222;
        float _1308 = _1190 * 0.5;
        float _1309 = _1200 * 0.5;
        float _1310 = _1210 * 0.5;
        float _1311 = dot(vec3(_1308, _1309, _1310), vec3(_1308, _1309, _1310));
        float _1316 = (_1311 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1311);
        float _1324 = (dot(vec3(_480, _481, _482), vec3(_1316 * _1308, _1316 * _1309, _1316 * _1310)) + 1.0) * 0.5;
        float _4083 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1333 = sqrt(((_1309 * _1309) + (_1308 * _1308)) + (_1310 * _1310)) / (_1223 + 9.9999997473787516355514526367188e-06);
        float _4094 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
        float _1335 = _1334 * 2.0;
        float _1339 = (1.0 - _1334) / (_1334 + 1.0);
        float _4105 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _1349 = ((((1.0 - _1340) * (_1335 + 2.0)) * exp2(log2(isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0))) * (_1335 + 1.0))) + _1340) * _1223;
        _1357 = _1190;
        _1358 = _1189;
        _1359 = _1188;
        _1360 = _1200;
        _1361 = _1199;
        _1362 = _1198;
        _1363 = _1210;
        _1364 = _1209;
        _1365 = _1208;
        _1366 = _1223;
        _1367 = _1222;
        _1368 = _1221;
        _1369 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0)));
        _1370 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0)));
        _1371 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0)));
    }
    else
    {
        _1357 = _1045;
        _1358 = _1045;
        _1359 = _1045;
        _1360 = _1045;
        _1361 = _1045;
        _1362 = _1045;
        _1363 = _1045;
        _1364 = _1045;
        _1365 = _1045;
        _1366 = _1045;
        _1367 = _1045;
        _1368 = _1045;
        _1369 = 0.0;
        _1370 = 0.0;
        _1371 = 0.0;
    }
    float _1381 = (cbModelParam._m0[1u].x * (_1369 - _1057)) + _1057;
    float _1382 = (cbModelParam._m0[1u].x * (_1370 - _1058)) + _1058;
    float _1383 = (cbModelParam._m0[1u].x * (_1371 - _1059)) + _1059;
    float _1404 = fma(_1383, cbSceneParam._m0[89u].z, fma(_1382, cbSceneParam._m0[89u].y, _1381 * cbSceneParam._m0[89u].x));
    float _1407 = fma(_1383, cbSceneParam._m0[90u].z, fma(_1382, cbSceneParam._m0[90u].y, _1381 * cbSceneParam._m0[90u].x));
    float _1410 = fma(_1383, cbSceneParam._m0[91u].z, fma(_1382, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1381));
    float _1425 = _654 * 0.5;
    float _1426 = _655 * 0.5;
    float _1427 = _656 * 0.5;
    float _1428 = dot(vec4(_1425, _1426, _1427, 1.0), vec4(_1359, _1362, _1365, _1368));
    float _1431 = dot(vec4(_1425, _1426, _1427, 1.0), vec4(_1358, _1361, _1364, _1367));
    float _1434 = dot(vec4(_1425, _1426, _1427, 1.0), vec4(_1357, _1360, _1363, _1366));
    float _1468;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1441 = dot(vec4(_1425, _1426, _1427, 1.0), vec4(_1044, _1048, _1051, _1054));
        float _1445 = dot(vec4(_1425, _1426, _1427, 1.0), vec4(_1046, _1049, _1052, _1055));
        float _1449 = dot(vec4(_1425, _1426, _1427, 1.0), vec4(_1047, _1050, _1053, _1056));
        float _1456 = dot(vec4(cbModelParam._m0[39u]), vec4(_1425, _1426, _1427, 1.0));
        _1468 = dot(vec3(isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0)), isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0)), isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1456) ? 0.0 : (isnan(0.0) ? _1456 : max(0.0, _1456))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1468 = 1.0;
    }
    float _1479;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1470 = dot(vec4(cbModelParam._m0[40u]), vec4(_1425, _1426, _1427, 1.0));
        _1479 = dot(vec3(isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0)), isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0)), isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1470) ? 0.0 : (isnan(0.0) ? _1470 : max(0.0, _1470))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1479 = 1.0;
    }
    float _1483 = (_1479 * cbModelParam._m0[1u].x) + (_1468 * (1.0 - cbModelParam._m0[1u].x));
    float _1493 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _483);
    float _1494 = isnan(_1493) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1493 : min(cbModelParam._m0[25u].z, _1493));
    float _1575;
    float _1577;
    float _1579;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1542 = fma(_715, cbModelParam._m0[13u].z, fma(_711, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _707)) + cbModelParam._m0[13u].w;
        float _1546 = fma(_715, cbModelParam._m0[14u].z, fma(_711, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _707)) + cbModelParam._m0[14u].w;
        float _1550 = fma(_715, cbModelParam._m0[15u].z, fma(_711, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _707)) + cbModelParam._m0[15u].w;
        float _1553 = fma(_656, cbModelParam._m0[13u].z, fma(_655, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _654));
        float _1556 = fma(_656, cbModelParam._m0[14u].z, fma(_655, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _654));
        float _1559 = fma(_656, cbModelParam._m0[15u].z, fma(_655, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _654));
        float _1587;
        if (_1553 > 0.0)
        {
            _1587 = abs((1.0 - _1542) / _1553);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1553 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1542 + 1.0) / _1553);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1587 = frontier_phi_17_15_ladder;
        }
        float _1758;
        if (_1556 > 0.0)
        {
            _1758 = abs((1.0 - _1546) / _1556);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1556 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1546 + 1.0) / _1556);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1758 = frontier_phi_26_22_ladder;
        }
        float _2054;
        if (_1559 > 0.0)
        {
            _2054 = abs((1.0 - _1550) / _1559);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1559 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1550 + 1.0) / _1559);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2054 = frontier_phi_38_33_ladder;
        }
        float _2056 = isnan(_1758) ? _1587 : (isnan(_1587) ? _1758 : min(_1587, _1758));
        float _2057 = isnan(_2054) ? _2056 : (isnan(_2056) ? _2054 : min(_2056, _2054));
        float _2061 = (_2057 * _1553) + _1542;
        float _2062 = (_2057 * _1556) + _1546;
        float _2063 = (_2057 * _1559) + _1550;
        float _2064 = _2057 * 9.9999997473787516355514526367188e-05;
        float _2066 = (-1.0) - _2064;
        float _2068 = _2064 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2063 > _2068) || ((_2063 < _2066) || ((_2062 > _2068) || ((_2062 < _2066) || ((_2061 < _2066) || (_2061 > _2068))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2208 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2063, cbModelParam._m0[9u].z, fma(_2062, cbModelParam._m0[9u].y, _2061 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2063, cbModelParam._m0[10u].z, fma(_2062, cbModelParam._m0[10u].y, _2061 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2063, cbModelParam._m0[11u].z, fma(_2062, cbModelParam._m0[11u].y, _2061 * cbModelParam._m0[11u].x))), _1494);
            frontier_phi_16_38_ladder = _2208.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2208.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2208.x * cbModelParam._m0[1u].y;
        }
        _1575 = frontier_phi_16_38_ladder_2;
        _1577 = frontier_phi_16_38_ladder_1;
        _1579 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1563 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_654, _655, _656), _1494);
        _1575 = _1563.x * cbModelParam._m0[1u].y;
        _1577 = _1563.y * cbModelParam._m0[1u].y;
        _1579 = _1563.z * cbModelParam._m0[1u].y;
    }
    float _1583 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _483);
    float _1584 = isnan(_1583) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1583 : min(cbModelParam._m0[25u].w, _1583));
    float _1674;
    float _1676;
    float _1678;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1638 = fma(_715, cbModelParam._m0[21u].z, fma(_711, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _707)) + cbModelParam._m0[21u].w;
        float _1642 = fma(_715, cbModelParam._m0[22u].z, fma(_711, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _707)) + cbModelParam._m0[22u].w;
        float _1646 = fma(_715, cbModelParam._m0[23u].z, fma(_711, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _707)) + cbModelParam._m0[23u].w;
        float _1649 = fma(_656, cbModelParam._m0[21u].z, fma(_655, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _654));
        float _1652 = fma(_656, cbModelParam._m0[22u].z, fma(_655, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _654));
        float _1655 = fma(_656, cbModelParam._m0[23u].z, fma(_655, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _654));
        float _1763;
        if (_1649 > 0.0)
        {
            _1763 = abs((1.0 - _1638) / _1649);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1649 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1638 + 1.0) / _1649);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1763 = frontier_phi_28_24_ladder;
        }
        float _2081;
        if (_1652 > 0.0)
        {
            _2081 = abs((1.0 - _1642) / _1652);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1652 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1642 + 1.0) / _1652);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2081 = frontier_phi_40_35_ladder;
        }
        float _2408;
        if (_1655 > 0.0)
        {
            _2408 = abs((1.0 - _1646) / _1655);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1655 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1646 + 1.0) / _1655);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2408 = frontier_phi_50_47_ladder;
        }
        float _2410 = isnan(_2081) ? _1763 : (isnan(_1763) ? _2081 : min(_1763, _2081));
        float _2411 = isnan(_2408) ? _2410 : (isnan(_2410) ? _2408 : min(_2410, _2408));
        float _2415 = (_2411 * _1649) + _1638;
        float _2416 = (_2411 * _1652) + _1642;
        float _2417 = (_2411 * _1655) + _1646;
        float _2418 = _2411 * 9.9999997473787516355514526367188e-05;
        float _2419 = (-1.0) - _2418;
        float _2421 = _2418 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2417 > _2421) || ((_2417 < _2419) || ((_2416 > _2421) || ((_2416 < _2419) || ((_2415 < _2419) || (_2415 > _2421))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2535 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2417, cbModelParam._m0[17u].z, fma(_2416, cbModelParam._m0[17u].y, _2415 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2417, cbModelParam._m0[18u].z, fma(_2416, cbModelParam._m0[18u].y, _2415 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2417, cbModelParam._m0[19u].z, fma(_2416, cbModelParam._m0[19u].y, _2415 * cbModelParam._m0[19u].x))), _1584);
            frontier_phi_25_50_ladder = _2535.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2535.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2535.x * cbModelParam._m0[1u].z;
        }
        _1674 = frontier_phi_25_50_ladder_2;
        _1676 = frontier_phi_25_50_ladder_1;
        _1678 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1658 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_654, _655, _656), _1584);
        _1674 = _1658.x * cbModelParam._m0[1u].z;
        _1676 = _1658.y * cbModelParam._m0[1u].z;
        _1678 = _1658.z * cbModelParam._m0[1u].z;
    }
    float _1690 = ((((1.0 - _675) * ((_662 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_675 * _662)) * _646;
    float _1691 = _1690 * ((cbModelParam._m0[1u].w * (_1674 - _1575)) + _1575);
    float _1692 = _1690 * ((cbModelParam._m0[1u].w * (_1676 - _1577)) + _1577);
    float _1693 = _1690 * ((cbModelParam._m0[1u].w * (_1678 - _1579)) + _1579);
    float _1696 = fma(_1693, cbSceneParam._m0[89u].z, fma(_1692, cbSceneParam._m0[89u].y, _1691 * cbSceneParam._m0[89u].x));
    float _1699 = fma(_1693, cbSceneParam._m0[90u].z, fma(_1692, cbSceneParam._m0[90u].y, _1691 * cbSceneParam._m0[90u].x));
    float _1702 = fma(_1693, cbSceneParam._m0[91u].z, fma(_1692, cbSceneParam._m0[91u].y, _1691 * cbSceneParam._m0[91u].x));
    float _1737 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1741 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1745 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1749 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1750 = _1737 / _1749;
    float _1751 = _1741 / _1749;
    float _1752 = _1745 / _1749;
    float _1899;
    float _1900;
    float _1901;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1779 = ((uint(_1752 > cbSceneParam._m0[59u].y) + uint(_1752 > cbSceneParam._m0[59u].x)) + uint(_1752 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1780 = _1779 + 43u;
        uint _1788 = _1779 + 44u;
        uint _1796 = _1779 + 45u;
        uint _1804 = _1779 + 46u;
        float _1815 = fma(_1749, cbSceneParam._m0[_1780].w, fma(_1745, cbSceneParam._m0[_1780].z, fma(_1741, cbSceneParam._m0[_1780].y, _1737 * cbSceneParam._m0[_1780].x)));
        float _1819 = fma(_1749, cbSceneParam._m0[_1788].w, fma(_1745, cbSceneParam._m0[_1788].z, fma(_1741, cbSceneParam._m0[_1788].y, _1737 * cbSceneParam._m0[_1788].x)));
        float _1827 = fma(_1749, cbSceneParam._m0[_1804].w, fma(_1745, cbSceneParam._m0[_1804].z, fma(_1741, cbSceneParam._m0[_1804].y, _1737 * cbSceneParam._m0[_1804].x)));
        float _1832 = cbSceneParam._m0[33u].z * _1827;
        float _1834 = cbSceneParam._m0[33u].w * _1827;
        float _1837 = fma(_1749, cbSceneParam._m0[_1796].w, fma(_1745, cbSceneParam._m0[_1796].z, fma(_1741, cbSceneParam._m0[_1796].y, _1737 * cbSceneParam._m0[_1796].x))) / _1827;
        float _1885 = (cbSceneParam._m0[33u].x - sqrt(((_1751 * _1751) + (_1750 * _1750)) + (_1752 * _1752))) * cbSceneParam._m0[33u].y;
        float _4231 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
        float _1892 = (isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1832 + _1815) / _1827, (_1834 + _1819) / _1827), _1837), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1834 + _1815) / _1827, (_1819 - _1832) / _1827), _1837), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1815 - _1832) / _1827, (_1819 - _1834) / _1827), _1837), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1815 - _1834) / _1827, (_1832 + _1819) / _1827), _1837), 0.0)).x), vec4(0.25)));
        _1899 = 1.0 - (_1892 * cbSceneParam._m0[34u].x);
        _1900 = 1.0 - (_1892 * cbSceneParam._m0[34u].y);
        _1901 = 1.0 - (_1892 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1899 = 1.0;
        _1900 = 1.0;
        _1901 = 1.0;
    }
    float _1965;
    float _1967;
    float _1969;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1953 = fma(_1749, cbSceneParam._m0[63u].w, fma(_1745, cbSceneParam._m0[63u].z, fma(_1741, cbSceneParam._m0[63u].y, _1737 * cbSceneParam._m0[63u].x)));
        float _1954 = fma(_1749, cbSceneParam._m0[60u].w, fma(_1745, cbSceneParam._m0[60u].z, fma(_1741, cbSceneParam._m0[60u].y, _1737 * cbSceneParam._m0[60u].x))) / _1953;
        float _1955 = fma(_1749, cbSceneParam._m0[61u].w, fma(_1745, cbSceneParam._m0[61u].z, fma(_1741, cbSceneParam._m0[61u].y, _1737 * cbSceneParam._m0[61u].x))) / _1953;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1954 >= cbSceneParam._m0[64u].x) && (_1955 >= cbSceneParam._m0[64u].y)) && (_1954 <= cbSceneParam._m0[64u].z)) && (_1955 <= cbSceneParam._m0[64u].w))
        {
            float _2094 = fma(_1749, cbSceneParam._m0[62u].w, fma(_1745, cbSceneParam._m0[62u].z, fma(_1741, cbSceneParam._m0[62u].y, _1737 * cbSceneParam._m0[62u].x))) / _1953;
            float _2098 = isnan(cbSceneParam._m0[41u].w) ? _2094 : (isnan(_2094) ? cbSceneParam._m0[41u].w : max(_2094, cbSceneParam._m0[41u].w));
            float _2141 = (cbSceneParam._m0[33u].x - sqrt(((_1751 * _1751) + (_1750 * _1750)) + (_1752 * _1752))) * cbSceneParam._m0[33u].y;
            float _4247 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
            float _2148 = (isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1954, cbSceneParam._m0[33u].w + _1955), _2098), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1954, _1955 - cbSceneParam._m0[33u].z), _2098), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1954 - cbSceneParam._m0[33u].z, _1955 - cbSceneParam._m0[33u].w), _2098), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1954 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1955), _2098), 0.0)).x), vec4(0.25)));
            float _2152 = 1.0 - (_2148 * cbSceneParam._m0[34u].x);
            float _2153 = 1.0 - (_2148 * cbSceneParam._m0[34u].y);
            float _2154 = 1.0 - (_2148 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2154) ? _1901 : (isnan(_1901) ? _2154 : min(_1901, _2154));
            frontier_phi_37_36_ladder_1 = isnan(_2153) ? _1900 : (isnan(_1900) ? _2153 : min(_1900, _2153));
            frontier_phi_37_36_ladder_2 = isnan(_2152) ? _1899 : (isnan(_1899) ? _2152 : min(_1899, _2152));
        }
        else
        {
            frontier_phi_37_36_ladder = _1901;
            frontier_phi_37_36_ladder_1 = _1900;
            frontier_phi_37_36_ladder_2 = _1899;
        }
        _1965 = frontier_phi_37_36_ladder_2;
        _1967 = frontier_phi_37_36_ladder_1;
        _1969 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1965 = _1899;
        _1967 = _1900;
        _1969 = _1901;
    }
    uvec4 _1974 = floatBitsToUint(cbInstanceData._m0[_621 + 5u]);
    uint _1976 = _1974.x * 14u;
    uint _1977 = _1976 + 13u;
    float _1984 = _646 + (-1.0);
    float _1989 = (cbLight._m0[_1977].x * _1984) + 1.0;
    float _1990 = (cbLight._m0[_1977].y * _1984) + 1.0;
    float _1991 = (cbLight._m0[_1977].z * _1984) + 1.0;
    float _1992 = (cbLight._m0[_1977].w * _1984) + 1.0;
    uint _1993 = _1976 + 5u;
    float _1999 = isnan(1.0) ? _1990 : (isnan(_1990) ? 1.0 : min(_1990, 1.0));
    uint _2003 = _1976 + 4u;
    float _2013 = isnan(1.0) ? _1989 : (isnan(_1989) ? 1.0 : min(_1989, 1.0));
    uint _2017 = _1976 | 1u;
    float _2028 = dot(vec3(cbLight._m0[_1976].xyz), vec3(_480, _481, _482));
    float _2031 = dot(vec3(cbLight._m0[_2017].xyz), vec3(_480, _481, _482));
    float _4283 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
    float _4294 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
    float _2036 = (isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * 0.3183098733425140380859375;
    float _2038 = (isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0))) * 0.3183098733425140380859375;
    float _2045 = ((cbLight._m0[_1993].x * _1999) * _2038) + (((cbLight._m0[_2003].x * _1965) * _2013) * _2036);
    float _2046 = ((_1999 * cbLight._m0[_1993].y) * _2038) + (((cbLight._m0[_2003].y * _1967) * _2013) * _2036);
    float _2047 = ((_1999 * cbLight._m0[_1993].z) * _2038) + (((cbLight._m0[_2003].z * _1969) * _2013) * _2036);
    uvec4 _2051 = floatBitsToUint(cbLight._m0[_1976 + 12u]);
    bool _2053 = _2051.x == 0u;
    float _2155;
    float _2157;
    float _2159;
    if (_2053)
    {
        _2155 = _2045;
        _2157 = _2046;
        _2159 = _2047;
    }
    else
    {
        uint _2163 = _1976 + 6u;
        float _2179 = (dot(vec3(cbLight._m0[_1976 + 2u].xyz), vec3(_480, _481, _482)) * 0.5) + 0.5;
        float _2180 = _2179 * _2179;
        float _4305 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
        float _2181 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
        float _2182 = isnan(1.0) ? _1991 : (isnan(_1991) ? 1.0 : min(_1991, 1.0));
        _2155 = (((cbLight._m0[_2163].x * 0.3183098733425140380859375) * _2181) * _2182) + _2045;
        _2157 = (((cbLight._m0[_2163].y * 0.3183098733425140380859375) * _2181) * _2182) + _2046;
        _2159 = (((cbLight._m0[_2163].z * 0.3183098733425140380859375) * _2181) * _2182) + _2047;
    }
    bool _2162 = _2051.y == 0u;
    float _2217;
    float _2219;
    float _2221;
    if (_2162)
    {
        _2217 = _2155;
        _2219 = _2157;
        _2221 = _2159;
    }
    else
    {
        uint _2379 = _1976 + 7u;
        float _2395 = (dot(vec3(cbLight._m0[_1976 + 3u].xyz), vec3(_480, _481, _482)) * 0.5) + 0.5;
        float _2396 = _2395 * _2395;
        float _4321 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
        float _2397 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _2398 = isnan(1.0) ? _1992 : (isnan(_1992) ? 1.0 : min(_1992, 1.0));
        _2217 = (((cbLight._m0[_2379].x * 0.3183098733425140380859375) * _2397) * _2398) + _2155;
        _2219 = (((cbLight._m0[_2379].y * 0.3183098733425140380859375) * _2397) * _2398) + _2157;
        _2221 = (((cbLight._m0[_2379].z * 0.3183098733425140380859375) * _2397) * _2398) + _2159;
    }
    uint _2224 = _1976 + 8u;
    float _2237 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1976].w)) * _483) * 0.949999988079071044921875);
    float _2238 = _2237 * _2237;
    float _2239 = cbLight._m0[_1976].x + _560;
    float _2240 = cbLight._m0[_1976].y + _561;
    float _2241 = cbLight._m0[_1976].z + _562;
    float _2245 = inversesqrt(dot(vec3(_2239, _2240, _2241), vec3(_2239, _2240, _2241)));
    float _2246 = _2245 * _2239;
    float _2247 = _2245 * _2240;
    float _2248 = _2245 * _2241;
    float _2249 = dot(vec3(_480, _481, _482), vec3(cbLight._m0[_1976].xyz));
    float _4337 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
    float _2252 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
    float _4348 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _2253 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
    float _2254 = dot(vec3(_480, _481, _482), vec3(_2246, _2247, _2248));
    float _4359 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
    float _2257 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
    float _2258 = dot(vec3(cbLight._m0[_1976].xyz), vec3(_2246, _2247, _2248));
    float _4370 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
    float _2262 = _2238 * _2238;
    float _2266 = ((_2257 * _2257) * (_2262 + (-1.0))) + 1.0;
    float _2277 = (exp2(log2(1.0 - (isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2278 = 1.0 - _2238;
    float _2289 = (0.5 / (((_2253 * ((_2252 * _2278) + _2238)) + 9.9999999392252902907785028219223e-09) + (((_2253 * _2278) + _2238) * _2252))) * _2252;
    float _4381 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
    float _2291 = (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0))) * (_2262 / ((_2266 * _2266) * 3.141590118408203125));
    uint _2305 = _1976 + 9u;
    float _2316 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2017].w)) * _483) * 0.949999988079071044921875);
    float _2317 = _2316 * _2316;
    float _2318 = cbLight._m0[_2017].x + _560;
    float _2319 = cbLight._m0[_2017].y + _561;
    float _2320 = cbLight._m0[_2017].z + _562;
    float _2324 = inversesqrt(dot(vec3(_2318, _2319, _2320), vec3(_2318, _2319, _2320)));
    float _2325 = _2324 * _2318;
    float _2326 = _2324 * _2319;
    float _2327 = _2324 * _2320;
    float _2328 = dot(vec3(_480, _481, _482), vec3(cbLight._m0[_2017].xyz));
    float _4392 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
    float _2331 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
    float _2332 = dot(vec3(_480, _481, _482), vec3(_2325, _2326, _2327));
    float _4403 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
    float _2335 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
    float _2336 = dot(vec3(cbLight._m0[_2017].xyz), vec3(_2325, _2326, _2327));
    float _4414 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
    float _2340 = _2317 * _2317;
    float _2344 = ((_2335 * _2335) * (_2340 + (-1.0))) + 1.0;
    float _2353 = (exp2(log2(1.0 - (isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2354 = 1.0 - _2317;
    float _2364 = (0.5 / (((_2253 * ((_2331 * _2354) + _2317)) + 9.9999999392252902907785028219223e-09) + (((_2253 * _2354) + _2317) * _2331))) * _2331;
    float _4425 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
    float _2366 = (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0))) * (_2340 / ((_2344 * _2344) * 3.141590118408203125));
    float _2376 = (((_2353 * cbLight._m0[_2305].x) * _2366) * _1999) + ((((cbLight._m0[_2224].x * _1965) * _2277) * _2291) * _2013);
    float _2377 = (((_2353 * cbLight._m0[_2305].y) * _2366) * _1999) + ((((cbLight._m0[_2224].y * _1967) * _2277) * _2291) * _2013);
    float _2378 = (((_2353 * cbLight._m0[_2305].z) * _2366) * _1999) + ((((cbLight._m0[_2224].z * _1969) * _2277) * _2291) * _2013);
    float _2434;
    float _2436;
    float _2438;
    if (_2053)
    {
        _2434 = _2376;
        _2436 = _2377;
        _2438 = _2378;
    }
    else
    {
        uint _2440 = _1976 + 2u;
        uint _2444 = _1976 + 10u;
        float _2458 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2440].w)) * _483) * 0.949999988079071044921875);
        float _2459 = _2458 * _2458;
        float _2460 = cbLight._m0[_2440].x + _560;
        float _2461 = cbLight._m0[_2440].y + _561;
        float _2462 = cbLight._m0[_2440].z + _562;
        float _2466 = inversesqrt(dot(vec3(_2460, _2461, _2462), vec3(_2460, _2461, _2462)));
        float _2467 = _2466 * _2460;
        float _2468 = _2466 * _2461;
        float _2469 = _2466 * _2462;
        float _2470 = dot(vec3(_480, _481, _482), vec3(cbLight._m0[_2440].xyz));
        float _4436 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
        float _2473 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
        float _2474 = dot(vec3(_480, _481, _482), vec3(_2467, _2468, _2469));
        float _4447 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
        float _2477 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
        float _2478 = dot(vec3(cbLight._m0[_2440].xyz), vec3(_2467, _2468, _2469));
        float _4458 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
        float _2482 = _2459 * _2459;
        float _2486 = ((_2477 * _2477) * (_2482 + (-1.0))) + 1.0;
        float _2495 = (exp2(log2(1.0 - (isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2496 = 1.0 - _2459;
        float _2506 = (0.5 / (((_2253 * ((_2473 * _2496) + _2459)) + 9.9999999392252902907785028219223e-09) + (((_2253 * _2496) + _2459) * _2473))) * _2473;
        float _4469 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
        float _2508 = (isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0))) * (_2482 / ((_2486 * _2486) * 3.141590118408203125));
        float _2509 = isnan(1.0) ? _1991 : (isnan(_1991) ? 1.0 : min(_1991, 1.0));
        _2434 = (((_2495 * cbLight._m0[_2444].x) * _2508) * _2509) + _2376;
        _2436 = (((_2495 * cbLight._m0[_2444].y) * _2508) * _2509) + _2377;
        _2438 = (((_2495 * cbLight._m0[_2444].z) * _2508) * _2509) + _2378;
    }
    float _2540;
    float _2542;
    float _2544;
    if (_2162)
    {
        _2540 = _2434;
        _2542 = _2436;
        _2544 = _2438;
    }
    else
    {
        uint _2551 = _1976 + 3u;
        uint _2555 = _1976 + 11u;
        float _2569 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2551].w)) * _483) * 0.949999988079071044921875);
        float _2570 = _2569 * _2569;
        float _2571 = cbLight._m0[_2551].x + _560;
        float _2572 = cbLight._m0[_2551].y + _561;
        float _2573 = cbLight._m0[_2551].z + _562;
        float _2577 = inversesqrt(dot(vec3(_2571, _2572, _2573), vec3(_2571, _2572, _2573)));
        float _2578 = _2577 * _2571;
        float _2579 = _2577 * _2572;
        float _2580 = _2577 * _2573;
        float _2581 = dot(vec3(_480, _481, _482), vec3(cbLight._m0[_2551].xyz));
        float _4485 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
        float _2584 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
        float _2585 = dot(vec3(_480, _481, _482), vec3(_2578, _2579, _2580));
        float _4496 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
        float _2588 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
        float _2589 = dot(vec3(cbLight._m0[_2551].xyz), vec3(_2578, _2579, _2580));
        float _4507 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
        float _2593 = _2570 * _2570;
        float _2597 = ((_2588 * _2588) * (_2593 + (-1.0))) + 1.0;
        float _2606 = (exp2(log2(1.0 - (isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2607 = 1.0 - _2570;
        float _2617 = (0.5 / (((_2253 * ((_2584 * _2607) + _2570)) + 9.9999999392252902907785028219223e-09) + (((_2253 * _2607) + _2570) * _2584))) * _2584;
        float _4518 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
        float _2619 = (isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0))) * (_2593 / ((_2597 * _2597) * 3.141590118408203125));
        float _2620 = isnan(1.0) ? _1992 : (isnan(_1992) ? 1.0 : min(_1992, 1.0));
        _2540 = (((_2606 * cbLight._m0[_2555].x) * _2619) * _2620) + _2434;
        _2542 = (((_2606 * cbLight._m0[_2555].y) * _2619) * _2620) + _2436;
        _2544 = (((_2606 * cbLight._m0[_2555].z) * _2619) * _2620) + _2438;
    }
    float _2686;
    float _2688;
    float _2690;
    float _2692;
    float _2694;
    float _2696;
    if (_1974.y == 0u)
    {
        uvec4 _2641 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2642 = _2641.x;
        uint _2653 = uint((float(_2641.y) * floor(float(uint(cbSceneParam._m0[85u].y * _582) / _2642))) + floor(float(uint(cbSceneParam._m0[85u].x * _581) / _2642)));
        float _2663 = (log2(_1752 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2664 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
        uint _2667 = uint(isnan(14.0) ? _2664 : (isnan(_2664) ? 14.0 : min(_2664, 14.0)));
        uvec4 _2672 = texelFetch(g_lightClusterGridBuffer, int(((_2667 << 2u) + (_2653 << 6u)) >> 2u));
        uint _2673 = _2672.x;
        uint _2674 = _2641.z;
        float _2782;
        float _2784;
        float _2786;
        float _2788;
        float _2790;
        float _2792;
        if (((((1u << ((_2674 >> 4u) & 15u)) + 4294967295u) & _2673) == 0u) || ((_2674 & 240u) == 0u))
        {
            _2782 = 0.0;
            _2784 = 0.0;
            _2786 = 0.0;
            _2788 = 0.0;
            _2790 = 0.0;
            _2792 = 0.0;
        }
        else
        {
            float _2783;
            float _2785;
            float _2787;
            float _2789;
            float _2791;
            float _2793;
            float _2943 = 0.0;
            float _2944 = 0.0;
            float _2945 = 0.0;
            float _2946 = 0.0;
            float _2947 = 0.0;
            float _2948 = 0.0;
            uint _2949 = 0u;
            uint _2958;
            bool _2959;
            for (;;)
            {
                _2958 = texelFetch(g_lightClassification, int((((_2667 << 5u) + (_2653 << 9u)) + (_2949 << 2u)) >> 2u)).x;
                _2959 = _2958 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2959)
                {
                    frontier_phi_71_pred = _2948;
                    frontier_phi_71_pred_1 = _2947;
                    frontier_phi_71_pred_2 = _2946;
                    frontier_phi_71_pred_3 = _2945;
                    frontier_phi_71_pred_4 = _2944;
                    frontier_phi_71_pred_5 = _2943;
                }
                else
                {
                    float _3088;
                    float _3089;
                    float _3090;
                    float _3091;
                    float _3092;
                    float _3093;
                    uint _3094;
                    _3088 = _2943;
                    _3089 = _2944;
                    _3090 = _2945;
                    _3091 = _2946;
                    _3092 = _2947;
                    _3093 = _2948;
                    _3094 = _2958;
                    float _3015;
                    float _3016;
                    float _3017;
                    float _3018;
                    float _3019;
                    float _3020;
                    for (;;)
                    {
                        uint _3098 = uint(findLSB(_3094)) + (_2949 << 5u);
                        uint _3095 = (_3094 + 4294967295u) & _3094;
                        uint _3100 = _3098 * 48u;
                        vec4 _3114 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3100)).x, texelFetch(g_PointLightRenderingBuffer, int(_3100 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3100 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3100 + 3u)).x));
                        uint _3120 = (_3098 * 48u) + 4u;
                        vec4 _3133 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3120)).x, texelFetch(g_PointLightRenderingBuffer, int(_3120 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3120 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3120 + 3u)).x));
                        uint _3139 = (_3098 * 48u) + 8u;
                        vec3 _3150 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3139)).x, texelFetch(g_PointLightRenderingBuffer, int(_3139 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3139 + 2u)).x));
                        float _3154 = _3114.x - _1750;
                        float _3155 = _3114.y - _1751;
                        float _3156 = _3114.z - _1752;
                        float _3157 = dot(vec3(_3154, _3155, _3156), vec3(_3154, _3155, _3156));
                        float _3160 = inversesqrt(_3157);
                        float _3161 = _3160 * _3154;
                        float _3162 = _3160 * _3155;
                        float _3163 = _3160 * _3156;
                        float _3164 = dot(vec3(_602, _605, _608), vec3(_3161, _3162, _3163));
                        float _3169 = 1.0 - (_3157 * _3114.w);
                        float _4544 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0));
                        float _3170 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
                        float _3171 = sqrt(_3157) * _3133.w;
                        float _3174 = 1.39999997615814208984375 / (_3171 + 1.39999997615814208984375);
                        float _3175 = _3174 * _3174;
                        float _3178 = ((1.0 - _3175) * _3164) + _3175;
                        float _3181 = _3171 * _3171;
                        float _3185 = ((isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : max(_3178, 0.0))) * _3170) / ((_3181 * 0.699999988079071044921875) + 1.0);
                        float _3189 = (-0.0) - _1750;
                        float _3190 = (-0.0) - _1751;
                        float _3191 = (-0.0) - _1752;
                        float _3195 = inversesqrt(dot(vec3(_3189, _3190, _3191), vec3(_3189, _3190, _3191)));
                        float _3196 = _3195 * _3189;
                        float _3197 = _3195 * _3190;
                        float _3198 = _3195 * _3191;
                        float _3205 = exp2(log2(1.0 / ((_3181 * 3.5) + 5.0)) * 0.25);
                        float _3206 = 1.0 - _662;
                        float _3213 = sqrt(1.0 - ((1.0 - (_3206 * _3206)) * (1.0 - (_3205 * _3205))));
                        float _3214 = _3213 * _3213;
                        float _3215 = _3214 * _3214;
                        float _3216 = _3196 + _3161;
                        float _3217 = _3197 + _3162;
                        float _3218 = _3198 + _3163;
                        float _3222 = inversesqrt(dot(vec3(_3216, _3217, _3218), vec3(_3216, _3217, _3218)));
                        float _3226 = dot(vec3(_602, _605, _608), vec3(_3196, _3197, _3198));
                        float _4560 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0));
                        float _3229 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
                        float _3230 = dot(vec3(_602, _605, _608), vec3(_3222 * _3216, _3222 * _3217, _3222 * _3218));
                        float _4571 = isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0));
                        float _3233 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
                        float _3237 = ((_3233 * _3233) * (_3215 + (-1.0))) + 1.0;
                        float _3238 = _3174 * _3214;
                        float _3239 = _3238 * _3238;
                        float _3242 = ((1.0 - _3239) * _3164) + _3239;
                        float _4582 = isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0));
                        float _3243 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
                        float _3244 = 1.0 - _3214;
                        float _3254 = (0.5 / (((_3243 * ((_3229 * _3244) + _3214)) + 9.9999999392252902907785028219223e-09) + (((_3243 * _3244) + _3214) * _3229))) * _3243;
                        float _4593 = isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0));
                        float _3265 = (((_3215 * 3.1415927410125732421875) * (isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0)))) / ((_3237 * _3237) * ((_3181 * 2.1991131305694580078125) + 3.141590118408203125))) * _3170;
                        _3018 = (_3185 * _3133.x) + _3091;
                        _3019 = (_3185 * _3133.y) + _3092;
                        _3020 = (_3185 * _3133.z) + _3093;
                        _3015 = (_3265 * _3150.x) + _3088;
                        _3016 = (_3265 * _3150.y) + _3089;
                        _3017 = (_3265 * _3150.z) + _3090;
                        if (_3095 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3088 = _3015;
                            _3089 = _3016;
                            _3090 = _3017;
                            _3091 = _3018;
                            _3092 = _3019;
                            _3093 = _3020;
                            _3094 = _3095;
                        }
                    }
                    frontier_phi_71_pred = _3020;
                    frontier_phi_71_pred_1 = _3019;
                    frontier_phi_71_pred_2 = _3018;
                    frontier_phi_71_pred_3 = _3017;
                    frontier_phi_71_pred_4 = _3016;
                    frontier_phi_71_pred_5 = _3015;
                }
                _2793 = frontier_phi_71_pred;
                _2791 = frontier_phi_71_pred_1;
                _2789 = frontier_phi_71_pred_2;
                _2787 = frontier_phi_71_pred_3;
                _2785 = frontier_phi_71_pred_4;
                _2783 = frontier_phi_71_pred_5;
                uint _2950 = _2949 + 1u;
                if (_2950 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2943 = _2783;
                    _2944 = _2785;
                    _2945 = _2787;
                    _2946 = _2789;
                    _2947 = _2791;
                    _2948 = _2793;
                    _2949 = _2950;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2782 = _2783;
            _2784 = _2785;
            _2786 = _2787;
            _2788 = _2789;
            _2790 = _2791;
            _2792 = _2793;
        }
        uvec4 _2796 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2797 = _2796.z;
        uint _2799 = (_2797 >> 8u) & 15u;
        float _2911;
        float _2913;
        float _2915;
        float _2917;
        float _2919;
        float _2921;
        if (((4294967295u << _2799) & _2673) == 0u)
        {
            _2911 = _2782;
            _2913 = _2784;
            _2915 = _2786;
            _2917 = _2788;
            _2919 = _2790;
            _2921 = _2792;
        }
        else
        {
            float _2936 = inversesqrt(dot(vec3(_1750, _1751, _1752), vec3(_1750, _1751, _1752)));
            float _2937 = _2936 * _1750;
            float _2938 = _2936 * _1751;
            float _2939 = _2936 * _1752;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2799 < ((_2797 >> 12u) & 15u))
            {
                float _2912;
                float _2914;
                float _2916;
                float _2918;
                float _2920;
                float _2922;
                float _3071 = _2782;
                float _3072 = _2784;
                float _3073 = _2786;
                float _3074 = _2788;
                float _3075 = _2790;
                float _3076 = _2792;
                uint _3077 = _2799;
                uint _3086;
                bool _3087;
                for (;;)
                {
                    _3086 = texelFetch(g_lightClassification, int((((_2667 << 5u) + (_2653 << 9u)) + (_3077 << 2u)) >> 2u)).x;
                    _3087 = _3086 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3087)
                    {
                        frontier_phi_82_pred = _3076;
                        frontier_phi_82_pred_1 = _3075;
                        frontier_phi_82_pred_2 = _3074;
                        frontier_phi_82_pred_3 = _3073;
                        frontier_phi_82_pred_4 = _3072;
                        frontier_phi_82_pred_5 = _3071;
                    }
                    else
                    {
                        float _3279;
                        float _3280;
                        float _3281;
                        float _3282;
                        float _3283;
                        float _3284;
                        float _3573;
                        float _3574;
                        float _3575;
                        float _3576;
                        float _3577;
                        float _3578;
                        float _3292 = _3071;
                        float _3293 = _3072;
                        float _3294 = _3073;
                        float _3295 = _3074;
                        float _3296 = _3075;
                        float _3297 = _3076;
                        uint _3298 = _3086;
                        uint _3299;
                        vec4 _3324;
                        float _3325;
                        vec4 _3340;
                        vec3 _3352;
                        vec4 _3367;
                        vec4 _3382;
                        float _3429;
                        bool _3430;
                        for (;;)
                        {
                            uint _3309 = ((_3077 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3298));
                            _3299 = (_3298 + 4294967295u) & _3298;
                            uint _3311 = _3309 * 40u;
                            _3324 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3311)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 3u)).x));
                            _3325 = _3324.w;
                            uint _3327 = (_3309 * 40u) + 4u;
                            _3340 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3327)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 3u)).x));
                            uint _3342 = (_3309 * 40u) + 8u;
                            _3352 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3342)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 2u)).x));
                            uint _3354 = (_3309 * 40u) + 16u;
                            _3367 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3354)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 3u)).x));
                            uint _3369 = (_3309 * 40u) + 20u;
                            _3382 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3369)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 3u)).x));
                            uint _3385 = (_3309 * 40u) + 24u;
                            vec4 _3398 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3385)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 3u)).x));
                            uint _3404 = (_3309 * 40u) + 28u;
                            vec4 _3417 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3404)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 3u)).x));
                            _3429 = fma(_1752, _3417.z, fma(_1751, _3417.y, _3417.x * _1750)) + _3417.w;
                            _3430 = !((fma(_1752, _3398.z, fma(_1751, _3398.y, _3398.x * _1750)) + _3398.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3430)
                            {
                                float _3457 = _3324.x - _1750;
                                float _3458 = _3324.y - _1751;
                                float _3459 = _3324.z - _1752;
                                float _3460 = dot(vec3(_3457, _3458, _3459), vec3(_3457, _3458, _3459));
                                float _3463 = inversesqrt(_3460);
                                float _3464 = _3463 * _3457;
                                float _3465 = _3463 * _3458;
                                float _3466 = _3463 * _3459;
                                float _3470 = 1.0 - (_3460 / (_3325 * _3325));
                                float _4604 = isnan(0.0) ? _3470 : (isnan(_3470) ? 0.0 : max(_3470, 0.0));
                                float _3471 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
                                float _3475 = sqrt(_3460) * _3340.w;
                                float _3477 = 1.39999997615814208984375 / (_3475 + 1.39999997615814208984375);
                                float _3478 = _3477 * _3477;
                                float _3481 = ((1.0 - _3478) * dot(vec3(_3464, _3465, _3466), vec3(_602, _605, _608))) + _3478;
                                float _3484 = _3475 * _3475;
                                float _3488 = (fma(_1752, _3367.z, fma(_1751, _3367.y, _3367.x * _1750)) + _3367.w) / _3429;
                                float _3489 = (fma(_1752, _3382.z, fma(_1751, _3382.y, _3382.x * _1750)) + _3382.w) / _3429;
                                float _3493 = 1.0 - dot(vec2(_3488, _3489), vec2(_3488, _3489));
                                float _4620 = isnan(0.0) ? _3493 : (isnan(_3493) ? 0.0 : max(_3493, 0.0));
                                float _3494 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
                                float _3495 = _3494 * (((isnan(0.0) ? _3481 : (isnan(_3481) ? 0.0 : max(_3481, 0.0))) * _3471) / ((_3484 * 0.699999988079071044921875) + 1.0));
                                float _3507 = exp2(log2(1.0 / ((_3484 * 3.5) + 5.0)) * 0.25);
                                float _3508 = 1.0 - _662;
                                float _3515 = sqrt(1.0 - ((1.0 - (_3508 * _3508)) * (1.0 - (_3507 * _3507))));
                                float _3516 = _3515 * _3515;
                                float _3517 = _3516 * _3516;
                                float _3518 = _3464 - _2937;
                                float _3519 = _3465 - _2938;
                                float _3520 = _3466 - _2939;
                                float _3524 = inversesqrt(dot(vec3(_3518, _3519, _3520), vec3(_3518, _3519, _3520)));
                                float _3528 = dot(vec3(_602, _605, _608), vec3((-0.0) - _2937, (-0.0) - _2938, (-0.0) - _2939));
                                float _4631 = isnan(0.0) ? _3528 : (isnan(_3528) ? 0.0 : max(_3528, 0.0));
                                float _3531 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
                                float _3532 = dot(vec3(_602, _605, _608), vec3(_3524 * _3518, _3524 * _3519, _3524 * _3520));
                                float _4642 = isnan(0.0) ? _3532 : (isnan(_3532) ? 0.0 : max(_3532, 0.0));
                                float _3535 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
                                float _3539 = ((_3535 * _3535) * (_3517 + (-1.0))) + 1.0;
                                float _3540 = _3477 * _3516;
                                float _3541 = _3540 * _3540;
                                float _3547 = ((1.0 - _3541) * dot(vec3(_602, _605, _608), vec3(_3464, _3465, _3466))) + _3541;
                                float _4653 = isnan(0.0) ? _3547 : (isnan(_3547) ? 0.0 : max(_3547, 0.0));
                                float _3548 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
                                float _3549 = 1.0 - _3516;
                                float _3559 = (0.5 / (((_3548 * ((_3531 * _3549) + _3516)) + 9.9999999392252902907785028219223e-09) + (((_3548 * _3549) + _3516) * _3531))) * _3548;
                                float _4664 = isnan(0.0) ? _3559 : (isnan(_3559) ? 0.0 : max(_3559, 0.0));
                                float _3569 = (_3494 * _3471) * (((_3517 * 3.1415927410125732421875) * (isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0)))) / ((_3539 * _3539) * ((_3484 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3495 * _3340.z;
                                frontier_phi_88_pred_1 = _3495 * _3340.y;
                                frontier_phi_88_pred_2 = _3495 * _3340.x;
                                frontier_phi_88_pred_3 = _3569 * _3352.z;
                                frontier_phi_88_pred_4 = _3569 * _3352.y;
                                frontier_phi_88_pred_5 = _3569 * _3352.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3578 = frontier_phi_88_pred;
                            _3577 = frontier_phi_88_pred_1;
                            _3576 = frontier_phi_88_pred_2;
                            _3575 = frontier_phi_88_pred_3;
                            _3574 = frontier_phi_88_pred_4;
                            _3573 = frontier_phi_88_pred_5;
                            _3282 = _3576 + _3295;
                            _3283 = _3577 + _3296;
                            _3284 = _3578 + _3297;
                            _3279 = _3573 + _3292;
                            _3280 = _3574 + _3293;
                            _3281 = _3575 + _3294;
                            if (_3299 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3292 = _3279;
                                _3293 = _3280;
                                _3294 = _3281;
                                _3295 = _3282;
                                _3296 = _3283;
                                _3297 = _3284;
                                _3298 = _3299;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3284;
                        frontier_phi_82_pred_1 = _3283;
                        frontier_phi_82_pred_2 = _3282;
                        frontier_phi_82_pred_3 = _3281;
                        frontier_phi_82_pred_4 = _3280;
                        frontier_phi_82_pred_5 = _3279;
                    }
                    _2922 = frontier_phi_82_pred;
                    _2920 = frontier_phi_82_pred_1;
                    _2918 = frontier_phi_82_pred_2;
                    _2916 = frontier_phi_82_pred_3;
                    _2914 = frontier_phi_82_pred_4;
                    _2912 = frontier_phi_82_pred_5;
                    uint _3078 = _3077 + 1u;
                    if (_3078 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3071 = _2912;
                        _3072 = _2914;
                        _3073 = _2916;
                        _3074 = _2918;
                        _3075 = _2920;
                        _3076 = _2922;
                        _3077 = _3078;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2918;
                frontier_phi_63_64_ladder_1 = _2922;
                frontier_phi_63_64_ladder_2 = _2920;
                frontier_phi_63_64_ladder_3 = _2916;
                frontier_phi_63_64_ladder_4 = _2914;
                frontier_phi_63_64_ladder_5 = _2912;
            }
            else
            {
                frontier_phi_63_64_ladder = _2788;
                frontier_phi_63_64_ladder_1 = _2792;
                frontier_phi_63_64_ladder_2 = _2790;
                frontier_phi_63_64_ladder_3 = _2786;
                frontier_phi_63_64_ladder_4 = _2784;
                frontier_phi_63_64_ladder_5 = _2782;
            }
            _2911 = frontier_phi_63_64_ladder_5;
            _2913 = frontier_phi_63_64_ladder_4;
            _2915 = frontier_phi_63_64_ladder_3;
            _2917 = frontier_phi_63_64_ladder;
            _2919 = frontier_phi_63_64_ladder_2;
            _2921 = frontier_phi_63_64_ladder_1;
        }
        float _2926 = isnan(1.0) ? _646 : (isnan(_646) ? 1.0 : min(_646, 1.0));
        _2686 = (_2926 * _2917) + _2217;
        _2688 = (_2926 * _2919) + _2219;
        _2690 = (_2926 * _2921) + _2221;
        _2692 = ((_2911 * 0.039999999105930328369140625) * _2926) + _2540;
        _2694 = ((_2913 * 0.039999999105930328369140625) * _2926) + _2542;
        _2696 = ((_2915 * 0.039999999105930328369140625) * _2926) + _2544;
    }
    else
    {
        _2686 = _2217;
        _2688 = _2219;
        _2690 = _2221;
        _2692 = _2540;
        _2694 = _2542;
        _2696 = _2544;
    }
    uint _2702 = _622 + uint(cbMatDynParam._m0[0u].w);
    float _2708 = ((((((_435.x - _432) * _368) + _432) * cbMtdParam._m0[13u].x) + ((((_389.x - _386) * _368) + _386) * cbMtdParam._m0[11u].x)) * _463) * cbInstanceData._m0[_2702].x;
    float _2709 = ((((((_435.y - _433) * _368) + _433) * cbMtdParam._m0[13u].y) + ((((_389.y - _387) * _368) + _387) * cbMtdParam._m0[11u].y)) * _463) * cbInstanceData._m0[_2702].y;
    float _2710 = ((((((_435.z - _434) * _368) + _434) * cbMtdParam._m0[13u].z) + ((((_389.z - _388) * _368) + _388) * cbMtdParam._m0[11u].z)) * _463) * cbInstanceData._m0[_2702].z;
    float _4680 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _4691 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _4702 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _2727 = (((isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0))) * (_2686 + ((isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0))) * _646))) + ((_2692 + ((isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0))) * _1483)) * cbPerFrame._m0[3u].x)) + _2708;
    float _2729 = (_2709 + ((_2694 + ((isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0))) * _1483)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0))) * (_2688 + ((isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0))) * _646)));
    float _2731 = (_2710 + ((_2696 + ((isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0))) * _1483)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0))) * (_2690 + ((isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0))) * _646)));
    float _2732 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
    float _2733 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
    float _2734 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
    float _2740 = cbMtdParam._m0[2u].x * _2708;
    float _2741 = cbMtdParam._m0[2u].y * _2709;
    float _2742 = cbMtdParam._m0[2u].z * _2710;
    float _4728 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2744 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
    uint _2745 = _621 + 6u;
    float _2753 = _581 / cbSceneParam._m0[86u].x;
    float _2754 = _582 / cbSceneParam._m0[86u].y;
    vec4 _2768 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2753, _2754, (log2((isnan(cbSceneParam._m0[77u].w) ? _502 : (isnan(_502) ? cbSceneParam._m0[77u].w : min(_502, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2770 = _2768.x;
    float _2771 = _2768.y;
    float _2772 = _2768.z;
    float _2773 = _2768.w;
    float _2844;
    float _2846;
    float _2848;
    float _2850;
    if (_502 > cbSceneParam._m0[78u].w)
    {
        float _2807 = isnan(_502) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _502 : min(cbSceneParam._m0[80u].w, _502));
        float _2808 = _2807 / _502;
        float _2819 = _2808 * _553;
        float _2820 = _554 * _2808;
        float _2821 = (-0.0) - _2820;
        float _2822 = _2808 * _555;
        float _2824 = (cbSceneParam._m0[77u].w * _2821) / _2807;
        float _2825 = _2824 + cbSceneParam._m0[79u].w;
        float _2826 = cbSceneParam._m0[79u].w - _2820;
        float _2832 = sqrt(((_2819 * _2819) + (_2820 * _2820)) + (_2822 * _2822));
        float _2835 = (1.0 - (cbSceneParam._m0[77u].w / _2807)) * _2832;
        float _2840 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2842 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3028;
        if (abs((_2821 - _2824) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3028 = ((((_2825 > 0.0) ? exp2(_2840 * _2825) : (2.0 - exp2(_2842 * _2825))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2835;
        }
        else
        {
            float _2972 = 1.0 / cbSceneParam._m0[80u].x;
            float _2973 = isnan(_2826) ? _2825 : (isnan(_2825) ? _2826 : max(_2825, _2826));
            float _2974 = isnan(_2826) ? _2825 : (isnan(_2825) ? _2826 : min(_2825, _2826));
            float _2983 = isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : min(_2973, 0.0));
            float _2984 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : min(_2974, 0.0));
            _3028 = ((abs(_2832 / _2821) * cbSceneParam._m0[80u].y) * ((((_2983 - _2984) * 2.0) - ((exp2(_2840 * (isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : max(_2973, 0.0)))) - exp2(_2840 * (isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0))))) * _2972)) - ((exp2(_2842 * _2983) - exp2(_2842 * _2984)) * _2972))) + (_2835 * cbSceneParam._m0[80u].z);
        }
        vec4 _3030 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2753, _2754, 1.0), 0.0);
        float _3039 = exp2((_3028 * (-1.44269502162933349609375)) * (1.0 - _3030.w));
        float _3040 = log2(_3039);
        float _3056 = log2(_2773);
        _2844 = (exp2(_3056 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3040 * cbSceneParam._m0[78u].x)) * _3030.x) / cbSceneParam._m0[78u].x)) + _2770;
        _2846 = (exp2(_3056 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3040 * cbSceneParam._m0[78u].y)) * _3030.y) / cbSceneParam._m0[78u].y)) + _2771;
        _2848 = (exp2(_3056 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3040 * cbSceneParam._m0[78u].z)) * _3030.z) / cbSceneParam._m0[78u].z)) + _2772;
        _2850 = _3039 * _2773;
    }
    else
    {
        _2844 = _2770;
        _2846 = _2771;
        _2848 = _2772;
        _2850 = _2773;
    }
    bool _3066;
    vec4 _2860;
    vec4 _2882;
    float _2884;
    float _2888;
    float _2889;
    float _2890;
    float _2893;
    float _2896;
    float _2899;
    float _2900;
    bool _2910;
    for (;;)
    {
        _2860 = cbMatDynParam._m0[0u];
        float _2862 = roundEven(_2860.y);
        bool _2863 = _2862 == 3.0;
        float _2864 = log2(_2850);
        float _2868 = exp2(_2864 * cbSceneParam._m0[78u].x);
        float _2869 = exp2(_2864 * cbSceneParam._m0[78u].y);
        float _2870 = exp2(_2864 * cbSceneParam._m0[78u].z);
        float _2871 = _2868 * _2732;
        float _2872 = _2869 * _2733;
        float _2873 = _2870 * _2734;
        float _2880 = _569 + (-0.5);
        _2882 = cbMtdParam._m0[1u];
        _2884 = _2882.y * _2880;
        float _2887 = (_2862 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2888 = _2887 * (_2863 ? _2871 : (_2871 + (cbSceneParam._m0[72u].w * _2844)));
        _2889 = _2887 * (_2863 ? _2872 : (_2872 + (cbSceneParam._m0[72u].w * _2846)));
        _2890 = _2887 * (_2863 ? _2873 : (_2873 + (cbSceneParam._m0[72u].w * _2848)));
        _2893 = ((_2740 * _2744) * _2868) * _2887;
        _2896 = ((_2741 * _2744) * _2869) * _2887;
        _2899 = ((_2742 * _2744) * _2870) * _2887;
        _2900 = _2880 * 0.999000012874603271484375;
        _2910 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2910)
        {
            if ((cbInstanceData._m0[_621 + 7u].x + _2900) < 0.5)
            {
                _3066 = true;
                break;
            }
        }
        uint _3007 = _622 + uint(_2860.w);
        if ((cbInstanceData._m0[_3007].w < 1.0) && ((cbInstanceData._m0[_3007].w + _2900) < 0.5))
        {
            _3066 = true;
            break;
        }
        if ((_2884 + 1.0) < _2882.x)
        {
            _3066 = true;
            break;
        }
        _3066 = false;
        break;
    }
    float _3270;
    if (_3066)
    {
        discard_state = true;
        _3270 = 0.0;
    }
    else
    {
        _3270 = cbInstanceData._m0[_2745].w;
    }
    SV_Target.x = _2888;
    SV_Target.y = _2889;
    SV_Target.z = _2890;
    SV_Target.w = _3270;
    SV_Target_1.x = _2893;
    SV_Target_1.y = _2896;
    SV_Target_1.z = _2899;
    SV_Target_1.w = cbInstanceData._m0[_2745].w;
    discard_exit();
}


