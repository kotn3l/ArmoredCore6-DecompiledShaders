#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1104;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _195 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _196 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _197 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _203 = inversesqrt(dot(vec3(_195, _196, _197), vec3(_195, _196, _197)));
    float _210 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _217 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _239 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _245 = _239.x * cbMtdParam._m0[9u].x;
    float _246 = _239.y * cbMtdParam._m0[9u].y;
    float _247 = _239.z * cbMtdParam._m0[9u].z;
    vec4 _285 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[5u].w));
    float _301 = (TEXCOORD_3.x - ((cbMtdParam._m0[14u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[14u].y + 1.0);
    float _3449 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _302 = isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0));
    float _309 = (((_285.x * cbMtdParam._m0[10u].x) - _245) * _302) + _245;
    float _310 = (((_285.y * cbMtdParam._m0[10u].y) - _246) * _302) + _246;
    float _311 = (((_285.z * cbMtdParam._m0[10u].z) - _247) * _302) + _247;
    vec4 _328 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    vec4 _343 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[4u].w));
    float _351 = (_343.x * 2.0) + (-1.0);
    float _353 = (_343.y * 2.0) + (-1.0);
    float _354 = dot(vec2(_351, _353), vec2(_351, _353));
    float _3460 = isnan(0.0) ? _354 : (isnan(_354) ? 0.0 : max(_354, 0.0));
    vec4 _371 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _375 = _371.z;
    float _378 = (_371.x * 2.0) + (-1.0);
    float _379 = (_371.y * 2.0) + (-1.0);
    float _380 = dot(vec2(_378, _379), vec2(_378, _379));
    float _3471 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _385 = sqrt(1.0 - (isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0))));
    float _388 = (_302 * (_343.z - _375)) + _375;
    float _401 = (cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _402 = (cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _431 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * ((cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * ((cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[10u].w));
    float _436 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[15u].w;
    float _443 = ((_431.y * 0.5) + (-0.25)) * cbMtdParam._m0[15u].z;
    float _445 = (-0.0) - (cbMtdParam._m0[15u].z * ((_431.x * 0.5) + (-0.25)));
    float _447 = fract(_436);
    float _449 = fract(_436 + 0.5);
    float _450 = _447 * _445;
    float _451 = _443 * _447;
    float _454 = _449 * _445;
    float _455 = _443 * _449;
    float _460 = abs((_447 * 2.0) + (-1.0));
    vec4 _476 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_450 + _401) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_451 + _402) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _478 = _476.x;
    float _479 = _476.y;
    float _480 = _476.z;
    vec4 _481 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_454 + _401) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_455 + _402) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _508 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _509 = (cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _522 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_450 + _508) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_451 + _509) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _524 = _522.x;
    float _525 = _522.y;
    float _526 = _522.z;
    vec4 _527 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_454 + _508) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_455 + _509) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _553 = (TEXCOORD_9.x - ((cbMtdParam._m0[16u].y * (1.0 - TEXCOORD_9.x)) * (_328.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[16u].z + 1.0);
    float _3482 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _554 = isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0));
    float _564 = (_302 * (_351 - _378)) + _378;
    float _565 = (_302 * (_353 - _379)) + _379;
    float _566 = (_302 * (sqrt(1.0 - (isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0)))) - _385)) + _385;
    float _569 = fma(_566, _210 * NORMAL.x, fma(_565, _217 * TANGENT.x, (_203 * _195) * _564));
    float _572 = fma(_566, _210 * NORMAL.y, fma(_565, _217 * TANGENT.y, (_203 * _196) * _564));
    float _575 = fma(_566, _210 * NORMAL.z, fma(_565, _217 * TANGENT.z, (_203 * _197) * _564));
    float _579 = inversesqrt(dot(vec3(_569, _572, _575), vec3(_569, _572, _575)));
    float _580 = _579 * _569;
    float _581 = _579 * _572;
    float _582 = _579 * _575;
    float _3493 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _583 = isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0));
    float _3504 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _3515 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
    float _3526 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _602 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _643 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _653 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _643);
    float _654 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _643);
    float _655 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _643);
    float _659 = inversesqrt(dot(vec3(_653, _654, _655), vec3(_653, _654, _655)));
    float _660 = _653 * _659;
    float _661 = _654 * _659;
    float _662 = _655 * _659;
    float _668 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _669 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _689 = fma(_582, cbSceneParam._m0[5u].z, fma(_581, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _580));
    float _692 = fma(_582, cbSceneParam._m0[6u].z, fma(_581, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _580));
    float _695 = fma(_582, cbSceneParam._m0[7u].z, fma(_581, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _580));
    uint _708 = uint(roundEven(NORMAL.w)) * 13u;
    uint _709 = _708 + 9u;
    uint _710 = _709 + uint(cbMatDynParam._m0[0u].w);
    float _716 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0)))) * cbInstanceData._m0[_710].x;
    float _717 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0)))) * cbInstanceData._m0[_710].y;
    float _718 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0)))) * cbInstanceData._m0[_710].z;
    float _3537 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _719 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
    float _3548 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _720 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
    float _3559 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _721 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
    vec4 _730 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _668, cbSceneParam._m0[86u].y * _669));
    float _733 = _730.x * TEXCOORD_3.w;
    float _734 = dot(vec3(_580, _581, _582), vec3(_660, _661, _662));
    float _737 = _734 * 2.0;
    float _741 = (_737 * _580) - _660;
    float _742 = (_737 * _581) - _661;
    float _743 = (_737 * _582) - _662;
    float _747 = abs(dot(vec3(_660, _661, _662), vec3(_580, _581, _582)));
    float _3570 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _749 = sqrt(_583);
    float _762 = exp2((_749 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_749 * 3.0));
    float _794 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _798 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _802 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1103;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _829 = fma(_802, cbModelParam._m0[26u].z, fma(_798, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _794));
        float _833 = fma(_802, cbModelParam._m0[27u].z, fma(_798, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _794));
        float _837 = fma(_802, cbModelParam._m0[28u].z, fma(_798, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _794));
        float _861 = _794 + _580;
        float _862 = _798 + _581;
        float _863 = _802 + _582;
        float _873 = fma(_863, cbModelParam._m0[26u].z, fma(_862, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _861)) - _829;
        float _874 = fma(_863, cbModelParam._m0[27u].z, fma(_862, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _861)) - _833;
        float _875 = fma(_863, cbModelParam._m0[28u].z, fma(_862, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _861)) - _837;
        float _879 = inversesqrt(dot(vec3(_873, _874, _875), vec3(_873, _874, _875)));
        float _892 = ((_879 * _873) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_829 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _893 = ((_879 * _874) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_833 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _894 = ((_879 * _875) / cbModelParam._m0[34u].z) + ((((((_837 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _897 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_892, _893, _894), 0.0);
        vec4 _904 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_892, _893, _894), 0.0);
        vec4 _911 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_892, _893, _894), 0.0);
        vec4 _918 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_892, _893, _894), 0.0);
        float _931 = exp2((_897.w + (-0.5)) * 20.0) * 2.0;
        float _932 = _931 * (_897.x + (-0.5));
        float _933 = _931 * (_897.y + (-0.5));
        float _934 = _931 * (_897.z + (-0.5));
        float _941 = exp2((_904.w + (-0.5)) * 20.0) * 2.0;
        float _942 = _941 * (_904.x + (-0.5));
        float _943 = _941 * (_904.y + (-0.5));
        float _944 = _941 * (_904.z + (-0.5));
        float _951 = exp2((_911.w + (-0.5)) * 20.0) * 2.0;
        float _952 = _951 * (_911.x + (-0.5));
        float _953 = _951 * (_911.y + (-0.5));
        float _954 = _951 * (_911.z + (-0.5));
        float _961 = exp2((_918.w + (-0.5)) * 20.0) * 2.0;
        float _962 = _961 * (_918.x + (-0.5));
        float _963 = _961 * (_918.y + (-0.5));
        float _964 = _961 * (_918.z + (-0.5));
        float _965 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _966 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _967 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _968 = _932 * 0.5;
        float _969 = _942 * 0.5;
        float _970 = _952 * 0.5;
        float _971 = dot(vec3(_968, _969, _970), vec3(_968, _969, _970));
        float _976 = (_971 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_971);
        float _985 = (dot(vec3(_580, _581, _582), vec3(_976 * _968, _976 * _969, _976 * _970)) + 1.0) * 0.5;
        float _3596 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _995 = sqrt(((_969 * _969) + (_968 * _968)) + (_970 * _970)) / (_965 + 9.9999997473787516355514526367188e-06);
        float _3607 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _996 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
        float _997 = _996 * 2.0;
        float _1001 = (1.0 - _996) / (_996 + 1.0);
        float _3618 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1002 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
        float _1011 = ((((1.0 - _1002) * (_997 + 2.0)) * exp2(log2(isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0))) * (_997 + 1.0))) + _1002) * _965;
        float _1012 = _933 * 0.5;
        float _1013 = _943 * 0.5;
        float _1014 = _953 * 0.5;
        float _1015 = dot(vec3(_1012, _1013, _1014), vec3(_1012, _1013, _1014));
        float _1020 = (_1015 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1015);
        float _1028 = (dot(vec3(_580, _581, _582), vec3(_1020 * _1012, _1020 * _1013, _1020 * _1014)) + 1.0) * 0.5;
        float _3629 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1037 = sqrt(((_1013 * _1013) + (_1012 * _1012)) + (_1014 * _1014)) / (_966 + 9.9999997473787516355514526367188e-06);
        float _3640 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1038 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
        float _1039 = _1038 * 2.0;
        float _1043 = (1.0 - _1038) / (_1038 + 1.0);
        float _3651 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1044 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
        float _1053 = ((((1.0 - _1044) * (_1039 + 2.0)) * exp2(log2(isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0))) * (_1039 + 1.0))) + _1044) * _966;
        float _1054 = _934 * 0.5;
        float _1055 = _944 * 0.5;
        float _1056 = _954 * 0.5;
        float _1057 = dot(vec3(_1054, _1055, _1056), vec3(_1054, _1055, _1056));
        float _1062 = (_1057 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1057);
        float _1070 = (dot(vec3(_580, _581, _582), vec3(_1062 * _1054, _1062 * _1055, _1062 * _1056)) + 1.0) * 0.5;
        float _3662 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1079 = sqrt(((_1055 * _1055) + (_1054 * _1054)) + (_1056 * _1056)) / (_967 + 9.9999997473787516355514526367188e-06);
        float _3673 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1080 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
        float _1081 = _1080 * 2.0;
        float _1085 = (1.0 - _1080) / (_1080 + 1.0);
        float _3684 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1086 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
        float _1095 = ((((1.0 - _1086) * (_1081 + 2.0)) * exp2(log2(isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0))) * (_1081 + 1.0))) + _1086) * _967;
        _1103 = _934;
        _1105 = _933;
        _1106 = _932;
        _1107 = _944;
        _1108 = _943;
        _1109 = _942;
        _1110 = _954;
        _1111 = _953;
        _1112 = _952;
        _1113 = _967;
        _1114 = _966;
        _1115 = _965;
        _1116 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0)));
        _1117 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0)));
        _1118 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0)));
    }
    else
    {
        _1103 = _1104;
        _1105 = _1104;
        _1106 = _1104;
        _1107 = _1104;
        _1108 = _1104;
        _1109 = _1104;
        _1110 = _1104;
        _1111 = _1104;
        _1112 = _1104;
        _1113 = _1104;
        _1114 = _1104;
        _1115 = _1104;
        _1116 = 0.0;
        _1117 = 0.0;
        _1118 = 0.0;
    }
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1144 = fma(_802, cbModelParam._m0[30u].z, fma(_798, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _794));
        float _1148 = fma(_802, cbModelParam._m0[31u].z, fma(_798, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _794));
        float _1152 = fma(_802, cbModelParam._m0[32u].z, fma(_798, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _794));
        float _1175 = _794 + _580;
        float _1176 = _798 + _581;
        float _1177 = _802 + _582;
        float _1187 = fma(_1177, cbModelParam._m0[30u].z, fma(_1176, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1175)) - _1144;
        float _1188 = fma(_1177, cbModelParam._m0[31u].z, fma(_1176, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1175)) - _1148;
        float _1189 = fma(_1177, cbModelParam._m0[32u].z, fma(_1176, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1175)) - _1152;
        float _1193 = inversesqrt(dot(vec3(_1187, _1188, _1189), vec3(_1187, _1188, _1189)));
        float _1206 = ((_1193 * _1187) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1144 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1207 = ((_1193 * _1188) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1148 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1208 = ((_1193 * _1189) / cbModelParam._m0[35u].z) + ((((((_1152 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1210 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1206, _1207, _1208), 0.0);
        vec4 _1217 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1206, _1207, _1208), 0.0);
        vec4 _1224 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1206, _1207, _1208), 0.0);
        vec4 _1231 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1206, _1207, _1208), 0.0);
        float _1243 = exp2((_1210.w + (-0.5)) * 20.0) * 2.0;
        float _1244 = _1243 * (_1210.x + (-0.5));
        float _1245 = _1243 * (_1210.y + (-0.5));
        float _1246 = _1243 * (_1210.z + (-0.5));
        float _1253 = exp2((_1217.w + (-0.5)) * 20.0) * 2.0;
        float _1254 = _1253 * (_1217.x + (-0.5));
        float _1255 = _1253 * (_1217.y + (-0.5));
        float _1256 = _1253 * (_1217.z + (-0.5));
        float _1263 = exp2((_1224.w + (-0.5)) * 20.0) * 2.0;
        float _1264 = _1263 * (_1224.x + (-0.5));
        float _1265 = _1263 * (_1224.y + (-0.5));
        float _1266 = _1263 * (_1224.z + (-0.5));
        float _1273 = exp2((_1231.w + (-0.5)) * 20.0) * 2.0;
        float _1274 = _1273 * (_1231.x + (-0.5));
        float _1275 = _1273 * (_1231.y + (-0.5));
        float _1276 = _1273 * (_1231.z + (-0.5));
        float _1277 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1278 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1279 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1280 = _1244 * 0.5;
        float _1281 = _1254 * 0.5;
        float _1282 = _1264 * 0.5;
        float _1283 = dot(vec3(_1280, _1281, _1282), vec3(_1280, _1281, _1282));
        float _1288 = (_1283 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1283);
        float _1296 = (dot(vec3(_580, _581, _582), vec3(_1288 * _1280, _1288 * _1281, _1288 * _1282)) + 1.0) * 0.5;
        float _3725 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1305 = sqrt(((_1281 * _1281) + (_1280 * _1280)) + (_1282 * _1282)) / (_1277 + 9.9999997473787516355514526367188e-06);
        float _3736 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
        float _1307 = _1306 * 2.0;
        float _1311 = (1.0 - _1306) / (_1306 + 1.0);
        float _3747 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
        float _1321 = ((((1.0 - _1312) * (_1307 + 2.0)) * exp2(log2(isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) * (_1307 + 1.0))) + _1312) * _1277;
        float _1322 = _1245 * 0.5;
        float _1323 = _1255 * 0.5;
        float _1324 = _1265 * 0.5;
        float _1325 = dot(vec3(_1322, _1323, _1324), vec3(_1322, _1323, _1324));
        float _1330 = (_1325 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1325);
        float _1338 = (dot(vec3(_580, _581, _582), vec3(_1330 * _1322, _1330 * _1323, _1330 * _1324)) + 1.0) * 0.5;
        float _3758 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1347 = sqrt(((_1323 * _1323) + (_1322 * _1322)) + (_1324 * _1324)) / (_1278 + 9.9999997473787516355514526367188e-06);
        float _3769 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _1349 = _1348 * 2.0;
        float _1353 = (1.0 - _1348) / (_1348 + 1.0);
        float _3780 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
        float _1363 = ((((1.0 - _1354) * (_1349 + 2.0)) * exp2(log2(isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0))) * (_1349 + 1.0))) + _1354) * _1278;
        float _1364 = _1246 * 0.5;
        float _1365 = _1256 * 0.5;
        float _1366 = _1266 * 0.5;
        float _1367 = dot(vec3(_1364, _1365, _1366), vec3(_1364, _1365, _1366));
        float _1372 = (_1367 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1367);
        float _1380 = (dot(vec3(_580, _581, _582), vec3(_1372 * _1364, _1372 * _1365, _1372 * _1366)) + 1.0) * 0.5;
        float _3791 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1389 = sqrt(((_1365 * _1365) + (_1364 * _1364)) + (_1366 * _1366)) / (_1279 + 9.9999997473787516355514526367188e-06);
        float _3802 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1390 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
        float _1391 = _1390 * 2.0;
        float _1395 = (1.0 - _1390) / (_1390 + 1.0);
        float _3813 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1396 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
        float _1405 = ((((1.0 - _1396) * (_1391 + 2.0)) * exp2(log2(isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0))) * (_1391 + 1.0))) + _1396) * _1279;
        _1413 = _1246;
        _1414 = _1245;
        _1415 = _1244;
        _1416 = _1256;
        _1417 = _1255;
        _1418 = _1254;
        _1419 = _1266;
        _1420 = _1265;
        _1421 = _1264;
        _1422 = _1279;
        _1423 = _1278;
        _1424 = _1277;
        _1425 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0)));
        _1426 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0)));
        _1427 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0)));
    }
    else
    {
        _1413 = _1104;
        _1414 = _1104;
        _1415 = _1104;
        _1416 = _1104;
        _1417 = _1104;
        _1418 = _1104;
        _1419 = _1104;
        _1420 = _1104;
        _1421 = _1104;
        _1422 = _1104;
        _1423 = _1104;
        _1424 = _1104;
        _1425 = 0.0;
        _1426 = 0.0;
        _1427 = 0.0;
    }
    float _1437 = (cbModelParam._m0[1u].x * (_1425 - _1116)) + _1116;
    float _1438 = (cbModelParam._m0[1u].x * (_1426 - _1117)) + _1117;
    float _1439 = (cbModelParam._m0[1u].x * (_1427 - _1118)) + _1118;
    float _1460 = fma(_1439, cbSceneParam._m0[89u].z, fma(_1438, cbSceneParam._m0[89u].y, _1437 * cbSceneParam._m0[89u].x));
    float _1463 = fma(_1439, cbSceneParam._m0[90u].z, fma(_1438, cbSceneParam._m0[90u].y, _1437 * cbSceneParam._m0[90u].x));
    float _1466 = fma(_1439, cbSceneParam._m0[91u].z, fma(_1438, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1437));
    float _1481 = _741 * 0.5;
    float _1482 = _742 * 0.5;
    float _1483 = _743 * 0.5;
    float _1484 = dot(vec4(_1481, _1482, _1483, 1.0), vec4(_1415, _1418, _1421, _1424));
    float _1487 = dot(vec4(_1481, _1482, _1483, 1.0), vec4(_1414, _1417, _1420, _1423));
    float _1490 = dot(vec4(_1481, _1482, _1483, 1.0), vec4(_1413, _1416, _1419, _1422));
    float _1524;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1497 = dot(vec4(_1481, _1482, _1483, 1.0), vec4(_1103, _1107, _1110, _1113));
        float _1501 = dot(vec4(_1481, _1482, _1483, 1.0), vec4(_1105, _1108, _1111, _1114));
        float _1505 = dot(vec4(_1481, _1482, _1483, 1.0), vec4(_1106, _1109, _1112, _1115));
        float _1512 = dot(vec4(cbModelParam._m0[39u]), vec4(_1481, _1482, _1483, 1.0));
        _1524 = dot(vec3(isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0)), isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0)), isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1512) ? 0.0 : (isnan(0.0) ? _1512 : max(0.0, _1512))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1524 = 1.0;
    }
    float _1535;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1526 = dot(vec4(cbModelParam._m0[40u]), vec4(_1481, _1482, _1483, 1.0));
        _1535 = dot(vec3(isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0)), isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0)), isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1526) ? 0.0 : (isnan(0.0) ? _1526 : max(0.0, _1526))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1535 = 1.0;
    }
    float _1539 = (_1535 * cbModelParam._m0[1u].x) + (_1524 * (1.0 - cbModelParam._m0[1u].x));
    float _1549 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _583);
    float _1550 = isnan(_1549) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1549 : min(cbModelParam._m0[25u].z, _1549));
    float _1630;
    float _1632;
    float _1634;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1597 = fma(_802, cbModelParam._m0[13u].z, fma(_798, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _794)) + cbModelParam._m0[13u].w;
        float _1601 = fma(_802, cbModelParam._m0[14u].z, fma(_798, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _794)) + cbModelParam._m0[14u].w;
        float _1605 = fma(_802, cbModelParam._m0[15u].z, fma(_798, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _794)) + cbModelParam._m0[15u].w;
        float _1608 = fma(_743, cbModelParam._m0[13u].z, fma(_742, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _741));
        float _1611 = fma(_743, cbModelParam._m0[14u].z, fma(_742, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _741));
        float _1614 = fma(_743, cbModelParam._m0[15u].z, fma(_742, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _741));
        float _1642;
        if (_1608 > 0.0)
        {
            _1642 = abs((1.0 - _1597) / _1608);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1608 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1597 + 1.0) / _1608);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1642 = frontier_phi_14_12_ladder;
        }
        float _1844;
        if (_1611 > 0.0)
        {
            _1844 = abs((1.0 - _1601) / _1611);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1611 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1601 + 1.0) / _1611);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1844 = frontier_phi_23_19_ladder;
        }
        float _2087;
        if (_1614 > 0.0)
        {
            _2087 = abs((1.0 - _1605) / _1614);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1614 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1605 + 1.0) / _1614);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2087 = frontier_phi_35_30_ladder;
        }
        float _2089 = isnan(_1844) ? _1642 : (isnan(_1642) ? _1844 : min(_1642, _1844));
        float _2090 = isnan(_2087) ? _2089 : (isnan(_2089) ? _2087 : min(_2089, _2087));
        float _2094 = (_2090 * _1608) + _1597;
        float _2095 = (_2090 * _1611) + _1601;
        float _2096 = (_2090 * _1614) + _1605;
        float _2097 = _2090 * 9.9999997473787516355514526367188e-05;
        float _2099 = (-1.0) - _2097;
        float _2101 = _2097 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2096 > _2101) || ((_2096 < _2099) || ((_2095 > _2101) || ((_2095 < _2099) || ((_2094 < _2099) || (_2094 > _2101))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2220 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2096, cbModelParam._m0[9u].z, fma(_2095, cbModelParam._m0[9u].y, _2094 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2096, cbModelParam._m0[10u].z, fma(_2095, cbModelParam._m0[10u].y, _2094 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2096, cbModelParam._m0[11u].z, fma(_2095, cbModelParam._m0[11u].y, _2094 * cbModelParam._m0[11u].x))), _1550);
            frontier_phi_13_35_ladder = _2220.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2220.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2220.x * cbModelParam._m0[1u].y;
        }
        _1630 = frontier_phi_13_35_ladder_2;
        _1632 = frontier_phi_13_35_ladder_1;
        _1634 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1618 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_741, _742, _743), _1550);
        _1630 = _1618.x * cbModelParam._m0[1u].y;
        _1632 = _1618.y * cbModelParam._m0[1u].y;
        _1634 = _1618.z * cbModelParam._m0[1u].y;
    }
    float _1638 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _583);
    float _1639 = isnan(_1638) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1638 : min(cbModelParam._m0[25u].w, _1638));
    float _1729;
    float _1731;
    float _1733;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1693 = fma(_802, cbModelParam._m0[21u].z, fma(_798, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _794)) + cbModelParam._m0[21u].w;
        float _1697 = fma(_802, cbModelParam._m0[22u].z, fma(_798, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _794)) + cbModelParam._m0[22u].w;
        float _1701 = fma(_802, cbModelParam._m0[23u].z, fma(_798, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _794)) + cbModelParam._m0[23u].w;
        float _1704 = fma(_743, cbModelParam._m0[21u].z, fma(_742, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _741));
        float _1707 = fma(_743, cbModelParam._m0[22u].z, fma(_742, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _741));
        float _1710 = fma(_743, cbModelParam._m0[23u].z, fma(_742, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _741));
        float _1849;
        if (_1704 > 0.0)
        {
            _1849 = abs((1.0 - _1693) / _1704);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1704 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1693 + 1.0) / _1704);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1849 = frontier_phi_25_21_ladder;
        }
        float _2114;
        if (_1707 > 0.0)
        {
            _2114 = abs((1.0 - _1697) / _1707);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1707 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1697 + 1.0) / _1707);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2114 = frontier_phi_37_32_ladder;
        }
        float _2319;
        if (_1710 > 0.0)
        {
            _2319 = abs((1.0 - _1701) / _1710);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1710 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1701 + 1.0) / _1710);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2319 = frontier_phi_46_43_ladder;
        }
        float _2321 = isnan(_2114) ? _1849 : (isnan(_1849) ? _2114 : min(_1849, _2114));
        float _2322 = isnan(_2319) ? _2321 : (isnan(_2321) ? _2319 : min(_2321, _2319));
        float _2326 = (_2322 * _1704) + _1693;
        float _2327 = (_2322 * _1707) + _1697;
        float _2328 = (_2322 * _1710) + _1701;
        float _2329 = _2322 * 9.9999997473787516355514526367188e-05;
        float _2330 = (-1.0) - _2329;
        float _2332 = _2329 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2328 > _2332) || ((_2328 < _2330) || ((_2327 > _2332) || ((_2327 < _2330) || ((_2326 < _2330) || (_2326 > _2332))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2556 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2328, cbModelParam._m0[17u].z, fma(_2327, cbModelParam._m0[17u].y, _2326 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2328, cbModelParam._m0[18u].z, fma(_2327, cbModelParam._m0[18u].y, _2326 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2328, cbModelParam._m0[19u].z, fma(_2327, cbModelParam._m0[19u].y, _2326 * cbModelParam._m0[19u].x))), _1639);
            frontier_phi_22_46_ladder = _2556.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2556.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2556.x * cbModelParam._m0[1u].z;
        }
        _1729 = frontier_phi_22_46_ladder_2;
        _1731 = frontier_phi_22_46_ladder_1;
        _1733 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1713 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_741, _742, _743), _1639);
        _1729 = _1713.x * cbModelParam._m0[1u].z;
        _1731 = _1713.y * cbModelParam._m0[1u].z;
        _1733 = _1713.z * cbModelParam._m0[1u].z;
    }
    float _1745 = ((((1.0 - _762) * ((_749 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_762 * _749)) * _733;
    float _1746 = _1745 * ((cbModelParam._m0[1u].w * (_1729 - _1630)) + _1630);
    float _1747 = _1745 * ((cbModelParam._m0[1u].w * (_1731 - _1632)) + _1632);
    float _1748 = _1745 * ((cbModelParam._m0[1u].w * (_1733 - _1634)) + _1634);
    float _1751 = fma(_1748, cbSceneParam._m0[89u].z, fma(_1747, cbSceneParam._m0[89u].y, _1746 * cbSceneParam._m0[89u].x));
    float _1754 = fma(_1748, cbSceneParam._m0[90u].z, fma(_1747, cbSceneParam._m0[90u].y, _1746 * cbSceneParam._m0[90u].x));
    float _1757 = fma(_1748, cbSceneParam._m0[91u].z, fma(_1747, cbSceneParam._m0[91u].y, _1746 * cbSceneParam._m0[91u].x));
    uvec4 _1767 = floatBitsToUint(cbInstanceData._m0[_708 + 5u]);
    uint _1769 = _1767.x * 14u;
    uint _1770 = _1769 + 13u;
    float _1777 = _733 + (-1.0);
    float _1782 = (cbLight._m0[_1770].x * _1777) + 1.0;
    float _1783 = (cbLight._m0[_1770].y * _1777) + 1.0;
    float _1784 = (cbLight._m0[_1770].z * _1777) + 1.0;
    float _1785 = (cbLight._m0[_1770].w * _1777) + 1.0;
    uint _1786 = _1769 + 5u;
    float _1792 = isnan(1.0) ? _1783 : (isnan(_1783) ? 1.0 : min(_1783, 1.0));
    uint _1796 = _1769 + 4u;
    float _1802 = isnan(1.0) ? _1782 : (isnan(_1782) ? 1.0 : min(_1782, 1.0));
    uint _1806 = _1769 | 1u;
    float _1817 = dot(vec3(cbLight._m0[_1769].xyz), vec3(_580, _581, _582));
    float _1820 = dot(vec3(cbLight._m0[_1806].xyz), vec3(_580, _581, _582));
    float _3949 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
    float _3960 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
    float _1825 = (isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))) * 0.3183098733425140380859375;
    float _1827 = (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * 0.3183098733425140380859375;
    float _1834 = ((cbLight._m0[_1786].x * _1792) * _1827) + ((cbLight._m0[_1796].x * _1802) * _1825);
    float _1835 = ((_1792 * cbLight._m0[_1786].y) * _1827) + ((_1802 * cbLight._m0[_1796].y) * _1825);
    float _1836 = ((_1792 * cbLight._m0[_1786].z) * _1827) + ((_1802 * cbLight._m0[_1796].z) * _1825);
    uvec4 _1841 = floatBitsToUint(cbLight._m0[_1769 + 12u]);
    bool _1843 = _1841.x == 0u;
    float _1854;
    float _1856;
    float _1858;
    if (_1843)
    {
        _1854 = _1834;
        _1856 = _1835;
        _1858 = _1836;
    }
    else
    {
        uint _1862 = _1769 + 6u;
        float _1878 = (dot(vec3(cbLight._m0[_1769 + 2u].xyz), vec3(_580, _581, _582)) * 0.5) + 0.5;
        float _1879 = _1878 * _1878;
        float _3971 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
        float _1880 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _1881 = isnan(1.0) ? _1784 : (isnan(_1784) ? 1.0 : min(_1784, 1.0));
        _1854 = (((cbLight._m0[_1862].x * 0.3183098733425140380859375) * _1880) * _1881) + _1834;
        _1856 = (((cbLight._m0[_1862].y * 0.3183098733425140380859375) * _1880) * _1881) + _1835;
        _1858 = (((cbLight._m0[_1862].z * 0.3183098733425140380859375) * _1880) * _1881) + _1836;
    }
    bool _1861 = _1841.y == 0u;
    float _1899;
    float _1901;
    float _1903;
    if (_1861)
    {
        _1899 = _1854;
        _1901 = _1856;
        _1903 = _1858;
    }
    else
    {
        uint _2058 = _1769 + 7u;
        float _2074 = (dot(vec3(cbLight._m0[_1769 + 3u].xyz), vec3(_580, _581, _582)) * 0.5) + 0.5;
        float _2075 = _2074 * _2074;
        float _3987 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
        float _2076 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
        float _2077 = isnan(1.0) ? _1785 : (isnan(_1785) ? 1.0 : min(_1785, 1.0));
        _1899 = (((cbLight._m0[_2058].x * 0.3183098733425140380859375) * _2076) * _2077) + _1854;
        _1901 = (((cbLight._m0[_2058].y * 0.3183098733425140380859375) * _2076) * _2077) + _1856;
        _1903 = (((cbLight._m0[_2058].z * 0.3183098733425140380859375) * _2076) * _2077) + _1858;
    }
    uint _1906 = _1769 + 8u;
    float _1919 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1769].w)) * _583) * 0.949999988079071044921875);
    float _1920 = _1919 * _1919;
    float _1921 = cbLight._m0[_1769].x + _660;
    float _1922 = cbLight._m0[_1769].y + _661;
    float _1923 = cbLight._m0[_1769].z + _662;
    float _1927 = inversesqrt(dot(vec3(_1921, _1922, _1923), vec3(_1921, _1922, _1923)));
    float _1928 = _1927 * _1921;
    float _1929 = _1927 * _1922;
    float _1930 = _1927 * _1923;
    float _1931 = dot(vec3(_580, _581, _582), vec3(cbLight._m0[_1769].xyz));
    float _4003 = isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0));
    float _1934 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
    float _4014 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _1935 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
    float _1936 = dot(vec3(_580, _581, _582), vec3(_1928, _1929, _1930));
    float _4025 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
    float _1939 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
    float _1940 = dot(vec3(cbLight._m0[_1769].xyz), vec3(_1928, _1929, _1930));
    float _4036 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
    float _1944 = _1920 * _1920;
    float _1948 = ((_1939 * _1939) * (_1944 + (-1.0))) + 1.0;
    float _1959 = (exp2(log2(1.0 - (isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1960 = 1.0 - _1920;
    float _1971 = (0.5 / (((_1935 * ((_1934 * _1960) + _1920)) + 9.9999999392252902907785028219223e-09) + (((_1935 * _1960) + _1920) * _1934))) * _1934;
    float _4047 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
    float _1973 = (isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0))) * (_1944 / ((_1948 * _1948) * 3.141590118408203125));
    uint _1984 = _1769 + 9u;
    float _1995 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1806].w)) * _583) * 0.949999988079071044921875);
    float _1996 = _1995 * _1995;
    float _1997 = cbLight._m0[_1806].x + _660;
    float _1998 = cbLight._m0[_1806].y + _661;
    float _1999 = cbLight._m0[_1806].z + _662;
    float _2003 = inversesqrt(dot(vec3(_1997, _1998, _1999), vec3(_1997, _1998, _1999)));
    float _2004 = _2003 * _1997;
    float _2005 = _2003 * _1998;
    float _2006 = _2003 * _1999;
    float _2007 = dot(vec3(_580, _581, _582), vec3(cbLight._m0[_1806].xyz));
    float _4058 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
    float _2010 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
    float _2011 = dot(vec3(_580, _581, _582), vec3(_2004, _2005, _2006));
    float _4069 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _2014 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
    float _2015 = dot(vec3(cbLight._m0[_1806].xyz), vec3(_2004, _2005, _2006));
    float _4080 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
    float _2019 = _1996 * _1996;
    float _2023 = ((_2014 * _2014) * (_2019 + (-1.0))) + 1.0;
    float _2032 = (exp2(log2(1.0 - (isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2033 = 1.0 - _1996;
    float _2043 = (0.5 / (((_1935 * ((_2010 * _2033) + _1996)) + 9.9999999392252902907785028219223e-09) + (((_1935 * _2033) + _1996) * _2010))) * _2010;
    float _4091 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
    float _2045 = (isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * (_2019 / ((_2023 * _2023) * 3.141590118408203125));
    float _2055 = (((_2032 * cbLight._m0[_1984].x) * _2045) * _1792) + (((_1959 * cbLight._m0[_1906].x) * _1973) * _1802);
    float _2056 = (((_2032 * cbLight._m0[_1984].y) * _2045) * _1792) + (((_1959 * cbLight._m0[_1906].y) * _1973) * _1802);
    float _2057 = (((_2032 * cbLight._m0[_1984].z) * _2045) * _1792) + (((_1959 * cbLight._m0[_1906].z) * _1973) * _1802);
    float _2119;
    float _2121;
    float _2123;
    if (_1843)
    {
        _2119 = _2055;
        _2121 = _2056;
        _2123 = _2057;
    }
    else
    {
        uint _2125 = _1769 + 2u;
        uint _2129 = _1769 + 10u;
        float _2143 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2125].w)) * _583) * 0.949999988079071044921875);
        float _2144 = _2143 * _2143;
        float _2145 = cbLight._m0[_2125].x + _660;
        float _2146 = cbLight._m0[_2125].y + _661;
        float _2147 = cbLight._m0[_2125].z + _662;
        float _2151 = inversesqrt(dot(vec3(_2145, _2146, _2147), vec3(_2145, _2146, _2147)));
        float _2152 = _2151 * _2145;
        float _2153 = _2151 * _2146;
        float _2154 = _2151 * _2147;
        float _2155 = dot(vec3(_580, _581, _582), vec3(cbLight._m0[_2125].xyz));
        float _4102 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
        float _2158 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _2159 = dot(vec3(_580, _581, _582), vec3(_2152, _2153, _2154));
        float _4113 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
        float _2162 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _2163 = dot(vec3(cbLight._m0[_2125].xyz), vec3(_2152, _2153, _2154));
        float _4124 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
        float _2167 = _2144 * _2144;
        float _2171 = ((_2162 * _2162) * (_2167 + (-1.0))) + 1.0;
        float _2180 = (exp2(log2(1.0 - (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2181 = 1.0 - _2144;
        float _2191 = (0.5 / (((_1935 * ((_2158 * _2181) + _2144)) + 9.9999999392252902907785028219223e-09) + (((_1935 * _2181) + _2144) * _2158))) * _2158;
        float _4135 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
        float _2193 = (isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))) * (_2167 / ((_2171 * _2171) * 3.141590118408203125));
        float _2194 = isnan(1.0) ? _1784 : (isnan(_1784) ? 1.0 : min(_1784, 1.0));
        _2119 = (((_2180 * cbLight._m0[_2129].x) * _2193) * _2194) + _2055;
        _2121 = (((_2180 * cbLight._m0[_2129].y) * _2193) * _2194) + _2056;
        _2123 = (((_2180 * cbLight._m0[_2129].z) * _2193) * _2194) + _2057;
    }
    float _2229;
    float _2231;
    float _2233;
    if (_1861)
    {
        _2229 = _2119;
        _2231 = _2121;
        _2233 = _2123;
    }
    else
    {
        uint _2240 = _1769 + 3u;
        uint _2244 = _1769 + 11u;
        float _2258 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2240].w)) * _583) * 0.949999988079071044921875);
        float _2259 = _2258 * _2258;
        float _2260 = cbLight._m0[_2240].x + _660;
        float _2261 = cbLight._m0[_2240].y + _661;
        float _2262 = cbLight._m0[_2240].z + _662;
        float _2266 = inversesqrt(dot(vec3(_2260, _2261, _2262), vec3(_2260, _2261, _2262)));
        float _2267 = _2266 * _2260;
        float _2268 = _2266 * _2261;
        float _2269 = _2266 * _2262;
        float _2270 = dot(vec3(_580, _581, _582), vec3(cbLight._m0[_2240].xyz));
        float _4151 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
        float _2273 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _2274 = dot(vec3(_580, _581, _582), vec3(_2267, _2268, _2269));
        float _4162 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
        float _2277 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _2278 = dot(vec3(cbLight._m0[_2240].xyz), vec3(_2267, _2268, _2269));
        float _4173 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
        float _2282 = _2259 * _2259;
        float _2286 = ((_2277 * _2277) * (_2282 + (-1.0))) + 1.0;
        float _2295 = (exp2(log2(1.0 - (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2296 = 1.0 - _2259;
        float _2306 = (0.5 / (((_1935 * ((_2273 * _2296) + _2259)) + 9.9999999392252902907785028219223e-09) + (((_1935 * _2296) + _2259) * _2273))) * _2273;
        float _4184 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
        float _2308 = (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * (_2282 / ((_2286 * _2286) * 3.141590118408203125));
        float _2309 = isnan(1.0) ? _1785 : (isnan(_1785) ? 1.0 : min(_1785, 1.0));
        _2229 = (((_2295 * cbLight._m0[_2244].x) * _2308) * _2309) + _2119;
        _2231 = (((_2295 * cbLight._m0[_2244].y) * _2308) * _2309) + _2121;
        _2233 = (((_2295 * cbLight._m0[_2244].z) * _2308) * _2309) + _2123;
    }
    float _2444;
    float _2446;
    float _2448;
    float _2450;
    float _2452;
    float _2454;
    if (_1767.y == 0u)
    {
        float _2384 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2385 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2384;
        float _2386 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2384;
        float _2387 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2384;
        uvec4 _2399 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2400 = _2399.x;
        uint _2411 = uint((float(_2399.y) * floor(float(uint(cbSceneParam._m0[85u].y * _669) / _2400))) + floor(float(uint(cbSceneParam._m0[85u].x * _668) / _2400)));
        float _2421 = (log2(_2387 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2422 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
        uint _2425 = uint(isnan(14.0) ? _2422 : (isnan(_2422) ? 14.0 : min(_2422, 14.0)));
        uvec4 _2430 = texelFetch(g_lightClusterGridBuffer, int(((_2425 << 2u) + (_2411 << 6u)) >> 2u));
        uint _2431 = _2430.x;
        uint _2432 = _2399.z;
        float _2561;
        float _2563;
        float _2565;
        float _2567;
        float _2569;
        float _2571;
        if (((((1u << ((_2432 >> 4u) & 15u)) + 4294967295u) & _2431) == 0u) || ((_2432 & 240u) == 0u))
        {
            _2561 = 0.0;
            _2563 = 0.0;
            _2565 = 0.0;
            _2567 = 0.0;
            _2569 = 0.0;
            _2571 = 0.0;
        }
        else
        {
            float _2562;
            float _2564;
            float _2566;
            float _2568;
            float _2570;
            float _2572;
            float _2714 = 0.0;
            float _2715 = 0.0;
            float _2716 = 0.0;
            float _2717 = 0.0;
            float _2718 = 0.0;
            float _2719 = 0.0;
            uint _2720 = 0u;
            uint _2729;
            bool _2730;
            for (;;)
            {
                _2729 = texelFetch(g_lightClassification, int((((_2425 << 5u) + (_2411 << 9u)) + (_2720 << 2u)) >> 2u)).x;
                _2730 = _2729 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2730)
                {
                    frontier_phi_61_pred = _2714;
                    frontier_phi_61_pred_1 = _2719;
                    frontier_phi_61_pred_2 = _2718;
                    frontier_phi_61_pred_3 = _2717;
                    frontier_phi_61_pred_4 = _2716;
                    frontier_phi_61_pred_5 = _2715;
                }
                else
                {
                    float _2838;
                    float _2839;
                    float _2840;
                    float _2841;
                    float _2842;
                    float _2843;
                    uint _2844;
                    _2838 = _2714;
                    _2839 = _2715;
                    _2840 = _2716;
                    _2841 = _2717;
                    _2842 = _2718;
                    _2843 = _2719;
                    _2844 = _2729;
                    float _2770;
                    float _2771;
                    float _2772;
                    float _2773;
                    float _2774;
                    float _2775;
                    for (;;)
                    {
                        uint _2848 = uint(findLSB(_2844)) + (_2720 << 5u);
                        uint _2845 = (_2844 + 4294967295u) & _2844;
                        uint _2850 = _2848 * 48u;
                        vec4 _2864 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2850)).x, texelFetch(g_PointLightRenderingBuffer, int(_2850 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2850 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2850 + 3u)).x));
                        uint _2870 = (_2848 * 48u) + 4u;
                        vec4 _2883 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2870)).x, texelFetch(g_PointLightRenderingBuffer, int(_2870 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2870 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2870 + 3u)).x));
                        uint _2889 = (_2848 * 48u) + 8u;
                        vec3 _2900 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2889)).x, texelFetch(g_PointLightRenderingBuffer, int(_2889 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2889 + 2u)).x));
                        float _2904 = _2864.x - _2385;
                        float _2905 = _2864.y - _2386;
                        float _2906 = _2864.z - _2387;
                        float _2907 = dot(vec3(_2904, _2905, _2906), vec3(_2904, _2905, _2906));
                        float _2910 = inversesqrt(_2907);
                        float _2911 = _2910 * _2904;
                        float _2912 = _2910 * _2905;
                        float _2913 = _2910 * _2906;
                        float _2914 = dot(vec3(_689, _692, _695), vec3(_2911, _2912, _2913));
                        float _2919 = 1.0 - (_2907 * _2864.w);
                        float _4210 = isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0));
                        float _2920 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
                        float _2921 = sqrt(_2907) * _2883.w;
                        float _2924 = 1.39999997615814208984375 / (_2921 + 1.39999997615814208984375);
                        float _2925 = _2924 * _2924;
                        float _2928 = ((1.0 - _2925) * _2914) + _2925;
                        float _2931 = _2921 * _2921;
                        float _2935 = ((isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : max(_2928, 0.0))) * _2920) / ((_2931 * 0.699999988079071044921875) + 1.0);
                        float _2939 = (-0.0) - _2385;
                        float _2940 = (-0.0) - _2386;
                        float _2941 = (-0.0) - _2387;
                        float _2945 = inversesqrt(dot(vec3(_2939, _2940, _2941), vec3(_2939, _2940, _2941)));
                        float _2946 = _2945 * _2939;
                        float _2947 = _2945 * _2940;
                        float _2948 = _2945 * _2941;
                        float _2956 = exp2(log2(1.0 / ((_2931 * 3.5) + 5.0)) * 0.25);
                        float _2957 = 1.0 - _749;
                        float _2964 = sqrt(1.0 - ((1.0 - (_2957 * _2957)) * (1.0 - (_2956 * _2956))));
                        float _2965 = _2964 * _2964;
                        float _2966 = _2965 * _2965;
                        float _2967 = _2946 + _2911;
                        float _2968 = _2947 + _2912;
                        float _2969 = _2948 + _2913;
                        float _2973 = inversesqrt(dot(vec3(_2967, _2968, _2969), vec3(_2967, _2968, _2969)));
                        float _2977 = dot(vec3(_689, _692, _695), vec3(_2946, _2947, _2948));
                        float _4226 = isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0));
                        float _2980 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
                        float _2981 = dot(vec3(_689, _692, _695), vec3(_2973 * _2967, _2973 * _2968, _2973 * _2969));
                        float _4237 = isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0));
                        float _2984 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
                        float _2988 = ((_2984 * _2984) * (_2966 + (-1.0))) + 1.0;
                        float _2989 = _2924 * _2965;
                        float _2990 = _2989 * _2989;
                        float _2993 = ((1.0 - _2990) * _2914) + _2990;
                        float _4248 = isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0));
                        float _2994 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
                        float _2995 = 1.0 - _2965;
                        float _3005 = (0.5 / (((_2994 * ((_2980 * _2995) + _2965)) + 9.9999999392252902907785028219223e-09) + (((_2994 * _2995) + _2965) * _2980))) * _2994;
                        float _4259 = isnan(0.0) ? _3005 : (isnan(_3005) ? 0.0 : max(_3005, 0.0));
                        float _3016 = (((_2966 * 3.1415927410125732421875) * (isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0)))) / ((_2988 * _2988) * ((_2931 * 2.1991131305694580078125) + 3.141590118408203125))) * _2920;
                        _2773 = (_2935 * _2883.x) + _2841;
                        _2774 = (_2935 * _2883.y) + _2842;
                        _2775 = (_2935 * _2883.z) + _2843;
                        _2770 = (_3016 * _2900.x) + _2838;
                        _2771 = (_3016 * _2900.y) + _2839;
                        _2772 = (_3016 * _2900.z) + _2840;
                        if (_2845 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2838 = _2770;
                            _2839 = _2771;
                            _2840 = _2772;
                            _2841 = _2773;
                            _2842 = _2774;
                            _2843 = _2775;
                            _2844 = _2845;
                        }
                    }
                    frontier_phi_61_pred = _2770;
                    frontier_phi_61_pred_1 = _2775;
                    frontier_phi_61_pred_2 = _2774;
                    frontier_phi_61_pred_3 = _2773;
                    frontier_phi_61_pred_4 = _2772;
                    frontier_phi_61_pred_5 = _2771;
                }
                _2562 = frontier_phi_61_pred;
                _2572 = frontier_phi_61_pred_1;
                _2570 = frontier_phi_61_pred_2;
                _2568 = frontier_phi_61_pred_3;
                _2566 = frontier_phi_61_pred_4;
                _2564 = frontier_phi_61_pred_5;
                uint _2721 = _2720 + 1u;
                if (_2721 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2714 = _2562;
                    _2715 = _2564;
                    _2716 = _2566;
                    _2717 = _2568;
                    _2718 = _2570;
                    _2719 = _2572;
                    _2720 = _2721;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2561 = _2562;
            _2563 = _2564;
            _2565 = _2566;
            _2567 = _2568;
            _2569 = _2570;
            _2571 = _2572;
        }
        uvec4 _2575 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2576 = _2575.z;
        uint _2578 = (_2576 >> 8u) & 15u;
        float _2682;
        float _2684;
        float _2686;
        float _2688;
        float _2690;
        float _2692;
        if (((4294967295u << _2578) & _2431) == 0u)
        {
            _2682 = _2561;
            _2684 = _2563;
            _2686 = _2565;
            _2688 = _2567;
            _2690 = _2569;
            _2692 = _2571;
        }
        else
        {
            float _2707 = inversesqrt(dot(vec3(_2385, _2386, _2387), vec3(_2385, _2386, _2387)));
            float _2708 = _2707 * _2385;
            float _2709 = _2707 * _2386;
            float _2710 = _2707 * _2387;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2578 < ((_2576 >> 12u) & 15u))
            {
                float _2683;
                float _2685;
                float _2687;
                float _2689;
                float _2691;
                float _2693;
                float _2821 = _2561;
                float _2822 = _2563;
                float _2823 = _2565;
                float _2824 = _2567;
                float _2825 = _2569;
                float _2826 = _2571;
                uint _2827 = _2578;
                uint _2836;
                bool _2837;
                for (;;)
                {
                    _2836 = texelFetch(g_lightClassification, int((((_2425 << 5u) + (_2411 << 9u)) + (_2827 << 2u)) >> 2u)).x;
                    _2837 = _2836 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2837)
                    {
                        frontier_phi_67_pred = _2824;
                        frontier_phi_67_pred_1 = _2825;
                        frontier_phi_67_pred_2 = _2826;
                        frontier_phi_67_pred_3 = _2823;
                        frontier_phi_67_pred_4 = _2822;
                        frontier_phi_67_pred_5 = _2821;
                    }
                    else
                    {
                        float _3021;
                        float _3022;
                        float _3023;
                        float _3024;
                        float _3025;
                        float _3026;
                        float _3315;
                        float _3316;
                        float _3317;
                        float _3318;
                        float _3319;
                        float _3320;
                        float _3034 = _2821;
                        float _3035 = _2822;
                        float _3036 = _2823;
                        float _3037 = _2824;
                        float _3038 = _2825;
                        float _3039 = _2826;
                        uint _3040 = _2836;
                        uint _3041;
                        vec4 _3066;
                        float _3067;
                        vec4 _3082;
                        vec3 _3094;
                        vec4 _3109;
                        vec4 _3124;
                        float _3171;
                        bool _3172;
                        for (;;)
                        {
                            uint _3051 = ((_2827 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3040));
                            _3041 = (_3040 + 4294967295u) & _3040;
                            uint _3053 = _3051 * 40u;
                            _3066 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3053)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 3u)).x));
                            _3067 = _3066.w;
                            uint _3069 = (_3051 * 40u) + 4u;
                            _3082 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3069)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 3u)).x));
                            uint _3084 = (_3051 * 40u) + 8u;
                            _3094 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3084)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 2u)).x));
                            uint _3096 = (_3051 * 40u) + 16u;
                            _3109 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3096)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 3u)).x));
                            uint _3111 = (_3051 * 40u) + 20u;
                            _3124 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3111)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 3u)).x));
                            uint _3127 = (_3051 * 40u) + 24u;
                            vec4 _3140 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3127)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 3u)).x));
                            uint _3146 = (_3051 * 40u) + 28u;
                            vec4 _3159 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3146)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 3u)).x));
                            _3171 = fma(_2387, _3159.z, fma(_2386, _3159.y, _3159.x * _2385)) + _3159.w;
                            _3172 = !((fma(_2387, _3140.z, fma(_2386, _3140.y, _3140.x * _2385)) + _3140.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3172)
                            {
                                float _3199 = _3066.x - _2385;
                                float _3200 = _3066.y - _2386;
                                float _3201 = _3066.z - _2387;
                                float _3202 = dot(vec3(_3199, _3200, _3201), vec3(_3199, _3200, _3201));
                                float _3205 = inversesqrt(_3202);
                                float _3206 = _3205 * _3199;
                                float _3207 = _3205 * _3200;
                                float _3208 = _3205 * _3201;
                                float _3212 = 1.0 - (_3202 / (_3067 * _3067));
                                float _4270 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0));
                                float _3213 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
                                float _3217 = sqrt(_3202) * _3082.w;
                                float _3219 = 1.39999997615814208984375 / (_3217 + 1.39999997615814208984375);
                                float _3220 = _3219 * _3219;
                                float _3223 = ((1.0 - _3220) * dot(vec3(_3206, _3207, _3208), vec3(_689, _692, _695))) + _3220;
                                float _3226 = _3217 * _3217;
                                float _3230 = (fma(_2387, _3109.z, fma(_2386, _3109.y, _3109.x * _2385)) + _3109.w) / _3171;
                                float _3231 = (fma(_2387, _3124.z, fma(_2386, _3124.y, _3124.x * _2385)) + _3124.w) / _3171;
                                float _3235 = 1.0 - dot(vec2(_3230, _3231), vec2(_3230, _3231));
                                float _4286 = isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0));
                                float _3236 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
                                float _3237 = _3236 * (((isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : max(_3223, 0.0))) * _3213) / ((_3226 * 0.699999988079071044921875) + 1.0));
                                float _3249 = exp2(log2(1.0 / ((_3226 * 3.5) + 5.0)) * 0.25);
                                float _3250 = 1.0 - _749;
                                float _3257 = sqrt(1.0 - ((1.0 - (_3250 * _3250)) * (1.0 - (_3249 * _3249))));
                                float _3258 = _3257 * _3257;
                                float _3259 = _3258 * _3258;
                                float _3260 = _3206 - _2708;
                                float _3261 = _3207 - _2709;
                                float _3262 = _3208 - _2710;
                                float _3266 = inversesqrt(dot(vec3(_3260, _3261, _3262), vec3(_3260, _3261, _3262)));
                                float _3270 = dot(vec3(_689, _692, _695), vec3((-0.0) - _2708, (-0.0) - _2709, (-0.0) - _2710));
                                float _4297 = isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0));
                                float _3273 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
                                float _3274 = dot(vec3(_689, _692, _695), vec3(_3266 * _3260, _3266 * _3261, _3266 * _3262));
                                float _4308 = isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0));
                                float _3277 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
                                float _3281 = ((_3277 * _3277) * (_3259 + (-1.0))) + 1.0;
                                float _3282 = _3219 * _3258;
                                float _3283 = _3282 * _3282;
                                float _3289 = ((1.0 - _3283) * dot(vec3(_689, _692, _695), vec3(_3206, _3207, _3208))) + _3283;
                                float _4319 = isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0));
                                float _3290 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
                                float _3291 = 1.0 - _3258;
                                float _3301 = (0.5 / (((_3290 * ((_3273 * _3291) + _3258)) + 9.9999999392252902907785028219223e-09) + (((_3290 * _3291) + _3258) * _3273))) * _3290;
                                float _4330 = isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0));
                                float _3311 = (_3236 * _3213) * (((_3259 * 3.1415927410125732421875) * (isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0)))) / ((_3281 * _3281) * ((_3226 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3311 * _3094.x;
                                frontier_phi_73_pred_1 = _3311 * _3094.y;
                                frontier_phi_73_pred_2 = _3237 * _3082.z;
                                frontier_phi_73_pred_3 = _3237 * _3082.y;
                                frontier_phi_73_pred_4 = _3237 * _3082.x;
                                frontier_phi_73_pred_5 = _3311 * _3094.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3315 = frontier_phi_73_pred;
                            _3316 = frontier_phi_73_pred_1;
                            _3320 = frontier_phi_73_pred_2;
                            _3319 = frontier_phi_73_pred_3;
                            _3318 = frontier_phi_73_pred_4;
                            _3317 = frontier_phi_73_pred_5;
                            _3024 = _3318 + _3037;
                            _3025 = _3319 + _3038;
                            _3026 = _3320 + _3039;
                            _3021 = _3315 + _3034;
                            _3022 = _3316 + _3035;
                            _3023 = _3317 + _3036;
                            if (_3041 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3034 = _3021;
                                _3035 = _3022;
                                _3036 = _3023;
                                _3037 = _3024;
                                _3038 = _3025;
                                _3039 = _3026;
                                _3040 = _3041;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3024;
                        frontier_phi_67_pred_1 = _3025;
                        frontier_phi_67_pred_2 = _3026;
                        frontier_phi_67_pred_3 = _3023;
                        frontier_phi_67_pred_4 = _3022;
                        frontier_phi_67_pred_5 = _3021;
                    }
                    _2689 = frontier_phi_67_pred;
                    _2691 = frontier_phi_67_pred_1;
                    _2693 = frontier_phi_67_pred_2;
                    _2687 = frontier_phi_67_pred_3;
                    _2685 = frontier_phi_67_pred_4;
                    _2683 = frontier_phi_67_pred_5;
                    uint _2828 = _2827 + 1u;
                    if (_2828 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2821 = _2683;
                        _2822 = _2685;
                        _2823 = _2687;
                        _2824 = _2689;
                        _2825 = _2691;
                        _2826 = _2693;
                        _2827 = _2828;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2691;
                frontier_phi_55_56_ladder_1 = _2693;
                frontier_phi_55_56_ladder_2 = _2689;
                frontier_phi_55_56_ladder_3 = _2687;
                frontier_phi_55_56_ladder_4 = _2685;
                frontier_phi_55_56_ladder_5 = _2683;
            }
            else
            {
                frontier_phi_55_56_ladder = _2569;
                frontier_phi_55_56_ladder_1 = _2571;
                frontier_phi_55_56_ladder_2 = _2567;
                frontier_phi_55_56_ladder_3 = _2565;
                frontier_phi_55_56_ladder_4 = _2563;
                frontier_phi_55_56_ladder_5 = _2561;
            }
            _2682 = frontier_phi_55_56_ladder_5;
            _2684 = frontier_phi_55_56_ladder_4;
            _2686 = frontier_phi_55_56_ladder_3;
            _2688 = frontier_phi_55_56_ladder_2;
            _2690 = frontier_phi_55_56_ladder;
            _2692 = frontier_phi_55_56_ladder_1;
        }
        float _2697 = isnan(1.0) ? _733 : (isnan(_733) ? 1.0 : min(_733, 1.0));
        _2444 = (_2697 * _2688) + _1899;
        _2446 = (_2697 * _2690) + _1901;
        _2448 = (_2697 * _2692) + _1903;
        _2450 = ((_2682 * 0.039999999105930328369140625) * _2697) + _2229;
        _2452 = ((_2684 * 0.039999999105930328369140625) * _2697) + _2231;
        _2454 = ((_2686 * 0.039999999105930328369140625) * _2697) + _2233;
    }
    else
    {
        _2444 = _1899;
        _2446 = _1901;
        _2448 = _1903;
        _2450 = _2229;
        _2452 = _2231;
        _2454 = _2233;
    }
    uint _2460 = _709 + uint(cbMatDynParam._m0[0u].w);
    float _2466 = ((((((_527.x - _524) * _460) + _524) * cbMtdParam._m0[13u].x) + ((((_481.x - _478) * _460) + _478) * cbMtdParam._m0[11u].x)) * _554) * cbInstanceData._m0[_2460].x;
    float _2467 = ((((((_527.y - _525) * _460) + _525) * cbMtdParam._m0[13u].y) + ((((_481.y - _479) * _460) + _479) * cbMtdParam._m0[11u].y)) * _554) * cbInstanceData._m0[_2460].y;
    float _2468 = ((((((_527.z - _526) * _460) + _526) * cbMtdParam._m0[13u].z) + ((((_481.z - _480) * _460) + _480) * cbMtdParam._m0[11u].z)) * _554) * cbInstanceData._m0[_2460].z;
    float _4346 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _4357 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _4368 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _2485 = (((isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0))) * (_2444 + ((isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0))) * _733))) + ((_2450 + ((isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0))) * _1539)) * cbPerFrame._m0[3u].x)) + _2466;
    float _2487 = (_2467 + ((_2452 + ((isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0))) * _1539)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0))) * (_2446 + ((isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0))) * _733)));
    float _2489 = (_2468 + ((_2454 + ((isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0))) * _1539)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) * (_2448 + ((isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0))) * _733)));
    float _4394 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2502 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
    uint _2503 = _708 + 6u;
    float _2511 = _668 / cbSceneParam._m0[86u].x;
    float _2512 = _669 / cbSceneParam._m0[86u].y;
    vec4 _2526 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2511, _2512, (log2((isnan(cbSceneParam._m0[77u].w) ? _602 : (isnan(_602) ? cbSceneParam._m0[77u].w : min(_602, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2528 = _2526.x;
    float _2529 = _2526.y;
    float _2530 = _2526.z;
    float _2531 = _2526.w;
    float _2623;
    float _2625;
    float _2627;
    float _2629;
    if (_602 > cbSceneParam._m0[78u].w)
    {
        float _2586 = isnan(_602) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _602 : min(cbSceneParam._m0[80u].w, _602));
        float _2587 = _2586 / _602;
        float _2598 = _2587 * _653;
        float _2599 = _654 * _2587;
        float _2600 = (-0.0) - _2599;
        float _2601 = _2587 * _655;
        float _2603 = (cbSceneParam._m0[77u].w * _2600) / _2586;
        float _2604 = _2603 + cbSceneParam._m0[79u].w;
        float _2605 = cbSceneParam._m0[79u].w - _2599;
        float _2611 = sqrt(((_2598 * _2598) + (_2599 * _2599)) + (_2601 * _2601));
        float _2614 = (1.0 - (cbSceneParam._m0[77u].w / _2586)) * _2611;
        float _2619 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2621 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2783;
        if (abs((_2600 - _2603) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2783 = ((((_2604 > 0.0) ? exp2(_2619 * _2604) : (2.0 - exp2(_2621 * _2604))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2614;
        }
        else
        {
            float _2743 = 1.0 / cbSceneParam._m0[80u].x;
            float _2744 = isnan(_2605) ? _2604 : (isnan(_2604) ? _2605 : max(_2604, _2605));
            float _2745 = isnan(_2605) ? _2604 : (isnan(_2604) ? _2605 : min(_2604, _2605));
            float _2754 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : min(_2744, 0.0));
            float _2755 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : min(_2745, 0.0));
            _2783 = ((abs(_2611 / _2600) * cbSceneParam._m0[80u].y) * ((((_2754 - _2755) * 2.0) - ((exp2(_2619 * (isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0)))) - exp2(_2619 * (isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0))))) * _2743)) - ((exp2(_2621 * _2754) - exp2(_2621 * _2755)) * _2743))) + (_2614 * cbSceneParam._m0[80u].z);
        }
        vec4 _2785 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2511, _2512, 1.0), 0.0);
        float _2794 = exp2((_2783 * (-1.44269502162933349609375)) * (1.0 - _2785.w));
        float _2795 = log2(_2794);
        float _2811 = log2(_2531);
        _2623 = (exp2(_2811 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2795 * cbSceneParam._m0[78u].x)) * _2785.x) / cbSceneParam._m0[78u].x)) + _2528;
        _2625 = (exp2(_2811 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2795 * cbSceneParam._m0[78u].y)) * _2785.y) / cbSceneParam._m0[78u].y)) + _2529;
        _2627 = (exp2(_2811 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2795 * cbSceneParam._m0[78u].z)) * _2785.z) / cbSceneParam._m0[78u].z)) + _2530;
        _2629 = _2794 * _2531;
    }
    else
    {
        _2623 = _2528;
        _2625 = _2529;
        _2627 = _2530;
        _2629 = _2531;
    }
    float _2641 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2642 = _2641 == 3.0;
    float _2643 = log2(_2629);
    float _2647 = exp2(_2643 * cbSceneParam._m0[78u].x);
    float _2648 = exp2(_2643 * cbSceneParam._m0[78u].y);
    float _2649 = exp2(_2643 * cbSceneParam._m0[78u].z);
    float _2650 = _2647 * (isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0)));
    float _2651 = _2648 * (isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0)));
    float _2652 = _2649 * (isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0)));
    float _2661 = (_2641 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2661 * (_2642 ? _2650 : (_2650 + (cbSceneParam._m0[72u].w * _2623)));
    SV_Target.y = _2661 * (_2642 ? _2651 : (_2651 + (cbSceneParam._m0[72u].w * _2625)));
    SV_Target.z = _2661 * (_2642 ? _2652 : (_2652 + (cbSceneParam._m0[72u].w * _2627)));
    SV_Target.w = cbInstanceData._m0[_2503].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2466) * _2502) * _2647) * _2661;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2467) * _2502) * _2648) * _2661;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2468) * _2502) * _2649) * _2661;
    SV_Target_1.w = cbInstanceData._m0[_2503].w;
}


