#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1230;
float _3652;
float _3653;
float _3654;
float _3655;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _251 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _257 = _251.x * cbMtdParam._m0[9u].x;
    float _258 = _251.y * cbMtdParam._m0[9u].y;
    float _259 = _251.z * cbMtdParam._m0[9u].z;
    vec4 _297 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[5u].w));
    float _313 = (TEXCOORD_3.x - ((cbMtdParam._m0[14u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[14u].y + 1.0);
    float _3664 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _314 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
    float _321 = (((_297.x * cbMtdParam._m0[10u].x) - _257) * _314) + _257;
    float _322 = (((_297.y * cbMtdParam._m0[10u].y) - _258) * _314) + _258;
    float _323 = (((_297.z * cbMtdParam._m0[10u].z) - _259) * _314) + _259;
    vec4 _340 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _359 = TEXCOORD_9.x - ((cbMtdParam._m0[16u].y * (1.0 - TEXCOORD_9.x)) * (_340.x + 0.00999999977648258209228515625));
    float _361 = _359 * (cbMtdParam._m0[16u].z + 1.0);
    float _3675 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _362 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
    float _370 = ((((cbMtdParam._m0[12u].x - _321) * TEXCOORD_9.x) * cbMtdParam._m0[16u].x) * _362) + _321;
    float _371 = ((((cbMtdParam._m0[12u].y - _322) * TEXCOORD_9.y) * cbMtdParam._m0[16u].x) * _362) + _322;
    float _372 = (((cbMtdParam._m0[16u].x * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _323)) * _362) + _323;
    vec4 _385 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[4u].w));
    float _393 = (_385.x * 2.0) + (-1.0);
    float _395 = (_385.y * 2.0) + (-1.0);
    float _396 = dot(vec2(_393, _395), vec2(_393, _395));
    float _3686 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    vec4 _413 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _417 = _413.z;
    float _420 = (_413.x * 2.0) + (-1.0);
    float _421 = (_413.y * 2.0) + (-1.0);
    float _422 = dot(vec2(_420, _421), vec2(_420, _421));
    float _3697 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _427 = sqrt(1.0 - (isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))));
    float _430 = (_314 * (_385.z - _417)) + _417;
    float _436 = _359 * (cbMtdParam._m0[16u].y + 1.0);
    float _3708 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _440 = ((cbMtdParam._m0[15u].y - _430) * (isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0)))) + _430;
    float _453 = (cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _454 = (cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _480 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * ((cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * ((cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[10u].w));
    float _485 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[15u].w;
    float _492 = ((_480.y * 0.5) + (-0.25)) * cbMtdParam._m0[15u].z;
    float _494 = (-0.0) - (cbMtdParam._m0[15u].z * ((_480.x * 0.5) + (-0.25)));
    float _496 = fract(_485);
    float _498 = fract(_485 + 0.5);
    float _499 = _496 * _494;
    float _500 = _492 * _496;
    float _503 = _498 * _494;
    float _504 = _492 * _498;
    float _509 = abs((_496 * 2.0) + (-1.0));
    vec4 _525 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_499 + _453) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_500 + _454) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _527 = _525.x;
    float _528 = _525.y;
    float _529 = _525.z;
    vec4 _530 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_503 + _453) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_504 + _454) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _557 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _558 = (cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _571 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_499 + _557) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_500 + _558) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _573 = _571.x;
    float _574 = _571.y;
    float _575 = _571.z;
    vec4 _576 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_503 + _557) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_504 + _558) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _605 = (_314 * (_393 - _420)) + _420;
    float _606 = (_314 * (_395 - _421)) + _421;
    float _607 = (_314 * (sqrt(1.0 - (isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0)))) - _427)) + _427;
    vec4 _626 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[16u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, (((cbMtdParam._m0[17u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w));
    float _632 = (_626.x * 2.0) + (-1.0);
    float _633 = (_626.y * 2.0) + (-1.0);
    float _634 = dot(vec2(_632, _633), vec2(_632, _633));
    float _3719 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _650 = (_362 * (((_605 * cbMtdParam._m0[14u].z) - _605) + _632)) + _605;
    float _651 = (_362 * (((_606 * cbMtdParam._m0[14u].z) - _606) + _633)) + _606;
    float _652 = (_362 * (sqrt(1.0 - (isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0)))) - _607)) + _607;
    float _655 = fma(_652, _222 * NORMAL.x, fma(_651, _229 * TANGENT.x, (_215 * _207) * _650));
    float _658 = fma(_652, _222 * NORMAL.y, fma(_651, _229 * TANGENT.y, (_215 * _208) * _650));
    float _661 = fma(_652, _222 * NORMAL.z, fma(_651, _229 * TANGENT.z, (_215 * _209) * _650));
    float _665 = inversesqrt(dot(vec3(_655, _658, _661), vec3(_655, _658, _661)));
    float _666 = _665 * _655;
    float _667 = _665 * _658;
    float _668 = _665 * _661;
    float _3730 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _669 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
    float _3741 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _3752 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _3763 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _688 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _729 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _739 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _729);
    float _740 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _729);
    float _741 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _729);
    float _745 = inversesqrt(dot(vec3(_739, _740, _741), vec3(_739, _740, _741)));
    float _746 = _739 * _745;
    float _747 = _740 * _745;
    float _748 = _741 * _745;
    vec4 _753 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _755 = _753.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _911 = sqrt(((_739 * _739) + (_740 * _740)) + (_741 * _741));
        float _917 = (cbMatDynParam._m0[5u].x * _911) + cbMatDynParam._m0[5u].y;
        float _3774 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _918 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
        float _922 = (cbMatDynParam._m0[5u].z * _911) + cbMatDynParam._m0[5u].w;
        float _3785 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0))) - _918)) + _918) < ((_755 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _767 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _768 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _787 = fma(_668, cbSceneParam._m0[5u].z, fma(_667, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _666));
    float _790 = fma(_668, cbSceneParam._m0[6u].z, fma(_667, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _666));
    float _793 = fma(_668, cbSceneParam._m0[7u].z, fma(_667, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _666));
    uint _806 = uint(roundEven(NORMAL.w)) * 13u;
    uint _807 = _806 + 9u;
    uint _808 = _807 + uint(cbMatDynParam._m0[0u].w);
    float _814 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0)))) * cbInstanceData._m0[_808].x;
    float _815 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0)))) * cbInstanceData._m0[_808].y;
    float _816 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0)))) * cbInstanceData._m0[_808].z;
    float _3796 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _817 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
    float _3807 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _818 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
    float _3818 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _819 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
    vec4 _828 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _767, cbSceneParam._m0[86u].y * _768));
    float _831 = _828.x * TEXCOORD_3.w;
    float _832 = dot(vec3(_666, _667, _668), vec3(_746, _747, _748));
    float _835 = _832 * 2.0;
    float _839 = (_835 * _666) - _746;
    float _840 = (_835 * _667) - _747;
    float _841 = (_835 * _668) - _748;
    float _845 = abs(dot(vec3(_746, _747, _748), vec3(_666, _667, _668)));
    float _3829 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _847 = sqrt(_669);
    float _860 = exp2((_847 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_847 * 3.0));
    float _892 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _896 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _900 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1229;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _955 = fma(_900, cbModelParam._m0[26u].z, fma(_896, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _892));
        float _959 = fma(_900, cbModelParam._m0[27u].z, fma(_896, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _892));
        float _963 = fma(_900, cbModelParam._m0[28u].z, fma(_896, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _892));
        float _987 = _892 + _666;
        float _988 = _896 + _667;
        float _989 = _900 + _668;
        float _999 = fma(_989, cbModelParam._m0[26u].z, fma(_988, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _987)) - _955;
        float _1000 = fma(_989, cbModelParam._m0[27u].z, fma(_988, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _987)) - _959;
        float _1001 = fma(_989, cbModelParam._m0[28u].z, fma(_988, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _987)) - _963;
        float _1005 = inversesqrt(dot(vec3(_999, _1000, _1001), vec3(_999, _1000, _1001)));
        float _1018 = ((_1005 * _999) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_955 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1019 = ((_1005 * _1000) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_959 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1020 = ((_1005 * _1001) / cbModelParam._m0[34u].z) + ((((((_963 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1023 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1018, _1019, _1020), 0.0);
        vec4 _1030 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1018, _1019, _1020), 0.0);
        vec4 _1037 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1018, _1019, _1020), 0.0);
        vec4 _1044 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1018, _1019, _1020), 0.0);
        float _1057 = exp2((_1023.w + (-0.5)) * 20.0) * 2.0;
        float _1058 = _1057 * (_1023.x + (-0.5));
        float _1059 = _1057 * (_1023.y + (-0.5));
        float _1060 = _1057 * (_1023.z + (-0.5));
        float _1067 = exp2((_1030.w + (-0.5)) * 20.0) * 2.0;
        float _1068 = _1067 * (_1030.x + (-0.5));
        float _1069 = _1067 * (_1030.y + (-0.5));
        float _1070 = _1067 * (_1030.z + (-0.5));
        float _1077 = exp2((_1037.w + (-0.5)) * 20.0) * 2.0;
        float _1078 = _1077 * (_1037.x + (-0.5));
        float _1079 = _1077 * (_1037.y + (-0.5));
        float _1080 = _1077 * (_1037.z + (-0.5));
        float _1087 = exp2((_1044.w + (-0.5)) * 20.0) * 2.0;
        float _1088 = _1087 * (_1044.x + (-0.5));
        float _1089 = _1087 * (_1044.y + (-0.5));
        float _1090 = _1087 * (_1044.z + (-0.5));
        float _1091 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1092 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1093 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1094 = _1058 * 0.5;
        float _1095 = _1068 * 0.5;
        float _1096 = _1078 * 0.5;
        float _1097 = dot(vec3(_1094, _1095, _1096), vec3(_1094, _1095, _1096));
        float _1102 = (_1097 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1097);
        float _1111 = (dot(vec3(_666, _667, _668), vec3(_1102 * _1094, _1102 * _1095, _1102 * _1096)) + 1.0) * 0.5;
        float _3855 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1121 = sqrt(((_1095 * _1095) + (_1094 * _1094)) + (_1096 * _1096)) / (_1091 + 9.9999997473787516355514526367188e-06);
        float _3866 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1122 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
        float _1123 = _1122 * 2.0;
        float _1127 = (1.0 - _1122) / (_1122 + 1.0);
        float _3877 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1128 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
        float _1137 = ((((1.0 - _1128) * (_1123 + 2.0)) * exp2(log2(isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0))) * (_1123 + 1.0))) + _1128) * _1091;
        float _1138 = _1059 * 0.5;
        float _1139 = _1069 * 0.5;
        float _1140 = _1079 * 0.5;
        float _1141 = dot(vec3(_1138, _1139, _1140), vec3(_1138, _1139, _1140));
        float _1146 = (_1141 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1141);
        float _1154 = (dot(vec3(_666, _667, _668), vec3(_1146 * _1138, _1146 * _1139, _1146 * _1140)) + 1.0) * 0.5;
        float _3888 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1163 = sqrt(((_1139 * _1139) + (_1138 * _1138)) + (_1140 * _1140)) / (_1092 + 9.9999997473787516355514526367188e-06);
        float _3899 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1164 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _1165 = _1164 * 2.0;
        float _1169 = (1.0 - _1164) / (_1164 + 1.0);
        float _3910 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1170 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _1179 = ((((1.0 - _1170) * (_1165 + 2.0)) * exp2(log2(isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))) * (_1165 + 1.0))) + _1170) * _1092;
        float _1180 = _1060 * 0.5;
        float _1181 = _1070 * 0.5;
        float _1182 = _1080 * 0.5;
        float _1183 = dot(vec3(_1180, _1181, _1182), vec3(_1180, _1181, _1182));
        float _1188 = (_1183 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1183);
        float _1196 = (dot(vec3(_666, _667, _668), vec3(_1188 * _1180, _1188 * _1181, _1188 * _1182)) + 1.0) * 0.5;
        float _3921 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1205 = sqrt(((_1181 * _1181) + (_1180 * _1180)) + (_1182 * _1182)) / (_1093 + 9.9999997473787516355514526367188e-06);
        float _3932 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _1207 = _1206 * 2.0;
        float _1211 = (1.0 - _1206) / (_1206 + 1.0);
        float _3943 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1212 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _1221 = ((((1.0 - _1212) * (_1207 + 2.0)) * exp2(log2(isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0))) * (_1207 + 1.0))) + _1212) * _1093;
        _1229 = _1060;
        _1231 = _1059;
        _1232 = _1058;
        _1233 = _1070;
        _1234 = _1069;
        _1235 = _1068;
        _1236 = _1080;
        _1237 = _1079;
        _1238 = _1078;
        _1239 = _1093;
        _1240 = _1092;
        _1241 = _1091;
        _1242 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0)));
        _1243 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0)));
        _1244 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0)));
    }
    else
    {
        _1229 = _1230;
        _1231 = _1230;
        _1232 = _1230;
        _1233 = _1230;
        _1234 = _1230;
        _1235 = _1230;
        _1236 = _1230;
        _1237 = _1230;
        _1238 = _1230;
        _1239 = _1230;
        _1240 = _1230;
        _1241 = _1230;
        _1242 = 0.0;
        _1243 = 0.0;
        _1244 = 0.0;
    }
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1273 = fma(_900, cbModelParam._m0[30u].z, fma(_896, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _892));
        float _1277 = fma(_900, cbModelParam._m0[31u].z, fma(_896, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _892));
        float _1281 = fma(_900, cbModelParam._m0[32u].z, fma(_896, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _892));
        float _1304 = _892 + _666;
        float _1305 = _896 + _667;
        float _1306 = _900 + _668;
        float _1316 = fma(_1306, cbModelParam._m0[30u].z, fma(_1305, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1304)) - _1273;
        float _1317 = fma(_1306, cbModelParam._m0[31u].z, fma(_1305, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1304)) - _1277;
        float _1318 = fma(_1306, cbModelParam._m0[32u].z, fma(_1305, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1304)) - _1281;
        float _1322 = inversesqrt(dot(vec3(_1316, _1317, _1318), vec3(_1316, _1317, _1318)));
        float _1335 = ((_1322 * _1316) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1273 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1336 = ((_1322 * _1317) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1277 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1337 = ((_1322 * _1318) / cbModelParam._m0[35u].z) + ((((((_1281 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1339 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1335, _1336, _1337), 0.0);
        vec4 _1346 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1335, _1336, _1337), 0.0);
        vec4 _1353 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1335, _1336, _1337), 0.0);
        vec4 _1360 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1335, _1336, _1337), 0.0);
        float _1372 = exp2((_1339.w + (-0.5)) * 20.0) * 2.0;
        float _1373 = _1372 * (_1339.x + (-0.5));
        float _1374 = _1372 * (_1339.y + (-0.5));
        float _1375 = _1372 * (_1339.z + (-0.5));
        float _1382 = exp2((_1346.w + (-0.5)) * 20.0) * 2.0;
        float _1383 = _1382 * (_1346.x + (-0.5));
        float _1384 = _1382 * (_1346.y + (-0.5));
        float _1385 = _1382 * (_1346.z + (-0.5));
        float _1392 = exp2((_1353.w + (-0.5)) * 20.0) * 2.0;
        float _1393 = _1392 * (_1353.x + (-0.5));
        float _1394 = _1392 * (_1353.y + (-0.5));
        float _1395 = _1392 * (_1353.z + (-0.5));
        float _1402 = exp2((_1360.w + (-0.5)) * 20.0) * 2.0;
        float _1403 = _1402 * (_1360.x + (-0.5));
        float _1404 = _1402 * (_1360.y + (-0.5));
        float _1405 = _1402 * (_1360.z + (-0.5));
        float _1406 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1407 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1408 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1409 = _1373 * 0.5;
        float _1410 = _1383 * 0.5;
        float _1411 = _1393 * 0.5;
        float _1412 = dot(vec3(_1409, _1410, _1411), vec3(_1409, _1410, _1411));
        float _1417 = (_1412 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1412);
        float _1425 = (dot(vec3(_666, _667, _668), vec3(_1417 * _1409, _1417 * _1410, _1417 * _1411)) + 1.0) * 0.5;
        float _3984 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1434 = sqrt(((_1410 * _1410) + (_1409 * _1409)) + (_1411 * _1411)) / (_1406 + 9.9999997473787516355514526367188e-06);
        float _3995 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1435 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _1436 = _1435 * 2.0;
        float _1440 = (1.0 - _1435) / (_1435 + 1.0);
        float _4006 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1441 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _1450 = ((((1.0 - _1441) * (_1436 + 2.0)) * exp2(log2(isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0))) * (_1436 + 1.0))) + _1441) * _1406;
        float _1451 = _1374 * 0.5;
        float _1452 = _1384 * 0.5;
        float _1453 = _1394 * 0.5;
        float _1454 = dot(vec3(_1451, _1452, _1453), vec3(_1451, _1452, _1453));
        float _1459 = (_1454 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1454);
        float _1467 = (dot(vec3(_666, _667, _668), vec3(_1459 * _1451, _1459 * _1452, _1459 * _1453)) + 1.0) * 0.5;
        float _4017 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1476 = sqrt(((_1452 * _1452) + (_1451 * _1451)) + (_1453 * _1453)) / (_1407 + 9.9999997473787516355514526367188e-06);
        float _4028 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1477 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _1478 = _1477 * 2.0;
        float _1482 = (1.0 - _1477) / (_1477 + 1.0);
        float _4039 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1483 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _1492 = ((((1.0 - _1483) * (_1478 + 2.0)) * exp2(log2(isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) * (_1478 + 1.0))) + _1483) * _1407;
        float _1493 = _1375 * 0.5;
        float _1494 = _1385 * 0.5;
        float _1495 = _1395 * 0.5;
        float _1496 = dot(vec3(_1493, _1494, _1495), vec3(_1493, _1494, _1495));
        float _1501 = (_1496 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1496);
        float _1509 = (dot(vec3(_666, _667, _668), vec3(_1501 * _1493, _1501 * _1494, _1501 * _1495)) + 1.0) * 0.5;
        float _4050 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1518 = sqrt(((_1494 * _1494) + (_1493 * _1493)) + (_1495 * _1495)) / (_1408 + 9.9999997473787516355514526367188e-06);
        float _4061 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1519 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _1520 = _1519 * 2.0;
        float _1524 = (1.0 - _1519) / (_1519 + 1.0);
        float _4072 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1525 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _1534 = ((((1.0 - _1525) * (_1520 + 2.0)) * exp2(log2(isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0))) * (_1520 + 1.0))) + _1525) * _1408;
        _1542 = _1375;
        _1543 = _1374;
        _1544 = _1373;
        _1545 = _1385;
        _1546 = _1384;
        _1547 = _1383;
        _1548 = _1395;
        _1549 = _1394;
        _1550 = _1393;
        _1551 = _1408;
        _1552 = _1407;
        _1553 = _1406;
        _1554 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0)));
        _1555 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0)));
        _1556 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0)));
    }
    else
    {
        _1542 = _1230;
        _1543 = _1230;
        _1544 = _1230;
        _1545 = _1230;
        _1546 = _1230;
        _1547 = _1230;
        _1548 = _1230;
        _1549 = _1230;
        _1550 = _1230;
        _1551 = _1230;
        _1552 = _1230;
        _1553 = _1230;
        _1554 = 0.0;
        _1555 = 0.0;
        _1556 = 0.0;
    }
    float _1566 = (cbModelParam._m0[1u].x * (_1554 - _1242)) + _1242;
    float _1567 = (cbModelParam._m0[1u].x * (_1555 - _1243)) + _1243;
    float _1568 = (cbModelParam._m0[1u].x * (_1556 - _1244)) + _1244;
    float _1589 = fma(_1568, cbSceneParam._m0[89u].z, fma(_1567, cbSceneParam._m0[89u].y, _1566 * cbSceneParam._m0[89u].x));
    float _1592 = fma(_1568, cbSceneParam._m0[90u].z, fma(_1567, cbSceneParam._m0[90u].y, _1566 * cbSceneParam._m0[90u].x));
    float _1595 = fma(_1568, cbSceneParam._m0[91u].z, fma(_1567, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1566));
    float _1610 = _839 * 0.5;
    float _1611 = _840 * 0.5;
    float _1612 = _841 * 0.5;
    float _1613 = dot(vec4(_1610, _1611, _1612, 1.0), vec4(_1544, _1547, _1550, _1553));
    float _1616 = dot(vec4(_1610, _1611, _1612, 1.0), vec4(_1543, _1546, _1549, _1552));
    float _1619 = dot(vec4(_1610, _1611, _1612, 1.0), vec4(_1542, _1545, _1548, _1551));
    float _1653;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1626 = dot(vec4(_1610, _1611, _1612, 1.0), vec4(_1229, _1233, _1236, _1239));
        float _1630 = dot(vec4(_1610, _1611, _1612, 1.0), vec4(_1231, _1234, _1237, _1240));
        float _1634 = dot(vec4(_1610, _1611, _1612, 1.0), vec4(_1232, _1235, _1238, _1241));
        float _1641 = dot(vec4(cbModelParam._m0[39u]), vec4(_1610, _1611, _1612, 1.0));
        _1653 = dot(vec3(isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0)), isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0)), isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1641) ? 0.0 : (isnan(0.0) ? _1641 : max(0.0, _1641))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1653 = 1.0;
    }
    float _1664;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1655 = dot(vec4(cbModelParam._m0[40u]), vec4(_1610, _1611, _1612, 1.0));
        _1664 = dot(vec3(isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0)), isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0)), isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1655) ? 0.0 : (isnan(0.0) ? _1655 : max(0.0, _1655))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1664 = 1.0;
    }
    float _1668 = (_1664 * cbModelParam._m0[1u].x) + (_1653 * (1.0 - cbModelParam._m0[1u].x));
    float _1678 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _669);
    float _1679 = isnan(_1678) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1678 : min(cbModelParam._m0[25u].z, _1678));
    float _1759;
    float _1761;
    float _1763;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1726 = fma(_900, cbModelParam._m0[13u].z, fma(_896, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _892)) + cbModelParam._m0[13u].w;
        float _1730 = fma(_900, cbModelParam._m0[14u].z, fma(_896, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _892)) + cbModelParam._m0[14u].w;
        float _1734 = fma(_900, cbModelParam._m0[15u].z, fma(_896, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _892)) + cbModelParam._m0[15u].w;
        float _1737 = fma(_841, cbModelParam._m0[13u].z, fma(_840, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _839));
        float _1740 = fma(_841, cbModelParam._m0[14u].z, fma(_840, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _839));
        float _1743 = fma(_841, cbModelParam._m0[15u].z, fma(_840, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _839));
        float _1771;
        if (_1737 > 0.0)
        {
            _1771 = abs((1.0 - _1726) / _1737);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1737 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1726 + 1.0) / _1737);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1771 = frontier_phi_17_15_ladder;
        }
        float _1993;
        if (_1740 > 0.0)
        {
            _1993 = abs((1.0 - _1730) / _1740);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1740 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1730 + 1.0) / _1740);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1993 = frontier_phi_26_22_ladder;
        }
        float _2239;
        if (_1743 > 0.0)
        {
            _2239 = abs((1.0 - _1734) / _1743);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1743 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1734 + 1.0) / _1743);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2239 = frontier_phi_38_33_ladder;
        }
        float _2241 = isnan(_1993) ? _1771 : (isnan(_1771) ? _1993 : min(_1771, _1993));
        float _2242 = isnan(_2239) ? _2241 : (isnan(_2241) ? _2239 : min(_2241, _2239));
        float _2246 = (_2242 * _1737) + _1726;
        float _2247 = (_2242 * _1740) + _1730;
        float _2248 = (_2242 * _1743) + _1734;
        float _2249 = _2242 * 9.9999997473787516355514526367188e-05;
        float _2251 = (-1.0) - _2249;
        float _2253 = _2249 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2248 > _2253) || ((_2248 < _2251) || ((_2247 > _2253) || ((_2247 < _2251) || ((_2246 < _2251) || (_2246 > _2253))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2372 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2248, cbModelParam._m0[9u].z, fma(_2247, cbModelParam._m0[9u].y, _2246 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2248, cbModelParam._m0[10u].z, fma(_2247, cbModelParam._m0[10u].y, _2246 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2248, cbModelParam._m0[11u].z, fma(_2247, cbModelParam._m0[11u].y, _2246 * cbModelParam._m0[11u].x))), _1679);
            frontier_phi_16_38_ladder = _2372.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2372.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2372.x * cbModelParam._m0[1u].y;
        }
        _1759 = frontier_phi_16_38_ladder_2;
        _1761 = frontier_phi_16_38_ladder_1;
        _1763 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1747 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_839, _840, _841), _1679);
        _1759 = _1747.x * cbModelParam._m0[1u].y;
        _1761 = _1747.y * cbModelParam._m0[1u].y;
        _1763 = _1747.z * cbModelParam._m0[1u].y;
    }
    float _1767 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _669);
    float _1768 = isnan(_1767) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1767 : min(cbModelParam._m0[25u].w, _1767));
    float _1858;
    float _1860;
    float _1862;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1822 = fma(_900, cbModelParam._m0[21u].z, fma(_896, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _892)) + cbModelParam._m0[21u].w;
        float _1826 = fma(_900, cbModelParam._m0[22u].z, fma(_896, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _892)) + cbModelParam._m0[22u].w;
        float _1830 = fma(_900, cbModelParam._m0[23u].z, fma(_896, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _892)) + cbModelParam._m0[23u].w;
        float _1833 = fma(_841, cbModelParam._m0[21u].z, fma(_840, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _839));
        float _1836 = fma(_841, cbModelParam._m0[22u].z, fma(_840, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _839));
        float _1839 = fma(_841, cbModelParam._m0[23u].z, fma(_840, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _839));
        float _1998;
        if (_1833 > 0.0)
        {
            _1998 = abs((1.0 - _1822) / _1833);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1833 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1822 + 1.0) / _1833);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1998 = frontier_phi_28_24_ladder;
        }
        float _2266;
        if (_1836 > 0.0)
        {
            _2266 = abs((1.0 - _1826) / _1836);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1836 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1826 + 1.0) / _1836);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2266 = frontier_phi_40_35_ladder;
        }
        float _2471;
        if (_1839 > 0.0)
        {
            _2471 = abs((1.0 - _1830) / _1839);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1839 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1830 + 1.0) / _1839);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2471 = frontier_phi_49_46_ladder;
        }
        float _2473 = isnan(_2266) ? _1998 : (isnan(_1998) ? _2266 : min(_1998, _2266));
        float _2474 = isnan(_2471) ? _2473 : (isnan(_2473) ? _2471 : min(_2473, _2471));
        float _2478 = (_2474 * _1833) + _1822;
        float _2479 = (_2474 * _1836) + _1826;
        float _2480 = (_2474 * _1839) + _1830;
        float _2481 = _2474 * 9.9999997473787516355514526367188e-05;
        float _2482 = (-1.0) - _2481;
        float _2484 = _2481 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2480 > _2484) || ((_2480 < _2482) || ((_2479 > _2484) || ((_2479 < _2482) || ((_2478 < _2482) || (_2478 > _2484))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2708 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2480, cbModelParam._m0[17u].z, fma(_2479, cbModelParam._m0[17u].y, _2478 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2480, cbModelParam._m0[18u].z, fma(_2479, cbModelParam._m0[18u].y, _2478 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2480, cbModelParam._m0[19u].z, fma(_2479, cbModelParam._m0[19u].y, _2478 * cbModelParam._m0[19u].x))), _1768);
            frontier_phi_25_49_ladder = _2708.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2708.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2708.x * cbModelParam._m0[1u].z;
        }
        _1858 = frontier_phi_25_49_ladder_2;
        _1860 = frontier_phi_25_49_ladder_1;
        _1862 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1842 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_839, _840, _841), _1768);
        _1858 = _1842.x * cbModelParam._m0[1u].z;
        _1860 = _1842.y * cbModelParam._m0[1u].z;
        _1862 = _1842.z * cbModelParam._m0[1u].z;
    }
    float _1874 = ((((1.0 - _860) * ((_847 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_860 * _847)) * _831;
    float _1875 = _1874 * ((cbModelParam._m0[1u].w * (_1858 - _1759)) + _1759);
    float _1876 = _1874 * ((cbModelParam._m0[1u].w * (_1860 - _1761)) + _1761);
    float _1877 = _1874 * ((cbModelParam._m0[1u].w * (_1862 - _1763)) + _1763);
    float _1880 = fma(_1877, cbSceneParam._m0[89u].z, fma(_1876, cbSceneParam._m0[89u].y, _1875 * cbSceneParam._m0[89u].x));
    float _1883 = fma(_1877, cbSceneParam._m0[90u].z, fma(_1876, cbSceneParam._m0[90u].y, _1875 * cbSceneParam._m0[90u].x));
    float _1886 = fma(_1877, cbSceneParam._m0[91u].z, fma(_1876, cbSceneParam._m0[91u].y, _1875 * cbSceneParam._m0[91u].x));
    vec4 _1894 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_767, _768));
    float _1896 = _1894.w;
    float _1908 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1896);
    float _1909 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1896);
    float _1910 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1896);
    uvec4 _1914 = floatBitsToUint(cbInstanceData._m0[_806 + 5u]);
    uint _1916 = _1914.x * 14u;
    uint _1917 = _1916 + 13u;
    float _1924 = _831 + (-1.0);
    float _1929 = (cbLight._m0[_1917].x * _1924) + 1.0;
    float _1930 = (cbLight._m0[_1917].y * _1924) + 1.0;
    float _1931 = (cbLight._m0[_1917].z * _1924) + 1.0;
    float _1932 = (cbLight._m0[_1917].w * _1924) + 1.0;
    uint _1933 = _1916 + 5u;
    float _1939 = isnan(1.0) ? _1930 : (isnan(_1930) ? 1.0 : min(_1930, 1.0));
    uint _1943 = _1916 + 4u;
    float _1952 = isnan(1.0) ? _1929 : (isnan(_1929) ? 1.0 : min(_1929, 1.0));
    uint _1956 = _1916 | 1u;
    float _1967 = dot(vec3(cbLight._m0[_1916].xyz), vec3(_666, _667, _668));
    float _1970 = dot(vec3(cbLight._m0[_1956].xyz), vec3(_666, _667, _668));
    float _4208 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
    float _4219 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
    float _1975 = (isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * 0.3183098733425140380859375;
    float _1977 = (isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0))) * 0.3183098733425140380859375;
    float _1984 = ((cbLight._m0[_1933].x * _1939) * _1977) + (((cbLight._m0[_1943].x * _1908) * _1952) * _1975);
    float _1985 = ((_1939 * cbLight._m0[_1933].y) * _1977) + (((cbLight._m0[_1943].y * _1909) * _1952) * _1975);
    float _1986 = ((_1939 * cbLight._m0[_1933].z) * _1977) + (((cbLight._m0[_1943].z * _1910) * _1952) * _1975);
    uvec4 _1990 = floatBitsToUint(cbLight._m0[_1916 + 12u]);
    bool _1992 = _1990.x == 0u;
    float _2003;
    float _2005;
    float _2007;
    if (_1992)
    {
        _2003 = _1984;
        _2005 = _1985;
        _2007 = _1986;
    }
    else
    {
        uint _2011 = _1916 + 6u;
        float _2027 = (dot(vec3(cbLight._m0[_1916 + 2u].xyz), vec3(_666, _667, _668)) * 0.5) + 0.5;
        float _2028 = _2027 * _2027;
        float _4230 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
        float _2029 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _2030 = isnan(1.0) ? _1931 : (isnan(_1931) ? 1.0 : min(_1931, 1.0));
        _2003 = (((cbLight._m0[_2011].x * 0.3183098733425140380859375) * _2029) * _2030) + _1984;
        _2005 = (((cbLight._m0[_2011].y * 0.3183098733425140380859375) * _2029) * _2030) + _1985;
        _2007 = (((cbLight._m0[_2011].z * 0.3183098733425140380859375) * _2029) * _2030) + _1986;
    }
    bool _2010 = _1990.y == 0u;
    float _2048;
    float _2050;
    float _2052;
    if (_2010)
    {
        _2048 = _2003;
        _2050 = _2005;
        _2052 = _2007;
    }
    else
    {
        uint _2210 = _1916 + 7u;
        float _2226 = (dot(vec3(cbLight._m0[_1916 + 3u].xyz), vec3(_666, _667, _668)) * 0.5) + 0.5;
        float _2227 = _2226 * _2226;
        float _4246 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
        float _2228 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _2229 = isnan(1.0) ? _1932 : (isnan(_1932) ? 1.0 : min(_1932, 1.0));
        _2048 = (((cbLight._m0[_2210].x * 0.3183098733425140380859375) * _2228) * _2229) + _2003;
        _2050 = (((cbLight._m0[_2210].y * 0.3183098733425140380859375) * _2228) * _2229) + _2005;
        _2052 = (((cbLight._m0[_2210].z * 0.3183098733425140380859375) * _2228) * _2229) + _2007;
    }
    uint _2055 = _1916 + 8u;
    float _2068 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1916].w)) * _669) * 0.949999988079071044921875);
    float _2069 = _2068 * _2068;
    float _2070 = cbLight._m0[_1916].x + _746;
    float _2071 = cbLight._m0[_1916].y + _747;
    float _2072 = cbLight._m0[_1916].z + _748;
    float _2076 = inversesqrt(dot(vec3(_2070, _2071, _2072), vec3(_2070, _2071, _2072)));
    float _2077 = _2076 * _2070;
    float _2078 = _2076 * _2071;
    float _2079 = _2076 * _2072;
    float _2080 = dot(vec3(_666, _667, _668), vec3(cbLight._m0[_1916].xyz));
    float _4262 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
    float _2083 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
    float _4273 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _2084 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
    float _2085 = dot(vec3(_666, _667, _668), vec3(_2077, _2078, _2079));
    float _4284 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
    float _2088 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
    float _2089 = dot(vec3(cbLight._m0[_1916].xyz), vec3(_2077, _2078, _2079));
    float _4295 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
    float _2093 = _2069 * _2069;
    float _2097 = ((_2088 * _2088) * (_2093 + (-1.0))) + 1.0;
    float _2108 = (exp2(log2(1.0 - (isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2109 = 1.0 - _2069;
    float _2120 = (0.5 / (((_2084 * ((_2083 * _2109) + _2069)) + 9.9999999392252902907785028219223e-09) + (((_2084 * _2109) + _2069) * _2083))) * _2083;
    float _4306 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
    float _2122 = (isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (_2093 / ((_2097 * _2097) * 3.141590118408203125));
    uint _2136 = _1916 + 9u;
    float _2147 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1956].w)) * _669) * 0.949999988079071044921875);
    float _2148 = _2147 * _2147;
    float _2149 = cbLight._m0[_1956].x + _746;
    float _2150 = cbLight._m0[_1956].y + _747;
    float _2151 = cbLight._m0[_1956].z + _748;
    float _2155 = inversesqrt(dot(vec3(_2149, _2150, _2151), vec3(_2149, _2150, _2151)));
    float _2156 = _2155 * _2149;
    float _2157 = _2155 * _2150;
    float _2158 = _2155 * _2151;
    float _2159 = dot(vec3(_666, _667, _668), vec3(cbLight._m0[_1956].xyz));
    float _4317 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
    float _2162 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
    float _2163 = dot(vec3(_666, _667, _668), vec3(_2156, _2157, _2158));
    float _4328 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
    float _2166 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
    float _2167 = dot(vec3(cbLight._m0[_1956].xyz), vec3(_2156, _2157, _2158));
    float _4339 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
    float _2171 = _2148 * _2148;
    float _2175 = ((_2166 * _2166) * (_2171 + (-1.0))) + 1.0;
    float _2184 = (exp2(log2(1.0 - (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2185 = 1.0 - _2148;
    float _2195 = (0.5 / (((_2084 * ((_2162 * _2185) + _2148)) + 9.9999999392252902907785028219223e-09) + (((_2084 * _2185) + _2148) * _2162))) * _2162;
    float _4350 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
    float _2197 = (isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * (_2171 / ((_2175 * _2175) * 3.141590118408203125));
    float _2207 = (((_2184 * cbLight._m0[_2136].x) * _2197) * _1939) + ((((cbLight._m0[_2055].x * _1908) * _2108) * _2122) * _1952);
    float _2208 = (((_2184 * cbLight._m0[_2136].y) * _2197) * _1939) + ((((cbLight._m0[_2055].y * _1909) * _2108) * _2122) * _1952);
    float _2209 = (((_2184 * cbLight._m0[_2136].z) * _2197) * _1939) + ((((cbLight._m0[_2055].z * _1910) * _2108) * _2122) * _1952);
    float _2271;
    float _2273;
    float _2275;
    if (_1992)
    {
        _2271 = _2207;
        _2273 = _2208;
        _2275 = _2209;
    }
    else
    {
        uint _2277 = _1916 + 2u;
        uint _2281 = _1916 + 10u;
        float _2295 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2277].w)) * _669) * 0.949999988079071044921875);
        float _2296 = _2295 * _2295;
        float _2297 = cbLight._m0[_2277].x + _746;
        float _2298 = cbLight._m0[_2277].y + _747;
        float _2299 = cbLight._m0[_2277].z + _748;
        float _2303 = inversesqrt(dot(vec3(_2297, _2298, _2299), vec3(_2297, _2298, _2299)));
        float _2304 = _2303 * _2297;
        float _2305 = _2303 * _2298;
        float _2306 = _2303 * _2299;
        float _2307 = dot(vec3(_666, _667, _668), vec3(cbLight._m0[_2277].xyz));
        float _4361 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
        float _2310 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _2311 = dot(vec3(_666, _667, _668), vec3(_2304, _2305, _2306));
        float _4372 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
        float _2314 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
        float _2315 = dot(vec3(cbLight._m0[_2277].xyz), vec3(_2304, _2305, _2306));
        float _4383 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
        float _2319 = _2296 * _2296;
        float _2323 = ((_2314 * _2314) * (_2319 + (-1.0))) + 1.0;
        float _2332 = (exp2(log2(1.0 - (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2333 = 1.0 - _2296;
        float _2343 = (0.5 / (((_2084 * ((_2310 * _2333) + _2296)) + 9.9999999392252902907785028219223e-09) + (((_2084 * _2333) + _2296) * _2310))) * _2310;
        float _4394 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
        float _2345 = (isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0))) * (_2319 / ((_2323 * _2323) * 3.141590118408203125));
        float _2346 = isnan(1.0) ? _1931 : (isnan(_1931) ? 1.0 : min(_1931, 1.0));
        _2271 = (((_2332 * cbLight._m0[_2281].x) * _2345) * _2346) + _2207;
        _2273 = (((_2332 * cbLight._m0[_2281].y) * _2345) * _2346) + _2208;
        _2275 = (((_2332 * cbLight._m0[_2281].z) * _2345) * _2346) + _2209;
    }
    float _2381;
    float _2383;
    float _2385;
    if (_2010)
    {
        _2381 = _2271;
        _2383 = _2273;
        _2385 = _2275;
    }
    else
    {
        uint _2392 = _1916 + 3u;
        uint _2396 = _1916 + 11u;
        float _2410 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2392].w)) * _669) * 0.949999988079071044921875);
        float _2411 = _2410 * _2410;
        float _2412 = cbLight._m0[_2392].x + _746;
        float _2413 = cbLight._m0[_2392].y + _747;
        float _2414 = cbLight._m0[_2392].z + _748;
        float _2418 = inversesqrt(dot(vec3(_2412, _2413, _2414), vec3(_2412, _2413, _2414)));
        float _2419 = _2418 * _2412;
        float _2420 = _2418 * _2413;
        float _2421 = _2418 * _2414;
        float _2422 = dot(vec3(_666, _667, _668), vec3(cbLight._m0[_2392].xyz));
        float _4410 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
        float _2425 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
        float _2426 = dot(vec3(_666, _667, _668), vec3(_2419, _2420, _2421));
        float _4421 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
        float _2429 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
        float _2430 = dot(vec3(cbLight._m0[_2392].xyz), vec3(_2419, _2420, _2421));
        float _4432 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
        float _2434 = _2411 * _2411;
        float _2438 = ((_2429 * _2429) * (_2434 + (-1.0))) + 1.0;
        float _2447 = (exp2(log2(1.0 - (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2448 = 1.0 - _2411;
        float _2458 = (0.5 / (((_2084 * ((_2425 * _2448) + _2411)) + 9.9999999392252902907785028219223e-09) + (((_2084 * _2448) + _2411) * _2425))) * _2425;
        float _4443 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
        float _2460 = (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * (_2434 / ((_2438 * _2438) * 3.141590118408203125));
        float _2461 = isnan(1.0) ? _1932 : (isnan(_1932) ? 1.0 : min(_1932, 1.0));
        _2381 = (((_2447 * cbLight._m0[_2396].x) * _2460) * _2461) + _2271;
        _2383 = (((_2447 * cbLight._m0[_2396].y) * _2460) * _2461) + _2273;
        _2385 = (((_2447 * cbLight._m0[_2396].z) * _2460) * _2461) + _2275;
    }
    float _2596;
    float _2598;
    float _2600;
    float _2602;
    float _2604;
    float _2606;
    if (_1914.y == 0u)
    {
        float _2536 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2537 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2536;
        float _2538 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2536;
        float _2539 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2536;
        uvec4 _2551 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2552 = _2551.x;
        uint _2563 = uint((float(_2551.y) * floor(float(uint(cbSceneParam._m0[85u].y * _768) / _2552))) + floor(float(uint(cbSceneParam._m0[85u].x * _767) / _2552)));
        float _2573 = (log2(_2539 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2574 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
        uint _2577 = uint(isnan(14.0) ? _2574 : (isnan(_2574) ? 14.0 : min(_2574, 14.0)));
        uvec4 _2582 = texelFetch(g_lightClusterGridBuffer, int(((_2577 << 2u) + (_2563 << 6u)) >> 2u));
        uint _2583 = _2582.x;
        uint _2584 = _2551.z;
        float _2713;
        float _2715;
        float _2717;
        float _2719;
        float _2721;
        float _2723;
        if (((((1u << ((_2584 >> 4u) & 15u)) + 4294967295u) & _2583) == 0u) || ((_2584 & 240u) == 0u))
        {
            _2713 = 0.0;
            _2715 = 0.0;
            _2717 = 0.0;
            _2719 = 0.0;
            _2721 = 0.0;
            _2723 = 0.0;
        }
        else
        {
            float _2714;
            float _2716;
            float _2718;
            float _2720;
            float _2722;
            float _2724;
            float _2874 = 0.0;
            float _2875 = 0.0;
            float _2876 = 0.0;
            float _2877 = 0.0;
            float _2878 = 0.0;
            float _2879 = 0.0;
            uint _2880 = 0u;
            uint _2889;
            bool _2890;
            for (;;)
            {
                _2889 = texelFetch(g_lightClassification, int((((_2577 << 5u) + (_2563 << 9u)) + (_2880 << 2u)) >> 2u)).x;
                _2890 = _2889 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2890)
                {
                    frontier_phi_66_pred = _2874;
                    frontier_phi_66_pred_1 = _2879;
                    frontier_phi_66_pred_2 = _2878;
                    frontier_phi_66_pred_3 = _2877;
                    frontier_phi_66_pred_4 = _2876;
                    frontier_phi_66_pred_5 = _2875;
                }
                else
                {
                    float _3019;
                    float _3020;
                    float _3021;
                    float _3022;
                    float _3023;
                    float _3024;
                    uint _3025;
                    _3019 = _2874;
                    _3020 = _2875;
                    _3021 = _2876;
                    _3022 = _2877;
                    _3023 = _2878;
                    _3024 = _2879;
                    _3025 = _2889;
                    float _2946;
                    float _2947;
                    float _2948;
                    float _2949;
                    float _2950;
                    float _2951;
                    for (;;)
                    {
                        uint _3029 = uint(findLSB(_3025)) + (_2880 << 5u);
                        uint _3026 = (_3025 + 4294967295u) & _3025;
                        uint _3031 = _3029 * 48u;
                        vec4 _3045 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3031)).x, texelFetch(g_PointLightRenderingBuffer, int(_3031 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3031 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3031 + 3u)).x));
                        uint _3051 = (_3029 * 48u) + 4u;
                        vec4 _3064 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3051)).x, texelFetch(g_PointLightRenderingBuffer, int(_3051 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3051 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3051 + 3u)).x));
                        uint _3070 = (_3029 * 48u) + 8u;
                        vec3 _3081 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3070)).x, texelFetch(g_PointLightRenderingBuffer, int(_3070 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3070 + 2u)).x));
                        float _3085 = _3045.x - _2537;
                        float _3086 = _3045.y - _2538;
                        float _3087 = _3045.z - _2539;
                        float _3088 = dot(vec3(_3085, _3086, _3087), vec3(_3085, _3086, _3087));
                        float _3091 = inversesqrt(_3088);
                        float _3092 = _3091 * _3085;
                        float _3093 = _3091 * _3086;
                        float _3094 = _3091 * _3087;
                        float _3095 = dot(vec3(_787, _790, _793), vec3(_3092, _3093, _3094));
                        float _3100 = 1.0 - (_3088 * _3045.w);
                        float _4469 = isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : max(_3100, 0.0));
                        float _3101 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
                        float _3102 = sqrt(_3088) * _3064.w;
                        float _3105 = 1.39999997615814208984375 / (_3102 + 1.39999997615814208984375);
                        float _3106 = _3105 * _3105;
                        float _3109 = ((1.0 - _3106) * _3095) + _3106;
                        float _3112 = _3102 * _3102;
                        float _3116 = ((isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0))) * _3101) / ((_3112 * 0.699999988079071044921875) + 1.0);
                        float _3120 = (-0.0) - _2537;
                        float _3121 = (-0.0) - _2538;
                        float _3122 = (-0.0) - _2539;
                        float _3126 = inversesqrt(dot(vec3(_3120, _3121, _3122), vec3(_3120, _3121, _3122)));
                        float _3127 = _3126 * _3120;
                        float _3128 = _3126 * _3121;
                        float _3129 = _3126 * _3122;
                        float _3137 = exp2(log2(1.0 / ((_3112 * 3.5) + 5.0)) * 0.25);
                        float _3138 = 1.0 - _847;
                        float _3145 = sqrt(1.0 - ((1.0 - (_3138 * _3138)) * (1.0 - (_3137 * _3137))));
                        float _3146 = _3145 * _3145;
                        float _3147 = _3146 * _3146;
                        float _3148 = _3127 + _3092;
                        float _3149 = _3128 + _3093;
                        float _3150 = _3129 + _3094;
                        float _3154 = inversesqrt(dot(vec3(_3148, _3149, _3150), vec3(_3148, _3149, _3150)));
                        float _3158 = dot(vec3(_787, _790, _793), vec3(_3127, _3128, _3129));
                        float _4485 = isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : max(_3158, 0.0));
                        float _3161 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
                        float _3162 = dot(vec3(_787, _790, _793), vec3(_3154 * _3148, _3154 * _3149, _3154 * _3150));
                        float _4496 = isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : max(_3162, 0.0));
                        float _3165 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
                        float _3169 = ((_3165 * _3165) * (_3147 + (-1.0))) + 1.0;
                        float _3170 = _3105 * _3146;
                        float _3171 = _3170 * _3170;
                        float _3174 = ((1.0 - _3171) * _3095) + _3171;
                        float _4507 = isnan(0.0) ? _3174 : (isnan(_3174) ? 0.0 : max(_3174, 0.0));
                        float _3175 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
                        float _3176 = 1.0 - _3146;
                        float _3186 = (0.5 / (((_3175 * ((_3161 * _3176) + _3146)) + 9.9999999392252902907785028219223e-09) + (((_3175 * _3176) + _3146) * _3161))) * _3175;
                        float _4518 = isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0));
                        float _3197 = (((_3147 * 3.1415927410125732421875) * (isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0)))) / ((_3169 * _3169) * ((_3112 * 2.1991131305694580078125) + 3.141590118408203125))) * _3101;
                        _2949 = (_3116 * _3064.x) + _3022;
                        _2950 = (_3116 * _3064.y) + _3023;
                        _2951 = (_3116 * _3064.z) + _3024;
                        _2946 = (_3197 * _3081.x) + _3019;
                        _2947 = (_3197 * _3081.y) + _3020;
                        _2948 = (_3197 * _3081.z) + _3021;
                        if (_3026 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3019 = _2946;
                            _3020 = _2947;
                            _3021 = _2948;
                            _3022 = _2949;
                            _3023 = _2950;
                            _3024 = _2951;
                            _3025 = _3026;
                        }
                    }
                    frontier_phi_66_pred = _2946;
                    frontier_phi_66_pred_1 = _2951;
                    frontier_phi_66_pred_2 = _2950;
                    frontier_phi_66_pred_3 = _2949;
                    frontier_phi_66_pred_4 = _2948;
                    frontier_phi_66_pred_5 = _2947;
                }
                _2714 = frontier_phi_66_pred;
                _2724 = frontier_phi_66_pred_1;
                _2722 = frontier_phi_66_pred_2;
                _2720 = frontier_phi_66_pred_3;
                _2718 = frontier_phi_66_pred_4;
                _2716 = frontier_phi_66_pred_5;
                uint _2881 = _2880 + 1u;
                if (_2881 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2874 = _2714;
                    _2875 = _2716;
                    _2876 = _2718;
                    _2877 = _2720;
                    _2878 = _2722;
                    _2879 = _2724;
                    _2880 = _2881;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2713 = _2714;
            _2715 = _2716;
            _2717 = _2718;
            _2719 = _2720;
            _2721 = _2722;
            _2723 = _2724;
        }
        uvec4 _2727 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2728 = _2727.z;
        uint _2730 = (_2728 >> 8u) & 15u;
        float _2842;
        float _2844;
        float _2846;
        float _2848;
        float _2850;
        float _2852;
        if (((4294967295u << _2730) & _2583) == 0u)
        {
            _2842 = _2713;
            _2844 = _2715;
            _2846 = _2717;
            _2848 = _2719;
            _2850 = _2721;
            _2852 = _2723;
        }
        else
        {
            float _2867 = inversesqrt(dot(vec3(_2537, _2538, _2539), vec3(_2537, _2538, _2539)));
            float _2868 = _2867 * _2537;
            float _2869 = _2867 * _2538;
            float _2870 = _2867 * _2539;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2730 < ((_2728 >> 12u) & 15u))
            {
                float _2843;
                float _2845;
                float _2847;
                float _2849;
                float _2851;
                float _2853;
                float _3002 = _2713;
                float _3003 = _2715;
                float _3004 = _2717;
                float _3005 = _2719;
                float _3006 = _2721;
                float _3007 = _2723;
                uint _3008 = _2730;
                uint _3017;
                bool _3018;
                for (;;)
                {
                    _3017 = texelFetch(g_lightClassification, int((((_2577 << 5u) + (_2563 << 9u)) + (_3008 << 2u)) >> 2u)).x;
                    _3018 = _3017 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3018)
                    {
                        frontier_phi_77_pred = _3007;
                        frontier_phi_77_pred_1 = _3006;
                        frontier_phi_77_pred_2 = _3005;
                        frontier_phi_77_pred_3 = _3004;
                        frontier_phi_77_pred_4 = _3003;
                        frontier_phi_77_pred_5 = _3002;
                    }
                    else
                    {
                        float _3211;
                        float _3212;
                        float _3213;
                        float _3214;
                        float _3215;
                        float _3216;
                        float _3505;
                        float _3506;
                        float _3507;
                        float _3508;
                        float _3509;
                        float _3510;
                        float _3224 = _3002;
                        float _3225 = _3003;
                        float _3226 = _3004;
                        float _3227 = _3005;
                        float _3228 = _3006;
                        float _3229 = _3007;
                        uint _3230 = _3017;
                        uint _3231;
                        vec4 _3256;
                        float _3257;
                        vec4 _3272;
                        vec3 _3284;
                        vec4 _3299;
                        vec4 _3314;
                        float _3361;
                        bool _3362;
                        for (;;)
                        {
                            uint _3241 = ((_3008 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3230));
                            _3231 = (_3230 + 4294967295u) & _3230;
                            uint _3243 = _3241 * 40u;
                            _3256 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3243)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 3u)).x));
                            _3257 = _3256.w;
                            uint _3259 = (_3241 * 40u) + 4u;
                            _3272 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3259)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 3u)).x));
                            uint _3274 = (_3241 * 40u) + 8u;
                            _3284 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3274)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 2u)).x));
                            uint _3286 = (_3241 * 40u) + 16u;
                            _3299 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3286)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 3u)).x));
                            uint _3301 = (_3241 * 40u) + 20u;
                            _3314 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3301)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 3u)).x));
                            uint _3317 = (_3241 * 40u) + 24u;
                            vec4 _3330 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3317)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 3u)).x));
                            uint _3336 = (_3241 * 40u) + 28u;
                            vec4 _3349 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3336)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 3u)).x));
                            _3361 = fma(_2539, _3349.z, fma(_2538, _3349.y, _3349.x * _2537)) + _3349.w;
                            _3362 = !((fma(_2539, _3330.z, fma(_2538, _3330.y, _3330.x * _2537)) + _3330.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3362)
                            {
                                float _3389 = _3256.x - _2537;
                                float _3390 = _3256.y - _2538;
                                float _3391 = _3256.z - _2539;
                                float _3392 = dot(vec3(_3389, _3390, _3391), vec3(_3389, _3390, _3391));
                                float _3395 = inversesqrt(_3392);
                                float _3396 = _3395 * _3389;
                                float _3397 = _3395 * _3390;
                                float _3398 = _3395 * _3391;
                                float _3402 = 1.0 - (_3392 / (_3257 * _3257));
                                float _4529 = isnan(0.0) ? _3402 : (isnan(_3402) ? 0.0 : max(_3402, 0.0));
                                float _3403 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
                                float _3407 = sqrt(_3392) * _3272.w;
                                float _3409 = 1.39999997615814208984375 / (_3407 + 1.39999997615814208984375);
                                float _3410 = _3409 * _3409;
                                float _3413 = ((1.0 - _3410) * dot(vec3(_3396, _3397, _3398), vec3(_787, _790, _793))) + _3410;
                                float _3416 = _3407 * _3407;
                                float _3420 = (fma(_2539, _3299.z, fma(_2538, _3299.y, _3299.x * _2537)) + _3299.w) / _3361;
                                float _3421 = (fma(_2539, _3314.z, fma(_2538, _3314.y, _3314.x * _2537)) + _3314.w) / _3361;
                                float _3425 = 1.0 - dot(vec2(_3420, _3421), vec2(_3420, _3421));
                                float _4545 = isnan(0.0) ? _3425 : (isnan(_3425) ? 0.0 : max(_3425, 0.0));
                                float _3426 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
                                float _3427 = _3426 * (((isnan(0.0) ? _3413 : (isnan(_3413) ? 0.0 : max(_3413, 0.0))) * _3403) / ((_3416 * 0.699999988079071044921875) + 1.0));
                                float _3439 = exp2(log2(1.0 / ((_3416 * 3.5) + 5.0)) * 0.25);
                                float _3440 = 1.0 - _847;
                                float _3447 = sqrt(1.0 - ((1.0 - (_3440 * _3440)) * (1.0 - (_3439 * _3439))));
                                float _3448 = _3447 * _3447;
                                float _3449 = _3448 * _3448;
                                float _3450 = _3396 - _2868;
                                float _3451 = _3397 - _2869;
                                float _3452 = _3398 - _2870;
                                float _3456 = inversesqrt(dot(vec3(_3450, _3451, _3452), vec3(_3450, _3451, _3452)));
                                float _3460 = dot(vec3(_787, _790, _793), vec3((-0.0) - _2868, (-0.0) - _2869, (-0.0) - _2870));
                                float _4556 = isnan(0.0) ? _3460 : (isnan(_3460) ? 0.0 : max(_3460, 0.0));
                                float _3463 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
                                float _3464 = dot(vec3(_787, _790, _793), vec3(_3456 * _3450, _3456 * _3451, _3456 * _3452));
                                float _4567 = isnan(0.0) ? _3464 : (isnan(_3464) ? 0.0 : max(_3464, 0.0));
                                float _3467 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
                                float _3471 = ((_3467 * _3467) * (_3449 + (-1.0))) + 1.0;
                                float _3472 = _3409 * _3448;
                                float _3473 = _3472 * _3472;
                                float _3479 = ((1.0 - _3473) * dot(vec3(_787, _790, _793), vec3(_3396, _3397, _3398))) + _3473;
                                float _4578 = isnan(0.0) ? _3479 : (isnan(_3479) ? 0.0 : max(_3479, 0.0));
                                float _3480 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
                                float _3481 = 1.0 - _3448;
                                float _3491 = (0.5 / (((_3480 * ((_3463 * _3481) + _3448)) + 9.9999999392252902907785028219223e-09) + (((_3480 * _3481) + _3448) * _3463))) * _3480;
                                float _4589 = isnan(0.0) ? _3491 : (isnan(_3491) ? 0.0 : max(_3491, 0.0));
                                float _3501 = (_3426 * _3403) * (((_3449 * 3.1415927410125732421875) * (isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0)))) / ((_3471 * _3471) * ((_3416 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3427 * _3272.y;
                                frontier_phi_83_pred_1 = _3427 * _3272.x;
                                frontier_phi_83_pred_2 = _3501 * _3284.z;
                                frontier_phi_83_pred_3 = _3501 * _3284.y;
                                frontier_phi_83_pred_4 = _3501 * _3284.x;
                                frontier_phi_83_pred_5 = _3427 * _3272.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3509 = frontier_phi_83_pred;
                            _3508 = frontier_phi_83_pred_1;
                            _3507 = frontier_phi_83_pred_2;
                            _3506 = frontier_phi_83_pred_3;
                            _3505 = frontier_phi_83_pred_4;
                            _3510 = frontier_phi_83_pred_5;
                            _3214 = _3508 + _3227;
                            _3215 = _3509 + _3228;
                            _3216 = _3510 + _3229;
                            _3211 = _3505 + _3224;
                            _3212 = _3506 + _3225;
                            _3213 = _3507 + _3226;
                            if (_3231 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3224 = _3211;
                                _3225 = _3212;
                                _3226 = _3213;
                                _3227 = _3214;
                                _3228 = _3215;
                                _3229 = _3216;
                                _3230 = _3231;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3216;
                        frontier_phi_77_pred_1 = _3215;
                        frontier_phi_77_pred_2 = _3214;
                        frontier_phi_77_pred_3 = _3213;
                        frontier_phi_77_pred_4 = _3212;
                        frontier_phi_77_pred_5 = _3211;
                    }
                    _2853 = frontier_phi_77_pred;
                    _2851 = frontier_phi_77_pred_1;
                    _2849 = frontier_phi_77_pred_2;
                    _2847 = frontier_phi_77_pred_3;
                    _2845 = frontier_phi_77_pred_4;
                    _2843 = frontier_phi_77_pred_5;
                    uint _3009 = _3008 + 1u;
                    if (_3009 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3002 = _2843;
                        _3003 = _2845;
                        _3004 = _2847;
                        _3005 = _2849;
                        _3006 = _2851;
                        _3007 = _2853;
                        _3008 = _3009;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2847;
                frontier_phi_58_59_ladder_1 = _2853;
                frontier_phi_58_59_ladder_2 = _2851;
                frontier_phi_58_59_ladder_3 = _2849;
                frontier_phi_58_59_ladder_4 = _2845;
                frontier_phi_58_59_ladder_5 = _2843;
            }
            else
            {
                frontier_phi_58_59_ladder = _2717;
                frontier_phi_58_59_ladder_1 = _2723;
                frontier_phi_58_59_ladder_2 = _2721;
                frontier_phi_58_59_ladder_3 = _2719;
                frontier_phi_58_59_ladder_4 = _2715;
                frontier_phi_58_59_ladder_5 = _2713;
            }
            _2842 = frontier_phi_58_59_ladder_5;
            _2844 = frontier_phi_58_59_ladder_4;
            _2846 = frontier_phi_58_59_ladder;
            _2848 = frontier_phi_58_59_ladder_3;
            _2850 = frontier_phi_58_59_ladder_2;
            _2852 = frontier_phi_58_59_ladder_1;
        }
        float _2857 = isnan(1.0) ? _831 : (isnan(_831) ? 1.0 : min(_831, 1.0));
        _2596 = (_2857 * _2848) + _2048;
        _2598 = (_2857 * _2850) + _2050;
        _2600 = (_2857 * _2852) + _2052;
        _2602 = ((_2842 * 0.039999999105930328369140625) * _2857) + _2381;
        _2604 = ((_2844 * 0.039999999105930328369140625) * _2857) + _2383;
        _2606 = ((_2846 * 0.039999999105930328369140625) * _2857) + _2385;
    }
    else
    {
        _2596 = _2048;
        _2598 = _2050;
        _2600 = _2052;
        _2602 = _2381;
        _2604 = _2383;
        _2606 = _2385;
    }
    uint _2612 = _807 + uint(cbMatDynParam._m0[0u].w);
    float _2618 = ((((((_576.x - _573) * _509) + _573) * cbMtdParam._m0[13u].x) + ((((_530.x - _527) * _509) + _527) * cbMtdParam._m0[11u].x)) * _362) * cbInstanceData._m0[_2612].x;
    float _2619 = ((((((_576.y - _574) * _509) + _574) * cbMtdParam._m0[13u].y) + ((((_530.y - _528) * _509) + _528) * cbMtdParam._m0[11u].y)) * _362) * cbInstanceData._m0[_2612].y;
    float _2620 = ((((((_576.z - _575) * _509) + _575) * cbMtdParam._m0[13u].z) + ((((_530.z - _529) * _509) + _529) * cbMtdParam._m0[11u].z)) * _362) * cbInstanceData._m0[_2612].z;
    float _4605 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _4616 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _4627 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _2637 = (((isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0))) * (_2596 + ((isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0))) * _831))) + ((_2602 + ((isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0))) * _1668)) * cbPerFrame._m0[3u].x)) + _2618;
    float _2639 = (_2619 + ((_2604 + ((isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0))) * _1668)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0))) * (_2598 + ((isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0))) * _831)));
    float _2641 = (_2620 + ((_2606 + ((isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0))) * _1668)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0))) * (_2600 + ((isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0))) * _831)));
    float _2642 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
    float _2643 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
    float _2644 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
    float _2650 = cbMtdParam._m0[2u].x * _2618;
    float _2651 = cbMtdParam._m0[2u].y * _2619;
    float _2652 = cbMtdParam._m0[2u].z * _2620;
    float _4653 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2654 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
    uint _2655 = _806 + 6u;
    float _2663 = _767 / cbSceneParam._m0[86u].x;
    float _2664 = _768 / cbSceneParam._m0[86u].y;
    vec4 _2678 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2663, _2664, (log2((isnan(cbSceneParam._m0[77u].w) ? _688 : (isnan(_688) ? cbSceneParam._m0[77u].w : min(_688, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2680 = _2678.x;
    float _2681 = _2678.y;
    float _2682 = _2678.z;
    float _2683 = _2678.w;
    float _2775;
    float _2777;
    float _2779;
    float _2781;
    if (_688 > cbSceneParam._m0[78u].w)
    {
        float _2738 = isnan(_688) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _688 : min(cbSceneParam._m0[80u].w, _688));
        float _2739 = _2738 / _688;
        float _2750 = _2739 * _739;
        float _2751 = _740 * _2739;
        float _2752 = (-0.0) - _2751;
        float _2753 = _2739 * _741;
        float _2755 = (cbSceneParam._m0[77u].w * _2752) / _2738;
        float _2756 = _2755 + cbSceneParam._m0[79u].w;
        float _2757 = cbSceneParam._m0[79u].w - _2751;
        float _2763 = sqrt(((_2750 * _2750) + (_2751 * _2751)) + (_2753 * _2753));
        float _2766 = (1.0 - (cbSceneParam._m0[77u].w / _2738)) * _2763;
        float _2771 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2773 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2959;
        if (abs((_2752 - _2755) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2959 = ((((_2756 > 0.0) ? exp2(_2771 * _2756) : (2.0 - exp2(_2773 * _2756))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2766;
        }
        else
        {
            float _2903 = 1.0 / cbSceneParam._m0[80u].x;
            float _2904 = isnan(_2757) ? _2756 : (isnan(_2756) ? _2757 : max(_2756, _2757));
            float _2905 = isnan(_2757) ? _2756 : (isnan(_2756) ? _2757 : min(_2756, _2757));
            float _2914 = isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : min(_2904, 0.0));
            float _2915 = isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : min(_2905, 0.0));
            _2959 = ((abs(_2763 / _2752) * cbSceneParam._m0[80u].y) * ((((_2914 - _2915) * 2.0) - ((exp2(_2771 * (isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : max(_2904, 0.0)))) - exp2(_2771 * (isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : max(_2905, 0.0))))) * _2903)) - ((exp2(_2773 * _2914) - exp2(_2773 * _2915)) * _2903))) + (_2766 * cbSceneParam._m0[80u].z);
        }
        vec4 _2961 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2663, _2664, 1.0), 0.0);
        float _2970 = exp2((_2959 * (-1.44269502162933349609375)) * (1.0 - _2961.w));
        float _2971 = log2(_2970);
        float _2987 = log2(_2683);
        _2775 = (exp2(_2987 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2971 * cbSceneParam._m0[78u].x)) * _2961.x) / cbSceneParam._m0[78u].x)) + _2680;
        _2777 = (exp2(_2987 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2971 * cbSceneParam._m0[78u].y)) * _2961.y) / cbSceneParam._m0[78u].y)) + _2681;
        _2779 = (exp2(_2987 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2971 * cbSceneParam._m0[78u].z)) * _2961.z) / cbSceneParam._m0[78u].z)) + _2682;
        _2781 = _2970 * _2683;
    }
    else
    {
        _2775 = _2680;
        _2777 = _2681;
        _2779 = _2682;
        _2781 = _2683;
    }
    bool _2997;
    vec4 _2791;
    vec4 _2813;
    float _2815;
    float _2819;
    float _2820;
    float _2821;
    float _2824;
    float _2827;
    float _2830;
    float _2831;
    bool _2841;
    for (;;)
    {
        _2791 = cbMatDynParam._m0[0u];
        float _2793 = roundEven(_2791.y);
        bool _2794 = _2793 == 3.0;
        float _2795 = log2(_2781);
        float _2799 = exp2(_2795 * cbSceneParam._m0[78u].x);
        float _2800 = exp2(_2795 * cbSceneParam._m0[78u].y);
        float _2801 = exp2(_2795 * cbSceneParam._m0[78u].z);
        float _2802 = _2799 * _2642;
        float _2803 = _2800 * _2643;
        float _2804 = _2801 * _2644;
        float _2811 = _755 + (-0.5);
        _2813 = cbMtdParam._m0[1u];
        _2815 = _2813.y * _2811;
        float _2818 = (_2793 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2819 = _2818 * (_2794 ? _2802 : (_2802 + (cbSceneParam._m0[72u].w * _2775)));
        _2820 = _2818 * (_2794 ? _2803 : (_2803 + (cbSceneParam._m0[72u].w * _2777)));
        _2821 = _2818 * (_2794 ? _2804 : (_2804 + (cbSceneParam._m0[72u].w * _2779)));
        _2824 = ((_2650 * _2654) * _2799) * _2818;
        _2827 = ((_2651 * _2654) * _2800) * _2818;
        _2830 = ((_2652 * _2654) * _2801) * _2818;
        _2831 = _2811 * 0.999000012874603271484375;
        _2841 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2841)
        {
            if ((cbInstanceData._m0[_806 + 7u].x + _2831) < 0.5)
            {
                _2997 = true;
                break;
            }
        }
        uint _2938 = _807 + uint(_2791.w);
        if ((cbInstanceData._m0[_2938].w < 1.0) && ((cbInstanceData._m0[_2938].w + _2831) < 0.5))
        {
            _2997 = true;
            break;
        }
        if ((_2815 + 1.0) < _2813.x)
        {
            _2997 = true;
            break;
        }
        _2997 = false;
        break;
    }
    float _3202;
    if (_2997)
    {
        discard_state = true;
        _3202 = 0.0;
    }
    else
    {
        _3202 = cbInstanceData._m0[_2655].w;
    }
    SV_Target.x = _2819;
    SV_Target.y = _2820;
    SV_Target.z = _2821;
    SV_Target.w = _3202;
    SV_Target_1.x = _2824;
    SV_Target_1.y = _2827;
    SV_Target_1.z = _2830;
    SV_Target_1.w = cbInstanceData._m0[_2655].w;
    discard_exit();
}


