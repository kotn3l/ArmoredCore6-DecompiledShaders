#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1338;
float _3757;
float _3758;
float _3759;
float _3760;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _259 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _265 = _259.x * cbMtdParam._m0[9u].x;
    float _266 = _259.y * cbMtdParam._m0[9u].y;
    float _267 = _259.z * cbMtdParam._m0[9u].z;
    vec4 _305 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[5u].w));
    float _321 = (TEXCOORD_3.x - ((cbMtdParam._m0[14u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[14u].y + 1.0);
    float _3769 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _322 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
    float _329 = (((_305.x * cbMtdParam._m0[10u].x) - _265) * _322) + _265;
    float _330 = (((_305.y * cbMtdParam._m0[10u].y) - _266) * _322) + _266;
    float _331 = (((_305.z * cbMtdParam._m0[10u].z) - _267) * _322) + _267;
    vec4 _348 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _367 = TEXCOORD_9.x - ((cbMtdParam._m0[16u].y * (1.0 - TEXCOORD_9.x)) * (_348.x + 0.00999999977648258209228515625));
    float _369 = _367 * (cbMtdParam._m0[16u].z + 1.0);
    float _3780 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _370 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
    float _378 = ((((cbMtdParam._m0[12u].x - _329) * TEXCOORD_9.x) * cbMtdParam._m0[16u].x) * _370) + _329;
    float _379 = ((((cbMtdParam._m0[12u].y - _330) * TEXCOORD_9.y) * cbMtdParam._m0[16u].x) * _370) + _330;
    float _380 = (((cbMtdParam._m0[16u].x * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _331)) * _370) + _331;
    vec4 _393 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[6u].w));
    float _395 = _393.x;
    float _413 = ((texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[7u].w)).x - _395) * _322) + _395;
    vec4 _426 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[4u].w));
    float _434 = (_426.x * 2.0) + (-1.0);
    float _436 = (_426.y * 2.0) + (-1.0);
    float _437 = dot(vec2(_434, _436), vec2(_434, _436));
    float _3791 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    vec4 _454 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _458 = _454.z;
    float _461 = (_454.x * 2.0) + (-1.0);
    float _462 = (_454.y * 2.0) + (-1.0);
    float _463 = dot(vec2(_461, _462), vec2(_461, _462));
    float _3802 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _468 = sqrt(1.0 - (isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0))));
    float _471 = (_322 * (_426.z - _458)) + _458;
    float _477 = _367 * (cbMtdParam._m0[16u].y + 1.0);
    float _3813 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _481 = ((cbMtdParam._m0[15u].y - _471) * (isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0)))) + _471;
    float _494 = (cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _495 = (cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _521 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * ((cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * ((cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[10u].w));
    float _526 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[15u].w;
    float _533 = ((_521.y * 0.5) + (-0.25)) * cbMtdParam._m0[15u].z;
    float _535 = (-0.0) - (cbMtdParam._m0[15u].z * ((_521.x * 0.5) + (-0.25)));
    float _537 = fract(_526);
    float _539 = fract(_526 + 0.5);
    float _540 = _537 * _535;
    float _541 = _533 * _537;
    float _544 = _539 * _535;
    float _545 = _533 * _539;
    float _550 = abs((_537 * 2.0) + (-1.0));
    vec4 _566 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_540 + _494) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_541 + _495) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _568 = _566.x;
    float _569 = _566.y;
    float _570 = _566.z;
    vec4 _571 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_544 + _494) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_545 + _495) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _598 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _599 = (cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _612 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_540 + _598) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_541 + _599) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _614 = _612.x;
    float _615 = _612.y;
    float _616 = _612.z;
    vec4 _617 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_544 + _598) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_545 + _599) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _666 = (TEXCOORD_6.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_6.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_5, SS_WrapLinear), vec2((((cbMtdParam._m0[18u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((cbMtdParam._m0[18u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].x + 1.0);
    float _3824 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _667 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
    float _668 = _667 * (((((_617.x - _614) * _550) + _614) * cbMtdParam._m0[13u].x) + ((((_571.x - _568) * _550) + _568) * cbMtdParam._m0[11u].x));
    float _669 = _667 * (((((_617.y - _615) * _550) + _615) * cbMtdParam._m0[13u].y) + ((((_571.y - _569) * _550) + _569) * cbMtdParam._m0[11u].y));
    float _670 = _667 * (((((_617.z - _616) * _550) + _616) * cbMtdParam._m0[13u].z) + ((((_571.z - _570) * _550) + _570) * cbMtdParam._m0[11u].z));
    vec4 _682 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[9u].w));
    float _684 = _682.x;
    float _697 = (_322 * (_434 - _461)) + _461;
    float _698 = (_322 * (_436 - _462)) + _462;
    float _699 = (_322 * (sqrt(1.0 - (isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0)))) - _468)) + _468;
    vec4 _718 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[16u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, (((cbMtdParam._m0[17u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w));
    float _724 = (_718.x * 2.0) + (-1.0);
    float _725 = (_718.y * 2.0) + (-1.0);
    float _726 = dot(vec2(_724, _725), vec2(_724, _725));
    float _3835 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _742 = (_370 * (((_697 * cbMtdParam._m0[14u].z) - _697) + _724)) + _697;
    float _743 = (_370 * (((_698 * cbMtdParam._m0[14u].z) - _698) + _725)) + _698;
    float _744 = (_370 * (sqrt(1.0 - (isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0)))) - _699)) + _699;
    float _747 = fma(_744, _230 * NORMAL.x, fma(_743, _237 * TANGENT.x, (_223 * _215) * _742));
    float _750 = fma(_744, _230 * NORMAL.y, fma(_743, _237 * TANGENT.y, (_223 * _216) * _742));
    float _753 = fma(_744, _230 * NORMAL.z, fma(_743, _237 * TANGENT.z, (_223 * _217) * _742));
    float _757 = inversesqrt(dot(vec3(_747, _750, _753), vec3(_747, _750, _753)));
    float _758 = _757 * _747;
    float _759 = _757 * _750;
    float _760 = _757 * _753;
    float _3846 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _761 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
    float _3857 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _3868 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _3879 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _3890 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _765 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
    float _781 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _821 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _831 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _821);
    float _832 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _821);
    float _833 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _821);
    float _837 = inversesqrt(dot(vec3(_831, _832, _833), vec3(_831, _832, _833)));
    float _838 = _831 * _837;
    float _839 = _832 * _837;
    float _840 = _833 * _837;
    vec4 _845 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _847 = _845.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1019 = sqrt(((_831 * _831) + (_832 * _832)) + (_833 * _833));
        float _1025 = (cbMatDynParam._m0[5u].x * _1019) + cbMatDynParam._m0[5u].y;
        float _3901 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1026 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _1030 = (cbMatDynParam._m0[5u].z * _1019) + cbMatDynParam._m0[5u].w;
        float _3912 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0))) - _1026)) + _1026) < ((_847 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _858 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _859 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _877 = fma(_760, cbSceneParam._m0[5u].z, fma(_759, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _758));
    float _880 = fma(_760, cbSceneParam._m0[6u].z, fma(_759, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _758));
    float _883 = fma(_760, cbSceneParam._m0[7u].z, fma(_759, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _758));
    uint _896 = uint(roundEven(NORMAL.w)) * 13u;
    uint _897 = _896 + 9u;
    uint _898 = _897 + uint(cbMatDynParam._m0[0u].w);
    float _904 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0)))) * cbInstanceData._m0[_898].x;
    float _905 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0)))) * cbInstanceData._m0[_898].y;
    float _906 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0)))) * cbInstanceData._m0[_898].z;
    float _3923 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _907 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
    float _3934 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _908 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
    float _3945 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _909 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
    float _910 = 1.0 - _765;
    float _911 = _907 * _910;
    float _912 = _908 * _910;
    float _913 = _909 * _910;
    float _918 = (_907 + (-0.039999999105930328369140625)) * _765;
    float _919 = (_908 + (-0.039999999105930328369140625)) * _765;
    float _920 = (_909 + (-0.039999999105930328369140625)) * _765;
    float _921 = _918 + 0.039999999105930328369140625;
    float _923 = _919 + 0.039999999105930328369140625;
    float _924 = _920 + 0.039999999105930328369140625;
    vec4 _933 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _858, cbSceneParam._m0[86u].y * _859));
    float _936 = _933.x * TEXCOORD_3.w;
    float _937 = dot(vec3(_758, _759, _760), vec3(_838, _839, _840));
    float _940 = _937 * 2.0;
    float _944 = (_940 * _758) - _838;
    float _945 = (_940 * _759) - _839;
    float _946 = (_940 * _760) - _840;
    float _950 = abs(dot(vec3(_838, _839, _840), vec3(_758, _759, _760)));
    float _3956 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
    float _952 = sqrt(_761);
    float _965 = exp2((_952 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_952 * 3.0));
    float _971 = (1.0 - _965) * ((_952 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _972 = _965 * _952;
    float _1000 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1004 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1008 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1337;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1063 = fma(_1008, cbModelParam._m0[26u].z, fma(_1004, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1000));
        float _1067 = fma(_1008, cbModelParam._m0[27u].z, fma(_1004, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1000));
        float _1071 = fma(_1008, cbModelParam._m0[28u].z, fma(_1004, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1000));
        float _1095 = _1000 + _758;
        float _1096 = _1004 + _759;
        float _1097 = _1008 + _760;
        float _1107 = fma(_1097, cbModelParam._m0[26u].z, fma(_1096, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1095)) - _1063;
        float _1108 = fma(_1097, cbModelParam._m0[27u].z, fma(_1096, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1095)) - _1067;
        float _1109 = fma(_1097, cbModelParam._m0[28u].z, fma(_1096, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1095)) - _1071;
        float _1113 = inversesqrt(dot(vec3(_1107, _1108, _1109), vec3(_1107, _1108, _1109)));
        float _1126 = ((_1113 * _1107) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1063 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1127 = ((_1113 * _1108) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1067 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1128 = ((_1113 * _1109) / cbModelParam._m0[34u].z) + ((((((_1071 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1131 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1126, _1127, _1128), 0.0);
        vec4 _1138 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1126, _1127, _1128), 0.0);
        vec4 _1145 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1126, _1127, _1128), 0.0);
        vec4 _1152 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1126, _1127, _1128), 0.0);
        float _1165 = exp2((_1131.w + (-0.5)) * 20.0) * 2.0;
        float _1166 = _1165 * (_1131.x + (-0.5));
        float _1167 = _1165 * (_1131.y + (-0.5));
        float _1168 = _1165 * (_1131.z + (-0.5));
        float _1175 = exp2((_1138.w + (-0.5)) * 20.0) * 2.0;
        float _1176 = _1175 * (_1138.x + (-0.5));
        float _1177 = _1175 * (_1138.y + (-0.5));
        float _1178 = _1175 * (_1138.z + (-0.5));
        float _1185 = exp2((_1145.w + (-0.5)) * 20.0) * 2.0;
        float _1186 = _1185 * (_1145.x + (-0.5));
        float _1187 = _1185 * (_1145.y + (-0.5));
        float _1188 = _1185 * (_1145.z + (-0.5));
        float _1195 = exp2((_1152.w + (-0.5)) * 20.0) * 2.0;
        float _1196 = _1195 * (_1152.x + (-0.5));
        float _1197 = _1195 * (_1152.y + (-0.5));
        float _1198 = _1195 * (_1152.z + (-0.5));
        float _1199 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1200 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1201 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1202 = _1166 * 0.5;
        float _1203 = _1176 * 0.5;
        float _1204 = _1186 * 0.5;
        float _1205 = dot(vec3(_1202, _1203, _1204), vec3(_1202, _1203, _1204));
        float _1210 = (_1205 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1205);
        float _1219 = (dot(vec3(_758, _759, _760), vec3(_1210 * _1202, _1210 * _1203, _1210 * _1204)) + 1.0) * 0.5;
        float _3982 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1229 = sqrt(((_1203 * _1203) + (_1202 * _1202)) + (_1204 * _1204)) / (_1199 + 9.9999997473787516355514526367188e-06);
        float _3993 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _1231 = _1230 * 2.0;
        float _1235 = (1.0 - _1230) / (_1230 + 1.0);
        float _4004 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _1245 = ((((1.0 - _1236) * (_1231 + 2.0)) * exp2(log2(isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0))) * (_1231 + 1.0))) + _1236) * _1199;
        float _1246 = _1167 * 0.5;
        float _1247 = _1177 * 0.5;
        float _1248 = _1187 * 0.5;
        float _1249 = dot(vec3(_1246, _1247, _1248), vec3(_1246, _1247, _1248));
        float _1254 = (_1249 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1249);
        float _1262 = (dot(vec3(_758, _759, _760), vec3(_1254 * _1246, _1254 * _1247, _1254 * _1248)) + 1.0) * 0.5;
        float _4015 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1271 = sqrt(((_1247 * _1247) + (_1246 * _1246)) + (_1248 * _1248)) / (_1200 + 9.9999997473787516355514526367188e-06);
        float _4026 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _1273 = _1272 * 2.0;
        float _1277 = (1.0 - _1272) / (_1272 + 1.0);
        float _4037 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1287 = ((((1.0 - _1278) * (_1273 + 2.0)) * exp2(log2(isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * (_1273 + 1.0))) + _1278) * _1200;
        float _1288 = _1168 * 0.5;
        float _1289 = _1178 * 0.5;
        float _1290 = _1188 * 0.5;
        float _1291 = dot(vec3(_1288, _1289, _1290), vec3(_1288, _1289, _1290));
        float _1296 = (_1291 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1291);
        float _1304 = (dot(vec3(_758, _759, _760), vec3(_1296 * _1288, _1296 * _1289, _1296 * _1290)) + 1.0) * 0.5;
        float _4048 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1313 = sqrt(((_1289 * _1289) + (_1288 * _1288)) + (_1290 * _1290)) / (_1201 + 9.9999997473787516355514526367188e-06);
        float _4059 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1315 = _1314 * 2.0;
        float _1319 = (1.0 - _1314) / (_1314 + 1.0);
        float _4070 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1329 = ((((1.0 - _1320) * (_1315 + 2.0)) * exp2(log2(isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * (_1315 + 1.0))) + _1320) * _1201;
        _1337 = _1168;
        _1339 = _1167;
        _1340 = _1166;
        _1341 = _1178;
        _1342 = _1177;
        _1343 = _1176;
        _1344 = _1188;
        _1345 = _1187;
        _1346 = _1186;
        _1347 = _1201;
        _1348 = _1200;
        _1349 = _1199;
        _1350 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0)));
        _1351 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0)));
        _1352 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0)));
    }
    else
    {
        _1337 = _1338;
        _1339 = _1338;
        _1340 = _1338;
        _1341 = _1338;
        _1342 = _1338;
        _1343 = _1338;
        _1344 = _1338;
        _1345 = _1338;
        _1346 = _1338;
        _1347 = _1338;
        _1348 = _1338;
        _1349 = _1338;
        _1350 = 0.0;
        _1351 = 0.0;
        _1352 = 0.0;
    }
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1381 = fma(_1008, cbModelParam._m0[30u].z, fma(_1004, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1000));
        float _1385 = fma(_1008, cbModelParam._m0[31u].z, fma(_1004, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1000));
        float _1389 = fma(_1008, cbModelParam._m0[32u].z, fma(_1004, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1000));
        float _1412 = _1000 + _758;
        float _1413 = _1004 + _759;
        float _1414 = _1008 + _760;
        float _1424 = fma(_1414, cbModelParam._m0[30u].z, fma(_1413, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1412)) - _1381;
        float _1425 = fma(_1414, cbModelParam._m0[31u].z, fma(_1413, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1412)) - _1385;
        float _1426 = fma(_1414, cbModelParam._m0[32u].z, fma(_1413, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1412)) - _1389;
        float _1430 = inversesqrt(dot(vec3(_1424, _1425, _1426), vec3(_1424, _1425, _1426)));
        float _1443 = ((_1430 * _1424) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1381 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1444 = ((_1430 * _1425) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1385 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1445 = ((_1430 * _1426) / cbModelParam._m0[35u].z) + ((((((_1389 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1447 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1443, _1444, _1445), 0.0);
        vec4 _1454 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1443, _1444, _1445), 0.0);
        vec4 _1461 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1443, _1444, _1445), 0.0);
        vec4 _1468 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1443, _1444, _1445), 0.0);
        float _1480 = exp2((_1447.w + (-0.5)) * 20.0) * 2.0;
        float _1481 = _1480 * (_1447.x + (-0.5));
        float _1482 = _1480 * (_1447.y + (-0.5));
        float _1483 = _1480 * (_1447.z + (-0.5));
        float _1490 = exp2((_1454.w + (-0.5)) * 20.0) * 2.0;
        float _1491 = _1490 * (_1454.x + (-0.5));
        float _1492 = _1490 * (_1454.y + (-0.5));
        float _1493 = _1490 * (_1454.z + (-0.5));
        float _1500 = exp2((_1461.w + (-0.5)) * 20.0) * 2.0;
        float _1501 = _1500 * (_1461.x + (-0.5));
        float _1502 = _1500 * (_1461.y + (-0.5));
        float _1503 = _1500 * (_1461.z + (-0.5));
        float _1510 = exp2((_1468.w + (-0.5)) * 20.0) * 2.0;
        float _1511 = _1510 * (_1468.x + (-0.5));
        float _1512 = _1510 * (_1468.y + (-0.5));
        float _1513 = _1510 * (_1468.z + (-0.5));
        float _1514 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1515 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1516 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1517 = _1481 * 0.5;
        float _1518 = _1491 * 0.5;
        float _1519 = _1501 * 0.5;
        float _1520 = dot(vec3(_1517, _1518, _1519), vec3(_1517, _1518, _1519));
        float _1525 = (_1520 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1520);
        float _1533 = (dot(vec3(_758, _759, _760), vec3(_1525 * _1517, _1525 * _1518, _1525 * _1519)) + 1.0) * 0.5;
        float _4111 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1542 = sqrt(((_1518 * _1518) + (_1517 * _1517)) + (_1519 * _1519)) / (_1514 + 9.9999997473787516355514526367188e-06);
        float _4122 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1543 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _1544 = _1543 * 2.0;
        float _1548 = (1.0 - _1543) / (_1543 + 1.0);
        float _4133 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1549 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _1558 = ((((1.0 - _1549) * (_1544 + 2.0)) * exp2(log2(isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * (_1544 + 1.0))) + _1549) * _1514;
        float _1559 = _1482 * 0.5;
        float _1560 = _1492 * 0.5;
        float _1561 = _1502 * 0.5;
        float _1562 = dot(vec3(_1559, _1560, _1561), vec3(_1559, _1560, _1561));
        float _1567 = (_1562 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1562);
        float _1575 = (dot(vec3(_758, _759, _760), vec3(_1567 * _1559, _1567 * _1560, _1567 * _1561)) + 1.0) * 0.5;
        float _4144 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1584 = sqrt(((_1560 * _1560) + (_1559 * _1559)) + (_1561 * _1561)) / (_1515 + 9.9999997473787516355514526367188e-06);
        float _4155 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1585 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1586 = _1585 * 2.0;
        float _1590 = (1.0 - _1585) / (_1585 + 1.0);
        float _4166 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1591 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1600 = ((((1.0 - _1591) * (_1586 + 2.0)) * exp2(log2(isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * (_1586 + 1.0))) + _1591) * _1515;
        float _1601 = _1483 * 0.5;
        float _1602 = _1493 * 0.5;
        float _1603 = _1503 * 0.5;
        float _1604 = dot(vec3(_1601, _1602, _1603), vec3(_1601, _1602, _1603));
        float _1609 = (_1604 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1604);
        float _1617 = (dot(vec3(_758, _759, _760), vec3(_1609 * _1601, _1609 * _1602, _1609 * _1603)) + 1.0) * 0.5;
        float _4177 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1626 = sqrt(((_1602 * _1602) + (_1601 * _1601)) + (_1603 * _1603)) / (_1516 + 9.9999997473787516355514526367188e-06);
        float _4188 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1627 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1628 = _1627 * 2.0;
        float _1632 = (1.0 - _1627) / (_1627 + 1.0);
        float _4199 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1633 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1642 = ((((1.0 - _1633) * (_1628 + 2.0)) * exp2(log2(isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * (_1628 + 1.0))) + _1633) * _1516;
        _1650 = _1483;
        _1651 = _1482;
        _1652 = _1481;
        _1653 = _1493;
        _1654 = _1492;
        _1655 = _1491;
        _1656 = _1503;
        _1657 = _1502;
        _1658 = _1501;
        _1659 = _1516;
        _1660 = _1515;
        _1661 = _1514;
        _1662 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0)));
        _1663 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0)));
        _1664 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0)));
    }
    else
    {
        _1650 = _1338;
        _1651 = _1338;
        _1652 = _1338;
        _1653 = _1338;
        _1654 = _1338;
        _1655 = _1338;
        _1656 = _1338;
        _1657 = _1338;
        _1658 = _1338;
        _1659 = _1338;
        _1660 = _1338;
        _1661 = _1338;
        _1662 = 0.0;
        _1663 = 0.0;
        _1664 = 0.0;
    }
    float _1674 = (cbModelParam._m0[1u].x * (_1662 - _1350)) + _1350;
    float _1675 = (cbModelParam._m0[1u].x * (_1663 - _1351)) + _1351;
    float _1676 = (cbModelParam._m0[1u].x * (_1664 - _1352)) + _1352;
    float _1697 = fma(_1676, cbSceneParam._m0[89u].z, fma(_1675, cbSceneParam._m0[89u].y, _1674 * cbSceneParam._m0[89u].x));
    float _1700 = fma(_1676, cbSceneParam._m0[90u].z, fma(_1675, cbSceneParam._m0[90u].y, _1674 * cbSceneParam._m0[90u].x));
    float _1703 = fma(_1676, cbSceneParam._m0[91u].z, fma(_1675, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1674));
    float _1718 = _944 * 0.5;
    float _1719 = _945 * 0.5;
    float _1720 = _946 * 0.5;
    float _1721 = dot(vec4(_1718, _1719, _1720, 1.0), vec4(_1652, _1655, _1658, _1661));
    float _1724 = dot(vec4(_1718, _1719, _1720, 1.0), vec4(_1651, _1654, _1657, _1660));
    float _1727 = dot(vec4(_1718, _1719, _1720, 1.0), vec4(_1650, _1653, _1656, _1659));
    float _1761;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1734 = dot(vec4(_1718, _1719, _1720, 1.0), vec4(_1337, _1341, _1344, _1347));
        float _1738 = dot(vec4(_1718, _1719, _1720, 1.0), vec4(_1339, _1342, _1345, _1348));
        float _1742 = dot(vec4(_1718, _1719, _1720, 1.0), vec4(_1340, _1343, _1346, _1349));
        float _1749 = dot(vec4(cbModelParam._m0[39u]), vec4(_1718, _1719, _1720, 1.0));
        _1761 = dot(vec3(isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0)), isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0)), isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1749) ? 0.0 : (isnan(0.0) ? _1749 : max(0.0, _1749))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1761 = 1.0;
    }
    float _1772;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1763 = dot(vec4(cbModelParam._m0[40u]), vec4(_1718, _1719, _1720, 1.0));
        _1772 = dot(vec3(isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0)), isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0)), isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1763) ? 0.0 : (isnan(0.0) ? _1763 : max(0.0, _1763))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1772 = 1.0;
    }
    float _1776 = (_1772 * cbModelParam._m0[1u].x) + (_1761 * (1.0 - cbModelParam._m0[1u].x));
    float _1786 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _761);
    float _1787 = isnan(_1786) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1786 : min(cbModelParam._m0[25u].z, _1786));
    float _1867;
    float _1869;
    float _1871;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1834 = fma(_1008, cbModelParam._m0[13u].z, fma(_1004, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1000)) + cbModelParam._m0[13u].w;
        float _1838 = fma(_1008, cbModelParam._m0[14u].z, fma(_1004, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1000)) + cbModelParam._m0[14u].w;
        float _1842 = fma(_1008, cbModelParam._m0[15u].z, fma(_1004, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1000)) + cbModelParam._m0[15u].w;
        float _1845 = fma(_946, cbModelParam._m0[13u].z, fma(_945, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _944));
        float _1848 = fma(_946, cbModelParam._m0[14u].z, fma(_945, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _944));
        float _1851 = fma(_946, cbModelParam._m0[15u].z, fma(_945, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _944));
        float _1879;
        if (_1845 > 0.0)
        {
            _1879 = abs((1.0 - _1834) / _1845);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1845 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1834 + 1.0) / _1845);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1879 = frontier_phi_17_15_ladder;
        }
        float _2082;
        if (_1848 > 0.0)
        {
            _2082 = abs((1.0 - _1838) / _1848);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1848 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1838 + 1.0) / _1848);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2082 = frontier_phi_26_22_ladder;
        }
        float _2336;
        if (_1851 > 0.0)
        {
            _2336 = abs((1.0 - _1842) / _1851);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1851 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1842 + 1.0) / _1851);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2336 = frontier_phi_38_33_ladder;
        }
        float _2338 = isnan(_2082) ? _1879 : (isnan(_1879) ? _2082 : min(_1879, _2082));
        float _2339 = isnan(_2336) ? _2338 : (isnan(_2338) ? _2336 : min(_2338, _2336));
        float _2343 = (_2339 * _1845) + _1834;
        float _2344 = (_2339 * _1848) + _1838;
        float _2345 = (_2339 * _1851) + _1842;
        float _2346 = _2339 * 9.9999997473787516355514526367188e-05;
        float _2348 = (-1.0) - _2346;
        float _2350 = _2346 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2345 > _2350) || ((_2345 < _2348) || ((_2344 > _2350) || ((_2344 < _2348) || ((_2343 < _2348) || (_2343 > _2350))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2473 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2345, cbModelParam._m0[9u].z, fma(_2344, cbModelParam._m0[9u].y, _2343 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2345, cbModelParam._m0[10u].z, fma(_2344, cbModelParam._m0[10u].y, _2343 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2345, cbModelParam._m0[11u].z, fma(_2344, cbModelParam._m0[11u].y, _2343 * cbModelParam._m0[11u].x))), _1787);
            frontier_phi_16_38_ladder = _2473.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2473.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2473.x * cbModelParam._m0[1u].y;
        }
        _1867 = frontier_phi_16_38_ladder_2;
        _1869 = frontier_phi_16_38_ladder_1;
        _1871 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1855 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_944, _945, _946), _1787);
        _1867 = _1855.x * cbModelParam._m0[1u].y;
        _1869 = _1855.y * cbModelParam._m0[1u].y;
        _1871 = _1855.z * cbModelParam._m0[1u].y;
    }
    float _1875 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _761);
    float _1876 = isnan(_1875) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1875 : min(cbModelParam._m0[25u].w, _1875));
    float _1966;
    float _1968;
    float _1970;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1930 = fma(_1008, cbModelParam._m0[21u].z, fma(_1004, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1000)) + cbModelParam._m0[21u].w;
        float _1934 = fma(_1008, cbModelParam._m0[22u].z, fma(_1004, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1000)) + cbModelParam._m0[22u].w;
        float _1938 = fma(_1008, cbModelParam._m0[23u].z, fma(_1004, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1000)) + cbModelParam._m0[23u].w;
        float _1941 = fma(_946, cbModelParam._m0[21u].z, fma(_945, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _944));
        float _1944 = fma(_946, cbModelParam._m0[22u].z, fma(_945, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _944));
        float _1947 = fma(_946, cbModelParam._m0[23u].z, fma(_945, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _944));
        float _2087;
        if (_1941 > 0.0)
        {
            _2087 = abs((1.0 - _1930) / _1941);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1941 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1930 + 1.0) / _1941);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2087 = frontier_phi_28_24_ladder;
        }
        float _2363;
        if (_1944 > 0.0)
        {
            _2363 = abs((1.0 - _1934) / _1944);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1944 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1934 + 1.0) / _1944);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2363 = frontier_phi_40_35_ladder;
        }
        float _2576;
        if (_1947 > 0.0)
        {
            _2576 = abs((1.0 - _1938) / _1947);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1947 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1938 + 1.0) / _1947);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2576 = frontier_phi_49_46_ladder;
        }
        float _2578 = isnan(_2363) ? _2087 : (isnan(_2087) ? _2363 : min(_2087, _2363));
        float _2579 = isnan(_2576) ? _2578 : (isnan(_2578) ? _2576 : min(_2578, _2576));
        float _2583 = (_2579 * _1941) + _1930;
        float _2584 = (_2579 * _1944) + _1934;
        float _2585 = (_2579 * _1947) + _1938;
        float _2586 = _2579 * 9.9999997473787516355514526367188e-05;
        float _2587 = (-1.0) - _2586;
        float _2589 = _2586 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2585 > _2589) || ((_2585 < _2587) || ((_2584 > _2589) || ((_2584 < _2587) || ((_2583 < _2587) || (_2583 > _2589))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2813 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2585, cbModelParam._m0[17u].z, fma(_2584, cbModelParam._m0[17u].y, _2583 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2585, cbModelParam._m0[18u].z, fma(_2584, cbModelParam._m0[18u].y, _2583 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2585, cbModelParam._m0[19u].z, fma(_2584, cbModelParam._m0[19u].y, _2583 * cbModelParam._m0[19u].x))), _1876);
            frontier_phi_25_49_ladder = _2813.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2813.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2813.x * cbModelParam._m0[1u].z;
        }
        _1966 = frontier_phi_25_49_ladder_2;
        _1968 = frontier_phi_25_49_ladder_1;
        _1970 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1950 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_944, _945, _946), _1876);
        _1966 = _1950.x * cbModelParam._m0[1u].z;
        _1968 = _1950.y * cbModelParam._m0[1u].z;
        _1970 = _1950.z * cbModelParam._m0[1u].z;
    }
    float _1983 = (((_971 * _921) + _972) * _936) * ((cbModelParam._m0[1u].w * (_1966 - _1867)) + _1867);
    float _1985 = (((_971 * _923) + _972) * _936) * ((cbModelParam._m0[1u].w * (_1968 - _1869)) + _1869);
    float _1987 = (((_971 * _924) + _972) * _936) * ((cbModelParam._m0[1u].w * (_1970 - _1871)) + _1871);
    float _1990 = fma(_1987, cbSceneParam._m0[89u].z, fma(_1985, cbSceneParam._m0[89u].y, _1983 * cbSceneParam._m0[89u].x));
    float _1993 = fma(_1987, cbSceneParam._m0[90u].z, fma(_1985, cbSceneParam._m0[90u].y, _1983 * cbSceneParam._m0[90u].x));
    float _1996 = fma(_1987, cbSceneParam._m0[91u].z, fma(_1985, cbSceneParam._m0[91u].y, _1983 * cbSceneParam._m0[91u].x));
    uvec4 _2006 = floatBitsToUint(cbInstanceData._m0[_896 + 5u]);
    uint _2008 = _2006.x * 14u;
    uint _2009 = _2008 + 13u;
    float _2016 = _936 + (-1.0);
    float _2021 = (cbLight._m0[_2009].x * _2016) + 1.0;
    float _2022 = (cbLight._m0[_2009].y * _2016) + 1.0;
    float _2023 = (cbLight._m0[_2009].z * _2016) + 1.0;
    float _2024 = (cbLight._m0[_2009].w * _2016) + 1.0;
    uint _2025 = _2008 + 5u;
    float _2031 = isnan(1.0) ? _2022 : (isnan(_2022) ? 1.0 : min(_2022, 1.0));
    uint _2035 = _2008 + 4u;
    float _2041 = isnan(1.0) ? _2021 : (isnan(_2021) ? 1.0 : min(_2021, 1.0));
    uint _2045 = _2008 | 1u;
    float _2056 = dot(vec3(cbLight._m0[_2008].xyz), vec3(_758, _759, _760));
    float _2059 = dot(vec3(cbLight._m0[_2045].xyz), vec3(_758, _759, _760));
    float _4335 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
    float _4346 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2064 = (isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * 0.3183098733425140380859375;
    float _2066 = (isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0))) * 0.3183098733425140380859375;
    float _2073 = ((cbLight._m0[_2025].x * _2031) * _2066) + ((cbLight._m0[_2035].x * _2041) * _2064);
    float _2074 = ((_2031 * cbLight._m0[_2025].y) * _2066) + ((_2041 * cbLight._m0[_2035].y) * _2064);
    float _2075 = ((_2031 * cbLight._m0[_2025].z) * _2066) + ((_2041 * cbLight._m0[_2035].z) * _2064);
    uvec4 _2079 = floatBitsToUint(cbLight._m0[_2008 + 12u]);
    bool _2081 = _2079.x == 0u;
    float _2092;
    float _2094;
    float _2096;
    if (_2081)
    {
        _2092 = _2073;
        _2094 = _2074;
        _2096 = _2075;
    }
    else
    {
        uint _2100 = _2008 + 6u;
        float _2116 = (dot(vec3(cbLight._m0[_2008 + 2u].xyz), vec3(_758, _759, _760)) * 0.5) + 0.5;
        float _2117 = _2116 * _2116;
        float _4357 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
        float _2118 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
        float _2119 = isnan(1.0) ? _2023 : (isnan(_2023) ? 1.0 : min(_2023, 1.0));
        _2092 = (((cbLight._m0[_2100].x * 0.3183098733425140380859375) * _2118) * _2119) + _2073;
        _2094 = (((cbLight._m0[_2100].y * 0.3183098733425140380859375) * _2118) * _2119) + _2074;
        _2096 = (((cbLight._m0[_2100].z * 0.3183098733425140380859375) * _2118) * _2119) + _2075;
    }
    bool _2099 = _2079.y == 0u;
    float _2137;
    float _2139;
    float _2141;
    if (_2099)
    {
        _2137 = _2092;
        _2139 = _2094;
        _2141 = _2096;
    }
    else
    {
        uint _2307 = _2008 + 7u;
        float _2323 = (dot(vec3(cbLight._m0[_2008 + 3u].xyz), vec3(_758, _759, _760)) * 0.5) + 0.5;
        float _2324 = _2323 * _2323;
        float _4373 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
        float _2325 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
        float _2326 = isnan(1.0) ? _2024 : (isnan(_2024) ? 1.0 : min(_2024, 1.0));
        _2137 = (((cbLight._m0[_2307].x * 0.3183098733425140380859375) * _2325) * _2326) + _2092;
        _2139 = (((cbLight._m0[_2307].y * 0.3183098733425140380859375) * _2325) * _2326) + _2094;
        _2141 = (((cbLight._m0[_2307].z * 0.3183098733425140380859375) * _2325) * _2326) + _2096;
    }
    uint _2144 = _2008 + 8u;
    float _2157 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2008].w)) * _761) * 0.949999988079071044921875);
    float _2158 = _2157 * _2157;
    float _2159 = cbLight._m0[_2008].x + _838;
    float _2160 = cbLight._m0[_2008].y + _839;
    float _2161 = cbLight._m0[_2008].z + _840;
    float _2165 = inversesqrt(dot(vec3(_2159, _2160, _2161), vec3(_2159, _2160, _2161)));
    float _2166 = _2165 * _2159;
    float _2167 = _2165 * _2160;
    float _2168 = _2165 * _2161;
    float _2169 = dot(vec3(_758, _759, _760), vec3(cbLight._m0[_2008].xyz));
    float _4389 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
    float _2172 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
    float _4400 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _2173 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
    float _2174 = dot(vec3(_758, _759, _760), vec3(_2166, _2167, _2168));
    float _4411 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
    float _2177 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
    float _2178 = dot(vec3(cbLight._m0[_2008].xyz), vec3(_2166, _2167, _2168));
    float _4422 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
    float _2182 = _2158 * _2158;
    float _2186 = ((_2177 * _2177) * (_2182 + (-1.0))) + 1.0;
    float _2194 = exp2(log2(1.0 - (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0)))) * 5.0);
    float _2195 = 0.959999978542327880859375 - _918;
    float _2197 = 0.959999978542327880859375 - _919;
    float _2198 = 0.959999978542327880859375 - _920;
    float _2205 = 1.0 - _2158;
    float _2216 = (0.5 / (((_2173 * ((_2172 * _2205) + _2158)) + 9.9999999392252902907785028219223e-09) + (((_2173 * _2205) + _2158) * _2172))) * _2172;
    float _4433 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
    float _2218 = (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0))) * (_2182 / ((_2186 * _2186) * 3.141590118408203125));
    uint _2229 = _2008 + 9u;
    float _2240 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2045].w)) * _761) * 0.949999988079071044921875);
    float _2241 = _2240 * _2240;
    float _2242 = cbLight._m0[_2045].x + _838;
    float _2243 = cbLight._m0[_2045].y + _839;
    float _2244 = cbLight._m0[_2045].z + _840;
    float _2248 = inversesqrt(dot(vec3(_2242, _2243, _2244), vec3(_2242, _2243, _2244)));
    float _2249 = _2248 * _2242;
    float _2250 = _2248 * _2243;
    float _2251 = _2248 * _2244;
    float _2252 = dot(vec3(_758, _759, _760), vec3(cbLight._m0[_2045].xyz));
    float _4444 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
    float _2255 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
    float _2256 = dot(vec3(_758, _759, _760), vec3(_2249, _2250, _2251));
    float _4455 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
    float _2259 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
    float _2260 = dot(vec3(cbLight._m0[_2045].xyz), vec3(_2249, _2250, _2251));
    float _4466 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
    float _2264 = _2241 * _2241;
    float _2268 = ((_2259 * _2259) * (_2264 + (-1.0))) + 1.0;
    float _2275 = exp2(log2(1.0 - (isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0)))) * 5.0);
    float _2282 = 1.0 - _2241;
    float _2292 = (0.5 / (((_2173 * ((_2255 * _2282) + _2241)) + 9.9999999392252902907785028219223e-09) + (((_2173 * _2282) + _2241) * _2255))) * _2255;
    float _4477 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
    float _2294 = (isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0))) * (_2264 / ((_2268 * _2268) * 3.141590118408203125));
    float _2304 = (((((_2275 * _2195) + _921) * cbLight._m0[_2229].x) * _2294) * _2031) + (((((_2194 * _2195) + _921) * cbLight._m0[_2144].x) * _2218) * _2041);
    float _2305 = (((((_2275 * _2197) + _923) * cbLight._m0[_2229].y) * _2294) * _2031) + (((((_2194 * _2197) + _923) * cbLight._m0[_2144].y) * _2218) * _2041);
    float _2306 = (((((_2275 * _2198) + _924) * cbLight._m0[_2229].z) * _2294) * _2031) + (((((_2194 * _2198) + _924) * cbLight._m0[_2144].z) * _2218) * _2041);
    float _2368;
    float _2370;
    float _2372;
    if (_2081)
    {
        _2368 = _2304;
        _2370 = _2305;
        _2372 = _2306;
    }
    else
    {
        uint _2374 = _2008 + 2u;
        uint _2378 = _2008 + 10u;
        float _2392 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2374].w)) * _761) * 0.949999988079071044921875);
        float _2393 = _2392 * _2392;
        float _2394 = cbLight._m0[_2374].x + _838;
        float _2395 = cbLight._m0[_2374].y + _839;
        float _2396 = cbLight._m0[_2374].z + _840;
        float _2400 = inversesqrt(dot(vec3(_2394, _2395, _2396), vec3(_2394, _2395, _2396)));
        float _2401 = _2400 * _2394;
        float _2402 = _2400 * _2395;
        float _2403 = _2400 * _2396;
        float _2404 = dot(vec3(_758, _759, _760), vec3(cbLight._m0[_2374].xyz));
        float _4488 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
        float _2407 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
        float _2408 = dot(vec3(_758, _759, _760), vec3(_2401, _2402, _2403));
        float _4499 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
        float _2411 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
        float _2412 = dot(vec3(cbLight._m0[_2374].xyz), vec3(_2401, _2402, _2403));
        float _4510 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
        float _2416 = _2393 * _2393;
        float _2420 = ((_2411 * _2411) * (_2416 + (-1.0))) + 1.0;
        float _2427 = exp2(log2(1.0 - (isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0)))) * 5.0);
        float _2434 = 1.0 - _2393;
        float _2444 = (0.5 / (((_2173 * ((_2407 * _2434) + _2393)) + 9.9999999392252902907785028219223e-09) + (((_2173 * _2434) + _2393) * _2407))) * _2407;
        float _4521 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
        float _2446 = (isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0))) * (_2416 / ((_2420 * _2420) * 3.141590118408203125));
        float _2447 = isnan(1.0) ? _2023 : (isnan(_2023) ? 1.0 : min(_2023, 1.0));
        _2368 = (((((_2427 * _2195) + _921) * cbLight._m0[_2378].x) * _2446) * _2447) + _2304;
        _2370 = (((((_2427 * _2197) + _923) * cbLight._m0[_2378].y) * _2446) * _2447) + _2305;
        _2372 = (((((_2427 * _2198) + _924) * cbLight._m0[_2378].z) * _2446) * _2447) + _2306;
    }
    float _2482;
    float _2484;
    float _2486;
    if (_2099)
    {
        _2482 = _2368;
        _2484 = _2370;
        _2486 = _2372;
    }
    else
    {
        uint _2493 = _2008 + 3u;
        uint _2497 = _2008 + 11u;
        float _2511 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2493].w)) * _761) * 0.949999988079071044921875);
        float _2512 = _2511 * _2511;
        float _2513 = cbLight._m0[_2493].x + _838;
        float _2514 = cbLight._m0[_2493].y + _839;
        float _2515 = cbLight._m0[_2493].z + _840;
        float _2519 = inversesqrt(dot(vec3(_2513, _2514, _2515), vec3(_2513, _2514, _2515)));
        float _2520 = _2519 * _2513;
        float _2521 = _2519 * _2514;
        float _2522 = _2519 * _2515;
        float _2523 = dot(vec3(_758, _759, _760), vec3(cbLight._m0[_2493].xyz));
        float _4537 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
        float _2526 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
        float _2527 = dot(vec3(_758, _759, _760), vec3(_2520, _2521, _2522));
        float _4548 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
        float _2530 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
        float _2531 = dot(vec3(cbLight._m0[_2493].xyz), vec3(_2520, _2521, _2522));
        float _4559 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
        float _2535 = _2512 * _2512;
        float _2539 = ((_2530 * _2530) * (_2535 + (-1.0))) + 1.0;
        float _2546 = exp2(log2(1.0 - (isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0)))) * 5.0);
        float _2553 = 1.0 - _2512;
        float _2563 = (0.5 / (((_2173 * ((_2526 * _2553) + _2512)) + 9.9999999392252902907785028219223e-09) + (((_2173 * _2553) + _2512) * _2526))) * _2526;
        float _4570 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
        float _2565 = (isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0))) * (_2535 / ((_2539 * _2539) * 3.141590118408203125));
        float _2566 = isnan(1.0) ? _2024 : (isnan(_2024) ? 1.0 : min(_2024, 1.0));
        _2482 = (((((_2546 * _2195) + _921) * cbLight._m0[_2497].x) * _2565) * _2566) + _2368;
        _2484 = (((((_2546 * _2197) + _923) * cbLight._m0[_2497].y) * _2565) * _2566) + _2370;
        _2486 = (((((_2546 * _2198) + _924) * cbLight._m0[_2497].z) * _2565) * _2566) + _2372;
    }
    float _2701;
    float _2703;
    float _2705;
    float _2707;
    float _2709;
    float _2711;
    if (_2006.y == 0u)
    {
        float _2641 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2642 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2641;
        float _2643 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2641;
        float _2644 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2641;
        uvec4 _2656 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2657 = _2656.x;
        uint _2668 = uint((float(_2656.y) * floor(float(uint(cbSceneParam._m0[85u].y * _859) / _2657))) + floor(float(uint(cbSceneParam._m0[85u].x * _858) / _2657)));
        float _2678 = (log2(_2644 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2679 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
        uint _2682 = uint(isnan(14.0) ? _2679 : (isnan(_2679) ? 14.0 : min(_2679, 14.0)));
        uvec4 _2687 = texelFetch(g_lightClusterGridBuffer, int(((_2682 << 2u) + (_2668 << 6u)) >> 2u));
        uint _2688 = _2687.x;
        uint _2689 = _2656.z;
        float _2818;
        float _2820;
        float _2822;
        float _2824;
        float _2826;
        float _2828;
        if (((((1u << ((_2689 >> 4u) & 15u)) + 4294967295u) & _2688) == 0u) || ((_2689 & 240u) == 0u))
        {
            _2818 = 0.0;
            _2820 = 0.0;
            _2822 = 0.0;
            _2824 = 0.0;
            _2826 = 0.0;
            _2828 = 0.0;
        }
        else
        {
            float _2819;
            float _2821;
            float _2823;
            float _2825;
            float _2827;
            float _2829;
            float _2979 = 0.0;
            float _2980 = 0.0;
            float _2981 = 0.0;
            float _2982 = 0.0;
            float _2983 = 0.0;
            float _2984 = 0.0;
            uint _2985 = 0u;
            uint _2994;
            bool _2995;
            for (;;)
            {
                _2994 = texelFetch(g_lightClassification, int((((_2682 << 5u) + (_2668 << 9u)) + (_2985 << 2u)) >> 2u)).x;
                _2995 = _2994 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2995)
                {
                    frontier_phi_66_pred = _2979;
                    frontier_phi_66_pred_1 = _2984;
                    frontier_phi_66_pred_2 = _2983;
                    frontier_phi_66_pred_3 = _2982;
                    frontier_phi_66_pred_4 = _2981;
                    frontier_phi_66_pred_5 = _2980;
                }
                else
                {
                    float _3124;
                    float _3125;
                    float _3126;
                    float _3127;
                    float _3128;
                    float _3129;
                    uint _3130;
                    _3124 = _2979;
                    _3125 = _2980;
                    _3126 = _2981;
                    _3127 = _2982;
                    _3128 = _2983;
                    _3129 = _2984;
                    _3130 = _2994;
                    float _3051;
                    float _3052;
                    float _3053;
                    float _3054;
                    float _3055;
                    float _3056;
                    for (;;)
                    {
                        uint _3134 = uint(findLSB(_3130)) + (_2985 << 5u);
                        uint _3131 = (_3130 + 4294967295u) & _3130;
                        uint _3136 = _3134 * 48u;
                        vec4 _3150 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3136)).x, texelFetch(g_PointLightRenderingBuffer, int(_3136 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3136 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3136 + 3u)).x));
                        uint _3156 = (_3134 * 48u) + 4u;
                        vec4 _3169 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3156)).x, texelFetch(g_PointLightRenderingBuffer, int(_3156 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3156 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3156 + 3u)).x));
                        uint _3175 = (_3134 * 48u) + 8u;
                        vec3 _3186 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3175)).x, texelFetch(g_PointLightRenderingBuffer, int(_3175 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3175 + 2u)).x));
                        float _3190 = _3150.x - _2642;
                        float _3191 = _3150.y - _2643;
                        float _3192 = _3150.z - _2644;
                        float _3193 = dot(vec3(_3190, _3191, _3192), vec3(_3190, _3191, _3192));
                        float _3196 = inversesqrt(_3193);
                        float _3197 = _3196 * _3190;
                        float _3198 = _3196 * _3191;
                        float _3199 = _3196 * _3192;
                        float _3200 = dot(vec3(_877, _880, _883), vec3(_3197, _3198, _3199));
                        float _3205 = 1.0 - (_3193 * _3150.w);
                        float _4596 = isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0));
                        float _3206 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
                        float _3207 = sqrt(_3193) * _3169.w;
                        float _3210 = 1.39999997615814208984375 / (_3207 + 1.39999997615814208984375);
                        float _3211 = _3210 * _3210;
                        float _3214 = ((1.0 - _3211) * _3200) + _3211;
                        float _3217 = _3207 * _3207;
                        float _3221 = ((isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0))) * _3206) / ((_3217 * 0.699999988079071044921875) + 1.0);
                        float _3225 = (-0.0) - _2642;
                        float _3226 = (-0.0) - _2643;
                        float _3227 = (-0.0) - _2644;
                        float _3231 = inversesqrt(dot(vec3(_3225, _3226, _3227), vec3(_3225, _3226, _3227)));
                        float _3232 = _3231 * _3225;
                        float _3233 = _3231 * _3226;
                        float _3234 = _3231 * _3227;
                        float _3242 = exp2(log2(1.0 / ((_3217 * 3.5) + 5.0)) * 0.25);
                        float _3243 = 1.0 - _952;
                        float _3250 = sqrt(1.0 - ((1.0 - (_3243 * _3243)) * (1.0 - (_3242 * _3242))));
                        float _3251 = _3250 * _3250;
                        float _3252 = _3251 * _3251;
                        float _3253 = _3232 + _3197;
                        float _3254 = _3233 + _3198;
                        float _3255 = _3234 + _3199;
                        float _3259 = inversesqrt(dot(vec3(_3253, _3254, _3255), vec3(_3253, _3254, _3255)));
                        float _3263 = dot(vec3(_877, _880, _883), vec3(_3232, _3233, _3234));
                        float _4612 = isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0));
                        float _3266 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
                        float _3267 = dot(vec3(_877, _880, _883), vec3(_3259 * _3253, _3259 * _3254, _3259 * _3255));
                        float _4623 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0));
                        float _3270 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
                        float _3274 = ((_3270 * _3270) * (_3252 + (-1.0))) + 1.0;
                        float _3275 = _3210 * _3251;
                        float _3276 = _3275 * _3275;
                        float _3279 = ((1.0 - _3276) * _3200) + _3276;
                        float _4634 = isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0));
                        float _3280 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
                        float _3281 = 1.0 - _3251;
                        float _3291 = (0.5 / (((_3280 * ((_3266 * _3281) + _3251)) + 9.9999999392252902907785028219223e-09) + (((_3280 * _3281) + _3251) * _3266))) * _3280;
                        float _4645 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0));
                        float _3302 = (((_3252 * 3.1415927410125732421875) * (isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0)))) / ((_3274 * _3274) * ((_3217 * 2.1991131305694580078125) + 3.141590118408203125))) * _3206;
                        _3054 = (_3221 * _3169.x) + _3127;
                        _3055 = (_3221 * _3169.y) + _3128;
                        _3056 = (_3221 * _3169.z) + _3129;
                        _3051 = (_3302 * _3186.x) + _3124;
                        _3052 = (_3302 * _3186.y) + _3125;
                        _3053 = (_3302 * _3186.z) + _3126;
                        if (_3131 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3124 = _3051;
                            _3125 = _3052;
                            _3126 = _3053;
                            _3127 = _3054;
                            _3128 = _3055;
                            _3129 = _3056;
                            _3130 = _3131;
                        }
                    }
                    frontier_phi_66_pred = _3051;
                    frontier_phi_66_pred_1 = _3056;
                    frontier_phi_66_pred_2 = _3055;
                    frontier_phi_66_pred_3 = _3054;
                    frontier_phi_66_pred_4 = _3053;
                    frontier_phi_66_pred_5 = _3052;
                }
                _2819 = frontier_phi_66_pred;
                _2829 = frontier_phi_66_pred_1;
                _2827 = frontier_phi_66_pred_2;
                _2825 = frontier_phi_66_pred_3;
                _2823 = frontier_phi_66_pred_4;
                _2821 = frontier_phi_66_pred_5;
                uint _2986 = _2985 + 1u;
                if (_2986 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2979 = _2819;
                    _2980 = _2821;
                    _2981 = _2823;
                    _2982 = _2825;
                    _2983 = _2827;
                    _2984 = _2829;
                    _2985 = _2986;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2818 = _2819;
            _2820 = _2821;
            _2822 = _2823;
            _2824 = _2825;
            _2826 = _2827;
            _2828 = _2829;
        }
        uvec4 _2832 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2833 = _2832.z;
        uint _2835 = (_2833 >> 8u) & 15u;
        float _2947;
        float _2949;
        float _2951;
        float _2953;
        float _2955;
        float _2957;
        if (((4294967295u << _2835) & _2688) == 0u)
        {
            _2947 = _2818;
            _2949 = _2820;
            _2951 = _2822;
            _2953 = _2824;
            _2955 = _2826;
            _2957 = _2828;
        }
        else
        {
            float _2972 = inversesqrt(dot(vec3(_2642, _2643, _2644), vec3(_2642, _2643, _2644)));
            float _2973 = _2972 * _2642;
            float _2974 = _2972 * _2643;
            float _2975 = _2972 * _2644;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2835 < ((_2833 >> 12u) & 15u))
            {
                float _2948;
                float _2950;
                float _2952;
                float _2954;
                float _2956;
                float _2958;
                float _3107 = _2818;
                float _3108 = _2820;
                float _3109 = _2822;
                float _3110 = _2824;
                float _3111 = _2826;
                float _3112 = _2828;
                uint _3113 = _2835;
                uint _3122;
                bool _3123;
                for (;;)
                {
                    _3122 = texelFetch(g_lightClassification, int((((_2682 << 5u) + (_2668 << 9u)) + (_3113 << 2u)) >> 2u)).x;
                    _3123 = _3122 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3123)
                    {
                        frontier_phi_77_pred = _3112;
                        frontier_phi_77_pred_1 = _3111;
                        frontier_phi_77_pred_2 = _3110;
                        frontier_phi_77_pred_3 = _3109;
                        frontier_phi_77_pred_4 = _3108;
                        frontier_phi_77_pred_5 = _3107;
                    }
                    else
                    {
                        float _3316;
                        float _3317;
                        float _3318;
                        float _3319;
                        float _3320;
                        float _3321;
                        float _3610;
                        float _3611;
                        float _3612;
                        float _3613;
                        float _3614;
                        float _3615;
                        float _3329 = _3107;
                        float _3330 = _3108;
                        float _3331 = _3109;
                        float _3332 = _3110;
                        float _3333 = _3111;
                        float _3334 = _3112;
                        uint _3335 = _3122;
                        uint _3336;
                        vec4 _3361;
                        float _3362;
                        vec4 _3377;
                        vec3 _3389;
                        vec4 _3404;
                        vec4 _3419;
                        float _3466;
                        bool _3467;
                        for (;;)
                        {
                            uint _3346 = ((_3113 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3335));
                            _3336 = (_3335 + 4294967295u) & _3335;
                            uint _3348 = _3346 * 40u;
                            _3361 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3348)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 3u)).x));
                            _3362 = _3361.w;
                            uint _3364 = (_3346 * 40u) + 4u;
                            _3377 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3364)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 3u)).x));
                            uint _3379 = (_3346 * 40u) + 8u;
                            _3389 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3379)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 2u)).x));
                            uint _3391 = (_3346 * 40u) + 16u;
                            _3404 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3391)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 3u)).x));
                            uint _3406 = (_3346 * 40u) + 20u;
                            _3419 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3406)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 3u)).x));
                            uint _3422 = (_3346 * 40u) + 24u;
                            vec4 _3435 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3422)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 3u)).x));
                            uint _3441 = (_3346 * 40u) + 28u;
                            vec4 _3454 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3441)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 3u)).x));
                            _3466 = fma(_2644, _3454.z, fma(_2643, _3454.y, _3454.x * _2642)) + _3454.w;
                            _3467 = !((fma(_2644, _3435.z, fma(_2643, _3435.y, _3435.x * _2642)) + _3435.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3467)
                            {
                                float _3494 = _3361.x - _2642;
                                float _3495 = _3361.y - _2643;
                                float _3496 = _3361.z - _2644;
                                float _3497 = dot(vec3(_3494, _3495, _3496), vec3(_3494, _3495, _3496));
                                float _3500 = inversesqrt(_3497);
                                float _3501 = _3500 * _3494;
                                float _3502 = _3500 * _3495;
                                float _3503 = _3500 * _3496;
                                float _3507 = 1.0 - (_3497 / (_3362 * _3362));
                                float _4656 = isnan(0.0) ? _3507 : (isnan(_3507) ? 0.0 : max(_3507, 0.0));
                                float _3508 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
                                float _3512 = sqrt(_3497) * _3377.w;
                                float _3514 = 1.39999997615814208984375 / (_3512 + 1.39999997615814208984375);
                                float _3515 = _3514 * _3514;
                                float _3518 = ((1.0 - _3515) * dot(vec3(_3501, _3502, _3503), vec3(_877, _880, _883))) + _3515;
                                float _3521 = _3512 * _3512;
                                float _3525 = (fma(_2644, _3404.z, fma(_2643, _3404.y, _3404.x * _2642)) + _3404.w) / _3466;
                                float _3526 = (fma(_2644, _3419.z, fma(_2643, _3419.y, _3419.x * _2642)) + _3419.w) / _3466;
                                float _3530 = 1.0 - dot(vec2(_3525, _3526), vec2(_3525, _3526));
                                float _4672 = isnan(0.0) ? _3530 : (isnan(_3530) ? 0.0 : max(_3530, 0.0));
                                float _3531 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
                                float _3532 = _3531 * (((isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0))) * _3508) / ((_3521 * 0.699999988079071044921875) + 1.0));
                                float _3544 = exp2(log2(1.0 / ((_3521 * 3.5) + 5.0)) * 0.25);
                                float _3545 = 1.0 - _952;
                                float _3552 = sqrt(1.0 - ((1.0 - (_3545 * _3545)) * (1.0 - (_3544 * _3544))));
                                float _3553 = _3552 * _3552;
                                float _3554 = _3553 * _3553;
                                float _3555 = _3501 - _2973;
                                float _3556 = _3502 - _2974;
                                float _3557 = _3503 - _2975;
                                float _3561 = inversesqrt(dot(vec3(_3555, _3556, _3557), vec3(_3555, _3556, _3557)));
                                float _3565 = dot(vec3(_877, _880, _883), vec3((-0.0) - _2973, (-0.0) - _2974, (-0.0) - _2975));
                                float _4683 = isnan(0.0) ? _3565 : (isnan(_3565) ? 0.0 : max(_3565, 0.0));
                                float _3568 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
                                float _3569 = dot(vec3(_877, _880, _883), vec3(_3561 * _3555, _3561 * _3556, _3561 * _3557));
                                float _4694 = isnan(0.0) ? _3569 : (isnan(_3569) ? 0.0 : max(_3569, 0.0));
                                float _3572 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
                                float _3576 = ((_3572 * _3572) * (_3554 + (-1.0))) + 1.0;
                                float _3577 = _3514 * _3553;
                                float _3578 = _3577 * _3577;
                                float _3584 = ((1.0 - _3578) * dot(vec3(_877, _880, _883), vec3(_3501, _3502, _3503))) + _3578;
                                float _4705 = isnan(0.0) ? _3584 : (isnan(_3584) ? 0.0 : max(_3584, 0.0));
                                float _3585 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
                                float _3586 = 1.0 - _3553;
                                float _3596 = (0.5 / (((_3585 * ((_3568 * _3586) + _3553)) + 9.9999999392252902907785028219223e-09) + (((_3585 * _3586) + _3553) * _3568))) * _3585;
                                float _4716 = isnan(0.0) ? _3596 : (isnan(_3596) ? 0.0 : max(_3596, 0.0));
                                float _3606 = (_3531 * _3508) * (((_3554 * 3.1415927410125732421875) * (isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0)))) / ((_3576 * _3576) * ((_3521 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3532 * _3377.y;
                                frontier_phi_83_pred_1 = _3532 * _3377.x;
                                frontier_phi_83_pred_2 = _3606 * _3389.z;
                                frontier_phi_83_pred_3 = _3606 * _3389.y;
                                frontier_phi_83_pred_4 = _3606 * _3389.x;
                                frontier_phi_83_pred_5 = _3532 * _3377.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3614 = frontier_phi_83_pred;
                            _3613 = frontier_phi_83_pred_1;
                            _3612 = frontier_phi_83_pred_2;
                            _3611 = frontier_phi_83_pred_3;
                            _3610 = frontier_phi_83_pred_4;
                            _3615 = frontier_phi_83_pred_5;
                            _3319 = _3613 + _3332;
                            _3320 = _3614 + _3333;
                            _3321 = _3615 + _3334;
                            _3316 = _3610 + _3329;
                            _3317 = _3611 + _3330;
                            _3318 = _3612 + _3331;
                            if (_3336 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3329 = _3316;
                                _3330 = _3317;
                                _3331 = _3318;
                                _3332 = _3319;
                                _3333 = _3320;
                                _3334 = _3321;
                                _3335 = _3336;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3321;
                        frontier_phi_77_pred_1 = _3320;
                        frontier_phi_77_pred_2 = _3319;
                        frontier_phi_77_pred_3 = _3318;
                        frontier_phi_77_pred_4 = _3317;
                        frontier_phi_77_pred_5 = _3316;
                    }
                    _2958 = frontier_phi_77_pred;
                    _2956 = frontier_phi_77_pred_1;
                    _2954 = frontier_phi_77_pred_2;
                    _2952 = frontier_phi_77_pred_3;
                    _2950 = frontier_phi_77_pred_4;
                    _2948 = frontier_phi_77_pred_5;
                    uint _3114 = _3113 + 1u;
                    if (_3114 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3107 = _2948;
                        _3108 = _2950;
                        _3109 = _2952;
                        _3110 = _2954;
                        _3111 = _2956;
                        _3112 = _2958;
                        _3113 = _3114;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2952;
                frontier_phi_58_59_ladder_1 = _2958;
                frontier_phi_58_59_ladder_2 = _2956;
                frontier_phi_58_59_ladder_3 = _2954;
                frontier_phi_58_59_ladder_4 = _2950;
                frontier_phi_58_59_ladder_5 = _2948;
            }
            else
            {
                frontier_phi_58_59_ladder = _2822;
                frontier_phi_58_59_ladder_1 = _2828;
                frontier_phi_58_59_ladder_2 = _2826;
                frontier_phi_58_59_ladder_3 = _2824;
                frontier_phi_58_59_ladder_4 = _2820;
                frontier_phi_58_59_ladder_5 = _2818;
            }
            _2947 = frontier_phi_58_59_ladder_5;
            _2949 = frontier_phi_58_59_ladder_4;
            _2951 = frontier_phi_58_59_ladder;
            _2953 = frontier_phi_58_59_ladder_3;
            _2955 = frontier_phi_58_59_ladder_2;
            _2957 = frontier_phi_58_59_ladder_1;
        }
        float _2962 = isnan(1.0) ? _936 : (isnan(_936) ? 1.0 : min(_936, 1.0));
        _2701 = (_2962 * _2953) + _2137;
        _2703 = (_2962 * _2955) + _2139;
        _2705 = (_2962 * _2957) + _2141;
        _2707 = ((_2947 * _921) * _2962) + _2482;
        _2709 = ((_2949 * _923) * _2962) + _2484;
        _2711 = ((_2951 * _924) * _2962) + _2486;
    }
    else
    {
        _2701 = _2137;
        _2703 = _2139;
        _2705 = _2141;
        _2707 = _2482;
        _2709 = _2484;
        _2711 = _2486;
    }
    uint _2717 = _897 + uint(cbMatDynParam._m0[0u].w);
    float _2723 = cbInstanceData._m0[_2717].x * (_668 - (_684 * _668));
    float _2724 = cbInstanceData._m0[_2717].y * (_669 - (_684 * _669));
    float _2725 = cbInstanceData._m0[_2717].z * (_670 - (_684 * _670));
    float _4732 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _4743 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _4754 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    float _2742 = (((isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0))) * (_2701 + ((isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0))) * _936))) + ((_2707 + ((isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0))) * _1776)) * cbPerFrame._m0[3u].x)) + _2723;
    float _2744 = (_2724 + ((_2709 + ((isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0))) * _1776)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0))) * (_2703 + ((isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0))) * _936)));
    float _2746 = (_2725 + ((_2711 + ((isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0))) * _1776)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0))) * (_2705 + ((isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0))) * _936)));
    float _2747 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
    float _2748 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
    float _2749 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0));
    float _2755 = cbMtdParam._m0[2u].x * _2723;
    float _2756 = cbMtdParam._m0[2u].y * _2724;
    float _2757 = cbMtdParam._m0[2u].z * _2725;
    float _4780 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2759 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
    uint _2760 = _896 + 6u;
    float _2768 = _858 / cbSceneParam._m0[86u].x;
    float _2769 = _859 / cbSceneParam._m0[86u].y;
    vec4 _2783 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2768, _2769, (log2((isnan(cbSceneParam._m0[77u].w) ? _781 : (isnan(_781) ? cbSceneParam._m0[77u].w : min(_781, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2785 = _2783.x;
    float _2786 = _2783.y;
    float _2787 = _2783.z;
    float _2788 = _2783.w;
    float _2880;
    float _2882;
    float _2884;
    float _2886;
    if (_781 > cbSceneParam._m0[78u].w)
    {
        float _2843 = isnan(_781) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _781 : min(cbSceneParam._m0[80u].w, _781));
        float _2844 = _2843 / _781;
        float _2855 = _2844 * _831;
        float _2856 = _832 * _2844;
        float _2857 = (-0.0) - _2856;
        float _2858 = _2844 * _833;
        float _2860 = (cbSceneParam._m0[77u].w * _2857) / _2843;
        float _2861 = _2860 + cbSceneParam._m0[79u].w;
        float _2862 = cbSceneParam._m0[79u].w - _2856;
        float _2868 = sqrt(((_2855 * _2855) + (_2856 * _2856)) + (_2858 * _2858));
        float _2871 = (1.0 - (cbSceneParam._m0[77u].w / _2843)) * _2868;
        float _2876 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2878 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3064;
        if (abs((_2857 - _2860) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3064 = ((((_2861 > 0.0) ? exp2(_2876 * _2861) : (2.0 - exp2(_2878 * _2861))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2871;
        }
        else
        {
            float _3008 = 1.0 / cbSceneParam._m0[80u].x;
            float _3009 = isnan(_2862) ? _2861 : (isnan(_2861) ? _2862 : max(_2861, _2862));
            float _3010 = isnan(_2862) ? _2861 : (isnan(_2861) ? _2862 : min(_2861, _2862));
            float _3019 = isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : min(_3009, 0.0));
            float _3020 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : min(_3010, 0.0));
            _3064 = ((abs(_2868 / _2857) * cbSceneParam._m0[80u].y) * ((((_3019 - _3020) * 2.0) - ((exp2(_2876 * (isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0)))) - exp2(_2876 * (isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0))))) * _3008)) - ((exp2(_2878 * _3019) - exp2(_2878 * _3020)) * _3008))) + (_2871 * cbSceneParam._m0[80u].z);
        }
        vec4 _3066 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2768, _2769, 1.0), 0.0);
        float _3075 = exp2((_3064 * (-1.44269502162933349609375)) * (1.0 - _3066.w));
        float _3076 = log2(_3075);
        float _3092 = log2(_2788);
        _2880 = (exp2(_3092 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3076 * cbSceneParam._m0[78u].x)) * _3066.x) / cbSceneParam._m0[78u].x)) + _2785;
        _2882 = (exp2(_3092 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3076 * cbSceneParam._m0[78u].y)) * _3066.y) / cbSceneParam._m0[78u].y)) + _2786;
        _2884 = (exp2(_3092 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3076 * cbSceneParam._m0[78u].z)) * _3066.z) / cbSceneParam._m0[78u].z)) + _2787;
        _2886 = _3075 * _2788;
    }
    else
    {
        _2880 = _2785;
        _2882 = _2786;
        _2884 = _2787;
        _2886 = _2788;
    }
    bool _3102;
    vec4 _2896;
    vec4 _2918;
    float _2920;
    float _2924;
    float _2925;
    float _2926;
    float _2929;
    float _2932;
    float _2935;
    float _2936;
    bool _2946;
    for (;;)
    {
        _2896 = cbMatDynParam._m0[0u];
        float _2898 = roundEven(_2896.y);
        bool _2899 = _2898 == 3.0;
        float _2900 = log2(_2886);
        float _2904 = exp2(_2900 * cbSceneParam._m0[78u].x);
        float _2905 = exp2(_2900 * cbSceneParam._m0[78u].y);
        float _2906 = exp2(_2900 * cbSceneParam._m0[78u].z);
        float _2907 = _2904 * _2747;
        float _2908 = _2905 * _2748;
        float _2909 = _2906 * _2749;
        float _2916 = _847 + (-0.5);
        _2918 = cbMtdParam._m0[1u];
        _2920 = _2918.y * _2916;
        float _2923 = (_2898 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2924 = _2923 * (_2899 ? _2907 : (_2907 + (cbSceneParam._m0[72u].w * _2880)));
        _2925 = _2923 * (_2899 ? _2908 : (_2908 + (cbSceneParam._m0[72u].w * _2882)));
        _2926 = _2923 * (_2899 ? _2909 : (_2909 + (cbSceneParam._m0[72u].w * _2884)));
        _2929 = ((_2755 * _2759) * _2904) * _2923;
        _2932 = ((_2756 * _2759) * _2905) * _2923;
        _2935 = ((_2757 * _2759) * _2906) * _2923;
        _2936 = _2916 * 0.999000012874603271484375;
        _2946 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2946)
        {
            if ((cbInstanceData._m0[_896 + 7u].x + _2936) < 0.5)
            {
                _3102 = true;
                break;
            }
        }
        uint _3043 = _897 + uint(_2896.w);
        if ((cbInstanceData._m0[_3043].w < 1.0) && ((cbInstanceData._m0[_3043].w + _2936) < 0.5))
        {
            _3102 = true;
            break;
        }
        if ((_2920 + 1.0) < _2918.x)
        {
            _3102 = true;
            break;
        }
        _3102 = false;
        break;
    }
    float _3307;
    if (_3102)
    {
        discard_state = true;
        _3307 = 0.0;
    }
    else
    {
        _3307 = cbInstanceData._m0[_2760].w;
    }
    SV_Target.x = _2924;
    SV_Target.y = _2925;
    SV_Target.z = _2926;
    SV_Target.w = _3307;
    SV_Target_1.x = _2929;
    SV_Target_1.y = _2932;
    SV_Target_1.z = _2935;
    SV_Target_1.w = cbInstanceData._m0[_2760].w;
    discard_exit();
}


