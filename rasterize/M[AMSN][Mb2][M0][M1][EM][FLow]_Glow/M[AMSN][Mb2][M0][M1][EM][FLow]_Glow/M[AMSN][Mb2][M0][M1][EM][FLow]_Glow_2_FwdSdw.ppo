#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1084;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _197 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _198 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _199 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _205 = inversesqrt(dot(vec3(_197, _198, _199), vec3(_197, _198, _199)));
    float _212 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _219 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _241 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _247 = _241.x * cbMtdParam._m0[9u].x;
    float _248 = _241.y * cbMtdParam._m0[9u].y;
    float _249 = _241.z * cbMtdParam._m0[9u].z;
    vec4 _266 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _287 = TEXCOORD_9.x - ((cbMtdParam._m0[16u].y * (1.0 - TEXCOORD_9.x)) * (_266.x + 0.00999999977648258209228515625));
    float _289 = _287 * (cbMtdParam._m0[16u].z + 1.0);
    float _3712 = isnan(0.0) ? _289 : (isnan(_289) ? 0.0 : max(_289, 0.0));
    float _290 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
    float _298 = ((((cbMtdParam._m0[12u].x - _247) * TEXCOORD_9.x) * cbMtdParam._m0[16u].x) * _290) + _247;
    float _299 = ((((cbMtdParam._m0[12u].y - _248) * TEXCOORD_9.y) * cbMtdParam._m0[16u].x) * _290) + _248;
    float _300 = (((cbMtdParam._m0[16u].x * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _249)) * _290) + _249;
    vec4 _312 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _316 = _312.z;
    float _320 = (_312.x * 2.0) + (-1.0);
    float _322 = (_312.y * 2.0) + (-1.0);
    float _323 = dot(vec2(_320, _322), vec2(_320, _322));
    float _3723 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _328 = sqrt(1.0 - (isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0))));
    float _334 = _287 * (cbMtdParam._m0[16u].y + 1.0);
    float _3734 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _338 = ((cbMtdParam._m0[15u].y - _316) * (isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0)))) + _316;
    float _351 = (cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _352 = (cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _379 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * ((cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * ((cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[10u].w));
    float _384 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[15u].w;
    float _391 = ((_379.y * 0.5) + (-0.25)) * cbMtdParam._m0[15u].z;
    float _393 = (-0.0) - (cbMtdParam._m0[15u].z * ((_379.x * 0.5) + (-0.25)));
    float _395 = fract(_384);
    float _397 = fract(_384 + 0.5);
    float _398 = _395 * _393;
    float _399 = _391 * _395;
    float _402 = _397 * _393;
    float _403 = _391 * _397;
    float _408 = abs((_395 * 2.0) + (-1.0));
    vec4 _424 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_398 + _351) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_399 + _352) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _426 = _424.x;
    float _427 = _424.y;
    float _428 = _424.z;
    vec4 _429 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_402 + _351) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_403 + _352) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _456 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _457 = (cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _470 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_398 + _456) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_399 + _457) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _472 = _470.x;
    float _473 = _470.y;
    float _474 = _470.z;
    vec4 _475 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_402 + _456) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_403 + _457) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    vec4 _519 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[16u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, (((cbMtdParam._m0[17u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w));
    float _525 = (_519.x * 2.0) + (-1.0);
    float _526 = (_519.y * 2.0) + (-1.0);
    float _527 = dot(vec2(_525, _526), vec2(_525, _526));
    float _3745 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _543 = (_290 * (((cbMtdParam._m0[14u].z * _320) - _320) + _525)) + _320;
    float _544 = (_290 * (((cbMtdParam._m0[14u].z * _322) - _322) + _526)) + _322;
    float _545 = (_290 * (sqrt(1.0 - (isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0)))) - _328)) + _328;
    float _548 = fma(_545, _212 * NORMAL.x, fma(_544, _219 * TANGENT.x, (_205 * _197) * _543));
    float _551 = fma(_545, _212 * NORMAL.y, fma(_544, _219 * TANGENT.y, (_205 * _198) * _543));
    float _554 = fma(_545, _212 * NORMAL.z, fma(_544, _219 * TANGENT.z, (_205 * _199) * _543));
    float _558 = inversesqrt(dot(vec3(_548, _551, _554), vec3(_548, _551, _554)));
    float _559 = _558 * _548;
    float _560 = _558 * _551;
    float _561 = _558 * _554;
    float _3756 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _562 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
    float _3767 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _3778 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _3789 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    float _581 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _622 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _632 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _622);
    float _633 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _622);
    float _634 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _622);
    float _638 = inversesqrt(dot(vec3(_632, _633, _634), vec3(_632, _633, _634)));
    float _639 = _632 * _638;
    float _640 = _633 * _638;
    float _641 = _634 * _638;
    float _647 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _648 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _669 = fma(_561, cbSceneParam._m0[5u].z, fma(_560, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _559));
    float _672 = fma(_561, cbSceneParam._m0[6u].z, fma(_560, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _559));
    float _675 = fma(_561, cbSceneParam._m0[7u].z, fma(_560, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _559));
    uint _688 = uint(roundEven(NORMAL.w)) * 13u;
    uint _689 = _688 + 9u;
    uint _690 = _689 + uint(cbMatDynParam._m0[0u].w);
    float _696 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0)))) * cbInstanceData._m0[_690].x;
    float _697 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0)))) * cbInstanceData._m0[_690].y;
    float _698 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0)))) * cbInstanceData._m0[_690].z;
    float _3800 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _699 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
    float _3811 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _700 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
    float _3822 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _701 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
    vec4 _710 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _647, cbSceneParam._m0[86u].y * _648));
    float _713 = _710.x * TEXCOORD_3.w;
    float _714 = dot(vec3(_559, _560, _561), vec3(_639, _640, _641));
    float _717 = _714 * 2.0;
    float _721 = (_717 * _559) - _639;
    float _722 = (_717 * _560) - _640;
    float _723 = (_717 * _561) - _641;
    float _727 = abs(dot(vec3(_639, _640, _641), vec3(_559, _560, _561)));
    float _3833 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _729 = sqrt(_562);
    float _742 = exp2((_729 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_729 * 3.0));
    float _774 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _778 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _782 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1083;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _809 = fma(_782, cbModelParam._m0[26u].z, fma(_778, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _774));
        float _813 = fma(_782, cbModelParam._m0[27u].z, fma(_778, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _774));
        float _817 = fma(_782, cbModelParam._m0[28u].z, fma(_778, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _774));
        float _841 = _774 + _559;
        float _842 = _778 + _560;
        float _843 = _782 + _561;
        float _853 = fma(_843, cbModelParam._m0[26u].z, fma(_842, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _841)) - _809;
        float _854 = fma(_843, cbModelParam._m0[27u].z, fma(_842, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _841)) - _813;
        float _855 = fma(_843, cbModelParam._m0[28u].z, fma(_842, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _841)) - _817;
        float _859 = inversesqrt(dot(vec3(_853, _854, _855), vec3(_853, _854, _855)));
        float _872 = ((_859 * _853) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_809 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _873 = ((_859 * _854) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_813 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _874 = ((_859 * _855) / cbModelParam._m0[34u].z) + ((((((_817 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _877 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_872, _873, _874), 0.0);
        vec4 _884 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_872, _873, _874), 0.0);
        vec4 _891 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_872, _873, _874), 0.0);
        vec4 _898 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_872, _873, _874), 0.0);
        float _911 = exp2((_877.w + (-0.5)) * 20.0) * 2.0;
        float _912 = _911 * (_877.x + (-0.5));
        float _913 = _911 * (_877.y + (-0.5));
        float _914 = _911 * (_877.z + (-0.5));
        float _921 = exp2((_884.w + (-0.5)) * 20.0) * 2.0;
        float _922 = _921 * (_884.x + (-0.5));
        float _923 = _921 * (_884.y + (-0.5));
        float _924 = _921 * (_884.z + (-0.5));
        float _931 = exp2((_891.w + (-0.5)) * 20.0) * 2.0;
        float _932 = _931 * (_891.x + (-0.5));
        float _933 = _931 * (_891.y + (-0.5));
        float _934 = _931 * (_891.z + (-0.5));
        float _941 = exp2((_898.w + (-0.5)) * 20.0) * 2.0;
        float _942 = _941 * (_898.x + (-0.5));
        float _943 = _941 * (_898.y + (-0.5));
        float _944 = _941 * (_898.z + (-0.5));
        float _945 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _946 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _947 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _948 = _912 * 0.5;
        float _949 = _922 * 0.5;
        float _950 = _932 * 0.5;
        float _951 = dot(vec3(_948, _949, _950), vec3(_948, _949, _950));
        float _956 = (_951 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_951);
        float _965 = (dot(vec3(_559, _560, _561), vec3(_956 * _948, _956 * _949, _956 * _950)) + 1.0) * 0.5;
        float _3859 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _975 = sqrt(((_949 * _949) + (_948 * _948)) + (_950 * _950)) / (_945 + 9.9999997473787516355514526367188e-06);
        float _3870 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _976 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
        float _977 = _976 * 2.0;
        float _981 = (1.0 - _976) / (_976 + 1.0);
        float _3881 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _982 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _991 = ((((1.0 - _982) * (_977 + 2.0)) * exp2(log2(isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0))) * (_977 + 1.0))) + _982) * _945;
        float _992 = _913 * 0.5;
        float _993 = _923 * 0.5;
        float _994 = _933 * 0.5;
        float _995 = dot(vec3(_992, _993, _994), vec3(_992, _993, _994));
        float _1000 = (_995 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_995);
        float _1008 = (dot(vec3(_559, _560, _561), vec3(_1000 * _992, _1000 * _993, _1000 * _994)) + 1.0) * 0.5;
        float _3892 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1017 = sqrt(((_993 * _993) + (_992 * _992)) + (_994 * _994)) / (_946 + 9.9999997473787516355514526367188e-06);
        float _3903 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1018 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
        float _1019 = _1018 * 2.0;
        float _1023 = (1.0 - _1018) / (_1018 + 1.0);
        float _3914 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1024 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _1033 = ((((1.0 - _1024) * (_1019 + 2.0)) * exp2(log2(isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0))) * (_1019 + 1.0))) + _1024) * _946;
        float _1034 = _914 * 0.5;
        float _1035 = _924 * 0.5;
        float _1036 = _934 * 0.5;
        float _1037 = dot(vec3(_1034, _1035, _1036), vec3(_1034, _1035, _1036));
        float _1042 = (_1037 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1037);
        float _1050 = (dot(vec3(_559, _560, _561), vec3(_1042 * _1034, _1042 * _1035, _1042 * _1036)) + 1.0) * 0.5;
        float _3925 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1059 = sqrt(((_1035 * _1035) + (_1034 * _1034)) + (_1036 * _1036)) / (_947 + 9.9999997473787516355514526367188e-06);
        float _3936 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1060 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
        float _1061 = _1060 * 2.0;
        float _1065 = (1.0 - _1060) / (_1060 + 1.0);
        float _3947 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _1075 = ((((1.0 - _1066) * (_1061 + 2.0)) * exp2(log2(isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0))) * (_1061 + 1.0))) + _1066) * _947;
        _1083 = _914;
        _1085 = _913;
        _1086 = _912;
        _1087 = _924;
        _1088 = _923;
        _1089 = _922;
        _1090 = _934;
        _1091 = _933;
        _1092 = _932;
        _1093 = _947;
        _1094 = _946;
        _1095 = _945;
        _1096 = cbModelParam._m0[36u].z * (isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0)));
        _1097 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0)));
        _1098 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0)));
    }
    else
    {
        _1083 = _1084;
        _1085 = _1084;
        _1086 = _1084;
        _1087 = _1084;
        _1088 = _1084;
        _1089 = _1084;
        _1090 = _1084;
        _1091 = _1084;
        _1092 = _1084;
        _1093 = _1084;
        _1094 = _1084;
        _1095 = _1084;
        _1096 = 0.0;
        _1097 = 0.0;
        _1098 = 0.0;
    }
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1124 = fma(_782, cbModelParam._m0[30u].z, fma(_778, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _774));
        float _1128 = fma(_782, cbModelParam._m0[31u].z, fma(_778, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _774));
        float _1132 = fma(_782, cbModelParam._m0[32u].z, fma(_778, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _774));
        float _1155 = _774 + _559;
        float _1156 = _778 + _560;
        float _1157 = _782 + _561;
        float _1167 = fma(_1157, cbModelParam._m0[30u].z, fma(_1156, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1155)) - _1124;
        float _1168 = fma(_1157, cbModelParam._m0[31u].z, fma(_1156, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1155)) - _1128;
        float _1169 = fma(_1157, cbModelParam._m0[32u].z, fma(_1156, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1155)) - _1132;
        float _1173 = inversesqrt(dot(vec3(_1167, _1168, _1169), vec3(_1167, _1168, _1169)));
        float _1186 = ((_1173 * _1167) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1124 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1187 = ((_1173 * _1168) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1128 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1188 = ((_1173 * _1169) / cbModelParam._m0[35u].z) + ((((((_1132 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1190 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1186, _1187, _1188), 0.0);
        vec4 _1197 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1186, _1187, _1188), 0.0);
        vec4 _1204 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1186, _1187, _1188), 0.0);
        vec4 _1211 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1186, _1187, _1188), 0.0);
        float _1223 = exp2((_1190.w + (-0.5)) * 20.0) * 2.0;
        float _1224 = _1223 * (_1190.x + (-0.5));
        float _1225 = _1223 * (_1190.y + (-0.5));
        float _1226 = _1223 * (_1190.z + (-0.5));
        float _1233 = exp2((_1197.w + (-0.5)) * 20.0) * 2.0;
        float _1234 = _1233 * (_1197.x + (-0.5));
        float _1235 = _1233 * (_1197.y + (-0.5));
        float _1236 = _1233 * (_1197.z + (-0.5));
        float _1243 = exp2((_1204.w + (-0.5)) * 20.0) * 2.0;
        float _1244 = _1243 * (_1204.x + (-0.5));
        float _1245 = _1243 * (_1204.y + (-0.5));
        float _1246 = _1243 * (_1204.z + (-0.5));
        float _1253 = exp2((_1211.w + (-0.5)) * 20.0) * 2.0;
        float _1254 = _1253 * (_1211.x + (-0.5));
        float _1255 = _1253 * (_1211.y + (-0.5));
        float _1256 = _1253 * (_1211.z + (-0.5));
        float _1257 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1258 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1259 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1260 = _1224 * 0.5;
        float _1261 = _1234 * 0.5;
        float _1262 = _1244 * 0.5;
        float _1263 = dot(vec3(_1260, _1261, _1262), vec3(_1260, _1261, _1262));
        float _1268 = (_1263 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1263);
        float _1276 = (dot(vec3(_559, _560, _561), vec3(_1268 * _1260, _1268 * _1261, _1268 * _1262)) + 1.0) * 0.5;
        float _3988 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1285 = sqrt(((_1261 * _1261) + (_1260 * _1260)) + (_1262 * _1262)) / (_1257 + 9.9999997473787516355514526367188e-06);
        float _3999 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _1287 = _1286 * 2.0;
        float _1291 = (1.0 - _1286) / (_1286 + 1.0);
        float _4010 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1301 = ((((1.0 - _1292) * (_1287 + 2.0)) * exp2(log2(isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))) * (_1287 + 1.0))) + _1292) * _1257;
        float _1302 = _1225 * 0.5;
        float _1303 = _1235 * 0.5;
        float _1304 = _1245 * 0.5;
        float _1305 = dot(vec3(_1302, _1303, _1304), vec3(_1302, _1303, _1304));
        float _1310 = (_1305 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1305);
        float _1318 = (dot(vec3(_559, _560, _561), vec3(_1310 * _1302, _1310 * _1303, _1310 * _1304)) + 1.0) * 0.5;
        float _4021 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1327 = sqrt(((_1303 * _1303) + (_1302 * _1302)) + (_1304 * _1304)) / (_1258 + 9.9999997473787516355514526367188e-06);
        float _4032 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _1329 = _1328 * 2.0;
        float _1333 = (1.0 - _1328) / (_1328 + 1.0);
        float _4043 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1343 = ((((1.0 - _1334) * (_1329 + 2.0)) * exp2(log2(isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * (_1329 + 1.0))) + _1334) * _1258;
        float _1344 = _1226 * 0.5;
        float _1345 = _1236 * 0.5;
        float _1346 = _1246 * 0.5;
        float _1347 = dot(vec3(_1344, _1345, _1346), vec3(_1344, _1345, _1346));
        float _1352 = (_1347 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1347);
        float _1360 = (dot(vec3(_559, _560, _561), vec3(_1352 * _1344, _1352 * _1345, _1352 * _1346)) + 1.0) * 0.5;
        float _4054 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1369 = sqrt(((_1345 * _1345) + (_1344 * _1344)) + (_1346 * _1346)) / (_1259 + 9.9999997473787516355514526367188e-06);
        float _4065 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1370 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _1371 = _1370 * 2.0;
        float _1375 = (1.0 - _1370) / (_1370 + 1.0);
        float _4076 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _1385 = ((((1.0 - _1376) * (_1371 + 2.0)) * exp2(log2(isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * (_1371 + 1.0))) + _1376) * _1259;
        _1393 = _1226;
        _1394 = _1225;
        _1395 = _1224;
        _1396 = _1236;
        _1397 = _1235;
        _1398 = _1234;
        _1399 = _1246;
        _1400 = _1245;
        _1401 = _1244;
        _1402 = _1259;
        _1403 = _1258;
        _1404 = _1257;
        _1405 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0)));
        _1406 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0)));
        _1407 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0)));
    }
    else
    {
        _1393 = _1084;
        _1394 = _1084;
        _1395 = _1084;
        _1396 = _1084;
        _1397 = _1084;
        _1398 = _1084;
        _1399 = _1084;
        _1400 = _1084;
        _1401 = _1084;
        _1402 = _1084;
        _1403 = _1084;
        _1404 = _1084;
        _1405 = 0.0;
        _1406 = 0.0;
        _1407 = 0.0;
    }
    float _1417 = (cbModelParam._m0[1u].x * (_1405 - _1096)) + _1096;
    float _1418 = (cbModelParam._m0[1u].x * (_1406 - _1097)) + _1097;
    float _1419 = (cbModelParam._m0[1u].x * (_1407 - _1098)) + _1098;
    float _1440 = fma(_1419, cbSceneParam._m0[89u].z, fma(_1418, cbSceneParam._m0[89u].y, _1417 * cbSceneParam._m0[89u].x));
    float _1443 = fma(_1419, cbSceneParam._m0[90u].z, fma(_1418, cbSceneParam._m0[90u].y, _1417 * cbSceneParam._m0[90u].x));
    float _1446 = fma(_1419, cbSceneParam._m0[91u].z, fma(_1418, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1417));
    float _1461 = _721 * 0.5;
    float _1462 = _722 * 0.5;
    float _1463 = _723 * 0.5;
    float _1464 = dot(vec4(_1461, _1462, _1463, 1.0), vec4(_1395, _1398, _1401, _1404));
    float _1467 = dot(vec4(_1461, _1462, _1463, 1.0), vec4(_1394, _1397, _1400, _1403));
    float _1470 = dot(vec4(_1461, _1462, _1463, 1.0), vec4(_1393, _1396, _1399, _1402));
    float _1504;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1477 = dot(vec4(_1461, _1462, _1463, 1.0), vec4(_1083, _1087, _1090, _1093));
        float _1481 = dot(vec4(_1461, _1462, _1463, 1.0), vec4(_1085, _1088, _1091, _1094));
        float _1485 = dot(vec4(_1461, _1462, _1463, 1.0), vec4(_1086, _1089, _1092, _1095));
        float _1492 = dot(vec4(cbModelParam._m0[39u]), vec4(_1461, _1462, _1463, 1.0));
        _1504 = dot(vec3(isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0)), isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0)), isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1492) ? 0.0 : (isnan(0.0) ? _1492 : max(0.0, _1492))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1504 = 1.0;
    }
    float _1515;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1506 = dot(vec4(cbModelParam._m0[40u]), vec4(_1461, _1462, _1463, 1.0));
        _1515 = dot(vec3(isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0)), isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0)), isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1506) ? 0.0 : (isnan(0.0) ? _1506 : max(0.0, _1506))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1515 = 1.0;
    }
    float _1519 = (_1515 * cbModelParam._m0[1u].x) + (_1504 * (1.0 - cbModelParam._m0[1u].x));
    float _1529 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _562);
    float _1530 = isnan(_1529) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1529 : min(cbModelParam._m0[25u].z, _1529));
    float _1610;
    float _1612;
    float _1614;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1577 = fma(_782, cbModelParam._m0[13u].z, fma(_778, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _774)) + cbModelParam._m0[13u].w;
        float _1581 = fma(_782, cbModelParam._m0[14u].z, fma(_778, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _774)) + cbModelParam._m0[14u].w;
        float _1585 = fma(_782, cbModelParam._m0[15u].z, fma(_778, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _774)) + cbModelParam._m0[15u].w;
        float _1588 = fma(_723, cbModelParam._m0[13u].z, fma(_722, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _721));
        float _1591 = fma(_723, cbModelParam._m0[14u].z, fma(_722, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _721));
        float _1594 = fma(_723, cbModelParam._m0[15u].z, fma(_722, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _721));
        float _1622;
        if (_1588 > 0.0)
        {
            _1622 = abs((1.0 - _1577) / _1588);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1588 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1577 + 1.0) / _1588);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1622 = frontier_phi_14_12_ladder;
        }
        float _1792;
        if (_1591 > 0.0)
        {
            _1792 = abs((1.0 - _1581) / _1591);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1591 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1581 + 1.0) / _1591);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1792 = frontier_phi_23_19_ladder;
        }
        float _2088;
        if (_1594 > 0.0)
        {
            _2088 = abs((1.0 - _1585) / _1594);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1594 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1585 + 1.0) / _1594);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2088 = frontier_phi_35_30_ladder;
        }
        float _2090 = isnan(_1792) ? _1622 : (isnan(_1622) ? _1792 : min(_1622, _1792));
        float _2091 = isnan(_2088) ? _2090 : (isnan(_2090) ? _2088 : min(_2090, _2088));
        float _2095 = (_2091 * _1588) + _1577;
        float _2096 = (_2091 * _1591) + _1581;
        float _2097 = (_2091 * _1594) + _1585;
        float _2098 = _2091 * 9.9999997473787516355514526367188e-05;
        float _2100 = (-1.0) - _2098;
        float _2102 = _2098 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2097 > _2102) || ((_2097 < _2100) || ((_2096 > _2102) || ((_2096 < _2100) || ((_2095 < _2100) || (_2095 > _2102))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2242 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2097, cbModelParam._m0[9u].z, fma(_2096, cbModelParam._m0[9u].y, _2095 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2097, cbModelParam._m0[10u].z, fma(_2096, cbModelParam._m0[10u].y, _2095 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2097, cbModelParam._m0[11u].z, fma(_2096, cbModelParam._m0[11u].y, _2095 * cbModelParam._m0[11u].x))), _1530);
            frontier_phi_13_35_ladder = _2242.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2242.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2242.x * cbModelParam._m0[1u].y;
        }
        _1610 = frontier_phi_13_35_ladder_2;
        _1612 = frontier_phi_13_35_ladder_1;
        _1614 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1598 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_721, _722, _723), _1530);
        _1610 = _1598.x * cbModelParam._m0[1u].y;
        _1612 = _1598.y * cbModelParam._m0[1u].y;
        _1614 = _1598.z * cbModelParam._m0[1u].y;
    }
    float _1618 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _562);
    float _1619 = isnan(_1618) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1618 : min(cbModelParam._m0[25u].w, _1618));
    float _1709;
    float _1711;
    float _1713;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1673 = fma(_782, cbModelParam._m0[21u].z, fma(_778, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _774)) + cbModelParam._m0[21u].w;
        float _1677 = fma(_782, cbModelParam._m0[22u].z, fma(_778, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _774)) + cbModelParam._m0[22u].w;
        float _1681 = fma(_782, cbModelParam._m0[23u].z, fma(_778, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _774)) + cbModelParam._m0[23u].w;
        float _1684 = fma(_723, cbModelParam._m0[21u].z, fma(_722, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _721));
        float _1687 = fma(_723, cbModelParam._m0[22u].z, fma(_722, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _721));
        float _1690 = fma(_723, cbModelParam._m0[23u].z, fma(_722, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _721));
        float _1797;
        if (_1684 > 0.0)
        {
            _1797 = abs((1.0 - _1673) / _1684);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1684 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1673 + 1.0) / _1684);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1797 = frontier_phi_25_21_ladder;
        }
        float _2115;
        if (_1687 > 0.0)
        {
            _2115 = abs((1.0 - _1677) / _1687);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1687 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1677 + 1.0) / _1687);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2115 = frontier_phi_37_32_ladder;
        }
        float _2442;
        if (_1690 > 0.0)
        {
            _2442 = abs((1.0 - _1681) / _1690);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1690 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1681 + 1.0) / _1690);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2442 = frontier_phi_47_44_ladder;
        }
        float _2444 = isnan(_2115) ? _1797 : (isnan(_1797) ? _2115 : min(_1797, _2115));
        float _2445 = isnan(_2442) ? _2444 : (isnan(_2444) ? _2442 : min(_2444, _2442));
        float _2449 = (_2445 * _1684) + _1673;
        float _2450 = (_2445 * _1687) + _1677;
        float _2451 = (_2445 * _1690) + _1681;
        float _2452 = _2445 * 9.9999997473787516355514526367188e-05;
        float _2453 = (-1.0) - _2452;
        float _2455 = _2452 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2451 > _2455) || ((_2451 < _2453) || ((_2450 > _2455) || ((_2450 < _2453) || ((_2449 < _2453) || (_2449 > _2455))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2569 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2451, cbModelParam._m0[17u].z, fma(_2450, cbModelParam._m0[17u].y, _2449 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2451, cbModelParam._m0[18u].z, fma(_2450, cbModelParam._m0[18u].y, _2449 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2451, cbModelParam._m0[19u].z, fma(_2450, cbModelParam._m0[19u].y, _2449 * cbModelParam._m0[19u].x))), _1619);
            frontier_phi_22_47_ladder = _2569.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2569.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2569.x * cbModelParam._m0[1u].z;
        }
        _1709 = frontier_phi_22_47_ladder_2;
        _1711 = frontier_phi_22_47_ladder_1;
        _1713 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1693 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_721, _722, _723), _1619);
        _1709 = _1693.x * cbModelParam._m0[1u].z;
        _1711 = _1693.y * cbModelParam._m0[1u].z;
        _1713 = _1693.z * cbModelParam._m0[1u].z;
    }
    float _1725 = ((((1.0 - _742) * ((_729 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_742 * _729)) * _713;
    float _1726 = _1725 * ((cbModelParam._m0[1u].w * (_1709 - _1610)) + _1610);
    float _1727 = _1725 * ((cbModelParam._m0[1u].w * (_1711 - _1612)) + _1612);
    float _1728 = _1725 * ((cbModelParam._m0[1u].w * (_1713 - _1614)) + _1614);
    float _1731 = fma(_1728, cbSceneParam._m0[89u].z, fma(_1727, cbSceneParam._m0[89u].y, _1726 * cbSceneParam._m0[89u].x));
    float _1734 = fma(_1728, cbSceneParam._m0[90u].z, fma(_1727, cbSceneParam._m0[90u].y, _1726 * cbSceneParam._m0[90u].x));
    float _1737 = fma(_1728, cbSceneParam._m0[91u].z, fma(_1727, cbSceneParam._m0[91u].y, _1726 * cbSceneParam._m0[91u].x));
    float _1771 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1775 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1779 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1783 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1784 = _1771 / _1783;
    float _1785 = _1775 / _1783;
    float _1786 = _1779 / _1783;
    float _1933;
    float _1934;
    float _1935;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1813 = ((uint(_1786 > cbSceneParam._m0[59u].y) + uint(_1786 > cbSceneParam._m0[59u].x)) + uint(_1786 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1814 = _1813 + 43u;
        uint _1822 = _1813 + 44u;
        uint _1830 = _1813 + 45u;
        uint _1838 = _1813 + 46u;
        float _1849 = fma(_1783, cbSceneParam._m0[_1814].w, fma(_1779, cbSceneParam._m0[_1814].z, fma(_1775, cbSceneParam._m0[_1814].y, _1771 * cbSceneParam._m0[_1814].x)));
        float _1853 = fma(_1783, cbSceneParam._m0[_1822].w, fma(_1779, cbSceneParam._m0[_1822].z, fma(_1775, cbSceneParam._m0[_1822].y, _1771 * cbSceneParam._m0[_1822].x)));
        float _1861 = fma(_1783, cbSceneParam._m0[_1838].w, fma(_1779, cbSceneParam._m0[_1838].z, fma(_1775, cbSceneParam._m0[_1838].y, _1771 * cbSceneParam._m0[_1838].x)));
        float _1866 = cbSceneParam._m0[33u].z * _1861;
        float _1868 = cbSceneParam._m0[33u].w * _1861;
        float _1871 = fma(_1783, cbSceneParam._m0[_1830].w, fma(_1779, cbSceneParam._m0[_1830].z, fma(_1775, cbSceneParam._m0[_1830].y, _1771 * cbSceneParam._m0[_1830].x))) / _1861;
        float _1919 = (cbSceneParam._m0[33u].x - sqrt(((_1785 * _1785) + (_1784 * _1784)) + (_1786 * _1786))) * cbSceneParam._m0[33u].y;
        float _4202 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
        float _1926 = (isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1866 + _1849) / _1861, (_1868 + _1853) / _1861), _1871), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1868 + _1849) / _1861, (_1853 - _1866) / _1861), _1871), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1849 - _1866) / _1861, (_1853 - _1868) / _1861), _1871), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1849 - _1868) / _1861, (_1866 + _1853) / _1861), _1871), 0.0)).x), vec4(0.25)));
        _1933 = 1.0 - (_1926 * cbSceneParam._m0[34u].x);
        _1934 = 1.0 - (_1926 * cbSceneParam._m0[34u].y);
        _1935 = 1.0 - (_1926 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1933 = 1.0;
        _1934 = 1.0;
        _1935 = 1.0;
    }
    float _1999;
    float _2001;
    float _2003;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1987 = fma(_1783, cbSceneParam._m0[63u].w, fma(_1779, cbSceneParam._m0[63u].z, fma(_1775, cbSceneParam._m0[63u].y, _1771 * cbSceneParam._m0[63u].x)));
        float _1988 = fma(_1783, cbSceneParam._m0[60u].w, fma(_1779, cbSceneParam._m0[60u].z, fma(_1775, cbSceneParam._m0[60u].y, _1771 * cbSceneParam._m0[60u].x))) / _1987;
        float _1989 = fma(_1783, cbSceneParam._m0[61u].w, fma(_1779, cbSceneParam._m0[61u].z, fma(_1775, cbSceneParam._m0[61u].y, _1771 * cbSceneParam._m0[61u].x))) / _1987;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1988 >= cbSceneParam._m0[64u].x) && (_1989 >= cbSceneParam._m0[64u].y)) && (_1988 <= cbSceneParam._m0[64u].z)) && (_1989 <= cbSceneParam._m0[64u].w))
        {
            float _2128 = fma(_1783, cbSceneParam._m0[62u].w, fma(_1779, cbSceneParam._m0[62u].z, fma(_1775, cbSceneParam._m0[62u].y, _1771 * cbSceneParam._m0[62u].x))) / _1987;
            float _2132 = isnan(cbSceneParam._m0[41u].w) ? _2128 : (isnan(_2128) ? cbSceneParam._m0[41u].w : max(_2128, cbSceneParam._m0[41u].w));
            float _2175 = (cbSceneParam._m0[33u].x - sqrt(((_1785 * _1785) + (_1784 * _1784)) + (_1786 * _1786))) * cbSceneParam._m0[33u].y;
            float _4218 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
            float _2182 = (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1988, cbSceneParam._m0[33u].w + _1989), _2132), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1988, _1989 - cbSceneParam._m0[33u].z), _2132), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1988 - cbSceneParam._m0[33u].z, _1989 - cbSceneParam._m0[33u].w), _2132), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1988 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1989), _2132), 0.0)).x), vec4(0.25)));
            float _2186 = 1.0 - (_2182 * cbSceneParam._m0[34u].x);
            float _2187 = 1.0 - (_2182 * cbSceneParam._m0[34u].y);
            float _2188 = 1.0 - (_2182 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2188) ? _1935 : (isnan(_1935) ? _2188 : min(_1935, _2188));
            frontier_phi_34_33_ladder_1 = isnan(_2187) ? _1934 : (isnan(_1934) ? _2187 : min(_1934, _2187));
            frontier_phi_34_33_ladder_2 = isnan(_2186) ? _1933 : (isnan(_1933) ? _2186 : min(_1933, _2186));
        }
        else
        {
            frontier_phi_34_33_ladder = _1935;
            frontier_phi_34_33_ladder_1 = _1934;
            frontier_phi_34_33_ladder_2 = _1933;
        }
        _1999 = frontier_phi_34_33_ladder_2;
        _2001 = frontier_phi_34_33_ladder_1;
        _2003 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1999 = _1933;
        _2001 = _1934;
        _2003 = _1935;
    }
    uvec4 _2008 = floatBitsToUint(cbInstanceData._m0[_688 + 5u]);
    uint _2010 = _2008.x * 14u;
    uint _2011 = _2010 + 13u;
    float _2018 = _713 + (-1.0);
    float _2023 = (cbLight._m0[_2011].x * _2018) + 1.0;
    float _2024 = (cbLight._m0[_2011].y * _2018) + 1.0;
    float _2025 = (cbLight._m0[_2011].z * _2018) + 1.0;
    float _2026 = (cbLight._m0[_2011].w * _2018) + 1.0;
    uint _2027 = _2010 + 5u;
    float _2033 = isnan(1.0) ? _2024 : (isnan(_2024) ? 1.0 : min(_2024, 1.0));
    uint _2037 = _2010 + 4u;
    float _2047 = isnan(1.0) ? _2023 : (isnan(_2023) ? 1.0 : min(_2023, 1.0));
    uint _2051 = _2010 | 1u;
    float _2062 = dot(vec3(cbLight._m0[_2010].xyz), vec3(_559, _560, _561));
    float _2065 = dot(vec3(cbLight._m0[_2051].xyz), vec3(_559, _560, _561));
    float _4254 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
    float _4265 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
    float _2070 = (isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * 0.3183098733425140380859375;
    float _2072 = (isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0))) * 0.3183098733425140380859375;
    float _2079 = ((cbLight._m0[_2027].x * _2033) * _2072) + (((cbLight._m0[_2037].x * _1999) * _2047) * _2070);
    float _2080 = ((_2033 * cbLight._m0[_2027].y) * _2072) + (((cbLight._m0[_2037].y * _2001) * _2047) * _2070);
    float _2081 = ((_2033 * cbLight._m0[_2027].z) * _2072) + (((cbLight._m0[_2037].z * _2003) * _2047) * _2070);
    uvec4 _2085 = floatBitsToUint(cbLight._m0[_2010 + 12u]);
    bool _2087 = _2085.x == 0u;
    float _2189;
    float _2191;
    float _2193;
    if (_2087)
    {
        _2189 = _2079;
        _2191 = _2080;
        _2193 = _2081;
    }
    else
    {
        uint _2197 = _2010 + 6u;
        float _2213 = (dot(vec3(cbLight._m0[_2010 + 2u].xyz), vec3(_559, _560, _561)) * 0.5) + 0.5;
        float _2214 = _2213 * _2213;
        float _4276 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
        float _2215 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _2216 = isnan(1.0) ? _2025 : (isnan(_2025) ? 1.0 : min(_2025, 1.0));
        _2189 = (((cbLight._m0[_2197].x * 0.3183098733425140380859375) * _2215) * _2216) + _2079;
        _2191 = (((cbLight._m0[_2197].y * 0.3183098733425140380859375) * _2215) * _2216) + _2080;
        _2193 = (((cbLight._m0[_2197].z * 0.3183098733425140380859375) * _2215) * _2216) + _2081;
    }
    bool _2196 = _2085.y == 0u;
    float _2251;
    float _2253;
    float _2255;
    if (_2196)
    {
        _2251 = _2189;
        _2253 = _2191;
        _2255 = _2193;
    }
    else
    {
        uint _2413 = _2010 + 7u;
        float _2429 = (dot(vec3(cbLight._m0[_2010 + 3u].xyz), vec3(_559, _560, _561)) * 0.5) + 0.5;
        float _2430 = _2429 * _2429;
        float _4292 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
        float _2431 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
        float _2432 = isnan(1.0) ? _2026 : (isnan(_2026) ? 1.0 : min(_2026, 1.0));
        _2251 = (((cbLight._m0[_2413].x * 0.3183098733425140380859375) * _2431) * _2432) + _2189;
        _2253 = (((cbLight._m0[_2413].y * 0.3183098733425140380859375) * _2431) * _2432) + _2191;
        _2255 = (((cbLight._m0[_2413].z * 0.3183098733425140380859375) * _2431) * _2432) + _2193;
    }
    uint _2258 = _2010 + 8u;
    float _2271 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2010].w)) * _562) * 0.949999988079071044921875);
    float _2272 = _2271 * _2271;
    float _2273 = cbLight._m0[_2010].x + _639;
    float _2274 = cbLight._m0[_2010].y + _640;
    float _2275 = cbLight._m0[_2010].z + _641;
    float _2279 = inversesqrt(dot(vec3(_2273, _2274, _2275), vec3(_2273, _2274, _2275)));
    float _2280 = _2279 * _2273;
    float _2281 = _2279 * _2274;
    float _2282 = _2279 * _2275;
    float _2283 = dot(vec3(_559, _560, _561), vec3(cbLight._m0[_2010].xyz));
    float _4308 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
    float _2286 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
    float _4319 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _2287 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
    float _2288 = dot(vec3(_559, _560, _561), vec3(_2280, _2281, _2282));
    float _4330 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
    float _2291 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
    float _2292 = dot(vec3(cbLight._m0[_2010].xyz), vec3(_2280, _2281, _2282));
    float _4341 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
    float _2296 = _2272 * _2272;
    float _2300 = ((_2291 * _2291) * (_2296 + (-1.0))) + 1.0;
    float _2311 = (exp2(log2(1.0 - (isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2312 = 1.0 - _2272;
    float _2323 = (0.5 / (((_2287 * ((_2286 * _2312) + _2272)) + 9.9999999392252902907785028219223e-09) + (((_2287 * _2312) + _2272) * _2286))) * _2286;
    float _4352 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
    float _2325 = (isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0))) * (_2296 / ((_2300 * _2300) * 3.141590118408203125));
    uint _2339 = _2010 + 9u;
    float _2350 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2051].w)) * _562) * 0.949999988079071044921875);
    float _2351 = _2350 * _2350;
    float _2352 = cbLight._m0[_2051].x + _639;
    float _2353 = cbLight._m0[_2051].y + _640;
    float _2354 = cbLight._m0[_2051].z + _641;
    float _2358 = inversesqrt(dot(vec3(_2352, _2353, _2354), vec3(_2352, _2353, _2354)));
    float _2359 = _2358 * _2352;
    float _2360 = _2358 * _2353;
    float _2361 = _2358 * _2354;
    float _2362 = dot(vec3(_559, _560, _561), vec3(cbLight._m0[_2051].xyz));
    float _4363 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
    float _2365 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
    float _2366 = dot(vec3(_559, _560, _561), vec3(_2359, _2360, _2361));
    float _4374 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
    float _2369 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
    float _2370 = dot(vec3(cbLight._m0[_2051].xyz), vec3(_2359, _2360, _2361));
    float _4385 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
    float _2374 = _2351 * _2351;
    float _2378 = ((_2369 * _2369) * (_2374 + (-1.0))) + 1.0;
    float _2387 = (exp2(log2(1.0 - (isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2388 = 1.0 - _2351;
    float _2398 = (0.5 / (((_2287 * ((_2365 * _2388) + _2351)) + 9.9999999392252902907785028219223e-09) + (((_2287 * _2388) + _2351) * _2365))) * _2365;
    float _4396 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
    float _2400 = (isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0))) * (_2374 / ((_2378 * _2378) * 3.141590118408203125));
    float _2410 = (((_2387 * cbLight._m0[_2339].x) * _2400) * _2033) + ((((cbLight._m0[_2258].x * _1999) * _2311) * _2325) * _2047);
    float _2411 = (((_2387 * cbLight._m0[_2339].y) * _2400) * _2033) + ((((cbLight._m0[_2258].y * _2001) * _2311) * _2325) * _2047);
    float _2412 = (((_2387 * cbLight._m0[_2339].z) * _2400) * _2033) + ((((cbLight._m0[_2258].z * _2003) * _2311) * _2325) * _2047);
    float _2468;
    float _2470;
    float _2472;
    if (_2087)
    {
        _2468 = _2410;
        _2470 = _2411;
        _2472 = _2412;
    }
    else
    {
        uint _2474 = _2010 + 2u;
        uint _2478 = _2010 + 10u;
        float _2492 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2474].w)) * _562) * 0.949999988079071044921875);
        float _2493 = _2492 * _2492;
        float _2494 = cbLight._m0[_2474].x + _639;
        float _2495 = cbLight._m0[_2474].y + _640;
        float _2496 = cbLight._m0[_2474].z + _641;
        float _2500 = inversesqrt(dot(vec3(_2494, _2495, _2496), vec3(_2494, _2495, _2496)));
        float _2501 = _2500 * _2494;
        float _2502 = _2500 * _2495;
        float _2503 = _2500 * _2496;
        float _2504 = dot(vec3(_559, _560, _561), vec3(cbLight._m0[_2474].xyz));
        float _4407 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
        float _2507 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
        float _2508 = dot(vec3(_559, _560, _561), vec3(_2501, _2502, _2503));
        float _4418 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
        float _2511 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
        float _2512 = dot(vec3(cbLight._m0[_2474].xyz), vec3(_2501, _2502, _2503));
        float _4429 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
        float _2516 = _2493 * _2493;
        float _2520 = ((_2511 * _2511) * (_2516 + (-1.0))) + 1.0;
        float _2529 = (exp2(log2(1.0 - (isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2530 = 1.0 - _2493;
        float _2540 = (0.5 / (((_2287 * ((_2507 * _2530) + _2493)) + 9.9999999392252902907785028219223e-09) + (((_2287 * _2530) + _2493) * _2507))) * _2507;
        float _4440 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
        float _2542 = (isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0))) * (_2516 / ((_2520 * _2520) * 3.141590118408203125));
        float _2543 = isnan(1.0) ? _2025 : (isnan(_2025) ? 1.0 : min(_2025, 1.0));
        _2468 = (((_2529 * cbLight._m0[_2478].x) * _2542) * _2543) + _2410;
        _2470 = (((_2529 * cbLight._m0[_2478].y) * _2542) * _2543) + _2411;
        _2472 = (((_2529 * cbLight._m0[_2478].z) * _2542) * _2543) + _2412;
    }
    float _2574;
    float _2576;
    float _2578;
    if (_2196)
    {
        _2574 = _2468;
        _2576 = _2470;
        _2578 = _2472;
    }
    else
    {
        uint _2585 = _2010 + 3u;
        uint _2589 = _2010 + 11u;
        float _2603 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2585].w)) * _562) * 0.949999988079071044921875);
        float _2604 = _2603 * _2603;
        float _2605 = cbLight._m0[_2585].x + _639;
        float _2606 = cbLight._m0[_2585].y + _640;
        float _2607 = cbLight._m0[_2585].z + _641;
        float _2611 = inversesqrt(dot(vec3(_2605, _2606, _2607), vec3(_2605, _2606, _2607)));
        float _2612 = _2611 * _2605;
        float _2613 = _2611 * _2606;
        float _2614 = _2611 * _2607;
        float _2615 = dot(vec3(_559, _560, _561), vec3(cbLight._m0[_2585].xyz));
        float _4456 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
        float _2618 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
        float _2619 = dot(vec3(_559, _560, _561), vec3(_2612, _2613, _2614));
        float _4467 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
        float _2622 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
        float _2623 = dot(vec3(cbLight._m0[_2585].xyz), vec3(_2612, _2613, _2614));
        float _4478 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
        float _2627 = _2604 * _2604;
        float _2631 = ((_2622 * _2622) * (_2627 + (-1.0))) + 1.0;
        float _2640 = (exp2(log2(1.0 - (isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2641 = 1.0 - _2604;
        float _2651 = (0.5 / (((_2287 * ((_2618 * _2641) + _2604)) + 9.9999999392252902907785028219223e-09) + (((_2287 * _2641) + _2604) * _2618))) * _2618;
        float _4489 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
        float _2653 = (isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0))) * (_2627 / ((_2631 * _2631) * 3.141590118408203125));
        float _2654 = isnan(1.0) ? _2026 : (isnan(_2026) ? 1.0 : min(_2026, 1.0));
        _2574 = (((_2640 * cbLight._m0[_2589].x) * _2653) * _2654) + _2468;
        _2576 = (((_2640 * cbLight._m0[_2589].y) * _2653) * _2654) + _2470;
        _2578 = (((_2640 * cbLight._m0[_2589].z) * _2653) * _2654) + _2472;
    }
    float _2720;
    float _2722;
    float _2724;
    float _2726;
    float _2728;
    float _2730;
    if (_2008.y == 0u)
    {
        uvec4 _2675 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2676 = _2675.x;
        uint _2687 = uint((float(_2675.y) * floor(float(uint(cbSceneParam._m0[85u].y * _648) / _2676))) + floor(float(uint(cbSceneParam._m0[85u].x * _647) / _2676)));
        float _2697 = (log2(_1786 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2698 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
        uint _2701 = uint(isnan(14.0) ? _2698 : (isnan(_2698) ? 14.0 : min(_2698, 14.0)));
        uvec4 _2706 = texelFetch(g_lightClusterGridBuffer, int(((_2701 << 2u) + (_2687 << 6u)) >> 2u));
        uint _2707 = _2706.x;
        uint _2708 = _2675.z;
        float _2816;
        float _2818;
        float _2820;
        float _2822;
        float _2824;
        float _2826;
        if (((((1u << ((_2708 >> 4u) & 15u)) + 4294967295u) & _2707) == 0u) || ((_2708 & 240u) == 0u))
        {
            _2816 = 0.0;
            _2818 = 0.0;
            _2820 = 0.0;
            _2822 = 0.0;
            _2824 = 0.0;
            _2826 = 0.0;
        }
        else
        {
            float _2817;
            float _2819;
            float _2821;
            float _2823;
            float _2825;
            float _2827;
            float _2969 = 0.0;
            float _2970 = 0.0;
            float _2971 = 0.0;
            float _2972 = 0.0;
            float _2973 = 0.0;
            float _2974 = 0.0;
            uint _2975 = 0u;
            uint _2984;
            bool _2985;
            for (;;)
            {
                _2984 = texelFetch(g_lightClassification, int((((_2701 << 5u) + (_2687 << 9u)) + (_2975 << 2u)) >> 2u)).x;
                _2985 = _2984 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2985)
                {
                    frontier_phi_66_pred = _2974;
                    frontier_phi_66_pred_1 = _2973;
                    frontier_phi_66_pred_2 = _2972;
                    frontier_phi_66_pred_3 = _2971;
                    frontier_phi_66_pred_4 = _2970;
                    frontier_phi_66_pred_5 = _2969;
                }
                else
                {
                    float _3093;
                    float _3094;
                    float _3095;
                    float _3096;
                    float _3097;
                    float _3098;
                    uint _3099;
                    _3093 = _2969;
                    _3094 = _2970;
                    _3095 = _2971;
                    _3096 = _2972;
                    _3097 = _2973;
                    _3098 = _2974;
                    _3099 = _2984;
                    float _3025;
                    float _3026;
                    float _3027;
                    float _3028;
                    float _3029;
                    float _3030;
                    for (;;)
                    {
                        uint _3103 = uint(findLSB(_3099)) + (_2975 << 5u);
                        uint _3100 = (_3099 + 4294967295u) & _3099;
                        uint _3105 = _3103 * 48u;
                        vec4 _3119 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3105)).x, texelFetch(g_PointLightRenderingBuffer, int(_3105 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3105 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3105 + 3u)).x));
                        uint _3125 = (_3103 * 48u) + 4u;
                        vec4 _3138 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3125)).x, texelFetch(g_PointLightRenderingBuffer, int(_3125 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3125 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3125 + 3u)).x));
                        uint _3144 = (_3103 * 48u) + 8u;
                        vec3 _3155 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3144)).x, texelFetch(g_PointLightRenderingBuffer, int(_3144 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3144 + 2u)).x));
                        float _3159 = _3119.x - _1784;
                        float _3160 = _3119.y - _1785;
                        float _3161 = _3119.z - _1786;
                        float _3162 = dot(vec3(_3159, _3160, _3161), vec3(_3159, _3160, _3161));
                        float _3165 = inversesqrt(_3162);
                        float _3166 = _3165 * _3159;
                        float _3167 = _3165 * _3160;
                        float _3168 = _3165 * _3161;
                        float _3169 = dot(vec3(_669, _672, _675), vec3(_3166, _3167, _3168));
                        float _3174 = 1.0 - (_3162 * _3119.w);
                        float _4515 = isnan(0.0) ? _3174 : (isnan(_3174) ? 0.0 : max(_3174, 0.0));
                        float _3175 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
                        float _3176 = sqrt(_3162) * _3138.w;
                        float _3179 = 1.39999997615814208984375 / (_3176 + 1.39999997615814208984375);
                        float _3180 = _3179 * _3179;
                        float _3183 = ((1.0 - _3180) * _3169) + _3180;
                        float _3186 = _3176 * _3176;
                        float _3190 = ((isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : max(_3183, 0.0))) * _3175) / ((_3186 * 0.699999988079071044921875) + 1.0);
                        float _3194 = (-0.0) - _1784;
                        float _3195 = (-0.0) - _1785;
                        float _3196 = (-0.0) - _1786;
                        float _3200 = inversesqrt(dot(vec3(_3194, _3195, _3196), vec3(_3194, _3195, _3196)));
                        float _3201 = _3200 * _3194;
                        float _3202 = _3200 * _3195;
                        float _3203 = _3200 * _3196;
                        float _3210 = exp2(log2(1.0 / ((_3186 * 3.5) + 5.0)) * 0.25);
                        float _3211 = 1.0 - _729;
                        float _3218 = sqrt(1.0 - ((1.0 - (_3211 * _3211)) * (1.0 - (_3210 * _3210))));
                        float _3219 = _3218 * _3218;
                        float _3220 = _3219 * _3219;
                        float _3221 = _3201 + _3166;
                        float _3222 = _3202 + _3167;
                        float _3223 = _3203 + _3168;
                        float _3227 = inversesqrt(dot(vec3(_3221, _3222, _3223), vec3(_3221, _3222, _3223)));
                        float _3231 = dot(vec3(_669, _672, _675), vec3(_3201, _3202, _3203));
                        float _4531 = isnan(0.0) ? _3231 : (isnan(_3231) ? 0.0 : max(_3231, 0.0));
                        float _3234 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
                        float _3235 = dot(vec3(_669, _672, _675), vec3(_3227 * _3221, _3227 * _3222, _3227 * _3223));
                        float _4542 = isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0));
                        float _3238 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
                        float _3242 = ((_3238 * _3238) * (_3220 + (-1.0))) + 1.0;
                        float _3243 = _3179 * _3219;
                        float _3244 = _3243 * _3243;
                        float _3247 = ((1.0 - _3244) * _3169) + _3244;
                        float _4553 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0));
                        float _3248 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
                        float _3249 = 1.0 - _3219;
                        float _3259 = (0.5 / (((_3248 * ((_3234 * _3249) + _3219)) + 9.9999999392252902907785028219223e-09) + (((_3248 * _3249) + _3219) * _3234))) * _3248;
                        float _4564 = isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0));
                        float _3270 = (((_3220 * 3.1415927410125732421875) * (isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0)))) / ((_3242 * _3242) * ((_3186 * 2.1991131305694580078125) + 3.141590118408203125))) * _3175;
                        _3028 = (_3190 * _3138.x) + _3096;
                        _3029 = (_3190 * _3138.y) + _3097;
                        _3030 = (_3190 * _3138.z) + _3098;
                        _3025 = (_3270 * _3155.x) + _3093;
                        _3026 = (_3270 * _3155.y) + _3094;
                        _3027 = (_3270 * _3155.z) + _3095;
                        if (_3100 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3093 = _3025;
                            _3094 = _3026;
                            _3095 = _3027;
                            _3096 = _3028;
                            _3097 = _3029;
                            _3098 = _3030;
                            _3099 = _3100;
                        }
                    }
                    frontier_phi_66_pred = _3030;
                    frontier_phi_66_pred_1 = _3029;
                    frontier_phi_66_pred_2 = _3028;
                    frontier_phi_66_pred_3 = _3027;
                    frontier_phi_66_pred_4 = _3026;
                    frontier_phi_66_pred_5 = _3025;
                }
                _2827 = frontier_phi_66_pred;
                _2825 = frontier_phi_66_pred_1;
                _2823 = frontier_phi_66_pred_2;
                _2821 = frontier_phi_66_pred_3;
                _2819 = frontier_phi_66_pred_4;
                _2817 = frontier_phi_66_pred_5;
                uint _2976 = _2975 + 1u;
                if (_2976 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2969 = _2817;
                    _2970 = _2819;
                    _2971 = _2821;
                    _2972 = _2823;
                    _2973 = _2825;
                    _2974 = _2827;
                    _2975 = _2976;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2816 = _2817;
            _2818 = _2819;
            _2820 = _2821;
            _2822 = _2823;
            _2824 = _2825;
            _2826 = _2827;
        }
        uvec4 _2830 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2831 = _2830.z;
        uint _2833 = (_2831 >> 8u) & 15u;
        float _2937;
        float _2939;
        float _2941;
        float _2943;
        float _2945;
        float _2947;
        if (((4294967295u << _2833) & _2707) == 0u)
        {
            _2937 = _2816;
            _2939 = _2818;
            _2941 = _2820;
            _2943 = _2822;
            _2945 = _2824;
            _2947 = _2826;
        }
        else
        {
            float _2962 = inversesqrt(dot(vec3(_1784, _1785, _1786), vec3(_1784, _1785, _1786)));
            float _2963 = _2962 * _1784;
            float _2964 = _2962 * _1785;
            float _2965 = _2962 * _1786;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2833 < ((_2831 >> 12u) & 15u))
            {
                float _2938;
                float _2940;
                float _2942;
                float _2944;
                float _2946;
                float _2948;
                float _3076 = _2816;
                float _3077 = _2818;
                float _3078 = _2820;
                float _3079 = _2822;
                float _3080 = _2824;
                float _3081 = _2826;
                uint _3082 = _2833;
                uint _3091;
                bool _3092;
                for (;;)
                {
                    _3091 = texelFetch(g_lightClassification, int((((_2701 << 5u) + (_2687 << 9u)) + (_3082 << 2u)) >> 2u)).x;
                    _3092 = _3091 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3092)
                    {
                        frontier_phi_72_pred = _3081;
                        frontier_phi_72_pred_1 = _3080;
                        frontier_phi_72_pred_2 = _3079;
                        frontier_phi_72_pred_3 = _3078;
                        frontier_phi_72_pred_4 = _3077;
                        frontier_phi_72_pred_5 = _3076;
                    }
                    else
                    {
                        float _3275;
                        float _3276;
                        float _3277;
                        float _3278;
                        float _3279;
                        float _3280;
                        float _3569;
                        float _3570;
                        float _3571;
                        float _3572;
                        float _3573;
                        float _3574;
                        float _3288 = _3076;
                        float _3289 = _3077;
                        float _3290 = _3078;
                        float _3291 = _3079;
                        float _3292 = _3080;
                        float _3293 = _3081;
                        uint _3294 = _3091;
                        uint _3295;
                        vec4 _3320;
                        float _3321;
                        vec4 _3336;
                        vec3 _3348;
                        vec4 _3363;
                        vec4 _3378;
                        float _3425;
                        bool _3426;
                        for (;;)
                        {
                            uint _3305 = ((_3082 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3294));
                            _3295 = (_3294 + 4294967295u) & _3294;
                            uint _3307 = _3305 * 40u;
                            _3320 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3307)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 3u)).x));
                            _3321 = _3320.w;
                            uint _3323 = (_3305 * 40u) + 4u;
                            _3336 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3323)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 3u)).x));
                            uint _3338 = (_3305 * 40u) + 8u;
                            _3348 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3338)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 2u)).x));
                            uint _3350 = (_3305 * 40u) + 16u;
                            _3363 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3350)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 3u)).x));
                            uint _3365 = (_3305 * 40u) + 20u;
                            _3378 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3365)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 3u)).x));
                            uint _3381 = (_3305 * 40u) + 24u;
                            vec4 _3394 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3381)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 3u)).x));
                            uint _3400 = (_3305 * 40u) + 28u;
                            vec4 _3413 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3400)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 3u)).x));
                            _3425 = fma(_1786, _3413.z, fma(_1785, _3413.y, _3413.x * _1784)) + _3413.w;
                            _3426 = !((fma(_1786, _3394.z, fma(_1785, _3394.y, _3394.x * _1784)) + _3394.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3426)
                            {
                                float _3453 = _3320.x - _1784;
                                float _3454 = _3320.y - _1785;
                                float _3455 = _3320.z - _1786;
                                float _3456 = dot(vec3(_3453, _3454, _3455), vec3(_3453, _3454, _3455));
                                float _3459 = inversesqrt(_3456);
                                float _3460 = _3459 * _3453;
                                float _3461 = _3459 * _3454;
                                float _3462 = _3459 * _3455;
                                float _3466 = 1.0 - (_3456 / (_3321 * _3321));
                                float _4575 = isnan(0.0) ? _3466 : (isnan(_3466) ? 0.0 : max(_3466, 0.0));
                                float _3467 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
                                float _3471 = sqrt(_3456) * _3336.w;
                                float _3473 = 1.39999997615814208984375 / (_3471 + 1.39999997615814208984375);
                                float _3474 = _3473 * _3473;
                                float _3477 = ((1.0 - _3474) * dot(vec3(_3460, _3461, _3462), vec3(_669, _672, _675))) + _3474;
                                float _3480 = _3471 * _3471;
                                float _3484 = (fma(_1786, _3363.z, fma(_1785, _3363.y, _3363.x * _1784)) + _3363.w) / _3425;
                                float _3485 = (fma(_1786, _3378.z, fma(_1785, _3378.y, _3378.x * _1784)) + _3378.w) / _3425;
                                float _3489 = 1.0 - dot(vec2(_3484, _3485), vec2(_3484, _3485));
                                float _4591 = isnan(0.0) ? _3489 : (isnan(_3489) ? 0.0 : max(_3489, 0.0));
                                float _3490 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
                                float _3491 = _3490 * (((isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : max(_3477, 0.0))) * _3467) / ((_3480 * 0.699999988079071044921875) + 1.0));
                                float _3503 = exp2(log2(1.0 / ((_3480 * 3.5) + 5.0)) * 0.25);
                                float _3504 = 1.0 - _729;
                                float _3511 = sqrt(1.0 - ((1.0 - (_3504 * _3504)) * (1.0 - (_3503 * _3503))));
                                float _3512 = _3511 * _3511;
                                float _3513 = _3512 * _3512;
                                float _3514 = _3460 - _2963;
                                float _3515 = _3461 - _2964;
                                float _3516 = _3462 - _2965;
                                float _3520 = inversesqrt(dot(vec3(_3514, _3515, _3516), vec3(_3514, _3515, _3516)));
                                float _3524 = dot(vec3(_669, _672, _675), vec3((-0.0) - _2963, (-0.0) - _2964, (-0.0) - _2965));
                                float _4602 = isnan(0.0) ? _3524 : (isnan(_3524) ? 0.0 : max(_3524, 0.0));
                                float _3527 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
                                float _3528 = dot(vec3(_669, _672, _675), vec3(_3520 * _3514, _3520 * _3515, _3520 * _3516));
                                float _4613 = isnan(0.0) ? _3528 : (isnan(_3528) ? 0.0 : max(_3528, 0.0));
                                float _3531 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
                                float _3535 = ((_3531 * _3531) * (_3513 + (-1.0))) + 1.0;
                                float _3536 = _3473 * _3512;
                                float _3537 = _3536 * _3536;
                                float _3543 = ((1.0 - _3537) * dot(vec3(_669, _672, _675), vec3(_3460, _3461, _3462))) + _3537;
                                float _4624 = isnan(0.0) ? _3543 : (isnan(_3543) ? 0.0 : max(_3543, 0.0));
                                float _3544 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
                                float _3545 = 1.0 - _3512;
                                float _3555 = (0.5 / (((_3544 * ((_3527 * _3545) + _3512)) + 9.9999999392252902907785028219223e-09) + (((_3544 * _3545) + _3512) * _3527))) * _3544;
                                float _4635 = isnan(0.0) ? _3555 : (isnan(_3555) ? 0.0 : max(_3555, 0.0));
                                float _3565 = (_3490 * _3467) * (((_3513 * 3.1415927410125732421875) * (isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0)))) / ((_3535 * _3535) * ((_3480 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3491 * _3336.y;
                                frontier_phi_78_pred_1 = _3491 * _3336.x;
                                frontier_phi_78_pred_2 = _3565 * _3348.z;
                                frontier_phi_78_pred_3 = _3565 * _3348.y;
                                frontier_phi_78_pred_4 = _3565 * _3348.x;
                                frontier_phi_78_pred_5 = _3491 * _3336.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3573 = frontier_phi_78_pred;
                            _3572 = frontier_phi_78_pred_1;
                            _3571 = frontier_phi_78_pred_2;
                            _3570 = frontier_phi_78_pred_3;
                            _3569 = frontier_phi_78_pred_4;
                            _3574 = frontier_phi_78_pred_5;
                            _3278 = _3572 + _3291;
                            _3279 = _3573 + _3292;
                            _3280 = _3574 + _3293;
                            _3275 = _3569 + _3288;
                            _3276 = _3570 + _3289;
                            _3277 = _3571 + _3290;
                            if (_3295 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3288 = _3275;
                                _3289 = _3276;
                                _3290 = _3277;
                                _3291 = _3278;
                                _3292 = _3279;
                                _3293 = _3280;
                                _3294 = _3295;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3280;
                        frontier_phi_72_pred_1 = _3279;
                        frontier_phi_72_pred_2 = _3278;
                        frontier_phi_72_pred_3 = _3277;
                        frontier_phi_72_pred_4 = _3276;
                        frontier_phi_72_pred_5 = _3275;
                    }
                    _2948 = frontier_phi_72_pred;
                    _2946 = frontier_phi_72_pred_1;
                    _2944 = frontier_phi_72_pred_2;
                    _2942 = frontier_phi_72_pred_3;
                    _2940 = frontier_phi_72_pred_4;
                    _2938 = frontier_phi_72_pred_5;
                    uint _3083 = _3082 + 1u;
                    if (_3083 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3076 = _2938;
                        _3077 = _2940;
                        _3078 = _2942;
                        _3079 = _2944;
                        _3080 = _2946;
                        _3081 = _2948;
                        _3082 = _3083;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2948;
                frontier_phi_60_61_ladder_1 = _2946;
                frontier_phi_60_61_ladder_2 = _2942;
                frontier_phi_60_61_ladder_3 = _2940;
                frontier_phi_60_61_ladder_4 = _2938;
                frontier_phi_60_61_ladder_5 = _2944;
            }
            else
            {
                frontier_phi_60_61_ladder = _2826;
                frontier_phi_60_61_ladder_1 = _2824;
                frontier_phi_60_61_ladder_2 = _2820;
                frontier_phi_60_61_ladder_3 = _2818;
                frontier_phi_60_61_ladder_4 = _2816;
                frontier_phi_60_61_ladder_5 = _2822;
            }
            _2937 = frontier_phi_60_61_ladder_4;
            _2939 = frontier_phi_60_61_ladder_3;
            _2941 = frontier_phi_60_61_ladder_2;
            _2943 = frontier_phi_60_61_ladder_5;
            _2945 = frontier_phi_60_61_ladder_1;
            _2947 = frontier_phi_60_61_ladder;
        }
        float _2952 = isnan(1.0) ? _713 : (isnan(_713) ? 1.0 : min(_713, 1.0));
        _2720 = (_2952 * _2943) + _2251;
        _2722 = (_2952 * _2945) + _2253;
        _2724 = (_2952 * _2947) + _2255;
        _2726 = ((_2937 * 0.039999999105930328369140625) * _2952) + _2574;
        _2728 = ((_2939 * 0.039999999105930328369140625) * _2952) + _2576;
        _2730 = ((_2941 * 0.039999999105930328369140625) * _2952) + _2578;
    }
    else
    {
        _2720 = _2251;
        _2722 = _2253;
        _2724 = _2255;
        _2726 = _2574;
        _2728 = _2576;
        _2730 = _2578;
    }
    uint _2736 = _689 + uint(cbMatDynParam._m0[0u].w);
    float _2742 = ((((((_475.x - _472) * _408) + _472) * cbMtdParam._m0[13u].x) + ((((_429.x - _426) * _408) + _426) * cbMtdParam._m0[11u].x)) * _290) * cbInstanceData._m0[_2736].x;
    float _2743 = ((((((_475.y - _473) * _408) + _473) * cbMtdParam._m0[13u].y) + ((((_429.y - _427) * _408) + _427) * cbMtdParam._m0[11u].y)) * _290) * cbInstanceData._m0[_2736].y;
    float _2744 = ((((((_475.z - _474) * _408) + _474) * cbMtdParam._m0[13u].z) + ((((_429.z - _428) * _408) + _428) * cbMtdParam._m0[11u].z)) * _290) * cbInstanceData._m0[_2736].z;
    float _4651 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _4662 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _4673 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _2761 = (((isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0))) * (_2720 + ((isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0))) * _713))) + ((_2726 + ((isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0))) * _1519)) * cbPerFrame._m0[3u].x)) + _2742;
    float _2763 = (_2743 + ((_2728 + ((isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0))) * _1519)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0))) * (_2722 + ((isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0))) * _713)));
    float _2765 = (_2744 + ((_2730 + ((isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0))) * _1519)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0))) * (_2724 + ((isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0))) * _713)));
    float _4699 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2778 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
    uint _2779 = _688 + 6u;
    float _2787 = _647 / cbSceneParam._m0[86u].x;
    float _2788 = _648 / cbSceneParam._m0[86u].y;
    vec4 _2802 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2787, _2788, (log2((isnan(cbSceneParam._m0[77u].w) ? _581 : (isnan(_581) ? cbSceneParam._m0[77u].w : min(_581, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2804 = _2802.x;
    float _2805 = _2802.y;
    float _2806 = _2802.z;
    float _2807 = _2802.w;
    float _2878;
    float _2880;
    float _2882;
    float _2884;
    if (_581 > cbSceneParam._m0[78u].w)
    {
        float _2841 = isnan(_581) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _581 : min(cbSceneParam._m0[80u].w, _581));
        float _2842 = _2841 / _581;
        float _2853 = _2842 * _632;
        float _2854 = _633 * _2842;
        float _2855 = (-0.0) - _2854;
        float _2856 = _2842 * _634;
        float _2858 = (cbSceneParam._m0[77u].w * _2855) / _2841;
        float _2859 = _2858 + cbSceneParam._m0[79u].w;
        float _2860 = cbSceneParam._m0[79u].w - _2854;
        float _2866 = sqrt(((_2853 * _2853) + (_2854 * _2854)) + (_2856 * _2856));
        float _2869 = (1.0 - (cbSceneParam._m0[77u].w / _2841)) * _2866;
        float _2874 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2876 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3038;
        if (abs((_2855 - _2858) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3038 = ((((_2859 > 0.0) ? exp2(_2874 * _2859) : (2.0 - exp2(_2876 * _2859))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2869;
        }
        else
        {
            float _2998 = 1.0 / cbSceneParam._m0[80u].x;
            float _2999 = isnan(_2860) ? _2859 : (isnan(_2859) ? _2860 : max(_2859, _2860));
            float _3000 = isnan(_2860) ? _2859 : (isnan(_2859) ? _2860 : min(_2859, _2860));
            float _3009 = isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : min(_2999, 0.0));
            float _3010 = isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : min(_3000, 0.0));
            _3038 = ((abs(_2866 / _2855) * cbSceneParam._m0[80u].y) * ((((_3009 - _3010) * 2.0) - ((exp2(_2874 * (isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0)))) - exp2(_2874 * (isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0))))) * _2998)) - ((exp2(_2876 * _3009) - exp2(_2876 * _3010)) * _2998))) + (_2869 * cbSceneParam._m0[80u].z);
        }
        vec4 _3040 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2787, _2788, 1.0), 0.0);
        float _3049 = exp2((_3038 * (-1.44269502162933349609375)) * (1.0 - _3040.w));
        float _3050 = log2(_3049);
        float _3066 = log2(_2807);
        _2878 = (exp2(_3066 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3050 * cbSceneParam._m0[78u].x)) * _3040.x) / cbSceneParam._m0[78u].x)) + _2804;
        _2880 = (exp2(_3066 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3050 * cbSceneParam._m0[78u].y)) * _3040.y) / cbSceneParam._m0[78u].y)) + _2805;
        _2882 = (exp2(_3066 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3050 * cbSceneParam._m0[78u].z)) * _3040.z) / cbSceneParam._m0[78u].z)) + _2806;
        _2884 = _3049 * _2807;
    }
    else
    {
        _2878 = _2804;
        _2880 = _2805;
        _2882 = _2806;
        _2884 = _2807;
    }
    float _2896 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2897 = _2896 == 3.0;
    float _2898 = log2(_2884);
    float _2902 = exp2(_2898 * cbSceneParam._m0[78u].x);
    float _2903 = exp2(_2898 * cbSceneParam._m0[78u].y);
    float _2904 = exp2(_2898 * cbSceneParam._m0[78u].z);
    float _2905 = _2902 * (isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0)));
    float _2906 = _2903 * (isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0)));
    float _2907 = _2904 * (isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0)));
    float _2916 = (_2896 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2916 * (_2897 ? _2905 : (_2905 + (cbSceneParam._m0[72u].w * _2878)));
    SV_Target.y = _2916 * (_2897 ? _2906 : (_2906 + (cbSceneParam._m0[72u].w * _2880)));
    SV_Target.z = _2916 * (_2897 ? _2907 : (_2907 + (cbSceneParam._m0[72u].w * _2882)));
    SV_Target.w = cbInstanceData._m0[_2779].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2742) * _2778) * _2902) * _2916;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2743) * _2778) * _2903) * _2916;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2744) * _2778) * _2904) * _2916;
    SV_Target_1.w = cbInstanceData._m0[_2779].w;
}


