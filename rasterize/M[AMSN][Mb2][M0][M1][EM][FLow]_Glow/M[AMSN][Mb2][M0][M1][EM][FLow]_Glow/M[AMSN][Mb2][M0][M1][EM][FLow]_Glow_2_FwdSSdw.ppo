#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1082;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _195 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _196 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _197 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _203 = inversesqrt(dot(vec3(_195, _196, _197), vec3(_195, _196, _197)));
    float _210 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _217 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _239 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _245 = _239.x * cbMtdParam._m0[9u].x;
    float _246 = _239.y * cbMtdParam._m0[9u].y;
    float _247 = _239.z * cbMtdParam._m0[9u].z;
    vec4 _264 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _285 = TEXCOORD_9.x - ((cbMtdParam._m0[16u].y * (1.0 - TEXCOORD_9.x)) * (_264.x + 0.00999999977648258209228515625));
    float _287 = _285 * (cbMtdParam._m0[16u].z + 1.0);
    float _3451 = isnan(0.0) ? _287 : (isnan(_287) ? 0.0 : max(_287, 0.0));
    float _288 = isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0));
    float _296 = ((((cbMtdParam._m0[12u].x - _245) * TEXCOORD_9.x) * cbMtdParam._m0[16u].x) * _288) + _245;
    float _297 = ((((cbMtdParam._m0[12u].y - _246) * TEXCOORD_9.y) * cbMtdParam._m0[16u].x) * _288) + _246;
    float _298 = (((cbMtdParam._m0[16u].x * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _247)) * _288) + _247;
    vec4 _310 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _314 = _310.z;
    float _318 = (_310.x * 2.0) + (-1.0);
    float _320 = (_310.y * 2.0) + (-1.0);
    float _321 = dot(vec2(_318, _320), vec2(_318, _320));
    float _3462 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _326 = sqrt(1.0 - (isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0))));
    float _332 = _285 * (cbMtdParam._m0[16u].y + 1.0);
    float _3473 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _336 = ((cbMtdParam._m0[15u].y - _314) * (isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0)))) + _314;
    float _349 = (cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _350 = (cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _377 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * ((cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * ((cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[10u].w));
    float _382 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[15u].w;
    float _389 = ((_377.y * 0.5) + (-0.25)) * cbMtdParam._m0[15u].z;
    float _391 = (-0.0) - (cbMtdParam._m0[15u].z * ((_377.x * 0.5) + (-0.25)));
    float _393 = fract(_382);
    float _395 = fract(_382 + 0.5);
    float _396 = _393 * _391;
    float _397 = _389 * _393;
    float _400 = _395 * _391;
    float _401 = _389 * _395;
    float _406 = abs((_393 * 2.0) + (-1.0));
    vec4 _422 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_396 + _349) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_397 + _350) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _424 = _422.x;
    float _425 = _422.y;
    float _426 = _422.z;
    vec4 _427 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_400 + _349) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_401 + _350) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _454 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _455 = (cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _468 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_396 + _454) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_397 + _455) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _470 = _468.x;
    float _471 = _468.y;
    float _472 = _468.z;
    vec4 _473 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_400 + _454) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_401 + _455) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    vec4 _517 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[16u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, (((cbMtdParam._m0[17u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w));
    float _523 = (_517.x * 2.0) + (-1.0);
    float _524 = (_517.y * 2.0) + (-1.0);
    float _525 = dot(vec2(_523, _524), vec2(_523, _524));
    float _3484 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _541 = (_288 * (((cbMtdParam._m0[14u].z * _318) - _318) + _523)) + _318;
    float _542 = (_288 * (((cbMtdParam._m0[14u].z * _320) - _320) + _524)) + _320;
    float _543 = (_288 * (sqrt(1.0 - (isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0)))) - _326)) + _326;
    float _546 = fma(_543, _210 * NORMAL.x, fma(_542, _217 * TANGENT.x, (_203 * _195) * _541));
    float _549 = fma(_543, _210 * NORMAL.y, fma(_542, _217 * TANGENT.y, (_203 * _196) * _541));
    float _552 = fma(_543, _210 * NORMAL.z, fma(_542, _217 * TANGENT.z, (_203 * _197) * _541));
    float _556 = inversesqrt(dot(vec3(_546, _549, _552), vec3(_546, _549, _552)));
    float _557 = _556 * _546;
    float _558 = _556 * _549;
    float _559 = _556 * _552;
    float _3495 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _560 = isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0));
    float _3506 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _3517 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _3528 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _579 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _620 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _630 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _620);
    float _631 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _620);
    float _632 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _620);
    float _636 = inversesqrt(dot(vec3(_630, _631, _632), vec3(_630, _631, _632)));
    float _637 = _630 * _636;
    float _638 = _631 * _636;
    float _639 = _632 * _636;
    float _645 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _646 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _667 = fma(_559, cbSceneParam._m0[5u].z, fma(_558, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _557));
    float _670 = fma(_559, cbSceneParam._m0[6u].z, fma(_558, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _557));
    float _673 = fma(_559, cbSceneParam._m0[7u].z, fma(_558, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _557));
    uint _686 = uint(roundEven(NORMAL.w)) * 13u;
    uint _687 = _686 + 9u;
    uint _688 = _687 + uint(cbMatDynParam._m0[0u].w);
    float _694 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0)))) * cbInstanceData._m0[_688].x;
    float _695 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0)))) * cbInstanceData._m0[_688].y;
    float _696 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0)))) * cbInstanceData._m0[_688].z;
    float _3539 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _697 = isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0));
    float _3550 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _698 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
    float _3561 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _699 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
    vec4 _708 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _645, cbSceneParam._m0[86u].y * _646));
    float _711 = _708.x * TEXCOORD_3.w;
    float _712 = dot(vec3(_557, _558, _559), vec3(_637, _638, _639));
    float _715 = _712 * 2.0;
    float _719 = (_715 * _557) - _637;
    float _720 = (_715 * _558) - _638;
    float _721 = (_715 * _559) - _639;
    float _725 = abs(dot(vec3(_637, _638, _639), vec3(_557, _558, _559)));
    float _3572 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _727 = sqrt(_560);
    float _740 = exp2((_727 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_727 * 3.0));
    float _772 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _776 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _780 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1081;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _807 = fma(_780, cbModelParam._m0[26u].z, fma(_776, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _772));
        float _811 = fma(_780, cbModelParam._m0[27u].z, fma(_776, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _772));
        float _815 = fma(_780, cbModelParam._m0[28u].z, fma(_776, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _772));
        float _839 = _772 + _557;
        float _840 = _776 + _558;
        float _841 = _780 + _559;
        float _851 = fma(_841, cbModelParam._m0[26u].z, fma(_840, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _839)) - _807;
        float _852 = fma(_841, cbModelParam._m0[27u].z, fma(_840, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _839)) - _811;
        float _853 = fma(_841, cbModelParam._m0[28u].z, fma(_840, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _839)) - _815;
        float _857 = inversesqrt(dot(vec3(_851, _852, _853), vec3(_851, _852, _853)));
        float _870 = ((_857 * _851) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_807 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _871 = ((_857 * _852) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_811 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _872 = ((_857 * _853) / cbModelParam._m0[34u].z) + ((((((_815 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _875 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_870, _871, _872), 0.0);
        vec4 _882 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_870, _871, _872), 0.0);
        vec4 _889 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_870, _871, _872), 0.0);
        vec4 _896 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_870, _871, _872), 0.0);
        float _909 = exp2((_875.w + (-0.5)) * 20.0) * 2.0;
        float _910 = _909 * (_875.x + (-0.5));
        float _911 = _909 * (_875.y + (-0.5));
        float _912 = _909 * (_875.z + (-0.5));
        float _919 = exp2((_882.w + (-0.5)) * 20.0) * 2.0;
        float _920 = _919 * (_882.x + (-0.5));
        float _921 = _919 * (_882.y + (-0.5));
        float _922 = _919 * (_882.z + (-0.5));
        float _929 = exp2((_889.w + (-0.5)) * 20.0) * 2.0;
        float _930 = _929 * (_889.x + (-0.5));
        float _931 = _929 * (_889.y + (-0.5));
        float _932 = _929 * (_889.z + (-0.5));
        float _939 = exp2((_896.w + (-0.5)) * 20.0) * 2.0;
        float _940 = _939 * (_896.x + (-0.5));
        float _941 = _939 * (_896.y + (-0.5));
        float _942 = _939 * (_896.z + (-0.5));
        float _943 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _944 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _945 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _946 = _910 * 0.5;
        float _947 = _920 * 0.5;
        float _948 = _930 * 0.5;
        float _949 = dot(vec3(_946, _947, _948), vec3(_946, _947, _948));
        float _954 = (_949 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_949);
        float _963 = (dot(vec3(_557, _558, _559), vec3(_954 * _946, _954 * _947, _954 * _948)) + 1.0) * 0.5;
        float _3598 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _973 = sqrt(((_947 * _947) + (_946 * _946)) + (_948 * _948)) / (_943 + 9.9999997473787516355514526367188e-06);
        float _3609 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _974 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
        float _975 = _974 * 2.0;
        float _979 = (1.0 - _974) / (_974 + 1.0);
        float _3620 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _980 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
        float _989 = ((((1.0 - _980) * (_975 + 2.0)) * exp2(log2(isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0))) * (_975 + 1.0))) + _980) * _943;
        float _990 = _911 * 0.5;
        float _991 = _921 * 0.5;
        float _992 = _931 * 0.5;
        float _993 = dot(vec3(_990, _991, _992), vec3(_990, _991, _992));
        float _998 = (_993 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_993);
        float _1006 = (dot(vec3(_557, _558, _559), vec3(_998 * _990, _998 * _991, _998 * _992)) + 1.0) * 0.5;
        float _3631 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1015 = sqrt(((_991 * _991) + (_990 * _990)) + (_992 * _992)) / (_944 + 9.9999997473787516355514526367188e-06);
        float _3642 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1016 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
        float _1017 = _1016 * 2.0;
        float _1021 = (1.0 - _1016) / (_1016 + 1.0);
        float _3653 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1022 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
        float _1031 = ((((1.0 - _1022) * (_1017 + 2.0)) * exp2(log2(isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0))) * (_1017 + 1.0))) + _1022) * _944;
        float _1032 = _912 * 0.5;
        float _1033 = _922 * 0.5;
        float _1034 = _932 * 0.5;
        float _1035 = dot(vec3(_1032, _1033, _1034), vec3(_1032, _1033, _1034));
        float _1040 = (_1035 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1035);
        float _1048 = (dot(vec3(_557, _558, _559), vec3(_1040 * _1032, _1040 * _1033, _1040 * _1034)) + 1.0) * 0.5;
        float _3664 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1057 = sqrt(((_1033 * _1033) + (_1032 * _1032)) + (_1034 * _1034)) / (_945 + 9.9999997473787516355514526367188e-06);
        float _3675 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
        float _1059 = _1058 * 2.0;
        float _1063 = (1.0 - _1058) / (_1058 + 1.0);
        float _3686 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
        float _1073 = ((((1.0 - _1064) * (_1059 + 2.0)) * exp2(log2(isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0))) * (_1059 + 1.0))) + _1064) * _945;
        _1081 = _912;
        _1083 = _911;
        _1084 = _910;
        _1085 = _922;
        _1086 = _921;
        _1087 = _920;
        _1088 = _932;
        _1089 = _931;
        _1090 = _930;
        _1091 = _945;
        _1092 = _944;
        _1093 = _943;
        _1094 = cbModelParam._m0[36u].z * (isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0)));
        _1095 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0)));
        _1096 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0)));
    }
    else
    {
        _1081 = _1082;
        _1083 = _1082;
        _1084 = _1082;
        _1085 = _1082;
        _1086 = _1082;
        _1087 = _1082;
        _1088 = _1082;
        _1089 = _1082;
        _1090 = _1082;
        _1091 = _1082;
        _1092 = _1082;
        _1093 = _1082;
        _1094 = 0.0;
        _1095 = 0.0;
        _1096 = 0.0;
    }
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1122 = fma(_780, cbModelParam._m0[30u].z, fma(_776, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _772));
        float _1126 = fma(_780, cbModelParam._m0[31u].z, fma(_776, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _772));
        float _1130 = fma(_780, cbModelParam._m0[32u].z, fma(_776, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _772));
        float _1153 = _772 + _557;
        float _1154 = _776 + _558;
        float _1155 = _780 + _559;
        float _1165 = fma(_1155, cbModelParam._m0[30u].z, fma(_1154, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1153)) - _1122;
        float _1166 = fma(_1155, cbModelParam._m0[31u].z, fma(_1154, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1153)) - _1126;
        float _1167 = fma(_1155, cbModelParam._m0[32u].z, fma(_1154, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1153)) - _1130;
        float _1171 = inversesqrt(dot(vec3(_1165, _1166, _1167), vec3(_1165, _1166, _1167)));
        float _1184 = ((_1171 * _1165) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1122 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1185 = ((_1171 * _1166) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1126 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1186 = ((_1171 * _1167) / cbModelParam._m0[35u].z) + ((((((_1130 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1188 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1184, _1185, _1186), 0.0);
        vec4 _1195 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1184, _1185, _1186), 0.0);
        vec4 _1202 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1184, _1185, _1186), 0.0);
        vec4 _1209 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1184, _1185, _1186), 0.0);
        float _1221 = exp2((_1188.w + (-0.5)) * 20.0) * 2.0;
        float _1222 = _1221 * (_1188.x + (-0.5));
        float _1223 = _1221 * (_1188.y + (-0.5));
        float _1224 = _1221 * (_1188.z + (-0.5));
        float _1231 = exp2((_1195.w + (-0.5)) * 20.0) * 2.0;
        float _1232 = _1231 * (_1195.x + (-0.5));
        float _1233 = _1231 * (_1195.y + (-0.5));
        float _1234 = _1231 * (_1195.z + (-0.5));
        float _1241 = exp2((_1202.w + (-0.5)) * 20.0) * 2.0;
        float _1242 = _1241 * (_1202.x + (-0.5));
        float _1243 = _1241 * (_1202.y + (-0.5));
        float _1244 = _1241 * (_1202.z + (-0.5));
        float _1251 = exp2((_1209.w + (-0.5)) * 20.0) * 2.0;
        float _1252 = _1251 * (_1209.x + (-0.5));
        float _1253 = _1251 * (_1209.y + (-0.5));
        float _1254 = _1251 * (_1209.z + (-0.5));
        float _1255 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1256 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1257 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1258 = _1222 * 0.5;
        float _1259 = _1232 * 0.5;
        float _1260 = _1242 * 0.5;
        float _1261 = dot(vec3(_1258, _1259, _1260), vec3(_1258, _1259, _1260));
        float _1266 = (_1261 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1261);
        float _1274 = (dot(vec3(_557, _558, _559), vec3(_1266 * _1258, _1266 * _1259, _1266 * _1260)) + 1.0) * 0.5;
        float _3727 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1283 = sqrt(((_1259 * _1259) + (_1258 * _1258)) + (_1260 * _1260)) / (_1255 + 9.9999997473787516355514526367188e-06);
        float _3738 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
        float _1285 = _1284 * 2.0;
        float _1289 = (1.0 - _1284) / (_1284 + 1.0);
        float _3749 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
        float _1299 = ((((1.0 - _1290) * (_1285 + 2.0)) * exp2(log2(isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0))) * (_1285 + 1.0))) + _1290) * _1255;
        float _1300 = _1223 * 0.5;
        float _1301 = _1233 * 0.5;
        float _1302 = _1243 * 0.5;
        float _1303 = dot(vec3(_1300, _1301, _1302), vec3(_1300, _1301, _1302));
        float _1308 = (_1303 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1303);
        float _1316 = (dot(vec3(_557, _558, _559), vec3(_1308 * _1300, _1308 * _1301, _1308 * _1302)) + 1.0) * 0.5;
        float _3760 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1325 = sqrt(((_1301 * _1301) + (_1300 * _1300)) + (_1302 * _1302)) / (_1256 + 9.9999997473787516355514526367188e-06);
        float _3771 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
        float _1327 = _1326 * 2.0;
        float _1331 = (1.0 - _1326) / (_1326 + 1.0);
        float _3782 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
        float _1341 = ((((1.0 - _1332) * (_1327 + 2.0)) * exp2(log2(isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0))) * (_1327 + 1.0))) + _1332) * _1256;
        float _1342 = _1224 * 0.5;
        float _1343 = _1234 * 0.5;
        float _1344 = _1244 * 0.5;
        float _1345 = dot(vec3(_1342, _1343, _1344), vec3(_1342, _1343, _1344));
        float _1350 = (_1345 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1345);
        float _1358 = (dot(vec3(_557, _558, _559), vec3(_1350 * _1342, _1350 * _1343, _1350 * _1344)) + 1.0) * 0.5;
        float _3793 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1367 = sqrt(((_1343 * _1343) + (_1342 * _1342)) + (_1344 * _1344)) / (_1257 + 9.9999997473787516355514526367188e-06);
        float _3804 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1368 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
        float _1369 = _1368 * 2.0;
        float _1373 = (1.0 - _1368) / (_1368 + 1.0);
        float _3815 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _1383 = ((((1.0 - _1374) * (_1369 + 2.0)) * exp2(log2(isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0))) * (_1369 + 1.0))) + _1374) * _1257;
        _1391 = _1224;
        _1392 = _1223;
        _1393 = _1222;
        _1394 = _1234;
        _1395 = _1233;
        _1396 = _1232;
        _1397 = _1244;
        _1398 = _1243;
        _1399 = _1242;
        _1400 = _1257;
        _1401 = _1256;
        _1402 = _1255;
        _1403 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0)));
        _1404 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0)));
        _1405 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0)));
    }
    else
    {
        _1391 = _1082;
        _1392 = _1082;
        _1393 = _1082;
        _1394 = _1082;
        _1395 = _1082;
        _1396 = _1082;
        _1397 = _1082;
        _1398 = _1082;
        _1399 = _1082;
        _1400 = _1082;
        _1401 = _1082;
        _1402 = _1082;
        _1403 = 0.0;
        _1404 = 0.0;
        _1405 = 0.0;
    }
    float _1415 = (cbModelParam._m0[1u].x * (_1403 - _1094)) + _1094;
    float _1416 = (cbModelParam._m0[1u].x * (_1404 - _1095)) + _1095;
    float _1417 = (cbModelParam._m0[1u].x * (_1405 - _1096)) + _1096;
    float _1438 = fma(_1417, cbSceneParam._m0[89u].z, fma(_1416, cbSceneParam._m0[89u].y, _1415 * cbSceneParam._m0[89u].x));
    float _1441 = fma(_1417, cbSceneParam._m0[90u].z, fma(_1416, cbSceneParam._m0[90u].y, _1415 * cbSceneParam._m0[90u].x));
    float _1444 = fma(_1417, cbSceneParam._m0[91u].z, fma(_1416, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1415));
    float _1459 = _719 * 0.5;
    float _1460 = _720 * 0.5;
    float _1461 = _721 * 0.5;
    float _1462 = dot(vec4(_1459, _1460, _1461, 1.0), vec4(_1393, _1396, _1399, _1402));
    float _1465 = dot(vec4(_1459, _1460, _1461, 1.0), vec4(_1392, _1395, _1398, _1401));
    float _1468 = dot(vec4(_1459, _1460, _1461, 1.0), vec4(_1391, _1394, _1397, _1400));
    float _1502;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1475 = dot(vec4(_1459, _1460, _1461, 1.0), vec4(_1081, _1085, _1088, _1091));
        float _1479 = dot(vec4(_1459, _1460, _1461, 1.0), vec4(_1083, _1086, _1089, _1092));
        float _1483 = dot(vec4(_1459, _1460, _1461, 1.0), vec4(_1084, _1087, _1090, _1093));
        float _1490 = dot(vec4(cbModelParam._m0[39u]), vec4(_1459, _1460, _1461, 1.0));
        _1502 = dot(vec3(isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0)), isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0)), isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1490) ? 0.0 : (isnan(0.0) ? _1490 : max(0.0, _1490))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1502 = 1.0;
    }
    float _1513;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1504 = dot(vec4(cbModelParam._m0[40u]), vec4(_1459, _1460, _1461, 1.0));
        _1513 = dot(vec3(isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0)), isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0)), isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1504) ? 0.0 : (isnan(0.0) ? _1504 : max(0.0, _1504))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1513 = 1.0;
    }
    float _1517 = (_1513 * cbModelParam._m0[1u].x) + (_1502 * (1.0 - cbModelParam._m0[1u].x));
    float _1527 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _560);
    float _1528 = isnan(_1527) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1527 : min(cbModelParam._m0[25u].z, _1527));
    float _1608;
    float _1610;
    float _1612;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1575 = fma(_780, cbModelParam._m0[13u].z, fma(_776, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _772)) + cbModelParam._m0[13u].w;
        float _1579 = fma(_780, cbModelParam._m0[14u].z, fma(_776, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _772)) + cbModelParam._m0[14u].w;
        float _1583 = fma(_780, cbModelParam._m0[15u].z, fma(_776, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _772)) + cbModelParam._m0[15u].w;
        float _1586 = fma(_721, cbModelParam._m0[13u].z, fma(_720, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _719));
        float _1589 = fma(_721, cbModelParam._m0[14u].z, fma(_720, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _719));
        float _1592 = fma(_721, cbModelParam._m0[15u].z, fma(_720, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _719));
        float _1620;
        if (_1586 > 0.0)
        {
            _1620 = abs((1.0 - _1575) / _1586);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1586 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1575 + 1.0) / _1586);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1620 = frontier_phi_14_12_ladder;
        }
        float _1843;
        if (_1589 > 0.0)
        {
            _1843 = abs((1.0 - _1579) / _1589);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1589 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1579 + 1.0) / _1589);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1843 = frontier_phi_23_19_ladder;
        }
        float _2089;
        if (_1592 > 0.0)
        {
            _2089 = abs((1.0 - _1583) / _1592);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1592 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1583 + 1.0) / _1592);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2089 = frontier_phi_35_30_ladder;
        }
        float _2091 = isnan(_1843) ? _1620 : (isnan(_1620) ? _1843 : min(_1620, _1843));
        float _2092 = isnan(_2089) ? _2091 : (isnan(_2091) ? _2089 : min(_2091, _2089));
        float _2096 = (_2092 * _1586) + _1575;
        float _2097 = (_2092 * _1589) + _1579;
        float _2098 = (_2092 * _1592) + _1583;
        float _2099 = _2092 * 9.9999997473787516355514526367188e-05;
        float _2101 = (-1.0) - _2099;
        float _2103 = _2099 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2098 > _2103) || ((_2098 < _2101) || ((_2097 > _2103) || ((_2097 < _2101) || ((_2096 < _2101) || (_2096 > _2103))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2222 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2098, cbModelParam._m0[9u].z, fma(_2097, cbModelParam._m0[9u].y, _2096 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2098, cbModelParam._m0[10u].z, fma(_2097, cbModelParam._m0[10u].y, _2096 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2098, cbModelParam._m0[11u].z, fma(_2097, cbModelParam._m0[11u].y, _2096 * cbModelParam._m0[11u].x))), _1528);
            frontier_phi_13_35_ladder = _2222.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2222.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2222.x * cbModelParam._m0[1u].y;
        }
        _1608 = frontier_phi_13_35_ladder_2;
        _1610 = frontier_phi_13_35_ladder_1;
        _1612 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1596 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_719, _720, _721), _1528);
        _1608 = _1596.x * cbModelParam._m0[1u].y;
        _1610 = _1596.y * cbModelParam._m0[1u].y;
        _1612 = _1596.z * cbModelParam._m0[1u].y;
    }
    float _1616 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _560);
    float _1617 = isnan(_1616) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1616 : min(cbModelParam._m0[25u].w, _1616));
    float _1707;
    float _1709;
    float _1711;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1671 = fma(_780, cbModelParam._m0[21u].z, fma(_776, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _772)) + cbModelParam._m0[21u].w;
        float _1675 = fma(_780, cbModelParam._m0[22u].z, fma(_776, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _772)) + cbModelParam._m0[22u].w;
        float _1679 = fma(_780, cbModelParam._m0[23u].z, fma(_776, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _772)) + cbModelParam._m0[23u].w;
        float _1682 = fma(_721, cbModelParam._m0[21u].z, fma(_720, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _719));
        float _1685 = fma(_721, cbModelParam._m0[22u].z, fma(_720, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _719));
        float _1688 = fma(_721, cbModelParam._m0[23u].z, fma(_720, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _719));
        float _1848;
        if (_1682 > 0.0)
        {
            _1848 = abs((1.0 - _1671) / _1682);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1682 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1671 + 1.0) / _1682);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1848 = frontier_phi_25_21_ladder;
        }
        float _2116;
        if (_1685 > 0.0)
        {
            _2116 = abs((1.0 - _1675) / _1685);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1685 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1675 + 1.0) / _1685);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2116 = frontier_phi_37_32_ladder;
        }
        float _2321;
        if (_1688 > 0.0)
        {
            _2321 = abs((1.0 - _1679) / _1688);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1688 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1679 + 1.0) / _1688);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2321 = frontier_phi_46_43_ladder;
        }
        float _2323 = isnan(_2116) ? _1848 : (isnan(_1848) ? _2116 : min(_1848, _2116));
        float _2324 = isnan(_2321) ? _2323 : (isnan(_2323) ? _2321 : min(_2323, _2321));
        float _2328 = (_2324 * _1682) + _1671;
        float _2329 = (_2324 * _1685) + _1675;
        float _2330 = (_2324 * _1688) + _1679;
        float _2331 = _2324 * 9.9999997473787516355514526367188e-05;
        float _2332 = (-1.0) - _2331;
        float _2334 = _2331 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2330 > _2334) || ((_2330 < _2332) || ((_2329 > _2334) || ((_2329 < _2332) || ((_2328 < _2332) || (_2328 > _2334))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2558 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2330, cbModelParam._m0[17u].z, fma(_2329, cbModelParam._m0[17u].y, _2328 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2330, cbModelParam._m0[18u].z, fma(_2329, cbModelParam._m0[18u].y, _2328 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2330, cbModelParam._m0[19u].z, fma(_2329, cbModelParam._m0[19u].y, _2328 * cbModelParam._m0[19u].x))), _1617);
            frontier_phi_22_46_ladder = _2558.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2558.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2558.x * cbModelParam._m0[1u].z;
        }
        _1707 = frontier_phi_22_46_ladder_2;
        _1709 = frontier_phi_22_46_ladder_1;
        _1711 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1691 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_719, _720, _721), _1617);
        _1707 = _1691.x * cbModelParam._m0[1u].z;
        _1709 = _1691.y * cbModelParam._m0[1u].z;
        _1711 = _1691.z * cbModelParam._m0[1u].z;
    }
    float _1723 = ((((1.0 - _740) * ((_727 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_740 * _727)) * _711;
    float _1724 = _1723 * ((cbModelParam._m0[1u].w * (_1707 - _1608)) + _1608);
    float _1725 = _1723 * ((cbModelParam._m0[1u].w * (_1709 - _1610)) + _1610);
    float _1726 = _1723 * ((cbModelParam._m0[1u].w * (_1711 - _1612)) + _1612);
    float _1729 = fma(_1726, cbSceneParam._m0[89u].z, fma(_1725, cbSceneParam._m0[89u].y, _1724 * cbSceneParam._m0[89u].x));
    float _1732 = fma(_1726, cbSceneParam._m0[90u].z, fma(_1725, cbSceneParam._m0[90u].y, _1724 * cbSceneParam._m0[90u].x));
    float _1735 = fma(_1726, cbSceneParam._m0[91u].z, fma(_1725, cbSceneParam._m0[91u].y, _1724 * cbSceneParam._m0[91u].x));
    vec4 _1743 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_645, _646));
    float _1745 = _1743.w;
    float _1757 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1745);
    float _1758 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1745);
    float _1759 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1745);
    uvec4 _1763 = floatBitsToUint(cbInstanceData._m0[_686 + 5u]);
    uint _1765 = _1763.x * 14u;
    uint _1766 = _1765 + 13u;
    float _1773 = _711 + (-1.0);
    float _1778 = (cbLight._m0[_1766].x * _1773) + 1.0;
    float _1779 = (cbLight._m0[_1766].y * _1773) + 1.0;
    float _1780 = (cbLight._m0[_1766].z * _1773) + 1.0;
    float _1781 = (cbLight._m0[_1766].w * _1773) + 1.0;
    uint _1782 = _1765 + 5u;
    float _1788 = isnan(1.0) ? _1779 : (isnan(_1779) ? 1.0 : min(_1779, 1.0));
    uint _1792 = _1765 + 4u;
    float _1802 = isnan(1.0) ? _1778 : (isnan(_1778) ? 1.0 : min(_1778, 1.0));
    uint _1806 = _1765 | 1u;
    float _1817 = dot(vec3(cbLight._m0[_1765].xyz), vec3(_557, _558, _559));
    float _1820 = dot(vec3(cbLight._m0[_1806].xyz), vec3(_557, _558, _559));
    float _3951 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
    float _3962 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
    float _1825 = (isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0))) * 0.3183098733425140380859375;
    float _1827 = (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * 0.3183098733425140380859375;
    float _1834 = ((cbLight._m0[_1782].x * _1788) * _1827) + (((cbLight._m0[_1792].x * _1757) * _1802) * _1825);
    float _1835 = ((_1788 * cbLight._m0[_1782].y) * _1827) + (((cbLight._m0[_1792].y * _1758) * _1802) * _1825);
    float _1836 = ((_1788 * cbLight._m0[_1782].z) * _1827) + (((cbLight._m0[_1792].z * _1759) * _1802) * _1825);
    uvec4 _1840 = floatBitsToUint(cbLight._m0[_1765 + 12u]);
    bool _1842 = _1840.x == 0u;
    float _1853;
    float _1855;
    float _1857;
    if (_1842)
    {
        _1853 = _1834;
        _1855 = _1835;
        _1857 = _1836;
    }
    else
    {
        uint _1861 = _1765 + 6u;
        float _1877 = (dot(vec3(cbLight._m0[_1765 + 2u].xyz), vec3(_557, _558, _559)) * 0.5) + 0.5;
        float _1878 = _1877 * _1877;
        float _3973 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
        float _1879 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _1880 = isnan(1.0) ? _1780 : (isnan(_1780) ? 1.0 : min(_1780, 1.0));
        _1853 = (((cbLight._m0[_1861].x * 0.3183098733425140380859375) * _1879) * _1880) + _1834;
        _1855 = (((cbLight._m0[_1861].y * 0.3183098733425140380859375) * _1879) * _1880) + _1835;
        _1857 = (((cbLight._m0[_1861].z * 0.3183098733425140380859375) * _1879) * _1880) + _1836;
    }
    bool _1860 = _1840.y == 0u;
    float _1898;
    float _1900;
    float _1902;
    if (_1860)
    {
        _1898 = _1853;
        _1900 = _1855;
        _1902 = _1857;
    }
    else
    {
        uint _2060 = _1765 + 7u;
        float _2076 = (dot(vec3(cbLight._m0[_1765 + 3u].xyz), vec3(_557, _558, _559)) * 0.5) + 0.5;
        float _2077 = _2076 * _2076;
        float _3989 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
        float _2078 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _2079 = isnan(1.0) ? _1781 : (isnan(_1781) ? 1.0 : min(_1781, 1.0));
        _1898 = (((cbLight._m0[_2060].x * 0.3183098733425140380859375) * _2078) * _2079) + _1853;
        _1900 = (((cbLight._m0[_2060].y * 0.3183098733425140380859375) * _2078) * _2079) + _1855;
        _1902 = (((cbLight._m0[_2060].z * 0.3183098733425140380859375) * _2078) * _2079) + _1857;
    }
    uint _1905 = _1765 + 8u;
    float _1918 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1765].w)) * _560) * 0.949999988079071044921875);
    float _1919 = _1918 * _1918;
    float _1920 = cbLight._m0[_1765].x + _637;
    float _1921 = cbLight._m0[_1765].y + _638;
    float _1922 = cbLight._m0[_1765].z + _639;
    float _1926 = inversesqrt(dot(vec3(_1920, _1921, _1922), vec3(_1920, _1921, _1922)));
    float _1927 = _1926 * _1920;
    float _1928 = _1926 * _1921;
    float _1929 = _1926 * _1922;
    float _1930 = dot(vec3(_557, _558, _559), vec3(cbLight._m0[_1765].xyz));
    float _4005 = isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0));
    float _1933 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
    float _4016 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _1934 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
    float _1935 = dot(vec3(_557, _558, _559), vec3(_1927, _1928, _1929));
    float _4027 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
    float _1938 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
    float _1939 = dot(vec3(cbLight._m0[_1765].xyz), vec3(_1927, _1928, _1929));
    float _4038 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
    float _1943 = _1919 * _1919;
    float _1947 = ((_1938 * _1938) * (_1943 + (-1.0))) + 1.0;
    float _1958 = (exp2(log2(1.0 - (isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1959 = 1.0 - _1919;
    float _1970 = (0.5 / (((_1934 * ((_1933 * _1959) + _1919)) + 9.9999999392252902907785028219223e-09) + (((_1934 * _1959) + _1919) * _1933))) * _1933;
    float _4049 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
    float _1972 = (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) * (_1943 / ((_1947 * _1947) * 3.141590118408203125));
    uint _1986 = _1765 + 9u;
    float _1997 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1806].w)) * _560) * 0.949999988079071044921875);
    float _1998 = _1997 * _1997;
    float _1999 = cbLight._m0[_1806].x + _637;
    float _2000 = cbLight._m0[_1806].y + _638;
    float _2001 = cbLight._m0[_1806].z + _639;
    float _2005 = inversesqrt(dot(vec3(_1999, _2000, _2001), vec3(_1999, _2000, _2001)));
    float _2006 = _2005 * _1999;
    float _2007 = _2005 * _2000;
    float _2008 = _2005 * _2001;
    float _2009 = dot(vec3(_557, _558, _559), vec3(cbLight._m0[_1806].xyz));
    float _4060 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
    float _2012 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
    float _2013 = dot(vec3(_557, _558, _559), vec3(_2006, _2007, _2008));
    float _4071 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
    float _2016 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
    float _2017 = dot(vec3(cbLight._m0[_1806].xyz), vec3(_2006, _2007, _2008));
    float _4082 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
    float _2021 = _1998 * _1998;
    float _2025 = ((_2016 * _2016) * (_2021 + (-1.0))) + 1.0;
    float _2034 = (exp2(log2(1.0 - (isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2035 = 1.0 - _1998;
    float _2045 = (0.5 / (((_1934 * ((_2012 * _2035) + _1998)) + 9.9999999392252902907785028219223e-09) + (((_1934 * _2035) + _1998) * _2012))) * _2012;
    float _4093 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
    float _2047 = (isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0))) * (_2021 / ((_2025 * _2025) * 3.141590118408203125));
    float _2057 = (((_2034 * cbLight._m0[_1986].x) * _2047) * _1788) + ((((cbLight._m0[_1905].x * _1757) * _1958) * _1972) * _1802);
    float _2058 = (((_2034 * cbLight._m0[_1986].y) * _2047) * _1788) + ((((cbLight._m0[_1905].y * _1758) * _1958) * _1972) * _1802);
    float _2059 = (((_2034 * cbLight._m0[_1986].z) * _2047) * _1788) + ((((cbLight._m0[_1905].z * _1759) * _1958) * _1972) * _1802);
    float _2121;
    float _2123;
    float _2125;
    if (_1842)
    {
        _2121 = _2057;
        _2123 = _2058;
        _2125 = _2059;
    }
    else
    {
        uint _2127 = _1765 + 2u;
        uint _2131 = _1765 + 10u;
        float _2145 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2127].w)) * _560) * 0.949999988079071044921875);
        float _2146 = _2145 * _2145;
        float _2147 = cbLight._m0[_2127].x + _637;
        float _2148 = cbLight._m0[_2127].y + _638;
        float _2149 = cbLight._m0[_2127].z + _639;
        float _2153 = inversesqrt(dot(vec3(_2147, _2148, _2149), vec3(_2147, _2148, _2149)));
        float _2154 = _2153 * _2147;
        float _2155 = _2153 * _2148;
        float _2156 = _2153 * _2149;
        float _2157 = dot(vec3(_557, _558, _559), vec3(cbLight._m0[_2127].xyz));
        float _4104 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
        float _2160 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
        float _2161 = dot(vec3(_557, _558, _559), vec3(_2154, _2155, _2156));
        float _4115 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
        float _2164 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _2165 = dot(vec3(cbLight._m0[_2127].xyz), vec3(_2154, _2155, _2156));
        float _4126 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
        float _2169 = _2146 * _2146;
        float _2173 = ((_2164 * _2164) * (_2169 + (-1.0))) + 1.0;
        float _2182 = (exp2(log2(1.0 - (isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2183 = 1.0 - _2146;
        float _2193 = (0.5 / (((_1934 * ((_2160 * _2183) + _2146)) + 9.9999999392252902907785028219223e-09) + (((_1934 * _2183) + _2146) * _2160))) * _2160;
        float _4137 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
        float _2195 = (isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0))) * (_2169 / ((_2173 * _2173) * 3.141590118408203125));
        float _2196 = isnan(1.0) ? _1780 : (isnan(_1780) ? 1.0 : min(_1780, 1.0));
        _2121 = (((_2182 * cbLight._m0[_2131].x) * _2195) * _2196) + _2057;
        _2123 = (((_2182 * cbLight._m0[_2131].y) * _2195) * _2196) + _2058;
        _2125 = (((_2182 * cbLight._m0[_2131].z) * _2195) * _2196) + _2059;
    }
    float _2231;
    float _2233;
    float _2235;
    if (_1860)
    {
        _2231 = _2121;
        _2233 = _2123;
        _2235 = _2125;
    }
    else
    {
        uint _2242 = _1765 + 3u;
        uint _2246 = _1765 + 11u;
        float _2260 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2242].w)) * _560) * 0.949999988079071044921875);
        float _2261 = _2260 * _2260;
        float _2262 = cbLight._m0[_2242].x + _637;
        float _2263 = cbLight._m0[_2242].y + _638;
        float _2264 = cbLight._m0[_2242].z + _639;
        float _2268 = inversesqrt(dot(vec3(_2262, _2263, _2264), vec3(_2262, _2263, _2264)));
        float _2269 = _2268 * _2262;
        float _2270 = _2268 * _2263;
        float _2271 = _2268 * _2264;
        float _2272 = dot(vec3(_557, _558, _559), vec3(cbLight._m0[_2242].xyz));
        float _4153 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
        float _2275 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _2276 = dot(vec3(_557, _558, _559), vec3(_2269, _2270, _2271));
        float _4164 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
        float _2279 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _2280 = dot(vec3(cbLight._m0[_2242].xyz), vec3(_2269, _2270, _2271));
        float _4175 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
        float _2284 = _2261 * _2261;
        float _2288 = ((_2279 * _2279) * (_2284 + (-1.0))) + 1.0;
        float _2297 = (exp2(log2(1.0 - (isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2298 = 1.0 - _2261;
        float _2308 = (0.5 / (((_1934 * ((_2275 * _2298) + _2261)) + 9.9999999392252902907785028219223e-09) + (((_1934 * _2298) + _2261) * _2275))) * _2275;
        float _4186 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
        float _2310 = (isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0))) * (_2284 / ((_2288 * _2288) * 3.141590118408203125));
        float _2311 = isnan(1.0) ? _1781 : (isnan(_1781) ? 1.0 : min(_1781, 1.0));
        _2231 = (((_2297 * cbLight._m0[_2246].x) * _2310) * _2311) + _2121;
        _2233 = (((_2297 * cbLight._m0[_2246].y) * _2310) * _2311) + _2123;
        _2235 = (((_2297 * cbLight._m0[_2246].z) * _2310) * _2311) + _2125;
    }
    float _2446;
    float _2448;
    float _2450;
    float _2452;
    float _2454;
    float _2456;
    if (_1763.y == 0u)
    {
        float _2386 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2387 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2386;
        float _2388 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2386;
        float _2389 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2386;
        uvec4 _2401 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2402 = _2401.x;
        uint _2413 = uint((float(_2401.y) * floor(float(uint(cbSceneParam._m0[85u].y * _646) / _2402))) + floor(float(uint(cbSceneParam._m0[85u].x * _645) / _2402)));
        float _2423 = (log2(_2389 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2424 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
        uint _2427 = uint(isnan(14.0) ? _2424 : (isnan(_2424) ? 14.0 : min(_2424, 14.0)));
        uvec4 _2432 = texelFetch(g_lightClusterGridBuffer, int(((_2427 << 2u) + (_2413 << 6u)) >> 2u));
        uint _2433 = _2432.x;
        uint _2434 = _2401.z;
        float _2563;
        float _2565;
        float _2567;
        float _2569;
        float _2571;
        float _2573;
        if (((((1u << ((_2434 >> 4u) & 15u)) + 4294967295u) & _2433) == 0u) || ((_2434 & 240u) == 0u))
        {
            _2563 = 0.0;
            _2565 = 0.0;
            _2567 = 0.0;
            _2569 = 0.0;
            _2571 = 0.0;
            _2573 = 0.0;
        }
        else
        {
            float _2564;
            float _2566;
            float _2568;
            float _2570;
            float _2572;
            float _2574;
            float _2716 = 0.0;
            float _2717 = 0.0;
            float _2718 = 0.0;
            float _2719 = 0.0;
            float _2720 = 0.0;
            float _2721 = 0.0;
            uint _2722 = 0u;
            uint _2731;
            bool _2732;
            for (;;)
            {
                _2731 = texelFetch(g_lightClassification, int((((_2427 << 5u) + (_2413 << 9u)) + (_2722 << 2u)) >> 2u)).x;
                _2732 = _2731 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2732)
                {
                    frontier_phi_61_pred = _2716;
                    frontier_phi_61_pred_1 = _2721;
                    frontier_phi_61_pred_2 = _2720;
                    frontier_phi_61_pred_3 = _2719;
                    frontier_phi_61_pred_4 = _2718;
                    frontier_phi_61_pred_5 = _2717;
                }
                else
                {
                    float _2840;
                    float _2841;
                    float _2842;
                    float _2843;
                    float _2844;
                    float _2845;
                    uint _2846;
                    _2840 = _2716;
                    _2841 = _2717;
                    _2842 = _2718;
                    _2843 = _2719;
                    _2844 = _2720;
                    _2845 = _2721;
                    _2846 = _2731;
                    float _2772;
                    float _2773;
                    float _2774;
                    float _2775;
                    float _2776;
                    float _2777;
                    for (;;)
                    {
                        uint _2850 = uint(findLSB(_2846)) + (_2722 << 5u);
                        uint _2847 = (_2846 + 4294967295u) & _2846;
                        uint _2852 = _2850 * 48u;
                        vec4 _2866 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2852)).x, texelFetch(g_PointLightRenderingBuffer, int(_2852 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2852 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2852 + 3u)).x));
                        uint _2872 = (_2850 * 48u) + 4u;
                        vec4 _2885 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2872)).x, texelFetch(g_PointLightRenderingBuffer, int(_2872 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2872 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2872 + 3u)).x));
                        uint _2891 = (_2850 * 48u) + 8u;
                        vec3 _2902 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2891)).x, texelFetch(g_PointLightRenderingBuffer, int(_2891 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2891 + 2u)).x));
                        float _2906 = _2866.x - _2387;
                        float _2907 = _2866.y - _2388;
                        float _2908 = _2866.z - _2389;
                        float _2909 = dot(vec3(_2906, _2907, _2908), vec3(_2906, _2907, _2908));
                        float _2912 = inversesqrt(_2909);
                        float _2913 = _2912 * _2906;
                        float _2914 = _2912 * _2907;
                        float _2915 = _2912 * _2908;
                        float _2916 = dot(vec3(_667, _670, _673), vec3(_2913, _2914, _2915));
                        float _2921 = 1.0 - (_2909 * _2866.w);
                        float _4212 = isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0));
                        float _2922 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
                        float _2923 = sqrt(_2909) * _2885.w;
                        float _2926 = 1.39999997615814208984375 / (_2923 + 1.39999997615814208984375);
                        float _2927 = _2926 * _2926;
                        float _2930 = ((1.0 - _2927) * _2916) + _2927;
                        float _2933 = _2923 * _2923;
                        float _2937 = ((isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0))) * _2922) / ((_2933 * 0.699999988079071044921875) + 1.0);
                        float _2941 = (-0.0) - _2387;
                        float _2942 = (-0.0) - _2388;
                        float _2943 = (-0.0) - _2389;
                        float _2947 = inversesqrt(dot(vec3(_2941, _2942, _2943), vec3(_2941, _2942, _2943)));
                        float _2948 = _2947 * _2941;
                        float _2949 = _2947 * _2942;
                        float _2950 = _2947 * _2943;
                        float _2958 = exp2(log2(1.0 / ((_2933 * 3.5) + 5.0)) * 0.25);
                        float _2959 = 1.0 - _727;
                        float _2966 = sqrt(1.0 - ((1.0 - (_2959 * _2959)) * (1.0 - (_2958 * _2958))));
                        float _2967 = _2966 * _2966;
                        float _2968 = _2967 * _2967;
                        float _2969 = _2948 + _2913;
                        float _2970 = _2949 + _2914;
                        float _2971 = _2950 + _2915;
                        float _2975 = inversesqrt(dot(vec3(_2969, _2970, _2971), vec3(_2969, _2970, _2971)));
                        float _2979 = dot(vec3(_667, _670, _673), vec3(_2948, _2949, _2950));
                        float _4228 = isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0));
                        float _2982 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
                        float _2983 = dot(vec3(_667, _670, _673), vec3(_2975 * _2969, _2975 * _2970, _2975 * _2971));
                        float _4239 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0));
                        float _2986 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
                        float _2990 = ((_2986 * _2986) * (_2968 + (-1.0))) + 1.0;
                        float _2991 = _2926 * _2967;
                        float _2992 = _2991 * _2991;
                        float _2995 = ((1.0 - _2992) * _2916) + _2992;
                        float _4250 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
                        float _2996 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
                        float _2997 = 1.0 - _2967;
                        float _3007 = (0.5 / (((_2996 * ((_2982 * _2997) + _2967)) + 9.9999999392252902907785028219223e-09) + (((_2996 * _2997) + _2967) * _2982))) * _2996;
                        float _4261 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0));
                        float _3018 = (((_2968 * 3.1415927410125732421875) * (isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0)))) / ((_2990 * _2990) * ((_2933 * 2.1991131305694580078125) + 3.141590118408203125))) * _2922;
                        _2775 = (_2937 * _2885.x) + _2843;
                        _2776 = (_2937 * _2885.y) + _2844;
                        _2777 = (_2937 * _2885.z) + _2845;
                        _2772 = (_3018 * _2902.x) + _2840;
                        _2773 = (_3018 * _2902.y) + _2841;
                        _2774 = (_3018 * _2902.z) + _2842;
                        if (_2847 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2840 = _2772;
                            _2841 = _2773;
                            _2842 = _2774;
                            _2843 = _2775;
                            _2844 = _2776;
                            _2845 = _2777;
                            _2846 = _2847;
                        }
                    }
                    frontier_phi_61_pred = _2772;
                    frontier_phi_61_pred_1 = _2777;
                    frontier_phi_61_pred_2 = _2776;
                    frontier_phi_61_pred_3 = _2775;
                    frontier_phi_61_pred_4 = _2774;
                    frontier_phi_61_pred_5 = _2773;
                }
                _2564 = frontier_phi_61_pred;
                _2574 = frontier_phi_61_pred_1;
                _2572 = frontier_phi_61_pred_2;
                _2570 = frontier_phi_61_pred_3;
                _2568 = frontier_phi_61_pred_4;
                _2566 = frontier_phi_61_pred_5;
                uint _2723 = _2722 + 1u;
                if (_2723 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2716 = _2564;
                    _2717 = _2566;
                    _2718 = _2568;
                    _2719 = _2570;
                    _2720 = _2572;
                    _2721 = _2574;
                    _2722 = _2723;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2563 = _2564;
            _2565 = _2566;
            _2567 = _2568;
            _2569 = _2570;
            _2571 = _2572;
            _2573 = _2574;
        }
        uvec4 _2577 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2578 = _2577.z;
        uint _2580 = (_2578 >> 8u) & 15u;
        float _2684;
        float _2686;
        float _2688;
        float _2690;
        float _2692;
        float _2694;
        if (((4294967295u << _2580) & _2433) == 0u)
        {
            _2684 = _2563;
            _2686 = _2565;
            _2688 = _2567;
            _2690 = _2569;
            _2692 = _2571;
            _2694 = _2573;
        }
        else
        {
            float _2709 = inversesqrt(dot(vec3(_2387, _2388, _2389), vec3(_2387, _2388, _2389)));
            float _2710 = _2709 * _2387;
            float _2711 = _2709 * _2388;
            float _2712 = _2709 * _2389;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2580 < ((_2578 >> 12u) & 15u))
            {
                float _2685;
                float _2687;
                float _2689;
                float _2691;
                float _2693;
                float _2695;
                float _2823 = _2563;
                float _2824 = _2565;
                float _2825 = _2567;
                float _2826 = _2569;
                float _2827 = _2571;
                float _2828 = _2573;
                uint _2829 = _2580;
                uint _2838;
                bool _2839;
                for (;;)
                {
                    _2838 = texelFetch(g_lightClassification, int((((_2427 << 5u) + (_2413 << 9u)) + (_2829 << 2u)) >> 2u)).x;
                    _2839 = _2838 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2839)
                    {
                        frontier_phi_67_pred = _2826;
                        frontier_phi_67_pred_1 = _2827;
                        frontier_phi_67_pred_2 = _2828;
                        frontier_phi_67_pred_3 = _2825;
                        frontier_phi_67_pred_4 = _2824;
                        frontier_phi_67_pred_5 = _2823;
                    }
                    else
                    {
                        float _3023;
                        float _3024;
                        float _3025;
                        float _3026;
                        float _3027;
                        float _3028;
                        float _3317;
                        float _3318;
                        float _3319;
                        float _3320;
                        float _3321;
                        float _3322;
                        float _3036 = _2823;
                        float _3037 = _2824;
                        float _3038 = _2825;
                        float _3039 = _2826;
                        float _3040 = _2827;
                        float _3041 = _2828;
                        uint _3042 = _2838;
                        uint _3043;
                        vec4 _3068;
                        float _3069;
                        vec4 _3084;
                        vec3 _3096;
                        vec4 _3111;
                        vec4 _3126;
                        float _3173;
                        bool _3174;
                        for (;;)
                        {
                            uint _3053 = ((_2829 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3042));
                            _3043 = (_3042 + 4294967295u) & _3042;
                            uint _3055 = _3053 * 40u;
                            _3068 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3055)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3055 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3055 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3055 + 3u)).x));
                            _3069 = _3068.w;
                            uint _3071 = (_3053 * 40u) + 4u;
                            _3084 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3071)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 3u)).x));
                            uint _3086 = (_3053 * 40u) + 8u;
                            _3096 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3086)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 2u)).x));
                            uint _3098 = (_3053 * 40u) + 16u;
                            _3111 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3098)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 3u)).x));
                            uint _3113 = (_3053 * 40u) + 20u;
                            _3126 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3113)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 3u)).x));
                            uint _3129 = (_3053 * 40u) + 24u;
                            vec4 _3142 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3129)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 3u)).x));
                            uint _3148 = (_3053 * 40u) + 28u;
                            vec4 _3161 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3148)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 3u)).x));
                            _3173 = fma(_2389, _3161.z, fma(_2388, _3161.y, _3161.x * _2387)) + _3161.w;
                            _3174 = !((fma(_2389, _3142.z, fma(_2388, _3142.y, _3142.x * _2387)) + _3142.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3174)
                            {
                                float _3201 = _3068.x - _2387;
                                float _3202 = _3068.y - _2388;
                                float _3203 = _3068.z - _2389;
                                float _3204 = dot(vec3(_3201, _3202, _3203), vec3(_3201, _3202, _3203));
                                float _3207 = inversesqrt(_3204);
                                float _3208 = _3207 * _3201;
                                float _3209 = _3207 * _3202;
                                float _3210 = _3207 * _3203;
                                float _3214 = 1.0 - (_3204 / (_3069 * _3069));
                                float _4272 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0));
                                float _3215 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
                                float _3219 = sqrt(_3204) * _3084.w;
                                float _3221 = 1.39999997615814208984375 / (_3219 + 1.39999997615814208984375);
                                float _3222 = _3221 * _3221;
                                float _3225 = ((1.0 - _3222) * dot(vec3(_3208, _3209, _3210), vec3(_667, _670, _673))) + _3222;
                                float _3228 = _3219 * _3219;
                                float _3232 = (fma(_2389, _3111.z, fma(_2388, _3111.y, _3111.x * _2387)) + _3111.w) / _3173;
                                float _3233 = (fma(_2389, _3126.z, fma(_2388, _3126.y, _3126.x * _2387)) + _3126.w) / _3173;
                                float _3237 = 1.0 - dot(vec2(_3232, _3233), vec2(_3232, _3233));
                                float _4288 = isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0));
                                float _3238 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
                                float _3239 = _3238 * (((isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0))) * _3215) / ((_3228 * 0.699999988079071044921875) + 1.0));
                                float _3251 = exp2(log2(1.0 / ((_3228 * 3.5) + 5.0)) * 0.25);
                                float _3252 = 1.0 - _727;
                                float _3259 = sqrt(1.0 - ((1.0 - (_3252 * _3252)) * (1.0 - (_3251 * _3251))));
                                float _3260 = _3259 * _3259;
                                float _3261 = _3260 * _3260;
                                float _3262 = _3208 - _2710;
                                float _3263 = _3209 - _2711;
                                float _3264 = _3210 - _2712;
                                float _3268 = inversesqrt(dot(vec3(_3262, _3263, _3264), vec3(_3262, _3263, _3264)));
                                float _3272 = dot(vec3(_667, _670, _673), vec3((-0.0) - _2710, (-0.0) - _2711, (-0.0) - _2712));
                                float _4299 = isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : max(_3272, 0.0));
                                float _3275 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
                                float _3276 = dot(vec3(_667, _670, _673), vec3(_3268 * _3262, _3268 * _3263, _3268 * _3264));
                                float _4310 = isnan(0.0) ? _3276 : (isnan(_3276) ? 0.0 : max(_3276, 0.0));
                                float _3279 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
                                float _3283 = ((_3279 * _3279) * (_3261 + (-1.0))) + 1.0;
                                float _3284 = _3221 * _3260;
                                float _3285 = _3284 * _3284;
                                float _3291 = ((1.0 - _3285) * dot(vec3(_667, _670, _673), vec3(_3208, _3209, _3210))) + _3285;
                                float _4321 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0));
                                float _3292 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
                                float _3293 = 1.0 - _3260;
                                float _3303 = (0.5 / (((_3292 * ((_3275 * _3293) + _3260)) + 9.9999999392252902907785028219223e-09) + (((_3292 * _3293) + _3260) * _3275))) * _3292;
                                float _4332 = isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0));
                                float _3313 = (_3238 * _3215) * (((_3261 * 3.1415927410125732421875) * (isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0)))) / ((_3283 * _3283) * ((_3228 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3313 * _3096.x;
                                frontier_phi_73_pred_1 = _3313 * _3096.y;
                                frontier_phi_73_pred_2 = _3239 * _3084.z;
                                frontier_phi_73_pred_3 = _3239 * _3084.y;
                                frontier_phi_73_pred_4 = _3239 * _3084.x;
                                frontier_phi_73_pred_5 = _3313 * _3096.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3317 = frontier_phi_73_pred;
                            _3318 = frontier_phi_73_pred_1;
                            _3322 = frontier_phi_73_pred_2;
                            _3321 = frontier_phi_73_pred_3;
                            _3320 = frontier_phi_73_pred_4;
                            _3319 = frontier_phi_73_pred_5;
                            _3026 = _3320 + _3039;
                            _3027 = _3321 + _3040;
                            _3028 = _3322 + _3041;
                            _3023 = _3317 + _3036;
                            _3024 = _3318 + _3037;
                            _3025 = _3319 + _3038;
                            if (_3043 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3036 = _3023;
                                _3037 = _3024;
                                _3038 = _3025;
                                _3039 = _3026;
                                _3040 = _3027;
                                _3041 = _3028;
                                _3042 = _3043;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3026;
                        frontier_phi_67_pred_1 = _3027;
                        frontier_phi_67_pred_2 = _3028;
                        frontier_phi_67_pred_3 = _3025;
                        frontier_phi_67_pred_4 = _3024;
                        frontier_phi_67_pred_5 = _3023;
                    }
                    _2691 = frontier_phi_67_pred;
                    _2693 = frontier_phi_67_pred_1;
                    _2695 = frontier_phi_67_pred_2;
                    _2689 = frontier_phi_67_pred_3;
                    _2687 = frontier_phi_67_pred_4;
                    _2685 = frontier_phi_67_pred_5;
                    uint _2830 = _2829 + 1u;
                    if (_2830 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2823 = _2685;
                        _2824 = _2687;
                        _2825 = _2689;
                        _2826 = _2691;
                        _2827 = _2693;
                        _2828 = _2695;
                        _2829 = _2830;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2693;
                frontier_phi_55_56_ladder_1 = _2695;
                frontier_phi_55_56_ladder_2 = _2691;
                frontier_phi_55_56_ladder_3 = _2689;
                frontier_phi_55_56_ladder_4 = _2687;
                frontier_phi_55_56_ladder_5 = _2685;
            }
            else
            {
                frontier_phi_55_56_ladder = _2571;
                frontier_phi_55_56_ladder_1 = _2573;
                frontier_phi_55_56_ladder_2 = _2569;
                frontier_phi_55_56_ladder_3 = _2567;
                frontier_phi_55_56_ladder_4 = _2565;
                frontier_phi_55_56_ladder_5 = _2563;
            }
            _2684 = frontier_phi_55_56_ladder_5;
            _2686 = frontier_phi_55_56_ladder_4;
            _2688 = frontier_phi_55_56_ladder_3;
            _2690 = frontier_phi_55_56_ladder_2;
            _2692 = frontier_phi_55_56_ladder;
            _2694 = frontier_phi_55_56_ladder_1;
        }
        float _2699 = isnan(1.0) ? _711 : (isnan(_711) ? 1.0 : min(_711, 1.0));
        _2446 = (_2699 * _2690) + _1898;
        _2448 = (_2699 * _2692) + _1900;
        _2450 = (_2699 * _2694) + _1902;
        _2452 = ((_2684 * 0.039999999105930328369140625) * _2699) + _2231;
        _2454 = ((_2686 * 0.039999999105930328369140625) * _2699) + _2233;
        _2456 = ((_2688 * 0.039999999105930328369140625) * _2699) + _2235;
    }
    else
    {
        _2446 = _1898;
        _2448 = _1900;
        _2450 = _1902;
        _2452 = _2231;
        _2454 = _2233;
        _2456 = _2235;
    }
    uint _2462 = _687 + uint(cbMatDynParam._m0[0u].w);
    float _2468 = ((((((_473.x - _470) * _406) + _470) * cbMtdParam._m0[13u].x) + ((((_427.x - _424) * _406) + _424) * cbMtdParam._m0[11u].x)) * _288) * cbInstanceData._m0[_2462].x;
    float _2469 = ((((((_473.y - _471) * _406) + _471) * cbMtdParam._m0[13u].y) + ((((_427.y - _425) * _406) + _425) * cbMtdParam._m0[11u].y)) * _288) * cbInstanceData._m0[_2462].y;
    float _2470 = ((((((_473.z - _472) * _406) + _472) * cbMtdParam._m0[13u].z) + ((((_427.z - _426) * _406) + _426) * cbMtdParam._m0[11u].z)) * _288) * cbInstanceData._m0[_2462].z;
    float _4348 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _4359 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _4370 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _2487 = (((isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))) * (_2446 + ((isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0))) * _711))) + ((_2452 + ((isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0))) * _1517)) * cbPerFrame._m0[3u].x)) + _2468;
    float _2489 = (_2469 + ((_2454 + ((isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0))) * _1517)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0))) * (_2448 + ((isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0))) * _711)));
    float _2491 = (_2470 + ((_2456 + ((isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0))) * _1517)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0))) * (_2450 + ((isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0))) * _711)));
    float _4396 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2504 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
    uint _2505 = _686 + 6u;
    float _2513 = _645 / cbSceneParam._m0[86u].x;
    float _2514 = _646 / cbSceneParam._m0[86u].y;
    vec4 _2528 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2513, _2514, (log2((isnan(cbSceneParam._m0[77u].w) ? _579 : (isnan(_579) ? cbSceneParam._m0[77u].w : min(_579, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2530 = _2528.x;
    float _2531 = _2528.y;
    float _2532 = _2528.z;
    float _2533 = _2528.w;
    float _2625;
    float _2627;
    float _2629;
    float _2631;
    if (_579 > cbSceneParam._m0[78u].w)
    {
        float _2588 = isnan(_579) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _579 : min(cbSceneParam._m0[80u].w, _579));
        float _2589 = _2588 / _579;
        float _2600 = _2589 * _630;
        float _2601 = _631 * _2589;
        float _2602 = (-0.0) - _2601;
        float _2603 = _2589 * _632;
        float _2605 = (cbSceneParam._m0[77u].w * _2602) / _2588;
        float _2606 = _2605 + cbSceneParam._m0[79u].w;
        float _2607 = cbSceneParam._m0[79u].w - _2601;
        float _2613 = sqrt(((_2600 * _2600) + (_2601 * _2601)) + (_2603 * _2603));
        float _2616 = (1.0 - (cbSceneParam._m0[77u].w / _2588)) * _2613;
        float _2621 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2623 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2785;
        if (abs((_2602 - _2605) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2785 = ((((_2606 > 0.0) ? exp2(_2621 * _2606) : (2.0 - exp2(_2623 * _2606))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2616;
        }
        else
        {
            float _2745 = 1.0 / cbSceneParam._m0[80u].x;
            float _2746 = isnan(_2607) ? _2606 : (isnan(_2606) ? _2607 : max(_2606, _2607));
            float _2747 = isnan(_2607) ? _2606 : (isnan(_2606) ? _2607 : min(_2606, _2607));
            float _2756 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : min(_2746, 0.0));
            float _2757 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : min(_2747, 0.0));
            _2785 = ((abs(_2613 / _2602) * cbSceneParam._m0[80u].y) * ((((_2756 - _2757) * 2.0) - ((exp2(_2621 * (isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0)))) - exp2(_2621 * (isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0))))) * _2745)) - ((exp2(_2623 * _2756) - exp2(_2623 * _2757)) * _2745))) + (_2616 * cbSceneParam._m0[80u].z);
        }
        vec4 _2787 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2513, _2514, 1.0), 0.0);
        float _2796 = exp2((_2785 * (-1.44269502162933349609375)) * (1.0 - _2787.w));
        float _2797 = log2(_2796);
        float _2813 = log2(_2533);
        _2625 = (exp2(_2813 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2797 * cbSceneParam._m0[78u].x)) * _2787.x) / cbSceneParam._m0[78u].x)) + _2530;
        _2627 = (exp2(_2813 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2797 * cbSceneParam._m0[78u].y)) * _2787.y) / cbSceneParam._m0[78u].y)) + _2531;
        _2629 = (exp2(_2813 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2797 * cbSceneParam._m0[78u].z)) * _2787.z) / cbSceneParam._m0[78u].z)) + _2532;
        _2631 = _2796 * _2533;
    }
    else
    {
        _2625 = _2530;
        _2627 = _2531;
        _2629 = _2532;
        _2631 = _2533;
    }
    float _2643 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2644 = _2643 == 3.0;
    float _2645 = log2(_2631);
    float _2649 = exp2(_2645 * cbSceneParam._m0[78u].x);
    float _2650 = exp2(_2645 * cbSceneParam._m0[78u].y);
    float _2651 = exp2(_2645 * cbSceneParam._m0[78u].z);
    float _2652 = _2649 * (isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0)));
    float _2653 = _2650 * (isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0)));
    float _2654 = _2651 * (isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0)));
    float _2663 = (_2643 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2663 * (_2644 ? _2652 : (_2652 + (cbSceneParam._m0[72u].w * _2625)));
    SV_Target.y = _2663 * (_2644 ? _2653 : (_2653 + (cbSceneParam._m0[72u].w * _2627)));
    SV_Target.z = _2663 * (_2644 ? _2654 : (_2654 + (cbSceneParam._m0[72u].w * _2629)));
    SV_Target.w = cbInstanceData._m0[_2505].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2468) * _2504) * _2649) * _2663;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2469) * _2504) * _2650) * _2663;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2470) * _2504) * _2651) * _2663;
    SV_Target_1.w = cbInstanceData._m0[_2505].w;
}


