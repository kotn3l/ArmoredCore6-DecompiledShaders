#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1162;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _203 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _204 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _205 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_203, _204, _205), vec3(_203, _204, _205)));
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _247 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _253 = _247.x * cbMtdParam._m0[9u].x;
    float _254 = _247.y * cbMtdParam._m0[9u].y;
    float _255 = _247.z * cbMtdParam._m0[9u].z;
    vec4 _293 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[5u].w));
    float _309 = (TEXCOORD_3.x - ((cbMtdParam._m0[14u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[14u].y + 1.0);
    float _3811 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _310 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
    float _317 = (((_293.x * cbMtdParam._m0[10u].x) - _253) * _310) + _253;
    float _318 = (((_293.y * cbMtdParam._m0[10u].y) - _254) * _310) + _254;
    float _319 = (((_293.z * cbMtdParam._m0[10u].z) - _255) * _310) + _255;
    vec4 _336 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    vec4 _351 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[6u].w));
    float _353 = _351.x;
    float _371 = ((texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[7u].w)).x - _353) * _310) + _353;
    vec4 _384 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[4u].w));
    float _392 = (_384.x * 2.0) + (-1.0);
    float _394 = (_384.y * 2.0) + (-1.0);
    float _395 = dot(vec2(_392, _394), vec2(_392, _394));
    float _3822 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    vec4 _412 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _416 = _412.z;
    float _419 = (_412.x * 2.0) + (-1.0);
    float _420 = (_412.y * 2.0) + (-1.0);
    float _421 = dot(vec2(_419, _420), vec2(_419, _420));
    float _3833 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _426 = sqrt(1.0 - (isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0))));
    float _429 = (_310 * (_384.z - _416)) + _416;
    float _442 = (cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _443 = (cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _472 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * ((cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * ((cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[10u].w));
    float _477 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[15u].w;
    float _484 = ((_472.y * 0.5) + (-0.25)) * cbMtdParam._m0[15u].z;
    float _486 = (-0.0) - (cbMtdParam._m0[15u].z * ((_472.x * 0.5) + (-0.25)));
    float _488 = fract(_477);
    float _490 = fract(_477 + 0.5);
    float _491 = _488 * _486;
    float _492 = _484 * _488;
    float _495 = _490 * _486;
    float _496 = _484 * _490;
    float _501 = abs((_488 * 2.0) + (-1.0));
    vec4 _517 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_491 + _442) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_492 + _443) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _519 = _517.x;
    float _520 = _517.y;
    float _521 = _517.z;
    vec4 _522 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_495 + _442) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_496 + _443) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _549 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _550 = (cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _563 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_491 + _549) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_492 + _550) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _565 = _563.x;
    float _566 = _563.y;
    float _567 = _563.z;
    vec4 _568 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_495 + _549) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_496 + _550) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _594 = (TEXCOORD_9.x - ((cbMtdParam._m0[16u].y * (1.0 - TEXCOORD_9.x)) * (_336.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[16u].z + 1.0);
    float _3844 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _595 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
    float _605 = (_310 * (_392 - _419)) + _419;
    float _606 = (_310 * (_394 - _420)) + _420;
    float _607 = (_310 * (sqrt(1.0 - (isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0)))) - _426)) + _426;
    float _610 = fma(_607, _218 * NORMAL.x, fma(_606, _225 * TANGENT.x, (_211 * _203) * _605));
    float _613 = fma(_607, _218 * NORMAL.y, fma(_606, _225 * TANGENT.y, (_211 * _204) * _605));
    float _616 = fma(_607, _218 * NORMAL.z, fma(_606, _225 * TANGENT.z, (_211 * _205) * _605));
    float _620 = inversesqrt(dot(vec3(_610, _613, _616), vec3(_610, _613, _616)));
    float _621 = _620 * _610;
    float _622 = _620 * _613;
    float _623 = _620 * _616;
    float _3855 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _624 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
    float _3866 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _3877 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _3888 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _3899 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _628 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
    float _644 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _685 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _695 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _685);
    float _696 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _685);
    float _697 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _685);
    float _701 = inversesqrt(dot(vec3(_695, _696, _697), vec3(_695, _696, _697)));
    float _702 = _695 * _701;
    float _703 = _696 * _701;
    float _704 = _697 * _701;
    float _710 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _711 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _729 = fma(_623, cbSceneParam._m0[5u].z, fma(_622, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _621));
    float _732 = fma(_623, cbSceneParam._m0[6u].z, fma(_622, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _621));
    float _735 = fma(_623, cbSceneParam._m0[7u].z, fma(_622, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _621));
    uint _748 = uint(roundEven(NORMAL.w)) * 13u;
    uint _749 = _748 + 9u;
    uint _750 = _749 + uint(cbMatDynParam._m0[0u].w);
    float _756 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0)))) * cbInstanceData._m0[_750].x;
    float _757 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0)))) * cbInstanceData._m0[_750].y;
    float _758 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0)))) * cbInstanceData._m0[_750].z;
    float _3910 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _759 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
    float _3921 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _760 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
    float _3932 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _761 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
    float _762 = 1.0 - _628;
    float _763 = _759 * _762;
    float _764 = _760 * _762;
    float _765 = _761 * _762;
    float _770 = (_759 + (-0.039999999105930328369140625)) * _628;
    float _771 = (_760 + (-0.039999999105930328369140625)) * _628;
    float _772 = (_761 + (-0.039999999105930328369140625)) * _628;
    float _773 = _770 + 0.039999999105930328369140625;
    float _775 = _771 + 0.039999999105930328369140625;
    float _776 = _772 + 0.039999999105930328369140625;
    vec4 _785 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _710, cbSceneParam._m0[86u].y * _711));
    float _788 = _785.x * TEXCOORD_3.w;
    float _789 = dot(vec3(_621, _622, _623), vec3(_702, _703, _704));
    float _792 = _789 * 2.0;
    float _796 = (_792 * _621) - _702;
    float _797 = (_792 * _622) - _703;
    float _798 = (_792 * _623) - _704;
    float _802 = abs(dot(vec3(_702, _703, _704), vec3(_621, _622, _623)));
    float _3943 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _804 = sqrt(_624);
    float _817 = exp2((_804 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_804 * 3.0));
    float _823 = (1.0 - _817) * ((_804 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _824 = _817 * _804;
    float _852 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _856 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _860 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1161;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _887 = fma(_860, cbModelParam._m0[26u].z, fma(_856, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _852));
        float _891 = fma(_860, cbModelParam._m0[27u].z, fma(_856, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _852));
        float _895 = fma(_860, cbModelParam._m0[28u].z, fma(_856, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _852));
        float _919 = _852 + _621;
        float _920 = _856 + _622;
        float _921 = _860 + _623;
        float _931 = fma(_921, cbModelParam._m0[26u].z, fma(_920, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _919)) - _887;
        float _932 = fma(_921, cbModelParam._m0[27u].z, fma(_920, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _919)) - _891;
        float _933 = fma(_921, cbModelParam._m0[28u].z, fma(_920, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _919)) - _895;
        float _937 = inversesqrt(dot(vec3(_931, _932, _933), vec3(_931, _932, _933)));
        float _950 = ((_937 * _931) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_887 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _951 = ((_937 * _932) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_891 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _952 = ((_937 * _933) / cbModelParam._m0[34u].z) + ((((((_895 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _955 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_950, _951, _952), 0.0);
        vec4 _962 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_950, _951, _952), 0.0);
        vec4 _969 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_950, _951, _952), 0.0);
        vec4 _976 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_950, _951, _952), 0.0);
        float _989 = exp2((_955.w + (-0.5)) * 20.0) * 2.0;
        float _990 = _989 * (_955.x + (-0.5));
        float _991 = _989 * (_955.y + (-0.5));
        float _992 = _989 * (_955.z + (-0.5));
        float _999 = exp2((_962.w + (-0.5)) * 20.0) * 2.0;
        float _1000 = _999 * (_962.x + (-0.5));
        float _1001 = _999 * (_962.y + (-0.5));
        float _1002 = _999 * (_962.z + (-0.5));
        float _1009 = exp2((_969.w + (-0.5)) * 20.0) * 2.0;
        float _1010 = _1009 * (_969.x + (-0.5));
        float _1011 = _1009 * (_969.y + (-0.5));
        float _1012 = _1009 * (_969.z + (-0.5));
        float _1019 = exp2((_976.w + (-0.5)) * 20.0) * 2.0;
        float _1020 = _1019 * (_976.x + (-0.5));
        float _1021 = _1019 * (_976.y + (-0.5));
        float _1022 = _1019 * (_976.z + (-0.5));
        float _1023 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1024 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1025 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1026 = _990 * 0.5;
        float _1027 = _1000 * 0.5;
        float _1028 = _1010 * 0.5;
        float _1029 = dot(vec3(_1026, _1027, _1028), vec3(_1026, _1027, _1028));
        float _1034 = (_1029 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1029);
        float _1043 = (dot(vec3(_621, _622, _623), vec3(_1034 * _1026, _1034 * _1027, _1034 * _1028)) + 1.0) * 0.5;
        float _3969 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1053 = sqrt(((_1027 * _1027) + (_1026 * _1026)) + (_1028 * _1028)) / (_1023 + 9.9999997473787516355514526367188e-06);
        float _3980 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1054 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
        float _1055 = _1054 * 2.0;
        float _1059 = (1.0 - _1054) / (_1054 + 1.0);
        float _3991 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1060 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _1069 = ((((1.0 - _1060) * (_1055 + 2.0)) * exp2(log2(isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))) * (_1055 + 1.0))) + _1060) * _1023;
        float _1070 = _991 * 0.5;
        float _1071 = _1001 * 0.5;
        float _1072 = _1011 * 0.5;
        float _1073 = dot(vec3(_1070, _1071, _1072), vec3(_1070, _1071, _1072));
        float _1078 = (_1073 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1073);
        float _1086 = (dot(vec3(_621, _622, _623), vec3(_1078 * _1070, _1078 * _1071, _1078 * _1072)) + 1.0) * 0.5;
        float _4002 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1095 = sqrt(((_1071 * _1071) + (_1070 * _1070)) + (_1072 * _1072)) / (_1024 + 9.9999997473787516355514526367188e-06);
        float _4013 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1096 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _1097 = _1096 * 2.0;
        float _1101 = (1.0 - _1096) / (_1096 + 1.0);
        float _4024 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1102 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _1111 = ((((1.0 - _1102) * (_1097 + 2.0)) * exp2(log2(isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))) * (_1097 + 1.0))) + _1102) * _1024;
        float _1112 = _992 * 0.5;
        float _1113 = _1002 * 0.5;
        float _1114 = _1012 * 0.5;
        float _1115 = dot(vec3(_1112, _1113, _1114), vec3(_1112, _1113, _1114));
        float _1120 = (_1115 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1115);
        float _1128 = (dot(vec3(_621, _622, _623), vec3(_1120 * _1112, _1120 * _1113, _1120 * _1114)) + 1.0) * 0.5;
        float _4035 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1137 = sqrt(((_1113 * _1113) + (_1112 * _1112)) + (_1114 * _1114)) / (_1025 + 9.9999997473787516355514526367188e-06);
        float _4046 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
        float _1139 = _1138 * 2.0;
        float _1143 = (1.0 - _1138) / (_1138 + 1.0);
        float _4057 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
        float _1153 = ((((1.0 - _1144) * (_1139 + 2.0)) * exp2(log2(isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0))) * (_1139 + 1.0))) + _1144) * _1025;
        _1161 = _992;
        _1163 = _991;
        _1164 = _990;
        _1165 = _1002;
        _1166 = _1001;
        _1167 = _1000;
        _1168 = _1012;
        _1169 = _1011;
        _1170 = _1010;
        _1171 = _1025;
        _1172 = _1024;
        _1173 = _1023;
        _1174 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0)));
        _1175 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0)));
        _1176 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0)));
    }
    else
    {
        _1161 = _1162;
        _1163 = _1162;
        _1164 = _1162;
        _1165 = _1162;
        _1166 = _1162;
        _1167 = _1162;
        _1168 = _1162;
        _1169 = _1162;
        _1170 = _1162;
        _1171 = _1162;
        _1172 = _1162;
        _1173 = _1162;
        _1174 = 0.0;
        _1175 = 0.0;
        _1176 = 0.0;
    }
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1202 = fma(_860, cbModelParam._m0[30u].z, fma(_856, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _852));
        float _1206 = fma(_860, cbModelParam._m0[31u].z, fma(_856, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _852));
        float _1210 = fma(_860, cbModelParam._m0[32u].z, fma(_856, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _852));
        float _1233 = _852 + _621;
        float _1234 = _856 + _622;
        float _1235 = _860 + _623;
        float _1245 = fma(_1235, cbModelParam._m0[30u].z, fma(_1234, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1233)) - _1202;
        float _1246 = fma(_1235, cbModelParam._m0[31u].z, fma(_1234, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1233)) - _1206;
        float _1247 = fma(_1235, cbModelParam._m0[32u].z, fma(_1234, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1233)) - _1210;
        float _1251 = inversesqrt(dot(vec3(_1245, _1246, _1247), vec3(_1245, _1246, _1247)));
        float _1264 = ((_1251 * _1245) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1202 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1265 = ((_1251 * _1246) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1206 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1266 = ((_1251 * _1247) / cbModelParam._m0[35u].z) + ((((((_1210 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1268 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1264, _1265, _1266), 0.0);
        vec4 _1275 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1264, _1265, _1266), 0.0);
        vec4 _1282 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1264, _1265, _1266), 0.0);
        vec4 _1289 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1264, _1265, _1266), 0.0);
        float _1301 = exp2((_1268.w + (-0.5)) * 20.0) * 2.0;
        float _1302 = _1301 * (_1268.x + (-0.5));
        float _1303 = _1301 * (_1268.y + (-0.5));
        float _1304 = _1301 * (_1268.z + (-0.5));
        float _1311 = exp2((_1275.w + (-0.5)) * 20.0) * 2.0;
        float _1312 = _1311 * (_1275.x + (-0.5));
        float _1313 = _1311 * (_1275.y + (-0.5));
        float _1314 = _1311 * (_1275.z + (-0.5));
        float _1321 = exp2((_1282.w + (-0.5)) * 20.0) * 2.0;
        float _1322 = _1321 * (_1282.x + (-0.5));
        float _1323 = _1321 * (_1282.y + (-0.5));
        float _1324 = _1321 * (_1282.z + (-0.5));
        float _1331 = exp2((_1289.w + (-0.5)) * 20.0) * 2.0;
        float _1332 = _1331 * (_1289.x + (-0.5));
        float _1333 = _1331 * (_1289.y + (-0.5));
        float _1334 = _1331 * (_1289.z + (-0.5));
        float _1335 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1336 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1337 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1338 = _1302 * 0.5;
        float _1339 = _1312 * 0.5;
        float _1340 = _1322 * 0.5;
        float _1341 = dot(vec3(_1338, _1339, _1340), vec3(_1338, _1339, _1340));
        float _1346 = (_1341 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1341);
        float _1354 = (dot(vec3(_621, _622, _623), vec3(_1346 * _1338, _1346 * _1339, _1346 * _1340)) + 1.0) * 0.5;
        float _4098 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1363 = sqrt(((_1339 * _1339) + (_1338 * _1338)) + (_1340 * _1340)) / (_1335 + 9.9999997473787516355514526367188e-06);
        float _4109 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1364 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _1365 = _1364 * 2.0;
        float _1369 = (1.0 - _1364) / (_1364 + 1.0);
        float _4120 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1370 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
        float _1379 = ((((1.0 - _1370) * (_1365 + 2.0)) * exp2(log2(isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * (_1365 + 1.0))) + _1370) * _1335;
        float _1380 = _1303 * 0.5;
        float _1381 = _1313 * 0.5;
        float _1382 = _1323 * 0.5;
        float _1383 = dot(vec3(_1380, _1381, _1382), vec3(_1380, _1381, _1382));
        float _1388 = (_1383 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1383);
        float _1396 = (dot(vec3(_621, _622, _623), vec3(_1388 * _1380, _1388 * _1381, _1388 * _1382)) + 1.0) * 0.5;
        float _4131 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1405 = sqrt(((_1381 * _1381) + (_1380 * _1380)) + (_1382 * _1382)) / (_1336 + 9.9999997473787516355514526367188e-06);
        float _4142 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1406 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
        float _1407 = _1406 * 2.0;
        float _1411 = (1.0 - _1406) / (_1406 + 1.0);
        float _4153 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1412 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _1421 = ((((1.0 - _1412) * (_1407 + 2.0)) * exp2(log2(isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0))) * (_1407 + 1.0))) + _1412) * _1336;
        float _1422 = _1304 * 0.5;
        float _1423 = _1314 * 0.5;
        float _1424 = _1324 * 0.5;
        float _1425 = dot(vec3(_1422, _1423, _1424), vec3(_1422, _1423, _1424));
        float _1430 = (_1425 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1425);
        float _1438 = (dot(vec3(_621, _622, _623), vec3(_1430 * _1422, _1430 * _1423, _1430 * _1424)) + 1.0) * 0.5;
        float _4164 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1447 = sqrt(((_1423 * _1423) + (_1422 * _1422)) + (_1424 * _1424)) / (_1337 + 9.9999997473787516355514526367188e-06);
        float _4175 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1448 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _1449 = _1448 * 2.0;
        float _1453 = (1.0 - _1448) / (_1448 + 1.0);
        float _4186 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1454 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _1463 = ((((1.0 - _1454) * (_1449 + 2.0)) * exp2(log2(isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * (_1449 + 1.0))) + _1454) * _1337;
        _1471 = _1304;
        _1472 = _1303;
        _1473 = _1302;
        _1474 = _1314;
        _1475 = _1313;
        _1476 = _1312;
        _1477 = _1324;
        _1478 = _1323;
        _1479 = _1322;
        _1480 = _1337;
        _1481 = _1336;
        _1482 = _1335;
        _1483 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0)));
        _1484 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0)));
        _1485 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0)));
    }
    else
    {
        _1471 = _1162;
        _1472 = _1162;
        _1473 = _1162;
        _1474 = _1162;
        _1475 = _1162;
        _1476 = _1162;
        _1477 = _1162;
        _1478 = _1162;
        _1479 = _1162;
        _1480 = _1162;
        _1481 = _1162;
        _1482 = _1162;
        _1483 = 0.0;
        _1484 = 0.0;
        _1485 = 0.0;
    }
    float _1495 = (cbModelParam._m0[1u].x * (_1483 - _1174)) + _1174;
    float _1496 = (cbModelParam._m0[1u].x * (_1484 - _1175)) + _1175;
    float _1497 = (cbModelParam._m0[1u].x * (_1485 - _1176)) + _1176;
    float _1518 = fma(_1497, cbSceneParam._m0[89u].z, fma(_1496, cbSceneParam._m0[89u].y, _1495 * cbSceneParam._m0[89u].x));
    float _1521 = fma(_1497, cbSceneParam._m0[90u].z, fma(_1496, cbSceneParam._m0[90u].y, _1495 * cbSceneParam._m0[90u].x));
    float _1524 = fma(_1497, cbSceneParam._m0[91u].z, fma(_1496, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1495));
    float _1539 = _796 * 0.5;
    float _1540 = _797 * 0.5;
    float _1541 = _798 * 0.5;
    float _1542 = dot(vec4(_1539, _1540, _1541, 1.0), vec4(_1473, _1476, _1479, _1482));
    float _1545 = dot(vec4(_1539, _1540, _1541, 1.0), vec4(_1472, _1475, _1478, _1481));
    float _1548 = dot(vec4(_1539, _1540, _1541, 1.0), vec4(_1471, _1474, _1477, _1480));
    float _1582;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1555 = dot(vec4(_1539, _1540, _1541, 1.0), vec4(_1161, _1165, _1168, _1171));
        float _1559 = dot(vec4(_1539, _1540, _1541, 1.0), vec4(_1163, _1166, _1169, _1172));
        float _1563 = dot(vec4(_1539, _1540, _1541, 1.0), vec4(_1164, _1167, _1170, _1173));
        float _1570 = dot(vec4(cbModelParam._m0[39u]), vec4(_1539, _1540, _1541, 1.0));
        _1582 = dot(vec3(isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0)), isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0)), isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1570) ? 0.0 : (isnan(0.0) ? _1570 : max(0.0, _1570))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1582 = 1.0;
    }
    float _1593;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1584 = dot(vec4(cbModelParam._m0[40u]), vec4(_1539, _1540, _1541, 1.0));
        _1593 = dot(vec3(isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0)), isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0)), isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1584) ? 0.0 : (isnan(0.0) ? _1584 : max(0.0, _1584))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1593 = 1.0;
    }
    float _1597 = (_1593 * cbModelParam._m0[1u].x) + (_1582 * (1.0 - cbModelParam._m0[1u].x));
    float _1607 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _624);
    float _1608 = isnan(_1607) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1607 : min(cbModelParam._m0[25u].z, _1607));
    float _1688;
    float _1690;
    float _1692;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1655 = fma(_860, cbModelParam._m0[13u].z, fma(_856, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _852)) + cbModelParam._m0[13u].w;
        float _1659 = fma(_860, cbModelParam._m0[14u].z, fma(_856, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _852)) + cbModelParam._m0[14u].w;
        float _1663 = fma(_860, cbModelParam._m0[15u].z, fma(_856, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _852)) + cbModelParam._m0[15u].w;
        float _1666 = fma(_798, cbModelParam._m0[13u].z, fma(_797, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _796));
        float _1669 = fma(_798, cbModelParam._m0[14u].z, fma(_797, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _796));
        float _1672 = fma(_798, cbModelParam._m0[15u].z, fma(_797, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _796));
        float _1700;
        if (_1666 > 0.0)
        {
            _1700 = abs((1.0 - _1655) / _1666);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1666 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1655 + 1.0) / _1666);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1700 = frontier_phi_14_12_ladder;
        }
        float _1873;
        if (_1669 > 0.0)
        {
            _1873 = abs((1.0 - _1659) / _1669);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1669 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1659 + 1.0) / _1669);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1873 = frontier_phi_23_19_ladder;
        }
        float _2168;
        if (_1672 > 0.0)
        {
            _2168 = abs((1.0 - _1663) / _1672);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1672 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1663 + 1.0) / _1672);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2168 = frontier_phi_35_30_ladder;
        }
        float _2170 = isnan(_1873) ? _1700 : (isnan(_1700) ? _1873 : min(_1700, _1873));
        float _2171 = isnan(_2168) ? _2170 : (isnan(_2170) ? _2168 : min(_2170, _2168));
        float _2175 = (_2171 * _1666) + _1655;
        float _2176 = (_2171 * _1669) + _1659;
        float _2177 = (_2171 * _1672) + _1663;
        float _2178 = _2171 * 9.9999997473787516355514526367188e-05;
        float _2180 = (-1.0) - _2178;
        float _2182 = _2178 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2177 > _2182) || ((_2177 < _2180) || ((_2176 > _2182) || ((_2176 < _2180) || ((_2175 < _2180) || (_2175 > _2182))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2322 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2177, cbModelParam._m0[9u].z, fma(_2176, cbModelParam._m0[9u].y, _2175 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2177, cbModelParam._m0[10u].z, fma(_2176, cbModelParam._m0[10u].y, _2175 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2177, cbModelParam._m0[11u].z, fma(_2176, cbModelParam._m0[11u].y, _2175 * cbModelParam._m0[11u].x))), _1608);
            frontier_phi_13_35_ladder = _2322.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2322.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2322.x * cbModelParam._m0[1u].y;
        }
        _1688 = frontier_phi_13_35_ladder_2;
        _1690 = frontier_phi_13_35_ladder_1;
        _1692 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1676 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_796, _797, _798), _1608);
        _1688 = _1676.x * cbModelParam._m0[1u].y;
        _1690 = _1676.y * cbModelParam._m0[1u].y;
        _1692 = _1676.z * cbModelParam._m0[1u].y;
    }
    float _1696 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _624);
    float _1697 = isnan(_1696) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1696 : min(cbModelParam._m0[25u].w, _1696));
    float _1787;
    float _1789;
    float _1791;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1751 = fma(_860, cbModelParam._m0[21u].z, fma(_856, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _852)) + cbModelParam._m0[21u].w;
        float _1755 = fma(_860, cbModelParam._m0[22u].z, fma(_856, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _852)) + cbModelParam._m0[22u].w;
        float _1759 = fma(_860, cbModelParam._m0[23u].z, fma(_856, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _852)) + cbModelParam._m0[23u].w;
        float _1762 = fma(_798, cbModelParam._m0[21u].z, fma(_797, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _796));
        float _1765 = fma(_798, cbModelParam._m0[22u].z, fma(_797, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _796));
        float _1768 = fma(_798, cbModelParam._m0[23u].z, fma(_797, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _796));
        float _1878;
        if (_1762 > 0.0)
        {
            _1878 = abs((1.0 - _1751) / _1762);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1762 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1751 + 1.0) / _1762);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1878 = frontier_phi_25_21_ladder;
        }
        float _2195;
        if (_1765 > 0.0)
        {
            _2195 = abs((1.0 - _1755) / _1765);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1765 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1755 + 1.0) / _1765);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2195 = frontier_phi_37_32_ladder;
        }
        float _2533;
        if (_1768 > 0.0)
        {
            _2533 = abs((1.0 - _1759) / _1768);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1768 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1759 + 1.0) / _1768);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2533 = frontier_phi_47_44_ladder;
        }
        float _2535 = isnan(_2195) ? _1878 : (isnan(_1878) ? _2195 : min(_1878, _2195));
        float _2536 = isnan(_2533) ? _2535 : (isnan(_2535) ? _2533 : min(_2535, _2533));
        float _2540 = (_2536 * _1762) + _1751;
        float _2541 = (_2536 * _1765) + _1755;
        float _2542 = (_2536 * _1768) + _1759;
        float _2543 = _2536 * 9.9999997473787516355514526367188e-05;
        float _2544 = (-1.0) - _2543;
        float _2546 = _2543 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2542 > _2546) || ((_2542 < _2544) || ((_2541 > _2546) || ((_2541 < _2544) || ((_2540 < _2544) || (_2540 > _2546))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2664 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2542, cbModelParam._m0[17u].z, fma(_2541, cbModelParam._m0[17u].y, _2540 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2542, cbModelParam._m0[18u].z, fma(_2541, cbModelParam._m0[18u].y, _2540 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2542, cbModelParam._m0[19u].z, fma(_2541, cbModelParam._m0[19u].y, _2540 * cbModelParam._m0[19u].x))), _1697);
            frontier_phi_22_47_ladder = _2664.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2664.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2664.x * cbModelParam._m0[1u].z;
        }
        _1787 = frontier_phi_22_47_ladder_2;
        _1789 = frontier_phi_22_47_ladder_1;
        _1791 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1771 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_796, _797, _798), _1697);
        _1787 = _1771.x * cbModelParam._m0[1u].z;
        _1789 = _1771.y * cbModelParam._m0[1u].z;
        _1791 = _1771.z * cbModelParam._m0[1u].z;
    }
    float _1804 = (((_823 * _773) + _824) * _788) * ((cbModelParam._m0[1u].w * (_1787 - _1688)) + _1688);
    float _1806 = (((_823 * _775) + _824) * _788) * ((cbModelParam._m0[1u].w * (_1789 - _1690)) + _1690);
    float _1808 = (((_823 * _776) + _824) * _788) * ((cbModelParam._m0[1u].w * (_1791 - _1692)) + _1692);
    float _1811 = fma(_1808, cbSceneParam._m0[89u].z, fma(_1806, cbSceneParam._m0[89u].y, _1804 * cbSceneParam._m0[89u].x));
    float _1814 = fma(_1808, cbSceneParam._m0[90u].z, fma(_1806, cbSceneParam._m0[90u].y, _1804 * cbSceneParam._m0[90u].x));
    float _1817 = fma(_1808, cbSceneParam._m0[91u].z, fma(_1806, cbSceneParam._m0[91u].y, _1804 * cbSceneParam._m0[91u].x));
    float _1852 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1856 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1860 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1864 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1865 = _1852 / _1864;
    float _1866 = _1856 / _1864;
    float _1867 = _1860 / _1864;
    float _2014;
    float _2015;
    float _2016;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1894 = ((uint(_1867 > cbSceneParam._m0[59u].y) + uint(_1867 > cbSceneParam._m0[59u].x)) + uint(_1867 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1895 = _1894 + 43u;
        uint _1903 = _1894 + 44u;
        uint _1911 = _1894 + 45u;
        uint _1919 = _1894 + 46u;
        float _1930 = fma(_1864, cbSceneParam._m0[_1895].w, fma(_1860, cbSceneParam._m0[_1895].z, fma(_1856, cbSceneParam._m0[_1895].y, _1852 * cbSceneParam._m0[_1895].x)));
        float _1934 = fma(_1864, cbSceneParam._m0[_1903].w, fma(_1860, cbSceneParam._m0[_1903].z, fma(_1856, cbSceneParam._m0[_1903].y, _1852 * cbSceneParam._m0[_1903].x)));
        float _1942 = fma(_1864, cbSceneParam._m0[_1919].w, fma(_1860, cbSceneParam._m0[_1919].z, fma(_1856, cbSceneParam._m0[_1919].y, _1852 * cbSceneParam._m0[_1919].x)));
        float _1947 = cbSceneParam._m0[33u].z * _1942;
        float _1949 = cbSceneParam._m0[33u].w * _1942;
        float _1952 = fma(_1864, cbSceneParam._m0[_1911].w, fma(_1860, cbSceneParam._m0[_1911].z, fma(_1856, cbSceneParam._m0[_1911].y, _1852 * cbSceneParam._m0[_1911].x))) / _1942;
        float _2000 = (cbSceneParam._m0[33u].x - sqrt(((_1866 * _1866) + (_1865 * _1865)) + (_1867 * _1867))) * cbSceneParam._m0[33u].y;
        float _4312 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
        float _2007 = (isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1947 + _1930) / _1942, (_1949 + _1934) / _1942), _1952), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1949 + _1930) / _1942, (_1934 - _1947) / _1942), _1952), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1930 - _1947) / _1942, (_1934 - _1949) / _1942), _1952), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1930 - _1949) / _1942, (_1947 + _1934) / _1942), _1952), 0.0)).x), vec4(0.25)));
        _2014 = 1.0 - (_2007 * cbSceneParam._m0[34u].x);
        _2015 = 1.0 - (_2007 * cbSceneParam._m0[34u].y);
        _2016 = 1.0 - (_2007 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2014 = 1.0;
        _2015 = 1.0;
        _2016 = 1.0;
    }
    float _2080;
    float _2082;
    float _2084;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2068 = fma(_1864, cbSceneParam._m0[63u].w, fma(_1860, cbSceneParam._m0[63u].z, fma(_1856, cbSceneParam._m0[63u].y, _1852 * cbSceneParam._m0[63u].x)));
        float _2069 = fma(_1864, cbSceneParam._m0[60u].w, fma(_1860, cbSceneParam._m0[60u].z, fma(_1856, cbSceneParam._m0[60u].y, _1852 * cbSceneParam._m0[60u].x))) / _2068;
        float _2070 = fma(_1864, cbSceneParam._m0[61u].w, fma(_1860, cbSceneParam._m0[61u].z, fma(_1856, cbSceneParam._m0[61u].y, _1852 * cbSceneParam._m0[61u].x))) / _2068;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2069 >= cbSceneParam._m0[64u].x) && (_2070 >= cbSceneParam._m0[64u].y)) && (_2069 <= cbSceneParam._m0[64u].z)) && (_2070 <= cbSceneParam._m0[64u].w))
        {
            float _2208 = fma(_1864, cbSceneParam._m0[62u].w, fma(_1860, cbSceneParam._m0[62u].z, fma(_1856, cbSceneParam._m0[62u].y, _1852 * cbSceneParam._m0[62u].x))) / _2068;
            float _2212 = isnan(cbSceneParam._m0[41u].w) ? _2208 : (isnan(_2208) ? cbSceneParam._m0[41u].w : max(_2208, cbSceneParam._m0[41u].w));
            float _2255 = (cbSceneParam._m0[33u].x - sqrt(((_1866 * _1866) + (_1865 * _1865)) + (_1867 * _1867))) * cbSceneParam._m0[33u].y;
            float _4328 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
            float _2262 = (isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2069, cbSceneParam._m0[33u].w + _2070), _2212), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2069, _2070 - cbSceneParam._m0[33u].z), _2212), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2069 - cbSceneParam._m0[33u].z, _2070 - cbSceneParam._m0[33u].w), _2212), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2069 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2070), _2212), 0.0)).x), vec4(0.25)));
            float _2266 = 1.0 - (_2262 * cbSceneParam._m0[34u].x);
            float _2267 = 1.0 - (_2262 * cbSceneParam._m0[34u].y);
            float _2268 = 1.0 - (_2262 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2268) ? _2016 : (isnan(_2016) ? _2268 : min(_2016, _2268));
            frontier_phi_34_33_ladder_1 = isnan(_2267) ? _2015 : (isnan(_2015) ? _2267 : min(_2015, _2267));
            frontier_phi_34_33_ladder_2 = isnan(_2266) ? _2014 : (isnan(_2014) ? _2266 : min(_2014, _2266));
        }
        else
        {
            frontier_phi_34_33_ladder = _2016;
            frontier_phi_34_33_ladder_1 = _2015;
            frontier_phi_34_33_ladder_2 = _2014;
        }
        _2080 = frontier_phi_34_33_ladder_2;
        _2082 = frontier_phi_34_33_ladder_1;
        _2084 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2080 = _2014;
        _2082 = _2015;
        _2084 = _2016;
    }
    uvec4 _2089 = floatBitsToUint(cbInstanceData._m0[_748 + 5u]);
    uint _2091 = _2089.x * 14u;
    uint _2092 = _2091 + 13u;
    float _2099 = _788 + (-1.0);
    float _2104 = (cbLight._m0[_2092].x * _2099) + 1.0;
    float _2105 = (cbLight._m0[_2092].y * _2099) + 1.0;
    float _2106 = (cbLight._m0[_2092].z * _2099) + 1.0;
    float _2107 = (cbLight._m0[_2092].w * _2099) + 1.0;
    uint _2108 = _2091 + 5u;
    float _2114 = isnan(1.0) ? _2105 : (isnan(_2105) ? 1.0 : min(_2105, 1.0));
    uint _2118 = _2091 + 4u;
    float _2127 = isnan(1.0) ? _2104 : (isnan(_2104) ? 1.0 : min(_2104, 1.0));
    uint _2131 = _2091 | 1u;
    float _2142 = dot(vec3(cbLight._m0[_2091].xyz), vec3(_621, _622, _623));
    float _2145 = dot(vec3(cbLight._m0[_2131].xyz), vec3(_621, _622, _623));
    float _4364 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
    float _4375 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
    float _2150 = (isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0))) * 0.3183098733425140380859375;
    float _2152 = (isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0))) * 0.3183098733425140380859375;
    float _2159 = ((cbLight._m0[_2108].x * _2114) * _2152) + (((cbLight._m0[_2118].x * _2080) * _2127) * _2150);
    float _2160 = ((_2114 * cbLight._m0[_2108].y) * _2152) + (((cbLight._m0[_2118].y * _2082) * _2127) * _2150);
    float _2161 = ((_2114 * cbLight._m0[_2108].z) * _2152) + (((cbLight._m0[_2118].z * _2084) * _2127) * _2150);
    uvec4 _2165 = floatBitsToUint(cbLight._m0[_2091 + 12u]);
    bool _2167 = _2165.x == 0u;
    float _2269;
    float _2271;
    float _2273;
    if (_2167)
    {
        _2269 = _2159;
        _2271 = _2160;
        _2273 = _2161;
    }
    else
    {
        uint _2277 = _2091 + 6u;
        float _2293 = (dot(vec3(cbLight._m0[_2091 + 2u].xyz), vec3(_621, _622, _623)) * 0.5) + 0.5;
        float _2294 = _2293 * _2293;
        float _4386 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
        float _2295 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
        float _2296 = isnan(1.0) ? _2106 : (isnan(_2106) ? 1.0 : min(_2106, 1.0));
        _2269 = (((cbLight._m0[_2277].x * 0.3183098733425140380859375) * _2295) * _2296) + _2159;
        _2271 = (((cbLight._m0[_2277].y * 0.3183098733425140380859375) * _2295) * _2296) + _2160;
        _2273 = (((cbLight._m0[_2277].z * 0.3183098733425140380859375) * _2295) * _2296) + _2161;
    }
    bool _2276 = _2165.y == 0u;
    float _2331;
    float _2333;
    float _2335;
    if (_2276)
    {
        _2331 = _2269;
        _2333 = _2271;
        _2335 = _2273;
    }
    else
    {
        uint _2504 = _2091 + 7u;
        float _2520 = (dot(vec3(cbLight._m0[_2091 + 3u].xyz), vec3(_621, _622, _623)) * 0.5) + 0.5;
        float _2521 = _2520 * _2520;
        float _4402 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
        float _2522 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
        float _2523 = isnan(1.0) ? _2107 : (isnan(_2107) ? 1.0 : min(_2107, 1.0));
        _2331 = (((cbLight._m0[_2504].x * 0.3183098733425140380859375) * _2522) * _2523) + _2269;
        _2333 = (((cbLight._m0[_2504].y * 0.3183098733425140380859375) * _2522) * _2523) + _2271;
        _2335 = (((cbLight._m0[_2504].z * 0.3183098733425140380859375) * _2522) * _2523) + _2273;
    }
    uint _2338 = _2091 + 8u;
    float _2351 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2091].w)) * _624) * 0.949999988079071044921875);
    float _2352 = _2351 * _2351;
    float _2353 = cbLight._m0[_2091].x + _702;
    float _2354 = cbLight._m0[_2091].y + _703;
    float _2355 = cbLight._m0[_2091].z + _704;
    float _2359 = inversesqrt(dot(vec3(_2353, _2354, _2355), vec3(_2353, _2354, _2355)));
    float _2360 = _2359 * _2353;
    float _2361 = _2359 * _2354;
    float _2362 = _2359 * _2355;
    float _2363 = dot(vec3(_621, _622, _623), vec3(cbLight._m0[_2091].xyz));
    float _4418 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
    float _2366 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
    float _4429 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _2367 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
    float _2368 = dot(vec3(_621, _622, _623), vec3(_2360, _2361, _2362));
    float _4440 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
    float _2371 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
    float _2372 = dot(vec3(cbLight._m0[_2091].xyz), vec3(_2360, _2361, _2362));
    float _4451 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
    float _2376 = _2352 * _2352;
    float _2380 = ((_2371 * _2371) * (_2376 + (-1.0))) + 1.0;
    float _2388 = exp2(log2(1.0 - (isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0)))) * 5.0);
    float _2389 = 0.959999978542327880859375 - _770;
    float _2391 = 0.959999978542327880859375 - _771;
    float _2392 = 0.959999978542327880859375 - _772;
    float _2399 = 1.0 - _2352;
    float _2410 = (0.5 / (((_2367 * ((_2366 * _2399) + _2352)) + 9.9999999392252902907785028219223e-09) + (((_2367 * _2399) + _2352) * _2366))) * _2366;
    float _4462 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
    float _2412 = (isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0))) * (_2376 / ((_2380 * _2380) * 3.141590118408203125));
    uint _2426 = _2091 + 9u;
    float _2437 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2131].w)) * _624) * 0.949999988079071044921875);
    float _2438 = _2437 * _2437;
    float _2439 = cbLight._m0[_2131].x + _702;
    float _2440 = cbLight._m0[_2131].y + _703;
    float _2441 = cbLight._m0[_2131].z + _704;
    float _2445 = inversesqrt(dot(vec3(_2439, _2440, _2441), vec3(_2439, _2440, _2441)));
    float _2446 = _2445 * _2439;
    float _2447 = _2445 * _2440;
    float _2448 = _2445 * _2441;
    float _2449 = dot(vec3(_621, _622, _623), vec3(cbLight._m0[_2131].xyz));
    float _4473 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
    float _2452 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
    float _2453 = dot(vec3(_621, _622, _623), vec3(_2446, _2447, _2448));
    float _4484 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
    float _2456 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
    float _2457 = dot(vec3(cbLight._m0[_2131].xyz), vec3(_2446, _2447, _2448));
    float _4495 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
    float _2461 = _2438 * _2438;
    float _2465 = ((_2456 * _2456) * (_2461 + (-1.0))) + 1.0;
    float _2472 = exp2(log2(1.0 - (isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0)))) * 5.0);
    float _2479 = 1.0 - _2438;
    float _2489 = (0.5 / (((_2367 * ((_2452 * _2479) + _2438)) + 9.9999999392252902907785028219223e-09) + (((_2367 * _2479) + _2438) * _2452))) * _2452;
    float _4506 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
    float _2491 = (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0))) * (_2461 / ((_2465 * _2465) * 3.141590118408203125));
    float _2501 = (((((_2472 * _2389) + _773) * cbLight._m0[_2426].x) * _2491) * _2114) + ((((cbLight._m0[_2338].x * _2080) * ((_2388 * _2389) + _773)) * _2412) * _2127);
    float _2502 = (((((_2472 * _2391) + _775) * cbLight._m0[_2426].y) * _2491) * _2114) + ((((cbLight._m0[_2338].y * _2082) * ((_2388 * _2391) + _775)) * _2412) * _2127);
    float _2503 = (((((_2472 * _2392) + _776) * cbLight._m0[_2426].z) * _2491) * _2114) + ((((cbLight._m0[_2338].z * _2084) * ((_2388 * _2392) + _776)) * _2412) * _2127);
    float _2559;
    float _2561;
    float _2563;
    if (_2167)
    {
        _2559 = _2501;
        _2561 = _2502;
        _2563 = _2503;
    }
    else
    {
        uint _2565 = _2091 + 2u;
        uint _2569 = _2091 + 10u;
        float _2583 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2565].w)) * _624) * 0.949999988079071044921875);
        float _2584 = _2583 * _2583;
        float _2585 = cbLight._m0[_2565].x + _702;
        float _2586 = cbLight._m0[_2565].y + _703;
        float _2587 = cbLight._m0[_2565].z + _704;
        float _2591 = inversesqrt(dot(vec3(_2585, _2586, _2587), vec3(_2585, _2586, _2587)));
        float _2592 = _2591 * _2585;
        float _2593 = _2591 * _2586;
        float _2594 = _2591 * _2587;
        float _2595 = dot(vec3(_621, _622, _623), vec3(cbLight._m0[_2565].xyz));
        float _4517 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
        float _2598 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
        float _2599 = dot(vec3(_621, _622, _623), vec3(_2592, _2593, _2594));
        float _4528 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
        float _2602 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
        float _2603 = dot(vec3(cbLight._m0[_2565].xyz), vec3(_2592, _2593, _2594));
        float _4539 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
        float _2607 = _2584 * _2584;
        float _2611 = ((_2602 * _2602) * (_2607 + (-1.0))) + 1.0;
        float _2618 = exp2(log2(1.0 - (isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0)))) * 5.0);
        float _2625 = 1.0 - _2584;
        float _2635 = (0.5 / (((_2367 * ((_2598 * _2625) + _2584)) + 9.9999999392252902907785028219223e-09) + (((_2367 * _2625) + _2584) * _2598))) * _2598;
        float _4550 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
        float _2637 = (isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0))) * (_2607 / ((_2611 * _2611) * 3.141590118408203125));
        float _2638 = isnan(1.0) ? _2106 : (isnan(_2106) ? 1.0 : min(_2106, 1.0));
        _2559 = (((((_2618 * _2389) + _773) * cbLight._m0[_2569].x) * _2637) * _2638) + _2501;
        _2561 = (((((_2618 * _2391) + _775) * cbLight._m0[_2569].y) * _2637) * _2638) + _2502;
        _2563 = (((((_2618 * _2392) + _776) * cbLight._m0[_2569].z) * _2637) * _2638) + _2503;
    }
    float _2669;
    float _2671;
    float _2673;
    if (_2276)
    {
        _2669 = _2559;
        _2671 = _2561;
        _2673 = _2563;
    }
    else
    {
        uint _2680 = _2091 + 3u;
        uint _2684 = _2091 + 11u;
        float _2698 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2680].w)) * _624) * 0.949999988079071044921875);
        float _2699 = _2698 * _2698;
        float _2700 = cbLight._m0[_2680].x + _702;
        float _2701 = cbLight._m0[_2680].y + _703;
        float _2702 = cbLight._m0[_2680].z + _704;
        float _2706 = inversesqrt(dot(vec3(_2700, _2701, _2702), vec3(_2700, _2701, _2702)));
        float _2707 = _2706 * _2700;
        float _2708 = _2706 * _2701;
        float _2709 = _2706 * _2702;
        float _2710 = dot(vec3(_621, _622, _623), vec3(cbLight._m0[_2680].xyz));
        float _4566 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
        float _2713 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
        float _2714 = dot(vec3(_621, _622, _623), vec3(_2707, _2708, _2709));
        float _4577 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
        float _2717 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
        float _2718 = dot(vec3(cbLight._m0[_2680].xyz), vec3(_2707, _2708, _2709));
        float _4588 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
        float _2722 = _2699 * _2699;
        float _2726 = ((_2717 * _2717) * (_2722 + (-1.0))) + 1.0;
        float _2733 = exp2(log2(1.0 - (isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0)))) * 5.0);
        float _2740 = 1.0 - _2699;
        float _2750 = (0.5 / (((_2367 * ((_2713 * _2740) + _2699)) + 9.9999999392252902907785028219223e-09) + (((_2367 * _2740) + _2699) * _2713))) * _2713;
        float _4599 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0));
        float _2752 = (isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0))) * (_2722 / ((_2726 * _2726) * 3.141590118408203125));
        float _2753 = isnan(1.0) ? _2107 : (isnan(_2107) ? 1.0 : min(_2107, 1.0));
        _2669 = (((((_2733 * _2389) + _773) * cbLight._m0[_2684].x) * _2752) * _2753) + _2559;
        _2671 = (((((_2733 * _2391) + _775) * cbLight._m0[_2684].y) * _2752) * _2753) + _2561;
        _2673 = (((((_2733 * _2392) + _776) * cbLight._m0[_2684].z) * _2752) * _2753) + _2563;
    }
    float _2819;
    float _2821;
    float _2823;
    float _2825;
    float _2827;
    float _2829;
    if (_2089.y == 0u)
    {
        uvec4 _2774 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2775 = _2774.x;
        uint _2786 = uint((float(_2774.y) * floor(float(uint(cbSceneParam._m0[85u].y * _711) / _2775))) + floor(float(uint(cbSceneParam._m0[85u].x * _710) / _2775)));
        float _2796 = (log2(_1867 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2797 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
        uint _2800 = uint(isnan(14.0) ? _2797 : (isnan(_2797) ? 14.0 : min(_2797, 14.0)));
        uvec4 _2805 = texelFetch(g_lightClusterGridBuffer, int(((_2800 << 2u) + (_2786 << 6u)) >> 2u));
        uint _2806 = _2805.x;
        uint _2807 = _2774.z;
        float _2915;
        float _2917;
        float _2919;
        float _2921;
        float _2923;
        float _2925;
        if (((((1u << ((_2807 >> 4u) & 15u)) + 4294967295u) & _2806) == 0u) || ((_2807 & 240u) == 0u))
        {
            _2915 = 0.0;
            _2917 = 0.0;
            _2919 = 0.0;
            _2921 = 0.0;
            _2923 = 0.0;
            _2925 = 0.0;
        }
        else
        {
            float _2916;
            float _2918;
            float _2920;
            float _2922;
            float _2924;
            float _2926;
            float _3068 = 0.0;
            float _3069 = 0.0;
            float _3070 = 0.0;
            float _3071 = 0.0;
            float _3072 = 0.0;
            float _3073 = 0.0;
            uint _3074 = 0u;
            uint _3083;
            bool _3084;
            for (;;)
            {
                _3083 = texelFetch(g_lightClassification, int((((_2800 << 5u) + (_2786 << 9u)) + (_3074 << 2u)) >> 2u)).x;
                _3084 = _3083 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3084)
                {
                    frontier_phi_66_pred = _3073;
                    frontier_phi_66_pred_1 = _3072;
                    frontier_phi_66_pred_2 = _3071;
                    frontier_phi_66_pred_3 = _3070;
                    frontier_phi_66_pred_4 = _3069;
                    frontier_phi_66_pred_5 = _3068;
                }
                else
                {
                    float _3192;
                    float _3193;
                    float _3194;
                    float _3195;
                    float _3196;
                    float _3197;
                    uint _3198;
                    _3192 = _3068;
                    _3193 = _3069;
                    _3194 = _3070;
                    _3195 = _3071;
                    _3196 = _3072;
                    _3197 = _3073;
                    _3198 = _3083;
                    float _3124;
                    float _3125;
                    float _3126;
                    float _3127;
                    float _3128;
                    float _3129;
                    for (;;)
                    {
                        uint _3202 = uint(findLSB(_3198)) + (_3074 << 5u);
                        uint _3199 = (_3198 + 4294967295u) & _3198;
                        uint _3204 = _3202 * 48u;
                        vec4 _3218 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3204)).x, texelFetch(g_PointLightRenderingBuffer, int(_3204 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3204 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3204 + 3u)).x));
                        uint _3224 = (_3202 * 48u) + 4u;
                        vec4 _3237 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3224)).x, texelFetch(g_PointLightRenderingBuffer, int(_3224 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3224 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3224 + 3u)).x));
                        uint _3243 = (_3202 * 48u) + 8u;
                        vec3 _3254 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3243)).x, texelFetch(g_PointLightRenderingBuffer, int(_3243 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3243 + 2u)).x));
                        float _3258 = _3218.x - _1865;
                        float _3259 = _3218.y - _1866;
                        float _3260 = _3218.z - _1867;
                        float _3261 = dot(vec3(_3258, _3259, _3260), vec3(_3258, _3259, _3260));
                        float _3264 = inversesqrt(_3261);
                        float _3265 = _3264 * _3258;
                        float _3266 = _3264 * _3259;
                        float _3267 = _3264 * _3260;
                        float _3268 = dot(vec3(_729, _732, _735), vec3(_3265, _3266, _3267));
                        float _3273 = 1.0 - (_3261 * _3218.w);
                        float _4625 = isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0));
                        float _3274 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
                        float _3275 = sqrt(_3261) * _3237.w;
                        float _3278 = 1.39999997615814208984375 / (_3275 + 1.39999997615814208984375);
                        float _3279 = _3278 * _3278;
                        float _3282 = ((1.0 - _3279) * _3268) + _3279;
                        float _3285 = _3275 * _3275;
                        float _3289 = ((isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0))) * _3274) / ((_3285 * 0.699999988079071044921875) + 1.0);
                        float _3293 = (-0.0) - _1865;
                        float _3294 = (-0.0) - _1866;
                        float _3295 = (-0.0) - _1867;
                        float _3299 = inversesqrt(dot(vec3(_3293, _3294, _3295), vec3(_3293, _3294, _3295)));
                        float _3300 = _3299 * _3293;
                        float _3301 = _3299 * _3294;
                        float _3302 = _3299 * _3295;
                        float _3309 = exp2(log2(1.0 / ((_3285 * 3.5) + 5.0)) * 0.25);
                        float _3310 = 1.0 - _804;
                        float _3317 = sqrt(1.0 - ((1.0 - (_3310 * _3310)) * (1.0 - (_3309 * _3309))));
                        float _3318 = _3317 * _3317;
                        float _3319 = _3318 * _3318;
                        float _3320 = _3300 + _3265;
                        float _3321 = _3301 + _3266;
                        float _3322 = _3302 + _3267;
                        float _3326 = inversesqrt(dot(vec3(_3320, _3321, _3322), vec3(_3320, _3321, _3322)));
                        float _3330 = dot(vec3(_729, _732, _735), vec3(_3300, _3301, _3302));
                        float _4641 = isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : max(_3330, 0.0));
                        float _3333 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
                        float _3334 = dot(vec3(_729, _732, _735), vec3(_3326 * _3320, _3326 * _3321, _3326 * _3322));
                        float _4652 = isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0));
                        float _3337 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
                        float _3341 = ((_3337 * _3337) * (_3319 + (-1.0))) + 1.0;
                        float _3342 = _3278 * _3318;
                        float _3343 = _3342 * _3342;
                        float _3346 = ((1.0 - _3343) * _3268) + _3343;
                        float _4663 = isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0));
                        float _3347 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
                        float _3348 = 1.0 - _3318;
                        float _3358 = (0.5 / (((_3347 * ((_3333 * _3348) + _3318)) + 9.9999999392252902907785028219223e-09) + (((_3347 * _3348) + _3318) * _3333))) * _3347;
                        float _4674 = isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0));
                        float _3369 = (((_3319 * 3.1415927410125732421875) * (isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0)))) / ((_3341 * _3341) * ((_3285 * 2.1991131305694580078125) + 3.141590118408203125))) * _3274;
                        _3127 = (_3289 * _3237.x) + _3195;
                        _3128 = (_3289 * _3237.y) + _3196;
                        _3129 = (_3289 * _3237.z) + _3197;
                        _3124 = (_3369 * _3254.x) + _3192;
                        _3125 = (_3369 * _3254.y) + _3193;
                        _3126 = (_3369 * _3254.z) + _3194;
                        if (_3199 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3192 = _3124;
                            _3193 = _3125;
                            _3194 = _3126;
                            _3195 = _3127;
                            _3196 = _3128;
                            _3197 = _3129;
                            _3198 = _3199;
                        }
                    }
                    frontier_phi_66_pred = _3129;
                    frontier_phi_66_pred_1 = _3128;
                    frontier_phi_66_pred_2 = _3127;
                    frontier_phi_66_pred_3 = _3126;
                    frontier_phi_66_pred_4 = _3125;
                    frontier_phi_66_pred_5 = _3124;
                }
                _2926 = frontier_phi_66_pred;
                _2924 = frontier_phi_66_pred_1;
                _2922 = frontier_phi_66_pred_2;
                _2920 = frontier_phi_66_pred_3;
                _2918 = frontier_phi_66_pred_4;
                _2916 = frontier_phi_66_pred_5;
                uint _3075 = _3074 + 1u;
                if (_3075 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3068 = _2916;
                    _3069 = _2918;
                    _3070 = _2920;
                    _3071 = _2922;
                    _3072 = _2924;
                    _3073 = _2926;
                    _3074 = _3075;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2915 = _2916;
            _2917 = _2918;
            _2919 = _2920;
            _2921 = _2922;
            _2923 = _2924;
            _2925 = _2926;
        }
        uvec4 _2929 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2930 = _2929.z;
        uint _2932 = (_2930 >> 8u) & 15u;
        float _3036;
        float _3038;
        float _3040;
        float _3042;
        float _3044;
        float _3046;
        if (((4294967295u << _2932) & _2806) == 0u)
        {
            _3036 = _2915;
            _3038 = _2917;
            _3040 = _2919;
            _3042 = _2921;
            _3044 = _2923;
            _3046 = _2925;
        }
        else
        {
            float _3061 = inversesqrt(dot(vec3(_1865, _1866, _1867), vec3(_1865, _1866, _1867)));
            float _3062 = _3061 * _1865;
            float _3063 = _3061 * _1866;
            float _3064 = _3061 * _1867;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2932 < ((_2930 >> 12u) & 15u))
            {
                float _3037;
                float _3039;
                float _3041;
                float _3043;
                float _3045;
                float _3047;
                float _3175 = _2915;
                float _3176 = _2917;
                float _3177 = _2919;
                float _3178 = _2921;
                float _3179 = _2923;
                float _3180 = _2925;
                uint _3181 = _2932;
                uint _3190;
                bool _3191;
                for (;;)
                {
                    _3190 = texelFetch(g_lightClassification, int((((_2800 << 5u) + (_2786 << 9u)) + (_3181 << 2u)) >> 2u)).x;
                    _3191 = _3190 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3191)
                    {
                        frontier_phi_72_pred = _3180;
                        frontier_phi_72_pred_1 = _3179;
                        frontier_phi_72_pred_2 = _3178;
                        frontier_phi_72_pred_3 = _3177;
                        frontier_phi_72_pred_4 = _3176;
                        frontier_phi_72_pred_5 = _3175;
                    }
                    else
                    {
                        float _3374;
                        float _3375;
                        float _3376;
                        float _3377;
                        float _3378;
                        float _3379;
                        float _3668;
                        float _3669;
                        float _3670;
                        float _3671;
                        float _3672;
                        float _3673;
                        float _3387 = _3175;
                        float _3388 = _3176;
                        float _3389 = _3177;
                        float _3390 = _3178;
                        float _3391 = _3179;
                        float _3392 = _3180;
                        uint _3393 = _3190;
                        uint _3394;
                        vec4 _3419;
                        float _3420;
                        vec4 _3435;
                        vec3 _3447;
                        vec4 _3462;
                        vec4 _3477;
                        float _3524;
                        bool _3525;
                        for (;;)
                        {
                            uint _3404 = ((_3181 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3393));
                            _3394 = (_3393 + 4294967295u) & _3393;
                            uint _3406 = _3404 * 40u;
                            _3419 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3406)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 3u)).x));
                            _3420 = _3419.w;
                            uint _3422 = (_3404 * 40u) + 4u;
                            _3435 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3422)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 3u)).x));
                            uint _3437 = (_3404 * 40u) + 8u;
                            _3447 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3437)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 2u)).x));
                            uint _3449 = (_3404 * 40u) + 16u;
                            _3462 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3449)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 3u)).x));
                            uint _3464 = (_3404 * 40u) + 20u;
                            _3477 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3464)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 3u)).x));
                            uint _3480 = (_3404 * 40u) + 24u;
                            vec4 _3493 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3480)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 3u)).x));
                            uint _3499 = (_3404 * 40u) + 28u;
                            vec4 _3512 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3499)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 3u)).x));
                            _3524 = fma(_1867, _3512.z, fma(_1866, _3512.y, _3512.x * _1865)) + _3512.w;
                            _3525 = !((fma(_1867, _3493.z, fma(_1866, _3493.y, _3493.x * _1865)) + _3493.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3525)
                            {
                                float _3552 = _3419.x - _1865;
                                float _3553 = _3419.y - _1866;
                                float _3554 = _3419.z - _1867;
                                float _3555 = dot(vec3(_3552, _3553, _3554), vec3(_3552, _3553, _3554));
                                float _3558 = inversesqrt(_3555);
                                float _3559 = _3558 * _3552;
                                float _3560 = _3558 * _3553;
                                float _3561 = _3558 * _3554;
                                float _3565 = 1.0 - (_3555 / (_3420 * _3420));
                                float _4685 = isnan(0.0) ? _3565 : (isnan(_3565) ? 0.0 : max(_3565, 0.0));
                                float _3566 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
                                float _3570 = sqrt(_3555) * _3435.w;
                                float _3572 = 1.39999997615814208984375 / (_3570 + 1.39999997615814208984375);
                                float _3573 = _3572 * _3572;
                                float _3576 = ((1.0 - _3573) * dot(vec3(_3559, _3560, _3561), vec3(_729, _732, _735))) + _3573;
                                float _3579 = _3570 * _3570;
                                float _3583 = (fma(_1867, _3462.z, fma(_1866, _3462.y, _3462.x * _1865)) + _3462.w) / _3524;
                                float _3584 = (fma(_1867, _3477.z, fma(_1866, _3477.y, _3477.x * _1865)) + _3477.w) / _3524;
                                float _3588 = 1.0 - dot(vec2(_3583, _3584), vec2(_3583, _3584));
                                float _4701 = isnan(0.0) ? _3588 : (isnan(_3588) ? 0.0 : max(_3588, 0.0));
                                float _3589 = isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0));
                                float _3590 = _3589 * (((isnan(0.0) ? _3576 : (isnan(_3576) ? 0.0 : max(_3576, 0.0))) * _3566) / ((_3579 * 0.699999988079071044921875) + 1.0));
                                float _3602 = exp2(log2(1.0 / ((_3579 * 3.5) + 5.0)) * 0.25);
                                float _3603 = 1.0 - _804;
                                float _3610 = sqrt(1.0 - ((1.0 - (_3603 * _3603)) * (1.0 - (_3602 * _3602))));
                                float _3611 = _3610 * _3610;
                                float _3612 = _3611 * _3611;
                                float _3613 = _3559 - _3062;
                                float _3614 = _3560 - _3063;
                                float _3615 = _3561 - _3064;
                                float _3619 = inversesqrt(dot(vec3(_3613, _3614, _3615), vec3(_3613, _3614, _3615)));
                                float _3623 = dot(vec3(_729, _732, _735), vec3((-0.0) - _3062, (-0.0) - _3063, (-0.0) - _3064));
                                float _4712 = isnan(0.0) ? _3623 : (isnan(_3623) ? 0.0 : max(_3623, 0.0));
                                float _3626 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
                                float _3627 = dot(vec3(_729, _732, _735), vec3(_3619 * _3613, _3619 * _3614, _3619 * _3615));
                                float _4723 = isnan(0.0) ? _3627 : (isnan(_3627) ? 0.0 : max(_3627, 0.0));
                                float _3630 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
                                float _3634 = ((_3630 * _3630) * (_3612 + (-1.0))) + 1.0;
                                float _3635 = _3572 * _3611;
                                float _3636 = _3635 * _3635;
                                float _3642 = ((1.0 - _3636) * dot(vec3(_729, _732, _735), vec3(_3559, _3560, _3561))) + _3636;
                                float _4734 = isnan(0.0) ? _3642 : (isnan(_3642) ? 0.0 : max(_3642, 0.0));
                                float _3643 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
                                float _3644 = 1.0 - _3611;
                                float _3654 = (0.5 / (((_3643 * ((_3626 * _3644) + _3611)) + 9.9999999392252902907785028219223e-09) + (((_3643 * _3644) + _3611) * _3626))) * _3643;
                                float _4745 = isnan(0.0) ? _3654 : (isnan(_3654) ? 0.0 : max(_3654, 0.0));
                                float _3664 = (_3589 * _3566) * (((_3612 * 3.1415927410125732421875) * (isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0)))) / ((_3634 * _3634) * ((_3579 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3590 * _3435.y;
                                frontier_phi_78_pred_1 = _3590 * _3435.x;
                                frontier_phi_78_pred_2 = _3664 * _3447.z;
                                frontier_phi_78_pred_3 = _3664 * _3447.y;
                                frontier_phi_78_pred_4 = _3664 * _3447.x;
                                frontier_phi_78_pred_5 = _3590 * _3435.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3672 = frontier_phi_78_pred;
                            _3671 = frontier_phi_78_pred_1;
                            _3670 = frontier_phi_78_pred_2;
                            _3669 = frontier_phi_78_pred_3;
                            _3668 = frontier_phi_78_pred_4;
                            _3673 = frontier_phi_78_pred_5;
                            _3377 = _3671 + _3390;
                            _3378 = _3672 + _3391;
                            _3379 = _3673 + _3392;
                            _3374 = _3668 + _3387;
                            _3375 = _3669 + _3388;
                            _3376 = _3670 + _3389;
                            if (_3394 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3387 = _3374;
                                _3388 = _3375;
                                _3389 = _3376;
                                _3390 = _3377;
                                _3391 = _3378;
                                _3392 = _3379;
                                _3393 = _3394;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3379;
                        frontier_phi_72_pred_1 = _3378;
                        frontier_phi_72_pred_2 = _3377;
                        frontier_phi_72_pred_3 = _3376;
                        frontier_phi_72_pred_4 = _3375;
                        frontier_phi_72_pred_5 = _3374;
                    }
                    _3047 = frontier_phi_72_pred;
                    _3045 = frontier_phi_72_pred_1;
                    _3043 = frontier_phi_72_pred_2;
                    _3041 = frontier_phi_72_pred_3;
                    _3039 = frontier_phi_72_pred_4;
                    _3037 = frontier_phi_72_pred_5;
                    uint _3182 = _3181 + 1u;
                    if (_3182 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3175 = _3037;
                        _3176 = _3039;
                        _3177 = _3041;
                        _3178 = _3043;
                        _3179 = _3045;
                        _3180 = _3047;
                        _3181 = _3182;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3047;
                frontier_phi_60_61_ladder_1 = _3045;
                frontier_phi_60_61_ladder_2 = _3041;
                frontier_phi_60_61_ladder_3 = _3039;
                frontier_phi_60_61_ladder_4 = _3037;
                frontier_phi_60_61_ladder_5 = _3043;
            }
            else
            {
                frontier_phi_60_61_ladder = _2925;
                frontier_phi_60_61_ladder_1 = _2923;
                frontier_phi_60_61_ladder_2 = _2919;
                frontier_phi_60_61_ladder_3 = _2917;
                frontier_phi_60_61_ladder_4 = _2915;
                frontier_phi_60_61_ladder_5 = _2921;
            }
            _3036 = frontier_phi_60_61_ladder_4;
            _3038 = frontier_phi_60_61_ladder_3;
            _3040 = frontier_phi_60_61_ladder_2;
            _3042 = frontier_phi_60_61_ladder_5;
            _3044 = frontier_phi_60_61_ladder_1;
            _3046 = frontier_phi_60_61_ladder;
        }
        float _3051 = isnan(1.0) ? _788 : (isnan(_788) ? 1.0 : min(_788, 1.0));
        _2819 = (_3051 * _3042) + _2331;
        _2821 = (_3051 * _3044) + _2333;
        _2823 = (_3051 * _3046) + _2335;
        _2825 = ((_3036 * _773) * _3051) + _2669;
        _2827 = ((_3038 * _775) * _3051) + _2671;
        _2829 = ((_3040 * _776) * _3051) + _2673;
    }
    else
    {
        _2819 = _2331;
        _2821 = _2333;
        _2823 = _2335;
        _2825 = _2669;
        _2827 = _2671;
        _2829 = _2673;
    }
    uint _2835 = _749 + uint(cbMatDynParam._m0[0u].w);
    float _2841 = ((((((_568.x - _565) * _501) + _565) * cbMtdParam._m0[13u].x) + ((((_522.x - _519) * _501) + _519) * cbMtdParam._m0[11u].x)) * _595) * cbInstanceData._m0[_2835].x;
    float _2842 = ((((((_568.y - _566) * _501) + _566) * cbMtdParam._m0[13u].y) + ((((_522.y - _520) * _501) + _520) * cbMtdParam._m0[11u].y)) * _595) * cbInstanceData._m0[_2835].y;
    float _2843 = ((((((_568.z - _567) * _501) + _567) * cbMtdParam._m0[13u].z) + ((((_522.z - _521) * _501) + _521) * cbMtdParam._m0[11u].z)) * _595) * cbInstanceData._m0[_2835].z;
    float _4761 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _4772 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _4783 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _2860 = (((isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0))) * (_2819 + ((isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0))) * _788))) + ((_2825 + ((isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0))) * _1597)) * cbPerFrame._m0[3u].x)) + _2841;
    float _2862 = (_2842 + ((_2827 + ((isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0))) * _1597)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0))) * (_2821 + ((isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0))) * _788)));
    float _2864 = (_2843 + ((_2829 + ((isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0))) * _1597)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0))) * (_2823 + ((isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0))) * _788)));
    float _4809 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2877 = isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0));
    uint _2878 = _748 + 6u;
    float _2886 = _710 / cbSceneParam._m0[86u].x;
    float _2887 = _711 / cbSceneParam._m0[86u].y;
    vec4 _2901 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2886, _2887, (log2((isnan(cbSceneParam._m0[77u].w) ? _644 : (isnan(_644) ? cbSceneParam._m0[77u].w : min(_644, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2903 = _2901.x;
    float _2904 = _2901.y;
    float _2905 = _2901.z;
    float _2906 = _2901.w;
    float _2977;
    float _2979;
    float _2981;
    float _2983;
    if (_644 > cbSceneParam._m0[78u].w)
    {
        float _2940 = isnan(_644) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _644 : min(cbSceneParam._m0[80u].w, _644));
        float _2941 = _2940 / _644;
        float _2952 = _2941 * _695;
        float _2953 = _696 * _2941;
        float _2954 = (-0.0) - _2953;
        float _2955 = _2941 * _697;
        float _2957 = (cbSceneParam._m0[77u].w * _2954) / _2940;
        float _2958 = _2957 + cbSceneParam._m0[79u].w;
        float _2959 = cbSceneParam._m0[79u].w - _2953;
        float _2965 = sqrt(((_2952 * _2952) + (_2953 * _2953)) + (_2955 * _2955));
        float _2968 = (1.0 - (cbSceneParam._m0[77u].w / _2940)) * _2965;
        float _2973 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2975 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3137;
        if (abs((_2954 - _2957) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3137 = ((((_2958 > 0.0) ? exp2(_2973 * _2958) : (2.0 - exp2(_2975 * _2958))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2968;
        }
        else
        {
            float _3097 = 1.0 / cbSceneParam._m0[80u].x;
            float _3098 = isnan(_2959) ? _2958 : (isnan(_2958) ? _2959 : max(_2958, _2959));
            float _3099 = isnan(_2959) ? _2958 : (isnan(_2958) ? _2959 : min(_2958, _2959));
            float _3108 = isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : min(_3098, 0.0));
            float _3109 = isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : min(_3099, 0.0));
            _3137 = ((abs(_2965 / _2954) * cbSceneParam._m0[80u].y) * ((((_3108 - _3109) * 2.0) - ((exp2(_2973 * (isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0)))) - exp2(_2973 * (isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0))))) * _3097)) - ((exp2(_2975 * _3108) - exp2(_2975 * _3109)) * _3097))) + (_2968 * cbSceneParam._m0[80u].z);
        }
        vec4 _3139 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2886, _2887, 1.0), 0.0);
        float _3148 = exp2((_3137 * (-1.44269502162933349609375)) * (1.0 - _3139.w));
        float _3149 = log2(_3148);
        float _3165 = log2(_2906);
        _2977 = (exp2(_3165 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3149 * cbSceneParam._m0[78u].x)) * _3139.x) / cbSceneParam._m0[78u].x)) + _2903;
        _2979 = (exp2(_3165 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3149 * cbSceneParam._m0[78u].y)) * _3139.y) / cbSceneParam._m0[78u].y)) + _2904;
        _2981 = (exp2(_3165 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3149 * cbSceneParam._m0[78u].z)) * _3139.z) / cbSceneParam._m0[78u].z)) + _2905;
        _2983 = _3148 * _2906;
    }
    else
    {
        _2977 = _2903;
        _2979 = _2904;
        _2981 = _2905;
        _2983 = _2906;
    }
    float _2995 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2996 = _2995 == 3.0;
    float _2997 = log2(_2983);
    float _3001 = exp2(_2997 * cbSceneParam._m0[78u].x);
    float _3002 = exp2(_2997 * cbSceneParam._m0[78u].y);
    float _3003 = exp2(_2997 * cbSceneParam._m0[78u].z);
    float _3004 = _3001 * (isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0)));
    float _3005 = _3002 * (isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0)));
    float _3006 = _3003 * (isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0)));
    float _3015 = (_2995 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3015 * (_2996 ? _3004 : (_3004 + (cbSceneParam._m0[72u].w * _2977)));
    SV_Target.y = _3015 * (_2996 ? _3005 : (_3005 + (cbSceneParam._m0[72u].w * _2979)));
    SV_Target.z = _3015 * (_2996 ? _3006 : (_3006 + (cbSceneParam._m0[72u].w * _2981)));
    SV_Target.w = cbInstanceData._m0[_2878].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2841) * _2877) * _3001) * _3015;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2842) * _2877) * _3002) * _3015;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2843) * _2877) * _3003) * _3015;
    SV_Target_1.w = cbInstanceData._m0[_2878].w;
}


