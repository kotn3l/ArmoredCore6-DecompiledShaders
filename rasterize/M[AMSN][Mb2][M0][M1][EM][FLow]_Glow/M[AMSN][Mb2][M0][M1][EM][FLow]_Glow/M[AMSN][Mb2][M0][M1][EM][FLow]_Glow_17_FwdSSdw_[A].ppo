#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1217;
float _3661;
float _3662;
float _3663;
float _3664;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _251 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _257 = _251.x * cbMtdParam._m0[9u].x;
    float _258 = _251.y * cbMtdParam._m0[9u].y;
    float _259 = _251.z * cbMtdParam._m0[9u].z;
    float _297 = TEXCOORD_9.x - ((cbMtdParam._m0[16u].y * (1.0 - TEXCOORD_9.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w)).x + 0.00999999977648258209228515625));
    float _299 = _297 * (cbMtdParam._m0[16u].z + 1.0);
    float _3673 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _300 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
    float _308 = ((((cbMtdParam._m0[12u].x - _257) * TEXCOORD_9.x) * cbMtdParam._m0[16u].x) * _300) + _257;
    float _309 = ((((cbMtdParam._m0[12u].y - _258) * TEXCOORD_9.y) * cbMtdParam._m0[16u].x) * _300) + _258;
    float _310 = (((cbMtdParam._m0[16u].x * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _259)) * _300) + _259;
    vec4 _323 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[6u].w));
    float _325 = _323.x;
    vec4 _337 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _341 = _337.z;
    float _345 = (_337.x * 2.0) + (-1.0);
    float _347 = (_337.y * 2.0) + (-1.0);
    float _348 = dot(vec2(_345, _347), vec2(_345, _347));
    float _3684 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    float _353 = sqrt(1.0 - (isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0))));
    float _359 = _297 * (cbMtdParam._m0[16u].y + 1.0);
    float _3695 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _363 = ((cbMtdParam._m0[15u].y - _341) * (isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0)))) + _341;
    float _376 = (cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _377 = (cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _404 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * ((cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * ((cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[10u].w));
    float _409 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[15u].w;
    float _416 = ((_404.y * 0.5) + (-0.25)) * cbMtdParam._m0[15u].z;
    float _418 = (-0.0) - (cbMtdParam._m0[15u].z * ((_404.x * 0.5) + (-0.25)));
    float _420 = fract(_409);
    float _422 = fract(_409 + 0.5);
    float _423 = _420 * _418;
    float _424 = _416 * _420;
    float _427 = _422 * _418;
    float _428 = _416 * _422;
    float _433 = abs((_420 * 2.0) + (-1.0));
    vec4 _449 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_423 + _376) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_424 + _377) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _451 = _449.x;
    float _452 = _449.y;
    float _453 = _449.z;
    vec4 _454 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_427 + _376) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_428 + _377) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _481 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _482 = (cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _495 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_423 + _481) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_424 + _482) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _497 = _495.x;
    float _498 = _495.y;
    float _499 = _495.z;
    vec4 _500 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_427 + _481) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_428 + _482) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _552 = (TEXCOORD_6.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_6.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_5, SS_WrapLinear), vec2((((cbMtdParam._m0[18u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((cbMtdParam._m0[18u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].x + 1.0);
    float _3706 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _553 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
    float _554 = _553 * (((((_500.x - _497) * _433) + _497) * cbMtdParam._m0[13u].x) + ((((_454.x - _451) * _433) + _451) * cbMtdParam._m0[11u].x));
    float _555 = _553 * (((((_500.y - _498) * _433) + _498) * cbMtdParam._m0[13u].y) + ((((_454.y - _452) * _433) + _452) * cbMtdParam._m0[11u].y));
    float _556 = _553 * (((((_500.z - _499) * _433) + _499) * cbMtdParam._m0[13u].z) + ((((_454.z - _453) * _433) + _453) * cbMtdParam._m0[11u].z));
    vec4 _568 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[9u].w));
    float _570 = _568.x;
    vec4 _595 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[16u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, (((cbMtdParam._m0[17u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w));
    float _601 = (_595.x * 2.0) + (-1.0);
    float _602 = (_595.y * 2.0) + (-1.0);
    float _603 = dot(vec2(_601, _602), vec2(_601, _602));
    float _3717 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _619 = (_300 * (((cbMtdParam._m0[14u].z * _345) - _345) + _601)) + _345;
    float _620 = (_300 * (((cbMtdParam._m0[14u].z * _347) - _347) + _602)) + _347;
    float _621 = (_300 * (sqrt(1.0 - (isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0)))) - _353)) + _353;
    float _624 = fma(_621, _222 * NORMAL.x, fma(_620, _229 * TANGENT.x, (_215 * _207) * _619));
    float _627 = fma(_621, _222 * NORMAL.y, fma(_620, _229 * TANGENT.y, (_215 * _208) * _619));
    float _630 = fma(_621, _222 * NORMAL.z, fma(_620, _229 * TANGENT.z, (_215 * _209) * _619));
    float _634 = inversesqrt(dot(vec3(_624, _627, _630), vec3(_624, _627, _630)));
    float _635 = _634 * _624;
    float _636 = _634 * _627;
    float _637 = _634 * _630;
    float _3728 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _638 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
    float _3739 = isnan(0.0) ? _308 : (isnan(_308) ? 0.0 : max(_308, 0.0));
    float _3750 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _3761 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
    float _3772 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
    float _642 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
    float _658 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _698 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _708 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _698);
    float _709 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _698);
    float _710 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _698);
    float _714 = inversesqrt(dot(vec3(_708, _709, _710), vec3(_708, _709, _710)));
    float _715 = _708 * _714;
    float _716 = _709 * _714;
    float _717 = _710 * _714;
    vec4 _722 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _724 = _722.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _898 = sqrt(((_708 * _708) + (_709 * _709)) + (_710 * _710));
        float _904 = (cbMatDynParam._m0[5u].x * _898) + cbMatDynParam._m0[5u].y;
        float _3783 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _905 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
        float _909 = (cbMatDynParam._m0[5u].z * _898) + cbMatDynParam._m0[5u].w;
        float _3794 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) - _905)) + _905) < ((_724 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _735 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _736 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _756 = fma(_637, cbSceneParam._m0[5u].z, fma(_636, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _635));
    float _759 = fma(_637, cbSceneParam._m0[6u].z, fma(_636, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _635));
    float _762 = fma(_637, cbSceneParam._m0[7u].z, fma(_636, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _635));
    uint _775 = uint(roundEven(NORMAL.w)) * 13u;
    uint _776 = _775 + 9u;
    uint _777 = _776 + uint(cbMatDynParam._m0[0u].w);
    float _783 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0)))) * cbInstanceData._m0[_777].x;
    float _784 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0)))) * cbInstanceData._m0[_777].y;
    float _785 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0)))) * cbInstanceData._m0[_777].z;
    float _3805 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _786 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
    float _3816 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _787 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
    float _3827 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _788 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
    float _789 = 1.0 - _642;
    float _790 = _786 * _789;
    float _791 = _787 * _789;
    float _792 = _788 * _789;
    float _797 = (_786 + (-0.039999999105930328369140625)) * _642;
    float _798 = (_787 + (-0.039999999105930328369140625)) * _642;
    float _799 = (_788 + (-0.039999999105930328369140625)) * _642;
    float _800 = _797 + 0.039999999105930328369140625;
    float _802 = _798 + 0.039999999105930328369140625;
    float _803 = _799 + 0.039999999105930328369140625;
    vec4 _812 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _735, cbSceneParam._m0[86u].y * _736));
    float _815 = _812.x * TEXCOORD_3.w;
    float _816 = dot(vec3(_635, _636, _637), vec3(_715, _716, _717));
    float _819 = _816 * 2.0;
    float _823 = (_819 * _635) - _715;
    float _824 = (_819 * _636) - _716;
    float _825 = (_819 * _637) - _717;
    float _829 = abs(dot(vec3(_715, _716, _717), vec3(_635, _636, _637)));
    float _3838 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _831 = sqrt(_638);
    float _844 = exp2((_831 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_831 * 3.0));
    float _850 = (1.0 - _844) * ((_831 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _851 = _844 * _831;
    float _879 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _883 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _887 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1216;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _942 = fma(_887, cbModelParam._m0[26u].z, fma(_883, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _879));
        float _946 = fma(_887, cbModelParam._m0[27u].z, fma(_883, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _879));
        float _950 = fma(_887, cbModelParam._m0[28u].z, fma(_883, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _879));
        float _974 = _879 + _635;
        float _975 = _883 + _636;
        float _976 = _887 + _637;
        float _986 = fma(_976, cbModelParam._m0[26u].z, fma(_975, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _974)) - _942;
        float _987 = fma(_976, cbModelParam._m0[27u].z, fma(_975, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _974)) - _946;
        float _988 = fma(_976, cbModelParam._m0[28u].z, fma(_975, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _974)) - _950;
        float _992 = inversesqrt(dot(vec3(_986, _987, _988), vec3(_986, _987, _988)));
        float _1005 = ((_992 * _986) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_942 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1006 = ((_992 * _987) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_946 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1007 = ((_992 * _988) / cbModelParam._m0[34u].z) + ((((((_950 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1010 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1005, _1006, _1007), 0.0);
        vec4 _1017 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1005, _1006, _1007), 0.0);
        vec4 _1024 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1005, _1006, _1007), 0.0);
        vec4 _1031 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1005, _1006, _1007), 0.0);
        float _1044 = exp2((_1010.w + (-0.5)) * 20.0) * 2.0;
        float _1045 = _1044 * (_1010.x + (-0.5));
        float _1046 = _1044 * (_1010.y + (-0.5));
        float _1047 = _1044 * (_1010.z + (-0.5));
        float _1054 = exp2((_1017.w + (-0.5)) * 20.0) * 2.0;
        float _1055 = _1054 * (_1017.x + (-0.5));
        float _1056 = _1054 * (_1017.y + (-0.5));
        float _1057 = _1054 * (_1017.z + (-0.5));
        float _1064 = exp2((_1024.w + (-0.5)) * 20.0) * 2.0;
        float _1065 = _1064 * (_1024.x + (-0.5));
        float _1066 = _1064 * (_1024.y + (-0.5));
        float _1067 = _1064 * (_1024.z + (-0.5));
        float _1074 = exp2((_1031.w + (-0.5)) * 20.0) * 2.0;
        float _1075 = _1074 * (_1031.x + (-0.5));
        float _1076 = _1074 * (_1031.y + (-0.5));
        float _1077 = _1074 * (_1031.z + (-0.5));
        float _1078 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1079 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1080 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1081 = _1045 * 0.5;
        float _1082 = _1055 * 0.5;
        float _1083 = _1065 * 0.5;
        float _1084 = dot(vec3(_1081, _1082, _1083), vec3(_1081, _1082, _1083));
        float _1089 = (_1084 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1084);
        float _1098 = (dot(vec3(_635, _636, _637), vec3(_1089 * _1081, _1089 * _1082, _1089 * _1083)) + 1.0) * 0.5;
        float _3864 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1108 = sqrt(((_1082 * _1082) + (_1081 * _1081)) + (_1083 * _1083)) / (_1078 + 9.9999997473787516355514526367188e-06);
        float _3875 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1110 = _1109 * 2.0;
        float _1114 = (1.0 - _1109) / (_1109 + 1.0);
        float _3886 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _1124 = ((((1.0 - _1115) * (_1110 + 2.0)) * exp2(log2(isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))) * (_1110 + 1.0))) + _1115) * _1078;
        float _1125 = _1046 * 0.5;
        float _1126 = _1056 * 0.5;
        float _1127 = _1066 * 0.5;
        float _1128 = dot(vec3(_1125, _1126, _1127), vec3(_1125, _1126, _1127));
        float _1133 = (_1128 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1128);
        float _1141 = (dot(vec3(_635, _636, _637), vec3(_1133 * _1125, _1133 * _1126, _1133 * _1127)) + 1.0) * 0.5;
        float _3897 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1150 = sqrt(((_1126 * _1126) + (_1125 * _1125)) + (_1127 * _1127)) / (_1079 + 9.9999997473787516355514526367188e-06);
        float _3908 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _1152 = _1151 * 2.0;
        float _1156 = (1.0 - _1151) / (_1151 + 1.0);
        float _3919 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _1166 = ((((1.0 - _1157) * (_1152 + 2.0)) * exp2(log2(isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0))) * (_1152 + 1.0))) + _1157) * _1079;
        float _1167 = _1047 * 0.5;
        float _1168 = _1057 * 0.5;
        float _1169 = _1067 * 0.5;
        float _1170 = dot(vec3(_1167, _1168, _1169), vec3(_1167, _1168, _1169));
        float _1175 = (_1170 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1170);
        float _1183 = (dot(vec3(_635, _636, _637), vec3(_1175 * _1167, _1175 * _1168, _1175 * _1169)) + 1.0) * 0.5;
        float _3930 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1192 = sqrt(((_1168 * _1168) + (_1167 * _1167)) + (_1169 * _1169)) / (_1080 + 9.9999997473787516355514526367188e-06);
        float _3941 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _1194 = _1193 * 2.0;
        float _1198 = (1.0 - _1193) / (_1193 + 1.0);
        float _3952 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
        float _1208 = ((((1.0 - _1199) * (_1194 + 2.0)) * exp2(log2(isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0))) * (_1194 + 1.0))) + _1199) * _1080;
        _1216 = _1047;
        _1218 = _1046;
        _1219 = _1045;
        _1220 = _1057;
        _1221 = _1056;
        _1222 = _1055;
        _1223 = _1067;
        _1224 = _1066;
        _1225 = _1065;
        _1226 = _1080;
        _1227 = _1079;
        _1228 = _1078;
        _1229 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0)));
        _1230 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0)));
        _1231 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0)));
    }
    else
    {
        _1216 = _1217;
        _1218 = _1217;
        _1219 = _1217;
        _1220 = _1217;
        _1221 = _1217;
        _1222 = _1217;
        _1223 = _1217;
        _1224 = _1217;
        _1225 = _1217;
        _1226 = _1217;
        _1227 = _1217;
        _1228 = _1217;
        _1229 = 0.0;
        _1230 = 0.0;
        _1231 = 0.0;
    }
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1260 = fma(_887, cbModelParam._m0[30u].z, fma(_883, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _879));
        float _1264 = fma(_887, cbModelParam._m0[31u].z, fma(_883, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _879));
        float _1268 = fma(_887, cbModelParam._m0[32u].z, fma(_883, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _879));
        float _1291 = _879 + _635;
        float _1292 = _883 + _636;
        float _1293 = _887 + _637;
        float _1303 = fma(_1293, cbModelParam._m0[30u].z, fma(_1292, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1291)) - _1260;
        float _1304 = fma(_1293, cbModelParam._m0[31u].z, fma(_1292, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1291)) - _1264;
        float _1305 = fma(_1293, cbModelParam._m0[32u].z, fma(_1292, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1291)) - _1268;
        float _1309 = inversesqrt(dot(vec3(_1303, _1304, _1305), vec3(_1303, _1304, _1305)));
        float _1322 = ((_1309 * _1303) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1260 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1323 = ((_1309 * _1304) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1264 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1324 = ((_1309 * _1305) / cbModelParam._m0[35u].z) + ((((((_1268 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1326 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1322, _1323, _1324), 0.0);
        vec4 _1333 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1322, _1323, _1324), 0.0);
        vec4 _1340 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1322, _1323, _1324), 0.0);
        vec4 _1347 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1322, _1323, _1324), 0.0);
        float _1359 = exp2((_1326.w + (-0.5)) * 20.0) * 2.0;
        float _1360 = _1359 * (_1326.x + (-0.5));
        float _1361 = _1359 * (_1326.y + (-0.5));
        float _1362 = _1359 * (_1326.z + (-0.5));
        float _1369 = exp2((_1333.w + (-0.5)) * 20.0) * 2.0;
        float _1370 = _1369 * (_1333.x + (-0.5));
        float _1371 = _1369 * (_1333.y + (-0.5));
        float _1372 = _1369 * (_1333.z + (-0.5));
        float _1379 = exp2((_1340.w + (-0.5)) * 20.0) * 2.0;
        float _1380 = _1379 * (_1340.x + (-0.5));
        float _1381 = _1379 * (_1340.y + (-0.5));
        float _1382 = _1379 * (_1340.z + (-0.5));
        float _1389 = exp2((_1347.w + (-0.5)) * 20.0) * 2.0;
        float _1390 = _1389 * (_1347.x + (-0.5));
        float _1391 = _1389 * (_1347.y + (-0.5));
        float _1392 = _1389 * (_1347.z + (-0.5));
        float _1393 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1394 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1395 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1396 = _1360 * 0.5;
        float _1397 = _1370 * 0.5;
        float _1398 = _1380 * 0.5;
        float _1399 = dot(vec3(_1396, _1397, _1398), vec3(_1396, _1397, _1398));
        float _1404 = (_1399 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1399);
        float _1412 = (dot(vec3(_635, _636, _637), vec3(_1404 * _1396, _1404 * _1397, _1404 * _1398)) + 1.0) * 0.5;
        float _3993 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1421 = sqrt(((_1397 * _1397) + (_1396 * _1396)) + (_1398 * _1398)) / (_1393 + 9.9999997473787516355514526367188e-06);
        float _4004 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1422 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _1423 = _1422 * 2.0;
        float _1427 = (1.0 - _1422) / (_1422 + 1.0);
        float _4015 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1428 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _1437 = ((((1.0 - _1428) * (_1423 + 2.0)) * exp2(log2(isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0))) * (_1423 + 1.0))) + _1428) * _1393;
        float _1438 = _1361 * 0.5;
        float _1439 = _1371 * 0.5;
        float _1440 = _1381 * 0.5;
        float _1441 = dot(vec3(_1438, _1439, _1440), vec3(_1438, _1439, _1440));
        float _1446 = (_1441 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1441);
        float _1454 = (dot(vec3(_635, _636, _637), vec3(_1446 * _1438, _1446 * _1439, _1446 * _1440)) + 1.0) * 0.5;
        float _4026 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1463 = sqrt(((_1439 * _1439) + (_1438 * _1438)) + (_1440 * _1440)) / (_1394 + 9.9999997473787516355514526367188e-06);
        float _4037 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1464 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1465 = _1464 * 2.0;
        float _1469 = (1.0 - _1464) / (_1464 + 1.0);
        float _4048 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1470 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1479 = ((((1.0 - _1470) * (_1465 + 2.0)) * exp2(log2(isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0))) * (_1465 + 1.0))) + _1470) * _1394;
        float _1480 = _1362 * 0.5;
        float _1481 = _1372 * 0.5;
        float _1482 = _1382 * 0.5;
        float _1483 = dot(vec3(_1480, _1481, _1482), vec3(_1480, _1481, _1482));
        float _1488 = (_1483 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1483);
        float _1496 = (dot(vec3(_635, _636, _637), vec3(_1488 * _1480, _1488 * _1481, _1488 * _1482)) + 1.0) * 0.5;
        float _4059 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1505 = sqrt(((_1481 * _1481) + (_1480 * _1480)) + (_1482 * _1482)) / (_1395 + 9.9999997473787516355514526367188e-06);
        float _4070 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1506 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1507 = _1506 * 2.0;
        float _1511 = (1.0 - _1506) / (_1506 + 1.0);
        float _4081 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1512 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _1521 = ((((1.0 - _1512) * (_1507 + 2.0)) * exp2(log2(isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) * (_1507 + 1.0))) + _1512) * _1395;
        _1529 = _1362;
        _1530 = _1361;
        _1531 = _1360;
        _1532 = _1372;
        _1533 = _1371;
        _1534 = _1370;
        _1535 = _1382;
        _1536 = _1381;
        _1537 = _1380;
        _1538 = _1395;
        _1539 = _1394;
        _1540 = _1393;
        _1541 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0)));
        _1542 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0)));
        _1543 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0)));
    }
    else
    {
        _1529 = _1217;
        _1530 = _1217;
        _1531 = _1217;
        _1532 = _1217;
        _1533 = _1217;
        _1534 = _1217;
        _1535 = _1217;
        _1536 = _1217;
        _1537 = _1217;
        _1538 = _1217;
        _1539 = _1217;
        _1540 = _1217;
        _1541 = 0.0;
        _1542 = 0.0;
        _1543 = 0.0;
    }
    float _1553 = (cbModelParam._m0[1u].x * (_1541 - _1229)) + _1229;
    float _1554 = (cbModelParam._m0[1u].x * (_1542 - _1230)) + _1230;
    float _1555 = (cbModelParam._m0[1u].x * (_1543 - _1231)) + _1231;
    float _1576 = fma(_1555, cbSceneParam._m0[89u].z, fma(_1554, cbSceneParam._m0[89u].y, _1553 * cbSceneParam._m0[89u].x));
    float _1579 = fma(_1555, cbSceneParam._m0[90u].z, fma(_1554, cbSceneParam._m0[90u].y, _1553 * cbSceneParam._m0[90u].x));
    float _1582 = fma(_1555, cbSceneParam._m0[91u].z, fma(_1554, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1553));
    float _1597 = _823 * 0.5;
    float _1598 = _824 * 0.5;
    float _1599 = _825 * 0.5;
    float _1600 = dot(vec4(_1597, _1598, _1599, 1.0), vec4(_1531, _1534, _1537, _1540));
    float _1603 = dot(vec4(_1597, _1598, _1599, 1.0), vec4(_1530, _1533, _1536, _1539));
    float _1606 = dot(vec4(_1597, _1598, _1599, 1.0), vec4(_1529, _1532, _1535, _1538));
    float _1640;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1613 = dot(vec4(_1597, _1598, _1599, 1.0), vec4(_1216, _1220, _1223, _1226));
        float _1617 = dot(vec4(_1597, _1598, _1599, 1.0), vec4(_1218, _1221, _1224, _1227));
        float _1621 = dot(vec4(_1597, _1598, _1599, 1.0), vec4(_1219, _1222, _1225, _1228));
        float _1628 = dot(vec4(cbModelParam._m0[39u]), vec4(_1597, _1598, _1599, 1.0));
        _1640 = dot(vec3(isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0)), isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0)), isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1628) ? 0.0 : (isnan(0.0) ? _1628 : max(0.0, _1628))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1640 = 1.0;
    }
    float _1651;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1642 = dot(vec4(cbModelParam._m0[40u]), vec4(_1597, _1598, _1599, 1.0));
        _1651 = dot(vec3(isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0)), isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0)), isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1642) ? 0.0 : (isnan(0.0) ? _1642 : max(0.0, _1642))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1651 = 1.0;
    }
    float _1655 = (_1651 * cbModelParam._m0[1u].x) + (_1640 * (1.0 - cbModelParam._m0[1u].x));
    float _1665 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _638);
    float _1666 = isnan(_1665) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1665 : min(cbModelParam._m0[25u].z, _1665));
    float _1746;
    float _1748;
    float _1750;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1713 = fma(_887, cbModelParam._m0[13u].z, fma(_883, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _879)) + cbModelParam._m0[13u].w;
        float _1717 = fma(_887, cbModelParam._m0[14u].z, fma(_883, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _879)) + cbModelParam._m0[14u].w;
        float _1721 = fma(_887, cbModelParam._m0[15u].z, fma(_883, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _879)) + cbModelParam._m0[15u].w;
        float _1724 = fma(_825, cbModelParam._m0[13u].z, fma(_824, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _823));
        float _1727 = fma(_825, cbModelParam._m0[14u].z, fma(_824, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _823));
        float _1730 = fma(_825, cbModelParam._m0[15u].z, fma(_824, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _823));
        float _1758;
        if (_1724 > 0.0)
        {
            _1758 = abs((1.0 - _1713) / _1724);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1724 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1713 + 1.0) / _1724);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1758 = frontier_phi_17_15_ladder;
        }
        float _1983;
        if (_1727 > 0.0)
        {
            _1983 = abs((1.0 - _1717) / _1727);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1727 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1717 + 1.0) / _1727);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1983 = frontier_phi_26_22_ladder;
        }
        float _2240;
        if (_1730 > 0.0)
        {
            _2240 = abs((1.0 - _1721) / _1730);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1730 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1721 + 1.0) / _1730);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2240 = frontier_phi_38_33_ladder;
        }
        float _2242 = isnan(_1983) ? _1758 : (isnan(_1758) ? _1983 : min(_1758, _1983));
        float _2243 = isnan(_2240) ? _2242 : (isnan(_2242) ? _2240 : min(_2242, _2240));
        float _2247 = (_2243 * _1724) + _1713;
        float _2248 = (_2243 * _1727) + _1717;
        float _2249 = (_2243 * _1730) + _1721;
        float _2250 = _2243 * 9.9999997473787516355514526367188e-05;
        float _2252 = (-1.0) - _2250;
        float _2254 = _2250 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2249 > _2254) || ((_2249 < _2252) || ((_2248 > _2254) || ((_2248 < _2252) || ((_2247 < _2252) || (_2247 > _2254))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2377 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2249, cbModelParam._m0[9u].z, fma(_2248, cbModelParam._m0[9u].y, _2247 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2249, cbModelParam._m0[10u].z, fma(_2248, cbModelParam._m0[10u].y, _2247 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2249, cbModelParam._m0[11u].z, fma(_2248, cbModelParam._m0[11u].y, _2247 * cbModelParam._m0[11u].x))), _1666);
            frontier_phi_16_38_ladder = _2377.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2377.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2377.x * cbModelParam._m0[1u].y;
        }
        _1746 = frontier_phi_16_38_ladder_2;
        _1748 = frontier_phi_16_38_ladder_1;
        _1750 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1734 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_823, _824, _825), _1666);
        _1746 = _1734.x * cbModelParam._m0[1u].y;
        _1748 = _1734.y * cbModelParam._m0[1u].y;
        _1750 = _1734.z * cbModelParam._m0[1u].y;
    }
    float _1754 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _638);
    float _1755 = isnan(_1754) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1754 : min(cbModelParam._m0[25u].w, _1754));
    float _1845;
    float _1847;
    float _1849;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1809 = fma(_887, cbModelParam._m0[21u].z, fma(_883, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _879)) + cbModelParam._m0[21u].w;
        float _1813 = fma(_887, cbModelParam._m0[22u].z, fma(_883, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _879)) + cbModelParam._m0[22u].w;
        float _1817 = fma(_887, cbModelParam._m0[23u].z, fma(_883, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _879)) + cbModelParam._m0[23u].w;
        float _1820 = fma(_825, cbModelParam._m0[21u].z, fma(_824, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _823));
        float _1823 = fma(_825, cbModelParam._m0[22u].z, fma(_824, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _823));
        float _1826 = fma(_825, cbModelParam._m0[23u].z, fma(_824, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _823));
        float _1988;
        if (_1820 > 0.0)
        {
            _1988 = abs((1.0 - _1809) / _1820);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1820 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1809 + 1.0) / _1820);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1988 = frontier_phi_28_24_ladder;
        }
        float _2267;
        if (_1823 > 0.0)
        {
            _2267 = abs((1.0 - _1813) / _1823);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1823 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1813 + 1.0) / _1823);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2267 = frontier_phi_40_35_ladder;
        }
        float _2480;
        if (_1826 > 0.0)
        {
            _2480 = abs((1.0 - _1817) / _1826);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1826 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1817 + 1.0) / _1826);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2480 = frontier_phi_49_46_ladder;
        }
        float _2482 = isnan(_2267) ? _1988 : (isnan(_1988) ? _2267 : min(_1988, _2267));
        float _2483 = isnan(_2480) ? _2482 : (isnan(_2482) ? _2480 : min(_2482, _2480));
        float _2487 = (_2483 * _1820) + _1809;
        float _2488 = (_2483 * _1823) + _1813;
        float _2489 = (_2483 * _1826) + _1817;
        float _2490 = _2483 * 9.9999997473787516355514526367188e-05;
        float _2491 = (-1.0) - _2490;
        float _2493 = _2490 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2489 > _2493) || ((_2489 < _2491) || ((_2488 > _2493) || ((_2488 < _2491) || ((_2487 < _2491) || (_2487 > _2493))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2717 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2489, cbModelParam._m0[17u].z, fma(_2488, cbModelParam._m0[17u].y, _2487 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2489, cbModelParam._m0[18u].z, fma(_2488, cbModelParam._m0[18u].y, _2487 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2489, cbModelParam._m0[19u].z, fma(_2488, cbModelParam._m0[19u].y, _2487 * cbModelParam._m0[19u].x))), _1755);
            frontier_phi_25_49_ladder = _2717.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2717.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2717.x * cbModelParam._m0[1u].z;
        }
        _1845 = frontier_phi_25_49_ladder_2;
        _1847 = frontier_phi_25_49_ladder_1;
        _1849 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1829 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_823, _824, _825), _1755);
        _1845 = _1829.x * cbModelParam._m0[1u].z;
        _1847 = _1829.y * cbModelParam._m0[1u].z;
        _1849 = _1829.z * cbModelParam._m0[1u].z;
    }
    float _1862 = (((_850 * _800) + _851) * _815) * ((cbModelParam._m0[1u].w * (_1845 - _1746)) + _1746);
    float _1864 = (((_850 * _802) + _851) * _815) * ((cbModelParam._m0[1u].w * (_1847 - _1748)) + _1748);
    float _1866 = (((_850 * _803) + _851) * _815) * ((cbModelParam._m0[1u].w * (_1849 - _1750)) + _1750);
    float _1869 = fma(_1866, cbSceneParam._m0[89u].z, fma(_1864, cbSceneParam._m0[89u].y, _1862 * cbSceneParam._m0[89u].x));
    float _1872 = fma(_1866, cbSceneParam._m0[90u].z, fma(_1864, cbSceneParam._m0[90u].y, _1862 * cbSceneParam._m0[90u].x));
    float _1875 = fma(_1866, cbSceneParam._m0[91u].z, fma(_1864, cbSceneParam._m0[91u].y, _1862 * cbSceneParam._m0[91u].x));
    vec4 _1883 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_735, _736));
    float _1885 = _1883.w;
    float _1897 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1885);
    float _1898 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1885);
    float _1899 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1885);
    uvec4 _1903 = floatBitsToUint(cbInstanceData._m0[_775 + 5u]);
    uint _1905 = _1903.x * 14u;
    uint _1906 = _1905 + 13u;
    float _1913 = _815 + (-1.0);
    float _1918 = (cbLight._m0[_1906].x * _1913) + 1.0;
    float _1919 = (cbLight._m0[_1906].y * _1913) + 1.0;
    float _1920 = (cbLight._m0[_1906].z * _1913) + 1.0;
    float _1921 = (cbLight._m0[_1906].w * _1913) + 1.0;
    uint _1922 = _1905 + 5u;
    float _1928 = isnan(1.0) ? _1919 : (isnan(_1919) ? 1.0 : min(_1919, 1.0));
    uint _1932 = _1905 + 4u;
    float _1942 = isnan(1.0) ? _1918 : (isnan(_1918) ? 1.0 : min(_1918, 1.0));
    uint _1946 = _1905 | 1u;
    float _1957 = dot(vec3(cbLight._m0[_1905].xyz), vec3(_635, _636, _637));
    float _1960 = dot(vec3(cbLight._m0[_1946].xyz), vec3(_635, _636, _637));
    float _4217 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
    float _4228 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
    float _1965 = (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * 0.3183098733425140380859375;
    float _1967 = (isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * 0.3183098733425140380859375;
    float _1974 = ((cbLight._m0[_1922].x * _1928) * _1967) + (((cbLight._m0[_1932].x * _1897) * _1942) * _1965);
    float _1975 = ((_1928 * cbLight._m0[_1922].y) * _1967) + (((cbLight._m0[_1932].y * _1898) * _1942) * _1965);
    float _1976 = ((_1928 * cbLight._m0[_1922].z) * _1967) + (((cbLight._m0[_1932].z * _1899) * _1942) * _1965);
    uvec4 _1980 = floatBitsToUint(cbLight._m0[_1905 + 12u]);
    bool _1982 = _1980.x == 0u;
    float _1993;
    float _1995;
    float _1997;
    if (_1982)
    {
        _1993 = _1974;
        _1995 = _1975;
        _1997 = _1976;
    }
    else
    {
        uint _2001 = _1905 + 6u;
        float _2017 = (dot(vec3(cbLight._m0[_1905 + 2u].xyz), vec3(_635, _636, _637)) * 0.5) + 0.5;
        float _2018 = _2017 * _2017;
        float _4239 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
        float _2019 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _2020 = isnan(1.0) ? _1920 : (isnan(_1920) ? 1.0 : min(_1920, 1.0));
        _1993 = (((cbLight._m0[_2001].x * 0.3183098733425140380859375) * _2019) * _2020) + _1974;
        _1995 = (((cbLight._m0[_2001].y * 0.3183098733425140380859375) * _2019) * _2020) + _1975;
        _1997 = (((cbLight._m0[_2001].z * 0.3183098733425140380859375) * _2019) * _2020) + _1976;
    }
    bool _2000 = _1980.y == 0u;
    float _2038;
    float _2040;
    float _2042;
    if (_2000)
    {
        _2038 = _1993;
        _2040 = _1995;
        _2042 = _1997;
    }
    else
    {
        uint _2211 = _1905 + 7u;
        float _2227 = (dot(vec3(cbLight._m0[_1905 + 3u].xyz), vec3(_635, _636, _637)) * 0.5) + 0.5;
        float _2228 = _2227 * _2227;
        float _4255 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
        float _2229 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _2230 = isnan(1.0) ? _1921 : (isnan(_1921) ? 1.0 : min(_1921, 1.0));
        _2038 = (((cbLight._m0[_2211].x * 0.3183098733425140380859375) * _2229) * _2230) + _1993;
        _2040 = (((cbLight._m0[_2211].y * 0.3183098733425140380859375) * _2229) * _2230) + _1995;
        _2042 = (((cbLight._m0[_2211].z * 0.3183098733425140380859375) * _2229) * _2230) + _1997;
    }
    uint _2045 = _1905 + 8u;
    float _2058 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1905].w)) * _638) * 0.949999988079071044921875);
    float _2059 = _2058 * _2058;
    float _2060 = cbLight._m0[_1905].x + _715;
    float _2061 = cbLight._m0[_1905].y + _716;
    float _2062 = cbLight._m0[_1905].z + _717;
    float _2066 = inversesqrt(dot(vec3(_2060, _2061, _2062), vec3(_2060, _2061, _2062)));
    float _2067 = _2066 * _2060;
    float _2068 = _2066 * _2061;
    float _2069 = _2066 * _2062;
    float _2070 = dot(vec3(_635, _636, _637), vec3(cbLight._m0[_1905].xyz));
    float _4271 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
    float _2073 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
    float _4282 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _2074 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
    float _2075 = dot(vec3(_635, _636, _637), vec3(_2067, _2068, _2069));
    float _4293 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
    float _2078 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
    float _2079 = dot(vec3(cbLight._m0[_1905].xyz), vec3(_2067, _2068, _2069));
    float _4304 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
    float _2083 = _2059 * _2059;
    float _2087 = ((_2078 * _2078) * (_2083 + (-1.0))) + 1.0;
    float _2095 = exp2(log2(1.0 - (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0)))) * 5.0);
    float _2096 = 0.959999978542327880859375 - _797;
    float _2098 = 0.959999978542327880859375 - _798;
    float _2099 = 0.959999978542327880859375 - _799;
    float _2106 = 1.0 - _2059;
    float _2117 = (0.5 / (((_2074 * ((_2073 * _2106) + _2059)) + 9.9999999392252902907785028219223e-09) + (((_2074 * _2106) + _2059) * _2073))) * _2073;
    float _4315 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
    float _2119 = (isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0))) * (_2083 / ((_2087 * _2087) * 3.141590118408203125));
    uint _2133 = _1905 + 9u;
    float _2144 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1946].w)) * _638) * 0.949999988079071044921875);
    float _2145 = _2144 * _2144;
    float _2146 = cbLight._m0[_1946].x + _715;
    float _2147 = cbLight._m0[_1946].y + _716;
    float _2148 = cbLight._m0[_1946].z + _717;
    float _2152 = inversesqrt(dot(vec3(_2146, _2147, _2148), vec3(_2146, _2147, _2148)));
    float _2153 = _2152 * _2146;
    float _2154 = _2152 * _2147;
    float _2155 = _2152 * _2148;
    float _2156 = dot(vec3(_635, _636, _637), vec3(cbLight._m0[_1946].xyz));
    float _4326 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
    float _2159 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
    float _2160 = dot(vec3(_635, _636, _637), vec3(_2153, _2154, _2155));
    float _4337 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
    float _2163 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
    float _2164 = dot(vec3(cbLight._m0[_1946].xyz), vec3(_2153, _2154, _2155));
    float _4348 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
    float _2168 = _2145 * _2145;
    float _2172 = ((_2163 * _2163) * (_2168 + (-1.0))) + 1.0;
    float _2179 = exp2(log2(1.0 - (isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0)))) * 5.0);
    float _2186 = 1.0 - _2145;
    float _2196 = (0.5 / (((_2074 * ((_2159 * _2186) + _2145)) + 9.9999999392252902907785028219223e-09) + (((_2074 * _2186) + _2145) * _2159))) * _2159;
    float _4359 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
    float _2198 = (isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0))) * (_2168 / ((_2172 * _2172) * 3.141590118408203125));
    float _2208 = (((((_2179 * _2096) + _800) * cbLight._m0[_2133].x) * _2198) * _1928) + ((((cbLight._m0[_2045].x * _1897) * ((_2095 * _2096) + _800)) * _2119) * _1942);
    float _2209 = (((((_2179 * _2098) + _802) * cbLight._m0[_2133].y) * _2198) * _1928) + ((((cbLight._m0[_2045].y * _1898) * ((_2095 * _2098) + _802)) * _2119) * _1942);
    float _2210 = (((((_2179 * _2099) + _803) * cbLight._m0[_2133].z) * _2198) * _1928) + ((((cbLight._m0[_2045].z * _1899) * ((_2095 * _2099) + _803)) * _2119) * _1942);
    float _2272;
    float _2274;
    float _2276;
    if (_1982)
    {
        _2272 = _2208;
        _2274 = _2209;
        _2276 = _2210;
    }
    else
    {
        uint _2278 = _1905 + 2u;
        uint _2282 = _1905 + 10u;
        float _2296 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2278].w)) * _638) * 0.949999988079071044921875);
        float _2297 = _2296 * _2296;
        float _2298 = cbLight._m0[_2278].x + _715;
        float _2299 = cbLight._m0[_2278].y + _716;
        float _2300 = cbLight._m0[_2278].z + _717;
        float _2304 = inversesqrt(dot(vec3(_2298, _2299, _2300), vec3(_2298, _2299, _2300)));
        float _2305 = _2304 * _2298;
        float _2306 = _2304 * _2299;
        float _2307 = _2304 * _2300;
        float _2308 = dot(vec3(_635, _636, _637), vec3(cbLight._m0[_2278].xyz));
        float _4370 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
        float _2311 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
        float _2312 = dot(vec3(_635, _636, _637), vec3(_2305, _2306, _2307));
        float _4381 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
        float _2315 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
        float _2316 = dot(vec3(cbLight._m0[_2278].xyz), vec3(_2305, _2306, _2307));
        float _4392 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
        float _2320 = _2297 * _2297;
        float _2324 = ((_2315 * _2315) * (_2320 + (-1.0))) + 1.0;
        float _2331 = exp2(log2(1.0 - (isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0)))) * 5.0);
        float _2338 = 1.0 - _2297;
        float _2348 = (0.5 / (((_2074 * ((_2311 * _2338) + _2297)) + 9.9999999392252902907785028219223e-09) + (((_2074 * _2338) + _2297) * _2311))) * _2311;
        float _4403 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
        float _2350 = (isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0))) * (_2320 / ((_2324 * _2324) * 3.141590118408203125));
        float _2351 = isnan(1.0) ? _1920 : (isnan(_1920) ? 1.0 : min(_1920, 1.0));
        _2272 = (((((_2331 * _2096) + _800) * cbLight._m0[_2282].x) * _2350) * _2351) + _2208;
        _2274 = (((((_2331 * _2098) + _802) * cbLight._m0[_2282].y) * _2350) * _2351) + _2209;
        _2276 = (((((_2331 * _2099) + _803) * cbLight._m0[_2282].z) * _2350) * _2351) + _2210;
    }
    float _2386;
    float _2388;
    float _2390;
    if (_2000)
    {
        _2386 = _2272;
        _2388 = _2274;
        _2390 = _2276;
    }
    else
    {
        uint _2397 = _1905 + 3u;
        uint _2401 = _1905 + 11u;
        float _2415 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2397].w)) * _638) * 0.949999988079071044921875);
        float _2416 = _2415 * _2415;
        float _2417 = cbLight._m0[_2397].x + _715;
        float _2418 = cbLight._m0[_2397].y + _716;
        float _2419 = cbLight._m0[_2397].z + _717;
        float _2423 = inversesqrt(dot(vec3(_2417, _2418, _2419), vec3(_2417, _2418, _2419)));
        float _2424 = _2423 * _2417;
        float _2425 = _2423 * _2418;
        float _2426 = _2423 * _2419;
        float _2427 = dot(vec3(_635, _636, _637), vec3(cbLight._m0[_2397].xyz));
        float _4419 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
        float _2430 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
        float _2431 = dot(vec3(_635, _636, _637), vec3(_2424, _2425, _2426));
        float _4430 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
        float _2434 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
        float _2435 = dot(vec3(cbLight._m0[_2397].xyz), vec3(_2424, _2425, _2426));
        float _4441 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
        float _2439 = _2416 * _2416;
        float _2443 = ((_2434 * _2434) * (_2439 + (-1.0))) + 1.0;
        float _2450 = exp2(log2(1.0 - (isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0)))) * 5.0);
        float _2457 = 1.0 - _2416;
        float _2467 = (0.5 / (((_2074 * ((_2430 * _2457) + _2416)) + 9.9999999392252902907785028219223e-09) + (((_2074 * _2457) + _2416) * _2430))) * _2430;
        float _4452 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
        float _2469 = (isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0))) * (_2439 / ((_2443 * _2443) * 3.141590118408203125));
        float _2470 = isnan(1.0) ? _1921 : (isnan(_1921) ? 1.0 : min(_1921, 1.0));
        _2386 = (((((_2450 * _2096) + _800) * cbLight._m0[_2401].x) * _2469) * _2470) + _2272;
        _2388 = (((((_2450 * _2098) + _802) * cbLight._m0[_2401].y) * _2469) * _2470) + _2274;
        _2390 = (((((_2450 * _2099) + _803) * cbLight._m0[_2401].z) * _2469) * _2470) + _2276;
    }
    float _2605;
    float _2607;
    float _2609;
    float _2611;
    float _2613;
    float _2615;
    if (_1903.y == 0u)
    {
        float _2545 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2546 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2545;
        float _2547 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2545;
        float _2548 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2545;
        uvec4 _2560 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2561 = _2560.x;
        uint _2572 = uint((float(_2560.y) * floor(float(uint(cbSceneParam._m0[85u].y * _736) / _2561))) + floor(float(uint(cbSceneParam._m0[85u].x * _735) / _2561)));
        float _2582 = (log2(_2548 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2583 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
        uint _2586 = uint(isnan(14.0) ? _2583 : (isnan(_2583) ? 14.0 : min(_2583, 14.0)));
        uvec4 _2591 = texelFetch(g_lightClusterGridBuffer, int(((_2586 << 2u) + (_2572 << 6u)) >> 2u));
        uint _2592 = _2591.x;
        uint _2593 = _2560.z;
        float _2722;
        float _2724;
        float _2726;
        float _2728;
        float _2730;
        float _2732;
        if (((((1u << ((_2593 >> 4u) & 15u)) + 4294967295u) & _2592) == 0u) || ((_2593 & 240u) == 0u))
        {
            _2722 = 0.0;
            _2724 = 0.0;
            _2726 = 0.0;
            _2728 = 0.0;
            _2730 = 0.0;
            _2732 = 0.0;
        }
        else
        {
            float _2723;
            float _2725;
            float _2727;
            float _2729;
            float _2731;
            float _2733;
            float _2883 = 0.0;
            float _2884 = 0.0;
            float _2885 = 0.0;
            float _2886 = 0.0;
            float _2887 = 0.0;
            float _2888 = 0.0;
            uint _2889 = 0u;
            uint _2898;
            bool _2899;
            for (;;)
            {
                _2898 = texelFetch(g_lightClassification, int((((_2586 << 5u) + (_2572 << 9u)) + (_2889 << 2u)) >> 2u)).x;
                _2899 = _2898 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2899)
                {
                    frontier_phi_66_pred = _2883;
                    frontier_phi_66_pred_1 = _2888;
                    frontier_phi_66_pred_2 = _2887;
                    frontier_phi_66_pred_3 = _2886;
                    frontier_phi_66_pred_4 = _2885;
                    frontier_phi_66_pred_5 = _2884;
                }
                else
                {
                    float _3028;
                    float _3029;
                    float _3030;
                    float _3031;
                    float _3032;
                    float _3033;
                    uint _3034;
                    _3028 = _2883;
                    _3029 = _2884;
                    _3030 = _2885;
                    _3031 = _2886;
                    _3032 = _2887;
                    _3033 = _2888;
                    _3034 = _2898;
                    float _2955;
                    float _2956;
                    float _2957;
                    float _2958;
                    float _2959;
                    float _2960;
                    for (;;)
                    {
                        uint _3038 = uint(findLSB(_3034)) + (_2889 << 5u);
                        uint _3035 = (_3034 + 4294967295u) & _3034;
                        uint _3040 = _3038 * 48u;
                        vec4 _3054 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3040)).x, texelFetch(g_PointLightRenderingBuffer, int(_3040 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3040 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3040 + 3u)).x));
                        uint _3060 = (_3038 * 48u) + 4u;
                        vec4 _3073 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3060)).x, texelFetch(g_PointLightRenderingBuffer, int(_3060 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3060 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3060 + 3u)).x));
                        uint _3079 = (_3038 * 48u) + 8u;
                        vec3 _3090 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3079)).x, texelFetch(g_PointLightRenderingBuffer, int(_3079 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3079 + 2u)).x));
                        float _3094 = _3054.x - _2546;
                        float _3095 = _3054.y - _2547;
                        float _3096 = _3054.z - _2548;
                        float _3097 = dot(vec3(_3094, _3095, _3096), vec3(_3094, _3095, _3096));
                        float _3100 = inversesqrt(_3097);
                        float _3101 = _3100 * _3094;
                        float _3102 = _3100 * _3095;
                        float _3103 = _3100 * _3096;
                        float _3104 = dot(vec3(_756, _759, _762), vec3(_3101, _3102, _3103));
                        float _3109 = 1.0 - (_3097 * _3054.w);
                        float _4478 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0));
                        float _3110 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
                        float _3111 = sqrt(_3097) * _3073.w;
                        float _3114 = 1.39999997615814208984375 / (_3111 + 1.39999997615814208984375);
                        float _3115 = _3114 * _3114;
                        float _3118 = ((1.0 - _3115) * _3104) + _3115;
                        float _3121 = _3111 * _3111;
                        float _3125 = ((isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0))) * _3110) / ((_3121 * 0.699999988079071044921875) + 1.0);
                        float _3129 = (-0.0) - _2546;
                        float _3130 = (-0.0) - _2547;
                        float _3131 = (-0.0) - _2548;
                        float _3135 = inversesqrt(dot(vec3(_3129, _3130, _3131), vec3(_3129, _3130, _3131)));
                        float _3136 = _3135 * _3129;
                        float _3137 = _3135 * _3130;
                        float _3138 = _3135 * _3131;
                        float _3146 = exp2(log2(1.0 / ((_3121 * 3.5) + 5.0)) * 0.25);
                        float _3147 = 1.0 - _831;
                        float _3154 = sqrt(1.0 - ((1.0 - (_3147 * _3147)) * (1.0 - (_3146 * _3146))));
                        float _3155 = _3154 * _3154;
                        float _3156 = _3155 * _3155;
                        float _3157 = _3136 + _3101;
                        float _3158 = _3137 + _3102;
                        float _3159 = _3138 + _3103;
                        float _3163 = inversesqrt(dot(vec3(_3157, _3158, _3159), vec3(_3157, _3158, _3159)));
                        float _3167 = dot(vec3(_756, _759, _762), vec3(_3136, _3137, _3138));
                        float _4494 = isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0));
                        float _3170 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
                        float _3171 = dot(vec3(_756, _759, _762), vec3(_3163 * _3157, _3163 * _3158, _3163 * _3159));
                        float _4505 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0));
                        float _3174 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
                        float _3178 = ((_3174 * _3174) * (_3156 + (-1.0))) + 1.0;
                        float _3179 = _3114 * _3155;
                        float _3180 = _3179 * _3179;
                        float _3183 = ((1.0 - _3180) * _3104) + _3180;
                        float _4516 = isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : max(_3183, 0.0));
                        float _3184 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
                        float _3185 = 1.0 - _3155;
                        float _3195 = (0.5 / (((_3184 * ((_3170 * _3185) + _3155)) + 9.9999999392252902907785028219223e-09) + (((_3184 * _3185) + _3155) * _3170))) * _3184;
                        float _4527 = isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0));
                        float _3206 = (((_3156 * 3.1415927410125732421875) * (isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0)))) / ((_3178 * _3178) * ((_3121 * 2.1991131305694580078125) + 3.141590118408203125))) * _3110;
                        _2958 = (_3125 * _3073.x) + _3031;
                        _2959 = (_3125 * _3073.y) + _3032;
                        _2960 = (_3125 * _3073.z) + _3033;
                        _2955 = (_3206 * _3090.x) + _3028;
                        _2956 = (_3206 * _3090.y) + _3029;
                        _2957 = (_3206 * _3090.z) + _3030;
                        if (_3035 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3028 = _2955;
                            _3029 = _2956;
                            _3030 = _2957;
                            _3031 = _2958;
                            _3032 = _2959;
                            _3033 = _2960;
                            _3034 = _3035;
                        }
                    }
                    frontier_phi_66_pred = _2955;
                    frontier_phi_66_pred_1 = _2960;
                    frontier_phi_66_pred_2 = _2959;
                    frontier_phi_66_pred_3 = _2958;
                    frontier_phi_66_pred_4 = _2957;
                    frontier_phi_66_pred_5 = _2956;
                }
                _2723 = frontier_phi_66_pred;
                _2733 = frontier_phi_66_pred_1;
                _2731 = frontier_phi_66_pred_2;
                _2729 = frontier_phi_66_pred_3;
                _2727 = frontier_phi_66_pred_4;
                _2725 = frontier_phi_66_pred_5;
                uint _2890 = _2889 + 1u;
                if (_2890 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2883 = _2723;
                    _2884 = _2725;
                    _2885 = _2727;
                    _2886 = _2729;
                    _2887 = _2731;
                    _2888 = _2733;
                    _2889 = _2890;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2722 = _2723;
            _2724 = _2725;
            _2726 = _2727;
            _2728 = _2729;
            _2730 = _2731;
            _2732 = _2733;
        }
        uvec4 _2736 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2737 = _2736.z;
        uint _2739 = (_2737 >> 8u) & 15u;
        float _2851;
        float _2853;
        float _2855;
        float _2857;
        float _2859;
        float _2861;
        if (((4294967295u << _2739) & _2592) == 0u)
        {
            _2851 = _2722;
            _2853 = _2724;
            _2855 = _2726;
            _2857 = _2728;
            _2859 = _2730;
            _2861 = _2732;
        }
        else
        {
            float _2876 = inversesqrt(dot(vec3(_2546, _2547, _2548), vec3(_2546, _2547, _2548)));
            float _2877 = _2876 * _2546;
            float _2878 = _2876 * _2547;
            float _2879 = _2876 * _2548;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2739 < ((_2737 >> 12u) & 15u))
            {
                float _2852;
                float _2854;
                float _2856;
                float _2858;
                float _2860;
                float _2862;
                float _3011 = _2722;
                float _3012 = _2724;
                float _3013 = _2726;
                float _3014 = _2728;
                float _3015 = _2730;
                float _3016 = _2732;
                uint _3017 = _2739;
                uint _3026;
                bool _3027;
                for (;;)
                {
                    _3026 = texelFetch(g_lightClassification, int((((_2586 << 5u) + (_2572 << 9u)) + (_3017 << 2u)) >> 2u)).x;
                    _3027 = _3026 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3027)
                    {
                        frontier_phi_77_pred = _3016;
                        frontier_phi_77_pred_1 = _3015;
                        frontier_phi_77_pred_2 = _3014;
                        frontier_phi_77_pred_3 = _3013;
                        frontier_phi_77_pred_4 = _3012;
                        frontier_phi_77_pred_5 = _3011;
                    }
                    else
                    {
                        float _3220;
                        float _3221;
                        float _3222;
                        float _3223;
                        float _3224;
                        float _3225;
                        float _3514;
                        float _3515;
                        float _3516;
                        float _3517;
                        float _3518;
                        float _3519;
                        float _3233 = _3011;
                        float _3234 = _3012;
                        float _3235 = _3013;
                        float _3236 = _3014;
                        float _3237 = _3015;
                        float _3238 = _3016;
                        uint _3239 = _3026;
                        uint _3240;
                        vec4 _3265;
                        float _3266;
                        vec4 _3281;
                        vec3 _3293;
                        vec4 _3308;
                        vec4 _3323;
                        float _3370;
                        bool _3371;
                        for (;;)
                        {
                            uint _3250 = ((_3017 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3239));
                            _3240 = (_3239 + 4294967295u) & _3239;
                            uint _3252 = _3250 * 40u;
                            _3265 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3252)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 3u)).x));
                            _3266 = _3265.w;
                            uint _3268 = (_3250 * 40u) + 4u;
                            _3281 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3268)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 3u)).x));
                            uint _3283 = (_3250 * 40u) + 8u;
                            _3293 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3283)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 2u)).x));
                            uint _3295 = (_3250 * 40u) + 16u;
                            _3308 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3295)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 3u)).x));
                            uint _3310 = (_3250 * 40u) + 20u;
                            _3323 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3310)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 3u)).x));
                            uint _3326 = (_3250 * 40u) + 24u;
                            vec4 _3339 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3326)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 3u)).x));
                            uint _3345 = (_3250 * 40u) + 28u;
                            vec4 _3358 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3345)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 3u)).x));
                            _3370 = fma(_2548, _3358.z, fma(_2547, _3358.y, _3358.x * _2546)) + _3358.w;
                            _3371 = !((fma(_2548, _3339.z, fma(_2547, _3339.y, _3339.x * _2546)) + _3339.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3371)
                            {
                                float _3398 = _3265.x - _2546;
                                float _3399 = _3265.y - _2547;
                                float _3400 = _3265.z - _2548;
                                float _3401 = dot(vec3(_3398, _3399, _3400), vec3(_3398, _3399, _3400));
                                float _3404 = inversesqrt(_3401);
                                float _3405 = _3404 * _3398;
                                float _3406 = _3404 * _3399;
                                float _3407 = _3404 * _3400;
                                float _3411 = 1.0 - (_3401 / (_3266 * _3266));
                                float _4538 = isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0));
                                float _3412 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
                                float _3416 = sqrt(_3401) * _3281.w;
                                float _3418 = 1.39999997615814208984375 / (_3416 + 1.39999997615814208984375);
                                float _3419 = _3418 * _3418;
                                float _3422 = ((1.0 - _3419) * dot(vec3(_3405, _3406, _3407), vec3(_756, _759, _762))) + _3419;
                                float _3425 = _3416 * _3416;
                                float _3429 = (fma(_2548, _3308.z, fma(_2547, _3308.y, _3308.x * _2546)) + _3308.w) / _3370;
                                float _3430 = (fma(_2548, _3323.z, fma(_2547, _3323.y, _3323.x * _2546)) + _3323.w) / _3370;
                                float _3434 = 1.0 - dot(vec2(_3429, _3430), vec2(_3429, _3430));
                                float _4554 = isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0));
                                float _3435 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
                                float _3436 = _3435 * (((isnan(0.0) ? _3422 : (isnan(_3422) ? 0.0 : max(_3422, 0.0))) * _3412) / ((_3425 * 0.699999988079071044921875) + 1.0));
                                float _3448 = exp2(log2(1.0 / ((_3425 * 3.5) + 5.0)) * 0.25);
                                float _3449 = 1.0 - _831;
                                float _3456 = sqrt(1.0 - ((1.0 - (_3449 * _3449)) * (1.0 - (_3448 * _3448))));
                                float _3457 = _3456 * _3456;
                                float _3458 = _3457 * _3457;
                                float _3459 = _3405 - _2877;
                                float _3460 = _3406 - _2878;
                                float _3461 = _3407 - _2879;
                                float _3465 = inversesqrt(dot(vec3(_3459, _3460, _3461), vec3(_3459, _3460, _3461)));
                                float _3469 = dot(vec3(_756, _759, _762), vec3((-0.0) - _2877, (-0.0) - _2878, (-0.0) - _2879));
                                float _4565 = isnan(0.0) ? _3469 : (isnan(_3469) ? 0.0 : max(_3469, 0.0));
                                float _3472 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
                                float _3473 = dot(vec3(_756, _759, _762), vec3(_3465 * _3459, _3465 * _3460, _3465 * _3461));
                                float _4576 = isnan(0.0) ? _3473 : (isnan(_3473) ? 0.0 : max(_3473, 0.0));
                                float _3476 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
                                float _3480 = ((_3476 * _3476) * (_3458 + (-1.0))) + 1.0;
                                float _3481 = _3418 * _3457;
                                float _3482 = _3481 * _3481;
                                float _3488 = ((1.0 - _3482) * dot(vec3(_756, _759, _762), vec3(_3405, _3406, _3407))) + _3482;
                                float _4587 = isnan(0.0) ? _3488 : (isnan(_3488) ? 0.0 : max(_3488, 0.0));
                                float _3489 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
                                float _3490 = 1.0 - _3457;
                                float _3500 = (0.5 / (((_3489 * ((_3472 * _3490) + _3457)) + 9.9999999392252902907785028219223e-09) + (((_3489 * _3490) + _3457) * _3472))) * _3489;
                                float _4598 = isnan(0.0) ? _3500 : (isnan(_3500) ? 0.0 : max(_3500, 0.0));
                                float _3510 = (_3435 * _3412) * (((_3458 * 3.1415927410125732421875) * (isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0)))) / ((_3480 * _3480) * ((_3425 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3436 * _3281.y;
                                frontier_phi_83_pred_1 = _3436 * _3281.x;
                                frontier_phi_83_pred_2 = _3510 * _3293.z;
                                frontier_phi_83_pred_3 = _3510 * _3293.y;
                                frontier_phi_83_pred_4 = _3510 * _3293.x;
                                frontier_phi_83_pred_5 = _3436 * _3281.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3518 = frontier_phi_83_pred;
                            _3517 = frontier_phi_83_pred_1;
                            _3516 = frontier_phi_83_pred_2;
                            _3515 = frontier_phi_83_pred_3;
                            _3514 = frontier_phi_83_pred_4;
                            _3519 = frontier_phi_83_pred_5;
                            _3223 = _3517 + _3236;
                            _3224 = _3518 + _3237;
                            _3225 = _3519 + _3238;
                            _3220 = _3514 + _3233;
                            _3221 = _3515 + _3234;
                            _3222 = _3516 + _3235;
                            if (_3240 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3233 = _3220;
                                _3234 = _3221;
                                _3235 = _3222;
                                _3236 = _3223;
                                _3237 = _3224;
                                _3238 = _3225;
                                _3239 = _3240;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3225;
                        frontier_phi_77_pred_1 = _3224;
                        frontier_phi_77_pred_2 = _3223;
                        frontier_phi_77_pred_3 = _3222;
                        frontier_phi_77_pred_4 = _3221;
                        frontier_phi_77_pred_5 = _3220;
                    }
                    _2862 = frontier_phi_77_pred;
                    _2860 = frontier_phi_77_pred_1;
                    _2858 = frontier_phi_77_pred_2;
                    _2856 = frontier_phi_77_pred_3;
                    _2854 = frontier_phi_77_pred_4;
                    _2852 = frontier_phi_77_pred_5;
                    uint _3018 = _3017 + 1u;
                    if (_3018 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3011 = _2852;
                        _3012 = _2854;
                        _3013 = _2856;
                        _3014 = _2858;
                        _3015 = _2860;
                        _3016 = _2862;
                        _3017 = _3018;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2856;
                frontier_phi_58_59_ladder_1 = _2862;
                frontier_phi_58_59_ladder_2 = _2860;
                frontier_phi_58_59_ladder_3 = _2858;
                frontier_phi_58_59_ladder_4 = _2854;
                frontier_phi_58_59_ladder_5 = _2852;
            }
            else
            {
                frontier_phi_58_59_ladder = _2726;
                frontier_phi_58_59_ladder_1 = _2732;
                frontier_phi_58_59_ladder_2 = _2730;
                frontier_phi_58_59_ladder_3 = _2728;
                frontier_phi_58_59_ladder_4 = _2724;
                frontier_phi_58_59_ladder_5 = _2722;
            }
            _2851 = frontier_phi_58_59_ladder_5;
            _2853 = frontier_phi_58_59_ladder_4;
            _2855 = frontier_phi_58_59_ladder;
            _2857 = frontier_phi_58_59_ladder_3;
            _2859 = frontier_phi_58_59_ladder_2;
            _2861 = frontier_phi_58_59_ladder_1;
        }
        float _2866 = isnan(1.0) ? _815 : (isnan(_815) ? 1.0 : min(_815, 1.0));
        _2605 = (_2866 * _2857) + _2038;
        _2607 = (_2866 * _2859) + _2040;
        _2609 = (_2866 * _2861) + _2042;
        _2611 = ((_2851 * _800) * _2866) + _2386;
        _2613 = ((_2853 * _802) * _2866) + _2388;
        _2615 = ((_2855 * _803) * _2866) + _2390;
    }
    else
    {
        _2605 = _2038;
        _2607 = _2040;
        _2609 = _2042;
        _2611 = _2386;
        _2613 = _2388;
        _2615 = _2390;
    }
    uint _2621 = _776 + uint(cbMatDynParam._m0[0u].w);
    float _2627 = cbInstanceData._m0[_2621].x * (_554 - (_570 * _554));
    float _2628 = cbInstanceData._m0[_2621].y * (_555 - (_570 * _555));
    float _2629 = cbInstanceData._m0[_2621].z * (_556 - (_570 * _556));
    float _4614 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _4625 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _4636 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _2646 = (((isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0))) * (_2605 + ((isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0))) * _815))) + ((_2611 + ((isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0))) * _1655)) * cbPerFrame._m0[3u].x)) + _2627;
    float _2648 = (_2628 + ((_2613 + ((isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0))) * _1655)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0))) * (_2607 + ((isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0))) * _815)));
    float _2650 = (_2629 + ((_2615 + ((isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0))) * _1655)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0))) * (_2609 + ((isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0))) * _815)));
    float _2651 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
    float _2652 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
    float _2653 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
    float _2659 = cbMtdParam._m0[2u].x * _2627;
    float _2660 = cbMtdParam._m0[2u].y * _2628;
    float _2661 = cbMtdParam._m0[2u].z * _2629;
    float _4662 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2663 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
    uint _2664 = _775 + 6u;
    float _2672 = _735 / cbSceneParam._m0[86u].x;
    float _2673 = _736 / cbSceneParam._m0[86u].y;
    vec4 _2687 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2672, _2673, (log2((isnan(cbSceneParam._m0[77u].w) ? _658 : (isnan(_658) ? cbSceneParam._m0[77u].w : min(_658, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2689 = _2687.x;
    float _2690 = _2687.y;
    float _2691 = _2687.z;
    float _2692 = _2687.w;
    float _2784;
    float _2786;
    float _2788;
    float _2790;
    if (_658 > cbSceneParam._m0[78u].w)
    {
        float _2747 = isnan(_658) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _658 : min(cbSceneParam._m0[80u].w, _658));
        float _2748 = _2747 / _658;
        float _2759 = _2748 * _708;
        float _2760 = _709 * _2748;
        float _2761 = (-0.0) - _2760;
        float _2762 = _2748 * _710;
        float _2764 = (cbSceneParam._m0[77u].w * _2761) / _2747;
        float _2765 = _2764 + cbSceneParam._m0[79u].w;
        float _2766 = cbSceneParam._m0[79u].w - _2760;
        float _2772 = sqrt(((_2759 * _2759) + (_2760 * _2760)) + (_2762 * _2762));
        float _2775 = (1.0 - (cbSceneParam._m0[77u].w / _2747)) * _2772;
        float _2780 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2782 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2968;
        if (abs((_2761 - _2764) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2968 = ((((_2765 > 0.0) ? exp2(_2780 * _2765) : (2.0 - exp2(_2782 * _2765))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2775;
        }
        else
        {
            float _2912 = 1.0 / cbSceneParam._m0[80u].x;
            float _2913 = isnan(_2766) ? _2765 : (isnan(_2765) ? _2766 : max(_2765, _2766));
            float _2914 = isnan(_2766) ? _2765 : (isnan(_2765) ? _2766 : min(_2765, _2766));
            float _2923 = isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : min(_2913, 0.0));
            float _2924 = isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : min(_2914, 0.0));
            _2968 = ((abs(_2772 / _2761) * cbSceneParam._m0[80u].y) * ((((_2923 - _2924) * 2.0) - ((exp2(_2780 * (isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0)))) - exp2(_2780 * (isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0))))) * _2912)) - ((exp2(_2782 * _2923) - exp2(_2782 * _2924)) * _2912))) + (_2775 * cbSceneParam._m0[80u].z);
        }
        vec4 _2970 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2672, _2673, 1.0), 0.0);
        float _2979 = exp2((_2968 * (-1.44269502162933349609375)) * (1.0 - _2970.w));
        float _2980 = log2(_2979);
        float _2996 = log2(_2692);
        _2784 = (exp2(_2996 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2980 * cbSceneParam._m0[78u].x)) * _2970.x) / cbSceneParam._m0[78u].x)) + _2689;
        _2786 = (exp2(_2996 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2980 * cbSceneParam._m0[78u].y)) * _2970.y) / cbSceneParam._m0[78u].y)) + _2690;
        _2788 = (exp2(_2996 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2980 * cbSceneParam._m0[78u].z)) * _2970.z) / cbSceneParam._m0[78u].z)) + _2691;
        _2790 = _2979 * _2692;
    }
    else
    {
        _2784 = _2689;
        _2786 = _2690;
        _2788 = _2691;
        _2790 = _2692;
    }
    bool _3006;
    vec4 _2800;
    vec4 _2822;
    float _2824;
    float _2828;
    float _2829;
    float _2830;
    float _2833;
    float _2836;
    float _2839;
    float _2840;
    bool _2850;
    for (;;)
    {
        _2800 = cbMatDynParam._m0[0u];
        float _2802 = roundEven(_2800.y);
        bool _2803 = _2802 == 3.0;
        float _2804 = log2(_2790);
        float _2808 = exp2(_2804 * cbSceneParam._m0[78u].x);
        float _2809 = exp2(_2804 * cbSceneParam._m0[78u].y);
        float _2810 = exp2(_2804 * cbSceneParam._m0[78u].z);
        float _2811 = _2808 * _2651;
        float _2812 = _2809 * _2652;
        float _2813 = _2810 * _2653;
        float _2820 = _724 + (-0.5);
        _2822 = cbMtdParam._m0[1u];
        _2824 = _2822.y * _2820;
        float _2827 = (_2802 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2828 = _2827 * (_2803 ? _2811 : (_2811 + (cbSceneParam._m0[72u].w * _2784)));
        _2829 = _2827 * (_2803 ? _2812 : (_2812 + (cbSceneParam._m0[72u].w * _2786)));
        _2830 = _2827 * (_2803 ? _2813 : (_2813 + (cbSceneParam._m0[72u].w * _2788)));
        _2833 = ((_2659 * _2663) * _2808) * _2827;
        _2836 = ((_2660 * _2663) * _2809) * _2827;
        _2839 = ((_2661 * _2663) * _2810) * _2827;
        _2840 = _2820 * 0.999000012874603271484375;
        _2850 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2850)
        {
            if ((cbInstanceData._m0[_775 + 7u].x + _2840) < 0.5)
            {
                _3006 = true;
                break;
            }
        }
        uint _2947 = _776 + uint(_2800.w);
        if ((cbInstanceData._m0[_2947].w < 1.0) && ((cbInstanceData._m0[_2947].w + _2840) < 0.5))
        {
            _3006 = true;
            break;
        }
        if ((_2824 + 1.0) < _2822.x)
        {
            _3006 = true;
            break;
        }
        _3006 = false;
        break;
    }
    float _3211;
    if (_3006)
    {
        discard_state = true;
        _3211 = 0.0;
    }
    else
    {
        _3211 = cbInstanceData._m0[_2664].w;
    }
    SV_Target.x = _2828;
    SV_Target.y = _2829;
    SV_Target.z = _2830;
    SV_Target.w = _3211;
    SV_Target_1.x = _2833;
    SV_Target_1.y = _2836;
    SV_Target_1.z = _2839;
    SV_Target_1.w = cbInstanceData._m0[_2664].w;
    discard_exit();
}


