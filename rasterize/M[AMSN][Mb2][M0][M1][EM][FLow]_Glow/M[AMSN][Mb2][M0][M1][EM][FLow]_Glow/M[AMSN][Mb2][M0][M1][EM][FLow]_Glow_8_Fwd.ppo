#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1115;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _195 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _196 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _197 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _203 = inversesqrt(dot(vec3(_195, _196, _197), vec3(_195, _196, _197)));
    float _210 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _217 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _239 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _245 = _239.x * cbMtdParam._m0[9u].x;
    float _246 = _239.y * cbMtdParam._m0[9u].y;
    float _247 = _239.z * cbMtdParam._m0[9u].z;
    vec4 _264 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _285 = TEXCOORD_9.x - ((cbMtdParam._m0[16u].y * (1.0 - TEXCOORD_9.x)) * (_264.x + 0.00999999977648258209228515625));
    float _287 = _285 * (cbMtdParam._m0[16u].z + 1.0);
    float _3481 = isnan(0.0) ? _287 : (isnan(_287) ? 0.0 : max(_287, 0.0));
    float _288 = isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0));
    float _296 = ((((cbMtdParam._m0[12u].x - _245) * TEXCOORD_9.x) * cbMtdParam._m0[16u].x) * _288) + _245;
    float _297 = ((((cbMtdParam._m0[12u].y - _246) * TEXCOORD_9.y) * cbMtdParam._m0[16u].x) * _288) + _246;
    float _298 = (((cbMtdParam._m0[16u].x * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _247)) * _288) + _247;
    vec4 _311 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[6u].w));
    float _313 = _311.x;
    vec4 _325 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _329 = _325.z;
    float _333 = (_325.x * 2.0) + (-1.0);
    float _335 = (_325.y * 2.0) + (-1.0);
    float _336 = dot(vec2(_333, _335), vec2(_333, _335));
    float _3492 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _341 = sqrt(1.0 - (isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0))));
    float _347 = _285 * (cbMtdParam._m0[16u].y + 1.0);
    float _3503 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _351 = ((cbMtdParam._m0[15u].y - _329) * (isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0)))) + _329;
    float _364 = (cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _365 = (cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _392 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * ((cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * ((cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[10u].w));
    float _397 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[15u].w;
    float _404 = ((_392.y * 0.5) + (-0.25)) * cbMtdParam._m0[15u].z;
    float _406 = (-0.0) - (cbMtdParam._m0[15u].z * ((_392.x * 0.5) + (-0.25)));
    float _408 = fract(_397);
    float _410 = fract(_397 + 0.5);
    float _411 = _408 * _406;
    float _412 = _404 * _408;
    float _415 = _410 * _406;
    float _416 = _404 * _410;
    float _421 = abs((_408 * 2.0) + (-1.0));
    vec4 _437 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_411 + _364) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_412 + _365) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _439 = _437.x;
    float _440 = _437.y;
    float _441 = _437.z;
    vec4 _442 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_415 + _364) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_416 + _365) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _469 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _470 = (cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _483 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_411 + _469) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_412 + _470) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _485 = _483.x;
    float _486 = _483.y;
    float _487 = _483.z;
    vec4 _488 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_415 + _469) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_416 + _470) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    vec4 _532 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[16u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, (((cbMtdParam._m0[17u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w));
    float _538 = (_532.x * 2.0) + (-1.0);
    float _539 = (_532.y * 2.0) + (-1.0);
    float _540 = dot(vec2(_538, _539), vec2(_538, _539));
    float _3514 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _556 = (_288 * (((cbMtdParam._m0[14u].z * _333) - _333) + _538)) + _333;
    float _557 = (_288 * (((cbMtdParam._m0[14u].z * _335) - _335) + _539)) + _335;
    float _558 = (_288 * (sqrt(1.0 - (isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0)))) - _341)) + _341;
    float _561 = fma(_558, _210 * NORMAL.x, fma(_557, _217 * TANGENT.x, (_203 * _195) * _556));
    float _564 = fma(_558, _210 * NORMAL.y, fma(_557, _217 * TANGENT.y, (_203 * _196) * _556));
    float _567 = fma(_558, _210 * NORMAL.z, fma(_557, _217 * TANGENT.z, (_203 * _197) * _556));
    float _571 = inversesqrt(dot(vec3(_561, _564, _567), vec3(_561, _564, _567)));
    float _572 = _571 * _561;
    float _573 = _571 * _564;
    float _574 = _571 * _567;
    float _3525 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _575 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
    float _3536 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _3547 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _3558 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _3569 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _579 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
    float _595 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _636 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _646 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _636);
    float _647 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _636);
    float _648 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _636);
    float _652 = inversesqrt(dot(vec3(_646, _647, _648), vec3(_646, _647, _648)));
    float _653 = _646 * _652;
    float _654 = _647 * _652;
    float _655 = _648 * _652;
    float _661 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _662 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _682 = fma(_574, cbSceneParam._m0[5u].z, fma(_573, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _572));
    float _685 = fma(_574, cbSceneParam._m0[6u].z, fma(_573, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _572));
    float _688 = fma(_574, cbSceneParam._m0[7u].z, fma(_573, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _572));
    uint _701 = uint(roundEven(NORMAL.w)) * 13u;
    uint _702 = _701 + 9u;
    uint _703 = _702 + uint(cbMatDynParam._m0[0u].w);
    float _709 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0)))) * cbInstanceData._m0[_703].x;
    float _710 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0)))) * cbInstanceData._m0[_703].y;
    float _711 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0)))) * cbInstanceData._m0[_703].z;
    float _3580 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _712 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
    float _3591 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _713 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
    float _3602 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _714 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
    float _715 = 1.0 - _579;
    float _716 = _712 * _715;
    float _717 = _713 * _715;
    float _718 = _714 * _715;
    float _723 = (_712 + (-0.039999999105930328369140625)) * _579;
    float _724 = (_713 + (-0.039999999105930328369140625)) * _579;
    float _725 = (_714 + (-0.039999999105930328369140625)) * _579;
    float _726 = _723 + 0.039999999105930328369140625;
    float _728 = _724 + 0.039999999105930328369140625;
    float _729 = _725 + 0.039999999105930328369140625;
    vec4 _738 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _661, cbSceneParam._m0[86u].y * _662));
    float _741 = _738.x * TEXCOORD_3.w;
    float _742 = dot(vec3(_572, _573, _574), vec3(_653, _654, _655));
    float _745 = _742 * 2.0;
    float _749 = (_745 * _572) - _653;
    float _750 = (_745 * _573) - _654;
    float _751 = (_745 * _574) - _655;
    float _755 = abs(dot(vec3(_653, _654, _655), vec3(_572, _573, _574)));
    float _3613 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _757 = sqrt(_575);
    float _770 = exp2((_757 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_757 * 3.0));
    float _776 = (1.0 - _770) * ((_757 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _777 = _770 * _757;
    float _805 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _809 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _813 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1114;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _840 = fma(_813, cbModelParam._m0[26u].z, fma(_809, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _805));
        float _844 = fma(_813, cbModelParam._m0[27u].z, fma(_809, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _805));
        float _848 = fma(_813, cbModelParam._m0[28u].z, fma(_809, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _805));
        float _872 = _805 + _572;
        float _873 = _809 + _573;
        float _874 = _813 + _574;
        float _884 = fma(_874, cbModelParam._m0[26u].z, fma(_873, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _872)) - _840;
        float _885 = fma(_874, cbModelParam._m0[27u].z, fma(_873, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _872)) - _844;
        float _886 = fma(_874, cbModelParam._m0[28u].z, fma(_873, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _872)) - _848;
        float _890 = inversesqrt(dot(vec3(_884, _885, _886), vec3(_884, _885, _886)));
        float _903 = ((_890 * _884) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_840 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _904 = ((_890 * _885) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_844 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _905 = ((_890 * _886) / cbModelParam._m0[34u].z) + ((((((_848 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _908 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_903, _904, _905), 0.0);
        vec4 _915 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_903, _904, _905), 0.0);
        vec4 _922 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_903, _904, _905), 0.0);
        vec4 _929 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_903, _904, _905), 0.0);
        float _942 = exp2((_908.w + (-0.5)) * 20.0) * 2.0;
        float _943 = _942 * (_908.x + (-0.5));
        float _944 = _942 * (_908.y + (-0.5));
        float _945 = _942 * (_908.z + (-0.5));
        float _952 = exp2((_915.w + (-0.5)) * 20.0) * 2.0;
        float _953 = _952 * (_915.x + (-0.5));
        float _954 = _952 * (_915.y + (-0.5));
        float _955 = _952 * (_915.z + (-0.5));
        float _962 = exp2((_922.w + (-0.5)) * 20.0) * 2.0;
        float _963 = _962 * (_922.x + (-0.5));
        float _964 = _962 * (_922.y + (-0.5));
        float _965 = _962 * (_922.z + (-0.5));
        float _972 = exp2((_929.w + (-0.5)) * 20.0) * 2.0;
        float _973 = _972 * (_929.x + (-0.5));
        float _974 = _972 * (_929.y + (-0.5));
        float _975 = _972 * (_929.z + (-0.5));
        float _976 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _977 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _978 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _979 = _943 * 0.5;
        float _980 = _953 * 0.5;
        float _981 = _963 * 0.5;
        float _982 = dot(vec3(_979, _980, _981), vec3(_979, _980, _981));
        float _987 = (_982 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_982);
        float _996 = (dot(vec3(_572, _573, _574), vec3(_987 * _979, _987 * _980, _987 * _981)) + 1.0) * 0.5;
        float _3639 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _1006 = sqrt(((_980 * _980) + (_979 * _979)) + (_981 * _981)) / (_976 + 9.9999997473787516355514526367188e-06);
        float _3650 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1007 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
        float _1008 = _1007 * 2.0;
        float _1012 = (1.0 - _1007) / (_1007 + 1.0);
        float _3661 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1013 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
        float _1022 = ((((1.0 - _1013) * (_1008 + 2.0)) * exp2(log2(isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0))) * (_1008 + 1.0))) + _1013) * _976;
        float _1023 = _944 * 0.5;
        float _1024 = _954 * 0.5;
        float _1025 = _964 * 0.5;
        float _1026 = dot(vec3(_1023, _1024, _1025), vec3(_1023, _1024, _1025));
        float _1031 = (_1026 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1026);
        float _1039 = (dot(vec3(_572, _573, _574), vec3(_1031 * _1023, _1031 * _1024, _1031 * _1025)) + 1.0) * 0.5;
        float _3672 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1048 = sqrt(((_1024 * _1024) + (_1023 * _1023)) + (_1025 * _1025)) / (_977 + 9.9999997473787516355514526367188e-06);
        float _3683 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1049 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
        float _1050 = _1049 * 2.0;
        float _1054 = (1.0 - _1049) / (_1049 + 1.0);
        float _3694 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1055 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
        float _1064 = ((((1.0 - _1055) * (_1050 + 2.0)) * exp2(log2(isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0))) * (_1050 + 1.0))) + _1055) * _977;
        float _1065 = _945 * 0.5;
        float _1066 = _955 * 0.5;
        float _1067 = _965 * 0.5;
        float _1068 = dot(vec3(_1065, _1066, _1067), vec3(_1065, _1066, _1067));
        float _1073 = (_1068 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1068);
        float _1081 = (dot(vec3(_572, _573, _574), vec3(_1073 * _1065, _1073 * _1066, _1073 * _1067)) + 1.0) * 0.5;
        float _3705 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1090 = sqrt(((_1066 * _1066) + (_1065 * _1065)) + (_1067 * _1067)) / (_978 + 9.9999997473787516355514526367188e-06);
        float _3716 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
        float _1092 = _1091 * 2.0;
        float _1096 = (1.0 - _1091) / (_1091 + 1.0);
        float _3727 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
        float _1106 = ((((1.0 - _1097) * (_1092 + 2.0)) * exp2(log2(isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0))) * (_1092 + 1.0))) + _1097) * _978;
        _1114 = _945;
        _1116 = _944;
        _1117 = _943;
        _1118 = _955;
        _1119 = _954;
        _1120 = _953;
        _1121 = _965;
        _1122 = _964;
        _1123 = _963;
        _1124 = _978;
        _1125 = _977;
        _1126 = _976;
        _1127 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0)));
        _1128 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0)));
        _1129 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0)));
    }
    else
    {
        _1114 = _1115;
        _1116 = _1115;
        _1117 = _1115;
        _1118 = _1115;
        _1119 = _1115;
        _1120 = _1115;
        _1121 = _1115;
        _1122 = _1115;
        _1123 = _1115;
        _1124 = _1115;
        _1125 = _1115;
        _1126 = _1115;
        _1127 = 0.0;
        _1128 = 0.0;
        _1129 = 0.0;
    }
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1155 = fma(_813, cbModelParam._m0[30u].z, fma(_809, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _805));
        float _1159 = fma(_813, cbModelParam._m0[31u].z, fma(_809, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _805));
        float _1163 = fma(_813, cbModelParam._m0[32u].z, fma(_809, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _805));
        float _1186 = _805 + _572;
        float _1187 = _809 + _573;
        float _1188 = _813 + _574;
        float _1198 = fma(_1188, cbModelParam._m0[30u].z, fma(_1187, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1186)) - _1155;
        float _1199 = fma(_1188, cbModelParam._m0[31u].z, fma(_1187, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1186)) - _1159;
        float _1200 = fma(_1188, cbModelParam._m0[32u].z, fma(_1187, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1186)) - _1163;
        float _1204 = inversesqrt(dot(vec3(_1198, _1199, _1200), vec3(_1198, _1199, _1200)));
        float _1217 = ((_1204 * _1198) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1155 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1218 = ((_1204 * _1199) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1159 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1219 = ((_1204 * _1200) / cbModelParam._m0[35u].z) + ((((((_1163 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1221 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1217, _1218, _1219), 0.0);
        vec4 _1228 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1217, _1218, _1219), 0.0);
        vec4 _1235 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1217, _1218, _1219), 0.0);
        vec4 _1242 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1217, _1218, _1219), 0.0);
        float _1254 = exp2((_1221.w + (-0.5)) * 20.0) * 2.0;
        float _1255 = _1254 * (_1221.x + (-0.5));
        float _1256 = _1254 * (_1221.y + (-0.5));
        float _1257 = _1254 * (_1221.z + (-0.5));
        float _1264 = exp2((_1228.w + (-0.5)) * 20.0) * 2.0;
        float _1265 = _1264 * (_1228.x + (-0.5));
        float _1266 = _1264 * (_1228.y + (-0.5));
        float _1267 = _1264 * (_1228.z + (-0.5));
        float _1274 = exp2((_1235.w + (-0.5)) * 20.0) * 2.0;
        float _1275 = _1274 * (_1235.x + (-0.5));
        float _1276 = _1274 * (_1235.y + (-0.5));
        float _1277 = _1274 * (_1235.z + (-0.5));
        float _1284 = exp2((_1242.w + (-0.5)) * 20.0) * 2.0;
        float _1285 = _1284 * (_1242.x + (-0.5));
        float _1286 = _1284 * (_1242.y + (-0.5));
        float _1287 = _1284 * (_1242.z + (-0.5));
        float _1288 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1289 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1290 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1291 = _1255 * 0.5;
        float _1292 = _1265 * 0.5;
        float _1293 = _1275 * 0.5;
        float _1294 = dot(vec3(_1291, _1292, _1293), vec3(_1291, _1292, _1293));
        float _1299 = (_1294 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1294);
        float _1307 = (dot(vec3(_572, _573, _574), vec3(_1299 * _1291, _1299 * _1292, _1299 * _1293)) + 1.0) * 0.5;
        float _3768 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1316 = sqrt(((_1292 * _1292) + (_1291 * _1291)) + (_1293 * _1293)) / (_1288 + 9.9999997473787516355514526367188e-06);
        float _3779 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1317 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
        float _1318 = _1317 * 2.0;
        float _1322 = (1.0 - _1317) / (_1317 + 1.0);
        float _3790 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
        float _1332 = ((((1.0 - _1323) * (_1318 + 2.0)) * exp2(log2(isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0))) * (_1318 + 1.0))) + _1323) * _1288;
        float _1333 = _1256 * 0.5;
        float _1334 = _1266 * 0.5;
        float _1335 = _1276 * 0.5;
        float _1336 = dot(vec3(_1333, _1334, _1335), vec3(_1333, _1334, _1335));
        float _1341 = (_1336 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1336);
        float _1349 = (dot(vec3(_572, _573, _574), vec3(_1341 * _1333, _1341 * _1334, _1341 * _1335)) + 1.0) * 0.5;
        float _3801 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1358 = sqrt(((_1334 * _1334) + (_1333 * _1333)) + (_1335 * _1335)) / (_1289 + 9.9999997473787516355514526367188e-06);
        float _3812 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1359 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
        float _1360 = _1359 * 2.0;
        float _1364 = (1.0 - _1359) / (_1359 + 1.0);
        float _3823 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1365 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
        float _1374 = ((((1.0 - _1365) * (_1360 + 2.0)) * exp2(log2(isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0))) * (_1360 + 1.0))) + _1365) * _1289;
        float _1375 = _1257 * 0.5;
        float _1376 = _1267 * 0.5;
        float _1377 = _1277 * 0.5;
        float _1378 = dot(vec3(_1375, _1376, _1377), vec3(_1375, _1376, _1377));
        float _1383 = (_1378 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1378);
        float _1391 = (dot(vec3(_572, _573, _574), vec3(_1383 * _1375, _1383 * _1376, _1383 * _1377)) + 1.0) * 0.5;
        float _3834 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1400 = sqrt(((_1376 * _1376) + (_1375 * _1375)) + (_1377 * _1377)) / (_1290 + 9.9999997473787516355514526367188e-06);
        float _3845 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1401 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
        float _1402 = _1401 * 2.0;
        float _1406 = (1.0 - _1401) / (_1401 + 1.0);
        float _3856 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1407 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _1416 = ((((1.0 - _1407) * (_1402 + 2.0)) * exp2(log2(isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) * (_1402 + 1.0))) + _1407) * _1290;
        _1424 = _1257;
        _1425 = _1256;
        _1426 = _1255;
        _1427 = _1267;
        _1428 = _1266;
        _1429 = _1265;
        _1430 = _1277;
        _1431 = _1276;
        _1432 = _1275;
        _1433 = _1290;
        _1434 = _1289;
        _1435 = _1288;
        _1436 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0)));
        _1437 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0)));
        _1438 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0)));
    }
    else
    {
        _1424 = _1115;
        _1425 = _1115;
        _1426 = _1115;
        _1427 = _1115;
        _1428 = _1115;
        _1429 = _1115;
        _1430 = _1115;
        _1431 = _1115;
        _1432 = _1115;
        _1433 = _1115;
        _1434 = _1115;
        _1435 = _1115;
        _1436 = 0.0;
        _1437 = 0.0;
        _1438 = 0.0;
    }
    float _1448 = (cbModelParam._m0[1u].x * (_1436 - _1127)) + _1127;
    float _1449 = (cbModelParam._m0[1u].x * (_1437 - _1128)) + _1128;
    float _1450 = (cbModelParam._m0[1u].x * (_1438 - _1129)) + _1129;
    float _1471 = fma(_1450, cbSceneParam._m0[89u].z, fma(_1449, cbSceneParam._m0[89u].y, _1448 * cbSceneParam._m0[89u].x));
    float _1474 = fma(_1450, cbSceneParam._m0[90u].z, fma(_1449, cbSceneParam._m0[90u].y, _1448 * cbSceneParam._m0[90u].x));
    float _1477 = fma(_1450, cbSceneParam._m0[91u].z, fma(_1449, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1448));
    float _1492 = _749 * 0.5;
    float _1493 = _750 * 0.5;
    float _1494 = _751 * 0.5;
    float _1495 = dot(vec4(_1492, _1493, _1494, 1.0), vec4(_1426, _1429, _1432, _1435));
    float _1498 = dot(vec4(_1492, _1493, _1494, 1.0), vec4(_1425, _1428, _1431, _1434));
    float _1501 = dot(vec4(_1492, _1493, _1494, 1.0), vec4(_1424, _1427, _1430, _1433));
    float _1535;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1508 = dot(vec4(_1492, _1493, _1494, 1.0), vec4(_1114, _1118, _1121, _1124));
        float _1512 = dot(vec4(_1492, _1493, _1494, 1.0), vec4(_1116, _1119, _1122, _1125));
        float _1516 = dot(vec4(_1492, _1493, _1494, 1.0), vec4(_1117, _1120, _1123, _1126));
        float _1523 = dot(vec4(cbModelParam._m0[39u]), vec4(_1492, _1493, _1494, 1.0));
        _1535 = dot(vec3(isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0)), isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0)), isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1523) ? 0.0 : (isnan(0.0) ? _1523 : max(0.0, _1523))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1535 = 1.0;
    }
    float _1546;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1537 = dot(vec4(cbModelParam._m0[40u]), vec4(_1492, _1493, _1494, 1.0));
        _1546 = dot(vec3(isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0)), isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0)), isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1537) ? 0.0 : (isnan(0.0) ? _1537 : max(0.0, _1537))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1546 = 1.0;
    }
    float _1550 = (_1546 * cbModelParam._m0[1u].x) + (_1535 * (1.0 - cbModelParam._m0[1u].x));
    float _1560 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _575);
    float _1561 = isnan(_1560) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1560 : min(cbModelParam._m0[25u].z, _1560));
    float _1641;
    float _1643;
    float _1645;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1608 = fma(_813, cbModelParam._m0[13u].z, fma(_809, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _805)) + cbModelParam._m0[13u].w;
        float _1612 = fma(_813, cbModelParam._m0[14u].z, fma(_809, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _805)) + cbModelParam._m0[14u].w;
        float _1616 = fma(_813, cbModelParam._m0[15u].z, fma(_809, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _805)) + cbModelParam._m0[15u].w;
        float _1619 = fma(_751, cbModelParam._m0[13u].z, fma(_750, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _749));
        float _1622 = fma(_751, cbModelParam._m0[14u].z, fma(_750, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _749));
        float _1625 = fma(_751, cbModelParam._m0[15u].z, fma(_750, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _749));
        float _1653;
        if (_1619 > 0.0)
        {
            _1653 = abs((1.0 - _1608) / _1619);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1619 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1608 + 1.0) / _1619);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1653 = frontier_phi_14_12_ladder;
        }
        float _1857;
        if (_1622 > 0.0)
        {
            _1857 = abs((1.0 - _1612) / _1622);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1622 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1612 + 1.0) / _1622);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1857 = frontier_phi_23_19_ladder;
        }
        float _2111;
        if (_1625 > 0.0)
        {
            _2111 = abs((1.0 - _1616) / _1625);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1625 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1616 + 1.0) / _1625);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2111 = frontier_phi_35_30_ladder;
        }
        float _2113 = isnan(_1857) ? _1653 : (isnan(_1653) ? _1857 : min(_1653, _1857));
        float _2114 = isnan(_2111) ? _2113 : (isnan(_2113) ? _2111 : min(_2113, _2111));
        float _2118 = (_2114 * _1619) + _1608;
        float _2119 = (_2114 * _1622) + _1612;
        float _2120 = (_2114 * _1625) + _1616;
        float _2121 = _2114 * 9.9999997473787516355514526367188e-05;
        float _2123 = (-1.0) - _2121;
        float _2125 = _2121 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2120 > _2125) || ((_2120 < _2123) || ((_2119 > _2125) || ((_2119 < _2123) || ((_2118 < _2123) || (_2118 > _2125))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2248 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2120, cbModelParam._m0[9u].z, fma(_2119, cbModelParam._m0[9u].y, _2118 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2120, cbModelParam._m0[10u].z, fma(_2119, cbModelParam._m0[10u].y, _2118 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2120, cbModelParam._m0[11u].z, fma(_2119, cbModelParam._m0[11u].y, _2118 * cbModelParam._m0[11u].x))), _1561);
            frontier_phi_13_35_ladder = _2248.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2248.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2248.x * cbModelParam._m0[1u].y;
        }
        _1641 = frontier_phi_13_35_ladder_2;
        _1643 = frontier_phi_13_35_ladder_1;
        _1645 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1629 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_749, _750, _751), _1561);
        _1641 = _1629.x * cbModelParam._m0[1u].y;
        _1643 = _1629.y * cbModelParam._m0[1u].y;
        _1645 = _1629.z * cbModelParam._m0[1u].y;
    }
    float _1649 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _575);
    float _1650 = isnan(_1649) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1649 : min(cbModelParam._m0[25u].w, _1649));
    float _1740;
    float _1742;
    float _1744;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1704 = fma(_813, cbModelParam._m0[21u].z, fma(_809, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _805)) + cbModelParam._m0[21u].w;
        float _1708 = fma(_813, cbModelParam._m0[22u].z, fma(_809, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _805)) + cbModelParam._m0[22u].w;
        float _1712 = fma(_813, cbModelParam._m0[23u].z, fma(_809, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _805)) + cbModelParam._m0[23u].w;
        float _1715 = fma(_751, cbModelParam._m0[21u].z, fma(_750, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _749));
        float _1718 = fma(_751, cbModelParam._m0[22u].z, fma(_750, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _749));
        float _1721 = fma(_751, cbModelParam._m0[23u].z, fma(_750, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _749));
        float _1862;
        if (_1715 > 0.0)
        {
            _1862 = abs((1.0 - _1704) / _1715);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1715 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1704 + 1.0) / _1715);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1862 = frontier_phi_25_21_ladder;
        }
        float _2138;
        if (_1718 > 0.0)
        {
            _2138 = abs((1.0 - _1708) / _1718);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1718 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1708 + 1.0) / _1718);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2138 = frontier_phi_37_32_ladder;
        }
        float _2351;
        if (_1721 > 0.0)
        {
            _2351 = abs((1.0 - _1712) / _1721);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1721 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1712 + 1.0) / _1721);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2351 = frontier_phi_46_43_ladder;
        }
        float _2353 = isnan(_2138) ? _1862 : (isnan(_1862) ? _2138 : min(_1862, _2138));
        float _2354 = isnan(_2351) ? _2353 : (isnan(_2353) ? _2351 : min(_2353, _2351));
        float _2358 = (_2354 * _1715) + _1704;
        float _2359 = (_2354 * _1718) + _1708;
        float _2360 = (_2354 * _1721) + _1712;
        float _2361 = _2354 * 9.9999997473787516355514526367188e-05;
        float _2362 = (-1.0) - _2361;
        float _2364 = _2361 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2360 > _2364) || ((_2360 < _2362) || ((_2359 > _2364) || ((_2359 < _2362) || ((_2358 < _2362) || (_2358 > _2364))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2588 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2360, cbModelParam._m0[17u].z, fma(_2359, cbModelParam._m0[17u].y, _2358 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2360, cbModelParam._m0[18u].z, fma(_2359, cbModelParam._m0[18u].y, _2358 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2360, cbModelParam._m0[19u].z, fma(_2359, cbModelParam._m0[19u].y, _2358 * cbModelParam._m0[19u].x))), _1650);
            frontier_phi_22_46_ladder = _2588.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2588.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2588.x * cbModelParam._m0[1u].z;
        }
        _1740 = frontier_phi_22_46_ladder_2;
        _1742 = frontier_phi_22_46_ladder_1;
        _1744 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1724 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_749, _750, _751), _1650);
        _1740 = _1724.x * cbModelParam._m0[1u].z;
        _1742 = _1724.y * cbModelParam._m0[1u].z;
        _1744 = _1724.z * cbModelParam._m0[1u].z;
    }
    float _1757 = (((_776 * _726) + _777) * _741) * ((cbModelParam._m0[1u].w * (_1740 - _1641)) + _1641);
    float _1759 = (((_776 * _728) + _777) * _741) * ((cbModelParam._m0[1u].w * (_1742 - _1643)) + _1643);
    float _1761 = (((_776 * _729) + _777) * _741) * ((cbModelParam._m0[1u].w * (_1744 - _1645)) + _1645);
    float _1764 = fma(_1761, cbSceneParam._m0[89u].z, fma(_1759, cbSceneParam._m0[89u].y, _1757 * cbSceneParam._m0[89u].x));
    float _1767 = fma(_1761, cbSceneParam._m0[90u].z, fma(_1759, cbSceneParam._m0[90u].y, _1757 * cbSceneParam._m0[90u].x));
    float _1770 = fma(_1761, cbSceneParam._m0[91u].z, fma(_1759, cbSceneParam._m0[91u].y, _1757 * cbSceneParam._m0[91u].x));
    uvec4 _1780 = floatBitsToUint(cbInstanceData._m0[_701 + 5u]);
    uint _1782 = _1780.x * 14u;
    uint _1783 = _1782 + 13u;
    float _1790 = _741 + (-1.0);
    float _1795 = (cbLight._m0[_1783].x * _1790) + 1.0;
    float _1796 = (cbLight._m0[_1783].y * _1790) + 1.0;
    float _1797 = (cbLight._m0[_1783].z * _1790) + 1.0;
    float _1798 = (cbLight._m0[_1783].w * _1790) + 1.0;
    uint _1799 = _1782 + 5u;
    float _1805 = isnan(1.0) ? _1796 : (isnan(_1796) ? 1.0 : min(_1796, 1.0));
    uint _1809 = _1782 + 4u;
    float _1816 = isnan(1.0) ? _1795 : (isnan(_1795) ? 1.0 : min(_1795, 1.0));
    uint _1820 = _1782 | 1u;
    float _1831 = dot(vec3(cbLight._m0[_1782].xyz), vec3(_572, _573, _574));
    float _1834 = dot(vec3(cbLight._m0[_1820].xyz), vec3(_572, _573, _574));
    float _3992 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
    float _4003 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
    float _1839 = (isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))) * 0.3183098733425140380859375;
    float _1841 = (isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * 0.3183098733425140380859375;
    float _1848 = ((cbLight._m0[_1799].x * _1805) * _1841) + ((cbLight._m0[_1809].x * _1816) * _1839);
    float _1849 = ((_1805 * cbLight._m0[_1799].y) * _1841) + ((_1816 * cbLight._m0[_1809].y) * _1839);
    float _1850 = ((_1805 * cbLight._m0[_1799].z) * _1841) + ((_1816 * cbLight._m0[_1809].z) * _1839);
    uvec4 _1854 = floatBitsToUint(cbLight._m0[_1782 + 12u]);
    bool _1856 = _1854.x == 0u;
    float _1867;
    float _1869;
    float _1871;
    if (_1856)
    {
        _1867 = _1848;
        _1869 = _1849;
        _1871 = _1850;
    }
    else
    {
        uint _1875 = _1782 + 6u;
        float _1891 = (dot(vec3(cbLight._m0[_1782 + 2u].xyz), vec3(_572, _573, _574)) * 0.5) + 0.5;
        float _1892 = _1891 * _1891;
        float _4014 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
        float _1893 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _1894 = isnan(1.0) ? _1797 : (isnan(_1797) ? 1.0 : min(_1797, 1.0));
        _1867 = (((cbLight._m0[_1875].x * 0.3183098733425140380859375) * _1893) * _1894) + _1848;
        _1869 = (((cbLight._m0[_1875].y * 0.3183098733425140380859375) * _1893) * _1894) + _1849;
        _1871 = (((cbLight._m0[_1875].z * 0.3183098733425140380859375) * _1893) * _1894) + _1850;
    }
    bool _1874 = _1854.y == 0u;
    float _1912;
    float _1914;
    float _1916;
    if (_1874)
    {
        _1912 = _1867;
        _1914 = _1869;
        _1916 = _1871;
    }
    else
    {
        uint _2082 = _1782 + 7u;
        float _2098 = (dot(vec3(cbLight._m0[_1782 + 3u].xyz), vec3(_572, _573, _574)) * 0.5) + 0.5;
        float _2099 = _2098 * _2098;
        float _4030 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
        float _2100 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _2101 = isnan(1.0) ? _1798 : (isnan(_1798) ? 1.0 : min(_1798, 1.0));
        _1912 = (((cbLight._m0[_2082].x * 0.3183098733425140380859375) * _2100) * _2101) + _1867;
        _1914 = (((cbLight._m0[_2082].y * 0.3183098733425140380859375) * _2100) * _2101) + _1869;
        _1916 = (((cbLight._m0[_2082].z * 0.3183098733425140380859375) * _2100) * _2101) + _1871;
    }
    uint _1919 = _1782 + 8u;
    float _1932 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1782].w)) * _575) * 0.949999988079071044921875);
    float _1933 = _1932 * _1932;
    float _1934 = cbLight._m0[_1782].x + _653;
    float _1935 = cbLight._m0[_1782].y + _654;
    float _1936 = cbLight._m0[_1782].z + _655;
    float _1940 = inversesqrt(dot(vec3(_1934, _1935, _1936), vec3(_1934, _1935, _1936)));
    float _1941 = _1940 * _1934;
    float _1942 = _1940 * _1935;
    float _1943 = _1940 * _1936;
    float _1944 = dot(vec3(_572, _573, _574), vec3(cbLight._m0[_1782].xyz));
    float _4046 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
    float _1947 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
    float _4057 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _1948 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
    float _1949 = dot(vec3(_572, _573, _574), vec3(_1941, _1942, _1943));
    float _4068 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
    float _1952 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
    float _1953 = dot(vec3(cbLight._m0[_1782].xyz), vec3(_1941, _1942, _1943));
    float _4079 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
    float _1957 = _1933 * _1933;
    float _1961 = ((_1952 * _1952) * (_1957 + (-1.0))) + 1.0;
    float _1969 = exp2(log2(1.0 - (isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0)))) * 5.0);
    float _1970 = 0.959999978542327880859375 - _723;
    float _1972 = 0.959999978542327880859375 - _724;
    float _1973 = 0.959999978542327880859375 - _725;
    float _1980 = 1.0 - _1933;
    float _1991 = (0.5 / (((_1948 * ((_1947 * _1980) + _1933)) + 9.9999999392252902907785028219223e-09) + (((_1948 * _1980) + _1933) * _1947))) * _1947;
    float _4090 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
    float _1993 = (isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0))) * (_1957 / ((_1961 * _1961) * 3.141590118408203125));
    uint _2004 = _1782 + 9u;
    float _2015 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1820].w)) * _575) * 0.949999988079071044921875);
    float _2016 = _2015 * _2015;
    float _2017 = cbLight._m0[_1820].x + _653;
    float _2018 = cbLight._m0[_1820].y + _654;
    float _2019 = cbLight._m0[_1820].z + _655;
    float _2023 = inversesqrt(dot(vec3(_2017, _2018, _2019), vec3(_2017, _2018, _2019)));
    float _2024 = _2023 * _2017;
    float _2025 = _2023 * _2018;
    float _2026 = _2023 * _2019;
    float _2027 = dot(vec3(_572, _573, _574), vec3(cbLight._m0[_1820].xyz));
    float _4101 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
    float _2030 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
    float _2031 = dot(vec3(_572, _573, _574), vec3(_2024, _2025, _2026));
    float _4112 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
    float _2034 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
    float _2035 = dot(vec3(cbLight._m0[_1820].xyz), vec3(_2024, _2025, _2026));
    float _4123 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
    float _2039 = _2016 * _2016;
    float _2043 = ((_2034 * _2034) * (_2039 + (-1.0))) + 1.0;
    float _2050 = exp2(log2(1.0 - (isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0)))) * 5.0);
    float _2057 = 1.0 - _2016;
    float _2067 = (0.5 / (((_1948 * ((_2030 * _2057) + _2016)) + 9.9999999392252902907785028219223e-09) + (((_1948 * _2057) + _2016) * _2030))) * _2030;
    float _4134 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
    float _2069 = (isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0))) * (_2039 / ((_2043 * _2043) * 3.141590118408203125));
    float _2079 = (((((_2050 * _1970) + _726) * cbLight._m0[_2004].x) * _2069) * _1805) + (((((_1969 * _1970) + _726) * cbLight._m0[_1919].x) * _1993) * _1816);
    float _2080 = (((((_2050 * _1972) + _728) * cbLight._m0[_2004].y) * _2069) * _1805) + (((((_1969 * _1972) + _728) * cbLight._m0[_1919].y) * _1993) * _1816);
    float _2081 = (((((_2050 * _1973) + _729) * cbLight._m0[_2004].z) * _2069) * _1805) + (((((_1969 * _1973) + _729) * cbLight._m0[_1919].z) * _1993) * _1816);
    float _2143;
    float _2145;
    float _2147;
    if (_1856)
    {
        _2143 = _2079;
        _2145 = _2080;
        _2147 = _2081;
    }
    else
    {
        uint _2149 = _1782 + 2u;
        uint _2153 = _1782 + 10u;
        float _2167 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2149].w)) * _575) * 0.949999988079071044921875);
        float _2168 = _2167 * _2167;
        float _2169 = cbLight._m0[_2149].x + _653;
        float _2170 = cbLight._m0[_2149].y + _654;
        float _2171 = cbLight._m0[_2149].z + _655;
        float _2175 = inversesqrt(dot(vec3(_2169, _2170, _2171), vec3(_2169, _2170, _2171)));
        float _2176 = _2175 * _2169;
        float _2177 = _2175 * _2170;
        float _2178 = _2175 * _2171;
        float _2179 = dot(vec3(_572, _573, _574), vec3(cbLight._m0[_2149].xyz));
        float _4145 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
        float _2182 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
        float _2183 = dot(vec3(_572, _573, _574), vec3(_2176, _2177, _2178));
        float _4156 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
        float _2186 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _2187 = dot(vec3(cbLight._m0[_2149].xyz), vec3(_2176, _2177, _2178));
        float _4167 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
        float _2191 = _2168 * _2168;
        float _2195 = ((_2186 * _2186) * (_2191 + (-1.0))) + 1.0;
        float _2202 = exp2(log2(1.0 - (isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0)))) * 5.0);
        float _2209 = 1.0 - _2168;
        float _2219 = (0.5 / (((_1948 * ((_2182 * _2209) + _2168)) + 9.9999999392252902907785028219223e-09) + (((_1948 * _2209) + _2168) * _2182))) * _2182;
        float _4178 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
        float _2221 = (isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0))) * (_2191 / ((_2195 * _2195) * 3.141590118408203125));
        float _2222 = isnan(1.0) ? _1797 : (isnan(_1797) ? 1.0 : min(_1797, 1.0));
        _2143 = (((((_2202 * _1970) + _726) * cbLight._m0[_2153].x) * _2221) * _2222) + _2079;
        _2145 = (((((_2202 * _1972) + _728) * cbLight._m0[_2153].y) * _2221) * _2222) + _2080;
        _2147 = (((((_2202 * _1973) + _729) * cbLight._m0[_2153].z) * _2221) * _2222) + _2081;
    }
    float _2257;
    float _2259;
    float _2261;
    if (_1874)
    {
        _2257 = _2143;
        _2259 = _2145;
        _2261 = _2147;
    }
    else
    {
        uint _2268 = _1782 + 3u;
        uint _2272 = _1782 + 11u;
        float _2286 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2268].w)) * _575) * 0.949999988079071044921875);
        float _2287 = _2286 * _2286;
        float _2288 = cbLight._m0[_2268].x + _653;
        float _2289 = cbLight._m0[_2268].y + _654;
        float _2290 = cbLight._m0[_2268].z + _655;
        float _2294 = inversesqrt(dot(vec3(_2288, _2289, _2290), vec3(_2288, _2289, _2290)));
        float _2295 = _2294 * _2288;
        float _2296 = _2294 * _2289;
        float _2297 = _2294 * _2290;
        float _2298 = dot(vec3(_572, _573, _574), vec3(cbLight._m0[_2268].xyz));
        float _4194 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
        float _2301 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _2302 = dot(vec3(_572, _573, _574), vec3(_2295, _2296, _2297));
        float _4205 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
        float _2305 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _2306 = dot(vec3(cbLight._m0[_2268].xyz), vec3(_2295, _2296, _2297));
        float _4216 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
        float _2310 = _2287 * _2287;
        float _2314 = ((_2305 * _2305) * (_2310 + (-1.0))) + 1.0;
        float _2321 = exp2(log2(1.0 - (isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0)))) * 5.0);
        float _2328 = 1.0 - _2287;
        float _2338 = (0.5 / (((_1948 * ((_2301 * _2328) + _2287)) + 9.9999999392252902907785028219223e-09) + (((_1948 * _2328) + _2287) * _2301))) * _2301;
        float _4227 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
        float _2340 = (isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0))) * (_2310 / ((_2314 * _2314) * 3.141590118408203125));
        float _2341 = isnan(1.0) ? _1798 : (isnan(_1798) ? 1.0 : min(_1798, 1.0));
        _2257 = (((((_2321 * _1970) + _726) * cbLight._m0[_2272].x) * _2340) * _2341) + _2143;
        _2259 = (((((_2321 * _1972) + _728) * cbLight._m0[_2272].y) * _2340) * _2341) + _2145;
        _2261 = (((((_2321 * _1973) + _729) * cbLight._m0[_2272].z) * _2340) * _2341) + _2147;
    }
    float _2476;
    float _2478;
    float _2480;
    float _2482;
    float _2484;
    float _2486;
    if (_1780.y == 0u)
    {
        float _2416 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2417 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2416;
        float _2418 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2416;
        float _2419 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2416;
        uvec4 _2431 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2432 = _2431.x;
        uint _2443 = uint((float(_2431.y) * floor(float(uint(cbSceneParam._m0[85u].y * _662) / _2432))) + floor(float(uint(cbSceneParam._m0[85u].x * _661) / _2432)));
        float _2453 = (log2(_2419 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2454 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
        uint _2457 = uint(isnan(14.0) ? _2454 : (isnan(_2454) ? 14.0 : min(_2454, 14.0)));
        uvec4 _2462 = texelFetch(g_lightClusterGridBuffer, int(((_2457 << 2u) + (_2443 << 6u)) >> 2u));
        uint _2463 = _2462.x;
        uint _2464 = _2431.z;
        float _2593;
        float _2595;
        float _2597;
        float _2599;
        float _2601;
        float _2603;
        if (((((1u << ((_2464 >> 4u) & 15u)) + 4294967295u) & _2463) == 0u) || ((_2464 & 240u) == 0u))
        {
            _2593 = 0.0;
            _2595 = 0.0;
            _2597 = 0.0;
            _2599 = 0.0;
            _2601 = 0.0;
            _2603 = 0.0;
        }
        else
        {
            float _2594;
            float _2596;
            float _2598;
            float _2600;
            float _2602;
            float _2604;
            float _2746 = 0.0;
            float _2747 = 0.0;
            float _2748 = 0.0;
            float _2749 = 0.0;
            float _2750 = 0.0;
            float _2751 = 0.0;
            uint _2752 = 0u;
            uint _2761;
            bool _2762;
            for (;;)
            {
                _2761 = texelFetch(g_lightClassification, int((((_2457 << 5u) + (_2443 << 9u)) + (_2752 << 2u)) >> 2u)).x;
                _2762 = _2761 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2762)
                {
                    frontier_phi_61_pred = _2746;
                    frontier_phi_61_pred_1 = _2751;
                    frontier_phi_61_pred_2 = _2750;
                    frontier_phi_61_pred_3 = _2749;
                    frontier_phi_61_pred_4 = _2748;
                    frontier_phi_61_pred_5 = _2747;
                }
                else
                {
                    float _2870;
                    float _2871;
                    float _2872;
                    float _2873;
                    float _2874;
                    float _2875;
                    uint _2876;
                    _2870 = _2746;
                    _2871 = _2747;
                    _2872 = _2748;
                    _2873 = _2749;
                    _2874 = _2750;
                    _2875 = _2751;
                    _2876 = _2761;
                    float _2802;
                    float _2803;
                    float _2804;
                    float _2805;
                    float _2806;
                    float _2807;
                    for (;;)
                    {
                        uint _2880 = uint(findLSB(_2876)) + (_2752 << 5u);
                        uint _2877 = (_2876 + 4294967295u) & _2876;
                        uint _2882 = _2880 * 48u;
                        vec4 _2896 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2882)).x, texelFetch(g_PointLightRenderingBuffer, int(_2882 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2882 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2882 + 3u)).x));
                        uint _2902 = (_2880 * 48u) + 4u;
                        vec4 _2915 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2902)).x, texelFetch(g_PointLightRenderingBuffer, int(_2902 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2902 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2902 + 3u)).x));
                        uint _2921 = (_2880 * 48u) + 8u;
                        vec3 _2932 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2921)).x, texelFetch(g_PointLightRenderingBuffer, int(_2921 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2921 + 2u)).x));
                        float _2936 = _2896.x - _2417;
                        float _2937 = _2896.y - _2418;
                        float _2938 = _2896.z - _2419;
                        float _2939 = dot(vec3(_2936, _2937, _2938), vec3(_2936, _2937, _2938));
                        float _2942 = inversesqrt(_2939);
                        float _2943 = _2942 * _2936;
                        float _2944 = _2942 * _2937;
                        float _2945 = _2942 * _2938;
                        float _2946 = dot(vec3(_682, _685, _688), vec3(_2943, _2944, _2945));
                        float _2951 = 1.0 - (_2939 * _2896.w);
                        float _4253 = isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : max(_2951, 0.0));
                        float _2952 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
                        float _2953 = sqrt(_2939) * _2915.w;
                        float _2956 = 1.39999997615814208984375 / (_2953 + 1.39999997615814208984375);
                        float _2957 = _2956 * _2956;
                        float _2960 = ((1.0 - _2957) * _2946) + _2957;
                        float _2963 = _2953 * _2953;
                        float _2967 = ((isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0))) * _2952) / ((_2963 * 0.699999988079071044921875) + 1.0);
                        float _2971 = (-0.0) - _2417;
                        float _2972 = (-0.0) - _2418;
                        float _2973 = (-0.0) - _2419;
                        float _2977 = inversesqrt(dot(vec3(_2971, _2972, _2973), vec3(_2971, _2972, _2973)));
                        float _2978 = _2977 * _2971;
                        float _2979 = _2977 * _2972;
                        float _2980 = _2977 * _2973;
                        float _2988 = exp2(log2(1.0 / ((_2963 * 3.5) + 5.0)) * 0.25);
                        float _2989 = 1.0 - _757;
                        float _2996 = sqrt(1.0 - ((1.0 - (_2989 * _2989)) * (1.0 - (_2988 * _2988))));
                        float _2997 = _2996 * _2996;
                        float _2998 = _2997 * _2997;
                        float _2999 = _2978 + _2943;
                        float _3000 = _2979 + _2944;
                        float _3001 = _2980 + _2945;
                        float _3005 = inversesqrt(dot(vec3(_2999, _3000, _3001), vec3(_2999, _3000, _3001)));
                        float _3009 = dot(vec3(_682, _685, _688), vec3(_2978, _2979, _2980));
                        float _4269 = isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0));
                        float _3012 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
                        float _3013 = dot(vec3(_682, _685, _688), vec3(_3005 * _2999, _3005 * _3000, _3005 * _3001));
                        float _4280 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0));
                        float _3016 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
                        float _3020 = ((_3016 * _3016) * (_2998 + (-1.0))) + 1.0;
                        float _3021 = _2956 * _2997;
                        float _3022 = _3021 * _3021;
                        float _3025 = ((1.0 - _3022) * _2946) + _3022;
                        float _4291 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0));
                        float _3026 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
                        float _3027 = 1.0 - _2997;
                        float _3037 = (0.5 / (((_3026 * ((_3012 * _3027) + _2997)) + 9.9999999392252902907785028219223e-09) + (((_3026 * _3027) + _2997) * _3012))) * _3026;
                        float _4302 = isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0));
                        float _3048 = (((_2998 * 3.1415927410125732421875) * (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0)))) / ((_3020 * _3020) * ((_2963 * 2.1991131305694580078125) + 3.141590118408203125))) * _2952;
                        _2805 = (_2967 * _2915.x) + _2873;
                        _2806 = (_2967 * _2915.y) + _2874;
                        _2807 = (_2967 * _2915.z) + _2875;
                        _2802 = (_3048 * _2932.x) + _2870;
                        _2803 = (_3048 * _2932.y) + _2871;
                        _2804 = (_3048 * _2932.z) + _2872;
                        if (_2877 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2870 = _2802;
                            _2871 = _2803;
                            _2872 = _2804;
                            _2873 = _2805;
                            _2874 = _2806;
                            _2875 = _2807;
                            _2876 = _2877;
                        }
                    }
                    frontier_phi_61_pred = _2802;
                    frontier_phi_61_pred_1 = _2807;
                    frontier_phi_61_pred_2 = _2806;
                    frontier_phi_61_pred_3 = _2805;
                    frontier_phi_61_pred_4 = _2804;
                    frontier_phi_61_pred_5 = _2803;
                }
                _2594 = frontier_phi_61_pred;
                _2604 = frontier_phi_61_pred_1;
                _2602 = frontier_phi_61_pred_2;
                _2600 = frontier_phi_61_pred_3;
                _2598 = frontier_phi_61_pred_4;
                _2596 = frontier_phi_61_pred_5;
                uint _2753 = _2752 + 1u;
                if (_2753 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2746 = _2594;
                    _2747 = _2596;
                    _2748 = _2598;
                    _2749 = _2600;
                    _2750 = _2602;
                    _2751 = _2604;
                    _2752 = _2753;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2593 = _2594;
            _2595 = _2596;
            _2597 = _2598;
            _2599 = _2600;
            _2601 = _2602;
            _2603 = _2604;
        }
        uvec4 _2607 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2608 = _2607.z;
        uint _2610 = (_2608 >> 8u) & 15u;
        float _2714;
        float _2716;
        float _2718;
        float _2720;
        float _2722;
        float _2724;
        if (((4294967295u << _2610) & _2463) == 0u)
        {
            _2714 = _2593;
            _2716 = _2595;
            _2718 = _2597;
            _2720 = _2599;
            _2722 = _2601;
            _2724 = _2603;
        }
        else
        {
            float _2739 = inversesqrt(dot(vec3(_2417, _2418, _2419), vec3(_2417, _2418, _2419)));
            float _2740 = _2739 * _2417;
            float _2741 = _2739 * _2418;
            float _2742 = _2739 * _2419;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2610 < ((_2608 >> 12u) & 15u))
            {
                float _2715;
                float _2717;
                float _2719;
                float _2721;
                float _2723;
                float _2725;
                float _2853 = _2593;
                float _2854 = _2595;
                float _2855 = _2597;
                float _2856 = _2599;
                float _2857 = _2601;
                float _2858 = _2603;
                uint _2859 = _2610;
                uint _2868;
                bool _2869;
                for (;;)
                {
                    _2868 = texelFetch(g_lightClassification, int((((_2457 << 5u) + (_2443 << 9u)) + (_2859 << 2u)) >> 2u)).x;
                    _2869 = _2868 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2869)
                    {
                        frontier_phi_67_pred = _2856;
                        frontier_phi_67_pred_1 = _2857;
                        frontier_phi_67_pred_2 = _2858;
                        frontier_phi_67_pred_3 = _2855;
                        frontier_phi_67_pred_4 = _2854;
                        frontier_phi_67_pred_5 = _2853;
                    }
                    else
                    {
                        float _3053;
                        float _3054;
                        float _3055;
                        float _3056;
                        float _3057;
                        float _3058;
                        float _3347;
                        float _3348;
                        float _3349;
                        float _3350;
                        float _3351;
                        float _3352;
                        float _3066 = _2853;
                        float _3067 = _2854;
                        float _3068 = _2855;
                        float _3069 = _2856;
                        float _3070 = _2857;
                        float _3071 = _2858;
                        uint _3072 = _2868;
                        uint _3073;
                        vec4 _3098;
                        float _3099;
                        vec4 _3114;
                        vec3 _3126;
                        vec4 _3141;
                        vec4 _3156;
                        float _3203;
                        bool _3204;
                        for (;;)
                        {
                            uint _3083 = ((_2859 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3072));
                            _3073 = (_3072 + 4294967295u) & _3072;
                            uint _3085 = _3083 * 40u;
                            _3098 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3085)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 3u)).x));
                            _3099 = _3098.w;
                            uint _3101 = (_3083 * 40u) + 4u;
                            _3114 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3101)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 3u)).x));
                            uint _3116 = (_3083 * 40u) + 8u;
                            _3126 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3116)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 2u)).x));
                            uint _3128 = (_3083 * 40u) + 16u;
                            _3141 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3128)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 3u)).x));
                            uint _3143 = (_3083 * 40u) + 20u;
                            _3156 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3143)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 3u)).x));
                            uint _3159 = (_3083 * 40u) + 24u;
                            vec4 _3172 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3159)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 3u)).x));
                            uint _3178 = (_3083 * 40u) + 28u;
                            vec4 _3191 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3178)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 3u)).x));
                            _3203 = fma(_2419, _3191.z, fma(_2418, _3191.y, _3191.x * _2417)) + _3191.w;
                            _3204 = !((fma(_2419, _3172.z, fma(_2418, _3172.y, _3172.x * _2417)) + _3172.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3204)
                            {
                                float _3231 = _3098.x - _2417;
                                float _3232 = _3098.y - _2418;
                                float _3233 = _3098.z - _2419;
                                float _3234 = dot(vec3(_3231, _3232, _3233), vec3(_3231, _3232, _3233));
                                float _3237 = inversesqrt(_3234);
                                float _3238 = _3237 * _3231;
                                float _3239 = _3237 * _3232;
                                float _3240 = _3237 * _3233;
                                float _3244 = 1.0 - (_3234 / (_3099 * _3099));
                                float _4313 = isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0));
                                float _3245 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
                                float _3249 = sqrt(_3234) * _3114.w;
                                float _3251 = 1.39999997615814208984375 / (_3249 + 1.39999997615814208984375);
                                float _3252 = _3251 * _3251;
                                float _3255 = ((1.0 - _3252) * dot(vec3(_3238, _3239, _3240), vec3(_682, _685, _688))) + _3252;
                                float _3258 = _3249 * _3249;
                                float _3262 = (fma(_2419, _3141.z, fma(_2418, _3141.y, _3141.x * _2417)) + _3141.w) / _3203;
                                float _3263 = (fma(_2419, _3156.z, fma(_2418, _3156.y, _3156.x * _2417)) + _3156.w) / _3203;
                                float _3267 = 1.0 - dot(vec2(_3262, _3263), vec2(_3262, _3263));
                                float _4329 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0));
                                float _3268 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
                                float _3269 = _3268 * (((isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : max(_3255, 0.0))) * _3245) / ((_3258 * 0.699999988079071044921875) + 1.0));
                                float _3281 = exp2(log2(1.0 / ((_3258 * 3.5) + 5.0)) * 0.25);
                                float _3282 = 1.0 - _757;
                                float _3289 = sqrt(1.0 - ((1.0 - (_3282 * _3282)) * (1.0 - (_3281 * _3281))));
                                float _3290 = _3289 * _3289;
                                float _3291 = _3290 * _3290;
                                float _3292 = _3238 - _2740;
                                float _3293 = _3239 - _2741;
                                float _3294 = _3240 - _2742;
                                float _3298 = inversesqrt(dot(vec3(_3292, _3293, _3294), vec3(_3292, _3293, _3294)));
                                float _3302 = dot(vec3(_682, _685, _688), vec3((-0.0) - _2740, (-0.0) - _2741, (-0.0) - _2742));
                                float _4340 = isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0));
                                float _3305 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
                                float _3306 = dot(vec3(_682, _685, _688), vec3(_3298 * _3292, _3298 * _3293, _3298 * _3294));
                                float _4351 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
                                float _3309 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
                                float _3313 = ((_3309 * _3309) * (_3291 + (-1.0))) + 1.0;
                                float _3314 = _3251 * _3290;
                                float _3315 = _3314 * _3314;
                                float _3321 = ((1.0 - _3315) * dot(vec3(_682, _685, _688), vec3(_3238, _3239, _3240))) + _3315;
                                float _4362 = isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : max(_3321, 0.0));
                                float _3322 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
                                float _3323 = 1.0 - _3290;
                                float _3333 = (0.5 / (((_3322 * ((_3305 * _3323) + _3290)) + 9.9999999392252902907785028219223e-09) + (((_3322 * _3323) + _3290) * _3305))) * _3322;
                                float _4373 = isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : max(_3333, 0.0));
                                float _3343 = (_3268 * _3245) * (((_3291 * 3.1415927410125732421875) * (isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0)))) / ((_3313 * _3313) * ((_3258 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3343 * _3126.x;
                                frontier_phi_73_pred_1 = _3343 * _3126.y;
                                frontier_phi_73_pred_2 = _3269 * _3114.z;
                                frontier_phi_73_pred_3 = _3269 * _3114.y;
                                frontier_phi_73_pred_4 = _3269 * _3114.x;
                                frontier_phi_73_pred_5 = _3343 * _3126.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3347 = frontier_phi_73_pred;
                            _3348 = frontier_phi_73_pred_1;
                            _3352 = frontier_phi_73_pred_2;
                            _3351 = frontier_phi_73_pred_3;
                            _3350 = frontier_phi_73_pred_4;
                            _3349 = frontier_phi_73_pred_5;
                            _3056 = _3350 + _3069;
                            _3057 = _3351 + _3070;
                            _3058 = _3352 + _3071;
                            _3053 = _3347 + _3066;
                            _3054 = _3348 + _3067;
                            _3055 = _3349 + _3068;
                            if (_3073 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3066 = _3053;
                                _3067 = _3054;
                                _3068 = _3055;
                                _3069 = _3056;
                                _3070 = _3057;
                                _3071 = _3058;
                                _3072 = _3073;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3056;
                        frontier_phi_67_pred_1 = _3057;
                        frontier_phi_67_pred_2 = _3058;
                        frontier_phi_67_pred_3 = _3055;
                        frontier_phi_67_pred_4 = _3054;
                        frontier_phi_67_pred_5 = _3053;
                    }
                    _2721 = frontier_phi_67_pred;
                    _2723 = frontier_phi_67_pred_1;
                    _2725 = frontier_phi_67_pred_2;
                    _2719 = frontier_phi_67_pred_3;
                    _2717 = frontier_phi_67_pred_4;
                    _2715 = frontier_phi_67_pred_5;
                    uint _2860 = _2859 + 1u;
                    if (_2860 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2853 = _2715;
                        _2854 = _2717;
                        _2855 = _2719;
                        _2856 = _2721;
                        _2857 = _2723;
                        _2858 = _2725;
                        _2859 = _2860;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2723;
                frontier_phi_55_56_ladder_1 = _2725;
                frontier_phi_55_56_ladder_2 = _2721;
                frontier_phi_55_56_ladder_3 = _2719;
                frontier_phi_55_56_ladder_4 = _2717;
                frontier_phi_55_56_ladder_5 = _2715;
            }
            else
            {
                frontier_phi_55_56_ladder = _2601;
                frontier_phi_55_56_ladder_1 = _2603;
                frontier_phi_55_56_ladder_2 = _2599;
                frontier_phi_55_56_ladder_3 = _2597;
                frontier_phi_55_56_ladder_4 = _2595;
                frontier_phi_55_56_ladder_5 = _2593;
            }
            _2714 = frontier_phi_55_56_ladder_5;
            _2716 = frontier_phi_55_56_ladder_4;
            _2718 = frontier_phi_55_56_ladder_3;
            _2720 = frontier_phi_55_56_ladder_2;
            _2722 = frontier_phi_55_56_ladder;
            _2724 = frontier_phi_55_56_ladder_1;
        }
        float _2729 = isnan(1.0) ? _741 : (isnan(_741) ? 1.0 : min(_741, 1.0));
        _2476 = (_2729 * _2720) + _1912;
        _2478 = (_2729 * _2722) + _1914;
        _2480 = (_2729 * _2724) + _1916;
        _2482 = ((_2714 * _726) * _2729) + _2257;
        _2484 = ((_2716 * _728) * _2729) + _2259;
        _2486 = ((_2718 * _729) * _2729) + _2261;
    }
    else
    {
        _2476 = _1912;
        _2478 = _1914;
        _2480 = _1916;
        _2482 = _2257;
        _2484 = _2259;
        _2486 = _2261;
    }
    uint _2492 = _702 + uint(cbMatDynParam._m0[0u].w);
    float _2498 = ((((((_488.x - _485) * _421) + _485) * cbMtdParam._m0[13u].x) + ((((_442.x - _439) * _421) + _439) * cbMtdParam._m0[11u].x)) * _288) * cbInstanceData._m0[_2492].x;
    float _2499 = ((((((_488.y - _486) * _421) + _486) * cbMtdParam._m0[13u].y) + ((((_442.y - _440) * _421) + _440) * cbMtdParam._m0[11u].y)) * _288) * cbInstanceData._m0[_2492].y;
    float _2500 = ((((((_488.z - _487) * _421) + _487) * cbMtdParam._m0[13u].z) + ((((_442.z - _441) * _421) + _441) * cbMtdParam._m0[11u].z)) * _288) * cbInstanceData._m0[_2492].z;
    float _4389 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _4400 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _4411 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _2517 = (((isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0))) * (_2476 + ((isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0))) * _741))) + ((_2482 + ((isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0))) * _1550)) * cbPerFrame._m0[3u].x)) + _2498;
    float _2519 = (_2499 + ((_2484 + ((isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0))) * _1550)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0))) * (_2478 + ((isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0))) * _741)));
    float _2521 = (_2500 + ((_2486 + ((isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0))) * _1550)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0))) * (_2480 + ((isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0))) * _741)));
    float _4437 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2534 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
    uint _2535 = _701 + 6u;
    float _2543 = _661 / cbSceneParam._m0[86u].x;
    float _2544 = _662 / cbSceneParam._m0[86u].y;
    vec4 _2558 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2543, _2544, (log2((isnan(cbSceneParam._m0[77u].w) ? _595 : (isnan(_595) ? cbSceneParam._m0[77u].w : min(_595, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2560 = _2558.x;
    float _2561 = _2558.y;
    float _2562 = _2558.z;
    float _2563 = _2558.w;
    float _2655;
    float _2657;
    float _2659;
    float _2661;
    if (_595 > cbSceneParam._m0[78u].w)
    {
        float _2618 = isnan(_595) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _595 : min(cbSceneParam._m0[80u].w, _595));
        float _2619 = _2618 / _595;
        float _2630 = _2619 * _646;
        float _2631 = _647 * _2619;
        float _2632 = (-0.0) - _2631;
        float _2633 = _2619 * _648;
        float _2635 = (cbSceneParam._m0[77u].w * _2632) / _2618;
        float _2636 = _2635 + cbSceneParam._m0[79u].w;
        float _2637 = cbSceneParam._m0[79u].w - _2631;
        float _2643 = sqrt(((_2630 * _2630) + (_2631 * _2631)) + (_2633 * _2633));
        float _2646 = (1.0 - (cbSceneParam._m0[77u].w / _2618)) * _2643;
        float _2651 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2653 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2815;
        if (abs((_2632 - _2635) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2815 = ((((_2636 > 0.0) ? exp2(_2651 * _2636) : (2.0 - exp2(_2653 * _2636))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2646;
        }
        else
        {
            float _2775 = 1.0 / cbSceneParam._m0[80u].x;
            float _2776 = isnan(_2637) ? _2636 : (isnan(_2636) ? _2637 : max(_2636, _2637));
            float _2777 = isnan(_2637) ? _2636 : (isnan(_2636) ? _2637 : min(_2636, _2637));
            float _2786 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : min(_2776, 0.0));
            float _2787 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : min(_2777, 0.0));
            _2815 = ((abs(_2643 / _2632) * cbSceneParam._m0[80u].y) * ((((_2786 - _2787) * 2.0) - ((exp2(_2651 * (isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0)))) - exp2(_2651 * (isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0))))) * _2775)) - ((exp2(_2653 * _2786) - exp2(_2653 * _2787)) * _2775))) + (_2646 * cbSceneParam._m0[80u].z);
        }
        vec4 _2817 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2543, _2544, 1.0), 0.0);
        float _2826 = exp2((_2815 * (-1.44269502162933349609375)) * (1.0 - _2817.w));
        float _2827 = log2(_2826);
        float _2843 = log2(_2563);
        _2655 = (exp2(_2843 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2827 * cbSceneParam._m0[78u].x)) * _2817.x) / cbSceneParam._m0[78u].x)) + _2560;
        _2657 = (exp2(_2843 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2827 * cbSceneParam._m0[78u].y)) * _2817.y) / cbSceneParam._m0[78u].y)) + _2561;
        _2659 = (exp2(_2843 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2827 * cbSceneParam._m0[78u].z)) * _2817.z) / cbSceneParam._m0[78u].z)) + _2562;
        _2661 = _2826 * _2563;
    }
    else
    {
        _2655 = _2560;
        _2657 = _2561;
        _2659 = _2562;
        _2661 = _2563;
    }
    float _2673 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2674 = _2673 == 3.0;
    float _2675 = log2(_2661);
    float _2679 = exp2(_2675 * cbSceneParam._m0[78u].x);
    float _2680 = exp2(_2675 * cbSceneParam._m0[78u].y);
    float _2681 = exp2(_2675 * cbSceneParam._m0[78u].z);
    float _2682 = _2679 * (isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0)));
    float _2683 = _2680 * (isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0)));
    float _2684 = _2681 * (isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0)));
    float _2693 = (_2673 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2693 * (_2674 ? _2682 : (_2682 + (cbSceneParam._m0[72u].w * _2655)));
    SV_Target.y = _2693 * (_2674 ? _2683 : (_2683 + (cbSceneParam._m0[72u].w * _2657)));
    SV_Target.z = _2693 * (_2674 ? _2684 : (_2684 + (cbSceneParam._m0[72u].w * _2659)));
    SV_Target.w = cbInstanceData._m0[_2535].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2498) * _2534) * _2679) * _2693;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2499) * _2534) * _2680) * _2693;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2500) * _2534) * _2681) * _2693;
    SV_Target_1.w = cbInstanceData._m0[_2535].w;
}


