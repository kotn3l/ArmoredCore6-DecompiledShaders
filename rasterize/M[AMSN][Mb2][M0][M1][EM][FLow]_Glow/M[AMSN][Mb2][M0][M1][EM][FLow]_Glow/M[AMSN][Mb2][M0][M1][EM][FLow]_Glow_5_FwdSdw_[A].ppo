#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1232;
float _3913;
float _3914;
float _3915;
float _3916;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _209 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _210 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _211 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _253 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _259 = _253.x * cbMtdParam._m0[9u].x;
    float _260 = _253.y * cbMtdParam._m0[9u].y;
    float _261 = _253.z * cbMtdParam._m0[9u].z;
    vec4 _299 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[5u].w));
    float _315 = (TEXCOORD_3.x - ((cbMtdParam._m0[14u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[14u].y + 1.0);
    float _3925 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _316 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
    float _323 = (((_299.x * cbMtdParam._m0[10u].x) - _259) * _316) + _259;
    float _324 = (((_299.y * cbMtdParam._m0[10u].y) - _260) * _316) + _260;
    float _325 = (((_299.z * cbMtdParam._m0[10u].z) - _261) * _316) + _261;
    vec4 _342 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _361 = TEXCOORD_9.x - ((cbMtdParam._m0[16u].y * (1.0 - TEXCOORD_9.x)) * (_342.x + 0.00999999977648258209228515625));
    float _363 = _361 * (cbMtdParam._m0[16u].z + 1.0);
    float _3936 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _364 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    float _372 = ((((cbMtdParam._m0[12u].x - _323) * TEXCOORD_9.x) * cbMtdParam._m0[16u].x) * _364) + _323;
    float _373 = ((((cbMtdParam._m0[12u].y - _324) * TEXCOORD_9.y) * cbMtdParam._m0[16u].x) * _364) + _324;
    float _374 = (((cbMtdParam._m0[16u].x * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _325)) * _364) + _325;
    vec4 _387 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[4u].w));
    float _395 = (_387.x * 2.0) + (-1.0);
    float _397 = (_387.y * 2.0) + (-1.0);
    float _398 = dot(vec2(_395, _397), vec2(_395, _397));
    float _3947 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    vec4 _415 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _419 = _415.z;
    float _422 = (_415.x * 2.0) + (-1.0);
    float _423 = (_415.y * 2.0) + (-1.0);
    float _424 = dot(vec2(_422, _423), vec2(_422, _423));
    float _3958 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _429 = sqrt(1.0 - (isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0))));
    float _432 = (_316 * (_387.z - _419)) + _419;
    float _438 = _361 * (cbMtdParam._m0[16u].y + 1.0);
    float _3969 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _442 = ((cbMtdParam._m0[15u].y - _432) * (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0)))) + _432;
    float _455 = (cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _456 = (cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _482 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * ((cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * ((cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[10u].w));
    float _487 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[15u].w;
    float _494 = ((_482.y * 0.5) + (-0.25)) * cbMtdParam._m0[15u].z;
    float _496 = (-0.0) - (cbMtdParam._m0[15u].z * ((_482.x * 0.5) + (-0.25)));
    float _498 = fract(_487);
    float _500 = fract(_487 + 0.5);
    float _501 = _498 * _496;
    float _502 = _494 * _498;
    float _505 = _500 * _496;
    float _506 = _494 * _500;
    float _511 = abs((_498 * 2.0) + (-1.0));
    vec4 _527 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_501 + _455) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_502 + _456) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _529 = _527.x;
    float _530 = _527.y;
    float _531 = _527.z;
    vec4 _532 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_505 + _455) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_506 + _456) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _559 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _560 = (cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _573 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_501 + _559) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_502 + _560) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _575 = _573.x;
    float _576 = _573.y;
    float _577 = _573.z;
    vec4 _578 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_505 + _559) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_506 + _560) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _607 = (_316 * (_395 - _422)) + _422;
    float _608 = (_316 * (_397 - _423)) + _423;
    float _609 = (_316 * (sqrt(1.0 - (isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0)))) - _429)) + _429;
    vec4 _628 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[16u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, (((cbMtdParam._m0[17u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w));
    float _634 = (_628.x * 2.0) + (-1.0);
    float _635 = (_628.y * 2.0) + (-1.0);
    float _636 = dot(vec2(_634, _635), vec2(_634, _635));
    float _3980 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _652 = (_364 * (((_607 * cbMtdParam._m0[14u].z) - _607) + _634)) + _607;
    float _653 = (_364 * (((_608 * cbMtdParam._m0[14u].z) - _608) + _635)) + _608;
    float _654 = (_364 * (sqrt(1.0 - (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0)))) - _609)) + _609;
    float _657 = fma(_654, _224 * NORMAL.x, fma(_653, _231 * TANGENT.x, (_217 * _209) * _652));
    float _660 = fma(_654, _224 * NORMAL.y, fma(_653, _231 * TANGENT.y, (_217 * _210) * _652));
    float _663 = fma(_654, _224 * NORMAL.z, fma(_653, _231 * TANGENT.z, (_217 * _211) * _652));
    float _667 = inversesqrt(dot(vec3(_657, _660, _663), vec3(_657, _660, _663)));
    float _668 = _667 * _657;
    float _669 = _667 * _660;
    float _670 = _667 * _663;
    float _3991 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _671 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
    float _4002 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _4013 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _4024 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _690 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _731 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _741 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _731);
    float _742 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _731);
    float _743 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _731);
    float _747 = inversesqrt(dot(vec3(_741, _742, _743), vec3(_741, _742, _743)));
    float _748 = _741 * _747;
    float _749 = _742 * _747;
    float _750 = _743 * _747;
    vec4 _755 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _757 = _755.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _913 = sqrt(((_741 * _741) + (_742 * _742)) + (_743 * _743));
        float _919 = (cbMatDynParam._m0[5u].x * _913) + cbMatDynParam._m0[5u].y;
        float _4035 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _920 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _924 = (cbMatDynParam._m0[5u].z * _913) + cbMatDynParam._m0[5u].w;
        float _4046 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0))) - _920)) + _920) < ((_757 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _769 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _770 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _789 = fma(_670, cbSceneParam._m0[5u].z, fma(_669, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _668));
    float _792 = fma(_670, cbSceneParam._m0[6u].z, fma(_669, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _668));
    float _795 = fma(_670, cbSceneParam._m0[7u].z, fma(_669, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _668));
    uint _808 = uint(roundEven(NORMAL.w)) * 13u;
    uint _809 = _808 + 9u;
    uint _810 = _809 + uint(cbMatDynParam._m0[0u].w);
    float _816 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0)))) * cbInstanceData._m0[_810].x;
    float _817 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0)))) * cbInstanceData._m0[_810].y;
    float _818 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0)))) * cbInstanceData._m0[_810].z;
    float _4057 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _819 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
    float _4068 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _820 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
    float _4079 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _821 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
    vec4 _830 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _769, cbSceneParam._m0[86u].y * _770));
    float _833 = _830.x * TEXCOORD_3.w;
    float _834 = dot(vec3(_668, _669, _670), vec3(_748, _749, _750));
    float _837 = _834 * 2.0;
    float _841 = (_837 * _668) - _748;
    float _842 = (_837 * _669) - _749;
    float _843 = (_837 * _670) - _750;
    float _847 = abs(dot(vec3(_748, _749, _750), vec3(_668, _669, _670)));
    float _4090 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _849 = sqrt(_671);
    float _862 = exp2((_849 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_849 * 3.0));
    float _894 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _898 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _902 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1231;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _957 = fma(_902, cbModelParam._m0[26u].z, fma(_898, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _894));
        float _961 = fma(_902, cbModelParam._m0[27u].z, fma(_898, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _894));
        float _965 = fma(_902, cbModelParam._m0[28u].z, fma(_898, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _894));
        float _989 = _894 + _668;
        float _990 = _898 + _669;
        float _991 = _902 + _670;
        float _1001 = fma(_991, cbModelParam._m0[26u].z, fma(_990, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _989)) - _957;
        float _1002 = fma(_991, cbModelParam._m0[27u].z, fma(_990, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _989)) - _961;
        float _1003 = fma(_991, cbModelParam._m0[28u].z, fma(_990, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _989)) - _965;
        float _1007 = inversesqrt(dot(vec3(_1001, _1002, _1003), vec3(_1001, _1002, _1003)));
        float _1020 = ((_1007 * _1001) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_957 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1021 = ((_1007 * _1002) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_961 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1022 = ((_1007 * _1003) / cbModelParam._m0[34u].z) + ((((((_965 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1025 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1020, _1021, _1022), 0.0);
        vec4 _1032 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1020, _1021, _1022), 0.0);
        vec4 _1039 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1020, _1021, _1022), 0.0);
        vec4 _1046 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1020, _1021, _1022), 0.0);
        float _1059 = exp2((_1025.w + (-0.5)) * 20.0) * 2.0;
        float _1060 = _1059 * (_1025.x + (-0.5));
        float _1061 = _1059 * (_1025.y + (-0.5));
        float _1062 = _1059 * (_1025.z + (-0.5));
        float _1069 = exp2((_1032.w + (-0.5)) * 20.0) * 2.0;
        float _1070 = _1069 * (_1032.x + (-0.5));
        float _1071 = _1069 * (_1032.y + (-0.5));
        float _1072 = _1069 * (_1032.z + (-0.5));
        float _1079 = exp2((_1039.w + (-0.5)) * 20.0) * 2.0;
        float _1080 = _1079 * (_1039.x + (-0.5));
        float _1081 = _1079 * (_1039.y + (-0.5));
        float _1082 = _1079 * (_1039.z + (-0.5));
        float _1089 = exp2((_1046.w + (-0.5)) * 20.0) * 2.0;
        float _1090 = _1089 * (_1046.x + (-0.5));
        float _1091 = _1089 * (_1046.y + (-0.5));
        float _1092 = _1089 * (_1046.z + (-0.5));
        float _1093 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1094 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1095 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1096 = _1060 * 0.5;
        float _1097 = _1070 * 0.5;
        float _1098 = _1080 * 0.5;
        float _1099 = dot(vec3(_1096, _1097, _1098), vec3(_1096, _1097, _1098));
        float _1104 = (_1099 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1099);
        float _1113 = (dot(vec3(_668, _669, _670), vec3(_1104 * _1096, _1104 * _1097, _1104 * _1098)) + 1.0) * 0.5;
        float _4116 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1123 = sqrt(((_1097 * _1097) + (_1096 * _1096)) + (_1098 * _1098)) / (_1093 + 9.9999997473787516355514526367188e-06);
        float _4127 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1124 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _1125 = _1124 * 2.0;
        float _1129 = (1.0 - _1124) / (_1124 + 1.0);
        float _4138 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1130 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _1139 = ((((1.0 - _1130) * (_1125 + 2.0)) * exp2(log2(isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))) * (_1125 + 1.0))) + _1130) * _1093;
        float _1140 = _1061 * 0.5;
        float _1141 = _1071 * 0.5;
        float _1142 = _1081 * 0.5;
        float _1143 = dot(vec3(_1140, _1141, _1142), vec3(_1140, _1141, _1142));
        float _1148 = (_1143 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1143);
        float _1156 = (dot(vec3(_668, _669, _670), vec3(_1148 * _1140, _1148 * _1141, _1148 * _1142)) + 1.0) * 0.5;
        float _4149 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1165 = sqrt(((_1141 * _1141) + (_1140 * _1140)) + (_1142 * _1142)) / (_1094 + 9.9999997473787516355514526367188e-06);
        float _4160 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1166 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _1167 = _1166 * 2.0;
        float _1171 = (1.0 - _1166) / (_1166 + 1.0);
        float _4171 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _1181 = ((((1.0 - _1172) * (_1167 + 2.0)) * exp2(log2(isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) * (_1167 + 1.0))) + _1172) * _1094;
        float _1182 = _1062 * 0.5;
        float _1183 = _1072 * 0.5;
        float _1184 = _1082 * 0.5;
        float _1185 = dot(vec3(_1182, _1183, _1184), vec3(_1182, _1183, _1184));
        float _1190 = (_1185 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1185);
        float _1198 = (dot(vec3(_668, _669, _670), vec3(_1190 * _1182, _1190 * _1183, _1190 * _1184)) + 1.0) * 0.5;
        float _4182 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1207 = sqrt(((_1183 * _1183) + (_1182 * _1182)) + (_1184 * _1184)) / (_1095 + 9.9999997473787516355514526367188e-06);
        float _4193 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1208 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _1209 = _1208 * 2.0;
        float _1213 = (1.0 - _1208) / (_1208 + 1.0);
        float _4204 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1214 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
        float _1223 = ((((1.0 - _1214) * (_1209 + 2.0)) * exp2(log2(isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * (_1209 + 1.0))) + _1214) * _1095;
        _1231 = _1062;
        _1233 = _1061;
        _1234 = _1060;
        _1235 = _1072;
        _1236 = _1071;
        _1237 = _1070;
        _1238 = _1082;
        _1239 = _1081;
        _1240 = _1080;
        _1241 = _1095;
        _1242 = _1094;
        _1243 = _1093;
        _1244 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0)));
        _1245 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0)));
        _1246 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0)));
    }
    else
    {
        _1231 = _1232;
        _1233 = _1232;
        _1234 = _1232;
        _1235 = _1232;
        _1236 = _1232;
        _1237 = _1232;
        _1238 = _1232;
        _1239 = _1232;
        _1240 = _1232;
        _1241 = _1232;
        _1242 = _1232;
        _1243 = _1232;
        _1244 = 0.0;
        _1245 = 0.0;
        _1246 = 0.0;
    }
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1275 = fma(_902, cbModelParam._m0[30u].z, fma(_898, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _894));
        float _1279 = fma(_902, cbModelParam._m0[31u].z, fma(_898, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _894));
        float _1283 = fma(_902, cbModelParam._m0[32u].z, fma(_898, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _894));
        float _1306 = _894 + _668;
        float _1307 = _898 + _669;
        float _1308 = _902 + _670;
        float _1318 = fma(_1308, cbModelParam._m0[30u].z, fma(_1307, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1306)) - _1275;
        float _1319 = fma(_1308, cbModelParam._m0[31u].z, fma(_1307, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1306)) - _1279;
        float _1320 = fma(_1308, cbModelParam._m0[32u].z, fma(_1307, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1306)) - _1283;
        float _1324 = inversesqrt(dot(vec3(_1318, _1319, _1320), vec3(_1318, _1319, _1320)));
        float _1337 = ((_1324 * _1318) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1275 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1338 = ((_1324 * _1319) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1279 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1339 = ((_1324 * _1320) / cbModelParam._m0[35u].z) + ((((((_1283 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1341 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1337, _1338, _1339), 0.0);
        vec4 _1348 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1337, _1338, _1339), 0.0);
        vec4 _1355 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1337, _1338, _1339), 0.0);
        vec4 _1362 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1337, _1338, _1339), 0.0);
        float _1374 = exp2((_1341.w + (-0.5)) * 20.0) * 2.0;
        float _1375 = _1374 * (_1341.x + (-0.5));
        float _1376 = _1374 * (_1341.y + (-0.5));
        float _1377 = _1374 * (_1341.z + (-0.5));
        float _1384 = exp2((_1348.w + (-0.5)) * 20.0) * 2.0;
        float _1385 = _1384 * (_1348.x + (-0.5));
        float _1386 = _1384 * (_1348.y + (-0.5));
        float _1387 = _1384 * (_1348.z + (-0.5));
        float _1394 = exp2((_1355.w + (-0.5)) * 20.0) * 2.0;
        float _1395 = _1394 * (_1355.x + (-0.5));
        float _1396 = _1394 * (_1355.y + (-0.5));
        float _1397 = _1394 * (_1355.z + (-0.5));
        float _1404 = exp2((_1362.w + (-0.5)) * 20.0) * 2.0;
        float _1405 = _1404 * (_1362.x + (-0.5));
        float _1406 = _1404 * (_1362.y + (-0.5));
        float _1407 = _1404 * (_1362.z + (-0.5));
        float _1408 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1409 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1410 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1411 = _1375 * 0.5;
        float _1412 = _1385 * 0.5;
        float _1413 = _1395 * 0.5;
        float _1414 = dot(vec3(_1411, _1412, _1413), vec3(_1411, _1412, _1413));
        float _1419 = (_1414 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1414);
        float _1427 = (dot(vec3(_668, _669, _670), vec3(_1419 * _1411, _1419 * _1412, _1419 * _1413)) + 1.0) * 0.5;
        float _4245 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1436 = sqrt(((_1412 * _1412) + (_1411 * _1411)) + (_1413 * _1413)) / (_1408 + 9.9999997473787516355514526367188e-06);
        float _4256 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1437 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _1438 = _1437 * 2.0;
        float _1442 = (1.0 - _1437) / (_1437 + 1.0);
        float _4267 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1443 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
        float _1452 = ((((1.0 - _1443) * (_1438 + 2.0)) * exp2(log2(isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0))) * (_1438 + 1.0))) + _1443) * _1408;
        float _1453 = _1376 * 0.5;
        float _1454 = _1386 * 0.5;
        float _1455 = _1396 * 0.5;
        float _1456 = dot(vec3(_1453, _1454, _1455), vec3(_1453, _1454, _1455));
        float _1461 = (_1456 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1456);
        float _1469 = (dot(vec3(_668, _669, _670), vec3(_1461 * _1453, _1461 * _1454, _1461 * _1455)) + 1.0) * 0.5;
        float _4278 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1478 = sqrt(((_1454 * _1454) + (_1453 * _1453)) + (_1455 * _1455)) / (_1409 + 9.9999997473787516355514526367188e-06);
        float _4289 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1479 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _1480 = _1479 * 2.0;
        float _1484 = (1.0 - _1479) / (_1479 + 1.0);
        float _4300 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1485 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _1494 = ((((1.0 - _1485) * (_1480 + 2.0)) * exp2(log2(isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0))) * (_1480 + 1.0))) + _1485) * _1409;
        float _1495 = _1377 * 0.5;
        float _1496 = _1387 * 0.5;
        float _1497 = _1397 * 0.5;
        float _1498 = dot(vec3(_1495, _1496, _1497), vec3(_1495, _1496, _1497));
        float _1503 = (_1498 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1498);
        float _1511 = (dot(vec3(_668, _669, _670), vec3(_1503 * _1495, _1503 * _1496, _1503 * _1497)) + 1.0) * 0.5;
        float _4311 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1520 = sqrt(((_1496 * _1496) + (_1495 * _1495)) + (_1497 * _1497)) / (_1410 + 9.9999997473787516355514526367188e-06);
        float _4322 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1521 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
        float _1522 = _1521 * 2.0;
        float _1526 = (1.0 - _1521) / (_1521 + 1.0);
        float _4333 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1527 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
        float _1536 = ((((1.0 - _1527) * (_1522 + 2.0)) * exp2(log2(isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0))) * (_1522 + 1.0))) + _1527) * _1410;
        _1544 = _1377;
        _1545 = _1376;
        _1546 = _1375;
        _1547 = _1387;
        _1548 = _1386;
        _1549 = _1385;
        _1550 = _1397;
        _1551 = _1396;
        _1552 = _1395;
        _1553 = _1410;
        _1554 = _1409;
        _1555 = _1408;
        _1556 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0)));
        _1557 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0)));
        _1558 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0)));
    }
    else
    {
        _1544 = _1232;
        _1545 = _1232;
        _1546 = _1232;
        _1547 = _1232;
        _1548 = _1232;
        _1549 = _1232;
        _1550 = _1232;
        _1551 = _1232;
        _1552 = _1232;
        _1553 = _1232;
        _1554 = _1232;
        _1555 = _1232;
        _1556 = 0.0;
        _1557 = 0.0;
        _1558 = 0.0;
    }
    float _1568 = (cbModelParam._m0[1u].x * (_1556 - _1244)) + _1244;
    float _1569 = (cbModelParam._m0[1u].x * (_1557 - _1245)) + _1245;
    float _1570 = (cbModelParam._m0[1u].x * (_1558 - _1246)) + _1246;
    float _1591 = fma(_1570, cbSceneParam._m0[89u].z, fma(_1569, cbSceneParam._m0[89u].y, _1568 * cbSceneParam._m0[89u].x));
    float _1594 = fma(_1570, cbSceneParam._m0[90u].z, fma(_1569, cbSceneParam._m0[90u].y, _1568 * cbSceneParam._m0[90u].x));
    float _1597 = fma(_1570, cbSceneParam._m0[91u].z, fma(_1569, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1568));
    float _1612 = _841 * 0.5;
    float _1613 = _842 * 0.5;
    float _1614 = _843 * 0.5;
    float _1615 = dot(vec4(_1612, _1613, _1614, 1.0), vec4(_1546, _1549, _1552, _1555));
    float _1618 = dot(vec4(_1612, _1613, _1614, 1.0), vec4(_1545, _1548, _1551, _1554));
    float _1621 = dot(vec4(_1612, _1613, _1614, 1.0), vec4(_1544, _1547, _1550, _1553));
    float _1655;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1628 = dot(vec4(_1612, _1613, _1614, 1.0), vec4(_1231, _1235, _1238, _1241));
        float _1632 = dot(vec4(_1612, _1613, _1614, 1.0), vec4(_1233, _1236, _1239, _1242));
        float _1636 = dot(vec4(_1612, _1613, _1614, 1.0), vec4(_1234, _1237, _1240, _1243));
        float _1643 = dot(vec4(cbModelParam._m0[39u]), vec4(_1612, _1613, _1614, 1.0));
        _1655 = dot(vec3(isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0)), isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0)), isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1643) ? 0.0 : (isnan(0.0) ? _1643 : max(0.0, _1643))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1655 = 1.0;
    }
    float _1666;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1657 = dot(vec4(cbModelParam._m0[40u]), vec4(_1612, _1613, _1614, 1.0));
        _1666 = dot(vec3(isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0)), isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0)), isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1657) ? 0.0 : (isnan(0.0) ? _1657 : max(0.0, _1657))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1666 = 1.0;
    }
    float _1670 = (_1666 * cbModelParam._m0[1u].x) + (_1655 * (1.0 - cbModelParam._m0[1u].x));
    float _1680 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _671);
    float _1681 = isnan(_1680) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1680 : min(cbModelParam._m0[25u].z, _1680));
    float _1761;
    float _1763;
    float _1765;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1728 = fma(_902, cbModelParam._m0[13u].z, fma(_898, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _894)) + cbModelParam._m0[13u].w;
        float _1732 = fma(_902, cbModelParam._m0[14u].z, fma(_898, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _894)) + cbModelParam._m0[14u].w;
        float _1736 = fma(_902, cbModelParam._m0[15u].z, fma(_898, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _894)) + cbModelParam._m0[15u].w;
        float _1739 = fma(_843, cbModelParam._m0[13u].z, fma(_842, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _841));
        float _1742 = fma(_843, cbModelParam._m0[14u].z, fma(_842, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _841));
        float _1745 = fma(_843, cbModelParam._m0[15u].z, fma(_842, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _841));
        float _1773;
        if (_1739 > 0.0)
        {
            _1773 = abs((1.0 - _1728) / _1739);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1739 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1728 + 1.0) / _1739);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1773 = frontier_phi_17_15_ladder;
        }
        float _1943;
        if (_1742 > 0.0)
        {
            _1943 = abs((1.0 - _1732) / _1742);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1742 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1732 + 1.0) / _1742);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1943 = frontier_phi_26_22_ladder;
        }
        float _2238;
        if (_1745 > 0.0)
        {
            _2238 = abs((1.0 - _1736) / _1745);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1745 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1736 + 1.0) / _1745);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2238 = frontier_phi_38_33_ladder;
        }
        float _2240 = isnan(_1943) ? _1773 : (isnan(_1773) ? _1943 : min(_1773, _1943));
        float _2241 = isnan(_2238) ? _2240 : (isnan(_2240) ? _2238 : min(_2240, _2238));
        float _2245 = (_2241 * _1739) + _1728;
        float _2246 = (_2241 * _1742) + _1732;
        float _2247 = (_2241 * _1745) + _1736;
        float _2248 = _2241 * 9.9999997473787516355514526367188e-05;
        float _2250 = (-1.0) - _2248;
        float _2252 = _2248 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2247 > _2252) || ((_2247 < _2250) || ((_2246 > _2252) || ((_2246 < _2250) || ((_2245 < _2250) || (_2245 > _2252))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2392 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2247, cbModelParam._m0[9u].z, fma(_2246, cbModelParam._m0[9u].y, _2245 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2247, cbModelParam._m0[10u].z, fma(_2246, cbModelParam._m0[10u].y, _2245 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2247, cbModelParam._m0[11u].z, fma(_2246, cbModelParam._m0[11u].y, _2245 * cbModelParam._m0[11u].x))), _1681);
            frontier_phi_16_38_ladder = _2392.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2392.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2392.x * cbModelParam._m0[1u].y;
        }
        _1761 = frontier_phi_16_38_ladder_2;
        _1763 = frontier_phi_16_38_ladder_1;
        _1765 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1749 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_841, _842, _843), _1681);
        _1761 = _1749.x * cbModelParam._m0[1u].y;
        _1763 = _1749.y * cbModelParam._m0[1u].y;
        _1765 = _1749.z * cbModelParam._m0[1u].y;
    }
    float _1769 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _671);
    float _1770 = isnan(_1769) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1769 : min(cbModelParam._m0[25u].w, _1769));
    float _1860;
    float _1862;
    float _1864;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1824 = fma(_902, cbModelParam._m0[21u].z, fma(_898, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _894)) + cbModelParam._m0[21u].w;
        float _1828 = fma(_902, cbModelParam._m0[22u].z, fma(_898, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _894)) + cbModelParam._m0[22u].w;
        float _1832 = fma(_902, cbModelParam._m0[23u].z, fma(_898, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _894)) + cbModelParam._m0[23u].w;
        float _1835 = fma(_843, cbModelParam._m0[21u].z, fma(_842, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _841));
        float _1838 = fma(_843, cbModelParam._m0[22u].z, fma(_842, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _841));
        float _1841 = fma(_843, cbModelParam._m0[23u].z, fma(_842, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _841));
        float _1948;
        if (_1835 > 0.0)
        {
            _1948 = abs((1.0 - _1824) / _1835);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1835 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1824 + 1.0) / _1835);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1948 = frontier_phi_28_24_ladder;
        }
        float _2265;
        if (_1838 > 0.0)
        {
            _2265 = abs((1.0 - _1828) / _1838);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1838 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1828 + 1.0) / _1838);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2265 = frontier_phi_40_35_ladder;
        }
        float _2592;
        if (_1841 > 0.0)
        {
            _2592 = abs((1.0 - _1832) / _1841);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1841 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1832 + 1.0) / _1841);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2592 = frontier_phi_50_47_ladder;
        }
        float _2594 = isnan(_2265) ? _1948 : (isnan(_1948) ? _2265 : min(_1948, _2265));
        float _2595 = isnan(_2592) ? _2594 : (isnan(_2594) ? _2592 : min(_2594, _2592));
        float _2599 = (_2595 * _1835) + _1824;
        float _2600 = (_2595 * _1838) + _1828;
        float _2601 = (_2595 * _1841) + _1832;
        float _2602 = _2595 * 9.9999997473787516355514526367188e-05;
        float _2603 = (-1.0) - _2602;
        float _2605 = _2602 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2601 > _2605) || ((_2601 < _2603) || ((_2600 > _2605) || ((_2600 < _2603) || ((_2599 < _2603) || (_2599 > _2605))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2719 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2601, cbModelParam._m0[17u].z, fma(_2600, cbModelParam._m0[17u].y, _2599 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2601, cbModelParam._m0[18u].z, fma(_2600, cbModelParam._m0[18u].y, _2599 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2601, cbModelParam._m0[19u].z, fma(_2600, cbModelParam._m0[19u].y, _2599 * cbModelParam._m0[19u].x))), _1770);
            frontier_phi_25_50_ladder = _2719.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2719.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2719.x * cbModelParam._m0[1u].z;
        }
        _1860 = frontier_phi_25_50_ladder_2;
        _1862 = frontier_phi_25_50_ladder_1;
        _1864 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1844 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_841, _842, _843), _1770);
        _1860 = _1844.x * cbModelParam._m0[1u].z;
        _1862 = _1844.y * cbModelParam._m0[1u].z;
        _1864 = _1844.z * cbModelParam._m0[1u].z;
    }
    float _1876 = ((((1.0 - _862) * ((_849 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_862 * _849)) * _833;
    float _1877 = _1876 * ((cbModelParam._m0[1u].w * (_1860 - _1761)) + _1761);
    float _1878 = _1876 * ((cbModelParam._m0[1u].w * (_1862 - _1763)) + _1763);
    float _1879 = _1876 * ((cbModelParam._m0[1u].w * (_1864 - _1765)) + _1765);
    float _1882 = fma(_1879, cbSceneParam._m0[89u].z, fma(_1878, cbSceneParam._m0[89u].y, _1877 * cbSceneParam._m0[89u].x));
    float _1885 = fma(_1879, cbSceneParam._m0[90u].z, fma(_1878, cbSceneParam._m0[90u].y, _1877 * cbSceneParam._m0[90u].x));
    float _1888 = fma(_1879, cbSceneParam._m0[91u].z, fma(_1878, cbSceneParam._m0[91u].y, _1877 * cbSceneParam._m0[91u].x));
    float _1922 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1926 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1930 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1934 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1935 = _1922 / _1934;
    float _1936 = _1926 / _1934;
    float _1937 = _1930 / _1934;
    float _2084;
    float _2085;
    float _2086;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1964 = ((uint(_1937 > cbSceneParam._m0[59u].y) + uint(_1937 > cbSceneParam._m0[59u].x)) + uint(_1937 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1965 = _1964 + 43u;
        uint _1973 = _1964 + 44u;
        uint _1981 = _1964 + 45u;
        uint _1989 = _1964 + 46u;
        float _2000 = fma(_1934, cbSceneParam._m0[_1965].w, fma(_1930, cbSceneParam._m0[_1965].z, fma(_1926, cbSceneParam._m0[_1965].y, _1922 * cbSceneParam._m0[_1965].x)));
        float _2004 = fma(_1934, cbSceneParam._m0[_1973].w, fma(_1930, cbSceneParam._m0[_1973].z, fma(_1926, cbSceneParam._m0[_1973].y, _1922 * cbSceneParam._m0[_1973].x)));
        float _2012 = fma(_1934, cbSceneParam._m0[_1989].w, fma(_1930, cbSceneParam._m0[_1989].z, fma(_1926, cbSceneParam._m0[_1989].y, _1922 * cbSceneParam._m0[_1989].x)));
        float _2017 = cbSceneParam._m0[33u].z * _2012;
        float _2019 = cbSceneParam._m0[33u].w * _2012;
        float _2022 = fma(_1934, cbSceneParam._m0[_1981].w, fma(_1930, cbSceneParam._m0[_1981].z, fma(_1926, cbSceneParam._m0[_1981].y, _1922 * cbSceneParam._m0[_1981].x))) / _2012;
        float _2070 = (cbSceneParam._m0[33u].x - sqrt(((_1936 * _1936) + (_1935 * _1935)) + (_1937 * _1937))) * cbSceneParam._m0[33u].y;
        float _4459 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
        float _2077 = (isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2017 + _2000) / _2012, (_2019 + _2004) / _2012), _2022), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2019 + _2000) / _2012, (_2004 - _2017) / _2012), _2022), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2000 - _2017) / _2012, (_2004 - _2019) / _2012), _2022), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2000 - _2019) / _2012, (_2017 + _2004) / _2012), _2022), 0.0)).x), vec4(0.25)));
        _2084 = 1.0 - (_2077 * cbSceneParam._m0[34u].x);
        _2085 = 1.0 - (_2077 * cbSceneParam._m0[34u].y);
        _2086 = 1.0 - (_2077 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2084 = 1.0;
        _2085 = 1.0;
        _2086 = 1.0;
    }
    float _2150;
    float _2152;
    float _2154;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2138 = fma(_1934, cbSceneParam._m0[63u].w, fma(_1930, cbSceneParam._m0[63u].z, fma(_1926, cbSceneParam._m0[63u].y, _1922 * cbSceneParam._m0[63u].x)));
        float _2139 = fma(_1934, cbSceneParam._m0[60u].w, fma(_1930, cbSceneParam._m0[60u].z, fma(_1926, cbSceneParam._m0[60u].y, _1922 * cbSceneParam._m0[60u].x))) / _2138;
        float _2140 = fma(_1934, cbSceneParam._m0[61u].w, fma(_1930, cbSceneParam._m0[61u].z, fma(_1926, cbSceneParam._m0[61u].y, _1922 * cbSceneParam._m0[61u].x))) / _2138;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2139 >= cbSceneParam._m0[64u].x) && (_2140 >= cbSceneParam._m0[64u].y)) && (_2139 <= cbSceneParam._m0[64u].z)) && (_2140 <= cbSceneParam._m0[64u].w))
        {
            float _2278 = fma(_1934, cbSceneParam._m0[62u].w, fma(_1930, cbSceneParam._m0[62u].z, fma(_1926, cbSceneParam._m0[62u].y, _1922 * cbSceneParam._m0[62u].x))) / _2138;
            float _2282 = isnan(cbSceneParam._m0[41u].w) ? _2278 : (isnan(_2278) ? cbSceneParam._m0[41u].w : max(_2278, cbSceneParam._m0[41u].w));
            float _2325 = (cbSceneParam._m0[33u].x - sqrt(((_1936 * _1936) + (_1935 * _1935)) + (_1937 * _1937))) * cbSceneParam._m0[33u].y;
            float _4475 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
            float _2332 = (isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2139, cbSceneParam._m0[33u].w + _2140), _2282), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2139, _2140 - cbSceneParam._m0[33u].z), _2282), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2139 - cbSceneParam._m0[33u].z, _2140 - cbSceneParam._m0[33u].w), _2282), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2139 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2140), _2282), 0.0)).x), vec4(0.25)));
            float _2336 = 1.0 - (_2332 * cbSceneParam._m0[34u].x);
            float _2337 = 1.0 - (_2332 * cbSceneParam._m0[34u].y);
            float _2338 = 1.0 - (_2332 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2338) ? _2086 : (isnan(_2086) ? _2338 : min(_2086, _2338));
            frontier_phi_37_36_ladder_1 = isnan(_2337) ? _2085 : (isnan(_2085) ? _2337 : min(_2085, _2337));
            frontier_phi_37_36_ladder_2 = isnan(_2336) ? _2084 : (isnan(_2084) ? _2336 : min(_2084, _2336));
        }
        else
        {
            frontier_phi_37_36_ladder = _2086;
            frontier_phi_37_36_ladder_1 = _2085;
            frontier_phi_37_36_ladder_2 = _2084;
        }
        _2150 = frontier_phi_37_36_ladder_2;
        _2152 = frontier_phi_37_36_ladder_1;
        _2154 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2150 = _2084;
        _2152 = _2085;
        _2154 = _2086;
    }
    uvec4 _2159 = floatBitsToUint(cbInstanceData._m0[_808 + 5u]);
    uint _2161 = _2159.x * 14u;
    uint _2162 = _2161 + 13u;
    float _2169 = _833 + (-1.0);
    float _2174 = (cbLight._m0[_2162].x * _2169) + 1.0;
    float _2175 = (cbLight._m0[_2162].y * _2169) + 1.0;
    float _2176 = (cbLight._m0[_2162].z * _2169) + 1.0;
    float _2177 = (cbLight._m0[_2162].w * _2169) + 1.0;
    uint _2178 = _2161 + 5u;
    float _2184 = isnan(1.0) ? _2175 : (isnan(_2175) ? 1.0 : min(_2175, 1.0));
    uint _2188 = _2161 + 4u;
    float _2197 = isnan(1.0) ? _2174 : (isnan(_2174) ? 1.0 : min(_2174, 1.0));
    uint _2201 = _2161 | 1u;
    float _2212 = dot(vec3(cbLight._m0[_2161].xyz), vec3(_668, _669, _670));
    float _2215 = dot(vec3(cbLight._m0[_2201].xyz), vec3(_668, _669, _670));
    float _4511 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
    float _4522 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
    float _2220 = (isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0))) * 0.3183098733425140380859375;
    float _2222 = (isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0))) * 0.3183098733425140380859375;
    float _2229 = ((cbLight._m0[_2178].x * _2184) * _2222) + (((cbLight._m0[_2188].x * _2150) * _2197) * _2220);
    float _2230 = ((_2184 * cbLight._m0[_2178].y) * _2222) + (((cbLight._m0[_2188].y * _2152) * _2197) * _2220);
    float _2231 = ((_2184 * cbLight._m0[_2178].z) * _2222) + (((cbLight._m0[_2188].z * _2154) * _2197) * _2220);
    uvec4 _2235 = floatBitsToUint(cbLight._m0[_2161 + 12u]);
    bool _2237 = _2235.x == 0u;
    float _2339;
    float _2341;
    float _2343;
    if (_2237)
    {
        _2339 = _2229;
        _2341 = _2230;
        _2343 = _2231;
    }
    else
    {
        uint _2347 = _2161 + 6u;
        float _2363 = (dot(vec3(cbLight._m0[_2161 + 2u].xyz), vec3(_668, _669, _670)) * 0.5) + 0.5;
        float _2364 = _2363 * _2363;
        float _4533 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
        float _2365 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
        float _2366 = isnan(1.0) ? _2176 : (isnan(_2176) ? 1.0 : min(_2176, 1.0));
        _2339 = (((cbLight._m0[_2347].x * 0.3183098733425140380859375) * _2365) * _2366) + _2229;
        _2341 = (((cbLight._m0[_2347].y * 0.3183098733425140380859375) * _2365) * _2366) + _2230;
        _2343 = (((cbLight._m0[_2347].z * 0.3183098733425140380859375) * _2365) * _2366) + _2231;
    }
    bool _2346 = _2235.y == 0u;
    float _2401;
    float _2403;
    float _2405;
    if (_2346)
    {
        _2401 = _2339;
        _2403 = _2341;
        _2405 = _2343;
    }
    else
    {
        uint _2563 = _2161 + 7u;
        float _2579 = (dot(vec3(cbLight._m0[_2161 + 3u].xyz), vec3(_668, _669, _670)) * 0.5) + 0.5;
        float _2580 = _2579 * _2579;
        float _4549 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
        float _2581 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
        float _2582 = isnan(1.0) ? _2177 : (isnan(_2177) ? 1.0 : min(_2177, 1.0));
        _2401 = (((cbLight._m0[_2563].x * 0.3183098733425140380859375) * _2581) * _2582) + _2339;
        _2403 = (((cbLight._m0[_2563].y * 0.3183098733425140380859375) * _2581) * _2582) + _2341;
        _2405 = (((cbLight._m0[_2563].z * 0.3183098733425140380859375) * _2581) * _2582) + _2343;
    }
    uint _2408 = _2161 + 8u;
    float _2421 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2161].w)) * _671) * 0.949999988079071044921875);
    float _2422 = _2421 * _2421;
    float _2423 = cbLight._m0[_2161].x + _748;
    float _2424 = cbLight._m0[_2161].y + _749;
    float _2425 = cbLight._m0[_2161].z + _750;
    float _2429 = inversesqrt(dot(vec3(_2423, _2424, _2425), vec3(_2423, _2424, _2425)));
    float _2430 = _2429 * _2423;
    float _2431 = _2429 * _2424;
    float _2432 = _2429 * _2425;
    float _2433 = dot(vec3(_668, _669, _670), vec3(cbLight._m0[_2161].xyz));
    float _4565 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
    float _2436 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
    float _4576 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _2437 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
    float _2438 = dot(vec3(_668, _669, _670), vec3(_2430, _2431, _2432));
    float _4587 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
    float _2441 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
    float _2442 = dot(vec3(cbLight._m0[_2161].xyz), vec3(_2430, _2431, _2432));
    float _4598 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
    float _2446 = _2422 * _2422;
    float _2450 = ((_2441 * _2441) * (_2446 + (-1.0))) + 1.0;
    float _2461 = (exp2(log2(1.0 - (isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2462 = 1.0 - _2422;
    float _2473 = (0.5 / (((_2437 * ((_2436 * _2462) + _2422)) + 9.9999999392252902907785028219223e-09) + (((_2437 * _2462) + _2422) * _2436))) * _2436;
    float _4609 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
    float _2475 = (isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0))) * (_2446 / ((_2450 * _2450) * 3.141590118408203125));
    uint _2489 = _2161 + 9u;
    float _2500 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2201].w)) * _671) * 0.949999988079071044921875);
    float _2501 = _2500 * _2500;
    float _2502 = cbLight._m0[_2201].x + _748;
    float _2503 = cbLight._m0[_2201].y + _749;
    float _2504 = cbLight._m0[_2201].z + _750;
    float _2508 = inversesqrt(dot(vec3(_2502, _2503, _2504), vec3(_2502, _2503, _2504)));
    float _2509 = _2508 * _2502;
    float _2510 = _2508 * _2503;
    float _2511 = _2508 * _2504;
    float _2512 = dot(vec3(_668, _669, _670), vec3(cbLight._m0[_2201].xyz));
    float _4620 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
    float _2515 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
    float _2516 = dot(vec3(_668, _669, _670), vec3(_2509, _2510, _2511));
    float _4631 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
    float _2519 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
    float _2520 = dot(vec3(cbLight._m0[_2201].xyz), vec3(_2509, _2510, _2511));
    float _4642 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
    float _2524 = _2501 * _2501;
    float _2528 = ((_2519 * _2519) * (_2524 + (-1.0))) + 1.0;
    float _2537 = (exp2(log2(1.0 - (isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2538 = 1.0 - _2501;
    float _2548 = (0.5 / (((_2437 * ((_2515 * _2538) + _2501)) + 9.9999999392252902907785028219223e-09) + (((_2437 * _2538) + _2501) * _2515))) * _2515;
    float _4653 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
    float _2550 = (isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0))) * (_2524 / ((_2528 * _2528) * 3.141590118408203125));
    float _2560 = (((_2537 * cbLight._m0[_2489].x) * _2550) * _2184) + ((((cbLight._m0[_2408].x * _2150) * _2461) * _2475) * _2197);
    float _2561 = (((_2537 * cbLight._m0[_2489].y) * _2550) * _2184) + ((((cbLight._m0[_2408].y * _2152) * _2461) * _2475) * _2197);
    float _2562 = (((_2537 * cbLight._m0[_2489].z) * _2550) * _2184) + ((((cbLight._m0[_2408].z * _2154) * _2461) * _2475) * _2197);
    float _2618;
    float _2620;
    float _2622;
    if (_2237)
    {
        _2618 = _2560;
        _2620 = _2561;
        _2622 = _2562;
    }
    else
    {
        uint _2624 = _2161 + 2u;
        uint _2628 = _2161 + 10u;
        float _2642 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2624].w)) * _671) * 0.949999988079071044921875);
        float _2643 = _2642 * _2642;
        float _2644 = cbLight._m0[_2624].x + _748;
        float _2645 = cbLight._m0[_2624].y + _749;
        float _2646 = cbLight._m0[_2624].z + _750;
        float _2650 = inversesqrt(dot(vec3(_2644, _2645, _2646), vec3(_2644, _2645, _2646)));
        float _2651 = _2650 * _2644;
        float _2652 = _2650 * _2645;
        float _2653 = _2650 * _2646;
        float _2654 = dot(vec3(_668, _669, _670), vec3(cbLight._m0[_2624].xyz));
        float _4664 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
        float _2657 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
        float _2658 = dot(vec3(_668, _669, _670), vec3(_2651, _2652, _2653));
        float _4675 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
        float _2661 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
        float _2662 = dot(vec3(cbLight._m0[_2624].xyz), vec3(_2651, _2652, _2653));
        float _4686 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
        float _2666 = _2643 * _2643;
        float _2670 = ((_2661 * _2661) * (_2666 + (-1.0))) + 1.0;
        float _2679 = (exp2(log2(1.0 - (isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2680 = 1.0 - _2643;
        float _2690 = (0.5 / (((_2437 * ((_2657 * _2680) + _2643)) + 9.9999999392252902907785028219223e-09) + (((_2437 * _2680) + _2643) * _2657))) * _2657;
        float _4697 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
        float _2692 = (isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0))) * (_2666 / ((_2670 * _2670) * 3.141590118408203125));
        float _2693 = isnan(1.0) ? _2176 : (isnan(_2176) ? 1.0 : min(_2176, 1.0));
        _2618 = (((_2679 * cbLight._m0[_2628].x) * _2692) * _2693) + _2560;
        _2620 = (((_2679 * cbLight._m0[_2628].y) * _2692) * _2693) + _2561;
        _2622 = (((_2679 * cbLight._m0[_2628].z) * _2692) * _2693) + _2562;
    }
    float _2724;
    float _2726;
    float _2728;
    if (_2346)
    {
        _2724 = _2618;
        _2726 = _2620;
        _2728 = _2622;
    }
    else
    {
        uint _2735 = _2161 + 3u;
        uint _2739 = _2161 + 11u;
        float _2753 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2735].w)) * _671) * 0.949999988079071044921875);
        float _2754 = _2753 * _2753;
        float _2755 = cbLight._m0[_2735].x + _748;
        float _2756 = cbLight._m0[_2735].y + _749;
        float _2757 = cbLight._m0[_2735].z + _750;
        float _2761 = inversesqrt(dot(vec3(_2755, _2756, _2757), vec3(_2755, _2756, _2757)));
        float _2762 = _2761 * _2755;
        float _2763 = _2761 * _2756;
        float _2764 = _2761 * _2757;
        float _2765 = dot(vec3(_668, _669, _670), vec3(cbLight._m0[_2735].xyz));
        float _4713 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
        float _2768 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
        float _2769 = dot(vec3(_668, _669, _670), vec3(_2762, _2763, _2764));
        float _4724 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
        float _2772 = isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0));
        float _2773 = dot(vec3(cbLight._m0[_2735].xyz), vec3(_2762, _2763, _2764));
        float _4735 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0));
        float _2777 = _2754 * _2754;
        float _2781 = ((_2772 * _2772) * (_2777 + (-1.0))) + 1.0;
        float _2790 = (exp2(log2(1.0 - (isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2791 = 1.0 - _2754;
        float _2801 = (0.5 / (((_2437 * ((_2768 * _2791) + _2754)) + 9.9999999392252902907785028219223e-09) + (((_2437 * _2791) + _2754) * _2768))) * _2768;
        float _4746 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
        float _2803 = (isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0))) * (_2777 / ((_2781 * _2781) * 3.141590118408203125));
        float _2804 = isnan(1.0) ? _2177 : (isnan(_2177) ? 1.0 : min(_2177, 1.0));
        _2724 = (((_2790 * cbLight._m0[_2739].x) * _2803) * _2804) + _2618;
        _2726 = (((_2790 * cbLight._m0[_2739].y) * _2803) * _2804) + _2620;
        _2728 = (((_2790 * cbLight._m0[_2739].z) * _2803) * _2804) + _2622;
    }
    float _2870;
    float _2872;
    float _2874;
    float _2876;
    float _2878;
    float _2880;
    if (_2159.y == 0u)
    {
        uvec4 _2825 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2826 = _2825.x;
        uint _2837 = uint((float(_2825.y) * floor(float(uint(cbSceneParam._m0[85u].y * _770) / _2826))) + floor(float(uint(cbSceneParam._m0[85u].x * _769) / _2826)));
        float _2847 = (log2(_1937 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2848 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0));
        uint _2851 = uint(isnan(14.0) ? _2848 : (isnan(_2848) ? 14.0 : min(_2848, 14.0)));
        uvec4 _2856 = texelFetch(g_lightClusterGridBuffer, int(((_2851 << 2u) + (_2837 << 6u)) >> 2u));
        uint _2857 = _2856.x;
        uint _2858 = _2825.z;
        float _2966;
        float _2968;
        float _2970;
        float _2972;
        float _2974;
        float _2976;
        if (((((1u << ((_2858 >> 4u) & 15u)) + 4294967295u) & _2857) == 0u) || ((_2858 & 240u) == 0u))
        {
            _2966 = 0.0;
            _2968 = 0.0;
            _2970 = 0.0;
            _2972 = 0.0;
            _2974 = 0.0;
            _2976 = 0.0;
        }
        else
        {
            float _2967;
            float _2969;
            float _2971;
            float _2973;
            float _2975;
            float _2977;
            float _3127 = 0.0;
            float _3128 = 0.0;
            float _3129 = 0.0;
            float _3130 = 0.0;
            float _3131 = 0.0;
            float _3132 = 0.0;
            uint _3133 = 0u;
            uint _3142;
            bool _3143;
            for (;;)
            {
                _3142 = texelFetch(g_lightClassification, int((((_2851 << 5u) + (_2837 << 9u)) + (_3133 << 2u)) >> 2u)).x;
                _3143 = _3142 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3143)
                {
                    frontier_phi_71_pred = _3132;
                    frontier_phi_71_pred_1 = _3131;
                    frontier_phi_71_pred_2 = _3130;
                    frontier_phi_71_pred_3 = _3129;
                    frontier_phi_71_pred_4 = _3128;
                    frontier_phi_71_pred_5 = _3127;
                }
                else
                {
                    float _3272;
                    float _3273;
                    float _3274;
                    float _3275;
                    float _3276;
                    float _3277;
                    uint _3278;
                    _3272 = _3127;
                    _3273 = _3128;
                    _3274 = _3129;
                    _3275 = _3130;
                    _3276 = _3131;
                    _3277 = _3132;
                    _3278 = _3142;
                    float _3199;
                    float _3200;
                    float _3201;
                    float _3202;
                    float _3203;
                    float _3204;
                    for (;;)
                    {
                        uint _3282 = uint(findLSB(_3278)) + (_3133 << 5u);
                        uint _3279 = (_3278 + 4294967295u) & _3278;
                        uint _3284 = _3282 * 48u;
                        vec4 _3298 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3284)).x, texelFetch(g_PointLightRenderingBuffer, int(_3284 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3284 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3284 + 3u)).x));
                        uint _3304 = (_3282 * 48u) + 4u;
                        vec4 _3317 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3304)).x, texelFetch(g_PointLightRenderingBuffer, int(_3304 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3304 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3304 + 3u)).x));
                        uint _3323 = (_3282 * 48u) + 8u;
                        vec3 _3334 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3323)).x, texelFetch(g_PointLightRenderingBuffer, int(_3323 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3323 + 2u)).x));
                        float _3338 = _3298.x - _1935;
                        float _3339 = _3298.y - _1936;
                        float _3340 = _3298.z - _1937;
                        float _3341 = dot(vec3(_3338, _3339, _3340), vec3(_3338, _3339, _3340));
                        float _3344 = inversesqrt(_3341);
                        float _3345 = _3344 * _3338;
                        float _3346 = _3344 * _3339;
                        float _3347 = _3344 * _3340;
                        float _3348 = dot(vec3(_789, _792, _795), vec3(_3345, _3346, _3347));
                        float _3353 = 1.0 - (_3341 * _3298.w);
                        float _4772 = isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0));
                        float _3354 = isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0));
                        float _3355 = sqrt(_3341) * _3317.w;
                        float _3358 = 1.39999997615814208984375 / (_3355 + 1.39999997615814208984375);
                        float _3359 = _3358 * _3358;
                        float _3362 = ((1.0 - _3359) * _3348) + _3359;
                        float _3365 = _3355 * _3355;
                        float _3369 = ((isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0))) * _3354) / ((_3365 * 0.699999988079071044921875) + 1.0);
                        float _3373 = (-0.0) - _1935;
                        float _3374 = (-0.0) - _1936;
                        float _3375 = (-0.0) - _1937;
                        float _3379 = inversesqrt(dot(vec3(_3373, _3374, _3375), vec3(_3373, _3374, _3375)));
                        float _3380 = _3379 * _3373;
                        float _3381 = _3379 * _3374;
                        float _3382 = _3379 * _3375;
                        float _3389 = exp2(log2(1.0 / ((_3365 * 3.5) + 5.0)) * 0.25);
                        float _3390 = 1.0 - _849;
                        float _3397 = sqrt(1.0 - ((1.0 - (_3390 * _3390)) * (1.0 - (_3389 * _3389))));
                        float _3398 = _3397 * _3397;
                        float _3399 = _3398 * _3398;
                        float _3400 = _3380 + _3345;
                        float _3401 = _3381 + _3346;
                        float _3402 = _3382 + _3347;
                        float _3406 = inversesqrt(dot(vec3(_3400, _3401, _3402), vec3(_3400, _3401, _3402)));
                        float _3410 = dot(vec3(_789, _792, _795), vec3(_3380, _3381, _3382));
                        float _4788 = isnan(0.0) ? _3410 : (isnan(_3410) ? 0.0 : max(_3410, 0.0));
                        float _3413 = isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0));
                        float _3414 = dot(vec3(_789, _792, _795), vec3(_3406 * _3400, _3406 * _3401, _3406 * _3402));
                        float _4799 = isnan(0.0) ? _3414 : (isnan(_3414) ? 0.0 : max(_3414, 0.0));
                        float _3417 = isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0));
                        float _3421 = ((_3417 * _3417) * (_3399 + (-1.0))) + 1.0;
                        float _3422 = _3358 * _3398;
                        float _3423 = _3422 * _3422;
                        float _3426 = ((1.0 - _3423) * _3348) + _3423;
                        float _4810 = isnan(0.0) ? _3426 : (isnan(_3426) ? 0.0 : max(_3426, 0.0));
                        float _3427 = isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0));
                        float _3428 = 1.0 - _3398;
                        float _3438 = (0.5 / (((_3427 * ((_3413 * _3428) + _3398)) + 9.9999999392252902907785028219223e-09) + (((_3427 * _3428) + _3398) * _3413))) * _3427;
                        float _4821 = isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : max(_3438, 0.0));
                        float _3449 = (((_3399 * 3.1415927410125732421875) * (isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0)))) / ((_3421 * _3421) * ((_3365 * 2.1991131305694580078125) + 3.141590118408203125))) * _3354;
                        _3202 = (_3369 * _3317.x) + _3275;
                        _3203 = (_3369 * _3317.y) + _3276;
                        _3204 = (_3369 * _3317.z) + _3277;
                        _3199 = (_3449 * _3334.x) + _3272;
                        _3200 = (_3449 * _3334.y) + _3273;
                        _3201 = (_3449 * _3334.z) + _3274;
                        if (_3279 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3272 = _3199;
                            _3273 = _3200;
                            _3274 = _3201;
                            _3275 = _3202;
                            _3276 = _3203;
                            _3277 = _3204;
                            _3278 = _3279;
                        }
                    }
                    frontier_phi_71_pred = _3204;
                    frontier_phi_71_pred_1 = _3203;
                    frontier_phi_71_pred_2 = _3202;
                    frontier_phi_71_pred_3 = _3201;
                    frontier_phi_71_pred_4 = _3200;
                    frontier_phi_71_pred_5 = _3199;
                }
                _2977 = frontier_phi_71_pred;
                _2975 = frontier_phi_71_pred_1;
                _2973 = frontier_phi_71_pred_2;
                _2971 = frontier_phi_71_pred_3;
                _2969 = frontier_phi_71_pred_4;
                _2967 = frontier_phi_71_pred_5;
                uint _3134 = _3133 + 1u;
                if (_3134 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3127 = _2967;
                    _3128 = _2969;
                    _3129 = _2971;
                    _3130 = _2973;
                    _3131 = _2975;
                    _3132 = _2977;
                    _3133 = _3134;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2966 = _2967;
            _2968 = _2969;
            _2970 = _2971;
            _2972 = _2973;
            _2974 = _2975;
            _2976 = _2977;
        }
        uvec4 _2980 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2981 = _2980.z;
        uint _2983 = (_2981 >> 8u) & 15u;
        float _3095;
        float _3097;
        float _3099;
        float _3101;
        float _3103;
        float _3105;
        if (((4294967295u << _2983) & _2857) == 0u)
        {
            _3095 = _2966;
            _3097 = _2968;
            _3099 = _2970;
            _3101 = _2972;
            _3103 = _2974;
            _3105 = _2976;
        }
        else
        {
            float _3120 = inversesqrt(dot(vec3(_1935, _1936, _1937), vec3(_1935, _1936, _1937)));
            float _3121 = _3120 * _1935;
            float _3122 = _3120 * _1936;
            float _3123 = _3120 * _1937;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2983 < ((_2981 >> 12u) & 15u))
            {
                float _3096;
                float _3098;
                float _3100;
                float _3102;
                float _3104;
                float _3106;
                float _3255 = _2966;
                float _3256 = _2968;
                float _3257 = _2970;
                float _3258 = _2972;
                float _3259 = _2974;
                float _3260 = _2976;
                uint _3261 = _2983;
                uint _3270;
                bool _3271;
                for (;;)
                {
                    _3270 = texelFetch(g_lightClassification, int((((_2851 << 5u) + (_2837 << 9u)) + (_3261 << 2u)) >> 2u)).x;
                    _3271 = _3270 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3271)
                    {
                        frontier_phi_82_pred = _3260;
                        frontier_phi_82_pred_1 = _3259;
                        frontier_phi_82_pred_2 = _3258;
                        frontier_phi_82_pred_3 = _3257;
                        frontier_phi_82_pred_4 = _3256;
                        frontier_phi_82_pred_5 = _3255;
                    }
                    else
                    {
                        float _3463;
                        float _3464;
                        float _3465;
                        float _3466;
                        float _3467;
                        float _3468;
                        float _3757;
                        float _3758;
                        float _3759;
                        float _3760;
                        float _3761;
                        float _3762;
                        float _3476 = _3255;
                        float _3477 = _3256;
                        float _3478 = _3257;
                        float _3479 = _3258;
                        float _3480 = _3259;
                        float _3481 = _3260;
                        uint _3482 = _3270;
                        uint _3483;
                        vec4 _3508;
                        float _3509;
                        vec4 _3524;
                        vec3 _3536;
                        vec4 _3551;
                        vec4 _3566;
                        float _3613;
                        bool _3614;
                        for (;;)
                        {
                            uint _3493 = ((_3261 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3482));
                            _3483 = (_3482 + 4294967295u) & _3482;
                            uint _3495 = _3493 * 40u;
                            _3508 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3495)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 3u)).x));
                            _3509 = _3508.w;
                            uint _3511 = (_3493 * 40u) + 4u;
                            _3524 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3511)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 3u)).x));
                            uint _3526 = (_3493 * 40u) + 8u;
                            _3536 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3526)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 2u)).x));
                            uint _3538 = (_3493 * 40u) + 16u;
                            _3551 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3538)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 3u)).x));
                            uint _3553 = (_3493 * 40u) + 20u;
                            _3566 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3553)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 3u)).x));
                            uint _3569 = (_3493 * 40u) + 24u;
                            vec4 _3582 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3569)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 3u)).x));
                            uint _3588 = (_3493 * 40u) + 28u;
                            vec4 _3601 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3588)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 3u)).x));
                            _3613 = fma(_1937, _3601.z, fma(_1936, _3601.y, _3601.x * _1935)) + _3601.w;
                            _3614 = !((fma(_1937, _3582.z, fma(_1936, _3582.y, _3582.x * _1935)) + _3582.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3614)
                            {
                                float _3641 = _3508.x - _1935;
                                float _3642 = _3508.y - _1936;
                                float _3643 = _3508.z - _1937;
                                float _3644 = dot(vec3(_3641, _3642, _3643), vec3(_3641, _3642, _3643));
                                float _3647 = inversesqrt(_3644);
                                float _3648 = _3647 * _3641;
                                float _3649 = _3647 * _3642;
                                float _3650 = _3647 * _3643;
                                float _3654 = 1.0 - (_3644 / (_3509 * _3509));
                                float _4832 = isnan(0.0) ? _3654 : (isnan(_3654) ? 0.0 : max(_3654, 0.0));
                                float _3655 = isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0));
                                float _3659 = sqrt(_3644) * _3524.w;
                                float _3661 = 1.39999997615814208984375 / (_3659 + 1.39999997615814208984375);
                                float _3662 = _3661 * _3661;
                                float _3665 = ((1.0 - _3662) * dot(vec3(_3648, _3649, _3650), vec3(_789, _792, _795))) + _3662;
                                float _3668 = _3659 * _3659;
                                float _3672 = (fma(_1937, _3551.z, fma(_1936, _3551.y, _3551.x * _1935)) + _3551.w) / _3613;
                                float _3673 = (fma(_1937, _3566.z, fma(_1936, _3566.y, _3566.x * _1935)) + _3566.w) / _3613;
                                float _3677 = 1.0 - dot(vec2(_3672, _3673), vec2(_3672, _3673));
                                float _4848 = isnan(0.0) ? _3677 : (isnan(_3677) ? 0.0 : max(_3677, 0.0));
                                float _3678 = isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0));
                                float _3679 = _3678 * (((isnan(0.0) ? _3665 : (isnan(_3665) ? 0.0 : max(_3665, 0.0))) * _3655) / ((_3668 * 0.699999988079071044921875) + 1.0));
                                float _3691 = exp2(log2(1.0 / ((_3668 * 3.5) + 5.0)) * 0.25);
                                float _3692 = 1.0 - _849;
                                float _3699 = sqrt(1.0 - ((1.0 - (_3692 * _3692)) * (1.0 - (_3691 * _3691))));
                                float _3700 = _3699 * _3699;
                                float _3701 = _3700 * _3700;
                                float _3702 = _3648 - _3121;
                                float _3703 = _3649 - _3122;
                                float _3704 = _3650 - _3123;
                                float _3708 = inversesqrt(dot(vec3(_3702, _3703, _3704), vec3(_3702, _3703, _3704)));
                                float _3712 = dot(vec3(_789, _792, _795), vec3((-0.0) - _3121, (-0.0) - _3122, (-0.0) - _3123));
                                float _4859 = isnan(0.0) ? _3712 : (isnan(_3712) ? 0.0 : max(_3712, 0.0));
                                float _3715 = isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0));
                                float _3716 = dot(vec3(_789, _792, _795), vec3(_3708 * _3702, _3708 * _3703, _3708 * _3704));
                                float _4870 = isnan(0.0) ? _3716 : (isnan(_3716) ? 0.0 : max(_3716, 0.0));
                                float _3719 = isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0));
                                float _3723 = ((_3719 * _3719) * (_3701 + (-1.0))) + 1.0;
                                float _3724 = _3661 * _3700;
                                float _3725 = _3724 * _3724;
                                float _3731 = ((1.0 - _3725) * dot(vec3(_789, _792, _795), vec3(_3648, _3649, _3650))) + _3725;
                                float _4881 = isnan(0.0) ? _3731 : (isnan(_3731) ? 0.0 : max(_3731, 0.0));
                                float _3732 = isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0));
                                float _3733 = 1.0 - _3700;
                                float _3743 = (0.5 / (((_3732 * ((_3715 * _3733) + _3700)) + 9.9999999392252902907785028219223e-09) + (((_3732 * _3733) + _3700) * _3715))) * _3732;
                                float _4892 = isnan(0.0) ? _3743 : (isnan(_3743) ? 0.0 : max(_3743, 0.0));
                                float _3753 = (_3678 * _3655) * (((_3701 * 3.1415927410125732421875) * (isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0)))) / ((_3723 * _3723) * ((_3668 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3679 * _3524.z;
                                frontier_phi_88_pred_1 = _3679 * _3524.y;
                                frontier_phi_88_pred_2 = _3679 * _3524.x;
                                frontier_phi_88_pred_3 = _3753 * _3536.z;
                                frontier_phi_88_pred_4 = _3753 * _3536.y;
                                frontier_phi_88_pred_5 = _3753 * _3536.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3762 = frontier_phi_88_pred;
                            _3761 = frontier_phi_88_pred_1;
                            _3760 = frontier_phi_88_pred_2;
                            _3759 = frontier_phi_88_pred_3;
                            _3758 = frontier_phi_88_pred_4;
                            _3757 = frontier_phi_88_pred_5;
                            _3466 = _3760 + _3479;
                            _3467 = _3761 + _3480;
                            _3468 = _3762 + _3481;
                            _3463 = _3757 + _3476;
                            _3464 = _3758 + _3477;
                            _3465 = _3759 + _3478;
                            if (_3483 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3476 = _3463;
                                _3477 = _3464;
                                _3478 = _3465;
                                _3479 = _3466;
                                _3480 = _3467;
                                _3481 = _3468;
                                _3482 = _3483;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3468;
                        frontier_phi_82_pred_1 = _3467;
                        frontier_phi_82_pred_2 = _3466;
                        frontier_phi_82_pred_3 = _3465;
                        frontier_phi_82_pred_4 = _3464;
                        frontier_phi_82_pred_5 = _3463;
                    }
                    _3106 = frontier_phi_82_pred;
                    _3104 = frontier_phi_82_pred_1;
                    _3102 = frontier_phi_82_pred_2;
                    _3100 = frontier_phi_82_pred_3;
                    _3098 = frontier_phi_82_pred_4;
                    _3096 = frontier_phi_82_pred_5;
                    uint _3262 = _3261 + 1u;
                    if (_3262 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3255 = _3096;
                        _3256 = _3098;
                        _3257 = _3100;
                        _3258 = _3102;
                        _3259 = _3104;
                        _3260 = _3106;
                        _3261 = _3262;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3102;
                frontier_phi_63_64_ladder_1 = _3106;
                frontier_phi_63_64_ladder_2 = _3104;
                frontier_phi_63_64_ladder_3 = _3100;
                frontier_phi_63_64_ladder_4 = _3098;
                frontier_phi_63_64_ladder_5 = _3096;
            }
            else
            {
                frontier_phi_63_64_ladder = _2972;
                frontier_phi_63_64_ladder_1 = _2976;
                frontier_phi_63_64_ladder_2 = _2974;
                frontier_phi_63_64_ladder_3 = _2970;
                frontier_phi_63_64_ladder_4 = _2968;
                frontier_phi_63_64_ladder_5 = _2966;
            }
            _3095 = frontier_phi_63_64_ladder_5;
            _3097 = frontier_phi_63_64_ladder_4;
            _3099 = frontier_phi_63_64_ladder_3;
            _3101 = frontier_phi_63_64_ladder;
            _3103 = frontier_phi_63_64_ladder_2;
            _3105 = frontier_phi_63_64_ladder_1;
        }
        float _3110 = isnan(1.0) ? _833 : (isnan(_833) ? 1.0 : min(_833, 1.0));
        _2870 = (_3110 * _3101) + _2401;
        _2872 = (_3110 * _3103) + _2403;
        _2874 = (_3110 * _3105) + _2405;
        _2876 = ((_3095 * 0.039999999105930328369140625) * _3110) + _2724;
        _2878 = ((_3097 * 0.039999999105930328369140625) * _3110) + _2726;
        _2880 = ((_3099 * 0.039999999105930328369140625) * _3110) + _2728;
    }
    else
    {
        _2870 = _2401;
        _2872 = _2403;
        _2874 = _2405;
        _2876 = _2724;
        _2878 = _2726;
        _2880 = _2728;
    }
    uint _2886 = _809 + uint(cbMatDynParam._m0[0u].w);
    float _2892 = ((((((_578.x - _575) * _511) + _575) * cbMtdParam._m0[13u].x) + ((((_532.x - _529) * _511) + _529) * cbMtdParam._m0[11u].x)) * _364) * cbInstanceData._m0[_2886].x;
    float _2893 = ((((((_578.y - _576) * _511) + _576) * cbMtdParam._m0[13u].y) + ((((_532.y - _530) * _511) + _530) * cbMtdParam._m0[11u].y)) * _364) * cbInstanceData._m0[_2886].y;
    float _2894 = ((((((_578.z - _577) * _511) + _577) * cbMtdParam._m0[13u].z) + ((((_532.z - _531) * _511) + _531) * cbMtdParam._m0[11u].z)) * _364) * cbInstanceData._m0[_2886].z;
    float _4908 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _4919 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _4930 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _2911 = (((isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0))) * (_2870 + ((isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0))) * _833))) + ((_2876 + ((isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0))) * _1670)) * cbPerFrame._m0[3u].x)) + _2892;
    float _2913 = (_2893 + ((_2878 + ((isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0))) * _1670)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0))) * (_2872 + ((isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0))) * _833)));
    float _2915 = (_2894 + ((_2880 + ((isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0))) * _1670)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0))) * (_2874 + ((isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0))) * _833)));
    float _2916 = isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0));
    float _2917 = isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0));
    float _2918 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0));
    float _2924 = cbMtdParam._m0[2u].x * _2892;
    float _2925 = cbMtdParam._m0[2u].y * _2893;
    float _2926 = cbMtdParam._m0[2u].z * _2894;
    float _4956 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2928 = isnan(1.0) ? _4956 : (isnan(_4956) ? 1.0 : min(_4956, 1.0));
    uint _2929 = _808 + 6u;
    float _2937 = _769 / cbSceneParam._m0[86u].x;
    float _2938 = _770 / cbSceneParam._m0[86u].y;
    vec4 _2952 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2937, _2938, (log2((isnan(cbSceneParam._m0[77u].w) ? _690 : (isnan(_690) ? cbSceneParam._m0[77u].w : min(_690, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2954 = _2952.x;
    float _2955 = _2952.y;
    float _2956 = _2952.z;
    float _2957 = _2952.w;
    float _3028;
    float _3030;
    float _3032;
    float _3034;
    if (_690 > cbSceneParam._m0[78u].w)
    {
        float _2991 = isnan(_690) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _690 : min(cbSceneParam._m0[80u].w, _690));
        float _2992 = _2991 / _690;
        float _3003 = _2992 * _741;
        float _3004 = _742 * _2992;
        float _3005 = (-0.0) - _3004;
        float _3006 = _2992 * _743;
        float _3008 = (cbSceneParam._m0[77u].w * _3005) / _2991;
        float _3009 = _3008 + cbSceneParam._m0[79u].w;
        float _3010 = cbSceneParam._m0[79u].w - _3004;
        float _3016 = sqrt(((_3003 * _3003) + (_3004 * _3004)) + (_3006 * _3006));
        float _3019 = (1.0 - (cbSceneParam._m0[77u].w / _2991)) * _3016;
        float _3024 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3026 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3212;
        if (abs((_3005 - _3008) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3212 = ((((_3009 > 0.0) ? exp2(_3024 * _3009) : (2.0 - exp2(_3026 * _3009))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3019;
        }
        else
        {
            float _3156 = 1.0 / cbSceneParam._m0[80u].x;
            float _3157 = isnan(_3010) ? _3009 : (isnan(_3009) ? _3010 : max(_3009, _3010));
            float _3158 = isnan(_3010) ? _3009 : (isnan(_3009) ? _3010 : min(_3009, _3010));
            float _3167 = isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : min(_3157, 0.0));
            float _3168 = isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : min(_3158, 0.0));
            _3212 = ((abs(_3016 / _3005) * cbSceneParam._m0[80u].y) * ((((_3167 - _3168) * 2.0) - ((exp2(_3024 * (isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0)))) - exp2(_3024 * (isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : max(_3158, 0.0))))) * _3156)) - ((exp2(_3026 * _3167) - exp2(_3026 * _3168)) * _3156))) + (_3019 * cbSceneParam._m0[80u].z);
        }
        vec4 _3214 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2937, _2938, 1.0), 0.0);
        float _3223 = exp2((_3212 * (-1.44269502162933349609375)) * (1.0 - _3214.w));
        float _3224 = log2(_3223);
        float _3240 = log2(_2957);
        _3028 = (exp2(_3240 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3224 * cbSceneParam._m0[78u].x)) * _3214.x) / cbSceneParam._m0[78u].x)) + _2954;
        _3030 = (exp2(_3240 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3224 * cbSceneParam._m0[78u].y)) * _3214.y) / cbSceneParam._m0[78u].y)) + _2955;
        _3032 = (exp2(_3240 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3224 * cbSceneParam._m0[78u].z)) * _3214.z) / cbSceneParam._m0[78u].z)) + _2956;
        _3034 = _3223 * _2957;
    }
    else
    {
        _3028 = _2954;
        _3030 = _2955;
        _3032 = _2956;
        _3034 = _2957;
    }
    bool _3250;
    vec4 _3044;
    vec4 _3066;
    float _3068;
    float _3072;
    float _3073;
    float _3074;
    float _3077;
    float _3080;
    float _3083;
    float _3084;
    bool _3094;
    for (;;)
    {
        _3044 = cbMatDynParam._m0[0u];
        float _3046 = roundEven(_3044.y);
        bool _3047 = _3046 == 3.0;
        float _3048 = log2(_3034);
        float _3052 = exp2(_3048 * cbSceneParam._m0[78u].x);
        float _3053 = exp2(_3048 * cbSceneParam._m0[78u].y);
        float _3054 = exp2(_3048 * cbSceneParam._m0[78u].z);
        float _3055 = _3052 * _2916;
        float _3056 = _3053 * _2917;
        float _3057 = _3054 * _2918;
        float _3064 = _757 + (-0.5);
        _3066 = cbMtdParam._m0[1u];
        _3068 = _3066.y * _3064;
        float _3071 = (_3046 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3072 = _3071 * (_3047 ? _3055 : (_3055 + (cbSceneParam._m0[72u].w * _3028)));
        _3073 = _3071 * (_3047 ? _3056 : (_3056 + (cbSceneParam._m0[72u].w * _3030)));
        _3074 = _3071 * (_3047 ? _3057 : (_3057 + (cbSceneParam._m0[72u].w * _3032)));
        _3077 = ((_2924 * _2928) * _3052) * _3071;
        _3080 = ((_2925 * _2928) * _3053) * _3071;
        _3083 = ((_2926 * _2928) * _3054) * _3071;
        _3084 = _3064 * 0.999000012874603271484375;
        _3094 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3094)
        {
            if ((cbInstanceData._m0[_808 + 7u].x + _3084) < 0.5)
            {
                _3250 = true;
                break;
            }
        }
        uint _3191 = _809 + uint(_3044.w);
        if ((cbInstanceData._m0[_3191].w < 1.0) && ((cbInstanceData._m0[_3191].w + _3084) < 0.5))
        {
            _3250 = true;
            break;
        }
        if ((_3068 + 1.0) < _3066.x)
        {
            _3250 = true;
            break;
        }
        _3250 = false;
        break;
    }
    float _3454;
    if (_3250)
    {
        discard_state = true;
        _3454 = 0.0;
    }
    else
    {
        _3454 = cbInstanceData._m0[_2929].w;
    }
    SV_Target.x = _3072;
    SV_Target.y = _3073;
    SV_Target.z = _3074;
    SV_Target.w = _3454;
    SV_Target_1.x = _3077;
    SV_Target_1.y = _3080;
    SV_Target_1.z = _3083;
    SV_Target_1.w = cbInstanceData._m0[_2929].w;
    discard_exit();
}


