#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1160;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _201 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _202 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _203 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _209 = inversesqrt(dot(vec3(_201, _202, _203), vec3(_201, _202, _203)));
    float _216 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _245 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _251 = _245.x * cbMtdParam._m0[9u].x;
    float _252 = _245.y * cbMtdParam._m0[9u].y;
    float _253 = _245.z * cbMtdParam._m0[9u].z;
    vec4 _291 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[5u].w));
    float _307 = (TEXCOORD_3.x - ((cbMtdParam._m0[14u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[14u].y + 1.0);
    float _3550 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _308 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
    float _315 = (((_291.x * cbMtdParam._m0[10u].x) - _251) * _308) + _251;
    float _316 = (((_291.y * cbMtdParam._m0[10u].y) - _252) * _308) + _252;
    float _317 = (((_291.z * cbMtdParam._m0[10u].z) - _253) * _308) + _253;
    vec4 _334 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    vec4 _349 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[6u].w));
    float _351 = _349.x;
    float _369 = ((texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[7u].w)).x - _351) * _308) + _351;
    vec4 _382 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[4u].w));
    float _390 = (_382.x * 2.0) + (-1.0);
    float _392 = (_382.y * 2.0) + (-1.0);
    float _393 = dot(vec2(_390, _392), vec2(_390, _392));
    float _3561 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    vec4 _410 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _414 = _410.z;
    float _417 = (_410.x * 2.0) + (-1.0);
    float _418 = (_410.y * 2.0) + (-1.0);
    float _419 = dot(vec2(_417, _418), vec2(_417, _418));
    float _3572 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _424 = sqrt(1.0 - (isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0))));
    float _427 = (_308 * (_382.z - _414)) + _414;
    float _440 = (cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _441 = (cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _470 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * ((cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * ((cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w)) + cbTextureTilingScale._m0[10u].w));
    float _475 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[15u].w;
    float _482 = ((_470.y * 0.5) + (-0.25)) * cbMtdParam._m0[15u].z;
    float _484 = (-0.0) - (cbMtdParam._m0[15u].z * ((_470.x * 0.5) + (-0.25)));
    float _486 = fract(_475);
    float _488 = fract(_475 + 0.5);
    float _489 = _486 * _484;
    float _490 = _482 * _486;
    float _493 = _488 * _484;
    float _494 = _482 * _488;
    float _499 = abs((_486 * 2.0) + (-1.0));
    vec4 _515 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_489 + _440) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_490 + _441) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _517 = _515.x;
    float _518 = _515.y;
    float _519 = _515.z;
    vec4 _520 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_493 + _440) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_494 + _441) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _547 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w;
    float _548 = (cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w;
    vec4 _561 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_489 + _547) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_490 + _548) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _563 = _561.x;
    float _564 = _561.y;
    float _565 = _561.z;
    vec4 _566 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_FLow_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2(((_493 + _547) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, ((_494 + _548) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _592 = (TEXCOORD_9.x - ((cbMtdParam._m0[16u].y * (1.0 - TEXCOORD_9.x)) * (_334.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[16u].z + 1.0);
    float _3583 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _593 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
    float _603 = (_308 * (_390 - _417)) + _417;
    float _604 = (_308 * (_392 - _418)) + _418;
    float _605 = (_308 * (sqrt(1.0 - (isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0)))) - _424)) + _424;
    float _608 = fma(_605, _216 * NORMAL.x, fma(_604, _223 * TANGENT.x, (_209 * _201) * _603));
    float _611 = fma(_605, _216 * NORMAL.y, fma(_604, _223 * TANGENT.y, (_209 * _202) * _603));
    float _614 = fma(_605, _216 * NORMAL.z, fma(_604, _223 * TANGENT.z, (_209 * _203) * _603));
    float _618 = inversesqrt(dot(vec3(_608, _611, _614), vec3(_608, _611, _614)));
    float _619 = _618 * _608;
    float _620 = _618 * _611;
    float _621 = _618 * _614;
    float _3594 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _622 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
    float _3605 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _3616 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _3627 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _3638 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _626 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
    float _642 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _683 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _693 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _683);
    float _694 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _683);
    float _695 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _683);
    float _699 = inversesqrt(dot(vec3(_693, _694, _695), vec3(_693, _694, _695)));
    float _700 = _693 * _699;
    float _701 = _694 * _699;
    float _702 = _695 * _699;
    float _708 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _709 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _727 = fma(_621, cbSceneParam._m0[5u].z, fma(_620, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _619));
    float _730 = fma(_621, cbSceneParam._m0[6u].z, fma(_620, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _619));
    float _733 = fma(_621, cbSceneParam._m0[7u].z, fma(_620, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _619));
    uint _746 = uint(roundEven(NORMAL.w)) * 13u;
    uint _747 = _746 + 9u;
    uint _748 = _747 + uint(cbMatDynParam._m0[0u].w);
    float _754 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0)))) * cbInstanceData._m0[_748].x;
    float _755 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0)))) * cbInstanceData._m0[_748].y;
    float _756 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0)))) * cbInstanceData._m0[_748].z;
    float _3649 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _757 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
    float _3660 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _758 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
    float _3671 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _759 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
    float _760 = 1.0 - _626;
    float _761 = _757 * _760;
    float _762 = _758 * _760;
    float _763 = _759 * _760;
    float _768 = (_757 + (-0.039999999105930328369140625)) * _626;
    float _769 = (_758 + (-0.039999999105930328369140625)) * _626;
    float _770 = (_759 + (-0.039999999105930328369140625)) * _626;
    float _771 = _768 + 0.039999999105930328369140625;
    float _773 = _769 + 0.039999999105930328369140625;
    float _774 = _770 + 0.039999999105930328369140625;
    vec4 _783 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _708, cbSceneParam._m0[86u].y * _709));
    float _786 = _783.x * TEXCOORD_3.w;
    float _787 = dot(vec3(_619, _620, _621), vec3(_700, _701, _702));
    float _790 = _787 * 2.0;
    float _794 = (_790 * _619) - _700;
    float _795 = (_790 * _620) - _701;
    float _796 = (_790 * _621) - _702;
    float _800 = abs(dot(vec3(_700, _701, _702), vec3(_619, _620, _621)));
    float _3682 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _802 = sqrt(_622);
    float _815 = exp2((_802 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_802 * 3.0));
    float _821 = (1.0 - _815) * ((_802 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _822 = _815 * _802;
    float _850 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _854 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _858 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1159;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _885 = fma(_858, cbModelParam._m0[26u].z, fma(_854, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _850));
        float _889 = fma(_858, cbModelParam._m0[27u].z, fma(_854, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _850));
        float _893 = fma(_858, cbModelParam._m0[28u].z, fma(_854, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _850));
        float _917 = _850 + _619;
        float _918 = _854 + _620;
        float _919 = _858 + _621;
        float _929 = fma(_919, cbModelParam._m0[26u].z, fma(_918, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _917)) - _885;
        float _930 = fma(_919, cbModelParam._m0[27u].z, fma(_918, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _917)) - _889;
        float _931 = fma(_919, cbModelParam._m0[28u].z, fma(_918, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _917)) - _893;
        float _935 = inversesqrt(dot(vec3(_929, _930, _931), vec3(_929, _930, _931)));
        float _948 = ((_935 * _929) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_885 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _949 = ((_935 * _930) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_889 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _950 = ((_935 * _931) / cbModelParam._m0[34u].z) + ((((((_893 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _953 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_948, _949, _950), 0.0);
        vec4 _960 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_948, _949, _950), 0.0);
        vec4 _967 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_948, _949, _950), 0.0);
        vec4 _974 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_948, _949, _950), 0.0);
        float _987 = exp2((_953.w + (-0.5)) * 20.0) * 2.0;
        float _988 = _987 * (_953.x + (-0.5));
        float _989 = _987 * (_953.y + (-0.5));
        float _990 = _987 * (_953.z + (-0.5));
        float _997 = exp2((_960.w + (-0.5)) * 20.0) * 2.0;
        float _998 = _997 * (_960.x + (-0.5));
        float _999 = _997 * (_960.y + (-0.5));
        float _1000 = _997 * (_960.z + (-0.5));
        float _1007 = exp2((_967.w + (-0.5)) * 20.0) * 2.0;
        float _1008 = _1007 * (_967.x + (-0.5));
        float _1009 = _1007 * (_967.y + (-0.5));
        float _1010 = _1007 * (_967.z + (-0.5));
        float _1017 = exp2((_974.w + (-0.5)) * 20.0) * 2.0;
        float _1018 = _1017 * (_974.x + (-0.5));
        float _1019 = _1017 * (_974.y + (-0.5));
        float _1020 = _1017 * (_974.z + (-0.5));
        float _1021 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1022 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1023 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1024 = _988 * 0.5;
        float _1025 = _998 * 0.5;
        float _1026 = _1008 * 0.5;
        float _1027 = dot(vec3(_1024, _1025, _1026), vec3(_1024, _1025, _1026));
        float _1032 = (_1027 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1027);
        float _1041 = (dot(vec3(_619, _620, _621), vec3(_1032 * _1024, _1032 * _1025, _1032 * _1026)) + 1.0) * 0.5;
        float _3708 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1051 = sqrt(((_1025 * _1025) + (_1024 * _1024)) + (_1026 * _1026)) / (_1021 + 9.9999997473787516355514526367188e-06);
        float _3719 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1052 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
        float _1053 = _1052 * 2.0;
        float _1057 = (1.0 - _1052) / (_1052 + 1.0);
        float _3730 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
        float _1067 = ((((1.0 - _1058) * (_1053 + 2.0)) * exp2(log2(isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0))) * (_1053 + 1.0))) + _1058) * _1021;
        float _1068 = _989 * 0.5;
        float _1069 = _999 * 0.5;
        float _1070 = _1009 * 0.5;
        float _1071 = dot(vec3(_1068, _1069, _1070), vec3(_1068, _1069, _1070));
        float _1076 = (_1071 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1071);
        float _1084 = (dot(vec3(_619, _620, _621), vec3(_1076 * _1068, _1076 * _1069, _1076 * _1070)) + 1.0) * 0.5;
        float _3741 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1093 = sqrt(((_1069 * _1069) + (_1068 * _1068)) + (_1070 * _1070)) / (_1022 + 9.9999997473787516355514526367188e-06);
        float _3752 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
        float _1095 = _1094 * 2.0;
        float _1099 = (1.0 - _1094) / (_1094 + 1.0);
        float _3763 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
        float _1109 = ((((1.0 - _1100) * (_1095 + 2.0)) * exp2(log2(isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0))) * (_1095 + 1.0))) + _1100) * _1022;
        float _1110 = _990 * 0.5;
        float _1111 = _1000 * 0.5;
        float _1112 = _1010 * 0.5;
        float _1113 = dot(vec3(_1110, _1111, _1112), vec3(_1110, _1111, _1112));
        float _1118 = (_1113 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1113);
        float _1126 = (dot(vec3(_619, _620, _621), vec3(_1118 * _1110, _1118 * _1111, _1118 * _1112)) + 1.0) * 0.5;
        float _3774 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1135 = sqrt(((_1111 * _1111) + (_1110 * _1110)) + (_1112 * _1112)) / (_1023 + 9.9999997473787516355514526367188e-06);
        float _3785 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
        float _1137 = _1136 * 2.0;
        float _1141 = (1.0 - _1136) / (_1136 + 1.0);
        float _3796 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
        float _1151 = ((((1.0 - _1142) * (_1137 + 2.0)) * exp2(log2(isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0))) * (_1137 + 1.0))) + _1142) * _1023;
        _1159 = _990;
        _1161 = _989;
        _1162 = _988;
        _1163 = _1000;
        _1164 = _999;
        _1165 = _998;
        _1166 = _1010;
        _1167 = _1009;
        _1168 = _1008;
        _1169 = _1023;
        _1170 = _1022;
        _1171 = _1021;
        _1172 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0)));
        _1173 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0)));
        _1174 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0)));
    }
    else
    {
        _1159 = _1160;
        _1161 = _1160;
        _1162 = _1160;
        _1163 = _1160;
        _1164 = _1160;
        _1165 = _1160;
        _1166 = _1160;
        _1167 = _1160;
        _1168 = _1160;
        _1169 = _1160;
        _1170 = _1160;
        _1171 = _1160;
        _1172 = 0.0;
        _1173 = 0.0;
        _1174 = 0.0;
    }
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1200 = fma(_858, cbModelParam._m0[30u].z, fma(_854, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _850));
        float _1204 = fma(_858, cbModelParam._m0[31u].z, fma(_854, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _850));
        float _1208 = fma(_858, cbModelParam._m0[32u].z, fma(_854, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _850));
        float _1231 = _850 + _619;
        float _1232 = _854 + _620;
        float _1233 = _858 + _621;
        float _1243 = fma(_1233, cbModelParam._m0[30u].z, fma(_1232, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1231)) - _1200;
        float _1244 = fma(_1233, cbModelParam._m0[31u].z, fma(_1232, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1231)) - _1204;
        float _1245 = fma(_1233, cbModelParam._m0[32u].z, fma(_1232, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1231)) - _1208;
        float _1249 = inversesqrt(dot(vec3(_1243, _1244, _1245), vec3(_1243, _1244, _1245)));
        float _1262 = ((_1249 * _1243) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1200 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1263 = ((_1249 * _1244) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1204 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1264 = ((_1249 * _1245) / cbModelParam._m0[35u].z) + ((((((_1208 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1266 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1262, _1263, _1264), 0.0);
        vec4 _1273 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1262, _1263, _1264), 0.0);
        vec4 _1280 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1262, _1263, _1264), 0.0);
        vec4 _1287 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1262, _1263, _1264), 0.0);
        float _1299 = exp2((_1266.w + (-0.5)) * 20.0) * 2.0;
        float _1300 = _1299 * (_1266.x + (-0.5));
        float _1301 = _1299 * (_1266.y + (-0.5));
        float _1302 = _1299 * (_1266.z + (-0.5));
        float _1309 = exp2((_1273.w + (-0.5)) * 20.0) * 2.0;
        float _1310 = _1309 * (_1273.x + (-0.5));
        float _1311 = _1309 * (_1273.y + (-0.5));
        float _1312 = _1309 * (_1273.z + (-0.5));
        float _1319 = exp2((_1280.w + (-0.5)) * 20.0) * 2.0;
        float _1320 = _1319 * (_1280.x + (-0.5));
        float _1321 = _1319 * (_1280.y + (-0.5));
        float _1322 = _1319 * (_1280.z + (-0.5));
        float _1329 = exp2((_1287.w + (-0.5)) * 20.0) * 2.0;
        float _1330 = _1329 * (_1287.x + (-0.5));
        float _1331 = _1329 * (_1287.y + (-0.5));
        float _1332 = _1329 * (_1287.z + (-0.5));
        float _1333 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1334 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1335 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1336 = _1300 * 0.5;
        float _1337 = _1310 * 0.5;
        float _1338 = _1320 * 0.5;
        float _1339 = dot(vec3(_1336, _1337, _1338), vec3(_1336, _1337, _1338));
        float _1344 = (_1339 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1339);
        float _1352 = (dot(vec3(_619, _620, _621), vec3(_1344 * _1336, _1344 * _1337, _1344 * _1338)) + 1.0) * 0.5;
        float _3837 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1361 = sqrt(((_1337 * _1337) + (_1336 * _1336)) + (_1338 * _1338)) / (_1333 + 9.9999997473787516355514526367188e-06);
        float _3848 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _1363 = _1362 * 2.0;
        float _1367 = (1.0 - _1362) / (_1362 + 1.0);
        float _3859 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1368 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
        float _1377 = ((((1.0 - _1368) * (_1363 + 2.0)) * exp2(log2(isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0))) * (_1363 + 1.0))) + _1368) * _1333;
        float _1378 = _1301 * 0.5;
        float _1379 = _1311 * 0.5;
        float _1380 = _1321 * 0.5;
        float _1381 = dot(vec3(_1378, _1379, _1380), vec3(_1378, _1379, _1380));
        float _1386 = (_1381 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1381);
        float _1394 = (dot(vec3(_619, _620, _621), vec3(_1386 * _1378, _1386 * _1379, _1386 * _1380)) + 1.0) * 0.5;
        float _3870 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1403 = sqrt(((_1379 * _1379) + (_1378 * _1378)) + (_1380 * _1380)) / (_1334 + 9.9999997473787516355514526367188e-06);
        float _3881 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1404 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _1405 = _1404 * 2.0;
        float _1409 = (1.0 - _1404) / (_1404 + 1.0);
        float _3892 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1410 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
        float _1419 = ((((1.0 - _1410) * (_1405 + 2.0)) * exp2(log2(isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))) * (_1405 + 1.0))) + _1410) * _1334;
        float _1420 = _1302 * 0.5;
        float _1421 = _1312 * 0.5;
        float _1422 = _1322 * 0.5;
        float _1423 = dot(vec3(_1420, _1421, _1422), vec3(_1420, _1421, _1422));
        float _1428 = (_1423 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1423);
        float _1436 = (dot(vec3(_619, _620, _621), vec3(_1428 * _1420, _1428 * _1421, _1428 * _1422)) + 1.0) * 0.5;
        float _3903 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1445 = sqrt(((_1421 * _1421) + (_1420 * _1420)) + (_1422 * _1422)) / (_1335 + 9.9999997473787516355514526367188e-06);
        float _3914 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1446 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _1447 = _1446 * 2.0;
        float _1451 = (1.0 - _1446) / (_1446 + 1.0);
        float _3925 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1452 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
        float _1461 = ((((1.0 - _1452) * (_1447 + 2.0)) * exp2(log2(isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * (_1447 + 1.0))) + _1452) * _1335;
        _1469 = _1302;
        _1470 = _1301;
        _1471 = _1300;
        _1472 = _1312;
        _1473 = _1311;
        _1474 = _1310;
        _1475 = _1322;
        _1476 = _1321;
        _1477 = _1320;
        _1478 = _1335;
        _1479 = _1334;
        _1480 = _1333;
        _1481 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0)));
        _1482 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0)));
        _1483 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0)));
    }
    else
    {
        _1469 = _1160;
        _1470 = _1160;
        _1471 = _1160;
        _1472 = _1160;
        _1473 = _1160;
        _1474 = _1160;
        _1475 = _1160;
        _1476 = _1160;
        _1477 = _1160;
        _1478 = _1160;
        _1479 = _1160;
        _1480 = _1160;
        _1481 = 0.0;
        _1482 = 0.0;
        _1483 = 0.0;
    }
    float _1493 = (cbModelParam._m0[1u].x * (_1481 - _1172)) + _1172;
    float _1494 = (cbModelParam._m0[1u].x * (_1482 - _1173)) + _1173;
    float _1495 = (cbModelParam._m0[1u].x * (_1483 - _1174)) + _1174;
    float _1516 = fma(_1495, cbSceneParam._m0[89u].z, fma(_1494, cbSceneParam._m0[89u].y, _1493 * cbSceneParam._m0[89u].x));
    float _1519 = fma(_1495, cbSceneParam._m0[90u].z, fma(_1494, cbSceneParam._m0[90u].y, _1493 * cbSceneParam._m0[90u].x));
    float _1522 = fma(_1495, cbSceneParam._m0[91u].z, fma(_1494, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1493));
    float _1537 = _794 * 0.5;
    float _1538 = _795 * 0.5;
    float _1539 = _796 * 0.5;
    float _1540 = dot(vec4(_1537, _1538, _1539, 1.0), vec4(_1471, _1474, _1477, _1480));
    float _1543 = dot(vec4(_1537, _1538, _1539, 1.0), vec4(_1470, _1473, _1476, _1479));
    float _1546 = dot(vec4(_1537, _1538, _1539, 1.0), vec4(_1469, _1472, _1475, _1478));
    float _1580;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1553 = dot(vec4(_1537, _1538, _1539, 1.0), vec4(_1159, _1163, _1166, _1169));
        float _1557 = dot(vec4(_1537, _1538, _1539, 1.0), vec4(_1161, _1164, _1167, _1170));
        float _1561 = dot(vec4(_1537, _1538, _1539, 1.0), vec4(_1162, _1165, _1168, _1171));
        float _1568 = dot(vec4(cbModelParam._m0[39u]), vec4(_1537, _1538, _1539, 1.0));
        _1580 = dot(vec3(isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0)), isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0)), isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1568) ? 0.0 : (isnan(0.0) ? _1568 : max(0.0, _1568))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1580 = 1.0;
    }
    float _1591;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1582 = dot(vec4(cbModelParam._m0[40u]), vec4(_1537, _1538, _1539, 1.0));
        _1591 = dot(vec3(isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0)), isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0)), isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1582) ? 0.0 : (isnan(0.0) ? _1582 : max(0.0, _1582))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1591 = 1.0;
    }
    float _1595 = (_1591 * cbModelParam._m0[1u].x) + (_1580 * (1.0 - cbModelParam._m0[1u].x));
    float _1605 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _622);
    float _1606 = isnan(_1605) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1605 : min(cbModelParam._m0[25u].z, _1605));
    float _1686;
    float _1688;
    float _1690;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1653 = fma(_858, cbModelParam._m0[13u].z, fma(_854, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _850)) + cbModelParam._m0[13u].w;
        float _1657 = fma(_858, cbModelParam._m0[14u].z, fma(_854, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _850)) + cbModelParam._m0[14u].w;
        float _1661 = fma(_858, cbModelParam._m0[15u].z, fma(_854, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _850)) + cbModelParam._m0[15u].w;
        float _1664 = fma(_796, cbModelParam._m0[13u].z, fma(_795, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _794));
        float _1667 = fma(_796, cbModelParam._m0[14u].z, fma(_795, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _794));
        float _1670 = fma(_796, cbModelParam._m0[15u].z, fma(_795, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _794));
        float _1698;
        if (_1664 > 0.0)
        {
            _1698 = abs((1.0 - _1653) / _1664);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1664 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1653 + 1.0) / _1664);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1698 = frontier_phi_14_12_ladder;
        }
        float _1923;
        if (_1667 > 0.0)
        {
            _1923 = abs((1.0 - _1657) / _1667);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1667 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1657 + 1.0) / _1667);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1923 = frontier_phi_23_19_ladder;
        }
        float _2180;
        if (_1670 > 0.0)
        {
            _2180 = abs((1.0 - _1661) / _1670);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1670 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1661 + 1.0) / _1670);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2180 = frontier_phi_35_30_ladder;
        }
        float _2182 = isnan(_1923) ? _1698 : (isnan(_1698) ? _1923 : min(_1698, _1923));
        float _2183 = isnan(_2180) ? _2182 : (isnan(_2182) ? _2180 : min(_2182, _2180));
        float _2187 = (_2183 * _1664) + _1653;
        float _2188 = (_2183 * _1667) + _1657;
        float _2189 = (_2183 * _1670) + _1661;
        float _2190 = _2183 * 9.9999997473787516355514526367188e-05;
        float _2192 = (-1.0) - _2190;
        float _2194 = _2190 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2189 > _2194) || ((_2189 < _2192) || ((_2188 > _2194) || ((_2188 < _2192) || ((_2187 < _2192) || (_2187 > _2194))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2317 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2189, cbModelParam._m0[9u].z, fma(_2188, cbModelParam._m0[9u].y, _2187 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2189, cbModelParam._m0[10u].z, fma(_2188, cbModelParam._m0[10u].y, _2187 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2189, cbModelParam._m0[11u].z, fma(_2188, cbModelParam._m0[11u].y, _2187 * cbModelParam._m0[11u].x))), _1606);
            frontier_phi_13_35_ladder = _2317.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2317.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2317.x * cbModelParam._m0[1u].y;
        }
        _1686 = frontier_phi_13_35_ladder_2;
        _1688 = frontier_phi_13_35_ladder_1;
        _1690 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1674 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_794, _795, _796), _1606);
        _1686 = _1674.x * cbModelParam._m0[1u].y;
        _1688 = _1674.y * cbModelParam._m0[1u].y;
        _1690 = _1674.z * cbModelParam._m0[1u].y;
    }
    float _1694 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _622);
    float _1695 = isnan(_1694) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1694 : min(cbModelParam._m0[25u].w, _1694));
    float _1785;
    float _1787;
    float _1789;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1749 = fma(_858, cbModelParam._m0[21u].z, fma(_854, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _850)) + cbModelParam._m0[21u].w;
        float _1753 = fma(_858, cbModelParam._m0[22u].z, fma(_854, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _850)) + cbModelParam._m0[22u].w;
        float _1757 = fma(_858, cbModelParam._m0[23u].z, fma(_854, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _850)) + cbModelParam._m0[23u].w;
        float _1760 = fma(_796, cbModelParam._m0[21u].z, fma(_795, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _794));
        float _1763 = fma(_796, cbModelParam._m0[22u].z, fma(_795, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _794));
        float _1766 = fma(_796, cbModelParam._m0[23u].z, fma(_795, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _794));
        float _1928;
        if (_1760 > 0.0)
        {
            _1928 = abs((1.0 - _1749) / _1760);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1760 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1749 + 1.0) / _1760);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1928 = frontier_phi_25_21_ladder;
        }
        float _2207;
        if (_1763 > 0.0)
        {
            _2207 = abs((1.0 - _1753) / _1763);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1763 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1753 + 1.0) / _1763);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2207 = frontier_phi_37_32_ladder;
        }
        float _2420;
        if (_1766 > 0.0)
        {
            _2420 = abs((1.0 - _1757) / _1766);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1766 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1757 + 1.0) / _1766);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2420 = frontier_phi_46_43_ladder;
        }
        float _2422 = isnan(_2207) ? _1928 : (isnan(_1928) ? _2207 : min(_1928, _2207));
        float _2423 = isnan(_2420) ? _2422 : (isnan(_2422) ? _2420 : min(_2422, _2420));
        float _2427 = (_2423 * _1760) + _1749;
        float _2428 = (_2423 * _1763) + _1753;
        float _2429 = (_2423 * _1766) + _1757;
        float _2430 = _2423 * 9.9999997473787516355514526367188e-05;
        float _2431 = (-1.0) - _2430;
        float _2433 = _2430 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2429 > _2433) || ((_2429 < _2431) || ((_2428 > _2433) || ((_2428 < _2431) || ((_2427 < _2431) || (_2427 > _2433))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2657 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2429, cbModelParam._m0[17u].z, fma(_2428, cbModelParam._m0[17u].y, _2427 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2429, cbModelParam._m0[18u].z, fma(_2428, cbModelParam._m0[18u].y, _2427 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2429, cbModelParam._m0[19u].z, fma(_2428, cbModelParam._m0[19u].y, _2427 * cbModelParam._m0[19u].x))), _1695);
            frontier_phi_22_46_ladder = _2657.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2657.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2657.x * cbModelParam._m0[1u].z;
        }
        _1785 = frontier_phi_22_46_ladder_2;
        _1787 = frontier_phi_22_46_ladder_1;
        _1789 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1769 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_794, _795, _796), _1695);
        _1785 = _1769.x * cbModelParam._m0[1u].z;
        _1787 = _1769.y * cbModelParam._m0[1u].z;
        _1789 = _1769.z * cbModelParam._m0[1u].z;
    }
    float _1802 = (((_821 * _771) + _822) * _786) * ((cbModelParam._m0[1u].w * (_1785 - _1686)) + _1686);
    float _1804 = (((_821 * _773) + _822) * _786) * ((cbModelParam._m0[1u].w * (_1787 - _1688)) + _1688);
    float _1806 = (((_821 * _774) + _822) * _786) * ((cbModelParam._m0[1u].w * (_1789 - _1690)) + _1690);
    float _1809 = fma(_1806, cbSceneParam._m0[89u].z, fma(_1804, cbSceneParam._m0[89u].y, _1802 * cbSceneParam._m0[89u].x));
    float _1812 = fma(_1806, cbSceneParam._m0[90u].z, fma(_1804, cbSceneParam._m0[90u].y, _1802 * cbSceneParam._m0[90u].x));
    float _1815 = fma(_1806, cbSceneParam._m0[91u].z, fma(_1804, cbSceneParam._m0[91u].y, _1802 * cbSceneParam._m0[91u].x));
    vec4 _1823 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_708, _709));
    float _1825 = _1823.w;
    float _1837 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1825);
    float _1838 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1825);
    float _1839 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1825);
    uvec4 _1843 = floatBitsToUint(cbInstanceData._m0[_746 + 5u]);
    uint _1845 = _1843.x * 14u;
    uint _1846 = _1845 + 13u;
    float _1853 = _786 + (-1.0);
    float _1858 = (cbLight._m0[_1846].x * _1853) + 1.0;
    float _1859 = (cbLight._m0[_1846].y * _1853) + 1.0;
    float _1860 = (cbLight._m0[_1846].z * _1853) + 1.0;
    float _1861 = (cbLight._m0[_1846].w * _1853) + 1.0;
    uint _1862 = _1845 + 5u;
    float _1868 = isnan(1.0) ? _1859 : (isnan(_1859) ? 1.0 : min(_1859, 1.0));
    uint _1872 = _1845 + 4u;
    float _1881 = isnan(1.0) ? _1858 : (isnan(_1858) ? 1.0 : min(_1858, 1.0));
    uint _1885 = _1845 | 1u;
    float _1896 = dot(vec3(cbLight._m0[_1845].xyz), vec3(_619, _620, _621));
    float _1899 = dot(vec3(cbLight._m0[_1885].xyz), vec3(_619, _620, _621));
    float _4061 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
    float _4072 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
    float _1904 = (isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) * 0.3183098733425140380859375;
    float _1906 = (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0))) * 0.3183098733425140380859375;
    float _1913 = ((cbLight._m0[_1862].x * _1868) * _1906) + (((cbLight._m0[_1872].x * _1837) * _1881) * _1904);
    float _1914 = ((_1868 * cbLight._m0[_1862].y) * _1906) + (((cbLight._m0[_1872].y * _1838) * _1881) * _1904);
    float _1915 = ((_1868 * cbLight._m0[_1862].z) * _1906) + (((cbLight._m0[_1872].z * _1839) * _1881) * _1904);
    uvec4 _1920 = floatBitsToUint(cbLight._m0[_1845 + 12u]);
    bool _1922 = _1920.x == 0u;
    float _1933;
    float _1935;
    float _1937;
    if (_1922)
    {
        _1933 = _1913;
        _1935 = _1914;
        _1937 = _1915;
    }
    else
    {
        uint _1941 = _1845 + 6u;
        float _1957 = (dot(vec3(cbLight._m0[_1845 + 2u].xyz), vec3(_619, _620, _621)) * 0.5) + 0.5;
        float _1958 = _1957 * _1957;
        float _4083 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
        float _1959 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _1960 = isnan(1.0) ? _1860 : (isnan(_1860) ? 1.0 : min(_1860, 1.0));
        _1933 = (((cbLight._m0[_1941].x * 0.3183098733425140380859375) * _1959) * _1960) + _1913;
        _1935 = (((cbLight._m0[_1941].y * 0.3183098733425140380859375) * _1959) * _1960) + _1914;
        _1937 = (((cbLight._m0[_1941].z * 0.3183098733425140380859375) * _1959) * _1960) + _1915;
    }
    bool _1940 = _1920.y == 0u;
    float _1978;
    float _1980;
    float _1982;
    if (_1940)
    {
        _1978 = _1933;
        _1980 = _1935;
        _1982 = _1937;
    }
    else
    {
        uint _2151 = _1845 + 7u;
        float _2167 = (dot(vec3(cbLight._m0[_1845 + 3u].xyz), vec3(_619, _620, _621)) * 0.5) + 0.5;
        float _2168 = _2167 * _2167;
        float _4099 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
        float _2169 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _2170 = isnan(1.0) ? _1861 : (isnan(_1861) ? 1.0 : min(_1861, 1.0));
        _1978 = (((cbLight._m0[_2151].x * 0.3183098733425140380859375) * _2169) * _2170) + _1933;
        _1980 = (((cbLight._m0[_2151].y * 0.3183098733425140380859375) * _2169) * _2170) + _1935;
        _1982 = (((cbLight._m0[_2151].z * 0.3183098733425140380859375) * _2169) * _2170) + _1937;
    }
    uint _1985 = _1845 + 8u;
    float _1998 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1845].w)) * _622) * 0.949999988079071044921875);
    float _1999 = _1998 * _1998;
    float _2000 = cbLight._m0[_1845].x + _700;
    float _2001 = cbLight._m0[_1845].y + _701;
    float _2002 = cbLight._m0[_1845].z + _702;
    float _2006 = inversesqrt(dot(vec3(_2000, _2001, _2002), vec3(_2000, _2001, _2002)));
    float _2007 = _2006 * _2000;
    float _2008 = _2006 * _2001;
    float _2009 = _2006 * _2002;
    float _2010 = dot(vec3(_619, _620, _621), vec3(cbLight._m0[_1845].xyz));
    float _4115 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
    float _2013 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
    float _4126 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _2014 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
    float _2015 = dot(vec3(_619, _620, _621), vec3(_2007, _2008, _2009));
    float _4137 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
    float _2018 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
    float _2019 = dot(vec3(cbLight._m0[_1845].xyz), vec3(_2007, _2008, _2009));
    float _4148 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
    float _2023 = _1999 * _1999;
    float _2027 = ((_2018 * _2018) * (_2023 + (-1.0))) + 1.0;
    float _2035 = exp2(log2(1.0 - (isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0)))) * 5.0);
    float _2036 = 0.959999978542327880859375 - _768;
    float _2038 = 0.959999978542327880859375 - _769;
    float _2039 = 0.959999978542327880859375 - _770;
    float _2046 = 1.0 - _1999;
    float _2057 = (0.5 / (((_2014 * ((_2013 * _2046) + _1999)) + 9.9999999392252902907785028219223e-09) + (((_2014 * _2046) + _1999) * _2013))) * _2013;
    float _4159 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
    float _2059 = (isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * (_2023 / ((_2027 * _2027) * 3.141590118408203125));
    uint _2073 = _1845 + 9u;
    float _2084 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1885].w)) * _622) * 0.949999988079071044921875);
    float _2085 = _2084 * _2084;
    float _2086 = cbLight._m0[_1885].x + _700;
    float _2087 = cbLight._m0[_1885].y + _701;
    float _2088 = cbLight._m0[_1885].z + _702;
    float _2092 = inversesqrt(dot(vec3(_2086, _2087, _2088), vec3(_2086, _2087, _2088)));
    float _2093 = _2092 * _2086;
    float _2094 = _2092 * _2087;
    float _2095 = _2092 * _2088;
    float _2096 = dot(vec3(_619, _620, _621), vec3(cbLight._m0[_1885].xyz));
    float _4170 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
    float _2099 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
    float _2100 = dot(vec3(_619, _620, _621), vec3(_2093, _2094, _2095));
    float _4181 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
    float _2103 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
    float _2104 = dot(vec3(cbLight._m0[_1885].xyz), vec3(_2093, _2094, _2095));
    float _4192 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
    float _2108 = _2085 * _2085;
    float _2112 = ((_2103 * _2103) * (_2108 + (-1.0))) + 1.0;
    float _2119 = exp2(log2(1.0 - (isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0)))) * 5.0);
    float _2126 = 1.0 - _2085;
    float _2136 = (0.5 / (((_2014 * ((_2099 * _2126) + _2085)) + 9.9999999392252902907785028219223e-09) + (((_2014 * _2126) + _2085) * _2099))) * _2099;
    float _4203 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
    float _2138 = (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * (_2108 / ((_2112 * _2112) * 3.141590118408203125));
    float _2148 = (((((_2119 * _2036) + _771) * cbLight._m0[_2073].x) * _2138) * _1868) + ((((cbLight._m0[_1985].x * _1837) * ((_2035 * _2036) + _771)) * _2059) * _1881);
    float _2149 = (((((_2119 * _2038) + _773) * cbLight._m0[_2073].y) * _2138) * _1868) + ((((cbLight._m0[_1985].y * _1838) * ((_2035 * _2038) + _773)) * _2059) * _1881);
    float _2150 = (((((_2119 * _2039) + _774) * cbLight._m0[_2073].z) * _2138) * _1868) + ((((cbLight._m0[_1985].z * _1839) * ((_2035 * _2039) + _774)) * _2059) * _1881);
    float _2212;
    float _2214;
    float _2216;
    if (_1922)
    {
        _2212 = _2148;
        _2214 = _2149;
        _2216 = _2150;
    }
    else
    {
        uint _2218 = _1845 + 2u;
        uint _2222 = _1845 + 10u;
        float _2236 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2218].w)) * _622) * 0.949999988079071044921875);
        float _2237 = _2236 * _2236;
        float _2238 = cbLight._m0[_2218].x + _700;
        float _2239 = cbLight._m0[_2218].y + _701;
        float _2240 = cbLight._m0[_2218].z + _702;
        float _2244 = inversesqrt(dot(vec3(_2238, _2239, _2240), vec3(_2238, _2239, _2240)));
        float _2245 = _2244 * _2238;
        float _2246 = _2244 * _2239;
        float _2247 = _2244 * _2240;
        float _2248 = dot(vec3(_619, _620, _621), vec3(cbLight._m0[_2218].xyz));
        float _4214 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
        float _2251 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _2252 = dot(vec3(_619, _620, _621), vec3(_2245, _2246, _2247));
        float _4225 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
        float _2255 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _2256 = dot(vec3(cbLight._m0[_2218].xyz), vec3(_2245, _2246, _2247));
        float _4236 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
        float _2260 = _2237 * _2237;
        float _2264 = ((_2255 * _2255) * (_2260 + (-1.0))) + 1.0;
        float _2271 = exp2(log2(1.0 - (isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0)))) * 5.0);
        float _2278 = 1.0 - _2237;
        float _2288 = (0.5 / (((_2014 * ((_2251 * _2278) + _2237)) + 9.9999999392252902907785028219223e-09) + (((_2014 * _2278) + _2237) * _2251))) * _2251;
        float _4247 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
        float _2290 = (isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * (_2260 / ((_2264 * _2264) * 3.141590118408203125));
        float _2291 = isnan(1.0) ? _1860 : (isnan(_1860) ? 1.0 : min(_1860, 1.0));
        _2212 = (((((_2271 * _2036) + _771) * cbLight._m0[_2222].x) * _2290) * _2291) + _2148;
        _2214 = (((((_2271 * _2038) + _773) * cbLight._m0[_2222].y) * _2290) * _2291) + _2149;
        _2216 = (((((_2271 * _2039) + _774) * cbLight._m0[_2222].z) * _2290) * _2291) + _2150;
    }
    float _2326;
    float _2328;
    float _2330;
    if (_1940)
    {
        _2326 = _2212;
        _2328 = _2214;
        _2330 = _2216;
    }
    else
    {
        uint _2337 = _1845 + 3u;
        uint _2341 = _1845 + 11u;
        float _2355 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2337].w)) * _622) * 0.949999988079071044921875);
        float _2356 = _2355 * _2355;
        float _2357 = cbLight._m0[_2337].x + _700;
        float _2358 = cbLight._m0[_2337].y + _701;
        float _2359 = cbLight._m0[_2337].z + _702;
        float _2363 = inversesqrt(dot(vec3(_2357, _2358, _2359), vec3(_2357, _2358, _2359)));
        float _2364 = _2363 * _2357;
        float _2365 = _2363 * _2358;
        float _2366 = _2363 * _2359;
        float _2367 = dot(vec3(_619, _620, _621), vec3(cbLight._m0[_2337].xyz));
        float _4263 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
        float _2370 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _2371 = dot(vec3(_619, _620, _621), vec3(_2364, _2365, _2366));
        float _4274 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
        float _2374 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
        float _2375 = dot(vec3(cbLight._m0[_2337].xyz), vec3(_2364, _2365, _2366));
        float _4285 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
        float _2379 = _2356 * _2356;
        float _2383 = ((_2374 * _2374) * (_2379 + (-1.0))) + 1.0;
        float _2390 = exp2(log2(1.0 - (isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0)))) * 5.0);
        float _2397 = 1.0 - _2356;
        float _2407 = (0.5 / (((_2014 * ((_2370 * _2397) + _2356)) + 9.9999999392252902907785028219223e-09) + (((_2014 * _2397) + _2356) * _2370))) * _2370;
        float _4296 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
        float _2409 = (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0))) * (_2379 / ((_2383 * _2383) * 3.141590118408203125));
        float _2410 = isnan(1.0) ? _1861 : (isnan(_1861) ? 1.0 : min(_1861, 1.0));
        _2326 = (((((_2390 * _2036) + _771) * cbLight._m0[_2341].x) * _2409) * _2410) + _2212;
        _2328 = (((((_2390 * _2038) + _773) * cbLight._m0[_2341].y) * _2409) * _2410) + _2214;
        _2330 = (((((_2390 * _2039) + _774) * cbLight._m0[_2341].z) * _2409) * _2410) + _2216;
    }
    float _2545;
    float _2547;
    float _2549;
    float _2551;
    float _2553;
    float _2555;
    if (_1843.y == 0u)
    {
        float _2485 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2486 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2485;
        float _2487 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2485;
        float _2488 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2485;
        uvec4 _2500 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2501 = _2500.x;
        uint _2512 = uint((float(_2500.y) * floor(float(uint(cbSceneParam._m0[85u].y * _709) / _2501))) + floor(float(uint(cbSceneParam._m0[85u].x * _708) / _2501)));
        float _2522 = (log2(_2488 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2523 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
        uint _2526 = uint(isnan(14.0) ? _2523 : (isnan(_2523) ? 14.0 : min(_2523, 14.0)));
        uvec4 _2531 = texelFetch(g_lightClusterGridBuffer, int(((_2526 << 2u) + (_2512 << 6u)) >> 2u));
        uint _2532 = _2531.x;
        uint _2533 = _2500.z;
        float _2662;
        float _2664;
        float _2666;
        float _2668;
        float _2670;
        float _2672;
        if (((((1u << ((_2533 >> 4u) & 15u)) + 4294967295u) & _2532) == 0u) || ((_2533 & 240u) == 0u))
        {
            _2662 = 0.0;
            _2664 = 0.0;
            _2666 = 0.0;
            _2668 = 0.0;
            _2670 = 0.0;
            _2672 = 0.0;
        }
        else
        {
            float _2663;
            float _2665;
            float _2667;
            float _2669;
            float _2671;
            float _2673;
            float _2815 = 0.0;
            float _2816 = 0.0;
            float _2817 = 0.0;
            float _2818 = 0.0;
            float _2819 = 0.0;
            float _2820 = 0.0;
            uint _2821 = 0u;
            uint _2830;
            bool _2831;
            for (;;)
            {
                _2830 = texelFetch(g_lightClassification, int((((_2526 << 5u) + (_2512 << 9u)) + (_2821 << 2u)) >> 2u)).x;
                _2831 = _2830 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2831)
                {
                    frontier_phi_61_pred = _2815;
                    frontier_phi_61_pred_1 = _2820;
                    frontier_phi_61_pred_2 = _2819;
                    frontier_phi_61_pred_3 = _2818;
                    frontier_phi_61_pred_4 = _2817;
                    frontier_phi_61_pred_5 = _2816;
                }
                else
                {
                    float _2939;
                    float _2940;
                    float _2941;
                    float _2942;
                    float _2943;
                    float _2944;
                    uint _2945;
                    _2939 = _2815;
                    _2940 = _2816;
                    _2941 = _2817;
                    _2942 = _2818;
                    _2943 = _2819;
                    _2944 = _2820;
                    _2945 = _2830;
                    float _2871;
                    float _2872;
                    float _2873;
                    float _2874;
                    float _2875;
                    float _2876;
                    for (;;)
                    {
                        uint _2949 = uint(findLSB(_2945)) + (_2821 << 5u);
                        uint _2946 = (_2945 + 4294967295u) & _2945;
                        uint _2951 = _2949 * 48u;
                        vec4 _2965 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2951)).x, texelFetch(g_PointLightRenderingBuffer, int(_2951 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2951 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2951 + 3u)).x));
                        uint _2971 = (_2949 * 48u) + 4u;
                        vec4 _2984 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2971)).x, texelFetch(g_PointLightRenderingBuffer, int(_2971 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2971 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2971 + 3u)).x));
                        uint _2990 = (_2949 * 48u) + 8u;
                        vec3 _3001 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2990)).x, texelFetch(g_PointLightRenderingBuffer, int(_2990 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2990 + 2u)).x));
                        float _3005 = _2965.x - _2486;
                        float _3006 = _2965.y - _2487;
                        float _3007 = _2965.z - _2488;
                        float _3008 = dot(vec3(_3005, _3006, _3007), vec3(_3005, _3006, _3007));
                        float _3011 = inversesqrt(_3008);
                        float _3012 = _3011 * _3005;
                        float _3013 = _3011 * _3006;
                        float _3014 = _3011 * _3007;
                        float _3015 = dot(vec3(_727, _730, _733), vec3(_3012, _3013, _3014));
                        float _3020 = 1.0 - (_3008 * _2965.w);
                        float _4322 = isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0));
                        float _3021 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
                        float _3022 = sqrt(_3008) * _2984.w;
                        float _3025 = 1.39999997615814208984375 / (_3022 + 1.39999997615814208984375);
                        float _3026 = _3025 * _3025;
                        float _3029 = ((1.0 - _3026) * _3015) + _3026;
                        float _3032 = _3022 * _3022;
                        float _3036 = ((isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0))) * _3021) / ((_3032 * 0.699999988079071044921875) + 1.0);
                        float _3040 = (-0.0) - _2486;
                        float _3041 = (-0.0) - _2487;
                        float _3042 = (-0.0) - _2488;
                        float _3046 = inversesqrt(dot(vec3(_3040, _3041, _3042), vec3(_3040, _3041, _3042)));
                        float _3047 = _3046 * _3040;
                        float _3048 = _3046 * _3041;
                        float _3049 = _3046 * _3042;
                        float _3057 = exp2(log2(1.0 / ((_3032 * 3.5) + 5.0)) * 0.25);
                        float _3058 = 1.0 - _802;
                        float _3065 = sqrt(1.0 - ((1.0 - (_3058 * _3058)) * (1.0 - (_3057 * _3057))));
                        float _3066 = _3065 * _3065;
                        float _3067 = _3066 * _3066;
                        float _3068 = _3047 + _3012;
                        float _3069 = _3048 + _3013;
                        float _3070 = _3049 + _3014;
                        float _3074 = inversesqrt(dot(vec3(_3068, _3069, _3070), vec3(_3068, _3069, _3070)));
                        float _3078 = dot(vec3(_727, _730, _733), vec3(_3047, _3048, _3049));
                        float _4338 = isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0));
                        float _3081 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
                        float _3082 = dot(vec3(_727, _730, _733), vec3(_3074 * _3068, _3074 * _3069, _3074 * _3070));
                        float _4349 = isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0));
                        float _3085 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
                        float _3089 = ((_3085 * _3085) * (_3067 + (-1.0))) + 1.0;
                        float _3090 = _3025 * _3066;
                        float _3091 = _3090 * _3090;
                        float _3094 = ((1.0 - _3091) * _3015) + _3091;
                        float _4360 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0));
                        float _3095 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
                        float _3096 = 1.0 - _3066;
                        float _3106 = (0.5 / (((_3095 * ((_3081 * _3096) + _3066)) + 9.9999999392252902907785028219223e-09) + (((_3095 * _3096) + _3066) * _3081))) * _3095;
                        float _4371 = isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0));
                        float _3117 = (((_3067 * 3.1415927410125732421875) * (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0)))) / ((_3089 * _3089) * ((_3032 * 2.1991131305694580078125) + 3.141590118408203125))) * _3021;
                        _2874 = (_3036 * _2984.x) + _2942;
                        _2875 = (_3036 * _2984.y) + _2943;
                        _2876 = (_3036 * _2984.z) + _2944;
                        _2871 = (_3117 * _3001.x) + _2939;
                        _2872 = (_3117 * _3001.y) + _2940;
                        _2873 = (_3117 * _3001.z) + _2941;
                        if (_2946 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2939 = _2871;
                            _2940 = _2872;
                            _2941 = _2873;
                            _2942 = _2874;
                            _2943 = _2875;
                            _2944 = _2876;
                            _2945 = _2946;
                        }
                    }
                    frontier_phi_61_pred = _2871;
                    frontier_phi_61_pred_1 = _2876;
                    frontier_phi_61_pred_2 = _2875;
                    frontier_phi_61_pred_3 = _2874;
                    frontier_phi_61_pred_4 = _2873;
                    frontier_phi_61_pred_5 = _2872;
                }
                _2663 = frontier_phi_61_pred;
                _2673 = frontier_phi_61_pred_1;
                _2671 = frontier_phi_61_pred_2;
                _2669 = frontier_phi_61_pred_3;
                _2667 = frontier_phi_61_pred_4;
                _2665 = frontier_phi_61_pred_5;
                uint _2822 = _2821 + 1u;
                if (_2822 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2815 = _2663;
                    _2816 = _2665;
                    _2817 = _2667;
                    _2818 = _2669;
                    _2819 = _2671;
                    _2820 = _2673;
                    _2821 = _2822;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2662 = _2663;
            _2664 = _2665;
            _2666 = _2667;
            _2668 = _2669;
            _2670 = _2671;
            _2672 = _2673;
        }
        uvec4 _2676 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2677 = _2676.z;
        uint _2679 = (_2677 >> 8u) & 15u;
        float _2783;
        float _2785;
        float _2787;
        float _2789;
        float _2791;
        float _2793;
        if (((4294967295u << _2679) & _2532) == 0u)
        {
            _2783 = _2662;
            _2785 = _2664;
            _2787 = _2666;
            _2789 = _2668;
            _2791 = _2670;
            _2793 = _2672;
        }
        else
        {
            float _2808 = inversesqrt(dot(vec3(_2486, _2487, _2488), vec3(_2486, _2487, _2488)));
            float _2809 = _2808 * _2486;
            float _2810 = _2808 * _2487;
            float _2811 = _2808 * _2488;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2679 < ((_2677 >> 12u) & 15u))
            {
                float _2784;
                float _2786;
                float _2788;
                float _2790;
                float _2792;
                float _2794;
                float _2922 = _2662;
                float _2923 = _2664;
                float _2924 = _2666;
                float _2925 = _2668;
                float _2926 = _2670;
                float _2927 = _2672;
                uint _2928 = _2679;
                uint _2937;
                bool _2938;
                for (;;)
                {
                    _2937 = texelFetch(g_lightClassification, int((((_2526 << 5u) + (_2512 << 9u)) + (_2928 << 2u)) >> 2u)).x;
                    _2938 = _2937 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2938)
                    {
                        frontier_phi_67_pred = _2925;
                        frontier_phi_67_pred_1 = _2926;
                        frontier_phi_67_pred_2 = _2927;
                        frontier_phi_67_pred_3 = _2924;
                        frontier_phi_67_pred_4 = _2923;
                        frontier_phi_67_pred_5 = _2922;
                    }
                    else
                    {
                        float _3122;
                        float _3123;
                        float _3124;
                        float _3125;
                        float _3126;
                        float _3127;
                        float _3416;
                        float _3417;
                        float _3418;
                        float _3419;
                        float _3420;
                        float _3421;
                        float _3135 = _2922;
                        float _3136 = _2923;
                        float _3137 = _2924;
                        float _3138 = _2925;
                        float _3139 = _2926;
                        float _3140 = _2927;
                        uint _3141 = _2937;
                        uint _3142;
                        vec4 _3167;
                        float _3168;
                        vec4 _3183;
                        vec3 _3195;
                        vec4 _3210;
                        vec4 _3225;
                        float _3272;
                        bool _3273;
                        for (;;)
                        {
                            uint _3152 = ((_2928 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3141));
                            _3142 = (_3141 + 4294967295u) & _3141;
                            uint _3154 = _3152 * 40u;
                            _3167 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3154)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 3u)).x));
                            _3168 = _3167.w;
                            uint _3170 = (_3152 * 40u) + 4u;
                            _3183 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3170)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 3u)).x));
                            uint _3185 = (_3152 * 40u) + 8u;
                            _3195 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3185)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 2u)).x));
                            uint _3197 = (_3152 * 40u) + 16u;
                            _3210 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3197)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 3u)).x));
                            uint _3212 = (_3152 * 40u) + 20u;
                            _3225 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3212)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 3u)).x));
                            uint _3228 = (_3152 * 40u) + 24u;
                            vec4 _3241 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3228)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 3u)).x));
                            uint _3247 = (_3152 * 40u) + 28u;
                            vec4 _3260 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3247)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 3u)).x));
                            _3272 = fma(_2488, _3260.z, fma(_2487, _3260.y, _3260.x * _2486)) + _3260.w;
                            _3273 = !((fma(_2488, _3241.z, fma(_2487, _3241.y, _3241.x * _2486)) + _3241.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3273)
                            {
                                float _3300 = _3167.x - _2486;
                                float _3301 = _3167.y - _2487;
                                float _3302 = _3167.z - _2488;
                                float _3303 = dot(vec3(_3300, _3301, _3302), vec3(_3300, _3301, _3302));
                                float _3306 = inversesqrt(_3303);
                                float _3307 = _3306 * _3300;
                                float _3308 = _3306 * _3301;
                                float _3309 = _3306 * _3302;
                                float _3313 = 1.0 - (_3303 / (_3168 * _3168));
                                float _4382 = isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0));
                                float _3314 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
                                float _3318 = sqrt(_3303) * _3183.w;
                                float _3320 = 1.39999997615814208984375 / (_3318 + 1.39999997615814208984375);
                                float _3321 = _3320 * _3320;
                                float _3324 = ((1.0 - _3321) * dot(vec3(_3307, _3308, _3309), vec3(_727, _730, _733))) + _3321;
                                float _3327 = _3318 * _3318;
                                float _3331 = (fma(_2488, _3210.z, fma(_2487, _3210.y, _3210.x * _2486)) + _3210.w) / _3272;
                                float _3332 = (fma(_2488, _3225.z, fma(_2487, _3225.y, _3225.x * _2486)) + _3225.w) / _3272;
                                float _3336 = 1.0 - dot(vec2(_3331, _3332), vec2(_3331, _3332));
                                float _4398 = isnan(0.0) ? _3336 : (isnan(_3336) ? 0.0 : max(_3336, 0.0));
                                float _3337 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
                                float _3338 = _3337 * (((isnan(0.0) ? _3324 : (isnan(_3324) ? 0.0 : max(_3324, 0.0))) * _3314) / ((_3327 * 0.699999988079071044921875) + 1.0));
                                float _3350 = exp2(log2(1.0 / ((_3327 * 3.5) + 5.0)) * 0.25);
                                float _3351 = 1.0 - _802;
                                float _3358 = sqrt(1.0 - ((1.0 - (_3351 * _3351)) * (1.0 - (_3350 * _3350))));
                                float _3359 = _3358 * _3358;
                                float _3360 = _3359 * _3359;
                                float _3361 = _3307 - _2809;
                                float _3362 = _3308 - _2810;
                                float _3363 = _3309 - _2811;
                                float _3367 = inversesqrt(dot(vec3(_3361, _3362, _3363), vec3(_3361, _3362, _3363)));
                                float _3371 = dot(vec3(_727, _730, _733), vec3((-0.0) - _2809, (-0.0) - _2810, (-0.0) - _2811));
                                float _4409 = isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0));
                                float _3374 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
                                float _3375 = dot(vec3(_727, _730, _733), vec3(_3367 * _3361, _3367 * _3362, _3367 * _3363));
                                float _4420 = isnan(0.0) ? _3375 : (isnan(_3375) ? 0.0 : max(_3375, 0.0));
                                float _3378 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
                                float _3382 = ((_3378 * _3378) * (_3360 + (-1.0))) + 1.0;
                                float _3383 = _3320 * _3359;
                                float _3384 = _3383 * _3383;
                                float _3390 = ((1.0 - _3384) * dot(vec3(_727, _730, _733), vec3(_3307, _3308, _3309))) + _3384;
                                float _4431 = isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0));
                                float _3391 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
                                float _3392 = 1.0 - _3359;
                                float _3402 = (0.5 / (((_3391 * ((_3374 * _3392) + _3359)) + 9.9999999392252902907785028219223e-09) + (((_3391 * _3392) + _3359) * _3374))) * _3391;
                                float _4442 = isnan(0.0) ? _3402 : (isnan(_3402) ? 0.0 : max(_3402, 0.0));
                                float _3412 = (_3337 * _3314) * (((_3360 * 3.1415927410125732421875) * (isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0)))) / ((_3382 * _3382) * ((_3327 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3412 * _3195.x;
                                frontier_phi_73_pred_1 = _3412 * _3195.y;
                                frontier_phi_73_pred_2 = _3338 * _3183.z;
                                frontier_phi_73_pred_3 = _3338 * _3183.y;
                                frontier_phi_73_pred_4 = _3338 * _3183.x;
                                frontier_phi_73_pred_5 = _3412 * _3195.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3416 = frontier_phi_73_pred;
                            _3417 = frontier_phi_73_pred_1;
                            _3421 = frontier_phi_73_pred_2;
                            _3420 = frontier_phi_73_pred_3;
                            _3419 = frontier_phi_73_pred_4;
                            _3418 = frontier_phi_73_pred_5;
                            _3125 = _3419 + _3138;
                            _3126 = _3420 + _3139;
                            _3127 = _3421 + _3140;
                            _3122 = _3416 + _3135;
                            _3123 = _3417 + _3136;
                            _3124 = _3418 + _3137;
                            if (_3142 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3135 = _3122;
                                _3136 = _3123;
                                _3137 = _3124;
                                _3138 = _3125;
                                _3139 = _3126;
                                _3140 = _3127;
                                _3141 = _3142;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3125;
                        frontier_phi_67_pred_1 = _3126;
                        frontier_phi_67_pred_2 = _3127;
                        frontier_phi_67_pred_3 = _3124;
                        frontier_phi_67_pred_4 = _3123;
                        frontier_phi_67_pred_5 = _3122;
                    }
                    _2790 = frontier_phi_67_pred;
                    _2792 = frontier_phi_67_pred_1;
                    _2794 = frontier_phi_67_pred_2;
                    _2788 = frontier_phi_67_pred_3;
                    _2786 = frontier_phi_67_pred_4;
                    _2784 = frontier_phi_67_pred_5;
                    uint _2929 = _2928 + 1u;
                    if (_2929 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2922 = _2784;
                        _2923 = _2786;
                        _2924 = _2788;
                        _2925 = _2790;
                        _2926 = _2792;
                        _2927 = _2794;
                        _2928 = _2929;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2792;
                frontier_phi_55_56_ladder_1 = _2794;
                frontier_phi_55_56_ladder_2 = _2790;
                frontier_phi_55_56_ladder_3 = _2788;
                frontier_phi_55_56_ladder_4 = _2786;
                frontier_phi_55_56_ladder_5 = _2784;
            }
            else
            {
                frontier_phi_55_56_ladder = _2670;
                frontier_phi_55_56_ladder_1 = _2672;
                frontier_phi_55_56_ladder_2 = _2668;
                frontier_phi_55_56_ladder_3 = _2666;
                frontier_phi_55_56_ladder_4 = _2664;
                frontier_phi_55_56_ladder_5 = _2662;
            }
            _2783 = frontier_phi_55_56_ladder_5;
            _2785 = frontier_phi_55_56_ladder_4;
            _2787 = frontier_phi_55_56_ladder_3;
            _2789 = frontier_phi_55_56_ladder_2;
            _2791 = frontier_phi_55_56_ladder;
            _2793 = frontier_phi_55_56_ladder_1;
        }
        float _2798 = isnan(1.0) ? _786 : (isnan(_786) ? 1.0 : min(_786, 1.0));
        _2545 = (_2798 * _2789) + _1978;
        _2547 = (_2798 * _2791) + _1980;
        _2549 = (_2798 * _2793) + _1982;
        _2551 = ((_2783 * _771) * _2798) + _2326;
        _2553 = ((_2785 * _773) * _2798) + _2328;
        _2555 = ((_2787 * _774) * _2798) + _2330;
    }
    else
    {
        _2545 = _1978;
        _2547 = _1980;
        _2549 = _1982;
        _2551 = _2326;
        _2553 = _2328;
        _2555 = _2330;
    }
    uint _2561 = _747 + uint(cbMatDynParam._m0[0u].w);
    float _2567 = ((((((_566.x - _563) * _499) + _563) * cbMtdParam._m0[13u].x) + ((((_520.x - _517) * _499) + _517) * cbMtdParam._m0[11u].x)) * _593) * cbInstanceData._m0[_2561].x;
    float _2568 = ((((((_566.y - _564) * _499) + _564) * cbMtdParam._m0[13u].y) + ((((_520.y - _518) * _499) + _518) * cbMtdParam._m0[11u].y)) * _593) * cbInstanceData._m0[_2561].y;
    float _2569 = ((((((_566.z - _565) * _499) + _565) * cbMtdParam._m0[13u].z) + ((((_520.z - _519) * _499) + _519) * cbMtdParam._m0[11u].z)) * _593) * cbInstanceData._m0[_2561].z;
    float _4458 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _4469 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _4480 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _2586 = (((isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0))) * (_2545 + ((isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0))) * _786))) + ((_2551 + ((isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0))) * _1595)) * cbPerFrame._m0[3u].x)) + _2567;
    float _2588 = (_2568 + ((_2553 + ((isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0))) * _1595)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0))) * (_2547 + ((isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0))) * _786)));
    float _2590 = (_2569 + ((_2555 + ((isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0))) * _1595)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0))) * (_2549 + ((isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0))) * _786)));
    float _4506 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2603 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
    uint _2604 = _746 + 6u;
    float _2612 = _708 / cbSceneParam._m0[86u].x;
    float _2613 = _709 / cbSceneParam._m0[86u].y;
    vec4 _2627 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2612, _2613, (log2((isnan(cbSceneParam._m0[77u].w) ? _642 : (isnan(_642) ? cbSceneParam._m0[77u].w : min(_642, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2629 = _2627.x;
    float _2630 = _2627.y;
    float _2631 = _2627.z;
    float _2632 = _2627.w;
    float _2724;
    float _2726;
    float _2728;
    float _2730;
    if (_642 > cbSceneParam._m0[78u].w)
    {
        float _2687 = isnan(_642) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _642 : min(cbSceneParam._m0[80u].w, _642));
        float _2688 = _2687 / _642;
        float _2699 = _2688 * _693;
        float _2700 = _694 * _2688;
        float _2701 = (-0.0) - _2700;
        float _2702 = _2688 * _695;
        float _2704 = (cbSceneParam._m0[77u].w * _2701) / _2687;
        float _2705 = _2704 + cbSceneParam._m0[79u].w;
        float _2706 = cbSceneParam._m0[79u].w - _2700;
        float _2712 = sqrt(((_2699 * _2699) + (_2700 * _2700)) + (_2702 * _2702));
        float _2715 = (1.0 - (cbSceneParam._m0[77u].w / _2687)) * _2712;
        float _2720 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2722 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2884;
        if (abs((_2701 - _2704) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2884 = ((((_2705 > 0.0) ? exp2(_2720 * _2705) : (2.0 - exp2(_2722 * _2705))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2715;
        }
        else
        {
            float _2844 = 1.0 / cbSceneParam._m0[80u].x;
            float _2845 = isnan(_2706) ? _2705 : (isnan(_2705) ? _2706 : max(_2705, _2706));
            float _2846 = isnan(_2706) ? _2705 : (isnan(_2705) ? _2706 : min(_2705, _2706));
            float _2855 = isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : min(_2845, 0.0));
            float _2856 = isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : min(_2846, 0.0));
            _2884 = ((abs(_2712 / _2701) * cbSceneParam._m0[80u].y) * ((((_2855 - _2856) * 2.0) - ((exp2(_2720 * (isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0)))) - exp2(_2720 * (isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0))))) * _2844)) - ((exp2(_2722 * _2855) - exp2(_2722 * _2856)) * _2844))) + (_2715 * cbSceneParam._m0[80u].z);
        }
        vec4 _2886 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2612, _2613, 1.0), 0.0);
        float _2895 = exp2((_2884 * (-1.44269502162933349609375)) * (1.0 - _2886.w));
        float _2896 = log2(_2895);
        float _2912 = log2(_2632);
        _2724 = (exp2(_2912 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2896 * cbSceneParam._m0[78u].x)) * _2886.x) / cbSceneParam._m0[78u].x)) + _2629;
        _2726 = (exp2(_2912 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2896 * cbSceneParam._m0[78u].y)) * _2886.y) / cbSceneParam._m0[78u].y)) + _2630;
        _2728 = (exp2(_2912 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2896 * cbSceneParam._m0[78u].z)) * _2886.z) / cbSceneParam._m0[78u].z)) + _2631;
        _2730 = _2895 * _2632;
    }
    else
    {
        _2724 = _2629;
        _2726 = _2630;
        _2728 = _2631;
        _2730 = _2632;
    }
    float _2742 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2743 = _2742 == 3.0;
    float _2744 = log2(_2730);
    float _2748 = exp2(_2744 * cbSceneParam._m0[78u].x);
    float _2749 = exp2(_2744 * cbSceneParam._m0[78u].y);
    float _2750 = exp2(_2744 * cbSceneParam._m0[78u].z);
    float _2751 = _2748 * (isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0)));
    float _2752 = _2749 * (isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0)));
    float _2753 = _2750 * (isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0)));
    float _2762 = (_2742 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2762 * (_2743 ? _2751 : (_2751 + (cbSceneParam._m0[72u].w * _2724)));
    SV_Target.y = _2762 * (_2743 ? _2752 : (_2752 + (cbSceneParam._m0[72u].w * _2726)));
    SV_Target.z = _2762 * (_2743 ? _2753 : (_2753 + (cbSceneParam._m0[72u].w * _2728)));
    SV_Target.w = cbInstanceData._m0[_2604].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2567) * _2603) * _2748) * _2762;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2568) * _2603) * _2749) * _2762;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2569) * _2603) * _2750) * _2762;
    SV_Target_1.w = cbInstanceData._m0[_2604].w;
}


