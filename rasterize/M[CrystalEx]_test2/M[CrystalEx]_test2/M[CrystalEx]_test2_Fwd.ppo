#version 460

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 45) uniform texture2D M_CrystalEx_test2_snp_0_Screen_0;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _762;
uint _2214;
uint _2215;
uint _2216;
uint _2478;
uint _2479;
uint _2480;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _154 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _155 = _154 * NORMAL.x;
    float _156 = _154 * NORMAL.y;
    float _157 = _154 * NORMAL.z;
    float _162;
    float _163;
    float _164;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _162 = (-0.0) - _155;
        _163 = (-0.0) - _156;
        _164 = (-0.0) - _157;
    }
    else
    {
        _162 = _155;
        _163 = _156;
        _164 = _157;
    }
    float _209 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _219 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _209);
    float _220 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _209);
    float _221 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _209);
    float _235 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _236 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _242 = _235 / cbSceneParam._m0[86u].x;
    float _243 = _236 / cbSceneParam._m0[86u].y;
    float _250 = isnan(cbInstanceData._m0[8u].x) ? _242 : (isnan(_242) ? cbInstanceData._m0[8u].x : max(_242, cbInstanceData._m0[8u].x));
    float _251 = isnan(cbInstanceData._m0[8u].y) ? _243 : (isnan(_243) ? cbInstanceData._m0[8u].y : max(_243, cbInstanceData._m0[8u].y));
    vec4 _256 = texture(sampler2D(M_CrystalEx_test2_snp_0_Screen_0, SS_ClampLinear), vec2(isnan(cbInstanceData._m0[8u].z) ? _250 : (isnan(_250) ? cbInstanceData._m0[8u].z : min(_250, cbInstanceData._m0[8u].z)), isnan(cbInstanceData._m0[8u].w) ? _251 : (isnan(_251) ? cbInstanceData._m0[8u].w : min(_251, cbInstanceData._m0[8u].w))));
    float _279 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _287 = abs(dot(vec4(_162, _163, _164, 0.0), vec4(_279 * _219, _279 * _220, _279 * _221, 0.0))) * cbMtdParam._m0[10u].x;
    vec4 _289 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_235, _236));
    float _291 = _289.x;
    bool _298 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _313 = (_298 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _291)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _291))) - POSITION_1.w;
    float _314 = isnan(_313) ? _287 : (isnan(_287) ? _313 : min(_287, _313));
    float _315 = log2(cbMtdParam._m0[10u].y);
    float _334 = inversesqrt(dot(vec3(_162, _163, _164), vec3(_162, _163, _164)));
    float _335 = _334 * _162;
    float _336 = _334 * _163;
    float _337 = _334 * _164;
    float _2751 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _339 = isnan(1.0) ? _2751 : (isnan(_2751) ? 1.0 : min(_2751, 1.0));
    float _2762 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _340 = isnan(1.0) ? _2762 : (isnan(_2762) ? 1.0 : min(_2762, 1.0));
    float _2773 = isnan(0.0) ? cbMtdParam._m0[9u].z : (isnan(cbMtdParam._m0[9u].z) ? 0.0 : max(cbMtdParam._m0[9u].z, 0.0));
    float _341 = isnan(1.0) ? _2773 : (isnan(_2773) ? 1.0 : min(_2773, 1.0));
    float _2784 = isnan(0.0) ? cbMtdParam._m0[10u].z : (isnan(cbMtdParam._m0[10u].z) ? 0.0 : max(cbMtdParam._m0[10u].z, 0.0));
    float _342 = isnan(1.0) ? _2784 : (isnan(_2784) ? 1.0 : min(_2784, 1.0));
    float _347 = _298 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _387 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _396 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _387);
    float _397 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _387);
    float _398 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _387);
    float _402 = inversesqrt(dot(vec3(_396, _397, _398), vec3(_396, _397, _398)));
    float _403 = _396 * _402;
    float _404 = _397 * _402;
    float _405 = _398 * _402;
    float _410 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _411 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _432 = fma(_337, cbSceneParam._m0[5u].z, fma(_336, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _335));
    float _435 = fma(_337, cbSceneParam._m0[6u].z, fma(_336, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _335));
    float _438 = fma(_337, cbSceneParam._m0[7u].z, fma(_336, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _335));
    float _439 = _339 * 3.3333332538604736328125;
    float _441 = _340 * 3.3333332538604736328125;
    float _442 = _341 * 3.3333332538604736328125;
    float _450 = ((isnan(1.0) ? _439 : (isnan(_439) ? 1.0 : min(_439, 1.0))) * 0.0314955823123455047607421875) + 0.0039369477890431880950927734375;
    float _452 = ((isnan(1.0) ? _441 : (isnan(_441) ? 1.0 : min(_441, 1.0))) * 0.0314955823123455047607421875) + 0.0039369477890431880950927734375;
    float _453 = ((isnan(1.0) ? _442 : (isnan(_442) ? 1.0 : min(_442, 1.0))) * 0.0314955823123455047607421875) + 0.0039369477890431880950927734375;
    float _459 = (_339 + (-0.0599999986588954925537109375)) + (isnan(_450) ? 0.0 : (isnan(0.0) ? _450 : max(0.0, _450)));
    float _461 = (_340 + (-0.0599999986588954925537109375)) + (isnan(_452) ? 0.0 : (isnan(0.0) ? _452 : max(0.0, _452)));
    float _463 = (_341 + (-0.0599999986588954925537109375)) + (isnan(_453) ? 0.0 : (isnan(0.0) ? _453 : max(0.0, _453)));
    float _475 = (_459 * _459) - ((0.02999999932944774627685546875 - _339) * 0.119999997317790985107421875);
    float _476 = (_461 * _461) - ((0.02999999932944774627685546875 - _340) * 0.119999997317790985107421875);
    float _477 = (_463 * _463) - ((0.02999999932944774627685546875 - _341) * 0.119999997317790985107421875);
    float _487 = (sqrt(isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0))) - _459) * 16.666667938232421875;
    float _489 = (sqrt(isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0))) - _461) * 16.666667938232421875;
    float _490 = (sqrt(isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0))) - _463) * 16.666667938232421875;
    float _491 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _492 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _493 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _504 = (((isnan(1.0) ? _492 : (isnan(_492) ? 1.0 : min(_492, 1.0))) * 0.58700001239776611328125) + ((isnan(1.0) ? _491 : (isnan(_491) ? 1.0 : min(_491, 1.0))) * 0.29890000820159912109375)) + ((isnan(1.0) ? _493 : (isnan(_493) ? 1.0 : min(_493, 1.0))) * 0.114000000059604644775390625);
    float _505 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    vec4 _514 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _410, cbSceneParam._m0[86u].y * _411));
    float _517 = _514.x * TEXCOORD.z;
    float _518 = dot(vec3(_335, _336, _337), vec3(_403, _404, _405));
    float _521 = _518 * 2.0;
    float _526 = (_521 * _335) - _403;
    float _527 = (_521 * _336) - _404;
    float _528 = (_521 * _337) - _405;
    float _532 = abs(dot(vec3(_403, _404, _405), vec3(_335, _336, _337)));
    float _2880 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _533 = isnan(1.0) ? _2880 : (isnan(_2880) ? 1.0 : min(_2880, 1.0));
    float _539 = sqrt(_342);
    float _551 = exp2((_539 * 5.0) * log2(1.0 - (_533 * 0.999000012874603271484375))) / (4.0 - (_539 * 3.0));
    float _557 = (1.0 - _551) * ((_539 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _558 = _551 * _539;
    float _586 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _590 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _594 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _761;
    float _763;
    float _764;
    float _765;
    float _766;
    float _767;
    float _768;
    float _769;
    float _770;
    float _771;
    float _772;
    float _773;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _621 = fma(_594, cbModelParam._m0[26u].z, fma(_590, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _586));
        float _625 = fma(_594, cbModelParam._m0[27u].z, fma(_590, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _586));
        float _629 = fma(_594, cbModelParam._m0[28u].z, fma(_590, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _586));
        float _654 = _586 + _335;
        float _655 = _590 + _336;
        float _656 = _594 + _337;
        float _666 = fma(_656, cbModelParam._m0[26u].z, fma(_655, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _654)) - _621;
        float _667 = fma(_656, cbModelParam._m0[27u].z, fma(_655, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _654)) - _625;
        float _668 = fma(_656, cbModelParam._m0[28u].z, fma(_655, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _654)) - _629;
        float _672 = inversesqrt(dot(vec3(_666, _667, _668), vec3(_666, _667, _668)));
        float _685 = ((_672 * _666) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_621 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _686 = ((_672 * _667) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_625 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _687 = ((_672 * _668) / cbModelParam._m0[34u].z) + ((((((_629 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _690 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_685, _686, _687), 0.0);
        vec4 _697 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_685, _686, _687), 0.0);
        vec4 _704 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_685, _686, _687), 0.0);
        vec4 _711 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_685, _686, _687), 0.0);
        float _724 = exp2((_690.w + (-0.5)) * 20.0) * 2.0;
        float _734 = exp2((_697.w + (-0.5)) * 20.0) * 2.0;
        float _744 = exp2((_704.w + (-0.5)) * 20.0) * 2.0;
        float _754 = exp2((_711.w + (-0.5)) * 20.0) * 2.0;
        float _755 = _754 * (_711.x + (-0.5));
        float _756 = _754 * (_711.y + (-0.5));
        float _757 = _754 * (_711.z + (-0.5));
        _761 = _724 * (_690.z + (-0.5));
        _763 = _724 * (_690.y + (-0.5));
        _764 = _724 * (_690.x + (-0.5));
        _765 = _734 * (_697.z + (-0.5));
        _766 = _734 * (_697.y + (-0.5));
        _767 = _734 * (_697.x + (-0.5));
        _768 = _744 * (_704.z + (-0.5));
        _769 = _744 * (_704.y + (-0.5));
        _770 = _744 * (_704.x + (-0.5));
        _771 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
        _772 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
        _773 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    }
    else
    {
        _761 = _762;
        _763 = _762;
        _764 = _762;
        _765 = _762;
        _766 = _762;
        _767 = _762;
        _768 = _762;
        _769 = _762;
        _770 = _762;
        _771 = _762;
        _772 = _762;
        _773 = _762;
    }
    float _935;
    float _936;
    float _937;
    float _938;
    float _939;
    float _940;
    float _941;
    float _942;
    float _943;
    float _944;
    float _945;
    float _946;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _799 = fma(_594, cbModelParam._m0[30u].z, fma(_590, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _586));
        float _803 = fma(_594, cbModelParam._m0[31u].z, fma(_590, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _586));
        float _807 = fma(_594, cbModelParam._m0[32u].z, fma(_590, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _586));
        float _830 = _586 + _335;
        float _831 = _590 + _336;
        float _832 = _594 + _337;
        float _842 = fma(_832, cbModelParam._m0[30u].z, fma(_831, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _830)) - _799;
        float _843 = fma(_832, cbModelParam._m0[31u].z, fma(_831, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _830)) - _803;
        float _844 = fma(_832, cbModelParam._m0[32u].z, fma(_831, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _830)) - _807;
        float _848 = inversesqrt(dot(vec3(_842, _843, _844), vec3(_842, _843, _844)));
        float _861 = ((_848 * _842) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_799 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _862 = ((_848 * _843) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_803 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _863 = ((_848 * _844) / cbModelParam._m0[35u].z) + ((((((_807 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _865 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_861, _862, _863), 0.0);
        vec4 _872 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_861, _862, _863), 0.0);
        vec4 _879 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_861, _862, _863), 0.0);
        vec4 _886 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_861, _862, _863), 0.0);
        float _898 = exp2((_865.w + (-0.5)) * 20.0) * 2.0;
        float _908 = exp2((_872.w + (-0.5)) * 20.0) * 2.0;
        float _918 = exp2((_879.w + (-0.5)) * 20.0) * 2.0;
        float _928 = exp2((_886.w + (-0.5)) * 20.0) * 2.0;
        float _929 = _928 * (_886.x + (-0.5));
        float _930 = _928 * (_886.y + (-0.5));
        float _931 = _928 * (_886.z + (-0.5));
        _935 = _898 * (_865.z + (-0.5));
        _936 = _898 * (_865.y + (-0.5));
        _937 = _898 * (_865.x + (-0.5));
        _938 = _908 * (_872.z + (-0.5));
        _939 = _908 * (_872.y + (-0.5));
        _940 = _908 * (_872.x + (-0.5));
        _941 = _918 * (_879.z + (-0.5));
        _942 = _918 * (_879.y + (-0.5));
        _943 = _918 * (_879.x + (-0.5));
        _944 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        _945 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        _946 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
    }
    else
    {
        _935 = _762;
        _936 = _762;
        _937 = _762;
        _938 = _762;
        _939 = _762;
        _940 = _762;
        _941 = _762;
        _942 = _762;
        _943 = _762;
        _944 = _762;
        _945 = _762;
        _946 = _762;
    }
    float _961 = _526 * 0.5;
    float _962 = _527 * 0.5;
    float _963 = _528 * 0.5;
    float _964 = dot(vec4(_961, _962, _963, 1.0), vec4(_937, _940, _943, _946));
    float _967 = dot(vec4(_961, _962, _963, 1.0), vec4(_936, _939, _942, _945));
    float _970 = dot(vec4(_961, _962, _963, 1.0), vec4(_935, _938, _941, _944));
    float _1005;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _977 = dot(vec4(_961, _962, _963, 1.0), vec4(_761, _765, _768, _771));
        float _981 = dot(vec4(_961, _962, _963, 1.0), vec4(_763, _766, _769, _772));
        float _985 = dot(vec4(_961, _962, _963, 1.0), vec4(_764, _767, _770, _773));
        float _992 = dot(vec4(cbModelParam._m0[39u]), vec4(_961, _962, _963, 1.0));
        _1005 = dot(vec3(isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0)), isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0)), isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_992) ? 0.0 : (isnan(0.0) ? _992 : max(0.0, _992))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1005 = 1.0;
    }
    float _1016;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1007 = dot(vec4(cbModelParam._m0[40u]), vec4(_961, _962, _963, 1.0));
        _1016 = dot(vec3(isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0)), isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0)), isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1007) ? 0.0 : (isnan(0.0) ? _1007 : max(0.0, _1007))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1016 = 1.0;
    }
    float _1020 = (_1016 * cbModelParam._m0[1u].x) + (_1005 * (1.0 - cbModelParam._m0[1u].x));
    float _1028 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _342);
    float _1029 = isnan(_1028) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1028 : min(cbModelParam._m0[25u].z, _1028));
    float _1112;
    float _1114;
    float _1116;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1079 = fma(_594, cbModelParam._m0[13u].z, fma(_590, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _586)) + cbModelParam._m0[13u].w;
        float _1083 = fma(_594, cbModelParam._m0[14u].z, fma(_590, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _586)) + cbModelParam._m0[14u].w;
        float _1087 = fma(_594, cbModelParam._m0[15u].z, fma(_590, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _586)) + cbModelParam._m0[15u].w;
        float _1090 = fma(_528, cbModelParam._m0[13u].z, fma(_527, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _526));
        float _1093 = fma(_528, cbModelParam._m0[14u].z, fma(_527, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _526));
        float _1096 = fma(_528, cbModelParam._m0[15u].z, fma(_527, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _526));
        float _1124;
        if (_1090 > 0.0)
        {
            _1124 = abs((1.0 - _1079) / _1090);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1090 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1079 + 1.0) / _1090);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1124 = frontier_phi_16_14_ladder;
        }
        float _1472;
        if (_1093 > 0.0)
        {
            _1472 = abs((1.0 - _1083) / _1093);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1093 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1083 + 1.0) / _1093);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1472 = frontier_phi_25_21_ladder;
        }
        float _1678;
        if (_1096 > 0.0)
        {
            _1678 = abs((1.0 - _1087) / _1096);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1096 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1087 + 1.0) / _1096);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1678 = frontier_phi_37_32_ladder;
        }
        float _1680 = isnan(_1472) ? _1124 : (isnan(_1124) ? _1472 : min(_1124, _1472));
        float _1681 = isnan(_1678) ? _1680 : (isnan(_1680) ? _1678 : min(_1680, _1678));
        float _1685 = (_1681 * _1090) + _1079;
        float _1686 = (_1681 * _1093) + _1083;
        float _1687 = (_1681 * _1096) + _1087;
        float _1688 = _1681 * 9.9999997473787516355514526367188e-05;
        float _1690 = (-1.0) - _1688;
        float _1692 = _1688 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1687 > _1692) || ((_1687 < _1690) || ((_1686 > _1692) || ((_1686 < _1690) || ((_1685 < _1690) || (_1685 > _1692))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1885 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1687, cbModelParam._m0[9u].z, fma(_1686, cbModelParam._m0[9u].y, _1685 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1687, cbModelParam._m0[10u].z, fma(_1686, cbModelParam._m0[10u].y, _1685 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1687, cbModelParam._m0[11u].z, fma(_1686, cbModelParam._m0[11u].y, _1685 * cbModelParam._m0[11u].x))), _1029);
            frontier_phi_15_37_ladder = _1885.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1885.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1885.x * cbModelParam._m0[1u].y;
        }
        _1112 = frontier_phi_15_37_ladder_2;
        _1114 = frontier_phi_15_37_ladder_1;
        _1116 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1100 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_526, _527, _528), _1029);
        _1112 = _1100.x * cbModelParam._m0[1u].y;
        _1114 = _1100.y * cbModelParam._m0[1u].y;
        _1116 = _1100.z * cbModelParam._m0[1u].y;
    }
    float _1120 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _342);
    float _1121 = isnan(_1120) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1120 : min(cbModelParam._m0[25u].w, _1120));
    float _1214;
    float _1216;
    float _1218;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1178 = fma(_594, cbModelParam._m0[21u].z, fma(_590, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _586)) + cbModelParam._m0[21u].w;
        float _1182 = fma(_594, cbModelParam._m0[22u].z, fma(_590, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _586)) + cbModelParam._m0[22u].w;
        float _1186 = fma(_594, cbModelParam._m0[23u].z, fma(_590, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _586)) + cbModelParam._m0[23u].w;
        float _1189 = fma(_528, cbModelParam._m0[21u].z, fma(_527, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _526));
        float _1192 = fma(_528, cbModelParam._m0[22u].z, fma(_527, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _526));
        float _1195 = fma(_528, cbModelParam._m0[23u].z, fma(_527, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _526));
        float _1477;
        if (_1189 > 0.0)
        {
            _1477 = abs((1.0 - _1178) / _1189);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1189 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1178 + 1.0) / _1189);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1477 = frontier_phi_27_23_ladder;
        }
        float _1705;
        if (_1192 > 0.0)
        {
            _1705 = abs((1.0 - _1182) / _1192);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1192 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1182 + 1.0) / _1192);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1705 = frontier_phi_39_34_ladder;
        }
        float _1999;
        if (_1195 > 0.0)
        {
            _1999 = abs((1.0 - _1186) / _1195);
        }
        else
        {
            float frontier_phi_50_45_ladder;
            if (_1195 < 0.0)
            {
                frontier_phi_50_45_ladder = abs((_1186 + 1.0) / _1195);
            }
            else
            {
                frontier_phi_50_45_ladder = 5000.0;
            }
            _1999 = frontier_phi_50_45_ladder;
        }
        float _2001 = isnan(_1705) ? _1477 : (isnan(_1477) ? _1705 : min(_1477, _1705));
        float _2002 = isnan(_1999) ? _2001 : (isnan(_2001) ? _1999 : min(_2001, _1999));
        float _2006 = (_2002 * _1189) + _1178;
        float _2007 = (_2002 * _1192) + _1182;
        float _2008 = (_2002 * _1195) + _1186;
        float _2009 = _2002 * 9.9999997473787516355514526367188e-05;
        float _2010 = (-1.0) - _2009;
        float _2012 = _2009 + 1.0;
        float frontier_phi_24_50_ladder;
        float frontier_phi_24_50_ladder_1;
        float frontier_phi_24_50_ladder_2;
        if ((_2008 > _2012) || ((_2008 < _2010) || ((_2007 > _2012) || ((_2007 < _2010) || ((_2006 < _2010) || (_2006 > _2012))))))
        {
            frontier_phi_24_50_ladder = 0.0;
            frontier_phi_24_50_ladder_1 = 0.0;
            frontier_phi_24_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2117 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2008, cbModelParam._m0[17u].z, fma(_2007, cbModelParam._m0[17u].y, _2006 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2008, cbModelParam._m0[18u].z, fma(_2007, cbModelParam._m0[18u].y, _2006 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2008, cbModelParam._m0[19u].z, fma(_2007, cbModelParam._m0[19u].y, _2006 * cbModelParam._m0[19u].x))), _1121);
            frontier_phi_24_50_ladder = _2117.x * cbModelParam._m0[1u].z;
            frontier_phi_24_50_ladder_1 = _2117.z * cbModelParam._m0[1u].z;
            frontier_phi_24_50_ladder_2 = _2117.y * cbModelParam._m0[1u].z;
        }
        _1214 = frontier_phi_24_50_ladder;
        _1216 = frontier_phi_24_50_ladder_2;
        _1218 = frontier_phi_24_50_ladder_1;
    }
    else
    {
        vec4 _1198 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_526, _527, _528), _1121);
        _1214 = _1198.x * cbModelParam._m0[1u].z;
        _1216 = _1198.y * cbModelParam._m0[1u].z;
        _1218 = _1198.z * cbModelParam._m0[1u].z;
    }
    float _1231 = (((_557 * _339) + _558) * _517) * ((cbModelParam._m0[1u].w * (_1214 - _1112)) + _1112);
    float _1233 = (((_557 * _340) + _558) * _517) * ((cbModelParam._m0[1u].w * (_1216 - _1114)) + _1114);
    float _1235 = (((_557 * _341) + _558) * _517) * ((cbModelParam._m0[1u].w * (_1218 - _1116)) + _1116);
    float _1256 = fma(_1235, cbSceneParam._m0[89u].z, fma(_1233, cbSceneParam._m0[89u].y, _1231 * cbSceneParam._m0[89u].x));
    float _1259 = fma(_1235, cbSceneParam._m0[90u].z, fma(_1233, cbSceneParam._m0[90u].y, _1231 * cbSceneParam._m0[90u].x));
    float _1262 = fma(_1235, cbSceneParam._m0[91u].z, fma(_1233, cbSceneParam._m0[91u].y, _1231 * cbSceneParam._m0[91u].x));
    uint _1269 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1273 = floatBitsToUint(cbInstanceData._m0[_1269 + 5u]);
    uint _1275 = _1273.x * 14u;
    uint _1276 = _1275 + 13u;
    float _1282 = _517 + (-1.0);
    float _1287 = (cbLight._m0[_1276].x * _1282) + 1.0;
    float _1288 = (cbLight._m0[_1276].y * _1282) + 1.0;
    float _1289 = (cbLight._m0[_1276].w * _1282) + 1.0;
    uint _1293 = _1275 + 8u;
    float _1309 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1275].w)) * _342) * 0.949999988079071044921875);
    float _1310 = _1309 * _1309;
    float _1311 = cbLight._m0[_1275].x + _403;
    float _1312 = cbLight._m0[_1275].y + _404;
    float _1313 = cbLight._m0[_1275].z + _405;
    float _1317 = inversesqrt(dot(vec3(_1311, _1312, _1313), vec3(_1311, _1312, _1313)));
    float _1318 = _1317 * _1311;
    float _1319 = _1317 * _1312;
    float _1320 = _1317 * _1313;
    float _1321 = dot(vec3(_335, _336, _337), vec3(cbLight._m0[_1275].xyz));
    float _3006 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
    float _1324 = isnan(1.0) ? _3006 : (isnan(_3006) ? 1.0 : min(_3006, 1.0));
    float _3017 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _1325 = isnan(1.0) ? _3017 : (isnan(_3017) ? 1.0 : min(_3017, 1.0));
    float _1326 = dot(vec3(_335, _336, _337), vec3(_1318, _1319, _1320));
    float _3028 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
    float _1329 = isnan(1.0) ? _3028 : (isnan(_3028) ? 1.0 : min(_3028, 1.0));
    float _1330 = dot(vec3(cbLight._m0[_1275].xyz), vec3(_1318, _1319, _1320));
    float _3039 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
    float _1334 = _1310 * _1310;
    float _1338 = ((_1329 * _1329) * (_1334 + (-1.0))) + 1.0;
    float _1346 = exp2(log2(1.0 - (isnan(1.0) ? _3039 : (isnan(_3039) ? 1.0 : min(_3039, 1.0)))) * 5.0);
    float _1347 = 1.0 - _339;
    float _1348 = 1.0 - _340;
    float _1349 = 1.0 - _341;
    float _1356 = 1.0 - _1310;
    float _1367 = (0.5 / (((_1325 * ((_1324 * _1356) + _1310)) + 9.9999999392252902907785028219223e-09) + (((_1325 * _1356) + _1310) * _1324))) * _1324;
    float _3050 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
    float _1369 = (isnan(1.0) ? _3050 : (isnan(_3050) ? 1.0 : min(_3050, 1.0))) * (_1334 / ((_1338 * _1338) * 3.141590118408203125));
    float _1370 = isnan(1.0) ? _1287 : (isnan(_1287) ? 1.0 : min(_1287, 1.0));
    uint _1380 = _1275 | 1u;
    uint _1384 = _1275 + 9u;
    float _1398 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1380].w)) * _342) * 0.949999988079071044921875);
    float _1399 = _1398 * _1398;
    float _1400 = cbLight._m0[_1380].x + _403;
    float _1401 = cbLight._m0[_1380].y + _404;
    float _1402 = cbLight._m0[_1380].z + _405;
    float _1406 = inversesqrt(dot(vec3(_1400, _1401, _1402), vec3(_1400, _1401, _1402)));
    float _1407 = _1406 * _1400;
    float _1408 = _1406 * _1401;
    float _1409 = _1406 * _1402;
    float _1410 = dot(vec3(_335, _336, _337), vec3(cbLight._m0[_1380].xyz));
    float _3066 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
    float _1413 = isnan(1.0) ? _3066 : (isnan(_3066) ? 1.0 : min(_3066, 1.0));
    float _1414 = dot(vec3(_335, _336, _337), vec3(_1407, _1408, _1409));
    float _3077 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
    float _1417 = isnan(1.0) ? _3077 : (isnan(_3077) ? 1.0 : min(_3077, 1.0));
    float _1418 = dot(vec3(cbLight._m0[_1380].xyz), vec3(_1407, _1408, _1409));
    float _3088 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
    float _1422 = _1399 * _1399;
    float _1426 = ((_1417 * _1417) * (_1422 + (-1.0))) + 1.0;
    float _1433 = exp2(log2(1.0 - (isnan(1.0) ? _3088 : (isnan(_3088) ? 1.0 : min(_3088, 1.0)))) * 5.0);
    float _1440 = 1.0 - _1399;
    float _1450 = (0.5 / (((_1325 * ((_1413 * _1440) + _1399)) + 9.9999999392252902907785028219223e-09) + (((_1325 * _1440) + _1399) * _1413))) * _1413;
    float _3099 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
    float _1452 = (isnan(1.0) ? _3099 : (isnan(_3099) ? 1.0 : min(_3099, 1.0))) * (_1422 / ((_1426 * _1426) * 3.141590118408203125));
    float _1453 = isnan(1.0) ? _1288 : (isnan(_1288) ? 1.0 : min(_1288, 1.0));
    float _1463 = (((((_1433 * _1347) + _339) * cbLight._m0[_1384].x) * _1452) * _1453) + (((((_1346 * _1347) + _339) * cbLight._m0[_1293].x) * _1369) * _1370);
    float _1464 = (((((_1433 * _1348) + _340) * cbLight._m0[_1384].y) * _1452) * _1453) + (((((_1346 * _1348) + _340) * cbLight._m0[_1293].y) * _1369) * _1370);
    float _1465 = (((((_1433 * _1349) + _341) * cbLight._m0[_1384].z) * _1452) * _1453) + (((((_1346 * _1349) + _341) * cbLight._m0[_1293].z) * _1369) * _1370);
    uvec4 _1469 = floatBitsToUint(cbLight._m0[_1275 + 12u]);
    float _1482;
    float _1484;
    float _1486;
    if (_1469.x == 0u)
    {
        _1482 = _1463;
        _1484 = _1464;
        _1486 = _1465;
    }
    else
    {
        float _1492 = (cbLight._m0[_1276].z * _1282) + 1.0;
        uint _1493 = _1275 + 2u;
        uint _1497 = _1275 + 10u;
        float _1511 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1493].w)) * _342) * 0.949999988079071044921875);
        float _1512 = _1511 * _1511;
        float _1513 = cbLight._m0[_1493].x + _403;
        float _1514 = cbLight._m0[_1493].y + _404;
        float _1515 = cbLight._m0[_1493].z + _405;
        float _1519 = inversesqrt(dot(vec3(_1513, _1514, _1515), vec3(_1513, _1514, _1515)));
        float _1520 = _1519 * _1513;
        float _1521 = _1519 * _1514;
        float _1522 = _1519 * _1515;
        float _1523 = dot(vec3(_335, _336, _337), vec3(cbLight._m0[_1493].xyz));
        float _3115 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1526 = isnan(1.0) ? _3115 : (isnan(_3115) ? 1.0 : min(_3115, 1.0));
        float _1527 = dot(vec3(_335, _336, _337), vec3(_1520, _1521, _1522));
        float _3126 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1530 = isnan(1.0) ? _3126 : (isnan(_3126) ? 1.0 : min(_3126, 1.0));
        float _1531 = dot(vec3(cbLight._m0[_1493].xyz), vec3(_1520, _1521, _1522));
        float _3137 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1535 = _1512 * _1512;
        float _1539 = ((_1530 * _1530) * (_1535 + (-1.0))) + 1.0;
        float _1546 = exp2(log2(1.0 - (isnan(1.0) ? _3137 : (isnan(_3137) ? 1.0 : min(_3137, 1.0)))) * 5.0);
        float _1553 = 1.0 - _1512;
        float _1563 = (0.5 / (((_1325 * ((_1526 * _1553) + _1512)) + 9.9999999392252902907785028219223e-09) + (((_1325 * _1553) + _1512) * _1526))) * _1526;
        float _3148 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1565 = (isnan(1.0) ? _3148 : (isnan(_3148) ? 1.0 : min(_3148, 1.0))) * (_1535 / ((_1539 * _1539) * 3.141590118408203125));
        float _1566 = isnan(1.0) ? _1492 : (isnan(_1492) ? 1.0 : min(_1492, 1.0));
        _1482 = (((((_1546 * _1347) + _339) * cbLight._m0[_1497].x) * _1565) * _1566) + _1463;
        _1484 = (((((_1546 * _1348) + _340) * cbLight._m0[_1497].y) * _1565) * _1566) + _1464;
        _1486 = (((((_1546 * _1349) + _341) * cbLight._m0[_1497].z) * _1565) * _1566) + _1465;
    }
    float _1584;
    float _1586;
    float _1588;
    if (_1469.y == 0u)
    {
        _1584 = _1482;
        _1586 = _1484;
        _1588 = _1486;
    }
    else
    {
        uint _1595 = _1275 + 3u;
        uint _1599 = _1275 + 11u;
        float _1613 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1595].w)) * _342) * 0.949999988079071044921875);
        float _1614 = _1613 * _1613;
        float _1615 = cbLight._m0[_1595].x + _403;
        float _1616 = cbLight._m0[_1595].y + _404;
        float _1617 = cbLight._m0[_1595].z + _405;
        float _1621 = inversesqrt(dot(vec3(_1615, _1616, _1617), vec3(_1615, _1616, _1617)));
        float _1622 = _1621 * _1615;
        float _1623 = _1621 * _1616;
        float _1624 = _1621 * _1617;
        float _1625 = dot(vec3(_335, _336, _337), vec3(cbLight._m0[_1595].xyz));
        float _3164 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1628 = isnan(1.0) ? _3164 : (isnan(_3164) ? 1.0 : min(_3164, 1.0));
        float _1629 = dot(vec3(_335, _336, _337), vec3(_1622, _1623, _1624));
        float _3175 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1632 = isnan(1.0) ? _3175 : (isnan(_3175) ? 1.0 : min(_3175, 1.0));
        float _1633 = dot(vec3(cbLight._m0[_1595].xyz), vec3(_1622, _1623, _1624));
        float _3186 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1637 = _1614 * _1614;
        float _1641 = ((_1632 * _1632) * (_1637 + (-1.0))) + 1.0;
        float _1648 = exp2(log2(1.0 - (isnan(1.0) ? _3186 : (isnan(_3186) ? 1.0 : min(_3186, 1.0)))) * 5.0);
        float _1655 = 1.0 - _1614;
        float _1665 = (0.5 / (((_1325 * ((_1628 * _1655) + _1614)) + 9.9999999392252902907785028219223e-09) + (((_1325 * _1655) + _1614) * _1628))) * _1628;
        float _3197 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1667 = (isnan(1.0) ? _3197 : (isnan(_3197) ? 1.0 : min(_3197, 1.0))) * (_1637 / ((_1641 * _1641) * 3.141590118408203125));
        float _1668 = isnan(1.0) ? _1289 : (isnan(_1289) ? 1.0 : min(_1289, 1.0));
        _1584 = (((((_1648 * _1347) + _339) * cbLight._m0[_1599].x) * _1667) * _1668) + _1482;
        _1586 = (((((_1648 * _1348) + _340) * cbLight._m0[_1599].y) * _1667) * _1668) + _1484;
        _1588 = (((((_1648 * _1349) + _341) * cbLight._m0[_1599].z) * _1667) * _1668) + _1486;
    }
    float _1809;
    float _1811;
    float _1813;
    if (_1273.y == 0u)
    {
        float _1749 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1750 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1749;
        float _1751 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1749;
        float _1752 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1749;
        uvec4 _1764 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1765 = _1764.x;
        uint _1776 = uint((float(_1764.y) * floor(float(uint(cbSceneParam._m0[85u].y * _411) / _1765))) + floor(float(uint(cbSceneParam._m0[85u].x * _410) / _1765)));
        float _1786 = (log2(_1752 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1787 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
        uint _1790 = uint(isnan(14.0) ? _1787 : (isnan(_1787) ? 14.0 : min(_1787, 14.0)));
        uvec4 _1795 = texelFetch(g_lightClusterGridBuffer, int(((_1790 << 2u) + (_1776 << 6u)) >> 2u));
        uint _1796 = _1795.x;
        uint _1797 = _1764.z;
        float _1894;
        float _1896;
        float _1898;
        if (((((1u << ((_1797 >> 4u) & 15u)) + 4294967295u) & _1796) == 0u) || ((_1797 & 240u) == 0u))
        {
            _1894 = 0.0;
            _1896 = 0.0;
            _1898 = 0.0;
        }
        else
        {
            float _1895;
            float _1897;
            float _1899;
            float _2048 = 0.0;
            float _2049 = 0.0;
            float _2050 = 0.0;
            uint _2051 = 0u;
            uint _2060;
            bool _2061;
            for (;;)
            {
                _2060 = texelFetch(g_lightClassification, int((((_1790 << 5u) + (_1776 << 9u)) + (_2051 << 2u)) >> 2u)).x;
                _2061 = _2060 == 0u;
                float frontier_phi_59_pred;
                float frontier_phi_59_pred_1;
                float frontier_phi_59_pred_2;
                if (_2061)
                {
                    frontier_phi_59_pred = _2050;
                    frontier_phi_59_pred_1 = _2049;
                    frontier_phi_59_pred_2 = _2048;
                }
                else
                {
                    float _2184;
                    float _2185;
                    float _2186;
                    uint _2187;
                    _2184 = _2048;
                    _2185 = _2049;
                    _2186 = _2050;
                    _2187 = _2060;
                    float _2122;
                    float _2123;
                    float _2124;
                    for (;;)
                    {
                        uint _2191 = uint(findLSB(_2187)) + (_2051 << 5u);
                        uint _2188 = (_2187 + 4294967295u) & _2187;
                        uint _2193 = _2191 * 48u;
                        vec4 _2207 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2193)).x, texelFetch(g_PointLightRenderingBuffer, int(_2193 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2193 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2193 + 3u)).x));
                        uint _2224 = (_2191 * 48u) + 8u;
                        vec3 _2235 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2224)).x, texelFetch(g_PointLightRenderingBuffer, int(_2224 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2224 + 2u)).x));
                        float _2239 = _2207.x - _1750;
                        float _2240 = _2207.y - _1751;
                        float _2241 = _2207.z - _1752;
                        float _2242 = dot(vec3(_2239, _2240, _2241), vec3(_2239, _2240, _2241));
                        float _2245 = inversesqrt(_2242);
                        float _2246 = _2245 * _2239;
                        float _2247 = _2245 * _2240;
                        float _2248 = _2245 * _2241;
                        float _2254 = 1.0 - (_2242 * _2207.w);
                        float _3223 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
                        float _2256 = sqrt(_2242) * uintBitsToFloat(uvec4(_2214, _2215, _2216, texelFetch(g_PointLightRenderingBuffer, int(((_2191 * 48u) + 4u) + 3u)).x)).w;
                        float _2260 = _2256 * _2256;
                        float _2261 = (-0.0) - _1750;
                        float _2262 = (-0.0) - _1751;
                        float _2263 = (-0.0) - _1752;
                        float _2267 = inversesqrt(dot(vec3(_2261, _2262, _2263), vec3(_2261, _2262, _2263)));
                        float _2268 = _2267 * _2261;
                        float _2269 = _2267 * _2262;
                        float _2270 = _2267 * _2263;
                        float _2278 = exp2(log2(1.0 / ((_2260 * 3.5) + 5.0)) * 0.25);
                        float _2279 = 1.0 - _539;
                        float _2286 = sqrt(1.0 - ((1.0 - (_2279 * _2279)) * (1.0 - (_2278 * _2278))));
                        float _2287 = _2286 * _2286;
                        float _2288 = _2287 * _2287;
                        float _2289 = _2268 + _2246;
                        float _2290 = _2269 + _2247;
                        float _2291 = _2270 + _2248;
                        float _2295 = inversesqrt(dot(vec3(_2289, _2290, _2291), vec3(_2289, _2290, _2291)));
                        float _2299 = dot(vec3(_432, _435, _438), vec3(_2268, _2269, _2270));
                        float _3234 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
                        float _2302 = isnan(1.0) ? _3234 : (isnan(_3234) ? 1.0 : min(_3234, 1.0));
                        float _2303 = dot(vec3(_432, _435, _438), vec3(_2295 * _2289, _2295 * _2290, _2295 * _2291));
                        float _3245 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
                        float _2306 = isnan(1.0) ? _3245 : (isnan(_3245) ? 1.0 : min(_3245, 1.0));
                        float _2310 = ((_2306 * _2306) * (_2288 + (-1.0))) + 1.0;
                        float _2311 = (1.39999997615814208984375 / (_2256 + 1.39999997615814208984375)) * _2287;
                        float _2312 = _2311 * _2311;
                        float _2315 = ((1.0 - _2312) * dot(vec3(_432, _435, _438), vec3(_2246, _2247, _2248))) + _2312;
                        float _3256 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
                        float _2316 = isnan(1.0) ? _3256 : (isnan(_3256) ? 1.0 : min(_3256, 1.0));
                        float _2317 = 1.0 - _2287;
                        float _2327 = (0.5 / (((_2316 * ((_2302 * _2317) + _2287)) + 9.9999999392252902907785028219223e-09) + (((_2316 * _2317) + _2287) * _2302))) * _2316;
                        float _3267 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
                        float _2338 = (((_2288 * 3.1415927410125732421875) * (isnan(1.0) ? _3267 : (isnan(_3267) ? 1.0 : min(_3267, 1.0)))) / ((_2310 * _2310) * ((_2260 * 2.1991131305694580078125) + 3.141590118408203125))) * (isnan(1.0) ? _3223 : (isnan(_3223) ? 1.0 : min(_3223, 1.0)));
                        _2122 = (_2338 * _2235.x) + _2184;
                        _2123 = (_2338 * _2235.y) + _2185;
                        _2124 = (_2338 * _2235.z) + _2186;
                        if (_2188 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2184 = _2122;
                            _2185 = _2123;
                            _2186 = _2124;
                            _2187 = _2188;
                        }
                    }
                    frontier_phi_59_pred = _2124;
                    frontier_phi_59_pred_1 = _2123;
                    frontier_phi_59_pred_2 = _2122;
                }
                _1899 = frontier_phi_59_pred;
                _1897 = frontier_phi_59_pred_1;
                _1895 = frontier_phi_59_pred_2;
                uint _2052 = _2051 + 1u;
                if (_2052 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2048 = _1895;
                    _2049 = _1897;
                    _2050 = _1899;
                    _2051 = _2052;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1894 = _1895;
            _1896 = _1897;
            _1898 = _1899;
        }
        uvec4 _1902 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1903 = _1902.z;
        uint _1905 = (_1903 >> 8u) & 15u;
        float _2025;
        float _2027;
        float _2029;
        if (((4294967295u << _1905) & _1796) == 0u)
        {
            _2025 = _1894;
            _2027 = _1896;
            _2029 = _1898;
        }
        else
        {
            float _2041 = inversesqrt(dot(vec3(_1750, _1751, _1752), vec3(_1750, _1751, _1752)));
            float _2042 = _2041 * _1750;
            float _2043 = _2041 * _1751;
            float _2044 = _2041 * _1752;
            float frontier_phi_52_53_ladder;
            float frontier_phi_52_53_ladder_1;
            float frontier_phi_52_53_ladder_2;
            if (_1905 < ((_1903 >> 12u) & 15u))
            {
                float _2026;
                float _2028;
                float _2030;
                float _2170 = _1894;
                float _2171 = _1896;
                float _2172 = _1898;
                uint _2173 = _1905;
                uint _2182;
                bool _2183;
                for (;;)
                {
                    _2182 = texelFetch(g_lightClassification, int((((_1790 << 5u) + (_1776 << 9u)) + (_2173 << 2u)) >> 2u)).x;
                    _2183 = _2182 == 0u;
                    float frontier_phi_65_pred;
                    float frontier_phi_65_pred_1;
                    float frontier_phi_65_pred_2;
                    if (_2183)
                    {
                        frontier_phi_65_pred = _2172;
                        frontier_phi_65_pred_1 = _2171;
                        frontier_phi_65_pred_2 = _2170;
                    }
                    else
                    {
                        float _2343;
                        float _2344;
                        float _2345;
                        float _2609;
                        float _2610;
                        float _2611;
                        float _2353 = _2170;
                        float _2354 = _2171;
                        float _2355 = _2172;
                        uint _2356 = _2182;
                        uint _2357;
                        uint _2367;
                        vec4 _2382;
                        float _2383;
                        vec3 _2395;
                        vec4 _2411;
                        vec4 _2427;
                        float _2474;
                        bool _2475;
                        for (;;)
                        {
                            _2367 = ((_2173 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2356));
                            _2357 = (_2356 + 4294967295u) & _2356;
                            uint _2369 = _2367 * 40u;
                            _2382 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2369)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2369 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2369 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2369 + 3u)).x));
                            _2383 = _2382.w;
                            uint _2385 = (_2367 * 40u) + 8u;
                            _2395 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2385)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2385 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2385 + 2u)).x));
                            uint _2398 = (_2367 * 40u) + 16u;
                            _2411 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2398)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2398 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2398 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2398 + 3u)).x));
                            uint _2414 = (_2367 * 40u) + 20u;
                            _2427 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2414)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2414 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2414 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2414 + 3u)).x));
                            uint _2430 = (_2367 * 40u) + 24u;
                            vec4 _2443 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2430)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2430 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2430 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2430 + 3u)).x));
                            uint _2449 = (_2367 * 40u) + 28u;
                            vec4 _2462 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2449)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2449 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2449 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2449 + 3u)).x));
                            _2474 = fma(_1752, _2462.z, fma(_1751, _2462.y, _2462.x * _1750)) + _2462.w;
                            _2475 = !((fma(_1752, _2443.z, fma(_1751, _2443.y, _2443.x * _1750)) + _2443.w) <= 0.0);
                            float frontier_phi_71_pred;
                            float frontier_phi_71_pred_1;
                            float frontier_phi_71_pred_2;
                            if (_2475)
                            {
                                float _2509 = _2382.x - _1750;
                                float _2510 = _2382.y - _1751;
                                float _2511 = _2382.z - _1752;
                                float _2512 = dot(vec3(_2509, _2510, _2511), vec3(_2509, _2510, _2511));
                                float _2515 = inversesqrt(_2512);
                                float _2516 = _2515 * _2509;
                                float _2517 = _2515 * _2510;
                                float _2518 = _2515 * _2511;
                                float _2522 = 1.0 - (_2512 / (_2383 * _2383));
                                float _3278 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
                                float _2524 = sqrt(_2512) * uintBitsToFloat(uvec4(_2478, _2479, _2480, texelFetch(g_SpotLightRenderingBuffer, int(((_2367 * 40u) + 4u) + 3u)).x)).w;
                                float _2527 = _2524 * _2524;
                                float _2528 = (fma(_1752, _2411.z, fma(_1751, _2411.y, _2411.x * _1750)) + _2411.w) / _2474;
                                float _2529 = (fma(_1752, _2427.z, fma(_1751, _2427.y, _2427.x * _1750)) + _2427.w) / _2474;
                                float _2533 = 1.0 - dot(vec2(_2528, _2529), vec2(_2528, _2529));
                                float _3289 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
                                float _2543 = exp2(log2(1.0 / ((_2527 * 3.5) + 5.0)) * 0.25);
                                float _2544 = 1.0 - _539;
                                float _2551 = sqrt(1.0 - ((1.0 - (_2544 * _2544)) * (1.0 - (_2543 * _2543))));
                                float _2552 = _2551 * _2551;
                                float _2553 = _2552 * _2552;
                                float _2554 = _2516 - _2042;
                                float _2555 = _2517 - _2043;
                                float _2556 = _2518 - _2044;
                                float _2560 = inversesqrt(dot(vec3(_2554, _2555, _2556), vec3(_2554, _2555, _2556)));
                                float _2564 = dot(vec3(_432, _435, _438), vec3((-0.0) - _2042, (-0.0) - _2043, (-0.0) - _2044));
                                float _3300 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
                                float _2567 = isnan(1.0) ? _3300 : (isnan(_3300) ? 1.0 : min(_3300, 1.0));
                                float _2568 = dot(vec3(_432, _435, _438), vec3(_2560 * _2554, _2560 * _2555, _2560 * _2556));
                                float _3311 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
                                float _2571 = isnan(1.0) ? _3311 : (isnan(_3311) ? 1.0 : min(_3311, 1.0));
                                float _2575 = ((_2571 * _2571) * (_2553 + (-1.0))) + 1.0;
                                float _2576 = (1.39999997615814208984375 / (_2524 + 1.39999997615814208984375)) * _2552;
                                float _2577 = _2576 * _2576;
                                float _2583 = ((1.0 - _2577) * dot(vec3(_432, _435, _438), vec3(_2516, _2517, _2518))) + _2577;
                                float _3322 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
                                float _2584 = isnan(1.0) ? _3322 : (isnan(_3322) ? 1.0 : min(_3322, 1.0));
                                float _2585 = 1.0 - _2552;
                                float _2595 = (0.5 / (((_2584 * ((_2567 * _2585) + _2552)) + 9.9999999392252902907785028219223e-09) + (((_2584 * _2585) + _2552) * _2567))) * _2584;
                                float _3333 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
                                float _2605 = ((isnan(1.0) ? _3289 : (isnan(_3289) ? 1.0 : min(_3289, 1.0))) * (isnan(1.0) ? _3278 : (isnan(_3278) ? 1.0 : min(_3278, 1.0)))) * (((_2553 * 3.1415927410125732421875) * (isnan(1.0) ? _3333 : (isnan(_3333) ? 1.0 : min(_3333, 1.0)))) / ((_2575 * _2575) * ((_2527 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_71_pred = _2605 * _2395.z;
                                frontier_phi_71_pred_1 = _2605 * _2395.y;
                                frontier_phi_71_pred_2 = _2605 * _2395.x;
                            }
                            else
                            {
                                frontier_phi_71_pred = 0.0;
                                frontier_phi_71_pred_1 = 0.0;
                                frontier_phi_71_pred_2 = 0.0;
                            }
                            _2611 = frontier_phi_71_pred;
                            _2610 = frontier_phi_71_pred_1;
                            _2609 = frontier_phi_71_pred_2;
                            _2343 = _2609 + _2353;
                            _2344 = _2610 + _2354;
                            _2345 = _2611 + _2355;
                            if (_2357 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2353 = _2343;
                                _2354 = _2344;
                                _2355 = _2345;
                                _2356 = _2357;
                                continue;
                            }
                        }
                        frontier_phi_65_pred = _2345;
                        frontier_phi_65_pred_1 = _2344;
                        frontier_phi_65_pred_2 = _2343;
                    }
                    _2030 = frontier_phi_65_pred;
                    _2028 = frontier_phi_65_pred_1;
                    _2026 = frontier_phi_65_pred_2;
                    uint _2174 = _2173 + 1u;
                    if (_2174 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2170 = _2026;
                        _2171 = _2028;
                        _2172 = _2030;
                        _2173 = _2174;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_52_53_ladder = _2030;
                frontier_phi_52_53_ladder_1 = _2028;
                frontier_phi_52_53_ladder_2 = _2026;
            }
            else
            {
                frontier_phi_52_53_ladder = _1898;
                frontier_phi_52_53_ladder_1 = _1896;
                frontier_phi_52_53_ladder_2 = _1894;
            }
            _2025 = frontier_phi_52_53_ladder_2;
            _2027 = frontier_phi_52_53_ladder_1;
            _2029 = frontier_phi_52_53_ladder;
        }
        float _2034 = isnan(1.0) ? _517 : (isnan(_517) ? 1.0 : min(_517, 1.0));
        _1809 = ((_2025 * _339) * _2034) + _1584;
        _1811 = ((_2027 * _340) * _2034) + _1586;
        _1813 = ((_2029 * _341) * _2034) + _1588;
    }
    else
    {
        _1809 = _1584;
        _1811 = _1586;
        _1813 = _1588;
    }
    float _1817 = 0.959999978542327880859375 - ((isnan(1.0) ? _505 : (isnan(_505) ? 1.0 : min(_505, 1.0))) * 0.959999978542327880859375);
    float _1825 = _1817 - (exp2(log2(1.0 - _533) * 5.0) * _1817);
    uint _1832 = _1269 + 6u;
    float _1840 = _410 / cbSceneParam._m0[86u].x;
    float _1841 = _411 / cbSceneParam._m0[86u].y;
    vec4 _1855 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1840, _1841, (log2((isnan(cbSceneParam._m0[77u].w) ? _347 : (isnan(_347) ? cbSceneParam._m0[77u].w : min(_347, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1857 = _1855.x;
    float _1858 = _1855.y;
    float _1859 = _1855.z;
    float _1860 = _1855.w;
    float _1950;
    float _1952;
    float _1954;
    float _1956;
    if (_347 > cbSceneParam._m0[78u].w)
    {
        float _1913 = isnan(_347) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _347 : min(cbSceneParam._m0[80u].w, _347));
        float _1914 = _1913 / _347;
        float _1925 = _1914 * _396;
        float _1926 = _397 * _1914;
        float _1927 = (-0.0) - _1926;
        float _1928 = _1914 * _398;
        float _1930 = (cbSceneParam._m0[77u].w * _1927) / _1913;
        float _1931 = _1930 + cbSceneParam._m0[79u].w;
        float _1932 = cbSceneParam._m0[79u].w - _1926;
        float _1938 = sqrt(((_1925 * _1925) + (_1926 * _1926)) + (_1928 * _1928));
        float _1941 = (1.0 - (cbSceneParam._m0[77u].w / _1913)) * _1938;
        float _1946 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1948 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2132;
        if (abs((_1927 - _1930) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2132 = ((((_1931 > 0.0) ? exp2(_1946 * _1931) : (2.0 - exp2(_1948 * _1931))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1941;
        }
        else
        {
            float _2074 = 1.0 / cbSceneParam._m0[80u].x;
            float _2075 = isnan(_1932) ? _1931 : (isnan(_1931) ? _1932 : max(_1931, _1932));
            float _2076 = isnan(_1932) ? _1931 : (isnan(_1931) ? _1932 : min(_1931, _1932));
            float _2085 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : min(_2075, 0.0));
            float _2086 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : min(_2076, 0.0));
            _2132 = ((abs(_1938 / _1927) * cbSceneParam._m0[80u].y) * ((((_2085 - _2086) * 2.0) - ((exp2(_1946 * (isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0)))) - exp2(_1946 * (isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0))))) * _2074)) - ((exp2(_1948 * _2085) - exp2(_1948 * _2086)) * _2074))) + (_1941 * cbSceneParam._m0[80u].z);
        }
        vec4 _2134 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1840, _1841, 1.0), 0.0);
        float _2143 = exp2((_2132 * (-1.44269502162933349609375)) * (1.0 - _2134.w));
        float _2144 = log2(_2143);
        float _2160 = log2(_1860);
        _1950 = (exp2(_2160 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2144 * cbSceneParam._m0[78u].x)) * _2134.x) / cbSceneParam._m0[78u].x)) + _1857;
        _1952 = (exp2(_2160 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2144 * cbSceneParam._m0[78u].y)) * _2134.y) / cbSceneParam._m0[78u].y)) + _1858;
        _1954 = (exp2(_2160 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2144 * cbSceneParam._m0[78u].z)) * _2134.z) / cbSceneParam._m0[78u].z)) + _1859;
        _1956 = _2143 * _1860;
    }
    else
    {
        _1950 = _1857;
        _1952 = _1858;
        _1954 = _1859;
        _1956 = _1860;
    }
    float _1967 = roundEven(cbMatDynParam._m0[0u].y);
    bool _1968 = _1967 == 3.0;
    float _1969 = log2(_1956);
    float _1976 = exp2(_1969 * cbSceneParam._m0[78u].x) * (((_1809 + ((isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0))) * _1020)) * cbPerFrame._m0[3u].x) + (((cbSceneParam._m0[72u].w * _256.x) * exp2((-0.0) - ((cbMtdParam._m0[10u].w * _314) * _315))) * _1825));
    float _1977 = exp2(_1969 * cbSceneParam._m0[78u].y) * (((_1811 + ((isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0))) * _1020)) * cbPerFrame._m0[3u].x) + (((cbSceneParam._m0[72u].w * _256.y) * exp2((-0.0) - ((cbMtdParam._m0[11u].x * _314) * _315))) * _1825));
    float _1978 = exp2(_1969 * cbSceneParam._m0[78u].z) * (((_1813 + ((isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0))) * _1020)) * cbPerFrame._m0[3u].x) + (((cbSceneParam._m0[72u].w * _256.z) * exp2((-0.0) - ((cbMtdParam._m0[11u].y * _314) * _315))) * _1825));
    float _1987 = (_1967 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _1987 * (_1968 ? _1976 : (_1976 + (cbSceneParam._m0[72u].w * _1950)));
    SV_Target.y = _1987 * (_1968 ? _1977 : (_1977 + (cbSceneParam._m0[72u].w * _1952)));
    SV_Target.z = _1987 * (_1968 ? _1978 : (_1978 + (cbSceneParam._m0[72u].w * _1954)));
    SV_Target.w = cbInstanceData._m0[_1832].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1832].w;
}


