#version 460

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 45) uniform texture2D M_CrystalEx_test2_snp_0_Screen_0;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _807;
uint _2292;
uint _2293;
uint _2294;
uint _2565;
uint _2566;
uint _2567;
float _2826;
float _2827;
float _2828;
float _2829;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _158 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _159 = _158 * NORMAL.x;
    float _160 = _158 * NORMAL.y;
    float _161 = _158 * NORMAL.z;
    float _166;
    float _167;
    float _168;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _166 = (-0.0) - _159;
        _167 = (-0.0) - _160;
        _168 = (-0.0) - _161;
    }
    else
    {
        _166 = _159;
        _167 = _160;
        _168 = _161;
    }
    float _213 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _223 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _213);
    float _224 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _213);
    float _225 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _213);
    float _239 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _240 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _246 = _239 / cbSceneParam._m0[86u].x;
    float _247 = _240 / cbSceneParam._m0[86u].y;
    float _254 = isnan(cbInstanceData._m0[8u].x) ? _246 : (isnan(_246) ? cbInstanceData._m0[8u].x : max(_246, cbInstanceData._m0[8u].x));
    float _255 = isnan(cbInstanceData._m0[8u].y) ? _247 : (isnan(_247) ? cbInstanceData._m0[8u].y : max(_247, cbInstanceData._m0[8u].y));
    vec4 _260 = texture(sampler2D(M_CrystalEx_test2_snp_0_Screen_0, SS_ClampLinear), vec2(isnan(cbInstanceData._m0[8u].z) ? _254 : (isnan(_254) ? cbInstanceData._m0[8u].z : min(_254, cbInstanceData._m0[8u].z)), isnan(cbInstanceData._m0[8u].w) ? _255 : (isnan(_255) ? cbInstanceData._m0[8u].w : min(_255, cbInstanceData._m0[8u].w))));
    float _283 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _291 = abs(dot(vec4(_166, _167, _168, 0.0), vec4(_283 * _223, _283 * _224, _283 * _225, 0.0))) * cbMtdParam._m0[10u].x;
    vec4 _293 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_239, _240));
    float _295 = _293.x;
    bool _302 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _317 = (_302 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _295)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _295))) - POSITION_1.w;
    float _318 = isnan(_317) ? _291 : (isnan(_291) ? _317 : min(_291, _317));
    float _319 = log2(cbMtdParam._m0[10u].y);
    float _338 = inversesqrt(dot(vec3(_166, _167, _168), vec3(_166, _167, _168)));
    float _339 = _338 * _166;
    float _340 = _338 * _167;
    float _341 = _338 * _168;
    float _2863 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _343 = isnan(1.0) ? _2863 : (isnan(_2863) ? 1.0 : min(_2863, 1.0));
    float _2874 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _344 = isnan(1.0) ? _2874 : (isnan(_2874) ? 1.0 : min(_2874, 1.0));
    float _2885 = isnan(0.0) ? cbMtdParam._m0[9u].z : (isnan(cbMtdParam._m0[9u].z) ? 0.0 : max(cbMtdParam._m0[9u].z, 0.0));
    float _345 = isnan(1.0) ? _2885 : (isnan(_2885) ? 1.0 : min(_2885, 1.0));
    float _2896 = isnan(0.0) ? cbMtdParam._m0[10u].z : (isnan(cbMtdParam._m0[10u].z) ? 0.0 : max(cbMtdParam._m0[10u].z, 0.0));
    float _346 = isnan(1.0) ? _2896 : (isnan(_2896) ? 1.0 : min(_2896, 1.0));
    float _351 = _302 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _391 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _400 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _391);
    float _401 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _391);
    float _402 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _391);
    float _406 = inversesqrt(dot(vec3(_400, _401, _402), vec3(_400, _401, _402)));
    float _407 = _400 * _406;
    float _408 = _401 * _406;
    float _409 = _402 * _406;
    vec4 _414 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _416 = _414.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _621 = sqrt(((_400 * _400) + (_401 * _401)) + (_402 * _402));
        float _627 = (cbMatDynParam._m0[5u].x * _621) + cbMatDynParam._m0[5u].y;
        float _2907 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
        float _628 = isnan(1.0) ? _2907 : (isnan(_2907) ? 1.0 : min(_2907, 1.0));
        float _632 = (cbMatDynParam._m0[5u].z * _621) + cbMatDynParam._m0[5u].w;
        float _2918 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2918 : (isnan(_2918) ? 1.0 : min(_2918, 1.0))) - _628)) + _628) < ((_416 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _427 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _428 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _448 = fma(_341, cbSceneParam._m0[5u].z, fma(_340, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _339));
    float _451 = fma(_341, cbSceneParam._m0[6u].z, fma(_340, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _339));
    float _454 = fma(_341, cbSceneParam._m0[7u].z, fma(_340, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _339));
    float _455 = _343 * 3.3333332538604736328125;
    float _457 = _344 * 3.3333332538604736328125;
    float _458 = _345 * 3.3333332538604736328125;
    float _466 = ((isnan(1.0) ? _455 : (isnan(_455) ? 1.0 : min(_455, 1.0))) * 0.0314955823123455047607421875) + 0.0039369477890431880950927734375;
    float _468 = ((isnan(1.0) ? _457 : (isnan(_457) ? 1.0 : min(_457, 1.0))) * 0.0314955823123455047607421875) + 0.0039369477890431880950927734375;
    float _469 = ((isnan(1.0) ? _458 : (isnan(_458) ? 1.0 : min(_458, 1.0))) * 0.0314955823123455047607421875) + 0.0039369477890431880950927734375;
    float _475 = (_343 + (-0.0599999986588954925537109375)) + (isnan(_466) ? 0.0 : (isnan(0.0) ? _466 : max(0.0, _466)));
    float _477 = (_344 + (-0.0599999986588954925537109375)) + (isnan(_468) ? 0.0 : (isnan(0.0) ? _468 : max(0.0, _468)));
    float _479 = (_345 + (-0.0599999986588954925537109375)) + (isnan(_469) ? 0.0 : (isnan(0.0) ? _469 : max(0.0, _469)));
    float _491 = (_475 * _475) - ((0.02999999932944774627685546875 - _343) * 0.119999997317790985107421875);
    float _492 = (_477 * _477) - ((0.02999999932944774627685546875 - _344) * 0.119999997317790985107421875);
    float _493 = (_479 * _479) - ((0.02999999932944774627685546875 - _345) * 0.119999997317790985107421875);
    float _503 = (sqrt(isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0))) - _475) * 16.666667938232421875;
    float _505 = (sqrt(isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0))) - _477) * 16.666667938232421875;
    float _506 = (sqrt(isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0))) - _479) * 16.666667938232421875;
    float _507 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _508 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _509 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _520 = (((isnan(1.0) ? _508 : (isnan(_508) ? 1.0 : min(_508, 1.0))) * 0.58700001239776611328125) + ((isnan(1.0) ? _507 : (isnan(_507) ? 1.0 : min(_507, 1.0))) * 0.29890000820159912109375)) + ((isnan(1.0) ? _509 : (isnan(_509) ? 1.0 : min(_509, 1.0))) * 0.114000000059604644775390625);
    float _521 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    vec4 _530 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _427, cbSceneParam._m0[86u].y * _428));
    float _533 = _530.x * TEXCOORD.z;
    float _534 = dot(vec3(_339, _340, _341), vec3(_407, _408, _409));
    float _537 = _534 * 2.0;
    float _542 = (_537 * _339) - _407;
    float _543 = (_537 * _340) - _408;
    float _544 = (_537 * _341) - _409;
    float _548 = abs(dot(vec3(_407, _408, _409), vec3(_339, _340, _341)));
    float _3014 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _549 = isnan(1.0) ? _3014 : (isnan(_3014) ? 1.0 : min(_3014, 1.0));
    float _555 = sqrt(_346);
    float _567 = exp2((_555 * 5.0) * log2(1.0 - (_549 * 0.999000012874603271484375))) / (4.0 - (_555 * 3.0));
    float _573 = (1.0 - _567) * ((_555 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _574 = _567 * _555;
    float _602 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _606 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _610 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _806;
    float _808;
    float _809;
    float _810;
    float _811;
    float _812;
    float _813;
    float _814;
    float _815;
    float _816;
    float _817;
    float _818;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _666 = fma(_610, cbModelParam._m0[26u].z, fma(_606, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _602));
        float _670 = fma(_610, cbModelParam._m0[27u].z, fma(_606, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _602));
        float _674 = fma(_610, cbModelParam._m0[28u].z, fma(_606, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _602));
        float _699 = _602 + _339;
        float _700 = _606 + _340;
        float _701 = _610 + _341;
        float _711 = fma(_701, cbModelParam._m0[26u].z, fma(_700, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _699)) - _666;
        float _712 = fma(_701, cbModelParam._m0[27u].z, fma(_700, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _699)) - _670;
        float _713 = fma(_701, cbModelParam._m0[28u].z, fma(_700, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _699)) - _674;
        float _717 = inversesqrt(dot(vec3(_711, _712, _713), vec3(_711, _712, _713)));
        float _730 = ((_717 * _711) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_666 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _731 = ((_717 * _712) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_670 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _732 = ((_717 * _713) / cbModelParam._m0[34u].z) + ((((((_674 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _735 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_730, _731, _732), 0.0);
        vec4 _742 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_730, _731, _732), 0.0);
        vec4 _749 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_730, _731, _732), 0.0);
        vec4 _756 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_730, _731, _732), 0.0);
        float _769 = exp2((_735.w + (-0.5)) * 20.0) * 2.0;
        float _779 = exp2((_742.w + (-0.5)) * 20.0) * 2.0;
        float _789 = exp2((_749.w + (-0.5)) * 20.0) * 2.0;
        float _799 = exp2((_756.w + (-0.5)) * 20.0) * 2.0;
        float _800 = _799 * (_756.x + (-0.5));
        float _801 = _799 * (_756.y + (-0.5));
        float _802 = _799 * (_756.z + (-0.5));
        _806 = _769 * (_735.z + (-0.5));
        _808 = _769 * (_735.y + (-0.5));
        _809 = _769 * (_735.x + (-0.5));
        _810 = _779 * (_742.z + (-0.5));
        _811 = _779 * (_742.y + (-0.5));
        _812 = _779 * (_742.x + (-0.5));
        _813 = _789 * (_749.z + (-0.5));
        _814 = _789 * (_749.y + (-0.5));
        _815 = _789 * (_749.x + (-0.5));
        _816 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
        _817 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
        _818 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    }
    else
    {
        _806 = _807;
        _808 = _807;
        _809 = _807;
        _810 = _807;
        _811 = _807;
        _812 = _807;
        _813 = _807;
        _814 = _807;
        _815 = _807;
        _816 = _807;
        _817 = _807;
        _818 = _807;
    }
    float _983;
    float _984;
    float _985;
    float _986;
    float _987;
    float _988;
    float _989;
    float _990;
    float _991;
    float _992;
    float _993;
    float _994;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _847 = fma(_610, cbModelParam._m0[30u].z, fma(_606, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _602));
        float _851 = fma(_610, cbModelParam._m0[31u].z, fma(_606, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _602));
        float _855 = fma(_610, cbModelParam._m0[32u].z, fma(_606, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _602));
        float _878 = _602 + _339;
        float _879 = _606 + _340;
        float _880 = _610 + _341;
        float _890 = fma(_880, cbModelParam._m0[30u].z, fma(_879, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _878)) - _847;
        float _891 = fma(_880, cbModelParam._m0[31u].z, fma(_879, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _878)) - _851;
        float _892 = fma(_880, cbModelParam._m0[32u].z, fma(_879, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _878)) - _855;
        float _896 = inversesqrt(dot(vec3(_890, _891, _892), vec3(_890, _891, _892)));
        float _909 = ((_896 * _890) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_847 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _910 = ((_896 * _891) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_851 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _911 = ((_896 * _892) / cbModelParam._m0[35u].z) + ((((((_855 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _913 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_909, _910, _911), 0.0);
        vec4 _920 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_909, _910, _911), 0.0);
        vec4 _927 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_909, _910, _911), 0.0);
        vec4 _934 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_909, _910, _911), 0.0);
        float _946 = exp2((_913.w + (-0.5)) * 20.0) * 2.0;
        float _956 = exp2((_920.w + (-0.5)) * 20.0) * 2.0;
        float _966 = exp2((_927.w + (-0.5)) * 20.0) * 2.0;
        float _976 = exp2((_934.w + (-0.5)) * 20.0) * 2.0;
        float _977 = _976 * (_934.x + (-0.5));
        float _978 = _976 * (_934.y + (-0.5));
        float _979 = _976 * (_934.z + (-0.5));
        _983 = _946 * (_913.z + (-0.5));
        _984 = _946 * (_913.y + (-0.5));
        _985 = _946 * (_913.x + (-0.5));
        _986 = _956 * (_920.z + (-0.5));
        _987 = _956 * (_920.y + (-0.5));
        _988 = _956 * (_920.x + (-0.5));
        _989 = _966 * (_927.z + (-0.5));
        _990 = _966 * (_927.y + (-0.5));
        _991 = _966 * (_927.x + (-0.5));
        _992 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        _993 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        _994 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
    }
    else
    {
        _983 = _807;
        _984 = _807;
        _985 = _807;
        _986 = _807;
        _987 = _807;
        _988 = _807;
        _989 = _807;
        _990 = _807;
        _991 = _807;
        _992 = _807;
        _993 = _807;
        _994 = _807;
    }
    float _1009 = _542 * 0.5;
    float _1010 = _543 * 0.5;
    float _1011 = _544 * 0.5;
    float _1012 = dot(vec4(_1009, _1010, _1011, 1.0), vec4(_985, _988, _991, _994));
    float _1015 = dot(vec4(_1009, _1010, _1011, 1.0), vec4(_984, _987, _990, _993));
    float _1018 = dot(vec4(_1009, _1010, _1011, 1.0), vec4(_983, _986, _989, _992));
    float _1053;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1025 = dot(vec4(_1009, _1010, _1011, 1.0), vec4(_806, _810, _813, _816));
        float _1029 = dot(vec4(_1009, _1010, _1011, 1.0), vec4(_808, _811, _814, _817));
        float _1033 = dot(vec4(_1009, _1010, _1011, 1.0), vec4(_809, _812, _815, _818));
        float _1040 = dot(vec4(cbModelParam._m0[39u]), vec4(_1009, _1010, _1011, 1.0));
        _1053 = dot(vec3(isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0)), isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0)), isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1040) ? 0.0 : (isnan(0.0) ? _1040 : max(0.0, _1040))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1053 = 1.0;
    }
    float _1064;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1055 = dot(vec4(cbModelParam._m0[40u]), vec4(_1009, _1010, _1011, 1.0));
        _1064 = dot(vec3(isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0)), isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0)), isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1055) ? 0.0 : (isnan(0.0) ? _1055 : max(0.0, _1055))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1064 = 1.0;
    }
    float _1068 = (_1064 * cbModelParam._m0[1u].x) + (_1053 * (1.0 - cbModelParam._m0[1u].x));
    float _1076 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _346);
    float _1077 = isnan(_1076) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1076 : min(cbModelParam._m0[25u].z, _1076));
    float _1160;
    float _1162;
    float _1164;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1127 = fma(_610, cbModelParam._m0[13u].z, fma(_606, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _602)) + cbModelParam._m0[13u].w;
        float _1131 = fma(_610, cbModelParam._m0[14u].z, fma(_606, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _602)) + cbModelParam._m0[14u].w;
        float _1135 = fma(_610, cbModelParam._m0[15u].z, fma(_606, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _602)) + cbModelParam._m0[15u].w;
        float _1138 = fma(_544, cbModelParam._m0[13u].z, fma(_543, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _542));
        float _1141 = fma(_544, cbModelParam._m0[14u].z, fma(_543, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _542));
        float _1144 = fma(_544, cbModelParam._m0[15u].z, fma(_543, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _542));
        float _1172;
        if (_1138 > 0.0)
        {
            _1172 = abs((1.0 - _1127) / _1138);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1138 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1127 + 1.0) / _1138);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1172 = frontier_phi_19_17_ladder;
        }
        float _1520;
        if (_1141 > 0.0)
        {
            _1520 = abs((1.0 - _1131) / _1141);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1141 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1131 + 1.0) / _1141);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1520 = frontier_phi_28_24_ladder;
        }
        float _1726;
        if (_1144 > 0.0)
        {
            _1726 = abs((1.0 - _1135) / _1144);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1144 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1135 + 1.0) / _1144);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1726 = frontier_phi_40_35_ladder;
        }
        float _1728 = isnan(_1520) ? _1172 : (isnan(_1172) ? _1520 : min(_1172, _1520));
        float _1729 = isnan(_1726) ? _1728 : (isnan(_1728) ? _1726 : min(_1728, _1726));
        float _1733 = (_1729 * _1138) + _1127;
        float _1734 = (_1729 * _1141) + _1131;
        float _1735 = (_1729 * _1144) + _1135;
        float _1736 = _1729 * 9.9999997473787516355514526367188e-05;
        float _1738 = (-1.0) - _1736;
        float _1740 = _1736 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1735 > _1740) || ((_1735 < _1738) || ((_1734 > _1740) || ((_1734 < _1738) || ((_1733 < _1738) || (_1733 > _1740))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1933 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1735, cbModelParam._m0[9u].z, fma(_1734, cbModelParam._m0[9u].y, _1733 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1735, cbModelParam._m0[10u].z, fma(_1734, cbModelParam._m0[10u].y, _1733 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1735, cbModelParam._m0[11u].z, fma(_1734, cbModelParam._m0[11u].y, _1733 * cbModelParam._m0[11u].x))), _1077);
            frontier_phi_18_40_ladder = _1933.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _1933.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _1933.x * cbModelParam._m0[1u].y;
        }
        _1160 = frontier_phi_18_40_ladder_2;
        _1162 = frontier_phi_18_40_ladder_1;
        _1164 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1148 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_542, _543, _544), _1077);
        _1160 = _1148.x * cbModelParam._m0[1u].y;
        _1162 = _1148.y * cbModelParam._m0[1u].y;
        _1164 = _1148.z * cbModelParam._m0[1u].y;
    }
    float _1168 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _346);
    float _1169 = isnan(_1168) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1168 : min(cbModelParam._m0[25u].w, _1168));
    float _1262;
    float _1264;
    float _1266;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1226 = fma(_610, cbModelParam._m0[21u].z, fma(_606, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _602)) + cbModelParam._m0[21u].w;
        float _1230 = fma(_610, cbModelParam._m0[22u].z, fma(_606, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _602)) + cbModelParam._m0[22u].w;
        float _1234 = fma(_610, cbModelParam._m0[23u].z, fma(_606, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _602)) + cbModelParam._m0[23u].w;
        float _1237 = fma(_544, cbModelParam._m0[21u].z, fma(_543, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _542));
        float _1240 = fma(_544, cbModelParam._m0[22u].z, fma(_543, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _542));
        float _1243 = fma(_544, cbModelParam._m0[23u].z, fma(_543, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _542));
        float _1525;
        if (_1237 > 0.0)
        {
            _1525 = abs((1.0 - _1226) / _1237);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1237 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1226 + 1.0) / _1237);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1525 = frontier_phi_30_26_ladder;
        }
        float _1753;
        if (_1240 > 0.0)
        {
            _1753 = abs((1.0 - _1230) / _1240);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1240 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1230 + 1.0) / _1240);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1753 = frontier_phi_42_37_ladder;
        }
        float _2055;
        if (_1243 > 0.0)
        {
            _2055 = abs((1.0 - _1234) / _1243);
        }
        else
        {
            float frontier_phi_53_48_ladder;
            if (_1243 < 0.0)
            {
                frontier_phi_53_48_ladder = abs((_1234 + 1.0) / _1243);
            }
            else
            {
                frontier_phi_53_48_ladder = 5000.0;
            }
            _2055 = frontier_phi_53_48_ladder;
        }
        float _2057 = isnan(_1753) ? _1525 : (isnan(_1525) ? _1753 : min(_1525, _1753));
        float _2058 = isnan(_2055) ? _2057 : (isnan(_2057) ? _2055 : min(_2057, _2055));
        float _2062 = (_2058 * _1237) + _1226;
        float _2063 = (_2058 * _1240) + _1230;
        float _2064 = (_2058 * _1243) + _1234;
        float _2065 = _2058 * 9.9999997473787516355514526367188e-05;
        float _2066 = (-1.0) - _2065;
        float _2068 = _2065 + 1.0;
        float frontier_phi_27_53_ladder;
        float frontier_phi_27_53_ladder_1;
        float frontier_phi_27_53_ladder_2;
        if ((_2064 > _2068) || ((_2064 < _2066) || ((_2063 > _2068) || ((_2063 < _2066) || ((_2062 < _2066) || (_2062 > _2068))))))
        {
            frontier_phi_27_53_ladder = 0.0;
            frontier_phi_27_53_ladder_1 = 0.0;
            frontier_phi_27_53_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2190 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2064, cbModelParam._m0[17u].z, fma(_2063, cbModelParam._m0[17u].y, _2062 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2064, cbModelParam._m0[18u].z, fma(_2063, cbModelParam._m0[18u].y, _2062 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2064, cbModelParam._m0[19u].z, fma(_2063, cbModelParam._m0[19u].y, _2062 * cbModelParam._m0[19u].x))), _1169);
            frontier_phi_27_53_ladder = _2190.y * cbModelParam._m0[1u].z;
            frontier_phi_27_53_ladder_1 = _2190.x * cbModelParam._m0[1u].z;
            frontier_phi_27_53_ladder_2 = _2190.z * cbModelParam._m0[1u].z;
        }
        _1262 = frontier_phi_27_53_ladder_1;
        _1264 = frontier_phi_27_53_ladder;
        _1266 = frontier_phi_27_53_ladder_2;
    }
    else
    {
        vec4 _1246 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_542, _543, _544), _1169);
        _1262 = _1246.x * cbModelParam._m0[1u].z;
        _1264 = _1246.y * cbModelParam._m0[1u].z;
        _1266 = _1246.z * cbModelParam._m0[1u].z;
    }
    float _1279 = (((_573 * _343) + _574) * _533) * ((cbModelParam._m0[1u].w * (_1262 - _1160)) + _1160);
    float _1281 = (((_573 * _344) + _574) * _533) * ((cbModelParam._m0[1u].w * (_1264 - _1162)) + _1162);
    float _1283 = (((_573 * _345) + _574) * _533) * ((cbModelParam._m0[1u].w * (_1266 - _1164)) + _1164);
    float _1304 = fma(_1283, cbSceneParam._m0[89u].z, fma(_1281, cbSceneParam._m0[89u].y, _1279 * cbSceneParam._m0[89u].x));
    float _1307 = fma(_1283, cbSceneParam._m0[90u].z, fma(_1281, cbSceneParam._m0[90u].y, _1279 * cbSceneParam._m0[90u].x));
    float _1310 = fma(_1283, cbSceneParam._m0[91u].z, fma(_1281, cbSceneParam._m0[91u].y, _1279 * cbSceneParam._m0[91u].x));
    uint _1317 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1321 = floatBitsToUint(cbInstanceData._m0[_1317 + 5u]);
    uint _1323 = _1321.x * 14u;
    uint _1324 = _1323 + 13u;
    float _1330 = _533 + (-1.0);
    float _1335 = (cbLight._m0[_1324].x * _1330) + 1.0;
    float _1336 = (cbLight._m0[_1324].y * _1330) + 1.0;
    float _1337 = (cbLight._m0[_1324].w * _1330) + 1.0;
    uint _1341 = _1323 + 8u;
    float _1357 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1323].w)) * _346) * 0.949999988079071044921875);
    float _1358 = _1357 * _1357;
    float _1359 = cbLight._m0[_1323].x + _407;
    float _1360 = cbLight._m0[_1323].y + _408;
    float _1361 = cbLight._m0[_1323].z + _409;
    float _1365 = inversesqrt(dot(vec3(_1359, _1360, _1361), vec3(_1359, _1360, _1361)));
    float _1366 = _1365 * _1359;
    float _1367 = _1365 * _1360;
    float _1368 = _1365 * _1361;
    float _1369 = dot(vec3(_339, _340, _341), vec3(cbLight._m0[_1323].xyz));
    float _3140 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
    float _1372 = isnan(1.0) ? _3140 : (isnan(_3140) ? 1.0 : min(_3140, 1.0));
    float _3151 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _1373 = isnan(1.0) ? _3151 : (isnan(_3151) ? 1.0 : min(_3151, 1.0));
    float _1374 = dot(vec3(_339, _340, _341), vec3(_1366, _1367, _1368));
    float _3162 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
    float _1377 = isnan(1.0) ? _3162 : (isnan(_3162) ? 1.0 : min(_3162, 1.0));
    float _1378 = dot(vec3(cbLight._m0[_1323].xyz), vec3(_1366, _1367, _1368));
    float _3173 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
    float _1382 = _1358 * _1358;
    float _1386 = ((_1377 * _1377) * (_1382 + (-1.0))) + 1.0;
    float _1394 = exp2(log2(1.0 - (isnan(1.0) ? _3173 : (isnan(_3173) ? 1.0 : min(_3173, 1.0)))) * 5.0);
    float _1395 = 1.0 - _343;
    float _1396 = 1.0 - _344;
    float _1397 = 1.0 - _345;
    float _1404 = 1.0 - _1358;
    float _1415 = (0.5 / (((_1373 * ((_1372 * _1404) + _1358)) + 9.9999999392252902907785028219223e-09) + (((_1373 * _1404) + _1358) * _1372))) * _1372;
    float _3184 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
    float _1417 = (isnan(1.0) ? _3184 : (isnan(_3184) ? 1.0 : min(_3184, 1.0))) * (_1382 / ((_1386 * _1386) * 3.141590118408203125));
    float _1418 = isnan(1.0) ? _1335 : (isnan(_1335) ? 1.0 : min(_1335, 1.0));
    uint _1428 = _1323 | 1u;
    uint _1432 = _1323 + 9u;
    float _1446 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1428].w)) * _346) * 0.949999988079071044921875);
    float _1447 = _1446 * _1446;
    float _1448 = cbLight._m0[_1428].x + _407;
    float _1449 = cbLight._m0[_1428].y + _408;
    float _1450 = cbLight._m0[_1428].z + _409;
    float _1454 = inversesqrt(dot(vec3(_1448, _1449, _1450), vec3(_1448, _1449, _1450)));
    float _1455 = _1454 * _1448;
    float _1456 = _1454 * _1449;
    float _1457 = _1454 * _1450;
    float _1458 = dot(vec3(_339, _340, _341), vec3(cbLight._m0[_1428].xyz));
    float _3200 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
    float _1461 = isnan(1.0) ? _3200 : (isnan(_3200) ? 1.0 : min(_3200, 1.0));
    float _1462 = dot(vec3(_339, _340, _341), vec3(_1455, _1456, _1457));
    float _3211 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
    float _1465 = isnan(1.0) ? _3211 : (isnan(_3211) ? 1.0 : min(_3211, 1.0));
    float _1466 = dot(vec3(cbLight._m0[_1428].xyz), vec3(_1455, _1456, _1457));
    float _3222 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
    float _1470 = _1447 * _1447;
    float _1474 = ((_1465 * _1465) * (_1470 + (-1.0))) + 1.0;
    float _1481 = exp2(log2(1.0 - (isnan(1.0) ? _3222 : (isnan(_3222) ? 1.0 : min(_3222, 1.0)))) * 5.0);
    float _1488 = 1.0 - _1447;
    float _1498 = (0.5 / (((_1373 * ((_1461 * _1488) + _1447)) + 9.9999999392252902907785028219223e-09) + (((_1373 * _1488) + _1447) * _1461))) * _1461;
    float _3233 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
    float _1500 = (isnan(1.0) ? _3233 : (isnan(_3233) ? 1.0 : min(_3233, 1.0))) * (_1470 / ((_1474 * _1474) * 3.141590118408203125));
    float _1501 = isnan(1.0) ? _1336 : (isnan(_1336) ? 1.0 : min(_1336, 1.0));
    float _1511 = (((((_1481 * _1395) + _343) * cbLight._m0[_1432].x) * _1500) * _1501) + (((((_1394 * _1395) + _343) * cbLight._m0[_1341].x) * _1417) * _1418);
    float _1512 = (((((_1481 * _1396) + _344) * cbLight._m0[_1432].y) * _1500) * _1501) + (((((_1394 * _1396) + _344) * cbLight._m0[_1341].y) * _1417) * _1418);
    float _1513 = (((((_1481 * _1397) + _345) * cbLight._m0[_1432].z) * _1500) * _1501) + (((((_1394 * _1397) + _345) * cbLight._m0[_1341].z) * _1417) * _1418);
    uvec4 _1517 = floatBitsToUint(cbLight._m0[_1323 + 12u]);
    float _1530;
    float _1532;
    float _1534;
    if (_1517.x == 0u)
    {
        _1530 = _1511;
        _1532 = _1512;
        _1534 = _1513;
    }
    else
    {
        float _1540 = (cbLight._m0[_1324].z * _1330) + 1.0;
        uint _1541 = _1323 + 2u;
        uint _1545 = _1323 + 10u;
        float _1559 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1541].w)) * _346) * 0.949999988079071044921875);
        float _1560 = _1559 * _1559;
        float _1561 = cbLight._m0[_1541].x + _407;
        float _1562 = cbLight._m0[_1541].y + _408;
        float _1563 = cbLight._m0[_1541].z + _409;
        float _1567 = inversesqrt(dot(vec3(_1561, _1562, _1563), vec3(_1561, _1562, _1563)));
        float _1568 = _1567 * _1561;
        float _1569 = _1567 * _1562;
        float _1570 = _1567 * _1563;
        float _1571 = dot(vec3(_339, _340, _341), vec3(cbLight._m0[_1541].xyz));
        float _3249 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1574 = isnan(1.0) ? _3249 : (isnan(_3249) ? 1.0 : min(_3249, 1.0));
        float _1575 = dot(vec3(_339, _340, _341), vec3(_1568, _1569, _1570));
        float _3260 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1578 = isnan(1.0) ? _3260 : (isnan(_3260) ? 1.0 : min(_3260, 1.0));
        float _1579 = dot(vec3(cbLight._m0[_1541].xyz), vec3(_1568, _1569, _1570));
        float _3271 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1583 = _1560 * _1560;
        float _1587 = ((_1578 * _1578) * (_1583 + (-1.0))) + 1.0;
        float _1594 = exp2(log2(1.0 - (isnan(1.0) ? _3271 : (isnan(_3271) ? 1.0 : min(_3271, 1.0)))) * 5.0);
        float _1601 = 1.0 - _1560;
        float _1611 = (0.5 / (((_1373 * ((_1574 * _1601) + _1560)) + 9.9999999392252902907785028219223e-09) + (((_1373 * _1601) + _1560) * _1574))) * _1574;
        float _3282 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1613 = (isnan(1.0) ? _3282 : (isnan(_3282) ? 1.0 : min(_3282, 1.0))) * (_1583 / ((_1587 * _1587) * 3.141590118408203125));
        float _1614 = isnan(1.0) ? _1540 : (isnan(_1540) ? 1.0 : min(_1540, 1.0));
        _1530 = (((((_1594 * _1395) + _343) * cbLight._m0[_1545].x) * _1613) * _1614) + _1511;
        _1532 = (((((_1594 * _1396) + _344) * cbLight._m0[_1545].y) * _1613) * _1614) + _1512;
        _1534 = (((((_1594 * _1397) + _345) * cbLight._m0[_1545].z) * _1613) * _1614) + _1513;
    }
    float _1632;
    float _1634;
    float _1636;
    if (_1517.y == 0u)
    {
        _1632 = _1530;
        _1634 = _1532;
        _1636 = _1534;
    }
    else
    {
        uint _1643 = _1323 + 3u;
        uint _1647 = _1323 + 11u;
        float _1661 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1643].w)) * _346) * 0.949999988079071044921875);
        float _1662 = _1661 * _1661;
        float _1663 = cbLight._m0[_1643].x + _407;
        float _1664 = cbLight._m0[_1643].y + _408;
        float _1665 = cbLight._m0[_1643].z + _409;
        float _1669 = inversesqrt(dot(vec3(_1663, _1664, _1665), vec3(_1663, _1664, _1665)));
        float _1670 = _1669 * _1663;
        float _1671 = _1669 * _1664;
        float _1672 = _1669 * _1665;
        float _1673 = dot(vec3(_339, _340, _341), vec3(cbLight._m0[_1643].xyz));
        float _3298 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
        float _1676 = isnan(1.0) ? _3298 : (isnan(_3298) ? 1.0 : min(_3298, 1.0));
        float _1677 = dot(vec3(_339, _340, _341), vec3(_1670, _1671, _1672));
        float _3309 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1680 = isnan(1.0) ? _3309 : (isnan(_3309) ? 1.0 : min(_3309, 1.0));
        float _1681 = dot(vec3(cbLight._m0[_1643].xyz), vec3(_1670, _1671, _1672));
        float _3320 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
        float _1685 = _1662 * _1662;
        float _1689 = ((_1680 * _1680) * (_1685 + (-1.0))) + 1.0;
        float _1696 = exp2(log2(1.0 - (isnan(1.0) ? _3320 : (isnan(_3320) ? 1.0 : min(_3320, 1.0)))) * 5.0);
        float _1703 = 1.0 - _1662;
        float _1713 = (0.5 / (((_1373 * ((_1676 * _1703) + _1662)) + 9.9999999392252902907785028219223e-09) + (((_1373 * _1703) + _1662) * _1676))) * _1676;
        float _3331 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
        float _1715 = (isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0))) * (_1685 / ((_1689 * _1689) * 3.141590118408203125));
        float _1716 = isnan(1.0) ? _1337 : (isnan(_1337) ? 1.0 : min(_1337, 1.0));
        _1632 = (((((_1696 * _1395) + _343) * cbLight._m0[_1647].x) * _1715) * _1716) + _1530;
        _1634 = (((((_1696 * _1396) + _344) * cbLight._m0[_1647].y) * _1715) * _1716) + _1532;
        _1636 = (((((_1696 * _1397) + _345) * cbLight._m0[_1647].z) * _1715) * _1716) + _1534;
    }
    float _1857;
    float _1859;
    float _1861;
    if (_1321.y == 0u)
    {
        float _1797 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1798 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1797;
        float _1799 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1797;
        float _1800 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1797;
        uvec4 _1812 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1813 = _1812.x;
        uint _1824 = uint((float(_1812.y) * floor(float(uint(cbSceneParam._m0[85u].y * _428) / _1813))) + floor(float(uint(cbSceneParam._m0[85u].x * _427) / _1813)));
        float _1834 = (log2(_1800 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1835 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
        uint _1838 = uint(isnan(14.0) ? _1835 : (isnan(_1835) ? 14.0 : min(_1835, 14.0)));
        uvec4 _1843 = texelFetch(g_lightClusterGridBuffer, int(((_1838 << 2u) + (_1824 << 6u)) >> 2u));
        uint _1844 = _1843.x;
        uint _1845 = _1812.z;
        float _1942;
        float _1944;
        float _1946;
        if (((((1u << ((_1845 >> 4u) & 15u)) + 4294967295u) & _1844) == 0u) || ((_1845 & 240u) == 0u))
        {
            _1942 = 0.0;
            _1944 = 0.0;
            _1946 = 0.0;
        }
        else
        {
            float _1943;
            float _1945;
            float _1947;
            float _2104 = 0.0;
            float _2105 = 0.0;
            float _2106 = 0.0;
            uint _2107 = 0u;
            uint _2116;
            bool _2117;
            for (;;)
            {
                _2116 = texelFetch(g_lightClassification, int((((_1838 << 5u) + (_1824 << 9u)) + (_2107 << 2u)) >> 2u)).x;
                _2117 = _2116 == 0u;
                float frontier_phi_64_pred;
                float frontier_phi_64_pred_1;
                float frontier_phi_64_pred_2;
                if (_2117)
                {
                    frontier_phi_64_pred = _2106;
                    frontier_phi_64_pred_1 = _2105;
                    frontier_phi_64_pred_2 = _2104;
                }
                else
                {
                    float _2262;
                    float _2263;
                    float _2264;
                    uint _2265;
                    _2262 = _2104;
                    _2263 = _2105;
                    _2264 = _2106;
                    _2265 = _2116;
                    float _2195;
                    float _2196;
                    float _2197;
                    for (;;)
                    {
                        uint _2269 = uint(findLSB(_2265)) + (_2107 << 5u);
                        uint _2266 = (_2265 + 4294967295u) & _2265;
                        uint _2271 = _2269 * 48u;
                        vec4 _2285 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2271)).x, texelFetch(g_PointLightRenderingBuffer, int(_2271 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2271 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2271 + 3u)).x));
                        uint _2302 = (_2269 * 48u) + 8u;
                        vec3 _2313 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2302)).x, texelFetch(g_PointLightRenderingBuffer, int(_2302 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2302 + 2u)).x));
                        float _2317 = _2285.x - _1798;
                        float _2318 = _2285.y - _1799;
                        float _2319 = _2285.z - _1800;
                        float _2320 = dot(vec3(_2317, _2318, _2319), vec3(_2317, _2318, _2319));
                        float _2323 = inversesqrt(_2320);
                        float _2324 = _2323 * _2317;
                        float _2325 = _2323 * _2318;
                        float _2326 = _2323 * _2319;
                        float _2332 = 1.0 - (_2320 * _2285.w);
                        float _3357 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
                        float _2334 = sqrt(_2320) * uintBitsToFloat(uvec4(_2292, _2293, _2294, texelFetch(g_PointLightRenderingBuffer, int(((_2269 * 48u) + 4u) + 3u)).x)).w;
                        float _2338 = _2334 * _2334;
                        float _2339 = (-0.0) - _1798;
                        float _2340 = (-0.0) - _1799;
                        float _2341 = (-0.0) - _1800;
                        float _2345 = inversesqrt(dot(vec3(_2339, _2340, _2341), vec3(_2339, _2340, _2341)));
                        float _2346 = _2345 * _2339;
                        float _2347 = _2345 * _2340;
                        float _2348 = _2345 * _2341;
                        float _2356 = exp2(log2(1.0 / ((_2338 * 3.5) + 5.0)) * 0.25);
                        float _2357 = 1.0 - _555;
                        float _2364 = sqrt(1.0 - ((1.0 - (_2357 * _2357)) * (1.0 - (_2356 * _2356))));
                        float _2365 = _2364 * _2364;
                        float _2366 = _2365 * _2365;
                        float _2367 = _2346 + _2324;
                        float _2368 = _2347 + _2325;
                        float _2369 = _2348 + _2326;
                        float _2373 = inversesqrt(dot(vec3(_2367, _2368, _2369), vec3(_2367, _2368, _2369)));
                        float _2377 = dot(vec3(_448, _451, _454), vec3(_2346, _2347, _2348));
                        float _3368 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
                        float _2380 = isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0));
                        float _2381 = dot(vec3(_448, _451, _454), vec3(_2373 * _2367, _2373 * _2368, _2373 * _2369));
                        float _3379 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
                        float _2384 = isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0));
                        float _2388 = ((_2384 * _2384) * (_2366 + (-1.0))) + 1.0;
                        float _2389 = (1.39999997615814208984375 / (_2334 + 1.39999997615814208984375)) * _2365;
                        float _2390 = _2389 * _2389;
                        float _2393 = ((1.0 - _2390) * dot(vec3(_448, _451, _454), vec3(_2324, _2325, _2326))) + _2390;
                        float _3390 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
                        float _2394 = isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0));
                        float _2395 = 1.0 - _2365;
                        float _2405 = (0.5 / (((_2394 * ((_2380 * _2395) + _2365)) + 9.9999999392252902907785028219223e-09) + (((_2394 * _2395) + _2365) * _2380))) * _2394;
                        float _3401 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
                        float _2416 = (((_2366 * 3.1415927410125732421875) * (isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0)))) / ((_2388 * _2388) * ((_2338 * 2.1991131305694580078125) + 3.141590118408203125))) * (isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0)));
                        _2195 = (_2416 * _2313.x) + _2262;
                        _2196 = (_2416 * _2313.y) + _2263;
                        _2197 = (_2416 * _2313.z) + _2264;
                        if (_2266 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2262 = _2195;
                            _2263 = _2196;
                            _2264 = _2197;
                            _2265 = _2266;
                        }
                    }
                    frontier_phi_64_pred = _2197;
                    frontier_phi_64_pred_1 = _2196;
                    frontier_phi_64_pred_2 = _2195;
                }
                _1947 = frontier_phi_64_pred;
                _1945 = frontier_phi_64_pred_1;
                _1943 = frontier_phi_64_pred_2;
                uint _2108 = _2107 + 1u;
                if (_2108 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2104 = _1943;
                    _2105 = _1945;
                    _2106 = _1947;
                    _2107 = _2108;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1942 = _1943;
            _1944 = _1945;
            _1946 = _1947;
        }
        uvec4 _1950 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1951 = _1950.z;
        uint _1953 = (_1951 >> 8u) & 15u;
        float _2081;
        float _2083;
        float _2085;
        if (((4294967295u << _1953) & _1844) == 0u)
        {
            _2081 = _1942;
            _2083 = _1944;
            _2085 = _1946;
        }
        else
        {
            float _2097 = inversesqrt(dot(vec3(_1798, _1799, _1800), vec3(_1798, _1799, _1800)));
            float _2098 = _2097 * _1798;
            float _2099 = _2097 * _1799;
            float _2100 = _2097 * _1800;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            if (_1953 < ((_1951 >> 12u) & 15u))
            {
                float _2082;
                float _2084;
                float _2086;
                float _2248 = _1942;
                float _2249 = _1944;
                float _2250 = _1946;
                uint _2251 = _1953;
                uint _2260;
                bool _2261;
                for (;;)
                {
                    _2260 = texelFetch(g_lightClassification, int((((_1838 << 5u) + (_1824 << 9u)) + (_2251 << 2u)) >> 2u)).x;
                    _2261 = _2260 == 0u;
                    float frontier_phi_75_pred;
                    float frontier_phi_75_pred_1;
                    float frontier_phi_75_pred_2;
                    if (_2261)
                    {
                        frontier_phi_75_pred = _2250;
                        frontier_phi_75_pred_1 = _2249;
                        frontier_phi_75_pred_2 = _2248;
                    }
                    else
                    {
                        float _2430;
                        float _2431;
                        float _2432;
                        float _2696;
                        float _2697;
                        float _2698;
                        float _2440 = _2248;
                        float _2441 = _2249;
                        float _2442 = _2250;
                        uint _2443 = _2260;
                        uint _2444;
                        uint _2454;
                        vec4 _2469;
                        float _2470;
                        vec3 _2482;
                        vec4 _2498;
                        vec4 _2514;
                        float _2561;
                        bool _2562;
                        for (;;)
                        {
                            _2454 = ((_2251 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2443));
                            _2444 = (_2443 + 4294967295u) & _2443;
                            uint _2456 = _2454 * 40u;
                            _2469 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2456)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2456 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2456 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2456 + 3u)).x));
                            _2470 = _2469.w;
                            uint _2472 = (_2454 * 40u) + 8u;
                            _2482 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2472)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2472 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2472 + 2u)).x));
                            uint _2485 = (_2454 * 40u) + 16u;
                            _2498 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2485)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2485 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2485 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2485 + 3u)).x));
                            uint _2501 = (_2454 * 40u) + 20u;
                            _2514 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2501)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2501 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2501 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2501 + 3u)).x));
                            uint _2517 = (_2454 * 40u) + 24u;
                            vec4 _2530 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2517)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2517 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2517 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2517 + 3u)).x));
                            uint _2536 = (_2454 * 40u) + 28u;
                            vec4 _2549 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2536)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2536 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2536 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2536 + 3u)).x));
                            _2561 = fma(_1800, _2549.z, fma(_1799, _2549.y, _2549.x * _1798)) + _2549.w;
                            _2562 = !((fma(_1800, _2530.z, fma(_1799, _2530.y, _2530.x * _1798)) + _2530.w) <= 0.0);
                            float frontier_phi_81_pred;
                            float frontier_phi_81_pred_1;
                            float frontier_phi_81_pred_2;
                            if (_2562)
                            {
                                float _2596 = _2469.x - _1798;
                                float _2597 = _2469.y - _1799;
                                float _2598 = _2469.z - _1800;
                                float _2599 = dot(vec3(_2596, _2597, _2598), vec3(_2596, _2597, _2598));
                                float _2602 = inversesqrt(_2599);
                                float _2603 = _2602 * _2596;
                                float _2604 = _2602 * _2597;
                                float _2605 = _2602 * _2598;
                                float _2609 = 1.0 - (_2599 / (_2470 * _2470));
                                float _3412 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
                                float _2611 = sqrt(_2599) * uintBitsToFloat(uvec4(_2565, _2566, _2567, texelFetch(g_SpotLightRenderingBuffer, int(((_2454 * 40u) + 4u) + 3u)).x)).w;
                                float _2614 = _2611 * _2611;
                                float _2615 = (fma(_1800, _2498.z, fma(_1799, _2498.y, _2498.x * _1798)) + _2498.w) / _2561;
                                float _2616 = (fma(_1800, _2514.z, fma(_1799, _2514.y, _2514.x * _1798)) + _2514.w) / _2561;
                                float _2620 = 1.0 - dot(vec2(_2615, _2616), vec2(_2615, _2616));
                                float _3423 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
                                float _2630 = exp2(log2(1.0 / ((_2614 * 3.5) + 5.0)) * 0.25);
                                float _2631 = 1.0 - _555;
                                float _2638 = sqrt(1.0 - ((1.0 - (_2631 * _2631)) * (1.0 - (_2630 * _2630))));
                                float _2639 = _2638 * _2638;
                                float _2640 = _2639 * _2639;
                                float _2641 = _2603 - _2098;
                                float _2642 = _2604 - _2099;
                                float _2643 = _2605 - _2100;
                                float _2647 = inversesqrt(dot(vec3(_2641, _2642, _2643), vec3(_2641, _2642, _2643)));
                                float _2651 = dot(vec3(_448, _451, _454), vec3((-0.0) - _2098, (-0.0) - _2099, (-0.0) - _2100));
                                float _3434 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
                                float _2654 = isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0));
                                float _2655 = dot(vec3(_448, _451, _454), vec3(_2647 * _2641, _2647 * _2642, _2647 * _2643));
                                float _3445 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
                                float _2658 = isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0));
                                float _2662 = ((_2658 * _2658) * (_2640 + (-1.0))) + 1.0;
                                float _2663 = (1.39999997615814208984375 / (_2611 + 1.39999997615814208984375)) * _2639;
                                float _2664 = _2663 * _2663;
                                float _2670 = ((1.0 - _2664) * dot(vec3(_448, _451, _454), vec3(_2603, _2604, _2605))) + _2664;
                                float _3456 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
                                float _2671 = isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0));
                                float _2672 = 1.0 - _2639;
                                float _2682 = (0.5 / (((_2671 * ((_2654 * _2672) + _2639)) + 9.9999999392252902907785028219223e-09) + (((_2671 * _2672) + _2639) * _2654))) * _2671;
                                float _3467 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
                                float _2692 = ((isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0))) * (isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0)))) * (((_2640 * 3.1415927410125732421875) * (isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0)))) / ((_2662 * _2662) * ((_2614 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_81_pred = _2692 * _2482.z;
                                frontier_phi_81_pred_1 = _2692 * _2482.y;
                                frontier_phi_81_pred_2 = _2692 * _2482.x;
                            }
                            else
                            {
                                frontier_phi_81_pred = 0.0;
                                frontier_phi_81_pred_1 = 0.0;
                                frontier_phi_81_pred_2 = 0.0;
                            }
                            _2698 = frontier_phi_81_pred;
                            _2697 = frontier_phi_81_pred_1;
                            _2696 = frontier_phi_81_pred_2;
                            _2430 = _2696 + _2440;
                            _2431 = _2697 + _2441;
                            _2432 = _2698 + _2442;
                            if (_2444 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2440 = _2430;
                                _2441 = _2431;
                                _2442 = _2432;
                                _2443 = _2444;
                                continue;
                            }
                        }
                        frontier_phi_75_pred = _2432;
                        frontier_phi_75_pred_1 = _2431;
                        frontier_phi_75_pred_2 = _2430;
                    }
                    _2086 = frontier_phi_75_pred;
                    _2084 = frontier_phi_75_pred_1;
                    _2082 = frontier_phi_75_pred_2;
                    uint _2252 = _2251 + 1u;
                    if (_2252 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2248 = _2082;
                        _2249 = _2084;
                        _2250 = _2086;
                        _2251 = _2252;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2084;
                frontier_phi_55_56_ladder_1 = _2086;
                frontier_phi_55_56_ladder_2 = _2082;
            }
            else
            {
                frontier_phi_55_56_ladder = _1944;
                frontier_phi_55_56_ladder_1 = _1946;
                frontier_phi_55_56_ladder_2 = _1942;
            }
            _2081 = frontier_phi_55_56_ladder_2;
            _2083 = frontier_phi_55_56_ladder;
            _2085 = frontier_phi_55_56_ladder_1;
        }
        float _2090 = isnan(1.0) ? _533 : (isnan(_533) ? 1.0 : min(_533, 1.0));
        _1857 = ((_2081 * _343) * _2090) + _1632;
        _1859 = ((_2083 * _344) * _2090) + _1634;
        _1861 = ((_2085 * _345) * _2090) + _1636;
    }
    else
    {
        _1857 = _1632;
        _1859 = _1634;
        _1861 = _1636;
    }
    float _1865 = 0.959999978542327880859375 - ((isnan(1.0) ? _521 : (isnan(_521) ? 1.0 : min(_521, 1.0))) * 0.959999978542327880859375);
    float _1873 = _1865 - (exp2(log2(1.0 - _549) * 5.0) * _1865);
    float _1877 = ((_1857 + ((isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0))) * _1068)) * cbPerFrame._m0[3u].x) + (((cbSceneParam._m0[72u].w * _260.x) * exp2((-0.0) - ((cbMtdParam._m0[10u].w * _318) * _319))) * _1873);
    float _1878 = ((_1859 + ((isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0))) * _1068)) * cbPerFrame._m0[3u].x) + (((cbSceneParam._m0[72u].w * _260.y) * exp2((-0.0) - ((cbMtdParam._m0[11u].x * _318) * _319))) * _1873);
    float _1879 = ((_1861 + ((isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0))) * _1068)) * cbPerFrame._m0[3u].x) + (((cbSceneParam._m0[72u].w * _260.z) * exp2((-0.0) - ((cbMtdParam._m0[11u].y * _318) * _319))) * _1873);
    uint _1880 = _1317 + 6u;
    float _1888 = _427 / cbSceneParam._m0[86u].x;
    float _1889 = _428 / cbSceneParam._m0[86u].y;
    vec4 _1903 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1888, _1889, (log2((isnan(cbSceneParam._m0[77u].w) ? _351 : (isnan(_351) ? cbSceneParam._m0[77u].w : min(_351, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1905 = _1903.x;
    float _1906 = _1903.y;
    float _1907 = _1903.z;
    float _1908 = _1903.w;
    float _1998;
    float _2000;
    float _2002;
    float _2004;
    if (_351 > cbSceneParam._m0[78u].w)
    {
        float _1961 = isnan(_351) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _351 : min(cbSceneParam._m0[80u].w, _351));
        float _1962 = _1961 / _351;
        float _1973 = _1962 * _400;
        float _1974 = _401 * _1962;
        float _1975 = (-0.0) - _1974;
        float _1976 = _1962 * _402;
        float _1978 = (cbSceneParam._m0[77u].w * _1975) / _1961;
        float _1979 = _1978 + cbSceneParam._m0[79u].w;
        float _1980 = cbSceneParam._m0[79u].w - _1974;
        float _1986 = sqrt(((_1973 * _1973) + (_1974 * _1974)) + (_1976 * _1976));
        float _1989 = (1.0 - (cbSceneParam._m0[77u].w / _1961)) * _1986;
        float _1994 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1996 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2205;
        if (abs((_1975 - _1978) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2205 = ((((_1979 > 0.0) ? exp2(_1994 * _1979) : (2.0 - exp2(_1996 * _1979))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1989;
        }
        else
        {
            float _2130 = 1.0 / cbSceneParam._m0[80u].x;
            float _2131 = isnan(_1980) ? _1979 : (isnan(_1979) ? _1980 : max(_1979, _1980));
            float _2132 = isnan(_1980) ? _1979 : (isnan(_1979) ? _1980 : min(_1979, _1980));
            float _2141 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : min(_2131, 0.0));
            float _2142 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : min(_2132, 0.0));
            _2205 = ((abs(_1986 / _1975) * cbSceneParam._m0[80u].y) * ((((_2141 - _2142) * 2.0) - ((exp2(_1994 * (isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0)))) - exp2(_1994 * (isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0))))) * _2130)) - ((exp2(_1996 * _2141) - exp2(_1996 * _2142)) * _2130))) + (_1989 * cbSceneParam._m0[80u].z);
        }
        vec4 _2207 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1888, _1889, 1.0), 0.0);
        float _2216 = exp2((_2205 * (-1.44269502162933349609375)) * (1.0 - _2207.w));
        float _2217 = log2(_2216);
        float _2233 = log2(_1908);
        _1998 = (exp2(_2233 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2217 * cbSceneParam._m0[78u].x)) * _2207.x) / cbSceneParam._m0[78u].x)) + _1905;
        _2000 = (exp2(_2233 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2217 * cbSceneParam._m0[78u].y)) * _2207.y) / cbSceneParam._m0[78u].y)) + _1906;
        _2002 = (exp2(_2233 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2217 * cbSceneParam._m0[78u].z)) * _2207.z) / cbSceneParam._m0[78u].z)) + _1907;
        _2004 = _2216 * _1908;
    }
    else
    {
        _1998 = _1905;
        _2000 = _1906;
        _2002 = _1907;
        _2004 = _1908;
    }
    bool _2243;
    vec4 _2013;
    vec4 _2035;
    float _2037;
    float _2041;
    float _2042;
    float _2043;
    float _2044;
    bool _2054;
    for (;;)
    {
        _2013 = cbMatDynParam._m0[0u];
        float _2015 = roundEven(_2013.y);
        bool _2016 = _2015 == 3.0;
        float _2017 = log2(_2004);
        float _2024 = exp2(_2017 * cbSceneParam._m0[78u].x) * _1877;
        float _2025 = exp2(_2017 * cbSceneParam._m0[78u].y) * _1878;
        float _2026 = exp2(_2017 * cbSceneParam._m0[78u].z) * _1879;
        float _2033 = _416 + (-0.5);
        _2035 = cbMtdParam._m0[1u];
        _2037 = _2035.y * _2033;
        float _2040 = (_2015 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2041 = _2040 * (_2016 ? _2024 : (_2024 + (cbSceneParam._m0[72u].w * _1998)));
        _2042 = _2040 * (_2016 ? _2025 : (_2025 + (cbSceneParam._m0[72u].w * _2000)));
        _2043 = _2040 * (_2016 ? _2026 : (_2026 + (cbSceneParam._m0[72u].w * _2002)));
        _2044 = _2033 * 0.999000012874603271484375;
        _2054 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2054)
        {
            if ((cbInstanceData._m0[_1317 + 7u].x + _2044) < 0.5)
            {
                _2243 = true;
                break;
            }
        }
        uint _2166 = (_1317 + 9u) + uint(_2013.w);
        if ((cbInstanceData._m0[_2166].w < 1.0) && ((cbInstanceData._m0[_2166].w + _2044) < 0.5))
        {
            _2243 = true;
            break;
        }
        if ((_2037 + 1.0) < _2035.x)
        {
            _2243 = true;
            break;
        }
        _2243 = false;
        break;
    }
    float _2421;
    if (_2243)
    {
        discard_state = true;
        _2421 = 0.0;
    }
    else
    {
        _2421 = cbInstanceData._m0[_1880].w;
    }
    SV_Target.x = _2041;
    SV_Target.y = _2042;
    SV_Target.z = _2043;
    SV_Target.w = _2421;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1880].w;
    discard_exit();
}


