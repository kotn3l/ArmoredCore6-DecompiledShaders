#version 460

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 45) uniform texture2D M_CrystalEx_test2_snp_0_Screen_0;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _811;
uint _2568;
uint _2569;
uint _2570;
uint _2840;
uint _2841;
uint _2842;
float _3110;
float _3111;
float _3112;
float _3113;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _162 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _163 = _162 * NORMAL.x;
    float _164 = _162 * NORMAL.y;
    float _165 = _162 * NORMAL.z;
    float _170;
    float _171;
    float _172;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _170 = (-0.0) - _163;
        _171 = (-0.0) - _164;
        _172 = (-0.0) - _165;
    }
    else
    {
        _170 = _163;
        _171 = _164;
        _172 = _165;
    }
    float _217 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _227 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _217);
    float _228 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _217);
    float _229 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _217);
    float _243 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _244 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _250 = _243 / cbSceneParam._m0[86u].x;
    float _251 = _244 / cbSceneParam._m0[86u].y;
    float _258 = isnan(cbInstanceData._m0[8u].x) ? _250 : (isnan(_250) ? cbInstanceData._m0[8u].x : max(_250, cbInstanceData._m0[8u].x));
    float _259 = isnan(cbInstanceData._m0[8u].y) ? _251 : (isnan(_251) ? cbInstanceData._m0[8u].y : max(_251, cbInstanceData._m0[8u].y));
    vec4 _264 = texture(sampler2D(M_CrystalEx_test2_snp_0_Screen_0, SS_ClampLinear), vec2(isnan(cbInstanceData._m0[8u].z) ? _258 : (isnan(_258) ? cbInstanceData._m0[8u].z : min(_258, cbInstanceData._m0[8u].z)), isnan(cbInstanceData._m0[8u].w) ? _259 : (isnan(_259) ? cbInstanceData._m0[8u].w : min(_259, cbInstanceData._m0[8u].w))));
    float _287 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _295 = abs(dot(vec4(_170, _171, _172, 0.0), vec4(_287 * _227, _287 * _228, _287 * _229, 0.0))) * cbMtdParam._m0[10u].x;
    vec4 _297 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_243, _244));
    float _299 = _297.x;
    bool _306 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _321 = (_306 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _299)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _299))) - POSITION_1.w;
    float _322 = isnan(_321) ? _295 : (isnan(_295) ? _321 : min(_295, _321));
    float _323 = log2(cbMtdParam._m0[10u].y);
    float _342 = inversesqrt(dot(vec3(_170, _171, _172), vec3(_170, _171, _172)));
    float _343 = _342 * _170;
    float _344 = _342 * _171;
    float _345 = _342 * _172;
    float _3147 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _347 = isnan(1.0) ? _3147 : (isnan(_3147) ? 1.0 : min(_3147, 1.0));
    float _3158 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _348 = isnan(1.0) ? _3158 : (isnan(_3158) ? 1.0 : min(_3158, 1.0));
    float _3169 = isnan(0.0) ? cbMtdParam._m0[9u].z : (isnan(cbMtdParam._m0[9u].z) ? 0.0 : max(cbMtdParam._m0[9u].z, 0.0));
    float _349 = isnan(1.0) ? _3169 : (isnan(_3169) ? 1.0 : min(_3169, 1.0));
    float _3180 = isnan(0.0) ? cbMtdParam._m0[10u].z : (isnan(cbMtdParam._m0[10u].z) ? 0.0 : max(cbMtdParam._m0[10u].z, 0.0));
    float _350 = isnan(1.0) ? _3180 : (isnan(_3180) ? 1.0 : min(_3180, 1.0));
    float _355 = _306 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _395 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _404 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _395);
    float _405 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _395);
    float _406 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _395);
    float _410 = inversesqrt(dot(vec3(_404, _405, _406), vec3(_404, _405, _406)));
    float _411 = _404 * _410;
    float _412 = _405 * _410;
    float _413 = _406 * _410;
    vec4 _418 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _420 = _418.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _625 = sqrt(((_404 * _404) + (_405 * _405)) + (_406 * _406));
        float _631 = (cbMatDynParam._m0[5u].x * _625) + cbMatDynParam._m0[5u].y;
        float _3191 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
        float _632 = isnan(1.0) ? _3191 : (isnan(_3191) ? 1.0 : min(_3191, 1.0));
        float _636 = (cbMatDynParam._m0[5u].z * _625) + cbMatDynParam._m0[5u].w;
        float _3202 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3202 : (isnan(_3202) ? 1.0 : min(_3202, 1.0))) - _632)) + _632) < ((_420 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _431 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _432 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _452 = fma(_345, cbSceneParam._m0[5u].z, fma(_344, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _343));
    float _455 = fma(_345, cbSceneParam._m0[6u].z, fma(_344, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _343));
    float _458 = fma(_345, cbSceneParam._m0[7u].z, fma(_344, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _343));
    float _459 = _347 * 3.3333332538604736328125;
    float _461 = _348 * 3.3333332538604736328125;
    float _462 = _349 * 3.3333332538604736328125;
    float _470 = ((isnan(1.0) ? _459 : (isnan(_459) ? 1.0 : min(_459, 1.0))) * 0.0314955823123455047607421875) + 0.0039369477890431880950927734375;
    float _472 = ((isnan(1.0) ? _461 : (isnan(_461) ? 1.0 : min(_461, 1.0))) * 0.0314955823123455047607421875) + 0.0039369477890431880950927734375;
    float _473 = ((isnan(1.0) ? _462 : (isnan(_462) ? 1.0 : min(_462, 1.0))) * 0.0314955823123455047607421875) + 0.0039369477890431880950927734375;
    float _479 = (_347 + (-0.0599999986588954925537109375)) + (isnan(_470) ? 0.0 : (isnan(0.0) ? _470 : max(0.0, _470)));
    float _481 = (_348 + (-0.0599999986588954925537109375)) + (isnan(_472) ? 0.0 : (isnan(0.0) ? _472 : max(0.0, _472)));
    float _483 = (_349 + (-0.0599999986588954925537109375)) + (isnan(_473) ? 0.0 : (isnan(0.0) ? _473 : max(0.0, _473)));
    float _495 = (_479 * _479) - ((0.02999999932944774627685546875 - _347) * 0.119999997317790985107421875);
    float _496 = (_481 * _481) - ((0.02999999932944774627685546875 - _348) * 0.119999997317790985107421875);
    float _497 = (_483 * _483) - ((0.02999999932944774627685546875 - _349) * 0.119999997317790985107421875);
    float _507 = (sqrt(isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0))) - _479) * 16.666667938232421875;
    float _509 = (sqrt(isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0))) - _481) * 16.666667938232421875;
    float _510 = (sqrt(isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0))) - _483) * 16.666667938232421875;
    float _511 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _512 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _513 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _524 = (((isnan(1.0) ? _512 : (isnan(_512) ? 1.0 : min(_512, 1.0))) * 0.58700001239776611328125) + ((isnan(1.0) ? _511 : (isnan(_511) ? 1.0 : min(_511, 1.0))) * 0.29890000820159912109375)) + ((isnan(1.0) ? _513 : (isnan(_513) ? 1.0 : min(_513, 1.0))) * 0.114000000059604644775390625);
    float _525 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    vec4 _534 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _431, cbSceneParam._m0[86u].y * _432));
    float _537 = _534.x * TEXCOORD.z;
    float _538 = dot(vec3(_343, _344, _345), vec3(_411, _412, _413));
    float _541 = _538 * 2.0;
    float _546 = (_541 * _343) - _411;
    float _547 = (_541 * _344) - _412;
    float _548 = (_541 * _345) - _413;
    float _552 = abs(dot(vec3(_411, _412, _413), vec3(_343, _344, _345)));
    float _3298 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _553 = isnan(1.0) ? _3298 : (isnan(_3298) ? 1.0 : min(_3298, 1.0));
    float _559 = sqrt(_350);
    float _571 = exp2((_559 * 5.0) * log2(1.0 - (_553 * 0.999000012874603271484375))) / (4.0 - (_559 * 3.0));
    float _577 = (1.0 - _571) * ((_559 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _578 = _571 * _559;
    float _606 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _610 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _614 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _810;
    float _812;
    float _813;
    float _814;
    float _815;
    float _816;
    float _817;
    float _818;
    float _819;
    float _820;
    float _821;
    float _822;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _670 = fma(_614, cbModelParam._m0[26u].z, fma(_610, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _606));
        float _674 = fma(_614, cbModelParam._m0[27u].z, fma(_610, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _606));
        float _678 = fma(_614, cbModelParam._m0[28u].z, fma(_610, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _606));
        float _703 = _606 + _343;
        float _704 = _610 + _344;
        float _705 = _614 + _345;
        float _715 = fma(_705, cbModelParam._m0[26u].z, fma(_704, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _703)) - _670;
        float _716 = fma(_705, cbModelParam._m0[27u].z, fma(_704, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _703)) - _674;
        float _717 = fma(_705, cbModelParam._m0[28u].z, fma(_704, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _703)) - _678;
        float _721 = inversesqrt(dot(vec3(_715, _716, _717), vec3(_715, _716, _717)));
        float _734 = ((_721 * _715) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_670 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _735 = ((_721 * _716) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_674 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _736 = ((_721 * _717) / cbModelParam._m0[34u].z) + ((((((_678 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _739 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_734, _735, _736), 0.0);
        vec4 _746 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_734, _735, _736), 0.0);
        vec4 _753 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_734, _735, _736), 0.0);
        vec4 _760 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_734, _735, _736), 0.0);
        float _773 = exp2((_739.w + (-0.5)) * 20.0) * 2.0;
        float _783 = exp2((_746.w + (-0.5)) * 20.0) * 2.0;
        float _793 = exp2((_753.w + (-0.5)) * 20.0) * 2.0;
        float _803 = exp2((_760.w + (-0.5)) * 20.0) * 2.0;
        float _804 = _803 * (_760.x + (-0.5));
        float _805 = _803 * (_760.y + (-0.5));
        float _806 = _803 * (_760.z + (-0.5));
        _810 = _773 * (_739.z + (-0.5));
        _812 = _773 * (_739.y + (-0.5));
        _813 = _773 * (_739.x + (-0.5));
        _814 = _783 * (_746.z + (-0.5));
        _815 = _783 * (_746.y + (-0.5));
        _816 = _783 * (_746.x + (-0.5));
        _817 = _793 * (_753.z + (-0.5));
        _818 = _793 * (_753.y + (-0.5));
        _819 = _793 * (_753.x + (-0.5));
        _820 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
        _821 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
        _822 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    }
    else
    {
        _810 = _811;
        _812 = _811;
        _813 = _811;
        _814 = _811;
        _815 = _811;
        _816 = _811;
        _817 = _811;
        _818 = _811;
        _819 = _811;
        _820 = _811;
        _821 = _811;
        _822 = _811;
    }
    float _987;
    float _988;
    float _989;
    float _990;
    float _991;
    float _992;
    float _993;
    float _994;
    float _995;
    float _996;
    float _997;
    float _998;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _851 = fma(_614, cbModelParam._m0[30u].z, fma(_610, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _606));
        float _855 = fma(_614, cbModelParam._m0[31u].z, fma(_610, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _606));
        float _859 = fma(_614, cbModelParam._m0[32u].z, fma(_610, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _606));
        float _882 = _606 + _343;
        float _883 = _610 + _344;
        float _884 = _614 + _345;
        float _894 = fma(_884, cbModelParam._m0[30u].z, fma(_883, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _882)) - _851;
        float _895 = fma(_884, cbModelParam._m0[31u].z, fma(_883, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _882)) - _855;
        float _896 = fma(_884, cbModelParam._m0[32u].z, fma(_883, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _882)) - _859;
        float _900 = inversesqrt(dot(vec3(_894, _895, _896), vec3(_894, _895, _896)));
        float _913 = ((_900 * _894) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_851 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _914 = ((_900 * _895) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_855 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _915 = ((_900 * _896) / cbModelParam._m0[35u].z) + ((((((_859 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _917 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_913, _914, _915), 0.0);
        vec4 _924 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_913, _914, _915), 0.0);
        vec4 _931 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_913, _914, _915), 0.0);
        vec4 _938 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_913, _914, _915), 0.0);
        float _950 = exp2((_917.w + (-0.5)) * 20.0) * 2.0;
        float _960 = exp2((_924.w + (-0.5)) * 20.0) * 2.0;
        float _970 = exp2((_931.w + (-0.5)) * 20.0) * 2.0;
        float _980 = exp2((_938.w + (-0.5)) * 20.0) * 2.0;
        float _981 = _980 * (_938.x + (-0.5));
        float _982 = _980 * (_938.y + (-0.5));
        float _983 = _980 * (_938.z + (-0.5));
        _987 = _950 * (_917.z + (-0.5));
        _988 = _950 * (_917.y + (-0.5));
        _989 = _950 * (_917.x + (-0.5));
        _990 = _960 * (_924.z + (-0.5));
        _991 = _960 * (_924.y + (-0.5));
        _992 = _960 * (_924.x + (-0.5));
        _993 = _970 * (_931.z + (-0.5));
        _994 = _970 * (_931.y + (-0.5));
        _995 = _970 * (_931.x + (-0.5));
        _996 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        _997 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        _998 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    }
    else
    {
        _987 = _811;
        _988 = _811;
        _989 = _811;
        _990 = _811;
        _991 = _811;
        _992 = _811;
        _993 = _811;
        _994 = _811;
        _995 = _811;
        _996 = _811;
        _997 = _811;
        _998 = _811;
    }
    float _1013 = _546 * 0.5;
    float _1014 = _547 * 0.5;
    float _1015 = _548 * 0.5;
    float _1016 = dot(vec4(_1013, _1014, _1015, 1.0), vec4(_989, _992, _995, _998));
    float _1019 = dot(vec4(_1013, _1014, _1015, 1.0), vec4(_988, _991, _994, _997));
    float _1022 = dot(vec4(_1013, _1014, _1015, 1.0), vec4(_987, _990, _993, _996));
    float _1057;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1029 = dot(vec4(_1013, _1014, _1015, 1.0), vec4(_810, _814, _817, _820));
        float _1033 = dot(vec4(_1013, _1014, _1015, 1.0), vec4(_812, _815, _818, _821));
        float _1037 = dot(vec4(_1013, _1014, _1015, 1.0), vec4(_813, _816, _819, _822));
        float _1044 = dot(vec4(cbModelParam._m0[39u]), vec4(_1013, _1014, _1015, 1.0));
        _1057 = dot(vec3(isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0)), isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0)), isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1044) ? 0.0 : (isnan(0.0) ? _1044 : max(0.0, _1044))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1057 = 1.0;
    }
    float _1068;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1059 = dot(vec4(cbModelParam._m0[40u]), vec4(_1013, _1014, _1015, 1.0));
        _1068 = dot(vec3(isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0)), isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0)), isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1059) ? 0.0 : (isnan(0.0) ? _1059 : max(0.0, _1059))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1068 = 1.0;
    }
    float _1072 = (_1068 * cbModelParam._m0[1u].x) + (_1057 * (1.0 - cbModelParam._m0[1u].x));
    float _1080 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _350);
    float _1081 = isnan(_1080) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1080 : min(cbModelParam._m0[25u].z, _1080));
    float _1164;
    float _1166;
    float _1168;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1131 = fma(_614, cbModelParam._m0[13u].z, fma(_610, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _606)) + cbModelParam._m0[13u].w;
        float _1135 = fma(_614, cbModelParam._m0[14u].z, fma(_610, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _606)) + cbModelParam._m0[14u].w;
        float _1139 = fma(_614, cbModelParam._m0[15u].z, fma(_610, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _606)) + cbModelParam._m0[15u].w;
        float _1142 = fma(_548, cbModelParam._m0[13u].z, fma(_547, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _546));
        float _1145 = fma(_548, cbModelParam._m0[14u].z, fma(_547, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _546));
        float _1148 = fma(_548, cbModelParam._m0[15u].z, fma(_547, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _546));
        float _1176;
        if (_1142 > 0.0)
        {
            _1176 = abs((1.0 - _1131) / _1142);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1142 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1131 + 1.0) / _1142);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1176 = frontier_phi_19_17_ladder;
        }
        float _1369;
        if (_1145 > 0.0)
        {
            _1369 = abs((1.0 - _1135) / _1145);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1145 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1135 + 1.0) / _1145);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1369 = frontier_phi_28_24_ladder;
        }
        float _1788;
        if (_1148 > 0.0)
        {
            _1788 = abs((1.0 - _1139) / _1148);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1148 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1139 + 1.0) / _1148);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1788 = frontier_phi_40_35_ladder;
        }
        float _1790 = isnan(_1369) ? _1176 : (isnan(_1176) ? _1369 : min(_1176, _1369));
        float _1791 = isnan(_1788) ? _1790 : (isnan(_1790) ? _1788 : min(_1790, _1788));
        float _1795 = (_1791 * _1142) + _1131;
        float _1796 = (_1791 * _1145) + _1135;
        float _1797 = (_1791 * _1148) + _1139;
        float _1798 = _1791 * 9.9999997473787516355514526367188e-05;
        float _1800 = (-1.0) - _1798;
        float _1802 = _1798 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1797 > _1802) || ((_1797 < _1800) || ((_1796 > _1802) || ((_1796 < _1800) || ((_1795 < _1800) || (_1795 > _1802))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1999 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1797, cbModelParam._m0[9u].z, fma(_1796, cbModelParam._m0[9u].y, _1795 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1797, cbModelParam._m0[10u].z, fma(_1796, cbModelParam._m0[10u].y, _1795 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1797, cbModelParam._m0[11u].z, fma(_1796, cbModelParam._m0[11u].y, _1795 * cbModelParam._m0[11u].x))), _1081);
            frontier_phi_18_40_ladder = _1999.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _1999.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _1999.x * cbModelParam._m0[1u].y;
        }
        _1164 = frontier_phi_18_40_ladder_2;
        _1166 = frontier_phi_18_40_ladder_1;
        _1168 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1152 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_546, _547, _548), _1081);
        _1164 = _1152.x * cbModelParam._m0[1u].y;
        _1166 = _1152.y * cbModelParam._m0[1u].y;
        _1168 = _1152.z * cbModelParam._m0[1u].y;
    }
    float _1172 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _350);
    float _1173 = isnan(_1172) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1172 : min(cbModelParam._m0[25u].w, _1172));
    float _1266;
    float _1268;
    float _1270;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1230 = fma(_614, cbModelParam._m0[21u].z, fma(_610, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _606)) + cbModelParam._m0[21u].w;
        float _1234 = fma(_614, cbModelParam._m0[22u].z, fma(_610, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _606)) + cbModelParam._m0[22u].w;
        float _1238 = fma(_614, cbModelParam._m0[23u].z, fma(_610, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _606)) + cbModelParam._m0[23u].w;
        float _1241 = fma(_548, cbModelParam._m0[21u].z, fma(_547, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _546));
        float _1244 = fma(_548, cbModelParam._m0[22u].z, fma(_547, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _546));
        float _1247 = fma(_548, cbModelParam._m0[23u].z, fma(_547, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _546));
        float _1374;
        if (_1241 > 0.0)
        {
            _1374 = abs((1.0 - _1230) / _1241);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1241 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1230 + 1.0) / _1241);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1374 = frontier_phi_30_26_ladder;
        }
        float _1815;
        if (_1244 > 0.0)
        {
            _1815 = abs((1.0 - _1234) / _1244);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1244 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1234 + 1.0) / _1244);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1815 = frontier_phi_42_37_ladder;
        }
        float _2102;
        if (_1247 > 0.0)
        {
            _2102 = abs((1.0 - _1238) / _1247);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1247 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1238 + 1.0) / _1247);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2102 = frontier_phi_52_49_ladder;
        }
        float _2104 = isnan(_1815) ? _1374 : (isnan(_1374) ? _1815 : min(_1374, _1815));
        float _2105 = isnan(_2102) ? _2104 : (isnan(_2104) ? _2102 : min(_2104, _2102));
        float _2109 = (_2105 * _1241) + _1230;
        float _2110 = (_2105 * _1244) + _1234;
        float _2111 = (_2105 * _1247) + _1238;
        float _2112 = _2105 * 9.9999997473787516355514526367188e-05;
        float _2113 = (-1.0) - _2112;
        float _2115 = _2112 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2111 > _2115) || ((_2111 < _2113) || ((_2110 > _2115) || ((_2110 < _2113) || ((_2109 < _2113) || (_2109 > _2115))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2260 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2111, cbModelParam._m0[17u].z, fma(_2110, cbModelParam._m0[17u].y, _2109 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2111, cbModelParam._m0[18u].z, fma(_2110, cbModelParam._m0[18u].y, _2109 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2111, cbModelParam._m0[19u].z, fma(_2110, cbModelParam._m0[19u].y, _2109 * cbModelParam._m0[19u].x))), _1173);
            frontier_phi_27_52_ladder = _2260.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2260.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2260.x * cbModelParam._m0[1u].z;
        }
        _1266 = frontier_phi_27_52_ladder_2;
        _1268 = frontier_phi_27_52_ladder_1;
        _1270 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1250 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_546, _547, _548), _1173);
        _1266 = _1250.x * cbModelParam._m0[1u].z;
        _1268 = _1250.y * cbModelParam._m0[1u].z;
        _1270 = _1250.z * cbModelParam._m0[1u].z;
    }
    float _1283 = (((_577 * _347) + _578) * _537) * ((cbModelParam._m0[1u].w * (_1266 - _1164)) + _1164);
    float _1285 = (((_577 * _348) + _578) * _537) * ((cbModelParam._m0[1u].w * (_1268 - _1166)) + _1166);
    float _1287 = (((_577 * _349) + _578) * _537) * ((cbModelParam._m0[1u].w * (_1270 - _1168)) + _1168);
    float _1308 = fma(_1287, cbSceneParam._m0[89u].z, fma(_1285, cbSceneParam._m0[89u].y, _1283 * cbSceneParam._m0[89u].x));
    float _1311 = fma(_1287, cbSceneParam._m0[90u].z, fma(_1285, cbSceneParam._m0[90u].y, _1283 * cbSceneParam._m0[90u].x));
    float _1314 = fma(_1287, cbSceneParam._m0[91u].z, fma(_1285, cbSceneParam._m0[91u].y, _1283 * cbSceneParam._m0[91u].x));
    float _1348 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1352 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1356 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1360 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1361 = _1348 / _1360;
    float _1362 = _1352 / _1360;
    float _1363 = _1356 / _1360;
    float _1510;
    float _1511;
    float _1512;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1390 = ((uint(_1363 > cbSceneParam._m0[59u].y) + uint(_1363 > cbSceneParam._m0[59u].x)) + uint(_1363 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1391 = _1390 + 43u;
        uint _1399 = _1390 + 44u;
        uint _1407 = _1390 + 45u;
        uint _1415 = _1390 + 46u;
        float _1426 = fma(_1360, cbSceneParam._m0[_1391].w, fma(_1356, cbSceneParam._m0[_1391].z, fma(_1352, cbSceneParam._m0[_1391].y, _1348 * cbSceneParam._m0[_1391].x)));
        float _1430 = fma(_1360, cbSceneParam._m0[_1399].w, fma(_1356, cbSceneParam._m0[_1399].z, fma(_1352, cbSceneParam._m0[_1399].y, _1348 * cbSceneParam._m0[_1399].x)));
        float _1438 = fma(_1360, cbSceneParam._m0[_1415].w, fma(_1356, cbSceneParam._m0[_1415].z, fma(_1352, cbSceneParam._m0[_1415].y, _1348 * cbSceneParam._m0[_1415].x)));
        float _1443 = cbSceneParam._m0[33u].z * _1438;
        float _1445 = cbSceneParam._m0[33u].w * _1438;
        float _1448 = fma(_1360, cbSceneParam._m0[_1407].w, fma(_1356, cbSceneParam._m0[_1407].z, fma(_1352, cbSceneParam._m0[_1407].y, _1348 * cbSceneParam._m0[_1407].x))) / _1438;
        float _1496 = (cbSceneParam._m0[33u].x - sqrt(((_1362 * _1362) + (_1361 * _1361)) + (_1363 * _1363))) * cbSceneParam._m0[33u].y;
        float _3424 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1503 = (isnan(1.0) ? _3424 : (isnan(_3424) ? 1.0 : min(_3424, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1443 + _1426) / _1438, (_1445 + _1430) / _1438), _1448), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1445 + _1426) / _1438, (_1430 - _1443) / _1438), _1448), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1426 - _1443) / _1438, (_1430 - _1445) / _1438), _1448), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1426 - _1445) / _1438, (_1443 + _1430) / _1438), _1448), 0.0)).x), vec4(0.25)));
        _1510 = 1.0 - (_1503 * cbSceneParam._m0[34u].x);
        _1511 = 1.0 - (_1503 * cbSceneParam._m0[34u].y);
        _1512 = 1.0 - (_1503 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1510 = 1.0;
        _1511 = 1.0;
        _1512 = 1.0;
    }
    float _1576;
    float _1578;
    float _1580;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1564 = fma(_1360, cbSceneParam._m0[63u].w, fma(_1356, cbSceneParam._m0[63u].z, fma(_1352, cbSceneParam._m0[63u].y, _1348 * cbSceneParam._m0[63u].x)));
        float _1565 = fma(_1360, cbSceneParam._m0[60u].w, fma(_1356, cbSceneParam._m0[60u].z, fma(_1352, cbSceneParam._m0[60u].y, _1348 * cbSceneParam._m0[60u].x))) / _1564;
        float _1566 = fma(_1360, cbSceneParam._m0[61u].w, fma(_1356, cbSceneParam._m0[61u].z, fma(_1352, cbSceneParam._m0[61u].y, _1348 * cbSceneParam._m0[61u].x))) / _1564;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1565 >= cbSceneParam._m0[64u].x) && (_1566 >= cbSceneParam._m0[64u].y)) && (_1565 <= cbSceneParam._m0[64u].z)) && (_1566 <= cbSceneParam._m0[64u].w))
        {
            float _1828 = fma(_1360, cbSceneParam._m0[62u].w, fma(_1356, cbSceneParam._m0[62u].z, fma(_1352, cbSceneParam._m0[62u].y, _1348 * cbSceneParam._m0[62u].x))) / _1564;
            float _1832 = isnan(cbSceneParam._m0[41u].w) ? _1828 : (isnan(_1828) ? cbSceneParam._m0[41u].w : max(_1828, cbSceneParam._m0[41u].w));
            float _1875 = (cbSceneParam._m0[33u].x - sqrt(((_1362 * _1362) + (_1361 * _1361)) + (_1363 * _1363))) * cbSceneParam._m0[33u].y;
            float _3440 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
            float _1882 = (isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1565, cbSceneParam._m0[33u].w + _1566), _1832), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1565, _1566 - cbSceneParam._m0[33u].z), _1832), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1565 - cbSceneParam._m0[33u].z, _1566 - cbSceneParam._m0[33u].w), _1832), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1565 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1566), _1832), 0.0)).x), vec4(0.25)));
            float _1886 = 1.0 - (_1882 * cbSceneParam._m0[34u].x);
            float _1887 = 1.0 - (_1882 * cbSceneParam._m0[34u].y);
            float _1888 = 1.0 - (_1882 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_1886) ? _1510 : (isnan(_1510) ? _1886 : min(_1510, _1886));
            frontier_phi_39_38_ladder_1 = isnan(_1887) ? _1511 : (isnan(_1511) ? _1887 : min(_1511, _1887));
            frontier_phi_39_38_ladder_2 = isnan(_1888) ? _1512 : (isnan(_1512) ? _1888 : min(_1512, _1888));
        }
        else
        {
            frontier_phi_39_38_ladder = _1510;
            frontier_phi_39_38_ladder_1 = _1511;
            frontier_phi_39_38_ladder_2 = _1512;
        }
        _1576 = frontier_phi_39_38_ladder;
        _1578 = frontier_phi_39_38_ladder_1;
        _1580 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1576 = _1510;
        _1578 = _1511;
        _1580 = _1512;
    }
    uint _1582 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1586 = floatBitsToUint(cbInstanceData._m0[_1582 + 5u]);
    uint _1588 = _1586.x * 14u;
    uint _1589 = _1588 + 13u;
    float _1595 = _537 + (-1.0);
    float _1600 = (cbLight._m0[_1589].x * _1595) + 1.0;
    float _1601 = (cbLight._m0[_1589].y * _1595) + 1.0;
    float _1602 = (cbLight._m0[_1589].w * _1595) + 1.0;
    uint _1606 = _1588 + 8u;
    float _1622 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1588].w)) * _350) * 0.949999988079071044921875);
    float _1623 = _1622 * _1622;
    float _1624 = cbLight._m0[_1588].x + _411;
    float _1625 = cbLight._m0[_1588].y + _412;
    float _1626 = cbLight._m0[_1588].z + _413;
    float _1630 = inversesqrt(dot(vec3(_1624, _1625, _1626), vec3(_1624, _1625, _1626)));
    float _1631 = _1630 * _1624;
    float _1632 = _1630 * _1625;
    float _1633 = _1630 * _1626;
    float _1634 = dot(vec3(_343, _344, _345), vec3(cbLight._m0[_1588].xyz));
    float _3466 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
    float _1637 = isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0));
    float _3477 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _1638 = isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0));
    float _1639 = dot(vec3(_343, _344, _345), vec3(_1631, _1632, _1633));
    float _3488 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
    float _1642 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
    float _1643 = dot(vec3(cbLight._m0[_1588].xyz), vec3(_1631, _1632, _1633));
    float _3499 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
    float _1647 = _1623 * _1623;
    float _1651 = ((_1642 * _1642) * (_1647 + (-1.0))) + 1.0;
    float _1659 = exp2(log2(1.0 - (isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0)))) * 5.0);
    float _1660 = 1.0 - _347;
    float _1661 = 1.0 - _348;
    float _1662 = 1.0 - _349;
    float _1669 = 1.0 - _1623;
    float _1680 = (0.5 / (((_1638 * ((_1637 * _1669) + _1623)) + 9.9999999392252902907785028219223e-09) + (((_1638 * _1669) + _1623) * _1637))) * _1637;
    float _3510 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
    float _1682 = (isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0))) * (_1647 / ((_1651 * _1651) * 3.141590118408203125));
    float _1683 = isnan(1.0) ? _1600 : (isnan(_1600) ? 1.0 : min(_1600, 1.0));
    uint _1696 = _1588 | 1u;
    uint _1700 = _1588 + 9u;
    float _1714 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1696].w)) * _350) * 0.949999988079071044921875);
    float _1715 = _1714 * _1714;
    float _1716 = cbLight._m0[_1696].x + _411;
    float _1717 = cbLight._m0[_1696].y + _412;
    float _1718 = cbLight._m0[_1696].z + _413;
    float _1722 = inversesqrt(dot(vec3(_1716, _1717, _1718), vec3(_1716, _1717, _1718)));
    float _1723 = _1722 * _1716;
    float _1724 = _1722 * _1717;
    float _1725 = _1722 * _1718;
    float _1726 = dot(vec3(_343, _344, _345), vec3(cbLight._m0[_1696].xyz));
    float _3526 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
    float _1729 = isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0));
    float _1730 = dot(vec3(_343, _344, _345), vec3(_1723, _1724, _1725));
    float _3537 = isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0));
    float _1733 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
    float _1734 = dot(vec3(cbLight._m0[_1696].xyz), vec3(_1723, _1724, _1725));
    float _3548 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
    float _1738 = _1715 * _1715;
    float _1742 = ((_1733 * _1733) * (_1738 + (-1.0))) + 1.0;
    float _1749 = exp2(log2(1.0 - (isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0)))) * 5.0);
    float _1756 = 1.0 - _1715;
    float _1766 = (0.5 / (((_1638 * ((_1729 * _1756) + _1715)) + 9.9999999392252902907785028219223e-09) + (((_1638 * _1756) + _1715) * _1729))) * _1729;
    float _3559 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
    float _1768 = (isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0))) * (_1738 / ((_1742 * _1742) * 3.141590118408203125));
    float _1769 = isnan(1.0) ? _1601 : (isnan(_1601) ? 1.0 : min(_1601, 1.0));
    float _1779 = (((((_1749 * _1660) + _347) * cbLight._m0[_1700].x) * _1768) * _1769) + ((((cbLight._m0[_1606].x * _1576) * ((_1659 * _1660) + _347)) * _1682) * _1683);
    float _1780 = (((((_1749 * _1661) + _348) * cbLight._m0[_1700].y) * _1768) * _1769) + ((((cbLight._m0[_1606].y * _1578) * ((_1659 * _1661) + _348)) * _1682) * _1683);
    float _1781 = (((((_1749 * _1662) + _349) * cbLight._m0[_1700].z) * _1768) * _1769) + ((((cbLight._m0[_1606].z * _1580) * ((_1659 * _1662) + _349)) * _1682) * _1683);
    uvec4 _1785 = floatBitsToUint(cbLight._m0[_1588 + 12u]);
    float _1889;
    float _1891;
    float _1893;
    if (_1785.x == 0u)
    {
        _1889 = _1779;
        _1891 = _1780;
        _1893 = _1781;
    }
    else
    {
        float _1899 = (cbLight._m0[_1589].z * _1595) + 1.0;
        uint _1900 = _1588 + 2u;
        uint _1904 = _1588 + 10u;
        float _1918 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1900].w)) * _350) * 0.949999988079071044921875);
        float _1919 = _1918 * _1918;
        float _1920 = cbLight._m0[_1900].x + _411;
        float _1921 = cbLight._m0[_1900].y + _412;
        float _1922 = cbLight._m0[_1900].z + _413;
        float _1926 = inversesqrt(dot(vec3(_1920, _1921, _1922), vec3(_1920, _1921, _1922)));
        float _1927 = _1926 * _1920;
        float _1928 = _1926 * _1921;
        float _1929 = _1926 * _1922;
        float _1930 = dot(vec3(_343, _344, _345), vec3(cbLight._m0[_1900].xyz));
        float _3575 = isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0));
        float _1933 = isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0));
        float _1934 = dot(vec3(_343, _344, _345), vec3(_1927, _1928, _1929));
        float _3586 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
        float _1937 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
        float _1938 = dot(vec3(cbLight._m0[_1900].xyz), vec3(_1927, _1928, _1929));
        float _3597 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
        float _1942 = _1919 * _1919;
        float _1946 = ((_1937 * _1937) * (_1942 + (-1.0))) + 1.0;
        float _1953 = exp2(log2(1.0 - (isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0)))) * 5.0);
        float _1960 = 1.0 - _1919;
        float _1970 = (0.5 / (((_1638 * ((_1933 * _1960) + _1919)) + 9.9999999392252902907785028219223e-09) + (((_1638 * _1960) + _1919) * _1933))) * _1933;
        float _3608 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
        float _1972 = (isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0))) * (_1942 / ((_1946 * _1946) * 3.141590118408203125));
        float _1973 = isnan(1.0) ? _1899 : (isnan(_1899) ? 1.0 : min(_1899, 1.0));
        _1889 = (((((_1953 * _1660) + _347) * cbLight._m0[_1904].x) * _1972) * _1973) + _1779;
        _1891 = (((((_1953 * _1661) + _348) * cbLight._m0[_1904].y) * _1972) * _1973) + _1780;
        _1893 = (((((_1953 * _1662) + _349) * cbLight._m0[_1904].z) * _1972) * _1973) + _1781;
    }
    float _2008;
    float _2010;
    float _2012;
    if (_1785.y == 0u)
    {
        _2008 = _1889;
        _2010 = _1891;
        _2012 = _1893;
    }
    else
    {
        uint _2019 = _1588 + 3u;
        uint _2023 = _1588 + 11u;
        float _2037 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2019].w)) * _350) * 0.949999988079071044921875);
        float _2038 = _2037 * _2037;
        float _2039 = cbLight._m0[_2019].x + _411;
        float _2040 = cbLight._m0[_2019].y + _412;
        float _2041 = cbLight._m0[_2019].z + _413;
        float _2045 = inversesqrt(dot(vec3(_2039, _2040, _2041), vec3(_2039, _2040, _2041)));
        float _2046 = _2045 * _2039;
        float _2047 = _2045 * _2040;
        float _2048 = _2045 * _2041;
        float _2049 = dot(vec3(_343, _344, _345), vec3(cbLight._m0[_2019].xyz));
        float _3624 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
        float _2052 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
        float _2053 = dot(vec3(_343, _344, _345), vec3(_2046, _2047, _2048));
        float _3635 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
        float _2056 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
        float _2057 = dot(vec3(cbLight._m0[_2019].xyz), vec3(_2046, _2047, _2048));
        float _3646 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
        float _2061 = _2038 * _2038;
        float _2065 = ((_2056 * _2056) * (_2061 + (-1.0))) + 1.0;
        float _2072 = exp2(log2(1.0 - (isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0)))) * 5.0);
        float _2079 = 1.0 - _2038;
        float _2089 = (0.5 / (((_1638 * ((_2052 * _2079) + _2038)) + 9.9999999392252902907785028219223e-09) + (((_1638 * _2079) + _2038) * _2052))) * _2052;
        float _3657 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
        float _2091 = (isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0))) * (_2061 / ((_2065 * _2065) * 3.141590118408203125));
        float _2092 = isnan(1.0) ? _1602 : (isnan(_1602) ? 1.0 : min(_1602, 1.0));
        _2008 = (((((_2072 * _1660) + _347) * cbLight._m0[_2023].x) * _2091) * _2092) + _1889;
        _2010 = (((((_2072 * _1661) + _348) * cbLight._m0[_2023].y) * _2091) * _2092) + _1891;
        _2012 = (((((_2072 * _1662) + _349) * cbLight._m0[_2023].z) * _2091) * _2092) + _1893;
    }
    float _2184;
    float _2186;
    float _2188;
    if (_1586.y == 0u)
    {
        uvec4 _2139 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2140 = _2139.x;
        uint _2151 = uint((float(_2139.y) * floor(float(uint(cbSceneParam._m0[85u].y * _432) / _2140))) + floor(float(uint(cbSceneParam._m0[85u].x * _431) / _2140)));
        float _2161 = (log2(_1363 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2162 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
        uint _2165 = uint(isnan(14.0) ? _2162 : (isnan(_2162) ? 14.0 : min(_2162, 14.0)));
        uvec4 _2170 = texelFetch(g_lightClusterGridBuffer, int(((_2165 << 2u) + (_2151 << 6u)) >> 2u));
        uint _2171 = _2170.x;
        uint _2172 = _2139.z;
        float _2265;
        float _2267;
        float _2269;
        if (((((1u << ((_2172 >> 4u) & 15u)) + 4294967295u) & _2171) == 0u) || ((_2172 & 240u) == 0u))
        {
            _2265 = 0.0;
            _2267 = 0.0;
            _2269 = 0.0;
        }
        else
        {
            float _2266;
            float _2268;
            float _2270;
            float _2401 = 0.0;
            float _2402 = 0.0;
            float _2403 = 0.0;
            uint _2404 = 0u;
            uint _2413;
            bool _2414;
            for (;;)
            {
                _2413 = texelFetch(g_lightClassification, int((((_2165 << 5u) + (_2151 << 9u)) + (_2404 << 2u)) >> 2u)).x;
                _2414 = _2413 == 0u;
                float frontier_phi_69_pred;
                float frontier_phi_69_pred_1;
                float frontier_phi_69_pred_2;
                if (_2414)
                {
                    frontier_phi_69_pred = _2403;
                    frontier_phi_69_pred_1 = _2402;
                    frontier_phi_69_pred_2 = _2401;
                }
                else
                {
                    float _2538;
                    float _2539;
                    float _2540;
                    uint _2541;
                    _2538 = _2401;
                    _2539 = _2402;
                    _2540 = _2403;
                    _2541 = _2413;
                    float _2471;
                    float _2472;
                    float _2473;
                    for (;;)
                    {
                        uint _2545 = uint(findLSB(_2541)) + (_2404 << 5u);
                        uint _2542 = (_2541 + 4294967295u) & _2541;
                        uint _2547 = _2545 * 48u;
                        vec4 _2561 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2547)).x, texelFetch(g_PointLightRenderingBuffer, int(_2547 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2547 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2547 + 3u)).x));
                        uint _2578 = (_2545 * 48u) + 8u;
                        vec3 _2589 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2578)).x, texelFetch(g_PointLightRenderingBuffer, int(_2578 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2578 + 2u)).x));
                        float _2593 = _2561.x - _1361;
                        float _2594 = _2561.y - _1362;
                        float _2595 = _2561.z - _1363;
                        float _2596 = dot(vec3(_2593, _2594, _2595), vec3(_2593, _2594, _2595));
                        float _2599 = inversesqrt(_2596);
                        float _2600 = _2599 * _2593;
                        float _2601 = _2599 * _2594;
                        float _2602 = _2599 * _2595;
                        float _2608 = 1.0 - (_2596 * _2561.w);
                        float _3683 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
                        float _2610 = sqrt(_2596) * uintBitsToFloat(uvec4(_2568, _2569, _2570, texelFetch(g_PointLightRenderingBuffer, int(((_2545 * 48u) + 4u) + 3u)).x)).w;
                        float _2614 = _2610 * _2610;
                        float _2615 = (-0.0) - _1361;
                        float _2616 = (-0.0) - _1362;
                        float _2617 = (-0.0) - _1363;
                        float _2621 = inversesqrt(dot(vec3(_2615, _2616, _2617), vec3(_2615, _2616, _2617)));
                        float _2622 = _2621 * _2615;
                        float _2623 = _2621 * _2616;
                        float _2624 = _2621 * _2617;
                        float _2631 = exp2(log2(1.0 / ((_2614 * 3.5) + 5.0)) * 0.25);
                        float _2632 = 1.0 - _559;
                        float _2639 = sqrt(1.0 - ((1.0 - (_2632 * _2632)) * (1.0 - (_2631 * _2631))));
                        float _2640 = _2639 * _2639;
                        float _2641 = _2640 * _2640;
                        float _2642 = _2622 + _2600;
                        float _2643 = _2623 + _2601;
                        float _2644 = _2624 + _2602;
                        float _2648 = inversesqrt(dot(vec3(_2642, _2643, _2644), vec3(_2642, _2643, _2644)));
                        float _2652 = dot(vec3(_452, _455, _458), vec3(_2622, _2623, _2624));
                        float _3694 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
                        float _2655 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
                        float _2656 = dot(vec3(_452, _455, _458), vec3(_2648 * _2642, _2648 * _2643, _2648 * _2644));
                        float _3705 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
                        float _2659 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
                        float _2663 = ((_2659 * _2659) * (_2641 + (-1.0))) + 1.0;
                        float _2664 = (1.39999997615814208984375 / (_2610 + 1.39999997615814208984375)) * _2640;
                        float _2665 = _2664 * _2664;
                        float _2668 = ((1.0 - _2665) * dot(vec3(_452, _455, _458), vec3(_2600, _2601, _2602))) + _2665;
                        float _3716 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
                        float _2669 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
                        float _2670 = 1.0 - _2640;
                        float _2680 = (0.5 / (((_2669 * ((_2655 * _2670) + _2640)) + 9.9999999392252902907785028219223e-09) + (((_2669 * _2670) + _2640) * _2655))) * _2669;
                        float _3727 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
                        float _2691 = (((_2641 * 3.1415927410125732421875) * (isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0)))) / ((_2663 * _2663) * ((_2614 * 2.1991131305694580078125) + 3.141590118408203125))) * (isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0)));
                        _2471 = (_2691 * _2589.x) + _2538;
                        _2472 = (_2691 * _2589.y) + _2539;
                        _2473 = (_2691 * _2589.z) + _2540;
                        if (_2542 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2538 = _2471;
                            _2539 = _2472;
                            _2540 = _2473;
                            _2541 = _2542;
                        }
                    }
                    frontier_phi_69_pred = _2473;
                    frontier_phi_69_pred_1 = _2472;
                    frontier_phi_69_pred_2 = _2471;
                }
                _2270 = frontier_phi_69_pred;
                _2268 = frontier_phi_69_pred_1;
                _2266 = frontier_phi_69_pred_2;
                uint _2405 = _2404 + 1u;
                if (_2405 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2401 = _2266;
                    _2402 = _2268;
                    _2403 = _2270;
                    _2404 = _2405;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2265 = _2266;
            _2267 = _2268;
            _2269 = _2270;
        }
        uvec4 _2273 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2274 = _2273.z;
        uint _2276 = (_2274 >> 8u) & 15u;
        float _2378;
        float _2380;
        float _2382;
        if (((4294967295u << _2276) & _2171) == 0u)
        {
            _2378 = _2265;
            _2380 = _2267;
            _2382 = _2269;
        }
        else
        {
            float _2394 = inversesqrt(dot(vec3(_1361, _1362, _1363), vec3(_1361, _1362, _1363)));
            float _2395 = _2394 * _1361;
            float _2396 = _2394 * _1362;
            float _2397 = _2394 * _1363;
            float frontier_phi_61_62_ladder;
            float frontier_phi_61_62_ladder_1;
            float frontier_phi_61_62_ladder_2;
            if (_2276 < ((_2274 >> 12u) & 15u))
            {
                float _2379;
                float _2381;
                float _2383;
                float _2524 = _2265;
                float _2525 = _2267;
                float _2526 = _2269;
                uint _2527 = _2276;
                uint _2536;
                bool _2537;
                for (;;)
                {
                    _2536 = texelFetch(g_lightClassification, int((((_2165 << 5u) + (_2151 << 9u)) + (_2527 << 2u)) >> 2u)).x;
                    _2537 = _2536 == 0u;
                    float frontier_phi_80_pred;
                    float frontier_phi_80_pred_1;
                    float frontier_phi_80_pred_2;
                    if (_2537)
                    {
                        frontier_phi_80_pred = _2526;
                        frontier_phi_80_pred_1 = _2525;
                        frontier_phi_80_pred_2 = _2524;
                    }
                    else
                    {
                        float _2705;
                        float _2706;
                        float _2707;
                        float _2971;
                        float _2972;
                        float _2973;
                        float _2715 = _2524;
                        float _2716 = _2525;
                        float _2717 = _2526;
                        uint _2718 = _2536;
                        uint _2719;
                        uint _2729;
                        vec4 _2744;
                        float _2745;
                        vec3 _2757;
                        vec4 _2773;
                        vec4 _2789;
                        float _2836;
                        bool _2837;
                        for (;;)
                        {
                            _2729 = ((_2527 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2718));
                            _2719 = (_2718 + 4294967295u) & _2718;
                            uint _2731 = _2729 * 40u;
                            _2744 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2731)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2731 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2731 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2731 + 3u)).x));
                            _2745 = _2744.w;
                            uint _2747 = (_2729 * 40u) + 8u;
                            _2757 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2747)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2747 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2747 + 2u)).x));
                            uint _2760 = (_2729 * 40u) + 16u;
                            _2773 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2760)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2760 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2760 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2760 + 3u)).x));
                            uint _2776 = (_2729 * 40u) + 20u;
                            _2789 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2776)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2776 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2776 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2776 + 3u)).x));
                            uint _2792 = (_2729 * 40u) + 24u;
                            vec4 _2805 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2792)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2792 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2792 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2792 + 3u)).x));
                            uint _2811 = (_2729 * 40u) + 28u;
                            vec4 _2824 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2811)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2811 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2811 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2811 + 3u)).x));
                            _2836 = fma(_1363, _2824.z, fma(_1362, _2824.y, _2824.x * _1361)) + _2824.w;
                            _2837 = !((fma(_1363, _2805.z, fma(_1362, _2805.y, _2805.x * _1361)) + _2805.w) <= 0.0);
                            float frontier_phi_86_pred;
                            float frontier_phi_86_pred_1;
                            float frontier_phi_86_pred_2;
                            if (_2837)
                            {
                                float _2871 = _2744.x - _1361;
                                float _2872 = _2744.y - _1362;
                                float _2873 = _2744.z - _1363;
                                float _2874 = dot(vec3(_2871, _2872, _2873), vec3(_2871, _2872, _2873));
                                float _2877 = inversesqrt(_2874);
                                float _2878 = _2877 * _2871;
                                float _2879 = _2877 * _2872;
                                float _2880 = _2877 * _2873;
                                float _2884 = 1.0 - (_2874 / (_2745 * _2745));
                                float _3738 = isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0));
                                float _2886 = sqrt(_2874) * uintBitsToFloat(uvec4(_2840, _2841, _2842, texelFetch(g_SpotLightRenderingBuffer, int(((_2729 * 40u) + 4u) + 3u)).x)).w;
                                float _2889 = _2886 * _2886;
                                float _2890 = (fma(_1363, _2773.z, fma(_1362, _2773.y, _2773.x * _1361)) + _2773.w) / _2836;
                                float _2891 = (fma(_1363, _2789.z, fma(_1362, _2789.y, _2789.x * _1361)) + _2789.w) / _2836;
                                float _2895 = 1.0 - dot(vec2(_2890, _2891), vec2(_2890, _2891));
                                float _3749 = isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0));
                                float _2905 = exp2(log2(1.0 / ((_2889 * 3.5) + 5.0)) * 0.25);
                                float _2906 = 1.0 - _559;
                                float _2913 = sqrt(1.0 - ((1.0 - (_2906 * _2906)) * (1.0 - (_2905 * _2905))));
                                float _2914 = _2913 * _2913;
                                float _2915 = _2914 * _2914;
                                float _2916 = _2878 - _2395;
                                float _2917 = _2879 - _2396;
                                float _2918 = _2880 - _2397;
                                float _2922 = inversesqrt(dot(vec3(_2916, _2917, _2918), vec3(_2916, _2917, _2918)));
                                float _2926 = dot(vec3(_452, _455, _458), vec3((-0.0) - _2395, (-0.0) - _2396, (-0.0) - _2397));
                                float _3760 = isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0));
                                float _2929 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
                                float _2930 = dot(vec3(_452, _455, _458), vec3(_2922 * _2916, _2922 * _2917, _2922 * _2918));
                                float _3771 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0));
                                float _2933 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
                                float _2937 = ((_2933 * _2933) * (_2915 + (-1.0))) + 1.0;
                                float _2938 = (1.39999997615814208984375 / (_2886 + 1.39999997615814208984375)) * _2914;
                                float _2939 = _2938 * _2938;
                                float _2945 = ((1.0 - _2939) * dot(vec3(_452, _455, _458), vec3(_2878, _2879, _2880))) + _2939;
                                float _3782 = isnan(0.0) ? _2945 : (isnan(_2945) ? 0.0 : max(_2945, 0.0));
                                float _2946 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
                                float _2947 = 1.0 - _2914;
                                float _2957 = (0.5 / (((_2946 * ((_2929 * _2947) + _2914)) + 9.9999999392252902907785028219223e-09) + (((_2946 * _2947) + _2914) * _2929))) * _2946;
                                float _3793 = isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0));
                                float _2967 = ((isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0))) * (isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0)))) * (((_2915 * 3.1415927410125732421875) * (isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0)))) / ((_2937 * _2937) * ((_2889 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_86_pred = _2967 * _2757.z;
                                frontier_phi_86_pred_1 = _2967 * _2757.y;
                                frontier_phi_86_pred_2 = _2967 * _2757.x;
                            }
                            else
                            {
                                frontier_phi_86_pred = 0.0;
                                frontier_phi_86_pred_1 = 0.0;
                                frontier_phi_86_pred_2 = 0.0;
                            }
                            _2973 = frontier_phi_86_pred;
                            _2972 = frontier_phi_86_pred_1;
                            _2971 = frontier_phi_86_pred_2;
                            _2705 = _2971 + _2715;
                            _2706 = _2972 + _2716;
                            _2707 = _2973 + _2717;
                            if (_2719 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2715 = _2705;
                                _2716 = _2706;
                                _2717 = _2707;
                                _2718 = _2719;
                                continue;
                            }
                        }
                        frontier_phi_80_pred = _2707;
                        frontier_phi_80_pred_1 = _2706;
                        frontier_phi_80_pred_2 = _2705;
                    }
                    _2383 = frontier_phi_80_pred;
                    _2381 = frontier_phi_80_pred_1;
                    _2379 = frontier_phi_80_pred_2;
                    uint _2528 = _2527 + 1u;
                    if (_2528 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2524 = _2379;
                        _2525 = _2381;
                        _2526 = _2383;
                        _2527 = _2528;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_61_62_ladder = _2381;
                frontier_phi_61_62_ladder_1 = _2383;
                frontier_phi_61_62_ladder_2 = _2379;
            }
            else
            {
                frontier_phi_61_62_ladder = _2267;
                frontier_phi_61_62_ladder_1 = _2269;
                frontier_phi_61_62_ladder_2 = _2265;
            }
            _2378 = frontier_phi_61_62_ladder_2;
            _2380 = frontier_phi_61_62_ladder;
            _2382 = frontier_phi_61_62_ladder_1;
        }
        float _2387 = isnan(1.0) ? _537 : (isnan(_537) ? 1.0 : min(_537, 1.0));
        _2184 = ((_2378 * _347) * _2387) + _2008;
        _2186 = ((_2380 * _348) * _2387) + _2010;
        _2188 = ((_2382 * _349) * _2387) + _2012;
    }
    else
    {
        _2184 = _2008;
        _2186 = _2010;
        _2188 = _2012;
    }
    float _2192 = 0.959999978542327880859375 - ((isnan(1.0) ? _525 : (isnan(_525) ? 1.0 : min(_525, 1.0))) * 0.959999978542327880859375);
    float _2200 = _2192 - (exp2(log2(1.0 - _553) * 5.0) * _2192);
    float _2204 = ((_2184 + ((isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0))) * _1072)) * cbPerFrame._m0[3u].x) + (((cbSceneParam._m0[72u].w * _264.x) * exp2((-0.0) - ((cbMtdParam._m0[10u].w * _322) * _323))) * _2200);
    float _2205 = ((_2186 + ((isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0))) * _1072)) * cbPerFrame._m0[3u].x) + (((cbSceneParam._m0[72u].w * _264.y) * exp2((-0.0) - ((cbMtdParam._m0[11u].x * _322) * _323))) * _2200);
    float _2206 = ((_2188 + ((isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0))) * _1072)) * cbPerFrame._m0[3u].x) + (((cbSceneParam._m0[72u].w * _264.z) * exp2((-0.0) - ((cbMtdParam._m0[11u].y * _322) * _323))) * _2200);
    uint _2207 = _1582 + 6u;
    float _2215 = _431 / cbSceneParam._m0[86u].x;
    float _2216 = _432 / cbSceneParam._m0[86u].y;
    vec4 _2230 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2215, _2216, (log2((isnan(cbSceneParam._m0[77u].w) ? _355 : (isnan(_355) ? cbSceneParam._m0[77u].w : min(_355, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2232 = _2230.x;
    float _2233 = _2230.y;
    float _2234 = _2230.z;
    float _2235 = _2230.w;
    float _2321;
    float _2323;
    float _2325;
    float _2327;
    if (_355 > cbSceneParam._m0[78u].w)
    {
        float _2284 = isnan(_355) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _355 : min(cbSceneParam._m0[80u].w, _355));
        float _2285 = _2284 / _355;
        float _2296 = _2285 * _404;
        float _2297 = _405 * _2285;
        float _2298 = (-0.0) - _2297;
        float _2299 = _2285 * _406;
        float _2301 = (cbSceneParam._m0[77u].w * _2298) / _2284;
        float _2302 = _2301 + cbSceneParam._m0[79u].w;
        float _2303 = cbSceneParam._m0[79u].w - _2297;
        float _2309 = sqrt(((_2296 * _2296) + (_2297 * _2297)) + (_2299 * _2299));
        float _2312 = (1.0 - (cbSceneParam._m0[77u].w / _2284)) * _2309;
        float _2317 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2319 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2481;
        if (abs((_2298 - _2301) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2481 = ((((_2302 > 0.0) ? exp2(_2317 * _2302) : (2.0 - exp2(_2319 * _2302))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2312;
        }
        else
        {
            float _2427 = 1.0 / cbSceneParam._m0[80u].x;
            float _2428 = isnan(_2303) ? _2302 : (isnan(_2302) ? _2303 : max(_2302, _2303));
            float _2429 = isnan(_2303) ? _2302 : (isnan(_2302) ? _2303 : min(_2302, _2303));
            float _2438 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : min(_2428, 0.0));
            float _2439 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : min(_2429, 0.0));
            _2481 = ((abs(_2309 / _2298) * cbSceneParam._m0[80u].y) * ((((_2438 - _2439) * 2.0) - ((exp2(_2317 * (isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0)))) - exp2(_2317 * (isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0))))) * _2427)) - ((exp2(_2319 * _2438) - exp2(_2319 * _2439)) * _2427))) + (_2312 * cbSceneParam._m0[80u].z);
        }
        vec4 _2483 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2215, _2216, 1.0), 0.0);
        float _2492 = exp2((_2481 * (-1.44269502162933349609375)) * (1.0 - _2483.w));
        float _2493 = log2(_2492);
        float _2509 = log2(_2235);
        _2321 = (exp2(_2509 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2493 * cbSceneParam._m0[78u].x)) * _2483.x) / cbSceneParam._m0[78u].x)) + _2232;
        _2323 = (exp2(_2509 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2493 * cbSceneParam._m0[78u].y)) * _2483.y) / cbSceneParam._m0[78u].y)) + _2233;
        _2325 = (exp2(_2509 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2493 * cbSceneParam._m0[78u].z)) * _2483.z) / cbSceneParam._m0[78u].z)) + _2234;
        _2327 = _2492 * _2235;
    }
    else
    {
        _2321 = _2232;
        _2323 = _2233;
        _2325 = _2234;
        _2327 = _2235;
    }
    bool _2519;
    vec4 _2336;
    vec4 _2358;
    float _2360;
    float _2364;
    float _2365;
    float _2366;
    float _2367;
    bool _2377;
    for (;;)
    {
        _2336 = cbMatDynParam._m0[0u];
        float _2338 = roundEven(_2336.y);
        bool _2339 = _2338 == 3.0;
        float _2340 = log2(_2327);
        float _2347 = exp2(_2340 * cbSceneParam._m0[78u].x) * _2204;
        float _2348 = exp2(_2340 * cbSceneParam._m0[78u].y) * _2205;
        float _2349 = exp2(_2340 * cbSceneParam._m0[78u].z) * _2206;
        float _2356 = _420 + (-0.5);
        _2358 = cbMtdParam._m0[1u];
        _2360 = _2358.y * _2356;
        float _2363 = (_2338 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2364 = _2363 * (_2339 ? _2347 : (_2347 + (cbSceneParam._m0[72u].w * _2321)));
        _2365 = _2363 * (_2339 ? _2348 : (_2348 + (cbSceneParam._m0[72u].w * _2323)));
        _2366 = _2363 * (_2339 ? _2349 : (_2349 + (cbSceneParam._m0[72u].w * _2325)));
        _2367 = _2356 * 0.999000012874603271484375;
        _2377 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2377)
        {
            if ((cbInstanceData._m0[_1582 + 7u].x + _2367) < 0.5)
            {
                _2519 = true;
                break;
            }
        }
        uint _2463 = (_1582 + 9u) + uint(_2336.w);
        if ((cbInstanceData._m0[_2463].w < 1.0) && ((cbInstanceData._m0[_2463].w + _2367) < 0.5))
        {
            _2519 = true;
            break;
        }
        if ((_2360 + 1.0) < _2358.x)
        {
            _2519 = true;
            break;
        }
        _2519 = false;
        break;
    }
    float _2696;
    if (_2519)
    {
        discard_state = true;
        _2696 = 0.0;
    }
    else
    {
        _2696 = cbInstanceData._m0[_2207].w;
    }
    SV_Target.x = _2364;
    SV_Target.y = _2365;
    SV_Target.z = _2366;
    SV_Target.w = _2696;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2207].w;
    discard_exit();
}


