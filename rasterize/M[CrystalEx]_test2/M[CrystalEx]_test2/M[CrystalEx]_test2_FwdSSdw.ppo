#version 460

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 45) uniform texture2D M_CrystalEx_test2_snp_0_Screen_0;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _764;
uint _2237;
uint _2238;
uint _2239;
uint _2501;
uint _2502;
uint _2503;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _156 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _157 = _156 * NORMAL.x;
    float _158 = _156 * NORMAL.y;
    float _159 = _156 * NORMAL.z;
    float _164;
    float _165;
    float _166;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _164 = (-0.0) - _157;
        _165 = (-0.0) - _158;
        _166 = (-0.0) - _159;
    }
    else
    {
        _164 = _157;
        _165 = _158;
        _166 = _159;
    }
    float _211 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _221 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _211);
    float _222 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _211);
    float _223 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _211);
    float _237 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _238 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _244 = _237 / cbSceneParam._m0[86u].x;
    float _245 = _238 / cbSceneParam._m0[86u].y;
    float _252 = isnan(cbInstanceData._m0[8u].x) ? _244 : (isnan(_244) ? cbInstanceData._m0[8u].x : max(_244, cbInstanceData._m0[8u].x));
    float _253 = isnan(cbInstanceData._m0[8u].y) ? _245 : (isnan(_245) ? cbInstanceData._m0[8u].y : max(_245, cbInstanceData._m0[8u].y));
    vec4 _258 = texture(sampler2D(M_CrystalEx_test2_snp_0_Screen_0, SS_ClampLinear), vec2(isnan(cbInstanceData._m0[8u].z) ? _252 : (isnan(_252) ? cbInstanceData._m0[8u].z : min(_252, cbInstanceData._m0[8u].z)), isnan(cbInstanceData._m0[8u].w) ? _253 : (isnan(_253) ? cbInstanceData._m0[8u].w : min(_253, cbInstanceData._m0[8u].w))));
    float _281 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _289 = abs(dot(vec4(_164, _165, _166, 0.0), vec4(_281 * _221, _281 * _222, _281 * _223, 0.0))) * cbMtdParam._m0[10u].x;
    vec4 _291 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_237, _238));
    float _293 = _291.x;
    bool _300 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _315 = (_300 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _293)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _293))) - POSITION_1.w;
    float _316 = isnan(_315) ? _289 : (isnan(_289) ? _315 : min(_289, _315));
    float _317 = log2(cbMtdParam._m0[10u].y);
    float _336 = inversesqrt(dot(vec3(_164, _165, _166), vec3(_164, _165, _166)));
    float _337 = _336 * _164;
    float _338 = _336 * _165;
    float _339 = _336 * _166;
    float _2774 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _341 = isnan(1.0) ? _2774 : (isnan(_2774) ? 1.0 : min(_2774, 1.0));
    float _2785 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _342 = isnan(1.0) ? _2785 : (isnan(_2785) ? 1.0 : min(_2785, 1.0));
    float _2796 = isnan(0.0) ? cbMtdParam._m0[9u].z : (isnan(cbMtdParam._m0[9u].z) ? 0.0 : max(cbMtdParam._m0[9u].z, 0.0));
    float _343 = isnan(1.0) ? _2796 : (isnan(_2796) ? 1.0 : min(_2796, 1.0));
    float _2807 = isnan(0.0) ? cbMtdParam._m0[10u].z : (isnan(cbMtdParam._m0[10u].z) ? 0.0 : max(cbMtdParam._m0[10u].z, 0.0));
    float _344 = isnan(1.0) ? _2807 : (isnan(_2807) ? 1.0 : min(_2807, 1.0));
    float _349 = _300 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _389 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _398 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _389);
    float _399 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _389);
    float _400 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _389);
    float _404 = inversesqrt(dot(vec3(_398, _399, _400), vec3(_398, _399, _400)));
    float _405 = _398 * _404;
    float _406 = _399 * _404;
    float _407 = _400 * _404;
    float _412 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _413 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _434 = fma(_339, cbSceneParam._m0[5u].z, fma(_338, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _337));
    float _437 = fma(_339, cbSceneParam._m0[6u].z, fma(_338, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _337));
    float _440 = fma(_339, cbSceneParam._m0[7u].z, fma(_338, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _337));
    float _441 = _341 * 3.3333332538604736328125;
    float _443 = _342 * 3.3333332538604736328125;
    float _444 = _343 * 3.3333332538604736328125;
    float _452 = ((isnan(1.0) ? _441 : (isnan(_441) ? 1.0 : min(_441, 1.0))) * 0.0314955823123455047607421875) + 0.0039369477890431880950927734375;
    float _454 = ((isnan(1.0) ? _443 : (isnan(_443) ? 1.0 : min(_443, 1.0))) * 0.0314955823123455047607421875) + 0.0039369477890431880950927734375;
    float _455 = ((isnan(1.0) ? _444 : (isnan(_444) ? 1.0 : min(_444, 1.0))) * 0.0314955823123455047607421875) + 0.0039369477890431880950927734375;
    float _461 = (_341 + (-0.0599999986588954925537109375)) + (isnan(_452) ? 0.0 : (isnan(0.0) ? _452 : max(0.0, _452)));
    float _463 = (_342 + (-0.0599999986588954925537109375)) + (isnan(_454) ? 0.0 : (isnan(0.0) ? _454 : max(0.0, _454)));
    float _465 = (_343 + (-0.0599999986588954925537109375)) + (isnan(_455) ? 0.0 : (isnan(0.0) ? _455 : max(0.0, _455)));
    float _477 = (_461 * _461) - ((0.02999999932944774627685546875 - _341) * 0.119999997317790985107421875);
    float _478 = (_463 * _463) - ((0.02999999932944774627685546875 - _342) * 0.119999997317790985107421875);
    float _479 = (_465 * _465) - ((0.02999999932944774627685546875 - _343) * 0.119999997317790985107421875);
    float _489 = (sqrt(isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0))) - _461) * 16.666667938232421875;
    float _491 = (sqrt(isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0))) - _463) * 16.666667938232421875;
    float _492 = (sqrt(isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0))) - _465) * 16.666667938232421875;
    float _493 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _494 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _495 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _506 = (((isnan(1.0) ? _494 : (isnan(_494) ? 1.0 : min(_494, 1.0))) * 0.58700001239776611328125) + ((isnan(1.0) ? _493 : (isnan(_493) ? 1.0 : min(_493, 1.0))) * 0.29890000820159912109375)) + ((isnan(1.0) ? _495 : (isnan(_495) ? 1.0 : min(_495, 1.0))) * 0.114000000059604644775390625);
    float _507 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    vec4 _516 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _412, cbSceneParam._m0[86u].y * _413));
    float _519 = _516.x * TEXCOORD.z;
    float _520 = dot(vec3(_337, _338, _339), vec3(_405, _406, _407));
    float _523 = _520 * 2.0;
    float _528 = (_523 * _337) - _405;
    float _529 = (_523 * _338) - _406;
    float _530 = (_523 * _339) - _407;
    float _534 = abs(dot(vec3(_405, _406, _407), vec3(_337, _338, _339)));
    float _2903 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _535 = isnan(1.0) ? _2903 : (isnan(_2903) ? 1.0 : min(_2903, 1.0));
    float _541 = sqrt(_344);
    float _553 = exp2((_541 * 5.0) * log2(1.0 - (_535 * 0.999000012874603271484375))) / (4.0 - (_541 * 3.0));
    float _559 = (1.0 - _553) * ((_541 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _560 = _553 * _541;
    float _588 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _592 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _596 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _763;
    float _765;
    float _766;
    float _767;
    float _768;
    float _769;
    float _770;
    float _771;
    float _772;
    float _773;
    float _774;
    float _775;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _623 = fma(_596, cbModelParam._m0[26u].z, fma(_592, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _588));
        float _627 = fma(_596, cbModelParam._m0[27u].z, fma(_592, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _588));
        float _631 = fma(_596, cbModelParam._m0[28u].z, fma(_592, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _588));
        float _656 = _588 + _337;
        float _657 = _592 + _338;
        float _658 = _596 + _339;
        float _668 = fma(_658, cbModelParam._m0[26u].z, fma(_657, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _656)) - _623;
        float _669 = fma(_658, cbModelParam._m0[27u].z, fma(_657, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _656)) - _627;
        float _670 = fma(_658, cbModelParam._m0[28u].z, fma(_657, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _656)) - _631;
        float _674 = inversesqrt(dot(vec3(_668, _669, _670), vec3(_668, _669, _670)));
        float _687 = ((_674 * _668) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_623 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _688 = ((_674 * _669) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_627 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _689 = ((_674 * _670) / cbModelParam._m0[34u].z) + ((((((_631 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _692 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_687, _688, _689), 0.0);
        vec4 _699 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_687, _688, _689), 0.0);
        vec4 _706 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_687, _688, _689), 0.0);
        vec4 _713 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_687, _688, _689), 0.0);
        float _726 = exp2((_692.w + (-0.5)) * 20.0) * 2.0;
        float _736 = exp2((_699.w + (-0.5)) * 20.0) * 2.0;
        float _746 = exp2((_706.w + (-0.5)) * 20.0) * 2.0;
        float _756 = exp2((_713.w + (-0.5)) * 20.0) * 2.0;
        float _757 = _756 * (_713.x + (-0.5));
        float _758 = _756 * (_713.y + (-0.5));
        float _759 = _756 * (_713.z + (-0.5));
        _763 = _726 * (_692.z + (-0.5));
        _765 = _726 * (_692.y + (-0.5));
        _766 = _726 * (_692.x + (-0.5));
        _767 = _736 * (_699.z + (-0.5));
        _768 = _736 * (_699.y + (-0.5));
        _769 = _736 * (_699.x + (-0.5));
        _770 = _746 * (_706.z + (-0.5));
        _771 = _746 * (_706.y + (-0.5));
        _772 = _746 * (_706.x + (-0.5));
        _773 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
        _774 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
        _775 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    }
    else
    {
        _763 = _764;
        _765 = _764;
        _766 = _764;
        _767 = _764;
        _768 = _764;
        _769 = _764;
        _770 = _764;
        _771 = _764;
        _772 = _764;
        _773 = _764;
        _774 = _764;
        _775 = _764;
    }
    float _937;
    float _938;
    float _939;
    float _940;
    float _941;
    float _942;
    float _943;
    float _944;
    float _945;
    float _946;
    float _947;
    float _948;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _801 = fma(_596, cbModelParam._m0[30u].z, fma(_592, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _588));
        float _805 = fma(_596, cbModelParam._m0[31u].z, fma(_592, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _588));
        float _809 = fma(_596, cbModelParam._m0[32u].z, fma(_592, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _588));
        float _832 = _588 + _337;
        float _833 = _592 + _338;
        float _834 = _596 + _339;
        float _844 = fma(_834, cbModelParam._m0[30u].z, fma(_833, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _832)) - _801;
        float _845 = fma(_834, cbModelParam._m0[31u].z, fma(_833, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _832)) - _805;
        float _846 = fma(_834, cbModelParam._m0[32u].z, fma(_833, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _832)) - _809;
        float _850 = inversesqrt(dot(vec3(_844, _845, _846), vec3(_844, _845, _846)));
        float _863 = ((_850 * _844) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_801 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _864 = ((_850 * _845) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_805 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _865 = ((_850 * _846) / cbModelParam._m0[35u].z) + ((((((_809 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _867 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_863, _864, _865), 0.0);
        vec4 _874 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_863, _864, _865), 0.0);
        vec4 _881 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_863, _864, _865), 0.0);
        vec4 _888 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_863, _864, _865), 0.0);
        float _900 = exp2((_867.w + (-0.5)) * 20.0) * 2.0;
        float _910 = exp2((_874.w + (-0.5)) * 20.0) * 2.0;
        float _920 = exp2((_881.w + (-0.5)) * 20.0) * 2.0;
        float _930 = exp2((_888.w + (-0.5)) * 20.0) * 2.0;
        float _931 = _930 * (_888.x + (-0.5));
        float _932 = _930 * (_888.y + (-0.5));
        float _933 = _930 * (_888.z + (-0.5));
        _937 = _900 * (_867.z + (-0.5));
        _938 = _900 * (_867.y + (-0.5));
        _939 = _900 * (_867.x + (-0.5));
        _940 = _910 * (_874.z + (-0.5));
        _941 = _910 * (_874.y + (-0.5));
        _942 = _910 * (_874.x + (-0.5));
        _943 = _920 * (_881.z + (-0.5));
        _944 = _920 * (_881.y + (-0.5));
        _945 = _920 * (_881.x + (-0.5));
        _946 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        _947 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        _948 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
    }
    else
    {
        _937 = _764;
        _938 = _764;
        _939 = _764;
        _940 = _764;
        _941 = _764;
        _942 = _764;
        _943 = _764;
        _944 = _764;
        _945 = _764;
        _946 = _764;
        _947 = _764;
        _948 = _764;
    }
    float _963 = _528 * 0.5;
    float _964 = _529 * 0.5;
    float _965 = _530 * 0.5;
    float _966 = dot(vec4(_963, _964, _965, 1.0), vec4(_939, _942, _945, _948));
    float _969 = dot(vec4(_963, _964, _965, 1.0), vec4(_938, _941, _944, _947));
    float _972 = dot(vec4(_963, _964, _965, 1.0), vec4(_937, _940, _943, _946));
    float _1007;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _979 = dot(vec4(_963, _964, _965, 1.0), vec4(_763, _767, _770, _773));
        float _983 = dot(vec4(_963, _964, _965, 1.0), vec4(_765, _768, _771, _774));
        float _987 = dot(vec4(_963, _964, _965, 1.0), vec4(_766, _769, _772, _775));
        float _994 = dot(vec4(cbModelParam._m0[39u]), vec4(_963, _964, _965, 1.0));
        _1007 = dot(vec3(isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0)), isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0)), isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_994) ? 0.0 : (isnan(0.0) ? _994 : max(0.0, _994))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1007 = 1.0;
    }
    float _1018;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1009 = dot(vec4(cbModelParam._m0[40u]), vec4(_963, _964, _965, 1.0));
        _1018 = dot(vec3(isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0)), isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0)), isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1009) ? 0.0 : (isnan(0.0) ? _1009 : max(0.0, _1009))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1018 = 1.0;
    }
    float _1022 = (_1018 * cbModelParam._m0[1u].x) + (_1007 * (1.0 - cbModelParam._m0[1u].x));
    float _1030 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _344);
    float _1031 = isnan(_1030) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1030 : min(cbModelParam._m0[25u].z, _1030));
    float _1114;
    float _1116;
    float _1118;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1081 = fma(_596, cbModelParam._m0[13u].z, fma(_592, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _588)) + cbModelParam._m0[13u].w;
        float _1085 = fma(_596, cbModelParam._m0[14u].z, fma(_592, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _588)) + cbModelParam._m0[14u].w;
        float _1089 = fma(_596, cbModelParam._m0[15u].z, fma(_592, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _588)) + cbModelParam._m0[15u].w;
        float _1092 = fma(_530, cbModelParam._m0[13u].z, fma(_529, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _528));
        float _1095 = fma(_530, cbModelParam._m0[14u].z, fma(_529, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _528));
        float _1098 = fma(_530, cbModelParam._m0[15u].z, fma(_529, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _528));
        float _1126;
        if (_1092 > 0.0)
        {
            _1126 = abs((1.0 - _1081) / _1092);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1092 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1081 + 1.0) / _1092);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1126 = frontier_phi_16_14_ladder;
        }
        float _1495;
        if (_1095 > 0.0)
        {
            _1495 = abs((1.0 - _1085) / _1095);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1095 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1085 + 1.0) / _1095);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1495 = frontier_phi_25_21_ladder;
        }
        float _1701;
        if (_1098 > 0.0)
        {
            _1701 = abs((1.0 - _1089) / _1098);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1098 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1089 + 1.0) / _1098);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1701 = frontier_phi_37_32_ladder;
        }
        float _1703 = isnan(_1495) ? _1126 : (isnan(_1126) ? _1495 : min(_1126, _1495));
        float _1704 = isnan(_1701) ? _1703 : (isnan(_1703) ? _1701 : min(_1703, _1701));
        float _1708 = (_1704 * _1092) + _1081;
        float _1709 = (_1704 * _1095) + _1085;
        float _1710 = (_1704 * _1098) + _1089;
        float _1711 = _1704 * 9.9999997473787516355514526367188e-05;
        float _1713 = (-1.0) - _1711;
        float _1715 = _1711 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1710 > _1715) || ((_1710 < _1713) || ((_1709 > _1715) || ((_1709 < _1713) || ((_1708 < _1713) || (_1708 > _1715))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1908 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1710, cbModelParam._m0[9u].z, fma(_1709, cbModelParam._m0[9u].y, _1708 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1710, cbModelParam._m0[10u].z, fma(_1709, cbModelParam._m0[10u].y, _1708 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1710, cbModelParam._m0[11u].z, fma(_1709, cbModelParam._m0[11u].y, _1708 * cbModelParam._m0[11u].x))), _1031);
            frontier_phi_15_37_ladder = _1908.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1908.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1908.x * cbModelParam._m0[1u].y;
        }
        _1114 = frontier_phi_15_37_ladder_2;
        _1116 = frontier_phi_15_37_ladder_1;
        _1118 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1102 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_528, _529, _530), _1031);
        _1114 = _1102.x * cbModelParam._m0[1u].y;
        _1116 = _1102.y * cbModelParam._m0[1u].y;
        _1118 = _1102.z * cbModelParam._m0[1u].y;
    }
    float _1122 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _344);
    float _1123 = isnan(_1122) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1122 : min(cbModelParam._m0[25u].w, _1122));
    float _1216;
    float _1218;
    float _1220;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1180 = fma(_596, cbModelParam._m0[21u].z, fma(_592, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _588)) + cbModelParam._m0[21u].w;
        float _1184 = fma(_596, cbModelParam._m0[22u].z, fma(_592, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _588)) + cbModelParam._m0[22u].w;
        float _1188 = fma(_596, cbModelParam._m0[23u].z, fma(_592, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _588)) + cbModelParam._m0[23u].w;
        float _1191 = fma(_530, cbModelParam._m0[21u].z, fma(_529, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _528));
        float _1194 = fma(_530, cbModelParam._m0[22u].z, fma(_529, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _528));
        float _1197 = fma(_530, cbModelParam._m0[23u].z, fma(_529, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _528));
        float _1500;
        if (_1191 > 0.0)
        {
            _1500 = abs((1.0 - _1180) / _1191);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1191 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1180 + 1.0) / _1191);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1500 = frontier_phi_27_23_ladder;
        }
        float _1728;
        if (_1194 > 0.0)
        {
            _1728 = abs((1.0 - _1184) / _1194);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1194 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1184 + 1.0) / _1194);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1728 = frontier_phi_39_34_ladder;
        }
        float _2022;
        if (_1197 > 0.0)
        {
            _2022 = abs((1.0 - _1188) / _1197);
        }
        else
        {
            float frontier_phi_50_45_ladder;
            if (_1197 < 0.0)
            {
                frontier_phi_50_45_ladder = abs((_1188 + 1.0) / _1197);
            }
            else
            {
                frontier_phi_50_45_ladder = 5000.0;
            }
            _2022 = frontier_phi_50_45_ladder;
        }
        float _2024 = isnan(_1728) ? _1500 : (isnan(_1500) ? _1728 : min(_1500, _1728));
        float _2025 = isnan(_2022) ? _2024 : (isnan(_2024) ? _2022 : min(_2024, _2022));
        float _2029 = (_2025 * _1191) + _1180;
        float _2030 = (_2025 * _1194) + _1184;
        float _2031 = (_2025 * _1197) + _1188;
        float _2032 = _2025 * 9.9999997473787516355514526367188e-05;
        float _2033 = (-1.0) - _2032;
        float _2035 = _2032 + 1.0;
        float frontier_phi_24_50_ladder;
        float frontier_phi_24_50_ladder_1;
        float frontier_phi_24_50_ladder_2;
        if ((_2031 > _2035) || ((_2031 < _2033) || ((_2030 > _2035) || ((_2030 < _2033) || ((_2029 < _2033) || (_2029 > _2035))))))
        {
            frontier_phi_24_50_ladder = 0.0;
            frontier_phi_24_50_ladder_1 = 0.0;
            frontier_phi_24_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2140 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2031, cbModelParam._m0[17u].z, fma(_2030, cbModelParam._m0[17u].y, _2029 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2031, cbModelParam._m0[18u].z, fma(_2030, cbModelParam._m0[18u].y, _2029 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2031, cbModelParam._m0[19u].z, fma(_2030, cbModelParam._m0[19u].y, _2029 * cbModelParam._m0[19u].x))), _1123);
            frontier_phi_24_50_ladder = _2140.x * cbModelParam._m0[1u].z;
            frontier_phi_24_50_ladder_1 = _2140.z * cbModelParam._m0[1u].z;
            frontier_phi_24_50_ladder_2 = _2140.y * cbModelParam._m0[1u].z;
        }
        _1216 = frontier_phi_24_50_ladder;
        _1218 = frontier_phi_24_50_ladder_2;
        _1220 = frontier_phi_24_50_ladder_1;
    }
    else
    {
        vec4 _1200 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_528, _529, _530), _1123);
        _1216 = _1200.x * cbModelParam._m0[1u].z;
        _1218 = _1200.y * cbModelParam._m0[1u].z;
        _1220 = _1200.z * cbModelParam._m0[1u].z;
    }
    float _1233 = (((_559 * _341) + _560) * _519) * ((cbModelParam._m0[1u].w * (_1216 - _1114)) + _1114);
    float _1235 = (((_559 * _342) + _560) * _519) * ((cbModelParam._m0[1u].w * (_1218 - _1116)) + _1116);
    float _1237 = (((_559 * _343) + _560) * _519) * ((cbModelParam._m0[1u].w * (_1220 - _1118)) + _1118);
    float _1258 = fma(_1237, cbSceneParam._m0[89u].z, fma(_1235, cbSceneParam._m0[89u].y, _1233 * cbSceneParam._m0[89u].x));
    float _1261 = fma(_1237, cbSceneParam._m0[90u].z, fma(_1235, cbSceneParam._m0[90u].y, _1233 * cbSceneParam._m0[90u].x));
    float _1264 = fma(_1237, cbSceneParam._m0[91u].z, fma(_1235, cbSceneParam._m0[91u].y, _1233 * cbSceneParam._m0[91u].x));
    vec4 _1272 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_412, _413));
    float _1274 = _1272.w;
    uint _1289 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1293 = floatBitsToUint(cbInstanceData._m0[_1289 + 5u]);
    uint _1295 = _1293.x * 14u;
    uint _1296 = _1295 + 13u;
    float _1302 = _519 + (-1.0);
    float _1307 = (cbLight._m0[_1296].x * _1302) + 1.0;
    float _1308 = (cbLight._m0[_1296].y * _1302) + 1.0;
    float _1309 = (cbLight._m0[_1296].w * _1302) + 1.0;
    uint _1313 = _1295 + 8u;
    float _1329 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1295].w)) * _344) * 0.949999988079071044921875);
    float _1330 = _1329 * _1329;
    float _1331 = cbLight._m0[_1295].x + _405;
    float _1332 = cbLight._m0[_1295].y + _406;
    float _1333 = cbLight._m0[_1295].z + _407;
    float _1337 = inversesqrt(dot(vec3(_1331, _1332, _1333), vec3(_1331, _1332, _1333)));
    float _1338 = _1337 * _1331;
    float _1339 = _1337 * _1332;
    float _1340 = _1337 * _1333;
    float _1341 = dot(vec3(_337, _338, _339), vec3(cbLight._m0[_1295].xyz));
    float _3029 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
    float _1344 = isnan(1.0) ? _3029 : (isnan(_3029) ? 1.0 : min(_3029, 1.0));
    float _3040 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _1345 = isnan(1.0) ? _3040 : (isnan(_3040) ? 1.0 : min(_3040, 1.0));
    float _1346 = dot(vec3(_337, _338, _339), vec3(_1338, _1339, _1340));
    float _3051 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
    float _1349 = isnan(1.0) ? _3051 : (isnan(_3051) ? 1.0 : min(_3051, 1.0));
    float _1350 = dot(vec3(cbLight._m0[_1295].xyz), vec3(_1338, _1339, _1340));
    float _3062 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
    float _1354 = _1330 * _1330;
    float _1358 = ((_1349 * _1349) * (_1354 + (-1.0))) + 1.0;
    float _1366 = exp2(log2(1.0 - (isnan(1.0) ? _3062 : (isnan(_3062) ? 1.0 : min(_3062, 1.0)))) * 5.0);
    float _1367 = 1.0 - _341;
    float _1368 = 1.0 - _342;
    float _1369 = 1.0 - _343;
    float _1376 = 1.0 - _1330;
    float _1387 = (0.5 / (((_1345 * ((_1344 * _1376) + _1330)) + 9.9999999392252902907785028219223e-09) + (((_1345 * _1376) + _1330) * _1344))) * _1344;
    float _3073 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
    float _1389 = (isnan(1.0) ? _3073 : (isnan(_3073) ? 1.0 : min(_3073, 1.0))) * (_1354 / ((_1358 * _1358) * 3.141590118408203125));
    float _1390 = isnan(1.0) ? _1307 : (isnan(_1307) ? 1.0 : min(_1307, 1.0));
    uint _1403 = _1295 | 1u;
    uint _1407 = _1295 + 9u;
    float _1421 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1403].w)) * _344) * 0.949999988079071044921875);
    float _1422 = _1421 * _1421;
    float _1423 = cbLight._m0[_1403].x + _405;
    float _1424 = cbLight._m0[_1403].y + _406;
    float _1425 = cbLight._m0[_1403].z + _407;
    float _1429 = inversesqrt(dot(vec3(_1423, _1424, _1425), vec3(_1423, _1424, _1425)));
    float _1430 = _1429 * _1423;
    float _1431 = _1429 * _1424;
    float _1432 = _1429 * _1425;
    float _1433 = dot(vec3(_337, _338, _339), vec3(cbLight._m0[_1403].xyz));
    float _3089 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
    float _1436 = isnan(1.0) ? _3089 : (isnan(_3089) ? 1.0 : min(_3089, 1.0));
    float _1437 = dot(vec3(_337, _338, _339), vec3(_1430, _1431, _1432));
    float _3100 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
    float _1440 = isnan(1.0) ? _3100 : (isnan(_3100) ? 1.0 : min(_3100, 1.0));
    float _1441 = dot(vec3(cbLight._m0[_1403].xyz), vec3(_1430, _1431, _1432));
    float _3111 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
    float _1445 = _1422 * _1422;
    float _1449 = ((_1440 * _1440) * (_1445 + (-1.0))) + 1.0;
    float _1456 = exp2(log2(1.0 - (isnan(1.0) ? _3111 : (isnan(_3111) ? 1.0 : min(_3111, 1.0)))) * 5.0);
    float _1463 = 1.0 - _1422;
    float _1473 = (0.5 / (((_1345 * ((_1436 * _1463) + _1422)) + 9.9999999392252902907785028219223e-09) + (((_1345 * _1463) + _1422) * _1436))) * _1436;
    float _3122 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
    float _1475 = (isnan(1.0) ? _3122 : (isnan(_3122) ? 1.0 : min(_3122, 1.0))) * (_1445 / ((_1449 * _1449) * 3.141590118408203125));
    float _1476 = isnan(1.0) ? _1308 : (isnan(_1308) ? 1.0 : min(_1308, 1.0));
    float _1486 = (((((_1456 * _1367) + _341) * cbLight._m0[_1407].x) * _1475) * _1476) + ((((cbLight._m0[_1313].x * ((1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1274))) * ((_1366 * _1367) + _341)) * _1389) * _1390);
    float _1487 = (((((_1456 * _1368) + _342) * cbLight._m0[_1407].y) * _1475) * _1476) + ((((cbLight._m0[_1313].y * ((1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1274))) * ((_1366 * _1368) + _342)) * _1389) * _1390);
    float _1488 = (((((_1456 * _1369) + _343) * cbLight._m0[_1407].z) * _1475) * _1476) + ((((cbLight._m0[_1313].z * ((1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1274))) * ((_1366 * _1369) + _343)) * _1389) * _1390);
    uvec4 _1492 = floatBitsToUint(cbLight._m0[_1295 + 12u]);
    float _1505;
    float _1507;
    float _1509;
    if (_1492.x == 0u)
    {
        _1505 = _1486;
        _1507 = _1487;
        _1509 = _1488;
    }
    else
    {
        float _1515 = (cbLight._m0[_1296].z * _1302) + 1.0;
        uint _1516 = _1295 + 2u;
        uint _1520 = _1295 + 10u;
        float _1534 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1516].w)) * _344) * 0.949999988079071044921875);
        float _1535 = _1534 * _1534;
        float _1536 = cbLight._m0[_1516].x + _405;
        float _1537 = cbLight._m0[_1516].y + _406;
        float _1538 = cbLight._m0[_1516].z + _407;
        float _1542 = inversesqrt(dot(vec3(_1536, _1537, _1538), vec3(_1536, _1537, _1538)));
        float _1543 = _1542 * _1536;
        float _1544 = _1542 * _1537;
        float _1545 = _1542 * _1538;
        float _1546 = dot(vec3(_337, _338, _339), vec3(cbLight._m0[_1516].xyz));
        float _3138 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1549 = isnan(1.0) ? _3138 : (isnan(_3138) ? 1.0 : min(_3138, 1.0));
        float _1550 = dot(vec3(_337, _338, _339), vec3(_1543, _1544, _1545));
        float _3149 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1553 = isnan(1.0) ? _3149 : (isnan(_3149) ? 1.0 : min(_3149, 1.0));
        float _1554 = dot(vec3(cbLight._m0[_1516].xyz), vec3(_1543, _1544, _1545));
        float _3160 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1558 = _1535 * _1535;
        float _1562 = ((_1553 * _1553) * (_1558 + (-1.0))) + 1.0;
        float _1569 = exp2(log2(1.0 - (isnan(1.0) ? _3160 : (isnan(_3160) ? 1.0 : min(_3160, 1.0)))) * 5.0);
        float _1576 = 1.0 - _1535;
        float _1586 = (0.5 / (((_1345 * ((_1549 * _1576) + _1535)) + 9.9999999392252902907785028219223e-09) + (((_1345 * _1576) + _1535) * _1549))) * _1549;
        float _3171 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1588 = (isnan(1.0) ? _3171 : (isnan(_3171) ? 1.0 : min(_3171, 1.0))) * (_1558 / ((_1562 * _1562) * 3.141590118408203125));
        float _1589 = isnan(1.0) ? _1515 : (isnan(_1515) ? 1.0 : min(_1515, 1.0));
        _1505 = (((((_1569 * _1367) + _341) * cbLight._m0[_1520].x) * _1588) * _1589) + _1486;
        _1507 = (((((_1569 * _1368) + _342) * cbLight._m0[_1520].y) * _1588) * _1589) + _1487;
        _1509 = (((((_1569 * _1369) + _343) * cbLight._m0[_1520].z) * _1588) * _1589) + _1488;
    }
    float _1607;
    float _1609;
    float _1611;
    if (_1492.y == 0u)
    {
        _1607 = _1505;
        _1609 = _1507;
        _1611 = _1509;
    }
    else
    {
        uint _1618 = _1295 + 3u;
        uint _1622 = _1295 + 11u;
        float _1636 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1618].w)) * _344) * 0.949999988079071044921875);
        float _1637 = _1636 * _1636;
        float _1638 = cbLight._m0[_1618].x + _405;
        float _1639 = cbLight._m0[_1618].y + _406;
        float _1640 = cbLight._m0[_1618].z + _407;
        float _1644 = inversesqrt(dot(vec3(_1638, _1639, _1640), vec3(_1638, _1639, _1640)));
        float _1645 = _1644 * _1638;
        float _1646 = _1644 * _1639;
        float _1647 = _1644 * _1640;
        float _1648 = dot(vec3(_337, _338, _339), vec3(cbLight._m0[_1618].xyz));
        float _3187 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1651 = isnan(1.0) ? _3187 : (isnan(_3187) ? 1.0 : min(_3187, 1.0));
        float _1652 = dot(vec3(_337, _338, _339), vec3(_1645, _1646, _1647));
        float _3198 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1655 = isnan(1.0) ? _3198 : (isnan(_3198) ? 1.0 : min(_3198, 1.0));
        float _1656 = dot(vec3(cbLight._m0[_1618].xyz), vec3(_1645, _1646, _1647));
        float _3209 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1660 = _1637 * _1637;
        float _1664 = ((_1655 * _1655) * (_1660 + (-1.0))) + 1.0;
        float _1671 = exp2(log2(1.0 - (isnan(1.0) ? _3209 : (isnan(_3209) ? 1.0 : min(_3209, 1.0)))) * 5.0);
        float _1678 = 1.0 - _1637;
        float _1688 = (0.5 / (((_1345 * ((_1651 * _1678) + _1637)) + 9.9999999392252902907785028219223e-09) + (((_1345 * _1678) + _1637) * _1651))) * _1651;
        float _3220 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
        float _1690 = (isnan(1.0) ? _3220 : (isnan(_3220) ? 1.0 : min(_3220, 1.0))) * (_1660 / ((_1664 * _1664) * 3.141590118408203125));
        float _1691 = isnan(1.0) ? _1309 : (isnan(_1309) ? 1.0 : min(_1309, 1.0));
        _1607 = (((((_1671 * _1367) + _341) * cbLight._m0[_1622].x) * _1690) * _1691) + _1505;
        _1609 = (((((_1671 * _1368) + _342) * cbLight._m0[_1622].y) * _1690) * _1691) + _1507;
        _1611 = (((((_1671 * _1369) + _343) * cbLight._m0[_1622].z) * _1690) * _1691) + _1509;
    }
    float _1832;
    float _1834;
    float _1836;
    if (_1293.y == 0u)
    {
        float _1772 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1773 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1772;
        float _1774 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1772;
        float _1775 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1772;
        uvec4 _1787 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1788 = _1787.x;
        uint _1799 = uint((float(_1787.y) * floor(float(uint(cbSceneParam._m0[85u].y * _413) / _1788))) + floor(float(uint(cbSceneParam._m0[85u].x * _412) / _1788)));
        float _1809 = (log2(_1775 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1810 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
        uint _1813 = uint(isnan(14.0) ? _1810 : (isnan(_1810) ? 14.0 : min(_1810, 14.0)));
        uvec4 _1818 = texelFetch(g_lightClusterGridBuffer, int(((_1813 << 2u) + (_1799 << 6u)) >> 2u));
        uint _1819 = _1818.x;
        uint _1820 = _1787.z;
        float _1917;
        float _1919;
        float _1921;
        if (((((1u << ((_1820 >> 4u) & 15u)) + 4294967295u) & _1819) == 0u) || ((_1820 & 240u) == 0u))
        {
            _1917 = 0.0;
            _1919 = 0.0;
            _1921 = 0.0;
        }
        else
        {
            float _1918;
            float _1920;
            float _1922;
            float _2071 = 0.0;
            float _2072 = 0.0;
            float _2073 = 0.0;
            uint _2074 = 0u;
            uint _2083;
            bool _2084;
            for (;;)
            {
                _2083 = texelFetch(g_lightClassification, int((((_1813 << 5u) + (_1799 << 9u)) + (_2074 << 2u)) >> 2u)).x;
                _2084 = _2083 == 0u;
                float frontier_phi_59_pred;
                float frontier_phi_59_pred_1;
                float frontier_phi_59_pred_2;
                if (_2084)
                {
                    frontier_phi_59_pred = _2073;
                    frontier_phi_59_pred_1 = _2072;
                    frontier_phi_59_pred_2 = _2071;
                }
                else
                {
                    float _2207;
                    float _2208;
                    float _2209;
                    uint _2210;
                    _2207 = _2071;
                    _2208 = _2072;
                    _2209 = _2073;
                    _2210 = _2083;
                    float _2145;
                    float _2146;
                    float _2147;
                    for (;;)
                    {
                        uint _2214 = uint(findLSB(_2210)) + (_2074 << 5u);
                        uint _2211 = (_2210 + 4294967295u) & _2210;
                        uint _2216 = _2214 * 48u;
                        vec4 _2230 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2216)).x, texelFetch(g_PointLightRenderingBuffer, int(_2216 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2216 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2216 + 3u)).x));
                        uint _2247 = (_2214 * 48u) + 8u;
                        vec3 _2258 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2247)).x, texelFetch(g_PointLightRenderingBuffer, int(_2247 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2247 + 2u)).x));
                        float _2262 = _2230.x - _1773;
                        float _2263 = _2230.y - _1774;
                        float _2264 = _2230.z - _1775;
                        float _2265 = dot(vec3(_2262, _2263, _2264), vec3(_2262, _2263, _2264));
                        float _2268 = inversesqrt(_2265);
                        float _2269 = _2268 * _2262;
                        float _2270 = _2268 * _2263;
                        float _2271 = _2268 * _2264;
                        float _2277 = 1.0 - (_2265 * _2230.w);
                        float _3246 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
                        float _2279 = sqrt(_2265) * uintBitsToFloat(uvec4(_2237, _2238, _2239, texelFetch(g_PointLightRenderingBuffer, int(((_2214 * 48u) + 4u) + 3u)).x)).w;
                        float _2283 = _2279 * _2279;
                        float _2284 = (-0.0) - _1773;
                        float _2285 = (-0.0) - _1774;
                        float _2286 = (-0.0) - _1775;
                        float _2290 = inversesqrt(dot(vec3(_2284, _2285, _2286), vec3(_2284, _2285, _2286)));
                        float _2291 = _2290 * _2284;
                        float _2292 = _2290 * _2285;
                        float _2293 = _2290 * _2286;
                        float _2301 = exp2(log2(1.0 / ((_2283 * 3.5) + 5.0)) * 0.25);
                        float _2302 = 1.0 - _541;
                        float _2309 = sqrt(1.0 - ((1.0 - (_2302 * _2302)) * (1.0 - (_2301 * _2301))));
                        float _2310 = _2309 * _2309;
                        float _2311 = _2310 * _2310;
                        float _2312 = _2291 + _2269;
                        float _2313 = _2292 + _2270;
                        float _2314 = _2293 + _2271;
                        float _2318 = inversesqrt(dot(vec3(_2312, _2313, _2314), vec3(_2312, _2313, _2314)));
                        float _2322 = dot(vec3(_434, _437, _440), vec3(_2291, _2292, _2293));
                        float _3257 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
                        float _2325 = isnan(1.0) ? _3257 : (isnan(_3257) ? 1.0 : min(_3257, 1.0));
                        float _2326 = dot(vec3(_434, _437, _440), vec3(_2318 * _2312, _2318 * _2313, _2318 * _2314));
                        float _3268 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
                        float _2329 = isnan(1.0) ? _3268 : (isnan(_3268) ? 1.0 : min(_3268, 1.0));
                        float _2333 = ((_2329 * _2329) * (_2311 + (-1.0))) + 1.0;
                        float _2334 = (1.39999997615814208984375 / (_2279 + 1.39999997615814208984375)) * _2310;
                        float _2335 = _2334 * _2334;
                        float _2338 = ((1.0 - _2335) * dot(vec3(_434, _437, _440), vec3(_2269, _2270, _2271))) + _2335;
                        float _3279 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
                        float _2339 = isnan(1.0) ? _3279 : (isnan(_3279) ? 1.0 : min(_3279, 1.0));
                        float _2340 = 1.0 - _2310;
                        float _2350 = (0.5 / (((_2339 * ((_2325 * _2340) + _2310)) + 9.9999999392252902907785028219223e-09) + (((_2339 * _2340) + _2310) * _2325))) * _2339;
                        float _3290 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
                        float _2361 = (((_2311 * 3.1415927410125732421875) * (isnan(1.0) ? _3290 : (isnan(_3290) ? 1.0 : min(_3290, 1.0)))) / ((_2333 * _2333) * ((_2283 * 2.1991131305694580078125) + 3.141590118408203125))) * (isnan(1.0) ? _3246 : (isnan(_3246) ? 1.0 : min(_3246, 1.0)));
                        _2145 = (_2361 * _2258.x) + _2207;
                        _2146 = (_2361 * _2258.y) + _2208;
                        _2147 = (_2361 * _2258.z) + _2209;
                        if (_2211 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2207 = _2145;
                            _2208 = _2146;
                            _2209 = _2147;
                            _2210 = _2211;
                        }
                    }
                    frontier_phi_59_pred = _2147;
                    frontier_phi_59_pred_1 = _2146;
                    frontier_phi_59_pred_2 = _2145;
                }
                _1922 = frontier_phi_59_pred;
                _1920 = frontier_phi_59_pred_1;
                _1918 = frontier_phi_59_pred_2;
                uint _2075 = _2074 + 1u;
                if (_2075 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2071 = _1918;
                    _2072 = _1920;
                    _2073 = _1922;
                    _2074 = _2075;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1917 = _1918;
            _1919 = _1920;
            _1921 = _1922;
        }
        uvec4 _1925 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1926 = _1925.z;
        uint _1928 = (_1926 >> 8u) & 15u;
        float _2048;
        float _2050;
        float _2052;
        if (((4294967295u << _1928) & _1819) == 0u)
        {
            _2048 = _1917;
            _2050 = _1919;
            _2052 = _1921;
        }
        else
        {
            float _2064 = inversesqrt(dot(vec3(_1773, _1774, _1775), vec3(_1773, _1774, _1775)));
            float _2065 = _2064 * _1773;
            float _2066 = _2064 * _1774;
            float _2067 = _2064 * _1775;
            float frontier_phi_52_53_ladder;
            float frontier_phi_52_53_ladder_1;
            float frontier_phi_52_53_ladder_2;
            if (_1928 < ((_1926 >> 12u) & 15u))
            {
                float _2049;
                float _2051;
                float _2053;
                float _2193 = _1917;
                float _2194 = _1919;
                float _2195 = _1921;
                uint _2196 = _1928;
                uint _2205;
                bool _2206;
                for (;;)
                {
                    _2205 = texelFetch(g_lightClassification, int((((_1813 << 5u) + (_1799 << 9u)) + (_2196 << 2u)) >> 2u)).x;
                    _2206 = _2205 == 0u;
                    float frontier_phi_65_pred;
                    float frontier_phi_65_pred_1;
                    float frontier_phi_65_pred_2;
                    if (_2206)
                    {
                        frontier_phi_65_pred = _2195;
                        frontier_phi_65_pred_1 = _2194;
                        frontier_phi_65_pred_2 = _2193;
                    }
                    else
                    {
                        float _2366;
                        float _2367;
                        float _2368;
                        float _2632;
                        float _2633;
                        float _2634;
                        float _2376 = _2193;
                        float _2377 = _2194;
                        float _2378 = _2195;
                        uint _2379 = _2205;
                        uint _2380;
                        uint _2390;
                        vec4 _2405;
                        float _2406;
                        vec3 _2418;
                        vec4 _2434;
                        vec4 _2450;
                        float _2497;
                        bool _2498;
                        for (;;)
                        {
                            _2390 = ((_2196 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2379));
                            _2380 = (_2379 + 4294967295u) & _2379;
                            uint _2392 = _2390 * 40u;
                            _2405 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2392)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2392 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2392 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2392 + 3u)).x));
                            _2406 = _2405.w;
                            uint _2408 = (_2390 * 40u) + 8u;
                            _2418 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2408)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2408 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2408 + 2u)).x));
                            uint _2421 = (_2390 * 40u) + 16u;
                            _2434 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2421)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2421 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2421 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2421 + 3u)).x));
                            uint _2437 = (_2390 * 40u) + 20u;
                            _2450 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2437)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2437 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2437 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2437 + 3u)).x));
                            uint _2453 = (_2390 * 40u) + 24u;
                            vec4 _2466 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2453)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2453 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2453 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2453 + 3u)).x));
                            uint _2472 = (_2390 * 40u) + 28u;
                            vec4 _2485 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2472)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2472 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2472 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2472 + 3u)).x));
                            _2497 = fma(_1775, _2485.z, fma(_1774, _2485.y, _2485.x * _1773)) + _2485.w;
                            _2498 = !((fma(_1775, _2466.z, fma(_1774, _2466.y, _2466.x * _1773)) + _2466.w) <= 0.0);
                            float frontier_phi_71_pred;
                            float frontier_phi_71_pred_1;
                            float frontier_phi_71_pred_2;
                            if (_2498)
                            {
                                float _2532 = _2405.x - _1773;
                                float _2533 = _2405.y - _1774;
                                float _2534 = _2405.z - _1775;
                                float _2535 = dot(vec3(_2532, _2533, _2534), vec3(_2532, _2533, _2534));
                                float _2538 = inversesqrt(_2535);
                                float _2539 = _2538 * _2532;
                                float _2540 = _2538 * _2533;
                                float _2541 = _2538 * _2534;
                                float _2545 = 1.0 - (_2535 / (_2406 * _2406));
                                float _3301 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
                                float _2547 = sqrt(_2535) * uintBitsToFloat(uvec4(_2501, _2502, _2503, texelFetch(g_SpotLightRenderingBuffer, int(((_2390 * 40u) + 4u) + 3u)).x)).w;
                                float _2550 = _2547 * _2547;
                                float _2551 = (fma(_1775, _2434.z, fma(_1774, _2434.y, _2434.x * _1773)) + _2434.w) / _2497;
                                float _2552 = (fma(_1775, _2450.z, fma(_1774, _2450.y, _2450.x * _1773)) + _2450.w) / _2497;
                                float _2556 = 1.0 - dot(vec2(_2551, _2552), vec2(_2551, _2552));
                                float _3312 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
                                float _2566 = exp2(log2(1.0 / ((_2550 * 3.5) + 5.0)) * 0.25);
                                float _2567 = 1.0 - _541;
                                float _2574 = sqrt(1.0 - ((1.0 - (_2567 * _2567)) * (1.0 - (_2566 * _2566))));
                                float _2575 = _2574 * _2574;
                                float _2576 = _2575 * _2575;
                                float _2577 = _2539 - _2065;
                                float _2578 = _2540 - _2066;
                                float _2579 = _2541 - _2067;
                                float _2583 = inversesqrt(dot(vec3(_2577, _2578, _2579), vec3(_2577, _2578, _2579)));
                                float _2587 = dot(vec3(_434, _437, _440), vec3((-0.0) - _2065, (-0.0) - _2066, (-0.0) - _2067));
                                float _3323 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
                                float _2590 = isnan(1.0) ? _3323 : (isnan(_3323) ? 1.0 : min(_3323, 1.0));
                                float _2591 = dot(vec3(_434, _437, _440), vec3(_2583 * _2577, _2583 * _2578, _2583 * _2579));
                                float _3334 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
                                float _2594 = isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0));
                                float _2598 = ((_2594 * _2594) * (_2576 + (-1.0))) + 1.0;
                                float _2599 = (1.39999997615814208984375 / (_2547 + 1.39999997615814208984375)) * _2575;
                                float _2600 = _2599 * _2599;
                                float _2606 = ((1.0 - _2600) * dot(vec3(_434, _437, _440), vec3(_2539, _2540, _2541))) + _2600;
                                float _3345 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
                                float _2607 = isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0));
                                float _2608 = 1.0 - _2575;
                                float _2618 = (0.5 / (((_2607 * ((_2590 * _2608) + _2575)) + 9.9999999392252902907785028219223e-09) + (((_2607 * _2608) + _2575) * _2590))) * _2607;
                                float _3356 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
                                float _2628 = ((isnan(1.0) ? _3312 : (isnan(_3312) ? 1.0 : min(_3312, 1.0))) * (isnan(1.0) ? _3301 : (isnan(_3301) ? 1.0 : min(_3301, 1.0)))) * (((_2576 * 3.1415927410125732421875) * (isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0)))) / ((_2598 * _2598) * ((_2550 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_71_pred = _2628 * _2418.z;
                                frontier_phi_71_pred_1 = _2628 * _2418.y;
                                frontier_phi_71_pred_2 = _2628 * _2418.x;
                            }
                            else
                            {
                                frontier_phi_71_pred = 0.0;
                                frontier_phi_71_pred_1 = 0.0;
                                frontier_phi_71_pred_2 = 0.0;
                            }
                            _2634 = frontier_phi_71_pred;
                            _2633 = frontier_phi_71_pred_1;
                            _2632 = frontier_phi_71_pred_2;
                            _2366 = _2632 + _2376;
                            _2367 = _2633 + _2377;
                            _2368 = _2634 + _2378;
                            if (_2380 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2376 = _2366;
                                _2377 = _2367;
                                _2378 = _2368;
                                _2379 = _2380;
                                continue;
                            }
                        }
                        frontier_phi_65_pred = _2368;
                        frontier_phi_65_pred_1 = _2367;
                        frontier_phi_65_pred_2 = _2366;
                    }
                    _2053 = frontier_phi_65_pred;
                    _2051 = frontier_phi_65_pred_1;
                    _2049 = frontier_phi_65_pred_2;
                    uint _2197 = _2196 + 1u;
                    if (_2197 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2193 = _2049;
                        _2194 = _2051;
                        _2195 = _2053;
                        _2196 = _2197;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_52_53_ladder = _2053;
                frontier_phi_52_53_ladder_1 = _2051;
                frontier_phi_52_53_ladder_2 = _2049;
            }
            else
            {
                frontier_phi_52_53_ladder = _1921;
                frontier_phi_52_53_ladder_1 = _1919;
                frontier_phi_52_53_ladder_2 = _1917;
            }
            _2048 = frontier_phi_52_53_ladder_2;
            _2050 = frontier_phi_52_53_ladder_1;
            _2052 = frontier_phi_52_53_ladder;
        }
        float _2057 = isnan(1.0) ? _519 : (isnan(_519) ? 1.0 : min(_519, 1.0));
        _1832 = ((_2048 * _341) * _2057) + _1607;
        _1834 = ((_2050 * _342) * _2057) + _1609;
        _1836 = ((_2052 * _343) * _2057) + _1611;
    }
    else
    {
        _1832 = _1607;
        _1834 = _1609;
        _1836 = _1611;
    }
    float _1840 = 0.959999978542327880859375 - ((isnan(1.0) ? _507 : (isnan(_507) ? 1.0 : min(_507, 1.0))) * 0.959999978542327880859375);
    float _1848 = _1840 - (exp2(log2(1.0 - _535) * 5.0) * _1840);
    uint _1855 = _1289 + 6u;
    float _1863 = _412 / cbSceneParam._m0[86u].x;
    float _1864 = _413 / cbSceneParam._m0[86u].y;
    vec4 _1878 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1863, _1864, (log2((isnan(cbSceneParam._m0[77u].w) ? _349 : (isnan(_349) ? cbSceneParam._m0[77u].w : min(_349, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1880 = _1878.x;
    float _1881 = _1878.y;
    float _1882 = _1878.z;
    float _1883 = _1878.w;
    float _1973;
    float _1975;
    float _1977;
    float _1979;
    if (_349 > cbSceneParam._m0[78u].w)
    {
        float _1936 = isnan(_349) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _349 : min(cbSceneParam._m0[80u].w, _349));
        float _1937 = _1936 / _349;
        float _1948 = _1937 * _398;
        float _1949 = _399 * _1937;
        float _1950 = (-0.0) - _1949;
        float _1951 = _1937 * _400;
        float _1953 = (cbSceneParam._m0[77u].w * _1950) / _1936;
        float _1954 = _1953 + cbSceneParam._m0[79u].w;
        float _1955 = cbSceneParam._m0[79u].w - _1949;
        float _1961 = sqrt(((_1948 * _1948) + (_1949 * _1949)) + (_1951 * _1951));
        float _1964 = (1.0 - (cbSceneParam._m0[77u].w / _1936)) * _1961;
        float _1969 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1971 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2155;
        if (abs((_1950 - _1953) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2155 = ((((_1954 > 0.0) ? exp2(_1969 * _1954) : (2.0 - exp2(_1971 * _1954))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1964;
        }
        else
        {
            float _2097 = 1.0 / cbSceneParam._m0[80u].x;
            float _2098 = isnan(_1955) ? _1954 : (isnan(_1954) ? _1955 : max(_1954, _1955));
            float _2099 = isnan(_1955) ? _1954 : (isnan(_1954) ? _1955 : min(_1954, _1955));
            float _2108 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : min(_2098, 0.0));
            float _2109 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : min(_2099, 0.0));
            _2155 = ((abs(_1961 / _1950) * cbSceneParam._m0[80u].y) * ((((_2108 - _2109) * 2.0) - ((exp2(_1969 * (isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0)))) - exp2(_1969 * (isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0))))) * _2097)) - ((exp2(_1971 * _2108) - exp2(_1971 * _2109)) * _2097))) + (_1964 * cbSceneParam._m0[80u].z);
        }
        vec4 _2157 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1863, _1864, 1.0), 0.0);
        float _2166 = exp2((_2155 * (-1.44269502162933349609375)) * (1.0 - _2157.w));
        float _2167 = log2(_2166);
        float _2183 = log2(_1883);
        _1973 = (exp2(_2183 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2167 * cbSceneParam._m0[78u].x)) * _2157.x) / cbSceneParam._m0[78u].x)) + _1880;
        _1975 = (exp2(_2183 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2167 * cbSceneParam._m0[78u].y)) * _2157.y) / cbSceneParam._m0[78u].y)) + _1881;
        _1977 = (exp2(_2183 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2167 * cbSceneParam._m0[78u].z)) * _2157.z) / cbSceneParam._m0[78u].z)) + _1882;
        _1979 = _2166 * _1883;
    }
    else
    {
        _1973 = _1880;
        _1975 = _1881;
        _1977 = _1882;
        _1979 = _1883;
    }
    float _1990 = roundEven(cbMatDynParam._m0[0u].y);
    bool _1991 = _1990 == 3.0;
    float _1992 = log2(_1979);
    float _1999 = exp2(_1992 * cbSceneParam._m0[78u].x) * (((_1832 + ((isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0))) * _1022)) * cbPerFrame._m0[3u].x) + (((cbSceneParam._m0[72u].w * _258.x) * exp2((-0.0) - ((cbMtdParam._m0[10u].w * _316) * _317))) * _1848));
    float _2000 = exp2(_1992 * cbSceneParam._m0[78u].y) * (((_1834 + ((isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0))) * _1022)) * cbPerFrame._m0[3u].x) + (((cbSceneParam._m0[72u].w * _258.y) * exp2((-0.0) - ((cbMtdParam._m0[11u].x * _316) * _317))) * _1848));
    float _2001 = exp2(_1992 * cbSceneParam._m0[78u].z) * (((_1836 + ((isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0))) * _1022)) * cbPerFrame._m0[3u].x) + (((cbSceneParam._m0[72u].w * _258.z) * exp2((-0.0) - ((cbMtdParam._m0[11u].y * _316) * _317))) * _1848));
    float _2010 = (_1990 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2010 * (_1991 ? _1999 : (_1999 + (cbSceneParam._m0[72u].w * _1973)));
    SV_Target.y = _2010 * (_1991 ? _2000 : (_2000 + (cbSceneParam._m0[72u].w * _1975)));
    SV_Target.z = _2010 * (_1991 ? _2001 : (_2001 + (cbSceneParam._m0[72u].w * _1977)));
    SV_Target.w = cbInstanceData._m0[_1855].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1855].w;
}


