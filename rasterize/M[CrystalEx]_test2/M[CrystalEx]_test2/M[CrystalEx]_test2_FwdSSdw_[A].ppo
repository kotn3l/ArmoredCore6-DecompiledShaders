#version 460

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 45) uniform texture2D M_CrystalEx_test2_snp_0_Screen_0;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _809;
uint _2315;
uint _2316;
uint _2317;
uint _2588;
uint _2589;
uint _2590;
float _2849;
float _2850;
float _2851;
float _2852;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _160 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _161 = _160 * NORMAL.x;
    float _162 = _160 * NORMAL.y;
    float _163 = _160 * NORMAL.z;
    float _168;
    float _169;
    float _170;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _168 = (-0.0) - _161;
        _169 = (-0.0) - _162;
        _170 = (-0.0) - _163;
    }
    else
    {
        _168 = _161;
        _169 = _162;
        _170 = _163;
    }
    float _215 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _225 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _215);
    float _226 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _215);
    float _227 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _215);
    float _241 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _242 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _248 = _241 / cbSceneParam._m0[86u].x;
    float _249 = _242 / cbSceneParam._m0[86u].y;
    float _256 = isnan(cbInstanceData._m0[8u].x) ? _248 : (isnan(_248) ? cbInstanceData._m0[8u].x : max(_248, cbInstanceData._m0[8u].x));
    float _257 = isnan(cbInstanceData._m0[8u].y) ? _249 : (isnan(_249) ? cbInstanceData._m0[8u].y : max(_249, cbInstanceData._m0[8u].y));
    vec4 _262 = texture(sampler2D(M_CrystalEx_test2_snp_0_Screen_0, SS_ClampLinear), vec2(isnan(cbInstanceData._m0[8u].z) ? _256 : (isnan(_256) ? cbInstanceData._m0[8u].z : min(_256, cbInstanceData._m0[8u].z)), isnan(cbInstanceData._m0[8u].w) ? _257 : (isnan(_257) ? cbInstanceData._m0[8u].w : min(_257, cbInstanceData._m0[8u].w))));
    float _285 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _293 = abs(dot(vec4(_168, _169, _170, 0.0), vec4(_285 * _225, _285 * _226, _285 * _227, 0.0))) * cbMtdParam._m0[10u].x;
    vec4 _295 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_241, _242));
    float _297 = _295.x;
    bool _304 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _319 = (_304 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _297)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _297))) - POSITION_1.w;
    float _320 = isnan(_319) ? _293 : (isnan(_293) ? _319 : min(_293, _319));
    float _321 = log2(cbMtdParam._m0[10u].y);
    float _340 = inversesqrt(dot(vec3(_168, _169, _170), vec3(_168, _169, _170)));
    float _341 = _340 * _168;
    float _342 = _340 * _169;
    float _343 = _340 * _170;
    float _2886 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _345 = isnan(1.0) ? _2886 : (isnan(_2886) ? 1.0 : min(_2886, 1.0));
    float _2897 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _346 = isnan(1.0) ? _2897 : (isnan(_2897) ? 1.0 : min(_2897, 1.0));
    float _2908 = isnan(0.0) ? cbMtdParam._m0[9u].z : (isnan(cbMtdParam._m0[9u].z) ? 0.0 : max(cbMtdParam._m0[9u].z, 0.0));
    float _347 = isnan(1.0) ? _2908 : (isnan(_2908) ? 1.0 : min(_2908, 1.0));
    float _2919 = isnan(0.0) ? cbMtdParam._m0[10u].z : (isnan(cbMtdParam._m0[10u].z) ? 0.0 : max(cbMtdParam._m0[10u].z, 0.0));
    float _348 = isnan(1.0) ? _2919 : (isnan(_2919) ? 1.0 : min(_2919, 1.0));
    float _353 = _304 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _393 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _402 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _393);
    float _403 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _393);
    float _404 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _393);
    float _408 = inversesqrt(dot(vec3(_402, _403, _404), vec3(_402, _403, _404)));
    float _409 = _402 * _408;
    float _410 = _403 * _408;
    float _411 = _404 * _408;
    vec4 _416 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _418 = _416.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _623 = sqrt(((_402 * _402) + (_403 * _403)) + (_404 * _404));
        float _629 = (cbMatDynParam._m0[5u].x * _623) + cbMatDynParam._m0[5u].y;
        float _2930 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
        float _630 = isnan(1.0) ? _2930 : (isnan(_2930) ? 1.0 : min(_2930, 1.0));
        float _634 = (cbMatDynParam._m0[5u].z * _623) + cbMatDynParam._m0[5u].w;
        float _2941 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2941 : (isnan(_2941) ? 1.0 : min(_2941, 1.0))) - _630)) + _630) < ((_418 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _429 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _430 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _450 = fma(_343, cbSceneParam._m0[5u].z, fma(_342, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _341));
    float _453 = fma(_343, cbSceneParam._m0[6u].z, fma(_342, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _341));
    float _456 = fma(_343, cbSceneParam._m0[7u].z, fma(_342, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _341));
    float _457 = _345 * 3.3333332538604736328125;
    float _459 = _346 * 3.3333332538604736328125;
    float _460 = _347 * 3.3333332538604736328125;
    float _468 = ((isnan(1.0) ? _457 : (isnan(_457) ? 1.0 : min(_457, 1.0))) * 0.0314955823123455047607421875) + 0.0039369477890431880950927734375;
    float _470 = ((isnan(1.0) ? _459 : (isnan(_459) ? 1.0 : min(_459, 1.0))) * 0.0314955823123455047607421875) + 0.0039369477890431880950927734375;
    float _471 = ((isnan(1.0) ? _460 : (isnan(_460) ? 1.0 : min(_460, 1.0))) * 0.0314955823123455047607421875) + 0.0039369477890431880950927734375;
    float _477 = (_345 + (-0.0599999986588954925537109375)) + (isnan(_468) ? 0.0 : (isnan(0.0) ? _468 : max(0.0, _468)));
    float _479 = (_346 + (-0.0599999986588954925537109375)) + (isnan(_470) ? 0.0 : (isnan(0.0) ? _470 : max(0.0, _470)));
    float _481 = (_347 + (-0.0599999986588954925537109375)) + (isnan(_471) ? 0.0 : (isnan(0.0) ? _471 : max(0.0, _471)));
    float _493 = (_477 * _477) - ((0.02999999932944774627685546875 - _345) * 0.119999997317790985107421875);
    float _494 = (_479 * _479) - ((0.02999999932944774627685546875 - _346) * 0.119999997317790985107421875);
    float _495 = (_481 * _481) - ((0.02999999932944774627685546875 - _347) * 0.119999997317790985107421875);
    float _505 = (sqrt(isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0))) - _477) * 16.666667938232421875;
    float _507 = (sqrt(isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0))) - _479) * 16.666667938232421875;
    float _508 = (sqrt(isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0))) - _481) * 16.666667938232421875;
    float _509 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _510 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _511 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _522 = (((isnan(1.0) ? _510 : (isnan(_510) ? 1.0 : min(_510, 1.0))) * 0.58700001239776611328125) + ((isnan(1.0) ? _509 : (isnan(_509) ? 1.0 : min(_509, 1.0))) * 0.29890000820159912109375)) + ((isnan(1.0) ? _511 : (isnan(_511) ? 1.0 : min(_511, 1.0))) * 0.114000000059604644775390625);
    float _523 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    vec4 _532 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _429, cbSceneParam._m0[86u].y * _430));
    float _535 = _532.x * TEXCOORD.z;
    float _536 = dot(vec3(_341, _342, _343), vec3(_409, _410, _411));
    float _539 = _536 * 2.0;
    float _544 = (_539 * _341) - _409;
    float _545 = (_539 * _342) - _410;
    float _546 = (_539 * _343) - _411;
    float _550 = abs(dot(vec3(_409, _410, _411), vec3(_341, _342, _343)));
    float _3037 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _551 = isnan(1.0) ? _3037 : (isnan(_3037) ? 1.0 : min(_3037, 1.0));
    float _557 = sqrt(_348);
    float _569 = exp2((_557 * 5.0) * log2(1.0 - (_551 * 0.999000012874603271484375))) / (4.0 - (_557 * 3.0));
    float _575 = (1.0 - _569) * ((_557 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _576 = _569 * _557;
    float _604 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _608 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _612 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _808;
    float _810;
    float _811;
    float _812;
    float _813;
    float _814;
    float _815;
    float _816;
    float _817;
    float _818;
    float _819;
    float _820;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _668 = fma(_612, cbModelParam._m0[26u].z, fma(_608, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _604));
        float _672 = fma(_612, cbModelParam._m0[27u].z, fma(_608, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _604));
        float _676 = fma(_612, cbModelParam._m0[28u].z, fma(_608, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _604));
        float _701 = _604 + _341;
        float _702 = _608 + _342;
        float _703 = _612 + _343;
        float _713 = fma(_703, cbModelParam._m0[26u].z, fma(_702, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _701)) - _668;
        float _714 = fma(_703, cbModelParam._m0[27u].z, fma(_702, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _701)) - _672;
        float _715 = fma(_703, cbModelParam._m0[28u].z, fma(_702, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _701)) - _676;
        float _719 = inversesqrt(dot(vec3(_713, _714, _715), vec3(_713, _714, _715)));
        float _732 = ((_719 * _713) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_668 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _733 = ((_719 * _714) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_672 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _734 = ((_719 * _715) / cbModelParam._m0[34u].z) + ((((((_676 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _737 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_732, _733, _734), 0.0);
        vec4 _744 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_732, _733, _734), 0.0);
        vec4 _751 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_732, _733, _734), 0.0);
        vec4 _758 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_732, _733, _734), 0.0);
        float _771 = exp2((_737.w + (-0.5)) * 20.0) * 2.0;
        float _781 = exp2((_744.w + (-0.5)) * 20.0) * 2.0;
        float _791 = exp2((_751.w + (-0.5)) * 20.0) * 2.0;
        float _801 = exp2((_758.w + (-0.5)) * 20.0) * 2.0;
        float _802 = _801 * (_758.x + (-0.5));
        float _803 = _801 * (_758.y + (-0.5));
        float _804 = _801 * (_758.z + (-0.5));
        _808 = _771 * (_737.z + (-0.5));
        _810 = _771 * (_737.y + (-0.5));
        _811 = _771 * (_737.x + (-0.5));
        _812 = _781 * (_744.z + (-0.5));
        _813 = _781 * (_744.y + (-0.5));
        _814 = _781 * (_744.x + (-0.5));
        _815 = _791 * (_751.z + (-0.5));
        _816 = _791 * (_751.y + (-0.5));
        _817 = _791 * (_751.x + (-0.5));
        _818 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
        _819 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
        _820 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    }
    else
    {
        _808 = _809;
        _810 = _809;
        _811 = _809;
        _812 = _809;
        _813 = _809;
        _814 = _809;
        _815 = _809;
        _816 = _809;
        _817 = _809;
        _818 = _809;
        _819 = _809;
        _820 = _809;
    }
    float _985;
    float _986;
    float _987;
    float _988;
    float _989;
    float _990;
    float _991;
    float _992;
    float _993;
    float _994;
    float _995;
    float _996;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _849 = fma(_612, cbModelParam._m0[30u].z, fma(_608, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _604));
        float _853 = fma(_612, cbModelParam._m0[31u].z, fma(_608, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _604));
        float _857 = fma(_612, cbModelParam._m0[32u].z, fma(_608, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _604));
        float _880 = _604 + _341;
        float _881 = _608 + _342;
        float _882 = _612 + _343;
        float _892 = fma(_882, cbModelParam._m0[30u].z, fma(_881, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _880)) - _849;
        float _893 = fma(_882, cbModelParam._m0[31u].z, fma(_881, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _880)) - _853;
        float _894 = fma(_882, cbModelParam._m0[32u].z, fma(_881, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _880)) - _857;
        float _898 = inversesqrt(dot(vec3(_892, _893, _894), vec3(_892, _893, _894)));
        float _911 = ((_898 * _892) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_849 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _912 = ((_898 * _893) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_853 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _913 = ((_898 * _894) / cbModelParam._m0[35u].z) + ((((((_857 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _915 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_911, _912, _913), 0.0);
        vec4 _922 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_911, _912, _913), 0.0);
        vec4 _929 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_911, _912, _913), 0.0);
        vec4 _936 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_911, _912, _913), 0.0);
        float _948 = exp2((_915.w + (-0.5)) * 20.0) * 2.0;
        float _958 = exp2((_922.w + (-0.5)) * 20.0) * 2.0;
        float _968 = exp2((_929.w + (-0.5)) * 20.0) * 2.0;
        float _978 = exp2((_936.w + (-0.5)) * 20.0) * 2.0;
        float _979 = _978 * (_936.x + (-0.5));
        float _980 = _978 * (_936.y + (-0.5));
        float _981 = _978 * (_936.z + (-0.5));
        _985 = _948 * (_915.z + (-0.5));
        _986 = _948 * (_915.y + (-0.5));
        _987 = _948 * (_915.x + (-0.5));
        _988 = _958 * (_922.z + (-0.5));
        _989 = _958 * (_922.y + (-0.5));
        _990 = _958 * (_922.x + (-0.5));
        _991 = _968 * (_929.z + (-0.5));
        _992 = _968 * (_929.y + (-0.5));
        _993 = _968 * (_929.x + (-0.5));
        _994 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        _995 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        _996 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
    }
    else
    {
        _985 = _809;
        _986 = _809;
        _987 = _809;
        _988 = _809;
        _989 = _809;
        _990 = _809;
        _991 = _809;
        _992 = _809;
        _993 = _809;
        _994 = _809;
        _995 = _809;
        _996 = _809;
    }
    float _1011 = _544 * 0.5;
    float _1012 = _545 * 0.5;
    float _1013 = _546 * 0.5;
    float _1014 = dot(vec4(_1011, _1012, _1013, 1.0), vec4(_987, _990, _993, _996));
    float _1017 = dot(vec4(_1011, _1012, _1013, 1.0), vec4(_986, _989, _992, _995));
    float _1020 = dot(vec4(_1011, _1012, _1013, 1.0), vec4(_985, _988, _991, _994));
    float _1055;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1027 = dot(vec4(_1011, _1012, _1013, 1.0), vec4(_808, _812, _815, _818));
        float _1031 = dot(vec4(_1011, _1012, _1013, 1.0), vec4(_810, _813, _816, _819));
        float _1035 = dot(vec4(_1011, _1012, _1013, 1.0), vec4(_811, _814, _817, _820));
        float _1042 = dot(vec4(cbModelParam._m0[39u]), vec4(_1011, _1012, _1013, 1.0));
        _1055 = dot(vec3(isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0)), isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0)), isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1042) ? 0.0 : (isnan(0.0) ? _1042 : max(0.0, _1042))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1055 = 1.0;
    }
    float _1066;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1057 = dot(vec4(cbModelParam._m0[40u]), vec4(_1011, _1012, _1013, 1.0));
        _1066 = dot(vec3(isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0)), isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0)), isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1057) ? 0.0 : (isnan(0.0) ? _1057 : max(0.0, _1057))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1066 = 1.0;
    }
    float _1070 = (_1066 * cbModelParam._m0[1u].x) + (_1055 * (1.0 - cbModelParam._m0[1u].x));
    float _1078 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _348);
    float _1079 = isnan(_1078) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1078 : min(cbModelParam._m0[25u].z, _1078));
    float _1162;
    float _1164;
    float _1166;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1129 = fma(_612, cbModelParam._m0[13u].z, fma(_608, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _604)) + cbModelParam._m0[13u].w;
        float _1133 = fma(_612, cbModelParam._m0[14u].z, fma(_608, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _604)) + cbModelParam._m0[14u].w;
        float _1137 = fma(_612, cbModelParam._m0[15u].z, fma(_608, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _604)) + cbModelParam._m0[15u].w;
        float _1140 = fma(_546, cbModelParam._m0[13u].z, fma(_545, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _544));
        float _1143 = fma(_546, cbModelParam._m0[14u].z, fma(_545, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _544));
        float _1146 = fma(_546, cbModelParam._m0[15u].z, fma(_545, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _544));
        float _1174;
        if (_1140 > 0.0)
        {
            _1174 = abs((1.0 - _1129) / _1140);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1140 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1129 + 1.0) / _1140);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1174 = frontier_phi_19_17_ladder;
        }
        float _1543;
        if (_1143 > 0.0)
        {
            _1543 = abs((1.0 - _1133) / _1143);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1143 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1133 + 1.0) / _1143);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1543 = frontier_phi_28_24_ladder;
        }
        float _1749;
        if (_1146 > 0.0)
        {
            _1749 = abs((1.0 - _1137) / _1146);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1146 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1137 + 1.0) / _1146);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1749 = frontier_phi_40_35_ladder;
        }
        float _1751 = isnan(_1543) ? _1174 : (isnan(_1174) ? _1543 : min(_1174, _1543));
        float _1752 = isnan(_1749) ? _1751 : (isnan(_1751) ? _1749 : min(_1751, _1749));
        float _1756 = (_1752 * _1140) + _1129;
        float _1757 = (_1752 * _1143) + _1133;
        float _1758 = (_1752 * _1146) + _1137;
        float _1759 = _1752 * 9.9999997473787516355514526367188e-05;
        float _1761 = (-1.0) - _1759;
        float _1763 = _1759 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1758 > _1763) || ((_1758 < _1761) || ((_1757 > _1763) || ((_1757 < _1761) || ((_1756 < _1761) || (_1756 > _1763))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1956 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1758, cbModelParam._m0[9u].z, fma(_1757, cbModelParam._m0[9u].y, _1756 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1758, cbModelParam._m0[10u].z, fma(_1757, cbModelParam._m0[10u].y, _1756 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1758, cbModelParam._m0[11u].z, fma(_1757, cbModelParam._m0[11u].y, _1756 * cbModelParam._m0[11u].x))), _1079);
            frontier_phi_18_40_ladder = _1956.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _1956.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _1956.x * cbModelParam._m0[1u].y;
        }
        _1162 = frontier_phi_18_40_ladder_2;
        _1164 = frontier_phi_18_40_ladder_1;
        _1166 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1150 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_544, _545, _546), _1079);
        _1162 = _1150.x * cbModelParam._m0[1u].y;
        _1164 = _1150.y * cbModelParam._m0[1u].y;
        _1166 = _1150.z * cbModelParam._m0[1u].y;
    }
    float _1170 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _348);
    float _1171 = isnan(_1170) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1170 : min(cbModelParam._m0[25u].w, _1170));
    float _1264;
    float _1266;
    float _1268;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1228 = fma(_612, cbModelParam._m0[21u].z, fma(_608, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _604)) + cbModelParam._m0[21u].w;
        float _1232 = fma(_612, cbModelParam._m0[22u].z, fma(_608, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _604)) + cbModelParam._m0[22u].w;
        float _1236 = fma(_612, cbModelParam._m0[23u].z, fma(_608, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _604)) + cbModelParam._m0[23u].w;
        float _1239 = fma(_546, cbModelParam._m0[21u].z, fma(_545, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _544));
        float _1242 = fma(_546, cbModelParam._m0[22u].z, fma(_545, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _544));
        float _1245 = fma(_546, cbModelParam._m0[23u].z, fma(_545, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _544));
        float _1548;
        if (_1239 > 0.0)
        {
            _1548 = abs((1.0 - _1228) / _1239);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1239 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1228 + 1.0) / _1239);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1548 = frontier_phi_30_26_ladder;
        }
        float _1776;
        if (_1242 > 0.0)
        {
            _1776 = abs((1.0 - _1232) / _1242);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1242 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1232 + 1.0) / _1242);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1776 = frontier_phi_42_37_ladder;
        }
        float _2078;
        if (_1245 > 0.0)
        {
            _2078 = abs((1.0 - _1236) / _1245);
        }
        else
        {
            float frontier_phi_53_48_ladder;
            if (_1245 < 0.0)
            {
                frontier_phi_53_48_ladder = abs((_1236 + 1.0) / _1245);
            }
            else
            {
                frontier_phi_53_48_ladder = 5000.0;
            }
            _2078 = frontier_phi_53_48_ladder;
        }
        float _2080 = isnan(_1776) ? _1548 : (isnan(_1548) ? _1776 : min(_1548, _1776));
        float _2081 = isnan(_2078) ? _2080 : (isnan(_2080) ? _2078 : min(_2080, _2078));
        float _2085 = (_2081 * _1239) + _1228;
        float _2086 = (_2081 * _1242) + _1232;
        float _2087 = (_2081 * _1245) + _1236;
        float _2088 = _2081 * 9.9999997473787516355514526367188e-05;
        float _2089 = (-1.0) - _2088;
        float _2091 = _2088 + 1.0;
        float frontier_phi_27_53_ladder;
        float frontier_phi_27_53_ladder_1;
        float frontier_phi_27_53_ladder_2;
        if ((_2087 > _2091) || ((_2087 < _2089) || ((_2086 > _2091) || ((_2086 < _2089) || ((_2085 < _2089) || (_2085 > _2091))))))
        {
            frontier_phi_27_53_ladder = 0.0;
            frontier_phi_27_53_ladder_1 = 0.0;
            frontier_phi_27_53_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2213 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2087, cbModelParam._m0[17u].z, fma(_2086, cbModelParam._m0[17u].y, _2085 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2087, cbModelParam._m0[18u].z, fma(_2086, cbModelParam._m0[18u].y, _2085 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2087, cbModelParam._m0[19u].z, fma(_2086, cbModelParam._m0[19u].y, _2085 * cbModelParam._m0[19u].x))), _1171);
            frontier_phi_27_53_ladder = _2213.y * cbModelParam._m0[1u].z;
            frontier_phi_27_53_ladder_1 = _2213.x * cbModelParam._m0[1u].z;
            frontier_phi_27_53_ladder_2 = _2213.z * cbModelParam._m0[1u].z;
        }
        _1264 = frontier_phi_27_53_ladder_1;
        _1266 = frontier_phi_27_53_ladder;
        _1268 = frontier_phi_27_53_ladder_2;
    }
    else
    {
        vec4 _1248 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_544, _545, _546), _1171);
        _1264 = _1248.x * cbModelParam._m0[1u].z;
        _1266 = _1248.y * cbModelParam._m0[1u].z;
        _1268 = _1248.z * cbModelParam._m0[1u].z;
    }
    float _1281 = (((_575 * _345) + _576) * _535) * ((cbModelParam._m0[1u].w * (_1264 - _1162)) + _1162);
    float _1283 = (((_575 * _346) + _576) * _535) * ((cbModelParam._m0[1u].w * (_1266 - _1164)) + _1164);
    float _1285 = (((_575 * _347) + _576) * _535) * ((cbModelParam._m0[1u].w * (_1268 - _1166)) + _1166);
    float _1306 = fma(_1285, cbSceneParam._m0[89u].z, fma(_1283, cbSceneParam._m0[89u].y, _1281 * cbSceneParam._m0[89u].x));
    float _1309 = fma(_1285, cbSceneParam._m0[90u].z, fma(_1283, cbSceneParam._m0[90u].y, _1281 * cbSceneParam._m0[90u].x));
    float _1312 = fma(_1285, cbSceneParam._m0[91u].z, fma(_1283, cbSceneParam._m0[91u].y, _1281 * cbSceneParam._m0[91u].x));
    vec4 _1320 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_429, _430));
    float _1322 = _1320.w;
    uint _1337 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1341 = floatBitsToUint(cbInstanceData._m0[_1337 + 5u]);
    uint _1343 = _1341.x * 14u;
    uint _1344 = _1343 + 13u;
    float _1350 = _535 + (-1.0);
    float _1355 = (cbLight._m0[_1344].x * _1350) + 1.0;
    float _1356 = (cbLight._m0[_1344].y * _1350) + 1.0;
    float _1357 = (cbLight._m0[_1344].w * _1350) + 1.0;
    uint _1361 = _1343 + 8u;
    float _1377 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1343].w)) * _348) * 0.949999988079071044921875);
    float _1378 = _1377 * _1377;
    float _1379 = cbLight._m0[_1343].x + _409;
    float _1380 = cbLight._m0[_1343].y + _410;
    float _1381 = cbLight._m0[_1343].z + _411;
    float _1385 = inversesqrt(dot(vec3(_1379, _1380, _1381), vec3(_1379, _1380, _1381)));
    float _1386 = _1385 * _1379;
    float _1387 = _1385 * _1380;
    float _1388 = _1385 * _1381;
    float _1389 = dot(vec3(_341, _342, _343), vec3(cbLight._m0[_1343].xyz));
    float _3163 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
    float _1392 = isnan(1.0) ? _3163 : (isnan(_3163) ? 1.0 : min(_3163, 1.0));
    float _3174 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _1393 = isnan(1.0) ? _3174 : (isnan(_3174) ? 1.0 : min(_3174, 1.0));
    float _1394 = dot(vec3(_341, _342, _343), vec3(_1386, _1387, _1388));
    float _3185 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
    float _1397 = isnan(1.0) ? _3185 : (isnan(_3185) ? 1.0 : min(_3185, 1.0));
    float _1398 = dot(vec3(cbLight._m0[_1343].xyz), vec3(_1386, _1387, _1388));
    float _3196 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
    float _1402 = _1378 * _1378;
    float _1406 = ((_1397 * _1397) * (_1402 + (-1.0))) + 1.0;
    float _1414 = exp2(log2(1.0 - (isnan(1.0) ? _3196 : (isnan(_3196) ? 1.0 : min(_3196, 1.0)))) * 5.0);
    float _1415 = 1.0 - _345;
    float _1416 = 1.0 - _346;
    float _1417 = 1.0 - _347;
    float _1424 = 1.0 - _1378;
    float _1435 = (0.5 / (((_1393 * ((_1392 * _1424) + _1378)) + 9.9999999392252902907785028219223e-09) + (((_1393 * _1424) + _1378) * _1392))) * _1392;
    float _3207 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
    float _1437 = (isnan(1.0) ? _3207 : (isnan(_3207) ? 1.0 : min(_3207, 1.0))) * (_1402 / ((_1406 * _1406) * 3.141590118408203125));
    float _1438 = isnan(1.0) ? _1355 : (isnan(_1355) ? 1.0 : min(_1355, 1.0));
    uint _1451 = _1343 | 1u;
    uint _1455 = _1343 + 9u;
    float _1469 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1451].w)) * _348) * 0.949999988079071044921875);
    float _1470 = _1469 * _1469;
    float _1471 = cbLight._m0[_1451].x + _409;
    float _1472 = cbLight._m0[_1451].y + _410;
    float _1473 = cbLight._m0[_1451].z + _411;
    float _1477 = inversesqrt(dot(vec3(_1471, _1472, _1473), vec3(_1471, _1472, _1473)));
    float _1478 = _1477 * _1471;
    float _1479 = _1477 * _1472;
    float _1480 = _1477 * _1473;
    float _1481 = dot(vec3(_341, _342, _343), vec3(cbLight._m0[_1451].xyz));
    float _3223 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
    float _1484 = isnan(1.0) ? _3223 : (isnan(_3223) ? 1.0 : min(_3223, 1.0));
    float _1485 = dot(vec3(_341, _342, _343), vec3(_1478, _1479, _1480));
    float _3234 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
    float _1488 = isnan(1.0) ? _3234 : (isnan(_3234) ? 1.0 : min(_3234, 1.0));
    float _1489 = dot(vec3(cbLight._m0[_1451].xyz), vec3(_1478, _1479, _1480));
    float _3245 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
    float _1493 = _1470 * _1470;
    float _1497 = ((_1488 * _1488) * (_1493 + (-1.0))) + 1.0;
    float _1504 = exp2(log2(1.0 - (isnan(1.0) ? _3245 : (isnan(_3245) ? 1.0 : min(_3245, 1.0)))) * 5.0);
    float _1511 = 1.0 - _1470;
    float _1521 = (0.5 / (((_1393 * ((_1484 * _1511) + _1470)) + 9.9999999392252902907785028219223e-09) + (((_1393 * _1511) + _1470) * _1484))) * _1484;
    float _3256 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
    float _1523 = (isnan(1.0) ? _3256 : (isnan(_3256) ? 1.0 : min(_3256, 1.0))) * (_1493 / ((_1497 * _1497) * 3.141590118408203125));
    float _1524 = isnan(1.0) ? _1356 : (isnan(_1356) ? 1.0 : min(_1356, 1.0));
    float _1534 = (((((_1504 * _1415) + _345) * cbLight._m0[_1455].x) * _1523) * _1524) + ((((cbLight._m0[_1361].x * ((1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1322))) * ((_1414 * _1415) + _345)) * _1437) * _1438);
    float _1535 = (((((_1504 * _1416) + _346) * cbLight._m0[_1455].y) * _1523) * _1524) + ((((cbLight._m0[_1361].y * ((1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1322))) * ((_1414 * _1416) + _346)) * _1437) * _1438);
    float _1536 = (((((_1504 * _1417) + _347) * cbLight._m0[_1455].z) * _1523) * _1524) + ((((cbLight._m0[_1361].z * ((1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1322))) * ((_1414 * _1417) + _347)) * _1437) * _1438);
    uvec4 _1540 = floatBitsToUint(cbLight._m0[_1343 + 12u]);
    float _1553;
    float _1555;
    float _1557;
    if (_1540.x == 0u)
    {
        _1553 = _1534;
        _1555 = _1535;
        _1557 = _1536;
    }
    else
    {
        float _1563 = (cbLight._m0[_1344].z * _1350) + 1.0;
        uint _1564 = _1343 + 2u;
        uint _1568 = _1343 + 10u;
        float _1582 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1564].w)) * _348) * 0.949999988079071044921875);
        float _1583 = _1582 * _1582;
        float _1584 = cbLight._m0[_1564].x + _409;
        float _1585 = cbLight._m0[_1564].y + _410;
        float _1586 = cbLight._m0[_1564].z + _411;
        float _1590 = inversesqrt(dot(vec3(_1584, _1585, _1586), vec3(_1584, _1585, _1586)));
        float _1591 = _1590 * _1584;
        float _1592 = _1590 * _1585;
        float _1593 = _1590 * _1586;
        float _1594 = dot(vec3(_341, _342, _343), vec3(cbLight._m0[_1564].xyz));
        float _3272 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1597 = isnan(1.0) ? _3272 : (isnan(_3272) ? 1.0 : min(_3272, 1.0));
        float _1598 = dot(vec3(_341, _342, _343), vec3(_1591, _1592, _1593));
        float _3283 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1601 = isnan(1.0) ? _3283 : (isnan(_3283) ? 1.0 : min(_3283, 1.0));
        float _1602 = dot(vec3(cbLight._m0[_1564].xyz), vec3(_1591, _1592, _1593));
        float _3294 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1606 = _1583 * _1583;
        float _1610 = ((_1601 * _1601) * (_1606 + (-1.0))) + 1.0;
        float _1617 = exp2(log2(1.0 - (isnan(1.0) ? _3294 : (isnan(_3294) ? 1.0 : min(_3294, 1.0)))) * 5.0);
        float _1624 = 1.0 - _1583;
        float _1634 = (0.5 / (((_1393 * ((_1597 * _1624) + _1583)) + 9.9999999392252902907785028219223e-09) + (((_1393 * _1624) + _1583) * _1597))) * _1597;
        float _3305 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1636 = (isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0))) * (_1606 / ((_1610 * _1610) * 3.141590118408203125));
        float _1637 = isnan(1.0) ? _1563 : (isnan(_1563) ? 1.0 : min(_1563, 1.0));
        _1553 = (((((_1617 * _1415) + _345) * cbLight._m0[_1568].x) * _1636) * _1637) + _1534;
        _1555 = (((((_1617 * _1416) + _346) * cbLight._m0[_1568].y) * _1636) * _1637) + _1535;
        _1557 = (((((_1617 * _1417) + _347) * cbLight._m0[_1568].z) * _1636) * _1637) + _1536;
    }
    float _1655;
    float _1657;
    float _1659;
    if (_1540.y == 0u)
    {
        _1655 = _1553;
        _1657 = _1555;
        _1659 = _1557;
    }
    else
    {
        uint _1666 = _1343 + 3u;
        uint _1670 = _1343 + 11u;
        float _1684 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1666].w)) * _348) * 0.949999988079071044921875);
        float _1685 = _1684 * _1684;
        float _1686 = cbLight._m0[_1666].x + _409;
        float _1687 = cbLight._m0[_1666].y + _410;
        float _1688 = cbLight._m0[_1666].z + _411;
        float _1692 = inversesqrt(dot(vec3(_1686, _1687, _1688), vec3(_1686, _1687, _1688)));
        float _1693 = _1692 * _1686;
        float _1694 = _1692 * _1687;
        float _1695 = _1692 * _1688;
        float _1696 = dot(vec3(_341, _342, _343), vec3(cbLight._m0[_1666].xyz));
        float _3321 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
        float _1699 = isnan(1.0) ? _3321 : (isnan(_3321) ? 1.0 : min(_3321, 1.0));
        float _1700 = dot(vec3(_341, _342, _343), vec3(_1693, _1694, _1695));
        float _3332 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1703 = isnan(1.0) ? _3332 : (isnan(_3332) ? 1.0 : min(_3332, 1.0));
        float _1704 = dot(vec3(cbLight._m0[_1666].xyz), vec3(_1693, _1694, _1695));
        float _3343 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
        float _1708 = _1685 * _1685;
        float _1712 = ((_1703 * _1703) * (_1708 + (-1.0))) + 1.0;
        float _1719 = exp2(log2(1.0 - (isnan(1.0) ? _3343 : (isnan(_3343) ? 1.0 : min(_3343, 1.0)))) * 5.0);
        float _1726 = 1.0 - _1685;
        float _1736 = (0.5 / (((_1393 * ((_1699 * _1726) + _1685)) + 9.9999999392252902907785028219223e-09) + (((_1393 * _1726) + _1685) * _1699))) * _1699;
        float _3354 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
        float _1738 = (isnan(1.0) ? _3354 : (isnan(_3354) ? 1.0 : min(_3354, 1.0))) * (_1708 / ((_1712 * _1712) * 3.141590118408203125));
        float _1739 = isnan(1.0) ? _1357 : (isnan(_1357) ? 1.0 : min(_1357, 1.0));
        _1655 = (((((_1719 * _1415) + _345) * cbLight._m0[_1670].x) * _1738) * _1739) + _1553;
        _1657 = (((((_1719 * _1416) + _346) * cbLight._m0[_1670].y) * _1738) * _1739) + _1555;
        _1659 = (((((_1719 * _1417) + _347) * cbLight._m0[_1670].z) * _1738) * _1739) + _1557;
    }
    float _1880;
    float _1882;
    float _1884;
    if (_1341.y == 0u)
    {
        float _1820 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1821 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1820;
        float _1822 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1820;
        float _1823 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1820;
        uvec4 _1835 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1836 = _1835.x;
        uint _1847 = uint((float(_1835.y) * floor(float(uint(cbSceneParam._m0[85u].y * _430) / _1836))) + floor(float(uint(cbSceneParam._m0[85u].x * _429) / _1836)));
        float _1857 = (log2(_1823 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1858 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
        uint _1861 = uint(isnan(14.0) ? _1858 : (isnan(_1858) ? 14.0 : min(_1858, 14.0)));
        uvec4 _1866 = texelFetch(g_lightClusterGridBuffer, int(((_1861 << 2u) + (_1847 << 6u)) >> 2u));
        uint _1867 = _1866.x;
        uint _1868 = _1835.z;
        float _1965;
        float _1967;
        float _1969;
        if (((((1u << ((_1868 >> 4u) & 15u)) + 4294967295u) & _1867) == 0u) || ((_1868 & 240u) == 0u))
        {
            _1965 = 0.0;
            _1967 = 0.0;
            _1969 = 0.0;
        }
        else
        {
            float _1966;
            float _1968;
            float _1970;
            float _2127 = 0.0;
            float _2128 = 0.0;
            float _2129 = 0.0;
            uint _2130 = 0u;
            uint _2139;
            bool _2140;
            for (;;)
            {
                _2139 = texelFetch(g_lightClassification, int((((_1861 << 5u) + (_1847 << 9u)) + (_2130 << 2u)) >> 2u)).x;
                _2140 = _2139 == 0u;
                float frontier_phi_64_pred;
                float frontier_phi_64_pred_1;
                float frontier_phi_64_pred_2;
                if (_2140)
                {
                    frontier_phi_64_pred = _2129;
                    frontier_phi_64_pred_1 = _2128;
                    frontier_phi_64_pred_2 = _2127;
                }
                else
                {
                    float _2285;
                    float _2286;
                    float _2287;
                    uint _2288;
                    _2285 = _2127;
                    _2286 = _2128;
                    _2287 = _2129;
                    _2288 = _2139;
                    float _2218;
                    float _2219;
                    float _2220;
                    for (;;)
                    {
                        uint _2292 = uint(findLSB(_2288)) + (_2130 << 5u);
                        uint _2289 = (_2288 + 4294967295u) & _2288;
                        uint _2294 = _2292 * 48u;
                        vec4 _2308 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2294)).x, texelFetch(g_PointLightRenderingBuffer, int(_2294 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2294 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2294 + 3u)).x));
                        uint _2325 = (_2292 * 48u) + 8u;
                        vec3 _2336 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2325)).x, texelFetch(g_PointLightRenderingBuffer, int(_2325 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2325 + 2u)).x));
                        float _2340 = _2308.x - _1821;
                        float _2341 = _2308.y - _1822;
                        float _2342 = _2308.z - _1823;
                        float _2343 = dot(vec3(_2340, _2341, _2342), vec3(_2340, _2341, _2342));
                        float _2346 = inversesqrt(_2343);
                        float _2347 = _2346 * _2340;
                        float _2348 = _2346 * _2341;
                        float _2349 = _2346 * _2342;
                        float _2355 = 1.0 - (_2343 * _2308.w);
                        float _3380 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
                        float _2357 = sqrt(_2343) * uintBitsToFloat(uvec4(_2315, _2316, _2317, texelFetch(g_PointLightRenderingBuffer, int(((_2292 * 48u) + 4u) + 3u)).x)).w;
                        float _2361 = _2357 * _2357;
                        float _2362 = (-0.0) - _1821;
                        float _2363 = (-0.0) - _1822;
                        float _2364 = (-0.0) - _1823;
                        float _2368 = inversesqrt(dot(vec3(_2362, _2363, _2364), vec3(_2362, _2363, _2364)));
                        float _2369 = _2368 * _2362;
                        float _2370 = _2368 * _2363;
                        float _2371 = _2368 * _2364;
                        float _2379 = exp2(log2(1.0 / ((_2361 * 3.5) + 5.0)) * 0.25);
                        float _2380 = 1.0 - _557;
                        float _2387 = sqrt(1.0 - ((1.0 - (_2380 * _2380)) * (1.0 - (_2379 * _2379))));
                        float _2388 = _2387 * _2387;
                        float _2389 = _2388 * _2388;
                        float _2390 = _2369 + _2347;
                        float _2391 = _2370 + _2348;
                        float _2392 = _2371 + _2349;
                        float _2396 = inversesqrt(dot(vec3(_2390, _2391, _2392), vec3(_2390, _2391, _2392)));
                        float _2400 = dot(vec3(_450, _453, _456), vec3(_2369, _2370, _2371));
                        float _3391 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
                        float _2403 = isnan(1.0) ? _3391 : (isnan(_3391) ? 1.0 : min(_3391, 1.0));
                        float _2404 = dot(vec3(_450, _453, _456), vec3(_2396 * _2390, _2396 * _2391, _2396 * _2392));
                        float _3402 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
                        float _2407 = isnan(1.0) ? _3402 : (isnan(_3402) ? 1.0 : min(_3402, 1.0));
                        float _2411 = ((_2407 * _2407) * (_2389 + (-1.0))) + 1.0;
                        float _2412 = (1.39999997615814208984375 / (_2357 + 1.39999997615814208984375)) * _2388;
                        float _2413 = _2412 * _2412;
                        float _2416 = ((1.0 - _2413) * dot(vec3(_450, _453, _456), vec3(_2347, _2348, _2349))) + _2413;
                        float _3413 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
                        float _2417 = isnan(1.0) ? _3413 : (isnan(_3413) ? 1.0 : min(_3413, 1.0));
                        float _2418 = 1.0 - _2388;
                        float _2428 = (0.5 / (((_2417 * ((_2403 * _2418) + _2388)) + 9.9999999392252902907785028219223e-09) + (((_2417 * _2418) + _2388) * _2403))) * _2417;
                        float _3424 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
                        float _2439 = (((_2389 * 3.1415927410125732421875) * (isnan(1.0) ? _3424 : (isnan(_3424) ? 1.0 : min(_3424, 1.0)))) / ((_2411 * _2411) * ((_2361 * 2.1991131305694580078125) + 3.141590118408203125))) * (isnan(1.0) ? _3380 : (isnan(_3380) ? 1.0 : min(_3380, 1.0)));
                        _2218 = (_2439 * _2336.x) + _2285;
                        _2219 = (_2439 * _2336.y) + _2286;
                        _2220 = (_2439 * _2336.z) + _2287;
                        if (_2289 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2285 = _2218;
                            _2286 = _2219;
                            _2287 = _2220;
                            _2288 = _2289;
                        }
                    }
                    frontier_phi_64_pred = _2220;
                    frontier_phi_64_pred_1 = _2219;
                    frontier_phi_64_pred_2 = _2218;
                }
                _1970 = frontier_phi_64_pred;
                _1968 = frontier_phi_64_pred_1;
                _1966 = frontier_phi_64_pred_2;
                uint _2131 = _2130 + 1u;
                if (_2131 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2127 = _1966;
                    _2128 = _1968;
                    _2129 = _1970;
                    _2130 = _2131;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1965 = _1966;
            _1967 = _1968;
            _1969 = _1970;
        }
        uvec4 _1973 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1974 = _1973.z;
        uint _1976 = (_1974 >> 8u) & 15u;
        float _2104;
        float _2106;
        float _2108;
        if (((4294967295u << _1976) & _1867) == 0u)
        {
            _2104 = _1965;
            _2106 = _1967;
            _2108 = _1969;
        }
        else
        {
            float _2120 = inversesqrt(dot(vec3(_1821, _1822, _1823), vec3(_1821, _1822, _1823)));
            float _2121 = _2120 * _1821;
            float _2122 = _2120 * _1822;
            float _2123 = _2120 * _1823;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            if (_1976 < ((_1974 >> 12u) & 15u))
            {
                float _2105;
                float _2107;
                float _2109;
                float _2271 = _1965;
                float _2272 = _1967;
                float _2273 = _1969;
                uint _2274 = _1976;
                uint _2283;
                bool _2284;
                for (;;)
                {
                    _2283 = texelFetch(g_lightClassification, int((((_1861 << 5u) + (_1847 << 9u)) + (_2274 << 2u)) >> 2u)).x;
                    _2284 = _2283 == 0u;
                    float frontier_phi_75_pred;
                    float frontier_phi_75_pred_1;
                    float frontier_phi_75_pred_2;
                    if (_2284)
                    {
                        frontier_phi_75_pred = _2273;
                        frontier_phi_75_pred_1 = _2272;
                        frontier_phi_75_pred_2 = _2271;
                    }
                    else
                    {
                        float _2453;
                        float _2454;
                        float _2455;
                        float _2719;
                        float _2720;
                        float _2721;
                        float _2463 = _2271;
                        float _2464 = _2272;
                        float _2465 = _2273;
                        uint _2466 = _2283;
                        uint _2467;
                        uint _2477;
                        vec4 _2492;
                        float _2493;
                        vec3 _2505;
                        vec4 _2521;
                        vec4 _2537;
                        float _2584;
                        bool _2585;
                        for (;;)
                        {
                            _2477 = ((_2274 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2466));
                            _2467 = (_2466 + 4294967295u) & _2466;
                            uint _2479 = _2477 * 40u;
                            _2492 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2479)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2479 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2479 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2479 + 3u)).x));
                            _2493 = _2492.w;
                            uint _2495 = (_2477 * 40u) + 8u;
                            _2505 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2495)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2495 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2495 + 2u)).x));
                            uint _2508 = (_2477 * 40u) + 16u;
                            _2521 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2508)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2508 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2508 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2508 + 3u)).x));
                            uint _2524 = (_2477 * 40u) + 20u;
                            _2537 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2524)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2524 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2524 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2524 + 3u)).x));
                            uint _2540 = (_2477 * 40u) + 24u;
                            vec4 _2553 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2540)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2540 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2540 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2540 + 3u)).x));
                            uint _2559 = (_2477 * 40u) + 28u;
                            vec4 _2572 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2559)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2559 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2559 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2559 + 3u)).x));
                            _2584 = fma(_1823, _2572.z, fma(_1822, _2572.y, _2572.x * _1821)) + _2572.w;
                            _2585 = !((fma(_1823, _2553.z, fma(_1822, _2553.y, _2553.x * _1821)) + _2553.w) <= 0.0);
                            float frontier_phi_81_pred;
                            float frontier_phi_81_pred_1;
                            float frontier_phi_81_pred_2;
                            if (_2585)
                            {
                                float _2619 = _2492.x - _1821;
                                float _2620 = _2492.y - _1822;
                                float _2621 = _2492.z - _1823;
                                float _2622 = dot(vec3(_2619, _2620, _2621), vec3(_2619, _2620, _2621));
                                float _2625 = inversesqrt(_2622);
                                float _2626 = _2625 * _2619;
                                float _2627 = _2625 * _2620;
                                float _2628 = _2625 * _2621;
                                float _2632 = 1.0 - (_2622 / (_2493 * _2493));
                                float _3435 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
                                float _2634 = sqrt(_2622) * uintBitsToFloat(uvec4(_2588, _2589, _2590, texelFetch(g_SpotLightRenderingBuffer, int(((_2477 * 40u) + 4u) + 3u)).x)).w;
                                float _2637 = _2634 * _2634;
                                float _2638 = (fma(_1823, _2521.z, fma(_1822, _2521.y, _2521.x * _1821)) + _2521.w) / _2584;
                                float _2639 = (fma(_1823, _2537.z, fma(_1822, _2537.y, _2537.x * _1821)) + _2537.w) / _2584;
                                float _2643 = 1.0 - dot(vec2(_2638, _2639), vec2(_2638, _2639));
                                float _3446 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
                                float _2653 = exp2(log2(1.0 / ((_2637 * 3.5) + 5.0)) * 0.25);
                                float _2654 = 1.0 - _557;
                                float _2661 = sqrt(1.0 - ((1.0 - (_2654 * _2654)) * (1.0 - (_2653 * _2653))));
                                float _2662 = _2661 * _2661;
                                float _2663 = _2662 * _2662;
                                float _2664 = _2626 - _2121;
                                float _2665 = _2627 - _2122;
                                float _2666 = _2628 - _2123;
                                float _2670 = inversesqrt(dot(vec3(_2664, _2665, _2666), vec3(_2664, _2665, _2666)));
                                float _2674 = dot(vec3(_450, _453, _456), vec3((-0.0) - _2121, (-0.0) - _2122, (-0.0) - _2123));
                                float _3457 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
                                float _2677 = isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0));
                                float _2678 = dot(vec3(_450, _453, _456), vec3(_2670 * _2664, _2670 * _2665, _2670 * _2666));
                                float _3468 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
                                float _2681 = isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0));
                                float _2685 = ((_2681 * _2681) * (_2663 + (-1.0))) + 1.0;
                                float _2686 = (1.39999997615814208984375 / (_2634 + 1.39999997615814208984375)) * _2662;
                                float _2687 = _2686 * _2686;
                                float _2693 = ((1.0 - _2687) * dot(vec3(_450, _453, _456), vec3(_2626, _2627, _2628))) + _2687;
                                float _3479 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
                                float _2694 = isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0));
                                float _2695 = 1.0 - _2662;
                                float _2705 = (0.5 / (((_2694 * ((_2677 * _2695) + _2662)) + 9.9999999392252902907785028219223e-09) + (((_2694 * _2695) + _2662) * _2677))) * _2694;
                                float _3490 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
                                float _2715 = ((isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0))) * (isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0)))) * (((_2663 * 3.1415927410125732421875) * (isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0)))) / ((_2685 * _2685) * ((_2637 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_81_pred = _2715 * _2505.z;
                                frontier_phi_81_pred_1 = _2715 * _2505.y;
                                frontier_phi_81_pred_2 = _2715 * _2505.x;
                            }
                            else
                            {
                                frontier_phi_81_pred = 0.0;
                                frontier_phi_81_pred_1 = 0.0;
                                frontier_phi_81_pred_2 = 0.0;
                            }
                            _2721 = frontier_phi_81_pred;
                            _2720 = frontier_phi_81_pred_1;
                            _2719 = frontier_phi_81_pred_2;
                            _2453 = _2719 + _2463;
                            _2454 = _2720 + _2464;
                            _2455 = _2721 + _2465;
                            if (_2467 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2463 = _2453;
                                _2464 = _2454;
                                _2465 = _2455;
                                _2466 = _2467;
                                continue;
                            }
                        }
                        frontier_phi_75_pred = _2455;
                        frontier_phi_75_pred_1 = _2454;
                        frontier_phi_75_pred_2 = _2453;
                    }
                    _2109 = frontier_phi_75_pred;
                    _2107 = frontier_phi_75_pred_1;
                    _2105 = frontier_phi_75_pred_2;
                    uint _2275 = _2274 + 1u;
                    if (_2275 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2271 = _2105;
                        _2272 = _2107;
                        _2273 = _2109;
                        _2274 = _2275;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2107;
                frontier_phi_55_56_ladder_1 = _2109;
                frontier_phi_55_56_ladder_2 = _2105;
            }
            else
            {
                frontier_phi_55_56_ladder = _1967;
                frontier_phi_55_56_ladder_1 = _1969;
                frontier_phi_55_56_ladder_2 = _1965;
            }
            _2104 = frontier_phi_55_56_ladder_2;
            _2106 = frontier_phi_55_56_ladder;
            _2108 = frontier_phi_55_56_ladder_1;
        }
        float _2113 = isnan(1.0) ? _535 : (isnan(_535) ? 1.0 : min(_535, 1.0));
        _1880 = ((_2104 * _345) * _2113) + _1655;
        _1882 = ((_2106 * _346) * _2113) + _1657;
        _1884 = ((_2108 * _347) * _2113) + _1659;
    }
    else
    {
        _1880 = _1655;
        _1882 = _1657;
        _1884 = _1659;
    }
    float _1888 = 0.959999978542327880859375 - ((isnan(1.0) ? _523 : (isnan(_523) ? 1.0 : min(_523, 1.0))) * 0.959999978542327880859375);
    float _1896 = _1888 - (exp2(log2(1.0 - _551) * 5.0) * _1888);
    float _1900 = ((_1880 + ((isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0))) * _1070)) * cbPerFrame._m0[3u].x) + (((cbSceneParam._m0[72u].w * _262.x) * exp2((-0.0) - ((cbMtdParam._m0[10u].w * _320) * _321))) * _1896);
    float _1901 = ((_1882 + ((isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0))) * _1070)) * cbPerFrame._m0[3u].x) + (((cbSceneParam._m0[72u].w * _262.y) * exp2((-0.0) - ((cbMtdParam._m0[11u].x * _320) * _321))) * _1896);
    float _1902 = ((_1884 + ((isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0))) * _1070)) * cbPerFrame._m0[3u].x) + (((cbSceneParam._m0[72u].w * _262.z) * exp2((-0.0) - ((cbMtdParam._m0[11u].y * _320) * _321))) * _1896);
    uint _1903 = _1337 + 6u;
    float _1911 = _429 / cbSceneParam._m0[86u].x;
    float _1912 = _430 / cbSceneParam._m0[86u].y;
    vec4 _1926 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1911, _1912, (log2((isnan(cbSceneParam._m0[77u].w) ? _353 : (isnan(_353) ? cbSceneParam._m0[77u].w : min(_353, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1928 = _1926.x;
    float _1929 = _1926.y;
    float _1930 = _1926.z;
    float _1931 = _1926.w;
    float _2021;
    float _2023;
    float _2025;
    float _2027;
    if (_353 > cbSceneParam._m0[78u].w)
    {
        float _1984 = isnan(_353) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _353 : min(cbSceneParam._m0[80u].w, _353));
        float _1985 = _1984 / _353;
        float _1996 = _1985 * _402;
        float _1997 = _403 * _1985;
        float _1998 = (-0.0) - _1997;
        float _1999 = _1985 * _404;
        float _2001 = (cbSceneParam._m0[77u].w * _1998) / _1984;
        float _2002 = _2001 + cbSceneParam._m0[79u].w;
        float _2003 = cbSceneParam._m0[79u].w - _1997;
        float _2009 = sqrt(((_1996 * _1996) + (_1997 * _1997)) + (_1999 * _1999));
        float _2012 = (1.0 - (cbSceneParam._m0[77u].w / _1984)) * _2009;
        float _2017 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2019 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2228;
        if (abs((_1998 - _2001) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2228 = ((((_2002 > 0.0) ? exp2(_2017 * _2002) : (2.0 - exp2(_2019 * _2002))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2012;
        }
        else
        {
            float _2153 = 1.0 / cbSceneParam._m0[80u].x;
            float _2154 = isnan(_2003) ? _2002 : (isnan(_2002) ? _2003 : max(_2002, _2003));
            float _2155 = isnan(_2003) ? _2002 : (isnan(_2002) ? _2003 : min(_2002, _2003));
            float _2164 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : min(_2154, 0.0));
            float _2165 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : min(_2155, 0.0));
            _2228 = ((abs(_2009 / _1998) * cbSceneParam._m0[80u].y) * ((((_2164 - _2165) * 2.0) - ((exp2(_2017 * (isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0)))) - exp2(_2017 * (isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0))))) * _2153)) - ((exp2(_2019 * _2164) - exp2(_2019 * _2165)) * _2153))) + (_2012 * cbSceneParam._m0[80u].z);
        }
        vec4 _2230 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1911, _1912, 1.0), 0.0);
        float _2239 = exp2((_2228 * (-1.44269502162933349609375)) * (1.0 - _2230.w));
        float _2240 = log2(_2239);
        float _2256 = log2(_1931);
        _2021 = (exp2(_2256 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2240 * cbSceneParam._m0[78u].x)) * _2230.x) / cbSceneParam._m0[78u].x)) + _1928;
        _2023 = (exp2(_2256 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2240 * cbSceneParam._m0[78u].y)) * _2230.y) / cbSceneParam._m0[78u].y)) + _1929;
        _2025 = (exp2(_2256 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2240 * cbSceneParam._m0[78u].z)) * _2230.z) / cbSceneParam._m0[78u].z)) + _1930;
        _2027 = _2239 * _1931;
    }
    else
    {
        _2021 = _1928;
        _2023 = _1929;
        _2025 = _1930;
        _2027 = _1931;
    }
    bool _2266;
    vec4 _2036;
    vec4 _2058;
    float _2060;
    float _2064;
    float _2065;
    float _2066;
    float _2067;
    bool _2077;
    for (;;)
    {
        _2036 = cbMatDynParam._m0[0u];
        float _2038 = roundEven(_2036.y);
        bool _2039 = _2038 == 3.0;
        float _2040 = log2(_2027);
        float _2047 = exp2(_2040 * cbSceneParam._m0[78u].x) * _1900;
        float _2048 = exp2(_2040 * cbSceneParam._m0[78u].y) * _1901;
        float _2049 = exp2(_2040 * cbSceneParam._m0[78u].z) * _1902;
        float _2056 = _418 + (-0.5);
        _2058 = cbMtdParam._m0[1u];
        _2060 = _2058.y * _2056;
        float _2063 = (_2038 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2064 = _2063 * (_2039 ? _2047 : (_2047 + (cbSceneParam._m0[72u].w * _2021)));
        _2065 = _2063 * (_2039 ? _2048 : (_2048 + (cbSceneParam._m0[72u].w * _2023)));
        _2066 = _2063 * (_2039 ? _2049 : (_2049 + (cbSceneParam._m0[72u].w * _2025)));
        _2067 = _2056 * 0.999000012874603271484375;
        _2077 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2077)
        {
            if ((cbInstanceData._m0[_1337 + 7u].x + _2067) < 0.5)
            {
                _2266 = true;
                break;
            }
        }
        uint _2189 = (_1337 + 9u) + uint(_2036.w);
        if ((cbInstanceData._m0[_2189].w < 1.0) && ((cbInstanceData._m0[_2189].w + _2067) < 0.5))
        {
            _2266 = true;
            break;
        }
        if ((_2060 + 1.0) < _2058.x)
        {
            _2266 = true;
            break;
        }
        _2266 = false;
        break;
    }
    float _2444;
    if (_2266)
    {
        discard_state = true;
        _2444 = 0.0;
    }
    else
    {
        _2444 = cbInstanceData._m0[_1903].w;
    }
    SV_Target.x = _2064;
    SV_Target.y = _2065;
    SV_Target.z = _2066;
    SV_Target.w = _2444;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1903].w;
    discard_exit();
}


