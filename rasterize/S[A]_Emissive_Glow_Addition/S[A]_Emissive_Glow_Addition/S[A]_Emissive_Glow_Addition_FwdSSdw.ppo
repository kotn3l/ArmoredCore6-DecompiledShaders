#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_A_Emissive_Glow_Addition_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_A_Emissive_Glow_Addition_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _724;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _167 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _168 = _167 * NORMAL.x;
    float _169 = _167 * NORMAL.y;
    float _170 = _167 * NORMAL.z;
    float _175;
    float _176;
    float _177;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _175 = (-0.0) - _168;
        _176 = (-0.0) - _169;
        _177 = (-0.0) - _170;
    }
    else
    {
        _175 = _168;
        _176 = _169;
        _177 = _170;
    }
    vec4 _191 = texture(sampler2D(S_A_Emissive_Glow_Addition_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _194 = _191.x;
    float _195 = _191.y;
    float _196 = _191.z;
    vec4 _212 = texture(sampler2D(S_A_Emissive_Glow_Addition_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _223 = inversesqrt(dot(vec3(_175, _176, _177), vec3(_175, _176, _177)));
    float _224 = _223 * _175;
    float _225 = _223 * _176;
    float _226 = _223 * _177;
    float _2896 = isnan(0.0) ? _194 : (isnan(_194) ? 0.0 : max(_194, 0.0));
    float _2907 = isnan(0.0) ? _195 : (isnan(_195) ? 0.0 : max(_195, 0.0));
    float _2918 = isnan(0.0) ? _196 : (isnan(_196) ? 0.0 : max(_196, 0.0));
    float _246 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _288 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _298 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _288);
    float _299 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _288);
    float _300 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _288);
    float _304 = inversesqrt(dot(vec3(_298, _299, _300), vec3(_298, _299, _300)));
    float _305 = _298 * _304;
    float _306 = _299 * _304;
    float _307 = _300 * _304;
    float _313 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _314 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _335 = fma(_226, cbSceneParam._m0[5u].z, fma(_225, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _224));
    float _338 = fma(_226, cbSceneParam._m0[6u].z, fma(_225, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _224));
    float _341 = fma(_226, cbSceneParam._m0[7u].z, fma(_225, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _224));
    uint _354 = uint(roundEven(NORMAL.w)) * 13u;
    uint _356 = _354 + 9u;
    uint _357 = _356 + uint(cbMatDynParam._m0[0u].w);
    float _363 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2896 : (isnan(_2896) ? 1.0 : min(_2896, 1.0)))) * cbInstanceData._m0[_357].x;
    float _364 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2907 : (isnan(_2907) ? 1.0 : min(_2907, 1.0)))) * cbInstanceData._m0[_357].y;
    float _365 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2918 : (isnan(_2918) ? 1.0 : min(_2918, 1.0)))) * cbInstanceData._m0[_357].z;
    float _2929 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _366 = isnan(1.0) ? _2929 : (isnan(_2929) ? 1.0 : min(_2929, 1.0));
    float _2940 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    float _367 = isnan(1.0) ? _2940 : (isnan(_2940) ? 1.0 : min(_2940, 1.0));
    float _2951 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _368 = isnan(1.0) ? _2951 : (isnan(_2951) ? 1.0 : min(_2951, 1.0));
    vec4 _377 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _313, cbSceneParam._m0[86u].y * _314));
    float _380 = _377.x * TEXCOORD.z;
    float _381 = dot(vec3(_224, _225, _226), vec3(_305, _306, _307));
    float _384 = _381 * 2.0;
    float _389 = (_384 * _224) - _305;
    float _390 = (_384 * _225) - _306;
    float _391 = (_384 * _226) - _307;
    float _413 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _417 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _421 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _723;
    float _725;
    float _726;
    float _727;
    float _728;
    float _729;
    float _730;
    float _731;
    float _732;
    float _733;
    float _734;
    float _735;
    float _736;
    float _737;
    float _738;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _448 = fma(_421, cbModelParam._m0[26u].z, fma(_417, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _413));
        float _452 = fma(_421, cbModelParam._m0[27u].z, fma(_417, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _413));
        float _456 = fma(_421, cbModelParam._m0[28u].z, fma(_417, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _413));
        float _481 = _413 + _224;
        float _482 = _417 + _225;
        float _483 = _421 + _226;
        float _493 = fma(_483, cbModelParam._m0[26u].z, fma(_482, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _481)) - _448;
        float _494 = fma(_483, cbModelParam._m0[27u].z, fma(_482, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _481)) - _452;
        float _495 = fma(_483, cbModelParam._m0[28u].z, fma(_482, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _481)) - _456;
        float _499 = inversesqrt(dot(vec3(_493, _494, _495), vec3(_493, _494, _495)));
        float _512 = ((_499 * _493) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_448 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _513 = ((_499 * _494) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_452 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _514 = ((_499 * _495) / cbModelParam._m0[34u].z) + ((((((_456 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _517 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_512, _513, _514), 0.0);
        vec4 _524 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_512, _513, _514), 0.0);
        vec4 _531 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_512, _513, _514), 0.0);
        vec4 _538 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_512, _513, _514), 0.0);
        float _551 = exp2((_517.w + (-0.5)) * 20.0) * 2.0;
        float _552 = _551 * (_517.x + (-0.5));
        float _553 = _551 * (_517.y + (-0.5));
        float _554 = _551 * (_517.z + (-0.5));
        float _561 = exp2((_524.w + (-0.5)) * 20.0) * 2.0;
        float _562 = _561 * (_524.x + (-0.5));
        float _563 = _561 * (_524.y + (-0.5));
        float _564 = _561 * (_524.z + (-0.5));
        float _571 = exp2((_531.w + (-0.5)) * 20.0) * 2.0;
        float _572 = _571 * (_531.x + (-0.5));
        float _573 = _571 * (_531.y + (-0.5));
        float _574 = _571 * (_531.z + (-0.5));
        float _581 = exp2((_538.w + (-0.5)) * 20.0) * 2.0;
        float _582 = _581 * (_538.x + (-0.5));
        float _583 = _581 * (_538.y + (-0.5));
        float _584 = _581 * (_538.z + (-0.5));
        float _585 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
        float _586 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
        float _587 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
        float _588 = _552 * 0.5;
        float _589 = _562 * 0.5;
        float _590 = _572 * 0.5;
        float _591 = dot(vec3(_588, _589, _590), vec3(_588, _589, _590));
        float _596 = (_591 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_591);
        float _605 = (dot(vec3(_224, _225, _226), vec3(_596 * _588, _596 * _589, _596 * _590)) + 1.0) * 0.5;
        float _2977 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
        float _615 = sqrt(((_589 * _589) + (_588 * _588)) + (_590 * _590)) / (_585 + 9.9999997473787516355514526367188e-06);
        float _2988 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
        float _616 = isnan(1.0) ? _2988 : (isnan(_2988) ? 1.0 : min(_2988, 1.0));
        float _617 = _616 * 2.0;
        float _621 = (1.0 - _616) / (_616 + 1.0);
        float _2999 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
        float _622 = isnan(1.0) ? _2999 : (isnan(_2999) ? 1.0 : min(_2999, 1.0));
        float _631 = ((((1.0 - _622) * (_617 + 2.0)) * exp2(log2(isnan(1.0) ? _2977 : (isnan(_2977) ? 1.0 : min(_2977, 1.0))) * (_617 + 1.0))) + _622) * _585;
        float _632 = _553 * 0.5;
        float _633 = _563 * 0.5;
        float _634 = _573 * 0.5;
        float _635 = dot(vec3(_632, _633, _634), vec3(_632, _633, _634));
        float _640 = (_635 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_635);
        float _648 = (dot(vec3(_224, _225, _226), vec3(_640 * _632, _640 * _633, _640 * _634)) + 1.0) * 0.5;
        float _3010 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
        float _657 = sqrt(((_633 * _633) + (_632 * _632)) + (_634 * _634)) / (_586 + 9.9999997473787516355514526367188e-06);
        float _3021 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
        float _658 = isnan(1.0) ? _3021 : (isnan(_3021) ? 1.0 : min(_3021, 1.0));
        float _659 = _658 * 2.0;
        float _663 = (1.0 - _658) / (_658 + 1.0);
        float _3032 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
        float _664 = isnan(1.0) ? _3032 : (isnan(_3032) ? 1.0 : min(_3032, 1.0));
        float _673 = ((((1.0 - _664) * (_659 + 2.0)) * exp2(log2(isnan(1.0) ? _3010 : (isnan(_3010) ? 1.0 : min(_3010, 1.0))) * (_659 + 1.0))) + _664) * _586;
        float _674 = _554 * 0.5;
        float _675 = _564 * 0.5;
        float _676 = _574 * 0.5;
        float _677 = dot(vec3(_674, _675, _676), vec3(_674, _675, _676));
        float _682 = (_677 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_677);
        float _690 = (dot(vec3(_224, _225, _226), vec3(_682 * _674, _682 * _675, _682 * _676)) + 1.0) * 0.5;
        float _3043 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
        float _699 = sqrt(((_675 * _675) + (_674 * _674)) + (_676 * _676)) / (_587 + 9.9999997473787516355514526367188e-06);
        float _3054 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
        float _700 = isnan(1.0) ? _3054 : (isnan(_3054) ? 1.0 : min(_3054, 1.0));
        float _701 = _700 * 2.0;
        float _705 = (1.0 - _700) / (_700 + 1.0);
        float _3065 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
        float _706 = isnan(1.0) ? _3065 : (isnan(_3065) ? 1.0 : min(_3065, 1.0));
        float _715 = ((((1.0 - _706) * (_701 + 2.0)) * exp2(log2(isnan(1.0) ? _3043 : (isnan(_3043) ? 1.0 : min(_3043, 1.0))) * (_701 + 1.0))) + _706) * _587;
        _723 = _554;
        _725 = _553;
        _726 = _552;
        _727 = _564;
        _728 = _563;
        _729 = _562;
        _730 = _574;
        _731 = _573;
        _732 = _572;
        _733 = _587;
        _734 = _586;
        _735 = _585;
        _736 = cbModelParam._m0[36u].z * (isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0)));
        _737 = cbModelParam._m0[36u].z * (isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0)));
        _738 = cbModelParam._m0[36u].z * (isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0)));
    }
    else
    {
        _723 = _724;
        _725 = _724;
        _726 = _724;
        _727 = _724;
        _728 = _724;
        _729 = _724;
        _730 = _724;
        _731 = _724;
        _732 = _724;
        _733 = _724;
        _734 = _724;
        _735 = _724;
        _736 = 0.0;
        _737 = 0.0;
        _738 = 0.0;
    }
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _764 = fma(_421, cbModelParam._m0[30u].z, fma(_417, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _413));
        float _768 = fma(_421, cbModelParam._m0[31u].z, fma(_417, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _413));
        float _772 = fma(_421, cbModelParam._m0[32u].z, fma(_417, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _413));
        float _795 = _413 + _224;
        float _796 = _417 + _225;
        float _797 = _421 + _226;
        float _807 = fma(_797, cbModelParam._m0[30u].z, fma(_796, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _795)) - _764;
        float _808 = fma(_797, cbModelParam._m0[31u].z, fma(_796, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _795)) - _768;
        float _809 = fma(_797, cbModelParam._m0[32u].z, fma(_796, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _795)) - _772;
        float _813 = inversesqrt(dot(vec3(_807, _808, _809), vec3(_807, _808, _809)));
        float _826 = ((_813 * _807) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_764 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _827 = ((_813 * _808) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_768 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _828 = ((_813 * _809) / cbModelParam._m0[35u].z) + ((((((_772 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _830 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_826, _827, _828), 0.0);
        vec4 _837 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_826, _827, _828), 0.0);
        vec4 _844 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_826, _827, _828), 0.0);
        vec4 _851 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_826, _827, _828), 0.0);
        float _863 = exp2((_830.w + (-0.5)) * 20.0) * 2.0;
        float _864 = _863 * (_830.x + (-0.5));
        float _865 = _863 * (_830.y + (-0.5));
        float _866 = _863 * (_830.z + (-0.5));
        float _873 = exp2((_837.w + (-0.5)) * 20.0) * 2.0;
        float _874 = _873 * (_837.x + (-0.5));
        float _875 = _873 * (_837.y + (-0.5));
        float _876 = _873 * (_837.z + (-0.5));
        float _883 = exp2((_844.w + (-0.5)) * 20.0) * 2.0;
        float _884 = _883 * (_844.x + (-0.5));
        float _885 = _883 * (_844.y + (-0.5));
        float _886 = _883 * (_844.z + (-0.5));
        float _893 = exp2((_851.w + (-0.5)) * 20.0) * 2.0;
        float _894 = _893 * (_851.x + (-0.5));
        float _895 = _893 * (_851.y + (-0.5));
        float _896 = _893 * (_851.z + (-0.5));
        float _897 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _898 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _899 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _900 = _864 * 0.5;
        float _901 = _874 * 0.5;
        float _902 = _884 * 0.5;
        float _903 = dot(vec3(_900, _901, _902), vec3(_900, _901, _902));
        float _908 = (_903 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_903);
        float _916 = (dot(vec3(_224, _225, _226), vec3(_908 * _900, _908 * _901, _908 * _902)) + 1.0) * 0.5;
        float _3106 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _925 = sqrt(((_901 * _901) + (_900 * _900)) + (_902 * _902)) / (_897 + 9.9999997473787516355514526367188e-06);
        float _3117 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _926 = isnan(1.0) ? _3117 : (isnan(_3117) ? 1.0 : min(_3117, 1.0));
        float _927 = _926 * 2.0;
        float _931 = (1.0 - _926) / (_926 + 1.0);
        float _3128 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _932 = isnan(1.0) ? _3128 : (isnan(_3128) ? 1.0 : min(_3128, 1.0));
        float _941 = ((((1.0 - _932) * (_927 + 2.0)) * exp2(log2(isnan(1.0) ? _3106 : (isnan(_3106) ? 1.0 : min(_3106, 1.0))) * (_927 + 1.0))) + _932) * _897;
        float _942 = _865 * 0.5;
        float _943 = _875 * 0.5;
        float _944 = _885 * 0.5;
        float _945 = dot(vec3(_942, _943, _944), vec3(_942, _943, _944));
        float _950 = (_945 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_945);
        float _958 = (dot(vec3(_224, _225, _226), vec3(_950 * _942, _950 * _943, _950 * _944)) + 1.0) * 0.5;
        float _3139 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _967 = sqrt(((_943 * _943) + (_942 * _942)) + (_944 * _944)) / (_898 + 9.9999997473787516355514526367188e-06);
        float _3150 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _968 = isnan(1.0) ? _3150 : (isnan(_3150) ? 1.0 : min(_3150, 1.0));
        float _969 = _968 * 2.0;
        float _973 = (1.0 - _968) / (_968 + 1.0);
        float _3161 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _974 = isnan(1.0) ? _3161 : (isnan(_3161) ? 1.0 : min(_3161, 1.0));
        float _983 = ((((1.0 - _974) * (_969 + 2.0)) * exp2(log2(isnan(1.0) ? _3139 : (isnan(_3139) ? 1.0 : min(_3139, 1.0))) * (_969 + 1.0))) + _974) * _898;
        float _984 = _866 * 0.5;
        float _985 = _876 * 0.5;
        float _986 = _886 * 0.5;
        float _987 = dot(vec3(_984, _985, _986), vec3(_984, _985, _986));
        float _992 = (_987 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_987);
        float _1000 = (dot(vec3(_224, _225, _226), vec3(_992 * _984, _992 * _985, _992 * _986)) + 1.0) * 0.5;
        float _3172 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1009 = sqrt(((_985 * _985) + (_984 * _984)) + (_986 * _986)) / (_899 + 9.9999997473787516355514526367188e-06);
        float _3183 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1010 = isnan(1.0) ? _3183 : (isnan(_3183) ? 1.0 : min(_3183, 1.0));
        float _1011 = _1010 * 2.0;
        float _1015 = (1.0 - _1010) / (_1010 + 1.0);
        float _3194 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1016 = isnan(1.0) ? _3194 : (isnan(_3194) ? 1.0 : min(_3194, 1.0));
        float _1025 = ((((1.0 - _1016) * (_1011 + 2.0)) * exp2(log2(isnan(1.0) ? _3172 : (isnan(_3172) ? 1.0 : min(_3172, 1.0))) * (_1011 + 1.0))) + _1016) * _899;
        _1033 = _866;
        _1034 = _865;
        _1035 = _864;
        _1036 = _876;
        _1037 = _875;
        _1038 = _874;
        _1039 = _886;
        _1040 = _885;
        _1041 = _884;
        _1042 = _899;
        _1043 = _898;
        _1044 = _897;
        _1045 = cbModelParam._m0[36u].w * (isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0)));
        _1046 = cbModelParam._m0[36u].w * (isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0)));
        _1047 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0)));
    }
    else
    {
        _1033 = _724;
        _1034 = _724;
        _1035 = _724;
        _1036 = _724;
        _1037 = _724;
        _1038 = _724;
        _1039 = _724;
        _1040 = _724;
        _1041 = _724;
        _1042 = _724;
        _1043 = _724;
        _1044 = _724;
        _1045 = 0.0;
        _1046 = 0.0;
        _1047 = 0.0;
    }
    float _1057 = (cbModelParam._m0[1u].x * (_1045 - _736)) + _736;
    float _1058 = (cbModelParam._m0[1u].x * (_1046 - _737)) + _737;
    float _1059 = (cbModelParam._m0[1u].x * (_1047 - _738)) + _738;
    float _1080 = fma(_1059, cbSceneParam._m0[89u].z, fma(_1058, cbSceneParam._m0[89u].y, _1057 * cbSceneParam._m0[89u].x));
    float _1083 = fma(_1059, cbSceneParam._m0[90u].z, fma(_1058, cbSceneParam._m0[90u].y, _1057 * cbSceneParam._m0[90u].x));
    float _1086 = fma(_1059, cbSceneParam._m0[91u].z, fma(_1058, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1057));
    float _1101 = _389 * 0.5;
    float _1102 = _390 * 0.5;
    float _1103 = _391 * 0.5;
    float _1104 = dot(vec4(_1101, _1102, _1103, 1.0), vec4(_1035, _1038, _1041, _1044));
    float _1107 = dot(vec4(_1101, _1102, _1103, 1.0), vec4(_1034, _1037, _1040, _1043));
    float _1110 = dot(vec4(_1101, _1102, _1103, 1.0), vec4(_1033, _1036, _1039, _1042));
    float _1144;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1117 = dot(vec4(_1101, _1102, _1103, 1.0), vec4(_723, _727, _730, _733));
        float _1121 = dot(vec4(_1101, _1102, _1103, 1.0), vec4(_725, _728, _731, _734));
        float _1125 = dot(vec4(_1101, _1102, _1103, 1.0), vec4(_726, _729, _732, _735));
        float _1132 = dot(vec4(cbModelParam._m0[39u]), vec4(_1101, _1102, _1103, 1.0));
        _1144 = dot(vec3(isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0)), isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0)), isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1132) ? 0.0 : (isnan(0.0) ? _1132 : max(0.0, _1132))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1144 = 1.0;
    }
    float _1155;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1146 = dot(vec4(cbModelParam._m0[40u]), vec4(_1101, _1102, _1103, 1.0));
        _1155 = dot(vec3(isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0)), isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0)), isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1146) ? 0.0 : (isnan(0.0) ? _1146 : max(0.0, _1146))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1155 = 1.0;
    }
    float _1159 = (_1155 * cbModelParam._m0[1u].x) + (_1144 * (1.0 - cbModelParam._m0[1u].x));
    float _1168 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1250;
    float _1252;
    float _1254;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1217 = fma(_421, cbModelParam._m0[13u].z, fma(_417, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _413)) + cbModelParam._m0[13u].w;
        float _1221 = fma(_421, cbModelParam._m0[14u].z, fma(_417, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _413)) + cbModelParam._m0[14u].w;
        float _1225 = fma(_421, cbModelParam._m0[15u].z, fma(_417, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _413)) + cbModelParam._m0[15u].w;
        float _1228 = fma(_391, cbModelParam._m0[13u].z, fma(_390, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _389));
        float _1231 = fma(_391, cbModelParam._m0[14u].z, fma(_390, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _389));
        float _1234 = fma(_391, cbModelParam._m0[15u].z, fma(_390, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _389));
        float _1260;
        if (_1228 > 0.0)
        {
            _1260 = abs((1.0 - _1217) / _1228);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1228 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1217 + 1.0) / _1228);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1260 = frontier_phi_16_14_ladder;
        }
        float _1489;
        if (_1231 > 0.0)
        {
            _1489 = abs((1.0 - _1221) / _1231);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1231 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1221 + 1.0) / _1231);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1489 = frontier_phi_25_21_ladder;
        }
        float _1681;
        if (_1234 > 0.0)
        {
            _1681 = abs((1.0 - _1225) / _1234);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1234 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1225 + 1.0) / _1234);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1681 = frontier_phi_37_32_ladder;
        }
        float _1683 = isnan(_1489) ? _1260 : (isnan(_1260) ? _1489 : min(_1260, _1489));
        float _1684 = isnan(_1681) ? _1683 : (isnan(_1683) ? _1681 : min(_1683, _1681));
        float _1688 = (_1684 * _1228) + _1217;
        float _1689 = (_1684 * _1231) + _1221;
        float _1690 = (_1684 * _1234) + _1225;
        float _1691 = _1684 * 9.9999997473787516355514526367188e-05;
        float _1693 = (-1.0) - _1691;
        float _1695 = _1691 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1690 > _1695) || ((_1690 < _1693) || ((_1689 > _1695) || ((_1689 < _1693) || ((_1688 < _1693) || (_1688 > _1695))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1787 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1690, cbModelParam._m0[9u].z, fma(_1689, cbModelParam._m0[9u].y, _1688 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1690, cbModelParam._m0[10u].z, fma(_1689, cbModelParam._m0[10u].y, _1688 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1690, cbModelParam._m0[11u].z, fma(_1689, cbModelParam._m0[11u].y, _1688 * cbModelParam._m0[11u].x))), _1168);
            frontier_phi_15_37_ladder = _1787.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1787.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1787.x * cbModelParam._m0[1u].y;
        }
        _1250 = frontier_phi_15_37_ladder_2;
        _1252 = frontier_phi_15_37_ladder_1;
        _1254 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1238 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_389, _390, _391), _1168);
        _1250 = _1238.x * cbModelParam._m0[1u].y;
        _1252 = _1238.y * cbModelParam._m0[1u].y;
        _1254 = _1238.z * cbModelParam._m0[1u].y;
    }
    float _1257 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1350;
    float _1352;
    float _1354;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1314 = fma(_421, cbModelParam._m0[21u].z, fma(_417, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _413)) + cbModelParam._m0[21u].w;
        float _1318 = fma(_421, cbModelParam._m0[22u].z, fma(_417, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _413)) + cbModelParam._m0[22u].w;
        float _1322 = fma(_421, cbModelParam._m0[23u].z, fma(_417, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _413)) + cbModelParam._m0[23u].w;
        float _1325 = fma(_391, cbModelParam._m0[21u].z, fma(_390, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _389));
        float _1328 = fma(_391, cbModelParam._m0[22u].z, fma(_390, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _389));
        float _1331 = fma(_391, cbModelParam._m0[23u].z, fma(_390, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _389));
        float _1494;
        if (_1325 > 0.0)
        {
            _1494 = abs((1.0 - _1314) / _1325);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1325 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1314 + 1.0) / _1325);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1494 = frontier_phi_27_23_ladder;
        }
        float _1708;
        if (_1328 > 0.0)
        {
            _1708 = abs((1.0 - _1318) / _1328);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1328 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1318 + 1.0) / _1328);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1708 = frontier_phi_39_34_ladder;
        }
        float _1859;
        if (_1331 > 0.0)
        {
            _1859 = abs((1.0 - _1322) / _1331);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1331 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1322 + 1.0) / _1331);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _1859 = frontier_phi_48_45_ladder;
        }
        float _1861 = isnan(_1708) ? _1494 : (isnan(_1494) ? _1708 : min(_1494, _1708));
        float _1862 = isnan(_1859) ? _1861 : (isnan(_1861) ? _1859 : min(_1861, _1859));
        float _1866 = (_1862 * _1325) + _1314;
        float _1867 = (_1862 * _1328) + _1318;
        float _1868 = (_1862 * _1331) + _1322;
        float _1869 = _1862 * 9.9999997473787516355514526367188e-05;
        float _1870 = (-1.0) - _1869;
        float _1872 = _1869 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_1868 > _1872) || ((_1868 < _1870) || ((_1867 > _1872) || ((_1867 < _1870) || ((_1866 < _1870) || (_1866 > _1872))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2095 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1868, cbModelParam._m0[17u].z, fma(_1867, cbModelParam._m0[17u].y, _1866 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1868, cbModelParam._m0[18u].z, fma(_1867, cbModelParam._m0[18u].y, _1866 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1868, cbModelParam._m0[19u].z, fma(_1867, cbModelParam._m0[19u].y, _1866 * cbModelParam._m0[19u].x))), _1257);
            frontier_phi_24_48_ladder = _2095.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2095.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2095.x * cbModelParam._m0[1u].z;
        }
        _1350 = frontier_phi_24_48_ladder_2;
        _1352 = frontier_phi_24_48_ladder_1;
        _1354 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1334 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_389, _390, _391), _1257);
        _1350 = _1334.x * cbModelParam._m0[1u].z;
        _1352 = _1334.y * cbModelParam._m0[1u].z;
        _1354 = _1334.z * cbModelParam._m0[1u].z;
    }
    float _1366 = _380 * 0.01200000010430812835693359375;
    float _1368 = _1366 * ((cbModelParam._m0[1u].w * (_1350 - _1250)) + _1250);
    float _1369 = _1366 * ((cbModelParam._m0[1u].w * (_1352 - _1252)) + _1252);
    float _1370 = _1366 * ((cbModelParam._m0[1u].w * (_1354 - _1254)) + _1254);
    float _1373 = fma(_1370, cbSceneParam._m0[89u].z, fma(_1369, cbSceneParam._m0[89u].y, _1368 * cbSceneParam._m0[89u].x));
    float _1376 = fma(_1370, cbSceneParam._m0[90u].z, fma(_1369, cbSceneParam._m0[90u].y, _1368 * cbSceneParam._m0[90u].x));
    float _1379 = fma(_1370, cbSceneParam._m0[91u].z, fma(_1369, cbSceneParam._m0[91u].y, _1368 * cbSceneParam._m0[91u].x));
    vec4 _1387 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_313, _314));
    float _1389 = _1387.w;
    float _1401 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1389);
    float _1402 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1389);
    float _1403 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1389);
    uvec4 _1407 = floatBitsToUint(cbInstanceData._m0[_354 + 5u]);
    uint _1409 = _1407.x * 14u;
    uint _1410 = _1409 + 13u;
    float _1417 = _380 + (-1.0);
    float _1423 = (cbLight._m0[_1410].x * _1417) + 1.0;
    float _1424 = (cbLight._m0[_1410].y * _1417) + 1.0;
    float _1425 = (cbLight._m0[_1410].z * _1417) + 1.0;
    float _1426 = (cbLight._m0[_1410].w * _1417) + 1.0;
    uint _1427 = _1409 + 5u;
    float _1433 = isnan(1.0) ? _1424 : (isnan(_1424) ? 1.0 : min(_1424, 1.0));
    uint _1437 = _1409 + 4u;
    float _1447 = isnan(1.0) ? _1423 : (isnan(_1423) ? 1.0 : min(_1423, 1.0));
    uint _1451 = _1409 | 1u;
    float _1462 = dot(vec3(cbLight._m0[_1409].xyz), vec3(_224, _225, _226));
    float _1465 = dot(vec3(cbLight._m0[_1451].xyz), vec3(_224, _225, _226));
    float _3330 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
    float _3341 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
    float _1470 = (isnan(1.0) ? _3330 : (isnan(_3330) ? 1.0 : min(_3330, 1.0))) * 0.3183098733425140380859375;
    float _1472 = (isnan(1.0) ? _3341 : (isnan(_3341) ? 1.0 : min(_3341, 1.0))) * 0.3183098733425140380859375;
    float _1479 = ((cbLight._m0[_1427].x * _1433) * _1472) + (((cbLight._m0[_1437].x * _1401) * _1447) * _1470);
    float _1480 = ((_1433 * cbLight._m0[_1427].y) * _1472) + (((cbLight._m0[_1437].y * _1402) * _1447) * _1470);
    float _1481 = ((_1433 * cbLight._m0[_1427].z) * _1472) + (((cbLight._m0[_1437].z * _1403) * _1447) * _1470);
    uvec4 _1486 = floatBitsToUint(cbLight._m0[_1409 + 12u]);
    bool _1488 = _1486.x == 0u;
    float _1499;
    float _1501;
    float _1503;
    if (_1488)
    {
        _1499 = _1479;
        _1501 = _1480;
        _1503 = _1481;
    }
    else
    {
        uint _1507 = _1409 + 6u;
        float _1523 = (dot(vec3(cbLight._m0[_1409 + 2u].xyz), vec3(_224, _225, _226)) * 0.5) + 0.5;
        float _1524 = _1523 * _1523;
        float _3352 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1525 = isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0));
        float _1526 = isnan(1.0) ? _1425 : (isnan(_1425) ? 1.0 : min(_1425, 1.0));
        _1499 = (((cbLight._m0[_1507].x * 0.3183098733425140380859375) * _1525) * _1526) + _1479;
        _1501 = (((cbLight._m0[_1507].y * 0.3183098733425140380859375) * _1525) * _1526) + _1480;
        _1503 = (((cbLight._m0[_1507].z * 0.3183098733425140380859375) * _1525) * _1526) + _1481;
    }
    bool _1506 = _1486.y == 0u;
    float _1544;
    float _1546;
    float _1548;
    if (_1506)
    {
        _1544 = _1499;
        _1546 = _1501;
        _1548 = _1503;
    }
    else
    {
        uint _1652 = _1409 + 7u;
        float _1668 = (dot(vec3(cbLight._m0[_1409 + 3u].xyz), vec3(_224, _225, _226)) * 0.5) + 0.5;
        float _1669 = _1668 * _1668;
        float _3368 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1670 = isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0));
        float _1671 = isnan(1.0) ? _1426 : (isnan(_1426) ? 1.0 : min(_1426, 1.0));
        _1544 = (((cbLight._m0[_1652].x * 0.3183098733425140380859375) * _1670) * _1671) + _1499;
        _1546 = (((cbLight._m0[_1652].y * 0.3183098733425140380859375) * _1670) * _1671) + _1501;
        _1548 = (((cbLight._m0[_1652].z * 0.3183098733425140380859375) * _1670) * _1671) + _1503;
    }
    uint _1550 = _1409 + 8u;
    float _1556 = cbLight._m0[_1409].x + _305;
    float _1557 = cbLight._m0[_1409].y + _306;
    float _1558 = cbLight._m0[_1409].z + _307;
    float _1562 = inversesqrt(dot(vec3(_1556, _1557, _1558), vec3(_1556, _1557, _1558)));
    float _1566 = dot(vec3(_224, _225, _226), vec3(cbLight._m0[_1409].xyz));
    float _3384 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
    float _1569 = isnan(1.0) ? _3384 : (isnan(_3384) ? 1.0 : min(_3384, 1.0));
    float _3395 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _1570 = isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0));
    float _1571 = dot(vec3(cbLight._m0[_1409].xyz), vec3(_1556 * _1562, _1557 * _1562, _1558 * _1562));
    float _3406 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
    float _1582 = (exp2(log2(1.0 - (isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1588 = (0.5 / ((_1569 + 9.9999999392252902907785028219223e-09) + _1570)) * _1569;
    float _3417 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
    float _1590 = (isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0))) * 0.31831014156341552734375;
    uint _1604 = _1409 + 9u;
    float _1610 = cbLight._m0[_1451].x + _305;
    float _1611 = cbLight._m0[_1451].y + _306;
    float _1612 = cbLight._m0[_1451].z + _307;
    float _1616 = inversesqrt(dot(vec3(_1610, _1611, _1612), vec3(_1610, _1611, _1612)));
    float _1620 = dot(vec3(_224, _225, _226), vec3(cbLight._m0[_1451].xyz));
    float _3428 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
    float _1623 = isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0));
    float _1624 = dot(vec3(cbLight._m0[_1451].xyz), vec3(_1610 * _1616, _1611 * _1616, _1612 * _1616));
    float _3439 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
    float _1633 = (exp2(log2(1.0 - (isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1637 = (0.5 / ((_1623 + 9.9999999392252902907785028219223e-09) + _1570)) * _1623;
    float _3450 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
    float _1639 = (isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0))) * 0.31831014156341552734375;
    float _1649 = (((_1633 * cbLight._m0[_1604].x) * _1639) * _1433) + ((((cbLight._m0[_1550].x * _1401) * _1582) * _1590) * _1447);
    float _1650 = (((_1633 * cbLight._m0[_1604].y) * _1639) * _1433) + ((((cbLight._m0[_1550].y * _1402) * _1582) * _1590) * _1447);
    float _1651 = (((_1633 * cbLight._m0[_1604].z) * _1639) * _1433) + ((((cbLight._m0[_1550].z * _1403) * _1582) * _1590) * _1447);
    float _1713;
    float _1715;
    float _1717;
    if (_1488)
    {
        _1713 = _1649;
        _1715 = _1650;
        _1717 = _1651;
    }
    else
    {
        uint _1719 = _1409 + 10u;
        uint _1725 = _1409 + 2u;
        float _1731 = cbLight._m0[_1725].x + _305;
        float _1732 = cbLight._m0[_1725].y + _306;
        float _1733 = cbLight._m0[_1725].z + _307;
        float _1737 = inversesqrt(dot(vec3(_1731, _1732, _1733), vec3(_1731, _1732, _1733)));
        float _1741 = dot(vec3(_224, _225, _226), vec3(cbLight._m0[_1725].xyz));
        float _3461 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
        float _1744 = isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0));
        float _1745 = dot(vec3(cbLight._m0[_1725].xyz), vec3(_1731 * _1737, _1732 * _1737, _1733 * _1737));
        float _3472 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
        float _1754 = (exp2(log2(1.0 - (isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1758 = (0.5 / ((_1744 + 9.9999999392252902907785028219223e-09) + _1570)) * _1744;
        float _3483 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
        float _1760 = (isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0))) * 0.31831014156341552734375;
        float _1761 = isnan(1.0) ? _1425 : (isnan(_1425) ? 1.0 : min(_1425, 1.0));
        _1713 = (((_1754 * cbLight._m0[_1719].x) * _1760) * _1761) + _1649;
        _1715 = (((_1754 * cbLight._m0[_1719].y) * _1760) * _1761) + _1650;
        _1717 = (((_1754 * cbLight._m0[_1719].z) * _1760) * _1761) + _1651;
    }
    float _1796;
    float _1798;
    float _1800;
    if (_1506)
    {
        _1796 = _1713;
        _1798 = _1715;
        _1800 = _1717;
    }
    else
    {
        uint _1807 = _1409 + 11u;
        uint _1813 = _1409 + 3u;
        float _1819 = cbLight._m0[_1813].x + _305;
        float _1820 = cbLight._m0[_1813].y + _306;
        float _1821 = cbLight._m0[_1813].z + _307;
        float _1825 = inversesqrt(dot(vec3(_1819, _1820, _1821), vec3(_1819, _1820, _1821)));
        float _1829 = dot(vec3(_224, _225, _226), vec3(cbLight._m0[_1813].xyz));
        float _3499 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
        float _1832 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
        float _1833 = dot(vec3(cbLight._m0[_1813].xyz), vec3(_1819 * _1825, _1820 * _1825, _1821 * _1825));
        float _3510 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
        float _1842 = (exp2(log2(1.0 - (isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1846 = (0.5 / ((_1832 + 9.9999999392252902907785028219223e-09) + _1570)) * _1832;
        float _3521 = isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0));
        float _1848 = (isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0))) * 0.31831014156341552734375;
        float _1849 = isnan(1.0) ? _1426 : (isnan(_1426) ? 1.0 : min(_1426, 1.0));
        _1796 = (((_1842 * cbLight._m0[_1807].x) * _1848) * _1849) + _1713;
        _1798 = (((_1842 * cbLight._m0[_1807].y) * _1848) * _1849) + _1715;
        _1800 = (((_1842 * cbLight._m0[_1807].z) * _1848) * _1849) + _1717;
    }
    float _1983;
    float _1985;
    float _1987;
    float _1989;
    float _1991;
    float _1993;
    if (_1407.y == 0u)
    {
        float _1924 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1925 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1924;
        float _1926 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1924;
        float _1927 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1924;
        uvec4 _1939 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1940 = _1939.x;
        uint _1951 = uint((float(_1939.y) * floor(float(uint(cbSceneParam._m0[85u].y * _314) / _1940))) + floor(float(uint(cbSceneParam._m0[85u].x * _313) / _1940)));
        float _1961 = (log2(_1927 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1962 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
        uint _1965 = uint(isnan(14.0) ? _1962 : (isnan(_1962) ? 14.0 : min(_1962, 14.0)));
        uvec4 _1970 = texelFetch(g_lightClusterGridBuffer, int(((_1965 << 2u) + (_1951 << 6u)) >> 2u));
        uint _1971 = _1970.x;
        uint _1972 = _1939.z;
        float _2100;
        float _2102;
        float _2104;
        float _2106;
        float _2108;
        float _2110;
        if (((((1u << ((_1972 >> 4u) & 15u)) + 4294967295u) & _1971) == 0u) || ((_1972 & 240u) == 0u))
        {
            _2100 = 0.0;
            _2102 = 0.0;
            _2104 = 0.0;
            _2106 = 0.0;
            _2108 = 0.0;
            _2110 = 0.0;
        }
        else
        {
            float _2101;
            float _2103;
            float _2105;
            float _2107;
            float _2109;
            float _2111;
            float _2251 = 0.0;
            float _2252 = 0.0;
            float _2253 = 0.0;
            float _2254 = 0.0;
            float _2255 = 0.0;
            float _2256 = 0.0;
            uint _2257 = 0u;
            uint _2266;
            bool _2267;
            for (;;)
            {
                _2266 = texelFetch(g_lightClassification, int((((_1965 << 5u) + (_1951 << 9u)) + (_2257 << 2u)) >> 2u)).x;
                _2267 = _2266 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2267)
                {
                    frontier_phi_63_pred = _2256;
                    frontier_phi_63_pred_1 = _2255;
                    frontier_phi_63_pred_2 = _2254;
                    frontier_phi_63_pred_3 = _2253;
                    frontier_phi_63_pred_4 = _2252;
                    frontier_phi_63_pred_5 = _2251;
                }
                else
                {
                    float _2375;
                    float _2376;
                    float _2377;
                    float _2378;
                    float _2379;
                    float _2380;
                    uint _2381;
                    _2375 = _2251;
                    _2376 = _2252;
                    _2377 = _2253;
                    _2378 = _2254;
                    _2379 = _2255;
                    _2380 = _2256;
                    _2381 = _2266;
                    float _2307;
                    float _2308;
                    float _2309;
                    float _2310;
                    float _2311;
                    float _2312;
                    for (;;)
                    {
                        uint _2385 = uint(findLSB(_2381)) + (_2257 << 5u);
                        uint _2382 = (_2381 + 4294967295u) & _2381;
                        uint _2387 = _2385 * 48u;
                        vec4 _2401 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2387)).x, texelFetch(g_PointLightRenderingBuffer, int(_2387 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2387 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2387 + 3u)).x));
                        uint _2407 = (_2385 * 48u) + 4u;
                        vec4 _2420 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2407)).x, texelFetch(g_PointLightRenderingBuffer, int(_2407 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2407 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2407 + 3u)).x));
                        uint _2426 = (_2385 * 48u) + 8u;
                        vec3 _2437 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2426)).x, texelFetch(g_PointLightRenderingBuffer, int(_2426 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2426 + 2u)).x));
                        float _2441 = _2401.x - _1925;
                        float _2442 = _2401.y - _1926;
                        float _2443 = _2401.z - _1927;
                        float _2444 = dot(vec3(_2441, _2442, _2443), vec3(_2441, _2442, _2443));
                        float _2447 = inversesqrt(_2444);
                        float _2456 = 1.0 - (_2444 * _2401.w);
                        float _3547 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
                        float _2457 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
                        float _2458 = sqrt(_2444) * _2420.w;
                        float _2461 = 1.39999997615814208984375 / (_2458 + 1.39999997615814208984375);
                        float _2462 = _2461 * _2461;
                        float _2465 = ((1.0 - _2462) * dot(vec3(_335, _338, _341), vec3(_2447 * _2441, _2447 * _2442, _2447 * _2443))) + _2462;
                        float _2468 = _2458 * _2458;
                        float _2472 = ((isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0))) * _2457) / ((_2468 * 0.699999988079071044921875) + 1.0);
                        float _2476 = (-0.0) - _1925;
                        float _2477 = (-0.0) - _1926;
                        float _2478 = (-0.0) - _1927;
                        float _2482 = inversesqrt(dot(vec3(_2476, _2477, _2478), vec3(_2476, _2477, _2478)));
                        float _2486 = dot(vec3(_335, _338, _341), vec3(_2482 * _2476, _2482 * _2477, _2482 * _2478));
                        float _3563 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
                        float _3574 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
                        float _2490 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
                        float _2494 = (0.5 / (((isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0))) + 9.9999999392252902907785028219223e-09) + _2490)) * _2490;
                        float _3585 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
                        float _2503 = (((isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0))) * 3.1415927410125732421875) / ((_2468 * 2.1991131305694580078125) + 3.141590118408203125)) * _2457;
                        _2310 = (_2472 * _2420.x) + _2378;
                        _2311 = (_2472 * _2420.y) + _2379;
                        _2312 = (_2472 * _2420.z) + _2380;
                        _2307 = (_2503 * _2437.x) + _2375;
                        _2308 = (_2503 * _2437.y) + _2376;
                        _2309 = (_2503 * _2437.z) + _2377;
                        if (_2382 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2375 = _2307;
                            _2376 = _2308;
                            _2377 = _2309;
                            _2378 = _2310;
                            _2379 = _2311;
                            _2380 = _2312;
                            _2381 = _2382;
                        }
                    }
                    frontier_phi_63_pred = _2312;
                    frontier_phi_63_pred_1 = _2311;
                    frontier_phi_63_pred_2 = _2310;
                    frontier_phi_63_pred_3 = _2309;
                    frontier_phi_63_pred_4 = _2308;
                    frontier_phi_63_pred_5 = _2307;
                }
                _2111 = frontier_phi_63_pred;
                _2109 = frontier_phi_63_pred_1;
                _2107 = frontier_phi_63_pred_2;
                _2105 = frontier_phi_63_pred_3;
                _2103 = frontier_phi_63_pred_4;
                _2101 = frontier_phi_63_pred_5;
                uint _2258 = _2257 + 1u;
                if (_2258 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2251 = _2101;
                    _2252 = _2103;
                    _2253 = _2105;
                    _2254 = _2107;
                    _2255 = _2109;
                    _2256 = _2111;
                    _2257 = _2258;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2100 = _2101;
            _2102 = _2103;
            _2104 = _2105;
            _2106 = _2107;
            _2108 = _2109;
            _2110 = _2111;
        }
        uvec4 _2114 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2115 = _2114.z;
        uint _2117 = (_2115 >> 8u) & 15u;
        float _2222;
        float _2224;
        float _2226;
        float _2228;
        float _2230;
        float _2232;
        if (((4294967295u << _2117) & _1971) == 0u)
        {
            _2222 = _2100;
            _2224 = _2102;
            _2226 = _2104;
            _2228 = _2106;
            _2230 = _2108;
            _2232 = _2110;
        }
        else
        {
            float _2247 = inversesqrt(dot(vec3(_1925, _1926, _1927), vec3(_1925, _1926, _1927)));
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2117 < ((_2115 >> 12u) & 15u))
            {
                float _2223;
                float _2225;
                float _2227;
                float _2229;
                float _2231;
                float _2233;
                float _2358 = _2100;
                float _2359 = _2102;
                float _2360 = _2104;
                float _2361 = _2106;
                float _2362 = _2108;
                float _2363 = _2110;
                uint _2364 = _2117;
                uint _2373;
                bool _2374;
                for (;;)
                {
                    _2373 = texelFetch(g_lightClassification, int((((_1965 << 5u) + (_1951 << 9u)) + (_2364 << 2u)) >> 2u)).x;
                    _2374 = _2373 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2374)
                    {
                        frontier_phi_69_pred = _2363;
                        frontier_phi_69_pred_1 = _2362;
                        frontier_phi_69_pred_2 = _2361;
                        frontier_phi_69_pred_3 = _2360;
                        frontier_phi_69_pred_4 = _2359;
                        frontier_phi_69_pred_5 = _2358;
                    }
                    else
                    {
                        float _2508;
                        float _2509;
                        float _2510;
                        float _2511;
                        float _2512;
                        float _2513;
                        float _2760;
                        float _2761;
                        float _2762;
                        float _2763;
                        float _2764;
                        float _2765;
                        float _2521 = _2358;
                        float _2522 = _2359;
                        float _2523 = _2360;
                        float _2524 = _2361;
                        float _2525 = _2362;
                        float _2526 = _2363;
                        uint _2527 = _2373;
                        uint _2528;
                        vec4 _2553;
                        float _2554;
                        vec4 _2569;
                        vec3 _2581;
                        vec4 _2597;
                        vec4 _2613;
                        float _2660;
                        bool _2661;
                        for (;;)
                        {
                            uint _2538 = ((_2364 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2527));
                            _2528 = (_2527 + 4294967295u) & _2527;
                            uint _2540 = _2538 * 40u;
                            _2553 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2540)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2540 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2540 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2540 + 3u)).x));
                            _2554 = _2553.w;
                            uint _2556 = (_2538 * 40u) + 4u;
                            _2569 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2556)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2556 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2556 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2556 + 3u)).x));
                            uint _2571 = (_2538 * 40u) + 8u;
                            _2581 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2571)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2571 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2571 + 2u)).x));
                            uint _2584 = (_2538 * 40u) + 16u;
                            _2597 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2584)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2584 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2584 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2584 + 3u)).x));
                            uint _2600 = (_2538 * 40u) + 20u;
                            _2613 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2600)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2600 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2600 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2600 + 3u)).x));
                            uint _2616 = (_2538 * 40u) + 24u;
                            vec4 _2629 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2616)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2616 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2616 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2616 + 3u)).x));
                            uint _2635 = (_2538 * 40u) + 28u;
                            vec4 _2648 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2635)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2635 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2635 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2635 + 3u)).x));
                            _2660 = fma(_1927, _2648.z, fma(_1926, _2648.y, _2648.x * _1925)) + _2648.w;
                            _2661 = !((fma(_1927, _2629.z, fma(_1926, _2629.y, _2629.x * _1925)) + _2629.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2661)
                            {
                                float _2688 = _2553.x - _1925;
                                float _2689 = _2553.y - _1926;
                                float _2690 = _2553.z - _1927;
                                float _2691 = dot(vec3(_2688, _2689, _2690), vec3(_2688, _2689, _2690));
                                float _2694 = inversesqrt(_2691);
                                float _2695 = _2694 * _2688;
                                float _2696 = _2694 * _2689;
                                float _2697 = _2694 * _2690;
                                float _2701 = 1.0 - (_2691 / (_2554 * _2554));
                                float _3596 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
                                float _2702 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
                                float _2706 = sqrt(_2691) * _2569.w;
                                float _2708 = 1.39999997615814208984375 / (_2706 + 1.39999997615814208984375);
                                float _2709 = _2708 * _2708;
                                float _2710 = 1.0 - _2709;
                                float _2712 = (_2710 * dot(vec3(_2695, _2696, _2697), vec3(_335, _338, _341))) + _2709;
                                float _2715 = _2706 * _2706;
                                float _2719 = (fma(_1927, _2597.z, fma(_1926, _2597.y, _2597.x * _1925)) + _2597.w) / _2660;
                                float _2720 = (fma(_1927, _2613.z, fma(_1926, _2613.y, _2613.x * _1925)) + _2613.w) / _2660;
                                float _2724 = 1.0 - dot(vec2(_2719, _2720), vec2(_2719, _2720));
                                float _3612 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
                                float _2725 = isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0));
                                float _2726 = _2725 * (((isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0))) * _2702) / ((_2715 * 0.699999988079071044921875) + 1.0));
                                float _2736 = dot(vec3(_335, _338, _341), vec3((-0.0) - (_1925 * _2247), (-0.0) - (_1926 * _2247), (-0.0) - (_1927 * _2247)));
                                float _3623 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
                                float _2744 = (_2710 * dot(vec3(_335, _338, _341), vec3(_2695, _2696, _2697))) + _2709;
                                float _3634 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
                                float _2745 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
                                float _2749 = (0.5 / (((isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0))) + 9.9999999392252902907785028219223e-09) + _2745)) * _2745;
                                float _3645 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
                                float _2756 = (_2725 * _2702) * (((isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0))) * 3.1415927410125732421875) / ((_2715 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_75_pred = _2726 * _2569.z;
                                frontier_phi_75_pred_1 = _2726 * _2569.y;
                                frontier_phi_75_pred_2 = _2726 * _2569.x;
                                frontier_phi_75_pred_3 = _2756 * _2581.z;
                                frontier_phi_75_pred_4 = _2756 * _2581.y;
                                frontier_phi_75_pred_5 = _2756 * _2581.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _2765 = frontier_phi_75_pred;
                            _2764 = frontier_phi_75_pred_1;
                            _2763 = frontier_phi_75_pred_2;
                            _2762 = frontier_phi_75_pred_3;
                            _2761 = frontier_phi_75_pred_4;
                            _2760 = frontier_phi_75_pred_5;
                            _2511 = _2763 + _2524;
                            _2512 = _2764 + _2525;
                            _2513 = _2765 + _2526;
                            _2508 = _2760 + _2521;
                            _2509 = _2761 + _2522;
                            _2510 = _2762 + _2523;
                            if (_2528 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2521 = _2508;
                                _2522 = _2509;
                                _2523 = _2510;
                                _2524 = _2511;
                                _2525 = _2512;
                                _2526 = _2513;
                                _2527 = _2528;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2513;
                        frontier_phi_69_pred_1 = _2512;
                        frontier_phi_69_pred_2 = _2511;
                        frontier_phi_69_pred_3 = _2510;
                        frontier_phi_69_pred_4 = _2509;
                        frontier_phi_69_pred_5 = _2508;
                    }
                    _2233 = frontier_phi_69_pred;
                    _2231 = frontier_phi_69_pred_1;
                    _2229 = frontier_phi_69_pred_2;
                    _2227 = frontier_phi_69_pred_3;
                    _2225 = frontier_phi_69_pred_4;
                    _2223 = frontier_phi_69_pred_5;
                    uint _2365 = _2364 + 1u;
                    if (_2365 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2358 = _2223;
                        _2359 = _2225;
                        _2360 = _2227;
                        _2361 = _2229;
                        _2362 = _2231;
                        _2363 = _2233;
                        _2364 = _2365;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2233;
                frontier_phi_57_58_ladder_1 = _2231;
                frontier_phi_57_58_ladder_2 = _2229;
                frontier_phi_57_58_ladder_3 = _2227;
                frontier_phi_57_58_ladder_4 = _2225;
                frontier_phi_57_58_ladder_5 = _2223;
            }
            else
            {
                frontier_phi_57_58_ladder = _2110;
                frontier_phi_57_58_ladder_1 = _2108;
                frontier_phi_57_58_ladder_2 = _2106;
                frontier_phi_57_58_ladder_3 = _2104;
                frontier_phi_57_58_ladder_4 = _2102;
                frontier_phi_57_58_ladder_5 = _2100;
            }
            _2222 = frontier_phi_57_58_ladder_5;
            _2224 = frontier_phi_57_58_ladder_4;
            _2226 = frontier_phi_57_58_ladder_3;
            _2228 = frontier_phi_57_58_ladder_2;
            _2230 = frontier_phi_57_58_ladder_1;
            _2232 = frontier_phi_57_58_ladder;
        }
        float _2237 = isnan(1.0) ? _380 : (isnan(_380) ? 1.0 : min(_380, 1.0));
        _1983 = (_2237 * _2228) + _1544;
        _1985 = (_2237 * _2230) + _1546;
        _1987 = (_2237 * _2232) + _1548;
        _1989 = ((_2222 * 0.039999999105930328369140625) * _2237) + _1796;
        _1991 = ((_2224 * 0.039999999105930328369140625) * _2237) + _1798;
        _1993 = ((_2226 * 0.039999999105930328369140625) * _2237) + _1800;
    }
    else
    {
        _1983 = _1544;
        _1985 = _1546;
        _1987 = _1548;
        _1989 = _1796;
        _1991 = _1798;
        _1993 = _1800;
    }
    uint _1999 = _356 + uint(cbMatDynParam._m0[0u].w);
    float _2005 = (_212.x * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_1999].x;
    float _2006 = (_212.y * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_1999].y;
    float _2007 = (_212.z * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_1999].z;
    float _3661 = isnan(0.0) ? _366 : (isnan(_366) ? 0.0 : max(_366, 0.0));
    float _3672 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _3683 = isnan(0.0) ? _368 : (isnan(_368) ? 0.0 : max(_368, 0.0));
    float _2024 = (((isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0))) * (_1983 + ((isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0))) * _380))) + ((_1989 + ((isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0))) * _1159)) * cbPerFrame._m0[3u].x)) + _2005;
    float _2026 = (_2006 + ((_1991 + ((isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0))) * _1159)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0))) * (_1985 + ((isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0))) * _380)));
    float _2028 = (_2007 + ((_1993 + ((isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0))) * _1159)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0))) * (_1987 + ((isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0))) * _380)));
    float _3709 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2041 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
    uint _2042 = _354 + 6u;
    float _2050 = _313 / cbSceneParam._m0[86u].x;
    float _2051 = _314 / cbSceneParam._m0[86u].y;
    vec4 _2065 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2050, _2051, (log2((isnan(cbSceneParam._m0[77u].w) ? _246 : (isnan(_246) ? cbSceneParam._m0[77u].w : min(_246, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2067 = _2065.x;
    float _2068 = _2065.y;
    float _2069 = _2065.z;
    float _2070 = _2065.w;
    float _2162;
    float _2164;
    float _2166;
    float _2168;
    if (_246 > cbSceneParam._m0[78u].w)
    {
        float _2125 = isnan(_246) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _246 : min(cbSceneParam._m0[80u].w, _246));
        float _2126 = _2125 / _246;
        float _2137 = _2126 * _298;
        float _2138 = _299 * _2126;
        float _2139 = (-0.0) - _2138;
        float _2140 = _2126 * _300;
        float _2142 = (cbSceneParam._m0[77u].w * _2139) / _2125;
        float _2143 = _2142 + cbSceneParam._m0[79u].w;
        float _2144 = cbSceneParam._m0[79u].w - _2138;
        float _2150 = sqrt(((_2137 * _2137) + (_2138 * _2138)) + (_2140 * _2140));
        float _2153 = (1.0 - (cbSceneParam._m0[77u].w / _2125)) * _2150;
        float _2158 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2160 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2320;
        if (abs((_2139 - _2142) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2320 = ((((_2143 > 0.0) ? exp2(_2158 * _2143) : (2.0 - exp2(_2160 * _2143))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2153;
        }
        else
        {
            float _2280 = 1.0 / cbSceneParam._m0[80u].x;
            float _2281 = isnan(_2144) ? _2143 : (isnan(_2143) ? _2144 : max(_2143, _2144));
            float _2282 = isnan(_2144) ? _2143 : (isnan(_2143) ? _2144 : min(_2143, _2144));
            float _2291 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : min(_2281, 0.0));
            float _2292 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : min(_2282, 0.0));
            _2320 = ((abs(_2150 / _2139) * cbSceneParam._m0[80u].y) * ((((_2291 - _2292) * 2.0) - ((exp2(_2158 * (isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0)))) - exp2(_2158 * (isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0))))) * _2280)) - ((exp2(_2160 * _2291) - exp2(_2160 * _2292)) * _2280))) + (_2153 * cbSceneParam._m0[80u].z);
        }
        vec4 _2322 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2050, _2051, 1.0), 0.0);
        float _2331 = exp2((_2320 * (-1.44269502162933349609375)) * (1.0 - _2322.w));
        float _2332 = log2(_2331);
        float _2348 = log2(_2070);
        _2162 = (exp2(_2348 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2332 * cbSceneParam._m0[78u].x)) * _2322.x) / cbSceneParam._m0[78u].x)) + _2067;
        _2164 = (exp2(_2348 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2332 * cbSceneParam._m0[78u].y)) * _2322.y) / cbSceneParam._m0[78u].y)) + _2068;
        _2166 = (exp2(_2348 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2332 * cbSceneParam._m0[78u].z)) * _2322.z) / cbSceneParam._m0[78u].z)) + _2069;
        _2168 = _2331 * _2070;
    }
    else
    {
        _2162 = _2067;
        _2164 = _2068;
        _2166 = _2069;
        _2168 = _2070;
    }
    float _2180 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2181 = _2180 == 3.0;
    float _2183 = log2(_2168);
    float _2187 = exp2(_2183 * cbSceneParam._m0[78u].x);
    float _2188 = exp2(_2183 * cbSceneParam._m0[78u].y);
    float _2189 = exp2(_2183 * cbSceneParam._m0[78u].z);
    float _2190 = _2187 * (isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0)));
    float _2191 = _2188 * (isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0)));
    float _2192 = _2189 * (isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0)));
    float _2201 = (_2180 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2201 * (_2181 ? _2190 : (_2190 + (cbSceneParam._m0[72u].w * _2162)));
    SV_Target.y = _2201 * (_2181 ? _2191 : (_2191 + (cbSceneParam._m0[72u].w * _2164)));
    SV_Target.z = _2201 * (_2181 ? _2192 : (_2192 + (cbSceneParam._m0[72u].w * _2166)));
    SV_Target.w = cbInstanceData._m0[_2042].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2005) * _2041) * _2187) * _2201;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2006) * _2041) * _2188) * _2201;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2007) * _2041) * _2189) * _2201;
    SV_Target_1.w = cbInstanceData._m0[_2042].w;
}


