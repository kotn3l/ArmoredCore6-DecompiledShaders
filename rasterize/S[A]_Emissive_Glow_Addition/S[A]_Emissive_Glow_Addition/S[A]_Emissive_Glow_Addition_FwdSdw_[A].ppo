#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_A_Emissive_Glow_Addition_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_A_Emissive_Glow_Addition_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _771;
float _3258;
float _3259;
float _3260;
float _3261;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _173 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _174 = _173 * NORMAL.x;
    float _175 = _173 * NORMAL.y;
    float _176 = _173 * NORMAL.z;
    float _181;
    float _182;
    float _183;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _181 = (-0.0) - _174;
        _182 = (-0.0) - _175;
        _183 = (-0.0) - _176;
    }
    else
    {
        _181 = _174;
        _182 = _175;
        _183 = _176;
    }
    vec4 _197 = texture(sampler2D(S_A_Emissive_Glow_Addition_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _200 = _197.x;
    float _201 = _197.y;
    float _202 = _197.z;
    vec4 _218 = texture(sampler2D(S_A_Emissive_Glow_Addition_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _229 = inversesqrt(dot(vec3(_181, _182, _183), vec3(_181, _182, _183)));
    float _230 = _229 * _181;
    float _231 = _229 * _182;
    float _232 = _229 * _183;
    float _3270 = isnan(0.0) ? _200 : (isnan(_200) ? 0.0 : max(_200, 0.0));
    float _3281 = isnan(0.0) ? _201 : (isnan(_201) ? 0.0 : max(_201, 0.0));
    float _3292 = isnan(0.0) ? _202 : (isnan(_202) ? 0.0 : max(_202, 0.0));
    float _252 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _294 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _304 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _294);
    float _305 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _294);
    float _306 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _294);
    float _310 = inversesqrt(dot(vec3(_304, _305, _306), vec3(_304, _305, _306)));
    float _311 = _304 * _310;
    float _312 = _305 * _310;
    float _313 = _306 * _310;
    vec4 _318 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _320 = _318.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _450 = sqrt(((_304 * _304) + (_305 * _305)) + (_306 * _306));
        float _456 = (cbMatDynParam._m0[5u].x * _450) + cbMatDynParam._m0[5u].y;
        float _3303 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
        float _457 = isnan(1.0) ? _3303 : (isnan(_3303) ? 1.0 : min(_3303, 1.0));
        float _461 = (cbMatDynParam._m0[5u].z * _450) + cbMatDynParam._m0[5u].w;
        float _3314 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3314 : (isnan(_3314) ? 1.0 : min(_3314, 1.0))) - _457)) + _457) < ((_320 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _332 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _333 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _353 = fma(_232, cbSceneParam._m0[5u].z, fma(_231, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _230));
    float _356 = fma(_232, cbSceneParam._m0[6u].z, fma(_231, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _230));
    float _359 = fma(_232, cbSceneParam._m0[7u].z, fma(_231, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _230));
    uint _372 = uint(roundEven(NORMAL.w)) * 13u;
    uint _374 = _372 + 9u;
    uint _375 = _374 + uint(cbMatDynParam._m0[0u].w);
    float _381 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3270 : (isnan(_3270) ? 1.0 : min(_3270, 1.0)))) * cbInstanceData._m0[_375].x;
    float _382 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3281 : (isnan(_3281) ? 1.0 : min(_3281, 1.0)))) * cbInstanceData._m0[_375].y;
    float _383 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3292 : (isnan(_3292) ? 1.0 : min(_3292, 1.0)))) * cbInstanceData._m0[_375].z;
    float _3325 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _384 = isnan(1.0) ? _3325 : (isnan(_3325) ? 1.0 : min(_3325, 1.0));
    float _3336 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _385 = isnan(1.0) ? _3336 : (isnan(_3336) ? 1.0 : min(_3336, 1.0));
    float _3347 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _386 = isnan(1.0) ? _3347 : (isnan(_3347) ? 1.0 : min(_3347, 1.0));
    vec4 _395 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _332, cbSceneParam._m0[86u].y * _333));
    float _398 = _395.x * TEXCOORD.z;
    float _399 = dot(vec3(_230, _231, _232), vec3(_311, _312, _313));
    float _402 = _399 * 2.0;
    float _407 = (_402 * _230) - _311;
    float _408 = (_402 * _231) - _312;
    float _409 = (_402 * _232) - _313;
    float _431 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _435 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _439 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _770;
    float _772;
    float _773;
    float _774;
    float _775;
    float _776;
    float _777;
    float _778;
    float _779;
    float _780;
    float _781;
    float _782;
    float _783;
    float _784;
    float _785;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _495 = fma(_439, cbModelParam._m0[26u].z, fma(_435, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _431));
        float _499 = fma(_439, cbModelParam._m0[27u].z, fma(_435, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _431));
        float _503 = fma(_439, cbModelParam._m0[28u].z, fma(_435, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _431));
        float _528 = _431 + _230;
        float _529 = _435 + _231;
        float _530 = _439 + _232;
        float _540 = fma(_530, cbModelParam._m0[26u].z, fma(_529, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _528)) - _495;
        float _541 = fma(_530, cbModelParam._m0[27u].z, fma(_529, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _528)) - _499;
        float _542 = fma(_530, cbModelParam._m0[28u].z, fma(_529, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _528)) - _503;
        float _546 = inversesqrt(dot(vec3(_540, _541, _542), vec3(_540, _541, _542)));
        float _559 = ((_546 * _540) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_495 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _560 = ((_546 * _541) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_499 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _561 = ((_546 * _542) / cbModelParam._m0[34u].z) + ((((((_503 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _564 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_559, _560, _561), 0.0);
        vec4 _571 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_559, _560, _561), 0.0);
        vec4 _578 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_559, _560, _561), 0.0);
        vec4 _585 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_559, _560, _561), 0.0);
        float _598 = exp2((_564.w + (-0.5)) * 20.0) * 2.0;
        float _599 = _598 * (_564.x + (-0.5));
        float _600 = _598 * (_564.y + (-0.5));
        float _601 = _598 * (_564.z + (-0.5));
        float _608 = exp2((_571.w + (-0.5)) * 20.0) * 2.0;
        float _609 = _608 * (_571.x + (-0.5));
        float _610 = _608 * (_571.y + (-0.5));
        float _611 = _608 * (_571.z + (-0.5));
        float _618 = exp2((_578.w + (-0.5)) * 20.0) * 2.0;
        float _619 = _618 * (_578.x + (-0.5));
        float _620 = _618 * (_578.y + (-0.5));
        float _621 = _618 * (_578.z + (-0.5));
        float _628 = exp2((_585.w + (-0.5)) * 20.0) * 2.0;
        float _629 = _628 * (_585.x + (-0.5));
        float _630 = _628 * (_585.y + (-0.5));
        float _631 = _628 * (_585.z + (-0.5));
        float _632 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
        float _633 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
        float _634 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
        float _635 = _599 * 0.5;
        float _636 = _609 * 0.5;
        float _637 = _619 * 0.5;
        float _638 = dot(vec3(_635, _636, _637), vec3(_635, _636, _637));
        float _643 = (_638 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_638);
        float _652 = (dot(vec3(_230, _231, _232), vec3(_643 * _635, _643 * _636, _643 * _637)) + 1.0) * 0.5;
        float _3373 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
        float _662 = sqrt(((_636 * _636) + (_635 * _635)) + (_637 * _637)) / (_632 + 9.9999997473787516355514526367188e-06);
        float _3384 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
        float _663 = isnan(1.0) ? _3384 : (isnan(_3384) ? 1.0 : min(_3384, 1.0));
        float _664 = _663 * 2.0;
        float _668 = (1.0 - _663) / (_663 + 1.0);
        float _3395 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
        float _669 = isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0));
        float _678 = ((((1.0 - _669) * (_664 + 2.0)) * exp2(log2(isnan(1.0) ? _3373 : (isnan(_3373) ? 1.0 : min(_3373, 1.0))) * (_664 + 1.0))) + _669) * _632;
        float _679 = _600 * 0.5;
        float _680 = _610 * 0.5;
        float _681 = _620 * 0.5;
        float _682 = dot(vec3(_679, _680, _681), vec3(_679, _680, _681));
        float _687 = (_682 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_682);
        float _695 = (dot(vec3(_230, _231, _232), vec3(_687 * _679, _687 * _680, _687 * _681)) + 1.0) * 0.5;
        float _3406 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
        float _704 = sqrt(((_680 * _680) + (_679 * _679)) + (_681 * _681)) / (_633 + 9.9999997473787516355514526367188e-06);
        float _3417 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
        float _705 = isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0));
        float _706 = _705 * 2.0;
        float _710 = (1.0 - _705) / (_705 + 1.0);
        float _3428 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
        float _711 = isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0));
        float _720 = ((((1.0 - _711) * (_706 + 2.0)) * exp2(log2(isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0))) * (_706 + 1.0))) + _711) * _633;
        float _721 = _601 * 0.5;
        float _722 = _611 * 0.5;
        float _723 = _621 * 0.5;
        float _724 = dot(vec3(_721, _722, _723), vec3(_721, _722, _723));
        float _729 = (_724 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_724);
        float _737 = (dot(vec3(_230, _231, _232), vec3(_729 * _721, _729 * _722, _729 * _723)) + 1.0) * 0.5;
        float _3439 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
        float _746 = sqrt(((_722 * _722) + (_721 * _721)) + (_723 * _723)) / (_634 + 9.9999997473787516355514526367188e-06);
        float _3450 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
        float _747 = isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0));
        float _748 = _747 * 2.0;
        float _752 = (1.0 - _747) / (_747 + 1.0);
        float _3461 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
        float _753 = isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0));
        float _762 = ((((1.0 - _753) * (_748 + 2.0)) * exp2(log2(isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0))) * (_748 + 1.0))) + _753) * _634;
        _770 = _601;
        _772 = _600;
        _773 = _599;
        _774 = _611;
        _775 = _610;
        _776 = _609;
        _777 = _621;
        _778 = _620;
        _779 = _619;
        _780 = _634;
        _781 = _633;
        _782 = _632;
        _783 = cbModelParam._m0[36u].z * (isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0)));
        _784 = cbModelParam._m0[36u].z * (isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0)));
        _785 = cbModelParam._m0[36u].z * (isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0)));
    }
    else
    {
        _770 = _771;
        _772 = _771;
        _773 = _771;
        _774 = _771;
        _775 = _771;
        _776 = _771;
        _777 = _771;
        _778 = _771;
        _779 = _771;
        _780 = _771;
        _781 = _771;
        _782 = _771;
        _783 = 0.0;
        _784 = 0.0;
        _785 = 0.0;
    }
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _814 = fma(_439, cbModelParam._m0[30u].z, fma(_435, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _431));
        float _818 = fma(_439, cbModelParam._m0[31u].z, fma(_435, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _431));
        float _822 = fma(_439, cbModelParam._m0[32u].z, fma(_435, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _431));
        float _845 = _431 + _230;
        float _846 = _435 + _231;
        float _847 = _439 + _232;
        float _857 = fma(_847, cbModelParam._m0[30u].z, fma(_846, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _845)) - _814;
        float _858 = fma(_847, cbModelParam._m0[31u].z, fma(_846, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _845)) - _818;
        float _859 = fma(_847, cbModelParam._m0[32u].z, fma(_846, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _845)) - _822;
        float _863 = inversesqrt(dot(vec3(_857, _858, _859), vec3(_857, _858, _859)));
        float _876 = ((_863 * _857) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_814 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _877 = ((_863 * _858) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_818 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _878 = ((_863 * _859) / cbModelParam._m0[35u].z) + ((((((_822 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _880 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_876, _877, _878), 0.0);
        vec4 _887 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_876, _877, _878), 0.0);
        vec4 _894 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_876, _877, _878), 0.0);
        vec4 _901 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_876, _877, _878), 0.0);
        float _913 = exp2((_880.w + (-0.5)) * 20.0) * 2.0;
        float _914 = _913 * (_880.x + (-0.5));
        float _915 = _913 * (_880.y + (-0.5));
        float _916 = _913 * (_880.z + (-0.5));
        float _923 = exp2((_887.w + (-0.5)) * 20.0) * 2.0;
        float _924 = _923 * (_887.x + (-0.5));
        float _925 = _923 * (_887.y + (-0.5));
        float _926 = _923 * (_887.z + (-0.5));
        float _933 = exp2((_894.w + (-0.5)) * 20.0) * 2.0;
        float _934 = _933 * (_894.x + (-0.5));
        float _935 = _933 * (_894.y + (-0.5));
        float _936 = _933 * (_894.z + (-0.5));
        float _943 = exp2((_901.w + (-0.5)) * 20.0) * 2.0;
        float _944 = _943 * (_901.x + (-0.5));
        float _945 = _943 * (_901.y + (-0.5));
        float _946 = _943 * (_901.z + (-0.5));
        float _947 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _948 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _949 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _950 = _914 * 0.5;
        float _951 = _924 * 0.5;
        float _952 = _934 * 0.5;
        float _953 = dot(vec3(_950, _951, _952), vec3(_950, _951, _952));
        float _958 = (_953 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_953);
        float _966 = (dot(vec3(_230, _231, _232), vec3(_958 * _950, _958 * _951, _958 * _952)) + 1.0) * 0.5;
        float _3502 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _975 = sqrt(((_951 * _951) + (_950 * _950)) + (_952 * _952)) / (_947 + 9.9999997473787516355514526367188e-06);
        float _3513 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _976 = isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0));
        float _977 = _976 * 2.0;
        float _981 = (1.0 - _976) / (_976 + 1.0);
        float _3524 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _982 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
        float _991 = ((((1.0 - _982) * (_977 + 2.0)) * exp2(log2(isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0))) * (_977 + 1.0))) + _982) * _947;
        float _992 = _915 * 0.5;
        float _993 = _925 * 0.5;
        float _994 = _935 * 0.5;
        float _995 = dot(vec3(_992, _993, _994), vec3(_992, _993, _994));
        float _1000 = (_995 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_995);
        float _1008 = (dot(vec3(_230, _231, _232), vec3(_1000 * _992, _1000 * _993, _1000 * _994)) + 1.0) * 0.5;
        float _3535 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1017 = sqrt(((_993 * _993) + (_992 * _992)) + (_994 * _994)) / (_948 + 9.9999997473787516355514526367188e-06);
        float _3546 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1018 = isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0));
        float _1019 = _1018 * 2.0;
        float _1023 = (1.0 - _1018) / (_1018 + 1.0);
        float _3557 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1024 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
        float _1033 = ((((1.0 - _1024) * (_1019 + 2.0)) * exp2(log2(isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0))) * (_1019 + 1.0))) + _1024) * _948;
        float _1034 = _916 * 0.5;
        float _1035 = _926 * 0.5;
        float _1036 = _936 * 0.5;
        float _1037 = dot(vec3(_1034, _1035, _1036), vec3(_1034, _1035, _1036));
        float _1042 = (_1037 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1037);
        float _1050 = (dot(vec3(_230, _231, _232), vec3(_1042 * _1034, _1042 * _1035, _1042 * _1036)) + 1.0) * 0.5;
        float _3568 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1059 = sqrt(((_1035 * _1035) + (_1034 * _1034)) + (_1036 * _1036)) / (_949 + 9.9999997473787516355514526367188e-06);
        float _3579 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1060 = isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0));
        float _1061 = _1060 * 2.0;
        float _1065 = (1.0 - _1060) / (_1060 + 1.0);
        float _3590 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
        float _1075 = ((((1.0 - _1066) * (_1061 + 2.0)) * exp2(log2(isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0))) * (_1061 + 1.0))) + _1066) * _949;
        _1083 = _916;
        _1084 = _915;
        _1085 = _914;
        _1086 = _926;
        _1087 = _925;
        _1088 = _924;
        _1089 = _936;
        _1090 = _935;
        _1091 = _934;
        _1092 = _949;
        _1093 = _948;
        _1094 = _947;
        _1095 = cbModelParam._m0[36u].w * (isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0)));
        _1096 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0)));
        _1097 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0)));
    }
    else
    {
        _1083 = _771;
        _1084 = _771;
        _1085 = _771;
        _1086 = _771;
        _1087 = _771;
        _1088 = _771;
        _1089 = _771;
        _1090 = _771;
        _1091 = _771;
        _1092 = _771;
        _1093 = _771;
        _1094 = _771;
        _1095 = 0.0;
        _1096 = 0.0;
        _1097 = 0.0;
    }
    float _1107 = (cbModelParam._m0[1u].x * (_1095 - _783)) + _783;
    float _1108 = (cbModelParam._m0[1u].x * (_1096 - _784)) + _784;
    float _1109 = (cbModelParam._m0[1u].x * (_1097 - _785)) + _785;
    float _1130 = fma(_1109, cbSceneParam._m0[89u].z, fma(_1108, cbSceneParam._m0[89u].y, _1107 * cbSceneParam._m0[89u].x));
    float _1133 = fma(_1109, cbSceneParam._m0[90u].z, fma(_1108, cbSceneParam._m0[90u].y, _1107 * cbSceneParam._m0[90u].x));
    float _1136 = fma(_1109, cbSceneParam._m0[91u].z, fma(_1108, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1107));
    float _1151 = _407 * 0.5;
    float _1152 = _408 * 0.5;
    float _1153 = _409 * 0.5;
    float _1154 = dot(vec4(_1151, _1152, _1153, 1.0), vec4(_1085, _1088, _1091, _1094));
    float _1157 = dot(vec4(_1151, _1152, _1153, 1.0), vec4(_1084, _1087, _1090, _1093));
    float _1160 = dot(vec4(_1151, _1152, _1153, 1.0), vec4(_1083, _1086, _1089, _1092));
    float _1194;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1167 = dot(vec4(_1151, _1152, _1153, 1.0), vec4(_770, _774, _777, _780));
        float _1171 = dot(vec4(_1151, _1152, _1153, 1.0), vec4(_772, _775, _778, _781));
        float _1175 = dot(vec4(_1151, _1152, _1153, 1.0), vec4(_773, _776, _779, _782));
        float _1182 = dot(vec4(cbModelParam._m0[39u]), vec4(_1151, _1152, _1153, 1.0));
        _1194 = dot(vec3(isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0)), isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0)), isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1182) ? 0.0 : (isnan(0.0) ? _1182 : max(0.0, _1182))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1194 = 1.0;
    }
    float _1205;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1196 = dot(vec4(cbModelParam._m0[40u]), vec4(_1151, _1152, _1153, 1.0));
        _1205 = dot(vec3(isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0)), isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0)), isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1196) ? 0.0 : (isnan(0.0) ? _1196 : max(0.0, _1196))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1205 = 1.0;
    }
    float _1209 = (_1205 * cbModelParam._m0[1u].x) + (_1194 * (1.0 - cbModelParam._m0[1u].x));
    float _1218 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1300;
    float _1302;
    float _1304;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1267 = fma(_439, cbModelParam._m0[13u].z, fma(_435, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _431)) + cbModelParam._m0[13u].w;
        float _1271 = fma(_439, cbModelParam._m0[14u].z, fma(_435, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _431)) + cbModelParam._m0[14u].w;
        float _1275 = fma(_439, cbModelParam._m0[15u].z, fma(_435, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _431)) + cbModelParam._m0[15u].w;
        float _1278 = fma(_409, cbModelParam._m0[13u].z, fma(_408, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _407));
        float _1281 = fma(_409, cbModelParam._m0[14u].z, fma(_408, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _407));
        float _1284 = fma(_409, cbModelParam._m0[15u].z, fma(_408, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _407));
        float _1310;
        if (_1278 > 0.0)
        {
            _1310 = abs((1.0 - _1267) / _1278);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1278 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1267 + 1.0) / _1278);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1310 = frontier_phi_19_17_ladder;
        }
        float _1485;
        if (_1281 > 0.0)
        {
            _1485 = abs((1.0 - _1271) / _1281);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1281 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1271 + 1.0) / _1281);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1485 = frontier_phi_28_24_ladder;
        }
        float _1782;
        if (_1284 > 0.0)
        {
            _1782 = abs((1.0 - _1275) / _1284);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1284 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1275 + 1.0) / _1284);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1782 = frontier_phi_40_35_ladder;
        }
        float _1784 = isnan(_1485) ? _1310 : (isnan(_1310) ? _1485 : min(_1310, _1485));
        float _1785 = isnan(_1782) ? _1784 : (isnan(_1784) ? _1782 : min(_1784, _1782));
        float _1789 = (_1785 * _1278) + _1267;
        float _1790 = (_1785 * _1281) + _1271;
        float _1791 = (_1785 * _1284) + _1275;
        float _1792 = _1785 * 9.9999997473787516355514526367188e-05;
        float _1794 = (-1.0) - _1792;
        float _1796 = _1792 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1791 > _1796) || ((_1791 < _1794) || ((_1790 > _1796) || ((_1790 < _1794) || ((_1789 < _1794) || (_1789 > _1796))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1936 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1791, cbModelParam._m0[9u].z, fma(_1790, cbModelParam._m0[9u].y, _1789 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1791, cbModelParam._m0[10u].z, fma(_1790, cbModelParam._m0[10u].y, _1789 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1791, cbModelParam._m0[11u].z, fma(_1790, cbModelParam._m0[11u].y, _1789 * cbModelParam._m0[11u].x))), _1218);
            frontier_phi_18_40_ladder = _1936.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _1936.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _1936.x * cbModelParam._m0[1u].y;
        }
        _1300 = frontier_phi_18_40_ladder_2;
        _1302 = frontier_phi_18_40_ladder_1;
        _1304 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1288 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_407, _408, _409), _1218);
        _1300 = _1288.x * cbModelParam._m0[1u].y;
        _1302 = _1288.y * cbModelParam._m0[1u].y;
        _1304 = _1288.z * cbModelParam._m0[1u].y;
    }
    float _1307 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1400;
    float _1402;
    float _1404;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1364 = fma(_439, cbModelParam._m0[21u].z, fma(_435, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _431)) + cbModelParam._m0[21u].w;
        float _1368 = fma(_439, cbModelParam._m0[22u].z, fma(_435, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _431)) + cbModelParam._m0[22u].w;
        float _1372 = fma(_439, cbModelParam._m0[23u].z, fma(_435, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _431)) + cbModelParam._m0[23u].w;
        float _1375 = fma(_409, cbModelParam._m0[21u].z, fma(_408, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _407));
        float _1378 = fma(_409, cbModelParam._m0[22u].z, fma(_408, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _407));
        float _1381 = fma(_409, cbModelParam._m0[23u].z, fma(_408, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _407));
        float _1490;
        if (_1375 > 0.0)
        {
            _1490 = abs((1.0 - _1364) / _1375);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1375 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1364 + 1.0) / _1375);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1490 = frontier_phi_30_26_ladder;
        }
        float _1809;
        if (_1378 > 0.0)
        {
            _1809 = abs((1.0 - _1368) / _1378);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1378 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1368 + 1.0) / _1378);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1809 = frontier_phi_42_37_ladder;
        }
        float _2082;
        if (_1381 > 0.0)
        {
            _2082 = abs((1.0 - _1372) / _1381);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1381 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1372 + 1.0) / _1381);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2082 = frontier_phi_52_49_ladder;
        }
        float _2084 = isnan(_1809) ? _1490 : (isnan(_1490) ? _1809 : min(_1490, _1809));
        float _2085 = isnan(_2082) ? _2084 : (isnan(_2084) ? _2082 : min(_2084, _2082));
        float _2089 = (_2085 * _1375) + _1364;
        float _2090 = (_2085 * _1378) + _1368;
        float _2091 = (_2085 * _1381) + _1372;
        float _2092 = _2085 * 9.9999997473787516355514526367188e-05;
        float _2093 = (-1.0) - _2092;
        float _2095 = _2092 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2091 > _2095) || ((_2091 < _2093) || ((_2090 > _2095) || ((_2090 < _2093) || ((_2089 < _2093) || (_2089 > _2095))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2182 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2091, cbModelParam._m0[17u].z, fma(_2090, cbModelParam._m0[17u].y, _2089 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2091, cbModelParam._m0[18u].z, fma(_2090, cbModelParam._m0[18u].y, _2089 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2091, cbModelParam._m0[19u].z, fma(_2090, cbModelParam._m0[19u].y, _2089 * cbModelParam._m0[19u].x))), _1307);
            frontier_phi_27_52_ladder = _2182.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2182.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2182.x * cbModelParam._m0[1u].z;
        }
        _1400 = frontier_phi_27_52_ladder_2;
        _1402 = frontier_phi_27_52_ladder_1;
        _1404 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1384 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_407, _408, _409), _1307);
        _1400 = _1384.x * cbModelParam._m0[1u].z;
        _1402 = _1384.y * cbModelParam._m0[1u].z;
        _1404 = _1384.z * cbModelParam._m0[1u].z;
    }
    float _1416 = _398 * 0.01200000010430812835693359375;
    float _1418 = _1416 * ((cbModelParam._m0[1u].w * (_1400 - _1300)) + _1300);
    float _1419 = _1416 * ((cbModelParam._m0[1u].w * (_1402 - _1302)) + _1302);
    float _1420 = _1416 * ((cbModelParam._m0[1u].w * (_1404 - _1304)) + _1304);
    float _1423 = fma(_1420, cbSceneParam._m0[89u].z, fma(_1419, cbSceneParam._m0[89u].y, _1418 * cbSceneParam._m0[89u].x));
    float _1426 = fma(_1420, cbSceneParam._m0[90u].z, fma(_1419, cbSceneParam._m0[90u].y, _1418 * cbSceneParam._m0[90u].x));
    float _1429 = fma(_1420, cbSceneParam._m0[91u].z, fma(_1419, cbSceneParam._m0[91u].y, _1418 * cbSceneParam._m0[91u].x));
    float _1464 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1468 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1472 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1476 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1477 = _1464 / _1476;
    float _1478 = _1468 / _1476;
    float _1479 = _1472 / _1476;
    float _1626;
    float _1627;
    float _1628;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1506 = ((uint(_1479 > cbSceneParam._m0[59u].y) + uint(_1479 > cbSceneParam._m0[59u].x)) + uint(_1479 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1507 = _1506 + 43u;
        uint _1515 = _1506 + 44u;
        uint _1523 = _1506 + 45u;
        uint _1531 = _1506 + 46u;
        float _1542 = fma(_1476, cbSceneParam._m0[_1507].w, fma(_1472, cbSceneParam._m0[_1507].z, fma(_1468, cbSceneParam._m0[_1507].y, _1464 * cbSceneParam._m0[_1507].x)));
        float _1546 = fma(_1476, cbSceneParam._m0[_1515].w, fma(_1472, cbSceneParam._m0[_1515].z, fma(_1468, cbSceneParam._m0[_1515].y, _1464 * cbSceneParam._m0[_1515].x)));
        float _1554 = fma(_1476, cbSceneParam._m0[_1531].w, fma(_1472, cbSceneParam._m0[_1531].z, fma(_1468, cbSceneParam._m0[_1531].y, _1464 * cbSceneParam._m0[_1531].x)));
        float _1559 = cbSceneParam._m0[33u].z * _1554;
        float _1561 = cbSceneParam._m0[33u].w * _1554;
        float _1564 = fma(_1476, cbSceneParam._m0[_1523].w, fma(_1472, cbSceneParam._m0[_1523].z, fma(_1468, cbSceneParam._m0[_1523].y, _1464 * cbSceneParam._m0[_1523].x))) / _1554;
        float _1612 = (cbSceneParam._m0[33u].x - sqrt(((_1478 * _1478) + (_1477 * _1477)) + (_1479 * _1479))) * cbSceneParam._m0[33u].y;
        float _3716 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1619 = (isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1559 + _1542) / _1554, (_1561 + _1546) / _1554), _1564), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1561 + _1542) / _1554, (_1546 - _1559) / _1554), _1564), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1542 - _1559) / _1554, (_1546 - _1561) / _1554), _1564), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1542 - _1561) / _1554, (_1559 + _1546) / _1554), _1564), 0.0)).x), vec4(0.25)));
        _1626 = 1.0 - (_1619 * cbSceneParam._m0[34u].x);
        _1627 = 1.0 - (_1619 * cbSceneParam._m0[34u].y);
        _1628 = 1.0 - (_1619 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1626 = 1.0;
        _1627 = 1.0;
        _1628 = 1.0;
    }
    float _1692;
    float _1694;
    float _1696;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1680 = fma(_1476, cbSceneParam._m0[63u].w, fma(_1472, cbSceneParam._m0[63u].z, fma(_1468, cbSceneParam._m0[63u].y, _1464 * cbSceneParam._m0[63u].x)));
        float _1681 = fma(_1476, cbSceneParam._m0[60u].w, fma(_1472, cbSceneParam._m0[60u].z, fma(_1468, cbSceneParam._m0[60u].y, _1464 * cbSceneParam._m0[60u].x))) / _1680;
        float _1682 = fma(_1476, cbSceneParam._m0[61u].w, fma(_1472, cbSceneParam._m0[61u].z, fma(_1468, cbSceneParam._m0[61u].y, _1464 * cbSceneParam._m0[61u].x))) / _1680;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1681 >= cbSceneParam._m0[64u].x) && (_1682 >= cbSceneParam._m0[64u].y)) && (_1681 <= cbSceneParam._m0[64u].z)) && (_1682 <= cbSceneParam._m0[64u].w))
        {
            float _1822 = fma(_1476, cbSceneParam._m0[62u].w, fma(_1472, cbSceneParam._m0[62u].z, fma(_1468, cbSceneParam._m0[62u].y, _1464 * cbSceneParam._m0[62u].x))) / _1680;
            float _1826 = isnan(cbSceneParam._m0[41u].w) ? _1822 : (isnan(_1822) ? cbSceneParam._m0[41u].w : max(_1822, cbSceneParam._m0[41u].w));
            float _1869 = (cbSceneParam._m0[33u].x - sqrt(((_1478 * _1478) + (_1477 * _1477)) + (_1479 * _1479))) * cbSceneParam._m0[33u].y;
            float _3732 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
            float _1876 = (isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1681, cbSceneParam._m0[33u].w + _1682), _1826), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1681, _1682 - cbSceneParam._m0[33u].z), _1826), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1681 - cbSceneParam._m0[33u].z, _1682 - cbSceneParam._m0[33u].w), _1826), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1681 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1682), _1826), 0.0)).x), vec4(0.25)));
            float _1880 = 1.0 - (_1876 * cbSceneParam._m0[34u].x);
            float _1881 = 1.0 - (_1876 * cbSceneParam._m0[34u].y);
            float _1882 = 1.0 - (_1876 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_1881) ? _1627 : (isnan(_1627) ? _1881 : min(_1627, _1881));
            frontier_phi_39_38_ladder_1 = isnan(_1880) ? _1626 : (isnan(_1626) ? _1880 : min(_1626, _1880));
            frontier_phi_39_38_ladder_2 = isnan(_1882) ? _1628 : (isnan(_1628) ? _1882 : min(_1628, _1882));
        }
        else
        {
            frontier_phi_39_38_ladder = _1627;
            frontier_phi_39_38_ladder_1 = _1626;
            frontier_phi_39_38_ladder_2 = _1628;
        }
        _1692 = frontier_phi_39_38_ladder_1;
        _1694 = frontier_phi_39_38_ladder;
        _1696 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1692 = _1626;
        _1694 = _1627;
        _1696 = _1628;
    }
    uvec4 _1701 = floatBitsToUint(cbInstanceData._m0[_372 + 5u]);
    uint _1703 = _1701.x * 14u;
    uint _1704 = _1703 + 13u;
    float _1711 = _398 + (-1.0);
    float _1717 = (cbLight._m0[_1704].x * _1711) + 1.0;
    float _1718 = (cbLight._m0[_1704].y * _1711) + 1.0;
    float _1719 = (cbLight._m0[_1704].z * _1711) + 1.0;
    float _1720 = (cbLight._m0[_1704].w * _1711) + 1.0;
    uint _1721 = _1703 + 5u;
    float _1727 = isnan(1.0) ? _1718 : (isnan(_1718) ? 1.0 : min(_1718, 1.0));
    uint _1731 = _1703 + 4u;
    float _1741 = isnan(1.0) ? _1717 : (isnan(_1717) ? 1.0 : min(_1717, 1.0));
    uint _1745 = _1703 | 1u;
    float _1756 = dot(vec3(cbLight._m0[_1703].xyz), vec3(_230, _231, _232));
    float _1759 = dot(vec3(cbLight._m0[_1745].xyz), vec3(_230, _231, _232));
    float _3768 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
    float _3779 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
    float _1764 = (isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0))) * 0.3183098733425140380859375;
    float _1766 = (isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) * 0.3183098733425140380859375;
    float _1773 = ((cbLight._m0[_1721].x * _1727) * _1766) + (((cbLight._m0[_1731].x * _1692) * _1741) * _1764);
    float _1774 = ((_1727 * cbLight._m0[_1721].y) * _1766) + (((cbLight._m0[_1731].y * _1694) * _1741) * _1764);
    float _1775 = ((_1727 * cbLight._m0[_1721].z) * _1766) + (((cbLight._m0[_1731].z * _1696) * _1741) * _1764);
    uvec4 _1779 = floatBitsToUint(cbLight._m0[_1703 + 12u]);
    bool _1781 = _1779.x == 0u;
    float _1883;
    float _1885;
    float _1887;
    if (_1781)
    {
        _1883 = _1773;
        _1885 = _1774;
        _1887 = _1775;
    }
    else
    {
        uint _1891 = _1703 + 6u;
        float _1907 = (dot(vec3(cbLight._m0[_1703 + 2u].xyz), vec3(_230, _231, _232)) * 0.5) + 0.5;
        float _1908 = _1907 * _1907;
        float _3790 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
        float _1909 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
        float _1910 = isnan(1.0) ? _1719 : (isnan(_1719) ? 1.0 : min(_1719, 1.0));
        _1883 = (((cbLight._m0[_1891].x * 0.3183098733425140380859375) * _1909) * _1910) + _1773;
        _1885 = (((cbLight._m0[_1891].y * 0.3183098733425140380859375) * _1909) * _1910) + _1774;
        _1887 = (((cbLight._m0[_1891].z * 0.3183098733425140380859375) * _1909) * _1910) + _1775;
    }
    bool _1890 = _1779.y == 0u;
    float _1945;
    float _1947;
    float _1949;
    if (_1890)
    {
        _1945 = _1883;
        _1947 = _1885;
        _1949 = _1887;
    }
    else
    {
        uint _2053 = _1703 + 7u;
        float _2069 = (dot(vec3(cbLight._m0[_1703 + 3u].xyz), vec3(_230, _231, _232)) * 0.5) + 0.5;
        float _2070 = _2069 * _2069;
        float _3806 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
        float _2071 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _2072 = isnan(1.0) ? _1720 : (isnan(_1720) ? 1.0 : min(_1720, 1.0));
        _1945 = (((cbLight._m0[_2053].x * 0.3183098733425140380859375) * _2071) * _2072) + _1883;
        _1947 = (((cbLight._m0[_2053].y * 0.3183098733425140380859375) * _2071) * _2072) + _1885;
        _1949 = (((cbLight._m0[_2053].z * 0.3183098733425140380859375) * _2071) * _2072) + _1887;
    }
    uint _1951 = _1703 + 8u;
    float _1957 = cbLight._m0[_1703].x + _311;
    float _1958 = cbLight._m0[_1703].y + _312;
    float _1959 = cbLight._m0[_1703].z + _313;
    float _1963 = inversesqrt(dot(vec3(_1957, _1958, _1959), vec3(_1957, _1958, _1959)));
    float _1967 = dot(vec3(_230, _231, _232), vec3(cbLight._m0[_1703].xyz));
    float _3822 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
    float _1970 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
    float _3833 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _1971 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
    float _1972 = dot(vec3(cbLight._m0[_1703].xyz), vec3(_1957 * _1963, _1958 * _1963, _1959 * _1963));
    float _3844 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
    float _1983 = (exp2(log2(1.0 - (isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1989 = (0.5 / ((_1970 + 9.9999999392252902907785028219223e-09) + _1971)) * _1970;
    float _3855 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
    float _1991 = (isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0))) * 0.31831014156341552734375;
    uint _2005 = _1703 + 9u;
    float _2011 = cbLight._m0[_1745].x + _311;
    float _2012 = cbLight._m0[_1745].y + _312;
    float _2013 = cbLight._m0[_1745].z + _313;
    float _2017 = inversesqrt(dot(vec3(_2011, _2012, _2013), vec3(_2011, _2012, _2013)));
    float _2021 = dot(vec3(_230, _231, _232), vec3(cbLight._m0[_1745].xyz));
    float _3866 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
    float _2024 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
    float _2025 = dot(vec3(cbLight._m0[_1745].xyz), vec3(_2011 * _2017, _2012 * _2017, _2013 * _2017));
    float _3877 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
    float _2034 = (exp2(log2(1.0 - (isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2038 = (0.5 / ((_2024 + 9.9999999392252902907785028219223e-09) + _1971)) * _2024;
    float _3888 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
    float _2040 = (isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))) * 0.31831014156341552734375;
    float _2050 = (((_2034 * cbLight._m0[_2005].x) * _2040) * _1727) + ((((cbLight._m0[_1951].x * _1692) * _1983) * _1991) * _1741);
    float _2051 = (((_2034 * cbLight._m0[_2005].y) * _2040) * _1727) + ((((cbLight._m0[_1951].y * _1694) * _1983) * _1991) * _1741);
    float _2052 = (((_2034 * cbLight._m0[_2005].z) * _2040) * _1727) + ((((cbLight._m0[_1951].z * _1696) * _1983) * _1991) * _1741);
    float _2108;
    float _2110;
    float _2112;
    if (_1781)
    {
        _2108 = _2050;
        _2110 = _2051;
        _2112 = _2052;
    }
    else
    {
        uint _2114 = _1703 + 10u;
        uint _2120 = _1703 + 2u;
        float _2126 = cbLight._m0[_2120].x + _311;
        float _2127 = cbLight._m0[_2120].y + _312;
        float _2128 = cbLight._m0[_2120].z + _313;
        float _2132 = inversesqrt(dot(vec3(_2126, _2127, _2128), vec3(_2126, _2127, _2128)));
        float _2136 = dot(vec3(_230, _231, _232), vec3(cbLight._m0[_2120].xyz));
        float _3899 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
        float _2139 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _2140 = dot(vec3(cbLight._m0[_2120].xyz), vec3(_2126 * _2132, _2127 * _2132, _2128 * _2132));
        float _3910 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
        float _2149 = (exp2(log2(1.0 - (isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2153 = (0.5 / ((_2139 + 9.9999999392252902907785028219223e-09) + _1971)) * _2139;
        float _3921 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
        float _2155 = (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0))) * 0.31831014156341552734375;
        float _2156 = isnan(1.0) ? _1719 : (isnan(_1719) ? 1.0 : min(_1719, 1.0));
        _2108 = (((_2149 * cbLight._m0[_2114].x) * _2155) * _2156) + _2050;
        _2110 = (((_2149 * cbLight._m0[_2114].y) * _2155) * _2156) + _2051;
        _2112 = (((_2149 * cbLight._m0[_2114].z) * _2155) * _2156) + _2052;
    }
    float _2187;
    float _2189;
    float _2191;
    if (_1890)
    {
        _2187 = _2108;
        _2189 = _2110;
        _2191 = _2112;
    }
    else
    {
        uint _2198 = _1703 + 11u;
        uint _2204 = _1703 + 3u;
        float _2210 = cbLight._m0[_2204].x + _311;
        float _2211 = cbLight._m0[_2204].y + _312;
        float _2212 = cbLight._m0[_2204].z + _313;
        float _2216 = inversesqrt(dot(vec3(_2210, _2211, _2212), vec3(_2210, _2211, _2212)));
        float _2220 = dot(vec3(_230, _231, _232), vec3(cbLight._m0[_2204].xyz));
        float _3937 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
        float _2223 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _2224 = dot(vec3(cbLight._m0[_2204].xyz), vec3(_2210 * _2216, _2211 * _2216, _2212 * _2216));
        float _3948 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
        float _2233 = (exp2(log2(1.0 - (isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2237 = (0.5 / ((_2223 + 9.9999999392252902907785028219223e-09) + _1971)) * _2223;
        float _3959 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
        float _2239 = (isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0))) * 0.31831014156341552734375;
        float _2240 = isnan(1.0) ? _1720 : (isnan(_1720) ? 1.0 : min(_1720, 1.0));
        _2187 = (((_2233 * cbLight._m0[_2198].x) * _2239) * _2240) + _2108;
        _2189 = (((_2233 * cbLight._m0[_2198].y) * _2239) * _2240) + _2110;
        _2191 = (((_2233 * cbLight._m0[_2198].z) * _2239) * _2240) + _2112;
    }
    float _2305;
    float _2307;
    float _2309;
    float _2311;
    float _2313;
    float _2315;
    if (_1701.y == 0u)
    {
        uvec4 _2261 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2262 = _2261.x;
        uint _2273 = uint((float(_2261.y) * floor(float(uint(cbSceneParam._m0[85u].y * _333) / _2262))) + floor(float(uint(cbSceneParam._m0[85u].x * _332) / _2262)));
        float _2283 = (log2(_1479 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2284 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
        uint _2287 = uint(isnan(14.0) ? _2284 : (isnan(_2284) ? 14.0 : min(_2284, 14.0)));
        uvec4 _2292 = texelFetch(g_lightClusterGridBuffer, int(((_2287 << 2u) + (_2273 << 6u)) >> 2u));
        uint _2293 = _2292.x;
        uint _2294 = _2261.z;
        float _2401;
        float _2403;
        float _2405;
        float _2407;
        float _2409;
        float _2411;
        if (((((1u << ((_2294 >> 4u) & 15u)) + 4294967295u) & _2293) == 0u) || ((_2294 & 240u) == 0u))
        {
            _2401 = 0.0;
            _2403 = 0.0;
            _2405 = 0.0;
            _2407 = 0.0;
            _2409 = 0.0;
            _2411 = 0.0;
        }
        else
        {
            float _2402;
            float _2404;
            float _2406;
            float _2408;
            float _2410;
            float _2412;
            float _2561 = 0.0;
            float _2562 = 0.0;
            float _2563 = 0.0;
            float _2564 = 0.0;
            float _2565 = 0.0;
            float _2566 = 0.0;
            uint _2567 = 0u;
            uint _2576;
            bool _2577;
            for (;;)
            {
                _2576 = texelFetch(g_lightClassification, int((((_2287 << 5u) + (_2273 << 9u)) + (_2567 << 2u)) >> 2u)).x;
                _2577 = _2576 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2577)
                {
                    frontier_phi_73_pred = _2566;
                    frontier_phi_73_pred_1 = _2565;
                    frontier_phi_73_pred_2 = _2564;
                    frontier_phi_73_pred_3 = _2563;
                    frontier_phi_73_pred_4 = _2562;
                    frontier_phi_73_pred_5 = _2561;
                }
                else
                {
                    float _2706;
                    float _2707;
                    float _2708;
                    float _2709;
                    float _2710;
                    float _2711;
                    uint _2712;
                    _2706 = _2561;
                    _2707 = _2562;
                    _2708 = _2563;
                    _2709 = _2564;
                    _2710 = _2565;
                    _2711 = _2566;
                    _2712 = _2576;
                    float _2633;
                    float _2634;
                    float _2635;
                    float _2636;
                    float _2637;
                    float _2638;
                    for (;;)
                    {
                        uint _2716 = uint(findLSB(_2712)) + (_2567 << 5u);
                        uint _2713 = (_2712 + 4294967295u) & _2712;
                        uint _2718 = _2716 * 48u;
                        vec4 _2732 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2718)).x, texelFetch(g_PointLightRenderingBuffer, int(_2718 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2718 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2718 + 3u)).x));
                        uint _2738 = (_2716 * 48u) + 4u;
                        vec4 _2751 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2738)).x, texelFetch(g_PointLightRenderingBuffer, int(_2738 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2738 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2738 + 3u)).x));
                        uint _2757 = (_2716 * 48u) + 8u;
                        vec3 _2768 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2757)).x, texelFetch(g_PointLightRenderingBuffer, int(_2757 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2757 + 2u)).x));
                        float _2772 = _2732.x - _1477;
                        float _2773 = _2732.y - _1478;
                        float _2774 = _2732.z - _1479;
                        float _2775 = dot(vec3(_2772, _2773, _2774), vec3(_2772, _2773, _2774));
                        float _2778 = inversesqrt(_2775);
                        float _2787 = 1.0 - (_2775 * _2732.w);
                        float _3985 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
                        float _2788 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
                        float _2789 = sqrt(_2775) * _2751.w;
                        float _2792 = 1.39999997615814208984375 / (_2789 + 1.39999997615814208984375);
                        float _2793 = _2792 * _2792;
                        float _2796 = ((1.0 - _2793) * dot(vec3(_353, _356, _359), vec3(_2778 * _2772, _2778 * _2773, _2778 * _2774))) + _2793;
                        float _2799 = _2789 * _2789;
                        float _2803 = ((isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0))) * _2788) / ((_2799 * 0.699999988079071044921875) + 1.0);
                        float _2807 = (-0.0) - _1477;
                        float _2808 = (-0.0) - _1478;
                        float _2809 = (-0.0) - _1479;
                        float _2813 = inversesqrt(dot(vec3(_2807, _2808, _2809), vec3(_2807, _2808, _2809)));
                        float _2817 = dot(vec3(_353, _356, _359), vec3(_2813 * _2807, _2813 * _2808, _2813 * _2809));
                        float _4001 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
                        float _4012 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
                        float _2821 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
                        float _2825 = (0.5 / (((isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0))) + 9.9999999392252902907785028219223e-09) + _2821)) * _2821;
                        float _4023 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
                        float _2834 = (((isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))) * 3.1415927410125732421875) / ((_2799 * 2.1991131305694580078125) + 3.141590118408203125)) * _2788;
                        _2636 = (_2803 * _2751.x) + _2709;
                        _2637 = (_2803 * _2751.y) + _2710;
                        _2638 = (_2803 * _2751.z) + _2711;
                        _2633 = (_2834 * _2768.x) + _2706;
                        _2634 = (_2834 * _2768.y) + _2707;
                        _2635 = (_2834 * _2768.z) + _2708;
                        if (_2713 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2706 = _2633;
                            _2707 = _2634;
                            _2708 = _2635;
                            _2709 = _2636;
                            _2710 = _2637;
                            _2711 = _2638;
                            _2712 = _2713;
                        }
                    }
                    frontier_phi_73_pred = _2638;
                    frontier_phi_73_pred_1 = _2637;
                    frontier_phi_73_pred_2 = _2636;
                    frontier_phi_73_pred_3 = _2635;
                    frontier_phi_73_pred_4 = _2634;
                    frontier_phi_73_pred_5 = _2633;
                }
                _2412 = frontier_phi_73_pred;
                _2410 = frontier_phi_73_pred_1;
                _2408 = frontier_phi_73_pred_2;
                _2406 = frontier_phi_73_pred_3;
                _2404 = frontier_phi_73_pred_4;
                _2402 = frontier_phi_73_pred_5;
                uint _2568 = _2567 + 1u;
                if (_2568 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2561 = _2402;
                    _2562 = _2404;
                    _2563 = _2406;
                    _2564 = _2408;
                    _2565 = _2410;
                    _2566 = _2412;
                    _2567 = _2568;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2401 = _2402;
            _2403 = _2404;
            _2405 = _2406;
            _2407 = _2408;
            _2409 = _2410;
            _2411 = _2412;
        }
        uvec4 _2415 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2416 = _2415.z;
        uint _2418 = (_2416 >> 8u) & 15u;
        float _2532;
        float _2534;
        float _2536;
        float _2538;
        float _2540;
        float _2542;
        if (((4294967295u << _2418) & _2293) == 0u)
        {
            _2532 = _2401;
            _2534 = _2403;
            _2536 = _2405;
            _2538 = _2407;
            _2540 = _2409;
            _2542 = _2411;
        }
        else
        {
            float _2557 = inversesqrt(dot(vec3(_1477, _1478, _1479), vec3(_1477, _1478, _1479)));
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2418 < ((_2416 >> 12u) & 15u))
            {
                float _2533;
                float _2535;
                float _2537;
                float _2539;
                float _2541;
                float _2543;
                float _2689 = _2401;
                float _2690 = _2403;
                float _2691 = _2405;
                float _2692 = _2407;
                float _2693 = _2409;
                float _2694 = _2411;
                uint _2695 = _2418;
                uint _2704;
                bool _2705;
                for (;;)
                {
                    _2704 = texelFetch(g_lightClassification, int((((_2287 << 5u) + (_2273 << 9u)) + (_2695 << 2u)) >> 2u)).x;
                    _2705 = _2704 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_2705)
                    {
                        frontier_phi_84_pred = _2693;
                        frontier_phi_84_pred_1 = _2692;
                        frontier_phi_84_pred_2 = _2691;
                        frontier_phi_84_pred_3 = _2690;
                        frontier_phi_84_pred_4 = _2689;
                        frontier_phi_84_pred_5 = _2694;
                    }
                    else
                    {
                        float _2848;
                        float _2849;
                        float _2850;
                        float _2851;
                        float _2852;
                        float _2853;
                        float _3100;
                        float _3101;
                        float _3102;
                        float _3103;
                        float _3104;
                        float _3105;
                        float _2861 = _2689;
                        float _2862 = _2690;
                        float _2863 = _2691;
                        float _2864 = _2692;
                        float _2865 = _2693;
                        float _2866 = _2694;
                        uint _2867 = _2704;
                        uint _2868;
                        vec4 _2893;
                        float _2894;
                        vec4 _2909;
                        vec3 _2921;
                        vec4 _2937;
                        vec4 _2953;
                        float _3000;
                        bool _3001;
                        for (;;)
                        {
                            uint _2878 = ((_2695 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2867));
                            _2868 = (_2867 + 4294967295u) & _2867;
                            uint _2880 = _2878 * 40u;
                            _2893 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2880)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 3u)).x));
                            _2894 = _2893.w;
                            uint _2896 = (_2878 * 40u) + 4u;
                            _2909 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2896)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 3u)).x));
                            uint _2911 = (_2878 * 40u) + 8u;
                            _2921 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2911)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 2u)).x));
                            uint _2924 = (_2878 * 40u) + 16u;
                            _2937 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2924)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 3u)).x));
                            uint _2940 = (_2878 * 40u) + 20u;
                            _2953 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2940)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 3u)).x));
                            uint _2956 = (_2878 * 40u) + 24u;
                            vec4 _2969 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2956)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 3u)).x));
                            uint _2975 = (_2878 * 40u) + 28u;
                            vec4 _2988 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2975)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 3u)).x));
                            _3000 = fma(_1479, _2988.z, fma(_1478, _2988.y, _2988.x * _1477)) + _2988.w;
                            _3001 = !((fma(_1479, _2969.z, fma(_1478, _2969.y, _2969.x * _1477)) + _2969.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3001)
                            {
                                float _3028 = _2893.x - _1477;
                                float _3029 = _2893.y - _1478;
                                float _3030 = _2893.z - _1479;
                                float _3031 = dot(vec3(_3028, _3029, _3030), vec3(_3028, _3029, _3030));
                                float _3034 = inversesqrt(_3031);
                                float _3035 = _3034 * _3028;
                                float _3036 = _3034 * _3029;
                                float _3037 = _3034 * _3030;
                                float _3041 = 1.0 - (_3031 / (_2894 * _2894));
                                float _4034 = isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0));
                                float _3042 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
                                float _3046 = sqrt(_3031) * _2909.w;
                                float _3048 = 1.39999997615814208984375 / (_3046 + 1.39999997615814208984375);
                                float _3049 = _3048 * _3048;
                                float _3050 = 1.0 - _3049;
                                float _3052 = (_3050 * dot(vec3(_3035, _3036, _3037), vec3(_353, _356, _359))) + _3049;
                                float _3055 = _3046 * _3046;
                                float _3059 = (fma(_1479, _2937.z, fma(_1478, _2937.y, _2937.x * _1477)) + _2937.w) / _3000;
                                float _3060 = (fma(_1479, _2953.z, fma(_1478, _2953.y, _2953.x * _1477)) + _2953.w) / _3000;
                                float _3064 = 1.0 - dot(vec2(_3059, _3060), vec2(_3059, _3060));
                                float _4050 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0));
                                float _3065 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
                                float _3066 = _3065 * (((isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0))) * _3042) / ((_3055 * 0.699999988079071044921875) + 1.0));
                                float _3076 = dot(vec3(_353, _356, _359), vec3((-0.0) - (_1477 * _2557), (-0.0) - (_1478 * _2557), (-0.0) - (_1479 * _2557)));
                                float _4061 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0));
                                float _3084 = (_3050 * dot(vec3(_353, _356, _359), vec3(_3035, _3036, _3037))) + _3049;
                                float _4072 = isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : max(_3084, 0.0));
                                float _3085 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
                                float _3089 = (0.5 / (((isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) + 9.9999999392252902907785028219223e-09) + _3085)) * _3085;
                                float _4083 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0));
                                float _3096 = (_3065 * _3042) * (((isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0))) * 3.1415927410125732421875) / ((_3055 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_90_pred = _3066 * _2909.y;
                                frontier_phi_90_pred_1 = _3066 * _2909.x;
                                frontier_phi_90_pred_2 = _3096 * _2921.z;
                                frontier_phi_90_pred_3 = _3096 * _2921.y;
                                frontier_phi_90_pred_4 = _3096 * _2921.x;
                                frontier_phi_90_pred_5 = _3066 * _2909.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3104 = frontier_phi_90_pred;
                            _3103 = frontier_phi_90_pred_1;
                            _3102 = frontier_phi_90_pred_2;
                            _3101 = frontier_phi_90_pred_3;
                            _3100 = frontier_phi_90_pred_4;
                            _3105 = frontier_phi_90_pred_5;
                            _2851 = _3103 + _2864;
                            _2852 = _3104 + _2865;
                            _2853 = _3105 + _2866;
                            _2848 = _3100 + _2861;
                            _2849 = _3101 + _2862;
                            _2850 = _3102 + _2863;
                            if (_2868 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2861 = _2848;
                                _2862 = _2849;
                                _2863 = _2850;
                                _2864 = _2851;
                                _2865 = _2852;
                                _2866 = _2853;
                                _2867 = _2868;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _2852;
                        frontier_phi_84_pred_1 = _2851;
                        frontier_phi_84_pred_2 = _2850;
                        frontier_phi_84_pred_3 = _2849;
                        frontier_phi_84_pred_4 = _2848;
                        frontier_phi_84_pred_5 = _2853;
                    }
                    _2541 = frontier_phi_84_pred;
                    _2539 = frontier_phi_84_pred_1;
                    _2537 = frontier_phi_84_pred_2;
                    _2535 = frontier_phi_84_pred_3;
                    _2533 = frontier_phi_84_pred_4;
                    _2543 = frontier_phi_84_pred_5;
                    uint _2696 = _2695 + 1u;
                    if (_2696 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2689 = _2533;
                        _2690 = _2535;
                        _2691 = _2537;
                        _2692 = _2539;
                        _2693 = _2541;
                        _2694 = _2543;
                        _2695 = _2696;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2543;
                frontier_phi_65_66_ladder_1 = _2539;
                frontier_phi_65_66_ladder_2 = _2541;
                frontier_phi_65_66_ladder_3 = _2535;
                frontier_phi_65_66_ladder_4 = _2533;
                frontier_phi_65_66_ladder_5 = _2537;
            }
            else
            {
                frontier_phi_65_66_ladder = _2411;
                frontier_phi_65_66_ladder_1 = _2407;
                frontier_phi_65_66_ladder_2 = _2409;
                frontier_phi_65_66_ladder_3 = _2403;
                frontier_phi_65_66_ladder_4 = _2401;
                frontier_phi_65_66_ladder_5 = _2405;
            }
            _2532 = frontier_phi_65_66_ladder_4;
            _2534 = frontier_phi_65_66_ladder_3;
            _2536 = frontier_phi_65_66_ladder_5;
            _2538 = frontier_phi_65_66_ladder_1;
            _2540 = frontier_phi_65_66_ladder_2;
            _2542 = frontier_phi_65_66_ladder;
        }
        float _2547 = isnan(1.0) ? _398 : (isnan(_398) ? 1.0 : min(_398, 1.0));
        _2305 = (_2547 * _2538) + _1945;
        _2307 = (_2547 * _2540) + _1947;
        _2309 = (_2547 * _2542) + _1949;
        _2311 = ((_2532 * 0.039999999105930328369140625) * _2547) + _2187;
        _2313 = ((_2534 * 0.039999999105930328369140625) * _2547) + _2189;
        _2315 = ((_2536 * 0.039999999105930328369140625) * _2547) + _2191;
    }
    else
    {
        _2305 = _1945;
        _2307 = _1947;
        _2309 = _1949;
        _2311 = _2187;
        _2313 = _2189;
        _2315 = _2191;
    }
    uint _2321 = _374 + uint(cbMatDynParam._m0[0u].w);
    float _2327 = (_218.x * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2321].x;
    float _2328 = (_218.y * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2321].y;
    float _2329 = (_218.z * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2321].z;
    float _4099 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _4110 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _4121 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _2346 = (((isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * (_2305 + ((isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0))) * _398))) + ((_2311 + ((isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0))) * _1209)) * cbPerFrame._m0[3u].x)) + _2327;
    float _2348 = (_2328 + ((_2313 + ((isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0))) * _1209)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))) * (_2307 + ((isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0))) * _398)));
    float _2350 = (_2329 + ((_2315 + ((isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0))) * _1209)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * (_2309 + ((isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0))) * _398)));
    float _2351 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
    float _2352 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
    float _2353 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
    float _2359 = cbMtdParam._m0[2u].x * _2327;
    float _2360 = cbMtdParam._m0[2u].y * _2328;
    float _2361 = cbMtdParam._m0[2u].z * _2329;
    float _4147 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2363 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
    uint _2364 = _372 + 6u;
    float _2372 = _332 / cbSceneParam._m0[86u].x;
    float _2373 = _333 / cbSceneParam._m0[86u].y;
    vec4 _2387 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2372, _2373, (log2((isnan(cbSceneParam._m0[77u].w) ? _252 : (isnan(_252) ? cbSceneParam._m0[77u].w : min(_252, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2389 = _2387.x;
    float _2390 = _2387.y;
    float _2391 = _2387.z;
    float _2392 = _2387.w;
    float _2463;
    float _2465;
    float _2467;
    float _2469;
    if (_252 > cbSceneParam._m0[78u].w)
    {
        float _2426 = isnan(_252) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _252 : min(cbSceneParam._m0[80u].w, _252));
        float _2427 = _2426 / _252;
        float _2438 = _2427 * _304;
        float _2439 = _305 * _2427;
        float _2440 = (-0.0) - _2439;
        float _2441 = _2427 * _306;
        float _2443 = (cbSceneParam._m0[77u].w * _2440) / _2426;
        float _2444 = _2443 + cbSceneParam._m0[79u].w;
        float _2445 = cbSceneParam._m0[79u].w - _2439;
        float _2451 = sqrt(((_2438 * _2438) + (_2439 * _2439)) + (_2441 * _2441));
        float _2454 = (1.0 - (cbSceneParam._m0[77u].w / _2426)) * _2451;
        float _2459 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2461 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2646;
        if (abs((_2440 - _2443) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2646 = ((((_2444 > 0.0) ? exp2(_2459 * _2444) : (2.0 - exp2(_2461 * _2444))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2454;
        }
        else
        {
            float _2590 = 1.0 / cbSceneParam._m0[80u].x;
            float _2591 = isnan(_2445) ? _2444 : (isnan(_2444) ? _2445 : max(_2444, _2445));
            float _2592 = isnan(_2445) ? _2444 : (isnan(_2444) ? _2445 : min(_2444, _2445));
            float _2601 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : min(_2591, 0.0));
            float _2602 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : min(_2592, 0.0));
            _2646 = ((abs(_2451 / _2440) * cbSceneParam._m0[80u].y) * ((((_2601 - _2602) * 2.0) - ((exp2(_2459 * (isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0)))) - exp2(_2459 * (isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0))))) * _2590)) - ((exp2(_2461 * _2601) - exp2(_2461 * _2602)) * _2590))) + (_2454 * cbSceneParam._m0[80u].z);
        }
        vec4 _2648 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2372, _2373, 1.0), 0.0);
        float _2657 = exp2((_2646 * (-1.44269502162933349609375)) * (1.0 - _2648.w));
        float _2658 = log2(_2657);
        float _2674 = log2(_2392);
        _2463 = (exp2(_2674 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2658 * cbSceneParam._m0[78u].x)) * _2648.x) / cbSceneParam._m0[78u].x)) + _2389;
        _2465 = (exp2(_2674 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2658 * cbSceneParam._m0[78u].y)) * _2648.y) / cbSceneParam._m0[78u].y)) + _2390;
        _2467 = (exp2(_2674 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2658 * cbSceneParam._m0[78u].z)) * _2648.z) / cbSceneParam._m0[78u].z)) + _2391;
        _2469 = _2657 * _2392;
    }
    else
    {
        _2463 = _2389;
        _2465 = _2390;
        _2467 = _2391;
        _2469 = _2392;
    }
    bool _2684;
    vec4 _2479;
    vec4 _2502;
    float _2504;
    float _2508;
    float _2509;
    float _2510;
    float _2513;
    float _2516;
    float _2519;
    float _2520;
    bool _2531;
    for (;;)
    {
        _2479 = cbMatDynParam._m0[0u];
        float _2481 = roundEven(_2479.y);
        bool _2482 = _2481 == 3.0;
        float _2484 = log2(_2469);
        float _2488 = exp2(_2484 * cbSceneParam._m0[78u].x);
        float _2489 = exp2(_2484 * cbSceneParam._m0[78u].y);
        float _2490 = exp2(_2484 * cbSceneParam._m0[78u].z);
        float _2491 = _2488 * _2351;
        float _2492 = _2489 * _2352;
        float _2493 = _2490 * _2353;
        float _2500 = _320 + (-0.5);
        _2502 = cbMtdParam._m0[1u];
        _2504 = _2502.y * _2500;
        float _2507 = (_2481 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2508 = _2507 * (_2482 ? _2491 : (_2491 + (cbSceneParam._m0[72u].w * _2463)));
        _2509 = _2507 * (_2482 ? _2492 : (_2492 + (cbSceneParam._m0[72u].w * _2465)));
        _2510 = _2507 * (_2482 ? _2493 : (_2493 + (cbSceneParam._m0[72u].w * _2467)));
        _2513 = ((_2359 * _2363) * _2488) * _2507;
        _2516 = ((_2360 * _2363) * _2489) * _2507;
        _2519 = ((_2361 * _2363) * _2490) * _2507;
        _2520 = _2500 * 0.999000012874603271484375;
        _2531 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2531)
        {
            if ((cbInstanceData._m0[_372 + 7u].x + _2520) < 0.5)
            {
                _2684 = true;
                break;
            }
        }
        uint _2625 = _374 + uint(_2479.w);
        if ((cbInstanceData._m0[_2625].w < 1.0) && ((cbInstanceData._m0[_2625].w + _2520) < 0.5))
        {
            _2684 = true;
            break;
        }
        if ((_2504 + 1.0) < _2502.x)
        {
            _2684 = true;
            break;
        }
        _2684 = false;
        break;
    }
    float _2839;
    if (_2684)
    {
        discard_state = true;
        _2839 = 0.0;
    }
    else
    {
        _2839 = cbInstanceData._m0[_2364].w;
    }
    SV_Target.x = _2508;
    SV_Target.y = _2509;
    SV_Target.z = _2510;
    SV_Target.w = _2839;
    SV_Target_1.x = _2513;
    SV_Target_1.y = _2516;
    SV_Target_1.z = _2519;
    SV_Target_1.w = cbInstanceData._m0[_2364].w;
    discard_exit();
}


