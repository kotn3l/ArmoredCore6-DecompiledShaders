#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_A_Emissive_Glow_Addition_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_A_Emissive_Glow_Addition_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _726;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _169 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _170 = _169 * NORMAL.x;
    float _171 = _169 * NORMAL.y;
    float _172 = _169 * NORMAL.z;
    float _177;
    float _178;
    float _179;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _177 = (-0.0) - _170;
        _178 = (-0.0) - _171;
        _179 = (-0.0) - _172;
    }
    else
    {
        _177 = _170;
        _178 = _171;
        _179 = _172;
    }
    vec4 _193 = texture(sampler2D(S_A_Emissive_Glow_Addition_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _196 = _193.x;
    float _197 = _193.y;
    float _198 = _193.z;
    vec4 _214 = texture(sampler2D(S_A_Emissive_Glow_Addition_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _225 = inversesqrt(dot(vec3(_177, _178, _179), vec3(_177, _178, _179)));
    float _226 = _225 * _177;
    float _227 = _225 * _178;
    float _228 = _225 * _179;
    float _3158 = isnan(0.0) ? _196 : (isnan(_196) ? 0.0 : max(_196, 0.0));
    float _3169 = isnan(0.0) ? _197 : (isnan(_197) ? 0.0 : max(_197, 0.0));
    float _3180 = isnan(0.0) ? _198 : (isnan(_198) ? 0.0 : max(_198, 0.0));
    float _248 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _290 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _300 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _290);
    float _301 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _290);
    float _302 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _290);
    float _306 = inversesqrt(dot(vec3(_300, _301, _302), vec3(_300, _301, _302)));
    float _307 = _300 * _306;
    float _308 = _301 * _306;
    float _309 = _302 * _306;
    float _315 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _316 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _337 = fma(_228, cbSceneParam._m0[5u].z, fma(_227, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _226));
    float _340 = fma(_228, cbSceneParam._m0[6u].z, fma(_227, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _226));
    float _343 = fma(_228, cbSceneParam._m0[7u].z, fma(_227, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _226));
    uint _356 = uint(roundEven(NORMAL.w)) * 13u;
    uint _358 = _356 + 9u;
    uint _359 = _358 + uint(cbMatDynParam._m0[0u].w);
    float _365 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3158 : (isnan(_3158) ? 1.0 : min(_3158, 1.0)))) * cbInstanceData._m0[_359].x;
    float _366 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3169 : (isnan(_3169) ? 1.0 : min(_3169, 1.0)))) * cbInstanceData._m0[_359].y;
    float _367 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3180 : (isnan(_3180) ? 1.0 : min(_3180, 1.0)))) * cbInstanceData._m0[_359].z;
    float _3191 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _368 = isnan(1.0) ? _3191 : (isnan(_3191) ? 1.0 : min(_3191, 1.0));
    float _3202 = isnan(0.0) ? _366 : (isnan(_366) ? 0.0 : max(_366, 0.0));
    float _369 = isnan(1.0) ? _3202 : (isnan(_3202) ? 1.0 : min(_3202, 1.0));
    float _3213 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _370 = isnan(1.0) ? _3213 : (isnan(_3213) ? 1.0 : min(_3213, 1.0));
    vec4 _379 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _315, cbSceneParam._m0[86u].y * _316));
    float _382 = _379.x * TEXCOORD.z;
    float _383 = dot(vec3(_226, _227, _228), vec3(_307, _308, _309));
    float _386 = _383 * 2.0;
    float _391 = (_386 * _226) - _307;
    float _392 = (_386 * _227) - _308;
    float _393 = (_386 * _228) - _309;
    float _415 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _419 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _423 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _725;
    float _727;
    float _728;
    float _729;
    float _730;
    float _731;
    float _732;
    float _733;
    float _734;
    float _735;
    float _736;
    float _737;
    float _738;
    float _739;
    float _740;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _450 = fma(_423, cbModelParam._m0[26u].z, fma(_419, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _415));
        float _454 = fma(_423, cbModelParam._m0[27u].z, fma(_419, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _415));
        float _458 = fma(_423, cbModelParam._m0[28u].z, fma(_419, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _415));
        float _483 = _415 + _226;
        float _484 = _419 + _227;
        float _485 = _423 + _228;
        float _495 = fma(_485, cbModelParam._m0[26u].z, fma(_484, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _483)) - _450;
        float _496 = fma(_485, cbModelParam._m0[27u].z, fma(_484, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _483)) - _454;
        float _497 = fma(_485, cbModelParam._m0[28u].z, fma(_484, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _483)) - _458;
        float _501 = inversesqrt(dot(vec3(_495, _496, _497), vec3(_495, _496, _497)));
        float _514 = ((_501 * _495) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_450 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _515 = ((_501 * _496) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_454 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _516 = ((_501 * _497) / cbModelParam._m0[34u].z) + ((((((_458 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _519 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_514, _515, _516), 0.0);
        vec4 _526 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_514, _515, _516), 0.0);
        vec4 _533 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_514, _515, _516), 0.0);
        vec4 _540 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_514, _515, _516), 0.0);
        float _553 = exp2((_519.w + (-0.5)) * 20.0) * 2.0;
        float _554 = _553 * (_519.x + (-0.5));
        float _555 = _553 * (_519.y + (-0.5));
        float _556 = _553 * (_519.z + (-0.5));
        float _563 = exp2((_526.w + (-0.5)) * 20.0) * 2.0;
        float _564 = _563 * (_526.x + (-0.5));
        float _565 = _563 * (_526.y + (-0.5));
        float _566 = _563 * (_526.z + (-0.5));
        float _573 = exp2((_533.w + (-0.5)) * 20.0) * 2.0;
        float _574 = _573 * (_533.x + (-0.5));
        float _575 = _573 * (_533.y + (-0.5));
        float _576 = _573 * (_533.z + (-0.5));
        float _583 = exp2((_540.w + (-0.5)) * 20.0) * 2.0;
        float _584 = _583 * (_540.x + (-0.5));
        float _585 = _583 * (_540.y + (-0.5));
        float _586 = _583 * (_540.z + (-0.5));
        float _587 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
        float _588 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
        float _589 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
        float _590 = _554 * 0.5;
        float _591 = _564 * 0.5;
        float _592 = _574 * 0.5;
        float _593 = dot(vec3(_590, _591, _592), vec3(_590, _591, _592));
        float _598 = (_593 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_593);
        float _607 = (dot(vec3(_226, _227, _228), vec3(_598 * _590, _598 * _591, _598 * _592)) + 1.0) * 0.5;
        float _3239 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
        float _617 = sqrt(((_591 * _591) + (_590 * _590)) + (_592 * _592)) / (_587 + 9.9999997473787516355514526367188e-06);
        float _3250 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
        float _618 = isnan(1.0) ? _3250 : (isnan(_3250) ? 1.0 : min(_3250, 1.0));
        float _619 = _618 * 2.0;
        float _623 = (1.0 - _618) / (_618 + 1.0);
        float _3261 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
        float _624 = isnan(1.0) ? _3261 : (isnan(_3261) ? 1.0 : min(_3261, 1.0));
        float _633 = ((((1.0 - _624) * (_619 + 2.0)) * exp2(log2(isnan(1.0) ? _3239 : (isnan(_3239) ? 1.0 : min(_3239, 1.0))) * (_619 + 1.0))) + _624) * _587;
        float _634 = _555 * 0.5;
        float _635 = _565 * 0.5;
        float _636 = _575 * 0.5;
        float _637 = dot(vec3(_634, _635, _636), vec3(_634, _635, _636));
        float _642 = (_637 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_637);
        float _650 = (dot(vec3(_226, _227, _228), vec3(_642 * _634, _642 * _635, _642 * _636)) + 1.0) * 0.5;
        float _3272 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
        float _659 = sqrt(((_635 * _635) + (_634 * _634)) + (_636 * _636)) / (_588 + 9.9999997473787516355514526367188e-06);
        float _3283 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
        float _660 = isnan(1.0) ? _3283 : (isnan(_3283) ? 1.0 : min(_3283, 1.0));
        float _661 = _660 * 2.0;
        float _665 = (1.0 - _660) / (_660 + 1.0);
        float _3294 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
        float _666 = isnan(1.0) ? _3294 : (isnan(_3294) ? 1.0 : min(_3294, 1.0));
        float _675 = ((((1.0 - _666) * (_661 + 2.0)) * exp2(log2(isnan(1.0) ? _3272 : (isnan(_3272) ? 1.0 : min(_3272, 1.0))) * (_661 + 1.0))) + _666) * _588;
        float _676 = _556 * 0.5;
        float _677 = _566 * 0.5;
        float _678 = _576 * 0.5;
        float _679 = dot(vec3(_676, _677, _678), vec3(_676, _677, _678));
        float _684 = (_679 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_679);
        float _692 = (dot(vec3(_226, _227, _228), vec3(_684 * _676, _684 * _677, _684 * _678)) + 1.0) * 0.5;
        float _3305 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
        float _701 = sqrt(((_677 * _677) + (_676 * _676)) + (_678 * _678)) / (_589 + 9.9999997473787516355514526367188e-06);
        float _3316 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
        float _702 = isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0));
        float _703 = _702 * 2.0;
        float _707 = (1.0 - _702) / (_702 + 1.0);
        float _3327 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
        float _708 = isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0));
        float _717 = ((((1.0 - _708) * (_703 + 2.0)) * exp2(log2(isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0))) * (_703 + 1.0))) + _708) * _589;
        _725 = _556;
        _727 = _555;
        _728 = _554;
        _729 = _566;
        _730 = _565;
        _731 = _564;
        _732 = _576;
        _733 = _575;
        _734 = _574;
        _735 = _589;
        _736 = _588;
        _737 = _587;
        _738 = cbModelParam._m0[36u].z * (isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0)));
        _739 = cbModelParam._m0[36u].z * (isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0)));
        _740 = cbModelParam._m0[36u].z * (isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0)));
    }
    else
    {
        _725 = _726;
        _727 = _726;
        _728 = _726;
        _729 = _726;
        _730 = _726;
        _731 = _726;
        _732 = _726;
        _733 = _726;
        _734 = _726;
        _735 = _726;
        _736 = _726;
        _737 = _726;
        _738 = 0.0;
        _739 = 0.0;
        _740 = 0.0;
    }
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _766 = fma(_423, cbModelParam._m0[30u].z, fma(_419, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _415));
        float _770 = fma(_423, cbModelParam._m0[31u].z, fma(_419, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _415));
        float _774 = fma(_423, cbModelParam._m0[32u].z, fma(_419, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _415));
        float _797 = _415 + _226;
        float _798 = _419 + _227;
        float _799 = _423 + _228;
        float _809 = fma(_799, cbModelParam._m0[30u].z, fma(_798, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _797)) - _766;
        float _810 = fma(_799, cbModelParam._m0[31u].z, fma(_798, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _797)) - _770;
        float _811 = fma(_799, cbModelParam._m0[32u].z, fma(_798, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _797)) - _774;
        float _815 = inversesqrt(dot(vec3(_809, _810, _811), vec3(_809, _810, _811)));
        float _828 = ((_815 * _809) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_766 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _829 = ((_815 * _810) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_770 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _830 = ((_815 * _811) / cbModelParam._m0[35u].z) + ((((((_774 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _832 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_828, _829, _830), 0.0);
        vec4 _839 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_828, _829, _830), 0.0);
        vec4 _846 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_828, _829, _830), 0.0);
        vec4 _853 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_828, _829, _830), 0.0);
        float _865 = exp2((_832.w + (-0.5)) * 20.0) * 2.0;
        float _866 = _865 * (_832.x + (-0.5));
        float _867 = _865 * (_832.y + (-0.5));
        float _868 = _865 * (_832.z + (-0.5));
        float _875 = exp2((_839.w + (-0.5)) * 20.0) * 2.0;
        float _876 = _875 * (_839.x + (-0.5));
        float _877 = _875 * (_839.y + (-0.5));
        float _878 = _875 * (_839.z + (-0.5));
        float _885 = exp2((_846.w + (-0.5)) * 20.0) * 2.0;
        float _886 = _885 * (_846.x + (-0.5));
        float _887 = _885 * (_846.y + (-0.5));
        float _888 = _885 * (_846.z + (-0.5));
        float _895 = exp2((_853.w + (-0.5)) * 20.0) * 2.0;
        float _896 = _895 * (_853.x + (-0.5));
        float _897 = _895 * (_853.y + (-0.5));
        float _898 = _895 * (_853.z + (-0.5));
        float _899 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _900 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _901 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _902 = _866 * 0.5;
        float _903 = _876 * 0.5;
        float _904 = _886 * 0.5;
        float _905 = dot(vec3(_902, _903, _904), vec3(_902, _903, _904));
        float _910 = (_905 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_905);
        float _918 = (dot(vec3(_226, _227, _228), vec3(_910 * _902, _910 * _903, _910 * _904)) + 1.0) * 0.5;
        float _3368 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _927 = sqrt(((_903 * _903) + (_902 * _902)) + (_904 * _904)) / (_899 + 9.9999997473787516355514526367188e-06);
        float _3379 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _928 = isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0));
        float _929 = _928 * 2.0;
        float _933 = (1.0 - _928) / (_928 + 1.0);
        float _3390 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _934 = isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0));
        float _943 = ((((1.0 - _934) * (_929 + 2.0)) * exp2(log2(isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0))) * (_929 + 1.0))) + _934) * _899;
        float _944 = _867 * 0.5;
        float _945 = _877 * 0.5;
        float _946 = _887 * 0.5;
        float _947 = dot(vec3(_944, _945, _946), vec3(_944, _945, _946));
        float _952 = (_947 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_947);
        float _960 = (dot(vec3(_226, _227, _228), vec3(_952 * _944, _952 * _945, _952 * _946)) + 1.0) * 0.5;
        float _3401 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _969 = sqrt(((_945 * _945) + (_944 * _944)) + (_946 * _946)) / (_900 + 9.9999997473787516355514526367188e-06);
        float _3412 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _970 = isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0));
        float _971 = _970 * 2.0;
        float _975 = (1.0 - _970) / (_970 + 1.0);
        float _3423 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _976 = isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0));
        float _985 = ((((1.0 - _976) * (_971 + 2.0)) * exp2(log2(isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0))) * (_971 + 1.0))) + _976) * _900;
        float _986 = _868 * 0.5;
        float _987 = _878 * 0.5;
        float _988 = _888 * 0.5;
        float _989 = dot(vec3(_986, _987, _988), vec3(_986, _987, _988));
        float _994 = (_989 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_989);
        float _1002 = (dot(vec3(_226, _227, _228), vec3(_994 * _986, _994 * _987, _994 * _988)) + 1.0) * 0.5;
        float _3434 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1011 = sqrt(((_987 * _987) + (_986 * _986)) + (_988 * _988)) / (_901 + 9.9999997473787516355514526367188e-06);
        float _3445 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1012 = isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0));
        float _1013 = _1012 * 2.0;
        float _1017 = (1.0 - _1012) / (_1012 + 1.0);
        float _3456 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1018 = isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0));
        float _1027 = ((((1.0 - _1018) * (_1013 + 2.0)) * exp2(log2(isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0))) * (_1013 + 1.0))) + _1018) * _901;
        _1035 = _868;
        _1036 = _867;
        _1037 = _866;
        _1038 = _878;
        _1039 = _877;
        _1040 = _876;
        _1041 = _888;
        _1042 = _887;
        _1043 = _886;
        _1044 = _901;
        _1045 = _900;
        _1046 = _899;
        _1047 = cbModelParam._m0[36u].w * (isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0)));
        _1048 = cbModelParam._m0[36u].w * (isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0)));
        _1049 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0)));
    }
    else
    {
        _1035 = _726;
        _1036 = _726;
        _1037 = _726;
        _1038 = _726;
        _1039 = _726;
        _1040 = _726;
        _1041 = _726;
        _1042 = _726;
        _1043 = _726;
        _1044 = _726;
        _1045 = _726;
        _1046 = _726;
        _1047 = 0.0;
        _1048 = 0.0;
        _1049 = 0.0;
    }
    float _1059 = (cbModelParam._m0[1u].x * (_1047 - _738)) + _738;
    float _1060 = (cbModelParam._m0[1u].x * (_1048 - _739)) + _739;
    float _1061 = (cbModelParam._m0[1u].x * (_1049 - _740)) + _740;
    float _1082 = fma(_1061, cbSceneParam._m0[89u].z, fma(_1060, cbSceneParam._m0[89u].y, _1059 * cbSceneParam._m0[89u].x));
    float _1085 = fma(_1061, cbSceneParam._m0[90u].z, fma(_1060, cbSceneParam._m0[90u].y, _1059 * cbSceneParam._m0[90u].x));
    float _1088 = fma(_1061, cbSceneParam._m0[91u].z, fma(_1060, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1059));
    float _1103 = _391 * 0.5;
    float _1104 = _392 * 0.5;
    float _1105 = _393 * 0.5;
    float _1106 = dot(vec4(_1103, _1104, _1105, 1.0), vec4(_1037, _1040, _1043, _1046));
    float _1109 = dot(vec4(_1103, _1104, _1105, 1.0), vec4(_1036, _1039, _1042, _1045));
    float _1112 = dot(vec4(_1103, _1104, _1105, 1.0), vec4(_1035, _1038, _1041, _1044));
    float _1146;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1119 = dot(vec4(_1103, _1104, _1105, 1.0), vec4(_725, _729, _732, _735));
        float _1123 = dot(vec4(_1103, _1104, _1105, 1.0), vec4(_727, _730, _733, _736));
        float _1127 = dot(vec4(_1103, _1104, _1105, 1.0), vec4(_728, _731, _734, _737));
        float _1134 = dot(vec4(cbModelParam._m0[39u]), vec4(_1103, _1104, _1105, 1.0));
        _1146 = dot(vec3(isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0)), isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0)), isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1134) ? 0.0 : (isnan(0.0) ? _1134 : max(0.0, _1134))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1146 = 1.0;
    }
    float _1157;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1148 = dot(vec4(cbModelParam._m0[40u]), vec4(_1103, _1104, _1105, 1.0));
        _1157 = dot(vec3(isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0)), isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0)), isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1148) ? 0.0 : (isnan(0.0) ? _1148 : max(0.0, _1148))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1157 = 1.0;
    }
    float _1161 = (_1157 * cbModelParam._m0[1u].x) + (_1146 * (1.0 - cbModelParam._m0[1u].x));
    float _1170 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1252;
    float _1254;
    float _1256;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1219 = fma(_423, cbModelParam._m0[13u].z, fma(_419, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _415)) + cbModelParam._m0[13u].w;
        float _1223 = fma(_423, cbModelParam._m0[14u].z, fma(_419, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _415)) + cbModelParam._m0[14u].w;
        float _1227 = fma(_423, cbModelParam._m0[15u].z, fma(_419, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _415)) + cbModelParam._m0[15u].w;
        float _1230 = fma(_393, cbModelParam._m0[13u].z, fma(_392, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _391));
        float _1233 = fma(_393, cbModelParam._m0[14u].z, fma(_392, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _391));
        float _1236 = fma(_393, cbModelParam._m0[15u].z, fma(_392, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _391));
        float _1262;
        if (_1230 > 0.0)
        {
            _1262 = abs((1.0 - _1219) / _1230);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1230 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1219 + 1.0) / _1230);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1262 = frontier_phi_16_14_ladder;
        }
        float _1437;
        if (_1233 > 0.0)
        {
            _1437 = abs((1.0 - _1223) / _1233);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1233 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1223 + 1.0) / _1233);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1437 = frontier_phi_25_21_ladder;
        }
        float _1734;
        if (_1236 > 0.0)
        {
            _1734 = abs((1.0 - _1227) / _1236);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1236 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1227 + 1.0) / _1236);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1734 = frontier_phi_37_32_ladder;
        }
        float _1736 = isnan(_1437) ? _1262 : (isnan(_1262) ? _1437 : min(_1262, _1437));
        float _1737 = isnan(_1734) ? _1736 : (isnan(_1736) ? _1734 : min(_1736, _1734));
        float _1741 = (_1737 * _1230) + _1219;
        float _1742 = (_1737 * _1233) + _1223;
        float _1743 = (_1737 * _1236) + _1227;
        float _1744 = _1737 * 9.9999997473787516355514526367188e-05;
        float _1746 = (-1.0) - _1744;
        float _1748 = _1744 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1743 > _1748) || ((_1743 < _1746) || ((_1742 > _1748) || ((_1742 < _1746) || ((_1741 < _1746) || (_1741 > _1748))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1888 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1743, cbModelParam._m0[9u].z, fma(_1742, cbModelParam._m0[9u].y, _1741 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1743, cbModelParam._m0[10u].z, fma(_1742, cbModelParam._m0[10u].y, _1741 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1743, cbModelParam._m0[11u].z, fma(_1742, cbModelParam._m0[11u].y, _1741 * cbModelParam._m0[11u].x))), _1170);
            frontier_phi_15_37_ladder = _1888.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1888.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1888.z * cbModelParam._m0[1u].y;
        }
        _1252 = frontier_phi_15_37_ladder_1;
        _1254 = frontier_phi_15_37_ladder;
        _1256 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1240 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_391, _392, _393), _1170);
        _1252 = _1240.x * cbModelParam._m0[1u].y;
        _1254 = _1240.y * cbModelParam._m0[1u].y;
        _1256 = _1240.z * cbModelParam._m0[1u].y;
    }
    float _1259 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1352;
    float _1354;
    float _1356;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1316 = fma(_423, cbModelParam._m0[21u].z, fma(_419, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _415)) + cbModelParam._m0[21u].w;
        float _1320 = fma(_423, cbModelParam._m0[22u].z, fma(_419, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _415)) + cbModelParam._m0[22u].w;
        float _1324 = fma(_423, cbModelParam._m0[23u].z, fma(_419, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _415)) + cbModelParam._m0[23u].w;
        float _1327 = fma(_393, cbModelParam._m0[21u].z, fma(_392, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _391));
        float _1330 = fma(_393, cbModelParam._m0[22u].z, fma(_392, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _391));
        float _1333 = fma(_393, cbModelParam._m0[23u].z, fma(_392, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _391));
        float _1442;
        if (_1327 > 0.0)
        {
            _1442 = abs((1.0 - _1316) / _1327);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1327 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1316 + 1.0) / _1327);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1442 = frontier_phi_27_23_ladder;
        }
        float _1761;
        if (_1330 > 0.0)
        {
            _1761 = abs((1.0 - _1320) / _1330);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1330 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1320 + 1.0) / _1330);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1761 = frontier_phi_39_34_ladder;
        }
        float _2034;
        if (_1333 > 0.0)
        {
            _2034 = abs((1.0 - _1324) / _1333);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1333 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1324 + 1.0) / _1333);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2034 = frontier_phi_49_46_ladder;
        }
        float _2036 = isnan(_1761) ? _1442 : (isnan(_1442) ? _1761 : min(_1442, _1761));
        float _2037 = isnan(_2034) ? _2036 : (isnan(_2036) ? _2034 : min(_2036, _2034));
        float _2041 = (_2037 * _1327) + _1316;
        float _2042 = (_2037 * _1330) + _1320;
        float _2043 = (_2037 * _1333) + _1324;
        float _2044 = _2037 * 9.9999997473787516355514526367188e-05;
        float _2045 = (-1.0) - _2044;
        float _2047 = _2044 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2043 > _2047) || ((_2043 < _2045) || ((_2042 > _2047) || ((_2042 < _2045) || ((_2041 < _2045) || (_2041 > _2047))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2134 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2043, cbModelParam._m0[17u].z, fma(_2042, cbModelParam._m0[17u].y, _2041 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2043, cbModelParam._m0[18u].z, fma(_2042, cbModelParam._m0[18u].y, _2041 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2043, cbModelParam._m0[19u].z, fma(_2042, cbModelParam._m0[19u].y, _2041 * cbModelParam._m0[19u].x))), _1259);
            frontier_phi_24_49_ladder = _2134.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2134.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2134.x * cbModelParam._m0[1u].z;
        }
        _1352 = frontier_phi_24_49_ladder_2;
        _1354 = frontier_phi_24_49_ladder_1;
        _1356 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1336 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_391, _392, _393), _1259);
        _1352 = _1336.x * cbModelParam._m0[1u].z;
        _1354 = _1336.y * cbModelParam._m0[1u].z;
        _1356 = _1336.z * cbModelParam._m0[1u].z;
    }
    float _1368 = _382 * 0.01200000010430812835693359375;
    float _1370 = _1368 * ((cbModelParam._m0[1u].w * (_1352 - _1252)) + _1252);
    float _1371 = _1368 * ((cbModelParam._m0[1u].w * (_1354 - _1254)) + _1254);
    float _1372 = _1368 * ((cbModelParam._m0[1u].w * (_1356 - _1256)) + _1256);
    float _1375 = fma(_1372, cbSceneParam._m0[89u].z, fma(_1371, cbSceneParam._m0[89u].y, _1370 * cbSceneParam._m0[89u].x));
    float _1378 = fma(_1372, cbSceneParam._m0[90u].z, fma(_1371, cbSceneParam._m0[90u].y, _1370 * cbSceneParam._m0[90u].x));
    float _1381 = fma(_1372, cbSceneParam._m0[91u].z, fma(_1371, cbSceneParam._m0[91u].y, _1370 * cbSceneParam._m0[91u].x));
    float _1416 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1420 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1424 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1428 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1429 = _1416 / _1428;
    float _1430 = _1420 / _1428;
    float _1431 = _1424 / _1428;
    float _1578;
    float _1579;
    float _1580;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1458 = ((uint(_1431 > cbSceneParam._m0[59u].y) + uint(_1431 > cbSceneParam._m0[59u].x)) + uint(_1431 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1459 = _1458 + 43u;
        uint _1467 = _1458 + 44u;
        uint _1475 = _1458 + 45u;
        uint _1483 = _1458 + 46u;
        float _1494 = fma(_1428, cbSceneParam._m0[_1459].w, fma(_1424, cbSceneParam._m0[_1459].z, fma(_1420, cbSceneParam._m0[_1459].y, _1416 * cbSceneParam._m0[_1459].x)));
        float _1498 = fma(_1428, cbSceneParam._m0[_1467].w, fma(_1424, cbSceneParam._m0[_1467].z, fma(_1420, cbSceneParam._m0[_1467].y, _1416 * cbSceneParam._m0[_1467].x)));
        float _1506 = fma(_1428, cbSceneParam._m0[_1483].w, fma(_1424, cbSceneParam._m0[_1483].z, fma(_1420, cbSceneParam._m0[_1483].y, _1416 * cbSceneParam._m0[_1483].x)));
        float _1511 = cbSceneParam._m0[33u].z * _1506;
        float _1513 = cbSceneParam._m0[33u].w * _1506;
        float _1516 = fma(_1428, cbSceneParam._m0[_1475].w, fma(_1424, cbSceneParam._m0[_1475].z, fma(_1420, cbSceneParam._m0[_1475].y, _1416 * cbSceneParam._m0[_1475].x))) / _1506;
        float _1564 = (cbSceneParam._m0[33u].x - sqrt(((_1430 * _1430) + (_1429 * _1429)) + (_1431 * _1431))) * cbSceneParam._m0[33u].y;
        float _3582 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1571 = (isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1511 + _1494) / _1506, (_1513 + _1498) / _1506), _1516), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1513 + _1494) / _1506, (_1498 - _1511) / _1506), _1516), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1494 - _1511) / _1506, (_1498 - _1513) / _1506), _1516), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1494 - _1513) / _1506, (_1511 + _1498) / _1506), _1516), 0.0)).x), vec4(0.25)));
        _1578 = 1.0 - (_1571 * cbSceneParam._m0[34u].x);
        _1579 = 1.0 - (_1571 * cbSceneParam._m0[34u].y);
        _1580 = 1.0 - (_1571 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1578 = 1.0;
        _1579 = 1.0;
        _1580 = 1.0;
    }
    float _1644;
    float _1646;
    float _1648;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1632 = fma(_1428, cbSceneParam._m0[63u].w, fma(_1424, cbSceneParam._m0[63u].z, fma(_1420, cbSceneParam._m0[63u].y, _1416 * cbSceneParam._m0[63u].x)));
        float _1633 = fma(_1428, cbSceneParam._m0[60u].w, fma(_1424, cbSceneParam._m0[60u].z, fma(_1420, cbSceneParam._m0[60u].y, _1416 * cbSceneParam._m0[60u].x))) / _1632;
        float _1634 = fma(_1428, cbSceneParam._m0[61u].w, fma(_1424, cbSceneParam._m0[61u].z, fma(_1420, cbSceneParam._m0[61u].y, _1416 * cbSceneParam._m0[61u].x))) / _1632;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1633 >= cbSceneParam._m0[64u].x) && (_1634 >= cbSceneParam._m0[64u].y)) && (_1633 <= cbSceneParam._m0[64u].z)) && (_1634 <= cbSceneParam._m0[64u].w))
        {
            float _1774 = fma(_1428, cbSceneParam._m0[62u].w, fma(_1424, cbSceneParam._m0[62u].z, fma(_1420, cbSceneParam._m0[62u].y, _1416 * cbSceneParam._m0[62u].x))) / _1632;
            float _1778 = isnan(cbSceneParam._m0[41u].w) ? _1774 : (isnan(_1774) ? cbSceneParam._m0[41u].w : max(_1774, cbSceneParam._m0[41u].w));
            float _1821 = (cbSceneParam._m0[33u].x - sqrt(((_1430 * _1430) + (_1429 * _1429)) + (_1431 * _1431))) * cbSceneParam._m0[33u].y;
            float _3598 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
            float _1828 = (isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1633, cbSceneParam._m0[33u].w + _1634), _1778), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1633, _1634 - cbSceneParam._m0[33u].z), _1778), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1633 - cbSceneParam._m0[33u].z, _1634 - cbSceneParam._m0[33u].w), _1778), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1633 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1634), _1778), 0.0)).x), vec4(0.25)));
            float _1832 = 1.0 - (_1828 * cbSceneParam._m0[34u].x);
            float _1833 = 1.0 - (_1828 * cbSceneParam._m0[34u].y);
            float _1834 = 1.0 - (_1828 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_1833) ? _1579 : (isnan(_1579) ? _1833 : min(_1579, _1833));
            frontier_phi_36_35_ladder_1 = isnan(_1834) ? _1580 : (isnan(_1580) ? _1834 : min(_1580, _1834));
            frontier_phi_36_35_ladder_2 = isnan(_1832) ? _1578 : (isnan(_1578) ? _1832 : min(_1578, _1832));
        }
        else
        {
            frontier_phi_36_35_ladder = _1579;
            frontier_phi_36_35_ladder_1 = _1580;
            frontier_phi_36_35_ladder_2 = _1578;
        }
        _1644 = frontier_phi_36_35_ladder_2;
        _1646 = frontier_phi_36_35_ladder;
        _1648 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1644 = _1578;
        _1646 = _1579;
        _1648 = _1580;
    }
    uvec4 _1653 = floatBitsToUint(cbInstanceData._m0[_356 + 5u]);
    uint _1655 = _1653.x * 14u;
    uint _1656 = _1655 + 13u;
    float _1663 = _382 + (-1.0);
    float _1669 = (cbLight._m0[_1656].x * _1663) + 1.0;
    float _1670 = (cbLight._m0[_1656].y * _1663) + 1.0;
    float _1671 = (cbLight._m0[_1656].z * _1663) + 1.0;
    float _1672 = (cbLight._m0[_1656].w * _1663) + 1.0;
    uint _1673 = _1655 + 5u;
    float _1679 = isnan(1.0) ? _1670 : (isnan(_1670) ? 1.0 : min(_1670, 1.0));
    uint _1683 = _1655 + 4u;
    float _1693 = isnan(1.0) ? _1669 : (isnan(_1669) ? 1.0 : min(_1669, 1.0));
    uint _1697 = _1655 | 1u;
    float _1708 = dot(vec3(cbLight._m0[_1655].xyz), vec3(_226, _227, _228));
    float _1711 = dot(vec3(cbLight._m0[_1697].xyz), vec3(_226, _227, _228));
    float _3634 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
    float _3645 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
    float _1716 = (isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0))) * 0.3183098733425140380859375;
    float _1718 = (isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0))) * 0.3183098733425140380859375;
    float _1725 = ((cbLight._m0[_1673].x * _1679) * _1718) + (((cbLight._m0[_1683].x * _1644) * _1693) * _1716);
    float _1726 = ((_1679 * cbLight._m0[_1673].y) * _1718) + (((cbLight._m0[_1683].y * _1646) * _1693) * _1716);
    float _1727 = ((_1679 * cbLight._m0[_1673].z) * _1718) + (((cbLight._m0[_1683].z * _1648) * _1693) * _1716);
    uvec4 _1731 = floatBitsToUint(cbLight._m0[_1655 + 12u]);
    bool _1733 = _1731.x == 0u;
    float _1835;
    float _1837;
    float _1839;
    if (_1733)
    {
        _1835 = _1725;
        _1837 = _1726;
        _1839 = _1727;
    }
    else
    {
        uint _1843 = _1655 + 6u;
        float _1859 = (dot(vec3(cbLight._m0[_1655 + 2u].xyz), vec3(_226, _227, _228)) * 0.5) + 0.5;
        float _1860 = _1859 * _1859;
        float _3656 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
        float _1861 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
        float _1862 = isnan(1.0) ? _1671 : (isnan(_1671) ? 1.0 : min(_1671, 1.0));
        _1835 = (((cbLight._m0[_1843].x * 0.3183098733425140380859375) * _1861) * _1862) + _1725;
        _1837 = (((cbLight._m0[_1843].y * 0.3183098733425140380859375) * _1861) * _1862) + _1726;
        _1839 = (((cbLight._m0[_1843].z * 0.3183098733425140380859375) * _1861) * _1862) + _1727;
    }
    bool _1842 = _1731.y == 0u;
    float _1897;
    float _1899;
    float _1901;
    if (_1842)
    {
        _1897 = _1835;
        _1899 = _1837;
        _1901 = _1839;
    }
    else
    {
        uint _2005 = _1655 + 7u;
        float _2021 = (dot(vec3(cbLight._m0[_1655 + 3u].xyz), vec3(_226, _227, _228)) * 0.5) + 0.5;
        float _2022 = _2021 * _2021;
        float _3672 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
        float _2023 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
        float _2024 = isnan(1.0) ? _1672 : (isnan(_1672) ? 1.0 : min(_1672, 1.0));
        _1897 = (((cbLight._m0[_2005].x * 0.3183098733425140380859375) * _2023) * _2024) + _1835;
        _1899 = (((cbLight._m0[_2005].y * 0.3183098733425140380859375) * _2023) * _2024) + _1837;
        _1901 = (((cbLight._m0[_2005].z * 0.3183098733425140380859375) * _2023) * _2024) + _1839;
    }
    uint _1903 = _1655 + 8u;
    float _1909 = cbLight._m0[_1655].x + _307;
    float _1910 = cbLight._m0[_1655].y + _308;
    float _1911 = cbLight._m0[_1655].z + _309;
    float _1915 = inversesqrt(dot(vec3(_1909, _1910, _1911), vec3(_1909, _1910, _1911)));
    float _1919 = dot(vec3(_226, _227, _228), vec3(cbLight._m0[_1655].xyz));
    float _3688 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
    float _1922 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
    float _3699 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _1923 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
    float _1924 = dot(vec3(cbLight._m0[_1655].xyz), vec3(_1909 * _1915, _1910 * _1915, _1911 * _1915));
    float _3710 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
    float _1935 = (exp2(log2(1.0 - (isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1941 = (0.5 / ((_1922 + 9.9999999392252902907785028219223e-09) + _1923)) * _1922;
    float _3721 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
    float _1943 = (isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0))) * 0.31831014156341552734375;
    uint _1957 = _1655 + 9u;
    float _1963 = cbLight._m0[_1697].x + _307;
    float _1964 = cbLight._m0[_1697].y + _308;
    float _1965 = cbLight._m0[_1697].z + _309;
    float _1969 = inversesqrt(dot(vec3(_1963, _1964, _1965), vec3(_1963, _1964, _1965)));
    float _1973 = dot(vec3(_226, _227, _228), vec3(cbLight._m0[_1697].xyz));
    float _3732 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
    float _1976 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
    float _1977 = dot(vec3(cbLight._m0[_1697].xyz), vec3(_1963 * _1969, _1964 * _1969, _1965 * _1969));
    float _3743 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
    float _1986 = (exp2(log2(1.0 - (isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1990 = (0.5 / ((_1976 + 9.9999999392252902907785028219223e-09) + _1923)) * _1976;
    float _3754 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
    float _1992 = (isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0))) * 0.31831014156341552734375;
    float _2002 = (((_1986 * cbLight._m0[_1957].x) * _1992) * _1679) + ((((cbLight._m0[_1903].x * _1644) * _1935) * _1943) * _1693);
    float _2003 = (((_1986 * cbLight._m0[_1957].y) * _1992) * _1679) + ((((cbLight._m0[_1903].y * _1646) * _1935) * _1943) * _1693);
    float _2004 = (((_1986 * cbLight._m0[_1957].z) * _1992) * _1679) + ((((cbLight._m0[_1903].z * _1648) * _1935) * _1943) * _1693);
    float _2060;
    float _2062;
    float _2064;
    if (_1733)
    {
        _2060 = _2002;
        _2062 = _2003;
        _2064 = _2004;
    }
    else
    {
        uint _2066 = _1655 + 10u;
        uint _2072 = _1655 + 2u;
        float _2078 = cbLight._m0[_2072].x + _307;
        float _2079 = cbLight._m0[_2072].y + _308;
        float _2080 = cbLight._m0[_2072].z + _309;
        float _2084 = inversesqrt(dot(vec3(_2078, _2079, _2080), vec3(_2078, _2079, _2080)));
        float _2088 = dot(vec3(_226, _227, _228), vec3(cbLight._m0[_2072].xyz));
        float _3765 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
        float _2091 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
        float _2092 = dot(vec3(cbLight._m0[_2072].xyz), vec3(_2078 * _2084, _2079 * _2084, _2080 * _2084));
        float _3776 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
        float _2101 = (exp2(log2(1.0 - (isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2105 = (0.5 / ((_2091 + 9.9999999392252902907785028219223e-09) + _1923)) * _2091;
        float _3787 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
        float _2107 = (isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0))) * 0.31831014156341552734375;
        float _2108 = isnan(1.0) ? _1671 : (isnan(_1671) ? 1.0 : min(_1671, 1.0));
        _2060 = (((_2101 * cbLight._m0[_2066].x) * _2107) * _2108) + _2002;
        _2062 = (((_2101 * cbLight._m0[_2066].y) * _2107) * _2108) + _2003;
        _2064 = (((_2101 * cbLight._m0[_2066].z) * _2107) * _2108) + _2004;
    }
    float _2139;
    float _2141;
    float _2143;
    if (_1842)
    {
        _2139 = _2060;
        _2141 = _2062;
        _2143 = _2064;
    }
    else
    {
        uint _2150 = _1655 + 11u;
        uint _2156 = _1655 + 3u;
        float _2162 = cbLight._m0[_2156].x + _307;
        float _2163 = cbLight._m0[_2156].y + _308;
        float _2164 = cbLight._m0[_2156].z + _309;
        float _2168 = inversesqrt(dot(vec3(_2162, _2163, _2164), vec3(_2162, _2163, _2164)));
        float _2172 = dot(vec3(_226, _227, _228), vec3(cbLight._m0[_2156].xyz));
        float _3803 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
        float _2175 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
        float _2176 = dot(vec3(cbLight._m0[_2156].xyz), vec3(_2162 * _2168, _2163 * _2168, _2164 * _2168));
        float _3814 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
        float _2185 = (exp2(log2(1.0 - (isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2189 = (0.5 / ((_2175 + 9.9999999392252902907785028219223e-09) + _1923)) * _2175;
        float _3825 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
        float _2191 = (isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0))) * 0.31831014156341552734375;
        float _2192 = isnan(1.0) ? _1672 : (isnan(_1672) ? 1.0 : min(_1672, 1.0));
        _2139 = (((_2185 * cbLight._m0[_2150].x) * _2191) * _2192) + _2060;
        _2141 = (((_2185 * cbLight._m0[_2150].y) * _2191) * _2192) + _2062;
        _2143 = (((_2185 * cbLight._m0[_2150].z) * _2191) * _2192) + _2064;
    }
    float _2257;
    float _2259;
    float _2261;
    float _2263;
    float _2265;
    float _2267;
    if (_1653.y == 0u)
    {
        uvec4 _2213 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2214 = _2213.x;
        uint _2225 = uint((float(_2213.y) * floor(float(uint(cbSceneParam._m0[85u].y * _316) / _2214))) + floor(float(uint(cbSceneParam._m0[85u].x * _315) / _2214)));
        float _2235 = (log2(_1431 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2236 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
        uint _2239 = uint(isnan(14.0) ? _2236 : (isnan(_2236) ? 14.0 : min(_2236, 14.0)));
        uvec4 _2244 = texelFetch(g_lightClusterGridBuffer, int(((_2239 << 2u) + (_2225 << 6u)) >> 2u));
        uint _2245 = _2244.x;
        uint _2246 = _2213.z;
        float _2353;
        float _2355;
        float _2357;
        float _2359;
        float _2361;
        float _2363;
        if (((((1u << ((_2246 >> 4u) & 15u)) + 4294967295u) & _2245) == 0u) || ((_2246 & 240u) == 0u))
        {
            _2353 = 0.0;
            _2355 = 0.0;
            _2357 = 0.0;
            _2359 = 0.0;
            _2361 = 0.0;
            _2363 = 0.0;
        }
        else
        {
            float _2354;
            float _2356;
            float _2358;
            float _2360;
            float _2362;
            float _2364;
            float _2504 = 0.0;
            float _2505 = 0.0;
            float _2506 = 0.0;
            float _2507 = 0.0;
            float _2508 = 0.0;
            float _2509 = 0.0;
            uint _2510 = 0u;
            uint _2519;
            bool _2520;
            for (;;)
            {
                _2519 = texelFetch(g_lightClassification, int((((_2239 << 5u) + (_2225 << 9u)) + (_2510 << 2u)) >> 2u)).x;
                _2520 = _2519 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2520)
                {
                    frontier_phi_68_pred = _2509;
                    frontier_phi_68_pred_1 = _2508;
                    frontier_phi_68_pred_2 = _2507;
                    frontier_phi_68_pred_3 = _2505;
                    frontier_phi_68_pred_4 = _2504;
                    frontier_phi_68_pred_5 = _2506;
                }
                else
                {
                    float _2628;
                    float _2629;
                    float _2630;
                    float _2631;
                    float _2632;
                    float _2633;
                    uint _2634;
                    _2628 = _2504;
                    _2629 = _2505;
                    _2630 = _2506;
                    _2631 = _2507;
                    _2632 = _2508;
                    _2633 = _2509;
                    _2634 = _2519;
                    float _2560;
                    float _2561;
                    float _2562;
                    float _2563;
                    float _2564;
                    float _2565;
                    for (;;)
                    {
                        uint _2638 = uint(findLSB(_2634)) + (_2510 << 5u);
                        uint _2635 = (_2634 + 4294967295u) & _2634;
                        uint _2640 = _2638 * 48u;
                        vec4 _2654 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2640)).x, texelFetch(g_PointLightRenderingBuffer, int(_2640 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2640 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2640 + 3u)).x));
                        uint _2660 = (_2638 * 48u) + 4u;
                        vec4 _2673 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2660)).x, texelFetch(g_PointLightRenderingBuffer, int(_2660 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2660 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2660 + 3u)).x));
                        uint _2679 = (_2638 * 48u) + 8u;
                        vec3 _2690 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2679)).x, texelFetch(g_PointLightRenderingBuffer, int(_2679 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2679 + 2u)).x));
                        float _2694 = _2654.x - _1429;
                        float _2695 = _2654.y - _1430;
                        float _2696 = _2654.z - _1431;
                        float _2697 = dot(vec3(_2694, _2695, _2696), vec3(_2694, _2695, _2696));
                        float _2700 = inversesqrt(_2697);
                        float _2709 = 1.0 - (_2697 * _2654.w);
                        float _3851 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
                        float _2710 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
                        float _2711 = sqrt(_2697) * _2673.w;
                        float _2714 = 1.39999997615814208984375 / (_2711 + 1.39999997615814208984375);
                        float _2715 = _2714 * _2714;
                        float _2718 = ((1.0 - _2715) * dot(vec3(_337, _340, _343), vec3(_2700 * _2694, _2700 * _2695, _2700 * _2696))) + _2715;
                        float _2721 = _2711 * _2711;
                        float _2725 = ((isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0))) * _2710) / ((_2721 * 0.699999988079071044921875) + 1.0);
                        float _2729 = (-0.0) - _1429;
                        float _2730 = (-0.0) - _1430;
                        float _2731 = (-0.0) - _1431;
                        float _2735 = inversesqrt(dot(vec3(_2729, _2730, _2731), vec3(_2729, _2730, _2731)));
                        float _2739 = dot(vec3(_337, _340, _343), vec3(_2735 * _2729, _2735 * _2730, _2735 * _2731));
                        float _3867 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
                        float _3878 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
                        float _2743 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
                        float _2747 = (0.5 / (((isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))) + 9.9999999392252902907785028219223e-09) + _2743)) * _2743;
                        float _3889 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
                        float _2756 = (((isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * 3.1415927410125732421875) / ((_2721 * 2.1991131305694580078125) + 3.141590118408203125)) * _2710;
                        _2563 = (_2725 * _2673.x) + _2631;
                        _2564 = (_2725 * _2673.y) + _2632;
                        _2565 = (_2725 * _2673.z) + _2633;
                        _2560 = (_2756 * _2690.x) + _2628;
                        _2561 = (_2756 * _2690.y) + _2629;
                        _2562 = (_2756 * _2690.z) + _2630;
                        if (_2635 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2628 = _2560;
                            _2629 = _2561;
                            _2630 = _2562;
                            _2631 = _2563;
                            _2632 = _2564;
                            _2633 = _2565;
                            _2634 = _2635;
                        }
                    }
                    frontier_phi_68_pred = _2565;
                    frontier_phi_68_pred_1 = _2564;
                    frontier_phi_68_pred_2 = _2563;
                    frontier_phi_68_pred_3 = _2561;
                    frontier_phi_68_pred_4 = _2560;
                    frontier_phi_68_pred_5 = _2562;
                }
                _2364 = frontier_phi_68_pred;
                _2362 = frontier_phi_68_pred_1;
                _2360 = frontier_phi_68_pred_2;
                _2356 = frontier_phi_68_pred_3;
                _2354 = frontier_phi_68_pred_4;
                _2358 = frontier_phi_68_pred_5;
                uint _2511 = _2510 + 1u;
                if (_2511 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2504 = _2354;
                    _2505 = _2356;
                    _2506 = _2358;
                    _2507 = _2360;
                    _2508 = _2362;
                    _2509 = _2364;
                    _2510 = _2511;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2353 = _2354;
            _2355 = _2356;
            _2357 = _2358;
            _2359 = _2360;
            _2361 = _2362;
            _2363 = _2364;
        }
        uvec4 _2367 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2368 = _2367.z;
        uint _2370 = (_2368 >> 8u) & 15u;
        float _2475;
        float _2477;
        float _2479;
        float _2481;
        float _2483;
        float _2485;
        if (((4294967295u << _2370) & _2245) == 0u)
        {
            _2475 = _2353;
            _2477 = _2355;
            _2479 = _2357;
            _2481 = _2359;
            _2483 = _2361;
            _2485 = _2363;
        }
        else
        {
            float _2500 = inversesqrt(dot(vec3(_1429, _1430, _1431), vec3(_1429, _1430, _1431)));
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2370 < ((_2368 >> 12u) & 15u))
            {
                float _2476;
                float _2478;
                float _2480;
                float _2482;
                float _2484;
                float _2486;
                float _2611 = _2353;
                float _2612 = _2355;
                float _2613 = _2357;
                float _2614 = _2359;
                float _2615 = _2361;
                float _2616 = _2363;
                uint _2617 = _2370;
                uint _2626;
                bool _2627;
                for (;;)
                {
                    _2626 = texelFetch(g_lightClassification, int((((_2239 << 5u) + (_2225 << 9u)) + (_2617 << 2u)) >> 2u)).x;
                    _2627 = _2626 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2627)
                    {
                        frontier_phi_74_pred = _2613;
                        frontier_phi_74_pred_1 = _2612;
                        frontier_phi_74_pred_2 = _2611;
                        frontier_phi_74_pred_3 = _2616;
                        frontier_phi_74_pred_4 = _2615;
                        frontier_phi_74_pred_5 = _2614;
                    }
                    else
                    {
                        float _2761;
                        float _2762;
                        float _2763;
                        float _2764;
                        float _2765;
                        float _2766;
                        float _3013;
                        float _3014;
                        float _3015;
                        float _3016;
                        float _3017;
                        float _3018;
                        float _2774 = _2611;
                        float _2775 = _2612;
                        float _2776 = _2613;
                        float _2777 = _2614;
                        float _2778 = _2615;
                        float _2779 = _2616;
                        uint _2780 = _2626;
                        uint _2781;
                        vec4 _2806;
                        float _2807;
                        vec4 _2822;
                        vec3 _2834;
                        vec4 _2850;
                        vec4 _2866;
                        float _2913;
                        bool _2914;
                        for (;;)
                        {
                            uint _2791 = ((_2617 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2780));
                            _2781 = (_2780 + 4294967295u) & _2780;
                            uint _2793 = _2791 * 40u;
                            _2806 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2793)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2793 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2793 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2793 + 3u)).x));
                            _2807 = _2806.w;
                            uint _2809 = (_2791 * 40u) + 4u;
                            _2822 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2809)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2809 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2809 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2809 + 3u)).x));
                            uint _2824 = (_2791 * 40u) + 8u;
                            _2834 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2824)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2824 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2824 + 2u)).x));
                            uint _2837 = (_2791 * 40u) + 16u;
                            _2850 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2837)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2837 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2837 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2837 + 3u)).x));
                            uint _2853 = (_2791 * 40u) + 20u;
                            _2866 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2853)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2853 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2853 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2853 + 3u)).x));
                            uint _2869 = (_2791 * 40u) + 24u;
                            vec4 _2882 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2869)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2869 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2869 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2869 + 3u)).x));
                            uint _2888 = (_2791 * 40u) + 28u;
                            vec4 _2901 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2888)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2888 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2888 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2888 + 3u)).x));
                            _2913 = fma(_1431, _2901.z, fma(_1430, _2901.y, _2901.x * _1429)) + _2901.w;
                            _2914 = !((fma(_1431, _2882.z, fma(_1430, _2882.y, _2882.x * _1429)) + _2882.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_2914)
                            {
                                float _2941 = _2806.x - _1429;
                                float _2942 = _2806.y - _1430;
                                float _2943 = _2806.z - _1431;
                                float _2944 = dot(vec3(_2941, _2942, _2943), vec3(_2941, _2942, _2943));
                                float _2947 = inversesqrt(_2944);
                                float _2948 = _2947 * _2941;
                                float _2949 = _2947 * _2942;
                                float _2950 = _2947 * _2943;
                                float _2954 = 1.0 - (_2944 / (_2807 * _2807));
                                float _3900 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0));
                                float _2955 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
                                float _2959 = sqrt(_2944) * _2822.w;
                                float _2961 = 1.39999997615814208984375 / (_2959 + 1.39999997615814208984375);
                                float _2962 = _2961 * _2961;
                                float _2963 = 1.0 - _2962;
                                float _2965 = (_2963 * dot(vec3(_2948, _2949, _2950), vec3(_337, _340, _343))) + _2962;
                                float _2968 = _2959 * _2959;
                                float _2972 = (fma(_1431, _2850.z, fma(_1430, _2850.y, _2850.x * _1429)) + _2850.w) / _2913;
                                float _2973 = (fma(_1431, _2866.z, fma(_1430, _2866.y, _2866.x * _1429)) + _2866.w) / _2913;
                                float _2977 = 1.0 - dot(vec2(_2972, _2973), vec2(_2972, _2973));
                                float _3916 = isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0));
                                float _2978 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
                                float _2979 = _2978 * (((isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0))) * _2955) / ((_2968 * 0.699999988079071044921875) + 1.0));
                                float _2989 = dot(vec3(_337, _340, _343), vec3((-0.0) - (_1429 * _2500), (-0.0) - (_1430 * _2500), (-0.0) - (_1431 * _2500)));
                                float _3927 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0));
                                float _2997 = (_2963 * dot(vec3(_337, _340, _343), vec3(_2948, _2949, _2950))) + _2962;
                                float _3938 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
                                float _2998 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
                                float _3002 = (0.5 / (((isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0))) + 9.9999999392252902907785028219223e-09) + _2998)) * _2998;
                                float _3949 = isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : max(_3002, 0.0));
                                float _3009 = (_2978 * _2955) * (((isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))) * 3.1415927410125732421875) / ((_2968 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_80_pred = _3009 * _2834.z;
                                frontier_phi_80_pred_1 = _3009 * _2834.y;
                                frontier_phi_80_pred_2 = _3009 * _2834.x;
                                frontier_phi_80_pred_3 = _2979 * _2822.z;
                                frontier_phi_80_pred_4 = _2979 * _2822.y;
                                frontier_phi_80_pred_5 = _2979 * _2822.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3015 = frontier_phi_80_pred;
                            _3014 = frontier_phi_80_pred_1;
                            _3013 = frontier_phi_80_pred_2;
                            _3018 = frontier_phi_80_pred_3;
                            _3017 = frontier_phi_80_pred_4;
                            _3016 = frontier_phi_80_pred_5;
                            _2764 = _3016 + _2777;
                            _2765 = _3017 + _2778;
                            _2766 = _3018 + _2779;
                            _2761 = _3013 + _2774;
                            _2762 = _3014 + _2775;
                            _2763 = _3015 + _2776;
                            if (_2781 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2774 = _2761;
                                _2775 = _2762;
                                _2776 = _2763;
                                _2777 = _2764;
                                _2778 = _2765;
                                _2779 = _2766;
                                _2780 = _2781;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _2763;
                        frontier_phi_74_pred_1 = _2762;
                        frontier_phi_74_pred_2 = _2761;
                        frontier_phi_74_pred_3 = _2766;
                        frontier_phi_74_pred_4 = _2765;
                        frontier_phi_74_pred_5 = _2764;
                    }
                    _2480 = frontier_phi_74_pred;
                    _2478 = frontier_phi_74_pred_1;
                    _2476 = frontier_phi_74_pred_2;
                    _2486 = frontier_phi_74_pred_3;
                    _2484 = frontier_phi_74_pred_4;
                    _2482 = frontier_phi_74_pred_5;
                    uint _2618 = _2617 + 1u;
                    if (_2618 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2611 = _2476;
                        _2612 = _2478;
                        _2613 = _2480;
                        _2614 = _2482;
                        _2615 = _2484;
                        _2616 = _2486;
                        _2617 = _2618;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2484;
                frontier_phi_62_63_ladder_1 = _2482;
                frontier_phi_62_63_ladder_2 = _2480;
                frontier_phi_62_63_ladder_3 = _2486;
                frontier_phi_62_63_ladder_4 = _2478;
                frontier_phi_62_63_ladder_5 = _2476;
            }
            else
            {
                frontier_phi_62_63_ladder = _2361;
                frontier_phi_62_63_ladder_1 = _2359;
                frontier_phi_62_63_ladder_2 = _2357;
                frontier_phi_62_63_ladder_3 = _2363;
                frontier_phi_62_63_ladder_4 = _2355;
                frontier_phi_62_63_ladder_5 = _2353;
            }
            _2475 = frontier_phi_62_63_ladder_5;
            _2477 = frontier_phi_62_63_ladder_4;
            _2479 = frontier_phi_62_63_ladder_2;
            _2481 = frontier_phi_62_63_ladder_1;
            _2483 = frontier_phi_62_63_ladder;
            _2485 = frontier_phi_62_63_ladder_3;
        }
        float _2490 = isnan(1.0) ? _382 : (isnan(_382) ? 1.0 : min(_382, 1.0));
        _2257 = (_2490 * _2481) + _1897;
        _2259 = (_2490 * _2483) + _1899;
        _2261 = (_2490 * _2485) + _1901;
        _2263 = ((_2475 * 0.039999999105930328369140625) * _2490) + _2139;
        _2265 = ((_2477 * 0.039999999105930328369140625) * _2490) + _2141;
        _2267 = ((_2479 * 0.039999999105930328369140625) * _2490) + _2143;
    }
    else
    {
        _2257 = _1897;
        _2259 = _1899;
        _2261 = _1901;
        _2263 = _2139;
        _2265 = _2141;
        _2267 = _2143;
    }
    uint _2273 = _358 + uint(cbMatDynParam._m0[0u].w);
    float _2279 = (_214.x * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2273].x;
    float _2280 = (_214.y * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2273].y;
    float _2281 = (_214.z * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2273].z;
    float _3965 = isnan(0.0) ? _368 : (isnan(_368) ? 0.0 : max(_368, 0.0));
    float _3976 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _3987 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _2298 = (((isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0))) * (_2257 + ((isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0))) * _382))) + ((_2263 + ((isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0))) * _1161)) * cbPerFrame._m0[3u].x)) + _2279;
    float _2300 = (_2280 + ((_2265 + ((isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0))) * _1161)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0))) * (_2259 + ((isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0))) * _382)));
    float _2302 = (_2281 + ((_2267 + ((isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0))) * _1161)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))) * (_2261 + ((isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0))) * _382)));
    float _4013 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2315 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
    uint _2316 = _356 + 6u;
    float _2324 = _315 / cbSceneParam._m0[86u].x;
    float _2325 = _316 / cbSceneParam._m0[86u].y;
    vec4 _2339 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2324, _2325, (log2((isnan(cbSceneParam._m0[77u].w) ? _248 : (isnan(_248) ? cbSceneParam._m0[77u].w : min(_248, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2341 = _2339.x;
    float _2342 = _2339.y;
    float _2343 = _2339.z;
    float _2344 = _2339.w;
    float _2415;
    float _2417;
    float _2419;
    float _2421;
    if (_248 > cbSceneParam._m0[78u].w)
    {
        float _2378 = isnan(_248) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _248 : min(cbSceneParam._m0[80u].w, _248));
        float _2379 = _2378 / _248;
        float _2390 = _2379 * _300;
        float _2391 = _301 * _2379;
        float _2392 = (-0.0) - _2391;
        float _2393 = _2379 * _302;
        float _2395 = (cbSceneParam._m0[77u].w * _2392) / _2378;
        float _2396 = _2395 + cbSceneParam._m0[79u].w;
        float _2397 = cbSceneParam._m0[79u].w - _2391;
        float _2403 = sqrt(((_2390 * _2390) + (_2391 * _2391)) + (_2393 * _2393));
        float _2406 = (1.0 - (cbSceneParam._m0[77u].w / _2378)) * _2403;
        float _2411 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2413 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2573;
        if (abs((_2392 - _2395) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2573 = ((((_2396 > 0.0) ? exp2(_2411 * _2396) : (2.0 - exp2(_2413 * _2396))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2406;
        }
        else
        {
            float _2533 = 1.0 / cbSceneParam._m0[80u].x;
            float _2534 = isnan(_2397) ? _2396 : (isnan(_2396) ? _2397 : max(_2396, _2397));
            float _2535 = isnan(_2397) ? _2396 : (isnan(_2396) ? _2397 : min(_2396, _2397));
            float _2544 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : min(_2534, 0.0));
            float _2545 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : min(_2535, 0.0));
            _2573 = ((abs(_2403 / _2392) * cbSceneParam._m0[80u].y) * ((((_2544 - _2545) * 2.0) - ((exp2(_2411 * (isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0)))) - exp2(_2411 * (isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0))))) * _2533)) - ((exp2(_2413 * _2544) - exp2(_2413 * _2545)) * _2533))) + (_2406 * cbSceneParam._m0[80u].z);
        }
        vec4 _2575 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2324, _2325, 1.0), 0.0);
        float _2584 = exp2((_2573 * (-1.44269502162933349609375)) * (1.0 - _2575.w));
        float _2585 = log2(_2584);
        float _2601 = log2(_2344);
        _2415 = (exp2(_2601 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2585 * cbSceneParam._m0[78u].x)) * _2575.x) / cbSceneParam._m0[78u].x)) + _2341;
        _2417 = (exp2(_2601 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2585 * cbSceneParam._m0[78u].y)) * _2575.y) / cbSceneParam._m0[78u].y)) + _2342;
        _2419 = (exp2(_2601 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2585 * cbSceneParam._m0[78u].z)) * _2575.z) / cbSceneParam._m0[78u].z)) + _2343;
        _2421 = _2584 * _2344;
    }
    else
    {
        _2415 = _2341;
        _2417 = _2342;
        _2419 = _2343;
        _2421 = _2344;
    }
    float _2433 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2434 = _2433 == 3.0;
    float _2436 = log2(_2421);
    float _2440 = exp2(_2436 * cbSceneParam._m0[78u].x);
    float _2441 = exp2(_2436 * cbSceneParam._m0[78u].y);
    float _2442 = exp2(_2436 * cbSceneParam._m0[78u].z);
    float _2443 = _2440 * (isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0)));
    float _2444 = _2441 * (isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0)));
    float _2445 = _2442 * (isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0)));
    float _2454 = (_2433 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2454 * (_2434 ? _2443 : (_2443 + (cbSceneParam._m0[72u].w * _2415)));
    SV_Target.y = _2454 * (_2434 ? _2444 : (_2444 + (cbSceneParam._m0[72u].w * _2417)));
    SV_Target.z = _2454 * (_2434 ? _2445 : (_2445 + (cbSceneParam._m0[72u].w * _2419)));
    SV_Target.w = cbInstanceData._m0[_2316].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2279) * _2315) * _2440) * _2454;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2280) * _2315) * _2441) * _2454;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2281) * _2315) * _2442) * _2454;
    SV_Target_1.w = cbInstanceData._m0[_2316].w;
}


