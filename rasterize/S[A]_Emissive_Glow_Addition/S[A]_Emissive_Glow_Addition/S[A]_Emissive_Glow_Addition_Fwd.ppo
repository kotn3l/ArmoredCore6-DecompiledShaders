#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_A_Emissive_Glow_Addition_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_A_Emissive_Glow_Addition_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _722;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _165 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _166 = _165 * NORMAL.x;
    float _167 = _165 * NORMAL.y;
    float _168 = _165 * NORMAL.z;
    float _173;
    float _174;
    float _175;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _173 = (-0.0) - _166;
        _174 = (-0.0) - _167;
        _175 = (-0.0) - _168;
    }
    else
    {
        _173 = _166;
        _174 = _167;
        _175 = _168;
    }
    vec4 _189 = texture(sampler2D(S_A_Emissive_Glow_Addition_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _192 = _189.x;
    float _193 = _189.y;
    float _194 = _189.z;
    vec4 _210 = texture(sampler2D(S_A_Emissive_Glow_Addition_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _221 = inversesqrt(dot(vec3(_173, _174, _175), vec3(_173, _174, _175)));
    float _222 = _221 * _173;
    float _223 = _221 * _174;
    float _224 = _221 * _175;
    float _2870 = isnan(0.0) ? _192 : (isnan(_192) ? 0.0 : max(_192, 0.0));
    float _2881 = isnan(0.0) ? _193 : (isnan(_193) ? 0.0 : max(_193, 0.0));
    float _2892 = isnan(0.0) ? _194 : (isnan(_194) ? 0.0 : max(_194, 0.0));
    float _244 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _286 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _296 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _286);
    float _297 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _286);
    float _298 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _286);
    float _302 = inversesqrt(dot(vec3(_296, _297, _298), vec3(_296, _297, _298)));
    float _303 = _296 * _302;
    float _304 = _297 * _302;
    float _305 = _298 * _302;
    float _311 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _312 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _333 = fma(_224, cbSceneParam._m0[5u].z, fma(_223, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _222));
    float _336 = fma(_224, cbSceneParam._m0[6u].z, fma(_223, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _222));
    float _339 = fma(_224, cbSceneParam._m0[7u].z, fma(_223, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _222));
    uint _352 = uint(roundEven(NORMAL.w)) * 13u;
    uint _354 = _352 + 9u;
    uint _355 = _354 + uint(cbMatDynParam._m0[0u].w);
    float _361 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2870 : (isnan(_2870) ? 1.0 : min(_2870, 1.0)))) * cbInstanceData._m0[_355].x;
    float _362 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2881 : (isnan(_2881) ? 1.0 : min(_2881, 1.0)))) * cbInstanceData._m0[_355].y;
    float _363 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2892 : (isnan(_2892) ? 1.0 : min(_2892, 1.0)))) * cbInstanceData._m0[_355].z;
    float _2903 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _364 = isnan(1.0) ? _2903 : (isnan(_2903) ? 1.0 : min(_2903, 1.0));
    float _2914 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    float _365 = isnan(1.0) ? _2914 : (isnan(_2914) ? 1.0 : min(_2914, 1.0));
    float _2925 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _366 = isnan(1.0) ? _2925 : (isnan(_2925) ? 1.0 : min(_2925, 1.0));
    vec4 _375 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _311, cbSceneParam._m0[86u].y * _312));
    float _378 = _375.x * TEXCOORD.z;
    float _379 = dot(vec3(_222, _223, _224), vec3(_303, _304, _305));
    float _382 = _379 * 2.0;
    float _387 = (_382 * _222) - _303;
    float _388 = (_382 * _223) - _304;
    float _389 = (_382 * _224) - _305;
    float _411 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _415 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _419 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _721;
    float _723;
    float _724;
    float _725;
    float _726;
    float _727;
    float _728;
    float _729;
    float _730;
    float _731;
    float _732;
    float _733;
    float _734;
    float _735;
    float _736;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _446 = fma(_419, cbModelParam._m0[26u].z, fma(_415, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _411));
        float _450 = fma(_419, cbModelParam._m0[27u].z, fma(_415, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _411));
        float _454 = fma(_419, cbModelParam._m0[28u].z, fma(_415, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _411));
        float _479 = _411 + _222;
        float _480 = _415 + _223;
        float _481 = _419 + _224;
        float _491 = fma(_481, cbModelParam._m0[26u].z, fma(_480, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _479)) - _446;
        float _492 = fma(_481, cbModelParam._m0[27u].z, fma(_480, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _479)) - _450;
        float _493 = fma(_481, cbModelParam._m0[28u].z, fma(_480, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _479)) - _454;
        float _497 = inversesqrt(dot(vec3(_491, _492, _493), vec3(_491, _492, _493)));
        float _510 = ((_497 * _491) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_446 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _511 = ((_497 * _492) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_450 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _512 = ((_497 * _493) / cbModelParam._m0[34u].z) + ((((((_454 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _515 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_510, _511, _512), 0.0);
        vec4 _522 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_510, _511, _512), 0.0);
        vec4 _529 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_510, _511, _512), 0.0);
        vec4 _536 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_510, _511, _512), 0.0);
        float _549 = exp2((_515.w + (-0.5)) * 20.0) * 2.0;
        float _550 = _549 * (_515.x + (-0.5));
        float _551 = _549 * (_515.y + (-0.5));
        float _552 = _549 * (_515.z + (-0.5));
        float _559 = exp2((_522.w + (-0.5)) * 20.0) * 2.0;
        float _560 = _559 * (_522.x + (-0.5));
        float _561 = _559 * (_522.y + (-0.5));
        float _562 = _559 * (_522.z + (-0.5));
        float _569 = exp2((_529.w + (-0.5)) * 20.0) * 2.0;
        float _570 = _569 * (_529.x + (-0.5));
        float _571 = _569 * (_529.y + (-0.5));
        float _572 = _569 * (_529.z + (-0.5));
        float _579 = exp2((_536.w + (-0.5)) * 20.0) * 2.0;
        float _580 = _579 * (_536.x + (-0.5));
        float _581 = _579 * (_536.y + (-0.5));
        float _582 = _579 * (_536.z + (-0.5));
        float _583 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
        float _584 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
        float _585 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
        float _586 = _550 * 0.5;
        float _587 = _560 * 0.5;
        float _588 = _570 * 0.5;
        float _589 = dot(vec3(_586, _587, _588), vec3(_586, _587, _588));
        float _594 = (_589 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_589);
        float _603 = (dot(vec3(_222, _223, _224), vec3(_594 * _586, _594 * _587, _594 * _588)) + 1.0) * 0.5;
        float _2951 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
        float _613 = sqrt(((_587 * _587) + (_586 * _586)) + (_588 * _588)) / (_583 + 9.9999997473787516355514526367188e-06);
        float _2962 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
        float _614 = isnan(1.0) ? _2962 : (isnan(_2962) ? 1.0 : min(_2962, 1.0));
        float _615 = _614 * 2.0;
        float _619 = (1.0 - _614) / (_614 + 1.0);
        float _2973 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
        float _620 = isnan(1.0) ? _2973 : (isnan(_2973) ? 1.0 : min(_2973, 1.0));
        float _629 = ((((1.0 - _620) * (_615 + 2.0)) * exp2(log2(isnan(1.0) ? _2951 : (isnan(_2951) ? 1.0 : min(_2951, 1.0))) * (_615 + 1.0))) + _620) * _583;
        float _630 = _551 * 0.5;
        float _631 = _561 * 0.5;
        float _632 = _571 * 0.5;
        float _633 = dot(vec3(_630, _631, _632), vec3(_630, _631, _632));
        float _638 = (_633 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_633);
        float _646 = (dot(vec3(_222, _223, _224), vec3(_638 * _630, _638 * _631, _638 * _632)) + 1.0) * 0.5;
        float _2984 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
        float _655 = sqrt(((_631 * _631) + (_630 * _630)) + (_632 * _632)) / (_584 + 9.9999997473787516355514526367188e-06);
        float _2995 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
        float _656 = isnan(1.0) ? _2995 : (isnan(_2995) ? 1.0 : min(_2995, 1.0));
        float _657 = _656 * 2.0;
        float _661 = (1.0 - _656) / (_656 + 1.0);
        float _3006 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
        float _662 = isnan(1.0) ? _3006 : (isnan(_3006) ? 1.0 : min(_3006, 1.0));
        float _671 = ((((1.0 - _662) * (_657 + 2.0)) * exp2(log2(isnan(1.0) ? _2984 : (isnan(_2984) ? 1.0 : min(_2984, 1.0))) * (_657 + 1.0))) + _662) * _584;
        float _672 = _552 * 0.5;
        float _673 = _562 * 0.5;
        float _674 = _572 * 0.5;
        float _675 = dot(vec3(_672, _673, _674), vec3(_672, _673, _674));
        float _680 = (_675 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_675);
        float _688 = (dot(vec3(_222, _223, _224), vec3(_680 * _672, _680 * _673, _680 * _674)) + 1.0) * 0.5;
        float _3017 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
        float _697 = sqrt(((_673 * _673) + (_672 * _672)) + (_674 * _674)) / (_585 + 9.9999997473787516355514526367188e-06);
        float _3028 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
        float _698 = isnan(1.0) ? _3028 : (isnan(_3028) ? 1.0 : min(_3028, 1.0));
        float _699 = _698 * 2.0;
        float _703 = (1.0 - _698) / (_698 + 1.0);
        float _3039 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
        float _704 = isnan(1.0) ? _3039 : (isnan(_3039) ? 1.0 : min(_3039, 1.0));
        float _713 = ((((1.0 - _704) * (_699 + 2.0)) * exp2(log2(isnan(1.0) ? _3017 : (isnan(_3017) ? 1.0 : min(_3017, 1.0))) * (_699 + 1.0))) + _704) * _585;
        _721 = _552;
        _723 = _551;
        _724 = _550;
        _725 = _562;
        _726 = _561;
        _727 = _560;
        _728 = _572;
        _729 = _571;
        _730 = _570;
        _731 = _585;
        _732 = _584;
        _733 = _583;
        _734 = cbModelParam._m0[36u].z * (isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0)));
        _735 = cbModelParam._m0[36u].z * (isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0)));
        _736 = cbModelParam._m0[36u].z * (isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0)));
    }
    else
    {
        _721 = _722;
        _723 = _722;
        _724 = _722;
        _725 = _722;
        _726 = _722;
        _727 = _722;
        _728 = _722;
        _729 = _722;
        _730 = _722;
        _731 = _722;
        _732 = _722;
        _733 = _722;
        _734 = 0.0;
        _735 = 0.0;
        _736 = 0.0;
    }
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _762 = fma(_419, cbModelParam._m0[30u].z, fma(_415, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _411));
        float _766 = fma(_419, cbModelParam._m0[31u].z, fma(_415, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _411));
        float _770 = fma(_419, cbModelParam._m0[32u].z, fma(_415, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _411));
        float _793 = _411 + _222;
        float _794 = _415 + _223;
        float _795 = _419 + _224;
        float _805 = fma(_795, cbModelParam._m0[30u].z, fma(_794, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _793)) - _762;
        float _806 = fma(_795, cbModelParam._m0[31u].z, fma(_794, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _793)) - _766;
        float _807 = fma(_795, cbModelParam._m0[32u].z, fma(_794, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _793)) - _770;
        float _811 = inversesqrt(dot(vec3(_805, _806, _807), vec3(_805, _806, _807)));
        float _824 = ((_811 * _805) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_762 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _825 = ((_811 * _806) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_766 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _826 = ((_811 * _807) / cbModelParam._m0[35u].z) + ((((((_770 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _828 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_824, _825, _826), 0.0);
        vec4 _835 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_824, _825, _826), 0.0);
        vec4 _842 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_824, _825, _826), 0.0);
        vec4 _849 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_824, _825, _826), 0.0);
        float _861 = exp2((_828.w + (-0.5)) * 20.0) * 2.0;
        float _862 = _861 * (_828.x + (-0.5));
        float _863 = _861 * (_828.y + (-0.5));
        float _864 = _861 * (_828.z + (-0.5));
        float _871 = exp2((_835.w + (-0.5)) * 20.0) * 2.0;
        float _872 = _871 * (_835.x + (-0.5));
        float _873 = _871 * (_835.y + (-0.5));
        float _874 = _871 * (_835.z + (-0.5));
        float _881 = exp2((_842.w + (-0.5)) * 20.0) * 2.0;
        float _882 = _881 * (_842.x + (-0.5));
        float _883 = _881 * (_842.y + (-0.5));
        float _884 = _881 * (_842.z + (-0.5));
        float _891 = exp2((_849.w + (-0.5)) * 20.0) * 2.0;
        float _892 = _891 * (_849.x + (-0.5));
        float _893 = _891 * (_849.y + (-0.5));
        float _894 = _891 * (_849.z + (-0.5));
        float _895 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _896 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _897 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _898 = _862 * 0.5;
        float _899 = _872 * 0.5;
        float _900 = _882 * 0.5;
        float _901 = dot(vec3(_898, _899, _900), vec3(_898, _899, _900));
        float _906 = (_901 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_901);
        float _914 = (dot(vec3(_222, _223, _224), vec3(_906 * _898, _906 * _899, _906 * _900)) + 1.0) * 0.5;
        float _3080 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _923 = sqrt(((_899 * _899) + (_898 * _898)) + (_900 * _900)) / (_895 + 9.9999997473787516355514526367188e-06);
        float _3091 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _924 = isnan(1.0) ? _3091 : (isnan(_3091) ? 1.0 : min(_3091, 1.0));
        float _925 = _924 * 2.0;
        float _929 = (1.0 - _924) / (_924 + 1.0);
        float _3102 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _930 = isnan(1.0) ? _3102 : (isnan(_3102) ? 1.0 : min(_3102, 1.0));
        float _939 = ((((1.0 - _930) * (_925 + 2.0)) * exp2(log2(isnan(1.0) ? _3080 : (isnan(_3080) ? 1.0 : min(_3080, 1.0))) * (_925 + 1.0))) + _930) * _895;
        float _940 = _863 * 0.5;
        float _941 = _873 * 0.5;
        float _942 = _883 * 0.5;
        float _943 = dot(vec3(_940, _941, _942), vec3(_940, _941, _942));
        float _948 = (_943 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_943);
        float _956 = (dot(vec3(_222, _223, _224), vec3(_948 * _940, _948 * _941, _948 * _942)) + 1.0) * 0.5;
        float _3113 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _965 = sqrt(((_941 * _941) + (_940 * _940)) + (_942 * _942)) / (_896 + 9.9999997473787516355514526367188e-06);
        float _3124 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _966 = isnan(1.0) ? _3124 : (isnan(_3124) ? 1.0 : min(_3124, 1.0));
        float _967 = _966 * 2.0;
        float _971 = (1.0 - _966) / (_966 + 1.0);
        float _3135 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _972 = isnan(1.0) ? _3135 : (isnan(_3135) ? 1.0 : min(_3135, 1.0));
        float _981 = ((((1.0 - _972) * (_967 + 2.0)) * exp2(log2(isnan(1.0) ? _3113 : (isnan(_3113) ? 1.0 : min(_3113, 1.0))) * (_967 + 1.0))) + _972) * _896;
        float _982 = _864 * 0.5;
        float _983 = _874 * 0.5;
        float _984 = _884 * 0.5;
        float _985 = dot(vec3(_982, _983, _984), vec3(_982, _983, _984));
        float _990 = (_985 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_985);
        float _998 = (dot(vec3(_222, _223, _224), vec3(_990 * _982, _990 * _983, _990 * _984)) + 1.0) * 0.5;
        float _3146 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _1007 = sqrt(((_983 * _983) + (_982 * _982)) + (_984 * _984)) / (_897 + 9.9999997473787516355514526367188e-06);
        float _3157 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1008 = isnan(1.0) ? _3157 : (isnan(_3157) ? 1.0 : min(_3157, 1.0));
        float _1009 = _1008 * 2.0;
        float _1013 = (1.0 - _1008) / (_1008 + 1.0);
        float _3168 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1014 = isnan(1.0) ? _3168 : (isnan(_3168) ? 1.0 : min(_3168, 1.0));
        float _1023 = ((((1.0 - _1014) * (_1009 + 2.0)) * exp2(log2(isnan(1.0) ? _3146 : (isnan(_3146) ? 1.0 : min(_3146, 1.0))) * (_1009 + 1.0))) + _1014) * _897;
        _1031 = _864;
        _1032 = _863;
        _1033 = _862;
        _1034 = _874;
        _1035 = _873;
        _1036 = _872;
        _1037 = _884;
        _1038 = _883;
        _1039 = _882;
        _1040 = _897;
        _1041 = _896;
        _1042 = _895;
        _1043 = cbModelParam._m0[36u].w * (isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0)));
        _1044 = cbModelParam._m0[36u].w * (isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0)));
        _1045 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0)));
    }
    else
    {
        _1031 = _722;
        _1032 = _722;
        _1033 = _722;
        _1034 = _722;
        _1035 = _722;
        _1036 = _722;
        _1037 = _722;
        _1038 = _722;
        _1039 = _722;
        _1040 = _722;
        _1041 = _722;
        _1042 = _722;
        _1043 = 0.0;
        _1044 = 0.0;
        _1045 = 0.0;
    }
    float _1055 = (cbModelParam._m0[1u].x * (_1043 - _734)) + _734;
    float _1056 = (cbModelParam._m0[1u].x * (_1044 - _735)) + _735;
    float _1057 = (cbModelParam._m0[1u].x * (_1045 - _736)) + _736;
    float _1078 = fma(_1057, cbSceneParam._m0[89u].z, fma(_1056, cbSceneParam._m0[89u].y, _1055 * cbSceneParam._m0[89u].x));
    float _1081 = fma(_1057, cbSceneParam._m0[90u].z, fma(_1056, cbSceneParam._m0[90u].y, _1055 * cbSceneParam._m0[90u].x));
    float _1084 = fma(_1057, cbSceneParam._m0[91u].z, fma(_1056, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1055));
    float _1099 = _387 * 0.5;
    float _1100 = _388 * 0.5;
    float _1101 = _389 * 0.5;
    float _1102 = dot(vec4(_1099, _1100, _1101, 1.0), vec4(_1033, _1036, _1039, _1042));
    float _1105 = dot(vec4(_1099, _1100, _1101, 1.0), vec4(_1032, _1035, _1038, _1041));
    float _1108 = dot(vec4(_1099, _1100, _1101, 1.0), vec4(_1031, _1034, _1037, _1040));
    float _1142;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1115 = dot(vec4(_1099, _1100, _1101, 1.0), vec4(_721, _725, _728, _731));
        float _1119 = dot(vec4(_1099, _1100, _1101, 1.0), vec4(_723, _726, _729, _732));
        float _1123 = dot(vec4(_1099, _1100, _1101, 1.0), vec4(_724, _727, _730, _733));
        float _1130 = dot(vec4(cbModelParam._m0[39u]), vec4(_1099, _1100, _1101, 1.0));
        _1142 = dot(vec3(isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0)), isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0)), isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1130) ? 0.0 : (isnan(0.0) ? _1130 : max(0.0, _1130))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1142 = 1.0;
    }
    float _1153;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1144 = dot(vec4(cbModelParam._m0[40u]), vec4(_1099, _1100, _1101, 1.0));
        _1153 = dot(vec3(isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0)), isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0)), isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1144) ? 0.0 : (isnan(0.0) ? _1144 : max(0.0, _1144))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1153 = 1.0;
    }
    float _1157 = (_1153 * cbModelParam._m0[1u].x) + (_1142 * (1.0 - cbModelParam._m0[1u].x));
    float _1166 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1248;
    float _1250;
    float _1252;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1215 = fma(_419, cbModelParam._m0[13u].z, fma(_415, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _411)) + cbModelParam._m0[13u].w;
        float _1219 = fma(_419, cbModelParam._m0[14u].z, fma(_415, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _411)) + cbModelParam._m0[14u].w;
        float _1223 = fma(_419, cbModelParam._m0[15u].z, fma(_415, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _411)) + cbModelParam._m0[15u].w;
        float _1226 = fma(_389, cbModelParam._m0[13u].z, fma(_388, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _387));
        float _1229 = fma(_389, cbModelParam._m0[14u].z, fma(_388, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _387));
        float _1232 = fma(_389, cbModelParam._m0[15u].z, fma(_388, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _387));
        float _1258;
        if (_1226 > 0.0)
        {
            _1258 = abs((1.0 - _1215) / _1226);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1226 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1215 + 1.0) / _1226);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1258 = frontier_phi_16_14_ladder;
        }
        float _1466;
        if (_1229 > 0.0)
        {
            _1466 = abs((1.0 - _1219) / _1229);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1229 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1219 + 1.0) / _1229);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1466 = frontier_phi_25_21_ladder;
        }
        float _1655;
        if (_1232 > 0.0)
        {
            _1655 = abs((1.0 - _1223) / _1232);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1232 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1223 + 1.0) / _1232);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1655 = frontier_phi_37_32_ladder;
        }
        float _1657 = isnan(_1466) ? _1258 : (isnan(_1258) ? _1466 : min(_1258, _1466));
        float _1658 = isnan(_1655) ? _1657 : (isnan(_1657) ? _1655 : min(_1657, _1655));
        float _1662 = (_1658 * _1226) + _1215;
        float _1663 = (_1658 * _1229) + _1219;
        float _1664 = (_1658 * _1232) + _1223;
        float _1665 = _1658 * 9.9999997473787516355514526367188e-05;
        float _1667 = (-1.0) - _1665;
        float _1669 = _1665 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1664 > _1669) || ((_1664 < _1667) || ((_1663 > _1669) || ((_1663 < _1667) || ((_1662 < _1667) || (_1662 > _1669))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1761 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1664, cbModelParam._m0[9u].z, fma(_1663, cbModelParam._m0[9u].y, _1662 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1664, cbModelParam._m0[10u].z, fma(_1663, cbModelParam._m0[10u].y, _1662 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1664, cbModelParam._m0[11u].z, fma(_1663, cbModelParam._m0[11u].y, _1662 * cbModelParam._m0[11u].x))), _1166);
            frontier_phi_15_37_ladder = _1761.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1761.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1761.x * cbModelParam._m0[1u].y;
        }
        _1248 = frontier_phi_15_37_ladder_2;
        _1250 = frontier_phi_15_37_ladder_1;
        _1252 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1236 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_387, _388, _389), _1166);
        _1248 = _1236.x * cbModelParam._m0[1u].y;
        _1250 = _1236.y * cbModelParam._m0[1u].y;
        _1252 = _1236.z * cbModelParam._m0[1u].y;
    }
    float _1255 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1348;
    float _1350;
    float _1352;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1312 = fma(_419, cbModelParam._m0[21u].z, fma(_415, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _411)) + cbModelParam._m0[21u].w;
        float _1316 = fma(_419, cbModelParam._m0[22u].z, fma(_415, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _411)) + cbModelParam._m0[22u].w;
        float _1320 = fma(_419, cbModelParam._m0[23u].z, fma(_415, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _411)) + cbModelParam._m0[23u].w;
        float _1323 = fma(_389, cbModelParam._m0[21u].z, fma(_388, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _387));
        float _1326 = fma(_389, cbModelParam._m0[22u].z, fma(_388, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _387));
        float _1329 = fma(_389, cbModelParam._m0[23u].z, fma(_388, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _387));
        float _1471;
        if (_1323 > 0.0)
        {
            _1471 = abs((1.0 - _1312) / _1323);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1323 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1312 + 1.0) / _1323);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1471 = frontier_phi_27_23_ladder;
        }
        float _1682;
        if (_1326 > 0.0)
        {
            _1682 = abs((1.0 - _1316) / _1326);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1326 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1316 + 1.0) / _1326);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1682 = frontier_phi_39_34_ladder;
        }
        float _1833;
        if (_1329 > 0.0)
        {
            _1833 = abs((1.0 - _1320) / _1329);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1329 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1320 + 1.0) / _1329);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _1833 = frontier_phi_48_45_ladder;
        }
        float _1835 = isnan(_1682) ? _1471 : (isnan(_1471) ? _1682 : min(_1471, _1682));
        float _1836 = isnan(_1833) ? _1835 : (isnan(_1835) ? _1833 : min(_1835, _1833));
        float _1840 = (_1836 * _1323) + _1312;
        float _1841 = (_1836 * _1326) + _1316;
        float _1842 = (_1836 * _1329) + _1320;
        float _1843 = _1836 * 9.9999997473787516355514526367188e-05;
        float _1844 = (-1.0) - _1843;
        float _1846 = _1843 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_1842 > _1846) || ((_1842 < _1844) || ((_1841 > _1846) || ((_1841 < _1844) || ((_1840 < _1844) || (_1840 > _1846))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2069 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1842, cbModelParam._m0[17u].z, fma(_1841, cbModelParam._m0[17u].y, _1840 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1842, cbModelParam._m0[18u].z, fma(_1841, cbModelParam._m0[18u].y, _1840 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1842, cbModelParam._m0[19u].z, fma(_1841, cbModelParam._m0[19u].y, _1840 * cbModelParam._m0[19u].x))), _1255);
            frontier_phi_24_48_ladder = _2069.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2069.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2069.x * cbModelParam._m0[1u].z;
        }
        _1348 = frontier_phi_24_48_ladder_2;
        _1350 = frontier_phi_24_48_ladder_1;
        _1352 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1332 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_387, _388, _389), _1255);
        _1348 = _1332.x * cbModelParam._m0[1u].z;
        _1350 = _1332.y * cbModelParam._m0[1u].z;
        _1352 = _1332.z * cbModelParam._m0[1u].z;
    }
    float _1364 = _378 * 0.01200000010430812835693359375;
    float _1366 = _1364 * ((cbModelParam._m0[1u].w * (_1348 - _1248)) + _1248);
    float _1367 = _1364 * ((cbModelParam._m0[1u].w * (_1350 - _1250)) + _1250);
    float _1368 = _1364 * ((cbModelParam._m0[1u].w * (_1352 - _1252)) + _1252);
    float _1371 = fma(_1368, cbSceneParam._m0[89u].z, fma(_1367, cbSceneParam._m0[89u].y, _1366 * cbSceneParam._m0[89u].x));
    float _1374 = fma(_1368, cbSceneParam._m0[90u].z, fma(_1367, cbSceneParam._m0[90u].y, _1366 * cbSceneParam._m0[90u].x));
    float _1377 = fma(_1368, cbSceneParam._m0[91u].z, fma(_1367, cbSceneParam._m0[91u].y, _1366 * cbSceneParam._m0[91u].x));
    uvec4 _1387 = floatBitsToUint(cbInstanceData._m0[_352 + 5u]);
    uint _1389 = _1387.x * 14u;
    uint _1390 = _1389 + 13u;
    float _1397 = _378 + (-1.0);
    float _1403 = (cbLight._m0[_1390].x * _1397) + 1.0;
    float _1404 = (cbLight._m0[_1390].y * _1397) + 1.0;
    float _1405 = (cbLight._m0[_1390].z * _1397) + 1.0;
    float _1406 = (cbLight._m0[_1390].w * _1397) + 1.0;
    uint _1407 = _1389 + 5u;
    float _1413 = isnan(1.0) ? _1404 : (isnan(_1404) ? 1.0 : min(_1404, 1.0));
    uint _1417 = _1389 + 4u;
    float _1424 = isnan(1.0) ? _1403 : (isnan(_1403) ? 1.0 : min(_1403, 1.0));
    uint _1428 = _1389 | 1u;
    float _1439 = dot(vec3(cbLight._m0[_1389].xyz), vec3(_222, _223, _224));
    float _1442 = dot(vec3(cbLight._m0[_1428].xyz), vec3(_222, _223, _224));
    float _3304 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
    float _3315 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
    float _1447 = (isnan(1.0) ? _3304 : (isnan(_3304) ? 1.0 : min(_3304, 1.0))) * 0.3183098733425140380859375;
    float _1449 = (isnan(1.0) ? _3315 : (isnan(_3315) ? 1.0 : min(_3315, 1.0))) * 0.3183098733425140380859375;
    float _1456 = ((cbLight._m0[_1407].x * _1413) * _1449) + ((cbLight._m0[_1417].x * _1424) * _1447);
    float _1457 = ((_1413 * cbLight._m0[_1407].y) * _1449) + ((_1424 * cbLight._m0[_1417].y) * _1447);
    float _1458 = ((_1413 * cbLight._m0[_1407].z) * _1449) + ((_1424 * cbLight._m0[_1417].z) * _1447);
    uvec4 _1463 = floatBitsToUint(cbLight._m0[_1389 + 12u]);
    bool _1465 = _1463.x == 0u;
    float _1476;
    float _1478;
    float _1480;
    if (_1465)
    {
        _1476 = _1456;
        _1478 = _1457;
        _1480 = _1458;
    }
    else
    {
        uint _1484 = _1389 + 6u;
        float _1500 = (dot(vec3(cbLight._m0[_1389 + 2u].xyz), vec3(_222, _223, _224)) * 0.5) + 0.5;
        float _1501 = _1500 * _1500;
        float _3326 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1502 = isnan(1.0) ? _3326 : (isnan(_3326) ? 1.0 : min(_3326, 1.0));
        float _1503 = isnan(1.0) ? _1405 : (isnan(_1405) ? 1.0 : min(_1405, 1.0));
        _1476 = (((cbLight._m0[_1484].x * 0.3183098733425140380859375) * _1502) * _1503) + _1456;
        _1478 = (((cbLight._m0[_1484].y * 0.3183098733425140380859375) * _1502) * _1503) + _1457;
        _1480 = (((cbLight._m0[_1484].z * 0.3183098733425140380859375) * _1502) * _1503) + _1458;
    }
    bool _1483 = _1463.y == 0u;
    float _1521;
    float _1523;
    float _1525;
    if (_1483)
    {
        _1521 = _1476;
        _1523 = _1478;
        _1525 = _1480;
    }
    else
    {
        uint _1626 = _1389 + 7u;
        float _1642 = (dot(vec3(cbLight._m0[_1389 + 3u].xyz), vec3(_222, _223, _224)) * 0.5) + 0.5;
        float _1643 = _1642 * _1642;
        float _3342 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1644 = isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0));
        float _1645 = isnan(1.0) ? _1406 : (isnan(_1406) ? 1.0 : min(_1406, 1.0));
        _1521 = (((cbLight._m0[_1626].x * 0.3183098733425140380859375) * _1644) * _1645) + _1476;
        _1523 = (((cbLight._m0[_1626].y * 0.3183098733425140380859375) * _1644) * _1645) + _1478;
        _1525 = (((cbLight._m0[_1626].z * 0.3183098733425140380859375) * _1644) * _1645) + _1480;
    }
    uint _1527 = _1389 + 8u;
    float _1533 = cbLight._m0[_1389].x + _303;
    float _1534 = cbLight._m0[_1389].y + _304;
    float _1535 = cbLight._m0[_1389].z + _305;
    float _1539 = inversesqrt(dot(vec3(_1533, _1534, _1535), vec3(_1533, _1534, _1535)));
    float _1543 = dot(vec3(_222, _223, _224), vec3(cbLight._m0[_1389].xyz));
    float _3358 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
    float _1546 = isnan(1.0) ? _3358 : (isnan(_3358) ? 1.0 : min(_3358, 1.0));
    float _3369 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _1547 = isnan(1.0) ? _3369 : (isnan(_3369) ? 1.0 : min(_3369, 1.0));
    float _1548 = dot(vec3(cbLight._m0[_1389].xyz), vec3(_1533 * _1539, _1534 * _1539, _1535 * _1539));
    float _3380 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
    float _1559 = (exp2(log2(1.0 - (isnan(1.0) ? _3380 : (isnan(_3380) ? 1.0 : min(_3380, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1565 = (0.5 / ((_1546 + 9.9999999392252902907785028219223e-09) + _1547)) * _1546;
    float _3391 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
    float _1567 = (isnan(1.0) ? _3391 : (isnan(_3391) ? 1.0 : min(_3391, 1.0))) * 0.31831014156341552734375;
    uint _1578 = _1389 + 9u;
    float _1584 = cbLight._m0[_1428].x + _303;
    float _1585 = cbLight._m0[_1428].y + _304;
    float _1586 = cbLight._m0[_1428].z + _305;
    float _1590 = inversesqrt(dot(vec3(_1584, _1585, _1586), vec3(_1584, _1585, _1586)));
    float _1594 = dot(vec3(_222, _223, _224), vec3(cbLight._m0[_1428].xyz));
    float _3402 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
    float _1597 = isnan(1.0) ? _3402 : (isnan(_3402) ? 1.0 : min(_3402, 1.0));
    float _1598 = dot(vec3(cbLight._m0[_1428].xyz), vec3(_1584 * _1590, _1585 * _1590, _1586 * _1590));
    float _3413 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
    float _1607 = (exp2(log2(1.0 - (isnan(1.0) ? _3413 : (isnan(_3413) ? 1.0 : min(_3413, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1611 = (0.5 / ((_1597 + 9.9999999392252902907785028219223e-09) + _1547)) * _1597;
    float _3424 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
    float _1613 = (isnan(1.0) ? _3424 : (isnan(_3424) ? 1.0 : min(_3424, 1.0))) * 0.31831014156341552734375;
    float _1623 = (((_1607 * cbLight._m0[_1578].x) * _1613) * _1413) + (((_1559 * cbLight._m0[_1527].x) * _1567) * _1424);
    float _1624 = (((_1607 * cbLight._m0[_1578].y) * _1613) * _1413) + (((_1559 * cbLight._m0[_1527].y) * _1567) * _1424);
    float _1625 = (((_1607 * cbLight._m0[_1578].z) * _1613) * _1413) + (((_1559 * cbLight._m0[_1527].z) * _1567) * _1424);
    float _1687;
    float _1689;
    float _1691;
    if (_1465)
    {
        _1687 = _1623;
        _1689 = _1624;
        _1691 = _1625;
    }
    else
    {
        uint _1693 = _1389 + 10u;
        uint _1699 = _1389 + 2u;
        float _1705 = cbLight._m0[_1699].x + _303;
        float _1706 = cbLight._m0[_1699].y + _304;
        float _1707 = cbLight._m0[_1699].z + _305;
        float _1711 = inversesqrt(dot(vec3(_1705, _1706, _1707), vec3(_1705, _1706, _1707)));
        float _1715 = dot(vec3(_222, _223, _224), vec3(cbLight._m0[_1699].xyz));
        float _3435 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
        float _1718 = isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0));
        float _1719 = dot(vec3(cbLight._m0[_1699].xyz), vec3(_1705 * _1711, _1706 * _1711, _1707 * _1711));
        float _3446 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
        float _1728 = (exp2(log2(1.0 - (isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1732 = (0.5 / ((_1718 + 9.9999999392252902907785028219223e-09) + _1547)) * _1718;
        float _3457 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
        float _1734 = (isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0))) * 0.31831014156341552734375;
        float _1735 = isnan(1.0) ? _1405 : (isnan(_1405) ? 1.0 : min(_1405, 1.0));
        _1687 = (((_1728 * cbLight._m0[_1693].x) * _1734) * _1735) + _1623;
        _1689 = (((_1728 * cbLight._m0[_1693].y) * _1734) * _1735) + _1624;
        _1691 = (((_1728 * cbLight._m0[_1693].z) * _1734) * _1735) + _1625;
    }
    float _1770;
    float _1772;
    float _1774;
    if (_1483)
    {
        _1770 = _1687;
        _1772 = _1689;
        _1774 = _1691;
    }
    else
    {
        uint _1781 = _1389 + 11u;
        uint _1787 = _1389 + 3u;
        float _1793 = cbLight._m0[_1787].x + _303;
        float _1794 = cbLight._m0[_1787].y + _304;
        float _1795 = cbLight._m0[_1787].z + _305;
        float _1799 = inversesqrt(dot(vec3(_1793, _1794, _1795), vec3(_1793, _1794, _1795)));
        float _1803 = dot(vec3(_222, _223, _224), vec3(cbLight._m0[_1787].xyz));
        float _3473 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
        float _1806 = isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0));
        float _1807 = dot(vec3(cbLight._m0[_1787].xyz), vec3(_1793 * _1799, _1794 * _1799, _1795 * _1799));
        float _3484 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
        float _1816 = (exp2(log2(1.0 - (isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1820 = (0.5 / ((_1806 + 9.9999999392252902907785028219223e-09) + _1547)) * _1806;
        float _3495 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
        float _1822 = (isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0))) * 0.31831014156341552734375;
        float _1823 = isnan(1.0) ? _1406 : (isnan(_1406) ? 1.0 : min(_1406, 1.0));
        _1770 = (((_1816 * cbLight._m0[_1781].x) * _1822) * _1823) + _1687;
        _1772 = (((_1816 * cbLight._m0[_1781].y) * _1822) * _1823) + _1689;
        _1774 = (((_1816 * cbLight._m0[_1781].z) * _1822) * _1823) + _1691;
    }
    float _1957;
    float _1959;
    float _1961;
    float _1963;
    float _1965;
    float _1967;
    if (_1387.y == 0u)
    {
        float _1898 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1899 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1898;
        float _1900 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1898;
        float _1901 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1898;
        uvec4 _1913 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1914 = _1913.x;
        uint _1925 = uint((float(_1913.y) * floor(float(uint(cbSceneParam._m0[85u].y * _312) / _1914))) + floor(float(uint(cbSceneParam._m0[85u].x * _311) / _1914)));
        float _1935 = (log2(_1901 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1936 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
        uint _1939 = uint(isnan(14.0) ? _1936 : (isnan(_1936) ? 14.0 : min(_1936, 14.0)));
        uvec4 _1944 = texelFetch(g_lightClusterGridBuffer, int(((_1939 << 2u) + (_1925 << 6u)) >> 2u));
        uint _1945 = _1944.x;
        uint _1946 = _1913.z;
        float _2074;
        float _2076;
        float _2078;
        float _2080;
        float _2082;
        float _2084;
        if (((((1u << ((_1946 >> 4u) & 15u)) + 4294967295u) & _1945) == 0u) || ((_1946 & 240u) == 0u))
        {
            _2074 = 0.0;
            _2076 = 0.0;
            _2078 = 0.0;
            _2080 = 0.0;
            _2082 = 0.0;
            _2084 = 0.0;
        }
        else
        {
            float _2075;
            float _2077;
            float _2079;
            float _2081;
            float _2083;
            float _2085;
            float _2225 = 0.0;
            float _2226 = 0.0;
            float _2227 = 0.0;
            float _2228 = 0.0;
            float _2229 = 0.0;
            float _2230 = 0.0;
            uint _2231 = 0u;
            uint _2240;
            bool _2241;
            for (;;)
            {
                _2240 = texelFetch(g_lightClassification, int((((_1939 << 5u) + (_1925 << 9u)) + (_2231 << 2u)) >> 2u)).x;
                _2241 = _2240 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2241)
                {
                    frontier_phi_63_pred = _2230;
                    frontier_phi_63_pred_1 = _2229;
                    frontier_phi_63_pred_2 = _2228;
                    frontier_phi_63_pred_3 = _2227;
                    frontier_phi_63_pred_4 = _2226;
                    frontier_phi_63_pred_5 = _2225;
                }
                else
                {
                    float _2349;
                    float _2350;
                    float _2351;
                    float _2352;
                    float _2353;
                    float _2354;
                    uint _2355;
                    _2349 = _2225;
                    _2350 = _2226;
                    _2351 = _2227;
                    _2352 = _2228;
                    _2353 = _2229;
                    _2354 = _2230;
                    _2355 = _2240;
                    float _2281;
                    float _2282;
                    float _2283;
                    float _2284;
                    float _2285;
                    float _2286;
                    for (;;)
                    {
                        uint _2359 = uint(findLSB(_2355)) + (_2231 << 5u);
                        uint _2356 = (_2355 + 4294967295u) & _2355;
                        uint _2361 = _2359 * 48u;
                        vec4 _2375 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2361)).x, texelFetch(g_PointLightRenderingBuffer, int(_2361 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2361 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2361 + 3u)).x));
                        uint _2381 = (_2359 * 48u) + 4u;
                        vec4 _2394 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2381)).x, texelFetch(g_PointLightRenderingBuffer, int(_2381 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2381 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2381 + 3u)).x));
                        uint _2400 = (_2359 * 48u) + 8u;
                        vec3 _2411 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2400)).x, texelFetch(g_PointLightRenderingBuffer, int(_2400 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2400 + 2u)).x));
                        float _2415 = _2375.x - _1899;
                        float _2416 = _2375.y - _1900;
                        float _2417 = _2375.z - _1901;
                        float _2418 = dot(vec3(_2415, _2416, _2417), vec3(_2415, _2416, _2417));
                        float _2421 = inversesqrt(_2418);
                        float _2430 = 1.0 - (_2418 * _2375.w);
                        float _3521 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
                        float _2431 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
                        float _2432 = sqrt(_2418) * _2394.w;
                        float _2435 = 1.39999997615814208984375 / (_2432 + 1.39999997615814208984375);
                        float _2436 = _2435 * _2435;
                        float _2439 = ((1.0 - _2436) * dot(vec3(_333, _336, _339), vec3(_2421 * _2415, _2421 * _2416, _2421 * _2417))) + _2436;
                        float _2442 = _2432 * _2432;
                        float _2446 = ((isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0))) * _2431) / ((_2442 * 0.699999988079071044921875) + 1.0);
                        float _2450 = (-0.0) - _1899;
                        float _2451 = (-0.0) - _1900;
                        float _2452 = (-0.0) - _1901;
                        float _2456 = inversesqrt(dot(vec3(_2450, _2451, _2452), vec3(_2450, _2451, _2452)));
                        float _2460 = dot(vec3(_333, _336, _339), vec3(_2456 * _2450, _2456 * _2451, _2456 * _2452));
                        float _3537 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
                        float _3548 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
                        float _2464 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
                        float _2468 = (0.5 / (((isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0))) + 9.9999999392252902907785028219223e-09) + _2464)) * _2464;
                        float _3559 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
                        float _2477 = (((isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0))) * 3.1415927410125732421875) / ((_2442 * 2.1991131305694580078125) + 3.141590118408203125)) * _2431;
                        _2284 = (_2446 * _2394.x) + _2352;
                        _2285 = (_2446 * _2394.y) + _2353;
                        _2286 = (_2446 * _2394.z) + _2354;
                        _2281 = (_2477 * _2411.x) + _2349;
                        _2282 = (_2477 * _2411.y) + _2350;
                        _2283 = (_2477 * _2411.z) + _2351;
                        if (_2356 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2349 = _2281;
                            _2350 = _2282;
                            _2351 = _2283;
                            _2352 = _2284;
                            _2353 = _2285;
                            _2354 = _2286;
                            _2355 = _2356;
                        }
                    }
                    frontier_phi_63_pred = _2286;
                    frontier_phi_63_pred_1 = _2285;
                    frontier_phi_63_pred_2 = _2284;
                    frontier_phi_63_pred_3 = _2283;
                    frontier_phi_63_pred_4 = _2282;
                    frontier_phi_63_pred_5 = _2281;
                }
                _2085 = frontier_phi_63_pred;
                _2083 = frontier_phi_63_pred_1;
                _2081 = frontier_phi_63_pred_2;
                _2079 = frontier_phi_63_pred_3;
                _2077 = frontier_phi_63_pred_4;
                _2075 = frontier_phi_63_pred_5;
                uint _2232 = _2231 + 1u;
                if (_2232 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2225 = _2075;
                    _2226 = _2077;
                    _2227 = _2079;
                    _2228 = _2081;
                    _2229 = _2083;
                    _2230 = _2085;
                    _2231 = _2232;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2074 = _2075;
            _2076 = _2077;
            _2078 = _2079;
            _2080 = _2081;
            _2082 = _2083;
            _2084 = _2085;
        }
        uvec4 _2088 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2089 = _2088.z;
        uint _2091 = (_2089 >> 8u) & 15u;
        float _2196;
        float _2198;
        float _2200;
        float _2202;
        float _2204;
        float _2206;
        if (((4294967295u << _2091) & _1945) == 0u)
        {
            _2196 = _2074;
            _2198 = _2076;
            _2200 = _2078;
            _2202 = _2080;
            _2204 = _2082;
            _2206 = _2084;
        }
        else
        {
            float _2221 = inversesqrt(dot(vec3(_1899, _1900, _1901), vec3(_1899, _1900, _1901)));
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2091 < ((_2089 >> 12u) & 15u))
            {
                float _2197;
                float _2199;
                float _2201;
                float _2203;
                float _2205;
                float _2207;
                float _2332 = _2074;
                float _2333 = _2076;
                float _2334 = _2078;
                float _2335 = _2080;
                float _2336 = _2082;
                float _2337 = _2084;
                uint _2338 = _2091;
                uint _2347;
                bool _2348;
                for (;;)
                {
                    _2347 = texelFetch(g_lightClassification, int((((_1939 << 5u) + (_1925 << 9u)) + (_2338 << 2u)) >> 2u)).x;
                    _2348 = _2347 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2348)
                    {
                        frontier_phi_69_pred = _2337;
                        frontier_phi_69_pred_1 = _2336;
                        frontier_phi_69_pred_2 = _2335;
                        frontier_phi_69_pred_3 = _2334;
                        frontier_phi_69_pred_4 = _2333;
                        frontier_phi_69_pred_5 = _2332;
                    }
                    else
                    {
                        float _2482;
                        float _2483;
                        float _2484;
                        float _2485;
                        float _2486;
                        float _2487;
                        float _2734;
                        float _2735;
                        float _2736;
                        float _2737;
                        float _2738;
                        float _2739;
                        float _2495 = _2332;
                        float _2496 = _2333;
                        float _2497 = _2334;
                        float _2498 = _2335;
                        float _2499 = _2336;
                        float _2500 = _2337;
                        uint _2501 = _2347;
                        uint _2502;
                        vec4 _2527;
                        float _2528;
                        vec4 _2543;
                        vec3 _2555;
                        vec4 _2571;
                        vec4 _2587;
                        float _2634;
                        bool _2635;
                        for (;;)
                        {
                            uint _2512 = ((_2338 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2501));
                            _2502 = (_2501 + 4294967295u) & _2501;
                            uint _2514 = _2512 * 40u;
                            _2527 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2514)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2514 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2514 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2514 + 3u)).x));
                            _2528 = _2527.w;
                            uint _2530 = (_2512 * 40u) + 4u;
                            _2543 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2530)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2530 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2530 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2530 + 3u)).x));
                            uint _2545 = (_2512 * 40u) + 8u;
                            _2555 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2545)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2545 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2545 + 2u)).x));
                            uint _2558 = (_2512 * 40u) + 16u;
                            _2571 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2558)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2558 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2558 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2558 + 3u)).x));
                            uint _2574 = (_2512 * 40u) + 20u;
                            _2587 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2574)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2574 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2574 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2574 + 3u)).x));
                            uint _2590 = (_2512 * 40u) + 24u;
                            vec4 _2603 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2590)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2590 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2590 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2590 + 3u)).x));
                            uint _2609 = (_2512 * 40u) + 28u;
                            vec4 _2622 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2609)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2609 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2609 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2609 + 3u)).x));
                            _2634 = fma(_1901, _2622.z, fma(_1900, _2622.y, _2622.x * _1899)) + _2622.w;
                            _2635 = !((fma(_1901, _2603.z, fma(_1900, _2603.y, _2603.x * _1899)) + _2603.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2635)
                            {
                                float _2662 = _2527.x - _1899;
                                float _2663 = _2527.y - _1900;
                                float _2664 = _2527.z - _1901;
                                float _2665 = dot(vec3(_2662, _2663, _2664), vec3(_2662, _2663, _2664));
                                float _2668 = inversesqrt(_2665);
                                float _2669 = _2668 * _2662;
                                float _2670 = _2668 * _2663;
                                float _2671 = _2668 * _2664;
                                float _2675 = 1.0 - (_2665 / (_2528 * _2528));
                                float _3570 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
                                float _2676 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
                                float _2680 = sqrt(_2665) * _2543.w;
                                float _2682 = 1.39999997615814208984375 / (_2680 + 1.39999997615814208984375);
                                float _2683 = _2682 * _2682;
                                float _2684 = 1.0 - _2683;
                                float _2686 = (_2684 * dot(vec3(_2669, _2670, _2671), vec3(_333, _336, _339))) + _2683;
                                float _2689 = _2680 * _2680;
                                float _2693 = (fma(_1901, _2571.z, fma(_1900, _2571.y, _2571.x * _1899)) + _2571.w) / _2634;
                                float _2694 = (fma(_1901, _2587.z, fma(_1900, _2587.y, _2587.x * _1899)) + _2587.w) / _2634;
                                float _2698 = 1.0 - dot(vec2(_2693, _2694), vec2(_2693, _2694));
                                float _3586 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
                                float _2699 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
                                float _2700 = _2699 * (((isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0))) * _2676) / ((_2689 * 0.699999988079071044921875) + 1.0));
                                float _2710 = dot(vec3(_333, _336, _339), vec3((-0.0) - (_1899 * _2221), (-0.0) - (_1900 * _2221), (-0.0) - (_1901 * _2221)));
                                float _3597 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
                                float _2718 = (_2684 * dot(vec3(_333, _336, _339), vec3(_2669, _2670, _2671))) + _2683;
                                float _3608 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
                                float _2719 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
                                float _2723 = (0.5 / (((isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0))) + 9.9999999392252902907785028219223e-09) + _2719)) * _2719;
                                float _3619 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
                                float _2730 = (_2699 * _2676) * (((isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0))) * 3.1415927410125732421875) / ((_2689 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_75_pred = _2700 * _2543.z;
                                frontier_phi_75_pred_1 = _2700 * _2543.y;
                                frontier_phi_75_pred_2 = _2700 * _2543.x;
                                frontier_phi_75_pred_3 = _2730 * _2555.z;
                                frontier_phi_75_pred_4 = _2730 * _2555.y;
                                frontier_phi_75_pred_5 = _2730 * _2555.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _2739 = frontier_phi_75_pred;
                            _2738 = frontier_phi_75_pred_1;
                            _2737 = frontier_phi_75_pred_2;
                            _2736 = frontier_phi_75_pred_3;
                            _2735 = frontier_phi_75_pred_4;
                            _2734 = frontier_phi_75_pred_5;
                            _2485 = _2737 + _2498;
                            _2486 = _2738 + _2499;
                            _2487 = _2739 + _2500;
                            _2482 = _2734 + _2495;
                            _2483 = _2735 + _2496;
                            _2484 = _2736 + _2497;
                            if (_2502 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2495 = _2482;
                                _2496 = _2483;
                                _2497 = _2484;
                                _2498 = _2485;
                                _2499 = _2486;
                                _2500 = _2487;
                                _2501 = _2502;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2487;
                        frontier_phi_69_pred_1 = _2486;
                        frontier_phi_69_pred_2 = _2485;
                        frontier_phi_69_pred_3 = _2484;
                        frontier_phi_69_pred_4 = _2483;
                        frontier_phi_69_pred_5 = _2482;
                    }
                    _2207 = frontier_phi_69_pred;
                    _2205 = frontier_phi_69_pred_1;
                    _2203 = frontier_phi_69_pred_2;
                    _2201 = frontier_phi_69_pred_3;
                    _2199 = frontier_phi_69_pred_4;
                    _2197 = frontier_phi_69_pred_5;
                    uint _2339 = _2338 + 1u;
                    if (_2339 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2332 = _2197;
                        _2333 = _2199;
                        _2334 = _2201;
                        _2335 = _2203;
                        _2336 = _2205;
                        _2337 = _2207;
                        _2338 = _2339;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2207;
                frontier_phi_57_58_ladder_1 = _2205;
                frontier_phi_57_58_ladder_2 = _2203;
                frontier_phi_57_58_ladder_3 = _2201;
                frontier_phi_57_58_ladder_4 = _2199;
                frontier_phi_57_58_ladder_5 = _2197;
            }
            else
            {
                frontier_phi_57_58_ladder = _2084;
                frontier_phi_57_58_ladder_1 = _2082;
                frontier_phi_57_58_ladder_2 = _2080;
                frontier_phi_57_58_ladder_3 = _2078;
                frontier_phi_57_58_ladder_4 = _2076;
                frontier_phi_57_58_ladder_5 = _2074;
            }
            _2196 = frontier_phi_57_58_ladder_5;
            _2198 = frontier_phi_57_58_ladder_4;
            _2200 = frontier_phi_57_58_ladder_3;
            _2202 = frontier_phi_57_58_ladder_2;
            _2204 = frontier_phi_57_58_ladder_1;
            _2206 = frontier_phi_57_58_ladder;
        }
        float _2211 = isnan(1.0) ? _378 : (isnan(_378) ? 1.0 : min(_378, 1.0));
        _1957 = (_2211 * _2202) + _1521;
        _1959 = (_2211 * _2204) + _1523;
        _1961 = (_2211 * _2206) + _1525;
        _1963 = ((_2196 * 0.039999999105930328369140625) * _2211) + _1770;
        _1965 = ((_2198 * 0.039999999105930328369140625) * _2211) + _1772;
        _1967 = ((_2200 * 0.039999999105930328369140625) * _2211) + _1774;
    }
    else
    {
        _1957 = _1521;
        _1959 = _1523;
        _1961 = _1525;
        _1963 = _1770;
        _1965 = _1772;
        _1967 = _1774;
    }
    uint _1973 = _354 + uint(cbMatDynParam._m0[0u].w);
    float _1979 = (_210.x * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_1973].x;
    float _1980 = (_210.y * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_1973].y;
    float _1981 = (_210.z * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_1973].z;
    float _3635 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    float _3646 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _3657 = isnan(0.0) ? _366 : (isnan(_366) ? 0.0 : max(_366, 0.0));
    float _1998 = (((isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0))) * (_1957 + ((isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0))) * _378))) + ((_1963 + ((isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0))) * _1157)) * cbPerFrame._m0[3u].x)) + _1979;
    float _2000 = (_1980 + ((_1965 + ((isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0))) * _1157)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0))) * (_1959 + ((isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0))) * _378)));
    float _2002 = (_1981 + ((_1967 + ((isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0))) * _1157)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0))) * (_1961 + ((isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0))) * _378)));
    float _3683 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2015 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
    uint _2016 = _352 + 6u;
    float _2024 = _311 / cbSceneParam._m0[86u].x;
    float _2025 = _312 / cbSceneParam._m0[86u].y;
    vec4 _2039 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2024, _2025, (log2((isnan(cbSceneParam._m0[77u].w) ? _244 : (isnan(_244) ? cbSceneParam._m0[77u].w : min(_244, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2041 = _2039.x;
    float _2042 = _2039.y;
    float _2043 = _2039.z;
    float _2044 = _2039.w;
    float _2136;
    float _2138;
    float _2140;
    float _2142;
    if (_244 > cbSceneParam._m0[78u].w)
    {
        float _2099 = isnan(_244) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _244 : min(cbSceneParam._m0[80u].w, _244));
        float _2100 = _2099 / _244;
        float _2111 = _2100 * _296;
        float _2112 = _297 * _2100;
        float _2113 = (-0.0) - _2112;
        float _2114 = _2100 * _298;
        float _2116 = (cbSceneParam._m0[77u].w * _2113) / _2099;
        float _2117 = _2116 + cbSceneParam._m0[79u].w;
        float _2118 = cbSceneParam._m0[79u].w - _2112;
        float _2124 = sqrt(((_2111 * _2111) + (_2112 * _2112)) + (_2114 * _2114));
        float _2127 = (1.0 - (cbSceneParam._m0[77u].w / _2099)) * _2124;
        float _2132 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2134 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2294;
        if (abs((_2113 - _2116) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2294 = ((((_2117 > 0.0) ? exp2(_2132 * _2117) : (2.0 - exp2(_2134 * _2117))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2127;
        }
        else
        {
            float _2254 = 1.0 / cbSceneParam._m0[80u].x;
            float _2255 = isnan(_2118) ? _2117 : (isnan(_2117) ? _2118 : max(_2117, _2118));
            float _2256 = isnan(_2118) ? _2117 : (isnan(_2117) ? _2118 : min(_2117, _2118));
            float _2265 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : min(_2255, 0.0));
            float _2266 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : min(_2256, 0.0));
            _2294 = ((abs(_2124 / _2113) * cbSceneParam._m0[80u].y) * ((((_2265 - _2266) * 2.0) - ((exp2(_2132 * (isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0)))) - exp2(_2132 * (isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0))))) * _2254)) - ((exp2(_2134 * _2265) - exp2(_2134 * _2266)) * _2254))) + (_2127 * cbSceneParam._m0[80u].z);
        }
        vec4 _2296 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2024, _2025, 1.0), 0.0);
        float _2305 = exp2((_2294 * (-1.44269502162933349609375)) * (1.0 - _2296.w));
        float _2306 = log2(_2305);
        float _2322 = log2(_2044);
        _2136 = (exp2(_2322 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2306 * cbSceneParam._m0[78u].x)) * _2296.x) / cbSceneParam._m0[78u].x)) + _2041;
        _2138 = (exp2(_2322 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2306 * cbSceneParam._m0[78u].y)) * _2296.y) / cbSceneParam._m0[78u].y)) + _2042;
        _2140 = (exp2(_2322 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2306 * cbSceneParam._m0[78u].z)) * _2296.z) / cbSceneParam._m0[78u].z)) + _2043;
        _2142 = _2305 * _2044;
    }
    else
    {
        _2136 = _2041;
        _2138 = _2042;
        _2140 = _2043;
        _2142 = _2044;
    }
    float _2154 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2155 = _2154 == 3.0;
    float _2157 = log2(_2142);
    float _2161 = exp2(_2157 * cbSceneParam._m0[78u].x);
    float _2162 = exp2(_2157 * cbSceneParam._m0[78u].y);
    float _2163 = exp2(_2157 * cbSceneParam._m0[78u].z);
    float _2164 = _2161 * (isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0)));
    float _2165 = _2162 * (isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0)));
    float _2166 = _2163 * (isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0)));
    float _2175 = (_2154 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2175 * (_2155 ? _2164 : (_2164 + (cbSceneParam._m0[72u].w * _2136)));
    SV_Target.y = _2175 * (_2155 ? _2165 : (_2165 + (cbSceneParam._m0[72u].w * _2138)));
    SV_Target.z = _2175 * (_2155 ? _2166 : (_2166 + (cbSceneParam._m0[72u].w * _2140)));
    SV_Target.w = cbInstanceData._m0[_2016].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _1979) * _2015) * _2161) * _2175;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _1980) * _2015) * _2162) * _2175;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _1981) * _2015) * _2163) * _2175;
    SV_Target_1.w = cbInstanceData._m0[_2016].w;
}


