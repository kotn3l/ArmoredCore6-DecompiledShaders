#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_A_Emissive_Glow_Addition_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_A_Emissive_Glow_Addition_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _767;
float _2970;
float _2971;
float _2972;
float _2973;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _169 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _170 = _169 * NORMAL.x;
    float _171 = _169 * NORMAL.y;
    float _172 = _169 * NORMAL.z;
    float _177;
    float _178;
    float _179;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _177 = (-0.0) - _170;
        _178 = (-0.0) - _171;
        _179 = (-0.0) - _172;
    }
    else
    {
        _177 = _170;
        _178 = _171;
        _179 = _172;
    }
    vec4 _193 = texture(sampler2D(S_A_Emissive_Glow_Addition_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _196 = _193.x;
    float _197 = _193.y;
    float _198 = _193.z;
    vec4 _214 = texture(sampler2D(S_A_Emissive_Glow_Addition_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _225 = inversesqrt(dot(vec3(_177, _178, _179), vec3(_177, _178, _179)));
    float _226 = _225 * _177;
    float _227 = _225 * _178;
    float _228 = _225 * _179;
    float _2982 = isnan(0.0) ? _196 : (isnan(_196) ? 0.0 : max(_196, 0.0));
    float _2993 = isnan(0.0) ? _197 : (isnan(_197) ? 0.0 : max(_197, 0.0));
    float _3004 = isnan(0.0) ? _198 : (isnan(_198) ? 0.0 : max(_198, 0.0));
    float _248 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _290 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _300 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _290);
    float _301 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _290);
    float _302 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _290);
    float _306 = inversesqrt(dot(vec3(_300, _301, _302), vec3(_300, _301, _302)));
    float _307 = _300 * _306;
    float _308 = _301 * _306;
    float _309 = _302 * _306;
    vec4 _314 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _316 = _314.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _446 = sqrt(((_300 * _300) + (_301 * _301)) + (_302 * _302));
        float _452 = (cbMatDynParam._m0[5u].x * _446) + cbMatDynParam._m0[5u].y;
        float _3015 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
        float _453 = isnan(1.0) ? _3015 : (isnan(_3015) ? 1.0 : min(_3015, 1.0));
        float _457 = (cbMatDynParam._m0[5u].z * _446) + cbMatDynParam._m0[5u].w;
        float _3026 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3026 : (isnan(_3026) ? 1.0 : min(_3026, 1.0))) - _453)) + _453) < ((_316 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _328 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _329 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _349 = fma(_228, cbSceneParam._m0[5u].z, fma(_227, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _226));
    float _352 = fma(_228, cbSceneParam._m0[6u].z, fma(_227, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _226));
    float _355 = fma(_228, cbSceneParam._m0[7u].z, fma(_227, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _226));
    uint _368 = uint(roundEven(NORMAL.w)) * 13u;
    uint _370 = _368 + 9u;
    uint _371 = _370 + uint(cbMatDynParam._m0[0u].w);
    float _377 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2982 : (isnan(_2982) ? 1.0 : min(_2982, 1.0)))) * cbInstanceData._m0[_371].x;
    float _378 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2993 : (isnan(_2993) ? 1.0 : min(_2993, 1.0)))) * cbInstanceData._m0[_371].y;
    float _379 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3004 : (isnan(_3004) ? 1.0 : min(_3004, 1.0)))) * cbInstanceData._m0[_371].z;
    float _3037 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _380 = isnan(1.0) ? _3037 : (isnan(_3037) ? 1.0 : min(_3037, 1.0));
    float _3048 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _381 = isnan(1.0) ? _3048 : (isnan(_3048) ? 1.0 : min(_3048, 1.0));
    float _3059 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _382 = isnan(1.0) ? _3059 : (isnan(_3059) ? 1.0 : min(_3059, 1.0));
    vec4 _391 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _328, cbSceneParam._m0[86u].y * _329));
    float _394 = _391.x * TEXCOORD.z;
    float _395 = dot(vec3(_226, _227, _228), vec3(_307, _308, _309));
    float _398 = _395 * 2.0;
    float _403 = (_398 * _226) - _307;
    float _404 = (_398 * _227) - _308;
    float _405 = (_398 * _228) - _309;
    float _427 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _431 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _435 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _766;
    float _768;
    float _769;
    float _770;
    float _771;
    float _772;
    float _773;
    float _774;
    float _775;
    float _776;
    float _777;
    float _778;
    float _779;
    float _780;
    float _781;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _491 = fma(_435, cbModelParam._m0[26u].z, fma(_431, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _427));
        float _495 = fma(_435, cbModelParam._m0[27u].z, fma(_431, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _427));
        float _499 = fma(_435, cbModelParam._m0[28u].z, fma(_431, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _427));
        float _524 = _427 + _226;
        float _525 = _431 + _227;
        float _526 = _435 + _228;
        float _536 = fma(_526, cbModelParam._m0[26u].z, fma(_525, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _524)) - _491;
        float _537 = fma(_526, cbModelParam._m0[27u].z, fma(_525, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _524)) - _495;
        float _538 = fma(_526, cbModelParam._m0[28u].z, fma(_525, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _524)) - _499;
        float _542 = inversesqrt(dot(vec3(_536, _537, _538), vec3(_536, _537, _538)));
        float _555 = ((_542 * _536) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_491 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _556 = ((_542 * _537) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_495 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _557 = ((_542 * _538) / cbModelParam._m0[34u].z) + ((((((_499 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _560 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_555, _556, _557), 0.0);
        vec4 _567 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_555, _556, _557), 0.0);
        vec4 _574 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_555, _556, _557), 0.0);
        vec4 _581 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_555, _556, _557), 0.0);
        float _594 = exp2((_560.w + (-0.5)) * 20.0) * 2.0;
        float _595 = _594 * (_560.x + (-0.5));
        float _596 = _594 * (_560.y + (-0.5));
        float _597 = _594 * (_560.z + (-0.5));
        float _604 = exp2((_567.w + (-0.5)) * 20.0) * 2.0;
        float _605 = _604 * (_567.x + (-0.5));
        float _606 = _604 * (_567.y + (-0.5));
        float _607 = _604 * (_567.z + (-0.5));
        float _614 = exp2((_574.w + (-0.5)) * 20.0) * 2.0;
        float _615 = _614 * (_574.x + (-0.5));
        float _616 = _614 * (_574.y + (-0.5));
        float _617 = _614 * (_574.z + (-0.5));
        float _624 = exp2((_581.w + (-0.5)) * 20.0) * 2.0;
        float _625 = _624 * (_581.x + (-0.5));
        float _626 = _624 * (_581.y + (-0.5));
        float _627 = _624 * (_581.z + (-0.5));
        float _628 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
        float _629 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
        float _630 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
        float _631 = _595 * 0.5;
        float _632 = _605 * 0.5;
        float _633 = _615 * 0.5;
        float _634 = dot(vec3(_631, _632, _633), vec3(_631, _632, _633));
        float _639 = (_634 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_634);
        float _648 = (dot(vec3(_226, _227, _228), vec3(_639 * _631, _639 * _632, _639 * _633)) + 1.0) * 0.5;
        float _3085 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
        float _658 = sqrt(((_632 * _632) + (_631 * _631)) + (_633 * _633)) / (_628 + 9.9999997473787516355514526367188e-06);
        float _3096 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
        float _659 = isnan(1.0) ? _3096 : (isnan(_3096) ? 1.0 : min(_3096, 1.0));
        float _660 = _659 * 2.0;
        float _664 = (1.0 - _659) / (_659 + 1.0);
        float _3107 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
        float _665 = isnan(1.0) ? _3107 : (isnan(_3107) ? 1.0 : min(_3107, 1.0));
        float _674 = ((((1.0 - _665) * (_660 + 2.0)) * exp2(log2(isnan(1.0) ? _3085 : (isnan(_3085) ? 1.0 : min(_3085, 1.0))) * (_660 + 1.0))) + _665) * _628;
        float _675 = _596 * 0.5;
        float _676 = _606 * 0.5;
        float _677 = _616 * 0.5;
        float _678 = dot(vec3(_675, _676, _677), vec3(_675, _676, _677));
        float _683 = (_678 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_678);
        float _691 = (dot(vec3(_226, _227, _228), vec3(_683 * _675, _683 * _676, _683 * _677)) + 1.0) * 0.5;
        float _3118 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
        float _700 = sqrt(((_676 * _676) + (_675 * _675)) + (_677 * _677)) / (_629 + 9.9999997473787516355514526367188e-06);
        float _3129 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
        float _701 = isnan(1.0) ? _3129 : (isnan(_3129) ? 1.0 : min(_3129, 1.0));
        float _702 = _701 * 2.0;
        float _706 = (1.0 - _701) / (_701 + 1.0);
        float _3140 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
        float _707 = isnan(1.0) ? _3140 : (isnan(_3140) ? 1.0 : min(_3140, 1.0));
        float _716 = ((((1.0 - _707) * (_702 + 2.0)) * exp2(log2(isnan(1.0) ? _3118 : (isnan(_3118) ? 1.0 : min(_3118, 1.0))) * (_702 + 1.0))) + _707) * _629;
        float _717 = _597 * 0.5;
        float _718 = _607 * 0.5;
        float _719 = _617 * 0.5;
        float _720 = dot(vec3(_717, _718, _719), vec3(_717, _718, _719));
        float _725 = (_720 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_720);
        float _733 = (dot(vec3(_226, _227, _228), vec3(_725 * _717, _725 * _718, _725 * _719)) + 1.0) * 0.5;
        float _3151 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
        float _742 = sqrt(((_718 * _718) + (_717 * _717)) + (_719 * _719)) / (_630 + 9.9999997473787516355514526367188e-06);
        float _3162 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
        float _743 = isnan(1.0) ? _3162 : (isnan(_3162) ? 1.0 : min(_3162, 1.0));
        float _744 = _743 * 2.0;
        float _748 = (1.0 - _743) / (_743 + 1.0);
        float _3173 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
        float _749 = isnan(1.0) ? _3173 : (isnan(_3173) ? 1.0 : min(_3173, 1.0));
        float _758 = ((((1.0 - _749) * (_744 + 2.0)) * exp2(log2(isnan(1.0) ? _3151 : (isnan(_3151) ? 1.0 : min(_3151, 1.0))) * (_744 + 1.0))) + _749) * _630;
        _766 = _597;
        _768 = _596;
        _769 = _595;
        _770 = _607;
        _771 = _606;
        _772 = _605;
        _773 = _617;
        _774 = _616;
        _775 = _615;
        _776 = _630;
        _777 = _629;
        _778 = _628;
        _779 = cbModelParam._m0[36u].z * (isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0)));
        _780 = cbModelParam._m0[36u].z * (isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0)));
        _781 = cbModelParam._m0[36u].z * (isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0)));
    }
    else
    {
        _766 = _767;
        _768 = _767;
        _769 = _767;
        _770 = _767;
        _771 = _767;
        _772 = _767;
        _773 = _767;
        _774 = _767;
        _775 = _767;
        _776 = _767;
        _777 = _767;
        _778 = _767;
        _779 = 0.0;
        _780 = 0.0;
        _781 = 0.0;
    }
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _810 = fma(_435, cbModelParam._m0[30u].z, fma(_431, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _427));
        float _814 = fma(_435, cbModelParam._m0[31u].z, fma(_431, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _427));
        float _818 = fma(_435, cbModelParam._m0[32u].z, fma(_431, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _427));
        float _841 = _427 + _226;
        float _842 = _431 + _227;
        float _843 = _435 + _228;
        float _853 = fma(_843, cbModelParam._m0[30u].z, fma(_842, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _841)) - _810;
        float _854 = fma(_843, cbModelParam._m0[31u].z, fma(_842, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _841)) - _814;
        float _855 = fma(_843, cbModelParam._m0[32u].z, fma(_842, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _841)) - _818;
        float _859 = inversesqrt(dot(vec3(_853, _854, _855), vec3(_853, _854, _855)));
        float _872 = ((_859 * _853) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_810 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _873 = ((_859 * _854) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_814 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _874 = ((_859 * _855) / cbModelParam._m0[35u].z) + ((((((_818 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _876 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_872, _873, _874), 0.0);
        vec4 _883 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_872, _873, _874), 0.0);
        vec4 _890 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_872, _873, _874), 0.0);
        vec4 _897 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_872, _873, _874), 0.0);
        float _909 = exp2((_876.w + (-0.5)) * 20.0) * 2.0;
        float _910 = _909 * (_876.x + (-0.5));
        float _911 = _909 * (_876.y + (-0.5));
        float _912 = _909 * (_876.z + (-0.5));
        float _919 = exp2((_883.w + (-0.5)) * 20.0) * 2.0;
        float _920 = _919 * (_883.x + (-0.5));
        float _921 = _919 * (_883.y + (-0.5));
        float _922 = _919 * (_883.z + (-0.5));
        float _929 = exp2((_890.w + (-0.5)) * 20.0) * 2.0;
        float _930 = _929 * (_890.x + (-0.5));
        float _931 = _929 * (_890.y + (-0.5));
        float _932 = _929 * (_890.z + (-0.5));
        float _939 = exp2((_897.w + (-0.5)) * 20.0) * 2.0;
        float _940 = _939 * (_897.x + (-0.5));
        float _941 = _939 * (_897.y + (-0.5));
        float _942 = _939 * (_897.z + (-0.5));
        float _943 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _944 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _945 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _946 = _910 * 0.5;
        float _947 = _920 * 0.5;
        float _948 = _930 * 0.5;
        float _949 = dot(vec3(_946, _947, _948), vec3(_946, _947, _948));
        float _954 = (_949 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_949);
        float _962 = (dot(vec3(_226, _227, _228), vec3(_954 * _946, _954 * _947, _954 * _948)) + 1.0) * 0.5;
        float _3214 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _971 = sqrt(((_947 * _947) + (_946 * _946)) + (_948 * _948)) / (_943 + 9.9999997473787516355514526367188e-06);
        float _3225 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _972 = isnan(1.0) ? _3225 : (isnan(_3225) ? 1.0 : min(_3225, 1.0));
        float _973 = _972 * 2.0;
        float _977 = (1.0 - _972) / (_972 + 1.0);
        float _3236 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _978 = isnan(1.0) ? _3236 : (isnan(_3236) ? 1.0 : min(_3236, 1.0));
        float _987 = ((((1.0 - _978) * (_973 + 2.0)) * exp2(log2(isnan(1.0) ? _3214 : (isnan(_3214) ? 1.0 : min(_3214, 1.0))) * (_973 + 1.0))) + _978) * _943;
        float _988 = _911 * 0.5;
        float _989 = _921 * 0.5;
        float _990 = _931 * 0.5;
        float _991 = dot(vec3(_988, _989, _990), vec3(_988, _989, _990));
        float _996 = (_991 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_991);
        float _1004 = (dot(vec3(_226, _227, _228), vec3(_996 * _988, _996 * _989, _996 * _990)) + 1.0) * 0.5;
        float _3247 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1013 = sqrt(((_989 * _989) + (_988 * _988)) + (_990 * _990)) / (_944 + 9.9999997473787516355514526367188e-06);
        float _3258 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1014 = isnan(1.0) ? _3258 : (isnan(_3258) ? 1.0 : min(_3258, 1.0));
        float _1015 = _1014 * 2.0;
        float _1019 = (1.0 - _1014) / (_1014 + 1.0);
        float _3269 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1020 = isnan(1.0) ? _3269 : (isnan(_3269) ? 1.0 : min(_3269, 1.0));
        float _1029 = ((((1.0 - _1020) * (_1015 + 2.0)) * exp2(log2(isnan(1.0) ? _3247 : (isnan(_3247) ? 1.0 : min(_3247, 1.0))) * (_1015 + 1.0))) + _1020) * _944;
        float _1030 = _912 * 0.5;
        float _1031 = _922 * 0.5;
        float _1032 = _932 * 0.5;
        float _1033 = dot(vec3(_1030, _1031, _1032), vec3(_1030, _1031, _1032));
        float _1038 = (_1033 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1033);
        float _1046 = (dot(vec3(_226, _227, _228), vec3(_1038 * _1030, _1038 * _1031, _1038 * _1032)) + 1.0) * 0.5;
        float _3280 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1055 = sqrt(((_1031 * _1031) + (_1030 * _1030)) + (_1032 * _1032)) / (_945 + 9.9999997473787516355514526367188e-06);
        float _3291 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1056 = isnan(1.0) ? _3291 : (isnan(_3291) ? 1.0 : min(_3291, 1.0));
        float _1057 = _1056 * 2.0;
        float _1061 = (1.0 - _1056) / (_1056 + 1.0);
        float _3302 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1062 = isnan(1.0) ? _3302 : (isnan(_3302) ? 1.0 : min(_3302, 1.0));
        float _1071 = ((((1.0 - _1062) * (_1057 + 2.0)) * exp2(log2(isnan(1.0) ? _3280 : (isnan(_3280) ? 1.0 : min(_3280, 1.0))) * (_1057 + 1.0))) + _1062) * _945;
        _1079 = _912;
        _1080 = _911;
        _1081 = _910;
        _1082 = _922;
        _1083 = _921;
        _1084 = _920;
        _1085 = _932;
        _1086 = _931;
        _1087 = _930;
        _1088 = _945;
        _1089 = _944;
        _1090 = _943;
        _1091 = cbModelParam._m0[36u].w * (isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0)));
        _1092 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0)));
        _1093 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0)));
    }
    else
    {
        _1079 = _767;
        _1080 = _767;
        _1081 = _767;
        _1082 = _767;
        _1083 = _767;
        _1084 = _767;
        _1085 = _767;
        _1086 = _767;
        _1087 = _767;
        _1088 = _767;
        _1089 = _767;
        _1090 = _767;
        _1091 = 0.0;
        _1092 = 0.0;
        _1093 = 0.0;
    }
    float _1103 = (cbModelParam._m0[1u].x * (_1091 - _779)) + _779;
    float _1104 = (cbModelParam._m0[1u].x * (_1092 - _780)) + _780;
    float _1105 = (cbModelParam._m0[1u].x * (_1093 - _781)) + _781;
    float _1126 = fma(_1105, cbSceneParam._m0[89u].z, fma(_1104, cbSceneParam._m0[89u].y, _1103 * cbSceneParam._m0[89u].x));
    float _1129 = fma(_1105, cbSceneParam._m0[90u].z, fma(_1104, cbSceneParam._m0[90u].y, _1103 * cbSceneParam._m0[90u].x));
    float _1132 = fma(_1105, cbSceneParam._m0[91u].z, fma(_1104, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1103));
    float _1147 = _403 * 0.5;
    float _1148 = _404 * 0.5;
    float _1149 = _405 * 0.5;
    float _1150 = dot(vec4(_1147, _1148, _1149, 1.0), vec4(_1081, _1084, _1087, _1090));
    float _1153 = dot(vec4(_1147, _1148, _1149, 1.0), vec4(_1080, _1083, _1086, _1089));
    float _1156 = dot(vec4(_1147, _1148, _1149, 1.0), vec4(_1079, _1082, _1085, _1088));
    float _1190;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1163 = dot(vec4(_1147, _1148, _1149, 1.0), vec4(_766, _770, _773, _776));
        float _1167 = dot(vec4(_1147, _1148, _1149, 1.0), vec4(_768, _771, _774, _777));
        float _1171 = dot(vec4(_1147, _1148, _1149, 1.0), vec4(_769, _772, _775, _778));
        float _1178 = dot(vec4(cbModelParam._m0[39u]), vec4(_1147, _1148, _1149, 1.0));
        _1190 = dot(vec3(isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0)), isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0)), isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1178) ? 0.0 : (isnan(0.0) ? _1178 : max(0.0, _1178))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1190 = 1.0;
    }
    float _1201;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1192 = dot(vec4(cbModelParam._m0[40u]), vec4(_1147, _1148, _1149, 1.0));
        _1201 = dot(vec3(isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0)), isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0)), isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1192) ? 0.0 : (isnan(0.0) ? _1192 : max(0.0, _1192))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1201 = 1.0;
    }
    float _1205 = (_1201 * cbModelParam._m0[1u].x) + (_1190 * (1.0 - cbModelParam._m0[1u].x));
    float _1214 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1296;
    float _1298;
    float _1300;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1263 = fma(_435, cbModelParam._m0[13u].z, fma(_431, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _427)) + cbModelParam._m0[13u].w;
        float _1267 = fma(_435, cbModelParam._m0[14u].z, fma(_431, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _427)) + cbModelParam._m0[14u].w;
        float _1271 = fma(_435, cbModelParam._m0[15u].z, fma(_431, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _427)) + cbModelParam._m0[15u].w;
        float _1274 = fma(_405, cbModelParam._m0[13u].z, fma(_404, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _403));
        float _1277 = fma(_405, cbModelParam._m0[14u].z, fma(_404, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _403));
        float _1280 = fma(_405, cbModelParam._m0[15u].z, fma(_404, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _403));
        float _1306;
        if (_1274 > 0.0)
        {
            _1306 = abs((1.0 - _1263) / _1274);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1274 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1263 + 1.0) / _1274);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1306 = frontier_phi_19_17_ladder;
        }
        float _1514;
        if (_1277 > 0.0)
        {
            _1514 = abs((1.0 - _1267) / _1277);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1277 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1267 + 1.0) / _1277);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1514 = frontier_phi_28_24_ladder;
        }
        float _1703;
        if (_1280 > 0.0)
        {
            _1703 = abs((1.0 - _1271) / _1280);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1280 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1271 + 1.0) / _1280);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1703 = frontier_phi_40_35_ladder;
        }
        float _1705 = isnan(_1514) ? _1306 : (isnan(_1306) ? _1514 : min(_1306, _1514));
        float _1706 = isnan(_1703) ? _1705 : (isnan(_1705) ? _1703 : min(_1705, _1703));
        float _1710 = (_1706 * _1274) + _1263;
        float _1711 = (_1706 * _1277) + _1267;
        float _1712 = (_1706 * _1280) + _1271;
        float _1713 = _1706 * 9.9999997473787516355514526367188e-05;
        float _1715 = (-1.0) - _1713;
        float _1717 = _1713 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1712 > _1717) || ((_1712 < _1715) || ((_1711 > _1717) || ((_1711 < _1715) || ((_1710 < _1715) || (_1710 > _1717))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1809 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1712, cbModelParam._m0[9u].z, fma(_1711, cbModelParam._m0[9u].y, _1710 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1712, cbModelParam._m0[10u].z, fma(_1711, cbModelParam._m0[10u].y, _1710 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1712, cbModelParam._m0[11u].z, fma(_1711, cbModelParam._m0[11u].y, _1710 * cbModelParam._m0[11u].x))), _1214);
            frontier_phi_18_40_ladder = _1809.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _1809.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _1809.x * cbModelParam._m0[1u].y;
        }
        _1296 = frontier_phi_18_40_ladder_2;
        _1298 = frontier_phi_18_40_ladder_1;
        _1300 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1284 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_403, _404, _405), _1214);
        _1296 = _1284.x * cbModelParam._m0[1u].y;
        _1298 = _1284.y * cbModelParam._m0[1u].y;
        _1300 = _1284.z * cbModelParam._m0[1u].y;
    }
    float _1303 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1396;
    float _1398;
    float _1400;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1360 = fma(_435, cbModelParam._m0[21u].z, fma(_431, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _427)) + cbModelParam._m0[21u].w;
        float _1364 = fma(_435, cbModelParam._m0[22u].z, fma(_431, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _427)) + cbModelParam._m0[22u].w;
        float _1368 = fma(_435, cbModelParam._m0[23u].z, fma(_431, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _427)) + cbModelParam._m0[23u].w;
        float _1371 = fma(_405, cbModelParam._m0[21u].z, fma(_404, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _403));
        float _1374 = fma(_405, cbModelParam._m0[22u].z, fma(_404, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _403));
        float _1377 = fma(_405, cbModelParam._m0[23u].z, fma(_404, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _403));
        float _1519;
        if (_1371 > 0.0)
        {
            _1519 = abs((1.0 - _1360) / _1371);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1371 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1360 + 1.0) / _1371);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1519 = frontier_phi_30_26_ladder;
        }
        float _1730;
        if (_1374 > 0.0)
        {
            _1730 = abs((1.0 - _1364) / _1374);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1374 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1364 + 1.0) / _1374);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1730 = frontier_phi_42_37_ladder;
        }
        float _1881;
        if (_1377 > 0.0)
        {
            _1881 = abs((1.0 - _1368) / _1377);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1377 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1368 + 1.0) / _1377);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _1881 = frontier_phi_51_48_ladder;
        }
        float _1883 = isnan(_1730) ? _1519 : (isnan(_1519) ? _1730 : min(_1519, _1730));
        float _1884 = isnan(_1881) ? _1883 : (isnan(_1883) ? _1881 : min(_1883, _1881));
        float _1888 = (_1884 * _1371) + _1360;
        float _1889 = (_1884 * _1374) + _1364;
        float _1890 = (_1884 * _1377) + _1368;
        float _1891 = _1884 * 9.9999997473787516355514526367188e-05;
        float _1892 = (-1.0) - _1891;
        float _1894 = _1891 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_1890 > _1894) || ((_1890 < _1892) || ((_1889 > _1894) || ((_1889 < _1892) || ((_1888 < _1892) || (_1888 > _1894))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2117 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1890, cbModelParam._m0[17u].z, fma(_1889, cbModelParam._m0[17u].y, _1888 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1890, cbModelParam._m0[18u].z, fma(_1889, cbModelParam._m0[18u].y, _1888 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1890, cbModelParam._m0[19u].z, fma(_1889, cbModelParam._m0[19u].y, _1888 * cbModelParam._m0[19u].x))), _1303);
            frontier_phi_27_51_ladder = _2117.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2117.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2117.x * cbModelParam._m0[1u].z;
        }
        _1396 = frontier_phi_27_51_ladder_2;
        _1398 = frontier_phi_27_51_ladder_1;
        _1400 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1380 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_403, _404, _405), _1303);
        _1396 = _1380.x * cbModelParam._m0[1u].z;
        _1398 = _1380.y * cbModelParam._m0[1u].z;
        _1400 = _1380.z * cbModelParam._m0[1u].z;
    }
    float _1412 = _394 * 0.01200000010430812835693359375;
    float _1414 = _1412 * ((cbModelParam._m0[1u].w * (_1396 - _1296)) + _1296);
    float _1415 = _1412 * ((cbModelParam._m0[1u].w * (_1398 - _1298)) + _1298);
    float _1416 = _1412 * ((cbModelParam._m0[1u].w * (_1400 - _1300)) + _1300);
    float _1419 = fma(_1416, cbSceneParam._m0[89u].z, fma(_1415, cbSceneParam._m0[89u].y, _1414 * cbSceneParam._m0[89u].x));
    float _1422 = fma(_1416, cbSceneParam._m0[90u].z, fma(_1415, cbSceneParam._m0[90u].y, _1414 * cbSceneParam._m0[90u].x));
    float _1425 = fma(_1416, cbSceneParam._m0[91u].z, fma(_1415, cbSceneParam._m0[91u].y, _1414 * cbSceneParam._m0[91u].x));
    uvec4 _1435 = floatBitsToUint(cbInstanceData._m0[_368 + 5u]);
    uint _1437 = _1435.x * 14u;
    uint _1438 = _1437 + 13u;
    float _1445 = _394 + (-1.0);
    float _1451 = (cbLight._m0[_1438].x * _1445) + 1.0;
    float _1452 = (cbLight._m0[_1438].y * _1445) + 1.0;
    float _1453 = (cbLight._m0[_1438].z * _1445) + 1.0;
    float _1454 = (cbLight._m0[_1438].w * _1445) + 1.0;
    uint _1455 = _1437 + 5u;
    float _1461 = isnan(1.0) ? _1452 : (isnan(_1452) ? 1.0 : min(_1452, 1.0));
    uint _1465 = _1437 + 4u;
    float _1472 = isnan(1.0) ? _1451 : (isnan(_1451) ? 1.0 : min(_1451, 1.0));
    uint _1476 = _1437 | 1u;
    float _1487 = dot(vec3(cbLight._m0[_1437].xyz), vec3(_226, _227, _228));
    float _1490 = dot(vec3(cbLight._m0[_1476].xyz), vec3(_226, _227, _228));
    float _3438 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
    float _3449 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
    float _1495 = (isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0))) * 0.3183098733425140380859375;
    float _1497 = (isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0))) * 0.3183098733425140380859375;
    float _1504 = ((cbLight._m0[_1455].x * _1461) * _1497) + ((cbLight._m0[_1465].x * _1472) * _1495);
    float _1505 = ((_1461 * cbLight._m0[_1455].y) * _1497) + ((_1472 * cbLight._m0[_1465].y) * _1495);
    float _1506 = ((_1461 * cbLight._m0[_1455].z) * _1497) + ((_1472 * cbLight._m0[_1465].z) * _1495);
    uvec4 _1511 = floatBitsToUint(cbLight._m0[_1437 + 12u]);
    bool _1513 = _1511.x == 0u;
    float _1524;
    float _1526;
    float _1528;
    if (_1513)
    {
        _1524 = _1504;
        _1526 = _1505;
        _1528 = _1506;
    }
    else
    {
        uint _1532 = _1437 + 6u;
        float _1548 = (dot(vec3(cbLight._m0[_1437 + 2u].xyz), vec3(_226, _227, _228)) * 0.5) + 0.5;
        float _1549 = _1548 * _1548;
        float _3460 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1550 = isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0));
        float _1551 = isnan(1.0) ? _1453 : (isnan(_1453) ? 1.0 : min(_1453, 1.0));
        _1524 = (((cbLight._m0[_1532].x * 0.3183098733425140380859375) * _1550) * _1551) + _1504;
        _1526 = (((cbLight._m0[_1532].y * 0.3183098733425140380859375) * _1550) * _1551) + _1505;
        _1528 = (((cbLight._m0[_1532].z * 0.3183098733425140380859375) * _1550) * _1551) + _1506;
    }
    bool _1531 = _1511.y == 0u;
    float _1569;
    float _1571;
    float _1573;
    if (_1531)
    {
        _1569 = _1524;
        _1571 = _1526;
        _1573 = _1528;
    }
    else
    {
        uint _1674 = _1437 + 7u;
        float _1690 = (dot(vec3(cbLight._m0[_1437 + 3u].xyz), vec3(_226, _227, _228)) * 0.5) + 0.5;
        float _1691 = _1690 * _1690;
        float _3476 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
        float _1692 = isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0));
        float _1693 = isnan(1.0) ? _1454 : (isnan(_1454) ? 1.0 : min(_1454, 1.0));
        _1569 = (((cbLight._m0[_1674].x * 0.3183098733425140380859375) * _1692) * _1693) + _1524;
        _1571 = (((cbLight._m0[_1674].y * 0.3183098733425140380859375) * _1692) * _1693) + _1526;
        _1573 = (((cbLight._m0[_1674].z * 0.3183098733425140380859375) * _1692) * _1693) + _1528;
    }
    uint _1575 = _1437 + 8u;
    float _1581 = cbLight._m0[_1437].x + _307;
    float _1582 = cbLight._m0[_1437].y + _308;
    float _1583 = cbLight._m0[_1437].z + _309;
    float _1587 = inversesqrt(dot(vec3(_1581, _1582, _1583), vec3(_1581, _1582, _1583)));
    float _1591 = dot(vec3(_226, _227, _228), vec3(cbLight._m0[_1437].xyz));
    float _3492 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
    float _1594 = isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0));
    float _3503 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _1595 = isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0));
    float _1596 = dot(vec3(cbLight._m0[_1437].xyz), vec3(_1581 * _1587, _1582 * _1587, _1583 * _1587));
    float _3514 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
    float _1607 = (exp2(log2(1.0 - (isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1613 = (0.5 / ((_1594 + 9.9999999392252902907785028219223e-09) + _1595)) * _1594;
    float _3525 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
    float _1615 = (isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0))) * 0.31831014156341552734375;
    uint _1626 = _1437 + 9u;
    float _1632 = cbLight._m0[_1476].x + _307;
    float _1633 = cbLight._m0[_1476].y + _308;
    float _1634 = cbLight._m0[_1476].z + _309;
    float _1638 = inversesqrt(dot(vec3(_1632, _1633, _1634), vec3(_1632, _1633, _1634)));
    float _1642 = dot(vec3(_226, _227, _228), vec3(cbLight._m0[_1476].xyz));
    float _3536 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
    float _1645 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
    float _1646 = dot(vec3(cbLight._m0[_1476].xyz), vec3(_1632 * _1638, _1633 * _1638, _1634 * _1638));
    float _3547 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
    float _1655 = (exp2(log2(1.0 - (isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1659 = (0.5 / ((_1645 + 9.9999999392252902907785028219223e-09) + _1595)) * _1645;
    float _3558 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
    float _1661 = (isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0))) * 0.31831014156341552734375;
    float _1671 = (((_1655 * cbLight._m0[_1626].x) * _1661) * _1461) + (((_1607 * cbLight._m0[_1575].x) * _1615) * _1472);
    float _1672 = (((_1655 * cbLight._m0[_1626].y) * _1661) * _1461) + (((_1607 * cbLight._m0[_1575].y) * _1615) * _1472);
    float _1673 = (((_1655 * cbLight._m0[_1626].z) * _1661) * _1461) + (((_1607 * cbLight._m0[_1575].z) * _1615) * _1472);
    float _1735;
    float _1737;
    float _1739;
    if (_1513)
    {
        _1735 = _1671;
        _1737 = _1672;
        _1739 = _1673;
    }
    else
    {
        uint _1741 = _1437 + 10u;
        uint _1747 = _1437 + 2u;
        float _1753 = cbLight._m0[_1747].x + _307;
        float _1754 = cbLight._m0[_1747].y + _308;
        float _1755 = cbLight._m0[_1747].z + _309;
        float _1759 = inversesqrt(dot(vec3(_1753, _1754, _1755), vec3(_1753, _1754, _1755)));
        float _1763 = dot(vec3(_226, _227, _228), vec3(cbLight._m0[_1747].xyz));
        float _3569 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
        float _1766 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
        float _1767 = dot(vec3(cbLight._m0[_1747].xyz), vec3(_1753 * _1759, _1754 * _1759, _1755 * _1759));
        float _3580 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
        float _1776 = (exp2(log2(1.0 - (isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1780 = (0.5 / ((_1766 + 9.9999999392252902907785028219223e-09) + _1595)) * _1766;
        float _3591 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
        float _1782 = (isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0))) * 0.31831014156341552734375;
        float _1783 = isnan(1.0) ? _1453 : (isnan(_1453) ? 1.0 : min(_1453, 1.0));
        _1735 = (((_1776 * cbLight._m0[_1741].x) * _1782) * _1783) + _1671;
        _1737 = (((_1776 * cbLight._m0[_1741].y) * _1782) * _1783) + _1672;
        _1739 = (((_1776 * cbLight._m0[_1741].z) * _1782) * _1783) + _1673;
    }
    float _1818;
    float _1820;
    float _1822;
    if (_1531)
    {
        _1818 = _1735;
        _1820 = _1737;
        _1822 = _1739;
    }
    else
    {
        uint _1829 = _1437 + 11u;
        uint _1835 = _1437 + 3u;
        float _1841 = cbLight._m0[_1835].x + _307;
        float _1842 = cbLight._m0[_1835].y + _308;
        float _1843 = cbLight._m0[_1835].z + _309;
        float _1847 = inversesqrt(dot(vec3(_1841, _1842, _1843), vec3(_1841, _1842, _1843)));
        float _1851 = dot(vec3(_226, _227, _228), vec3(cbLight._m0[_1835].xyz));
        float _3607 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
        float _1854 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
        float _1855 = dot(vec3(cbLight._m0[_1835].xyz), vec3(_1841 * _1847, _1842 * _1847, _1843 * _1847));
        float _3618 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
        float _1864 = (exp2(log2(1.0 - (isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1868 = (0.5 / ((_1854 + 9.9999999392252902907785028219223e-09) + _1595)) * _1854;
        float _3629 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
        float _1870 = (isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0))) * 0.31831014156341552734375;
        float _1871 = isnan(1.0) ? _1454 : (isnan(_1454) ? 1.0 : min(_1454, 1.0));
        _1818 = (((_1864 * cbLight._m0[_1829].x) * _1870) * _1871) + _1735;
        _1820 = (((_1864 * cbLight._m0[_1829].y) * _1870) * _1871) + _1737;
        _1822 = (((_1864 * cbLight._m0[_1829].z) * _1870) * _1871) + _1739;
    }
    float _2005;
    float _2007;
    float _2009;
    float _2011;
    float _2013;
    float _2015;
    if (_1435.y == 0u)
    {
        float _1946 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1947 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1946;
        float _1948 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1946;
        float _1949 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1946;
        uvec4 _1961 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1962 = _1961.x;
        uint _1973 = uint((float(_1961.y) * floor(float(uint(cbSceneParam._m0[85u].y * _329) / _1962))) + floor(float(uint(cbSceneParam._m0[85u].x * _328) / _1962)));
        float _1983 = (log2(_1949 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1984 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
        uint _1987 = uint(isnan(14.0) ? _1984 : (isnan(_1984) ? 14.0 : min(_1984, 14.0)));
        uvec4 _1992 = texelFetch(g_lightClusterGridBuffer, int(((_1987 << 2u) + (_1973 << 6u)) >> 2u));
        uint _1993 = _1992.x;
        uint _1994 = _1961.z;
        float _2122;
        float _2124;
        float _2126;
        float _2128;
        float _2130;
        float _2132;
        if (((((1u << ((_1994 >> 4u) & 15u)) + 4294967295u) & _1993) == 0u) || ((_1994 & 240u) == 0u))
        {
            _2122 = 0.0;
            _2124 = 0.0;
            _2126 = 0.0;
            _2128 = 0.0;
            _2130 = 0.0;
            _2132 = 0.0;
        }
        else
        {
            float _2123;
            float _2125;
            float _2127;
            float _2129;
            float _2131;
            float _2133;
            float _2282 = 0.0;
            float _2283 = 0.0;
            float _2284 = 0.0;
            float _2285 = 0.0;
            float _2286 = 0.0;
            float _2287 = 0.0;
            uint _2288 = 0u;
            uint _2297;
            bool _2298;
            for (;;)
            {
                _2297 = texelFetch(g_lightClassification, int((((_1987 << 5u) + (_1973 << 9u)) + (_2288 << 2u)) >> 2u)).x;
                _2298 = _2297 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2298)
                {
                    frontier_phi_68_pred = _2284;
                    frontier_phi_68_pred_1 = _2287;
                    frontier_phi_68_pred_2 = _2286;
                    frontier_phi_68_pred_3 = _2285;
                    frontier_phi_68_pred_4 = _2283;
                    frontier_phi_68_pred_5 = _2282;
                }
                else
                {
                    float _2427;
                    float _2428;
                    float _2429;
                    float _2430;
                    float _2431;
                    float _2432;
                    uint _2433;
                    _2427 = _2282;
                    _2428 = _2283;
                    _2429 = _2284;
                    _2430 = _2285;
                    _2431 = _2286;
                    _2432 = _2287;
                    _2433 = _2297;
                    float _2354;
                    float _2355;
                    float _2356;
                    float _2357;
                    float _2358;
                    float _2359;
                    for (;;)
                    {
                        uint _2437 = uint(findLSB(_2433)) + (_2288 << 5u);
                        uint _2434 = (_2433 + 4294967295u) & _2433;
                        uint _2439 = _2437 * 48u;
                        vec4 _2453 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2439)).x, texelFetch(g_PointLightRenderingBuffer, int(_2439 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2439 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2439 + 3u)).x));
                        uint _2459 = (_2437 * 48u) + 4u;
                        vec4 _2472 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2459)).x, texelFetch(g_PointLightRenderingBuffer, int(_2459 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2459 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2459 + 3u)).x));
                        uint _2478 = (_2437 * 48u) + 8u;
                        vec3 _2489 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2478)).x, texelFetch(g_PointLightRenderingBuffer, int(_2478 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2478 + 2u)).x));
                        float _2493 = _2453.x - _1947;
                        float _2494 = _2453.y - _1948;
                        float _2495 = _2453.z - _1949;
                        float _2496 = dot(vec3(_2493, _2494, _2495), vec3(_2493, _2494, _2495));
                        float _2499 = inversesqrt(_2496);
                        float _2508 = 1.0 - (_2496 * _2453.w);
                        float _3655 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
                        float _2509 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
                        float _2510 = sqrt(_2496) * _2472.w;
                        float _2513 = 1.39999997615814208984375 / (_2510 + 1.39999997615814208984375);
                        float _2514 = _2513 * _2513;
                        float _2517 = ((1.0 - _2514) * dot(vec3(_349, _352, _355), vec3(_2499 * _2493, _2499 * _2494, _2499 * _2495))) + _2514;
                        float _2520 = _2510 * _2510;
                        float _2524 = ((isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0))) * _2509) / ((_2520 * 0.699999988079071044921875) + 1.0);
                        float _2528 = (-0.0) - _1947;
                        float _2529 = (-0.0) - _1948;
                        float _2530 = (-0.0) - _1949;
                        float _2534 = inversesqrt(dot(vec3(_2528, _2529, _2530), vec3(_2528, _2529, _2530)));
                        float _2538 = dot(vec3(_349, _352, _355), vec3(_2534 * _2528, _2534 * _2529, _2534 * _2530));
                        float _3671 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
                        float _3682 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
                        float _2542 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
                        float _2546 = (0.5 / (((isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0))) + 9.9999999392252902907785028219223e-09) + _2542)) * _2542;
                        float _3693 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
                        float _2555 = (((isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0))) * 3.1415927410125732421875) / ((_2520 * 2.1991131305694580078125) + 3.141590118408203125)) * _2509;
                        _2357 = (_2524 * _2472.x) + _2430;
                        _2358 = (_2524 * _2472.y) + _2431;
                        _2359 = (_2524 * _2472.z) + _2432;
                        _2354 = (_2555 * _2489.x) + _2427;
                        _2355 = (_2555 * _2489.y) + _2428;
                        _2356 = (_2555 * _2489.z) + _2429;
                        if (_2434 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2427 = _2354;
                            _2428 = _2355;
                            _2429 = _2356;
                            _2430 = _2357;
                            _2431 = _2358;
                            _2432 = _2359;
                            _2433 = _2434;
                        }
                    }
                    frontier_phi_68_pred = _2356;
                    frontier_phi_68_pred_1 = _2359;
                    frontier_phi_68_pred_2 = _2358;
                    frontier_phi_68_pred_3 = _2357;
                    frontier_phi_68_pred_4 = _2355;
                    frontier_phi_68_pred_5 = _2354;
                }
                _2127 = frontier_phi_68_pred;
                _2133 = frontier_phi_68_pred_1;
                _2131 = frontier_phi_68_pred_2;
                _2129 = frontier_phi_68_pred_3;
                _2125 = frontier_phi_68_pred_4;
                _2123 = frontier_phi_68_pred_5;
                uint _2289 = _2288 + 1u;
                if (_2289 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2282 = _2123;
                    _2283 = _2125;
                    _2284 = _2127;
                    _2285 = _2129;
                    _2286 = _2131;
                    _2287 = _2133;
                    _2288 = _2289;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2122 = _2123;
            _2124 = _2125;
            _2126 = _2127;
            _2128 = _2129;
            _2130 = _2131;
            _2132 = _2133;
        }
        uvec4 _2136 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2137 = _2136.z;
        uint _2139 = (_2137 >> 8u) & 15u;
        float _2253;
        float _2255;
        float _2257;
        float _2259;
        float _2261;
        float _2263;
        if (((4294967295u << _2139) & _1993) == 0u)
        {
            _2253 = _2122;
            _2255 = _2124;
            _2257 = _2126;
            _2259 = _2128;
            _2261 = _2130;
            _2263 = _2132;
        }
        else
        {
            float _2278 = inversesqrt(dot(vec3(_1947, _1948, _1949), vec3(_1947, _1948, _1949)));
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2139 < ((_2137 >> 12u) & 15u))
            {
                float _2254;
                float _2256;
                float _2258;
                float _2260;
                float _2262;
                float _2264;
                float _2410 = _2122;
                float _2411 = _2124;
                float _2412 = _2126;
                float _2413 = _2128;
                float _2414 = _2130;
                float _2415 = _2132;
                uint _2416 = _2139;
                uint _2425;
                bool _2426;
                for (;;)
                {
                    _2425 = texelFetch(g_lightClassification, int((((_1987 << 5u) + (_1973 << 9u)) + (_2416 << 2u)) >> 2u)).x;
                    _2426 = _2425 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2426)
                    {
                        frontier_phi_79_pred = _2415;
                        frontier_phi_79_pred_1 = _2414;
                        frontier_phi_79_pred_2 = _2413;
                        frontier_phi_79_pred_3 = _2412;
                        frontier_phi_79_pred_4 = _2411;
                        frontier_phi_79_pred_5 = _2410;
                    }
                    else
                    {
                        float _2569;
                        float _2570;
                        float _2571;
                        float _2572;
                        float _2573;
                        float _2574;
                        float _2821;
                        float _2822;
                        float _2823;
                        float _2824;
                        float _2825;
                        float _2826;
                        float _2582 = _2410;
                        float _2583 = _2411;
                        float _2584 = _2412;
                        float _2585 = _2413;
                        float _2586 = _2414;
                        float _2587 = _2415;
                        uint _2588 = _2425;
                        uint _2589;
                        vec4 _2614;
                        float _2615;
                        vec4 _2630;
                        vec3 _2642;
                        vec4 _2658;
                        vec4 _2674;
                        float _2721;
                        bool _2722;
                        for (;;)
                        {
                            uint _2599 = ((_2416 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2588));
                            _2589 = (_2588 + 4294967295u) & _2588;
                            uint _2601 = _2599 * 40u;
                            _2614 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2601)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2601 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2601 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2601 + 3u)).x));
                            _2615 = _2614.w;
                            uint _2617 = (_2599 * 40u) + 4u;
                            _2630 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2617)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2617 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2617 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2617 + 3u)).x));
                            uint _2632 = (_2599 * 40u) + 8u;
                            _2642 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2632)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2632 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2632 + 2u)).x));
                            uint _2645 = (_2599 * 40u) + 16u;
                            _2658 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2645)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2645 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2645 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2645 + 3u)).x));
                            uint _2661 = (_2599 * 40u) + 20u;
                            _2674 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2661)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2661 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2661 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2661 + 3u)).x));
                            uint _2677 = (_2599 * 40u) + 24u;
                            vec4 _2690 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2677)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2677 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2677 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2677 + 3u)).x));
                            uint _2696 = (_2599 * 40u) + 28u;
                            vec4 _2709 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2696)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2696 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2696 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2696 + 3u)).x));
                            _2721 = fma(_1949, _2709.z, fma(_1948, _2709.y, _2709.x * _1947)) + _2709.w;
                            _2722 = !((fma(_1949, _2690.z, fma(_1948, _2690.y, _2690.x * _1947)) + _2690.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_2722)
                            {
                                float _2749 = _2614.x - _1947;
                                float _2750 = _2614.y - _1948;
                                float _2751 = _2614.z - _1949;
                                float _2752 = dot(vec3(_2749, _2750, _2751), vec3(_2749, _2750, _2751));
                                float _2755 = inversesqrt(_2752);
                                float _2756 = _2755 * _2749;
                                float _2757 = _2755 * _2750;
                                float _2758 = _2755 * _2751;
                                float _2762 = 1.0 - (_2752 / (_2615 * _2615));
                                float _3704 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
                                float _2763 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
                                float _2767 = sqrt(_2752) * _2630.w;
                                float _2769 = 1.39999997615814208984375 / (_2767 + 1.39999997615814208984375);
                                float _2770 = _2769 * _2769;
                                float _2771 = 1.0 - _2770;
                                float _2773 = (_2771 * dot(vec3(_2756, _2757, _2758), vec3(_349, _352, _355))) + _2770;
                                float _2776 = _2767 * _2767;
                                float _2780 = (fma(_1949, _2658.z, fma(_1948, _2658.y, _2658.x * _1947)) + _2658.w) / _2721;
                                float _2781 = (fma(_1949, _2674.z, fma(_1948, _2674.y, _2674.x * _1947)) + _2674.w) / _2721;
                                float _2785 = 1.0 - dot(vec2(_2780, _2781), vec2(_2780, _2781));
                                float _3720 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
                                float _2786 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
                                float _2787 = _2786 * (((isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0))) * _2763) / ((_2776 * 0.699999988079071044921875) + 1.0));
                                float _2797 = dot(vec3(_349, _352, _355), vec3((-0.0) - (_1947 * _2278), (-0.0) - (_1948 * _2278), (-0.0) - (_1949 * _2278)));
                                float _3731 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
                                float _2805 = (_2771 * dot(vec3(_349, _352, _355), vec3(_2756, _2757, _2758))) + _2770;
                                float _3742 = isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0));
                                float _2806 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
                                float _2810 = (0.5 / (((isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0))) + 9.9999999392252902907785028219223e-09) + _2806)) * _2806;
                                float _3753 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
                                float _2817 = (_2786 * _2763) * (((isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0))) * 3.1415927410125732421875) / ((_2776 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_85_pred = _2787 * _2630.z;
                                frontier_phi_85_pred_1 = _2787 * _2630.y;
                                frontier_phi_85_pred_2 = _2787 * _2630.x;
                                frontier_phi_85_pred_3 = _2817 * _2642.z;
                                frontier_phi_85_pred_4 = _2817 * _2642.y;
                                frontier_phi_85_pred_5 = _2817 * _2642.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _2826 = frontier_phi_85_pred;
                            _2825 = frontier_phi_85_pred_1;
                            _2824 = frontier_phi_85_pred_2;
                            _2823 = frontier_phi_85_pred_3;
                            _2822 = frontier_phi_85_pred_4;
                            _2821 = frontier_phi_85_pred_5;
                            _2572 = _2824 + _2585;
                            _2573 = _2825 + _2586;
                            _2574 = _2826 + _2587;
                            _2569 = _2821 + _2582;
                            _2570 = _2822 + _2583;
                            _2571 = _2823 + _2584;
                            if (_2589 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2582 = _2569;
                                _2583 = _2570;
                                _2584 = _2571;
                                _2585 = _2572;
                                _2586 = _2573;
                                _2587 = _2574;
                                _2588 = _2589;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2574;
                        frontier_phi_79_pred_1 = _2573;
                        frontier_phi_79_pred_2 = _2572;
                        frontier_phi_79_pred_3 = _2571;
                        frontier_phi_79_pred_4 = _2570;
                        frontier_phi_79_pred_5 = _2569;
                    }
                    _2264 = frontier_phi_79_pred;
                    _2262 = frontier_phi_79_pred_1;
                    _2260 = frontier_phi_79_pred_2;
                    _2258 = frontier_phi_79_pred_3;
                    _2256 = frontier_phi_79_pred_4;
                    _2254 = frontier_phi_79_pred_5;
                    uint _2417 = _2416 + 1u;
                    if (_2417 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2410 = _2254;
                        _2411 = _2256;
                        _2412 = _2258;
                        _2413 = _2260;
                        _2414 = _2262;
                        _2415 = _2264;
                        _2416 = _2417;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2260;
                frontier_phi_60_61_ladder_1 = _2264;
                frontier_phi_60_61_ladder_2 = _2262;
                frontier_phi_60_61_ladder_3 = _2258;
                frontier_phi_60_61_ladder_4 = _2256;
                frontier_phi_60_61_ladder_5 = _2254;
            }
            else
            {
                frontier_phi_60_61_ladder = _2128;
                frontier_phi_60_61_ladder_1 = _2132;
                frontier_phi_60_61_ladder_2 = _2130;
                frontier_phi_60_61_ladder_3 = _2126;
                frontier_phi_60_61_ladder_4 = _2124;
                frontier_phi_60_61_ladder_5 = _2122;
            }
            _2253 = frontier_phi_60_61_ladder_5;
            _2255 = frontier_phi_60_61_ladder_4;
            _2257 = frontier_phi_60_61_ladder_3;
            _2259 = frontier_phi_60_61_ladder;
            _2261 = frontier_phi_60_61_ladder_2;
            _2263 = frontier_phi_60_61_ladder_1;
        }
        float _2268 = isnan(1.0) ? _394 : (isnan(_394) ? 1.0 : min(_394, 1.0));
        _2005 = (_2268 * _2259) + _1569;
        _2007 = (_2268 * _2261) + _1571;
        _2009 = (_2268 * _2263) + _1573;
        _2011 = ((_2253 * 0.039999999105930328369140625) * _2268) + _1818;
        _2013 = ((_2255 * 0.039999999105930328369140625) * _2268) + _1820;
        _2015 = ((_2257 * 0.039999999105930328369140625) * _2268) + _1822;
    }
    else
    {
        _2005 = _1569;
        _2007 = _1571;
        _2009 = _1573;
        _2011 = _1818;
        _2013 = _1820;
        _2015 = _1822;
    }
    uint _2021 = _370 + uint(cbMatDynParam._m0[0u].w);
    float _2027 = (_214.x * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2021].x;
    float _2028 = (_214.y * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2021].y;
    float _2029 = (_214.z * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2021].z;
    float _3769 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _3780 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _3791 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _2046 = (((isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0))) * (_2005 + ((isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0))) * _394))) + ((_2011 + ((isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0))) * _1205)) * cbPerFrame._m0[3u].x)) + _2027;
    float _2048 = (_2028 + ((_2013 + ((isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0))) * _1205)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0))) * (_2007 + ((isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0))) * _394)));
    float _2050 = (_2029 + ((_2015 + ((isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0))) * _1205)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0))) * (_2009 + ((isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0))) * _394)));
    float _2051 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
    float _2052 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
    float _2053 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _2059 = cbMtdParam._m0[2u].x * _2027;
    float _2060 = cbMtdParam._m0[2u].y * _2028;
    float _2061 = cbMtdParam._m0[2u].z * _2029;
    float _3817 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2063 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
    uint _2064 = _368 + 6u;
    float _2072 = _328 / cbSceneParam._m0[86u].x;
    float _2073 = _329 / cbSceneParam._m0[86u].y;
    vec4 _2087 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2072, _2073, (log2((isnan(cbSceneParam._m0[77u].w) ? _248 : (isnan(_248) ? cbSceneParam._m0[77u].w : min(_248, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2089 = _2087.x;
    float _2090 = _2087.y;
    float _2091 = _2087.z;
    float _2092 = _2087.w;
    float _2184;
    float _2186;
    float _2188;
    float _2190;
    if (_248 > cbSceneParam._m0[78u].w)
    {
        float _2147 = isnan(_248) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _248 : min(cbSceneParam._m0[80u].w, _248));
        float _2148 = _2147 / _248;
        float _2159 = _2148 * _300;
        float _2160 = _301 * _2148;
        float _2161 = (-0.0) - _2160;
        float _2162 = _2148 * _302;
        float _2164 = (cbSceneParam._m0[77u].w * _2161) / _2147;
        float _2165 = _2164 + cbSceneParam._m0[79u].w;
        float _2166 = cbSceneParam._m0[79u].w - _2160;
        float _2172 = sqrt(((_2159 * _2159) + (_2160 * _2160)) + (_2162 * _2162));
        float _2175 = (1.0 - (cbSceneParam._m0[77u].w / _2147)) * _2172;
        float _2180 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2182 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2367;
        if (abs((_2161 - _2164) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2367 = ((((_2165 > 0.0) ? exp2(_2180 * _2165) : (2.0 - exp2(_2182 * _2165))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2175;
        }
        else
        {
            float _2311 = 1.0 / cbSceneParam._m0[80u].x;
            float _2312 = isnan(_2166) ? _2165 : (isnan(_2165) ? _2166 : max(_2165, _2166));
            float _2313 = isnan(_2166) ? _2165 : (isnan(_2165) ? _2166 : min(_2165, _2166));
            float _2322 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : min(_2312, 0.0));
            float _2323 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : min(_2313, 0.0));
            _2367 = ((abs(_2172 / _2161) * cbSceneParam._m0[80u].y) * ((((_2322 - _2323) * 2.0) - ((exp2(_2180 * (isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0)))) - exp2(_2180 * (isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0))))) * _2311)) - ((exp2(_2182 * _2322) - exp2(_2182 * _2323)) * _2311))) + (_2175 * cbSceneParam._m0[80u].z);
        }
        vec4 _2369 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2072, _2073, 1.0), 0.0);
        float _2378 = exp2((_2367 * (-1.44269502162933349609375)) * (1.0 - _2369.w));
        float _2379 = log2(_2378);
        float _2395 = log2(_2092);
        _2184 = (exp2(_2395 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2379 * cbSceneParam._m0[78u].x)) * _2369.x) / cbSceneParam._m0[78u].x)) + _2089;
        _2186 = (exp2(_2395 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2379 * cbSceneParam._m0[78u].y)) * _2369.y) / cbSceneParam._m0[78u].y)) + _2090;
        _2188 = (exp2(_2395 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2379 * cbSceneParam._m0[78u].z)) * _2369.z) / cbSceneParam._m0[78u].z)) + _2091;
        _2190 = _2378 * _2092;
    }
    else
    {
        _2184 = _2089;
        _2186 = _2090;
        _2188 = _2091;
        _2190 = _2092;
    }
    bool _2405;
    vec4 _2200;
    vec4 _2223;
    float _2225;
    float _2229;
    float _2230;
    float _2231;
    float _2234;
    float _2237;
    float _2240;
    float _2241;
    bool _2252;
    for (;;)
    {
        _2200 = cbMatDynParam._m0[0u];
        float _2202 = roundEven(_2200.y);
        bool _2203 = _2202 == 3.0;
        float _2205 = log2(_2190);
        float _2209 = exp2(_2205 * cbSceneParam._m0[78u].x);
        float _2210 = exp2(_2205 * cbSceneParam._m0[78u].y);
        float _2211 = exp2(_2205 * cbSceneParam._m0[78u].z);
        float _2212 = _2209 * _2051;
        float _2213 = _2210 * _2052;
        float _2214 = _2211 * _2053;
        float _2221 = _316 + (-0.5);
        _2223 = cbMtdParam._m0[1u];
        _2225 = _2223.y * _2221;
        float _2228 = (_2202 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2229 = _2228 * (_2203 ? _2212 : (_2212 + (cbSceneParam._m0[72u].w * _2184)));
        _2230 = _2228 * (_2203 ? _2213 : (_2213 + (cbSceneParam._m0[72u].w * _2186)));
        _2231 = _2228 * (_2203 ? _2214 : (_2214 + (cbSceneParam._m0[72u].w * _2188)));
        _2234 = ((_2059 * _2063) * _2209) * _2228;
        _2237 = ((_2060 * _2063) * _2210) * _2228;
        _2240 = ((_2061 * _2063) * _2211) * _2228;
        _2241 = _2221 * 0.999000012874603271484375;
        _2252 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2252)
        {
            if ((cbInstanceData._m0[_368 + 7u].x + _2241) < 0.5)
            {
                _2405 = true;
                break;
            }
        }
        uint _2346 = _370 + uint(_2200.w);
        if ((cbInstanceData._m0[_2346].w < 1.0) && ((cbInstanceData._m0[_2346].w + _2241) < 0.5))
        {
            _2405 = true;
            break;
        }
        if ((_2225 + 1.0) < _2223.x)
        {
            _2405 = true;
            break;
        }
        _2405 = false;
        break;
    }
    float _2560;
    if (_2405)
    {
        discard_state = true;
        _2560 = 0.0;
    }
    else
    {
        _2560 = cbInstanceData._m0[_2064].w;
    }
    SV_Target.x = _2229;
    SV_Target.y = _2230;
    SV_Target.z = _2231;
    SV_Target.w = _2560;
    SV_Target_1.x = _2234;
    SV_Target_1.y = _2237;
    SV_Target_1.z = _2240;
    SV_Target_1.w = cbInstanceData._m0[_2064].w;
    discard_exit();
}


