#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_A_Emissive_Glow_Addition_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_A_Emissive_Glow_Addition_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _769;
float _2996;
float _2997;
float _2998;
float _2999;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _171 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _172 = _171 * NORMAL.x;
    float _173 = _171 * NORMAL.y;
    float _174 = _171 * NORMAL.z;
    float _179;
    float _180;
    float _181;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _179 = (-0.0) - _172;
        _180 = (-0.0) - _173;
        _181 = (-0.0) - _174;
    }
    else
    {
        _179 = _172;
        _180 = _173;
        _181 = _174;
    }
    vec4 _195 = texture(sampler2D(S_A_Emissive_Glow_Addition_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _198 = _195.x;
    float _199 = _195.y;
    float _200 = _195.z;
    vec4 _216 = texture(sampler2D(S_A_Emissive_Glow_Addition_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _227 = inversesqrt(dot(vec3(_179, _180, _181), vec3(_179, _180, _181)));
    float _228 = _227 * _179;
    float _229 = _227 * _180;
    float _230 = _227 * _181;
    float _3008 = isnan(0.0) ? _198 : (isnan(_198) ? 0.0 : max(_198, 0.0));
    float _3019 = isnan(0.0) ? _199 : (isnan(_199) ? 0.0 : max(_199, 0.0));
    float _3030 = isnan(0.0) ? _200 : (isnan(_200) ? 0.0 : max(_200, 0.0));
    float _250 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _292 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _302 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _292);
    float _303 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _292);
    float _304 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _292);
    float _308 = inversesqrt(dot(vec3(_302, _303, _304), vec3(_302, _303, _304)));
    float _309 = _302 * _308;
    float _310 = _303 * _308;
    float _311 = _304 * _308;
    vec4 _316 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _318 = _316.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _448 = sqrt(((_302 * _302) + (_303 * _303)) + (_304 * _304));
        float _454 = (cbMatDynParam._m0[5u].x * _448) + cbMatDynParam._m0[5u].y;
        float _3041 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
        float _455 = isnan(1.0) ? _3041 : (isnan(_3041) ? 1.0 : min(_3041, 1.0));
        float _459 = (cbMatDynParam._m0[5u].z * _448) + cbMatDynParam._m0[5u].w;
        float _3052 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3052 : (isnan(_3052) ? 1.0 : min(_3052, 1.0))) - _455)) + _455) < ((_318 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _330 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _331 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _351 = fma(_230, cbSceneParam._m0[5u].z, fma(_229, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _228));
    float _354 = fma(_230, cbSceneParam._m0[6u].z, fma(_229, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _228));
    float _357 = fma(_230, cbSceneParam._m0[7u].z, fma(_229, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _228));
    uint _370 = uint(roundEven(NORMAL.w)) * 13u;
    uint _372 = _370 + 9u;
    uint _373 = _372 + uint(cbMatDynParam._m0[0u].w);
    float _379 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3008 : (isnan(_3008) ? 1.0 : min(_3008, 1.0)))) * cbInstanceData._m0[_373].x;
    float _380 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3019 : (isnan(_3019) ? 1.0 : min(_3019, 1.0)))) * cbInstanceData._m0[_373].y;
    float _381 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3030 : (isnan(_3030) ? 1.0 : min(_3030, 1.0)))) * cbInstanceData._m0[_373].z;
    float _3063 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _382 = isnan(1.0) ? _3063 : (isnan(_3063) ? 1.0 : min(_3063, 1.0));
    float _3074 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _383 = isnan(1.0) ? _3074 : (isnan(_3074) ? 1.0 : min(_3074, 1.0));
    float _3085 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _384 = isnan(1.0) ? _3085 : (isnan(_3085) ? 1.0 : min(_3085, 1.0));
    vec4 _393 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _330, cbSceneParam._m0[86u].y * _331));
    float _396 = _393.x * TEXCOORD.z;
    float _397 = dot(vec3(_228, _229, _230), vec3(_309, _310, _311));
    float _400 = _397 * 2.0;
    float _405 = (_400 * _228) - _309;
    float _406 = (_400 * _229) - _310;
    float _407 = (_400 * _230) - _311;
    float _429 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _433 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _437 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _768;
    float _770;
    float _771;
    float _772;
    float _773;
    float _774;
    float _775;
    float _776;
    float _777;
    float _778;
    float _779;
    float _780;
    float _781;
    float _782;
    float _783;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _493 = fma(_437, cbModelParam._m0[26u].z, fma(_433, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _429));
        float _497 = fma(_437, cbModelParam._m0[27u].z, fma(_433, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _429));
        float _501 = fma(_437, cbModelParam._m0[28u].z, fma(_433, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _429));
        float _526 = _429 + _228;
        float _527 = _433 + _229;
        float _528 = _437 + _230;
        float _538 = fma(_528, cbModelParam._m0[26u].z, fma(_527, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _526)) - _493;
        float _539 = fma(_528, cbModelParam._m0[27u].z, fma(_527, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _526)) - _497;
        float _540 = fma(_528, cbModelParam._m0[28u].z, fma(_527, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _526)) - _501;
        float _544 = inversesqrt(dot(vec3(_538, _539, _540), vec3(_538, _539, _540)));
        float _557 = ((_544 * _538) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_493 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _558 = ((_544 * _539) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_497 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _559 = ((_544 * _540) / cbModelParam._m0[34u].z) + ((((((_501 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _562 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_557, _558, _559), 0.0);
        vec4 _569 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_557, _558, _559), 0.0);
        vec4 _576 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_557, _558, _559), 0.0);
        vec4 _583 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_557, _558, _559), 0.0);
        float _596 = exp2((_562.w + (-0.5)) * 20.0) * 2.0;
        float _597 = _596 * (_562.x + (-0.5));
        float _598 = _596 * (_562.y + (-0.5));
        float _599 = _596 * (_562.z + (-0.5));
        float _606 = exp2((_569.w + (-0.5)) * 20.0) * 2.0;
        float _607 = _606 * (_569.x + (-0.5));
        float _608 = _606 * (_569.y + (-0.5));
        float _609 = _606 * (_569.z + (-0.5));
        float _616 = exp2((_576.w + (-0.5)) * 20.0) * 2.0;
        float _617 = _616 * (_576.x + (-0.5));
        float _618 = _616 * (_576.y + (-0.5));
        float _619 = _616 * (_576.z + (-0.5));
        float _626 = exp2((_583.w + (-0.5)) * 20.0) * 2.0;
        float _627 = _626 * (_583.x + (-0.5));
        float _628 = _626 * (_583.y + (-0.5));
        float _629 = _626 * (_583.z + (-0.5));
        float _630 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
        float _631 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
        float _632 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
        float _633 = _597 * 0.5;
        float _634 = _607 * 0.5;
        float _635 = _617 * 0.5;
        float _636 = dot(vec3(_633, _634, _635), vec3(_633, _634, _635));
        float _641 = (_636 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_636);
        float _650 = (dot(vec3(_228, _229, _230), vec3(_641 * _633, _641 * _634, _641 * _635)) + 1.0) * 0.5;
        float _3111 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
        float _660 = sqrt(((_634 * _634) + (_633 * _633)) + (_635 * _635)) / (_630 + 9.9999997473787516355514526367188e-06);
        float _3122 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
        float _661 = isnan(1.0) ? _3122 : (isnan(_3122) ? 1.0 : min(_3122, 1.0));
        float _662 = _661 * 2.0;
        float _666 = (1.0 - _661) / (_661 + 1.0);
        float _3133 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
        float _667 = isnan(1.0) ? _3133 : (isnan(_3133) ? 1.0 : min(_3133, 1.0));
        float _676 = ((((1.0 - _667) * (_662 + 2.0)) * exp2(log2(isnan(1.0) ? _3111 : (isnan(_3111) ? 1.0 : min(_3111, 1.0))) * (_662 + 1.0))) + _667) * _630;
        float _677 = _598 * 0.5;
        float _678 = _608 * 0.5;
        float _679 = _618 * 0.5;
        float _680 = dot(vec3(_677, _678, _679), vec3(_677, _678, _679));
        float _685 = (_680 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_680);
        float _693 = (dot(vec3(_228, _229, _230), vec3(_685 * _677, _685 * _678, _685 * _679)) + 1.0) * 0.5;
        float _3144 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
        float _702 = sqrt(((_678 * _678) + (_677 * _677)) + (_679 * _679)) / (_631 + 9.9999997473787516355514526367188e-06);
        float _3155 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
        float _703 = isnan(1.0) ? _3155 : (isnan(_3155) ? 1.0 : min(_3155, 1.0));
        float _704 = _703 * 2.0;
        float _708 = (1.0 - _703) / (_703 + 1.0);
        float _3166 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
        float _709 = isnan(1.0) ? _3166 : (isnan(_3166) ? 1.0 : min(_3166, 1.0));
        float _718 = ((((1.0 - _709) * (_704 + 2.0)) * exp2(log2(isnan(1.0) ? _3144 : (isnan(_3144) ? 1.0 : min(_3144, 1.0))) * (_704 + 1.0))) + _709) * _631;
        float _719 = _599 * 0.5;
        float _720 = _609 * 0.5;
        float _721 = _619 * 0.5;
        float _722 = dot(vec3(_719, _720, _721), vec3(_719, _720, _721));
        float _727 = (_722 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_722);
        float _735 = (dot(vec3(_228, _229, _230), vec3(_727 * _719, _727 * _720, _727 * _721)) + 1.0) * 0.5;
        float _3177 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
        float _744 = sqrt(((_720 * _720) + (_719 * _719)) + (_721 * _721)) / (_632 + 9.9999997473787516355514526367188e-06);
        float _3188 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
        float _745 = isnan(1.0) ? _3188 : (isnan(_3188) ? 1.0 : min(_3188, 1.0));
        float _746 = _745 * 2.0;
        float _750 = (1.0 - _745) / (_745 + 1.0);
        float _3199 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        float _751 = isnan(1.0) ? _3199 : (isnan(_3199) ? 1.0 : min(_3199, 1.0));
        float _760 = ((((1.0 - _751) * (_746 + 2.0)) * exp2(log2(isnan(1.0) ? _3177 : (isnan(_3177) ? 1.0 : min(_3177, 1.0))) * (_746 + 1.0))) + _751) * _632;
        _768 = _599;
        _770 = _598;
        _771 = _597;
        _772 = _609;
        _773 = _608;
        _774 = _607;
        _775 = _619;
        _776 = _618;
        _777 = _617;
        _778 = _632;
        _779 = _631;
        _780 = _630;
        _781 = cbModelParam._m0[36u].z * (isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0)));
        _782 = cbModelParam._m0[36u].z * (isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0)));
        _783 = cbModelParam._m0[36u].z * (isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0)));
    }
    else
    {
        _768 = _769;
        _770 = _769;
        _771 = _769;
        _772 = _769;
        _773 = _769;
        _774 = _769;
        _775 = _769;
        _776 = _769;
        _777 = _769;
        _778 = _769;
        _779 = _769;
        _780 = _769;
        _781 = 0.0;
        _782 = 0.0;
        _783 = 0.0;
    }
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _812 = fma(_437, cbModelParam._m0[30u].z, fma(_433, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _429));
        float _816 = fma(_437, cbModelParam._m0[31u].z, fma(_433, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _429));
        float _820 = fma(_437, cbModelParam._m0[32u].z, fma(_433, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _429));
        float _843 = _429 + _228;
        float _844 = _433 + _229;
        float _845 = _437 + _230;
        float _855 = fma(_845, cbModelParam._m0[30u].z, fma(_844, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _843)) - _812;
        float _856 = fma(_845, cbModelParam._m0[31u].z, fma(_844, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _843)) - _816;
        float _857 = fma(_845, cbModelParam._m0[32u].z, fma(_844, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _843)) - _820;
        float _861 = inversesqrt(dot(vec3(_855, _856, _857), vec3(_855, _856, _857)));
        float _874 = ((_861 * _855) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_812 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _875 = ((_861 * _856) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_816 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _876 = ((_861 * _857) / cbModelParam._m0[35u].z) + ((((((_820 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _878 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_874, _875, _876), 0.0);
        vec4 _885 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_874, _875, _876), 0.0);
        vec4 _892 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_874, _875, _876), 0.0);
        vec4 _899 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_874, _875, _876), 0.0);
        float _911 = exp2((_878.w + (-0.5)) * 20.0) * 2.0;
        float _912 = _911 * (_878.x + (-0.5));
        float _913 = _911 * (_878.y + (-0.5));
        float _914 = _911 * (_878.z + (-0.5));
        float _921 = exp2((_885.w + (-0.5)) * 20.0) * 2.0;
        float _922 = _921 * (_885.x + (-0.5));
        float _923 = _921 * (_885.y + (-0.5));
        float _924 = _921 * (_885.z + (-0.5));
        float _931 = exp2((_892.w + (-0.5)) * 20.0) * 2.0;
        float _932 = _931 * (_892.x + (-0.5));
        float _933 = _931 * (_892.y + (-0.5));
        float _934 = _931 * (_892.z + (-0.5));
        float _941 = exp2((_899.w + (-0.5)) * 20.0) * 2.0;
        float _942 = _941 * (_899.x + (-0.5));
        float _943 = _941 * (_899.y + (-0.5));
        float _944 = _941 * (_899.z + (-0.5));
        float _945 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _946 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _947 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _948 = _912 * 0.5;
        float _949 = _922 * 0.5;
        float _950 = _932 * 0.5;
        float _951 = dot(vec3(_948, _949, _950), vec3(_948, _949, _950));
        float _956 = (_951 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_951);
        float _964 = (dot(vec3(_228, _229, _230), vec3(_956 * _948, _956 * _949, _956 * _950)) + 1.0) * 0.5;
        float _3240 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _973 = sqrt(((_949 * _949) + (_948 * _948)) + (_950 * _950)) / (_945 + 9.9999997473787516355514526367188e-06);
        float _3251 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _974 = isnan(1.0) ? _3251 : (isnan(_3251) ? 1.0 : min(_3251, 1.0));
        float _975 = _974 * 2.0;
        float _979 = (1.0 - _974) / (_974 + 1.0);
        float _3262 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _980 = isnan(1.0) ? _3262 : (isnan(_3262) ? 1.0 : min(_3262, 1.0));
        float _989 = ((((1.0 - _980) * (_975 + 2.0)) * exp2(log2(isnan(1.0) ? _3240 : (isnan(_3240) ? 1.0 : min(_3240, 1.0))) * (_975 + 1.0))) + _980) * _945;
        float _990 = _913 * 0.5;
        float _991 = _923 * 0.5;
        float _992 = _933 * 0.5;
        float _993 = dot(vec3(_990, _991, _992), vec3(_990, _991, _992));
        float _998 = (_993 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_993);
        float _1006 = (dot(vec3(_228, _229, _230), vec3(_998 * _990, _998 * _991, _998 * _992)) + 1.0) * 0.5;
        float _3273 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1015 = sqrt(((_991 * _991) + (_990 * _990)) + (_992 * _992)) / (_946 + 9.9999997473787516355514526367188e-06);
        float _3284 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1016 = isnan(1.0) ? _3284 : (isnan(_3284) ? 1.0 : min(_3284, 1.0));
        float _1017 = _1016 * 2.0;
        float _1021 = (1.0 - _1016) / (_1016 + 1.0);
        float _3295 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1022 = isnan(1.0) ? _3295 : (isnan(_3295) ? 1.0 : min(_3295, 1.0));
        float _1031 = ((((1.0 - _1022) * (_1017 + 2.0)) * exp2(log2(isnan(1.0) ? _3273 : (isnan(_3273) ? 1.0 : min(_3273, 1.0))) * (_1017 + 1.0))) + _1022) * _946;
        float _1032 = _914 * 0.5;
        float _1033 = _924 * 0.5;
        float _1034 = _934 * 0.5;
        float _1035 = dot(vec3(_1032, _1033, _1034), vec3(_1032, _1033, _1034));
        float _1040 = (_1035 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1035);
        float _1048 = (dot(vec3(_228, _229, _230), vec3(_1040 * _1032, _1040 * _1033, _1040 * _1034)) + 1.0) * 0.5;
        float _3306 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1057 = sqrt(((_1033 * _1033) + (_1032 * _1032)) + (_1034 * _1034)) / (_947 + 9.9999997473787516355514526367188e-06);
        float _3317 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _3317 : (isnan(_3317) ? 1.0 : min(_3317, 1.0));
        float _1059 = _1058 * 2.0;
        float _1063 = (1.0 - _1058) / (_1058 + 1.0);
        float _3328 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _3328 : (isnan(_3328) ? 1.0 : min(_3328, 1.0));
        float _1073 = ((((1.0 - _1064) * (_1059 + 2.0)) * exp2(log2(isnan(1.0) ? _3306 : (isnan(_3306) ? 1.0 : min(_3306, 1.0))) * (_1059 + 1.0))) + _1064) * _947;
        _1081 = _914;
        _1082 = _913;
        _1083 = _912;
        _1084 = _924;
        _1085 = _923;
        _1086 = _922;
        _1087 = _934;
        _1088 = _933;
        _1089 = _932;
        _1090 = _947;
        _1091 = _946;
        _1092 = _945;
        _1093 = cbModelParam._m0[36u].w * (isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0)));
        _1094 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0)));
        _1095 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0)));
    }
    else
    {
        _1081 = _769;
        _1082 = _769;
        _1083 = _769;
        _1084 = _769;
        _1085 = _769;
        _1086 = _769;
        _1087 = _769;
        _1088 = _769;
        _1089 = _769;
        _1090 = _769;
        _1091 = _769;
        _1092 = _769;
        _1093 = 0.0;
        _1094 = 0.0;
        _1095 = 0.0;
    }
    float _1105 = (cbModelParam._m0[1u].x * (_1093 - _781)) + _781;
    float _1106 = (cbModelParam._m0[1u].x * (_1094 - _782)) + _782;
    float _1107 = (cbModelParam._m0[1u].x * (_1095 - _783)) + _783;
    float _1128 = fma(_1107, cbSceneParam._m0[89u].z, fma(_1106, cbSceneParam._m0[89u].y, _1105 * cbSceneParam._m0[89u].x));
    float _1131 = fma(_1107, cbSceneParam._m0[90u].z, fma(_1106, cbSceneParam._m0[90u].y, _1105 * cbSceneParam._m0[90u].x));
    float _1134 = fma(_1107, cbSceneParam._m0[91u].z, fma(_1106, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1105));
    float _1149 = _405 * 0.5;
    float _1150 = _406 * 0.5;
    float _1151 = _407 * 0.5;
    float _1152 = dot(vec4(_1149, _1150, _1151, 1.0), vec4(_1083, _1086, _1089, _1092));
    float _1155 = dot(vec4(_1149, _1150, _1151, 1.0), vec4(_1082, _1085, _1088, _1091));
    float _1158 = dot(vec4(_1149, _1150, _1151, 1.0), vec4(_1081, _1084, _1087, _1090));
    float _1192;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1165 = dot(vec4(_1149, _1150, _1151, 1.0), vec4(_768, _772, _775, _778));
        float _1169 = dot(vec4(_1149, _1150, _1151, 1.0), vec4(_770, _773, _776, _779));
        float _1173 = dot(vec4(_1149, _1150, _1151, 1.0), vec4(_771, _774, _777, _780));
        float _1180 = dot(vec4(cbModelParam._m0[39u]), vec4(_1149, _1150, _1151, 1.0));
        _1192 = dot(vec3(isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0)), isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0)), isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1180) ? 0.0 : (isnan(0.0) ? _1180 : max(0.0, _1180))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1192 = 1.0;
    }
    float _1203;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1194 = dot(vec4(cbModelParam._m0[40u]), vec4(_1149, _1150, _1151, 1.0));
        _1203 = dot(vec3(isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0)), isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0)), isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1194) ? 0.0 : (isnan(0.0) ? _1194 : max(0.0, _1194))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1203 = 1.0;
    }
    float _1207 = (_1203 * cbModelParam._m0[1u].x) + (_1192 * (1.0 - cbModelParam._m0[1u].x));
    float _1216 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1298;
    float _1300;
    float _1302;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1265 = fma(_437, cbModelParam._m0[13u].z, fma(_433, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _429)) + cbModelParam._m0[13u].w;
        float _1269 = fma(_437, cbModelParam._m0[14u].z, fma(_433, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _429)) + cbModelParam._m0[14u].w;
        float _1273 = fma(_437, cbModelParam._m0[15u].z, fma(_433, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _429)) + cbModelParam._m0[15u].w;
        float _1276 = fma(_407, cbModelParam._m0[13u].z, fma(_406, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _405));
        float _1279 = fma(_407, cbModelParam._m0[14u].z, fma(_406, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _405));
        float _1282 = fma(_407, cbModelParam._m0[15u].z, fma(_406, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _405));
        float _1308;
        if (_1276 > 0.0)
        {
            _1308 = abs((1.0 - _1265) / _1276);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1276 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1265 + 1.0) / _1276);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1308 = frontier_phi_19_17_ladder;
        }
        float _1537;
        if (_1279 > 0.0)
        {
            _1537 = abs((1.0 - _1269) / _1279);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1279 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1269 + 1.0) / _1279);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1537 = frontier_phi_28_24_ladder;
        }
        float _1729;
        if (_1282 > 0.0)
        {
            _1729 = abs((1.0 - _1273) / _1282);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1282 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1273 + 1.0) / _1282);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1729 = frontier_phi_40_35_ladder;
        }
        float _1731 = isnan(_1537) ? _1308 : (isnan(_1308) ? _1537 : min(_1308, _1537));
        float _1732 = isnan(_1729) ? _1731 : (isnan(_1731) ? _1729 : min(_1731, _1729));
        float _1736 = (_1732 * _1276) + _1265;
        float _1737 = (_1732 * _1279) + _1269;
        float _1738 = (_1732 * _1282) + _1273;
        float _1739 = _1732 * 9.9999997473787516355514526367188e-05;
        float _1741 = (-1.0) - _1739;
        float _1743 = _1739 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1738 > _1743) || ((_1738 < _1741) || ((_1737 > _1743) || ((_1737 < _1741) || ((_1736 < _1741) || (_1736 > _1743))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1835 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1738, cbModelParam._m0[9u].z, fma(_1737, cbModelParam._m0[9u].y, _1736 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1738, cbModelParam._m0[10u].z, fma(_1737, cbModelParam._m0[10u].y, _1736 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1738, cbModelParam._m0[11u].z, fma(_1737, cbModelParam._m0[11u].y, _1736 * cbModelParam._m0[11u].x))), _1216);
            frontier_phi_18_40_ladder = _1835.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _1835.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _1835.x * cbModelParam._m0[1u].y;
        }
        _1298 = frontier_phi_18_40_ladder_2;
        _1300 = frontier_phi_18_40_ladder_1;
        _1302 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1286 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_405, _406, _407), _1216);
        _1298 = _1286.x * cbModelParam._m0[1u].y;
        _1300 = _1286.y * cbModelParam._m0[1u].y;
        _1302 = _1286.z * cbModelParam._m0[1u].y;
    }
    float _1305 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1398;
    float _1400;
    float _1402;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1362 = fma(_437, cbModelParam._m0[21u].z, fma(_433, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _429)) + cbModelParam._m0[21u].w;
        float _1366 = fma(_437, cbModelParam._m0[22u].z, fma(_433, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _429)) + cbModelParam._m0[22u].w;
        float _1370 = fma(_437, cbModelParam._m0[23u].z, fma(_433, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _429)) + cbModelParam._m0[23u].w;
        float _1373 = fma(_407, cbModelParam._m0[21u].z, fma(_406, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _405));
        float _1376 = fma(_407, cbModelParam._m0[22u].z, fma(_406, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _405));
        float _1379 = fma(_407, cbModelParam._m0[23u].z, fma(_406, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _405));
        float _1542;
        if (_1373 > 0.0)
        {
            _1542 = abs((1.0 - _1362) / _1373);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1373 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1362 + 1.0) / _1373);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1542 = frontier_phi_30_26_ladder;
        }
        float _1756;
        if (_1376 > 0.0)
        {
            _1756 = abs((1.0 - _1366) / _1376);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1376 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1366 + 1.0) / _1376);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1756 = frontier_phi_42_37_ladder;
        }
        float _1907;
        if (_1379 > 0.0)
        {
            _1907 = abs((1.0 - _1370) / _1379);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1379 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1370 + 1.0) / _1379);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _1907 = frontier_phi_51_48_ladder;
        }
        float _1909 = isnan(_1756) ? _1542 : (isnan(_1542) ? _1756 : min(_1542, _1756));
        float _1910 = isnan(_1907) ? _1909 : (isnan(_1909) ? _1907 : min(_1909, _1907));
        float _1914 = (_1910 * _1373) + _1362;
        float _1915 = (_1910 * _1376) + _1366;
        float _1916 = (_1910 * _1379) + _1370;
        float _1917 = _1910 * 9.9999997473787516355514526367188e-05;
        float _1918 = (-1.0) - _1917;
        float _1920 = _1917 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_1916 > _1920) || ((_1916 < _1918) || ((_1915 > _1920) || ((_1915 < _1918) || ((_1914 < _1918) || (_1914 > _1920))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2143 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1916, cbModelParam._m0[17u].z, fma(_1915, cbModelParam._m0[17u].y, _1914 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1916, cbModelParam._m0[18u].z, fma(_1915, cbModelParam._m0[18u].y, _1914 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1916, cbModelParam._m0[19u].z, fma(_1915, cbModelParam._m0[19u].y, _1914 * cbModelParam._m0[19u].x))), _1305);
            frontier_phi_27_51_ladder = _2143.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2143.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2143.x * cbModelParam._m0[1u].z;
        }
        _1398 = frontier_phi_27_51_ladder_2;
        _1400 = frontier_phi_27_51_ladder_1;
        _1402 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1382 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_405, _406, _407), _1305);
        _1398 = _1382.x * cbModelParam._m0[1u].z;
        _1400 = _1382.y * cbModelParam._m0[1u].z;
        _1402 = _1382.z * cbModelParam._m0[1u].z;
    }
    float _1414 = _396 * 0.01200000010430812835693359375;
    float _1416 = _1414 * ((cbModelParam._m0[1u].w * (_1398 - _1298)) + _1298);
    float _1417 = _1414 * ((cbModelParam._m0[1u].w * (_1400 - _1300)) + _1300);
    float _1418 = _1414 * ((cbModelParam._m0[1u].w * (_1402 - _1302)) + _1302);
    float _1421 = fma(_1418, cbSceneParam._m0[89u].z, fma(_1417, cbSceneParam._m0[89u].y, _1416 * cbSceneParam._m0[89u].x));
    float _1424 = fma(_1418, cbSceneParam._m0[90u].z, fma(_1417, cbSceneParam._m0[90u].y, _1416 * cbSceneParam._m0[90u].x));
    float _1427 = fma(_1418, cbSceneParam._m0[91u].z, fma(_1417, cbSceneParam._m0[91u].y, _1416 * cbSceneParam._m0[91u].x));
    vec4 _1435 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_330, _331));
    float _1437 = _1435.w;
    float _1449 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1437);
    float _1450 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1437);
    float _1451 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1437);
    uvec4 _1455 = floatBitsToUint(cbInstanceData._m0[_370 + 5u]);
    uint _1457 = _1455.x * 14u;
    uint _1458 = _1457 + 13u;
    float _1465 = _396 + (-1.0);
    float _1471 = (cbLight._m0[_1458].x * _1465) + 1.0;
    float _1472 = (cbLight._m0[_1458].y * _1465) + 1.0;
    float _1473 = (cbLight._m0[_1458].z * _1465) + 1.0;
    float _1474 = (cbLight._m0[_1458].w * _1465) + 1.0;
    uint _1475 = _1457 + 5u;
    float _1481 = isnan(1.0) ? _1472 : (isnan(_1472) ? 1.0 : min(_1472, 1.0));
    uint _1485 = _1457 + 4u;
    float _1495 = isnan(1.0) ? _1471 : (isnan(_1471) ? 1.0 : min(_1471, 1.0));
    uint _1499 = _1457 | 1u;
    float _1510 = dot(vec3(cbLight._m0[_1457].xyz), vec3(_228, _229, _230));
    float _1513 = dot(vec3(cbLight._m0[_1499].xyz), vec3(_228, _229, _230));
    float _3464 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
    float _3475 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
    float _1518 = (isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0))) * 0.3183098733425140380859375;
    float _1520 = (isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0))) * 0.3183098733425140380859375;
    float _1527 = ((cbLight._m0[_1475].x * _1481) * _1520) + (((cbLight._m0[_1485].x * _1449) * _1495) * _1518);
    float _1528 = ((_1481 * cbLight._m0[_1475].y) * _1520) + (((cbLight._m0[_1485].y * _1450) * _1495) * _1518);
    float _1529 = ((_1481 * cbLight._m0[_1475].z) * _1520) + (((cbLight._m0[_1485].z * _1451) * _1495) * _1518);
    uvec4 _1534 = floatBitsToUint(cbLight._m0[_1457 + 12u]);
    bool _1536 = _1534.x == 0u;
    float _1547;
    float _1549;
    float _1551;
    if (_1536)
    {
        _1547 = _1527;
        _1549 = _1528;
        _1551 = _1529;
    }
    else
    {
        uint _1555 = _1457 + 6u;
        float _1571 = (dot(vec3(cbLight._m0[_1457 + 2u].xyz), vec3(_228, _229, _230)) * 0.5) + 0.5;
        float _1572 = _1571 * _1571;
        float _3486 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1573 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
        float _1574 = isnan(1.0) ? _1473 : (isnan(_1473) ? 1.0 : min(_1473, 1.0));
        _1547 = (((cbLight._m0[_1555].x * 0.3183098733425140380859375) * _1573) * _1574) + _1527;
        _1549 = (((cbLight._m0[_1555].y * 0.3183098733425140380859375) * _1573) * _1574) + _1528;
        _1551 = (((cbLight._m0[_1555].z * 0.3183098733425140380859375) * _1573) * _1574) + _1529;
    }
    bool _1554 = _1534.y == 0u;
    float _1592;
    float _1594;
    float _1596;
    if (_1554)
    {
        _1592 = _1547;
        _1594 = _1549;
        _1596 = _1551;
    }
    else
    {
        uint _1700 = _1457 + 7u;
        float _1716 = (dot(vec3(cbLight._m0[_1457 + 3u].xyz), vec3(_228, _229, _230)) * 0.5) + 0.5;
        float _1717 = _1716 * _1716;
        float _3502 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
        float _1718 = isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0));
        float _1719 = isnan(1.0) ? _1474 : (isnan(_1474) ? 1.0 : min(_1474, 1.0));
        _1592 = (((cbLight._m0[_1700].x * 0.3183098733425140380859375) * _1718) * _1719) + _1547;
        _1594 = (((cbLight._m0[_1700].y * 0.3183098733425140380859375) * _1718) * _1719) + _1549;
        _1596 = (((cbLight._m0[_1700].z * 0.3183098733425140380859375) * _1718) * _1719) + _1551;
    }
    uint _1598 = _1457 + 8u;
    float _1604 = cbLight._m0[_1457].x + _309;
    float _1605 = cbLight._m0[_1457].y + _310;
    float _1606 = cbLight._m0[_1457].z + _311;
    float _1610 = inversesqrt(dot(vec3(_1604, _1605, _1606), vec3(_1604, _1605, _1606)));
    float _1614 = dot(vec3(_228, _229, _230), vec3(cbLight._m0[_1457].xyz));
    float _3518 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
    float _1617 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
    float _3529 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _1618 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
    float _1619 = dot(vec3(cbLight._m0[_1457].xyz), vec3(_1604 * _1610, _1605 * _1610, _1606 * _1610));
    float _3540 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
    float _1630 = (exp2(log2(1.0 - (isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1636 = (0.5 / ((_1617 + 9.9999999392252902907785028219223e-09) + _1618)) * _1617;
    float _3551 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
    float _1638 = (isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0))) * 0.31831014156341552734375;
    uint _1652 = _1457 + 9u;
    float _1658 = cbLight._m0[_1499].x + _309;
    float _1659 = cbLight._m0[_1499].y + _310;
    float _1660 = cbLight._m0[_1499].z + _311;
    float _1664 = inversesqrt(dot(vec3(_1658, _1659, _1660), vec3(_1658, _1659, _1660)));
    float _1668 = dot(vec3(_228, _229, _230), vec3(cbLight._m0[_1499].xyz));
    float _3562 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
    float _1671 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
    float _1672 = dot(vec3(cbLight._m0[_1499].xyz), vec3(_1658 * _1664, _1659 * _1664, _1660 * _1664));
    float _3573 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
    float _1681 = (exp2(log2(1.0 - (isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1685 = (0.5 / ((_1671 + 9.9999999392252902907785028219223e-09) + _1618)) * _1671;
    float _3584 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
    float _1687 = (isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0))) * 0.31831014156341552734375;
    float _1697 = (((_1681 * cbLight._m0[_1652].x) * _1687) * _1481) + ((((cbLight._m0[_1598].x * _1449) * _1630) * _1638) * _1495);
    float _1698 = (((_1681 * cbLight._m0[_1652].y) * _1687) * _1481) + ((((cbLight._m0[_1598].y * _1450) * _1630) * _1638) * _1495);
    float _1699 = (((_1681 * cbLight._m0[_1652].z) * _1687) * _1481) + ((((cbLight._m0[_1598].z * _1451) * _1630) * _1638) * _1495);
    float _1761;
    float _1763;
    float _1765;
    if (_1536)
    {
        _1761 = _1697;
        _1763 = _1698;
        _1765 = _1699;
    }
    else
    {
        uint _1767 = _1457 + 10u;
        uint _1773 = _1457 + 2u;
        float _1779 = cbLight._m0[_1773].x + _309;
        float _1780 = cbLight._m0[_1773].y + _310;
        float _1781 = cbLight._m0[_1773].z + _311;
        float _1785 = inversesqrt(dot(vec3(_1779, _1780, _1781), vec3(_1779, _1780, _1781)));
        float _1789 = dot(vec3(_228, _229, _230), vec3(cbLight._m0[_1773].xyz));
        float _3595 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
        float _1792 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
        float _1793 = dot(vec3(cbLight._m0[_1773].xyz), vec3(_1779 * _1785, _1780 * _1785, _1781 * _1785));
        float _3606 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
        float _1802 = (exp2(log2(1.0 - (isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1806 = (0.5 / ((_1792 + 9.9999999392252902907785028219223e-09) + _1618)) * _1792;
        float _3617 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
        float _1808 = (isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0))) * 0.31831014156341552734375;
        float _1809 = isnan(1.0) ? _1473 : (isnan(_1473) ? 1.0 : min(_1473, 1.0));
        _1761 = (((_1802 * cbLight._m0[_1767].x) * _1808) * _1809) + _1697;
        _1763 = (((_1802 * cbLight._m0[_1767].y) * _1808) * _1809) + _1698;
        _1765 = (((_1802 * cbLight._m0[_1767].z) * _1808) * _1809) + _1699;
    }
    float _1844;
    float _1846;
    float _1848;
    if (_1554)
    {
        _1844 = _1761;
        _1846 = _1763;
        _1848 = _1765;
    }
    else
    {
        uint _1855 = _1457 + 11u;
        uint _1861 = _1457 + 3u;
        float _1867 = cbLight._m0[_1861].x + _309;
        float _1868 = cbLight._m0[_1861].y + _310;
        float _1869 = cbLight._m0[_1861].z + _311;
        float _1873 = inversesqrt(dot(vec3(_1867, _1868, _1869), vec3(_1867, _1868, _1869)));
        float _1877 = dot(vec3(_228, _229, _230), vec3(cbLight._m0[_1861].xyz));
        float _3633 = isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0));
        float _1880 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
        float _1881 = dot(vec3(cbLight._m0[_1861].xyz), vec3(_1867 * _1873, _1868 * _1873, _1869 * _1873));
        float _3644 = isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0));
        float _1890 = (exp2(log2(1.0 - (isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1894 = (0.5 / ((_1880 + 9.9999999392252902907785028219223e-09) + _1618)) * _1880;
        float _3655 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
        float _1896 = (isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0))) * 0.31831014156341552734375;
        float _1897 = isnan(1.0) ? _1474 : (isnan(_1474) ? 1.0 : min(_1474, 1.0));
        _1844 = (((_1890 * cbLight._m0[_1855].x) * _1896) * _1897) + _1761;
        _1846 = (((_1890 * cbLight._m0[_1855].y) * _1896) * _1897) + _1763;
        _1848 = (((_1890 * cbLight._m0[_1855].z) * _1896) * _1897) + _1765;
    }
    float _2031;
    float _2033;
    float _2035;
    float _2037;
    float _2039;
    float _2041;
    if (_1455.y == 0u)
    {
        float _1972 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1973 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1972;
        float _1974 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1972;
        float _1975 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1972;
        uvec4 _1987 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1988 = _1987.x;
        uint _1999 = uint((float(_1987.y) * floor(float(uint(cbSceneParam._m0[85u].y * _331) / _1988))) + floor(float(uint(cbSceneParam._m0[85u].x * _330) / _1988)));
        float _2009 = (log2(_1975 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2010 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
        uint _2013 = uint(isnan(14.0) ? _2010 : (isnan(_2010) ? 14.0 : min(_2010, 14.0)));
        uvec4 _2018 = texelFetch(g_lightClusterGridBuffer, int(((_2013 << 2u) + (_1999 << 6u)) >> 2u));
        uint _2019 = _2018.x;
        uint _2020 = _1987.z;
        float _2148;
        float _2150;
        float _2152;
        float _2154;
        float _2156;
        float _2158;
        if (((((1u << ((_2020 >> 4u) & 15u)) + 4294967295u) & _2019) == 0u) || ((_2020 & 240u) == 0u))
        {
            _2148 = 0.0;
            _2150 = 0.0;
            _2152 = 0.0;
            _2154 = 0.0;
            _2156 = 0.0;
            _2158 = 0.0;
        }
        else
        {
            float _2149;
            float _2151;
            float _2153;
            float _2155;
            float _2157;
            float _2159;
            float _2308 = 0.0;
            float _2309 = 0.0;
            float _2310 = 0.0;
            float _2311 = 0.0;
            float _2312 = 0.0;
            float _2313 = 0.0;
            uint _2314 = 0u;
            uint _2323;
            bool _2324;
            for (;;)
            {
                _2323 = texelFetch(g_lightClassification, int((((_2013 << 5u) + (_1999 << 9u)) + (_2314 << 2u)) >> 2u)).x;
                _2324 = _2323 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2324)
                {
                    frontier_phi_68_pred = _2310;
                    frontier_phi_68_pred_1 = _2313;
                    frontier_phi_68_pred_2 = _2312;
                    frontier_phi_68_pred_3 = _2311;
                    frontier_phi_68_pred_4 = _2309;
                    frontier_phi_68_pred_5 = _2308;
                }
                else
                {
                    float _2453;
                    float _2454;
                    float _2455;
                    float _2456;
                    float _2457;
                    float _2458;
                    uint _2459;
                    _2453 = _2308;
                    _2454 = _2309;
                    _2455 = _2310;
                    _2456 = _2311;
                    _2457 = _2312;
                    _2458 = _2313;
                    _2459 = _2323;
                    float _2380;
                    float _2381;
                    float _2382;
                    float _2383;
                    float _2384;
                    float _2385;
                    for (;;)
                    {
                        uint _2463 = uint(findLSB(_2459)) + (_2314 << 5u);
                        uint _2460 = (_2459 + 4294967295u) & _2459;
                        uint _2465 = _2463 * 48u;
                        vec4 _2479 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2465)).x, texelFetch(g_PointLightRenderingBuffer, int(_2465 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2465 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2465 + 3u)).x));
                        uint _2485 = (_2463 * 48u) + 4u;
                        vec4 _2498 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2485)).x, texelFetch(g_PointLightRenderingBuffer, int(_2485 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2485 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2485 + 3u)).x));
                        uint _2504 = (_2463 * 48u) + 8u;
                        vec3 _2515 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2504)).x, texelFetch(g_PointLightRenderingBuffer, int(_2504 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2504 + 2u)).x));
                        float _2519 = _2479.x - _1973;
                        float _2520 = _2479.y - _1974;
                        float _2521 = _2479.z - _1975;
                        float _2522 = dot(vec3(_2519, _2520, _2521), vec3(_2519, _2520, _2521));
                        float _2525 = inversesqrt(_2522);
                        float _2534 = 1.0 - (_2522 * _2479.w);
                        float _3681 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
                        float _2535 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
                        float _2536 = sqrt(_2522) * _2498.w;
                        float _2539 = 1.39999997615814208984375 / (_2536 + 1.39999997615814208984375);
                        float _2540 = _2539 * _2539;
                        float _2543 = ((1.0 - _2540) * dot(vec3(_351, _354, _357), vec3(_2525 * _2519, _2525 * _2520, _2525 * _2521))) + _2540;
                        float _2546 = _2536 * _2536;
                        float _2550 = ((isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0))) * _2535) / ((_2546 * 0.699999988079071044921875) + 1.0);
                        float _2554 = (-0.0) - _1973;
                        float _2555 = (-0.0) - _1974;
                        float _2556 = (-0.0) - _1975;
                        float _2560 = inversesqrt(dot(vec3(_2554, _2555, _2556), vec3(_2554, _2555, _2556)));
                        float _2564 = dot(vec3(_351, _354, _357), vec3(_2560 * _2554, _2560 * _2555, _2560 * _2556));
                        float _3697 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
                        float _3708 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
                        float _2568 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
                        float _2572 = (0.5 / (((isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))) + 9.9999999392252902907785028219223e-09) + _2568)) * _2568;
                        float _3719 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
                        float _2581 = (((isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0))) * 3.1415927410125732421875) / ((_2546 * 2.1991131305694580078125) + 3.141590118408203125)) * _2535;
                        _2383 = (_2550 * _2498.x) + _2456;
                        _2384 = (_2550 * _2498.y) + _2457;
                        _2385 = (_2550 * _2498.z) + _2458;
                        _2380 = (_2581 * _2515.x) + _2453;
                        _2381 = (_2581 * _2515.y) + _2454;
                        _2382 = (_2581 * _2515.z) + _2455;
                        if (_2460 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2453 = _2380;
                            _2454 = _2381;
                            _2455 = _2382;
                            _2456 = _2383;
                            _2457 = _2384;
                            _2458 = _2385;
                            _2459 = _2460;
                        }
                    }
                    frontier_phi_68_pred = _2382;
                    frontier_phi_68_pred_1 = _2385;
                    frontier_phi_68_pred_2 = _2384;
                    frontier_phi_68_pred_3 = _2383;
                    frontier_phi_68_pred_4 = _2381;
                    frontier_phi_68_pred_5 = _2380;
                }
                _2153 = frontier_phi_68_pred;
                _2159 = frontier_phi_68_pred_1;
                _2157 = frontier_phi_68_pred_2;
                _2155 = frontier_phi_68_pred_3;
                _2151 = frontier_phi_68_pred_4;
                _2149 = frontier_phi_68_pred_5;
                uint _2315 = _2314 + 1u;
                if (_2315 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2308 = _2149;
                    _2309 = _2151;
                    _2310 = _2153;
                    _2311 = _2155;
                    _2312 = _2157;
                    _2313 = _2159;
                    _2314 = _2315;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2148 = _2149;
            _2150 = _2151;
            _2152 = _2153;
            _2154 = _2155;
            _2156 = _2157;
            _2158 = _2159;
        }
        uvec4 _2162 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2163 = _2162.z;
        uint _2165 = (_2163 >> 8u) & 15u;
        float _2279;
        float _2281;
        float _2283;
        float _2285;
        float _2287;
        float _2289;
        if (((4294967295u << _2165) & _2019) == 0u)
        {
            _2279 = _2148;
            _2281 = _2150;
            _2283 = _2152;
            _2285 = _2154;
            _2287 = _2156;
            _2289 = _2158;
        }
        else
        {
            float _2304 = inversesqrt(dot(vec3(_1973, _1974, _1975), vec3(_1973, _1974, _1975)));
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2165 < ((_2163 >> 12u) & 15u))
            {
                float _2280;
                float _2282;
                float _2284;
                float _2286;
                float _2288;
                float _2290;
                float _2436 = _2148;
                float _2437 = _2150;
                float _2438 = _2152;
                float _2439 = _2154;
                float _2440 = _2156;
                float _2441 = _2158;
                uint _2442 = _2165;
                uint _2451;
                bool _2452;
                for (;;)
                {
                    _2451 = texelFetch(g_lightClassification, int((((_2013 << 5u) + (_1999 << 9u)) + (_2442 << 2u)) >> 2u)).x;
                    _2452 = _2451 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2452)
                    {
                        frontier_phi_79_pred = _2441;
                        frontier_phi_79_pred_1 = _2440;
                        frontier_phi_79_pred_2 = _2439;
                        frontier_phi_79_pred_3 = _2438;
                        frontier_phi_79_pred_4 = _2437;
                        frontier_phi_79_pred_5 = _2436;
                    }
                    else
                    {
                        float _2595;
                        float _2596;
                        float _2597;
                        float _2598;
                        float _2599;
                        float _2600;
                        float _2847;
                        float _2848;
                        float _2849;
                        float _2850;
                        float _2851;
                        float _2852;
                        float _2608 = _2436;
                        float _2609 = _2437;
                        float _2610 = _2438;
                        float _2611 = _2439;
                        float _2612 = _2440;
                        float _2613 = _2441;
                        uint _2614 = _2451;
                        uint _2615;
                        vec4 _2640;
                        float _2641;
                        vec4 _2656;
                        vec3 _2668;
                        vec4 _2684;
                        vec4 _2700;
                        float _2747;
                        bool _2748;
                        for (;;)
                        {
                            uint _2625 = ((_2442 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2614));
                            _2615 = (_2614 + 4294967295u) & _2614;
                            uint _2627 = _2625 * 40u;
                            _2640 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2627)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2627 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2627 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2627 + 3u)).x));
                            _2641 = _2640.w;
                            uint _2643 = (_2625 * 40u) + 4u;
                            _2656 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2643)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2643 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2643 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2643 + 3u)).x));
                            uint _2658 = (_2625 * 40u) + 8u;
                            _2668 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2658)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2658 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2658 + 2u)).x));
                            uint _2671 = (_2625 * 40u) + 16u;
                            _2684 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2671)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2671 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2671 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2671 + 3u)).x));
                            uint _2687 = (_2625 * 40u) + 20u;
                            _2700 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2687)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2687 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2687 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2687 + 3u)).x));
                            uint _2703 = (_2625 * 40u) + 24u;
                            vec4 _2716 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2703)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2703 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2703 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2703 + 3u)).x));
                            uint _2722 = (_2625 * 40u) + 28u;
                            vec4 _2735 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2722)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2722 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2722 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2722 + 3u)).x));
                            _2747 = fma(_1975, _2735.z, fma(_1974, _2735.y, _2735.x * _1973)) + _2735.w;
                            _2748 = !((fma(_1975, _2716.z, fma(_1974, _2716.y, _2716.x * _1973)) + _2716.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_2748)
                            {
                                float _2775 = _2640.x - _1973;
                                float _2776 = _2640.y - _1974;
                                float _2777 = _2640.z - _1975;
                                float _2778 = dot(vec3(_2775, _2776, _2777), vec3(_2775, _2776, _2777));
                                float _2781 = inversesqrt(_2778);
                                float _2782 = _2781 * _2775;
                                float _2783 = _2781 * _2776;
                                float _2784 = _2781 * _2777;
                                float _2788 = 1.0 - (_2778 / (_2641 * _2641));
                                float _3730 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0));
                                float _2789 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
                                float _2793 = sqrt(_2778) * _2656.w;
                                float _2795 = 1.39999997615814208984375 / (_2793 + 1.39999997615814208984375);
                                float _2796 = _2795 * _2795;
                                float _2797 = 1.0 - _2796;
                                float _2799 = (_2797 * dot(vec3(_2782, _2783, _2784), vec3(_351, _354, _357))) + _2796;
                                float _2802 = _2793 * _2793;
                                float _2806 = (fma(_1975, _2684.z, fma(_1974, _2684.y, _2684.x * _1973)) + _2684.w) / _2747;
                                float _2807 = (fma(_1975, _2700.z, fma(_1974, _2700.y, _2700.x * _1973)) + _2700.w) / _2747;
                                float _2811 = 1.0 - dot(vec2(_2806, _2807), vec2(_2806, _2807));
                                float _3746 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
                                float _2812 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
                                float _2813 = _2812 * (((isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0))) * _2789) / ((_2802 * 0.699999988079071044921875) + 1.0));
                                float _2823 = dot(vec3(_351, _354, _357), vec3((-0.0) - (_1973 * _2304), (-0.0) - (_1974 * _2304), (-0.0) - (_1975 * _2304)));
                                float _3757 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
                                float _2831 = (_2797 * dot(vec3(_351, _354, _357), vec3(_2782, _2783, _2784))) + _2796;
                                float _3768 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0));
                                float _2832 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
                                float _2836 = (0.5 / (((isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0))) + 9.9999999392252902907785028219223e-09) + _2832)) * _2832;
                                float _3779 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
                                float _2843 = (_2812 * _2789) * (((isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) * 3.1415927410125732421875) / ((_2802 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_85_pred = _2813 * _2656.z;
                                frontier_phi_85_pred_1 = _2813 * _2656.y;
                                frontier_phi_85_pred_2 = _2813 * _2656.x;
                                frontier_phi_85_pred_3 = _2843 * _2668.z;
                                frontier_phi_85_pred_4 = _2843 * _2668.y;
                                frontier_phi_85_pred_5 = _2843 * _2668.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _2852 = frontier_phi_85_pred;
                            _2851 = frontier_phi_85_pred_1;
                            _2850 = frontier_phi_85_pred_2;
                            _2849 = frontier_phi_85_pred_3;
                            _2848 = frontier_phi_85_pred_4;
                            _2847 = frontier_phi_85_pred_5;
                            _2598 = _2850 + _2611;
                            _2599 = _2851 + _2612;
                            _2600 = _2852 + _2613;
                            _2595 = _2847 + _2608;
                            _2596 = _2848 + _2609;
                            _2597 = _2849 + _2610;
                            if (_2615 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2608 = _2595;
                                _2609 = _2596;
                                _2610 = _2597;
                                _2611 = _2598;
                                _2612 = _2599;
                                _2613 = _2600;
                                _2614 = _2615;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2600;
                        frontier_phi_79_pred_1 = _2599;
                        frontier_phi_79_pred_2 = _2598;
                        frontier_phi_79_pred_3 = _2597;
                        frontier_phi_79_pred_4 = _2596;
                        frontier_phi_79_pred_5 = _2595;
                    }
                    _2290 = frontier_phi_79_pred;
                    _2288 = frontier_phi_79_pred_1;
                    _2286 = frontier_phi_79_pred_2;
                    _2284 = frontier_phi_79_pred_3;
                    _2282 = frontier_phi_79_pred_4;
                    _2280 = frontier_phi_79_pred_5;
                    uint _2443 = _2442 + 1u;
                    if (_2443 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2436 = _2280;
                        _2437 = _2282;
                        _2438 = _2284;
                        _2439 = _2286;
                        _2440 = _2288;
                        _2441 = _2290;
                        _2442 = _2443;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2286;
                frontier_phi_60_61_ladder_1 = _2290;
                frontier_phi_60_61_ladder_2 = _2288;
                frontier_phi_60_61_ladder_3 = _2284;
                frontier_phi_60_61_ladder_4 = _2282;
                frontier_phi_60_61_ladder_5 = _2280;
            }
            else
            {
                frontier_phi_60_61_ladder = _2154;
                frontier_phi_60_61_ladder_1 = _2158;
                frontier_phi_60_61_ladder_2 = _2156;
                frontier_phi_60_61_ladder_3 = _2152;
                frontier_phi_60_61_ladder_4 = _2150;
                frontier_phi_60_61_ladder_5 = _2148;
            }
            _2279 = frontier_phi_60_61_ladder_5;
            _2281 = frontier_phi_60_61_ladder_4;
            _2283 = frontier_phi_60_61_ladder_3;
            _2285 = frontier_phi_60_61_ladder;
            _2287 = frontier_phi_60_61_ladder_2;
            _2289 = frontier_phi_60_61_ladder_1;
        }
        float _2294 = isnan(1.0) ? _396 : (isnan(_396) ? 1.0 : min(_396, 1.0));
        _2031 = (_2294 * _2285) + _1592;
        _2033 = (_2294 * _2287) + _1594;
        _2035 = (_2294 * _2289) + _1596;
        _2037 = ((_2279 * 0.039999999105930328369140625) * _2294) + _1844;
        _2039 = ((_2281 * 0.039999999105930328369140625) * _2294) + _1846;
        _2041 = ((_2283 * 0.039999999105930328369140625) * _2294) + _1848;
    }
    else
    {
        _2031 = _1592;
        _2033 = _1594;
        _2035 = _1596;
        _2037 = _1844;
        _2039 = _1846;
        _2041 = _1848;
    }
    uint _2047 = _372 + uint(cbMatDynParam._m0[0u].w);
    float _2053 = (_216.x * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2047].x;
    float _2054 = (_216.y * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2047].y;
    float _2055 = (_216.z * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2047].z;
    float _3795 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _3806 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _3817 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _2072 = (((isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) * (_2031 + ((isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0))) * _396))) + ((_2037 + ((isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0))) * _1207)) * cbPerFrame._m0[3u].x)) + _2053;
    float _2074 = (_2054 + ((_2039 + ((isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0))) * _1207)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0))) * (_2033 + ((isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0))) * _396)));
    float _2076 = (_2055 + ((_2041 + ((isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0))) * _1207)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))) * (_2035 + ((isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0))) * _396)));
    float _2077 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
    float _2078 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
    float _2079 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
    float _2085 = cbMtdParam._m0[2u].x * _2053;
    float _2086 = cbMtdParam._m0[2u].y * _2054;
    float _2087 = cbMtdParam._m0[2u].z * _2055;
    float _3843 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2089 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
    uint _2090 = _370 + 6u;
    float _2098 = _330 / cbSceneParam._m0[86u].x;
    float _2099 = _331 / cbSceneParam._m0[86u].y;
    vec4 _2113 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2098, _2099, (log2((isnan(cbSceneParam._m0[77u].w) ? _250 : (isnan(_250) ? cbSceneParam._m0[77u].w : min(_250, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2115 = _2113.x;
    float _2116 = _2113.y;
    float _2117 = _2113.z;
    float _2118 = _2113.w;
    float _2210;
    float _2212;
    float _2214;
    float _2216;
    if (_250 > cbSceneParam._m0[78u].w)
    {
        float _2173 = isnan(_250) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _250 : min(cbSceneParam._m0[80u].w, _250));
        float _2174 = _2173 / _250;
        float _2185 = _2174 * _302;
        float _2186 = _303 * _2174;
        float _2187 = (-0.0) - _2186;
        float _2188 = _2174 * _304;
        float _2190 = (cbSceneParam._m0[77u].w * _2187) / _2173;
        float _2191 = _2190 + cbSceneParam._m0[79u].w;
        float _2192 = cbSceneParam._m0[79u].w - _2186;
        float _2198 = sqrt(((_2185 * _2185) + (_2186 * _2186)) + (_2188 * _2188));
        float _2201 = (1.0 - (cbSceneParam._m0[77u].w / _2173)) * _2198;
        float _2206 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2208 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2393;
        if (abs((_2187 - _2190) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2393 = ((((_2191 > 0.0) ? exp2(_2206 * _2191) : (2.0 - exp2(_2208 * _2191))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2201;
        }
        else
        {
            float _2337 = 1.0 / cbSceneParam._m0[80u].x;
            float _2338 = isnan(_2192) ? _2191 : (isnan(_2191) ? _2192 : max(_2191, _2192));
            float _2339 = isnan(_2192) ? _2191 : (isnan(_2191) ? _2192 : min(_2191, _2192));
            float _2348 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : min(_2338, 0.0));
            float _2349 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : min(_2339, 0.0));
            _2393 = ((abs(_2198 / _2187) * cbSceneParam._m0[80u].y) * ((((_2348 - _2349) * 2.0) - ((exp2(_2206 * (isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0)))) - exp2(_2206 * (isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0))))) * _2337)) - ((exp2(_2208 * _2348) - exp2(_2208 * _2349)) * _2337))) + (_2201 * cbSceneParam._m0[80u].z);
        }
        vec4 _2395 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2098, _2099, 1.0), 0.0);
        float _2404 = exp2((_2393 * (-1.44269502162933349609375)) * (1.0 - _2395.w));
        float _2405 = log2(_2404);
        float _2421 = log2(_2118);
        _2210 = (exp2(_2421 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2405 * cbSceneParam._m0[78u].x)) * _2395.x) / cbSceneParam._m0[78u].x)) + _2115;
        _2212 = (exp2(_2421 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2405 * cbSceneParam._m0[78u].y)) * _2395.y) / cbSceneParam._m0[78u].y)) + _2116;
        _2214 = (exp2(_2421 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2405 * cbSceneParam._m0[78u].z)) * _2395.z) / cbSceneParam._m0[78u].z)) + _2117;
        _2216 = _2404 * _2118;
    }
    else
    {
        _2210 = _2115;
        _2212 = _2116;
        _2214 = _2117;
        _2216 = _2118;
    }
    bool _2431;
    vec4 _2226;
    vec4 _2249;
    float _2251;
    float _2255;
    float _2256;
    float _2257;
    float _2260;
    float _2263;
    float _2266;
    float _2267;
    bool _2278;
    for (;;)
    {
        _2226 = cbMatDynParam._m0[0u];
        float _2228 = roundEven(_2226.y);
        bool _2229 = _2228 == 3.0;
        float _2231 = log2(_2216);
        float _2235 = exp2(_2231 * cbSceneParam._m0[78u].x);
        float _2236 = exp2(_2231 * cbSceneParam._m0[78u].y);
        float _2237 = exp2(_2231 * cbSceneParam._m0[78u].z);
        float _2238 = _2235 * _2077;
        float _2239 = _2236 * _2078;
        float _2240 = _2237 * _2079;
        float _2247 = _318 + (-0.5);
        _2249 = cbMtdParam._m0[1u];
        _2251 = _2249.y * _2247;
        float _2254 = (_2228 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2255 = _2254 * (_2229 ? _2238 : (_2238 + (cbSceneParam._m0[72u].w * _2210)));
        _2256 = _2254 * (_2229 ? _2239 : (_2239 + (cbSceneParam._m0[72u].w * _2212)));
        _2257 = _2254 * (_2229 ? _2240 : (_2240 + (cbSceneParam._m0[72u].w * _2214)));
        _2260 = ((_2085 * _2089) * _2235) * _2254;
        _2263 = ((_2086 * _2089) * _2236) * _2254;
        _2266 = ((_2087 * _2089) * _2237) * _2254;
        _2267 = _2247 * 0.999000012874603271484375;
        _2278 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2278)
        {
            if ((cbInstanceData._m0[_370 + 7u].x + _2267) < 0.5)
            {
                _2431 = true;
                break;
            }
        }
        uint _2372 = _372 + uint(_2226.w);
        if ((cbInstanceData._m0[_2372].w < 1.0) && ((cbInstanceData._m0[_2372].w + _2267) < 0.5))
        {
            _2431 = true;
            break;
        }
        if ((_2251 + 1.0) < _2249.x)
        {
            _2431 = true;
            break;
        }
        _2431 = false;
        break;
    }
    float _2586;
    if (_2431)
    {
        discard_state = true;
        _2586 = 0.0;
    }
    else
    {
        _2586 = cbInstanceData._m0[_2090].w;
    }
    SV_Target.x = _2255;
    SV_Target.y = _2256;
    SV_Target.z = _2257;
    SV_Target.w = _2586;
    SV_Target_1.x = _2260;
    SV_Target_1.y = _2263;
    SV_Target_1.z = _2266;
    SV_Target_1.w = cbInstanceData._m0[_2090].w;
    discard_exit();
}


