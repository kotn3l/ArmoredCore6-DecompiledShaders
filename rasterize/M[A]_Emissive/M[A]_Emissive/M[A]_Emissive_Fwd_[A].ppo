#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_Emissive_snp_0_Texture2D_2;
layout(set = 0, binding = 1) uniform texture2D M_A_Emissive_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _765;
float _2949;
float _2950;
float _2951;
float _2952;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _167 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _168 = _167 * NORMAL.x;
    float _169 = _167 * NORMAL.y;
    float _170 = _167 * NORMAL.z;
    float _175;
    float _176;
    float _177;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _175 = (-0.0) - _168;
        _176 = (-0.0) - _169;
        _177 = (-0.0) - _170;
    }
    else
    {
        _175 = _168;
        _176 = _169;
        _177 = _170;
    }
    vec4 _191 = texture(sampler2D(M_A_Emissive_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _194 = _191.x;
    float _195 = _191.y;
    float _196 = _191.z;
    vec4 _212 = texture(sampler2D(M_A_Emissive_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _223 = inversesqrt(dot(vec3(_175, _176, _177), vec3(_175, _176, _177)));
    float _224 = _223 * _175;
    float _225 = _223 * _176;
    float _226 = _223 * _177;
    float _2961 = isnan(0.0) ? _194 : (isnan(_194) ? 0.0 : max(_194, 0.0));
    float _2972 = isnan(0.0) ? _195 : (isnan(_195) ? 0.0 : max(_195, 0.0));
    float _2983 = isnan(0.0) ? _196 : (isnan(_196) ? 0.0 : max(_196, 0.0));
    float _246 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _288 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _298 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _288);
    float _299 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _288);
    float _300 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _288);
    float _304 = inversesqrt(dot(vec3(_298, _299, _300), vec3(_298, _299, _300)));
    float _305 = _298 * _304;
    float _306 = _299 * _304;
    float _307 = _300 * _304;
    vec4 _312 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _314 = _312.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _444 = sqrt(((_298 * _298) + (_299 * _299)) + (_300 * _300));
        float _450 = (cbMatDynParam._m0[5u].x * _444) + cbMatDynParam._m0[5u].y;
        float _2994 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
        float _451 = isnan(1.0) ? _2994 : (isnan(_2994) ? 1.0 : min(_2994, 1.0));
        float _455 = (cbMatDynParam._m0[5u].z * _444) + cbMatDynParam._m0[5u].w;
        float _3005 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3005 : (isnan(_3005) ? 1.0 : min(_3005, 1.0))) - _451)) + _451) < ((_314 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _326 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _327 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _347 = fma(_226, cbSceneParam._m0[5u].z, fma(_225, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _224));
    float _350 = fma(_226, cbSceneParam._m0[6u].z, fma(_225, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _224));
    float _353 = fma(_226, cbSceneParam._m0[7u].z, fma(_225, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _224));
    uint _366 = uint(roundEven(NORMAL.w)) * 13u;
    uint _368 = _366 + 9u;
    uint _369 = _368 + uint(cbMatDynParam._m0[0u].w);
    float _375 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2961 : (isnan(_2961) ? 1.0 : min(_2961, 1.0)))) * cbInstanceData._m0[_369].x;
    float _376 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2972 : (isnan(_2972) ? 1.0 : min(_2972, 1.0)))) * cbInstanceData._m0[_369].y;
    float _377 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2983 : (isnan(_2983) ? 1.0 : min(_2983, 1.0)))) * cbInstanceData._m0[_369].z;
    float _3016 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _378 = isnan(1.0) ? _3016 : (isnan(_3016) ? 1.0 : min(_3016, 1.0));
    float _3027 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _379 = isnan(1.0) ? _3027 : (isnan(_3027) ? 1.0 : min(_3027, 1.0));
    float _3038 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _380 = isnan(1.0) ? _3038 : (isnan(_3038) ? 1.0 : min(_3038, 1.0));
    vec4 _389 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _326, cbSceneParam._m0[86u].y * _327));
    float _392 = _389.x * TEXCOORD.z;
    float _393 = dot(vec3(_224, _225, _226), vec3(_305, _306, _307));
    float _396 = _393 * 2.0;
    float _401 = (_396 * _224) - _305;
    float _402 = (_396 * _225) - _306;
    float _403 = (_396 * _226) - _307;
    float _425 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _429 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _433 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _764;
    float _766;
    float _767;
    float _768;
    float _769;
    float _770;
    float _771;
    float _772;
    float _773;
    float _774;
    float _775;
    float _776;
    float _777;
    float _778;
    float _779;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _489 = fma(_433, cbModelParam._m0[26u].z, fma(_429, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _425));
        float _493 = fma(_433, cbModelParam._m0[27u].z, fma(_429, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _425));
        float _497 = fma(_433, cbModelParam._m0[28u].z, fma(_429, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _425));
        float _522 = _425 + _224;
        float _523 = _429 + _225;
        float _524 = _433 + _226;
        float _534 = fma(_524, cbModelParam._m0[26u].z, fma(_523, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _522)) - _489;
        float _535 = fma(_524, cbModelParam._m0[27u].z, fma(_523, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _522)) - _493;
        float _536 = fma(_524, cbModelParam._m0[28u].z, fma(_523, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _522)) - _497;
        float _540 = inversesqrt(dot(vec3(_534, _535, _536), vec3(_534, _535, _536)));
        float _553 = ((_540 * _534) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_489 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _554 = ((_540 * _535) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_493 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _555 = ((_540 * _536) / cbModelParam._m0[34u].z) + ((((((_497 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _558 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_553, _554, _555), 0.0);
        vec4 _565 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_553, _554, _555), 0.0);
        vec4 _572 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_553, _554, _555), 0.0);
        vec4 _579 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_553, _554, _555), 0.0);
        float _592 = exp2((_558.w + (-0.5)) * 20.0) * 2.0;
        float _593 = _592 * (_558.x + (-0.5));
        float _594 = _592 * (_558.y + (-0.5));
        float _595 = _592 * (_558.z + (-0.5));
        float _602 = exp2((_565.w + (-0.5)) * 20.0) * 2.0;
        float _603 = _602 * (_565.x + (-0.5));
        float _604 = _602 * (_565.y + (-0.5));
        float _605 = _602 * (_565.z + (-0.5));
        float _612 = exp2((_572.w + (-0.5)) * 20.0) * 2.0;
        float _613 = _612 * (_572.x + (-0.5));
        float _614 = _612 * (_572.y + (-0.5));
        float _615 = _612 * (_572.z + (-0.5));
        float _622 = exp2((_579.w + (-0.5)) * 20.0) * 2.0;
        float _623 = _622 * (_579.x + (-0.5));
        float _624 = _622 * (_579.y + (-0.5));
        float _625 = _622 * (_579.z + (-0.5));
        float _626 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
        float _627 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
        float _628 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
        float _629 = _593 * 0.5;
        float _630 = _603 * 0.5;
        float _631 = _613 * 0.5;
        float _632 = dot(vec3(_629, _630, _631), vec3(_629, _630, _631));
        float _637 = (_632 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_632);
        float _646 = (dot(vec3(_224, _225, _226), vec3(_637 * _629, _637 * _630, _637 * _631)) + 1.0) * 0.5;
        float _3064 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
        float _656 = sqrt(((_630 * _630) + (_629 * _629)) + (_631 * _631)) / (_626 + 9.9999997473787516355514526367188e-06);
        float _3075 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
        float _657 = isnan(1.0) ? _3075 : (isnan(_3075) ? 1.0 : min(_3075, 1.0));
        float _658 = _657 * 2.0;
        float _662 = (1.0 - _657) / (_657 + 1.0);
        float _3086 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
        float _663 = isnan(1.0) ? _3086 : (isnan(_3086) ? 1.0 : min(_3086, 1.0));
        float _672 = ((((1.0 - _663) * (_658 + 2.0)) * exp2(log2(isnan(1.0) ? _3064 : (isnan(_3064) ? 1.0 : min(_3064, 1.0))) * (_658 + 1.0))) + _663) * _626;
        float _673 = _594 * 0.5;
        float _674 = _604 * 0.5;
        float _675 = _614 * 0.5;
        float _676 = dot(vec3(_673, _674, _675), vec3(_673, _674, _675));
        float _681 = (_676 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_676);
        float _689 = (dot(vec3(_224, _225, _226), vec3(_681 * _673, _681 * _674, _681 * _675)) + 1.0) * 0.5;
        float _3097 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
        float _698 = sqrt(((_674 * _674) + (_673 * _673)) + (_675 * _675)) / (_627 + 9.9999997473787516355514526367188e-06);
        float _3108 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
        float _699 = isnan(1.0) ? _3108 : (isnan(_3108) ? 1.0 : min(_3108, 1.0));
        float _700 = _699 * 2.0;
        float _704 = (1.0 - _699) / (_699 + 1.0);
        float _3119 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
        float _705 = isnan(1.0) ? _3119 : (isnan(_3119) ? 1.0 : min(_3119, 1.0));
        float _714 = ((((1.0 - _705) * (_700 + 2.0)) * exp2(log2(isnan(1.0) ? _3097 : (isnan(_3097) ? 1.0 : min(_3097, 1.0))) * (_700 + 1.0))) + _705) * _627;
        float _715 = _595 * 0.5;
        float _716 = _605 * 0.5;
        float _717 = _615 * 0.5;
        float _718 = dot(vec3(_715, _716, _717), vec3(_715, _716, _717));
        float _723 = (_718 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_718);
        float _731 = (dot(vec3(_224, _225, _226), vec3(_723 * _715, _723 * _716, _723 * _717)) + 1.0) * 0.5;
        float _3130 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
        float _740 = sqrt(((_716 * _716) + (_715 * _715)) + (_717 * _717)) / (_628 + 9.9999997473787516355514526367188e-06);
        float _3141 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
        float _741 = isnan(1.0) ? _3141 : (isnan(_3141) ? 1.0 : min(_3141, 1.0));
        float _742 = _741 * 2.0;
        float _746 = (1.0 - _741) / (_741 + 1.0);
        float _3152 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
        float _747 = isnan(1.0) ? _3152 : (isnan(_3152) ? 1.0 : min(_3152, 1.0));
        float _756 = ((((1.0 - _747) * (_742 + 2.0)) * exp2(log2(isnan(1.0) ? _3130 : (isnan(_3130) ? 1.0 : min(_3130, 1.0))) * (_742 + 1.0))) + _747) * _628;
        _764 = _595;
        _766 = _594;
        _767 = _593;
        _768 = _605;
        _769 = _604;
        _770 = _603;
        _771 = _615;
        _772 = _614;
        _773 = _613;
        _774 = _628;
        _775 = _627;
        _776 = _626;
        _777 = cbModelParam._m0[36u].z * (isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0)));
        _778 = cbModelParam._m0[36u].z * (isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0)));
        _779 = cbModelParam._m0[36u].z * (isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0)));
    }
    else
    {
        _764 = _765;
        _766 = _765;
        _767 = _765;
        _768 = _765;
        _769 = _765;
        _770 = _765;
        _771 = _765;
        _772 = _765;
        _773 = _765;
        _774 = _765;
        _775 = _765;
        _776 = _765;
        _777 = 0.0;
        _778 = 0.0;
        _779 = 0.0;
    }
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _808 = fma(_433, cbModelParam._m0[30u].z, fma(_429, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _425));
        float _812 = fma(_433, cbModelParam._m0[31u].z, fma(_429, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _425));
        float _816 = fma(_433, cbModelParam._m0[32u].z, fma(_429, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _425));
        float _839 = _425 + _224;
        float _840 = _429 + _225;
        float _841 = _433 + _226;
        float _851 = fma(_841, cbModelParam._m0[30u].z, fma(_840, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _839)) - _808;
        float _852 = fma(_841, cbModelParam._m0[31u].z, fma(_840, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _839)) - _812;
        float _853 = fma(_841, cbModelParam._m0[32u].z, fma(_840, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _839)) - _816;
        float _857 = inversesqrt(dot(vec3(_851, _852, _853), vec3(_851, _852, _853)));
        float _870 = ((_857 * _851) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_808 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _871 = ((_857 * _852) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_812 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _872 = ((_857 * _853) / cbModelParam._m0[35u].z) + ((((((_816 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _874 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_870, _871, _872), 0.0);
        vec4 _881 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_870, _871, _872), 0.0);
        vec4 _888 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_870, _871, _872), 0.0);
        vec4 _895 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_870, _871, _872), 0.0);
        float _907 = exp2((_874.w + (-0.5)) * 20.0) * 2.0;
        float _908 = _907 * (_874.x + (-0.5));
        float _909 = _907 * (_874.y + (-0.5));
        float _910 = _907 * (_874.z + (-0.5));
        float _917 = exp2((_881.w + (-0.5)) * 20.0) * 2.0;
        float _918 = _917 * (_881.x + (-0.5));
        float _919 = _917 * (_881.y + (-0.5));
        float _920 = _917 * (_881.z + (-0.5));
        float _927 = exp2((_888.w + (-0.5)) * 20.0) * 2.0;
        float _928 = _927 * (_888.x + (-0.5));
        float _929 = _927 * (_888.y + (-0.5));
        float _930 = _927 * (_888.z + (-0.5));
        float _937 = exp2((_895.w + (-0.5)) * 20.0) * 2.0;
        float _938 = _937 * (_895.x + (-0.5));
        float _939 = _937 * (_895.y + (-0.5));
        float _940 = _937 * (_895.z + (-0.5));
        float _941 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _942 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _943 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _944 = _908 * 0.5;
        float _945 = _918 * 0.5;
        float _946 = _928 * 0.5;
        float _947 = dot(vec3(_944, _945, _946), vec3(_944, _945, _946));
        float _952 = (_947 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_947);
        float _960 = (dot(vec3(_224, _225, _226), vec3(_952 * _944, _952 * _945, _952 * _946)) + 1.0) * 0.5;
        float _3193 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _969 = sqrt(((_945 * _945) + (_944 * _944)) + (_946 * _946)) / (_941 + 9.9999997473787516355514526367188e-06);
        float _3204 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _970 = isnan(1.0) ? _3204 : (isnan(_3204) ? 1.0 : min(_3204, 1.0));
        float _971 = _970 * 2.0;
        float _975 = (1.0 - _970) / (_970 + 1.0);
        float _3215 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _976 = isnan(1.0) ? _3215 : (isnan(_3215) ? 1.0 : min(_3215, 1.0));
        float _985 = ((((1.0 - _976) * (_971 + 2.0)) * exp2(log2(isnan(1.0) ? _3193 : (isnan(_3193) ? 1.0 : min(_3193, 1.0))) * (_971 + 1.0))) + _976) * _941;
        float _986 = _909 * 0.5;
        float _987 = _919 * 0.5;
        float _988 = _929 * 0.5;
        float _989 = dot(vec3(_986, _987, _988), vec3(_986, _987, _988));
        float _994 = (_989 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_989);
        float _1002 = (dot(vec3(_224, _225, _226), vec3(_994 * _986, _994 * _987, _994 * _988)) + 1.0) * 0.5;
        float _3226 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1011 = sqrt(((_987 * _987) + (_986 * _986)) + (_988 * _988)) / (_942 + 9.9999997473787516355514526367188e-06);
        float _3237 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1012 = isnan(1.0) ? _3237 : (isnan(_3237) ? 1.0 : min(_3237, 1.0));
        float _1013 = _1012 * 2.0;
        float _1017 = (1.0 - _1012) / (_1012 + 1.0);
        float _3248 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1018 = isnan(1.0) ? _3248 : (isnan(_3248) ? 1.0 : min(_3248, 1.0));
        float _1027 = ((((1.0 - _1018) * (_1013 + 2.0)) * exp2(log2(isnan(1.0) ? _3226 : (isnan(_3226) ? 1.0 : min(_3226, 1.0))) * (_1013 + 1.0))) + _1018) * _942;
        float _1028 = _910 * 0.5;
        float _1029 = _920 * 0.5;
        float _1030 = _930 * 0.5;
        float _1031 = dot(vec3(_1028, _1029, _1030), vec3(_1028, _1029, _1030));
        float _1036 = (_1031 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1031);
        float _1044 = (dot(vec3(_224, _225, _226), vec3(_1036 * _1028, _1036 * _1029, _1036 * _1030)) + 1.0) * 0.5;
        float _3259 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1053 = sqrt(((_1029 * _1029) + (_1028 * _1028)) + (_1030 * _1030)) / (_943 + 9.9999997473787516355514526367188e-06);
        float _3270 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1054 = isnan(1.0) ? _3270 : (isnan(_3270) ? 1.0 : min(_3270, 1.0));
        float _1055 = _1054 * 2.0;
        float _1059 = (1.0 - _1054) / (_1054 + 1.0);
        float _3281 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1060 = isnan(1.0) ? _3281 : (isnan(_3281) ? 1.0 : min(_3281, 1.0));
        float _1069 = ((((1.0 - _1060) * (_1055 + 2.0)) * exp2(log2(isnan(1.0) ? _3259 : (isnan(_3259) ? 1.0 : min(_3259, 1.0))) * (_1055 + 1.0))) + _1060) * _943;
        _1077 = _910;
        _1078 = _909;
        _1079 = _908;
        _1080 = _920;
        _1081 = _919;
        _1082 = _918;
        _1083 = _930;
        _1084 = _929;
        _1085 = _928;
        _1086 = _943;
        _1087 = _942;
        _1088 = _941;
        _1089 = cbModelParam._m0[36u].w * (isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0)));
        _1090 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0)));
        _1091 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0)));
    }
    else
    {
        _1077 = _765;
        _1078 = _765;
        _1079 = _765;
        _1080 = _765;
        _1081 = _765;
        _1082 = _765;
        _1083 = _765;
        _1084 = _765;
        _1085 = _765;
        _1086 = _765;
        _1087 = _765;
        _1088 = _765;
        _1089 = 0.0;
        _1090 = 0.0;
        _1091 = 0.0;
    }
    float _1101 = (cbModelParam._m0[1u].x * (_1089 - _777)) + _777;
    float _1102 = (cbModelParam._m0[1u].x * (_1090 - _778)) + _778;
    float _1103 = (cbModelParam._m0[1u].x * (_1091 - _779)) + _779;
    float _1124 = fma(_1103, cbSceneParam._m0[89u].z, fma(_1102, cbSceneParam._m0[89u].y, _1101 * cbSceneParam._m0[89u].x));
    float _1127 = fma(_1103, cbSceneParam._m0[90u].z, fma(_1102, cbSceneParam._m0[90u].y, _1101 * cbSceneParam._m0[90u].x));
    float _1130 = fma(_1103, cbSceneParam._m0[91u].z, fma(_1102, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1101));
    float _1145 = _401 * 0.5;
    float _1146 = _402 * 0.5;
    float _1147 = _403 * 0.5;
    float _1148 = dot(vec4(_1145, _1146, _1147, 1.0), vec4(_1079, _1082, _1085, _1088));
    float _1151 = dot(vec4(_1145, _1146, _1147, 1.0), vec4(_1078, _1081, _1084, _1087));
    float _1154 = dot(vec4(_1145, _1146, _1147, 1.0), vec4(_1077, _1080, _1083, _1086));
    float _1188;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1161 = dot(vec4(_1145, _1146, _1147, 1.0), vec4(_764, _768, _771, _774));
        float _1165 = dot(vec4(_1145, _1146, _1147, 1.0), vec4(_766, _769, _772, _775));
        float _1169 = dot(vec4(_1145, _1146, _1147, 1.0), vec4(_767, _770, _773, _776));
        float _1176 = dot(vec4(cbModelParam._m0[39u]), vec4(_1145, _1146, _1147, 1.0));
        _1188 = dot(vec3(isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0)), isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0)), isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1176) ? 0.0 : (isnan(0.0) ? _1176 : max(0.0, _1176))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1188 = 1.0;
    }
    float _1199;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1190 = dot(vec4(cbModelParam._m0[40u]), vec4(_1145, _1146, _1147, 1.0));
        _1199 = dot(vec3(isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0)), isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0)), isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1190) ? 0.0 : (isnan(0.0) ? _1190 : max(0.0, _1190))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1199 = 1.0;
    }
    float _1203 = (_1199 * cbModelParam._m0[1u].x) + (_1188 * (1.0 - cbModelParam._m0[1u].x));
    float _1212 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1294;
    float _1296;
    float _1298;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1261 = fma(_433, cbModelParam._m0[13u].z, fma(_429, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _425)) + cbModelParam._m0[13u].w;
        float _1265 = fma(_433, cbModelParam._m0[14u].z, fma(_429, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _425)) + cbModelParam._m0[14u].w;
        float _1269 = fma(_433, cbModelParam._m0[15u].z, fma(_429, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _425)) + cbModelParam._m0[15u].w;
        float _1272 = fma(_403, cbModelParam._m0[13u].z, fma(_402, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _401));
        float _1275 = fma(_403, cbModelParam._m0[14u].z, fma(_402, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _401));
        float _1278 = fma(_403, cbModelParam._m0[15u].z, fma(_402, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _401));
        float _1304;
        if (_1272 > 0.0)
        {
            _1304 = abs((1.0 - _1261) / _1272);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1272 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1261 + 1.0) / _1272);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1304 = frontier_phi_19_17_ladder;
        }
        float _1512;
        if (_1275 > 0.0)
        {
            _1512 = abs((1.0 - _1265) / _1275);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1275 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1265 + 1.0) / _1275);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1512 = frontier_phi_28_24_ladder;
        }
        float _1701;
        if (_1278 > 0.0)
        {
            _1701 = abs((1.0 - _1269) / _1278);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1278 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1269 + 1.0) / _1278);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1701 = frontier_phi_40_35_ladder;
        }
        float _1703 = isnan(_1512) ? _1304 : (isnan(_1304) ? _1512 : min(_1304, _1512));
        float _1704 = isnan(_1701) ? _1703 : (isnan(_1703) ? _1701 : min(_1703, _1701));
        float _1708 = (_1704 * _1272) + _1261;
        float _1709 = (_1704 * _1275) + _1265;
        float _1710 = (_1704 * _1278) + _1269;
        float _1711 = _1704 * 9.9999997473787516355514526367188e-05;
        float _1713 = (-1.0) - _1711;
        float _1715 = _1711 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1710 > _1715) || ((_1710 < _1713) || ((_1709 > _1715) || ((_1709 < _1713) || ((_1708 < _1713) || (_1708 > _1715))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1807 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1710, cbModelParam._m0[9u].z, fma(_1709, cbModelParam._m0[9u].y, _1708 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1710, cbModelParam._m0[10u].z, fma(_1709, cbModelParam._m0[10u].y, _1708 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1710, cbModelParam._m0[11u].z, fma(_1709, cbModelParam._m0[11u].y, _1708 * cbModelParam._m0[11u].x))), _1212);
            frontier_phi_18_40_ladder = _1807.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _1807.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _1807.x * cbModelParam._m0[1u].y;
        }
        _1294 = frontier_phi_18_40_ladder_2;
        _1296 = frontier_phi_18_40_ladder_1;
        _1298 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1282 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_401, _402, _403), _1212);
        _1294 = _1282.x * cbModelParam._m0[1u].y;
        _1296 = _1282.y * cbModelParam._m0[1u].y;
        _1298 = _1282.z * cbModelParam._m0[1u].y;
    }
    float _1301 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1394;
    float _1396;
    float _1398;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1358 = fma(_433, cbModelParam._m0[21u].z, fma(_429, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _425)) + cbModelParam._m0[21u].w;
        float _1362 = fma(_433, cbModelParam._m0[22u].z, fma(_429, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _425)) + cbModelParam._m0[22u].w;
        float _1366 = fma(_433, cbModelParam._m0[23u].z, fma(_429, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _425)) + cbModelParam._m0[23u].w;
        float _1369 = fma(_403, cbModelParam._m0[21u].z, fma(_402, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _401));
        float _1372 = fma(_403, cbModelParam._m0[22u].z, fma(_402, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _401));
        float _1375 = fma(_403, cbModelParam._m0[23u].z, fma(_402, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _401));
        float _1517;
        if (_1369 > 0.0)
        {
            _1517 = abs((1.0 - _1358) / _1369);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1369 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1358 + 1.0) / _1369);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1517 = frontier_phi_30_26_ladder;
        }
        float _1728;
        if (_1372 > 0.0)
        {
            _1728 = abs((1.0 - _1362) / _1372);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1372 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1362 + 1.0) / _1372);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1728 = frontier_phi_42_37_ladder;
        }
        float _1879;
        if (_1375 > 0.0)
        {
            _1879 = abs((1.0 - _1366) / _1375);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1375 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1366 + 1.0) / _1375);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _1879 = frontier_phi_51_48_ladder;
        }
        float _1881 = isnan(_1728) ? _1517 : (isnan(_1517) ? _1728 : min(_1517, _1728));
        float _1882 = isnan(_1879) ? _1881 : (isnan(_1881) ? _1879 : min(_1881, _1879));
        float _1886 = (_1882 * _1369) + _1358;
        float _1887 = (_1882 * _1372) + _1362;
        float _1888 = (_1882 * _1375) + _1366;
        float _1889 = _1882 * 9.9999997473787516355514526367188e-05;
        float _1890 = (-1.0) - _1889;
        float _1892 = _1889 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_1888 > _1892) || ((_1888 < _1890) || ((_1887 > _1892) || ((_1887 < _1890) || ((_1886 < _1890) || (_1886 > _1892))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2105 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1888, cbModelParam._m0[17u].z, fma(_1887, cbModelParam._m0[17u].y, _1886 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1888, cbModelParam._m0[18u].z, fma(_1887, cbModelParam._m0[18u].y, _1886 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1888, cbModelParam._m0[19u].z, fma(_1887, cbModelParam._m0[19u].y, _1886 * cbModelParam._m0[19u].x))), _1301);
            frontier_phi_27_51_ladder = _2105.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2105.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2105.x * cbModelParam._m0[1u].z;
        }
        _1394 = frontier_phi_27_51_ladder_2;
        _1396 = frontier_phi_27_51_ladder_1;
        _1398 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1378 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_401, _402, _403), _1301);
        _1394 = _1378.x * cbModelParam._m0[1u].z;
        _1396 = _1378.y * cbModelParam._m0[1u].z;
        _1398 = _1378.z * cbModelParam._m0[1u].z;
    }
    float _1410 = _392 * 0.01200000010430812835693359375;
    float _1412 = _1410 * ((cbModelParam._m0[1u].w * (_1394 - _1294)) + _1294);
    float _1413 = _1410 * ((cbModelParam._m0[1u].w * (_1396 - _1296)) + _1296);
    float _1414 = _1410 * ((cbModelParam._m0[1u].w * (_1398 - _1298)) + _1298);
    float _1417 = fma(_1414, cbSceneParam._m0[89u].z, fma(_1413, cbSceneParam._m0[89u].y, _1412 * cbSceneParam._m0[89u].x));
    float _1420 = fma(_1414, cbSceneParam._m0[90u].z, fma(_1413, cbSceneParam._m0[90u].y, _1412 * cbSceneParam._m0[90u].x));
    float _1423 = fma(_1414, cbSceneParam._m0[91u].z, fma(_1413, cbSceneParam._m0[91u].y, _1412 * cbSceneParam._m0[91u].x));
    uvec4 _1433 = floatBitsToUint(cbInstanceData._m0[_366 + 5u]);
    uint _1435 = _1433.x * 14u;
    uint _1436 = _1435 + 13u;
    float _1443 = _392 + (-1.0);
    float _1449 = (cbLight._m0[_1436].x * _1443) + 1.0;
    float _1450 = (cbLight._m0[_1436].y * _1443) + 1.0;
    float _1451 = (cbLight._m0[_1436].z * _1443) + 1.0;
    float _1452 = (cbLight._m0[_1436].w * _1443) + 1.0;
    uint _1453 = _1435 + 5u;
    float _1459 = isnan(1.0) ? _1450 : (isnan(_1450) ? 1.0 : min(_1450, 1.0));
    uint _1463 = _1435 + 4u;
    float _1470 = isnan(1.0) ? _1449 : (isnan(_1449) ? 1.0 : min(_1449, 1.0));
    uint _1474 = _1435 | 1u;
    float _1485 = dot(vec3(cbLight._m0[_1435].xyz), vec3(_224, _225, _226));
    float _1488 = dot(vec3(cbLight._m0[_1474].xyz), vec3(_224, _225, _226));
    float _3417 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
    float _3428 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
    float _1493 = (isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0))) * 0.3183098733425140380859375;
    float _1495 = (isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0))) * 0.3183098733425140380859375;
    float _1502 = ((cbLight._m0[_1453].x * _1459) * _1495) + ((cbLight._m0[_1463].x * _1470) * _1493);
    float _1503 = ((_1459 * cbLight._m0[_1453].y) * _1495) + ((_1470 * cbLight._m0[_1463].y) * _1493);
    float _1504 = ((_1459 * cbLight._m0[_1453].z) * _1495) + ((_1470 * cbLight._m0[_1463].z) * _1493);
    uvec4 _1509 = floatBitsToUint(cbLight._m0[_1435 + 12u]);
    bool _1511 = _1509.x == 0u;
    float _1522;
    float _1524;
    float _1526;
    if (_1511)
    {
        _1522 = _1502;
        _1524 = _1503;
        _1526 = _1504;
    }
    else
    {
        uint _1530 = _1435 + 6u;
        float _1546 = (dot(vec3(cbLight._m0[_1435 + 2u].xyz), vec3(_224, _225, _226)) * 0.5) + 0.5;
        float _1547 = _1546 * _1546;
        float _3439 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1548 = isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0));
        float _1549 = isnan(1.0) ? _1451 : (isnan(_1451) ? 1.0 : min(_1451, 1.0));
        _1522 = (((cbLight._m0[_1530].x * 0.3183098733425140380859375) * _1548) * _1549) + _1502;
        _1524 = (((cbLight._m0[_1530].y * 0.3183098733425140380859375) * _1548) * _1549) + _1503;
        _1526 = (((cbLight._m0[_1530].z * 0.3183098733425140380859375) * _1548) * _1549) + _1504;
    }
    bool _1529 = _1509.y == 0u;
    float _1567;
    float _1569;
    float _1571;
    if (_1529)
    {
        _1567 = _1522;
        _1569 = _1524;
        _1571 = _1526;
    }
    else
    {
        uint _1672 = _1435 + 7u;
        float _1688 = (dot(vec3(cbLight._m0[_1435 + 3u].xyz), vec3(_224, _225, _226)) * 0.5) + 0.5;
        float _1689 = _1688 * _1688;
        float _3455 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1690 = isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0));
        float _1691 = isnan(1.0) ? _1452 : (isnan(_1452) ? 1.0 : min(_1452, 1.0));
        _1567 = (((cbLight._m0[_1672].x * 0.3183098733425140380859375) * _1690) * _1691) + _1522;
        _1569 = (((cbLight._m0[_1672].y * 0.3183098733425140380859375) * _1690) * _1691) + _1524;
        _1571 = (((cbLight._m0[_1672].z * 0.3183098733425140380859375) * _1690) * _1691) + _1526;
    }
    uint _1573 = _1435 + 8u;
    float _1579 = cbLight._m0[_1435].x + _305;
    float _1580 = cbLight._m0[_1435].y + _306;
    float _1581 = cbLight._m0[_1435].z + _307;
    float _1585 = inversesqrt(dot(vec3(_1579, _1580, _1581), vec3(_1579, _1580, _1581)));
    float _1589 = dot(vec3(_224, _225, _226), vec3(cbLight._m0[_1435].xyz));
    float _3471 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
    float _1592 = isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0));
    float _3482 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _1593 = isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0));
    float _1594 = dot(vec3(cbLight._m0[_1435].xyz), vec3(_1579 * _1585, _1580 * _1585, _1581 * _1585));
    float _3493 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
    float _1605 = (exp2(log2(1.0 - (isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1611 = (0.5 / ((_1592 + 9.9999999392252902907785028219223e-09) + _1593)) * _1592;
    float _3504 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
    float _1613 = (isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0))) * 0.31831014156341552734375;
    uint _1624 = _1435 + 9u;
    float _1630 = cbLight._m0[_1474].x + _305;
    float _1631 = cbLight._m0[_1474].y + _306;
    float _1632 = cbLight._m0[_1474].z + _307;
    float _1636 = inversesqrt(dot(vec3(_1630, _1631, _1632), vec3(_1630, _1631, _1632)));
    float _1640 = dot(vec3(_224, _225, _226), vec3(cbLight._m0[_1474].xyz));
    float _3515 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
    float _1643 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
    float _1644 = dot(vec3(cbLight._m0[_1474].xyz), vec3(_1630 * _1636, _1631 * _1636, _1632 * _1636));
    float _3526 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
    float _1653 = (exp2(log2(1.0 - (isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1657 = (0.5 / ((_1643 + 9.9999999392252902907785028219223e-09) + _1593)) * _1643;
    float _3537 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
    float _1659 = (isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0))) * 0.31831014156341552734375;
    float _1669 = (((_1653 * cbLight._m0[_1624].x) * _1659) * _1459) + (((_1605 * cbLight._m0[_1573].x) * _1613) * _1470);
    float _1670 = (((_1653 * cbLight._m0[_1624].y) * _1659) * _1459) + (((_1605 * cbLight._m0[_1573].y) * _1613) * _1470);
    float _1671 = (((_1653 * cbLight._m0[_1624].z) * _1659) * _1459) + (((_1605 * cbLight._m0[_1573].z) * _1613) * _1470);
    float _1733;
    float _1735;
    float _1737;
    if (_1511)
    {
        _1733 = _1669;
        _1735 = _1670;
        _1737 = _1671;
    }
    else
    {
        uint _1739 = _1435 + 10u;
        uint _1745 = _1435 + 2u;
        float _1751 = cbLight._m0[_1745].x + _305;
        float _1752 = cbLight._m0[_1745].y + _306;
        float _1753 = cbLight._m0[_1745].z + _307;
        float _1757 = inversesqrt(dot(vec3(_1751, _1752, _1753), vec3(_1751, _1752, _1753)));
        float _1761 = dot(vec3(_224, _225, _226), vec3(cbLight._m0[_1745].xyz));
        float _3548 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
        float _1764 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
        float _1765 = dot(vec3(cbLight._m0[_1745].xyz), vec3(_1751 * _1757, _1752 * _1757, _1753 * _1757));
        float _3559 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
        float _1774 = (exp2(log2(1.0 - (isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1778 = (0.5 / ((_1764 + 9.9999999392252902907785028219223e-09) + _1593)) * _1764;
        float _3570 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
        float _1780 = (isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0))) * 0.31831014156341552734375;
        float _1781 = isnan(1.0) ? _1451 : (isnan(_1451) ? 1.0 : min(_1451, 1.0));
        _1733 = (((_1774 * cbLight._m0[_1739].x) * _1780) * _1781) + _1669;
        _1735 = (((_1774 * cbLight._m0[_1739].y) * _1780) * _1781) + _1670;
        _1737 = (((_1774 * cbLight._m0[_1739].z) * _1780) * _1781) + _1671;
    }
    float _1816;
    float _1818;
    float _1820;
    if (_1529)
    {
        _1816 = _1733;
        _1818 = _1735;
        _1820 = _1737;
    }
    else
    {
        uint _1827 = _1435 + 11u;
        uint _1833 = _1435 + 3u;
        float _1839 = cbLight._m0[_1833].x + _305;
        float _1840 = cbLight._m0[_1833].y + _306;
        float _1841 = cbLight._m0[_1833].z + _307;
        float _1845 = inversesqrt(dot(vec3(_1839, _1840, _1841), vec3(_1839, _1840, _1841)));
        float _1849 = dot(vec3(_224, _225, _226), vec3(cbLight._m0[_1833].xyz));
        float _3586 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
        float _1852 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
        float _1853 = dot(vec3(cbLight._m0[_1833].xyz), vec3(_1839 * _1845, _1840 * _1845, _1841 * _1845));
        float _3597 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
        float _1862 = (exp2(log2(1.0 - (isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1866 = (0.5 / ((_1852 + 9.9999999392252902907785028219223e-09) + _1593)) * _1852;
        float _3608 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
        float _1868 = (isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0))) * 0.31831014156341552734375;
        float _1869 = isnan(1.0) ? _1452 : (isnan(_1452) ? 1.0 : min(_1452, 1.0));
        _1816 = (((_1862 * cbLight._m0[_1827].x) * _1868) * _1869) + _1733;
        _1818 = (((_1862 * cbLight._m0[_1827].y) * _1868) * _1869) + _1735;
        _1820 = (((_1862 * cbLight._m0[_1827].z) * _1868) * _1869) + _1737;
    }
    float _2003;
    float _2005;
    float _2007;
    float _2009;
    float _2011;
    float _2013;
    if (_1433.y == 0u)
    {
        float _1944 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1945 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1944;
        float _1946 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1944;
        float _1947 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1944;
        uvec4 _1959 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1960 = _1959.x;
        uint _1971 = uint((float(_1959.y) * floor(float(uint(cbSceneParam._m0[85u].y * _327) / _1960))) + floor(float(uint(cbSceneParam._m0[85u].x * _326) / _1960)));
        float _1981 = (log2(_1947 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1982 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
        uint _1985 = uint(isnan(14.0) ? _1982 : (isnan(_1982) ? 14.0 : min(_1982, 14.0)));
        uvec4 _1990 = texelFetch(g_lightClusterGridBuffer, int(((_1985 << 2u) + (_1971 << 6u)) >> 2u));
        uint _1991 = _1990.x;
        uint _1992 = _1959.z;
        float _2110;
        float _2112;
        float _2114;
        float _2116;
        float _2118;
        float _2120;
        if (((((1u << ((_1992 >> 4u) & 15u)) + 4294967295u) & _1991) == 0u) || ((_1992 & 240u) == 0u))
        {
            _2110 = 0.0;
            _2112 = 0.0;
            _2114 = 0.0;
            _2116 = 0.0;
            _2118 = 0.0;
            _2120 = 0.0;
        }
        else
        {
            float _2111;
            float _2113;
            float _2115;
            float _2117;
            float _2119;
            float _2121;
            float _2261 = 0.0;
            float _2262 = 0.0;
            float _2263 = 0.0;
            float _2264 = 0.0;
            float _2265 = 0.0;
            float _2266 = 0.0;
            uint _2267 = 0u;
            uint _2276;
            bool _2277;
            for (;;)
            {
                _2276 = texelFetch(g_lightClassification, int((((_1985 << 5u) + (_1971 << 9u)) + (_2267 << 2u)) >> 2u)).x;
                _2277 = _2276 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2277)
                {
                    frontier_phi_68_pred = _2263;
                    frontier_phi_68_pred_1 = _2266;
                    frontier_phi_68_pred_2 = _2265;
                    frontier_phi_68_pred_3 = _2264;
                    frontier_phi_68_pred_4 = _2262;
                    frontier_phi_68_pred_5 = _2261;
                }
                else
                {
                    float _2406;
                    float _2407;
                    float _2408;
                    float _2409;
                    float _2410;
                    float _2411;
                    uint _2412;
                    _2406 = _2261;
                    _2407 = _2262;
                    _2408 = _2263;
                    _2409 = _2264;
                    _2410 = _2265;
                    _2411 = _2266;
                    _2412 = _2276;
                    float _2333;
                    float _2334;
                    float _2335;
                    float _2336;
                    float _2337;
                    float _2338;
                    for (;;)
                    {
                        uint _2416 = uint(findLSB(_2412)) + (_2267 << 5u);
                        uint _2413 = (_2412 + 4294967295u) & _2412;
                        uint _2418 = _2416 * 48u;
                        vec4 _2432 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2418)).x, texelFetch(g_PointLightRenderingBuffer, int(_2418 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2418 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2418 + 3u)).x));
                        uint _2438 = (_2416 * 48u) + 4u;
                        vec4 _2451 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2438)).x, texelFetch(g_PointLightRenderingBuffer, int(_2438 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2438 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2438 + 3u)).x));
                        uint _2457 = (_2416 * 48u) + 8u;
                        vec3 _2468 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2457)).x, texelFetch(g_PointLightRenderingBuffer, int(_2457 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2457 + 2u)).x));
                        float _2472 = _2432.x - _1945;
                        float _2473 = _2432.y - _1946;
                        float _2474 = _2432.z - _1947;
                        float _2475 = dot(vec3(_2472, _2473, _2474), vec3(_2472, _2473, _2474));
                        float _2478 = inversesqrt(_2475);
                        float _2487 = 1.0 - (_2475 * _2432.w);
                        float _3634 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
                        float _2488 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
                        float _2489 = sqrt(_2475) * _2451.w;
                        float _2492 = 1.39999997615814208984375 / (_2489 + 1.39999997615814208984375);
                        float _2493 = _2492 * _2492;
                        float _2496 = ((1.0 - _2493) * dot(vec3(_347, _350, _353), vec3(_2478 * _2472, _2478 * _2473, _2478 * _2474))) + _2493;
                        float _2499 = _2489 * _2489;
                        float _2503 = ((isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0))) * _2488) / ((_2499 * 0.699999988079071044921875) + 1.0);
                        float _2507 = (-0.0) - _1945;
                        float _2508 = (-0.0) - _1946;
                        float _2509 = (-0.0) - _1947;
                        float _2513 = inversesqrt(dot(vec3(_2507, _2508, _2509), vec3(_2507, _2508, _2509)));
                        float _2517 = dot(vec3(_347, _350, _353), vec3(_2513 * _2507, _2513 * _2508, _2513 * _2509));
                        float _3650 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
                        float _3661 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
                        float _2521 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
                        float _2525 = (0.5 / (((isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0))) + 9.9999999392252902907785028219223e-09) + _2521)) * _2521;
                        float _3672 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
                        float _2534 = (((isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0))) * 3.1415927410125732421875) / ((_2499 * 2.1991131305694580078125) + 3.141590118408203125)) * _2488;
                        _2336 = (_2503 * _2451.x) + _2409;
                        _2337 = (_2503 * _2451.y) + _2410;
                        _2338 = (_2503 * _2451.z) + _2411;
                        _2333 = (_2534 * _2468.x) + _2406;
                        _2334 = (_2534 * _2468.y) + _2407;
                        _2335 = (_2534 * _2468.z) + _2408;
                        if (_2413 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2406 = _2333;
                            _2407 = _2334;
                            _2408 = _2335;
                            _2409 = _2336;
                            _2410 = _2337;
                            _2411 = _2338;
                            _2412 = _2413;
                        }
                    }
                    frontier_phi_68_pred = _2335;
                    frontier_phi_68_pred_1 = _2338;
                    frontier_phi_68_pred_2 = _2337;
                    frontier_phi_68_pred_3 = _2336;
                    frontier_phi_68_pred_4 = _2334;
                    frontier_phi_68_pred_5 = _2333;
                }
                _2115 = frontier_phi_68_pred;
                _2121 = frontier_phi_68_pred_1;
                _2119 = frontier_phi_68_pred_2;
                _2117 = frontier_phi_68_pred_3;
                _2113 = frontier_phi_68_pred_4;
                _2111 = frontier_phi_68_pred_5;
                uint _2268 = _2267 + 1u;
                if (_2268 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2261 = _2111;
                    _2262 = _2113;
                    _2263 = _2115;
                    _2264 = _2117;
                    _2265 = _2119;
                    _2266 = _2121;
                    _2267 = _2268;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2110 = _2111;
            _2112 = _2113;
            _2114 = _2115;
            _2116 = _2117;
            _2118 = _2119;
            _2120 = _2121;
        }
        uvec4 _2124 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2125 = _2124.z;
        uint _2127 = (_2125 >> 8u) & 15u;
        float _2232;
        float _2234;
        float _2236;
        float _2238;
        float _2240;
        float _2242;
        if (((4294967295u << _2127) & _1991) == 0u)
        {
            _2232 = _2110;
            _2234 = _2112;
            _2236 = _2114;
            _2238 = _2116;
            _2240 = _2118;
            _2242 = _2120;
        }
        else
        {
            float _2257 = inversesqrt(dot(vec3(_1945, _1946, _1947), vec3(_1945, _1946, _1947)));
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2127 < ((_2125 >> 12u) & 15u))
            {
                float _2233;
                float _2235;
                float _2237;
                float _2239;
                float _2241;
                float _2243;
                float _2389 = _2110;
                float _2390 = _2112;
                float _2391 = _2114;
                float _2392 = _2116;
                float _2393 = _2118;
                float _2394 = _2120;
                uint _2395 = _2127;
                uint _2404;
                bool _2405;
                for (;;)
                {
                    _2404 = texelFetch(g_lightClassification, int((((_1985 << 5u) + (_1971 << 9u)) + (_2395 << 2u)) >> 2u)).x;
                    _2405 = _2404 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2405)
                    {
                        frontier_phi_79_pred = _2394;
                        frontier_phi_79_pred_1 = _2393;
                        frontier_phi_79_pred_2 = _2392;
                        frontier_phi_79_pred_3 = _2391;
                        frontier_phi_79_pred_4 = _2390;
                        frontier_phi_79_pred_5 = _2389;
                    }
                    else
                    {
                        float _2548;
                        float _2549;
                        float _2550;
                        float _2551;
                        float _2552;
                        float _2553;
                        float _2800;
                        float _2801;
                        float _2802;
                        float _2803;
                        float _2804;
                        float _2805;
                        float _2561 = _2389;
                        float _2562 = _2390;
                        float _2563 = _2391;
                        float _2564 = _2392;
                        float _2565 = _2393;
                        float _2566 = _2394;
                        uint _2567 = _2404;
                        uint _2568;
                        vec4 _2593;
                        float _2594;
                        vec4 _2609;
                        vec3 _2621;
                        vec4 _2637;
                        vec4 _2653;
                        float _2700;
                        bool _2701;
                        for (;;)
                        {
                            uint _2578 = ((_2395 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2567));
                            _2568 = (_2567 + 4294967295u) & _2567;
                            uint _2580 = _2578 * 40u;
                            _2593 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2580)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2580 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2580 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2580 + 3u)).x));
                            _2594 = _2593.w;
                            uint _2596 = (_2578 * 40u) + 4u;
                            _2609 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2596)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2596 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2596 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2596 + 3u)).x));
                            uint _2611 = (_2578 * 40u) + 8u;
                            _2621 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2611)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2611 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2611 + 2u)).x));
                            uint _2624 = (_2578 * 40u) + 16u;
                            _2637 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2624)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2624 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2624 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2624 + 3u)).x));
                            uint _2640 = (_2578 * 40u) + 20u;
                            _2653 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2640)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2640 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2640 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2640 + 3u)).x));
                            uint _2656 = (_2578 * 40u) + 24u;
                            vec4 _2669 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2656)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2656 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2656 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2656 + 3u)).x));
                            uint _2675 = (_2578 * 40u) + 28u;
                            vec4 _2688 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2675)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2675 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2675 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2675 + 3u)).x));
                            _2700 = fma(_1947, _2688.z, fma(_1946, _2688.y, _2688.x * _1945)) + _2688.w;
                            _2701 = !((fma(_1947, _2669.z, fma(_1946, _2669.y, _2669.x * _1945)) + _2669.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_2701)
                            {
                                float _2728 = _2593.x - _1945;
                                float _2729 = _2593.y - _1946;
                                float _2730 = _2593.z - _1947;
                                float _2731 = dot(vec3(_2728, _2729, _2730), vec3(_2728, _2729, _2730));
                                float _2734 = inversesqrt(_2731);
                                float _2735 = _2734 * _2728;
                                float _2736 = _2734 * _2729;
                                float _2737 = _2734 * _2730;
                                float _2741 = 1.0 - (_2731 / (_2594 * _2594));
                                float _3683 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0));
                                float _2742 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
                                float _2746 = sqrt(_2731) * _2609.w;
                                float _2748 = 1.39999997615814208984375 / (_2746 + 1.39999997615814208984375);
                                float _2749 = _2748 * _2748;
                                float _2750 = 1.0 - _2749;
                                float _2752 = (_2750 * dot(vec3(_2735, _2736, _2737), vec3(_347, _350, _353))) + _2749;
                                float _2755 = _2746 * _2746;
                                float _2759 = (fma(_1947, _2637.z, fma(_1946, _2637.y, _2637.x * _1945)) + _2637.w) / _2700;
                                float _2760 = (fma(_1947, _2653.z, fma(_1946, _2653.y, _2653.x * _1945)) + _2653.w) / _2700;
                                float _2764 = 1.0 - dot(vec2(_2759, _2760), vec2(_2759, _2760));
                                float _3699 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
                                float _2765 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
                                float _2766 = _2765 * (((isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0))) * _2742) / ((_2755 * 0.699999988079071044921875) + 1.0));
                                float _2776 = dot(vec3(_347, _350, _353), vec3((-0.0) - (_1945 * _2257), (-0.0) - (_1946 * _2257), (-0.0) - (_1947 * _2257)));
                                float _3710 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0));
                                float _2784 = (_2750 * dot(vec3(_347, _350, _353), vec3(_2735, _2736, _2737))) + _2749;
                                float _3721 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0));
                                float _2785 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
                                float _2789 = (0.5 / (((isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0))) + 9.9999999392252902907785028219223e-09) + _2785)) * _2785;
                                float _3732 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
                                float _2796 = (_2765 * _2742) * (((isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0))) * 3.1415927410125732421875) / ((_2755 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_85_pred = _2766 * _2609.z;
                                frontier_phi_85_pred_1 = _2766 * _2609.y;
                                frontier_phi_85_pred_2 = _2766 * _2609.x;
                                frontier_phi_85_pred_3 = _2796 * _2621.z;
                                frontier_phi_85_pred_4 = _2796 * _2621.y;
                                frontier_phi_85_pred_5 = _2796 * _2621.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _2805 = frontier_phi_85_pred;
                            _2804 = frontier_phi_85_pred_1;
                            _2803 = frontier_phi_85_pred_2;
                            _2802 = frontier_phi_85_pred_3;
                            _2801 = frontier_phi_85_pred_4;
                            _2800 = frontier_phi_85_pred_5;
                            _2551 = _2803 + _2564;
                            _2552 = _2804 + _2565;
                            _2553 = _2805 + _2566;
                            _2548 = _2800 + _2561;
                            _2549 = _2801 + _2562;
                            _2550 = _2802 + _2563;
                            if (_2568 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2561 = _2548;
                                _2562 = _2549;
                                _2563 = _2550;
                                _2564 = _2551;
                                _2565 = _2552;
                                _2566 = _2553;
                                _2567 = _2568;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2553;
                        frontier_phi_79_pred_1 = _2552;
                        frontier_phi_79_pred_2 = _2551;
                        frontier_phi_79_pred_3 = _2550;
                        frontier_phi_79_pred_4 = _2549;
                        frontier_phi_79_pred_5 = _2548;
                    }
                    _2243 = frontier_phi_79_pred;
                    _2241 = frontier_phi_79_pred_1;
                    _2239 = frontier_phi_79_pred_2;
                    _2237 = frontier_phi_79_pred_3;
                    _2235 = frontier_phi_79_pred_4;
                    _2233 = frontier_phi_79_pred_5;
                    uint _2396 = _2395 + 1u;
                    if (_2396 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2389 = _2233;
                        _2390 = _2235;
                        _2391 = _2237;
                        _2392 = _2239;
                        _2393 = _2241;
                        _2394 = _2243;
                        _2395 = _2396;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2239;
                frontier_phi_60_61_ladder_1 = _2243;
                frontier_phi_60_61_ladder_2 = _2241;
                frontier_phi_60_61_ladder_3 = _2237;
                frontier_phi_60_61_ladder_4 = _2235;
                frontier_phi_60_61_ladder_5 = _2233;
            }
            else
            {
                frontier_phi_60_61_ladder = _2116;
                frontier_phi_60_61_ladder_1 = _2120;
                frontier_phi_60_61_ladder_2 = _2118;
                frontier_phi_60_61_ladder_3 = _2114;
                frontier_phi_60_61_ladder_4 = _2112;
                frontier_phi_60_61_ladder_5 = _2110;
            }
            _2232 = frontier_phi_60_61_ladder_5;
            _2234 = frontier_phi_60_61_ladder_4;
            _2236 = frontier_phi_60_61_ladder_3;
            _2238 = frontier_phi_60_61_ladder;
            _2240 = frontier_phi_60_61_ladder_2;
            _2242 = frontier_phi_60_61_ladder_1;
        }
        float _2247 = isnan(1.0) ? _392 : (isnan(_392) ? 1.0 : min(_392, 1.0));
        _2003 = (_2247 * _2238) + _1567;
        _2005 = (_2247 * _2240) + _1569;
        _2007 = (_2247 * _2242) + _1571;
        _2009 = ((_2232 * 0.039999999105930328369140625) * _2247) + _1816;
        _2011 = ((_2234 * 0.039999999105930328369140625) * _2247) + _1818;
        _2013 = ((_2236 * 0.039999999105930328369140625) * _2247) + _1820;
    }
    else
    {
        _2003 = _1567;
        _2005 = _1569;
        _2007 = _1571;
        _2009 = _1816;
        _2011 = _1818;
        _2013 = _1820;
    }
    uint _2019 = _368 + uint(cbMatDynParam._m0[0u].w);
    float _3748 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _3759 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _3770 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _2044 = (((isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0))) * (_2003 + ((isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0))) * _392))) + ((_2009 + ((isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0))) * _1203)) * cbPerFrame._m0[3u].x)) + ((_212.x * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2019].x);
    float _2046 = (((_212.y * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2019].y) + ((_2011 + ((isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0))) * _1203)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0))) * (_2005 + ((isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0))) * _392)));
    float _2048 = (((_212.z * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2019].z) + ((_2013 + ((isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0))) * _1203)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0))) * (_2007 + ((isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0))) * _392)));
    float _2049 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
    float _2050 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
    float _2051 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
    uint _2052 = _366 + 6u;
    float _2060 = _326 / cbSceneParam._m0[86u].x;
    float _2061 = _327 / cbSceneParam._m0[86u].y;
    vec4 _2075 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2060, _2061, (log2((isnan(cbSceneParam._m0[77u].w) ? _246 : (isnan(_246) ? cbSceneParam._m0[77u].w : min(_246, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2077 = _2075.x;
    float _2078 = _2075.y;
    float _2079 = _2075.z;
    float _2080 = _2075.w;
    float _2172;
    float _2174;
    float _2176;
    float _2178;
    if (_246 > cbSceneParam._m0[78u].w)
    {
        float _2135 = isnan(_246) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _246 : min(cbSceneParam._m0[80u].w, _246));
        float _2136 = _2135 / _246;
        float _2147 = _2136 * _298;
        float _2148 = _299 * _2136;
        float _2149 = (-0.0) - _2148;
        float _2150 = _2136 * _300;
        float _2152 = (cbSceneParam._m0[77u].w * _2149) / _2135;
        float _2153 = _2152 + cbSceneParam._m0[79u].w;
        float _2154 = cbSceneParam._m0[79u].w - _2148;
        float _2160 = sqrt(((_2147 * _2147) + (_2148 * _2148)) + (_2150 * _2150));
        float _2163 = (1.0 - (cbSceneParam._m0[77u].w / _2135)) * _2160;
        float _2168 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2170 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2346;
        if (abs((_2149 - _2152) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2346 = ((((_2153 > 0.0) ? exp2(_2168 * _2153) : (2.0 - exp2(_2170 * _2153))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2163;
        }
        else
        {
            float _2290 = 1.0 / cbSceneParam._m0[80u].x;
            float _2291 = isnan(_2154) ? _2153 : (isnan(_2153) ? _2154 : max(_2153, _2154));
            float _2292 = isnan(_2154) ? _2153 : (isnan(_2153) ? _2154 : min(_2153, _2154));
            float _2301 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : min(_2291, 0.0));
            float _2302 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : min(_2292, 0.0));
            _2346 = ((abs(_2160 / _2149) * cbSceneParam._m0[80u].y) * ((((_2301 - _2302) * 2.0) - ((exp2(_2168 * (isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0)))) - exp2(_2168 * (isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0))))) * _2290)) - ((exp2(_2170 * _2301) - exp2(_2170 * _2302)) * _2290))) + (_2163 * cbSceneParam._m0[80u].z);
        }
        vec4 _2348 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2060, _2061, 1.0), 0.0);
        float _2357 = exp2((_2346 * (-1.44269502162933349609375)) * (1.0 - _2348.w));
        float _2358 = log2(_2357);
        float _2374 = log2(_2080);
        _2172 = (exp2(_2374 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2358 * cbSceneParam._m0[78u].x)) * _2348.x) / cbSceneParam._m0[78u].x)) + _2077;
        _2174 = (exp2(_2374 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2358 * cbSceneParam._m0[78u].y)) * _2348.y) / cbSceneParam._m0[78u].y)) + _2078;
        _2176 = (exp2(_2374 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2358 * cbSceneParam._m0[78u].z)) * _2348.z) / cbSceneParam._m0[78u].z)) + _2079;
        _2178 = _2357 * _2080;
    }
    else
    {
        _2172 = _2077;
        _2174 = _2078;
        _2176 = _2079;
        _2178 = _2080;
    }
    bool _2384;
    vec4 _2188;
    vec4 _2211;
    float _2213;
    float _2217;
    float _2218;
    float _2219;
    float _2220;
    bool _2231;
    for (;;)
    {
        _2188 = cbMatDynParam._m0[0u];
        float _2190 = roundEven(_2188.y);
        bool _2191 = _2190 == 3.0;
        float _2193 = log2(_2178);
        float _2200 = exp2(_2193 * cbSceneParam._m0[78u].x) * _2049;
        float _2201 = exp2(_2193 * cbSceneParam._m0[78u].y) * _2050;
        float _2202 = exp2(_2193 * cbSceneParam._m0[78u].z) * _2051;
        float _2209 = _314 + (-0.5);
        _2211 = cbMtdParam._m0[1u];
        _2213 = _2211.y * _2209;
        float _2216 = (_2190 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2217 = _2216 * (_2191 ? _2200 : (_2200 + (cbSceneParam._m0[72u].w * _2172)));
        _2218 = _2216 * (_2191 ? _2201 : (_2201 + (cbSceneParam._m0[72u].w * _2174)));
        _2219 = _2216 * (_2191 ? _2202 : (_2202 + (cbSceneParam._m0[72u].w * _2176)));
        _2220 = _2209 * 0.999000012874603271484375;
        _2231 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2231)
        {
            if ((cbInstanceData._m0[_366 + 7u].x + _2220) < 0.5)
            {
                _2384 = true;
                break;
            }
        }
        uint _2325 = _368 + uint(_2188.w);
        if ((cbInstanceData._m0[_2325].w < 1.0) && ((cbInstanceData._m0[_2325].w + _2220) < 0.5))
        {
            _2384 = true;
            break;
        }
        if ((_2213 + 1.0) < _2211.x)
        {
            _2384 = true;
            break;
        }
        _2384 = false;
        break;
    }
    float _2539;
    if (_2384)
    {
        discard_state = true;
        _2539 = 0.0;
    }
    else
    {
        _2539 = cbInstanceData._m0[_2052].w;
    }
    SV_Target.x = _2217;
    SV_Target.y = _2218;
    SV_Target.z = _2219;
    SV_Target.w = _2539;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2052].w;
    discard_exit();
}


