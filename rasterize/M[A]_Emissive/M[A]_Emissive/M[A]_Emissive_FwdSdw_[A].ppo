#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_Emissive_snp_0_Texture2D_2;
layout(set = 0, binding = 1) uniform texture2D M_A_Emissive_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _769;
float _3237;
float _3238;
float _3239;
float _3240;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _171 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _172 = _171 * NORMAL.x;
    float _173 = _171 * NORMAL.y;
    float _174 = _171 * NORMAL.z;
    float _179;
    float _180;
    float _181;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _179 = (-0.0) - _172;
        _180 = (-0.0) - _173;
        _181 = (-0.0) - _174;
    }
    else
    {
        _179 = _172;
        _180 = _173;
        _181 = _174;
    }
    vec4 _195 = texture(sampler2D(M_A_Emissive_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _198 = _195.x;
    float _199 = _195.y;
    float _200 = _195.z;
    vec4 _216 = texture(sampler2D(M_A_Emissive_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _227 = inversesqrt(dot(vec3(_179, _180, _181), vec3(_179, _180, _181)));
    float _228 = _227 * _179;
    float _229 = _227 * _180;
    float _230 = _227 * _181;
    float _3249 = isnan(0.0) ? _198 : (isnan(_198) ? 0.0 : max(_198, 0.0));
    float _3260 = isnan(0.0) ? _199 : (isnan(_199) ? 0.0 : max(_199, 0.0));
    float _3271 = isnan(0.0) ? _200 : (isnan(_200) ? 0.0 : max(_200, 0.0));
    float _250 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _292 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _302 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _292);
    float _303 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _292);
    float _304 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _292);
    float _308 = inversesqrt(dot(vec3(_302, _303, _304), vec3(_302, _303, _304)));
    float _309 = _302 * _308;
    float _310 = _303 * _308;
    float _311 = _304 * _308;
    vec4 _316 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _318 = _316.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _448 = sqrt(((_302 * _302) + (_303 * _303)) + (_304 * _304));
        float _454 = (cbMatDynParam._m0[5u].x * _448) + cbMatDynParam._m0[5u].y;
        float _3282 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
        float _455 = isnan(1.0) ? _3282 : (isnan(_3282) ? 1.0 : min(_3282, 1.0));
        float _459 = (cbMatDynParam._m0[5u].z * _448) + cbMatDynParam._m0[5u].w;
        float _3293 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3293 : (isnan(_3293) ? 1.0 : min(_3293, 1.0))) - _455)) + _455) < ((_318 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _330 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _331 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _351 = fma(_230, cbSceneParam._m0[5u].z, fma(_229, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _228));
    float _354 = fma(_230, cbSceneParam._m0[6u].z, fma(_229, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _228));
    float _357 = fma(_230, cbSceneParam._m0[7u].z, fma(_229, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _228));
    uint _370 = uint(roundEven(NORMAL.w)) * 13u;
    uint _372 = _370 + 9u;
    uint _373 = _372 + uint(cbMatDynParam._m0[0u].w);
    float _379 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3249 : (isnan(_3249) ? 1.0 : min(_3249, 1.0)))) * cbInstanceData._m0[_373].x;
    float _380 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3260 : (isnan(_3260) ? 1.0 : min(_3260, 1.0)))) * cbInstanceData._m0[_373].y;
    float _381 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3271 : (isnan(_3271) ? 1.0 : min(_3271, 1.0)))) * cbInstanceData._m0[_373].z;
    float _3304 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _382 = isnan(1.0) ? _3304 : (isnan(_3304) ? 1.0 : min(_3304, 1.0));
    float _3315 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _383 = isnan(1.0) ? _3315 : (isnan(_3315) ? 1.0 : min(_3315, 1.0));
    float _3326 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _384 = isnan(1.0) ? _3326 : (isnan(_3326) ? 1.0 : min(_3326, 1.0));
    vec4 _393 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _330, cbSceneParam._m0[86u].y * _331));
    float _396 = _393.x * TEXCOORD.z;
    float _397 = dot(vec3(_228, _229, _230), vec3(_309, _310, _311));
    float _400 = _397 * 2.0;
    float _405 = (_400 * _228) - _309;
    float _406 = (_400 * _229) - _310;
    float _407 = (_400 * _230) - _311;
    float _429 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _433 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _437 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _768;
    float _770;
    float _771;
    float _772;
    float _773;
    float _774;
    float _775;
    float _776;
    float _777;
    float _778;
    float _779;
    float _780;
    float _781;
    float _782;
    float _783;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _493 = fma(_437, cbModelParam._m0[26u].z, fma(_433, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _429));
        float _497 = fma(_437, cbModelParam._m0[27u].z, fma(_433, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _429));
        float _501 = fma(_437, cbModelParam._m0[28u].z, fma(_433, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _429));
        float _526 = _429 + _228;
        float _527 = _433 + _229;
        float _528 = _437 + _230;
        float _538 = fma(_528, cbModelParam._m0[26u].z, fma(_527, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _526)) - _493;
        float _539 = fma(_528, cbModelParam._m0[27u].z, fma(_527, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _526)) - _497;
        float _540 = fma(_528, cbModelParam._m0[28u].z, fma(_527, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _526)) - _501;
        float _544 = inversesqrt(dot(vec3(_538, _539, _540), vec3(_538, _539, _540)));
        float _557 = ((_544 * _538) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_493 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _558 = ((_544 * _539) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_497 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _559 = ((_544 * _540) / cbModelParam._m0[34u].z) + ((((((_501 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _562 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_557, _558, _559), 0.0);
        vec4 _569 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_557, _558, _559), 0.0);
        vec4 _576 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_557, _558, _559), 0.0);
        vec4 _583 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_557, _558, _559), 0.0);
        float _596 = exp2((_562.w + (-0.5)) * 20.0) * 2.0;
        float _597 = _596 * (_562.x + (-0.5));
        float _598 = _596 * (_562.y + (-0.5));
        float _599 = _596 * (_562.z + (-0.5));
        float _606 = exp2((_569.w + (-0.5)) * 20.0) * 2.0;
        float _607 = _606 * (_569.x + (-0.5));
        float _608 = _606 * (_569.y + (-0.5));
        float _609 = _606 * (_569.z + (-0.5));
        float _616 = exp2((_576.w + (-0.5)) * 20.0) * 2.0;
        float _617 = _616 * (_576.x + (-0.5));
        float _618 = _616 * (_576.y + (-0.5));
        float _619 = _616 * (_576.z + (-0.5));
        float _626 = exp2((_583.w + (-0.5)) * 20.0) * 2.0;
        float _627 = _626 * (_583.x + (-0.5));
        float _628 = _626 * (_583.y + (-0.5));
        float _629 = _626 * (_583.z + (-0.5));
        float _630 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
        float _631 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
        float _632 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
        float _633 = _597 * 0.5;
        float _634 = _607 * 0.5;
        float _635 = _617 * 0.5;
        float _636 = dot(vec3(_633, _634, _635), vec3(_633, _634, _635));
        float _641 = (_636 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_636);
        float _650 = (dot(vec3(_228, _229, _230), vec3(_641 * _633, _641 * _634, _641 * _635)) + 1.0) * 0.5;
        float _3352 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
        float _660 = sqrt(((_634 * _634) + (_633 * _633)) + (_635 * _635)) / (_630 + 9.9999997473787516355514526367188e-06);
        float _3363 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
        float _661 = isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0));
        float _662 = _661 * 2.0;
        float _666 = (1.0 - _661) / (_661 + 1.0);
        float _3374 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
        float _667 = isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0));
        float _676 = ((((1.0 - _667) * (_662 + 2.0)) * exp2(log2(isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0))) * (_662 + 1.0))) + _667) * _630;
        float _677 = _598 * 0.5;
        float _678 = _608 * 0.5;
        float _679 = _618 * 0.5;
        float _680 = dot(vec3(_677, _678, _679), vec3(_677, _678, _679));
        float _685 = (_680 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_680);
        float _693 = (dot(vec3(_228, _229, _230), vec3(_685 * _677, _685 * _678, _685 * _679)) + 1.0) * 0.5;
        float _3385 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
        float _702 = sqrt(((_678 * _678) + (_677 * _677)) + (_679 * _679)) / (_631 + 9.9999997473787516355514526367188e-06);
        float _3396 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
        float _703 = isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0));
        float _704 = _703 * 2.0;
        float _708 = (1.0 - _703) / (_703 + 1.0);
        float _3407 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
        float _709 = isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0));
        float _718 = ((((1.0 - _709) * (_704 + 2.0)) * exp2(log2(isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0))) * (_704 + 1.0))) + _709) * _631;
        float _719 = _599 * 0.5;
        float _720 = _609 * 0.5;
        float _721 = _619 * 0.5;
        float _722 = dot(vec3(_719, _720, _721), vec3(_719, _720, _721));
        float _727 = (_722 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_722);
        float _735 = (dot(vec3(_228, _229, _230), vec3(_727 * _719, _727 * _720, _727 * _721)) + 1.0) * 0.5;
        float _3418 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
        float _744 = sqrt(((_720 * _720) + (_719 * _719)) + (_721 * _721)) / (_632 + 9.9999997473787516355514526367188e-06);
        float _3429 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
        float _745 = isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0));
        float _746 = _745 * 2.0;
        float _750 = (1.0 - _745) / (_745 + 1.0);
        float _3440 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        float _751 = isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0));
        float _760 = ((((1.0 - _751) * (_746 + 2.0)) * exp2(log2(isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0))) * (_746 + 1.0))) + _751) * _632;
        _768 = _599;
        _770 = _598;
        _771 = _597;
        _772 = _609;
        _773 = _608;
        _774 = _607;
        _775 = _619;
        _776 = _618;
        _777 = _617;
        _778 = _632;
        _779 = _631;
        _780 = _630;
        _781 = cbModelParam._m0[36u].z * (isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0)));
        _782 = cbModelParam._m0[36u].z * (isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0)));
        _783 = cbModelParam._m0[36u].z * (isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0)));
    }
    else
    {
        _768 = _769;
        _770 = _769;
        _771 = _769;
        _772 = _769;
        _773 = _769;
        _774 = _769;
        _775 = _769;
        _776 = _769;
        _777 = _769;
        _778 = _769;
        _779 = _769;
        _780 = _769;
        _781 = 0.0;
        _782 = 0.0;
        _783 = 0.0;
    }
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _812 = fma(_437, cbModelParam._m0[30u].z, fma(_433, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _429));
        float _816 = fma(_437, cbModelParam._m0[31u].z, fma(_433, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _429));
        float _820 = fma(_437, cbModelParam._m0[32u].z, fma(_433, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _429));
        float _843 = _429 + _228;
        float _844 = _433 + _229;
        float _845 = _437 + _230;
        float _855 = fma(_845, cbModelParam._m0[30u].z, fma(_844, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _843)) - _812;
        float _856 = fma(_845, cbModelParam._m0[31u].z, fma(_844, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _843)) - _816;
        float _857 = fma(_845, cbModelParam._m0[32u].z, fma(_844, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _843)) - _820;
        float _861 = inversesqrt(dot(vec3(_855, _856, _857), vec3(_855, _856, _857)));
        float _874 = ((_861 * _855) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_812 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _875 = ((_861 * _856) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_816 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _876 = ((_861 * _857) / cbModelParam._m0[35u].z) + ((((((_820 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _878 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_874, _875, _876), 0.0);
        vec4 _885 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_874, _875, _876), 0.0);
        vec4 _892 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_874, _875, _876), 0.0);
        vec4 _899 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_874, _875, _876), 0.0);
        float _911 = exp2((_878.w + (-0.5)) * 20.0) * 2.0;
        float _912 = _911 * (_878.x + (-0.5));
        float _913 = _911 * (_878.y + (-0.5));
        float _914 = _911 * (_878.z + (-0.5));
        float _921 = exp2((_885.w + (-0.5)) * 20.0) * 2.0;
        float _922 = _921 * (_885.x + (-0.5));
        float _923 = _921 * (_885.y + (-0.5));
        float _924 = _921 * (_885.z + (-0.5));
        float _931 = exp2((_892.w + (-0.5)) * 20.0) * 2.0;
        float _932 = _931 * (_892.x + (-0.5));
        float _933 = _931 * (_892.y + (-0.5));
        float _934 = _931 * (_892.z + (-0.5));
        float _941 = exp2((_899.w + (-0.5)) * 20.0) * 2.0;
        float _942 = _941 * (_899.x + (-0.5));
        float _943 = _941 * (_899.y + (-0.5));
        float _944 = _941 * (_899.z + (-0.5));
        float _945 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _946 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _947 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _948 = _912 * 0.5;
        float _949 = _922 * 0.5;
        float _950 = _932 * 0.5;
        float _951 = dot(vec3(_948, _949, _950), vec3(_948, _949, _950));
        float _956 = (_951 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_951);
        float _964 = (dot(vec3(_228, _229, _230), vec3(_956 * _948, _956 * _949, _956 * _950)) + 1.0) * 0.5;
        float _3481 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _973 = sqrt(((_949 * _949) + (_948 * _948)) + (_950 * _950)) / (_945 + 9.9999997473787516355514526367188e-06);
        float _3492 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _974 = isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0));
        float _975 = _974 * 2.0;
        float _979 = (1.0 - _974) / (_974 + 1.0);
        float _3503 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _980 = isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0));
        float _989 = ((((1.0 - _980) * (_975 + 2.0)) * exp2(log2(isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0))) * (_975 + 1.0))) + _980) * _945;
        float _990 = _913 * 0.5;
        float _991 = _923 * 0.5;
        float _992 = _933 * 0.5;
        float _993 = dot(vec3(_990, _991, _992), vec3(_990, _991, _992));
        float _998 = (_993 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_993);
        float _1006 = (dot(vec3(_228, _229, _230), vec3(_998 * _990, _998 * _991, _998 * _992)) + 1.0) * 0.5;
        float _3514 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1015 = sqrt(((_991 * _991) + (_990 * _990)) + (_992 * _992)) / (_946 + 9.9999997473787516355514526367188e-06);
        float _3525 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1016 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
        float _1017 = _1016 * 2.0;
        float _1021 = (1.0 - _1016) / (_1016 + 1.0);
        float _3536 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1022 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
        float _1031 = ((((1.0 - _1022) * (_1017 + 2.0)) * exp2(log2(isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0))) * (_1017 + 1.0))) + _1022) * _946;
        float _1032 = _914 * 0.5;
        float _1033 = _924 * 0.5;
        float _1034 = _934 * 0.5;
        float _1035 = dot(vec3(_1032, _1033, _1034), vec3(_1032, _1033, _1034));
        float _1040 = (_1035 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1035);
        float _1048 = (dot(vec3(_228, _229, _230), vec3(_1040 * _1032, _1040 * _1033, _1040 * _1034)) + 1.0) * 0.5;
        float _3547 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1057 = sqrt(((_1033 * _1033) + (_1032 * _1032)) + (_1034 * _1034)) / (_947 + 9.9999997473787516355514526367188e-06);
        float _3558 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
        float _1059 = _1058 * 2.0;
        float _1063 = (1.0 - _1058) / (_1058 + 1.0);
        float _3569 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
        float _1073 = ((((1.0 - _1064) * (_1059 + 2.0)) * exp2(log2(isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0))) * (_1059 + 1.0))) + _1064) * _947;
        _1081 = _914;
        _1082 = _913;
        _1083 = _912;
        _1084 = _924;
        _1085 = _923;
        _1086 = _922;
        _1087 = _934;
        _1088 = _933;
        _1089 = _932;
        _1090 = _947;
        _1091 = _946;
        _1092 = _945;
        _1093 = cbModelParam._m0[36u].w * (isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0)));
        _1094 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0)));
        _1095 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0)));
    }
    else
    {
        _1081 = _769;
        _1082 = _769;
        _1083 = _769;
        _1084 = _769;
        _1085 = _769;
        _1086 = _769;
        _1087 = _769;
        _1088 = _769;
        _1089 = _769;
        _1090 = _769;
        _1091 = _769;
        _1092 = _769;
        _1093 = 0.0;
        _1094 = 0.0;
        _1095 = 0.0;
    }
    float _1105 = (cbModelParam._m0[1u].x * (_1093 - _781)) + _781;
    float _1106 = (cbModelParam._m0[1u].x * (_1094 - _782)) + _782;
    float _1107 = (cbModelParam._m0[1u].x * (_1095 - _783)) + _783;
    float _1128 = fma(_1107, cbSceneParam._m0[89u].z, fma(_1106, cbSceneParam._m0[89u].y, _1105 * cbSceneParam._m0[89u].x));
    float _1131 = fma(_1107, cbSceneParam._m0[90u].z, fma(_1106, cbSceneParam._m0[90u].y, _1105 * cbSceneParam._m0[90u].x));
    float _1134 = fma(_1107, cbSceneParam._m0[91u].z, fma(_1106, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1105));
    float _1149 = _405 * 0.5;
    float _1150 = _406 * 0.5;
    float _1151 = _407 * 0.5;
    float _1152 = dot(vec4(_1149, _1150, _1151, 1.0), vec4(_1083, _1086, _1089, _1092));
    float _1155 = dot(vec4(_1149, _1150, _1151, 1.0), vec4(_1082, _1085, _1088, _1091));
    float _1158 = dot(vec4(_1149, _1150, _1151, 1.0), vec4(_1081, _1084, _1087, _1090));
    float _1192;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1165 = dot(vec4(_1149, _1150, _1151, 1.0), vec4(_768, _772, _775, _778));
        float _1169 = dot(vec4(_1149, _1150, _1151, 1.0), vec4(_770, _773, _776, _779));
        float _1173 = dot(vec4(_1149, _1150, _1151, 1.0), vec4(_771, _774, _777, _780));
        float _1180 = dot(vec4(cbModelParam._m0[39u]), vec4(_1149, _1150, _1151, 1.0));
        _1192 = dot(vec3(isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0)), isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0)), isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1180) ? 0.0 : (isnan(0.0) ? _1180 : max(0.0, _1180))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1192 = 1.0;
    }
    float _1203;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1194 = dot(vec4(cbModelParam._m0[40u]), vec4(_1149, _1150, _1151, 1.0));
        _1203 = dot(vec3(isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0)), isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0)), isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1194) ? 0.0 : (isnan(0.0) ? _1194 : max(0.0, _1194))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1203 = 1.0;
    }
    float _1207 = (_1203 * cbModelParam._m0[1u].x) + (_1192 * (1.0 - cbModelParam._m0[1u].x));
    float _1216 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1298;
    float _1300;
    float _1302;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1265 = fma(_437, cbModelParam._m0[13u].z, fma(_433, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _429)) + cbModelParam._m0[13u].w;
        float _1269 = fma(_437, cbModelParam._m0[14u].z, fma(_433, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _429)) + cbModelParam._m0[14u].w;
        float _1273 = fma(_437, cbModelParam._m0[15u].z, fma(_433, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _429)) + cbModelParam._m0[15u].w;
        float _1276 = fma(_407, cbModelParam._m0[13u].z, fma(_406, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _405));
        float _1279 = fma(_407, cbModelParam._m0[14u].z, fma(_406, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _405));
        float _1282 = fma(_407, cbModelParam._m0[15u].z, fma(_406, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _405));
        float _1308;
        if (_1276 > 0.0)
        {
            _1308 = abs((1.0 - _1265) / _1276);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1276 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1265 + 1.0) / _1276);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1308 = frontier_phi_19_17_ladder;
        }
        float _1483;
        if (_1279 > 0.0)
        {
            _1483 = abs((1.0 - _1269) / _1279);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1279 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1269 + 1.0) / _1279);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1483 = frontier_phi_28_24_ladder;
        }
        float _1780;
        if (_1282 > 0.0)
        {
            _1780 = abs((1.0 - _1273) / _1282);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1282 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1273 + 1.0) / _1282);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1780 = frontier_phi_40_35_ladder;
        }
        float _1782 = isnan(_1483) ? _1308 : (isnan(_1308) ? _1483 : min(_1308, _1483));
        float _1783 = isnan(_1780) ? _1782 : (isnan(_1782) ? _1780 : min(_1782, _1780));
        float _1787 = (_1783 * _1276) + _1265;
        float _1788 = (_1783 * _1279) + _1269;
        float _1789 = (_1783 * _1282) + _1273;
        float _1790 = _1783 * 9.9999997473787516355514526367188e-05;
        float _1792 = (-1.0) - _1790;
        float _1794 = _1790 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1789 > _1794) || ((_1789 < _1792) || ((_1788 > _1794) || ((_1788 < _1792) || ((_1787 < _1792) || (_1787 > _1794))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1934 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1789, cbModelParam._m0[9u].z, fma(_1788, cbModelParam._m0[9u].y, _1787 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1789, cbModelParam._m0[10u].z, fma(_1788, cbModelParam._m0[10u].y, _1787 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1789, cbModelParam._m0[11u].z, fma(_1788, cbModelParam._m0[11u].y, _1787 * cbModelParam._m0[11u].x))), _1216);
            frontier_phi_18_40_ladder = _1934.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _1934.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _1934.x * cbModelParam._m0[1u].y;
        }
        _1298 = frontier_phi_18_40_ladder_2;
        _1300 = frontier_phi_18_40_ladder_1;
        _1302 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1286 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_405, _406, _407), _1216);
        _1298 = _1286.x * cbModelParam._m0[1u].y;
        _1300 = _1286.y * cbModelParam._m0[1u].y;
        _1302 = _1286.z * cbModelParam._m0[1u].y;
    }
    float _1305 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1398;
    float _1400;
    float _1402;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1362 = fma(_437, cbModelParam._m0[21u].z, fma(_433, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _429)) + cbModelParam._m0[21u].w;
        float _1366 = fma(_437, cbModelParam._m0[22u].z, fma(_433, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _429)) + cbModelParam._m0[22u].w;
        float _1370 = fma(_437, cbModelParam._m0[23u].z, fma(_433, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _429)) + cbModelParam._m0[23u].w;
        float _1373 = fma(_407, cbModelParam._m0[21u].z, fma(_406, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _405));
        float _1376 = fma(_407, cbModelParam._m0[22u].z, fma(_406, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _405));
        float _1379 = fma(_407, cbModelParam._m0[23u].z, fma(_406, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _405));
        float _1488;
        if (_1373 > 0.0)
        {
            _1488 = abs((1.0 - _1362) / _1373);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1373 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1362 + 1.0) / _1373);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1488 = frontier_phi_30_26_ladder;
        }
        float _1807;
        if (_1376 > 0.0)
        {
            _1807 = abs((1.0 - _1366) / _1376);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1376 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1366 + 1.0) / _1376);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1807 = frontier_phi_42_37_ladder;
        }
        float _2080;
        if (_1379 > 0.0)
        {
            _2080 = abs((1.0 - _1370) / _1379);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1379 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1370 + 1.0) / _1379);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2080 = frontier_phi_52_49_ladder;
        }
        float _2082 = isnan(_1807) ? _1488 : (isnan(_1488) ? _1807 : min(_1488, _1807));
        float _2083 = isnan(_2080) ? _2082 : (isnan(_2082) ? _2080 : min(_2082, _2080));
        float _2087 = (_2083 * _1373) + _1362;
        float _2088 = (_2083 * _1376) + _1366;
        float _2089 = (_2083 * _1379) + _1370;
        float _2090 = _2083 * 9.9999997473787516355514526367188e-05;
        float _2091 = (-1.0) - _2090;
        float _2093 = _2090 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2089 > _2093) || ((_2089 < _2091) || ((_2088 > _2093) || ((_2088 < _2091) || ((_2087 < _2091) || (_2087 > _2093))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2180 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2089, cbModelParam._m0[17u].z, fma(_2088, cbModelParam._m0[17u].y, _2087 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2089, cbModelParam._m0[18u].z, fma(_2088, cbModelParam._m0[18u].y, _2087 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2089, cbModelParam._m0[19u].z, fma(_2088, cbModelParam._m0[19u].y, _2087 * cbModelParam._m0[19u].x))), _1305);
            frontier_phi_27_52_ladder = _2180.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2180.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2180.x * cbModelParam._m0[1u].z;
        }
        _1398 = frontier_phi_27_52_ladder_2;
        _1400 = frontier_phi_27_52_ladder_1;
        _1402 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1382 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_405, _406, _407), _1305);
        _1398 = _1382.x * cbModelParam._m0[1u].z;
        _1400 = _1382.y * cbModelParam._m0[1u].z;
        _1402 = _1382.z * cbModelParam._m0[1u].z;
    }
    float _1414 = _396 * 0.01200000010430812835693359375;
    float _1416 = _1414 * ((cbModelParam._m0[1u].w * (_1398 - _1298)) + _1298);
    float _1417 = _1414 * ((cbModelParam._m0[1u].w * (_1400 - _1300)) + _1300);
    float _1418 = _1414 * ((cbModelParam._m0[1u].w * (_1402 - _1302)) + _1302);
    float _1421 = fma(_1418, cbSceneParam._m0[89u].z, fma(_1417, cbSceneParam._m0[89u].y, _1416 * cbSceneParam._m0[89u].x));
    float _1424 = fma(_1418, cbSceneParam._m0[90u].z, fma(_1417, cbSceneParam._m0[90u].y, _1416 * cbSceneParam._m0[90u].x));
    float _1427 = fma(_1418, cbSceneParam._m0[91u].z, fma(_1417, cbSceneParam._m0[91u].y, _1416 * cbSceneParam._m0[91u].x));
    float _1462 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1466 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1470 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1474 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1475 = _1462 / _1474;
    float _1476 = _1466 / _1474;
    float _1477 = _1470 / _1474;
    float _1624;
    float _1625;
    float _1626;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1504 = ((uint(_1477 > cbSceneParam._m0[59u].y) + uint(_1477 > cbSceneParam._m0[59u].x)) + uint(_1477 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1505 = _1504 + 43u;
        uint _1513 = _1504 + 44u;
        uint _1521 = _1504 + 45u;
        uint _1529 = _1504 + 46u;
        float _1540 = fma(_1474, cbSceneParam._m0[_1505].w, fma(_1470, cbSceneParam._m0[_1505].z, fma(_1466, cbSceneParam._m0[_1505].y, _1462 * cbSceneParam._m0[_1505].x)));
        float _1544 = fma(_1474, cbSceneParam._m0[_1513].w, fma(_1470, cbSceneParam._m0[_1513].z, fma(_1466, cbSceneParam._m0[_1513].y, _1462 * cbSceneParam._m0[_1513].x)));
        float _1552 = fma(_1474, cbSceneParam._m0[_1529].w, fma(_1470, cbSceneParam._m0[_1529].z, fma(_1466, cbSceneParam._m0[_1529].y, _1462 * cbSceneParam._m0[_1529].x)));
        float _1557 = cbSceneParam._m0[33u].z * _1552;
        float _1559 = cbSceneParam._m0[33u].w * _1552;
        float _1562 = fma(_1474, cbSceneParam._m0[_1521].w, fma(_1470, cbSceneParam._m0[_1521].z, fma(_1466, cbSceneParam._m0[_1521].y, _1462 * cbSceneParam._m0[_1521].x))) / _1552;
        float _1610 = (cbSceneParam._m0[33u].x - sqrt(((_1476 * _1476) + (_1475 * _1475)) + (_1477 * _1477))) * cbSceneParam._m0[33u].y;
        float _3695 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1617 = (isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1557 + _1540) / _1552, (_1559 + _1544) / _1552), _1562), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1559 + _1540) / _1552, (_1544 - _1557) / _1552), _1562), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1540 - _1557) / _1552, (_1544 - _1559) / _1552), _1562), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1540 - _1559) / _1552, (_1557 + _1544) / _1552), _1562), 0.0)).x), vec4(0.25)));
        _1624 = 1.0 - (_1617 * cbSceneParam._m0[34u].x);
        _1625 = 1.0 - (_1617 * cbSceneParam._m0[34u].y);
        _1626 = 1.0 - (_1617 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1624 = 1.0;
        _1625 = 1.0;
        _1626 = 1.0;
    }
    float _1690;
    float _1692;
    float _1694;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1678 = fma(_1474, cbSceneParam._m0[63u].w, fma(_1470, cbSceneParam._m0[63u].z, fma(_1466, cbSceneParam._m0[63u].y, _1462 * cbSceneParam._m0[63u].x)));
        float _1679 = fma(_1474, cbSceneParam._m0[60u].w, fma(_1470, cbSceneParam._m0[60u].z, fma(_1466, cbSceneParam._m0[60u].y, _1462 * cbSceneParam._m0[60u].x))) / _1678;
        float _1680 = fma(_1474, cbSceneParam._m0[61u].w, fma(_1470, cbSceneParam._m0[61u].z, fma(_1466, cbSceneParam._m0[61u].y, _1462 * cbSceneParam._m0[61u].x))) / _1678;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1679 >= cbSceneParam._m0[64u].x) && (_1680 >= cbSceneParam._m0[64u].y)) && (_1679 <= cbSceneParam._m0[64u].z)) && (_1680 <= cbSceneParam._m0[64u].w))
        {
            float _1820 = fma(_1474, cbSceneParam._m0[62u].w, fma(_1470, cbSceneParam._m0[62u].z, fma(_1466, cbSceneParam._m0[62u].y, _1462 * cbSceneParam._m0[62u].x))) / _1678;
            float _1824 = isnan(cbSceneParam._m0[41u].w) ? _1820 : (isnan(_1820) ? cbSceneParam._m0[41u].w : max(_1820, cbSceneParam._m0[41u].w));
            float _1867 = (cbSceneParam._m0[33u].x - sqrt(((_1476 * _1476) + (_1475 * _1475)) + (_1477 * _1477))) * cbSceneParam._m0[33u].y;
            float _3711 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
            float _1874 = (isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1679, cbSceneParam._m0[33u].w + _1680), _1824), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1679, _1680 - cbSceneParam._m0[33u].z), _1824), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1679 - cbSceneParam._m0[33u].z, _1680 - cbSceneParam._m0[33u].w), _1824), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1679 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1680), _1824), 0.0)).x), vec4(0.25)));
            float _1878 = 1.0 - (_1874 * cbSceneParam._m0[34u].x);
            float _1879 = 1.0 - (_1874 * cbSceneParam._m0[34u].y);
            float _1880 = 1.0 - (_1874 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_1879) ? _1625 : (isnan(_1625) ? _1879 : min(_1625, _1879));
            frontier_phi_39_38_ladder_1 = isnan(_1878) ? _1624 : (isnan(_1624) ? _1878 : min(_1624, _1878));
            frontier_phi_39_38_ladder_2 = isnan(_1880) ? _1626 : (isnan(_1626) ? _1880 : min(_1626, _1880));
        }
        else
        {
            frontier_phi_39_38_ladder = _1625;
            frontier_phi_39_38_ladder_1 = _1624;
            frontier_phi_39_38_ladder_2 = _1626;
        }
        _1690 = frontier_phi_39_38_ladder_1;
        _1692 = frontier_phi_39_38_ladder;
        _1694 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1690 = _1624;
        _1692 = _1625;
        _1694 = _1626;
    }
    uvec4 _1699 = floatBitsToUint(cbInstanceData._m0[_370 + 5u]);
    uint _1701 = _1699.x * 14u;
    uint _1702 = _1701 + 13u;
    float _1709 = _396 + (-1.0);
    float _1715 = (cbLight._m0[_1702].x * _1709) + 1.0;
    float _1716 = (cbLight._m0[_1702].y * _1709) + 1.0;
    float _1717 = (cbLight._m0[_1702].z * _1709) + 1.0;
    float _1718 = (cbLight._m0[_1702].w * _1709) + 1.0;
    uint _1719 = _1701 + 5u;
    float _1725 = isnan(1.0) ? _1716 : (isnan(_1716) ? 1.0 : min(_1716, 1.0));
    uint _1729 = _1701 + 4u;
    float _1739 = isnan(1.0) ? _1715 : (isnan(_1715) ? 1.0 : min(_1715, 1.0));
    uint _1743 = _1701 | 1u;
    float _1754 = dot(vec3(cbLight._m0[_1701].xyz), vec3(_228, _229, _230));
    float _1757 = dot(vec3(cbLight._m0[_1743].xyz), vec3(_228, _229, _230));
    float _3747 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
    float _3758 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
    float _1762 = (isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0))) * 0.3183098733425140380859375;
    float _1764 = (isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0))) * 0.3183098733425140380859375;
    float _1771 = ((cbLight._m0[_1719].x * _1725) * _1764) + (((cbLight._m0[_1729].x * _1690) * _1739) * _1762);
    float _1772 = ((_1725 * cbLight._m0[_1719].y) * _1764) + (((cbLight._m0[_1729].y * _1692) * _1739) * _1762);
    float _1773 = ((_1725 * cbLight._m0[_1719].z) * _1764) + (((cbLight._m0[_1729].z * _1694) * _1739) * _1762);
    uvec4 _1777 = floatBitsToUint(cbLight._m0[_1701 + 12u]);
    bool _1779 = _1777.x == 0u;
    float _1881;
    float _1883;
    float _1885;
    if (_1779)
    {
        _1881 = _1771;
        _1883 = _1772;
        _1885 = _1773;
    }
    else
    {
        uint _1889 = _1701 + 6u;
        float _1905 = (dot(vec3(cbLight._m0[_1701 + 2u].xyz), vec3(_228, _229, _230)) * 0.5) + 0.5;
        float _1906 = _1905 * _1905;
        float _3769 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
        float _1907 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _1908 = isnan(1.0) ? _1717 : (isnan(_1717) ? 1.0 : min(_1717, 1.0));
        _1881 = (((cbLight._m0[_1889].x * 0.3183098733425140380859375) * _1907) * _1908) + _1771;
        _1883 = (((cbLight._m0[_1889].y * 0.3183098733425140380859375) * _1907) * _1908) + _1772;
        _1885 = (((cbLight._m0[_1889].z * 0.3183098733425140380859375) * _1907) * _1908) + _1773;
    }
    bool _1888 = _1777.y == 0u;
    float _1943;
    float _1945;
    float _1947;
    if (_1888)
    {
        _1943 = _1881;
        _1945 = _1883;
        _1947 = _1885;
    }
    else
    {
        uint _2051 = _1701 + 7u;
        float _2067 = (dot(vec3(cbLight._m0[_1701 + 3u].xyz), vec3(_228, _229, _230)) * 0.5) + 0.5;
        float _2068 = _2067 * _2067;
        float _3785 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
        float _2069 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
        float _2070 = isnan(1.0) ? _1718 : (isnan(_1718) ? 1.0 : min(_1718, 1.0));
        _1943 = (((cbLight._m0[_2051].x * 0.3183098733425140380859375) * _2069) * _2070) + _1881;
        _1945 = (((cbLight._m0[_2051].y * 0.3183098733425140380859375) * _2069) * _2070) + _1883;
        _1947 = (((cbLight._m0[_2051].z * 0.3183098733425140380859375) * _2069) * _2070) + _1885;
    }
    uint _1949 = _1701 + 8u;
    float _1955 = cbLight._m0[_1701].x + _309;
    float _1956 = cbLight._m0[_1701].y + _310;
    float _1957 = cbLight._m0[_1701].z + _311;
    float _1961 = inversesqrt(dot(vec3(_1955, _1956, _1957), vec3(_1955, _1956, _1957)));
    float _1965 = dot(vec3(_228, _229, _230), vec3(cbLight._m0[_1701].xyz));
    float _3801 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
    float _1968 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
    float _3812 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _1969 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
    float _1970 = dot(vec3(cbLight._m0[_1701].xyz), vec3(_1955 * _1961, _1956 * _1961, _1957 * _1961));
    float _3823 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
    float _1981 = (exp2(log2(1.0 - (isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1987 = (0.5 / ((_1968 + 9.9999999392252902907785028219223e-09) + _1969)) * _1968;
    float _3834 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
    float _1989 = (isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) * 0.31831014156341552734375;
    uint _2003 = _1701 + 9u;
    float _2009 = cbLight._m0[_1743].x + _309;
    float _2010 = cbLight._m0[_1743].y + _310;
    float _2011 = cbLight._m0[_1743].z + _311;
    float _2015 = inversesqrt(dot(vec3(_2009, _2010, _2011), vec3(_2009, _2010, _2011)));
    float _2019 = dot(vec3(_228, _229, _230), vec3(cbLight._m0[_1743].xyz));
    float _3845 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
    float _2022 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
    float _2023 = dot(vec3(cbLight._m0[_1743].xyz), vec3(_2009 * _2015, _2010 * _2015, _2011 * _2015));
    float _3856 = isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0));
    float _2032 = (exp2(log2(1.0 - (isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2036 = (0.5 / ((_2022 + 9.9999999392252902907785028219223e-09) + _1969)) * _2022;
    float _3867 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
    float _2038 = (isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))) * 0.31831014156341552734375;
    float _2048 = (((_2032 * cbLight._m0[_2003].x) * _2038) * _1725) + ((((cbLight._m0[_1949].x * _1690) * _1981) * _1989) * _1739);
    float _2049 = (((_2032 * cbLight._m0[_2003].y) * _2038) * _1725) + ((((cbLight._m0[_1949].y * _1692) * _1981) * _1989) * _1739);
    float _2050 = (((_2032 * cbLight._m0[_2003].z) * _2038) * _1725) + ((((cbLight._m0[_1949].z * _1694) * _1981) * _1989) * _1739);
    float _2106;
    float _2108;
    float _2110;
    if (_1779)
    {
        _2106 = _2048;
        _2108 = _2049;
        _2110 = _2050;
    }
    else
    {
        uint _2112 = _1701 + 10u;
        uint _2118 = _1701 + 2u;
        float _2124 = cbLight._m0[_2118].x + _309;
        float _2125 = cbLight._m0[_2118].y + _310;
        float _2126 = cbLight._m0[_2118].z + _311;
        float _2130 = inversesqrt(dot(vec3(_2124, _2125, _2126), vec3(_2124, _2125, _2126)));
        float _2134 = dot(vec3(_228, _229, _230), vec3(cbLight._m0[_2118].xyz));
        float _3878 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
        float _2137 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _2138 = dot(vec3(cbLight._m0[_2118].xyz), vec3(_2124 * _2130, _2125 * _2130, _2126 * _2130));
        float _3889 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
        float _2147 = (exp2(log2(1.0 - (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2151 = (0.5 / ((_2137 + 9.9999999392252902907785028219223e-09) + _1969)) * _2137;
        float _3900 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
        float _2153 = (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0))) * 0.31831014156341552734375;
        float _2154 = isnan(1.0) ? _1717 : (isnan(_1717) ? 1.0 : min(_1717, 1.0));
        _2106 = (((_2147 * cbLight._m0[_2112].x) * _2153) * _2154) + _2048;
        _2108 = (((_2147 * cbLight._m0[_2112].y) * _2153) * _2154) + _2049;
        _2110 = (((_2147 * cbLight._m0[_2112].z) * _2153) * _2154) + _2050;
    }
    float _2185;
    float _2187;
    float _2189;
    if (_1888)
    {
        _2185 = _2106;
        _2187 = _2108;
        _2189 = _2110;
    }
    else
    {
        uint _2196 = _1701 + 11u;
        uint _2202 = _1701 + 3u;
        float _2208 = cbLight._m0[_2202].x + _309;
        float _2209 = cbLight._m0[_2202].y + _310;
        float _2210 = cbLight._m0[_2202].z + _311;
        float _2214 = inversesqrt(dot(vec3(_2208, _2209, _2210), vec3(_2208, _2209, _2210)));
        float _2218 = dot(vec3(_228, _229, _230), vec3(cbLight._m0[_2202].xyz));
        float _3916 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
        float _2221 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _2222 = dot(vec3(cbLight._m0[_2202].xyz), vec3(_2208 * _2214, _2209 * _2214, _2210 * _2214));
        float _3927 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
        float _2231 = (exp2(log2(1.0 - (isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2235 = (0.5 / ((_2221 + 9.9999999392252902907785028219223e-09) + _1969)) * _2221;
        float _3938 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
        float _2237 = (isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))) * 0.31831014156341552734375;
        float _2238 = isnan(1.0) ? _1718 : (isnan(_1718) ? 1.0 : min(_1718, 1.0));
        _2185 = (((_2231 * cbLight._m0[_2196].x) * _2237) * _2238) + _2106;
        _2187 = (((_2231 * cbLight._m0[_2196].y) * _2237) * _2238) + _2108;
        _2189 = (((_2231 * cbLight._m0[_2196].z) * _2237) * _2238) + _2110;
    }
    float _2303;
    float _2305;
    float _2307;
    float _2309;
    float _2311;
    float _2313;
    if (_1699.y == 0u)
    {
        uvec4 _2259 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2260 = _2259.x;
        uint _2271 = uint((float(_2259.y) * floor(float(uint(cbSceneParam._m0[85u].y * _331) / _2260))) + floor(float(uint(cbSceneParam._m0[85u].x * _330) / _2260)));
        float _2281 = (log2(_1477 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2282 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
        uint _2285 = uint(isnan(14.0) ? _2282 : (isnan(_2282) ? 14.0 : min(_2282, 14.0)));
        uvec4 _2290 = texelFetch(g_lightClusterGridBuffer, int(((_2285 << 2u) + (_2271 << 6u)) >> 2u));
        uint _2291 = _2290.x;
        uint _2292 = _2259.z;
        float _2389;
        float _2391;
        float _2393;
        float _2395;
        float _2397;
        float _2399;
        if (((((1u << ((_2292 >> 4u) & 15u)) + 4294967295u) & _2291) == 0u) || ((_2292 & 240u) == 0u))
        {
            _2389 = 0.0;
            _2391 = 0.0;
            _2393 = 0.0;
            _2395 = 0.0;
            _2397 = 0.0;
            _2399 = 0.0;
        }
        else
        {
            float _2390;
            float _2392;
            float _2394;
            float _2396;
            float _2398;
            float _2400;
            float _2540 = 0.0;
            float _2541 = 0.0;
            float _2542 = 0.0;
            float _2543 = 0.0;
            float _2544 = 0.0;
            float _2545 = 0.0;
            uint _2546 = 0u;
            uint _2555;
            bool _2556;
            for (;;)
            {
                _2555 = texelFetch(g_lightClassification, int((((_2285 << 5u) + (_2271 << 9u)) + (_2546 << 2u)) >> 2u)).x;
                _2556 = _2555 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2556)
                {
                    frontier_phi_73_pred = _2545;
                    frontier_phi_73_pred_1 = _2544;
                    frontier_phi_73_pred_2 = _2543;
                    frontier_phi_73_pred_3 = _2542;
                    frontier_phi_73_pred_4 = _2541;
                    frontier_phi_73_pred_5 = _2540;
                }
                else
                {
                    float _2685;
                    float _2686;
                    float _2687;
                    float _2688;
                    float _2689;
                    float _2690;
                    uint _2691;
                    _2685 = _2540;
                    _2686 = _2541;
                    _2687 = _2542;
                    _2688 = _2543;
                    _2689 = _2544;
                    _2690 = _2545;
                    _2691 = _2555;
                    float _2612;
                    float _2613;
                    float _2614;
                    float _2615;
                    float _2616;
                    float _2617;
                    for (;;)
                    {
                        uint _2695 = uint(findLSB(_2691)) + (_2546 << 5u);
                        uint _2692 = (_2691 + 4294967295u) & _2691;
                        uint _2697 = _2695 * 48u;
                        vec4 _2711 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2697)).x, texelFetch(g_PointLightRenderingBuffer, int(_2697 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2697 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2697 + 3u)).x));
                        uint _2717 = (_2695 * 48u) + 4u;
                        vec4 _2730 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2717)).x, texelFetch(g_PointLightRenderingBuffer, int(_2717 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2717 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2717 + 3u)).x));
                        uint _2736 = (_2695 * 48u) + 8u;
                        vec3 _2747 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2736)).x, texelFetch(g_PointLightRenderingBuffer, int(_2736 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2736 + 2u)).x));
                        float _2751 = _2711.x - _1475;
                        float _2752 = _2711.y - _1476;
                        float _2753 = _2711.z - _1477;
                        float _2754 = dot(vec3(_2751, _2752, _2753), vec3(_2751, _2752, _2753));
                        float _2757 = inversesqrt(_2754);
                        float _2766 = 1.0 - (_2754 * _2711.w);
                        float _3964 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0));
                        float _2767 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
                        float _2768 = sqrt(_2754) * _2730.w;
                        float _2771 = 1.39999997615814208984375 / (_2768 + 1.39999997615814208984375);
                        float _2772 = _2771 * _2771;
                        float _2775 = ((1.0 - _2772) * dot(vec3(_351, _354, _357), vec3(_2757 * _2751, _2757 * _2752, _2757 * _2753))) + _2772;
                        float _2778 = _2768 * _2768;
                        float _2782 = ((isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0))) * _2767) / ((_2778 * 0.699999988079071044921875) + 1.0);
                        float _2786 = (-0.0) - _1475;
                        float _2787 = (-0.0) - _1476;
                        float _2788 = (-0.0) - _1477;
                        float _2792 = inversesqrt(dot(vec3(_2786, _2787, _2788), vec3(_2786, _2787, _2788)));
                        float _2796 = dot(vec3(_351, _354, _357), vec3(_2792 * _2786, _2792 * _2787, _2792 * _2788));
                        float _3980 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
                        float _3991 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
                        float _2800 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
                        float _2804 = (0.5 / (((isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0))) + 9.9999999392252902907785028219223e-09) + _2800)) * _2800;
                        float _4002 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
                        float _2813 = (((isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))) * 3.1415927410125732421875) / ((_2778 * 2.1991131305694580078125) + 3.141590118408203125)) * _2767;
                        _2615 = (_2782 * _2730.x) + _2688;
                        _2616 = (_2782 * _2730.y) + _2689;
                        _2617 = (_2782 * _2730.z) + _2690;
                        _2612 = (_2813 * _2747.x) + _2685;
                        _2613 = (_2813 * _2747.y) + _2686;
                        _2614 = (_2813 * _2747.z) + _2687;
                        if (_2692 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2685 = _2612;
                            _2686 = _2613;
                            _2687 = _2614;
                            _2688 = _2615;
                            _2689 = _2616;
                            _2690 = _2617;
                            _2691 = _2692;
                        }
                    }
                    frontier_phi_73_pred = _2617;
                    frontier_phi_73_pred_1 = _2616;
                    frontier_phi_73_pred_2 = _2615;
                    frontier_phi_73_pred_3 = _2614;
                    frontier_phi_73_pred_4 = _2613;
                    frontier_phi_73_pred_5 = _2612;
                }
                _2400 = frontier_phi_73_pred;
                _2398 = frontier_phi_73_pred_1;
                _2396 = frontier_phi_73_pred_2;
                _2394 = frontier_phi_73_pred_3;
                _2392 = frontier_phi_73_pred_4;
                _2390 = frontier_phi_73_pred_5;
                uint _2547 = _2546 + 1u;
                if (_2547 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2540 = _2390;
                    _2541 = _2392;
                    _2542 = _2394;
                    _2543 = _2396;
                    _2544 = _2398;
                    _2545 = _2400;
                    _2546 = _2547;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2389 = _2390;
            _2391 = _2392;
            _2393 = _2394;
            _2395 = _2396;
            _2397 = _2398;
            _2399 = _2400;
        }
        uvec4 _2403 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2404 = _2403.z;
        uint _2406 = (_2404 >> 8u) & 15u;
        float _2511;
        float _2513;
        float _2515;
        float _2517;
        float _2519;
        float _2521;
        if (((4294967295u << _2406) & _2291) == 0u)
        {
            _2511 = _2389;
            _2513 = _2391;
            _2515 = _2393;
            _2517 = _2395;
            _2519 = _2397;
            _2521 = _2399;
        }
        else
        {
            float _2536 = inversesqrt(dot(vec3(_1475, _1476, _1477), vec3(_1475, _1476, _1477)));
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2406 < ((_2404 >> 12u) & 15u))
            {
                float _2512;
                float _2514;
                float _2516;
                float _2518;
                float _2520;
                float _2522;
                float _2668 = _2389;
                float _2669 = _2391;
                float _2670 = _2393;
                float _2671 = _2395;
                float _2672 = _2397;
                float _2673 = _2399;
                uint _2674 = _2406;
                uint _2683;
                bool _2684;
                for (;;)
                {
                    _2683 = texelFetch(g_lightClassification, int((((_2285 << 5u) + (_2271 << 9u)) + (_2674 << 2u)) >> 2u)).x;
                    _2684 = _2683 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_2684)
                    {
                        frontier_phi_84_pred = _2672;
                        frontier_phi_84_pred_1 = _2671;
                        frontier_phi_84_pred_2 = _2670;
                        frontier_phi_84_pred_3 = _2669;
                        frontier_phi_84_pred_4 = _2668;
                        frontier_phi_84_pred_5 = _2673;
                    }
                    else
                    {
                        float _2827;
                        float _2828;
                        float _2829;
                        float _2830;
                        float _2831;
                        float _2832;
                        float _3079;
                        float _3080;
                        float _3081;
                        float _3082;
                        float _3083;
                        float _3084;
                        float _2840 = _2668;
                        float _2841 = _2669;
                        float _2842 = _2670;
                        float _2843 = _2671;
                        float _2844 = _2672;
                        float _2845 = _2673;
                        uint _2846 = _2683;
                        uint _2847;
                        vec4 _2872;
                        float _2873;
                        vec4 _2888;
                        vec3 _2900;
                        vec4 _2916;
                        vec4 _2932;
                        float _2979;
                        bool _2980;
                        for (;;)
                        {
                            uint _2857 = ((_2674 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2846));
                            _2847 = (_2846 + 4294967295u) & _2846;
                            uint _2859 = _2857 * 40u;
                            _2872 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2859)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2859 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2859 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2859 + 3u)).x));
                            _2873 = _2872.w;
                            uint _2875 = (_2857 * 40u) + 4u;
                            _2888 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2875)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2875 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2875 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2875 + 3u)).x));
                            uint _2890 = (_2857 * 40u) + 8u;
                            _2900 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2890)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2890 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2890 + 2u)).x));
                            uint _2903 = (_2857 * 40u) + 16u;
                            _2916 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2903)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 3u)).x));
                            uint _2919 = (_2857 * 40u) + 20u;
                            _2932 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2919)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 3u)).x));
                            uint _2935 = (_2857 * 40u) + 24u;
                            vec4 _2948 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2935)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2935 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2935 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2935 + 3u)).x));
                            uint _2954 = (_2857 * 40u) + 28u;
                            vec4 _2967 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2954)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 3u)).x));
                            _2979 = fma(_1477, _2967.z, fma(_1476, _2967.y, _2967.x * _1475)) + _2967.w;
                            _2980 = !((fma(_1477, _2948.z, fma(_1476, _2948.y, _2948.x * _1475)) + _2948.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_2980)
                            {
                                float _3007 = _2872.x - _1475;
                                float _3008 = _2872.y - _1476;
                                float _3009 = _2872.z - _1477;
                                float _3010 = dot(vec3(_3007, _3008, _3009), vec3(_3007, _3008, _3009));
                                float _3013 = inversesqrt(_3010);
                                float _3014 = _3013 * _3007;
                                float _3015 = _3013 * _3008;
                                float _3016 = _3013 * _3009;
                                float _3020 = 1.0 - (_3010 / (_2873 * _2873));
                                float _4013 = isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0));
                                float _3021 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
                                float _3025 = sqrt(_3010) * _2888.w;
                                float _3027 = 1.39999997615814208984375 / (_3025 + 1.39999997615814208984375);
                                float _3028 = _3027 * _3027;
                                float _3029 = 1.0 - _3028;
                                float _3031 = (_3029 * dot(vec3(_3014, _3015, _3016), vec3(_351, _354, _357))) + _3028;
                                float _3034 = _3025 * _3025;
                                float _3038 = (fma(_1477, _2916.z, fma(_1476, _2916.y, _2916.x * _1475)) + _2916.w) / _2979;
                                float _3039 = (fma(_1477, _2932.z, fma(_1476, _2932.y, _2932.x * _1475)) + _2932.w) / _2979;
                                float _3043 = 1.0 - dot(vec2(_3038, _3039), vec2(_3038, _3039));
                                float _4029 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
                                float _3044 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
                                float _3045 = _3044 * (((isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0))) * _3021) / ((_3034 * 0.699999988079071044921875) + 1.0));
                                float _3055 = dot(vec3(_351, _354, _357), vec3((-0.0) - (_1475 * _2536), (-0.0) - (_1476 * _2536), (-0.0) - (_1477 * _2536)));
                                float _4040 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
                                float _3063 = (_3029 * dot(vec3(_351, _354, _357), vec3(_3014, _3015, _3016))) + _3028;
                                float _4051 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0));
                                float _3064 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
                                float _3068 = (0.5 / (((isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) + 9.9999999392252902907785028219223e-09) + _3064)) * _3064;
                                float _4062 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0));
                                float _3075 = (_3044 * _3021) * (((isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0))) * 3.1415927410125732421875) / ((_3034 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_90_pred = _3045 * _2888.y;
                                frontier_phi_90_pred_1 = _3045 * _2888.x;
                                frontier_phi_90_pred_2 = _3075 * _2900.z;
                                frontier_phi_90_pred_3 = _3075 * _2900.y;
                                frontier_phi_90_pred_4 = _3075 * _2900.x;
                                frontier_phi_90_pred_5 = _3045 * _2888.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3083 = frontier_phi_90_pred;
                            _3082 = frontier_phi_90_pred_1;
                            _3081 = frontier_phi_90_pred_2;
                            _3080 = frontier_phi_90_pred_3;
                            _3079 = frontier_phi_90_pred_4;
                            _3084 = frontier_phi_90_pred_5;
                            _2830 = _3082 + _2843;
                            _2831 = _3083 + _2844;
                            _2832 = _3084 + _2845;
                            _2827 = _3079 + _2840;
                            _2828 = _3080 + _2841;
                            _2829 = _3081 + _2842;
                            if (_2847 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2840 = _2827;
                                _2841 = _2828;
                                _2842 = _2829;
                                _2843 = _2830;
                                _2844 = _2831;
                                _2845 = _2832;
                                _2846 = _2847;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _2831;
                        frontier_phi_84_pred_1 = _2830;
                        frontier_phi_84_pred_2 = _2829;
                        frontier_phi_84_pred_3 = _2828;
                        frontier_phi_84_pred_4 = _2827;
                        frontier_phi_84_pred_5 = _2832;
                    }
                    _2520 = frontier_phi_84_pred;
                    _2518 = frontier_phi_84_pred_1;
                    _2516 = frontier_phi_84_pred_2;
                    _2514 = frontier_phi_84_pred_3;
                    _2512 = frontier_phi_84_pred_4;
                    _2522 = frontier_phi_84_pred_5;
                    uint _2675 = _2674 + 1u;
                    if (_2675 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2668 = _2512;
                        _2669 = _2514;
                        _2670 = _2516;
                        _2671 = _2518;
                        _2672 = _2520;
                        _2673 = _2522;
                        _2674 = _2675;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2522;
                frontier_phi_65_66_ladder_1 = _2518;
                frontier_phi_65_66_ladder_2 = _2520;
                frontier_phi_65_66_ladder_3 = _2514;
                frontier_phi_65_66_ladder_4 = _2512;
                frontier_phi_65_66_ladder_5 = _2516;
            }
            else
            {
                frontier_phi_65_66_ladder = _2399;
                frontier_phi_65_66_ladder_1 = _2395;
                frontier_phi_65_66_ladder_2 = _2397;
                frontier_phi_65_66_ladder_3 = _2391;
                frontier_phi_65_66_ladder_4 = _2389;
                frontier_phi_65_66_ladder_5 = _2393;
            }
            _2511 = frontier_phi_65_66_ladder_4;
            _2513 = frontier_phi_65_66_ladder_3;
            _2515 = frontier_phi_65_66_ladder_5;
            _2517 = frontier_phi_65_66_ladder_1;
            _2519 = frontier_phi_65_66_ladder_2;
            _2521 = frontier_phi_65_66_ladder;
        }
        float _2526 = isnan(1.0) ? _396 : (isnan(_396) ? 1.0 : min(_396, 1.0));
        _2303 = (_2526 * _2517) + _1943;
        _2305 = (_2526 * _2519) + _1945;
        _2307 = (_2526 * _2521) + _1947;
        _2309 = ((_2511 * 0.039999999105930328369140625) * _2526) + _2185;
        _2311 = ((_2513 * 0.039999999105930328369140625) * _2526) + _2187;
        _2313 = ((_2515 * 0.039999999105930328369140625) * _2526) + _2189;
    }
    else
    {
        _2303 = _1943;
        _2305 = _1945;
        _2307 = _1947;
        _2309 = _2185;
        _2311 = _2187;
        _2313 = _2189;
    }
    uint _2319 = _372 + uint(cbMatDynParam._m0[0u].w);
    float _4078 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _4089 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _4100 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _2344 = (((isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * (_2303 + ((isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0))) * _396))) + ((_2309 + ((isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0))) * _1207)) * cbPerFrame._m0[3u].x)) + ((_216.x * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2319].x);
    float _2346 = (((_216.y * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2319].y) + ((_2311 + ((isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0))) * _1207)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))) * (_2305 + ((isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0))) * _396)));
    float _2348 = (((_216.z * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2319].z) + ((_2313 + ((isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0))) * _1207)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) * (_2307 + ((isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0))) * _396)));
    float _2349 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
    float _2350 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
    float _2351 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
    uint _2352 = _370 + 6u;
    float _2360 = _330 / cbSceneParam._m0[86u].x;
    float _2361 = _331 / cbSceneParam._m0[86u].y;
    vec4 _2375 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2360, _2361, (log2((isnan(cbSceneParam._m0[77u].w) ? _250 : (isnan(_250) ? cbSceneParam._m0[77u].w : min(_250, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2377 = _2375.x;
    float _2378 = _2375.y;
    float _2379 = _2375.z;
    float _2380 = _2375.w;
    float _2451;
    float _2453;
    float _2455;
    float _2457;
    if (_250 > cbSceneParam._m0[78u].w)
    {
        float _2414 = isnan(_250) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _250 : min(cbSceneParam._m0[80u].w, _250));
        float _2415 = _2414 / _250;
        float _2426 = _2415 * _302;
        float _2427 = _303 * _2415;
        float _2428 = (-0.0) - _2427;
        float _2429 = _2415 * _304;
        float _2431 = (cbSceneParam._m0[77u].w * _2428) / _2414;
        float _2432 = _2431 + cbSceneParam._m0[79u].w;
        float _2433 = cbSceneParam._m0[79u].w - _2427;
        float _2439 = sqrt(((_2426 * _2426) + (_2427 * _2427)) + (_2429 * _2429));
        float _2442 = (1.0 - (cbSceneParam._m0[77u].w / _2414)) * _2439;
        float _2447 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2449 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2625;
        if (abs((_2428 - _2431) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2625 = ((((_2432 > 0.0) ? exp2(_2447 * _2432) : (2.0 - exp2(_2449 * _2432))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2442;
        }
        else
        {
            float _2569 = 1.0 / cbSceneParam._m0[80u].x;
            float _2570 = isnan(_2433) ? _2432 : (isnan(_2432) ? _2433 : max(_2432, _2433));
            float _2571 = isnan(_2433) ? _2432 : (isnan(_2432) ? _2433 : min(_2432, _2433));
            float _2580 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : min(_2570, 0.0));
            float _2581 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : min(_2571, 0.0));
            _2625 = ((abs(_2439 / _2428) * cbSceneParam._m0[80u].y) * ((((_2580 - _2581) * 2.0) - ((exp2(_2447 * (isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0)))) - exp2(_2447 * (isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0))))) * _2569)) - ((exp2(_2449 * _2580) - exp2(_2449 * _2581)) * _2569))) + (_2442 * cbSceneParam._m0[80u].z);
        }
        vec4 _2627 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2360, _2361, 1.0), 0.0);
        float _2636 = exp2((_2625 * (-1.44269502162933349609375)) * (1.0 - _2627.w));
        float _2637 = log2(_2636);
        float _2653 = log2(_2380);
        _2451 = (exp2(_2653 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2637 * cbSceneParam._m0[78u].x)) * _2627.x) / cbSceneParam._m0[78u].x)) + _2377;
        _2453 = (exp2(_2653 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2637 * cbSceneParam._m0[78u].y)) * _2627.y) / cbSceneParam._m0[78u].y)) + _2378;
        _2455 = (exp2(_2653 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2637 * cbSceneParam._m0[78u].z)) * _2627.z) / cbSceneParam._m0[78u].z)) + _2379;
        _2457 = _2636 * _2380;
    }
    else
    {
        _2451 = _2377;
        _2453 = _2378;
        _2455 = _2379;
        _2457 = _2380;
    }
    bool _2663;
    vec4 _2467;
    vec4 _2490;
    float _2492;
    float _2496;
    float _2497;
    float _2498;
    float _2499;
    bool _2510;
    for (;;)
    {
        _2467 = cbMatDynParam._m0[0u];
        float _2469 = roundEven(_2467.y);
        bool _2470 = _2469 == 3.0;
        float _2472 = log2(_2457);
        float _2479 = exp2(_2472 * cbSceneParam._m0[78u].x) * _2349;
        float _2480 = exp2(_2472 * cbSceneParam._m0[78u].y) * _2350;
        float _2481 = exp2(_2472 * cbSceneParam._m0[78u].z) * _2351;
        float _2488 = _318 + (-0.5);
        _2490 = cbMtdParam._m0[1u];
        _2492 = _2490.y * _2488;
        float _2495 = (_2469 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2496 = _2495 * (_2470 ? _2479 : (_2479 + (cbSceneParam._m0[72u].w * _2451)));
        _2497 = _2495 * (_2470 ? _2480 : (_2480 + (cbSceneParam._m0[72u].w * _2453)));
        _2498 = _2495 * (_2470 ? _2481 : (_2481 + (cbSceneParam._m0[72u].w * _2455)));
        _2499 = _2488 * 0.999000012874603271484375;
        _2510 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2510)
        {
            if ((cbInstanceData._m0[_370 + 7u].x + _2499) < 0.5)
            {
                _2663 = true;
                break;
            }
        }
        uint _2604 = _372 + uint(_2467.w);
        if ((cbInstanceData._m0[_2604].w < 1.0) && ((cbInstanceData._m0[_2604].w + _2499) < 0.5))
        {
            _2663 = true;
            break;
        }
        if ((_2492 + 1.0) < _2490.x)
        {
            _2663 = true;
            break;
        }
        _2663 = false;
        break;
    }
    float _2818;
    if (_2663)
    {
        discard_state = true;
        _2818 = 0.0;
    }
    else
    {
        _2818 = cbInstanceData._m0[_2352].w;
    }
    SV_Target.x = _2496;
    SV_Target.y = _2497;
    SV_Target.z = _2498;
    SV_Target.w = _2818;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2352].w;
    discard_exit();
}


