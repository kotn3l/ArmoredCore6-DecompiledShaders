#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_Emissive_snp_0_Texture2D_2;
layout(set = 0, binding = 1) uniform texture2D M_A_Emissive_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _720;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _163 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _164 = _163 * NORMAL.x;
    float _165 = _163 * NORMAL.y;
    float _166 = _163 * NORMAL.z;
    float _171;
    float _172;
    float _173;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _171 = (-0.0) - _164;
        _172 = (-0.0) - _165;
        _173 = (-0.0) - _166;
    }
    else
    {
        _171 = _164;
        _172 = _165;
        _173 = _166;
    }
    vec4 _187 = texture(sampler2D(M_A_Emissive_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _190 = _187.x;
    float _191 = _187.y;
    float _192 = _187.z;
    vec4 _208 = texture(sampler2D(M_A_Emissive_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _219 = inversesqrt(dot(vec3(_171, _172, _173), vec3(_171, _172, _173)));
    float _220 = _219 * _171;
    float _221 = _219 * _172;
    float _222 = _219 * _173;
    float _2849 = isnan(0.0) ? _190 : (isnan(_190) ? 0.0 : max(_190, 0.0));
    float _2860 = isnan(0.0) ? _191 : (isnan(_191) ? 0.0 : max(_191, 0.0));
    float _2871 = isnan(0.0) ? _192 : (isnan(_192) ? 0.0 : max(_192, 0.0));
    float _242 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _284 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _294 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _284);
    float _295 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _284);
    float _296 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _284);
    float _300 = inversesqrt(dot(vec3(_294, _295, _296), vec3(_294, _295, _296)));
    float _301 = _294 * _300;
    float _302 = _295 * _300;
    float _303 = _296 * _300;
    float _309 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _310 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _331 = fma(_222, cbSceneParam._m0[5u].z, fma(_221, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _220));
    float _334 = fma(_222, cbSceneParam._m0[6u].z, fma(_221, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _220));
    float _337 = fma(_222, cbSceneParam._m0[7u].z, fma(_221, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _220));
    uint _350 = uint(roundEven(NORMAL.w)) * 13u;
    uint _352 = _350 + 9u;
    uint _353 = _352 + uint(cbMatDynParam._m0[0u].w);
    float _359 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2849 : (isnan(_2849) ? 1.0 : min(_2849, 1.0)))) * cbInstanceData._m0[_353].x;
    float _360 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2860 : (isnan(_2860) ? 1.0 : min(_2860, 1.0)))) * cbInstanceData._m0[_353].y;
    float _361 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2871 : (isnan(_2871) ? 1.0 : min(_2871, 1.0)))) * cbInstanceData._m0[_353].z;
    float _2882 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _362 = isnan(1.0) ? _2882 : (isnan(_2882) ? 1.0 : min(_2882, 1.0));
    float _2893 = isnan(0.0) ? _360 : (isnan(_360) ? 0.0 : max(_360, 0.0));
    float _363 = isnan(1.0) ? _2893 : (isnan(_2893) ? 1.0 : min(_2893, 1.0));
    float _2904 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _364 = isnan(1.0) ? _2904 : (isnan(_2904) ? 1.0 : min(_2904, 1.0));
    vec4 _373 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _309, cbSceneParam._m0[86u].y * _310));
    float _376 = _373.x * TEXCOORD.z;
    float _377 = dot(vec3(_220, _221, _222), vec3(_301, _302, _303));
    float _380 = _377 * 2.0;
    float _385 = (_380 * _220) - _301;
    float _386 = (_380 * _221) - _302;
    float _387 = (_380 * _222) - _303;
    float _409 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _413 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _417 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _719;
    float _721;
    float _722;
    float _723;
    float _724;
    float _725;
    float _726;
    float _727;
    float _728;
    float _729;
    float _730;
    float _731;
    float _732;
    float _733;
    float _734;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _444 = fma(_417, cbModelParam._m0[26u].z, fma(_413, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _409));
        float _448 = fma(_417, cbModelParam._m0[27u].z, fma(_413, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _409));
        float _452 = fma(_417, cbModelParam._m0[28u].z, fma(_413, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _409));
        float _477 = _409 + _220;
        float _478 = _413 + _221;
        float _479 = _417 + _222;
        float _489 = fma(_479, cbModelParam._m0[26u].z, fma(_478, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _477)) - _444;
        float _490 = fma(_479, cbModelParam._m0[27u].z, fma(_478, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _477)) - _448;
        float _491 = fma(_479, cbModelParam._m0[28u].z, fma(_478, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _477)) - _452;
        float _495 = inversesqrt(dot(vec3(_489, _490, _491), vec3(_489, _490, _491)));
        float _508 = ((_495 * _489) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_444 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _509 = ((_495 * _490) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_448 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _510 = ((_495 * _491) / cbModelParam._m0[34u].z) + ((((((_452 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _513 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_508, _509, _510), 0.0);
        vec4 _520 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_508, _509, _510), 0.0);
        vec4 _527 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_508, _509, _510), 0.0);
        vec4 _534 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_508, _509, _510), 0.0);
        float _547 = exp2((_513.w + (-0.5)) * 20.0) * 2.0;
        float _548 = _547 * (_513.x + (-0.5));
        float _549 = _547 * (_513.y + (-0.5));
        float _550 = _547 * (_513.z + (-0.5));
        float _557 = exp2((_520.w + (-0.5)) * 20.0) * 2.0;
        float _558 = _557 * (_520.x + (-0.5));
        float _559 = _557 * (_520.y + (-0.5));
        float _560 = _557 * (_520.z + (-0.5));
        float _567 = exp2((_527.w + (-0.5)) * 20.0) * 2.0;
        float _568 = _567 * (_527.x + (-0.5));
        float _569 = _567 * (_527.y + (-0.5));
        float _570 = _567 * (_527.z + (-0.5));
        float _577 = exp2((_534.w + (-0.5)) * 20.0) * 2.0;
        float _578 = _577 * (_534.x + (-0.5));
        float _579 = _577 * (_534.y + (-0.5));
        float _580 = _577 * (_534.z + (-0.5));
        float _581 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
        float _582 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
        float _583 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
        float _584 = _548 * 0.5;
        float _585 = _558 * 0.5;
        float _586 = _568 * 0.5;
        float _587 = dot(vec3(_584, _585, _586), vec3(_584, _585, _586));
        float _592 = (_587 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_587);
        float _601 = (dot(vec3(_220, _221, _222), vec3(_592 * _584, _592 * _585, _592 * _586)) + 1.0) * 0.5;
        float _2930 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
        float _611 = sqrt(((_585 * _585) + (_584 * _584)) + (_586 * _586)) / (_581 + 9.9999997473787516355514526367188e-06);
        float _2941 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
        float _612 = isnan(1.0) ? _2941 : (isnan(_2941) ? 1.0 : min(_2941, 1.0));
        float _613 = _612 * 2.0;
        float _617 = (1.0 - _612) / (_612 + 1.0);
        float _2952 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
        float _618 = isnan(1.0) ? _2952 : (isnan(_2952) ? 1.0 : min(_2952, 1.0));
        float _627 = ((((1.0 - _618) * (_613 + 2.0)) * exp2(log2(isnan(1.0) ? _2930 : (isnan(_2930) ? 1.0 : min(_2930, 1.0))) * (_613 + 1.0))) + _618) * _581;
        float _628 = _549 * 0.5;
        float _629 = _559 * 0.5;
        float _630 = _569 * 0.5;
        float _631 = dot(vec3(_628, _629, _630), vec3(_628, _629, _630));
        float _636 = (_631 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_631);
        float _644 = (dot(vec3(_220, _221, _222), vec3(_636 * _628, _636 * _629, _636 * _630)) + 1.0) * 0.5;
        float _2963 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
        float _653 = sqrt(((_629 * _629) + (_628 * _628)) + (_630 * _630)) / (_582 + 9.9999997473787516355514526367188e-06);
        float _2974 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
        float _654 = isnan(1.0) ? _2974 : (isnan(_2974) ? 1.0 : min(_2974, 1.0));
        float _655 = _654 * 2.0;
        float _659 = (1.0 - _654) / (_654 + 1.0);
        float _2985 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
        float _660 = isnan(1.0) ? _2985 : (isnan(_2985) ? 1.0 : min(_2985, 1.0));
        float _669 = ((((1.0 - _660) * (_655 + 2.0)) * exp2(log2(isnan(1.0) ? _2963 : (isnan(_2963) ? 1.0 : min(_2963, 1.0))) * (_655 + 1.0))) + _660) * _582;
        float _670 = _550 * 0.5;
        float _671 = _560 * 0.5;
        float _672 = _570 * 0.5;
        float _673 = dot(vec3(_670, _671, _672), vec3(_670, _671, _672));
        float _678 = (_673 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_673);
        float _686 = (dot(vec3(_220, _221, _222), vec3(_678 * _670, _678 * _671, _678 * _672)) + 1.0) * 0.5;
        float _2996 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
        float _695 = sqrt(((_671 * _671) + (_670 * _670)) + (_672 * _672)) / (_583 + 9.9999997473787516355514526367188e-06);
        float _3007 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
        float _696 = isnan(1.0) ? _3007 : (isnan(_3007) ? 1.0 : min(_3007, 1.0));
        float _697 = _696 * 2.0;
        float _701 = (1.0 - _696) / (_696 + 1.0);
        float _3018 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
        float _702 = isnan(1.0) ? _3018 : (isnan(_3018) ? 1.0 : min(_3018, 1.0));
        float _711 = ((((1.0 - _702) * (_697 + 2.0)) * exp2(log2(isnan(1.0) ? _2996 : (isnan(_2996) ? 1.0 : min(_2996, 1.0))) * (_697 + 1.0))) + _702) * _583;
        _719 = _550;
        _721 = _549;
        _722 = _548;
        _723 = _560;
        _724 = _559;
        _725 = _558;
        _726 = _570;
        _727 = _569;
        _728 = _568;
        _729 = _583;
        _730 = _582;
        _731 = _581;
        _732 = cbModelParam._m0[36u].z * (isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0)));
        _733 = cbModelParam._m0[36u].z * (isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0)));
        _734 = cbModelParam._m0[36u].z * (isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0)));
    }
    else
    {
        _719 = _720;
        _721 = _720;
        _722 = _720;
        _723 = _720;
        _724 = _720;
        _725 = _720;
        _726 = _720;
        _727 = _720;
        _728 = _720;
        _729 = _720;
        _730 = _720;
        _731 = _720;
        _732 = 0.0;
        _733 = 0.0;
        _734 = 0.0;
    }
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _760 = fma(_417, cbModelParam._m0[30u].z, fma(_413, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _409));
        float _764 = fma(_417, cbModelParam._m0[31u].z, fma(_413, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _409));
        float _768 = fma(_417, cbModelParam._m0[32u].z, fma(_413, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _409));
        float _791 = _409 + _220;
        float _792 = _413 + _221;
        float _793 = _417 + _222;
        float _803 = fma(_793, cbModelParam._m0[30u].z, fma(_792, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _791)) - _760;
        float _804 = fma(_793, cbModelParam._m0[31u].z, fma(_792, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _791)) - _764;
        float _805 = fma(_793, cbModelParam._m0[32u].z, fma(_792, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _791)) - _768;
        float _809 = inversesqrt(dot(vec3(_803, _804, _805), vec3(_803, _804, _805)));
        float _822 = ((_809 * _803) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_760 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _823 = ((_809 * _804) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_764 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _824 = ((_809 * _805) / cbModelParam._m0[35u].z) + ((((((_768 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _826 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_822, _823, _824), 0.0);
        vec4 _833 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_822, _823, _824), 0.0);
        vec4 _840 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_822, _823, _824), 0.0);
        vec4 _847 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_822, _823, _824), 0.0);
        float _859 = exp2((_826.w + (-0.5)) * 20.0) * 2.0;
        float _860 = _859 * (_826.x + (-0.5));
        float _861 = _859 * (_826.y + (-0.5));
        float _862 = _859 * (_826.z + (-0.5));
        float _869 = exp2((_833.w + (-0.5)) * 20.0) * 2.0;
        float _870 = _869 * (_833.x + (-0.5));
        float _871 = _869 * (_833.y + (-0.5));
        float _872 = _869 * (_833.z + (-0.5));
        float _879 = exp2((_840.w + (-0.5)) * 20.0) * 2.0;
        float _880 = _879 * (_840.x + (-0.5));
        float _881 = _879 * (_840.y + (-0.5));
        float _882 = _879 * (_840.z + (-0.5));
        float _889 = exp2((_847.w + (-0.5)) * 20.0) * 2.0;
        float _890 = _889 * (_847.x + (-0.5));
        float _891 = _889 * (_847.y + (-0.5));
        float _892 = _889 * (_847.z + (-0.5));
        float _893 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _894 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _895 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _896 = _860 * 0.5;
        float _897 = _870 * 0.5;
        float _898 = _880 * 0.5;
        float _899 = dot(vec3(_896, _897, _898), vec3(_896, _897, _898));
        float _904 = (_899 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_899);
        float _912 = (dot(vec3(_220, _221, _222), vec3(_904 * _896, _904 * _897, _904 * _898)) + 1.0) * 0.5;
        float _3059 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        float _921 = sqrt(((_897 * _897) + (_896 * _896)) + (_898 * _898)) / (_893 + 9.9999997473787516355514526367188e-06);
        float _3070 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _922 = isnan(1.0) ? _3070 : (isnan(_3070) ? 1.0 : min(_3070, 1.0));
        float _923 = _922 * 2.0;
        float _927 = (1.0 - _922) / (_922 + 1.0);
        float _3081 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _928 = isnan(1.0) ? _3081 : (isnan(_3081) ? 1.0 : min(_3081, 1.0));
        float _937 = ((((1.0 - _928) * (_923 + 2.0)) * exp2(log2(isnan(1.0) ? _3059 : (isnan(_3059) ? 1.0 : min(_3059, 1.0))) * (_923 + 1.0))) + _928) * _893;
        float _938 = _861 * 0.5;
        float _939 = _871 * 0.5;
        float _940 = _881 * 0.5;
        float _941 = dot(vec3(_938, _939, _940), vec3(_938, _939, _940));
        float _946 = (_941 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_941);
        float _954 = (dot(vec3(_220, _221, _222), vec3(_946 * _938, _946 * _939, _946 * _940)) + 1.0) * 0.5;
        float _3092 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _963 = sqrt(((_939 * _939) + (_938 * _938)) + (_940 * _940)) / (_894 + 9.9999997473787516355514526367188e-06);
        float _3103 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _964 = isnan(1.0) ? _3103 : (isnan(_3103) ? 1.0 : min(_3103, 1.0));
        float _965 = _964 * 2.0;
        float _969 = (1.0 - _964) / (_964 + 1.0);
        float _3114 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _970 = isnan(1.0) ? _3114 : (isnan(_3114) ? 1.0 : min(_3114, 1.0));
        float _979 = ((((1.0 - _970) * (_965 + 2.0)) * exp2(log2(isnan(1.0) ? _3092 : (isnan(_3092) ? 1.0 : min(_3092, 1.0))) * (_965 + 1.0))) + _970) * _894;
        float _980 = _862 * 0.5;
        float _981 = _872 * 0.5;
        float _982 = _882 * 0.5;
        float _983 = dot(vec3(_980, _981, _982), vec3(_980, _981, _982));
        float _988 = (_983 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_983);
        float _996 = (dot(vec3(_220, _221, _222), vec3(_988 * _980, _988 * _981, _988 * _982)) + 1.0) * 0.5;
        float _3125 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _1005 = sqrt(((_981 * _981) + (_980 * _980)) + (_982 * _982)) / (_895 + 9.9999997473787516355514526367188e-06);
        float _3136 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1006 = isnan(1.0) ? _3136 : (isnan(_3136) ? 1.0 : min(_3136, 1.0));
        float _1007 = _1006 * 2.0;
        float _1011 = (1.0 - _1006) / (_1006 + 1.0);
        float _3147 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1012 = isnan(1.0) ? _3147 : (isnan(_3147) ? 1.0 : min(_3147, 1.0));
        float _1021 = ((((1.0 - _1012) * (_1007 + 2.0)) * exp2(log2(isnan(1.0) ? _3125 : (isnan(_3125) ? 1.0 : min(_3125, 1.0))) * (_1007 + 1.0))) + _1012) * _895;
        _1029 = _862;
        _1030 = _861;
        _1031 = _860;
        _1032 = _872;
        _1033 = _871;
        _1034 = _870;
        _1035 = _882;
        _1036 = _881;
        _1037 = _880;
        _1038 = _895;
        _1039 = _894;
        _1040 = _893;
        _1041 = cbModelParam._m0[36u].w * (isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0)));
        _1042 = cbModelParam._m0[36u].w * (isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0)));
        _1043 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0)));
    }
    else
    {
        _1029 = _720;
        _1030 = _720;
        _1031 = _720;
        _1032 = _720;
        _1033 = _720;
        _1034 = _720;
        _1035 = _720;
        _1036 = _720;
        _1037 = _720;
        _1038 = _720;
        _1039 = _720;
        _1040 = _720;
        _1041 = 0.0;
        _1042 = 0.0;
        _1043 = 0.0;
    }
    float _1053 = (cbModelParam._m0[1u].x * (_1041 - _732)) + _732;
    float _1054 = (cbModelParam._m0[1u].x * (_1042 - _733)) + _733;
    float _1055 = (cbModelParam._m0[1u].x * (_1043 - _734)) + _734;
    float _1076 = fma(_1055, cbSceneParam._m0[89u].z, fma(_1054, cbSceneParam._m0[89u].y, _1053 * cbSceneParam._m0[89u].x));
    float _1079 = fma(_1055, cbSceneParam._m0[90u].z, fma(_1054, cbSceneParam._m0[90u].y, _1053 * cbSceneParam._m0[90u].x));
    float _1082 = fma(_1055, cbSceneParam._m0[91u].z, fma(_1054, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1053));
    float _1097 = _385 * 0.5;
    float _1098 = _386 * 0.5;
    float _1099 = _387 * 0.5;
    float _1100 = dot(vec4(_1097, _1098, _1099, 1.0), vec4(_1031, _1034, _1037, _1040));
    float _1103 = dot(vec4(_1097, _1098, _1099, 1.0), vec4(_1030, _1033, _1036, _1039));
    float _1106 = dot(vec4(_1097, _1098, _1099, 1.0), vec4(_1029, _1032, _1035, _1038));
    float _1140;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1113 = dot(vec4(_1097, _1098, _1099, 1.0), vec4(_719, _723, _726, _729));
        float _1117 = dot(vec4(_1097, _1098, _1099, 1.0), vec4(_721, _724, _727, _730));
        float _1121 = dot(vec4(_1097, _1098, _1099, 1.0), vec4(_722, _725, _728, _731));
        float _1128 = dot(vec4(cbModelParam._m0[39u]), vec4(_1097, _1098, _1099, 1.0));
        _1140 = dot(vec3(isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0)), isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0)), isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1128) ? 0.0 : (isnan(0.0) ? _1128 : max(0.0, _1128))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1140 = 1.0;
    }
    float _1151;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1142 = dot(vec4(cbModelParam._m0[40u]), vec4(_1097, _1098, _1099, 1.0));
        _1151 = dot(vec3(isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0)), isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0)), isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1142) ? 0.0 : (isnan(0.0) ? _1142 : max(0.0, _1142))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1151 = 1.0;
    }
    float _1155 = (_1151 * cbModelParam._m0[1u].x) + (_1140 * (1.0 - cbModelParam._m0[1u].x));
    float _1164 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1246;
    float _1248;
    float _1250;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1213 = fma(_417, cbModelParam._m0[13u].z, fma(_413, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _409)) + cbModelParam._m0[13u].w;
        float _1217 = fma(_417, cbModelParam._m0[14u].z, fma(_413, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _409)) + cbModelParam._m0[14u].w;
        float _1221 = fma(_417, cbModelParam._m0[15u].z, fma(_413, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _409)) + cbModelParam._m0[15u].w;
        float _1224 = fma(_387, cbModelParam._m0[13u].z, fma(_386, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _385));
        float _1227 = fma(_387, cbModelParam._m0[14u].z, fma(_386, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _385));
        float _1230 = fma(_387, cbModelParam._m0[15u].z, fma(_386, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _385));
        float _1256;
        if (_1224 > 0.0)
        {
            _1256 = abs((1.0 - _1213) / _1224);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1224 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1213 + 1.0) / _1224);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1256 = frontier_phi_16_14_ladder;
        }
        float _1464;
        if (_1227 > 0.0)
        {
            _1464 = abs((1.0 - _1217) / _1227);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1227 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1217 + 1.0) / _1227);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1464 = frontier_phi_25_21_ladder;
        }
        float _1653;
        if (_1230 > 0.0)
        {
            _1653 = abs((1.0 - _1221) / _1230);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1230 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1221 + 1.0) / _1230);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1653 = frontier_phi_37_32_ladder;
        }
        float _1655 = isnan(_1464) ? _1256 : (isnan(_1256) ? _1464 : min(_1256, _1464));
        float _1656 = isnan(_1653) ? _1655 : (isnan(_1655) ? _1653 : min(_1655, _1653));
        float _1660 = (_1656 * _1224) + _1213;
        float _1661 = (_1656 * _1227) + _1217;
        float _1662 = (_1656 * _1230) + _1221;
        float _1663 = _1656 * 9.9999997473787516355514526367188e-05;
        float _1665 = (-1.0) - _1663;
        float _1667 = _1663 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1662 > _1667) || ((_1662 < _1665) || ((_1661 > _1667) || ((_1661 < _1665) || ((_1660 < _1665) || (_1660 > _1667))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1759 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1662, cbModelParam._m0[9u].z, fma(_1661, cbModelParam._m0[9u].y, _1660 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1662, cbModelParam._m0[10u].z, fma(_1661, cbModelParam._m0[10u].y, _1660 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1662, cbModelParam._m0[11u].z, fma(_1661, cbModelParam._m0[11u].y, _1660 * cbModelParam._m0[11u].x))), _1164);
            frontier_phi_15_37_ladder = _1759.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1759.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1759.x * cbModelParam._m0[1u].y;
        }
        _1246 = frontier_phi_15_37_ladder_2;
        _1248 = frontier_phi_15_37_ladder_1;
        _1250 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1234 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_385, _386, _387), _1164);
        _1246 = _1234.x * cbModelParam._m0[1u].y;
        _1248 = _1234.y * cbModelParam._m0[1u].y;
        _1250 = _1234.z * cbModelParam._m0[1u].y;
    }
    float _1253 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1346;
    float _1348;
    float _1350;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1310 = fma(_417, cbModelParam._m0[21u].z, fma(_413, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _409)) + cbModelParam._m0[21u].w;
        float _1314 = fma(_417, cbModelParam._m0[22u].z, fma(_413, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _409)) + cbModelParam._m0[22u].w;
        float _1318 = fma(_417, cbModelParam._m0[23u].z, fma(_413, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _409)) + cbModelParam._m0[23u].w;
        float _1321 = fma(_387, cbModelParam._m0[21u].z, fma(_386, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _385));
        float _1324 = fma(_387, cbModelParam._m0[22u].z, fma(_386, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _385));
        float _1327 = fma(_387, cbModelParam._m0[23u].z, fma(_386, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _385));
        float _1469;
        if (_1321 > 0.0)
        {
            _1469 = abs((1.0 - _1310) / _1321);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1321 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1310 + 1.0) / _1321);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1469 = frontier_phi_27_23_ladder;
        }
        float _1680;
        if (_1324 > 0.0)
        {
            _1680 = abs((1.0 - _1314) / _1324);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1324 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1314 + 1.0) / _1324);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1680 = frontier_phi_39_34_ladder;
        }
        float _1831;
        if (_1327 > 0.0)
        {
            _1831 = abs((1.0 - _1318) / _1327);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1327 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1318 + 1.0) / _1327);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _1831 = frontier_phi_48_45_ladder;
        }
        float _1833 = isnan(_1680) ? _1469 : (isnan(_1469) ? _1680 : min(_1469, _1680));
        float _1834 = isnan(_1831) ? _1833 : (isnan(_1833) ? _1831 : min(_1833, _1831));
        float _1838 = (_1834 * _1321) + _1310;
        float _1839 = (_1834 * _1324) + _1314;
        float _1840 = (_1834 * _1327) + _1318;
        float _1841 = _1834 * 9.9999997473787516355514526367188e-05;
        float _1842 = (-1.0) - _1841;
        float _1844 = _1841 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_1840 > _1844) || ((_1840 < _1842) || ((_1839 > _1844) || ((_1839 < _1842) || ((_1838 < _1842) || (_1838 > _1844))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2057 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1840, cbModelParam._m0[17u].z, fma(_1839, cbModelParam._m0[17u].y, _1838 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1840, cbModelParam._m0[18u].z, fma(_1839, cbModelParam._m0[18u].y, _1838 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1840, cbModelParam._m0[19u].z, fma(_1839, cbModelParam._m0[19u].y, _1838 * cbModelParam._m0[19u].x))), _1253);
            frontier_phi_24_48_ladder = _2057.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2057.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2057.x * cbModelParam._m0[1u].z;
        }
        _1346 = frontier_phi_24_48_ladder_2;
        _1348 = frontier_phi_24_48_ladder_1;
        _1350 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1330 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_385, _386, _387), _1253);
        _1346 = _1330.x * cbModelParam._m0[1u].z;
        _1348 = _1330.y * cbModelParam._m0[1u].z;
        _1350 = _1330.z * cbModelParam._m0[1u].z;
    }
    float _1362 = _376 * 0.01200000010430812835693359375;
    float _1364 = _1362 * ((cbModelParam._m0[1u].w * (_1346 - _1246)) + _1246);
    float _1365 = _1362 * ((cbModelParam._m0[1u].w * (_1348 - _1248)) + _1248);
    float _1366 = _1362 * ((cbModelParam._m0[1u].w * (_1350 - _1250)) + _1250);
    float _1369 = fma(_1366, cbSceneParam._m0[89u].z, fma(_1365, cbSceneParam._m0[89u].y, _1364 * cbSceneParam._m0[89u].x));
    float _1372 = fma(_1366, cbSceneParam._m0[90u].z, fma(_1365, cbSceneParam._m0[90u].y, _1364 * cbSceneParam._m0[90u].x));
    float _1375 = fma(_1366, cbSceneParam._m0[91u].z, fma(_1365, cbSceneParam._m0[91u].y, _1364 * cbSceneParam._m0[91u].x));
    uvec4 _1385 = floatBitsToUint(cbInstanceData._m0[_350 + 5u]);
    uint _1387 = _1385.x * 14u;
    uint _1388 = _1387 + 13u;
    float _1395 = _376 + (-1.0);
    float _1401 = (cbLight._m0[_1388].x * _1395) + 1.0;
    float _1402 = (cbLight._m0[_1388].y * _1395) + 1.0;
    float _1403 = (cbLight._m0[_1388].z * _1395) + 1.0;
    float _1404 = (cbLight._m0[_1388].w * _1395) + 1.0;
    uint _1405 = _1387 + 5u;
    float _1411 = isnan(1.0) ? _1402 : (isnan(_1402) ? 1.0 : min(_1402, 1.0));
    uint _1415 = _1387 + 4u;
    float _1422 = isnan(1.0) ? _1401 : (isnan(_1401) ? 1.0 : min(_1401, 1.0));
    uint _1426 = _1387 | 1u;
    float _1437 = dot(vec3(cbLight._m0[_1387].xyz), vec3(_220, _221, _222));
    float _1440 = dot(vec3(cbLight._m0[_1426].xyz), vec3(_220, _221, _222));
    float _3283 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
    float _3294 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
    float _1445 = (isnan(1.0) ? _3283 : (isnan(_3283) ? 1.0 : min(_3283, 1.0))) * 0.3183098733425140380859375;
    float _1447 = (isnan(1.0) ? _3294 : (isnan(_3294) ? 1.0 : min(_3294, 1.0))) * 0.3183098733425140380859375;
    float _1454 = ((cbLight._m0[_1405].x * _1411) * _1447) + ((cbLight._m0[_1415].x * _1422) * _1445);
    float _1455 = ((_1411 * cbLight._m0[_1405].y) * _1447) + ((_1422 * cbLight._m0[_1415].y) * _1445);
    float _1456 = ((_1411 * cbLight._m0[_1405].z) * _1447) + ((_1422 * cbLight._m0[_1415].z) * _1445);
    uvec4 _1461 = floatBitsToUint(cbLight._m0[_1387 + 12u]);
    bool _1463 = _1461.x == 0u;
    float _1474;
    float _1476;
    float _1478;
    if (_1463)
    {
        _1474 = _1454;
        _1476 = _1455;
        _1478 = _1456;
    }
    else
    {
        uint _1482 = _1387 + 6u;
        float _1498 = (dot(vec3(cbLight._m0[_1387 + 2u].xyz), vec3(_220, _221, _222)) * 0.5) + 0.5;
        float _1499 = _1498 * _1498;
        float _3305 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1500 = isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0));
        float _1501 = isnan(1.0) ? _1403 : (isnan(_1403) ? 1.0 : min(_1403, 1.0));
        _1474 = (((cbLight._m0[_1482].x * 0.3183098733425140380859375) * _1500) * _1501) + _1454;
        _1476 = (((cbLight._m0[_1482].y * 0.3183098733425140380859375) * _1500) * _1501) + _1455;
        _1478 = (((cbLight._m0[_1482].z * 0.3183098733425140380859375) * _1500) * _1501) + _1456;
    }
    bool _1481 = _1461.y == 0u;
    float _1519;
    float _1521;
    float _1523;
    if (_1481)
    {
        _1519 = _1474;
        _1521 = _1476;
        _1523 = _1478;
    }
    else
    {
        uint _1624 = _1387 + 7u;
        float _1640 = (dot(vec3(cbLight._m0[_1387 + 3u].xyz), vec3(_220, _221, _222)) * 0.5) + 0.5;
        float _1641 = _1640 * _1640;
        float _3321 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1642 = isnan(1.0) ? _3321 : (isnan(_3321) ? 1.0 : min(_3321, 1.0));
        float _1643 = isnan(1.0) ? _1404 : (isnan(_1404) ? 1.0 : min(_1404, 1.0));
        _1519 = (((cbLight._m0[_1624].x * 0.3183098733425140380859375) * _1642) * _1643) + _1474;
        _1521 = (((cbLight._m0[_1624].y * 0.3183098733425140380859375) * _1642) * _1643) + _1476;
        _1523 = (((cbLight._m0[_1624].z * 0.3183098733425140380859375) * _1642) * _1643) + _1478;
    }
    uint _1525 = _1387 + 8u;
    float _1531 = cbLight._m0[_1387].x + _301;
    float _1532 = cbLight._m0[_1387].y + _302;
    float _1533 = cbLight._m0[_1387].z + _303;
    float _1537 = inversesqrt(dot(vec3(_1531, _1532, _1533), vec3(_1531, _1532, _1533)));
    float _1541 = dot(vec3(_220, _221, _222), vec3(cbLight._m0[_1387].xyz));
    float _3337 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
    float _1544 = isnan(1.0) ? _3337 : (isnan(_3337) ? 1.0 : min(_3337, 1.0));
    float _3348 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _1545 = isnan(1.0) ? _3348 : (isnan(_3348) ? 1.0 : min(_3348, 1.0));
    float _1546 = dot(vec3(cbLight._m0[_1387].xyz), vec3(_1531 * _1537, _1532 * _1537, _1533 * _1537));
    float _3359 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
    float _1557 = (exp2(log2(1.0 - (isnan(1.0) ? _3359 : (isnan(_3359) ? 1.0 : min(_3359, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1563 = (0.5 / ((_1544 + 9.9999999392252902907785028219223e-09) + _1545)) * _1544;
    float _3370 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
    float _1565 = (isnan(1.0) ? _3370 : (isnan(_3370) ? 1.0 : min(_3370, 1.0))) * 0.31831014156341552734375;
    uint _1576 = _1387 + 9u;
    float _1582 = cbLight._m0[_1426].x + _301;
    float _1583 = cbLight._m0[_1426].y + _302;
    float _1584 = cbLight._m0[_1426].z + _303;
    float _1588 = inversesqrt(dot(vec3(_1582, _1583, _1584), vec3(_1582, _1583, _1584)));
    float _1592 = dot(vec3(_220, _221, _222), vec3(cbLight._m0[_1426].xyz));
    float _3381 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
    float _1595 = isnan(1.0) ? _3381 : (isnan(_3381) ? 1.0 : min(_3381, 1.0));
    float _1596 = dot(vec3(cbLight._m0[_1426].xyz), vec3(_1582 * _1588, _1583 * _1588, _1584 * _1588));
    float _3392 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
    float _1605 = (exp2(log2(1.0 - (isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1609 = (0.5 / ((_1595 + 9.9999999392252902907785028219223e-09) + _1545)) * _1595;
    float _3403 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
    float _1611 = (isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0))) * 0.31831014156341552734375;
    float _1621 = (((_1605 * cbLight._m0[_1576].x) * _1611) * _1411) + (((_1557 * cbLight._m0[_1525].x) * _1565) * _1422);
    float _1622 = (((_1605 * cbLight._m0[_1576].y) * _1611) * _1411) + (((_1557 * cbLight._m0[_1525].y) * _1565) * _1422);
    float _1623 = (((_1605 * cbLight._m0[_1576].z) * _1611) * _1411) + (((_1557 * cbLight._m0[_1525].z) * _1565) * _1422);
    float _1685;
    float _1687;
    float _1689;
    if (_1463)
    {
        _1685 = _1621;
        _1687 = _1622;
        _1689 = _1623;
    }
    else
    {
        uint _1691 = _1387 + 10u;
        uint _1697 = _1387 + 2u;
        float _1703 = cbLight._m0[_1697].x + _301;
        float _1704 = cbLight._m0[_1697].y + _302;
        float _1705 = cbLight._m0[_1697].z + _303;
        float _1709 = inversesqrt(dot(vec3(_1703, _1704, _1705), vec3(_1703, _1704, _1705)));
        float _1713 = dot(vec3(_220, _221, _222), vec3(cbLight._m0[_1697].xyz));
        float _3414 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
        float _1716 = isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0));
        float _1717 = dot(vec3(cbLight._m0[_1697].xyz), vec3(_1703 * _1709, _1704 * _1709, _1705 * _1709));
        float _3425 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
        float _1726 = (exp2(log2(1.0 - (isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1730 = (0.5 / ((_1716 + 9.9999999392252902907785028219223e-09) + _1545)) * _1716;
        float _3436 = isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0));
        float _1732 = (isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0))) * 0.31831014156341552734375;
        float _1733 = isnan(1.0) ? _1403 : (isnan(_1403) ? 1.0 : min(_1403, 1.0));
        _1685 = (((_1726 * cbLight._m0[_1691].x) * _1732) * _1733) + _1621;
        _1687 = (((_1726 * cbLight._m0[_1691].y) * _1732) * _1733) + _1622;
        _1689 = (((_1726 * cbLight._m0[_1691].z) * _1732) * _1733) + _1623;
    }
    float _1768;
    float _1770;
    float _1772;
    if (_1481)
    {
        _1768 = _1685;
        _1770 = _1687;
        _1772 = _1689;
    }
    else
    {
        uint _1779 = _1387 + 11u;
        uint _1785 = _1387 + 3u;
        float _1791 = cbLight._m0[_1785].x + _301;
        float _1792 = cbLight._m0[_1785].y + _302;
        float _1793 = cbLight._m0[_1785].z + _303;
        float _1797 = inversesqrt(dot(vec3(_1791, _1792, _1793), vec3(_1791, _1792, _1793)));
        float _1801 = dot(vec3(_220, _221, _222), vec3(cbLight._m0[_1785].xyz));
        float _3452 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
        float _1804 = isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0));
        float _1805 = dot(vec3(cbLight._m0[_1785].xyz), vec3(_1791 * _1797, _1792 * _1797, _1793 * _1797));
        float _3463 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
        float _1814 = (exp2(log2(1.0 - (isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1818 = (0.5 / ((_1804 + 9.9999999392252902907785028219223e-09) + _1545)) * _1804;
        float _3474 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
        float _1820 = (isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0))) * 0.31831014156341552734375;
        float _1821 = isnan(1.0) ? _1404 : (isnan(_1404) ? 1.0 : min(_1404, 1.0));
        _1768 = (((_1814 * cbLight._m0[_1779].x) * _1820) * _1821) + _1685;
        _1770 = (((_1814 * cbLight._m0[_1779].y) * _1820) * _1821) + _1687;
        _1772 = (((_1814 * cbLight._m0[_1779].z) * _1820) * _1821) + _1689;
    }
    float _1955;
    float _1957;
    float _1959;
    float _1961;
    float _1963;
    float _1965;
    if (_1385.y == 0u)
    {
        float _1896 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1897 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1896;
        float _1898 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1896;
        float _1899 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1896;
        uvec4 _1911 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1912 = _1911.x;
        uint _1923 = uint((float(_1911.y) * floor(float(uint(cbSceneParam._m0[85u].y * _310) / _1912))) + floor(float(uint(cbSceneParam._m0[85u].x * _309) / _1912)));
        float _1933 = (log2(_1899 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1934 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
        uint _1937 = uint(isnan(14.0) ? _1934 : (isnan(_1934) ? 14.0 : min(_1934, 14.0)));
        uvec4 _1942 = texelFetch(g_lightClusterGridBuffer, int(((_1937 << 2u) + (_1923 << 6u)) >> 2u));
        uint _1943 = _1942.x;
        uint _1944 = _1911.z;
        float _2062;
        float _2064;
        float _2066;
        float _2068;
        float _2070;
        float _2072;
        if (((((1u << ((_1944 >> 4u) & 15u)) + 4294967295u) & _1943) == 0u) || ((_1944 & 240u) == 0u))
        {
            _2062 = 0.0;
            _2064 = 0.0;
            _2066 = 0.0;
            _2068 = 0.0;
            _2070 = 0.0;
            _2072 = 0.0;
        }
        else
        {
            float _2063;
            float _2065;
            float _2067;
            float _2069;
            float _2071;
            float _2073;
            float _2204 = 0.0;
            float _2205 = 0.0;
            float _2206 = 0.0;
            float _2207 = 0.0;
            float _2208 = 0.0;
            float _2209 = 0.0;
            uint _2210 = 0u;
            uint _2219;
            bool _2220;
            for (;;)
            {
                _2219 = texelFetch(g_lightClassification, int((((_1937 << 5u) + (_1923 << 9u)) + (_2210 << 2u)) >> 2u)).x;
                _2220 = _2219 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2220)
                {
                    frontier_phi_63_pred = _2209;
                    frontier_phi_63_pred_1 = _2208;
                    frontier_phi_63_pred_2 = _2207;
                    frontier_phi_63_pred_3 = _2206;
                    frontier_phi_63_pred_4 = _2205;
                    frontier_phi_63_pred_5 = _2204;
                }
                else
                {
                    float _2328;
                    float _2329;
                    float _2330;
                    float _2331;
                    float _2332;
                    float _2333;
                    uint _2334;
                    _2328 = _2204;
                    _2329 = _2205;
                    _2330 = _2206;
                    _2331 = _2207;
                    _2332 = _2208;
                    _2333 = _2209;
                    _2334 = _2219;
                    float _2260;
                    float _2261;
                    float _2262;
                    float _2263;
                    float _2264;
                    float _2265;
                    for (;;)
                    {
                        uint _2338 = uint(findLSB(_2334)) + (_2210 << 5u);
                        uint _2335 = (_2334 + 4294967295u) & _2334;
                        uint _2340 = _2338 * 48u;
                        vec4 _2354 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2340)).x, texelFetch(g_PointLightRenderingBuffer, int(_2340 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2340 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2340 + 3u)).x));
                        uint _2360 = (_2338 * 48u) + 4u;
                        vec4 _2373 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2360)).x, texelFetch(g_PointLightRenderingBuffer, int(_2360 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2360 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2360 + 3u)).x));
                        uint _2379 = (_2338 * 48u) + 8u;
                        vec3 _2390 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2379)).x, texelFetch(g_PointLightRenderingBuffer, int(_2379 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2379 + 2u)).x));
                        float _2394 = _2354.x - _1897;
                        float _2395 = _2354.y - _1898;
                        float _2396 = _2354.z - _1899;
                        float _2397 = dot(vec3(_2394, _2395, _2396), vec3(_2394, _2395, _2396));
                        float _2400 = inversesqrt(_2397);
                        float _2409 = 1.0 - (_2397 * _2354.w);
                        float _3500 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
                        float _2410 = isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0));
                        float _2411 = sqrt(_2397) * _2373.w;
                        float _2414 = 1.39999997615814208984375 / (_2411 + 1.39999997615814208984375);
                        float _2415 = _2414 * _2414;
                        float _2418 = ((1.0 - _2415) * dot(vec3(_331, _334, _337), vec3(_2400 * _2394, _2400 * _2395, _2400 * _2396))) + _2415;
                        float _2421 = _2411 * _2411;
                        float _2425 = ((isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0))) * _2410) / ((_2421 * 0.699999988079071044921875) + 1.0);
                        float _2429 = (-0.0) - _1897;
                        float _2430 = (-0.0) - _1898;
                        float _2431 = (-0.0) - _1899;
                        float _2435 = inversesqrt(dot(vec3(_2429, _2430, _2431), vec3(_2429, _2430, _2431)));
                        float _2439 = dot(vec3(_331, _334, _337), vec3(_2435 * _2429, _2435 * _2430, _2435 * _2431));
                        float _3516 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
                        float _3527 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
                        float _2443 = isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0));
                        float _2447 = (0.5 / (((isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0))) + 9.9999999392252902907785028219223e-09) + _2443)) * _2443;
                        float _3538 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
                        float _2456 = (((isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0))) * 3.1415927410125732421875) / ((_2421 * 2.1991131305694580078125) + 3.141590118408203125)) * _2410;
                        _2263 = (_2425 * _2373.x) + _2331;
                        _2264 = (_2425 * _2373.y) + _2332;
                        _2265 = (_2425 * _2373.z) + _2333;
                        _2260 = (_2456 * _2390.x) + _2328;
                        _2261 = (_2456 * _2390.y) + _2329;
                        _2262 = (_2456 * _2390.z) + _2330;
                        if (_2335 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2328 = _2260;
                            _2329 = _2261;
                            _2330 = _2262;
                            _2331 = _2263;
                            _2332 = _2264;
                            _2333 = _2265;
                            _2334 = _2335;
                        }
                    }
                    frontier_phi_63_pred = _2265;
                    frontier_phi_63_pred_1 = _2264;
                    frontier_phi_63_pred_2 = _2263;
                    frontier_phi_63_pred_3 = _2262;
                    frontier_phi_63_pred_4 = _2261;
                    frontier_phi_63_pred_5 = _2260;
                }
                _2073 = frontier_phi_63_pred;
                _2071 = frontier_phi_63_pred_1;
                _2069 = frontier_phi_63_pred_2;
                _2067 = frontier_phi_63_pred_3;
                _2065 = frontier_phi_63_pred_4;
                _2063 = frontier_phi_63_pred_5;
                uint _2211 = _2210 + 1u;
                if (_2211 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2204 = _2063;
                    _2205 = _2065;
                    _2206 = _2067;
                    _2207 = _2069;
                    _2208 = _2071;
                    _2209 = _2073;
                    _2210 = _2211;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2062 = _2063;
            _2064 = _2065;
            _2066 = _2067;
            _2068 = _2069;
            _2070 = _2071;
            _2072 = _2073;
        }
        uvec4 _2076 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2077 = _2076.z;
        uint _2079 = (_2077 >> 8u) & 15u;
        float _2175;
        float _2177;
        float _2179;
        float _2181;
        float _2183;
        float _2185;
        if (((4294967295u << _2079) & _1943) == 0u)
        {
            _2175 = _2062;
            _2177 = _2064;
            _2179 = _2066;
            _2181 = _2068;
            _2183 = _2070;
            _2185 = _2072;
        }
        else
        {
            float _2200 = inversesqrt(dot(vec3(_1897, _1898, _1899), vec3(_1897, _1898, _1899)));
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2079 < ((_2077 >> 12u) & 15u))
            {
                float _2176;
                float _2178;
                float _2180;
                float _2182;
                float _2184;
                float _2186;
                float _2311 = _2062;
                float _2312 = _2064;
                float _2313 = _2066;
                float _2314 = _2068;
                float _2315 = _2070;
                float _2316 = _2072;
                uint _2317 = _2079;
                uint _2326;
                bool _2327;
                for (;;)
                {
                    _2326 = texelFetch(g_lightClassification, int((((_1937 << 5u) + (_1923 << 9u)) + (_2317 << 2u)) >> 2u)).x;
                    _2327 = _2326 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2327)
                    {
                        frontier_phi_69_pred = _2316;
                        frontier_phi_69_pred_1 = _2315;
                        frontier_phi_69_pred_2 = _2314;
                        frontier_phi_69_pred_3 = _2313;
                        frontier_phi_69_pred_4 = _2312;
                        frontier_phi_69_pred_5 = _2311;
                    }
                    else
                    {
                        float _2461;
                        float _2462;
                        float _2463;
                        float _2464;
                        float _2465;
                        float _2466;
                        float _2713;
                        float _2714;
                        float _2715;
                        float _2716;
                        float _2717;
                        float _2718;
                        float _2474 = _2311;
                        float _2475 = _2312;
                        float _2476 = _2313;
                        float _2477 = _2314;
                        float _2478 = _2315;
                        float _2479 = _2316;
                        uint _2480 = _2326;
                        uint _2481;
                        vec4 _2506;
                        float _2507;
                        vec4 _2522;
                        vec3 _2534;
                        vec4 _2550;
                        vec4 _2566;
                        float _2613;
                        bool _2614;
                        for (;;)
                        {
                            uint _2491 = ((_2317 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2480));
                            _2481 = (_2480 + 4294967295u) & _2480;
                            uint _2493 = _2491 * 40u;
                            _2506 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2493)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2493 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2493 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2493 + 3u)).x));
                            _2507 = _2506.w;
                            uint _2509 = (_2491 * 40u) + 4u;
                            _2522 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2509)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2509 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2509 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2509 + 3u)).x));
                            uint _2524 = (_2491 * 40u) + 8u;
                            _2534 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2524)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2524 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2524 + 2u)).x));
                            uint _2537 = (_2491 * 40u) + 16u;
                            _2550 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2537)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2537 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2537 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2537 + 3u)).x));
                            uint _2553 = (_2491 * 40u) + 20u;
                            _2566 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2553)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2553 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2553 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2553 + 3u)).x));
                            uint _2569 = (_2491 * 40u) + 24u;
                            vec4 _2582 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2569)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2569 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2569 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2569 + 3u)).x));
                            uint _2588 = (_2491 * 40u) + 28u;
                            vec4 _2601 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2588)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2588 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2588 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2588 + 3u)).x));
                            _2613 = fma(_1899, _2601.z, fma(_1898, _2601.y, _2601.x * _1897)) + _2601.w;
                            _2614 = !((fma(_1899, _2582.z, fma(_1898, _2582.y, _2582.x * _1897)) + _2582.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2614)
                            {
                                float _2641 = _2506.x - _1897;
                                float _2642 = _2506.y - _1898;
                                float _2643 = _2506.z - _1899;
                                float _2644 = dot(vec3(_2641, _2642, _2643), vec3(_2641, _2642, _2643));
                                float _2647 = inversesqrt(_2644);
                                float _2648 = _2647 * _2641;
                                float _2649 = _2647 * _2642;
                                float _2650 = _2647 * _2643;
                                float _2654 = 1.0 - (_2644 / (_2507 * _2507));
                                float _3549 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
                                float _2655 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
                                float _2659 = sqrt(_2644) * _2522.w;
                                float _2661 = 1.39999997615814208984375 / (_2659 + 1.39999997615814208984375);
                                float _2662 = _2661 * _2661;
                                float _2663 = 1.0 - _2662;
                                float _2665 = (_2663 * dot(vec3(_2648, _2649, _2650), vec3(_331, _334, _337))) + _2662;
                                float _2668 = _2659 * _2659;
                                float _2672 = (fma(_1899, _2550.z, fma(_1898, _2550.y, _2550.x * _1897)) + _2550.w) / _2613;
                                float _2673 = (fma(_1899, _2566.z, fma(_1898, _2566.y, _2566.x * _1897)) + _2566.w) / _2613;
                                float _2677 = 1.0 - dot(vec2(_2672, _2673), vec2(_2672, _2673));
                                float _3565 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
                                float _2678 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
                                float _2679 = _2678 * (((isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0))) * _2655) / ((_2668 * 0.699999988079071044921875) + 1.0));
                                float _2689 = dot(vec3(_331, _334, _337), vec3((-0.0) - (_1897 * _2200), (-0.0) - (_1898 * _2200), (-0.0) - (_1899 * _2200)));
                                float _3576 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
                                float _2697 = (_2663 * dot(vec3(_331, _334, _337), vec3(_2648, _2649, _2650))) + _2662;
                                float _3587 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
                                float _2698 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
                                float _2702 = (0.5 / (((isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0))) + 9.9999999392252902907785028219223e-09) + _2698)) * _2698;
                                float _3598 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0));
                                float _2709 = (_2678 * _2655) * (((isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0))) * 3.1415927410125732421875) / ((_2668 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_75_pred = _2679 * _2522.z;
                                frontier_phi_75_pred_1 = _2679 * _2522.y;
                                frontier_phi_75_pred_2 = _2679 * _2522.x;
                                frontier_phi_75_pred_3 = _2709 * _2534.z;
                                frontier_phi_75_pred_4 = _2709 * _2534.y;
                                frontier_phi_75_pred_5 = _2709 * _2534.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _2718 = frontier_phi_75_pred;
                            _2717 = frontier_phi_75_pred_1;
                            _2716 = frontier_phi_75_pred_2;
                            _2715 = frontier_phi_75_pred_3;
                            _2714 = frontier_phi_75_pred_4;
                            _2713 = frontier_phi_75_pred_5;
                            _2464 = _2716 + _2477;
                            _2465 = _2717 + _2478;
                            _2466 = _2718 + _2479;
                            _2461 = _2713 + _2474;
                            _2462 = _2714 + _2475;
                            _2463 = _2715 + _2476;
                            if (_2481 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2474 = _2461;
                                _2475 = _2462;
                                _2476 = _2463;
                                _2477 = _2464;
                                _2478 = _2465;
                                _2479 = _2466;
                                _2480 = _2481;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2466;
                        frontier_phi_69_pred_1 = _2465;
                        frontier_phi_69_pred_2 = _2464;
                        frontier_phi_69_pred_3 = _2463;
                        frontier_phi_69_pred_4 = _2462;
                        frontier_phi_69_pred_5 = _2461;
                    }
                    _2186 = frontier_phi_69_pred;
                    _2184 = frontier_phi_69_pred_1;
                    _2182 = frontier_phi_69_pred_2;
                    _2180 = frontier_phi_69_pred_3;
                    _2178 = frontier_phi_69_pred_4;
                    _2176 = frontier_phi_69_pred_5;
                    uint _2318 = _2317 + 1u;
                    if (_2318 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2311 = _2176;
                        _2312 = _2178;
                        _2313 = _2180;
                        _2314 = _2182;
                        _2315 = _2184;
                        _2316 = _2186;
                        _2317 = _2318;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2186;
                frontier_phi_57_58_ladder_1 = _2184;
                frontier_phi_57_58_ladder_2 = _2182;
                frontier_phi_57_58_ladder_3 = _2180;
                frontier_phi_57_58_ladder_4 = _2178;
                frontier_phi_57_58_ladder_5 = _2176;
            }
            else
            {
                frontier_phi_57_58_ladder = _2072;
                frontier_phi_57_58_ladder_1 = _2070;
                frontier_phi_57_58_ladder_2 = _2068;
                frontier_phi_57_58_ladder_3 = _2066;
                frontier_phi_57_58_ladder_4 = _2064;
                frontier_phi_57_58_ladder_5 = _2062;
            }
            _2175 = frontier_phi_57_58_ladder_5;
            _2177 = frontier_phi_57_58_ladder_4;
            _2179 = frontier_phi_57_58_ladder_3;
            _2181 = frontier_phi_57_58_ladder_2;
            _2183 = frontier_phi_57_58_ladder_1;
            _2185 = frontier_phi_57_58_ladder;
        }
        float _2190 = isnan(1.0) ? _376 : (isnan(_376) ? 1.0 : min(_376, 1.0));
        _1955 = (_2190 * _2181) + _1519;
        _1957 = (_2190 * _2183) + _1521;
        _1959 = (_2190 * _2185) + _1523;
        _1961 = ((_2175 * 0.039999999105930328369140625) * _2190) + _1768;
        _1963 = ((_2177 * 0.039999999105930328369140625) * _2190) + _1770;
        _1965 = ((_2179 * 0.039999999105930328369140625) * _2190) + _1772;
    }
    else
    {
        _1955 = _1519;
        _1957 = _1521;
        _1959 = _1523;
        _1961 = _1768;
        _1963 = _1770;
        _1965 = _1772;
    }
    uint _1971 = _352 + uint(cbMatDynParam._m0[0u].w);
    float _3614 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    float _3625 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _3636 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    float _1996 = (((isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0))) * (_1955 + ((isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0))) * _376))) + ((_1961 + ((isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0))) * _1155)) * cbPerFrame._m0[3u].x)) + ((_208.x * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_1971].x);
    float _1998 = (((_208.y * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_1971].y) + ((_1963 + ((isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0))) * _1155)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0))) * (_1957 + ((isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0))) * _376)));
    float _2000 = (((_208.z * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_1971].z) + ((_1965 + ((isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0))) * _1155)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0))) * (_1959 + ((isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0))) * _376)));
    uint _2004 = _350 + 6u;
    float _2012 = _309 / cbSceneParam._m0[86u].x;
    float _2013 = _310 / cbSceneParam._m0[86u].y;
    vec4 _2027 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2012, _2013, (log2((isnan(cbSceneParam._m0[77u].w) ? _242 : (isnan(_242) ? cbSceneParam._m0[77u].w : min(_242, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2029 = _2027.x;
    float _2030 = _2027.y;
    float _2031 = _2027.z;
    float _2032 = _2027.w;
    float _2124;
    float _2126;
    float _2128;
    float _2130;
    if (_242 > cbSceneParam._m0[78u].w)
    {
        float _2087 = isnan(_242) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _242 : min(cbSceneParam._m0[80u].w, _242));
        float _2088 = _2087 / _242;
        float _2099 = _2088 * _294;
        float _2100 = _295 * _2088;
        float _2101 = (-0.0) - _2100;
        float _2102 = _2088 * _296;
        float _2104 = (cbSceneParam._m0[77u].w * _2101) / _2087;
        float _2105 = _2104 + cbSceneParam._m0[79u].w;
        float _2106 = cbSceneParam._m0[79u].w - _2100;
        float _2112 = sqrt(((_2099 * _2099) + (_2100 * _2100)) + (_2102 * _2102));
        float _2115 = (1.0 - (cbSceneParam._m0[77u].w / _2087)) * _2112;
        float _2120 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2122 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2273;
        if (abs((_2101 - _2104) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2273 = ((((_2105 > 0.0) ? exp2(_2120 * _2105) : (2.0 - exp2(_2122 * _2105))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2115;
        }
        else
        {
            float _2233 = 1.0 / cbSceneParam._m0[80u].x;
            float _2234 = isnan(_2106) ? _2105 : (isnan(_2105) ? _2106 : max(_2105, _2106));
            float _2235 = isnan(_2106) ? _2105 : (isnan(_2105) ? _2106 : min(_2105, _2106));
            float _2244 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : min(_2234, 0.0));
            float _2245 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : min(_2235, 0.0));
            _2273 = ((abs(_2112 / _2101) * cbSceneParam._m0[80u].y) * ((((_2244 - _2245) * 2.0) - ((exp2(_2120 * (isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0)))) - exp2(_2120 * (isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0))))) * _2233)) - ((exp2(_2122 * _2244) - exp2(_2122 * _2245)) * _2233))) + (_2115 * cbSceneParam._m0[80u].z);
        }
        vec4 _2275 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2012, _2013, 1.0), 0.0);
        float _2284 = exp2((_2273 * (-1.44269502162933349609375)) * (1.0 - _2275.w));
        float _2285 = log2(_2284);
        float _2301 = log2(_2032);
        _2124 = (exp2(_2301 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2285 * cbSceneParam._m0[78u].x)) * _2275.x) / cbSceneParam._m0[78u].x)) + _2029;
        _2126 = (exp2(_2301 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2285 * cbSceneParam._m0[78u].y)) * _2275.y) / cbSceneParam._m0[78u].y)) + _2030;
        _2128 = (exp2(_2301 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2285 * cbSceneParam._m0[78u].z)) * _2275.z) / cbSceneParam._m0[78u].z)) + _2031;
        _2130 = _2284 * _2032;
    }
    else
    {
        _2124 = _2029;
        _2126 = _2030;
        _2128 = _2031;
        _2130 = _2032;
    }
    float _2142 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2143 = _2142 == 3.0;
    float _2145 = log2(_2130);
    float _2152 = exp2(_2145 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0)));
    float _2153 = exp2(_2145 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0)));
    float _2154 = exp2(_2145 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0)));
    float _2163 = (_2142 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2163 * (_2143 ? _2152 : (_2152 + (cbSceneParam._m0[72u].w * _2124)));
    SV_Target.y = _2163 * (_2143 ? _2153 : (_2153 + (cbSceneParam._m0[72u].w * _2126)));
    SV_Target.z = _2163 * (_2143 ? _2154 : (_2154 + (cbSceneParam._m0[72u].w * _2128)));
    SV_Target.w = cbInstanceData._m0[_2004].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2004].w;
}


