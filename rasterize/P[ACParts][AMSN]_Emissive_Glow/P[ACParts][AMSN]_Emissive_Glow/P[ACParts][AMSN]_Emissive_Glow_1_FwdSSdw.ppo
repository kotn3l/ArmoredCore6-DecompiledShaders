#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_AMSN_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_AMSN_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_AMSN_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _826;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _185 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _192 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _222 = texture(sampler2D(P_ACParts_AMSN_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _228 = _222.x * cbMtdParam._m0[9u].x;
    float _229 = _222.y * cbMtdParam._m0[9u].y;
    float _230 = _222.z * cbMtdParam._m0[9u].z;
    vec4 _242 = texture(sampler2D(P_ACParts_AMSN_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _246 = _242.z;
    float _250 = (_242.x * 2.0) + (-1.0);
    float _252 = (_242.y * 2.0) + (-1.0);
    float _253 = dot(vec2(_250, _252), vec2(_250, _252));
    float _3209 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _259 = sqrt(1.0 - (isnan(1.0) ? _3209 : (isnan(_3209) ? 1.0 : min(_3209, 1.0))));
    vec4 _281 = texture(sampler2D(P_ACParts_AMSN_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _288 = fma(_259, _192 * NORMAL.x, fma(_252, _199 * TANGENT.x, (_185 * _178) * _250));
    float _291 = fma(_259, _192 * NORMAL.y, fma(_252, _199 * TANGENT.y, (_185 * _179) * _250));
    float _294 = fma(_259, _192 * NORMAL.z, fma(_252, _199 * TANGENT.z, (_185 * _180) * _250));
    float _298 = inversesqrt(dot(vec3(_288, _291, _294), vec3(_288, _291, _294)));
    float _299 = _298 * _288;
    float _300 = _298 * _291;
    float _301 = _298 * _294;
    float _3220 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    float _302 = isnan(1.0) ? _3220 : (isnan(_3220) ? 1.0 : min(_3220, 1.0));
    float _3231 = isnan(0.0) ? _228 : (isnan(_228) ? 0.0 : max(_228, 0.0));
    float _3242 = isnan(0.0) ? _229 : (isnan(_229) ? 0.0 : max(_229, 0.0));
    float _3253 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _321 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _362 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _372 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _362);
    float _373 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _362);
    float _374 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _362);
    float _378 = inversesqrt(dot(vec3(_372, _373, _374), vec3(_372, _373, _374)));
    float _379 = _372 * _378;
    float _380 = _373 * _378;
    float _381 = _374 * _378;
    float _387 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _388 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _409 = fma(_301, cbSceneParam._m0[5u].z, fma(_300, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _299));
    float _412 = fma(_301, cbSceneParam._m0[6u].z, fma(_300, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _299));
    float _415 = fma(_301, cbSceneParam._m0[7u].z, fma(_300, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _299));
    uint _428 = uint(roundEven(NORMAL.w)) * 13u;
    uint _430 = _428 + 9u;
    uint _431 = _430 + uint(cbMatDynParam._m0[0u].w);
    float _437 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3231 : (isnan(_3231) ? 1.0 : min(_3231, 1.0)))) * cbInstanceData._m0[_431].x;
    float _438 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3242 : (isnan(_3242) ? 1.0 : min(_3242, 1.0)))) * cbInstanceData._m0[_431].y;
    float _439 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3253 : (isnan(_3253) ? 1.0 : min(_3253, 1.0)))) * cbInstanceData._m0[_431].z;
    float _3264 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _440 = isnan(1.0) ? _3264 : (isnan(_3264) ? 1.0 : min(_3264, 1.0));
    float _3275 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _441 = isnan(1.0) ? _3275 : (isnan(_3275) ? 1.0 : min(_3275, 1.0));
    float _3286 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _442 = isnan(1.0) ? _3286 : (isnan(_3286) ? 1.0 : min(_3286, 1.0));
    vec4 _451 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _387, cbSceneParam._m0[86u].y * _388));
    float _454 = _451.x * TEXCOORD.z;
    float _455 = dot(vec3(_299, _300, _301), vec3(_379, _380, _381));
    float _458 = _455 * 2.0;
    float _462 = (_458 * _299) - _379;
    float _463 = (_458 * _300) - _380;
    float _464 = (_458 * _301) - _381;
    float _468 = abs(dot(vec3(_379, _380, _381), vec3(_299, _300, _301)));
    float _3297 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _470 = sqrt(_302);
    float _483 = exp2((_470 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3297 : (isnan(_3297) ? 1.0 : min(_3297, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_470 * 3.0));
    float _515 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _519 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _523 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _825;
    float _827;
    float _828;
    float _829;
    float _830;
    float _831;
    float _832;
    float _833;
    float _834;
    float _835;
    float _836;
    float _837;
    float _838;
    float _839;
    float _840;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _550 = fma(_523, cbModelParam._m0[26u].z, fma(_519, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _515));
        float _554 = fma(_523, cbModelParam._m0[27u].z, fma(_519, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _515));
        float _558 = fma(_523, cbModelParam._m0[28u].z, fma(_519, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _515));
        float _583 = _515 + _299;
        float _584 = _519 + _300;
        float _585 = _523 + _301;
        float _595 = fma(_585, cbModelParam._m0[26u].z, fma(_584, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _583)) - _550;
        float _596 = fma(_585, cbModelParam._m0[27u].z, fma(_584, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _583)) - _554;
        float _597 = fma(_585, cbModelParam._m0[28u].z, fma(_584, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _583)) - _558;
        float _601 = inversesqrt(dot(vec3(_595, _596, _597), vec3(_595, _596, _597)));
        float _614 = ((_601 * _595) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_550 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _615 = ((_601 * _596) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_554 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _616 = ((_601 * _597) / cbModelParam._m0[34u].z) + ((((((_558 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _619 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_614, _615, _616), 0.0);
        vec4 _626 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_614, _615, _616), 0.0);
        vec4 _633 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_614, _615, _616), 0.0);
        vec4 _640 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_614, _615, _616), 0.0);
        float _653 = exp2((_619.w + (-0.5)) * 20.0) * 2.0;
        float _654 = _653 * (_619.x + (-0.5));
        float _655 = _653 * (_619.y + (-0.5));
        float _656 = _653 * (_619.z + (-0.5));
        float _663 = exp2((_626.w + (-0.5)) * 20.0) * 2.0;
        float _664 = _663 * (_626.x + (-0.5));
        float _665 = _663 * (_626.y + (-0.5));
        float _666 = _663 * (_626.z + (-0.5));
        float _673 = exp2((_633.w + (-0.5)) * 20.0) * 2.0;
        float _674 = _673 * (_633.x + (-0.5));
        float _675 = _673 * (_633.y + (-0.5));
        float _676 = _673 * (_633.z + (-0.5));
        float _683 = exp2((_640.w + (-0.5)) * 20.0) * 2.0;
        float _684 = _683 * (_640.x + (-0.5));
        float _685 = _683 * (_640.y + (-0.5));
        float _686 = _683 * (_640.z + (-0.5));
        float _687 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
        float _688 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
        float _689 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
        float _690 = _654 * 0.5;
        float _691 = _664 * 0.5;
        float _692 = _674 * 0.5;
        float _693 = dot(vec3(_690, _691, _692), vec3(_690, _691, _692));
        float _698 = (_693 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_693);
        float _707 = (dot(vec3(_299, _300, _301), vec3(_698 * _690, _698 * _691, _698 * _692)) + 1.0) * 0.5;
        float _3323 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
        float _717 = sqrt(((_691 * _691) + (_690 * _690)) + (_692 * _692)) / (_687 + 9.9999997473787516355514526367188e-06);
        float _3334 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
        float _718 = isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0));
        float _719 = _718 * 2.0;
        float _723 = (1.0 - _718) / (_718 + 1.0);
        float _3345 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
        float _724 = isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0));
        float _733 = ((((1.0 - _724) * (_719 + 2.0)) * exp2(log2(isnan(1.0) ? _3323 : (isnan(_3323) ? 1.0 : min(_3323, 1.0))) * (_719 + 1.0))) + _724) * _687;
        float _734 = _655 * 0.5;
        float _735 = _665 * 0.5;
        float _736 = _675 * 0.5;
        float _737 = dot(vec3(_734, _735, _736), vec3(_734, _735, _736));
        float _742 = (_737 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_737);
        float _750 = (dot(vec3(_299, _300, _301), vec3(_742 * _734, _742 * _735, _742 * _736)) + 1.0) * 0.5;
        float _3356 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        float _759 = sqrt(((_735 * _735) + (_734 * _734)) + (_736 * _736)) / (_688 + 9.9999997473787516355514526367188e-06);
        float _3367 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
        float _760 = isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0));
        float _761 = _760 * 2.0;
        float _765 = (1.0 - _760) / (_760 + 1.0);
        float _3378 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
        float _766 = isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0));
        float _775 = ((((1.0 - _766) * (_761 + 2.0)) * exp2(log2(isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0))) * (_761 + 1.0))) + _766) * _688;
        float _776 = _656 * 0.5;
        float _777 = _666 * 0.5;
        float _778 = _676 * 0.5;
        float _779 = dot(vec3(_776, _777, _778), vec3(_776, _777, _778));
        float _784 = (_779 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_779);
        float _792 = (dot(vec3(_299, _300, _301), vec3(_784 * _776, _784 * _777, _784 * _778)) + 1.0) * 0.5;
        float _3389 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _801 = sqrt(((_777 * _777) + (_776 * _776)) + (_778 * _778)) / (_689 + 9.9999997473787516355514526367188e-06);
        float _3400 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
        float _802 = isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0));
        float _803 = _802 * 2.0;
        float _807 = (1.0 - _802) / (_802 + 1.0);
        float _3411 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
        float _808 = isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0));
        float _817 = ((((1.0 - _808) * (_803 + 2.0)) * exp2(log2(isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0))) * (_803 + 1.0))) + _808) * _689;
        _825 = _656;
        _827 = _655;
        _828 = _654;
        _829 = _666;
        _830 = _665;
        _831 = _664;
        _832 = _676;
        _833 = _675;
        _834 = _674;
        _835 = _689;
        _836 = _688;
        _837 = _687;
        _838 = cbModelParam._m0[36u].z * (isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0)));
        _839 = cbModelParam._m0[36u].z * (isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0)));
        _840 = cbModelParam._m0[36u].z * (isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0)));
    }
    else
    {
        _825 = _826;
        _827 = _826;
        _828 = _826;
        _829 = _826;
        _830 = _826;
        _831 = _826;
        _832 = _826;
        _833 = _826;
        _834 = _826;
        _835 = _826;
        _836 = _826;
        _837 = _826;
        _838 = 0.0;
        _839 = 0.0;
        _840 = 0.0;
    }
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _866 = fma(_523, cbModelParam._m0[30u].z, fma(_519, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _515));
        float _870 = fma(_523, cbModelParam._m0[31u].z, fma(_519, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _515));
        float _874 = fma(_523, cbModelParam._m0[32u].z, fma(_519, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _515));
        float _897 = _515 + _299;
        float _898 = _519 + _300;
        float _899 = _523 + _301;
        float _909 = fma(_899, cbModelParam._m0[30u].z, fma(_898, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _897)) - _866;
        float _910 = fma(_899, cbModelParam._m0[31u].z, fma(_898, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _897)) - _870;
        float _911 = fma(_899, cbModelParam._m0[32u].z, fma(_898, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _897)) - _874;
        float _915 = inversesqrt(dot(vec3(_909, _910, _911), vec3(_909, _910, _911)));
        float _928 = ((_915 * _909) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_866 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _929 = ((_915 * _910) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_870 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _930 = ((_915 * _911) / cbModelParam._m0[35u].z) + ((((((_874 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _932 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_928, _929, _930), 0.0);
        vec4 _939 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_928, _929, _930), 0.0);
        vec4 _946 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_928, _929, _930), 0.0);
        vec4 _953 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_928, _929, _930), 0.0);
        float _965 = exp2((_932.w + (-0.5)) * 20.0) * 2.0;
        float _966 = _965 * (_932.x + (-0.5));
        float _967 = _965 * (_932.y + (-0.5));
        float _968 = _965 * (_932.z + (-0.5));
        float _975 = exp2((_939.w + (-0.5)) * 20.0) * 2.0;
        float _976 = _975 * (_939.x + (-0.5));
        float _977 = _975 * (_939.y + (-0.5));
        float _978 = _975 * (_939.z + (-0.5));
        float _985 = exp2((_946.w + (-0.5)) * 20.0) * 2.0;
        float _986 = _985 * (_946.x + (-0.5));
        float _987 = _985 * (_946.y + (-0.5));
        float _988 = _985 * (_946.z + (-0.5));
        float _995 = exp2((_953.w + (-0.5)) * 20.0) * 2.0;
        float _996 = _995 * (_953.x + (-0.5));
        float _997 = _995 * (_953.y + (-0.5));
        float _998 = _995 * (_953.z + (-0.5));
        float _999 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _1000 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _1001 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _1002 = _966 * 0.5;
        float _1003 = _976 * 0.5;
        float _1004 = _986 * 0.5;
        float _1005 = dot(vec3(_1002, _1003, _1004), vec3(_1002, _1003, _1004));
        float _1010 = (_1005 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1005);
        float _1018 = (dot(vec3(_299, _300, _301), vec3(_1010 * _1002, _1010 * _1003, _1010 * _1004)) + 1.0) * 0.5;
        float _3452 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1027 = sqrt(((_1003 * _1003) + (_1002 * _1002)) + (_1004 * _1004)) / (_999 + 9.9999997473787516355514526367188e-06);
        float _3463 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1028 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
        float _1029 = _1028 * 2.0;
        float _1033 = (1.0 - _1028) / (_1028 + 1.0);
        float _3474 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1034 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
        float _1043 = ((((1.0 - _1034) * (_1029 + 2.0)) * exp2(log2(isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0))) * (_1029 + 1.0))) + _1034) * _999;
        float _1044 = _967 * 0.5;
        float _1045 = _977 * 0.5;
        float _1046 = _987 * 0.5;
        float _1047 = dot(vec3(_1044, _1045, _1046), vec3(_1044, _1045, _1046));
        float _1052 = (_1047 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1047);
        float _1060 = (dot(vec3(_299, _300, _301), vec3(_1052 * _1044, _1052 * _1045, _1052 * _1046)) + 1.0) * 0.5;
        float _3485 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1069 = sqrt(((_1045 * _1045) + (_1044 * _1044)) + (_1046 * _1046)) / (_1000 + 9.9999997473787516355514526367188e-06);
        float _3496 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
        float _1071 = _1070 * 2.0;
        float _1075 = (1.0 - _1070) / (_1070 + 1.0);
        float _3507 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
        float _1085 = ((((1.0 - _1076) * (_1071 + 2.0)) * exp2(log2(isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0))) * (_1071 + 1.0))) + _1076) * _1000;
        float _1086 = _968 * 0.5;
        float _1087 = _978 * 0.5;
        float _1088 = _988 * 0.5;
        float _1089 = dot(vec3(_1086, _1087, _1088), vec3(_1086, _1087, _1088));
        float _1094 = (_1089 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1089);
        float _1102 = (dot(vec3(_299, _300, _301), vec3(_1094 * _1086, _1094 * _1087, _1094 * _1088)) + 1.0) * 0.5;
        float _3518 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1111 = sqrt(((_1087 * _1087) + (_1086 * _1086)) + (_1088 * _1088)) / (_1001 + 9.9999997473787516355514526367188e-06);
        float _3529 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1112 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
        float _1113 = _1112 * 2.0;
        float _1117 = (1.0 - _1112) / (_1112 + 1.0);
        float _3540 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1118 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
        float _1127 = ((((1.0 - _1118) * (_1113 + 2.0)) * exp2(log2(isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0))) * (_1113 + 1.0))) + _1118) * _1001;
        _1135 = _968;
        _1136 = _967;
        _1137 = _966;
        _1138 = _978;
        _1139 = _977;
        _1140 = _976;
        _1141 = _988;
        _1142 = _987;
        _1143 = _986;
        _1144 = _1001;
        _1145 = _1000;
        _1146 = _999;
        _1147 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0)));
        _1148 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0)));
        _1149 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0)));
    }
    else
    {
        _1135 = _826;
        _1136 = _826;
        _1137 = _826;
        _1138 = _826;
        _1139 = _826;
        _1140 = _826;
        _1141 = _826;
        _1142 = _826;
        _1143 = _826;
        _1144 = _826;
        _1145 = _826;
        _1146 = _826;
        _1147 = 0.0;
        _1148 = 0.0;
        _1149 = 0.0;
    }
    float _1159 = (cbModelParam._m0[1u].x * (_1147 - _838)) + _838;
    float _1160 = (cbModelParam._m0[1u].x * (_1148 - _839)) + _839;
    float _1161 = (cbModelParam._m0[1u].x * (_1149 - _840)) + _840;
    float _1182 = fma(_1161, cbSceneParam._m0[89u].z, fma(_1160, cbSceneParam._m0[89u].y, _1159 * cbSceneParam._m0[89u].x));
    float _1185 = fma(_1161, cbSceneParam._m0[90u].z, fma(_1160, cbSceneParam._m0[90u].y, _1159 * cbSceneParam._m0[90u].x));
    float _1188 = fma(_1161, cbSceneParam._m0[91u].z, fma(_1160, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1159));
    float _1203 = _462 * 0.5;
    float _1204 = _463 * 0.5;
    float _1205 = _464 * 0.5;
    float _1206 = dot(vec4(_1203, _1204, _1205, 1.0), vec4(_1137, _1140, _1143, _1146));
    float _1209 = dot(vec4(_1203, _1204, _1205, 1.0), vec4(_1136, _1139, _1142, _1145));
    float _1212 = dot(vec4(_1203, _1204, _1205, 1.0), vec4(_1135, _1138, _1141, _1144));
    float _1246;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1219 = dot(vec4(_1203, _1204, _1205, 1.0), vec4(_825, _829, _832, _835));
        float _1223 = dot(vec4(_1203, _1204, _1205, 1.0), vec4(_827, _830, _833, _836));
        float _1227 = dot(vec4(_1203, _1204, _1205, 1.0), vec4(_828, _831, _834, _837));
        float _1234 = dot(vec4(cbModelParam._m0[39u]), vec4(_1203, _1204, _1205, 1.0));
        _1246 = dot(vec3(isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0)), isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0)), isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1234) ? 0.0 : (isnan(0.0) ? _1234 : max(0.0, _1234))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1246 = 1.0;
    }
    float _1257;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1248 = dot(vec4(cbModelParam._m0[40u]), vec4(_1203, _1204, _1205, 1.0));
        _1257 = dot(vec3(isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0)), isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0)), isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1248) ? 0.0 : (isnan(0.0) ? _1248 : max(0.0, _1248))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1257 = 1.0;
    }
    float _1261 = (_1257 * cbModelParam._m0[1u].x) + (_1246 * (1.0 - cbModelParam._m0[1u].x));
    float _1271 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _302);
    float _1272 = isnan(_1271) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1271 : min(cbModelParam._m0[25u].z, _1271));
    float _1354;
    float _1356;
    float _1358;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1321 = fma(_523, cbModelParam._m0[13u].z, fma(_519, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _515)) + cbModelParam._m0[13u].w;
        float _1325 = fma(_523, cbModelParam._m0[14u].z, fma(_519, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _515)) + cbModelParam._m0[14u].w;
        float _1329 = fma(_523, cbModelParam._m0[15u].z, fma(_519, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _515)) + cbModelParam._m0[15u].w;
        float _1332 = fma(_464, cbModelParam._m0[13u].z, fma(_463, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _462));
        float _1335 = fma(_464, cbModelParam._m0[14u].z, fma(_463, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _462));
        float _1338 = fma(_464, cbModelParam._m0[15u].z, fma(_463, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _462));
        float _1366;
        if (_1332 > 0.0)
        {
            _1366 = abs((1.0 - _1321) / _1332);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1332 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1321 + 1.0) / _1332);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1366 = frontier_phi_14_12_ladder;
        }
        float _1592;
        if (_1335 > 0.0)
        {
            _1592 = abs((1.0 - _1325) / _1335);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1335 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1325 + 1.0) / _1335);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1592 = frontier_phi_23_19_ladder;
        }
        float _1838;
        if (_1338 > 0.0)
        {
            _1838 = abs((1.0 - _1329) / _1338);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1338 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1329 + 1.0) / _1338);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1838 = frontier_phi_35_30_ladder;
        }
        float _1840 = isnan(_1592) ? _1366 : (isnan(_1366) ? _1592 : min(_1366, _1592));
        float _1841 = isnan(_1838) ? _1840 : (isnan(_1840) ? _1838 : min(_1840, _1838));
        float _1845 = (_1841 * _1332) + _1321;
        float _1846 = (_1841 * _1335) + _1325;
        float _1847 = (_1841 * _1338) + _1329;
        float _1848 = _1841 * 9.9999997473787516355514526367188e-05;
        float _1850 = (-1.0) - _1848;
        float _1852 = _1848 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1847 > _1852) || ((_1847 < _1850) || ((_1846 > _1852) || ((_1846 < _1850) || ((_1845 < _1850) || (_1845 > _1852))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1971 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1847, cbModelParam._m0[9u].z, fma(_1846, cbModelParam._m0[9u].y, _1845 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1847, cbModelParam._m0[10u].z, fma(_1846, cbModelParam._m0[10u].y, _1845 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1847, cbModelParam._m0[11u].z, fma(_1846, cbModelParam._m0[11u].y, _1845 * cbModelParam._m0[11u].x))), _1272);
            frontier_phi_13_35_ladder = _1971.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1971.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1971.x * cbModelParam._m0[1u].y;
        }
        _1354 = frontier_phi_13_35_ladder_2;
        _1356 = frontier_phi_13_35_ladder_1;
        _1358 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1342 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_462, _463, _464), _1272);
        _1354 = _1342.x * cbModelParam._m0[1u].y;
        _1356 = _1342.y * cbModelParam._m0[1u].y;
        _1358 = _1342.z * cbModelParam._m0[1u].y;
    }
    float _1362 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _302);
    float _1363 = isnan(_1362) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1362 : min(cbModelParam._m0[25u].w, _1362));
    float _1456;
    float _1458;
    float _1460;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1420 = fma(_523, cbModelParam._m0[21u].z, fma(_519, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _515)) + cbModelParam._m0[21u].w;
        float _1424 = fma(_523, cbModelParam._m0[22u].z, fma(_519, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _515)) + cbModelParam._m0[22u].w;
        float _1428 = fma(_523, cbModelParam._m0[23u].z, fma(_519, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _515)) + cbModelParam._m0[23u].w;
        float _1431 = fma(_464, cbModelParam._m0[21u].z, fma(_463, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _462));
        float _1434 = fma(_464, cbModelParam._m0[22u].z, fma(_463, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _462));
        float _1437 = fma(_464, cbModelParam._m0[23u].z, fma(_463, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _462));
        float _1597;
        if (_1431 > 0.0)
        {
            _1597 = abs((1.0 - _1420) / _1431);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1431 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1420 + 1.0) / _1431);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1597 = frontier_phi_25_21_ladder;
        }
        float _1865;
        if (_1434 > 0.0)
        {
            _1865 = abs((1.0 - _1424) / _1434);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1434 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1424 + 1.0) / _1434);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1865 = frontier_phi_37_32_ladder;
        }
        float _2070;
        if (_1437 > 0.0)
        {
            _2070 = abs((1.0 - _1428) / _1437);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1437 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1428 + 1.0) / _1437);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2070 = frontier_phi_46_43_ladder;
        }
        float _2072 = isnan(_1865) ? _1597 : (isnan(_1597) ? _1865 : min(_1597, _1865));
        float _2073 = isnan(_2070) ? _2072 : (isnan(_2072) ? _2070 : min(_2072, _2070));
        float _2077 = (_2073 * _1431) + _1420;
        float _2078 = (_2073 * _1434) + _1424;
        float _2079 = (_2073 * _1437) + _1428;
        float _2080 = _2073 * 9.9999997473787516355514526367188e-05;
        float _2081 = (-1.0) - _2080;
        float _2083 = _2080 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2079 > _2083) || ((_2079 < _2081) || ((_2078 > _2083) || ((_2078 < _2081) || ((_2077 < _2081) || (_2077 > _2083))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2313 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2079, cbModelParam._m0[17u].z, fma(_2078, cbModelParam._m0[17u].y, _2077 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2079, cbModelParam._m0[18u].z, fma(_2078, cbModelParam._m0[18u].y, _2077 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2079, cbModelParam._m0[19u].z, fma(_2078, cbModelParam._m0[19u].y, _2077 * cbModelParam._m0[19u].x))), _1363);
            frontier_phi_22_46_ladder = _2313.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2313.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2313.x * cbModelParam._m0[1u].z;
        }
        _1456 = frontier_phi_22_46_ladder_2;
        _1458 = frontier_phi_22_46_ladder_1;
        _1460 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1440 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_462, _463, _464), _1363);
        _1456 = _1440.x * cbModelParam._m0[1u].z;
        _1458 = _1440.y * cbModelParam._m0[1u].z;
        _1460 = _1440.z * cbModelParam._m0[1u].z;
    }
    float _1472 = ((((1.0 - _483) * ((_470 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_483 * _470)) * _454;
    float _1473 = _1472 * ((cbModelParam._m0[1u].w * (_1456 - _1354)) + _1354);
    float _1474 = _1472 * ((cbModelParam._m0[1u].w * (_1458 - _1356)) + _1356);
    float _1475 = _1472 * ((cbModelParam._m0[1u].w * (_1460 - _1358)) + _1358);
    float _1478 = fma(_1475, cbSceneParam._m0[89u].z, fma(_1474, cbSceneParam._m0[89u].y, _1473 * cbSceneParam._m0[89u].x));
    float _1481 = fma(_1475, cbSceneParam._m0[90u].z, fma(_1474, cbSceneParam._m0[90u].y, _1473 * cbSceneParam._m0[90u].x));
    float _1484 = fma(_1475, cbSceneParam._m0[91u].z, fma(_1474, cbSceneParam._m0[91u].y, _1473 * cbSceneParam._m0[91u].x));
    vec4 _1492 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_387, _388));
    float _1494 = _1492.w;
    float _1506 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1494);
    float _1507 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1494);
    float _1508 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1494);
    uvec4 _1512 = floatBitsToUint(cbInstanceData._m0[_428 + 5u]);
    uint _1514 = _1512.x * 14u;
    uint _1515 = _1514 + 13u;
    float _1522 = _454 + (-1.0);
    float _1527 = (cbLight._m0[_1515].x * _1522) + 1.0;
    float _1528 = (cbLight._m0[_1515].y * _1522) + 1.0;
    float _1529 = (cbLight._m0[_1515].z * _1522) + 1.0;
    float _1530 = (cbLight._m0[_1515].w * _1522) + 1.0;
    uint _1531 = _1514 + 5u;
    float _1537 = isnan(1.0) ? _1528 : (isnan(_1528) ? 1.0 : min(_1528, 1.0));
    uint _1541 = _1514 + 4u;
    float _1551 = isnan(1.0) ? _1527 : (isnan(_1527) ? 1.0 : min(_1527, 1.0));
    uint _1555 = _1514 | 1u;
    float _1566 = dot(vec3(cbLight._m0[_1514].xyz), vec3(_299, _300, _301));
    float _1569 = dot(vec3(cbLight._m0[_1555].xyz), vec3(_299, _300, _301));
    float _3676 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
    float _3687 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
    float _1574 = (isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0))) * 0.3183098733425140380859375;
    float _1576 = (isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))) * 0.3183098733425140380859375;
    float _1583 = ((cbLight._m0[_1531].x * _1537) * _1576) + (((cbLight._m0[_1541].x * _1506) * _1551) * _1574);
    float _1584 = ((_1537 * cbLight._m0[_1531].y) * _1576) + (((cbLight._m0[_1541].y * _1507) * _1551) * _1574);
    float _1585 = ((_1537 * cbLight._m0[_1531].z) * _1576) + (((cbLight._m0[_1541].z * _1508) * _1551) * _1574);
    uvec4 _1589 = floatBitsToUint(cbLight._m0[_1514 + 12u]);
    bool _1591 = _1589.x == 0u;
    float _1602;
    float _1604;
    float _1606;
    if (_1591)
    {
        _1602 = _1583;
        _1604 = _1584;
        _1606 = _1585;
    }
    else
    {
        uint _1610 = _1514 + 6u;
        float _1626 = (dot(vec3(cbLight._m0[_1514 + 2u].xyz), vec3(_299, _300, _301)) * 0.5) + 0.5;
        float _1627 = _1626 * _1626;
        float _3698 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1628 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
        float _1629 = isnan(1.0) ? _1529 : (isnan(_1529) ? 1.0 : min(_1529, 1.0));
        _1602 = (((cbLight._m0[_1610].x * 0.3183098733425140380859375) * _1628) * _1629) + _1583;
        _1604 = (((cbLight._m0[_1610].y * 0.3183098733425140380859375) * _1628) * _1629) + _1584;
        _1606 = (((cbLight._m0[_1610].z * 0.3183098733425140380859375) * _1628) * _1629) + _1585;
    }
    bool _1609 = _1589.y == 0u;
    float _1647;
    float _1649;
    float _1651;
    if (_1609)
    {
        _1647 = _1602;
        _1649 = _1604;
        _1651 = _1606;
    }
    else
    {
        uint _1809 = _1514 + 7u;
        float _1825 = (dot(vec3(cbLight._m0[_1514 + 3u].xyz), vec3(_299, _300, _301)) * 0.5) + 0.5;
        float _1826 = _1825 * _1825;
        float _3714 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
        float _1827 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
        float _1828 = isnan(1.0) ? _1530 : (isnan(_1530) ? 1.0 : min(_1530, 1.0));
        _1647 = (((cbLight._m0[_1809].x * 0.3183098733425140380859375) * _1827) * _1828) + _1602;
        _1649 = (((cbLight._m0[_1809].y * 0.3183098733425140380859375) * _1827) * _1828) + _1604;
        _1651 = (((cbLight._m0[_1809].z * 0.3183098733425140380859375) * _1827) * _1828) + _1606;
    }
    uint _1654 = _1514 + 8u;
    float _1667 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1514].w)) * _302) * 0.949999988079071044921875);
    float _1668 = _1667 * _1667;
    float _1669 = cbLight._m0[_1514].x + _379;
    float _1670 = cbLight._m0[_1514].y + _380;
    float _1671 = cbLight._m0[_1514].z + _381;
    float _1675 = inversesqrt(dot(vec3(_1669, _1670, _1671), vec3(_1669, _1670, _1671)));
    float _1676 = _1675 * _1669;
    float _1677 = _1675 * _1670;
    float _1678 = _1675 * _1671;
    float _1679 = dot(vec3(_299, _300, _301), vec3(cbLight._m0[_1514].xyz));
    float _3730 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
    float _1682 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
    float _3741 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _1683 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
    float _1684 = dot(vec3(_299, _300, _301), vec3(_1676, _1677, _1678));
    float _3752 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
    float _1687 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
    float _1688 = dot(vec3(cbLight._m0[_1514].xyz), vec3(_1676, _1677, _1678));
    float _3763 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
    float _1692 = _1668 * _1668;
    float _1696 = ((_1687 * _1687) * (_1692 + (-1.0))) + 1.0;
    float _1707 = (exp2(log2(1.0 - (isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1708 = 1.0 - _1668;
    float _1719 = (0.5 / (((_1683 * ((_1682 * _1708) + _1668)) + 9.9999999392252902907785028219223e-09) + (((_1683 * _1708) + _1668) * _1682))) * _1682;
    float _3774 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
    float _1721 = (isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0))) * (_1692 / ((_1696 * _1696) * 3.141590118408203125));
    uint _1735 = _1514 + 9u;
    float _1746 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1555].w)) * _302) * 0.949999988079071044921875);
    float _1747 = _1746 * _1746;
    float _1748 = cbLight._m0[_1555].x + _379;
    float _1749 = cbLight._m0[_1555].y + _380;
    float _1750 = cbLight._m0[_1555].z + _381;
    float _1754 = inversesqrt(dot(vec3(_1748, _1749, _1750), vec3(_1748, _1749, _1750)));
    float _1755 = _1754 * _1748;
    float _1756 = _1754 * _1749;
    float _1757 = _1754 * _1750;
    float _1758 = dot(vec3(_299, _300, _301), vec3(cbLight._m0[_1555].xyz));
    float _3785 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
    float _1761 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
    float _1762 = dot(vec3(_299, _300, _301), vec3(_1755, _1756, _1757));
    float _3796 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
    float _1765 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
    float _1766 = dot(vec3(cbLight._m0[_1555].xyz), vec3(_1755, _1756, _1757));
    float _3807 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
    float _1770 = _1747 * _1747;
    float _1774 = ((_1765 * _1765) * (_1770 + (-1.0))) + 1.0;
    float _1783 = (exp2(log2(1.0 - (isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1784 = 1.0 - _1747;
    float _1794 = (0.5 / (((_1683 * ((_1761 * _1784) + _1747)) + 9.9999999392252902907785028219223e-09) + (((_1683 * _1784) + _1747) * _1761))) * _1761;
    float _3818 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
    float _1796 = (isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0))) * (_1770 / ((_1774 * _1774) * 3.141590118408203125));
    float _1806 = (((_1783 * cbLight._m0[_1735].x) * _1796) * _1537) + ((((cbLight._m0[_1654].x * _1506) * _1707) * _1721) * _1551);
    float _1807 = (((_1783 * cbLight._m0[_1735].y) * _1796) * _1537) + ((((cbLight._m0[_1654].y * _1507) * _1707) * _1721) * _1551);
    float _1808 = (((_1783 * cbLight._m0[_1735].z) * _1796) * _1537) + ((((cbLight._m0[_1654].z * _1508) * _1707) * _1721) * _1551);
    float _1870;
    float _1872;
    float _1874;
    if (_1591)
    {
        _1870 = _1806;
        _1872 = _1807;
        _1874 = _1808;
    }
    else
    {
        uint _1876 = _1514 + 2u;
        uint _1880 = _1514 + 10u;
        float _1894 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1876].w)) * _302) * 0.949999988079071044921875);
        float _1895 = _1894 * _1894;
        float _1896 = cbLight._m0[_1876].x + _379;
        float _1897 = cbLight._m0[_1876].y + _380;
        float _1898 = cbLight._m0[_1876].z + _381;
        float _1902 = inversesqrt(dot(vec3(_1896, _1897, _1898), vec3(_1896, _1897, _1898)));
        float _1903 = _1902 * _1896;
        float _1904 = _1902 * _1897;
        float _1905 = _1902 * _1898;
        float _1906 = dot(vec3(_299, _300, _301), vec3(cbLight._m0[_1876].xyz));
        float _3829 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
        float _1909 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
        float _1910 = dot(vec3(_299, _300, _301), vec3(_1903, _1904, _1905));
        float _3840 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
        float _1913 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
        float _1914 = dot(vec3(cbLight._m0[_1876].xyz), vec3(_1903, _1904, _1905));
        float _3851 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
        float _1918 = _1895 * _1895;
        float _1922 = ((_1913 * _1913) * (_1918 + (-1.0))) + 1.0;
        float _1931 = (exp2(log2(1.0 - (isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1932 = 1.0 - _1895;
        float _1942 = (0.5 / (((_1683 * ((_1909 * _1932) + _1895)) + 9.9999999392252902907785028219223e-09) + (((_1683 * _1932) + _1895) * _1909))) * _1909;
        float _3862 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
        float _1944 = (isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * (_1918 / ((_1922 * _1922) * 3.141590118408203125));
        float _1945 = isnan(1.0) ? _1529 : (isnan(_1529) ? 1.0 : min(_1529, 1.0));
        _1870 = (((_1931 * cbLight._m0[_1880].x) * _1944) * _1945) + _1806;
        _1872 = (((_1931 * cbLight._m0[_1880].y) * _1944) * _1945) + _1807;
        _1874 = (((_1931 * cbLight._m0[_1880].z) * _1944) * _1945) + _1808;
    }
    float _1980;
    float _1982;
    float _1984;
    if (_1609)
    {
        _1980 = _1870;
        _1982 = _1872;
        _1984 = _1874;
    }
    else
    {
        uint _1991 = _1514 + 3u;
        uint _1995 = _1514 + 11u;
        float _2009 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1991].w)) * _302) * 0.949999988079071044921875);
        float _2010 = _2009 * _2009;
        float _2011 = cbLight._m0[_1991].x + _379;
        float _2012 = cbLight._m0[_1991].y + _380;
        float _2013 = cbLight._m0[_1991].z + _381;
        float _2017 = inversesqrt(dot(vec3(_2011, _2012, _2013), vec3(_2011, _2012, _2013)));
        float _2018 = _2017 * _2011;
        float _2019 = _2017 * _2012;
        float _2020 = _2017 * _2013;
        float _2021 = dot(vec3(_299, _300, _301), vec3(cbLight._m0[_1991].xyz));
        float _3878 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
        float _2024 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _2025 = dot(vec3(_299, _300, _301), vec3(_2018, _2019, _2020));
        float _3889 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
        float _2028 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
        float _2029 = dot(vec3(cbLight._m0[_1991].xyz), vec3(_2018, _2019, _2020));
        float _3900 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
        float _2033 = _2010 * _2010;
        float _2037 = ((_2028 * _2028) * (_2033 + (-1.0))) + 1.0;
        float _2046 = (exp2(log2(1.0 - (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2047 = 1.0 - _2010;
        float _2057 = (0.5 / (((_1683 * ((_2024 * _2047) + _2010)) + 9.9999999392252902907785028219223e-09) + (((_1683 * _2047) + _2010) * _2024))) * _2024;
        float _3911 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
        float _2059 = (isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0))) * (_2033 / ((_2037 * _2037) * 3.141590118408203125));
        float _2060 = isnan(1.0) ? _1530 : (isnan(_1530) ? 1.0 : min(_1530, 1.0));
        _1980 = (((_2046 * cbLight._m0[_1995].x) * _2059) * _2060) + _1870;
        _1982 = (((_2046 * cbLight._m0[_1995].y) * _2059) * _2060) + _1872;
        _1984 = (((_2046 * cbLight._m0[_1995].z) * _2059) * _2060) + _1874;
    }
    float _2195;
    float _2197;
    float _2199;
    float _2201;
    float _2203;
    float _2205;
    if (_1512.y == 0u)
    {
        float _2135 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2136 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2135;
        float _2137 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2135;
        float _2138 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2135;
        uvec4 _2150 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2151 = _2150.x;
        uint _2162 = uint((float(_2150.y) * floor(float(uint(cbSceneParam._m0[85u].y * _388) / _2151))) + floor(float(uint(cbSceneParam._m0[85u].x * _387) / _2151)));
        float _2172 = (log2(_2138 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2173 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
        uint _2176 = uint(isnan(14.0) ? _2173 : (isnan(_2173) ? 14.0 : min(_2173, 14.0)));
        uvec4 _2181 = texelFetch(g_lightClusterGridBuffer, int(((_2176 << 2u) + (_2162 << 6u)) >> 2u));
        uint _2182 = _2181.x;
        uint _2183 = _2150.z;
        float _2318;
        float _2320;
        float _2322;
        float _2324;
        float _2326;
        float _2328;
        if (((((1u << ((_2183 >> 4u) & 15u)) + 4294967295u) & _2182) == 0u) || ((_2183 & 240u) == 0u))
        {
            _2318 = 0.0;
            _2320 = 0.0;
            _2322 = 0.0;
            _2324 = 0.0;
            _2326 = 0.0;
            _2328 = 0.0;
        }
        else
        {
            float _2319;
            float _2321;
            float _2323;
            float _2325;
            float _2327;
            float _2329;
            float _2472 = 0.0;
            float _2473 = 0.0;
            float _2474 = 0.0;
            float _2475 = 0.0;
            float _2476 = 0.0;
            float _2477 = 0.0;
            uint _2478 = 0u;
            uint _2487;
            bool _2488;
            for (;;)
            {
                _2487 = texelFetch(g_lightClassification, int((((_2176 << 5u) + (_2162 << 9u)) + (_2478 << 2u)) >> 2u)).x;
                _2488 = _2487 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2488)
                {
                    frontier_phi_61_pred = _2472;
                    frontier_phi_61_pred_1 = _2477;
                    frontier_phi_61_pred_2 = _2476;
                    frontier_phi_61_pred_3 = _2475;
                    frontier_phi_61_pred_4 = _2474;
                    frontier_phi_61_pred_5 = _2473;
                }
                else
                {
                    float _2596;
                    float _2597;
                    float _2598;
                    float _2599;
                    float _2600;
                    float _2601;
                    uint _2602;
                    _2596 = _2472;
                    _2597 = _2473;
                    _2598 = _2474;
                    _2599 = _2475;
                    _2600 = _2476;
                    _2601 = _2477;
                    _2602 = _2487;
                    float _2528;
                    float _2529;
                    float _2530;
                    float _2531;
                    float _2532;
                    float _2533;
                    for (;;)
                    {
                        uint _2606 = uint(findLSB(_2602)) + (_2478 << 5u);
                        uint _2603 = (_2602 + 4294967295u) & _2602;
                        uint _2608 = _2606 * 48u;
                        vec4 _2622 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2608)).x, texelFetch(g_PointLightRenderingBuffer, int(_2608 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2608 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2608 + 3u)).x));
                        uint _2628 = (_2606 * 48u) + 4u;
                        vec4 _2641 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2628)).x, texelFetch(g_PointLightRenderingBuffer, int(_2628 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2628 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2628 + 3u)).x));
                        uint _2647 = (_2606 * 48u) + 8u;
                        vec3 _2658 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2647)).x, texelFetch(g_PointLightRenderingBuffer, int(_2647 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2647 + 2u)).x));
                        float _2662 = _2622.x - _2136;
                        float _2663 = _2622.y - _2137;
                        float _2664 = _2622.z - _2138;
                        float _2665 = dot(vec3(_2662, _2663, _2664), vec3(_2662, _2663, _2664));
                        float _2668 = inversesqrt(_2665);
                        float _2669 = _2668 * _2662;
                        float _2670 = _2668 * _2663;
                        float _2671 = _2668 * _2664;
                        float _2672 = dot(vec3(_409, _412, _415), vec3(_2669, _2670, _2671));
                        float _2677 = 1.0 - (_2665 * _2622.w);
                        float _3937 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
                        float _2678 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
                        float _2679 = sqrt(_2665) * _2641.w;
                        float _2682 = 1.39999997615814208984375 / (_2679 + 1.39999997615814208984375);
                        float _2683 = _2682 * _2682;
                        float _2686 = ((1.0 - _2683) * _2672) + _2683;
                        float _2689 = _2679 * _2679;
                        float _2693 = ((isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0))) * _2678) / ((_2689 * 0.699999988079071044921875) + 1.0);
                        float _2697 = (-0.0) - _2136;
                        float _2698 = (-0.0) - _2137;
                        float _2699 = (-0.0) - _2138;
                        float _2703 = inversesqrt(dot(vec3(_2697, _2698, _2699), vec3(_2697, _2698, _2699)));
                        float _2704 = _2703 * _2697;
                        float _2705 = _2703 * _2698;
                        float _2706 = _2703 * _2699;
                        float _2714 = exp2(log2(1.0 / ((_2689 * 3.5) + 5.0)) * 0.25);
                        float _2715 = 1.0 - _470;
                        float _2722 = sqrt(1.0 - ((1.0 - (_2715 * _2715)) * (1.0 - (_2714 * _2714))));
                        float _2723 = _2722 * _2722;
                        float _2724 = _2723 * _2723;
                        float _2725 = _2704 + _2669;
                        float _2726 = _2705 + _2670;
                        float _2727 = _2706 + _2671;
                        float _2731 = inversesqrt(dot(vec3(_2725, _2726, _2727), vec3(_2725, _2726, _2727)));
                        float _2735 = dot(vec3(_409, _412, _415), vec3(_2704, _2705, _2706));
                        float _3953 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
                        float _2738 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
                        float _2739 = dot(vec3(_409, _412, _415), vec3(_2731 * _2725, _2731 * _2726, _2731 * _2727));
                        float _3964 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
                        float _2742 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
                        float _2746 = ((_2742 * _2742) * (_2724 + (-1.0))) + 1.0;
                        float _2747 = _2682 * _2723;
                        float _2748 = _2747 * _2747;
                        float _2751 = ((1.0 - _2748) * _2672) + _2748;
                        float _3975 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
                        float _2752 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
                        float _2753 = 1.0 - _2723;
                        float _2763 = (0.5 / (((_2752 * ((_2738 * _2753) + _2723)) + 9.9999999392252902907785028219223e-09) + (((_2752 * _2753) + _2723) * _2738))) * _2752;
                        float _3986 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
                        float _2774 = (((_2724 * 3.1415927410125732421875) * (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0)))) / ((_2746 * _2746) * ((_2689 * 2.1991131305694580078125) + 3.141590118408203125))) * _2678;
                        _2531 = (_2693 * _2641.x) + _2599;
                        _2532 = (_2693 * _2641.y) + _2600;
                        _2533 = (_2693 * _2641.z) + _2601;
                        _2528 = (_2774 * _2658.x) + _2596;
                        _2529 = (_2774 * _2658.y) + _2597;
                        _2530 = (_2774 * _2658.z) + _2598;
                        if (_2603 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2596 = _2528;
                            _2597 = _2529;
                            _2598 = _2530;
                            _2599 = _2531;
                            _2600 = _2532;
                            _2601 = _2533;
                            _2602 = _2603;
                        }
                    }
                    frontier_phi_61_pred = _2528;
                    frontier_phi_61_pred_1 = _2533;
                    frontier_phi_61_pred_2 = _2532;
                    frontier_phi_61_pred_3 = _2531;
                    frontier_phi_61_pred_4 = _2530;
                    frontier_phi_61_pred_5 = _2529;
                }
                _2319 = frontier_phi_61_pred;
                _2329 = frontier_phi_61_pred_1;
                _2327 = frontier_phi_61_pred_2;
                _2325 = frontier_phi_61_pred_3;
                _2323 = frontier_phi_61_pred_4;
                _2321 = frontier_phi_61_pred_5;
                uint _2479 = _2478 + 1u;
                if (_2479 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2472 = _2319;
                    _2473 = _2321;
                    _2474 = _2323;
                    _2475 = _2325;
                    _2476 = _2327;
                    _2477 = _2329;
                    _2478 = _2479;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2318 = _2319;
            _2320 = _2321;
            _2322 = _2323;
            _2324 = _2325;
            _2326 = _2327;
            _2328 = _2329;
        }
        uvec4 _2332 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2333 = _2332.z;
        uint _2335 = (_2333 >> 8u) & 15u;
        float _2440;
        float _2442;
        float _2444;
        float _2446;
        float _2448;
        float _2450;
        if (((4294967295u << _2335) & _2182) == 0u)
        {
            _2440 = _2318;
            _2442 = _2320;
            _2444 = _2322;
            _2446 = _2324;
            _2448 = _2326;
            _2450 = _2328;
        }
        else
        {
            float _2465 = inversesqrt(dot(vec3(_2136, _2137, _2138), vec3(_2136, _2137, _2138)));
            float _2466 = _2465 * _2136;
            float _2467 = _2465 * _2137;
            float _2468 = _2465 * _2138;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2335 < ((_2333 >> 12u) & 15u))
            {
                float _2441;
                float _2443;
                float _2445;
                float _2447;
                float _2449;
                float _2451;
                float _2579 = _2318;
                float _2580 = _2320;
                float _2581 = _2322;
                float _2582 = _2324;
                float _2583 = _2326;
                float _2584 = _2328;
                uint _2585 = _2335;
                uint _2594;
                bool _2595;
                for (;;)
                {
                    _2594 = texelFetch(g_lightClassification, int((((_2176 << 5u) + (_2162 << 9u)) + (_2585 << 2u)) >> 2u)).x;
                    _2595 = _2594 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2595)
                    {
                        frontier_phi_67_pred = _2582;
                        frontier_phi_67_pred_1 = _2583;
                        frontier_phi_67_pred_2 = _2584;
                        frontier_phi_67_pred_3 = _2581;
                        frontier_phi_67_pred_4 = _2580;
                        frontier_phi_67_pred_5 = _2579;
                    }
                    else
                    {
                        float _2779;
                        float _2780;
                        float _2781;
                        float _2782;
                        float _2783;
                        float _2784;
                        float _3075;
                        float _3076;
                        float _3077;
                        float _3078;
                        float _3079;
                        float _3080;
                        float _2792 = _2579;
                        float _2793 = _2580;
                        float _2794 = _2581;
                        float _2795 = _2582;
                        float _2796 = _2583;
                        float _2797 = _2584;
                        uint _2798 = _2594;
                        uint _2799;
                        vec4 _2824;
                        float _2825;
                        vec4 _2840;
                        vec3 _2852;
                        vec4 _2868;
                        vec4 _2884;
                        float _2931;
                        bool _2932;
                        for (;;)
                        {
                            uint _2809 = ((_2585 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2798));
                            _2799 = (_2798 + 4294967295u) & _2798;
                            uint _2811 = _2809 * 40u;
                            _2824 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2811)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2811 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2811 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2811 + 3u)).x));
                            _2825 = _2824.w;
                            uint _2827 = (_2809 * 40u) + 4u;
                            _2840 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2827)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 3u)).x));
                            uint _2842 = (_2809 * 40u) + 8u;
                            _2852 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2842)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2842 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2842 + 2u)).x));
                            uint _2855 = (_2809 * 40u) + 16u;
                            _2868 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2855)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2855 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2855 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2855 + 3u)).x));
                            uint _2871 = (_2809 * 40u) + 20u;
                            _2884 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2871)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 3u)).x));
                            uint _2887 = (_2809 * 40u) + 24u;
                            vec4 _2900 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2887)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 3u)).x));
                            uint _2906 = (_2809 * 40u) + 28u;
                            vec4 _2919 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2906)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 3u)).x));
                            _2931 = fma(_2138, _2919.z, fma(_2137, _2919.y, _2919.x * _2136)) + _2919.w;
                            _2932 = !((fma(_2138, _2900.z, fma(_2137, _2900.y, _2900.x * _2136)) + _2900.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2932)
                            {
                                float _2959 = _2824.x - _2136;
                                float _2960 = _2824.y - _2137;
                                float _2961 = _2824.z - _2138;
                                float _2962 = dot(vec3(_2959, _2960, _2961), vec3(_2959, _2960, _2961));
                                float _2965 = inversesqrt(_2962);
                                float _2966 = _2965 * _2959;
                                float _2967 = _2965 * _2960;
                                float _2968 = _2965 * _2961;
                                float _2972 = 1.0 - (_2962 / (_2825 * _2825));
                                float _3997 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0));
                                float _2973 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
                                float _2977 = sqrt(_2962) * _2840.w;
                                float _2979 = 1.39999997615814208984375 / (_2977 + 1.39999997615814208984375);
                                float _2980 = _2979 * _2979;
                                float _2983 = ((1.0 - _2980) * dot(vec3(_2966, _2967, _2968), vec3(_409, _412, _415))) + _2980;
                                float _2986 = _2977 * _2977;
                                float _2990 = (fma(_2138, _2868.z, fma(_2137, _2868.y, _2868.x * _2136)) + _2868.w) / _2931;
                                float _2991 = (fma(_2138, _2884.z, fma(_2137, _2884.y, _2884.x * _2136)) + _2884.w) / _2931;
                                float _2995 = 1.0 - dot(vec2(_2990, _2991), vec2(_2990, _2991));
                                float _4013 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
                                float _2996 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
                                float _2997 = _2996 * (((isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0))) * _2973) / ((_2986 * 0.699999988079071044921875) + 1.0));
                                float _3009 = exp2(log2(1.0 / ((_2986 * 3.5) + 5.0)) * 0.25);
                                float _3010 = 1.0 - _470;
                                float _3017 = sqrt(1.0 - ((1.0 - (_3010 * _3010)) * (1.0 - (_3009 * _3009))));
                                float _3018 = _3017 * _3017;
                                float _3019 = _3018 * _3018;
                                float _3020 = _2966 - _2466;
                                float _3021 = _2967 - _2467;
                                float _3022 = _2968 - _2468;
                                float _3026 = inversesqrt(dot(vec3(_3020, _3021, _3022), vec3(_3020, _3021, _3022)));
                                float _3030 = dot(vec3(_409, _412, _415), vec3((-0.0) - _2466, (-0.0) - _2467, (-0.0) - _2468));
                                float _4024 = isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0));
                                float _3033 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
                                float _3034 = dot(vec3(_409, _412, _415), vec3(_3026 * _3020, _3026 * _3021, _3026 * _3022));
                                float _4035 = isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0));
                                float _3037 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
                                float _3041 = ((_3037 * _3037) * (_3019 + (-1.0))) + 1.0;
                                float _3042 = _2979 * _3018;
                                float _3043 = _3042 * _3042;
                                float _3049 = ((1.0 - _3043) * dot(vec3(_409, _412, _415), vec3(_2966, _2967, _2968))) + _3043;
                                float _4046 = isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0));
                                float _3050 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
                                float _3051 = 1.0 - _3018;
                                float _3061 = (0.5 / (((_3050 * ((_3033 * _3051) + _3018)) + 9.9999999392252902907785028219223e-09) + (((_3050 * _3051) + _3018) * _3033))) * _3050;
                                float _4057 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0));
                                float _3071 = (_2996 * _2973) * (((_3019 * 3.1415927410125732421875) * (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0)))) / ((_3041 * _3041) * ((_2986 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3071 * _2852.x;
                                frontier_phi_73_pred_1 = _3071 * _2852.y;
                                frontier_phi_73_pred_2 = _2997 * _2840.z;
                                frontier_phi_73_pred_3 = _2997 * _2840.y;
                                frontier_phi_73_pred_4 = _2997 * _2840.x;
                                frontier_phi_73_pred_5 = _3071 * _2852.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3075 = frontier_phi_73_pred;
                            _3076 = frontier_phi_73_pred_1;
                            _3080 = frontier_phi_73_pred_2;
                            _3079 = frontier_phi_73_pred_3;
                            _3078 = frontier_phi_73_pred_4;
                            _3077 = frontier_phi_73_pred_5;
                            _2782 = _3078 + _2795;
                            _2783 = _3079 + _2796;
                            _2784 = _3080 + _2797;
                            _2779 = _3075 + _2792;
                            _2780 = _3076 + _2793;
                            _2781 = _3077 + _2794;
                            if (_2799 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2792 = _2779;
                                _2793 = _2780;
                                _2794 = _2781;
                                _2795 = _2782;
                                _2796 = _2783;
                                _2797 = _2784;
                                _2798 = _2799;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2782;
                        frontier_phi_67_pred_1 = _2783;
                        frontier_phi_67_pred_2 = _2784;
                        frontier_phi_67_pred_3 = _2781;
                        frontier_phi_67_pred_4 = _2780;
                        frontier_phi_67_pred_5 = _2779;
                    }
                    _2447 = frontier_phi_67_pred;
                    _2449 = frontier_phi_67_pred_1;
                    _2451 = frontier_phi_67_pred_2;
                    _2445 = frontier_phi_67_pred_3;
                    _2443 = frontier_phi_67_pred_4;
                    _2441 = frontier_phi_67_pred_5;
                    uint _2586 = _2585 + 1u;
                    if (_2586 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2579 = _2441;
                        _2580 = _2443;
                        _2581 = _2445;
                        _2582 = _2447;
                        _2583 = _2449;
                        _2584 = _2451;
                        _2585 = _2586;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2449;
                frontier_phi_55_56_ladder_1 = _2451;
                frontier_phi_55_56_ladder_2 = _2447;
                frontier_phi_55_56_ladder_3 = _2445;
                frontier_phi_55_56_ladder_4 = _2443;
                frontier_phi_55_56_ladder_5 = _2441;
            }
            else
            {
                frontier_phi_55_56_ladder = _2326;
                frontier_phi_55_56_ladder_1 = _2328;
                frontier_phi_55_56_ladder_2 = _2324;
                frontier_phi_55_56_ladder_3 = _2322;
                frontier_phi_55_56_ladder_4 = _2320;
                frontier_phi_55_56_ladder_5 = _2318;
            }
            _2440 = frontier_phi_55_56_ladder_5;
            _2442 = frontier_phi_55_56_ladder_4;
            _2444 = frontier_phi_55_56_ladder_3;
            _2446 = frontier_phi_55_56_ladder_2;
            _2448 = frontier_phi_55_56_ladder;
            _2450 = frontier_phi_55_56_ladder_1;
        }
        float _2455 = isnan(1.0) ? _454 : (isnan(_454) ? 1.0 : min(_454, 1.0));
        _2195 = (_2455 * _2446) + _1647;
        _2197 = (_2455 * _2448) + _1649;
        _2199 = (_2455 * _2450) + _1651;
        _2201 = ((_2440 * 0.039999999105930328369140625) * _2455) + _1980;
        _2203 = ((_2442 * 0.039999999105930328369140625) * _2455) + _1982;
        _2205 = ((_2444 * 0.039999999105930328369140625) * _2455) + _1984;
    }
    else
    {
        _2195 = _1647;
        _2197 = _1649;
        _2199 = _1651;
        _2201 = _1980;
        _2203 = _1982;
        _2205 = _1984;
    }
    uint _2211 = _430 + uint(cbMatDynParam._m0[0u].w);
    float _2219 = ((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _281.x) * cbInstanceData._m0[_2211].x;
    float _2222 = ((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _281.y) * cbInstanceData._m0[_2211].y;
    float _2225 = ((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _281.z) * cbInstanceData._m0[_2211].z;
    float _4073 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _4084 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _4095 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _2242 = (((isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * (_2195 + ((isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0))) * _454))) + ((_2201 + ((isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0))) * _1261)) * cbPerFrame._m0[3u].x)) + _2219;
    float _2244 = (_2222 + ((_2203 + ((isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0))) * _1261)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) * (_2197 + ((isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0))) * _454)));
    float _2246 = (_2225 + ((_2205 + ((isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0))) * _1261)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) * (_2199 + ((isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0))) * _454)));
    float _4121 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2259 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
    uint _2260 = _428 + 6u;
    float _2268 = _387 / cbSceneParam._m0[86u].x;
    float _2269 = _388 / cbSceneParam._m0[86u].y;
    vec4 _2283 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2268, _2269, (log2((isnan(cbSceneParam._m0[77u].w) ? _321 : (isnan(_321) ? cbSceneParam._m0[77u].w : min(_321, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2285 = _2283.x;
    float _2286 = _2283.y;
    float _2287 = _2283.z;
    float _2288 = _2283.w;
    float _2381;
    float _2383;
    float _2385;
    float _2387;
    if (_321 > cbSceneParam._m0[78u].w)
    {
        float _2343 = isnan(_321) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _321 : min(cbSceneParam._m0[80u].w, _321));
        float _2344 = _2343 / _321;
        float _2355 = _2344 * _372;
        float _2356 = _373 * _2344;
        float _2357 = (-0.0) - _2356;
        float _2359 = _2344 * _374;
        float _2361 = (cbSceneParam._m0[77u].w * _2357) / _2343;
        float _2362 = _2361 + cbSceneParam._m0[79u].w;
        float _2363 = cbSceneParam._m0[79u].w - _2356;
        float _2369 = sqrt(((_2355 * _2355) + (_2356 * _2356)) + (_2359 * _2359));
        float _2372 = (1.0 - (cbSceneParam._m0[77u].w / _2343)) * _2369;
        float _2377 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2379 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2541;
        if (abs((_2357 - _2361) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2541 = ((((_2362 > 0.0) ? exp2(_2377 * _2362) : (2.0 - exp2(_2379 * _2362))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2372;
        }
        else
        {
            float _2501 = 1.0 / cbSceneParam._m0[80u].x;
            float _2502 = isnan(_2363) ? _2362 : (isnan(_2362) ? _2363 : max(_2362, _2363));
            float _2503 = isnan(_2363) ? _2362 : (isnan(_2362) ? _2363 : min(_2362, _2363));
            float _2512 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : min(_2502, 0.0));
            float _2513 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : min(_2503, 0.0));
            _2541 = ((abs(_2369 / _2357) * cbSceneParam._m0[80u].y) * ((((_2512 - _2513) * 2.0) - ((exp2(_2377 * (isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0)))) - exp2(_2377 * (isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0))))) * _2501)) - ((exp2(_2379 * _2512) - exp2(_2379 * _2513)) * _2501))) + (_2372 * cbSceneParam._m0[80u].z);
        }
        vec4 _2543 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2268, _2269, 1.0), 0.0);
        float _2552 = exp2((_2541 * (-1.44269502162933349609375)) * (1.0 - _2543.w));
        float _2553 = log2(_2552);
        float _2569 = log2(_2288);
        _2381 = (exp2(_2569 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2553 * cbSceneParam._m0[78u].x)) * _2543.x) / cbSceneParam._m0[78u].x)) + _2285;
        _2383 = (exp2(_2569 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2553 * cbSceneParam._m0[78u].y)) * _2543.y) / cbSceneParam._m0[78u].y)) + _2286;
        _2385 = (exp2(_2569 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2553 * cbSceneParam._m0[78u].z)) * _2543.z) / cbSceneParam._m0[78u].z)) + _2287;
        _2387 = _2552 * _2288;
    }
    else
    {
        _2381 = _2285;
        _2383 = _2286;
        _2385 = _2287;
        _2387 = _2288;
    }
    float _2399 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2400 = _2399 == 3.0;
    float _2401 = log2(_2387);
    float _2405 = exp2(_2401 * cbSceneParam._m0[78u].x);
    float _2406 = exp2(_2401 * cbSceneParam._m0[78u].y);
    float _2407 = exp2(_2401 * cbSceneParam._m0[78u].z);
    float _2408 = _2405 * (isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0)));
    float _2409 = _2406 * (isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0)));
    float _2410 = _2407 * (isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0)));
    float _2419 = (_2399 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2419 * (_2400 ? _2408 : (_2408 + (cbSceneParam._m0[72u].w * _2381)));
    SV_Target.y = _2419 * (_2400 ? _2409 : (_2409 + (cbSceneParam._m0[72u].w * _2383)));
    SV_Target.z = _2419 * (_2400 ? _2410 : (_2410 + (cbSceneParam._m0[72u].w * _2385)));
    SV_Target.w = cbInstanceData._m0[_2260].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2219) * _2259) * _2405) * _2419;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2222) * _2259) * _2406) * _2419;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2225) * _2259) * _2407) * _2419;
    SV_Target_1.w = cbInstanceData._m0[_2260].w;
}


