#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_AMSN_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_AMSN_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_AMSN_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_AMSN_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _863;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _226 = texture(sampler2D(P_ACParts_AMSN_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _232 = _226.x * cbMtdParam._m0[9u].x;
    float _233 = _226.y * cbMtdParam._m0[9u].y;
    float _234 = _226.z * cbMtdParam._m0[9u].z;
    vec4 _246 = texture(sampler2D(P_ACParts_AMSN_Emissive_Glow_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _248 = _246.x;
    vec4 _260 = texture(sampler2D(P_ACParts_AMSN_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _264 = _260.z;
    float _268 = (_260.x * 2.0) + (-1.0);
    float _270 = (_260.y * 2.0) + (-1.0);
    float _271 = dot(vec2(_268, _270), vec2(_268, _270));
    float _3526 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _277 = sqrt(1.0 - (isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0))));
    vec4 _299 = texture(sampler2D(P_ACParts_AMSN_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _306 = fma(_277, _196 * NORMAL.x, fma(_270, _203 * TANGENT.x, (_189 * _182) * _268));
    float _309 = fma(_277, _196 * NORMAL.y, fma(_270, _203 * TANGENT.y, (_189 * _183) * _268));
    float _312 = fma(_277, _196 * NORMAL.z, fma(_270, _203 * TANGENT.z, (_189 * _184) * _268));
    float _316 = inversesqrt(dot(vec3(_306, _309, _312), vec3(_306, _309, _312)));
    float _317 = _316 * _306;
    float _318 = _316 * _309;
    float _319 = _316 * _312;
    float _3537 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _320 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
    float _3548 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3559 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _3570 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3581 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _324 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
    float _340 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _381 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _391 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _381);
    float _392 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _381);
    float _393 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _381);
    float _397 = inversesqrt(dot(vec3(_391, _392, _393), vec3(_391, _392, _393)));
    float _398 = _391 * _397;
    float _399 = _392 * _397;
    float _400 = _393 * _397;
    float _406 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _407 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _428 = fma(_319, cbSceneParam._m0[5u].z, fma(_318, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _317));
    float _431 = fma(_319, cbSceneParam._m0[6u].z, fma(_318, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _317));
    float _434 = fma(_319, cbSceneParam._m0[7u].z, fma(_318, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _317));
    uint _447 = uint(roundEven(NORMAL.w)) * 13u;
    uint _449 = _447 + 9u;
    uint _450 = _449 + uint(cbMatDynParam._m0[0u].w);
    float _456 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0)))) * cbInstanceData._m0[_450].x;
    float _457 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0)))) * cbInstanceData._m0[_450].y;
    float _458 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0)))) * cbInstanceData._m0[_450].z;
    float _3592 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _459 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
    float _3603 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _460 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
    float _3614 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _461 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
    float _462 = 1.0 - _324;
    float _463 = _459 * _462;
    float _464 = _460 * _462;
    float _465 = _461 * _462;
    float _470 = (_459 + (-0.039999999105930328369140625)) * _324;
    float _471 = (_460 + (-0.039999999105930328369140625)) * _324;
    float _472 = (_461 + (-0.039999999105930328369140625)) * _324;
    float _473 = _470 + 0.039999999105930328369140625;
    float _475 = _471 + 0.039999999105930328369140625;
    float _476 = _472 + 0.039999999105930328369140625;
    vec4 _485 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _406, cbSceneParam._m0[86u].y * _407));
    float _488 = _485.x * TEXCOORD.z;
    float _489 = dot(vec3(_317, _318, _319), vec3(_398, _399, _400));
    float _492 = _489 * 2.0;
    float _496 = (_492 * _317) - _398;
    float _497 = (_492 * _318) - _399;
    float _498 = (_492 * _319) - _400;
    float _502 = abs(dot(vec3(_398, _399, _400), vec3(_317, _318, _319)));
    float _3625 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _504 = sqrt(_320);
    float _517 = exp2((_504 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_504 * 3.0));
    float _523 = (1.0 - _517) * ((_504 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _524 = _517 * _504;
    float _552 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _556 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _560 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _862;
    float _864;
    float _865;
    float _866;
    float _867;
    float _868;
    float _869;
    float _870;
    float _871;
    float _872;
    float _873;
    float _874;
    float _875;
    float _876;
    float _877;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _587 = fma(_560, cbModelParam._m0[26u].z, fma(_556, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _552));
        float _591 = fma(_560, cbModelParam._m0[27u].z, fma(_556, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _552));
        float _595 = fma(_560, cbModelParam._m0[28u].z, fma(_556, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _552));
        float _620 = _552 + _317;
        float _621 = _556 + _318;
        float _622 = _560 + _319;
        float _632 = fma(_622, cbModelParam._m0[26u].z, fma(_621, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _620)) - _587;
        float _633 = fma(_622, cbModelParam._m0[27u].z, fma(_621, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _620)) - _591;
        float _634 = fma(_622, cbModelParam._m0[28u].z, fma(_621, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _620)) - _595;
        float _638 = inversesqrt(dot(vec3(_632, _633, _634), vec3(_632, _633, _634)));
        float _651 = ((_638 * _632) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_587 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _652 = ((_638 * _633) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_591 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _653 = ((_638 * _634) / cbModelParam._m0[34u].z) + ((((((_595 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _656 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_651, _652, _653), 0.0);
        vec4 _663 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_651, _652, _653), 0.0);
        vec4 _670 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_651, _652, _653), 0.0);
        vec4 _677 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_651, _652, _653), 0.0);
        float _690 = exp2((_656.w + (-0.5)) * 20.0) * 2.0;
        float _691 = _690 * (_656.x + (-0.5));
        float _692 = _690 * (_656.y + (-0.5));
        float _693 = _690 * (_656.z + (-0.5));
        float _700 = exp2((_663.w + (-0.5)) * 20.0) * 2.0;
        float _701 = _700 * (_663.x + (-0.5));
        float _702 = _700 * (_663.y + (-0.5));
        float _703 = _700 * (_663.z + (-0.5));
        float _710 = exp2((_670.w + (-0.5)) * 20.0) * 2.0;
        float _711 = _710 * (_670.x + (-0.5));
        float _712 = _710 * (_670.y + (-0.5));
        float _713 = _710 * (_670.z + (-0.5));
        float _720 = exp2((_677.w + (-0.5)) * 20.0) * 2.0;
        float _721 = _720 * (_677.x + (-0.5));
        float _722 = _720 * (_677.y + (-0.5));
        float _723 = _720 * (_677.z + (-0.5));
        float _724 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
        float _725 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
        float _726 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
        float _727 = _691 * 0.5;
        float _728 = _701 * 0.5;
        float _729 = _711 * 0.5;
        float _730 = dot(vec3(_727, _728, _729), vec3(_727, _728, _729));
        float _735 = (_730 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_730);
        float _744 = (dot(vec3(_317, _318, _319), vec3(_735 * _727, _735 * _728, _735 * _729)) + 1.0) * 0.5;
        float _3651 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
        float _754 = sqrt(((_728 * _728) + (_727 * _727)) + (_729 * _729)) / (_724 + 9.9999997473787516355514526367188e-06);
        float _3662 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        float _755 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
        float _756 = _755 * 2.0;
        float _760 = (1.0 - _755) / (_755 + 1.0);
        float _3673 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
        float _761 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
        float _770 = ((((1.0 - _761) * (_756 + 2.0)) * exp2(log2(isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0))) * (_756 + 1.0))) + _761) * _724;
        float _771 = _692 * 0.5;
        float _772 = _702 * 0.5;
        float _773 = _712 * 0.5;
        float _774 = dot(vec3(_771, _772, _773), vec3(_771, _772, _773));
        float _779 = (_774 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_774);
        float _787 = (dot(vec3(_317, _318, _319), vec3(_779 * _771, _779 * _772, _779 * _773)) + 1.0) * 0.5;
        float _3684 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        float _796 = sqrt(((_772 * _772) + (_771 * _771)) + (_773 * _773)) / (_725 + 9.9999997473787516355514526367188e-06);
        float _3695 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
        float _797 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
        float _798 = _797 * 2.0;
        float _802 = (1.0 - _797) / (_797 + 1.0);
        float _3706 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
        float _803 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
        float _812 = ((((1.0 - _803) * (_798 + 2.0)) * exp2(log2(isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0))) * (_798 + 1.0))) + _803) * _725;
        float _813 = _693 * 0.5;
        float _814 = _703 * 0.5;
        float _815 = _713 * 0.5;
        float _816 = dot(vec3(_813, _814, _815), vec3(_813, _814, _815));
        float _821 = (_816 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_816);
        float _829 = (dot(vec3(_317, _318, _319), vec3(_821 * _813, _821 * _814, _821 * _815)) + 1.0) * 0.5;
        float _3717 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _838 = sqrt(((_814 * _814) + (_813 * _813)) + (_815 * _815)) / (_726 + 9.9999997473787516355514526367188e-06);
        float _3728 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
        float _839 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
        float _840 = _839 * 2.0;
        float _844 = (1.0 - _839) / (_839 + 1.0);
        float _3739 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
        float _845 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _854 = ((((1.0 - _845) * (_840 + 2.0)) * exp2(log2(isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0))) * (_840 + 1.0))) + _845) * _726;
        _862 = _693;
        _864 = _692;
        _865 = _691;
        _866 = _703;
        _867 = _702;
        _868 = _701;
        _869 = _713;
        _870 = _712;
        _871 = _711;
        _872 = _726;
        _873 = _725;
        _874 = _724;
        _875 = cbModelParam._m0[36u].z * (isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0)));
        _876 = cbModelParam._m0[36u].z * (isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0)));
        _877 = cbModelParam._m0[36u].z * (isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0)));
    }
    else
    {
        _862 = _863;
        _864 = _863;
        _865 = _863;
        _866 = _863;
        _867 = _863;
        _868 = _863;
        _869 = _863;
        _870 = _863;
        _871 = _863;
        _872 = _863;
        _873 = _863;
        _874 = _863;
        _875 = 0.0;
        _876 = 0.0;
        _877 = 0.0;
    }
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _903 = fma(_560, cbModelParam._m0[30u].z, fma(_556, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _552));
        float _907 = fma(_560, cbModelParam._m0[31u].z, fma(_556, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _552));
        float _911 = fma(_560, cbModelParam._m0[32u].z, fma(_556, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _552));
        float _934 = _552 + _317;
        float _935 = _556 + _318;
        float _936 = _560 + _319;
        float _946 = fma(_936, cbModelParam._m0[30u].z, fma(_935, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _934)) - _903;
        float _947 = fma(_936, cbModelParam._m0[31u].z, fma(_935, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _934)) - _907;
        float _948 = fma(_936, cbModelParam._m0[32u].z, fma(_935, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _934)) - _911;
        float _952 = inversesqrt(dot(vec3(_946, _947, _948), vec3(_946, _947, _948)));
        float _965 = ((_952 * _946) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_903 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _966 = ((_952 * _947) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_907 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _967 = ((_952 * _948) / cbModelParam._m0[35u].z) + ((((((_911 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _969 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_965, _966, _967), 0.0);
        vec4 _976 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_965, _966, _967), 0.0);
        vec4 _983 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_965, _966, _967), 0.0);
        vec4 _990 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_965, _966, _967), 0.0);
        float _1002 = exp2((_969.w + (-0.5)) * 20.0) * 2.0;
        float _1003 = _1002 * (_969.x + (-0.5));
        float _1004 = _1002 * (_969.y + (-0.5));
        float _1005 = _1002 * (_969.z + (-0.5));
        float _1012 = exp2((_976.w + (-0.5)) * 20.0) * 2.0;
        float _1013 = _1012 * (_976.x + (-0.5));
        float _1014 = _1012 * (_976.y + (-0.5));
        float _1015 = _1012 * (_976.z + (-0.5));
        float _1022 = exp2((_983.w + (-0.5)) * 20.0) * 2.0;
        float _1023 = _1022 * (_983.x + (-0.5));
        float _1024 = _1022 * (_983.y + (-0.5));
        float _1025 = _1022 * (_983.z + (-0.5));
        float _1032 = exp2((_990.w + (-0.5)) * 20.0) * 2.0;
        float _1033 = _1032 * (_990.x + (-0.5));
        float _1034 = _1032 * (_990.y + (-0.5));
        float _1035 = _1032 * (_990.z + (-0.5));
        float _1036 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1037 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1038 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1039 = _1003 * 0.5;
        float _1040 = _1013 * 0.5;
        float _1041 = _1023 * 0.5;
        float _1042 = dot(vec3(_1039, _1040, _1041), vec3(_1039, _1040, _1041));
        float _1047 = (_1042 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1042);
        float _1055 = (dot(vec3(_317, _318, _319), vec3(_1047 * _1039, _1047 * _1040, _1047 * _1041)) + 1.0) * 0.5;
        float _3780 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1064 = sqrt(((_1040 * _1040) + (_1039 * _1039)) + (_1041 * _1041)) / (_1036 + 9.9999997473787516355514526367188e-06);
        float _3791 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1065 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
        float _1066 = _1065 * 2.0;
        float _1070 = (1.0 - _1065) / (_1065 + 1.0);
        float _3802 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1071 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
        float _1080 = ((((1.0 - _1071) * (_1066 + 2.0)) * exp2(log2(isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0))) * (_1066 + 1.0))) + _1071) * _1036;
        float _1081 = _1004 * 0.5;
        float _1082 = _1014 * 0.5;
        float _1083 = _1024 * 0.5;
        float _1084 = dot(vec3(_1081, _1082, _1083), vec3(_1081, _1082, _1083));
        float _1089 = (_1084 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1084);
        float _1097 = (dot(vec3(_317, _318, _319), vec3(_1089 * _1081, _1089 * _1082, _1089 * _1083)) + 1.0) * 0.5;
        float _3813 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1106 = sqrt(((_1082 * _1082) + (_1081 * _1081)) + (_1083 * _1083)) / (_1037 + 9.9999997473787516355514526367188e-06);
        float _3824 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
        float _1108 = _1107 * 2.0;
        float _1112 = (1.0 - _1107) / (_1107 + 1.0);
        float _3835 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1113 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
        float _1122 = ((((1.0 - _1113) * (_1108 + 2.0)) * exp2(log2(isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0))) * (_1108 + 1.0))) + _1113) * _1037;
        float _1123 = _1005 * 0.5;
        float _1124 = _1015 * 0.5;
        float _1125 = _1025 * 0.5;
        float _1126 = dot(vec3(_1123, _1124, _1125), vec3(_1123, _1124, _1125));
        float _1131 = (_1126 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1126);
        float _1139 = (dot(vec3(_317, _318, _319), vec3(_1131 * _1123, _1131 * _1124, _1131 * _1125)) + 1.0) * 0.5;
        float _3846 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1148 = sqrt(((_1124 * _1124) + (_1123 * _1123)) + (_1125 * _1125)) / (_1038 + 9.9999997473787516355514526367188e-06);
        float _3857 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
        float _1150 = _1149 * 2.0;
        float _1154 = (1.0 - _1149) / (_1149 + 1.0);
        float _3868 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
        float _1164 = ((((1.0 - _1155) * (_1150 + 2.0)) * exp2(log2(isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0))) * (_1150 + 1.0))) + _1155) * _1038;
        _1172 = _1005;
        _1173 = _1004;
        _1174 = _1003;
        _1175 = _1015;
        _1176 = _1014;
        _1177 = _1013;
        _1178 = _1025;
        _1179 = _1024;
        _1180 = _1023;
        _1181 = _1038;
        _1182 = _1037;
        _1183 = _1036;
        _1184 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0)));
        _1185 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0)));
        _1186 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0)));
    }
    else
    {
        _1172 = _863;
        _1173 = _863;
        _1174 = _863;
        _1175 = _863;
        _1176 = _863;
        _1177 = _863;
        _1178 = _863;
        _1179 = _863;
        _1180 = _863;
        _1181 = _863;
        _1182 = _863;
        _1183 = _863;
        _1184 = 0.0;
        _1185 = 0.0;
        _1186 = 0.0;
    }
    float _1196 = (cbModelParam._m0[1u].x * (_1184 - _875)) + _875;
    float _1197 = (cbModelParam._m0[1u].x * (_1185 - _876)) + _876;
    float _1198 = (cbModelParam._m0[1u].x * (_1186 - _877)) + _877;
    float _1219 = fma(_1198, cbSceneParam._m0[89u].z, fma(_1197, cbSceneParam._m0[89u].y, _1196 * cbSceneParam._m0[89u].x));
    float _1222 = fma(_1198, cbSceneParam._m0[90u].z, fma(_1197, cbSceneParam._m0[90u].y, _1196 * cbSceneParam._m0[90u].x));
    float _1225 = fma(_1198, cbSceneParam._m0[91u].z, fma(_1197, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1196));
    float _1240 = _496 * 0.5;
    float _1241 = _497 * 0.5;
    float _1242 = _498 * 0.5;
    float _1243 = dot(vec4(_1240, _1241, _1242, 1.0), vec4(_1174, _1177, _1180, _1183));
    float _1246 = dot(vec4(_1240, _1241, _1242, 1.0), vec4(_1173, _1176, _1179, _1182));
    float _1249 = dot(vec4(_1240, _1241, _1242, 1.0), vec4(_1172, _1175, _1178, _1181));
    float _1283;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1256 = dot(vec4(_1240, _1241, _1242, 1.0), vec4(_862, _866, _869, _872));
        float _1260 = dot(vec4(_1240, _1241, _1242, 1.0), vec4(_864, _867, _870, _873));
        float _1264 = dot(vec4(_1240, _1241, _1242, 1.0), vec4(_865, _868, _871, _874));
        float _1271 = dot(vec4(cbModelParam._m0[39u]), vec4(_1240, _1241, _1242, 1.0));
        _1283 = dot(vec3(isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)), isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0)), isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1271) ? 0.0 : (isnan(0.0) ? _1271 : max(0.0, _1271))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1283 = 1.0;
    }
    float _1294;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1285 = dot(vec4(cbModelParam._m0[40u]), vec4(_1240, _1241, _1242, 1.0));
        _1294 = dot(vec3(isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0)), isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0)), isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1285) ? 0.0 : (isnan(0.0) ? _1285 : max(0.0, _1285))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1294 = 1.0;
    }
    float _1298 = (_1294 * cbModelParam._m0[1u].x) + (_1283 * (1.0 - cbModelParam._m0[1u].x));
    float _1308 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _320);
    float _1309 = isnan(_1308) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1308 : min(cbModelParam._m0[25u].z, _1308));
    float _1391;
    float _1393;
    float _1395;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1358 = fma(_560, cbModelParam._m0[13u].z, fma(_556, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _552)) + cbModelParam._m0[13u].w;
        float _1362 = fma(_560, cbModelParam._m0[14u].z, fma(_556, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _552)) + cbModelParam._m0[14u].w;
        float _1366 = fma(_560, cbModelParam._m0[15u].z, fma(_556, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _552)) + cbModelParam._m0[15u].w;
        float _1369 = fma(_498, cbModelParam._m0[13u].z, fma(_497, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _496));
        float _1372 = fma(_498, cbModelParam._m0[14u].z, fma(_497, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _496));
        float _1375 = fma(_498, cbModelParam._m0[15u].z, fma(_497, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _496));
        float _1403;
        if (_1369 > 0.0)
        {
            _1403 = abs((1.0 - _1358) / _1369);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1369 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1358 + 1.0) / _1369);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1403 = frontier_phi_14_12_ladder;
        }
        float _1578;
        if (_1372 > 0.0)
        {
            _1578 = abs((1.0 - _1362) / _1372);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1372 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1362 + 1.0) / _1372);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1578 = frontier_phi_23_19_ladder;
        }
        float _1874;
        if (_1375 > 0.0)
        {
            _1874 = abs((1.0 - _1366) / _1375);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1375 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1366 + 1.0) / _1375);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1874 = frontier_phi_35_30_ladder;
        }
        float _1876 = isnan(_1578) ? _1403 : (isnan(_1403) ? _1578 : min(_1403, _1578));
        float _1877 = isnan(_1874) ? _1876 : (isnan(_1876) ? _1874 : min(_1876, _1874));
        float _1881 = (_1877 * _1369) + _1358;
        float _1882 = (_1877 * _1372) + _1362;
        float _1883 = (_1877 * _1375) + _1366;
        float _1884 = _1877 * 9.9999997473787516355514526367188e-05;
        float _1886 = (-1.0) - _1884;
        float _1888 = _1884 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1883 > _1888) || ((_1883 < _1886) || ((_1882 > _1888) || ((_1882 < _1886) || ((_1881 < _1886) || (_1881 > _1888))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2028 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1883, cbModelParam._m0[9u].z, fma(_1882, cbModelParam._m0[9u].y, _1881 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1883, cbModelParam._m0[10u].z, fma(_1882, cbModelParam._m0[10u].y, _1881 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1883, cbModelParam._m0[11u].z, fma(_1882, cbModelParam._m0[11u].y, _1881 * cbModelParam._m0[11u].x))), _1309);
            frontier_phi_13_35_ladder = _2028.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2028.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2028.x * cbModelParam._m0[1u].y;
        }
        _1391 = frontier_phi_13_35_ladder_2;
        _1393 = frontier_phi_13_35_ladder_1;
        _1395 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1379 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_496, _497, _498), _1309);
        _1391 = _1379.x * cbModelParam._m0[1u].y;
        _1393 = _1379.y * cbModelParam._m0[1u].y;
        _1395 = _1379.z * cbModelParam._m0[1u].y;
    }
    float _1399 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _320);
    float _1400 = isnan(_1399) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1399 : min(cbModelParam._m0[25u].w, _1399));
    float _1493;
    float _1495;
    float _1497;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1457 = fma(_560, cbModelParam._m0[21u].z, fma(_556, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _552)) + cbModelParam._m0[21u].w;
        float _1461 = fma(_560, cbModelParam._m0[22u].z, fma(_556, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _552)) + cbModelParam._m0[22u].w;
        float _1465 = fma(_560, cbModelParam._m0[23u].z, fma(_556, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _552)) + cbModelParam._m0[23u].w;
        float _1468 = fma(_498, cbModelParam._m0[21u].z, fma(_497, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _496));
        float _1471 = fma(_498, cbModelParam._m0[22u].z, fma(_497, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _496));
        float _1474 = fma(_498, cbModelParam._m0[23u].z, fma(_497, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _496));
        float _1583;
        if (_1468 > 0.0)
        {
            _1583 = abs((1.0 - _1457) / _1468);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1468 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1457 + 1.0) / _1468);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1583 = frontier_phi_25_21_ladder;
        }
        float _1901;
        if (_1471 > 0.0)
        {
            _1901 = abs((1.0 - _1461) / _1471);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1471 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1461 + 1.0) / _1471);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1901 = frontier_phi_37_32_ladder;
        }
        float _2239;
        if (_1474 > 0.0)
        {
            _2239 = abs((1.0 - _1465) / _1474);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1474 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1465 + 1.0) / _1474);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2239 = frontier_phi_47_44_ladder;
        }
        float _2241 = isnan(_1901) ? _1583 : (isnan(_1583) ? _1901 : min(_1583, _1901));
        float _2242 = isnan(_2239) ? _2241 : (isnan(_2241) ? _2239 : min(_2241, _2239));
        float _2246 = (_2242 * _1468) + _1457;
        float _2247 = (_2242 * _1471) + _1461;
        float _2248 = (_2242 * _1474) + _1465;
        float _2249 = _2242 * 9.9999997473787516355514526367188e-05;
        float _2250 = (-1.0) - _2249;
        float _2252 = _2249 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2248 > _2252) || ((_2248 < _2250) || ((_2247 > _2252) || ((_2247 < _2250) || ((_2246 < _2250) || (_2246 > _2252))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2370 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2248, cbModelParam._m0[17u].z, fma(_2247, cbModelParam._m0[17u].y, _2246 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2248, cbModelParam._m0[18u].z, fma(_2247, cbModelParam._m0[18u].y, _2246 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2248, cbModelParam._m0[19u].z, fma(_2247, cbModelParam._m0[19u].y, _2246 * cbModelParam._m0[19u].x))), _1400);
            frontier_phi_22_47_ladder = _2370.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2370.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2370.x * cbModelParam._m0[1u].z;
        }
        _1493 = frontier_phi_22_47_ladder_2;
        _1495 = frontier_phi_22_47_ladder_1;
        _1497 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1477 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_496, _497, _498), _1400);
        _1493 = _1477.x * cbModelParam._m0[1u].z;
        _1495 = _1477.y * cbModelParam._m0[1u].z;
        _1497 = _1477.z * cbModelParam._m0[1u].z;
    }
    float _1510 = (((_523 * _473) + _524) * _488) * ((cbModelParam._m0[1u].w * (_1493 - _1391)) + _1391);
    float _1512 = (((_523 * _475) + _524) * _488) * ((cbModelParam._m0[1u].w * (_1495 - _1393)) + _1393);
    float _1514 = (((_523 * _476) + _524) * _488) * ((cbModelParam._m0[1u].w * (_1497 - _1395)) + _1395);
    float _1517 = fma(_1514, cbSceneParam._m0[89u].z, fma(_1512, cbSceneParam._m0[89u].y, _1510 * cbSceneParam._m0[89u].x));
    float _1520 = fma(_1514, cbSceneParam._m0[90u].z, fma(_1512, cbSceneParam._m0[90u].y, _1510 * cbSceneParam._m0[90u].x));
    float _1523 = fma(_1514, cbSceneParam._m0[91u].z, fma(_1512, cbSceneParam._m0[91u].y, _1510 * cbSceneParam._m0[91u].x));
    float _1557 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1561 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1565 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1569 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1570 = _1557 / _1569;
    float _1571 = _1561 / _1569;
    float _1572 = _1565 / _1569;
    float _1719;
    float _1720;
    float _1721;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1599 = ((uint(_1572 > cbSceneParam._m0[59u].y) + uint(_1572 > cbSceneParam._m0[59u].x)) + uint(_1572 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1600 = _1599 + 43u;
        uint _1608 = _1599 + 44u;
        uint _1616 = _1599 + 45u;
        uint _1624 = _1599 + 46u;
        float _1635 = fma(_1569, cbSceneParam._m0[_1600].w, fma(_1565, cbSceneParam._m0[_1600].z, fma(_1561, cbSceneParam._m0[_1600].y, _1557 * cbSceneParam._m0[_1600].x)));
        float _1639 = fma(_1569, cbSceneParam._m0[_1608].w, fma(_1565, cbSceneParam._m0[_1608].z, fma(_1561, cbSceneParam._m0[_1608].y, _1557 * cbSceneParam._m0[_1608].x)));
        float _1647 = fma(_1569, cbSceneParam._m0[_1624].w, fma(_1565, cbSceneParam._m0[_1624].z, fma(_1561, cbSceneParam._m0[_1624].y, _1557 * cbSceneParam._m0[_1624].x)));
        float _1652 = cbSceneParam._m0[33u].z * _1647;
        float _1654 = cbSceneParam._m0[33u].w * _1647;
        float _1657 = fma(_1569, cbSceneParam._m0[_1616].w, fma(_1565, cbSceneParam._m0[_1616].z, fma(_1561, cbSceneParam._m0[_1616].y, _1557 * cbSceneParam._m0[_1616].x))) / _1647;
        float _1705 = (cbSceneParam._m0[33u].x - sqrt(((_1571 * _1571) + (_1570 * _1570)) + (_1572 * _1572))) * cbSceneParam._m0[33u].y;
        float _3994 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1712 = (isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1652 + _1635) / _1647, (_1654 + _1639) / _1647), _1657), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1654 + _1635) / _1647, (_1639 - _1652) / _1647), _1657), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1635 - _1652) / _1647, (_1639 - _1654) / _1647), _1657), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1635 - _1654) / _1647, (_1652 + _1639) / _1647), _1657), 0.0)).x), vec4(0.25)));
        _1719 = 1.0 - (_1712 * cbSceneParam._m0[34u].x);
        _1720 = 1.0 - (_1712 * cbSceneParam._m0[34u].y);
        _1721 = 1.0 - (_1712 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1719 = 1.0;
        _1720 = 1.0;
        _1721 = 1.0;
    }
    float _1785;
    float _1787;
    float _1789;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1773 = fma(_1569, cbSceneParam._m0[63u].w, fma(_1565, cbSceneParam._m0[63u].z, fma(_1561, cbSceneParam._m0[63u].y, _1557 * cbSceneParam._m0[63u].x)));
        float _1774 = fma(_1569, cbSceneParam._m0[60u].w, fma(_1565, cbSceneParam._m0[60u].z, fma(_1561, cbSceneParam._m0[60u].y, _1557 * cbSceneParam._m0[60u].x))) / _1773;
        float _1775 = fma(_1569, cbSceneParam._m0[61u].w, fma(_1565, cbSceneParam._m0[61u].z, fma(_1561, cbSceneParam._m0[61u].y, _1557 * cbSceneParam._m0[61u].x))) / _1773;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1774 >= cbSceneParam._m0[64u].x) && (_1775 >= cbSceneParam._m0[64u].y)) && (_1774 <= cbSceneParam._m0[64u].z)) && (_1775 <= cbSceneParam._m0[64u].w))
        {
            float _1914 = fma(_1569, cbSceneParam._m0[62u].w, fma(_1565, cbSceneParam._m0[62u].z, fma(_1561, cbSceneParam._m0[62u].y, _1557 * cbSceneParam._m0[62u].x))) / _1773;
            float _1918 = isnan(cbSceneParam._m0[41u].w) ? _1914 : (isnan(_1914) ? cbSceneParam._m0[41u].w : max(_1914, cbSceneParam._m0[41u].w));
            float _1961 = (cbSceneParam._m0[33u].x - sqrt(((_1571 * _1571) + (_1570 * _1570)) + (_1572 * _1572))) * cbSceneParam._m0[33u].y;
            float _4010 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
            float _1968 = (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1774, cbSceneParam._m0[33u].w + _1775), _1918), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1774, _1775 - cbSceneParam._m0[33u].z), _1918), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1774 - cbSceneParam._m0[33u].z, _1775 - cbSceneParam._m0[33u].w), _1918), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1774 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1775), _1918), 0.0)).x), vec4(0.25)));
            float _1972 = 1.0 - (_1968 * cbSceneParam._m0[34u].x);
            float _1973 = 1.0 - (_1968 * cbSceneParam._m0[34u].y);
            float _1974 = 1.0 - (_1968 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_1974) ? _1721 : (isnan(_1721) ? _1974 : min(_1721, _1974));
            frontier_phi_34_33_ladder_1 = isnan(_1973) ? _1720 : (isnan(_1720) ? _1973 : min(_1720, _1973));
            frontier_phi_34_33_ladder_2 = isnan(_1972) ? _1719 : (isnan(_1719) ? _1972 : min(_1719, _1972));
        }
        else
        {
            frontier_phi_34_33_ladder = _1721;
            frontier_phi_34_33_ladder_1 = _1720;
            frontier_phi_34_33_ladder_2 = _1719;
        }
        _1785 = frontier_phi_34_33_ladder_2;
        _1787 = frontier_phi_34_33_ladder_1;
        _1789 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1785 = _1719;
        _1787 = _1720;
        _1789 = _1721;
    }
    uvec4 _1794 = floatBitsToUint(cbInstanceData._m0[_447 + 5u]);
    uint _1796 = _1794.x * 14u;
    uint _1797 = _1796 + 13u;
    float _1804 = _488 + (-1.0);
    float _1809 = (cbLight._m0[_1797].x * _1804) + 1.0;
    float _1810 = (cbLight._m0[_1797].y * _1804) + 1.0;
    float _1811 = (cbLight._m0[_1797].z * _1804) + 1.0;
    float _1812 = (cbLight._m0[_1797].w * _1804) + 1.0;
    uint _1813 = _1796 + 5u;
    float _1819 = isnan(1.0) ? _1810 : (isnan(_1810) ? 1.0 : min(_1810, 1.0));
    uint _1823 = _1796 + 4u;
    float _1833 = isnan(1.0) ? _1809 : (isnan(_1809) ? 1.0 : min(_1809, 1.0));
    uint _1837 = _1796 | 1u;
    float _1848 = dot(vec3(cbLight._m0[_1796].xyz), vec3(_317, _318, _319));
    float _1851 = dot(vec3(cbLight._m0[_1837].xyz), vec3(_317, _318, _319));
    float _4046 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
    float _4057 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
    float _1856 = (isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0))) * 0.3183098733425140380859375;
    float _1858 = (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))) * 0.3183098733425140380859375;
    float _1865 = ((cbLight._m0[_1813].x * _1819) * _1858) + (((cbLight._m0[_1823].x * _1785) * _1833) * _1856);
    float _1866 = ((_1819 * cbLight._m0[_1813].y) * _1858) + (((cbLight._m0[_1823].y * _1787) * _1833) * _1856);
    float _1867 = ((_1819 * cbLight._m0[_1813].z) * _1858) + (((cbLight._m0[_1823].z * _1789) * _1833) * _1856);
    uvec4 _1871 = floatBitsToUint(cbLight._m0[_1796 + 12u]);
    bool _1873 = _1871.x == 0u;
    float _1975;
    float _1977;
    float _1979;
    if (_1873)
    {
        _1975 = _1865;
        _1977 = _1866;
        _1979 = _1867;
    }
    else
    {
        uint _1983 = _1796 + 6u;
        float _1999 = (dot(vec3(cbLight._m0[_1796 + 2u].xyz), vec3(_317, _318, _319)) * 0.5) + 0.5;
        float _2000 = _1999 * _1999;
        float _4068 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
        float _2001 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _2002 = isnan(1.0) ? _1811 : (isnan(_1811) ? 1.0 : min(_1811, 1.0));
        _1975 = (((cbLight._m0[_1983].x * 0.3183098733425140380859375) * _2001) * _2002) + _1865;
        _1977 = (((cbLight._m0[_1983].y * 0.3183098733425140380859375) * _2001) * _2002) + _1866;
        _1979 = (((cbLight._m0[_1983].z * 0.3183098733425140380859375) * _2001) * _2002) + _1867;
    }
    bool _1982 = _1871.y == 0u;
    float _2037;
    float _2039;
    float _2041;
    if (_1982)
    {
        _2037 = _1975;
        _2039 = _1977;
        _2041 = _1979;
    }
    else
    {
        uint _2210 = _1796 + 7u;
        float _2226 = (dot(vec3(cbLight._m0[_1796 + 3u].xyz), vec3(_317, _318, _319)) * 0.5) + 0.5;
        float _2227 = _2226 * _2226;
        float _4084 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
        float _2228 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _2229 = isnan(1.0) ? _1812 : (isnan(_1812) ? 1.0 : min(_1812, 1.0));
        _2037 = (((cbLight._m0[_2210].x * 0.3183098733425140380859375) * _2228) * _2229) + _1975;
        _2039 = (((cbLight._m0[_2210].y * 0.3183098733425140380859375) * _2228) * _2229) + _1977;
        _2041 = (((cbLight._m0[_2210].z * 0.3183098733425140380859375) * _2228) * _2229) + _1979;
    }
    uint _2044 = _1796 + 8u;
    float _2057 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1796].w)) * _320) * 0.949999988079071044921875);
    float _2058 = _2057 * _2057;
    float _2059 = cbLight._m0[_1796].x + _398;
    float _2060 = cbLight._m0[_1796].y + _399;
    float _2061 = cbLight._m0[_1796].z + _400;
    float _2065 = inversesqrt(dot(vec3(_2059, _2060, _2061), vec3(_2059, _2060, _2061)));
    float _2066 = _2065 * _2059;
    float _2067 = _2065 * _2060;
    float _2068 = _2065 * _2061;
    float _2069 = dot(vec3(_317, _318, _319), vec3(cbLight._m0[_1796].xyz));
    float _4100 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
    float _2072 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
    float _4111 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _2073 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
    float _2074 = dot(vec3(_317, _318, _319), vec3(_2066, _2067, _2068));
    float _4122 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
    float _2077 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
    float _2078 = dot(vec3(cbLight._m0[_1796].xyz), vec3(_2066, _2067, _2068));
    float _4133 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
    float _2082 = _2058 * _2058;
    float _2086 = ((_2077 * _2077) * (_2082 + (-1.0))) + 1.0;
    float _2094 = exp2(log2(1.0 - (isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0)))) * 5.0);
    float _2095 = 0.959999978542327880859375 - _470;
    float _2097 = 0.959999978542327880859375 - _471;
    float _2098 = 0.959999978542327880859375 - _472;
    float _2105 = 1.0 - _2058;
    float _2116 = (0.5 / (((_2073 * ((_2072 * _2105) + _2058)) + 9.9999999392252902907785028219223e-09) + (((_2073 * _2105) + _2058) * _2072))) * _2072;
    float _4144 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
    float _2118 = (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * (_2082 / ((_2086 * _2086) * 3.141590118408203125));
    uint _2132 = _1796 + 9u;
    float _2143 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1837].w)) * _320) * 0.949999988079071044921875);
    float _2144 = _2143 * _2143;
    float _2145 = cbLight._m0[_1837].x + _398;
    float _2146 = cbLight._m0[_1837].y + _399;
    float _2147 = cbLight._m0[_1837].z + _400;
    float _2151 = inversesqrt(dot(vec3(_2145, _2146, _2147), vec3(_2145, _2146, _2147)));
    float _2152 = _2151 * _2145;
    float _2153 = _2151 * _2146;
    float _2154 = _2151 * _2147;
    float _2155 = dot(vec3(_317, _318, _319), vec3(cbLight._m0[_1837].xyz));
    float _4155 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
    float _2158 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
    float _2159 = dot(vec3(_317, _318, _319), vec3(_2152, _2153, _2154));
    float _4166 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
    float _2162 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
    float _2163 = dot(vec3(cbLight._m0[_1837].xyz), vec3(_2152, _2153, _2154));
    float _4177 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
    float _2167 = _2144 * _2144;
    float _2171 = ((_2162 * _2162) * (_2167 + (-1.0))) + 1.0;
    float _2178 = exp2(log2(1.0 - (isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0)))) * 5.0);
    float _2185 = 1.0 - _2144;
    float _2195 = (0.5 / (((_2073 * ((_2158 * _2185) + _2144)) + 9.9999999392252902907785028219223e-09) + (((_2073 * _2185) + _2144) * _2158))) * _2158;
    float _4188 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
    float _2197 = (isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * (_2167 / ((_2171 * _2171) * 3.141590118408203125));
    float _2207 = (((((_2178 * _2095) + _473) * cbLight._m0[_2132].x) * _2197) * _1819) + ((((cbLight._m0[_2044].x * _1785) * ((_2094 * _2095) + _473)) * _2118) * _1833);
    float _2208 = (((((_2178 * _2097) + _475) * cbLight._m0[_2132].y) * _2197) * _1819) + ((((cbLight._m0[_2044].y * _1787) * ((_2094 * _2097) + _475)) * _2118) * _1833);
    float _2209 = (((((_2178 * _2098) + _476) * cbLight._m0[_2132].z) * _2197) * _1819) + ((((cbLight._m0[_2044].z * _1789) * ((_2094 * _2098) + _476)) * _2118) * _1833);
    float _2265;
    float _2267;
    float _2269;
    if (_1873)
    {
        _2265 = _2207;
        _2267 = _2208;
        _2269 = _2209;
    }
    else
    {
        uint _2271 = _1796 + 2u;
        uint _2275 = _1796 + 10u;
        float _2289 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2271].w)) * _320) * 0.949999988079071044921875);
        float _2290 = _2289 * _2289;
        float _2291 = cbLight._m0[_2271].x + _398;
        float _2292 = cbLight._m0[_2271].y + _399;
        float _2293 = cbLight._m0[_2271].z + _400;
        float _2297 = inversesqrt(dot(vec3(_2291, _2292, _2293), vec3(_2291, _2292, _2293)));
        float _2298 = _2297 * _2291;
        float _2299 = _2297 * _2292;
        float _2300 = _2297 * _2293;
        float _2301 = dot(vec3(_317, _318, _319), vec3(cbLight._m0[_2271].xyz));
        float _4199 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
        float _2304 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _2305 = dot(vec3(_317, _318, _319), vec3(_2298, _2299, _2300));
        float _4210 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
        float _2308 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _2309 = dot(vec3(cbLight._m0[_2271].xyz), vec3(_2298, _2299, _2300));
        float _4221 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
        float _2313 = _2290 * _2290;
        float _2317 = ((_2308 * _2308) * (_2313 + (-1.0))) + 1.0;
        float _2324 = exp2(log2(1.0 - (isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0)))) * 5.0);
        float _2331 = 1.0 - _2290;
        float _2341 = (0.5 / (((_2073 * ((_2304 * _2331) + _2290)) + 9.9999999392252902907785028219223e-09) + (((_2073 * _2331) + _2290) * _2304))) * _2304;
        float _4232 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
        float _2343 = (isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * (_2313 / ((_2317 * _2317) * 3.141590118408203125));
        float _2344 = isnan(1.0) ? _1811 : (isnan(_1811) ? 1.0 : min(_1811, 1.0));
        _2265 = (((((_2324 * _2095) + _473) * cbLight._m0[_2275].x) * _2343) * _2344) + _2207;
        _2267 = (((((_2324 * _2097) + _475) * cbLight._m0[_2275].y) * _2343) * _2344) + _2208;
        _2269 = (((((_2324 * _2098) + _476) * cbLight._m0[_2275].z) * _2343) * _2344) + _2209;
    }
    float _2375;
    float _2377;
    float _2379;
    if (_1982)
    {
        _2375 = _2265;
        _2377 = _2267;
        _2379 = _2269;
    }
    else
    {
        uint _2386 = _1796 + 3u;
        uint _2390 = _1796 + 11u;
        float _2404 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2386].w)) * _320) * 0.949999988079071044921875);
        float _2405 = _2404 * _2404;
        float _2406 = cbLight._m0[_2386].x + _398;
        float _2407 = cbLight._m0[_2386].y + _399;
        float _2408 = cbLight._m0[_2386].z + _400;
        float _2412 = inversesqrt(dot(vec3(_2406, _2407, _2408), vec3(_2406, _2407, _2408)));
        float _2413 = _2412 * _2406;
        float _2414 = _2412 * _2407;
        float _2415 = _2412 * _2408;
        float _2416 = dot(vec3(_317, _318, _319), vec3(cbLight._m0[_2386].xyz));
        float _4248 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
        float _2419 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
        float _2420 = dot(vec3(_317, _318, _319), vec3(_2413, _2414, _2415));
        float _4259 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
        float _2423 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
        float _2424 = dot(vec3(cbLight._m0[_2386].xyz), vec3(_2413, _2414, _2415));
        float _4270 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
        float _2428 = _2405 * _2405;
        float _2432 = ((_2423 * _2423) * (_2428 + (-1.0))) + 1.0;
        float _2439 = exp2(log2(1.0 - (isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0)))) * 5.0);
        float _2446 = 1.0 - _2405;
        float _2456 = (0.5 / (((_2073 * ((_2419 * _2446) + _2405)) + 9.9999999392252902907785028219223e-09) + (((_2073 * _2446) + _2405) * _2419))) * _2419;
        float _4281 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
        float _2458 = (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * (_2428 / ((_2432 * _2432) * 3.141590118408203125));
        float _2459 = isnan(1.0) ? _1812 : (isnan(_1812) ? 1.0 : min(_1812, 1.0));
        _2375 = (((((_2439 * _2095) + _473) * cbLight._m0[_2390].x) * _2458) * _2459) + _2265;
        _2377 = (((((_2439 * _2097) + _475) * cbLight._m0[_2390].y) * _2458) * _2459) + _2267;
        _2379 = (((((_2439 * _2098) + _476) * cbLight._m0[_2390].z) * _2458) * _2459) + _2269;
    }
    float _2525;
    float _2527;
    float _2529;
    float _2531;
    float _2533;
    float _2535;
    if (_1794.y == 0u)
    {
        uvec4 _2480 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2481 = _2480.x;
        uint _2492 = uint((float(_2480.y) * floor(float(uint(cbSceneParam._m0[85u].y * _407) / _2481))) + floor(float(uint(cbSceneParam._m0[85u].x * _406) / _2481)));
        float _2502 = (log2(_1572 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2503 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
        uint _2506 = uint(isnan(14.0) ? _2503 : (isnan(_2503) ? 14.0 : min(_2503, 14.0)));
        uvec4 _2511 = texelFetch(g_lightClusterGridBuffer, int(((_2506 << 2u) + (_2492 << 6u)) >> 2u));
        uint _2512 = _2511.x;
        uint _2513 = _2480.z;
        float _2627;
        float _2629;
        float _2631;
        float _2633;
        float _2635;
        float _2637;
        if (((((1u << ((_2513 >> 4u) & 15u)) + 4294967295u) & _2512) == 0u) || ((_2513 & 240u) == 0u))
        {
            _2627 = 0.0;
            _2629 = 0.0;
            _2631 = 0.0;
            _2633 = 0.0;
            _2635 = 0.0;
            _2637 = 0.0;
        }
        else
        {
            float _2628;
            float _2630;
            float _2632;
            float _2634;
            float _2636;
            float _2638;
            float _2781 = 0.0;
            float _2782 = 0.0;
            float _2783 = 0.0;
            float _2784 = 0.0;
            float _2785 = 0.0;
            float _2786 = 0.0;
            uint _2787 = 0u;
            uint _2796;
            bool _2797;
            for (;;)
            {
                _2796 = texelFetch(g_lightClassification, int((((_2506 << 5u) + (_2492 << 9u)) + (_2787 << 2u)) >> 2u)).x;
                _2797 = _2796 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2797)
                {
                    frontier_phi_66_pred = _2786;
                    frontier_phi_66_pred_1 = _2785;
                    frontier_phi_66_pred_2 = _2784;
                    frontier_phi_66_pred_3 = _2783;
                    frontier_phi_66_pred_4 = _2782;
                    frontier_phi_66_pred_5 = _2781;
                }
                else
                {
                    float _2905;
                    float _2906;
                    float _2907;
                    float _2908;
                    float _2909;
                    float _2910;
                    uint _2911;
                    _2905 = _2781;
                    _2906 = _2782;
                    _2907 = _2783;
                    _2908 = _2784;
                    _2909 = _2785;
                    _2910 = _2786;
                    _2911 = _2796;
                    float _2837;
                    float _2838;
                    float _2839;
                    float _2840;
                    float _2841;
                    float _2842;
                    for (;;)
                    {
                        uint _2915 = uint(findLSB(_2911)) + (_2787 << 5u);
                        uint _2912 = (_2911 + 4294967295u) & _2911;
                        uint _2917 = _2915 * 48u;
                        vec4 _2931 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2917)).x, texelFetch(g_PointLightRenderingBuffer, int(_2917 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2917 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2917 + 3u)).x));
                        uint _2937 = (_2915 * 48u) + 4u;
                        vec4 _2950 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2937)).x, texelFetch(g_PointLightRenderingBuffer, int(_2937 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2937 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2937 + 3u)).x));
                        uint _2956 = (_2915 * 48u) + 8u;
                        vec3 _2967 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2956)).x, texelFetch(g_PointLightRenderingBuffer, int(_2956 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2956 + 2u)).x));
                        float _2971 = _2931.x - _1570;
                        float _2972 = _2931.y - _1571;
                        float _2973 = _2931.z - _1572;
                        float _2974 = dot(vec3(_2971, _2972, _2973), vec3(_2971, _2972, _2973));
                        float _2977 = inversesqrt(_2974);
                        float _2978 = _2977 * _2971;
                        float _2979 = _2977 * _2972;
                        float _2980 = _2977 * _2973;
                        float _2981 = dot(vec3(_428, _431, _434), vec3(_2978, _2979, _2980));
                        float _2986 = 1.0 - (_2974 * _2931.w);
                        float _4307 = isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0));
                        float _2987 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
                        float _2988 = sqrt(_2974) * _2950.w;
                        float _2991 = 1.39999997615814208984375 / (_2988 + 1.39999997615814208984375);
                        float _2992 = _2991 * _2991;
                        float _2995 = ((1.0 - _2992) * _2981) + _2992;
                        float _2998 = _2988 * _2988;
                        float _3002 = ((isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0))) * _2987) / ((_2998 * 0.699999988079071044921875) + 1.0);
                        float _3006 = (-0.0) - _1570;
                        float _3007 = (-0.0) - _1571;
                        float _3008 = (-0.0) - _1572;
                        float _3012 = inversesqrt(dot(vec3(_3006, _3007, _3008), vec3(_3006, _3007, _3008)));
                        float _3013 = _3012 * _3006;
                        float _3014 = _3012 * _3007;
                        float _3015 = _3012 * _3008;
                        float _3022 = exp2(log2(1.0 / ((_2998 * 3.5) + 5.0)) * 0.25);
                        float _3023 = 1.0 - _504;
                        float _3030 = sqrt(1.0 - ((1.0 - (_3023 * _3023)) * (1.0 - (_3022 * _3022))));
                        float _3031 = _3030 * _3030;
                        float _3032 = _3031 * _3031;
                        float _3033 = _3013 + _2978;
                        float _3034 = _3014 + _2979;
                        float _3035 = _3015 + _2980;
                        float _3039 = inversesqrt(dot(vec3(_3033, _3034, _3035), vec3(_3033, _3034, _3035)));
                        float _3043 = dot(vec3(_428, _431, _434), vec3(_3013, _3014, _3015));
                        float _4323 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
                        float _3046 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
                        float _3047 = dot(vec3(_428, _431, _434), vec3(_3039 * _3033, _3039 * _3034, _3039 * _3035));
                        float _4334 = isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0));
                        float _3050 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
                        float _3054 = ((_3050 * _3050) * (_3032 + (-1.0))) + 1.0;
                        float _3055 = _2991 * _3031;
                        float _3056 = _3055 * _3055;
                        float _3059 = ((1.0 - _3056) * _2981) + _3056;
                        float _4345 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0));
                        float _3060 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
                        float _3061 = 1.0 - _3031;
                        float _3071 = (0.5 / (((_3060 * ((_3046 * _3061) + _3031)) + 9.9999999392252902907785028219223e-09) + (((_3060 * _3061) + _3031) * _3046))) * _3060;
                        float _4356 = isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0));
                        float _3082 = (((_3032 * 3.1415927410125732421875) * (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0)))) / ((_3054 * _3054) * ((_2998 * 2.1991131305694580078125) + 3.141590118408203125))) * _2987;
                        _2840 = (_3002 * _2950.x) + _2908;
                        _2841 = (_3002 * _2950.y) + _2909;
                        _2842 = (_3002 * _2950.z) + _2910;
                        _2837 = (_3082 * _2967.x) + _2905;
                        _2838 = (_3082 * _2967.y) + _2906;
                        _2839 = (_3082 * _2967.z) + _2907;
                        if (_2912 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2905 = _2837;
                            _2906 = _2838;
                            _2907 = _2839;
                            _2908 = _2840;
                            _2909 = _2841;
                            _2910 = _2842;
                            _2911 = _2912;
                        }
                    }
                    frontier_phi_66_pred = _2842;
                    frontier_phi_66_pred_1 = _2841;
                    frontier_phi_66_pred_2 = _2840;
                    frontier_phi_66_pred_3 = _2839;
                    frontier_phi_66_pred_4 = _2838;
                    frontier_phi_66_pred_5 = _2837;
                }
                _2638 = frontier_phi_66_pred;
                _2636 = frontier_phi_66_pred_1;
                _2634 = frontier_phi_66_pred_2;
                _2632 = frontier_phi_66_pred_3;
                _2630 = frontier_phi_66_pred_4;
                _2628 = frontier_phi_66_pred_5;
                uint _2788 = _2787 + 1u;
                if (_2788 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2781 = _2628;
                    _2782 = _2630;
                    _2783 = _2632;
                    _2784 = _2634;
                    _2785 = _2636;
                    _2786 = _2638;
                    _2787 = _2788;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2627 = _2628;
            _2629 = _2630;
            _2631 = _2632;
            _2633 = _2634;
            _2635 = _2636;
            _2637 = _2638;
        }
        uvec4 _2641 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2642 = _2641.z;
        uint _2644 = (_2642 >> 8u) & 15u;
        float _2749;
        float _2751;
        float _2753;
        float _2755;
        float _2757;
        float _2759;
        if (((4294967295u << _2644) & _2512) == 0u)
        {
            _2749 = _2627;
            _2751 = _2629;
            _2753 = _2631;
            _2755 = _2633;
            _2757 = _2635;
            _2759 = _2637;
        }
        else
        {
            float _2774 = inversesqrt(dot(vec3(_1570, _1571, _1572), vec3(_1570, _1571, _1572)));
            float _2775 = _2774 * _1570;
            float _2776 = _2774 * _1571;
            float _2777 = _2774 * _1572;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2644 < ((_2642 >> 12u) & 15u))
            {
                float _2750;
                float _2752;
                float _2754;
                float _2756;
                float _2758;
                float _2760;
                float _2888 = _2627;
                float _2889 = _2629;
                float _2890 = _2631;
                float _2891 = _2633;
                float _2892 = _2635;
                float _2893 = _2637;
                uint _2894 = _2644;
                uint _2903;
                bool _2904;
                for (;;)
                {
                    _2903 = texelFetch(g_lightClassification, int((((_2506 << 5u) + (_2492 << 9u)) + (_2894 << 2u)) >> 2u)).x;
                    _2904 = _2903 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2904)
                    {
                        frontier_phi_72_pred = _2893;
                        frontier_phi_72_pred_1 = _2892;
                        frontier_phi_72_pred_2 = _2891;
                        frontier_phi_72_pred_3 = _2890;
                        frontier_phi_72_pred_4 = _2889;
                        frontier_phi_72_pred_5 = _2888;
                    }
                    else
                    {
                        float _3087;
                        float _3088;
                        float _3089;
                        float _3090;
                        float _3091;
                        float _3092;
                        float _3383;
                        float _3384;
                        float _3385;
                        float _3386;
                        float _3387;
                        float _3388;
                        float _3100 = _2888;
                        float _3101 = _2889;
                        float _3102 = _2890;
                        float _3103 = _2891;
                        float _3104 = _2892;
                        float _3105 = _2893;
                        uint _3106 = _2903;
                        uint _3107;
                        vec4 _3132;
                        float _3133;
                        vec4 _3148;
                        vec3 _3160;
                        vec4 _3176;
                        vec4 _3192;
                        float _3239;
                        bool _3240;
                        for (;;)
                        {
                            uint _3117 = ((_2894 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3106));
                            _3107 = (_3106 + 4294967295u) & _3106;
                            uint _3119 = _3117 * 40u;
                            _3132 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3119)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 3u)).x));
                            _3133 = _3132.w;
                            uint _3135 = (_3117 * 40u) + 4u;
                            _3148 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3135)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 3u)).x));
                            uint _3150 = (_3117 * 40u) + 8u;
                            _3160 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3150)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 2u)).x));
                            uint _3163 = (_3117 * 40u) + 16u;
                            _3176 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3163)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 3u)).x));
                            uint _3179 = (_3117 * 40u) + 20u;
                            _3192 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3179)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 3u)).x));
                            uint _3195 = (_3117 * 40u) + 24u;
                            vec4 _3208 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3195)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 3u)).x));
                            uint _3214 = (_3117 * 40u) + 28u;
                            vec4 _3227 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3214)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 3u)).x));
                            _3239 = fma(_1572, _3227.z, fma(_1571, _3227.y, _3227.x * _1570)) + _3227.w;
                            _3240 = !((fma(_1572, _3208.z, fma(_1571, _3208.y, _3208.x * _1570)) + _3208.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3240)
                            {
                                float _3267 = _3132.x - _1570;
                                float _3268 = _3132.y - _1571;
                                float _3269 = _3132.z - _1572;
                                float _3270 = dot(vec3(_3267, _3268, _3269), vec3(_3267, _3268, _3269));
                                float _3273 = inversesqrt(_3270);
                                float _3274 = _3273 * _3267;
                                float _3275 = _3273 * _3268;
                                float _3276 = _3273 * _3269;
                                float _3280 = 1.0 - (_3270 / (_3133 * _3133));
                                float _4367 = isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0));
                                float _3281 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
                                float _3285 = sqrt(_3270) * _3148.w;
                                float _3287 = 1.39999997615814208984375 / (_3285 + 1.39999997615814208984375);
                                float _3288 = _3287 * _3287;
                                float _3291 = ((1.0 - _3288) * dot(vec3(_3274, _3275, _3276), vec3(_428, _431, _434))) + _3288;
                                float _3294 = _3285 * _3285;
                                float _3298 = (fma(_1572, _3176.z, fma(_1571, _3176.y, _3176.x * _1570)) + _3176.w) / _3239;
                                float _3299 = (fma(_1572, _3192.z, fma(_1571, _3192.y, _3192.x * _1570)) + _3192.w) / _3239;
                                float _3303 = 1.0 - dot(vec2(_3298, _3299), vec2(_3298, _3299));
                                float _4383 = isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0));
                                float _3304 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
                                float _3305 = _3304 * (((isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0))) * _3281) / ((_3294 * 0.699999988079071044921875) + 1.0));
                                float _3317 = exp2(log2(1.0 / ((_3294 * 3.5) + 5.0)) * 0.25);
                                float _3318 = 1.0 - _504;
                                float _3325 = sqrt(1.0 - ((1.0 - (_3318 * _3318)) * (1.0 - (_3317 * _3317))));
                                float _3326 = _3325 * _3325;
                                float _3327 = _3326 * _3326;
                                float _3328 = _3274 - _2775;
                                float _3329 = _3275 - _2776;
                                float _3330 = _3276 - _2777;
                                float _3334 = inversesqrt(dot(vec3(_3328, _3329, _3330), vec3(_3328, _3329, _3330)));
                                float _3338 = dot(vec3(_428, _431, _434), vec3((-0.0) - _2775, (-0.0) - _2776, (-0.0) - _2777));
                                float _4394 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0));
                                float _3341 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
                                float _3342 = dot(vec3(_428, _431, _434), vec3(_3334 * _3328, _3334 * _3329, _3334 * _3330));
                                float _4405 = isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0));
                                float _3345 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
                                float _3349 = ((_3345 * _3345) * (_3327 + (-1.0))) + 1.0;
                                float _3350 = _3287 * _3326;
                                float _3351 = _3350 * _3350;
                                float _3357 = ((1.0 - _3351) * dot(vec3(_428, _431, _434), vec3(_3274, _3275, _3276))) + _3351;
                                float _4416 = isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0));
                                float _3358 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
                                float _3359 = 1.0 - _3326;
                                float _3369 = (0.5 / (((_3358 * ((_3341 * _3359) + _3326)) + 9.9999999392252902907785028219223e-09) + (((_3358 * _3359) + _3326) * _3341))) * _3358;
                                float _4427 = isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0));
                                float _3379 = (_3304 * _3281) * (((_3327 * 3.1415927410125732421875) * (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0)))) / ((_3349 * _3349) * ((_3294 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3305 * _3148.y;
                                frontier_phi_78_pred_1 = _3305 * _3148.x;
                                frontier_phi_78_pred_2 = _3379 * _3160.z;
                                frontier_phi_78_pred_3 = _3379 * _3160.y;
                                frontier_phi_78_pred_4 = _3379 * _3160.x;
                                frontier_phi_78_pred_5 = _3305 * _3148.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3387 = frontier_phi_78_pred;
                            _3386 = frontier_phi_78_pred_1;
                            _3385 = frontier_phi_78_pred_2;
                            _3384 = frontier_phi_78_pred_3;
                            _3383 = frontier_phi_78_pred_4;
                            _3388 = frontier_phi_78_pred_5;
                            _3090 = _3386 + _3103;
                            _3091 = _3387 + _3104;
                            _3092 = _3388 + _3105;
                            _3087 = _3383 + _3100;
                            _3088 = _3384 + _3101;
                            _3089 = _3385 + _3102;
                            if (_3107 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3100 = _3087;
                                _3101 = _3088;
                                _3102 = _3089;
                                _3103 = _3090;
                                _3104 = _3091;
                                _3105 = _3092;
                                _3106 = _3107;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3092;
                        frontier_phi_72_pred_1 = _3091;
                        frontier_phi_72_pred_2 = _3090;
                        frontier_phi_72_pred_3 = _3089;
                        frontier_phi_72_pred_4 = _3088;
                        frontier_phi_72_pred_5 = _3087;
                    }
                    _2760 = frontier_phi_72_pred;
                    _2758 = frontier_phi_72_pred_1;
                    _2756 = frontier_phi_72_pred_2;
                    _2754 = frontier_phi_72_pred_3;
                    _2752 = frontier_phi_72_pred_4;
                    _2750 = frontier_phi_72_pred_5;
                    uint _2895 = _2894 + 1u;
                    if (_2895 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2888 = _2750;
                        _2889 = _2752;
                        _2890 = _2754;
                        _2891 = _2756;
                        _2892 = _2758;
                        _2893 = _2760;
                        _2894 = _2895;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2760;
                frontier_phi_60_61_ladder_1 = _2758;
                frontier_phi_60_61_ladder_2 = _2754;
                frontier_phi_60_61_ladder_3 = _2752;
                frontier_phi_60_61_ladder_4 = _2750;
                frontier_phi_60_61_ladder_5 = _2756;
            }
            else
            {
                frontier_phi_60_61_ladder = _2637;
                frontier_phi_60_61_ladder_1 = _2635;
                frontier_phi_60_61_ladder_2 = _2631;
                frontier_phi_60_61_ladder_3 = _2629;
                frontier_phi_60_61_ladder_4 = _2627;
                frontier_phi_60_61_ladder_5 = _2633;
            }
            _2749 = frontier_phi_60_61_ladder_4;
            _2751 = frontier_phi_60_61_ladder_3;
            _2753 = frontier_phi_60_61_ladder_2;
            _2755 = frontier_phi_60_61_ladder_5;
            _2757 = frontier_phi_60_61_ladder_1;
            _2759 = frontier_phi_60_61_ladder;
        }
        float _2764 = isnan(1.0) ? _488 : (isnan(_488) ? 1.0 : min(_488, 1.0));
        _2525 = (_2764 * _2755) + _2037;
        _2527 = (_2764 * _2757) + _2039;
        _2529 = (_2764 * _2759) + _2041;
        _2531 = ((_2749 * _473) * _2764) + _2375;
        _2533 = ((_2751 * _475) * _2764) + _2377;
        _2535 = ((_2753 * _476) * _2764) + _2379;
    }
    else
    {
        _2525 = _2037;
        _2527 = _2039;
        _2529 = _2041;
        _2531 = _2375;
        _2533 = _2377;
        _2535 = _2379;
    }
    uint _2541 = _449 + uint(cbMatDynParam._m0[0u].w);
    float _2549 = ((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _299.x) * cbInstanceData._m0[_2541].x;
    float _2552 = ((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _299.y) * cbInstanceData._m0[_2541].y;
    float _2555 = ((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _299.z) * cbInstanceData._m0[_2541].z;
    float _4443 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _4454 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _4465 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _2572 = (((isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * (_2525 + ((isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0))) * _488))) + ((_2531 + ((isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0))) * _1298)) * cbPerFrame._m0[3u].x)) + _2549;
    float _2574 = (_2552 + ((_2533 + ((isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0))) * _1298)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0))) * (_2527 + ((isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0))) * _488)));
    float _2576 = (_2555 + ((_2535 + ((isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0))) * _1298)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0))) * (_2529 + ((isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0))) * _488)));
    float _4491 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2589 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
    uint _2590 = _447 + 6u;
    float _2598 = _406 / cbSceneParam._m0[86u].x;
    float _2599 = _407 / cbSceneParam._m0[86u].y;
    vec4 _2613 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2598, _2599, (log2((isnan(cbSceneParam._m0[77u].w) ? _340 : (isnan(_340) ? cbSceneParam._m0[77u].w : min(_340, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2615 = _2613.x;
    float _2616 = _2613.y;
    float _2617 = _2613.z;
    float _2618 = _2613.w;
    float _2690;
    float _2692;
    float _2694;
    float _2696;
    if (_340 > cbSceneParam._m0[78u].w)
    {
        float _2652 = isnan(_340) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _340 : min(cbSceneParam._m0[80u].w, _340));
        float _2653 = _2652 / _340;
        float _2664 = _2653 * _391;
        float _2665 = _392 * _2653;
        float _2666 = (-0.0) - _2665;
        float _2668 = _2653 * _393;
        float _2670 = (cbSceneParam._m0[77u].w * _2666) / _2652;
        float _2671 = _2670 + cbSceneParam._m0[79u].w;
        float _2672 = cbSceneParam._m0[79u].w - _2665;
        float _2678 = sqrt(((_2664 * _2664) + (_2665 * _2665)) + (_2668 * _2668));
        float _2681 = (1.0 - (cbSceneParam._m0[77u].w / _2652)) * _2678;
        float _2686 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2688 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2850;
        if (abs((_2666 - _2670) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2850 = ((((_2671 > 0.0) ? exp2(_2686 * _2671) : (2.0 - exp2(_2688 * _2671))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2681;
        }
        else
        {
            float _2810 = 1.0 / cbSceneParam._m0[80u].x;
            float _2811 = isnan(_2672) ? _2671 : (isnan(_2671) ? _2672 : max(_2671, _2672));
            float _2812 = isnan(_2672) ? _2671 : (isnan(_2671) ? _2672 : min(_2671, _2672));
            float _2821 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : min(_2811, 0.0));
            float _2822 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : min(_2812, 0.0));
            _2850 = ((abs(_2678 / _2666) * cbSceneParam._m0[80u].y) * ((((_2821 - _2822) * 2.0) - ((exp2(_2686 * (isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0)))) - exp2(_2686 * (isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0))))) * _2810)) - ((exp2(_2688 * _2821) - exp2(_2688 * _2822)) * _2810))) + (_2681 * cbSceneParam._m0[80u].z);
        }
        vec4 _2852 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2598, _2599, 1.0), 0.0);
        float _2861 = exp2((_2850 * (-1.44269502162933349609375)) * (1.0 - _2852.w));
        float _2862 = log2(_2861);
        float _2878 = log2(_2618);
        _2690 = (exp2(_2878 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2862 * cbSceneParam._m0[78u].x)) * _2852.x) / cbSceneParam._m0[78u].x)) + _2615;
        _2692 = (exp2(_2878 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2862 * cbSceneParam._m0[78u].y)) * _2852.y) / cbSceneParam._m0[78u].y)) + _2616;
        _2694 = (exp2(_2878 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2862 * cbSceneParam._m0[78u].z)) * _2852.z) / cbSceneParam._m0[78u].z)) + _2617;
        _2696 = _2861 * _2618;
    }
    else
    {
        _2690 = _2615;
        _2692 = _2616;
        _2694 = _2617;
        _2696 = _2618;
    }
    float _2708 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2709 = _2708 == 3.0;
    float _2710 = log2(_2696);
    float _2714 = exp2(_2710 * cbSceneParam._m0[78u].x);
    float _2715 = exp2(_2710 * cbSceneParam._m0[78u].y);
    float _2716 = exp2(_2710 * cbSceneParam._m0[78u].z);
    float _2717 = _2714 * (isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0)));
    float _2718 = _2715 * (isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0)));
    float _2719 = _2716 * (isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0)));
    float _2728 = (_2708 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2728 * (_2709 ? _2717 : (_2717 + (cbSceneParam._m0[72u].w * _2690)));
    SV_Target.y = _2728 * (_2709 ? _2718 : (_2718 + (cbSceneParam._m0[72u].w * _2692)));
    SV_Target.z = _2728 * (_2709 ? _2719 : (_2719 + (cbSceneParam._m0[72u].w * _2694)));
    SV_Target.w = cbInstanceData._m0[_2590].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2549) * _2589) * _2714) * _2728;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2552) * _2589) * _2715) * _2728;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2555) * _2589) * _2716) * _2728;
    SV_Target_1.w = cbInstanceData._m0[_2590].w;
}


