#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M0_M1_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _913;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _192 = _191 * _184;
    float _193 = _191 * _185;
    float _194 = _191 * _186;
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _206 = _205 * TANGENT.x;
    float _207 = _205 * TANGENT.y;
    float _208 = _205 * TANGENT.z;
    float _213;
    float _214;
    float _215;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
    }
    else
    {
        _213 = _199;
        _214 = _200;
        _215 = _201;
    }
    vec4 _235 = texture(sampler2D(M_AMSN_M0_M1_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _241 = _235.x * cbMtdParam._m0[9u].x;
    float _242 = _235.y * cbMtdParam._m0[9u].y;
    float _243 = _235.z * cbMtdParam._m0[9u].z;
    vec4 _264 = texture(sampler2D(M_AMSN_M0_M1_Snow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _268 = _264.z;
    float _272 = (_264.x * 2.0) + (-1.0);
    float _274 = (_264.y * 2.0) + (-1.0);
    float _275 = dot(vec2(_272, _274), vec2(_272, _274));
    float _3251 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _281 = sqrt(1.0 - (isnan(1.0) ? _3251 : (isnan(_3251) ? 1.0 : min(_3251, 1.0))));
    float _284 = fma(_281, _213, fma(_274, _206, _272 * _192));
    float _287 = fma(_281, _214, fma(_274, _207, _272 * _193));
    float _290 = fma(_281, _215, fma(_274, _208, _272 * _194));
    float _294 = inversesqrt(dot(vec3(_284, _287, _290), vec3(_284, _287, _290)));
    float _302 = cbMtdParam._m0[10u].x + dot(vec4(_294 * _284, _294 * _287, _294 * _290, 0.0), vec4(cbMtdParam._m0[10u].zw, cbMtdParam._m0[11u].x, 0.0));
    float _3262 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _303 = isnan(1.0) ? _3262 : (isnan(_3262) ? 1.0 : min(_3262, 1.0));
    vec4 _315 = texture(sampler2D(M_AMSN_M0_M1_Snow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _326 = ((_315.x - _241) * _303) + _241;
    float _327 = ((_315.y - _242) * _303) + _242;
    float _328 = ((_315.z - _243) * _303) + _243;
    vec4 _341 = texture(sampler2D(M_AMSN_M0_M1_Snow_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _348 = (_341.x * 2.0) + (-1.0);
    float _349 = (_341.y * 2.0) + (-1.0);
    float _350 = dot(vec2(_348, _349), vec2(_348, _349));
    float _3273 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
    float _358 = ((_341.z - _268) * _303) + _268;
    float _367 = ((sqrt(1.0 - (isnan(1.0) ? _3273 : (isnan(_3273) ? 1.0 : min(_3273, 1.0)))) - _281) * _303) + _281;
    float _371 = (((_348 - _272) * _303) + _272) + (cbMtdParam._m0[10u].y * _272);
    float _372 = (((_349 - _274) * _303) + _274) + (cbMtdParam._m0[10u].y * _274);
    float _375 = fma(_367, _213, fma(_372, _206, _371 * _192));
    float _378 = fma(_367, _214, fma(_372, _207, _371 * _193));
    float _381 = fma(_367, _215, fma(_372, _208, _371 * _194));
    float _385 = inversesqrt(dot(vec3(_375, _378, _381), vec3(_375, _378, _381)));
    float _386 = _385 * _375;
    float _387 = _385 * _378;
    float _388 = _385 * _381;
    float _3284 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    float _389 = isnan(1.0) ? _3284 : (isnan(_3284) ? 1.0 : min(_3284, 1.0));
    float _3295 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _3306 = isnan(0.0) ? _327 : (isnan(_327) ? 0.0 : max(_327, 0.0));
    float _3317 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _408 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _449 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _459 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _449);
    float _460 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _449);
    float _461 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _449);
    float _465 = inversesqrt(dot(vec3(_459, _460, _461), vec3(_459, _460, _461)));
    float _466 = _459 * _465;
    float _467 = _460 * _465;
    float _468 = _461 * _465;
    float _474 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _475 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _496 = fma(_388, cbSceneParam._m0[5u].z, fma(_387, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _386));
    float _499 = fma(_388, cbSceneParam._m0[6u].z, fma(_387, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _386));
    float _502 = fma(_388, cbSceneParam._m0[7u].z, fma(_387, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _386));
    uint _515 = uint(roundEven(NORMAL.w)) * 13u;
    uint _518 = (_515 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _524 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3295 : (isnan(_3295) ? 1.0 : min(_3295, 1.0)))) * cbInstanceData._m0[_518].x;
    float _525 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3306 : (isnan(_3306) ? 1.0 : min(_3306, 1.0)))) * cbInstanceData._m0[_518].y;
    float _526 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3317 : (isnan(_3317) ? 1.0 : min(_3317, 1.0)))) * cbInstanceData._m0[_518].z;
    float _3328 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _527 = isnan(1.0) ? _3328 : (isnan(_3328) ? 1.0 : min(_3328, 1.0));
    float _3339 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _528 = isnan(1.0) ? _3339 : (isnan(_3339) ? 1.0 : min(_3339, 1.0));
    float _3350 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _529 = isnan(1.0) ? _3350 : (isnan(_3350) ? 1.0 : min(_3350, 1.0));
    vec4 _538 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _474, cbSceneParam._m0[86u].y * _475));
    float _541 = _538.x * TEXCOORD.z;
    float _542 = dot(vec3(_386, _387, _388), vec3(_466, _467, _468));
    float _545 = _542 * 2.0;
    float _549 = (_545 * _386) - _466;
    float _550 = (_545 * _387) - _467;
    float _551 = (_545 * _388) - _468;
    float _555 = abs(dot(vec3(_466, _467, _468), vec3(_386, _387, _388)));
    float _3361 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _557 = sqrt(_389);
    float _570 = exp2((_557 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_557 * 3.0));
    float _602 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _606 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _610 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _912;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    float _919;
    float _920;
    float _921;
    float _922;
    float _923;
    float _924;
    float _925;
    float _926;
    float _927;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _637 = fma(_610, cbModelParam._m0[26u].z, fma(_606, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _602));
        float _641 = fma(_610, cbModelParam._m0[27u].z, fma(_606, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _602));
        float _645 = fma(_610, cbModelParam._m0[28u].z, fma(_606, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _602));
        float _670 = _602 + _386;
        float _671 = _606 + _387;
        float _672 = _610 + _388;
        float _682 = fma(_672, cbModelParam._m0[26u].z, fma(_671, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _670)) - _637;
        float _683 = fma(_672, cbModelParam._m0[27u].z, fma(_671, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _670)) - _641;
        float _684 = fma(_672, cbModelParam._m0[28u].z, fma(_671, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _670)) - _645;
        float _688 = inversesqrt(dot(vec3(_682, _683, _684), vec3(_682, _683, _684)));
        float _701 = ((_688 * _682) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_637 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _702 = ((_688 * _683) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_641 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _703 = ((_688 * _684) / cbModelParam._m0[34u].z) + ((((((_645 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _706 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_701, _702, _703), 0.0);
        vec4 _713 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_701, _702, _703), 0.0);
        vec4 _720 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_701, _702, _703), 0.0);
        vec4 _727 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_701, _702, _703), 0.0);
        float _740 = exp2((_706.w + (-0.5)) * 20.0) * 2.0;
        float _741 = _740 * (_706.x + (-0.5));
        float _742 = _740 * (_706.y + (-0.5));
        float _743 = _740 * (_706.z + (-0.5));
        float _750 = exp2((_713.w + (-0.5)) * 20.0) * 2.0;
        float _751 = _750 * (_713.x + (-0.5));
        float _752 = _750 * (_713.y + (-0.5));
        float _753 = _750 * (_713.z + (-0.5));
        float _760 = exp2((_720.w + (-0.5)) * 20.0) * 2.0;
        float _761 = _760 * (_720.x + (-0.5));
        float _762 = _760 * (_720.y + (-0.5));
        float _763 = _760 * (_720.z + (-0.5));
        float _770 = exp2((_727.w + (-0.5)) * 20.0) * 2.0;
        float _771 = _770 * (_727.x + (-0.5));
        float _772 = _770 * (_727.y + (-0.5));
        float _773 = _770 * (_727.z + (-0.5));
        float _774 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
        float _775 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _776 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
        float _777 = _741 * 0.5;
        float _778 = _751 * 0.5;
        float _779 = _761 * 0.5;
        float _780 = dot(vec3(_777, _778, _779), vec3(_777, _778, _779));
        float _785 = (_780 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_780);
        float _794 = (dot(vec3(_386, _387, _388), vec3(_785 * _777, _785 * _778, _785 * _779)) + 1.0) * 0.5;
        float _3387 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
        float _804 = sqrt(((_778 * _778) + (_777 * _777)) + (_779 * _779)) / (_774 + 9.9999997473787516355514526367188e-06);
        float _3398 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
        float _805 = isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0));
        float _806 = _805 * 2.0;
        float _810 = (1.0 - _805) / (_805 + 1.0);
        float _3409 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
        float _811 = isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0));
        float _820 = ((((1.0 - _811) * (_806 + 2.0)) * exp2(log2(isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0))) * (_806 + 1.0))) + _811) * _774;
        float _821 = _742 * 0.5;
        float _822 = _752 * 0.5;
        float _823 = _762 * 0.5;
        float _824 = dot(vec3(_821, _822, _823), vec3(_821, _822, _823));
        float _829 = (_824 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_824);
        float _837 = (dot(vec3(_386, _387, _388), vec3(_829 * _821, _829 * _822, _829 * _823)) + 1.0) * 0.5;
        float _3420 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _846 = sqrt(((_822 * _822) + (_821 * _821)) + (_823 * _823)) / (_775 + 9.9999997473787516355514526367188e-06);
        float _3431 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
        float _847 = isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0));
        float _848 = _847 * 2.0;
        float _852 = (1.0 - _847) / (_847 + 1.0);
        float _3442 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
        float _853 = isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0));
        float _862 = ((((1.0 - _853) * (_848 + 2.0)) * exp2(log2(isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0))) * (_848 + 1.0))) + _853) * _775;
        float _863 = _743 * 0.5;
        float _864 = _753 * 0.5;
        float _865 = _763 * 0.5;
        float _866 = dot(vec3(_863, _864, _865), vec3(_863, _864, _865));
        float _871 = (_866 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_866);
        float _879 = (dot(vec3(_386, _387, _388), vec3(_871 * _863, _871 * _864, _871 * _865)) + 1.0) * 0.5;
        float _3453 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        float _888 = sqrt(((_864 * _864) + (_863 * _863)) + (_865 * _865)) / (_776 + 9.9999997473787516355514526367188e-06);
        float _3464 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _889 = isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0));
        float _890 = _889 * 2.0;
        float _894 = (1.0 - _889) / (_889 + 1.0);
        float _3475 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _895 = isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0));
        float _904 = ((((1.0 - _895) * (_890 + 2.0)) * exp2(log2(isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0))) * (_890 + 1.0))) + _895) * _776;
        _912 = _743;
        _914 = _742;
        _915 = _741;
        _916 = _753;
        _917 = _752;
        _918 = _751;
        _919 = _763;
        _920 = _762;
        _921 = _761;
        _922 = _776;
        _923 = _775;
        _924 = _774;
        _925 = cbModelParam._m0[36u].z * (isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0)));
        _926 = cbModelParam._m0[36u].z * (isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0)));
        _927 = cbModelParam._m0[36u].z * (isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0)));
    }
    else
    {
        _912 = _913;
        _914 = _913;
        _915 = _913;
        _916 = _913;
        _917 = _913;
        _918 = _913;
        _919 = _913;
        _920 = _913;
        _921 = _913;
        _922 = _913;
        _923 = _913;
        _924 = _913;
        _925 = 0.0;
        _926 = 0.0;
        _927 = 0.0;
    }
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _953 = fma(_610, cbModelParam._m0[30u].z, fma(_606, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _602));
        float _957 = fma(_610, cbModelParam._m0[31u].z, fma(_606, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _602));
        float _961 = fma(_610, cbModelParam._m0[32u].z, fma(_606, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _602));
        float _984 = _602 + _386;
        float _985 = _606 + _387;
        float _986 = _610 + _388;
        float _996 = fma(_986, cbModelParam._m0[30u].z, fma(_985, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _984)) - _953;
        float _997 = fma(_986, cbModelParam._m0[31u].z, fma(_985, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _984)) - _957;
        float _998 = fma(_986, cbModelParam._m0[32u].z, fma(_985, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _984)) - _961;
        float _1002 = inversesqrt(dot(vec3(_996, _997, _998), vec3(_996, _997, _998)));
        float _1015 = ((_1002 * _996) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_953 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1016 = ((_1002 * _997) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_957 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1017 = ((_1002 * _998) / cbModelParam._m0[35u].z) + ((((((_961 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1019 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1015, _1016, _1017), 0.0);
        vec4 _1026 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1015, _1016, _1017), 0.0);
        vec4 _1033 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1015, _1016, _1017), 0.0);
        vec4 _1040 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1015, _1016, _1017), 0.0);
        float _1052 = exp2((_1019.w + (-0.5)) * 20.0) * 2.0;
        float _1053 = _1052 * (_1019.x + (-0.5));
        float _1054 = _1052 * (_1019.y + (-0.5));
        float _1055 = _1052 * (_1019.z + (-0.5));
        float _1062 = exp2((_1026.w + (-0.5)) * 20.0) * 2.0;
        float _1063 = _1062 * (_1026.x + (-0.5));
        float _1064 = _1062 * (_1026.y + (-0.5));
        float _1065 = _1062 * (_1026.z + (-0.5));
        float _1072 = exp2((_1033.w + (-0.5)) * 20.0) * 2.0;
        float _1073 = _1072 * (_1033.x + (-0.5));
        float _1074 = _1072 * (_1033.y + (-0.5));
        float _1075 = _1072 * (_1033.z + (-0.5));
        float _1082 = exp2((_1040.w + (-0.5)) * 20.0) * 2.0;
        float _1083 = _1082 * (_1040.x + (-0.5));
        float _1084 = _1082 * (_1040.y + (-0.5));
        float _1085 = _1082 * (_1040.z + (-0.5));
        float _1086 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1087 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1088 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1089 = _1053 * 0.5;
        float _1090 = _1063 * 0.5;
        float _1091 = _1073 * 0.5;
        float _1092 = dot(vec3(_1089, _1090, _1091), vec3(_1089, _1090, _1091));
        float _1097 = (_1092 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1092);
        float _1105 = (dot(vec3(_386, _387, _388), vec3(_1097 * _1089, _1097 * _1090, _1097 * _1091)) + 1.0) * 0.5;
        float _3516 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1114 = sqrt(((_1090 * _1090) + (_1089 * _1089)) + (_1091 * _1091)) / (_1086 + 9.9999997473787516355514526367188e-06);
        float _3527 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0));
        float _1116 = _1115 * 2.0;
        float _1120 = (1.0 - _1115) / (_1115 + 1.0);
        float _3538 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1121 = isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0));
        float _1130 = ((((1.0 - _1121) * (_1116 + 2.0)) * exp2(log2(isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0))) * (_1116 + 1.0))) + _1121) * _1086;
        float _1131 = _1054 * 0.5;
        float _1132 = _1064 * 0.5;
        float _1133 = _1074 * 0.5;
        float _1134 = dot(vec3(_1131, _1132, _1133), vec3(_1131, _1132, _1133));
        float _1139 = (_1134 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1134);
        float _1147 = (dot(vec3(_386, _387, _388), vec3(_1139 * _1131, _1139 * _1132, _1139 * _1133)) + 1.0) * 0.5;
        float _3549 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1156 = sqrt(((_1132 * _1132) + (_1131 * _1131)) + (_1133 * _1133)) / (_1087 + 9.9999997473787516355514526367188e-06);
        float _3560 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
        float _1158 = _1157 * 2.0;
        float _1162 = (1.0 - _1157) / (_1157 + 1.0);
        float _3571 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1163 = isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0));
        float _1172 = ((((1.0 - _1163) * (_1158 + 2.0)) * exp2(log2(isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0))) * (_1158 + 1.0))) + _1163) * _1087;
        float _1173 = _1055 * 0.5;
        float _1174 = _1065 * 0.5;
        float _1175 = _1075 * 0.5;
        float _1176 = dot(vec3(_1173, _1174, _1175), vec3(_1173, _1174, _1175));
        float _1181 = (_1176 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1176);
        float _1189 = (dot(vec3(_386, _387, _388), vec3(_1181 * _1173, _1181 * _1174, _1181 * _1175)) + 1.0) * 0.5;
        float _3582 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1198 = sqrt(((_1174 * _1174) + (_1173 * _1173)) + (_1175 * _1175)) / (_1088 + 9.9999997473787516355514526367188e-06);
        float _3593 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0));
        float _1200 = _1199 * 2.0;
        float _1204 = (1.0 - _1199) / (_1199 + 1.0);
        float _3604 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1205 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
        float _1214 = ((((1.0 - _1205) * (_1200 + 2.0)) * exp2(log2(isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0))) * (_1200 + 1.0))) + _1205) * _1088;
        _1222 = _1055;
        _1223 = _1054;
        _1224 = _1053;
        _1225 = _1065;
        _1226 = _1064;
        _1227 = _1063;
        _1228 = _1075;
        _1229 = _1074;
        _1230 = _1073;
        _1231 = _1088;
        _1232 = _1087;
        _1233 = _1086;
        _1234 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0)));
        _1235 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0)));
        _1236 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0)));
    }
    else
    {
        _1222 = _913;
        _1223 = _913;
        _1224 = _913;
        _1225 = _913;
        _1226 = _913;
        _1227 = _913;
        _1228 = _913;
        _1229 = _913;
        _1230 = _913;
        _1231 = _913;
        _1232 = _913;
        _1233 = _913;
        _1234 = 0.0;
        _1235 = 0.0;
        _1236 = 0.0;
    }
    float _1246 = (cbModelParam._m0[1u].x * (_1234 - _925)) + _925;
    float _1247 = (cbModelParam._m0[1u].x * (_1235 - _926)) + _926;
    float _1248 = (cbModelParam._m0[1u].x * (_1236 - _927)) + _927;
    float _1269 = fma(_1248, cbSceneParam._m0[89u].z, fma(_1247, cbSceneParam._m0[89u].y, _1246 * cbSceneParam._m0[89u].x));
    float _1272 = fma(_1248, cbSceneParam._m0[90u].z, fma(_1247, cbSceneParam._m0[90u].y, _1246 * cbSceneParam._m0[90u].x));
    float _1275 = fma(_1248, cbSceneParam._m0[91u].z, fma(_1247, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1246));
    float _1290 = _549 * 0.5;
    float _1291 = _550 * 0.5;
    float _1292 = _551 * 0.5;
    float _1293 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_1224, _1227, _1230, _1233));
    float _1296 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_1223, _1226, _1229, _1232));
    float _1299 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_1222, _1225, _1228, _1231));
    float _1333;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1306 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_912, _916, _919, _922));
        float _1310 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_914, _917, _920, _923));
        float _1314 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_915, _918, _921, _924));
        float _1321 = dot(vec4(cbModelParam._m0[39u]), vec4(_1290, _1291, _1292, 1.0));
        _1333 = dot(vec3(isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0)), isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)), isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1321) ? 0.0 : (isnan(0.0) ? _1321 : max(0.0, _1321))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1333 = 1.0;
    }
    float _1344;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1335 = dot(vec4(cbModelParam._m0[40u]), vec4(_1290, _1291, _1292, 1.0));
        _1344 = dot(vec3(isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0)), isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0)), isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1335) ? 0.0 : (isnan(0.0) ? _1335 : max(0.0, _1335))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1344 = 1.0;
    }
    float _1348 = (_1344 * cbModelParam._m0[1u].x) + (_1333 * (1.0 - cbModelParam._m0[1u].x));
    float _1358 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _389);
    float _1359 = isnan(_1358) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1358 : min(cbModelParam._m0[25u].z, _1358));
    float _1441;
    float _1443;
    float _1445;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1408 = fma(_610, cbModelParam._m0[13u].z, fma(_606, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _602)) + cbModelParam._m0[13u].w;
        float _1412 = fma(_610, cbModelParam._m0[14u].z, fma(_606, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _602)) + cbModelParam._m0[14u].w;
        float _1416 = fma(_610, cbModelParam._m0[15u].z, fma(_606, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _602)) + cbModelParam._m0[15u].w;
        float _1419 = fma(_551, cbModelParam._m0[13u].z, fma(_550, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _549));
        float _1422 = fma(_551, cbModelParam._m0[14u].z, fma(_550, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _549));
        float _1425 = fma(_551, cbModelParam._m0[15u].z, fma(_550, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _549));
        float _1453;
        if (_1419 > 0.0)
        {
            _1453 = abs((1.0 - _1408) / _1419);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1419 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1408 + 1.0) / _1419);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1453 = frontier_phi_16_14_ladder;
        }
        float _1678;
        if (_1422 > 0.0)
        {
            _1678 = abs((1.0 - _1412) / _1422);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1422 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1412 + 1.0) / _1422);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1678 = frontier_phi_25_21_ladder;
        }
        float _1924;
        if (_1425 > 0.0)
        {
            _1924 = abs((1.0 - _1416) / _1425);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1425 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1416 + 1.0) / _1425);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1924 = frontier_phi_37_32_ladder;
        }
        float _1926 = isnan(_1678) ? _1453 : (isnan(_1453) ? _1678 : min(_1453, _1678));
        float _1927 = isnan(_1924) ? _1926 : (isnan(_1926) ? _1924 : min(_1926, _1924));
        float _1931 = (_1927 * _1419) + _1408;
        float _1932 = (_1927 * _1422) + _1412;
        float _1933 = (_1927 * _1425) + _1416;
        float _1934 = _1927 * 9.9999997473787516355514526367188e-05;
        float _1936 = (-1.0) - _1934;
        float _1938 = _1934 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1933 > _1938) || ((_1933 < _1936) || ((_1932 > _1938) || ((_1932 < _1936) || ((_1931 < _1936) || (_1931 > _1938))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2057 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1933, cbModelParam._m0[9u].z, fma(_1932, cbModelParam._m0[9u].y, _1931 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1933, cbModelParam._m0[10u].z, fma(_1932, cbModelParam._m0[10u].y, _1931 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1933, cbModelParam._m0[11u].z, fma(_1932, cbModelParam._m0[11u].y, _1931 * cbModelParam._m0[11u].x))), _1359);
            frontier_phi_15_37_ladder = _2057.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2057.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2057.x * cbModelParam._m0[1u].y;
        }
        _1441 = frontier_phi_15_37_ladder_2;
        _1443 = frontier_phi_15_37_ladder_1;
        _1445 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1429 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_549, _550, _551), _1359);
        _1441 = _1429.x * cbModelParam._m0[1u].y;
        _1443 = _1429.y * cbModelParam._m0[1u].y;
        _1445 = _1429.z * cbModelParam._m0[1u].y;
    }
    float _1449 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _389);
    float _1450 = isnan(_1449) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1449 : min(cbModelParam._m0[25u].w, _1449));
    float _1543;
    float _1545;
    float _1547;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1507 = fma(_610, cbModelParam._m0[21u].z, fma(_606, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _602)) + cbModelParam._m0[21u].w;
        float _1511 = fma(_610, cbModelParam._m0[22u].z, fma(_606, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _602)) + cbModelParam._m0[22u].w;
        float _1515 = fma(_610, cbModelParam._m0[23u].z, fma(_606, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _602)) + cbModelParam._m0[23u].w;
        float _1518 = fma(_551, cbModelParam._m0[21u].z, fma(_550, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _549));
        float _1521 = fma(_551, cbModelParam._m0[22u].z, fma(_550, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _549));
        float _1524 = fma(_551, cbModelParam._m0[23u].z, fma(_550, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _549));
        float _1683;
        if (_1518 > 0.0)
        {
            _1683 = abs((1.0 - _1507) / _1518);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1518 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1507 + 1.0) / _1518);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1683 = frontier_phi_27_23_ladder;
        }
        float _1951;
        if (_1521 > 0.0)
        {
            _1951 = abs((1.0 - _1511) / _1521);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1521 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1511 + 1.0) / _1521);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1951 = frontier_phi_39_34_ladder;
        }
        float _2156;
        if (_1524 > 0.0)
        {
            _2156 = abs((1.0 - _1515) / _1524);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1524 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1515 + 1.0) / _1524);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2156 = frontier_phi_48_45_ladder;
        }
        float _2158 = isnan(_1951) ? _1683 : (isnan(_1683) ? _1951 : min(_1683, _1951));
        float _2159 = isnan(_2156) ? _2158 : (isnan(_2158) ? _2156 : min(_2158, _2156));
        float _2163 = (_2159 * _1518) + _1507;
        float _2164 = (_2159 * _1521) + _1511;
        float _2165 = (_2159 * _1524) + _1515;
        float _2166 = _2159 * 9.9999997473787516355514526367188e-05;
        float _2167 = (-1.0) - _2166;
        float _2169 = _2166 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2165 > _2169) || ((_2165 < _2167) || ((_2164 > _2169) || ((_2164 < _2167) || ((_2163 < _2167) || (_2163 > _2169))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2363 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2165, cbModelParam._m0[17u].z, fma(_2164, cbModelParam._m0[17u].y, _2163 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2165, cbModelParam._m0[18u].z, fma(_2164, cbModelParam._m0[18u].y, _2163 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2165, cbModelParam._m0[19u].z, fma(_2164, cbModelParam._m0[19u].y, _2163 * cbModelParam._m0[19u].x))), _1450);
            frontier_phi_24_48_ladder = _2363.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2363.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2363.x * cbModelParam._m0[1u].z;
        }
        _1543 = frontier_phi_24_48_ladder_2;
        _1545 = frontier_phi_24_48_ladder_1;
        _1547 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1527 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_549, _550, _551), _1450);
        _1543 = _1527.x * cbModelParam._m0[1u].z;
        _1545 = _1527.y * cbModelParam._m0[1u].z;
        _1547 = _1527.z * cbModelParam._m0[1u].z;
    }
    float _1559 = ((((1.0 - _570) * ((_557 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_570 * _557)) * _541;
    float _1560 = _1559 * ((cbModelParam._m0[1u].w * (_1543 - _1441)) + _1441);
    float _1561 = _1559 * ((cbModelParam._m0[1u].w * (_1545 - _1443)) + _1443);
    float _1562 = _1559 * ((cbModelParam._m0[1u].w * (_1547 - _1445)) + _1445);
    float _1565 = fma(_1562, cbSceneParam._m0[89u].z, fma(_1561, cbSceneParam._m0[89u].y, _1560 * cbSceneParam._m0[89u].x));
    float _1568 = fma(_1562, cbSceneParam._m0[90u].z, fma(_1561, cbSceneParam._m0[90u].y, _1560 * cbSceneParam._m0[90u].x));
    float _1571 = fma(_1562, cbSceneParam._m0[91u].z, fma(_1561, cbSceneParam._m0[91u].y, _1560 * cbSceneParam._m0[91u].x));
    vec4 _1579 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_474, _475));
    float _1581 = _1579.w;
    float _1593 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1581);
    float _1594 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1581);
    float _1595 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1581);
    uvec4 _1599 = floatBitsToUint(cbInstanceData._m0[_515 + 5u]);
    uint _1601 = _1599.x * 14u;
    uint _1602 = _1601 + 13u;
    float _1609 = _541 + (-1.0);
    float _1614 = (cbLight._m0[_1602].x * _1609) + 1.0;
    float _1615 = (cbLight._m0[_1602].y * _1609) + 1.0;
    float _1616 = (cbLight._m0[_1602].z * _1609) + 1.0;
    float _1617 = (cbLight._m0[_1602].w * _1609) + 1.0;
    uint _1618 = _1601 + 5u;
    float _1624 = isnan(1.0) ? _1615 : (isnan(_1615) ? 1.0 : min(_1615, 1.0));
    uint _1628 = _1601 + 4u;
    float _1637 = isnan(1.0) ? _1614 : (isnan(_1614) ? 1.0 : min(_1614, 1.0));
    uint _1641 = _1601 | 1u;
    float _1652 = dot(vec3(cbLight._m0[_1601].xyz), vec3(_386, _387, _388));
    float _1655 = dot(vec3(cbLight._m0[_1641].xyz), vec3(_386, _387, _388));
    float _3740 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
    float _3751 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
    float _1660 = (isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0))) * 0.3183098733425140380859375;
    float _1662 = (isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0))) * 0.3183098733425140380859375;
    float _1669 = ((cbLight._m0[_1618].x * _1624) * _1662) + (((cbLight._m0[_1628].x * _1593) * _1637) * _1660);
    float _1670 = ((_1624 * cbLight._m0[_1618].y) * _1662) + (((cbLight._m0[_1628].y * _1594) * _1637) * _1660);
    float _1671 = ((_1624 * cbLight._m0[_1618].z) * _1662) + (((cbLight._m0[_1628].z * _1595) * _1637) * _1660);
    uvec4 _1675 = floatBitsToUint(cbLight._m0[_1601 + 12u]);
    bool _1677 = _1675.x == 0u;
    float _1688;
    float _1690;
    float _1692;
    if (_1677)
    {
        _1688 = _1669;
        _1690 = _1670;
        _1692 = _1671;
    }
    else
    {
        uint _1696 = _1601 + 6u;
        float _1712 = (dot(vec3(cbLight._m0[_1601 + 2u].xyz), vec3(_386, _387, _388)) * 0.5) + 0.5;
        float _1713 = _1712 * _1712;
        float _3762 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
        float _1714 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
        float _1715 = isnan(1.0) ? _1616 : (isnan(_1616) ? 1.0 : min(_1616, 1.0));
        _1688 = (((cbLight._m0[_1696].x * 0.3183098733425140380859375) * _1714) * _1715) + _1669;
        _1690 = (((cbLight._m0[_1696].y * 0.3183098733425140380859375) * _1714) * _1715) + _1670;
        _1692 = (((cbLight._m0[_1696].z * 0.3183098733425140380859375) * _1714) * _1715) + _1671;
    }
    bool _1695 = _1675.y == 0u;
    float _1733;
    float _1735;
    float _1737;
    if (_1695)
    {
        _1733 = _1688;
        _1735 = _1690;
        _1737 = _1692;
    }
    else
    {
        uint _1895 = _1601 + 7u;
        float _1911 = (dot(vec3(cbLight._m0[_1601 + 3u].xyz), vec3(_386, _387, _388)) * 0.5) + 0.5;
        float _1912 = _1911 * _1911;
        float _3778 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
        float _1913 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
        float _1914 = isnan(1.0) ? _1617 : (isnan(_1617) ? 1.0 : min(_1617, 1.0));
        _1733 = (((cbLight._m0[_1895].x * 0.3183098733425140380859375) * _1913) * _1914) + _1688;
        _1735 = (((cbLight._m0[_1895].y * 0.3183098733425140380859375) * _1913) * _1914) + _1690;
        _1737 = (((cbLight._m0[_1895].z * 0.3183098733425140380859375) * _1913) * _1914) + _1692;
    }
    uint _1740 = _1601 + 8u;
    float _1753 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1601].w)) * _389) * 0.949999988079071044921875);
    float _1754 = _1753 * _1753;
    float _1755 = cbLight._m0[_1601].x + _466;
    float _1756 = cbLight._m0[_1601].y + _467;
    float _1757 = cbLight._m0[_1601].z + _468;
    float _1761 = inversesqrt(dot(vec3(_1755, _1756, _1757), vec3(_1755, _1756, _1757)));
    float _1762 = _1761 * _1755;
    float _1763 = _1761 * _1756;
    float _1764 = _1761 * _1757;
    float _1765 = dot(vec3(_386, _387, _388), vec3(cbLight._m0[_1601].xyz));
    float _3794 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
    float _1768 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
    float _3805 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _1769 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
    float _1770 = dot(vec3(_386, _387, _388), vec3(_1762, _1763, _1764));
    float _3816 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
    float _1773 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
    float _1774 = dot(vec3(cbLight._m0[_1601].xyz), vec3(_1762, _1763, _1764));
    float _3827 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
    float _1778 = _1754 * _1754;
    float _1782 = ((_1773 * _1773) * (_1778 + (-1.0))) + 1.0;
    float _1793 = (exp2(log2(1.0 - (isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1794 = 1.0 - _1754;
    float _1805 = (0.5 / (((_1769 * ((_1768 * _1794) + _1754)) + 9.9999999392252902907785028219223e-09) + (((_1769 * _1794) + _1754) * _1768))) * _1768;
    float _3838 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
    float _1807 = (isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) * (_1778 / ((_1782 * _1782) * 3.141590118408203125));
    uint _1821 = _1601 + 9u;
    float _1832 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1641].w)) * _389) * 0.949999988079071044921875);
    float _1833 = _1832 * _1832;
    float _1834 = cbLight._m0[_1641].x + _466;
    float _1835 = cbLight._m0[_1641].y + _467;
    float _1836 = cbLight._m0[_1641].z + _468;
    float _1840 = inversesqrt(dot(vec3(_1834, _1835, _1836), vec3(_1834, _1835, _1836)));
    float _1841 = _1840 * _1834;
    float _1842 = _1840 * _1835;
    float _1843 = _1840 * _1836;
    float _1844 = dot(vec3(_386, _387, _388), vec3(cbLight._m0[_1641].xyz));
    float _3849 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
    float _1847 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
    float _1848 = dot(vec3(_386, _387, _388), vec3(_1841, _1842, _1843));
    float _3860 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
    float _1851 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
    float _1852 = dot(vec3(cbLight._m0[_1641].xyz), vec3(_1841, _1842, _1843));
    float _3871 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
    float _1856 = _1833 * _1833;
    float _1860 = ((_1851 * _1851) * (_1856 + (-1.0))) + 1.0;
    float _1869 = (exp2(log2(1.0 - (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1870 = 1.0 - _1833;
    float _1880 = (0.5 / (((_1769 * ((_1847 * _1870) + _1833)) + 9.9999999392252902907785028219223e-09) + (((_1769 * _1870) + _1833) * _1847))) * _1847;
    float _3882 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
    float _1882 = (isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))) * (_1856 / ((_1860 * _1860) * 3.141590118408203125));
    float _1892 = (((_1869 * cbLight._m0[_1821].x) * _1882) * _1624) + ((((cbLight._m0[_1740].x * _1593) * _1793) * _1807) * _1637);
    float _1893 = (((_1869 * cbLight._m0[_1821].y) * _1882) * _1624) + ((((cbLight._m0[_1740].y * _1594) * _1793) * _1807) * _1637);
    float _1894 = (((_1869 * cbLight._m0[_1821].z) * _1882) * _1624) + ((((cbLight._m0[_1740].z * _1595) * _1793) * _1807) * _1637);
    float _1956;
    float _1958;
    float _1960;
    if (_1677)
    {
        _1956 = _1892;
        _1958 = _1893;
        _1960 = _1894;
    }
    else
    {
        uint _1962 = _1601 + 2u;
        uint _1966 = _1601 + 10u;
        float _1980 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1962].w)) * _389) * 0.949999988079071044921875);
        float _1981 = _1980 * _1980;
        float _1982 = cbLight._m0[_1962].x + _466;
        float _1983 = cbLight._m0[_1962].y + _467;
        float _1984 = cbLight._m0[_1962].z + _468;
        float _1988 = inversesqrt(dot(vec3(_1982, _1983, _1984), vec3(_1982, _1983, _1984)));
        float _1989 = _1988 * _1982;
        float _1990 = _1988 * _1983;
        float _1991 = _1988 * _1984;
        float _1992 = dot(vec3(_386, _387, _388), vec3(cbLight._m0[_1962].xyz));
        float _3893 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
        float _1995 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1996 = dot(vec3(_386, _387, _388), vec3(_1989, _1990, _1991));
        float _3904 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
        float _1999 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _2000 = dot(vec3(cbLight._m0[_1962].xyz), vec3(_1989, _1990, _1991));
        float _3915 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
        float _2004 = _1981 * _1981;
        float _2008 = ((_1999 * _1999) * (_2004 + (-1.0))) + 1.0;
        float _2017 = (exp2(log2(1.0 - (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2018 = 1.0 - _1981;
        float _2028 = (0.5 / (((_1769 * ((_1995 * _2018) + _1981)) + 9.9999999392252902907785028219223e-09) + (((_1769 * _2018) + _1981) * _1995))) * _1995;
        float _3926 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
        float _2030 = (isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0))) * (_2004 / ((_2008 * _2008) * 3.141590118408203125));
        float _2031 = isnan(1.0) ? _1616 : (isnan(_1616) ? 1.0 : min(_1616, 1.0));
        _1956 = (((_2017 * cbLight._m0[_1966].x) * _2030) * _2031) + _1892;
        _1958 = (((_2017 * cbLight._m0[_1966].y) * _2030) * _2031) + _1893;
        _1960 = (((_2017 * cbLight._m0[_1966].z) * _2030) * _2031) + _1894;
    }
    float _2066;
    float _2068;
    float _2070;
    if (_1695)
    {
        _2066 = _1956;
        _2068 = _1958;
        _2070 = _1960;
    }
    else
    {
        uint _2077 = _1601 + 3u;
        uint _2081 = _1601 + 11u;
        float _2095 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2077].w)) * _389) * 0.949999988079071044921875);
        float _2096 = _2095 * _2095;
        float _2097 = cbLight._m0[_2077].x + _466;
        float _2098 = cbLight._m0[_2077].y + _467;
        float _2099 = cbLight._m0[_2077].z + _468;
        float _2103 = inversesqrt(dot(vec3(_2097, _2098, _2099), vec3(_2097, _2098, _2099)));
        float _2104 = _2103 * _2097;
        float _2105 = _2103 * _2098;
        float _2106 = _2103 * _2099;
        float _2107 = dot(vec3(_386, _387, _388), vec3(cbLight._m0[_2077].xyz));
        float _3942 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
        float _2110 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _2111 = dot(vec3(_386, _387, _388), vec3(_2104, _2105, _2106));
        float _3953 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
        float _2114 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
        float _2115 = dot(vec3(cbLight._m0[_2077].xyz), vec3(_2104, _2105, _2106));
        float _3964 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
        float _2119 = _2096 * _2096;
        float _2123 = ((_2114 * _2114) * (_2119 + (-1.0))) + 1.0;
        float _2132 = (exp2(log2(1.0 - (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2133 = 1.0 - _2096;
        float _2143 = (0.5 / (((_1769 * ((_2110 * _2133) + _2096)) + 9.9999999392252902907785028219223e-09) + (((_1769 * _2133) + _2096) * _2110))) * _2110;
        float _3975 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
        float _2145 = (isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0))) * (_2119 / ((_2123 * _2123) * 3.141590118408203125));
        float _2146 = isnan(1.0) ? _1617 : (isnan(_1617) ? 1.0 : min(_1617, 1.0));
        _2066 = (((_2132 * cbLight._m0[_2081].x) * _2145) * _2146) + _1956;
        _2068 = (((_2132 * cbLight._m0[_2081].y) * _2145) * _2146) + _1958;
        _2070 = (((_2132 * cbLight._m0[_2081].z) * _2145) * _2146) + _1960;
    }
    float _2280;
    float _2282;
    float _2284;
    float _2286;
    float _2288;
    float _2290;
    if (_1599.y == 0u)
    {
        float _2221 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2222 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2221;
        float _2223 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2221;
        float _2224 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2221;
        uvec4 _2236 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2237 = _2236.x;
        uint _2248 = uint((float(_2236.y) * floor(float(uint(cbSceneParam._m0[85u].y * _475) / _2237))) + floor(float(uint(cbSceneParam._m0[85u].x * _474) / _2237)));
        float _2258 = (log2(_2224 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2259 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
        uint _2262 = uint(isnan(14.0) ? _2259 : (isnan(_2259) ? 14.0 : min(_2259, 14.0)));
        uvec4 _2267 = texelFetch(g_lightClusterGridBuffer, int(((_2262 << 2u) + (_2248 << 6u)) >> 2u));
        uint _2268 = _2267.x;
        uint _2269 = _2236.z;
        float _2368;
        float _2370;
        float _2372;
        float _2374;
        float _2376;
        float _2378;
        if (((((1u << ((_2269 >> 4u) & 15u)) + 4294967295u) & _2268) == 0u) || ((_2269 & 240u) == 0u))
        {
            _2368 = 0.0;
            _2370 = 0.0;
            _2372 = 0.0;
            _2374 = 0.0;
            _2376 = 0.0;
            _2378 = 0.0;
        }
        else
        {
            float _2369;
            float _2371;
            float _2373;
            float _2375;
            float _2377;
            float _2379;
            float _2512 = 0.0;
            float _2513 = 0.0;
            float _2514 = 0.0;
            float _2515 = 0.0;
            float _2516 = 0.0;
            float _2517 = 0.0;
            uint _2518 = 0u;
            uint _2527;
            bool _2528;
            for (;;)
            {
                _2527 = texelFetch(g_lightClassification, int((((_2262 << 5u) + (_2248 << 9u)) + (_2518 << 2u)) >> 2u)).x;
                _2528 = _2527 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2528)
                {
                    frontier_phi_63_pred = _2517;
                    frontier_phi_63_pred_1 = _2516;
                    frontier_phi_63_pred_2 = _2515;
                    frontier_phi_63_pred_3 = _2514;
                    frontier_phi_63_pred_4 = _2513;
                    frontier_phi_63_pred_5 = _2512;
                }
                else
                {
                    float _2636;
                    float _2637;
                    float _2638;
                    float _2639;
                    float _2640;
                    float _2641;
                    uint _2642;
                    _2636 = _2512;
                    _2637 = _2513;
                    _2638 = _2514;
                    _2639 = _2515;
                    _2640 = _2516;
                    _2641 = _2517;
                    _2642 = _2527;
                    float _2568;
                    float _2569;
                    float _2570;
                    float _2571;
                    float _2572;
                    float _2573;
                    for (;;)
                    {
                        uint _2646 = uint(findLSB(_2642)) + (_2518 << 5u);
                        uint _2643 = (_2642 + 4294967295u) & _2642;
                        uint _2648 = _2646 * 48u;
                        vec4 _2662 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2648)).x, texelFetch(g_PointLightRenderingBuffer, int(_2648 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2648 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2648 + 3u)).x));
                        uint _2668 = (_2646 * 48u) + 4u;
                        vec4 _2681 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2668)).x, texelFetch(g_PointLightRenderingBuffer, int(_2668 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2668 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2668 + 3u)).x));
                        uint _2687 = (_2646 * 48u) + 8u;
                        vec3 _2698 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2687)).x, texelFetch(g_PointLightRenderingBuffer, int(_2687 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2687 + 2u)).x));
                        float _2702 = _2662.x - _2222;
                        float _2703 = _2662.y - _2223;
                        float _2704 = _2662.z - _2224;
                        float _2705 = dot(vec3(_2702, _2703, _2704), vec3(_2702, _2703, _2704));
                        float _2708 = inversesqrt(_2705);
                        float _2709 = _2708 * _2702;
                        float _2710 = _2708 * _2703;
                        float _2711 = _2708 * _2704;
                        float _2712 = dot(vec3(_496, _499, _502), vec3(_2709, _2710, _2711));
                        float _2717 = 1.0 - (_2705 * _2662.w);
                        float _4001 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
                        float _2718 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
                        float _2719 = sqrt(_2705) * _2681.w;
                        float _2722 = 1.39999997615814208984375 / (_2719 + 1.39999997615814208984375);
                        float _2723 = _2722 * _2722;
                        float _2726 = ((1.0 - _2723) * _2712) + _2723;
                        float _2729 = _2719 * _2719;
                        float _2733 = ((isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0))) * _2718) / ((_2729 * 0.699999988079071044921875) + 1.0);
                        float _2737 = (-0.0) - _2222;
                        float _2738 = (-0.0) - _2223;
                        float _2739 = (-0.0) - _2224;
                        float _2743 = inversesqrt(dot(vec3(_2737, _2738, _2739), vec3(_2737, _2738, _2739)));
                        float _2744 = _2743 * _2737;
                        float _2745 = _2743 * _2738;
                        float _2746 = _2743 * _2739;
                        float _2754 = exp2(log2(1.0 / ((_2729 * 3.5) + 5.0)) * 0.25);
                        float _2755 = 1.0 - _557;
                        float _2762 = sqrt(1.0 - ((1.0 - (_2755 * _2755)) * (1.0 - (_2754 * _2754))));
                        float _2763 = _2762 * _2762;
                        float _2764 = _2763 * _2763;
                        float _2765 = _2744 + _2709;
                        float _2766 = _2745 + _2710;
                        float _2767 = _2746 + _2711;
                        float _2771 = inversesqrt(dot(vec3(_2765, _2766, _2767), vec3(_2765, _2766, _2767)));
                        float _2775 = dot(vec3(_496, _499, _502), vec3(_2744, _2745, _2746));
                        float _4017 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
                        float _2778 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
                        float _2779 = dot(vec3(_496, _499, _502), vec3(_2771 * _2765, _2771 * _2766, _2771 * _2767));
                        float _4028 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
                        float _2782 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
                        float _2786 = ((_2782 * _2782) * (_2764 + (-1.0))) + 1.0;
                        float _2787 = _2722 * _2763;
                        float _2788 = _2787 * _2787;
                        float _2791 = ((1.0 - _2788) * _2712) + _2788;
                        float _4039 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
                        float _2792 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
                        float _2793 = 1.0 - _2763;
                        float _2803 = (0.5 / (((_2792 * ((_2778 * _2793) + _2763)) + 9.9999999392252902907785028219223e-09) + (((_2792 * _2793) + _2763) * _2778))) * _2792;
                        float _4050 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
                        float _2814 = (((_2764 * 3.1415927410125732421875) * (isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0)))) / ((_2786 * _2786) * ((_2729 * 2.1991131305694580078125) + 3.141590118408203125))) * _2718;
                        _2571 = (_2733 * _2681.x) + _2639;
                        _2572 = (_2733 * _2681.y) + _2640;
                        _2573 = (_2733 * _2681.z) + _2641;
                        _2568 = (_2814 * _2698.x) + _2636;
                        _2569 = (_2814 * _2698.y) + _2637;
                        _2570 = (_2814 * _2698.z) + _2638;
                        if (_2643 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2636 = _2568;
                            _2637 = _2569;
                            _2638 = _2570;
                            _2639 = _2571;
                            _2640 = _2572;
                            _2641 = _2573;
                            _2642 = _2643;
                        }
                    }
                    frontier_phi_63_pred = _2573;
                    frontier_phi_63_pred_1 = _2572;
                    frontier_phi_63_pred_2 = _2571;
                    frontier_phi_63_pred_3 = _2570;
                    frontier_phi_63_pred_4 = _2569;
                    frontier_phi_63_pred_5 = _2568;
                }
                _2379 = frontier_phi_63_pred;
                _2377 = frontier_phi_63_pred_1;
                _2375 = frontier_phi_63_pred_2;
                _2373 = frontier_phi_63_pred_3;
                _2371 = frontier_phi_63_pred_4;
                _2369 = frontier_phi_63_pred_5;
                uint _2519 = _2518 + 1u;
                if (_2519 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2512 = _2369;
                    _2513 = _2371;
                    _2514 = _2373;
                    _2515 = _2375;
                    _2516 = _2377;
                    _2517 = _2379;
                    _2518 = _2519;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2368 = _2369;
            _2370 = _2371;
            _2372 = _2373;
            _2374 = _2375;
            _2376 = _2377;
            _2378 = _2379;
        }
        uvec4 _2382 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2383 = _2382.z;
        uint _2385 = (_2383 >> 8u) & 15u;
        float _2480;
        float _2482;
        float _2484;
        float _2486;
        float _2488;
        float _2490;
        if (((4294967295u << _2385) & _2268) == 0u)
        {
            _2480 = _2368;
            _2482 = _2370;
            _2484 = _2372;
            _2486 = _2374;
            _2488 = _2376;
            _2490 = _2378;
        }
        else
        {
            float _2505 = inversesqrt(dot(vec3(_2222, _2223, _2224), vec3(_2222, _2223, _2224)));
            float _2506 = _2505 * _2222;
            float _2507 = _2505 * _2223;
            float _2508 = _2505 * _2224;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2385 < ((_2383 >> 12u) & 15u))
            {
                float _2481;
                float _2483;
                float _2485;
                float _2487;
                float _2489;
                float _2491;
                float _2619 = _2368;
                float _2620 = _2370;
                float _2621 = _2372;
                float _2622 = _2374;
                float _2623 = _2376;
                float _2624 = _2378;
                uint _2625 = _2385;
                uint _2634;
                bool _2635;
                for (;;)
                {
                    _2634 = texelFetch(g_lightClassification, int((((_2262 << 5u) + (_2248 << 9u)) + (_2625 << 2u)) >> 2u)).x;
                    _2635 = _2634 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2635)
                    {
                        frontier_phi_69_pred = _2624;
                        frontier_phi_69_pred_1 = _2623;
                        frontier_phi_69_pred_2 = _2622;
                        frontier_phi_69_pred_3 = _2621;
                        frontier_phi_69_pred_4 = _2620;
                        frontier_phi_69_pred_5 = _2619;
                    }
                    else
                    {
                        float _2819;
                        float _2820;
                        float _2821;
                        float _2822;
                        float _2823;
                        float _2824;
                        float _3115;
                        float _3116;
                        float _3117;
                        float _3118;
                        float _3119;
                        float _3120;
                        float _2832 = _2619;
                        float _2833 = _2620;
                        float _2834 = _2621;
                        float _2835 = _2622;
                        float _2836 = _2623;
                        float _2837 = _2624;
                        uint _2838 = _2634;
                        uint _2839;
                        vec4 _2864;
                        float _2865;
                        vec4 _2880;
                        vec3 _2892;
                        vec4 _2908;
                        vec4 _2924;
                        float _2971;
                        bool _2972;
                        for (;;)
                        {
                            uint _2849 = ((_2625 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2838));
                            _2839 = (_2838 + 4294967295u) & _2838;
                            uint _2851 = _2849 * 40u;
                            _2864 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2851)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2851 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2851 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2851 + 3u)).x));
                            _2865 = _2864.w;
                            uint _2867 = (_2849 * 40u) + 4u;
                            _2880 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2867)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 3u)).x));
                            uint _2882 = (_2849 * 40u) + 8u;
                            _2892 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2882)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 2u)).x));
                            uint _2895 = (_2849 * 40u) + 16u;
                            _2908 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2895)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 3u)).x));
                            uint _2911 = (_2849 * 40u) + 20u;
                            _2924 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2911)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 3u)).x));
                            uint _2927 = (_2849 * 40u) + 24u;
                            vec4 _2940 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2927)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 3u)).x));
                            uint _2946 = (_2849 * 40u) + 28u;
                            vec4 _2959 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2946)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 3u)).x));
                            _2971 = fma(_2224, _2959.z, fma(_2223, _2959.y, _2959.x * _2222)) + _2959.w;
                            _2972 = !((fma(_2224, _2940.z, fma(_2223, _2940.y, _2940.x * _2222)) + _2940.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2972)
                            {
                                float _2999 = _2864.x - _2222;
                                float _3000 = _2864.y - _2223;
                                float _3001 = _2864.z - _2224;
                                float _3002 = dot(vec3(_2999, _3000, _3001), vec3(_2999, _3000, _3001));
                                float _3005 = inversesqrt(_3002);
                                float _3006 = _3005 * _2999;
                                float _3007 = _3005 * _3000;
                                float _3008 = _3005 * _3001;
                                float _3012 = 1.0 - (_3002 / (_2865 * _2865));
                                float _4061 = isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0));
                                float _3013 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
                                float _3017 = sqrt(_3002) * _2880.w;
                                float _3019 = 1.39999997615814208984375 / (_3017 + 1.39999997615814208984375);
                                float _3020 = _3019 * _3019;
                                float _3023 = ((1.0 - _3020) * dot(vec3(_3006, _3007, _3008), vec3(_496, _499, _502))) + _3020;
                                float _3026 = _3017 * _3017;
                                float _3030 = (fma(_2224, _2908.z, fma(_2223, _2908.y, _2908.x * _2222)) + _2908.w) / _2971;
                                float _3031 = (fma(_2224, _2924.z, fma(_2223, _2924.y, _2924.x * _2222)) + _2924.w) / _2971;
                                float _3035 = 1.0 - dot(vec2(_3030, _3031), vec2(_3030, _3031));
                                float _4077 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0));
                                float _3036 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
                                float _3037 = _3036 * (((isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0))) * _3013) / ((_3026 * 0.699999988079071044921875) + 1.0));
                                float _3049 = exp2(log2(1.0 / ((_3026 * 3.5) + 5.0)) * 0.25);
                                float _3050 = 1.0 - _557;
                                float _3057 = sqrt(1.0 - ((1.0 - (_3050 * _3050)) * (1.0 - (_3049 * _3049))));
                                float _3058 = _3057 * _3057;
                                float _3059 = _3058 * _3058;
                                float _3060 = _3006 - _2506;
                                float _3061 = _3007 - _2507;
                                float _3062 = _3008 - _2508;
                                float _3066 = inversesqrt(dot(vec3(_3060, _3061, _3062), vec3(_3060, _3061, _3062)));
                                float _3070 = dot(vec3(_496, _499, _502), vec3((-0.0) - _2506, (-0.0) - _2507, (-0.0) - _2508));
                                float _4088 = isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0));
                                float _3073 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
                                float _3074 = dot(vec3(_496, _499, _502), vec3(_3066 * _3060, _3066 * _3061, _3066 * _3062));
                                float _4099 = isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0));
                                float _3077 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
                                float _3081 = ((_3077 * _3077) * (_3059 + (-1.0))) + 1.0;
                                float _3082 = _3019 * _3058;
                                float _3083 = _3082 * _3082;
                                float _3089 = ((1.0 - _3083) * dot(vec3(_496, _499, _502), vec3(_3006, _3007, _3008))) + _3083;
                                float _4110 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0));
                                float _3090 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
                                float _3091 = 1.0 - _3058;
                                float _3101 = (0.5 / (((_3090 * ((_3073 * _3091) + _3058)) + 9.9999999392252902907785028219223e-09) + (((_3090 * _3091) + _3058) * _3073))) * _3090;
                                float _4121 = isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0));
                                float _3111 = (_3036 * _3013) * (((_3059 * 3.1415927410125732421875) * (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0)))) / ((_3081 * _3081) * ((_3026 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3037 * _2880.z;
                                frontier_phi_75_pred_1 = _3037 * _2880.y;
                                frontier_phi_75_pred_2 = _3037 * _2880.x;
                                frontier_phi_75_pred_3 = _3111 * _2892.z;
                                frontier_phi_75_pred_4 = _3111 * _2892.y;
                                frontier_phi_75_pred_5 = _3111 * _2892.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3120 = frontier_phi_75_pred;
                            _3119 = frontier_phi_75_pred_1;
                            _3118 = frontier_phi_75_pred_2;
                            _3117 = frontier_phi_75_pred_3;
                            _3116 = frontier_phi_75_pred_4;
                            _3115 = frontier_phi_75_pred_5;
                            _2822 = _3118 + _2835;
                            _2823 = _3119 + _2836;
                            _2824 = _3120 + _2837;
                            _2819 = _3115 + _2832;
                            _2820 = _3116 + _2833;
                            _2821 = _3117 + _2834;
                            if (_2839 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2832 = _2819;
                                _2833 = _2820;
                                _2834 = _2821;
                                _2835 = _2822;
                                _2836 = _2823;
                                _2837 = _2824;
                                _2838 = _2839;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2824;
                        frontier_phi_69_pred_1 = _2823;
                        frontier_phi_69_pred_2 = _2822;
                        frontier_phi_69_pred_3 = _2821;
                        frontier_phi_69_pred_4 = _2820;
                        frontier_phi_69_pred_5 = _2819;
                    }
                    _2491 = frontier_phi_69_pred;
                    _2489 = frontier_phi_69_pred_1;
                    _2487 = frontier_phi_69_pred_2;
                    _2485 = frontier_phi_69_pred_3;
                    _2483 = frontier_phi_69_pred_4;
                    _2481 = frontier_phi_69_pred_5;
                    uint _2626 = _2625 + 1u;
                    if (_2626 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2619 = _2481;
                        _2620 = _2483;
                        _2621 = _2485;
                        _2622 = _2487;
                        _2623 = _2489;
                        _2624 = _2491;
                        _2625 = _2626;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2491;
                frontier_phi_57_58_ladder_1 = _2489;
                frontier_phi_57_58_ladder_2 = _2487;
                frontier_phi_57_58_ladder_3 = _2485;
                frontier_phi_57_58_ladder_4 = _2483;
                frontier_phi_57_58_ladder_5 = _2481;
            }
            else
            {
                frontier_phi_57_58_ladder = _2378;
                frontier_phi_57_58_ladder_1 = _2376;
                frontier_phi_57_58_ladder_2 = _2374;
                frontier_phi_57_58_ladder_3 = _2372;
                frontier_phi_57_58_ladder_4 = _2370;
                frontier_phi_57_58_ladder_5 = _2368;
            }
            _2480 = frontier_phi_57_58_ladder_5;
            _2482 = frontier_phi_57_58_ladder_4;
            _2484 = frontier_phi_57_58_ladder_3;
            _2486 = frontier_phi_57_58_ladder_2;
            _2488 = frontier_phi_57_58_ladder_1;
            _2490 = frontier_phi_57_58_ladder;
        }
        float _2495 = isnan(1.0) ? _541 : (isnan(_541) ? 1.0 : min(_541, 1.0));
        _2280 = (_2495 * _2486) + _1733;
        _2282 = (_2495 * _2488) + _1735;
        _2284 = (_2495 * _2490) + _1737;
        _2286 = ((_2480 * 0.039999999105930328369140625) * _2495) + _2066;
        _2288 = ((_2482 * 0.039999999105930328369140625) * _2495) + _2068;
        _2290 = ((_2484 * 0.039999999105930328369140625) * _2495) + _2070;
    }
    else
    {
        _2280 = _1733;
        _2282 = _1735;
        _2284 = _1737;
        _2286 = _2066;
        _2288 = _2068;
        _2290 = _2070;
    }
    float _4137 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _4148 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _4159 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    uint _2310 = _515 + 6u;
    float _2318 = _474 / cbSceneParam._m0[86u].x;
    float _2319 = _475 / cbSceneParam._m0[86u].y;
    vec4 _2333 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2318, _2319, (log2((isnan(cbSceneParam._m0[77u].w) ? _408 : (isnan(_408) ? cbSceneParam._m0[77u].w : min(_408, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2335 = _2333.x;
    float _2336 = _2333.y;
    float _2337 = _2333.z;
    float _2338 = _2333.w;
    float _2430;
    float _2432;
    float _2434;
    float _2436;
    if (_408 > cbSceneParam._m0[78u].w)
    {
        float _2393 = isnan(_408) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _408 : min(cbSceneParam._m0[80u].w, _408));
        float _2394 = _2393 / _408;
        float _2405 = _2394 * _459;
        float _2406 = _460 * _2394;
        float _2407 = (-0.0) - _2406;
        float _2408 = _2394 * _461;
        float _2410 = (cbSceneParam._m0[77u].w * _2407) / _2393;
        float _2411 = _2410 + cbSceneParam._m0[79u].w;
        float _2412 = cbSceneParam._m0[79u].w - _2406;
        float _2418 = sqrt(((_2405 * _2405) + (_2406 * _2406)) + (_2408 * _2408));
        float _2421 = (1.0 - (cbSceneParam._m0[77u].w / _2393)) * _2418;
        float _2426 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2428 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2581;
        if (abs((_2407 - _2410) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2581 = ((((_2411 > 0.0) ? exp2(_2426 * _2411) : (2.0 - exp2(_2428 * _2411))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2421;
        }
        else
        {
            float _2541 = 1.0 / cbSceneParam._m0[80u].x;
            float _2542 = isnan(_2412) ? _2411 : (isnan(_2411) ? _2412 : max(_2411, _2412));
            float _2543 = isnan(_2412) ? _2411 : (isnan(_2411) ? _2412 : min(_2411, _2412));
            float _2552 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : min(_2542, 0.0));
            float _2553 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : min(_2543, 0.0));
            _2581 = ((abs(_2418 / _2407) * cbSceneParam._m0[80u].y) * ((((_2552 - _2553) * 2.0) - ((exp2(_2426 * (isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0)))) - exp2(_2426 * (isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0))))) * _2541)) - ((exp2(_2428 * _2552) - exp2(_2428 * _2553)) * _2541))) + (_2421 * cbSceneParam._m0[80u].z);
        }
        vec4 _2583 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2318, _2319, 1.0), 0.0);
        float _2592 = exp2((_2581 * (-1.44269502162933349609375)) * (1.0 - _2583.w));
        float _2593 = log2(_2592);
        float _2609 = log2(_2338);
        _2430 = (exp2(_2609 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2593 * cbSceneParam._m0[78u].x)) * _2583.x) / cbSceneParam._m0[78u].x)) + _2335;
        _2432 = (exp2(_2609 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2593 * cbSceneParam._m0[78u].y)) * _2583.y) / cbSceneParam._m0[78u].y)) + _2336;
        _2434 = (exp2(_2609 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2593 * cbSceneParam._m0[78u].z)) * _2583.z) / cbSceneParam._m0[78u].z)) + _2337;
        _2436 = _2592 * _2338;
    }
    else
    {
        _2430 = _2335;
        _2432 = _2336;
        _2434 = _2337;
        _2436 = _2338;
    }
    float _2448 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2449 = _2448 == 3.0;
    float _2450 = log2(_2436);
    float _2457 = exp2(_2450 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0))) * (_2280 + ((isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0))) * _541))) + ((_2286 + ((isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0))) * _1348)) * cbPerFrame._m0[3u].x));
    float _2458 = exp2(_2450 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (_2282 + ((isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0))) * _541))) + ((_2288 + ((isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0))) * _1348)) * cbPerFrame._m0[3u].x));
    float _2459 = exp2(_2450 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * (_2284 + ((isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0))) * _541))) + ((_2290 + ((isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0))) * _1348)) * cbPerFrame._m0[3u].x));
    float _2468 = (_2448 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2468 * (_2449 ? _2457 : (_2457 + (cbSceneParam._m0[72u].w * _2430)));
    SV_Target.y = _2468 * (_2449 ? _2458 : (_2458 + (cbSceneParam._m0[72u].w * _2432)));
    SV_Target.z = _2468 * (_2449 ? _2459 : (_2459 + (cbSceneParam._m0[72u].w * _2434)));
    SV_Target.w = cbInstanceData._m0[_2310].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2310].w;
}


