#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb3_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb3_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb3_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb3_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb3_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Mb3_snp_0_Texture2D_7;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Mb3_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _995;
float _3388;
float _3389;
float _3390;
float _3391;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _212 = _211 * NORMAL.x;
    float _213 = _211 * NORMAL.y;
    float _214 = _211 * NORMAL.z;
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _226;
    float _227;
    float _228;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _226 = (-0.0) - _212;
        _227 = (-0.0) - _213;
        _228 = (-0.0) - _214;
    }
    else
    {
        _226 = _212;
        _227 = _213;
        _228 = _214;
    }
    vec4 _245 = texture(sampler2D(M_AMSN_V_Mb3_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _249 = 1.0 - _245.x;
    float _260 = ((cbMtdParam._m0[9u].x * (-1.39999997615814208984375)) * (((1.0 - TEXCOORD_3.x) * 2.0) - _249)) + 1.0;
    float _3400 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _261 = isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0));
    vec4 _273 = texture(sampler2D(M_AMSN_V_Mb3_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _275 = _273.x;
    float _276 = _273.y;
    float _277 = _273.z;
    vec4 _289 = texture(sampler2D(M_AMSN_V_Mb3_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _300 = ((_289.x - _275) * _261) + _275;
    float _301 = ((_289.y - _276) * _261) + _276;
    float _302 = ((_289.z - _277) * _261) + _277;
    float _309 = (((((1.0 - TEXCOORD_3.y) * 2.0) - _249) * (-1.39999997615814208984375)) * cbMtdParam._m0[9u].y) + 1.0;
    float _3411 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _310 = isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0));
    vec4 _323 = texture(sampler2D(M_AMSN_V_Mb3_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _334 = ((_323.x - _300) * _310) + _300;
    float _335 = ((_323.y - _301) * _310) + _301;
    float _336 = ((_323.z - _302) * _310) + _302;
    vec4 _348 = texture(sampler2D(M_AMSN_V_Mb3_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _350 = _348.x;
    float _351 = _348.y;
    float _352 = _348.z;
    vec4 _364 = texture(sampler2D(M_AMSN_V_Mb3_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _375 = ((_364.x - _350) * _261) + _350;
    float _376 = ((_364.y - _351) * _261) + _351;
    float _377 = ((_364.z - _352) * _261) + _352;
    vec4 _390 = texture(sampler2D(M_AMSN_V_Mb3_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w));
    float _403 = ((_390.z - _377) * _310) + _377;
    float _406 = ((((_390.x - _375) * _310) + _375) * 2.0) + (-1.0);
    float _408 = ((((_390.y - _376) * _310) + _376) * 2.0) + (-1.0);
    float _409 = dot(vec2(_406, _408), vec2(_406, _408));
    float _3422 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _414 = sqrt(1.0 - (isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0))));
    float _417 = fma(_414, _226, fma(_408, _218 * TANGENT.x, (_204 * _196) * _406));
    float _420 = fma(_414, _227, fma(_408, _218 * TANGENT.y, (_204 * _197) * _406));
    float _423 = fma(_414, _228, fma(_408, _218 * TANGENT.z, (_204 * _198) * _406));
    float _427 = inversesqrt(dot(vec3(_417, _420, _423), vec3(_417, _420, _423)));
    float _428 = _427 * _417;
    float _429 = _427 * _420;
    float _430 = _427 * _423;
    float _3433 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _431 = isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0));
    float _3444 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _3455 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _3466 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _450 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _492 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _502 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _492);
    float _503 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _492);
    float _504 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _492);
    float _508 = inversesqrt(dot(vec3(_502, _503, _504), vec3(_502, _503, _504)));
    float _509 = _502 * _508;
    float _510 = _503 * _508;
    float _511 = _504 * _508;
    vec4 _516 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _518 = _516.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _674 = sqrt(((_502 * _502) + (_503 * _503)) + (_504 * _504));
        float _680 = (cbMatDynParam._m0[5u].x * _674) + cbMatDynParam._m0[5u].y;
        float _3477 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
        float _681 = isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0));
        float _685 = (cbMatDynParam._m0[5u].z * _674) + cbMatDynParam._m0[5u].w;
        float _3488 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0))) - _681)) + _681) < ((_518 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _529 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _530 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _549 = fma(_430, cbSceneParam._m0[5u].z, fma(_429, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _428));
    float _552 = fma(_430, cbSceneParam._m0[6u].z, fma(_429, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _428));
    float _555 = fma(_430, cbSceneParam._m0[7u].z, fma(_429, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _428));
    uint _568 = uint(roundEven(NORMAL.w)) * 13u;
    uint _570 = _568 + 9u;
    uint _571 = _570 + uint(cbMatDynParam._m0[0u].w);
    float _577 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0)))) * cbInstanceData._m0[_571].x;
    float _578 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0)))) * cbInstanceData._m0[_571].y;
    float _579 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0)))) * cbInstanceData._m0[_571].z;
    float _3499 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _580 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
    float _3510 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _581 = isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0));
    float _3521 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _582 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
    vec4 _591 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _529, cbSceneParam._m0[86u].y * _530));
    float _594 = _591.x * TEXCOORD_3.w;
    float _595 = dot(vec3(_428, _429, _430), vec3(_509, _510, _511));
    float _598 = _595 * 2.0;
    float _602 = (_598 * _428) - _509;
    float _603 = (_598 * _429) - _510;
    float _604 = (_598 * _430) - _511;
    float _608 = abs(dot(vec3(_509, _510, _511), vec3(_428, _429, _430)));
    float _3532 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _610 = sqrt(_431);
    float _623 = exp2((_610 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_610 * 3.0));
    float _655 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _659 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _663 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _994;
    float _996;
    float _997;
    float _998;
    float _999;
    float _1000;
    float _1001;
    float _1002;
    float _1003;
    float _1004;
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _719 = fma(_663, cbModelParam._m0[26u].z, fma(_659, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _655));
        float _723 = fma(_663, cbModelParam._m0[27u].z, fma(_659, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _655));
        float _727 = fma(_663, cbModelParam._m0[28u].z, fma(_659, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _655));
        float _752 = _655 + _428;
        float _753 = _659 + _429;
        float _754 = _663 + _430;
        float _764 = fma(_754, cbModelParam._m0[26u].z, fma(_753, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _752)) - _719;
        float _765 = fma(_754, cbModelParam._m0[27u].z, fma(_753, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _752)) - _723;
        float _766 = fma(_754, cbModelParam._m0[28u].z, fma(_753, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _752)) - _727;
        float _770 = inversesqrt(dot(vec3(_764, _765, _766), vec3(_764, _765, _766)));
        float _783 = ((_770 * _764) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_719 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _784 = ((_770 * _765) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_723 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _785 = ((_770 * _766) / cbModelParam._m0[34u].z) + ((((((_727 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _788 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_783, _784, _785), 0.0);
        vec4 _795 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_783, _784, _785), 0.0);
        vec4 _802 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_783, _784, _785), 0.0);
        vec4 _809 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_783, _784, _785), 0.0);
        float _822 = exp2((_788.w + (-0.5)) * 20.0) * 2.0;
        float _823 = _822 * (_788.x + (-0.5));
        float _824 = _822 * (_788.y + (-0.5));
        float _825 = _822 * (_788.z + (-0.5));
        float _832 = exp2((_795.w + (-0.5)) * 20.0) * 2.0;
        float _833 = _832 * (_795.x + (-0.5));
        float _834 = _832 * (_795.y + (-0.5));
        float _835 = _832 * (_795.z + (-0.5));
        float _842 = exp2((_802.w + (-0.5)) * 20.0) * 2.0;
        float _843 = _842 * (_802.x + (-0.5));
        float _844 = _842 * (_802.y + (-0.5));
        float _845 = _842 * (_802.z + (-0.5));
        float _852 = exp2((_809.w + (-0.5)) * 20.0) * 2.0;
        float _853 = _852 * (_809.x + (-0.5));
        float _854 = _852 * (_809.y + (-0.5));
        float _855 = _852 * (_809.z + (-0.5));
        float _856 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
        float _857 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
        float _858 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
        float _859 = _823 * 0.5;
        float _860 = _833 * 0.5;
        float _861 = _843 * 0.5;
        float _862 = dot(vec3(_859, _860, _861), vec3(_859, _860, _861));
        float _867 = (_862 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_862);
        float _876 = (dot(vec3(_428, _429, _430), vec3(_867 * _859, _867 * _860, _867 * _861)) + 1.0) * 0.5;
        float _3558 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _886 = sqrt(((_860 * _860) + (_859 * _859)) + (_861 * _861)) / (_856 + 9.9999997473787516355514526367188e-06);
        float _3569 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _887 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
        float _888 = _887 * 2.0;
        float _892 = (1.0 - _887) / (_887 + 1.0);
        float _3580 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _893 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
        float _902 = ((((1.0 - _893) * (_888 + 2.0)) * exp2(log2(isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0))) * (_888 + 1.0))) + _893) * _856;
        float _903 = _824 * 0.5;
        float _904 = _834 * 0.5;
        float _905 = _844 * 0.5;
        float _906 = dot(vec3(_903, _904, _905), vec3(_903, _904, _905));
        float _911 = (_906 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_906);
        float _919 = (dot(vec3(_428, _429, _430), vec3(_911 * _903, _911 * _904, _911 * _905)) + 1.0) * 0.5;
        float _3591 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _928 = sqrt(((_904 * _904) + (_903 * _903)) + (_905 * _905)) / (_857 + 9.9999997473787516355514526367188e-06);
        float _3602 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _929 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
        float _930 = _929 * 2.0;
        float _934 = (1.0 - _929) / (_929 + 1.0);
        float _3613 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _935 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
        float _944 = ((((1.0 - _935) * (_930 + 2.0)) * exp2(log2(isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0))) * (_930 + 1.0))) + _935) * _857;
        float _945 = _825 * 0.5;
        float _946 = _835 * 0.5;
        float _947 = _845 * 0.5;
        float _948 = dot(vec3(_945, _946, _947), vec3(_945, _946, _947));
        float _953 = (_948 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_948);
        float _961 = (dot(vec3(_428, _429, _430), vec3(_953 * _945, _953 * _946, _953 * _947)) + 1.0) * 0.5;
        float _3624 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _970 = sqrt(((_946 * _946) + (_945 * _945)) + (_947 * _947)) / (_858 + 9.9999997473787516355514526367188e-06);
        float _3635 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _971 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
        float _972 = _971 * 2.0;
        float _976 = (1.0 - _971) / (_971 + 1.0);
        float _3646 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _977 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
        float _986 = ((((1.0 - _977) * (_972 + 2.0)) * exp2(log2(isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0))) * (_972 + 1.0))) + _977) * _858;
        _994 = _825;
        _996 = _824;
        _997 = _823;
        _998 = _835;
        _999 = _834;
        _1000 = _833;
        _1001 = _845;
        _1002 = _844;
        _1003 = _843;
        _1004 = _858;
        _1005 = _857;
        _1006 = _856;
        _1007 = cbModelParam._m0[36u].z * (isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0)));
        _1008 = cbModelParam._m0[36u].z * (isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0)));
        _1009 = cbModelParam._m0[36u].z * (isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0)));
    }
    else
    {
        _994 = _995;
        _996 = _995;
        _997 = _995;
        _998 = _995;
        _999 = _995;
        _1000 = _995;
        _1001 = _995;
        _1002 = _995;
        _1003 = _995;
        _1004 = _995;
        _1005 = _995;
        _1006 = _995;
        _1007 = 0.0;
        _1008 = 0.0;
        _1009 = 0.0;
    }
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1038 = fma(_663, cbModelParam._m0[30u].z, fma(_659, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _655));
        float _1042 = fma(_663, cbModelParam._m0[31u].z, fma(_659, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _655));
        float _1046 = fma(_663, cbModelParam._m0[32u].z, fma(_659, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _655));
        float _1069 = _655 + _428;
        float _1070 = _659 + _429;
        float _1071 = _663 + _430;
        float _1081 = fma(_1071, cbModelParam._m0[30u].z, fma(_1070, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1069)) - _1038;
        float _1082 = fma(_1071, cbModelParam._m0[31u].z, fma(_1070, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1069)) - _1042;
        float _1083 = fma(_1071, cbModelParam._m0[32u].z, fma(_1070, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1069)) - _1046;
        float _1087 = inversesqrt(dot(vec3(_1081, _1082, _1083), vec3(_1081, _1082, _1083)));
        float _1100 = ((_1087 * _1081) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1038 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1101 = ((_1087 * _1082) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1042 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1102 = ((_1087 * _1083) / cbModelParam._m0[35u].z) + ((((((_1046 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1104 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1100, _1101, _1102), 0.0);
        vec4 _1111 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1100, _1101, _1102), 0.0);
        vec4 _1118 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1100, _1101, _1102), 0.0);
        vec4 _1125 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1100, _1101, _1102), 0.0);
        float _1137 = exp2((_1104.w + (-0.5)) * 20.0) * 2.0;
        float _1138 = _1137 * (_1104.x + (-0.5));
        float _1139 = _1137 * (_1104.y + (-0.5));
        float _1140 = _1137 * (_1104.z + (-0.5));
        float _1147 = exp2((_1111.w + (-0.5)) * 20.0) * 2.0;
        float _1148 = _1147 * (_1111.x + (-0.5));
        float _1149 = _1147 * (_1111.y + (-0.5));
        float _1150 = _1147 * (_1111.z + (-0.5));
        float _1157 = exp2((_1118.w + (-0.5)) * 20.0) * 2.0;
        float _1158 = _1157 * (_1118.x + (-0.5));
        float _1159 = _1157 * (_1118.y + (-0.5));
        float _1160 = _1157 * (_1118.z + (-0.5));
        float _1167 = exp2((_1125.w + (-0.5)) * 20.0) * 2.0;
        float _1168 = _1167 * (_1125.x + (-0.5));
        float _1169 = _1167 * (_1125.y + (-0.5));
        float _1170 = _1167 * (_1125.z + (-0.5));
        float _1171 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1172 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1173 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1174 = _1138 * 0.5;
        float _1175 = _1148 * 0.5;
        float _1176 = _1158 * 0.5;
        float _1177 = dot(vec3(_1174, _1175, _1176), vec3(_1174, _1175, _1176));
        float _1182 = (_1177 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1177);
        float _1190 = (dot(vec3(_428, _429, _430), vec3(_1182 * _1174, _1182 * _1175, _1182 * _1176)) + 1.0) * 0.5;
        float _3687 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1199 = sqrt(((_1175 * _1175) + (_1174 * _1174)) + (_1176 * _1176)) / (_1171 + 9.9999997473787516355514526367188e-06);
        float _3698 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
        float _1201 = _1200 * 2.0;
        float _1205 = (1.0 - _1200) / (_1200 + 1.0);
        float _3709 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _1215 = ((((1.0 - _1206) * (_1201 + 2.0)) * exp2(log2(isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))) * (_1201 + 1.0))) + _1206) * _1171;
        float _1216 = _1139 * 0.5;
        float _1217 = _1149 * 0.5;
        float _1218 = _1159 * 0.5;
        float _1219 = dot(vec3(_1216, _1217, _1218), vec3(_1216, _1217, _1218));
        float _1224 = (_1219 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1219);
        float _1232 = (dot(vec3(_428, _429, _430), vec3(_1224 * _1216, _1224 * _1217, _1224 * _1218)) + 1.0) * 0.5;
        float _3720 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1241 = sqrt(((_1217 * _1217) + (_1216 * _1216)) + (_1218 * _1218)) / (_1172 + 9.9999997473787516355514526367188e-06);
        float _3731 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
        float _1243 = _1242 * 2.0;
        float _1247 = (1.0 - _1242) / (_1242 + 1.0);
        float _3742 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _1257 = ((((1.0 - _1248) * (_1243 + 2.0)) * exp2(log2(isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0))) * (_1243 + 1.0))) + _1248) * _1172;
        float _1258 = _1140 * 0.5;
        float _1259 = _1150 * 0.5;
        float _1260 = _1160 * 0.5;
        float _1261 = dot(vec3(_1258, _1259, _1260), vec3(_1258, _1259, _1260));
        float _1266 = (_1261 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1261);
        float _1274 = (dot(vec3(_428, _429, _430), vec3(_1266 * _1258, _1266 * _1259, _1266 * _1260)) + 1.0) * 0.5;
        float _3753 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1283 = sqrt(((_1259 * _1259) + (_1258 * _1258)) + (_1260 * _1260)) / (_1173 + 9.9999997473787516355514526367188e-06);
        float _3764 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _1285 = _1284 * 2.0;
        float _1289 = (1.0 - _1284) / (_1284 + 1.0);
        float _3775 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
        float _1299 = ((((1.0 - _1290) * (_1285 + 2.0)) * exp2(log2(isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0))) * (_1285 + 1.0))) + _1290) * _1173;
        _1307 = _1140;
        _1308 = _1139;
        _1309 = _1138;
        _1310 = _1150;
        _1311 = _1149;
        _1312 = _1148;
        _1313 = _1160;
        _1314 = _1159;
        _1315 = _1158;
        _1316 = _1173;
        _1317 = _1172;
        _1318 = _1171;
        _1319 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0)));
        _1320 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0)));
        _1321 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0)));
    }
    else
    {
        _1307 = _995;
        _1308 = _995;
        _1309 = _995;
        _1310 = _995;
        _1311 = _995;
        _1312 = _995;
        _1313 = _995;
        _1314 = _995;
        _1315 = _995;
        _1316 = _995;
        _1317 = _995;
        _1318 = _995;
        _1319 = 0.0;
        _1320 = 0.0;
        _1321 = 0.0;
    }
    float _1331 = (cbModelParam._m0[1u].x * (_1319 - _1007)) + _1007;
    float _1332 = (cbModelParam._m0[1u].x * (_1320 - _1008)) + _1008;
    float _1333 = (cbModelParam._m0[1u].x * (_1321 - _1009)) + _1009;
    float _1354 = fma(_1333, cbSceneParam._m0[89u].z, fma(_1332, cbSceneParam._m0[89u].y, _1331 * cbSceneParam._m0[89u].x));
    float _1357 = fma(_1333, cbSceneParam._m0[90u].z, fma(_1332, cbSceneParam._m0[90u].y, _1331 * cbSceneParam._m0[90u].x));
    float _1360 = fma(_1333, cbSceneParam._m0[91u].z, fma(_1332, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1331));
    float _1375 = _602 * 0.5;
    float _1376 = _603 * 0.5;
    float _1377 = _604 * 0.5;
    float _1378 = dot(vec4(_1375, _1376, _1377, 1.0), vec4(_1309, _1312, _1315, _1318));
    float _1381 = dot(vec4(_1375, _1376, _1377, 1.0), vec4(_1308, _1311, _1314, _1317));
    float _1384 = dot(vec4(_1375, _1376, _1377, 1.0), vec4(_1307, _1310, _1313, _1316));
    float _1418;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1391 = dot(vec4(_1375, _1376, _1377, 1.0), vec4(_994, _998, _1001, _1004));
        float _1395 = dot(vec4(_1375, _1376, _1377, 1.0), vec4(_996, _999, _1002, _1005));
        float _1399 = dot(vec4(_1375, _1376, _1377, 1.0), vec4(_997, _1000, _1003, _1006));
        float _1406 = dot(vec4(cbModelParam._m0[39u]), vec4(_1375, _1376, _1377, 1.0));
        _1418 = dot(vec3(isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0)), isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0)), isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1406) ? 0.0 : (isnan(0.0) ? _1406 : max(0.0, _1406))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1418 = 1.0;
    }
    float _1429;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1420 = dot(vec4(cbModelParam._m0[40u]), vec4(_1375, _1376, _1377, 1.0));
        _1429 = dot(vec3(isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0)), isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0)), isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1420) ? 0.0 : (isnan(0.0) ? _1420 : max(0.0, _1420))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1429 = 1.0;
    }
    float _1433 = (_1429 * cbModelParam._m0[1u].x) + (_1418 * (1.0 - cbModelParam._m0[1u].x));
    float _1443 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _431);
    float _1444 = isnan(_1443) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1443 : min(cbModelParam._m0[25u].z, _1443));
    float _1526;
    float _1528;
    float _1530;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1493 = fma(_663, cbModelParam._m0[13u].z, fma(_659, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _655)) + cbModelParam._m0[13u].w;
        float _1497 = fma(_663, cbModelParam._m0[14u].z, fma(_659, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _655)) + cbModelParam._m0[14u].w;
        float _1501 = fma(_663, cbModelParam._m0[15u].z, fma(_659, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _655)) + cbModelParam._m0[15u].w;
        float _1504 = fma(_604, cbModelParam._m0[13u].z, fma(_603, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _602));
        float _1507 = fma(_604, cbModelParam._m0[14u].z, fma(_603, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _602));
        float _1510 = fma(_604, cbModelParam._m0[15u].z, fma(_603, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _602));
        float _1538;
        if (_1504 > 0.0)
        {
            _1538 = abs((1.0 - _1493) / _1504);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1504 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1493 + 1.0) / _1504);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1538 = frontier_phi_19_17_ladder;
        }
        float _1764;
        if (_1507 > 0.0)
        {
            _1764 = abs((1.0 - _1497) / _1507);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1507 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1497 + 1.0) / _1507);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1764 = frontier_phi_28_24_ladder;
        }
        float _2010;
        if (_1510 > 0.0)
        {
            _2010 = abs((1.0 - _1501) / _1510);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1510 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1501 + 1.0) / _1510);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2010 = frontier_phi_40_35_ladder;
        }
        float _2012 = isnan(_1764) ? _1538 : (isnan(_1538) ? _1764 : min(_1538, _1764));
        float _2013 = isnan(_2010) ? _2012 : (isnan(_2012) ? _2010 : min(_2012, _2010));
        float _2017 = (_2013 * _1504) + _1493;
        float _2018 = (_2013 * _1507) + _1497;
        float _2019 = (_2013 * _1510) + _1501;
        float _2020 = _2013 * 9.9999997473787516355514526367188e-05;
        float _2022 = (-1.0) - _2020;
        float _2024 = _2020 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2019 > _2024) || ((_2019 < _2022) || ((_2018 > _2024) || ((_2018 < _2022) || ((_2017 < _2022) || (_2017 > _2024))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2143 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2019, cbModelParam._m0[9u].z, fma(_2018, cbModelParam._m0[9u].y, _2017 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2019, cbModelParam._m0[10u].z, fma(_2018, cbModelParam._m0[10u].y, _2017 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2019, cbModelParam._m0[11u].z, fma(_2018, cbModelParam._m0[11u].y, _2017 * cbModelParam._m0[11u].x))), _1444);
            frontier_phi_18_40_ladder = _2143.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2143.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2143.x * cbModelParam._m0[1u].y;
        }
        _1526 = frontier_phi_18_40_ladder_2;
        _1528 = frontier_phi_18_40_ladder_1;
        _1530 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1514 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_602, _603, _604), _1444);
        _1526 = _1514.x * cbModelParam._m0[1u].y;
        _1528 = _1514.y * cbModelParam._m0[1u].y;
        _1530 = _1514.z * cbModelParam._m0[1u].y;
    }
    float _1534 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _431);
    float _1535 = isnan(_1534) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1534 : min(cbModelParam._m0[25u].w, _1534));
    float _1628;
    float _1630;
    float _1632;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1592 = fma(_663, cbModelParam._m0[21u].z, fma(_659, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _655)) + cbModelParam._m0[21u].w;
        float _1596 = fma(_663, cbModelParam._m0[22u].z, fma(_659, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _655)) + cbModelParam._m0[22u].w;
        float _1600 = fma(_663, cbModelParam._m0[23u].z, fma(_659, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _655)) + cbModelParam._m0[23u].w;
        float _1603 = fma(_604, cbModelParam._m0[21u].z, fma(_603, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _602));
        float _1606 = fma(_604, cbModelParam._m0[22u].z, fma(_603, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _602));
        float _1609 = fma(_604, cbModelParam._m0[23u].z, fma(_603, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _602));
        float _1769;
        if (_1603 > 0.0)
        {
            _1769 = abs((1.0 - _1592) / _1603);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1603 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1592 + 1.0) / _1603);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1769 = frontier_phi_30_26_ladder;
        }
        float _2037;
        if (_1606 > 0.0)
        {
            _2037 = abs((1.0 - _1596) / _1606);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1606 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1596 + 1.0) / _1606);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2037 = frontier_phi_42_37_ladder;
        }
        float _2242;
        if (_1609 > 0.0)
        {
            _2242 = abs((1.0 - _1600) / _1609);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1609 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1600 + 1.0) / _1609);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2242 = frontier_phi_51_48_ladder;
        }
        float _2244 = isnan(_2037) ? _1769 : (isnan(_1769) ? _2037 : min(_1769, _2037));
        float _2245 = isnan(_2242) ? _2244 : (isnan(_2244) ? _2242 : min(_2244, _2242));
        float _2249 = (_2245 * _1603) + _1592;
        float _2250 = (_2245 * _1606) + _1596;
        float _2251 = (_2245 * _1609) + _1600;
        float _2252 = _2245 * 9.9999997473787516355514526367188e-05;
        float _2253 = (-1.0) - _2252;
        float _2255 = _2252 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2251 > _2255) || ((_2251 < _2253) || ((_2250 > _2255) || ((_2250 < _2253) || ((_2249 < _2253) || (_2249 > _2255))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2449 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2251, cbModelParam._m0[17u].z, fma(_2250, cbModelParam._m0[17u].y, _2249 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2251, cbModelParam._m0[18u].z, fma(_2250, cbModelParam._m0[18u].y, _2249 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2251, cbModelParam._m0[19u].z, fma(_2250, cbModelParam._m0[19u].y, _2249 * cbModelParam._m0[19u].x))), _1535);
            frontier_phi_27_51_ladder = _2449.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2449.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2449.x * cbModelParam._m0[1u].z;
        }
        _1628 = frontier_phi_27_51_ladder_2;
        _1630 = frontier_phi_27_51_ladder_1;
        _1632 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1612 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_602, _603, _604), _1535);
        _1628 = _1612.x * cbModelParam._m0[1u].z;
        _1630 = _1612.y * cbModelParam._m0[1u].z;
        _1632 = _1612.z * cbModelParam._m0[1u].z;
    }
    float _1644 = ((((1.0 - _623) * ((_610 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_623 * _610)) * _594;
    float _1645 = _1644 * ((cbModelParam._m0[1u].w * (_1628 - _1526)) + _1526);
    float _1646 = _1644 * ((cbModelParam._m0[1u].w * (_1630 - _1528)) + _1528);
    float _1647 = _1644 * ((cbModelParam._m0[1u].w * (_1632 - _1530)) + _1530);
    float _1650 = fma(_1647, cbSceneParam._m0[89u].z, fma(_1646, cbSceneParam._m0[89u].y, _1645 * cbSceneParam._m0[89u].x));
    float _1653 = fma(_1647, cbSceneParam._m0[90u].z, fma(_1646, cbSceneParam._m0[90u].y, _1645 * cbSceneParam._m0[90u].x));
    float _1656 = fma(_1647, cbSceneParam._m0[91u].z, fma(_1646, cbSceneParam._m0[91u].y, _1645 * cbSceneParam._m0[91u].x));
    vec4 _1664 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_529, _530));
    float _1666 = _1664.w;
    float _1678 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1666);
    float _1679 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1666);
    float _1680 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1666);
    uvec4 _1684 = floatBitsToUint(cbInstanceData._m0[_568 + 5u]);
    uint _1686 = _1684.x * 14u;
    uint _1687 = _1686 + 13u;
    float _1694 = _594 + (-1.0);
    float _1699 = (cbLight._m0[_1687].x * _1694) + 1.0;
    float _1700 = (cbLight._m0[_1687].y * _1694) + 1.0;
    float _1701 = (cbLight._m0[_1687].z * _1694) + 1.0;
    float _1702 = (cbLight._m0[_1687].w * _1694) + 1.0;
    uint _1703 = _1686 + 5u;
    float _1709 = isnan(1.0) ? _1700 : (isnan(_1700) ? 1.0 : min(_1700, 1.0));
    uint _1713 = _1686 + 4u;
    float _1722 = isnan(1.0) ? _1699 : (isnan(_1699) ? 1.0 : min(_1699, 1.0));
    uint _1726 = _1686 | 1u;
    float _1737 = dot(vec3(cbLight._m0[_1686].xyz), vec3(_428, _429, _430));
    float _1740 = dot(vec3(cbLight._m0[_1726].xyz), vec3(_428, _429, _430));
    float _3911 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
    float _3922 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
    float _1745 = (isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0))) * 0.3183098733425140380859375;
    float _1747 = (isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0))) * 0.3183098733425140380859375;
    float _1754 = ((cbLight._m0[_1703].x * _1709) * _1747) + (((cbLight._m0[_1713].x * _1678) * _1722) * _1745);
    float _1755 = ((_1709 * cbLight._m0[_1703].y) * _1747) + (((cbLight._m0[_1713].y * _1679) * _1722) * _1745);
    float _1756 = ((_1709 * cbLight._m0[_1703].z) * _1747) + (((cbLight._m0[_1713].z * _1680) * _1722) * _1745);
    uvec4 _1761 = floatBitsToUint(cbLight._m0[_1686 + 12u]);
    bool _1763 = _1761.x == 0u;
    float _1774;
    float _1776;
    float _1778;
    if (_1763)
    {
        _1774 = _1754;
        _1776 = _1755;
        _1778 = _1756;
    }
    else
    {
        uint _1782 = _1686 + 6u;
        float _1798 = (dot(vec3(cbLight._m0[_1686 + 2u].xyz), vec3(_428, _429, _430)) * 0.5) + 0.5;
        float _1799 = _1798 * _1798;
        float _3933 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
        float _1800 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
        float _1801 = isnan(1.0) ? _1701 : (isnan(_1701) ? 1.0 : min(_1701, 1.0));
        _1774 = (((cbLight._m0[_1782].x * 0.3183098733425140380859375) * _1800) * _1801) + _1754;
        _1776 = (((cbLight._m0[_1782].y * 0.3183098733425140380859375) * _1800) * _1801) + _1755;
        _1778 = (((cbLight._m0[_1782].z * 0.3183098733425140380859375) * _1800) * _1801) + _1756;
    }
    bool _1781 = _1761.y == 0u;
    float _1819;
    float _1821;
    float _1823;
    if (_1781)
    {
        _1819 = _1774;
        _1821 = _1776;
        _1823 = _1778;
    }
    else
    {
        uint _1981 = _1686 + 7u;
        float _1997 = (dot(vec3(cbLight._m0[_1686 + 3u].xyz), vec3(_428, _429, _430)) * 0.5) + 0.5;
        float _1998 = _1997 * _1997;
        float _3949 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
        float _1999 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _2000 = isnan(1.0) ? _1702 : (isnan(_1702) ? 1.0 : min(_1702, 1.0));
        _1819 = (((cbLight._m0[_1981].x * 0.3183098733425140380859375) * _1999) * _2000) + _1774;
        _1821 = (((cbLight._m0[_1981].y * 0.3183098733425140380859375) * _1999) * _2000) + _1776;
        _1823 = (((cbLight._m0[_1981].z * 0.3183098733425140380859375) * _1999) * _2000) + _1778;
    }
    uint _1826 = _1686 + 8u;
    float _1839 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1686].w)) * _431) * 0.949999988079071044921875);
    float _1840 = _1839 * _1839;
    float _1841 = cbLight._m0[_1686].x + _509;
    float _1842 = cbLight._m0[_1686].y + _510;
    float _1843 = cbLight._m0[_1686].z + _511;
    float _1847 = inversesqrt(dot(vec3(_1841, _1842, _1843), vec3(_1841, _1842, _1843)));
    float _1848 = _1847 * _1841;
    float _1849 = _1847 * _1842;
    float _1850 = _1847 * _1843;
    float _1851 = dot(vec3(_428, _429, _430), vec3(cbLight._m0[_1686].xyz));
    float _3965 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
    float _1854 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
    float _3976 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _1855 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
    float _1856 = dot(vec3(_428, _429, _430), vec3(_1848, _1849, _1850));
    float _3987 = isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0));
    float _1859 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
    float _1860 = dot(vec3(cbLight._m0[_1686].xyz), vec3(_1848, _1849, _1850));
    float _3998 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
    float _1864 = _1840 * _1840;
    float _1868 = ((_1859 * _1859) * (_1864 + (-1.0))) + 1.0;
    float _1879 = (exp2(log2(1.0 - (isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1880 = 1.0 - _1840;
    float _1891 = (0.5 / (((_1855 * ((_1854 * _1880) + _1840)) + 9.9999999392252902907785028219223e-09) + (((_1855 * _1880) + _1840) * _1854))) * _1854;
    float _4009 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
    float _1893 = (isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0))) * (_1864 / ((_1868 * _1868) * 3.141590118408203125));
    uint _1907 = _1686 + 9u;
    float _1918 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1726].w)) * _431) * 0.949999988079071044921875);
    float _1919 = _1918 * _1918;
    float _1920 = cbLight._m0[_1726].x + _509;
    float _1921 = cbLight._m0[_1726].y + _510;
    float _1922 = cbLight._m0[_1726].z + _511;
    float _1926 = inversesqrt(dot(vec3(_1920, _1921, _1922), vec3(_1920, _1921, _1922)));
    float _1927 = _1926 * _1920;
    float _1928 = _1926 * _1921;
    float _1929 = _1926 * _1922;
    float _1930 = dot(vec3(_428, _429, _430), vec3(cbLight._m0[_1726].xyz));
    float _4020 = isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0));
    float _1933 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
    float _1934 = dot(vec3(_428, _429, _430), vec3(_1927, _1928, _1929));
    float _4031 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
    float _1937 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
    float _1938 = dot(vec3(cbLight._m0[_1726].xyz), vec3(_1927, _1928, _1929));
    float _4042 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
    float _1942 = _1919 * _1919;
    float _1946 = ((_1937 * _1937) * (_1942 + (-1.0))) + 1.0;
    float _1955 = (exp2(log2(1.0 - (isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1956 = 1.0 - _1919;
    float _1966 = (0.5 / (((_1855 * ((_1933 * _1956) + _1919)) + 9.9999999392252902907785028219223e-09) + (((_1855 * _1956) + _1919) * _1933))) * _1933;
    float _4053 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
    float _1968 = (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) * (_1942 / ((_1946 * _1946) * 3.141590118408203125));
    float _1978 = (((_1955 * cbLight._m0[_1907].x) * _1968) * _1709) + ((((cbLight._m0[_1826].x * _1678) * _1879) * _1893) * _1722);
    float _1979 = (((_1955 * cbLight._m0[_1907].y) * _1968) * _1709) + ((((cbLight._m0[_1826].y * _1679) * _1879) * _1893) * _1722);
    float _1980 = (((_1955 * cbLight._m0[_1907].z) * _1968) * _1709) + ((((cbLight._m0[_1826].z * _1680) * _1879) * _1893) * _1722);
    float _2042;
    float _2044;
    float _2046;
    if (_1763)
    {
        _2042 = _1978;
        _2044 = _1979;
        _2046 = _1980;
    }
    else
    {
        uint _2048 = _1686 + 2u;
        uint _2052 = _1686 + 10u;
        float _2066 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2048].w)) * _431) * 0.949999988079071044921875);
        float _2067 = _2066 * _2066;
        float _2068 = cbLight._m0[_2048].x + _509;
        float _2069 = cbLight._m0[_2048].y + _510;
        float _2070 = cbLight._m0[_2048].z + _511;
        float _2074 = inversesqrt(dot(vec3(_2068, _2069, _2070), vec3(_2068, _2069, _2070)));
        float _2075 = _2074 * _2068;
        float _2076 = _2074 * _2069;
        float _2077 = _2074 * _2070;
        float _2078 = dot(vec3(_428, _429, _430), vec3(cbLight._m0[_2048].xyz));
        float _4064 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
        float _2081 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _2082 = dot(vec3(_428, _429, _430), vec3(_2075, _2076, _2077));
        float _4075 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
        float _2085 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
        float _2086 = dot(vec3(cbLight._m0[_2048].xyz), vec3(_2075, _2076, _2077));
        float _4086 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
        float _2090 = _2067 * _2067;
        float _2094 = ((_2085 * _2085) * (_2090 + (-1.0))) + 1.0;
        float _2103 = (exp2(log2(1.0 - (isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2104 = 1.0 - _2067;
        float _2114 = (0.5 / (((_1855 * ((_2081 * _2104) + _2067)) + 9.9999999392252902907785028219223e-09) + (((_1855 * _2104) + _2067) * _2081))) * _2081;
        float _4097 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
        float _2116 = (isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))) * (_2090 / ((_2094 * _2094) * 3.141590118408203125));
        float _2117 = isnan(1.0) ? _1701 : (isnan(_1701) ? 1.0 : min(_1701, 1.0));
        _2042 = (((_2103 * cbLight._m0[_2052].x) * _2116) * _2117) + _1978;
        _2044 = (((_2103 * cbLight._m0[_2052].y) * _2116) * _2117) + _1979;
        _2046 = (((_2103 * cbLight._m0[_2052].z) * _2116) * _2117) + _1980;
    }
    float _2152;
    float _2154;
    float _2156;
    if (_1781)
    {
        _2152 = _2042;
        _2154 = _2044;
        _2156 = _2046;
    }
    else
    {
        uint _2163 = _1686 + 3u;
        uint _2167 = _1686 + 11u;
        float _2181 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2163].w)) * _431) * 0.949999988079071044921875);
        float _2182 = _2181 * _2181;
        float _2183 = cbLight._m0[_2163].x + _509;
        float _2184 = cbLight._m0[_2163].y + _510;
        float _2185 = cbLight._m0[_2163].z + _511;
        float _2189 = inversesqrt(dot(vec3(_2183, _2184, _2185), vec3(_2183, _2184, _2185)));
        float _2190 = _2189 * _2183;
        float _2191 = _2189 * _2184;
        float _2192 = _2189 * _2185;
        float _2193 = dot(vec3(_428, _429, _430), vec3(cbLight._m0[_2163].xyz));
        float _4113 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
        float _2196 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _2197 = dot(vec3(_428, _429, _430), vec3(_2190, _2191, _2192));
        float _4124 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
        float _2200 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _2201 = dot(vec3(cbLight._m0[_2163].xyz), vec3(_2190, _2191, _2192));
        float _4135 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
        float _2205 = _2182 * _2182;
        float _2209 = ((_2200 * _2200) * (_2205 + (-1.0))) + 1.0;
        float _2218 = (exp2(log2(1.0 - (isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2219 = 1.0 - _2182;
        float _2229 = (0.5 / (((_1855 * ((_2196 * _2219) + _2182)) + 9.9999999392252902907785028219223e-09) + (((_1855 * _2219) + _2182) * _2196))) * _2196;
        float _4146 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
        float _2231 = (isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * (_2205 / ((_2209 * _2209) * 3.141590118408203125));
        float _2232 = isnan(1.0) ? _1702 : (isnan(_1702) ? 1.0 : min(_1702, 1.0));
        _2152 = (((_2218 * cbLight._m0[_2167].x) * _2231) * _2232) + _2042;
        _2154 = (((_2218 * cbLight._m0[_2167].y) * _2231) * _2232) + _2044;
        _2156 = (((_2218 * cbLight._m0[_2167].z) * _2231) * _2232) + _2046;
    }
    float _2366;
    float _2368;
    float _2370;
    float _2372;
    float _2374;
    float _2376;
    if (_1684.y == 0u)
    {
        float _2307 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2308 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2307;
        float _2309 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2307;
        float _2310 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2307;
        uvec4 _2322 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2323 = _2322.x;
        uint _2334 = uint((float(_2322.y) * floor(float(uint(cbSceneParam._m0[85u].y * _530) / _2323))) + floor(float(uint(cbSceneParam._m0[85u].x * _529) / _2323)));
        float _2344 = (log2(_2310 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2345 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
        uint _2348 = uint(isnan(14.0) ? _2345 : (isnan(_2345) ? 14.0 : min(_2345, 14.0)));
        uvec4 _2353 = texelFetch(g_lightClusterGridBuffer, int(((_2348 << 2u) + (_2334 << 6u)) >> 2u));
        uint _2354 = _2353.x;
        uint _2355 = _2322.z;
        float _2454;
        float _2456;
        float _2458;
        float _2460;
        float _2462;
        float _2464;
        if (((((1u << ((_2355 >> 4u) & 15u)) + 4294967295u) & _2354) == 0u) || ((_2355 & 240u) == 0u))
        {
            _2454 = 0.0;
            _2456 = 0.0;
            _2458 = 0.0;
            _2460 = 0.0;
            _2462 = 0.0;
            _2464 = 0.0;
        }
        else
        {
            float _2455;
            float _2457;
            float _2459;
            float _2461;
            float _2463;
            float _2465;
            float _2606 = 0.0;
            float _2607 = 0.0;
            float _2608 = 0.0;
            float _2609 = 0.0;
            float _2610 = 0.0;
            float _2611 = 0.0;
            uint _2612 = 0u;
            uint _2621;
            bool _2622;
            for (;;)
            {
                _2621 = texelFetch(g_lightClassification, int((((_2348 << 5u) + (_2334 << 9u)) + (_2612 << 2u)) >> 2u)).x;
                _2622 = _2621 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2622)
                {
                    frontier_phi_68_pred = _2608;
                    frontier_phi_68_pred_1 = _2611;
                    frontier_phi_68_pred_2 = _2610;
                    frontier_phi_68_pred_3 = _2609;
                    frontier_phi_68_pred_4 = _2607;
                    frontier_phi_68_pred_5 = _2606;
                }
                else
                {
                    float _2751;
                    float _2752;
                    float _2753;
                    float _2754;
                    float _2755;
                    float _2756;
                    uint _2757;
                    _2751 = _2606;
                    _2752 = _2607;
                    _2753 = _2608;
                    _2754 = _2609;
                    _2755 = _2610;
                    _2756 = _2611;
                    _2757 = _2621;
                    float _2678;
                    float _2679;
                    float _2680;
                    float _2681;
                    float _2682;
                    float _2683;
                    for (;;)
                    {
                        uint _2761 = uint(findLSB(_2757)) + (_2612 << 5u);
                        uint _2758 = (_2757 + 4294967295u) & _2757;
                        uint _2763 = _2761 * 48u;
                        vec4 _2777 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2763)).x, texelFetch(g_PointLightRenderingBuffer, int(_2763 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2763 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2763 + 3u)).x));
                        uint _2783 = (_2761 * 48u) + 4u;
                        vec4 _2796 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2783)).x, texelFetch(g_PointLightRenderingBuffer, int(_2783 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2783 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2783 + 3u)).x));
                        uint _2802 = (_2761 * 48u) + 8u;
                        vec3 _2813 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2802)).x, texelFetch(g_PointLightRenderingBuffer, int(_2802 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2802 + 2u)).x));
                        float _2817 = _2777.x - _2308;
                        float _2818 = _2777.y - _2309;
                        float _2819 = _2777.z - _2310;
                        float _2820 = dot(vec3(_2817, _2818, _2819), vec3(_2817, _2818, _2819));
                        float _2823 = inversesqrt(_2820);
                        float _2824 = _2823 * _2817;
                        float _2825 = _2823 * _2818;
                        float _2826 = _2823 * _2819;
                        float _2827 = dot(vec3(_549, _552, _555), vec3(_2824, _2825, _2826));
                        float _2832 = 1.0 - (_2820 * _2777.w);
                        float _4172 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0));
                        float _2833 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
                        float _2834 = sqrt(_2820) * _2796.w;
                        float _2837 = 1.39999997615814208984375 / (_2834 + 1.39999997615814208984375);
                        float _2838 = _2837 * _2837;
                        float _2841 = ((1.0 - _2838) * _2827) + _2838;
                        float _2844 = _2834 * _2834;
                        float _2848 = ((isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0))) * _2833) / ((_2844 * 0.699999988079071044921875) + 1.0);
                        float _2852 = (-0.0) - _2308;
                        float _2853 = (-0.0) - _2309;
                        float _2854 = (-0.0) - _2310;
                        float _2858 = inversesqrt(dot(vec3(_2852, _2853, _2854), vec3(_2852, _2853, _2854)));
                        float _2859 = _2858 * _2852;
                        float _2860 = _2858 * _2853;
                        float _2861 = _2858 * _2854;
                        float _2869 = exp2(log2(1.0 / ((_2844 * 3.5) + 5.0)) * 0.25);
                        float _2870 = 1.0 - _610;
                        float _2877 = sqrt(1.0 - ((1.0 - (_2870 * _2870)) * (1.0 - (_2869 * _2869))));
                        float _2878 = _2877 * _2877;
                        float _2879 = _2878 * _2878;
                        float _2880 = _2859 + _2824;
                        float _2881 = _2860 + _2825;
                        float _2882 = _2861 + _2826;
                        float _2886 = inversesqrt(dot(vec3(_2880, _2881, _2882), vec3(_2880, _2881, _2882)));
                        float _2890 = dot(vec3(_549, _552, _555), vec3(_2859, _2860, _2861));
                        float _4188 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0));
                        float _2893 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
                        float _2894 = dot(vec3(_549, _552, _555), vec3(_2886 * _2880, _2886 * _2881, _2886 * _2882));
                        float _4199 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0));
                        float _2897 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
                        float _2901 = ((_2897 * _2897) * (_2879 + (-1.0))) + 1.0;
                        float _2902 = _2837 * _2878;
                        float _2903 = _2902 * _2902;
                        float _2906 = ((1.0 - _2903) * _2827) + _2903;
                        float _4210 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0));
                        float _2907 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
                        float _2908 = 1.0 - _2878;
                        float _2918 = (0.5 / (((_2907 * ((_2893 * _2908) + _2878)) + 9.9999999392252902907785028219223e-09) + (((_2907 * _2908) + _2878) * _2893))) * _2907;
                        float _4221 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0));
                        float _2929 = (((_2879 * 3.1415927410125732421875) * (isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0)))) / ((_2901 * _2901) * ((_2844 * 2.1991131305694580078125) + 3.141590118408203125))) * _2833;
                        _2681 = (_2848 * _2796.x) + _2754;
                        _2682 = (_2848 * _2796.y) + _2755;
                        _2683 = (_2848 * _2796.z) + _2756;
                        _2678 = (_2929 * _2813.x) + _2751;
                        _2679 = (_2929 * _2813.y) + _2752;
                        _2680 = (_2929 * _2813.z) + _2753;
                        if (_2758 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2751 = _2678;
                            _2752 = _2679;
                            _2753 = _2680;
                            _2754 = _2681;
                            _2755 = _2682;
                            _2756 = _2683;
                            _2757 = _2758;
                        }
                    }
                    frontier_phi_68_pred = _2680;
                    frontier_phi_68_pred_1 = _2683;
                    frontier_phi_68_pred_2 = _2682;
                    frontier_phi_68_pred_3 = _2681;
                    frontier_phi_68_pred_4 = _2679;
                    frontier_phi_68_pred_5 = _2678;
                }
                _2459 = frontier_phi_68_pred;
                _2465 = frontier_phi_68_pred_1;
                _2463 = frontier_phi_68_pred_2;
                _2461 = frontier_phi_68_pred_3;
                _2457 = frontier_phi_68_pred_4;
                _2455 = frontier_phi_68_pred_5;
                uint _2613 = _2612 + 1u;
                if (_2613 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2606 = _2455;
                    _2607 = _2457;
                    _2608 = _2459;
                    _2609 = _2461;
                    _2610 = _2463;
                    _2611 = _2465;
                    _2612 = _2613;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2454 = _2455;
            _2456 = _2457;
            _2458 = _2459;
            _2460 = _2461;
            _2462 = _2463;
            _2464 = _2465;
        }
        uvec4 _2468 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2469 = _2468.z;
        uint _2471 = (_2469 >> 8u) & 15u;
        float _2574;
        float _2576;
        float _2578;
        float _2580;
        float _2582;
        float _2584;
        if (((4294967295u << _2471) & _2354) == 0u)
        {
            _2574 = _2454;
            _2576 = _2456;
            _2578 = _2458;
            _2580 = _2460;
            _2582 = _2462;
            _2584 = _2464;
        }
        else
        {
            float _2599 = inversesqrt(dot(vec3(_2308, _2309, _2310), vec3(_2308, _2309, _2310)));
            float _2600 = _2599 * _2308;
            float _2601 = _2599 * _2309;
            float _2602 = _2599 * _2310;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2471 < ((_2469 >> 12u) & 15u))
            {
                float _2575;
                float _2577;
                float _2579;
                float _2581;
                float _2583;
                float _2585;
                float _2734 = _2454;
                float _2735 = _2456;
                float _2736 = _2458;
                float _2737 = _2460;
                float _2738 = _2462;
                float _2739 = _2464;
                uint _2740 = _2471;
                uint _2749;
                bool _2750;
                for (;;)
                {
                    _2749 = texelFetch(g_lightClassification, int((((_2348 << 5u) + (_2334 << 9u)) + (_2740 << 2u)) >> 2u)).x;
                    _2750 = _2749 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2750)
                    {
                        frontier_phi_79_pred = _2739;
                        frontier_phi_79_pred_1 = _2738;
                        frontier_phi_79_pred_2 = _2737;
                        frontier_phi_79_pred_3 = _2736;
                        frontier_phi_79_pred_4 = _2735;
                        frontier_phi_79_pred_5 = _2734;
                    }
                    else
                    {
                        float _2943;
                        float _2944;
                        float _2945;
                        float _2946;
                        float _2947;
                        float _2948;
                        float _3239;
                        float _3240;
                        float _3241;
                        float _3242;
                        float _3243;
                        float _3244;
                        float _2956 = _2734;
                        float _2957 = _2735;
                        float _2958 = _2736;
                        float _2959 = _2737;
                        float _2960 = _2738;
                        float _2961 = _2739;
                        uint _2962 = _2749;
                        uint _2963;
                        vec4 _2988;
                        float _2989;
                        vec4 _3004;
                        vec3 _3016;
                        vec4 _3032;
                        vec4 _3048;
                        float _3095;
                        bool _3096;
                        for (;;)
                        {
                            uint _2973 = ((_2740 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2962));
                            _2963 = (_2962 + 4294967295u) & _2962;
                            uint _2975 = _2973 * 40u;
                            _2988 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2975)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 3u)).x));
                            _2989 = _2988.w;
                            uint _2991 = (_2973 * 40u) + 4u;
                            _3004 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2991)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 3u)).x));
                            uint _3006 = (_2973 * 40u) + 8u;
                            _3016 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3006)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 2u)).x));
                            uint _3019 = (_2973 * 40u) + 16u;
                            _3032 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3019)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 3u)).x));
                            uint _3035 = (_2973 * 40u) + 20u;
                            _3048 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3035)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 3u)).x));
                            uint _3051 = (_2973 * 40u) + 24u;
                            vec4 _3064 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3051)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3051 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3051 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3051 + 3u)).x));
                            uint _3070 = (_2973 * 40u) + 28u;
                            vec4 _3083 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3070)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 3u)).x));
                            _3095 = fma(_2310, _3083.z, fma(_2309, _3083.y, _3083.x * _2308)) + _3083.w;
                            _3096 = !((fma(_2310, _3064.z, fma(_2309, _3064.y, _3064.x * _2308)) + _3064.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3096)
                            {
                                float _3123 = _2988.x - _2308;
                                float _3124 = _2988.y - _2309;
                                float _3125 = _2988.z - _2310;
                                float _3126 = dot(vec3(_3123, _3124, _3125), vec3(_3123, _3124, _3125));
                                float _3129 = inversesqrt(_3126);
                                float _3130 = _3129 * _3123;
                                float _3131 = _3129 * _3124;
                                float _3132 = _3129 * _3125;
                                float _3136 = 1.0 - (_3126 / (_2989 * _2989));
                                float _4232 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0));
                                float _3137 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
                                float _3141 = sqrt(_3126) * _3004.w;
                                float _3143 = 1.39999997615814208984375 / (_3141 + 1.39999997615814208984375);
                                float _3144 = _3143 * _3143;
                                float _3147 = ((1.0 - _3144) * dot(vec3(_3130, _3131, _3132), vec3(_549, _552, _555))) + _3144;
                                float _3150 = _3141 * _3141;
                                float _3154 = (fma(_2310, _3032.z, fma(_2309, _3032.y, _3032.x * _2308)) + _3032.w) / _3095;
                                float _3155 = (fma(_2310, _3048.z, fma(_2309, _3048.y, _3048.x * _2308)) + _3048.w) / _3095;
                                float _3159 = 1.0 - dot(vec2(_3154, _3155), vec2(_3154, _3155));
                                float _4248 = isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : max(_3159, 0.0));
                                float _3160 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
                                float _3161 = _3160 * (((isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0))) * _3137) / ((_3150 * 0.699999988079071044921875) + 1.0));
                                float _3173 = exp2(log2(1.0 / ((_3150 * 3.5) + 5.0)) * 0.25);
                                float _3174 = 1.0 - _610;
                                float _3181 = sqrt(1.0 - ((1.0 - (_3174 * _3174)) * (1.0 - (_3173 * _3173))));
                                float _3182 = _3181 * _3181;
                                float _3183 = _3182 * _3182;
                                float _3184 = _3130 - _2600;
                                float _3185 = _3131 - _2601;
                                float _3186 = _3132 - _2602;
                                float _3190 = inversesqrt(dot(vec3(_3184, _3185, _3186), vec3(_3184, _3185, _3186)));
                                float _3194 = dot(vec3(_549, _552, _555), vec3((-0.0) - _2600, (-0.0) - _2601, (-0.0) - _2602));
                                float _4259 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0));
                                float _3197 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
                                float _3198 = dot(vec3(_549, _552, _555), vec3(_3190 * _3184, _3190 * _3185, _3190 * _3186));
                                float _4270 = isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : max(_3198, 0.0));
                                float _3201 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
                                float _3205 = ((_3201 * _3201) * (_3183 + (-1.0))) + 1.0;
                                float _3206 = _3143 * _3182;
                                float _3207 = _3206 * _3206;
                                float _3213 = ((1.0 - _3207) * dot(vec3(_549, _552, _555), vec3(_3130, _3131, _3132))) + _3207;
                                float _4281 = isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0));
                                float _3214 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
                                float _3215 = 1.0 - _3182;
                                float _3225 = (0.5 / (((_3214 * ((_3197 * _3215) + _3182)) + 9.9999999392252902907785028219223e-09) + (((_3214 * _3215) + _3182) * _3197))) * _3214;
                                float _4292 = isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0));
                                float _3235 = (_3160 * _3137) * (((_3183 * 3.1415927410125732421875) * (isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0)))) / ((_3205 * _3205) * ((_3150 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3161 * _3004.z;
                                frontier_phi_85_pred_1 = _3161 * _3004.y;
                                frontier_phi_85_pred_2 = _3161 * _3004.x;
                                frontier_phi_85_pred_3 = _3235 * _3016.z;
                                frontier_phi_85_pred_4 = _3235 * _3016.y;
                                frontier_phi_85_pred_5 = _3235 * _3016.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3244 = frontier_phi_85_pred;
                            _3243 = frontier_phi_85_pred_1;
                            _3242 = frontier_phi_85_pred_2;
                            _3241 = frontier_phi_85_pred_3;
                            _3240 = frontier_phi_85_pred_4;
                            _3239 = frontier_phi_85_pred_5;
                            _2946 = _3242 + _2959;
                            _2947 = _3243 + _2960;
                            _2948 = _3244 + _2961;
                            _2943 = _3239 + _2956;
                            _2944 = _3240 + _2957;
                            _2945 = _3241 + _2958;
                            if (_2963 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2956 = _2943;
                                _2957 = _2944;
                                _2958 = _2945;
                                _2959 = _2946;
                                _2960 = _2947;
                                _2961 = _2948;
                                _2962 = _2963;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2948;
                        frontier_phi_79_pred_1 = _2947;
                        frontier_phi_79_pred_2 = _2946;
                        frontier_phi_79_pred_3 = _2945;
                        frontier_phi_79_pred_4 = _2944;
                        frontier_phi_79_pred_5 = _2943;
                    }
                    _2585 = frontier_phi_79_pred;
                    _2583 = frontier_phi_79_pred_1;
                    _2581 = frontier_phi_79_pred_2;
                    _2579 = frontier_phi_79_pred_3;
                    _2577 = frontier_phi_79_pred_4;
                    _2575 = frontier_phi_79_pred_5;
                    uint _2741 = _2740 + 1u;
                    if (_2741 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2734 = _2575;
                        _2735 = _2577;
                        _2736 = _2579;
                        _2737 = _2581;
                        _2738 = _2583;
                        _2739 = _2585;
                        _2740 = _2741;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2581;
                frontier_phi_60_61_ladder_1 = _2585;
                frontier_phi_60_61_ladder_2 = _2583;
                frontier_phi_60_61_ladder_3 = _2579;
                frontier_phi_60_61_ladder_4 = _2577;
                frontier_phi_60_61_ladder_5 = _2575;
            }
            else
            {
                frontier_phi_60_61_ladder = _2460;
                frontier_phi_60_61_ladder_1 = _2464;
                frontier_phi_60_61_ladder_2 = _2462;
                frontier_phi_60_61_ladder_3 = _2458;
                frontier_phi_60_61_ladder_4 = _2456;
                frontier_phi_60_61_ladder_5 = _2454;
            }
            _2574 = frontier_phi_60_61_ladder_5;
            _2576 = frontier_phi_60_61_ladder_4;
            _2578 = frontier_phi_60_61_ladder_3;
            _2580 = frontier_phi_60_61_ladder;
            _2582 = frontier_phi_60_61_ladder_2;
            _2584 = frontier_phi_60_61_ladder_1;
        }
        float _2589 = isnan(1.0) ? _594 : (isnan(_594) ? 1.0 : min(_594, 1.0));
        _2366 = (_2589 * _2580) + _1819;
        _2368 = (_2589 * _2582) + _1821;
        _2370 = (_2589 * _2584) + _1823;
        _2372 = ((_2574 * 0.039999999105930328369140625) * _2589) + _2152;
        _2374 = ((_2576 * 0.039999999105930328369140625) * _2589) + _2154;
        _2376 = ((_2578 * 0.039999999105930328369140625) * _2589) + _2156;
    }
    else
    {
        _2366 = _1819;
        _2368 = _1821;
        _2370 = _1823;
        _2372 = _2152;
        _2374 = _2154;
        _2376 = _2156;
    }
    float _4308 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _4319 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _4330 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _2393 = ((isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0))) * (_2366 + ((isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0))) * _594))) + ((_2372 + ((isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0))) * _1433)) * cbPerFrame._m0[3u].x);
    float _2394 = ((isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0))) * (_2368 + ((isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0))) * _594))) + ((_2374 + ((isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0))) * _1433)) * cbPerFrame._m0[3u].x);
    float _2395 = ((isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0))) * (_2370 + ((isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0))) * _594))) + ((_2376 + ((isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0))) * _1433)) * cbPerFrame._m0[3u].x);
    uint _2396 = _568 + 6u;
    float _2404 = _529 / cbSceneParam._m0[86u].x;
    float _2405 = _530 / cbSceneParam._m0[86u].y;
    vec4 _2419 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2404, _2405, (log2((isnan(cbSceneParam._m0[77u].w) ? _450 : (isnan(_450) ? cbSceneParam._m0[77u].w : min(_450, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2421 = _2419.x;
    float _2422 = _2419.y;
    float _2423 = _2419.z;
    float _2424 = _2419.w;
    float _2516;
    float _2518;
    float _2520;
    float _2522;
    if (_450 > cbSceneParam._m0[78u].w)
    {
        float _2479 = isnan(_450) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _450 : min(cbSceneParam._m0[80u].w, _450));
        float _2480 = _2479 / _450;
        float _2491 = _2480 * _502;
        float _2492 = _503 * _2480;
        float _2493 = (-0.0) - _2492;
        float _2494 = _2480 * _504;
        float _2496 = (cbSceneParam._m0[77u].w * _2493) / _2479;
        float _2497 = _2496 + cbSceneParam._m0[79u].w;
        float _2498 = cbSceneParam._m0[79u].w - _2492;
        float _2504 = sqrt(((_2491 * _2491) + (_2492 * _2492)) + (_2494 * _2494));
        float _2507 = (1.0 - (cbSceneParam._m0[77u].w / _2479)) * _2504;
        float _2512 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2514 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2691;
        if (abs((_2493 - _2496) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2691 = ((((_2497 > 0.0) ? exp2(_2512 * _2497) : (2.0 - exp2(_2514 * _2497))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2507;
        }
        else
        {
            float _2635 = 1.0 / cbSceneParam._m0[80u].x;
            float _2636 = isnan(_2498) ? _2497 : (isnan(_2497) ? _2498 : max(_2497, _2498));
            float _2637 = isnan(_2498) ? _2497 : (isnan(_2497) ? _2498 : min(_2497, _2498));
            float _2646 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : min(_2636, 0.0));
            float _2647 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : min(_2637, 0.0));
            _2691 = ((abs(_2504 / _2493) * cbSceneParam._m0[80u].y) * ((((_2646 - _2647) * 2.0) - ((exp2(_2512 * (isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0)))) - exp2(_2512 * (isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0))))) * _2635)) - ((exp2(_2514 * _2646) - exp2(_2514 * _2647)) * _2635))) + (_2507 * cbSceneParam._m0[80u].z);
        }
        vec4 _2693 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2404, _2405, 1.0), 0.0);
        float _2702 = exp2((_2691 * (-1.44269502162933349609375)) * (1.0 - _2693.w));
        float _2703 = log2(_2702);
        float _2719 = log2(_2424);
        _2516 = (exp2(_2719 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2703 * cbSceneParam._m0[78u].x)) * _2693.x) / cbSceneParam._m0[78u].x)) + _2421;
        _2518 = (exp2(_2719 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2703 * cbSceneParam._m0[78u].y)) * _2693.y) / cbSceneParam._m0[78u].y)) + _2422;
        _2520 = (exp2(_2719 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2703 * cbSceneParam._m0[78u].z)) * _2693.z) / cbSceneParam._m0[78u].z)) + _2423;
        _2522 = _2702 * _2424;
    }
    else
    {
        _2516 = _2421;
        _2518 = _2422;
        _2520 = _2423;
        _2522 = _2424;
    }
    bool _2729;
    vec4 _2532;
    vec4 _2554;
    float _2556;
    float _2560;
    float _2561;
    float _2562;
    float _2563;
    bool _2573;
    for (;;)
    {
        _2532 = cbMatDynParam._m0[0u];
        float _2534 = roundEven(_2532.y);
        bool _2535 = _2534 == 3.0;
        float _2536 = log2(_2522);
        float _2543 = exp2(_2536 * cbSceneParam._m0[78u].x) * _2393;
        float _2544 = exp2(_2536 * cbSceneParam._m0[78u].y) * _2394;
        float _2545 = exp2(_2536 * cbSceneParam._m0[78u].z) * _2395;
        float _2552 = _518 + (-0.5);
        _2554 = cbMtdParam._m0[1u];
        _2556 = _2554.y * _2552;
        float _2559 = (_2534 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2560 = _2559 * (_2535 ? _2543 : (_2543 + (cbSceneParam._m0[72u].w * _2516)));
        _2561 = _2559 * (_2535 ? _2544 : (_2544 + (cbSceneParam._m0[72u].w * _2518)));
        _2562 = _2559 * (_2535 ? _2545 : (_2545 + (cbSceneParam._m0[72u].w * _2520)));
        _2563 = _2552 * 0.999000012874603271484375;
        _2573 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2573)
        {
            if ((cbInstanceData._m0[_568 + 7u].x + _2563) < 0.5)
            {
                _2729 = true;
                break;
            }
        }
        uint _2670 = _570 + uint(_2532.w);
        if ((cbInstanceData._m0[_2670].w < 1.0) && ((cbInstanceData._m0[_2670].w + _2563) < 0.5))
        {
            _2729 = true;
            break;
        }
        if ((_2556 + 1.0) < _2554.x)
        {
            _2729 = true;
            break;
        }
        _2729 = false;
        break;
    }
    float _2934;
    if (_2729)
    {
        discard_state = true;
        _2934 = 0.0;
    }
    else
    {
        _2934 = cbInstanceData._m0[_2396].w;
    }
    SV_Target.x = _2560;
    SV_Target.y = _2561;
    SV_Target.z = _2562;
    SV_Target.w = _2934;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2396].w;
    discard_exit();
}


