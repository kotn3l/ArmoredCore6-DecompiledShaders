#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb3_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb3_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb3_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb3_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb3_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Mb3_snp_0_Texture2D_7;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Mb3_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _997;
float _3649;
float _3650;
float _3651;
float _3652;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _206 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _213 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _214 = _213 * NORMAL.x;
    float _215 = _213 * NORMAL.y;
    float _216 = _213 * NORMAL.z;
    float _220 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _228;
    float _229;
    float _230;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _228 = (-0.0) - _214;
        _229 = (-0.0) - _215;
        _230 = (-0.0) - _216;
    }
    else
    {
        _228 = _214;
        _229 = _215;
        _230 = _216;
    }
    vec4 _247 = texture(sampler2D(M_AMSN_V_Mb3_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _251 = 1.0 - _247.x;
    float _262 = ((cbMtdParam._m0[9u].x * (-1.39999997615814208984375)) * (((1.0 - TEXCOORD_3.x) * 2.0) - _251)) + 1.0;
    float _3661 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _263 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
    vec4 _275 = texture(sampler2D(M_AMSN_V_Mb3_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _277 = _275.x;
    float _278 = _275.y;
    float _279 = _275.z;
    vec4 _291 = texture(sampler2D(M_AMSN_V_Mb3_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _302 = ((_291.x - _277) * _263) + _277;
    float _303 = ((_291.y - _278) * _263) + _278;
    float _304 = ((_291.z - _279) * _263) + _279;
    float _311 = (((((1.0 - TEXCOORD_3.y) * 2.0) - _251) * (-1.39999997615814208984375)) * cbMtdParam._m0[9u].y) + 1.0;
    float _3672 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _312 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
    vec4 _325 = texture(sampler2D(M_AMSN_V_Mb3_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _336 = ((_325.x - _302) * _312) + _302;
    float _337 = ((_325.y - _303) * _312) + _303;
    float _338 = ((_325.z - _304) * _312) + _304;
    vec4 _350 = texture(sampler2D(M_AMSN_V_Mb3_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _352 = _350.x;
    float _353 = _350.y;
    float _354 = _350.z;
    vec4 _366 = texture(sampler2D(M_AMSN_V_Mb3_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _377 = ((_366.x - _352) * _263) + _352;
    float _378 = ((_366.y - _353) * _263) + _353;
    float _379 = ((_366.z - _354) * _263) + _354;
    vec4 _392 = texture(sampler2D(M_AMSN_V_Mb3_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w));
    float _405 = ((_392.z - _379) * _312) + _379;
    float _408 = ((((_392.x - _377) * _312) + _377) * 2.0) + (-1.0);
    float _410 = ((((_392.y - _378) * _312) + _378) * 2.0) + (-1.0);
    float _411 = dot(vec2(_408, _410), vec2(_408, _410));
    float _3683 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _416 = sqrt(1.0 - (isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0))));
    float _419 = fma(_416, _228, fma(_410, _220 * TANGENT.x, (_206 * _198) * _408));
    float _422 = fma(_416, _229, fma(_410, _220 * TANGENT.y, (_206 * _199) * _408));
    float _425 = fma(_416, _230, fma(_410, _220 * TANGENT.z, (_206 * _200) * _408));
    float _429 = inversesqrt(dot(vec3(_419, _422, _425), vec3(_419, _422, _425)));
    float _430 = _429 * _419;
    float _431 = _429 * _422;
    float _432 = _429 * _425;
    float _3694 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _433 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
    float _3705 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _3716 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _3727 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _452 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _494 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _504 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _494);
    float _505 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _494);
    float _506 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _494);
    float _510 = inversesqrt(dot(vec3(_504, _505, _506), vec3(_504, _505, _506)));
    float _511 = _504 * _510;
    float _512 = _505 * _510;
    float _513 = _506 * _510;
    vec4 _518 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _520 = _518.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _676 = sqrt(((_504 * _504) + (_505 * _505)) + (_506 * _506));
        float _682 = (cbMatDynParam._m0[5u].x * _676) + cbMatDynParam._m0[5u].y;
        float _3738 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
        float _683 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
        float _687 = (cbMatDynParam._m0[5u].z * _676) + cbMatDynParam._m0[5u].w;
        float _3749 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0))) - _683)) + _683) < ((_520 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _531 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _532 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _551 = fma(_432, cbSceneParam._m0[5u].z, fma(_431, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _430));
    float _554 = fma(_432, cbSceneParam._m0[6u].z, fma(_431, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _430));
    float _557 = fma(_432, cbSceneParam._m0[7u].z, fma(_431, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _430));
    uint _570 = uint(roundEven(NORMAL.w)) * 13u;
    uint _572 = _570 + 9u;
    uint _573 = _572 + uint(cbMatDynParam._m0[0u].w);
    float _579 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0)))) * cbInstanceData._m0[_573].x;
    float _580 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0)))) * cbInstanceData._m0[_573].y;
    float _581 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0)))) * cbInstanceData._m0[_573].z;
    float _3760 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _582 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
    float _3771 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _583 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
    float _3782 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _584 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
    vec4 _593 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _531, cbSceneParam._m0[86u].y * _532));
    float _596 = _593.x * TEXCOORD_3.w;
    float _597 = dot(vec3(_430, _431, _432), vec3(_511, _512, _513));
    float _600 = _597 * 2.0;
    float _604 = (_600 * _430) - _511;
    float _605 = (_600 * _431) - _512;
    float _606 = (_600 * _432) - _513;
    float _610 = abs(dot(vec3(_511, _512, _513), vec3(_430, _431, _432)));
    float _3793 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _612 = sqrt(_433);
    float _625 = exp2((_612 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_612 * 3.0));
    float _657 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _661 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _665 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _996;
    float _998;
    float _999;
    float _1000;
    float _1001;
    float _1002;
    float _1003;
    float _1004;
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _721 = fma(_665, cbModelParam._m0[26u].z, fma(_661, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _657));
        float _725 = fma(_665, cbModelParam._m0[27u].z, fma(_661, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _657));
        float _729 = fma(_665, cbModelParam._m0[28u].z, fma(_661, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _657));
        float _754 = _657 + _430;
        float _755 = _661 + _431;
        float _756 = _665 + _432;
        float _766 = fma(_756, cbModelParam._m0[26u].z, fma(_755, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _754)) - _721;
        float _767 = fma(_756, cbModelParam._m0[27u].z, fma(_755, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _754)) - _725;
        float _768 = fma(_756, cbModelParam._m0[28u].z, fma(_755, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _754)) - _729;
        float _772 = inversesqrt(dot(vec3(_766, _767, _768), vec3(_766, _767, _768)));
        float _785 = ((_772 * _766) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_721 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _786 = ((_772 * _767) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_725 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _787 = ((_772 * _768) / cbModelParam._m0[34u].z) + ((((((_729 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _790 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_785, _786, _787), 0.0);
        vec4 _797 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_785, _786, _787), 0.0);
        vec4 _804 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_785, _786, _787), 0.0);
        vec4 _811 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_785, _786, _787), 0.0);
        float _824 = exp2((_790.w + (-0.5)) * 20.0) * 2.0;
        float _825 = _824 * (_790.x + (-0.5));
        float _826 = _824 * (_790.y + (-0.5));
        float _827 = _824 * (_790.z + (-0.5));
        float _834 = exp2((_797.w + (-0.5)) * 20.0) * 2.0;
        float _835 = _834 * (_797.x + (-0.5));
        float _836 = _834 * (_797.y + (-0.5));
        float _837 = _834 * (_797.z + (-0.5));
        float _844 = exp2((_804.w + (-0.5)) * 20.0) * 2.0;
        float _845 = _844 * (_804.x + (-0.5));
        float _846 = _844 * (_804.y + (-0.5));
        float _847 = _844 * (_804.z + (-0.5));
        float _854 = exp2((_811.w + (-0.5)) * 20.0) * 2.0;
        float _855 = _854 * (_811.x + (-0.5));
        float _856 = _854 * (_811.y + (-0.5));
        float _857 = _854 * (_811.z + (-0.5));
        float _858 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
        float _859 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
        float _860 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        float _861 = _825 * 0.5;
        float _862 = _835 * 0.5;
        float _863 = _845 * 0.5;
        float _864 = dot(vec3(_861, _862, _863), vec3(_861, _862, _863));
        float _869 = (_864 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_864);
        float _878 = (dot(vec3(_430, _431, _432), vec3(_869 * _861, _869 * _862, _869 * _863)) + 1.0) * 0.5;
        float _3819 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _888 = sqrt(((_862 * _862) + (_861 * _861)) + (_863 * _863)) / (_858 + 9.9999997473787516355514526367188e-06);
        float _3830 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _889 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
        float _890 = _889 * 2.0;
        float _894 = (1.0 - _889) / (_889 + 1.0);
        float _3841 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _895 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
        float _904 = ((((1.0 - _895) * (_890 + 2.0)) * exp2(log2(isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0))) * (_890 + 1.0))) + _895) * _858;
        float _905 = _826 * 0.5;
        float _906 = _836 * 0.5;
        float _907 = _846 * 0.5;
        float _908 = dot(vec3(_905, _906, _907), vec3(_905, _906, _907));
        float _913 = (_908 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_908);
        float _921 = (dot(vec3(_430, _431, _432), vec3(_913 * _905, _913 * _906, _913 * _907)) + 1.0) * 0.5;
        float _3852 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _930 = sqrt(((_906 * _906) + (_905 * _905)) + (_907 * _907)) / (_859 + 9.9999997473787516355514526367188e-06);
        float _3863 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _931 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
        float _932 = _931 * 2.0;
        float _936 = (1.0 - _931) / (_931 + 1.0);
        float _3874 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _937 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _946 = ((((1.0 - _937) * (_932 + 2.0)) * exp2(log2(isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0))) * (_932 + 1.0))) + _937) * _859;
        float _947 = _827 * 0.5;
        float _948 = _837 * 0.5;
        float _949 = _847 * 0.5;
        float _950 = dot(vec3(_947, _948, _949), vec3(_947, _948, _949));
        float _955 = (_950 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_950);
        float _963 = (dot(vec3(_430, _431, _432), vec3(_955 * _947, _955 * _948, _955 * _949)) + 1.0) * 0.5;
        float _3885 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _972 = sqrt(((_948 * _948) + (_947 * _947)) + (_949 * _949)) / (_860 + 9.9999997473787516355514526367188e-06);
        float _3896 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _973 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
        float _974 = _973 * 2.0;
        float _978 = (1.0 - _973) / (_973 + 1.0);
        float _3907 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _979 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _988 = ((((1.0 - _979) * (_974 + 2.0)) * exp2(log2(isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) * (_974 + 1.0))) + _979) * _860;
        _996 = _827;
        _998 = _826;
        _999 = _825;
        _1000 = _837;
        _1001 = _836;
        _1002 = _835;
        _1003 = _847;
        _1004 = _846;
        _1005 = _845;
        _1006 = _860;
        _1007 = _859;
        _1008 = _858;
        _1009 = cbModelParam._m0[36u].z * (isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0)));
        _1010 = cbModelParam._m0[36u].z * (isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0)));
        _1011 = cbModelParam._m0[36u].z * (isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0)));
    }
    else
    {
        _996 = _997;
        _998 = _997;
        _999 = _997;
        _1000 = _997;
        _1001 = _997;
        _1002 = _997;
        _1003 = _997;
        _1004 = _997;
        _1005 = _997;
        _1006 = _997;
        _1007 = _997;
        _1008 = _997;
        _1009 = 0.0;
        _1010 = 0.0;
        _1011 = 0.0;
    }
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1040 = fma(_665, cbModelParam._m0[30u].z, fma(_661, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _657));
        float _1044 = fma(_665, cbModelParam._m0[31u].z, fma(_661, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _657));
        float _1048 = fma(_665, cbModelParam._m0[32u].z, fma(_661, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _657));
        float _1071 = _657 + _430;
        float _1072 = _661 + _431;
        float _1073 = _665 + _432;
        float _1083 = fma(_1073, cbModelParam._m0[30u].z, fma(_1072, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1071)) - _1040;
        float _1084 = fma(_1073, cbModelParam._m0[31u].z, fma(_1072, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1071)) - _1044;
        float _1085 = fma(_1073, cbModelParam._m0[32u].z, fma(_1072, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1071)) - _1048;
        float _1089 = inversesqrt(dot(vec3(_1083, _1084, _1085), vec3(_1083, _1084, _1085)));
        float _1102 = ((_1089 * _1083) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1040 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1103 = ((_1089 * _1084) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1044 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1104 = ((_1089 * _1085) / cbModelParam._m0[35u].z) + ((((((_1048 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1106 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1102, _1103, _1104), 0.0);
        vec4 _1113 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1102, _1103, _1104), 0.0);
        vec4 _1120 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1102, _1103, _1104), 0.0);
        vec4 _1127 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1102, _1103, _1104), 0.0);
        float _1139 = exp2((_1106.w + (-0.5)) * 20.0) * 2.0;
        float _1140 = _1139 * (_1106.x + (-0.5));
        float _1141 = _1139 * (_1106.y + (-0.5));
        float _1142 = _1139 * (_1106.z + (-0.5));
        float _1149 = exp2((_1113.w + (-0.5)) * 20.0) * 2.0;
        float _1150 = _1149 * (_1113.x + (-0.5));
        float _1151 = _1149 * (_1113.y + (-0.5));
        float _1152 = _1149 * (_1113.z + (-0.5));
        float _1159 = exp2((_1120.w + (-0.5)) * 20.0) * 2.0;
        float _1160 = _1159 * (_1120.x + (-0.5));
        float _1161 = _1159 * (_1120.y + (-0.5));
        float _1162 = _1159 * (_1120.z + (-0.5));
        float _1169 = exp2((_1127.w + (-0.5)) * 20.0) * 2.0;
        float _1170 = _1169 * (_1127.x + (-0.5));
        float _1171 = _1169 * (_1127.y + (-0.5));
        float _1172 = _1169 * (_1127.z + (-0.5));
        float _1173 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1174 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1175 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1176 = _1140 * 0.5;
        float _1177 = _1150 * 0.5;
        float _1178 = _1160 * 0.5;
        float _1179 = dot(vec3(_1176, _1177, _1178), vec3(_1176, _1177, _1178));
        float _1184 = (_1179 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1179);
        float _1192 = (dot(vec3(_430, _431, _432), vec3(_1184 * _1176, _1184 * _1177, _1184 * _1178)) + 1.0) * 0.5;
        float _3948 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1201 = sqrt(((_1177 * _1177) + (_1176 * _1176)) + (_1178 * _1178)) / (_1173 + 9.9999997473787516355514526367188e-06);
        float _3959 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1202 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _1203 = _1202 * 2.0;
        float _1207 = (1.0 - _1202) / (_1202 + 1.0);
        float _3970 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1208 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
        float _1217 = ((((1.0 - _1208) * (_1203 + 2.0)) * exp2(log2(isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0))) * (_1203 + 1.0))) + _1208) * _1173;
        float _1218 = _1141 * 0.5;
        float _1219 = _1151 * 0.5;
        float _1220 = _1161 * 0.5;
        float _1221 = dot(vec3(_1218, _1219, _1220), vec3(_1218, _1219, _1220));
        float _1226 = (_1221 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1221);
        float _1234 = (dot(vec3(_430, _431, _432), vec3(_1226 * _1218, _1226 * _1219, _1226 * _1220)) + 1.0) * 0.5;
        float _3981 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1243 = sqrt(((_1219 * _1219) + (_1218 * _1218)) + (_1220 * _1220)) / (_1174 + 9.9999997473787516355514526367188e-06);
        float _3992 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
        float _1245 = _1244 * 2.0;
        float _1249 = (1.0 - _1244) / (_1244 + 1.0);
        float _4003 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1250 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _1259 = ((((1.0 - _1250) * (_1245 + 2.0)) * exp2(log2(isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0))) * (_1245 + 1.0))) + _1250) * _1174;
        float _1260 = _1142 * 0.5;
        float _1261 = _1152 * 0.5;
        float _1262 = _1162 * 0.5;
        float _1263 = dot(vec3(_1260, _1261, _1262), vec3(_1260, _1261, _1262));
        float _1268 = (_1263 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1263);
        float _1276 = (dot(vec3(_430, _431, _432), vec3(_1268 * _1260, _1268 * _1261, _1268 * _1262)) + 1.0) * 0.5;
        float _4014 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1285 = sqrt(((_1261 * _1261) + (_1260 * _1260)) + (_1262 * _1262)) / (_1175 + 9.9999997473787516355514526367188e-06);
        float _4025 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _1287 = _1286 * 2.0;
        float _1291 = (1.0 - _1286) / (_1286 + 1.0);
        float _4036 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _1301 = ((((1.0 - _1292) * (_1287 + 2.0)) * exp2(log2(isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0))) * (_1287 + 1.0))) + _1292) * _1175;
        _1309 = _1142;
        _1310 = _1141;
        _1311 = _1140;
        _1312 = _1152;
        _1313 = _1151;
        _1314 = _1150;
        _1315 = _1162;
        _1316 = _1161;
        _1317 = _1160;
        _1318 = _1175;
        _1319 = _1174;
        _1320 = _1173;
        _1321 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0)));
        _1322 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0)));
        _1323 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0)));
    }
    else
    {
        _1309 = _997;
        _1310 = _997;
        _1311 = _997;
        _1312 = _997;
        _1313 = _997;
        _1314 = _997;
        _1315 = _997;
        _1316 = _997;
        _1317 = _997;
        _1318 = _997;
        _1319 = _997;
        _1320 = _997;
        _1321 = 0.0;
        _1322 = 0.0;
        _1323 = 0.0;
    }
    float _1333 = (cbModelParam._m0[1u].x * (_1321 - _1009)) + _1009;
    float _1334 = (cbModelParam._m0[1u].x * (_1322 - _1010)) + _1010;
    float _1335 = (cbModelParam._m0[1u].x * (_1323 - _1011)) + _1011;
    float _1356 = fma(_1335, cbSceneParam._m0[89u].z, fma(_1334, cbSceneParam._m0[89u].y, _1333 * cbSceneParam._m0[89u].x));
    float _1359 = fma(_1335, cbSceneParam._m0[90u].z, fma(_1334, cbSceneParam._m0[90u].y, _1333 * cbSceneParam._m0[90u].x));
    float _1362 = fma(_1335, cbSceneParam._m0[91u].z, fma(_1334, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1333));
    float _1377 = _604 * 0.5;
    float _1378 = _605 * 0.5;
    float _1379 = _606 * 0.5;
    float _1380 = dot(vec4(_1377, _1378, _1379, 1.0), vec4(_1311, _1314, _1317, _1320));
    float _1383 = dot(vec4(_1377, _1378, _1379, 1.0), vec4(_1310, _1313, _1316, _1319));
    float _1386 = dot(vec4(_1377, _1378, _1379, 1.0), vec4(_1309, _1312, _1315, _1318));
    float _1420;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1393 = dot(vec4(_1377, _1378, _1379, 1.0), vec4(_996, _1000, _1003, _1006));
        float _1397 = dot(vec4(_1377, _1378, _1379, 1.0), vec4(_998, _1001, _1004, _1007));
        float _1401 = dot(vec4(_1377, _1378, _1379, 1.0), vec4(_999, _1002, _1005, _1008));
        float _1408 = dot(vec4(cbModelParam._m0[39u]), vec4(_1377, _1378, _1379, 1.0));
        _1420 = dot(vec3(isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0)), isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0)), isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1408) ? 0.0 : (isnan(0.0) ? _1408 : max(0.0, _1408))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1420 = 1.0;
    }
    float _1431;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1422 = dot(vec4(cbModelParam._m0[40u]), vec4(_1377, _1378, _1379, 1.0));
        _1431 = dot(vec3(isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0)), isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0)), isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1422) ? 0.0 : (isnan(0.0) ? _1422 : max(0.0, _1422))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1431 = 1.0;
    }
    float _1435 = (_1431 * cbModelParam._m0[1u].x) + (_1420 * (1.0 - cbModelParam._m0[1u].x));
    float _1445 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _433);
    float _1446 = isnan(_1445) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1445 : min(cbModelParam._m0[25u].z, _1445));
    float _1528;
    float _1530;
    float _1532;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1495 = fma(_665, cbModelParam._m0[13u].z, fma(_661, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _657)) + cbModelParam._m0[13u].w;
        float _1499 = fma(_665, cbModelParam._m0[14u].z, fma(_661, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _657)) + cbModelParam._m0[14u].w;
        float _1503 = fma(_665, cbModelParam._m0[15u].z, fma(_661, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _657)) + cbModelParam._m0[15u].w;
        float _1506 = fma(_606, cbModelParam._m0[13u].z, fma(_605, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _604));
        float _1509 = fma(_606, cbModelParam._m0[14u].z, fma(_605, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _604));
        float _1512 = fma(_606, cbModelParam._m0[15u].z, fma(_605, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _604));
        float _1540;
        if (_1506 > 0.0)
        {
            _1540 = abs((1.0 - _1495) / _1506);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1506 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1495 + 1.0) / _1506);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1540 = frontier_phi_19_17_ladder;
        }
        float _1714;
        if (_1509 > 0.0)
        {
            _1714 = abs((1.0 - _1499) / _1509);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1509 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1499 + 1.0) / _1509);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1714 = frontier_phi_28_24_ladder;
        }
        float _2009;
        if (_1512 > 0.0)
        {
            _2009 = abs((1.0 - _1503) / _1512);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1512 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1503 + 1.0) / _1512);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2009 = frontier_phi_40_35_ladder;
        }
        float _2011 = isnan(_1714) ? _1540 : (isnan(_1540) ? _1714 : min(_1540, _1714));
        float _2012 = isnan(_2009) ? _2011 : (isnan(_2011) ? _2009 : min(_2011, _2009));
        float _2016 = (_2012 * _1506) + _1495;
        float _2017 = (_2012 * _1509) + _1499;
        float _2018 = (_2012 * _1512) + _1503;
        float _2019 = _2012 * 9.9999997473787516355514526367188e-05;
        float _2021 = (-1.0) - _2019;
        float _2023 = _2019 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2018 > _2023) || ((_2018 < _2021) || ((_2017 > _2023) || ((_2017 < _2021) || ((_2016 < _2021) || (_2016 > _2023))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2163 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2018, cbModelParam._m0[9u].z, fma(_2017, cbModelParam._m0[9u].y, _2016 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2018, cbModelParam._m0[10u].z, fma(_2017, cbModelParam._m0[10u].y, _2016 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2018, cbModelParam._m0[11u].z, fma(_2017, cbModelParam._m0[11u].y, _2016 * cbModelParam._m0[11u].x))), _1446);
            frontier_phi_18_40_ladder = _2163.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2163.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2163.x * cbModelParam._m0[1u].y;
        }
        _1528 = frontier_phi_18_40_ladder_2;
        _1530 = frontier_phi_18_40_ladder_1;
        _1532 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1516 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_604, _605, _606), _1446);
        _1528 = _1516.x * cbModelParam._m0[1u].y;
        _1530 = _1516.y * cbModelParam._m0[1u].y;
        _1532 = _1516.z * cbModelParam._m0[1u].y;
    }
    float _1536 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _433);
    float _1537 = isnan(_1536) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1536 : min(cbModelParam._m0[25u].w, _1536));
    float _1630;
    float _1632;
    float _1634;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1594 = fma(_665, cbModelParam._m0[21u].z, fma(_661, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _657)) + cbModelParam._m0[21u].w;
        float _1598 = fma(_665, cbModelParam._m0[22u].z, fma(_661, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _657)) + cbModelParam._m0[22u].w;
        float _1602 = fma(_665, cbModelParam._m0[23u].z, fma(_661, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _657)) + cbModelParam._m0[23u].w;
        float _1605 = fma(_606, cbModelParam._m0[21u].z, fma(_605, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _604));
        float _1608 = fma(_606, cbModelParam._m0[22u].z, fma(_605, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _604));
        float _1611 = fma(_606, cbModelParam._m0[23u].z, fma(_605, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _604));
        float _1719;
        if (_1605 > 0.0)
        {
            _1719 = abs((1.0 - _1594) / _1605);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1605 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1594 + 1.0) / _1605);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1719 = frontier_phi_30_26_ladder;
        }
        float _2036;
        if (_1608 > 0.0)
        {
            _2036 = abs((1.0 - _1598) / _1608);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1608 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1598 + 1.0) / _1608);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2036 = frontier_phi_42_37_ladder;
        }
        float _2363;
        if (_1611 > 0.0)
        {
            _2363 = abs((1.0 - _1602) / _1611);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1611 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1602 + 1.0) / _1611);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2363 = frontier_phi_52_49_ladder;
        }
        float _2365 = isnan(_2036) ? _1719 : (isnan(_1719) ? _2036 : min(_1719, _2036));
        float _2366 = isnan(_2363) ? _2365 : (isnan(_2365) ? _2363 : min(_2365, _2363));
        float _2370 = (_2366 * _1605) + _1594;
        float _2371 = (_2366 * _1608) + _1598;
        float _2372 = (_2366 * _1611) + _1602;
        float _2373 = _2366 * 9.9999997473787516355514526367188e-05;
        float _2374 = (-1.0) - _2373;
        float _2376 = _2373 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2372 > _2376) || ((_2372 < _2374) || ((_2371 > _2376) || ((_2371 < _2374) || ((_2370 < _2374) || (_2370 > _2376))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2490 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2372, cbModelParam._m0[17u].z, fma(_2371, cbModelParam._m0[17u].y, _2370 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2372, cbModelParam._m0[18u].z, fma(_2371, cbModelParam._m0[18u].y, _2370 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2372, cbModelParam._m0[19u].z, fma(_2371, cbModelParam._m0[19u].y, _2370 * cbModelParam._m0[19u].x))), _1537);
            frontier_phi_27_52_ladder = _2490.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2490.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2490.x * cbModelParam._m0[1u].z;
        }
        _1630 = frontier_phi_27_52_ladder_2;
        _1632 = frontier_phi_27_52_ladder_1;
        _1634 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1614 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_604, _605, _606), _1537);
        _1630 = _1614.x * cbModelParam._m0[1u].z;
        _1632 = _1614.y * cbModelParam._m0[1u].z;
        _1634 = _1614.z * cbModelParam._m0[1u].z;
    }
    float _1646 = ((((1.0 - _625) * ((_612 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_625 * _612)) * _596;
    float _1647 = _1646 * ((cbModelParam._m0[1u].w * (_1630 - _1528)) + _1528);
    float _1648 = _1646 * ((cbModelParam._m0[1u].w * (_1632 - _1530)) + _1530);
    float _1649 = _1646 * ((cbModelParam._m0[1u].w * (_1634 - _1532)) + _1532);
    float _1652 = fma(_1649, cbSceneParam._m0[89u].z, fma(_1648, cbSceneParam._m0[89u].y, _1647 * cbSceneParam._m0[89u].x));
    float _1655 = fma(_1649, cbSceneParam._m0[90u].z, fma(_1648, cbSceneParam._m0[90u].y, _1647 * cbSceneParam._m0[90u].x));
    float _1658 = fma(_1649, cbSceneParam._m0[91u].z, fma(_1648, cbSceneParam._m0[91u].y, _1647 * cbSceneParam._m0[91u].x));
    float _1693 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1697 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1701 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1705 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1706 = _1693 / _1705;
    float _1707 = _1697 / _1705;
    float _1708 = _1701 / _1705;
    float _1855;
    float _1856;
    float _1857;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1735 = ((uint(_1708 > cbSceneParam._m0[59u].y) + uint(_1708 > cbSceneParam._m0[59u].x)) + uint(_1708 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1736 = _1735 + 43u;
        uint _1744 = _1735 + 44u;
        uint _1752 = _1735 + 45u;
        uint _1760 = _1735 + 46u;
        float _1771 = fma(_1705, cbSceneParam._m0[_1736].w, fma(_1701, cbSceneParam._m0[_1736].z, fma(_1697, cbSceneParam._m0[_1736].y, _1693 * cbSceneParam._m0[_1736].x)));
        float _1775 = fma(_1705, cbSceneParam._m0[_1744].w, fma(_1701, cbSceneParam._m0[_1744].z, fma(_1697, cbSceneParam._m0[_1744].y, _1693 * cbSceneParam._m0[_1744].x)));
        float _1783 = fma(_1705, cbSceneParam._m0[_1760].w, fma(_1701, cbSceneParam._m0[_1760].z, fma(_1697, cbSceneParam._m0[_1760].y, _1693 * cbSceneParam._m0[_1760].x)));
        float _1788 = cbSceneParam._m0[33u].z * _1783;
        float _1790 = cbSceneParam._m0[33u].w * _1783;
        float _1793 = fma(_1705, cbSceneParam._m0[_1752].w, fma(_1701, cbSceneParam._m0[_1752].z, fma(_1697, cbSceneParam._m0[_1752].y, _1693 * cbSceneParam._m0[_1752].x))) / _1783;
        float _1841 = (cbSceneParam._m0[33u].x - sqrt(((_1707 * _1707) + (_1706 * _1706)) + (_1708 * _1708))) * cbSceneParam._m0[33u].y;
        float _4162 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
        float _1848 = (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1788 + _1771) / _1783, (_1790 + _1775) / _1783), _1793), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1790 + _1771) / _1783, (_1775 - _1788) / _1783), _1793), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1771 - _1788) / _1783, (_1775 - _1790) / _1783), _1793), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1771 - _1790) / _1783, (_1788 + _1775) / _1783), _1793), 0.0)).x), vec4(0.25)));
        _1855 = 1.0 - (_1848 * cbSceneParam._m0[34u].x);
        _1856 = 1.0 - (_1848 * cbSceneParam._m0[34u].y);
        _1857 = 1.0 - (_1848 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1855 = 1.0;
        _1856 = 1.0;
        _1857 = 1.0;
    }
    float _1921;
    float _1923;
    float _1925;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1909 = fma(_1705, cbSceneParam._m0[63u].w, fma(_1701, cbSceneParam._m0[63u].z, fma(_1697, cbSceneParam._m0[63u].y, _1693 * cbSceneParam._m0[63u].x)));
        float _1910 = fma(_1705, cbSceneParam._m0[60u].w, fma(_1701, cbSceneParam._m0[60u].z, fma(_1697, cbSceneParam._m0[60u].y, _1693 * cbSceneParam._m0[60u].x))) / _1909;
        float _1911 = fma(_1705, cbSceneParam._m0[61u].w, fma(_1701, cbSceneParam._m0[61u].z, fma(_1697, cbSceneParam._m0[61u].y, _1693 * cbSceneParam._m0[61u].x))) / _1909;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1910 >= cbSceneParam._m0[64u].x) && (_1911 >= cbSceneParam._m0[64u].y)) && (_1910 <= cbSceneParam._m0[64u].z)) && (_1911 <= cbSceneParam._m0[64u].w))
        {
            float _2049 = fma(_1705, cbSceneParam._m0[62u].w, fma(_1701, cbSceneParam._m0[62u].z, fma(_1697, cbSceneParam._m0[62u].y, _1693 * cbSceneParam._m0[62u].x))) / _1909;
            float _2053 = isnan(cbSceneParam._m0[41u].w) ? _2049 : (isnan(_2049) ? cbSceneParam._m0[41u].w : max(_2049, cbSceneParam._m0[41u].w));
            float _2096 = (cbSceneParam._m0[33u].x - sqrt(((_1707 * _1707) + (_1706 * _1706)) + (_1708 * _1708))) * cbSceneParam._m0[33u].y;
            float _4178 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
            float _2103 = (isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1910, cbSceneParam._m0[33u].w + _1911), _2053), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1910, _1911 - cbSceneParam._m0[33u].z), _2053), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1910 - cbSceneParam._m0[33u].z, _1911 - cbSceneParam._m0[33u].w), _2053), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1910 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1911), _2053), 0.0)).x), vec4(0.25)));
            float _2107 = 1.0 - (_2103 * cbSceneParam._m0[34u].x);
            float _2108 = 1.0 - (_2103 * cbSceneParam._m0[34u].y);
            float _2109 = 1.0 - (_2103 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2108) ? _1856 : (isnan(_1856) ? _2108 : min(_1856, _2108));
            frontier_phi_39_38_ladder_1 = isnan(_2107) ? _1855 : (isnan(_1855) ? _2107 : min(_1855, _2107));
            frontier_phi_39_38_ladder_2 = isnan(_2109) ? _1857 : (isnan(_1857) ? _2109 : min(_1857, _2109));
        }
        else
        {
            frontier_phi_39_38_ladder = _1856;
            frontier_phi_39_38_ladder_1 = _1855;
            frontier_phi_39_38_ladder_2 = _1857;
        }
        _1921 = frontier_phi_39_38_ladder_1;
        _1923 = frontier_phi_39_38_ladder;
        _1925 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1921 = _1855;
        _1923 = _1856;
        _1925 = _1857;
    }
    uvec4 _1930 = floatBitsToUint(cbInstanceData._m0[_570 + 5u]);
    uint _1932 = _1930.x * 14u;
    uint _1933 = _1932 + 13u;
    float _1940 = _596 + (-1.0);
    float _1945 = (cbLight._m0[_1933].x * _1940) + 1.0;
    float _1946 = (cbLight._m0[_1933].y * _1940) + 1.0;
    float _1947 = (cbLight._m0[_1933].z * _1940) + 1.0;
    float _1948 = (cbLight._m0[_1933].w * _1940) + 1.0;
    uint _1949 = _1932 + 5u;
    float _1955 = isnan(1.0) ? _1946 : (isnan(_1946) ? 1.0 : min(_1946, 1.0));
    uint _1959 = _1932 + 4u;
    float _1968 = isnan(1.0) ? _1945 : (isnan(_1945) ? 1.0 : min(_1945, 1.0));
    uint _1972 = _1932 | 1u;
    float _1983 = dot(vec3(cbLight._m0[_1932].xyz), vec3(_430, _431, _432));
    float _1986 = dot(vec3(cbLight._m0[_1972].xyz), vec3(_430, _431, _432));
    float _4214 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
    float _4225 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
    float _1991 = (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) * 0.3183098733425140380859375;
    float _1993 = (isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0))) * 0.3183098733425140380859375;
    float _2000 = ((cbLight._m0[_1949].x * _1955) * _1993) + (((cbLight._m0[_1959].x * _1921) * _1968) * _1991);
    float _2001 = ((_1955 * cbLight._m0[_1949].y) * _1993) + (((cbLight._m0[_1959].y * _1923) * _1968) * _1991);
    float _2002 = ((_1955 * cbLight._m0[_1949].z) * _1993) + (((cbLight._m0[_1959].z * _1925) * _1968) * _1991);
    uvec4 _2006 = floatBitsToUint(cbLight._m0[_1932 + 12u]);
    bool _2008 = _2006.x == 0u;
    float _2110;
    float _2112;
    float _2114;
    if (_2008)
    {
        _2110 = _2000;
        _2112 = _2001;
        _2114 = _2002;
    }
    else
    {
        uint _2118 = _1932 + 6u;
        float _2134 = (dot(vec3(cbLight._m0[_1932 + 2u].xyz), vec3(_430, _431, _432)) * 0.5) + 0.5;
        float _2135 = _2134 * _2134;
        float _4236 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
        float _2136 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
        float _2137 = isnan(1.0) ? _1947 : (isnan(_1947) ? 1.0 : min(_1947, 1.0));
        _2110 = (((cbLight._m0[_2118].x * 0.3183098733425140380859375) * _2136) * _2137) + _2000;
        _2112 = (((cbLight._m0[_2118].y * 0.3183098733425140380859375) * _2136) * _2137) + _2001;
        _2114 = (((cbLight._m0[_2118].z * 0.3183098733425140380859375) * _2136) * _2137) + _2002;
    }
    bool _2117 = _2006.y == 0u;
    float _2172;
    float _2174;
    float _2176;
    if (_2117)
    {
        _2172 = _2110;
        _2174 = _2112;
        _2176 = _2114;
    }
    else
    {
        uint _2334 = _1932 + 7u;
        float _2350 = (dot(vec3(cbLight._m0[_1932 + 3u].xyz), vec3(_430, _431, _432)) * 0.5) + 0.5;
        float _2351 = _2350 * _2350;
        float _4252 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
        float _2352 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
        float _2353 = isnan(1.0) ? _1948 : (isnan(_1948) ? 1.0 : min(_1948, 1.0));
        _2172 = (((cbLight._m0[_2334].x * 0.3183098733425140380859375) * _2352) * _2353) + _2110;
        _2174 = (((cbLight._m0[_2334].y * 0.3183098733425140380859375) * _2352) * _2353) + _2112;
        _2176 = (((cbLight._m0[_2334].z * 0.3183098733425140380859375) * _2352) * _2353) + _2114;
    }
    uint _2179 = _1932 + 8u;
    float _2192 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1932].w)) * _433) * 0.949999988079071044921875);
    float _2193 = _2192 * _2192;
    float _2194 = cbLight._m0[_1932].x + _511;
    float _2195 = cbLight._m0[_1932].y + _512;
    float _2196 = cbLight._m0[_1932].z + _513;
    float _2200 = inversesqrt(dot(vec3(_2194, _2195, _2196), vec3(_2194, _2195, _2196)));
    float _2201 = _2200 * _2194;
    float _2202 = _2200 * _2195;
    float _2203 = _2200 * _2196;
    float _2204 = dot(vec3(_430, _431, _432), vec3(cbLight._m0[_1932].xyz));
    float _4268 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
    float _2207 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
    float _4279 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _2208 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
    float _2209 = dot(vec3(_430, _431, _432), vec3(_2201, _2202, _2203));
    float _4290 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
    float _2212 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
    float _2213 = dot(vec3(cbLight._m0[_1932].xyz), vec3(_2201, _2202, _2203));
    float _4301 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
    float _2217 = _2193 * _2193;
    float _2221 = ((_2212 * _2212) * (_2217 + (-1.0))) + 1.0;
    float _2232 = (exp2(log2(1.0 - (isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2233 = 1.0 - _2193;
    float _2244 = (0.5 / (((_2208 * ((_2207 * _2233) + _2193)) + 9.9999999392252902907785028219223e-09) + (((_2208 * _2233) + _2193) * _2207))) * _2207;
    float _4312 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
    float _2246 = (isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0))) * (_2217 / ((_2221 * _2221) * 3.141590118408203125));
    uint _2260 = _1932 + 9u;
    float _2271 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1972].w)) * _433) * 0.949999988079071044921875);
    float _2272 = _2271 * _2271;
    float _2273 = cbLight._m0[_1972].x + _511;
    float _2274 = cbLight._m0[_1972].y + _512;
    float _2275 = cbLight._m0[_1972].z + _513;
    float _2279 = inversesqrt(dot(vec3(_2273, _2274, _2275), vec3(_2273, _2274, _2275)));
    float _2280 = _2279 * _2273;
    float _2281 = _2279 * _2274;
    float _2282 = _2279 * _2275;
    float _2283 = dot(vec3(_430, _431, _432), vec3(cbLight._m0[_1972].xyz));
    float _4323 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
    float _2286 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
    float _2287 = dot(vec3(_430, _431, _432), vec3(_2280, _2281, _2282));
    float _4334 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
    float _2290 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
    float _2291 = dot(vec3(cbLight._m0[_1972].xyz), vec3(_2280, _2281, _2282));
    float _4345 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
    float _2295 = _2272 * _2272;
    float _2299 = ((_2290 * _2290) * (_2295 + (-1.0))) + 1.0;
    float _2308 = (exp2(log2(1.0 - (isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2309 = 1.0 - _2272;
    float _2319 = (0.5 / (((_2208 * ((_2286 * _2309) + _2272)) + 9.9999999392252902907785028219223e-09) + (((_2208 * _2309) + _2272) * _2286))) * _2286;
    float _4356 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
    float _2321 = (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0))) * (_2295 / ((_2299 * _2299) * 3.141590118408203125));
    float _2331 = (((_2308 * cbLight._m0[_2260].x) * _2321) * _1955) + ((((cbLight._m0[_2179].x * _1921) * _2232) * _2246) * _1968);
    float _2332 = (((_2308 * cbLight._m0[_2260].y) * _2321) * _1955) + ((((cbLight._m0[_2179].y * _1923) * _2232) * _2246) * _1968);
    float _2333 = (((_2308 * cbLight._m0[_2260].z) * _2321) * _1955) + ((((cbLight._m0[_2179].z * _1925) * _2232) * _2246) * _1968);
    float _2389;
    float _2391;
    float _2393;
    if (_2008)
    {
        _2389 = _2331;
        _2391 = _2332;
        _2393 = _2333;
    }
    else
    {
        uint _2395 = _1932 + 2u;
        uint _2399 = _1932 + 10u;
        float _2413 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2395].w)) * _433) * 0.949999988079071044921875);
        float _2414 = _2413 * _2413;
        float _2415 = cbLight._m0[_2395].x + _511;
        float _2416 = cbLight._m0[_2395].y + _512;
        float _2417 = cbLight._m0[_2395].z + _513;
        float _2421 = inversesqrt(dot(vec3(_2415, _2416, _2417), vec3(_2415, _2416, _2417)));
        float _2422 = _2421 * _2415;
        float _2423 = _2421 * _2416;
        float _2424 = _2421 * _2417;
        float _2425 = dot(vec3(_430, _431, _432), vec3(cbLight._m0[_2395].xyz));
        float _4367 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
        float _2428 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
        float _2429 = dot(vec3(_430, _431, _432), vec3(_2422, _2423, _2424));
        float _4378 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
        float _2432 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
        float _2433 = dot(vec3(cbLight._m0[_2395].xyz), vec3(_2422, _2423, _2424));
        float _4389 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
        float _2437 = _2414 * _2414;
        float _2441 = ((_2432 * _2432) * (_2437 + (-1.0))) + 1.0;
        float _2450 = (exp2(log2(1.0 - (isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2451 = 1.0 - _2414;
        float _2461 = (0.5 / (((_2208 * ((_2428 * _2451) + _2414)) + 9.9999999392252902907785028219223e-09) + (((_2208 * _2451) + _2414) * _2428))) * _2428;
        float _4400 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
        float _2463 = (isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0))) * (_2437 / ((_2441 * _2441) * 3.141590118408203125));
        float _2464 = isnan(1.0) ? _1947 : (isnan(_1947) ? 1.0 : min(_1947, 1.0));
        _2389 = (((_2450 * cbLight._m0[_2399].x) * _2463) * _2464) + _2331;
        _2391 = (((_2450 * cbLight._m0[_2399].y) * _2463) * _2464) + _2332;
        _2393 = (((_2450 * cbLight._m0[_2399].z) * _2463) * _2464) + _2333;
    }
    float _2495;
    float _2497;
    float _2499;
    if (_2117)
    {
        _2495 = _2389;
        _2497 = _2391;
        _2499 = _2393;
    }
    else
    {
        uint _2506 = _1932 + 3u;
        uint _2510 = _1932 + 11u;
        float _2524 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2506].w)) * _433) * 0.949999988079071044921875);
        float _2525 = _2524 * _2524;
        float _2526 = cbLight._m0[_2506].x + _511;
        float _2527 = cbLight._m0[_2506].y + _512;
        float _2528 = cbLight._m0[_2506].z + _513;
        float _2532 = inversesqrt(dot(vec3(_2526, _2527, _2528), vec3(_2526, _2527, _2528)));
        float _2533 = _2532 * _2526;
        float _2534 = _2532 * _2527;
        float _2535 = _2532 * _2528;
        float _2536 = dot(vec3(_430, _431, _432), vec3(cbLight._m0[_2506].xyz));
        float _4416 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
        float _2539 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
        float _2540 = dot(vec3(_430, _431, _432), vec3(_2533, _2534, _2535));
        float _4427 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
        float _2543 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
        float _2544 = dot(vec3(cbLight._m0[_2506].xyz), vec3(_2533, _2534, _2535));
        float _4438 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
        float _2548 = _2525 * _2525;
        float _2552 = ((_2543 * _2543) * (_2548 + (-1.0))) + 1.0;
        float _2561 = (exp2(log2(1.0 - (isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2562 = 1.0 - _2525;
        float _2572 = (0.5 / (((_2208 * ((_2539 * _2562) + _2525)) + 9.9999999392252902907785028219223e-09) + (((_2208 * _2562) + _2525) * _2539))) * _2539;
        float _4449 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
        float _2574 = (isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0))) * (_2548 / ((_2552 * _2552) * 3.141590118408203125));
        float _2575 = isnan(1.0) ? _1948 : (isnan(_1948) ? 1.0 : min(_1948, 1.0));
        _2495 = (((_2561 * cbLight._m0[_2510].x) * _2574) * _2575) + _2389;
        _2497 = (((_2561 * cbLight._m0[_2510].y) * _2574) * _2575) + _2391;
        _2499 = (((_2561 * cbLight._m0[_2510].z) * _2574) * _2575) + _2393;
    }
    float _2640;
    float _2642;
    float _2644;
    float _2646;
    float _2648;
    float _2650;
    if (_1930.y == 0u)
    {
        uvec4 _2596 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2597 = _2596.x;
        uint _2608 = uint((float(_2596.y) * floor(float(uint(cbSceneParam._m0[85u].y * _532) / _2597))) + floor(float(uint(cbSceneParam._m0[85u].x * _531) / _2597)));
        float _2618 = (log2(_1708 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2619 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
        uint _2622 = uint(isnan(14.0) ? _2619 : (isnan(_2619) ? 14.0 : min(_2619, 14.0)));
        uvec4 _2627 = texelFetch(g_lightClusterGridBuffer, int(((_2622 << 2u) + (_2608 << 6u)) >> 2u));
        uint _2628 = _2627.x;
        uint _2629 = _2596.z;
        float _2707;
        float _2709;
        float _2711;
        float _2713;
        float _2715;
        float _2717;
        if (((((1u << ((_2629 >> 4u) & 15u)) + 4294967295u) & _2628) == 0u) || ((_2629 & 240u) == 0u))
        {
            _2707 = 0.0;
            _2709 = 0.0;
            _2711 = 0.0;
            _2713 = 0.0;
            _2715 = 0.0;
            _2717 = 0.0;
        }
        else
        {
            float _2708;
            float _2710;
            float _2712;
            float _2714;
            float _2716;
            float _2718;
            float _2859 = 0.0;
            float _2860 = 0.0;
            float _2861 = 0.0;
            float _2862 = 0.0;
            float _2863 = 0.0;
            float _2864 = 0.0;
            uint _2865 = 0u;
            uint _2874;
            bool _2875;
            for (;;)
            {
                _2874 = texelFetch(g_lightClassification, int((((_2622 << 5u) + (_2608 << 9u)) + (_2865 << 2u)) >> 2u)).x;
                _2875 = _2874 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2875)
                {
                    frontier_phi_73_pred = _2864;
                    frontier_phi_73_pred_1 = _2863;
                    frontier_phi_73_pred_2 = _2862;
                    frontier_phi_73_pred_3 = _2861;
                    frontier_phi_73_pred_4 = _2860;
                    frontier_phi_73_pred_5 = _2859;
                }
                else
                {
                    float _3004;
                    float _3005;
                    float _3006;
                    float _3007;
                    float _3008;
                    float _3009;
                    uint _3010;
                    _3004 = _2859;
                    _3005 = _2860;
                    _3006 = _2861;
                    _3007 = _2862;
                    _3008 = _2863;
                    _3009 = _2864;
                    _3010 = _2874;
                    float _2931;
                    float _2932;
                    float _2933;
                    float _2934;
                    float _2935;
                    float _2936;
                    for (;;)
                    {
                        uint _3014 = uint(findLSB(_3010)) + (_2865 << 5u);
                        uint _3011 = (_3010 + 4294967295u) & _3010;
                        uint _3016 = _3014 * 48u;
                        vec4 _3030 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3016)).x, texelFetch(g_PointLightRenderingBuffer, int(_3016 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3016 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3016 + 3u)).x));
                        uint _3036 = (_3014 * 48u) + 4u;
                        vec4 _3049 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3036)).x, texelFetch(g_PointLightRenderingBuffer, int(_3036 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3036 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3036 + 3u)).x));
                        uint _3055 = (_3014 * 48u) + 8u;
                        vec3 _3066 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3055)).x, texelFetch(g_PointLightRenderingBuffer, int(_3055 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3055 + 2u)).x));
                        float _3070 = _3030.x - _1706;
                        float _3071 = _3030.y - _1707;
                        float _3072 = _3030.z - _1708;
                        float _3073 = dot(vec3(_3070, _3071, _3072), vec3(_3070, _3071, _3072));
                        float _3076 = inversesqrt(_3073);
                        float _3077 = _3076 * _3070;
                        float _3078 = _3076 * _3071;
                        float _3079 = _3076 * _3072;
                        float _3080 = dot(vec3(_551, _554, _557), vec3(_3077, _3078, _3079));
                        float _3085 = 1.0 - (_3073 * _3030.w);
                        float _4475 = isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0));
                        float _3086 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
                        float _3087 = sqrt(_3073) * _3049.w;
                        float _3090 = 1.39999997615814208984375 / (_3087 + 1.39999997615814208984375);
                        float _3091 = _3090 * _3090;
                        float _3094 = ((1.0 - _3091) * _3080) + _3091;
                        float _3097 = _3087 * _3087;
                        float _3101 = ((isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0))) * _3086) / ((_3097 * 0.699999988079071044921875) + 1.0);
                        float _3105 = (-0.0) - _1706;
                        float _3106 = (-0.0) - _1707;
                        float _3107 = (-0.0) - _1708;
                        float _3111 = inversesqrt(dot(vec3(_3105, _3106, _3107), vec3(_3105, _3106, _3107)));
                        float _3112 = _3111 * _3105;
                        float _3113 = _3111 * _3106;
                        float _3114 = _3111 * _3107;
                        float _3121 = exp2(log2(1.0 / ((_3097 * 3.5) + 5.0)) * 0.25);
                        float _3122 = 1.0 - _612;
                        float _3129 = sqrt(1.0 - ((1.0 - (_3122 * _3122)) * (1.0 - (_3121 * _3121))));
                        float _3130 = _3129 * _3129;
                        float _3131 = _3130 * _3130;
                        float _3132 = _3112 + _3077;
                        float _3133 = _3113 + _3078;
                        float _3134 = _3114 + _3079;
                        float _3138 = inversesqrt(dot(vec3(_3132, _3133, _3134), vec3(_3132, _3133, _3134)));
                        float _3142 = dot(vec3(_551, _554, _557), vec3(_3112, _3113, _3114));
                        float _4491 = isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0));
                        float _3145 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
                        float _3146 = dot(vec3(_551, _554, _557), vec3(_3138 * _3132, _3138 * _3133, _3138 * _3134));
                        float _4502 = isnan(0.0) ? _3146 : (isnan(_3146) ? 0.0 : max(_3146, 0.0));
                        float _3149 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
                        float _3153 = ((_3149 * _3149) * (_3131 + (-1.0))) + 1.0;
                        float _3154 = _3090 * _3130;
                        float _3155 = _3154 * _3154;
                        float _3158 = ((1.0 - _3155) * _3080) + _3155;
                        float _4513 = isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : max(_3158, 0.0));
                        float _3159 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
                        float _3160 = 1.0 - _3130;
                        float _3170 = (0.5 / (((_3159 * ((_3145 * _3160) + _3130)) + 9.9999999392252902907785028219223e-09) + (((_3159 * _3160) + _3130) * _3145))) * _3159;
                        float _4524 = isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : max(_3170, 0.0));
                        float _3181 = (((_3131 * 3.1415927410125732421875) * (isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0)))) / ((_3153 * _3153) * ((_3097 * 2.1991131305694580078125) + 3.141590118408203125))) * _3086;
                        _2934 = (_3101 * _3049.x) + _3007;
                        _2935 = (_3101 * _3049.y) + _3008;
                        _2936 = (_3101 * _3049.z) + _3009;
                        _2931 = (_3181 * _3066.x) + _3004;
                        _2932 = (_3181 * _3066.y) + _3005;
                        _2933 = (_3181 * _3066.z) + _3006;
                        if (_3011 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3004 = _2931;
                            _3005 = _2932;
                            _3006 = _2933;
                            _3007 = _2934;
                            _3008 = _2935;
                            _3009 = _2936;
                            _3010 = _3011;
                        }
                    }
                    frontier_phi_73_pred = _2936;
                    frontier_phi_73_pred_1 = _2935;
                    frontier_phi_73_pred_2 = _2934;
                    frontier_phi_73_pred_3 = _2933;
                    frontier_phi_73_pred_4 = _2932;
                    frontier_phi_73_pred_5 = _2931;
                }
                _2718 = frontier_phi_73_pred;
                _2716 = frontier_phi_73_pred_1;
                _2714 = frontier_phi_73_pred_2;
                _2712 = frontier_phi_73_pred_3;
                _2710 = frontier_phi_73_pred_4;
                _2708 = frontier_phi_73_pred_5;
                uint _2866 = _2865 + 1u;
                if (_2866 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2859 = _2708;
                    _2860 = _2710;
                    _2861 = _2712;
                    _2862 = _2714;
                    _2863 = _2716;
                    _2864 = _2718;
                    _2865 = _2866;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2707 = _2708;
            _2709 = _2710;
            _2711 = _2712;
            _2713 = _2714;
            _2715 = _2716;
            _2717 = _2718;
        }
        uvec4 _2721 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2722 = _2721.z;
        uint _2724 = (_2722 >> 8u) & 15u;
        float _2827;
        float _2829;
        float _2831;
        float _2833;
        float _2835;
        float _2837;
        if (((4294967295u << _2724) & _2628) == 0u)
        {
            _2827 = _2707;
            _2829 = _2709;
            _2831 = _2711;
            _2833 = _2713;
            _2835 = _2715;
            _2837 = _2717;
        }
        else
        {
            float _2852 = inversesqrt(dot(vec3(_1706, _1707, _1708), vec3(_1706, _1707, _1708)));
            float _2853 = _2852 * _1706;
            float _2854 = _2852 * _1707;
            float _2855 = _2852 * _1708;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2724 < ((_2722 >> 12u) & 15u))
            {
                float _2828;
                float _2830;
                float _2832;
                float _2834;
                float _2836;
                float _2838;
                float _2987 = _2707;
                float _2988 = _2709;
                float _2989 = _2711;
                float _2990 = _2713;
                float _2991 = _2715;
                float _2992 = _2717;
                uint _2993 = _2724;
                uint _3002;
                bool _3003;
                for (;;)
                {
                    _3002 = texelFetch(g_lightClassification, int((((_2622 << 5u) + (_2608 << 9u)) + (_2993 << 2u)) >> 2u)).x;
                    _3003 = _3002 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3003)
                    {
                        frontier_phi_84_pred = _2991;
                        frontier_phi_84_pred_1 = _2990;
                        frontier_phi_84_pred_2 = _2989;
                        frontier_phi_84_pred_3 = _2988;
                        frontier_phi_84_pred_4 = _2987;
                        frontier_phi_84_pred_5 = _2992;
                    }
                    else
                    {
                        float _3195;
                        float _3196;
                        float _3197;
                        float _3198;
                        float _3199;
                        float _3200;
                        float _3491;
                        float _3492;
                        float _3493;
                        float _3494;
                        float _3495;
                        float _3496;
                        float _3208 = _2987;
                        float _3209 = _2988;
                        float _3210 = _2989;
                        float _3211 = _2990;
                        float _3212 = _2991;
                        float _3213 = _2992;
                        uint _3214 = _3002;
                        uint _3215;
                        vec4 _3240;
                        float _3241;
                        vec4 _3256;
                        vec3 _3268;
                        vec4 _3284;
                        vec4 _3300;
                        float _3347;
                        bool _3348;
                        for (;;)
                        {
                            uint _3225 = ((_2993 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3214));
                            _3215 = (_3214 + 4294967295u) & _3214;
                            uint _3227 = _3225 * 40u;
                            _3240 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3227)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 3u)).x));
                            _3241 = _3240.w;
                            uint _3243 = (_3225 * 40u) + 4u;
                            _3256 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3243)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 3u)).x));
                            uint _3258 = (_3225 * 40u) + 8u;
                            _3268 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3258)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 2u)).x));
                            uint _3271 = (_3225 * 40u) + 16u;
                            _3284 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3271)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 3u)).x));
                            uint _3287 = (_3225 * 40u) + 20u;
                            _3300 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3287)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 3u)).x));
                            uint _3303 = (_3225 * 40u) + 24u;
                            vec4 _3316 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3303)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 3u)).x));
                            uint _3322 = (_3225 * 40u) + 28u;
                            vec4 _3335 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3322)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 3u)).x));
                            _3347 = fma(_1708, _3335.z, fma(_1707, _3335.y, _3335.x * _1706)) + _3335.w;
                            _3348 = !((fma(_1708, _3316.z, fma(_1707, _3316.y, _3316.x * _1706)) + _3316.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3348)
                            {
                                float _3375 = _3240.x - _1706;
                                float _3376 = _3240.y - _1707;
                                float _3377 = _3240.z - _1708;
                                float _3378 = dot(vec3(_3375, _3376, _3377), vec3(_3375, _3376, _3377));
                                float _3381 = inversesqrt(_3378);
                                float _3382 = _3381 * _3375;
                                float _3383 = _3381 * _3376;
                                float _3384 = _3381 * _3377;
                                float _3388 = 1.0 - (_3378 / (_3241 * _3241));
                                float _4535 = isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0));
                                float _3389 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
                                float _3393 = sqrt(_3378) * _3256.w;
                                float _3395 = 1.39999997615814208984375 / (_3393 + 1.39999997615814208984375);
                                float _3396 = _3395 * _3395;
                                float _3399 = ((1.0 - _3396) * dot(vec3(_3382, _3383, _3384), vec3(_551, _554, _557))) + _3396;
                                float _3402 = _3393 * _3393;
                                float _3406 = (fma(_1708, _3284.z, fma(_1707, _3284.y, _3284.x * _1706)) + _3284.w) / _3347;
                                float _3407 = (fma(_1708, _3300.z, fma(_1707, _3300.y, _3300.x * _1706)) + _3300.w) / _3347;
                                float _3411 = 1.0 - dot(vec2(_3406, _3407), vec2(_3406, _3407));
                                float _4551 = isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0));
                                float _3412 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
                                float _3413 = _3412 * (((isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : max(_3399, 0.0))) * _3389) / ((_3402 * 0.699999988079071044921875) + 1.0));
                                float _3425 = exp2(log2(1.0 / ((_3402 * 3.5) + 5.0)) * 0.25);
                                float _3426 = 1.0 - _612;
                                float _3433 = sqrt(1.0 - ((1.0 - (_3426 * _3426)) * (1.0 - (_3425 * _3425))));
                                float _3434 = _3433 * _3433;
                                float _3435 = _3434 * _3434;
                                float _3436 = _3382 - _2853;
                                float _3437 = _3383 - _2854;
                                float _3438 = _3384 - _2855;
                                float _3442 = inversesqrt(dot(vec3(_3436, _3437, _3438), vec3(_3436, _3437, _3438)));
                                float _3446 = dot(vec3(_551, _554, _557), vec3((-0.0) - _2853, (-0.0) - _2854, (-0.0) - _2855));
                                float _4562 = isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0));
                                float _3449 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
                                float _3450 = dot(vec3(_551, _554, _557), vec3(_3442 * _3436, _3442 * _3437, _3442 * _3438));
                                float _4573 = isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0));
                                float _3453 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
                                float _3457 = ((_3453 * _3453) * (_3435 + (-1.0))) + 1.0;
                                float _3458 = _3395 * _3434;
                                float _3459 = _3458 * _3458;
                                float _3465 = ((1.0 - _3459) * dot(vec3(_551, _554, _557), vec3(_3382, _3383, _3384))) + _3459;
                                float _4584 = isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0));
                                float _3466 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
                                float _3467 = 1.0 - _3434;
                                float _3477 = (0.5 / (((_3466 * ((_3449 * _3467) + _3434)) + 9.9999999392252902907785028219223e-09) + (((_3466 * _3467) + _3434) * _3449))) * _3466;
                                float _4595 = isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : max(_3477, 0.0));
                                float _3487 = (_3412 * _3389) * (((_3435 * 3.1415927410125732421875) * (isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0)))) / ((_3457 * _3457) * ((_3402 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3413 * _3256.y;
                                frontier_phi_90_pred_1 = _3413 * _3256.x;
                                frontier_phi_90_pred_2 = _3487 * _3268.z;
                                frontier_phi_90_pred_3 = _3487 * _3268.y;
                                frontier_phi_90_pred_4 = _3487 * _3268.x;
                                frontier_phi_90_pred_5 = _3413 * _3256.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3495 = frontier_phi_90_pred;
                            _3494 = frontier_phi_90_pred_1;
                            _3493 = frontier_phi_90_pred_2;
                            _3492 = frontier_phi_90_pred_3;
                            _3491 = frontier_phi_90_pred_4;
                            _3496 = frontier_phi_90_pred_5;
                            _3198 = _3494 + _3211;
                            _3199 = _3495 + _3212;
                            _3200 = _3496 + _3213;
                            _3195 = _3491 + _3208;
                            _3196 = _3492 + _3209;
                            _3197 = _3493 + _3210;
                            if (_3215 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3208 = _3195;
                                _3209 = _3196;
                                _3210 = _3197;
                                _3211 = _3198;
                                _3212 = _3199;
                                _3213 = _3200;
                                _3214 = _3215;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3199;
                        frontier_phi_84_pred_1 = _3198;
                        frontier_phi_84_pred_2 = _3197;
                        frontier_phi_84_pred_3 = _3196;
                        frontier_phi_84_pred_4 = _3195;
                        frontier_phi_84_pred_5 = _3200;
                    }
                    _2836 = frontier_phi_84_pred;
                    _2834 = frontier_phi_84_pred_1;
                    _2832 = frontier_phi_84_pred_2;
                    _2830 = frontier_phi_84_pred_3;
                    _2828 = frontier_phi_84_pred_4;
                    _2838 = frontier_phi_84_pred_5;
                    uint _2994 = _2993 + 1u;
                    if (_2994 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2987 = _2828;
                        _2988 = _2830;
                        _2989 = _2832;
                        _2990 = _2834;
                        _2991 = _2836;
                        _2992 = _2838;
                        _2993 = _2994;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2838;
                frontier_phi_65_66_ladder_1 = _2834;
                frontier_phi_65_66_ladder_2 = _2836;
                frontier_phi_65_66_ladder_3 = _2830;
                frontier_phi_65_66_ladder_4 = _2828;
                frontier_phi_65_66_ladder_5 = _2832;
            }
            else
            {
                frontier_phi_65_66_ladder = _2717;
                frontier_phi_65_66_ladder_1 = _2713;
                frontier_phi_65_66_ladder_2 = _2715;
                frontier_phi_65_66_ladder_3 = _2709;
                frontier_phi_65_66_ladder_4 = _2707;
                frontier_phi_65_66_ladder_5 = _2711;
            }
            _2827 = frontier_phi_65_66_ladder_4;
            _2829 = frontier_phi_65_66_ladder_3;
            _2831 = frontier_phi_65_66_ladder_5;
            _2833 = frontier_phi_65_66_ladder_1;
            _2835 = frontier_phi_65_66_ladder_2;
            _2837 = frontier_phi_65_66_ladder;
        }
        float _2842 = isnan(1.0) ? _596 : (isnan(_596) ? 1.0 : min(_596, 1.0));
        _2640 = (_2842 * _2833) + _2172;
        _2642 = (_2842 * _2835) + _2174;
        _2644 = (_2842 * _2837) + _2176;
        _2646 = ((_2827 * 0.039999999105930328369140625) * _2842) + _2495;
        _2648 = ((_2829 * 0.039999999105930328369140625) * _2842) + _2497;
        _2650 = ((_2831 * 0.039999999105930328369140625) * _2842) + _2499;
    }
    else
    {
        _2640 = _2172;
        _2642 = _2174;
        _2644 = _2176;
        _2646 = _2495;
        _2648 = _2497;
        _2650 = _2499;
    }
    float _4611 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _4622 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _4633 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _2667 = ((isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0))) * (_2640 + ((isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0))) * _596))) + ((_2646 + ((isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0))) * _1435)) * cbPerFrame._m0[3u].x);
    float _2668 = ((isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0))) * (_2642 + ((isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0))) * _596))) + ((_2648 + ((isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0))) * _1435)) * cbPerFrame._m0[3u].x);
    float _2669 = ((isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0))) * (_2644 + ((isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0))) * _596))) + ((_2650 + ((isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0))) * _1435)) * cbPerFrame._m0[3u].x);
    uint _2670 = _570 + 6u;
    float _2678 = _531 / cbSceneParam._m0[86u].x;
    float _2679 = _532 / cbSceneParam._m0[86u].y;
    vec4 _2693 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2678, _2679, (log2((isnan(cbSceneParam._m0[77u].w) ? _452 : (isnan(_452) ? cbSceneParam._m0[77u].w : min(_452, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2695 = _2693.x;
    float _2696 = _2693.y;
    float _2697 = _2693.z;
    float _2698 = _2693.w;
    float _2769;
    float _2771;
    float _2773;
    float _2775;
    if (_452 > cbSceneParam._m0[78u].w)
    {
        float _2732 = isnan(_452) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _452 : min(cbSceneParam._m0[80u].w, _452));
        float _2733 = _2732 / _452;
        float _2744 = _2733 * _504;
        float _2745 = _505 * _2733;
        float _2746 = (-0.0) - _2745;
        float _2747 = _2733 * _506;
        float _2749 = (cbSceneParam._m0[77u].w * _2746) / _2732;
        float _2750 = _2749 + cbSceneParam._m0[79u].w;
        float _2751 = cbSceneParam._m0[79u].w - _2745;
        float _2757 = sqrt(((_2744 * _2744) + (_2745 * _2745)) + (_2747 * _2747));
        float _2760 = (1.0 - (cbSceneParam._m0[77u].w / _2732)) * _2757;
        float _2765 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2767 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2944;
        if (abs((_2746 - _2749) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2944 = ((((_2750 > 0.0) ? exp2(_2765 * _2750) : (2.0 - exp2(_2767 * _2750))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2760;
        }
        else
        {
            float _2888 = 1.0 / cbSceneParam._m0[80u].x;
            float _2889 = isnan(_2751) ? _2750 : (isnan(_2750) ? _2751 : max(_2750, _2751));
            float _2890 = isnan(_2751) ? _2750 : (isnan(_2750) ? _2751 : min(_2750, _2751));
            float _2899 = isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : min(_2889, 0.0));
            float _2900 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : min(_2890, 0.0));
            _2944 = ((abs(_2757 / _2746) * cbSceneParam._m0[80u].y) * ((((_2899 - _2900) * 2.0) - ((exp2(_2765 * (isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : max(_2889, 0.0)))) - exp2(_2765 * (isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0))))) * _2888)) - ((exp2(_2767 * _2899) - exp2(_2767 * _2900)) * _2888))) + (_2760 * cbSceneParam._m0[80u].z);
        }
        vec4 _2946 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2678, _2679, 1.0), 0.0);
        float _2955 = exp2((_2944 * (-1.44269502162933349609375)) * (1.0 - _2946.w));
        float _2956 = log2(_2955);
        float _2972 = log2(_2698);
        _2769 = (exp2(_2972 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2956 * cbSceneParam._m0[78u].x)) * _2946.x) / cbSceneParam._m0[78u].x)) + _2695;
        _2771 = (exp2(_2972 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2956 * cbSceneParam._m0[78u].y)) * _2946.y) / cbSceneParam._m0[78u].y)) + _2696;
        _2773 = (exp2(_2972 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2956 * cbSceneParam._m0[78u].z)) * _2946.z) / cbSceneParam._m0[78u].z)) + _2697;
        _2775 = _2955 * _2698;
    }
    else
    {
        _2769 = _2695;
        _2771 = _2696;
        _2773 = _2697;
        _2775 = _2698;
    }
    bool _2982;
    vec4 _2785;
    vec4 _2807;
    float _2809;
    float _2813;
    float _2814;
    float _2815;
    float _2816;
    bool _2826;
    for (;;)
    {
        _2785 = cbMatDynParam._m0[0u];
        float _2787 = roundEven(_2785.y);
        bool _2788 = _2787 == 3.0;
        float _2789 = log2(_2775);
        float _2796 = exp2(_2789 * cbSceneParam._m0[78u].x) * _2667;
        float _2797 = exp2(_2789 * cbSceneParam._m0[78u].y) * _2668;
        float _2798 = exp2(_2789 * cbSceneParam._m0[78u].z) * _2669;
        float _2805 = _520 + (-0.5);
        _2807 = cbMtdParam._m0[1u];
        _2809 = _2807.y * _2805;
        float _2812 = (_2787 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2813 = _2812 * (_2788 ? _2796 : (_2796 + (cbSceneParam._m0[72u].w * _2769)));
        _2814 = _2812 * (_2788 ? _2797 : (_2797 + (cbSceneParam._m0[72u].w * _2771)));
        _2815 = _2812 * (_2788 ? _2798 : (_2798 + (cbSceneParam._m0[72u].w * _2773)));
        _2816 = _2805 * 0.999000012874603271484375;
        _2826 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2826)
        {
            if ((cbInstanceData._m0[_570 + 7u].x + _2816) < 0.5)
            {
                _2982 = true;
                break;
            }
        }
        uint _2923 = _572 + uint(_2785.w);
        if ((cbInstanceData._m0[_2923].w < 1.0) && ((cbInstanceData._m0[_2923].w + _2816) < 0.5))
        {
            _2982 = true;
            break;
        }
        if ((_2809 + 1.0) < _2807.x)
        {
            _2982 = true;
            break;
        }
        _2982 = false;
        break;
    }
    float _3186;
    if (_2982)
    {
        discard_state = true;
        _3186 = 0.0;
    }
    else
    {
        _3186 = cbInstanceData._m0[_2670].w;
    }
    SV_Target.x = _2813;
    SV_Target.y = _2814;
    SV_Target.z = _2815;
    SV_Target.w = _3186;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2670].w;
    discard_exit();
}


