#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb3_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb3_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb3_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb3_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb3_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Mb3_snp_0_Texture2D_7;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Mb3_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _948;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _198 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _205 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _206 = _205 * NORMAL.x;
    float _207 = _205 * NORMAL.y;
    float _208 = _205 * NORMAL.z;
    float _212 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _220;
    float _221;
    float _222;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _220 = (-0.0) - _206;
        _221 = (-0.0) - _207;
        _222 = (-0.0) - _208;
    }
    else
    {
        _220 = _206;
        _221 = _207;
        _222 = _208;
    }
    vec4 _239 = texture(sampler2D(M_AMSN_V_Mb3_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _243 = 1.0 - _239.x;
    float _254 = ((cbMtdParam._m0[9u].x * (-1.39999997615814208984375)) * (((1.0 - TEXCOORD_3.x) * 2.0) - _243)) + 1.0;
    float _3263 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _255 = isnan(1.0) ? _3263 : (isnan(_3263) ? 1.0 : min(_3263, 1.0));
    vec4 _267 = texture(sampler2D(M_AMSN_V_Mb3_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _269 = _267.x;
    float _270 = _267.y;
    float _271 = _267.z;
    vec4 _283 = texture(sampler2D(M_AMSN_V_Mb3_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _294 = ((_283.x - _269) * _255) + _269;
    float _295 = ((_283.y - _270) * _255) + _270;
    float _296 = ((_283.z - _271) * _255) + _271;
    float _303 = (((((1.0 - TEXCOORD_3.y) * 2.0) - _243) * (-1.39999997615814208984375)) * cbMtdParam._m0[9u].y) + 1.0;
    float _3274 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _304 = isnan(1.0) ? _3274 : (isnan(_3274) ? 1.0 : min(_3274, 1.0));
    vec4 _317 = texture(sampler2D(M_AMSN_V_Mb3_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _328 = ((_317.x - _294) * _304) + _294;
    float _329 = ((_317.y - _295) * _304) + _295;
    float _330 = ((_317.z - _296) * _304) + _296;
    vec4 _342 = texture(sampler2D(M_AMSN_V_Mb3_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _344 = _342.x;
    float _345 = _342.y;
    float _346 = _342.z;
    vec4 _358 = texture(sampler2D(M_AMSN_V_Mb3_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _369 = ((_358.x - _344) * _255) + _344;
    float _370 = ((_358.y - _345) * _255) + _345;
    float _371 = ((_358.z - _346) * _255) + _346;
    vec4 _384 = texture(sampler2D(M_AMSN_V_Mb3_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w));
    float _397 = ((_384.z - _371) * _304) + _371;
    float _400 = ((((_384.x - _369) * _304) + _369) * 2.0) + (-1.0);
    float _402 = ((((_384.y - _370) * _304) + _370) * 2.0) + (-1.0);
    float _403 = dot(vec2(_400, _402), vec2(_400, _402));
    float _3285 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _408 = sqrt(1.0 - (isnan(1.0) ? _3285 : (isnan(_3285) ? 1.0 : min(_3285, 1.0))));
    float _411 = fma(_408, _220, fma(_402, _212 * TANGENT.x, (_198 * _190) * _400));
    float _414 = fma(_408, _221, fma(_402, _212 * TANGENT.y, (_198 * _191) * _400));
    float _417 = fma(_408, _222, fma(_402, _212 * TANGENT.z, (_198 * _192) * _400));
    float _421 = inversesqrt(dot(vec3(_411, _414, _417), vec3(_411, _414, _417)));
    float _422 = _421 * _411;
    float _423 = _421 * _414;
    float _424 = _421 * _417;
    float _3296 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _425 = isnan(1.0) ? _3296 : (isnan(_3296) ? 1.0 : min(_3296, 1.0));
    float _3307 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _3318 = isnan(0.0) ? _329 : (isnan(_329) ? 0.0 : max(_329, 0.0));
    float _3329 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _444 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _486 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _496 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _486);
    float _497 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _486);
    float _498 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _486);
    float _502 = inversesqrt(dot(vec3(_496, _497, _498), vec3(_496, _497, _498)));
    float _503 = _496 * _502;
    float _504 = _497 * _502;
    float _505 = _498 * _502;
    float _511 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _512 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _531 = fma(_424, cbSceneParam._m0[5u].z, fma(_423, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _422));
    float _534 = fma(_424, cbSceneParam._m0[6u].z, fma(_423, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _422));
    float _537 = fma(_424, cbSceneParam._m0[7u].z, fma(_423, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _422));
    uint _550 = uint(roundEven(NORMAL.w)) * 13u;
    uint _553 = (_550 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _559 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3307 : (isnan(_3307) ? 1.0 : min(_3307, 1.0)))) * cbInstanceData._m0[_553].x;
    float _560 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3318 : (isnan(_3318) ? 1.0 : min(_3318, 1.0)))) * cbInstanceData._m0[_553].y;
    float _561 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3329 : (isnan(_3329) ? 1.0 : min(_3329, 1.0)))) * cbInstanceData._m0[_553].z;
    float _3340 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _562 = isnan(1.0) ? _3340 : (isnan(_3340) ? 1.0 : min(_3340, 1.0));
    float _3351 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _563 = isnan(1.0) ? _3351 : (isnan(_3351) ? 1.0 : min(_3351, 1.0));
    float _3362 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _564 = isnan(1.0) ? _3362 : (isnan(_3362) ? 1.0 : min(_3362, 1.0));
    vec4 _573 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _511, cbSceneParam._m0[86u].y * _512));
    float _576 = _573.x * TEXCOORD_3.w;
    float _577 = dot(vec3(_422, _423, _424), vec3(_503, _504, _505));
    float _580 = _577 * 2.0;
    float _584 = (_580 * _422) - _503;
    float _585 = (_580 * _423) - _504;
    float _586 = (_580 * _424) - _505;
    float _590 = abs(dot(vec3(_503, _504, _505), vec3(_422, _423, _424)));
    float _3373 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _592 = sqrt(_425);
    float _605 = exp2((_592 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3373 : (isnan(_3373) ? 1.0 : min(_3373, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_592 * 3.0));
    float _637 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _641 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _645 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _947;
    float _949;
    float _950;
    float _951;
    float _952;
    float _953;
    float _954;
    float _955;
    float _956;
    float _957;
    float _958;
    float _959;
    float _960;
    float _961;
    float _962;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _672 = fma(_645, cbModelParam._m0[26u].z, fma(_641, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _637));
        float _676 = fma(_645, cbModelParam._m0[27u].z, fma(_641, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _637));
        float _680 = fma(_645, cbModelParam._m0[28u].z, fma(_641, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _637));
        float _705 = _637 + _422;
        float _706 = _641 + _423;
        float _707 = _645 + _424;
        float _717 = fma(_707, cbModelParam._m0[26u].z, fma(_706, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _705)) - _672;
        float _718 = fma(_707, cbModelParam._m0[27u].z, fma(_706, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _705)) - _676;
        float _719 = fma(_707, cbModelParam._m0[28u].z, fma(_706, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _705)) - _680;
        float _723 = inversesqrt(dot(vec3(_717, _718, _719), vec3(_717, _718, _719)));
        float _736 = ((_723 * _717) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_672 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _737 = ((_723 * _718) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_676 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _738 = ((_723 * _719) / cbModelParam._m0[34u].z) + ((((((_680 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _741 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_736, _737, _738), 0.0);
        vec4 _748 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_736, _737, _738), 0.0);
        vec4 _755 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_736, _737, _738), 0.0);
        vec4 _762 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_736, _737, _738), 0.0);
        float _775 = exp2((_741.w + (-0.5)) * 20.0) * 2.0;
        float _776 = _775 * (_741.x + (-0.5));
        float _777 = _775 * (_741.y + (-0.5));
        float _778 = _775 * (_741.z + (-0.5));
        float _785 = exp2((_748.w + (-0.5)) * 20.0) * 2.0;
        float _786 = _785 * (_748.x + (-0.5));
        float _787 = _785 * (_748.y + (-0.5));
        float _788 = _785 * (_748.z + (-0.5));
        float _795 = exp2((_755.w + (-0.5)) * 20.0) * 2.0;
        float _796 = _795 * (_755.x + (-0.5));
        float _797 = _795 * (_755.y + (-0.5));
        float _798 = _795 * (_755.z + (-0.5));
        float _805 = exp2((_762.w + (-0.5)) * 20.0) * 2.0;
        float _806 = _805 * (_762.x + (-0.5));
        float _807 = _805 * (_762.y + (-0.5));
        float _808 = _805 * (_762.z + (-0.5));
        float _809 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
        float _810 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
        float _811 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
        float _812 = _776 * 0.5;
        float _813 = _786 * 0.5;
        float _814 = _796 * 0.5;
        float _815 = dot(vec3(_812, _813, _814), vec3(_812, _813, _814));
        float _820 = (_815 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_815);
        float _829 = (dot(vec3(_422, _423, _424), vec3(_820 * _812, _820 * _813, _820 * _814)) + 1.0) * 0.5;
        float _3399 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _839 = sqrt(((_813 * _813) + (_812 * _812)) + (_814 * _814)) / (_809 + 9.9999997473787516355514526367188e-06);
        float _3410 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _840 = isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0));
        float _841 = _840 * 2.0;
        float _845 = (1.0 - _840) / (_840 + 1.0);
        float _3421 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        float _846 = isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0));
        float _855 = ((((1.0 - _846) * (_841 + 2.0)) * exp2(log2(isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0))) * (_841 + 1.0))) + _846) * _809;
        float _856 = _777 * 0.5;
        float _857 = _787 * 0.5;
        float _858 = _797 * 0.5;
        float _859 = dot(vec3(_856, _857, _858), vec3(_856, _857, _858));
        float _864 = (_859 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_859);
        float _872 = (dot(vec3(_422, _423, _424), vec3(_864 * _856, _864 * _857, _864 * _858)) + 1.0) * 0.5;
        float _3432 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _881 = sqrt(((_857 * _857) + (_856 * _856)) + (_858 * _858)) / (_810 + 9.9999997473787516355514526367188e-06);
        float _3443 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
        float _882 = isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0));
        float _883 = _882 * 2.0;
        float _887 = (1.0 - _882) / (_882 + 1.0);
        float _3454 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        float _888 = isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0));
        float _897 = ((((1.0 - _888) * (_883 + 2.0)) * exp2(log2(isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0))) * (_883 + 1.0))) + _888) * _810;
        float _898 = _778 * 0.5;
        float _899 = _788 * 0.5;
        float _900 = _798 * 0.5;
        float _901 = dot(vec3(_898, _899, _900), vec3(_898, _899, _900));
        float _906 = (_901 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_901);
        float _914 = (dot(vec3(_422, _423, _424), vec3(_906 * _898, _906 * _899, _906 * _900)) + 1.0) * 0.5;
        float _3465 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _923 = sqrt(((_899 * _899) + (_898 * _898)) + (_900 * _900)) / (_811 + 9.9999997473787516355514526367188e-06);
        float _3476 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _924 = isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0));
        float _925 = _924 * 2.0;
        float _929 = (1.0 - _924) / (_924 + 1.0);
        float _3487 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _930 = isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0));
        float _939 = ((((1.0 - _930) * (_925 + 2.0)) * exp2(log2(isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0))) * (_925 + 1.0))) + _930) * _811;
        _947 = _778;
        _949 = _777;
        _950 = _776;
        _951 = _788;
        _952 = _787;
        _953 = _786;
        _954 = _798;
        _955 = _797;
        _956 = _796;
        _957 = _811;
        _958 = _810;
        _959 = _809;
        _960 = cbModelParam._m0[36u].z * (isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0)));
        _961 = cbModelParam._m0[36u].z * (isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0)));
        _962 = cbModelParam._m0[36u].z * (isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0)));
    }
    else
    {
        _947 = _948;
        _949 = _948;
        _950 = _948;
        _951 = _948;
        _952 = _948;
        _953 = _948;
        _954 = _948;
        _955 = _948;
        _956 = _948;
        _957 = _948;
        _958 = _948;
        _959 = _948;
        _960 = 0.0;
        _961 = 0.0;
        _962 = 0.0;
    }
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _988 = fma(_645, cbModelParam._m0[30u].z, fma(_641, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _637));
        float _992 = fma(_645, cbModelParam._m0[31u].z, fma(_641, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _637));
        float _996 = fma(_645, cbModelParam._m0[32u].z, fma(_641, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _637));
        float _1019 = _637 + _422;
        float _1020 = _641 + _423;
        float _1021 = _645 + _424;
        float _1031 = fma(_1021, cbModelParam._m0[30u].z, fma(_1020, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1019)) - _988;
        float _1032 = fma(_1021, cbModelParam._m0[31u].z, fma(_1020, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1019)) - _992;
        float _1033 = fma(_1021, cbModelParam._m0[32u].z, fma(_1020, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1019)) - _996;
        float _1037 = inversesqrt(dot(vec3(_1031, _1032, _1033), vec3(_1031, _1032, _1033)));
        float _1050 = ((_1037 * _1031) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_988 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1051 = ((_1037 * _1032) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_992 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1052 = ((_1037 * _1033) / cbModelParam._m0[35u].z) + ((((((_996 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1054 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1050, _1051, _1052), 0.0);
        vec4 _1061 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1050, _1051, _1052), 0.0);
        vec4 _1068 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1050, _1051, _1052), 0.0);
        vec4 _1075 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1050, _1051, _1052), 0.0);
        float _1087 = exp2((_1054.w + (-0.5)) * 20.0) * 2.0;
        float _1088 = _1087 * (_1054.x + (-0.5));
        float _1089 = _1087 * (_1054.y + (-0.5));
        float _1090 = _1087 * (_1054.z + (-0.5));
        float _1097 = exp2((_1061.w + (-0.5)) * 20.0) * 2.0;
        float _1098 = _1097 * (_1061.x + (-0.5));
        float _1099 = _1097 * (_1061.y + (-0.5));
        float _1100 = _1097 * (_1061.z + (-0.5));
        float _1107 = exp2((_1068.w + (-0.5)) * 20.0) * 2.0;
        float _1108 = _1107 * (_1068.x + (-0.5));
        float _1109 = _1107 * (_1068.y + (-0.5));
        float _1110 = _1107 * (_1068.z + (-0.5));
        float _1117 = exp2((_1075.w + (-0.5)) * 20.0) * 2.0;
        float _1118 = _1117 * (_1075.x + (-0.5));
        float _1119 = _1117 * (_1075.y + (-0.5));
        float _1120 = _1117 * (_1075.z + (-0.5));
        float _1121 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1122 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1123 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1124 = _1088 * 0.5;
        float _1125 = _1098 * 0.5;
        float _1126 = _1108 * 0.5;
        float _1127 = dot(vec3(_1124, _1125, _1126), vec3(_1124, _1125, _1126));
        float _1132 = (_1127 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1127);
        float _1140 = (dot(vec3(_422, _423, _424), vec3(_1132 * _1124, _1132 * _1125, _1132 * _1126)) + 1.0) * 0.5;
        float _3528 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1149 = sqrt(((_1125 * _1125) + (_1124 * _1124)) + (_1126 * _1126)) / (_1121 + 9.9999997473787516355514526367188e-06);
        float _3539 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0));
        float _1151 = _1150 * 2.0;
        float _1155 = (1.0 - _1150) / (_1150 + 1.0);
        float _3550 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1156 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
        float _1165 = ((((1.0 - _1156) * (_1151 + 2.0)) * exp2(log2(isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0))) * (_1151 + 1.0))) + _1156) * _1121;
        float _1166 = _1089 * 0.5;
        float _1167 = _1099 * 0.5;
        float _1168 = _1109 * 0.5;
        float _1169 = dot(vec3(_1166, _1167, _1168), vec3(_1166, _1167, _1168));
        float _1174 = (_1169 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1169);
        float _1182 = (dot(vec3(_422, _423, _424), vec3(_1174 * _1166, _1174 * _1167, _1174 * _1168)) + 1.0) * 0.5;
        float _3561 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1191 = sqrt(((_1167 * _1167) + (_1166 * _1166)) + (_1168 * _1168)) / (_1122 + 9.9999997473787516355514526367188e-06);
        float _3572 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0));
        float _1193 = _1192 * 2.0;
        float _1197 = (1.0 - _1192) / (_1192 + 1.0);
        float _3583 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
        float _1207 = ((((1.0 - _1198) * (_1193 + 2.0)) * exp2(log2(isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0))) * (_1193 + 1.0))) + _1198) * _1122;
        float _1208 = _1090 * 0.5;
        float _1209 = _1100 * 0.5;
        float _1210 = _1110 * 0.5;
        float _1211 = dot(vec3(_1208, _1209, _1210), vec3(_1208, _1209, _1210));
        float _1216 = (_1211 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1211);
        float _1224 = (dot(vec3(_422, _423, _424), vec3(_1216 * _1208, _1216 * _1209, _1216 * _1210)) + 1.0) * 0.5;
        float _3594 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1233 = sqrt(((_1209 * _1209) + (_1208 * _1208)) + (_1210 * _1210)) / (_1123 + 9.9999997473787516355514526367188e-06);
        float _3605 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
        float _1235 = _1234 * 2.0;
        float _1239 = (1.0 - _1234) / (_1234 + 1.0);
        float _3616 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
        float _1249 = ((((1.0 - _1240) * (_1235 + 2.0)) * exp2(log2(isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0))) * (_1235 + 1.0))) + _1240) * _1123;
        _1257 = _1090;
        _1258 = _1089;
        _1259 = _1088;
        _1260 = _1100;
        _1261 = _1099;
        _1262 = _1098;
        _1263 = _1110;
        _1264 = _1109;
        _1265 = _1108;
        _1266 = _1123;
        _1267 = _1122;
        _1268 = _1121;
        _1269 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0)));
        _1270 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0)));
        _1271 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0)));
    }
    else
    {
        _1257 = _948;
        _1258 = _948;
        _1259 = _948;
        _1260 = _948;
        _1261 = _948;
        _1262 = _948;
        _1263 = _948;
        _1264 = _948;
        _1265 = _948;
        _1266 = _948;
        _1267 = _948;
        _1268 = _948;
        _1269 = 0.0;
        _1270 = 0.0;
        _1271 = 0.0;
    }
    float _1281 = (cbModelParam._m0[1u].x * (_1269 - _960)) + _960;
    float _1282 = (cbModelParam._m0[1u].x * (_1270 - _961)) + _961;
    float _1283 = (cbModelParam._m0[1u].x * (_1271 - _962)) + _962;
    float _1304 = fma(_1283, cbSceneParam._m0[89u].z, fma(_1282, cbSceneParam._m0[89u].y, _1281 * cbSceneParam._m0[89u].x));
    float _1307 = fma(_1283, cbSceneParam._m0[90u].z, fma(_1282, cbSceneParam._m0[90u].y, _1281 * cbSceneParam._m0[90u].x));
    float _1310 = fma(_1283, cbSceneParam._m0[91u].z, fma(_1282, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1281));
    float _1325 = _584 * 0.5;
    float _1326 = _585 * 0.5;
    float _1327 = _586 * 0.5;
    float _1328 = dot(vec4(_1325, _1326, _1327, 1.0), vec4(_1259, _1262, _1265, _1268));
    float _1331 = dot(vec4(_1325, _1326, _1327, 1.0), vec4(_1258, _1261, _1264, _1267));
    float _1334 = dot(vec4(_1325, _1326, _1327, 1.0), vec4(_1257, _1260, _1263, _1266));
    float _1368;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1341 = dot(vec4(_1325, _1326, _1327, 1.0), vec4(_947, _951, _954, _957));
        float _1345 = dot(vec4(_1325, _1326, _1327, 1.0), vec4(_949, _952, _955, _958));
        float _1349 = dot(vec4(_1325, _1326, _1327, 1.0), vec4(_950, _953, _956, _959));
        float _1356 = dot(vec4(cbModelParam._m0[39u]), vec4(_1325, _1326, _1327, 1.0));
        _1368 = dot(vec3(isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0)), isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0)), isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1356) ? 0.0 : (isnan(0.0) ? _1356 : max(0.0, _1356))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1368 = 1.0;
    }
    float _1379;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1370 = dot(vec4(cbModelParam._m0[40u]), vec4(_1325, _1326, _1327, 1.0));
        _1379 = dot(vec3(isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0)), isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0)), isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1370) ? 0.0 : (isnan(0.0) ? _1370 : max(0.0, _1370))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1379 = 1.0;
    }
    float _1383 = (_1379 * cbModelParam._m0[1u].x) + (_1368 * (1.0 - cbModelParam._m0[1u].x));
    float _1393 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _425);
    float _1394 = isnan(_1393) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1393 : min(cbModelParam._m0[25u].z, _1393));
    float _1476;
    float _1478;
    float _1480;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1443 = fma(_645, cbModelParam._m0[13u].z, fma(_641, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _637)) + cbModelParam._m0[13u].w;
        float _1447 = fma(_645, cbModelParam._m0[14u].z, fma(_641, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _637)) + cbModelParam._m0[14u].w;
        float _1451 = fma(_645, cbModelParam._m0[15u].z, fma(_641, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _637)) + cbModelParam._m0[15u].w;
        float _1454 = fma(_586, cbModelParam._m0[13u].z, fma(_585, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _584));
        float _1457 = fma(_586, cbModelParam._m0[14u].z, fma(_585, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _584));
        float _1460 = fma(_586, cbModelParam._m0[15u].z, fma(_585, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _584));
        float _1488;
        if (_1454 > 0.0)
        {
            _1488 = abs((1.0 - _1443) / _1454);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1454 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1443 + 1.0) / _1454);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1488 = frontier_phi_16_14_ladder;
        }
        float _1693;
        if (_1457 > 0.0)
        {
            _1693 = abs((1.0 - _1447) / _1457);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1457 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1447 + 1.0) / _1457);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1693 = frontier_phi_25_21_ladder;
        }
        float _1936;
        if (_1460 > 0.0)
        {
            _1936 = abs((1.0 - _1451) / _1460);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1460 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1451 + 1.0) / _1460);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1936 = frontier_phi_37_32_ladder;
        }
        float _1938 = isnan(_1693) ? _1488 : (isnan(_1488) ? _1693 : min(_1488, _1693));
        float _1939 = isnan(_1936) ? _1938 : (isnan(_1938) ? _1936 : min(_1938, _1936));
        float _1943 = (_1939 * _1454) + _1443;
        float _1944 = (_1939 * _1457) + _1447;
        float _1945 = (_1939 * _1460) + _1451;
        float _1946 = _1939 * 9.9999997473787516355514526367188e-05;
        float _1948 = (-1.0) - _1946;
        float _1950 = _1946 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1945 > _1950) || ((_1945 < _1948) || ((_1944 > _1950) || ((_1944 < _1948) || ((_1943 < _1948) || (_1943 > _1950))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2069 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1945, cbModelParam._m0[9u].z, fma(_1944, cbModelParam._m0[9u].y, _1943 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1945, cbModelParam._m0[10u].z, fma(_1944, cbModelParam._m0[10u].y, _1943 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1945, cbModelParam._m0[11u].z, fma(_1944, cbModelParam._m0[11u].y, _1943 * cbModelParam._m0[11u].x))), _1394);
            frontier_phi_15_37_ladder = _2069.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2069.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2069.x * cbModelParam._m0[1u].y;
        }
        _1476 = frontier_phi_15_37_ladder_2;
        _1478 = frontier_phi_15_37_ladder_1;
        _1480 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1464 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_584, _585, _586), _1394);
        _1476 = _1464.x * cbModelParam._m0[1u].y;
        _1478 = _1464.y * cbModelParam._m0[1u].y;
        _1480 = _1464.z * cbModelParam._m0[1u].y;
    }
    float _1484 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _425);
    float _1485 = isnan(_1484) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1484 : min(cbModelParam._m0[25u].w, _1484));
    float _1578;
    float _1580;
    float _1582;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1542 = fma(_645, cbModelParam._m0[21u].z, fma(_641, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _637)) + cbModelParam._m0[21u].w;
        float _1546 = fma(_645, cbModelParam._m0[22u].z, fma(_641, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _637)) + cbModelParam._m0[22u].w;
        float _1550 = fma(_645, cbModelParam._m0[23u].z, fma(_641, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _637)) + cbModelParam._m0[23u].w;
        float _1553 = fma(_586, cbModelParam._m0[21u].z, fma(_585, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _584));
        float _1556 = fma(_586, cbModelParam._m0[22u].z, fma(_585, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _584));
        float _1559 = fma(_586, cbModelParam._m0[23u].z, fma(_585, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _584));
        float _1698;
        if (_1553 > 0.0)
        {
            _1698 = abs((1.0 - _1542) / _1553);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1553 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1542 + 1.0) / _1553);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1698 = frontier_phi_27_23_ladder;
        }
        float _1963;
        if (_1556 > 0.0)
        {
            _1963 = abs((1.0 - _1546) / _1556);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1556 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1546 + 1.0) / _1556);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1963 = frontier_phi_39_34_ladder;
        }
        float _2168;
        if (_1559 > 0.0)
        {
            _2168 = abs((1.0 - _1550) / _1559);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1559 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1550 + 1.0) / _1559);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2168 = frontier_phi_48_45_ladder;
        }
        float _2170 = isnan(_1963) ? _1698 : (isnan(_1698) ? _1963 : min(_1698, _1963));
        float _2171 = isnan(_2168) ? _2170 : (isnan(_2170) ? _2168 : min(_2170, _2168));
        float _2175 = (_2171 * _1553) + _1542;
        float _2176 = (_2171 * _1556) + _1546;
        float _2177 = (_2171 * _1559) + _1550;
        float _2178 = _2171 * 9.9999997473787516355514526367188e-05;
        float _2179 = (-1.0) - _2178;
        float _2181 = _2178 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2177 > _2181) || ((_2177 < _2179) || ((_2176 > _2181) || ((_2176 < _2179) || ((_2175 < _2179) || (_2175 > _2181))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2375 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2177, cbModelParam._m0[17u].z, fma(_2176, cbModelParam._m0[17u].y, _2175 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2177, cbModelParam._m0[18u].z, fma(_2176, cbModelParam._m0[18u].y, _2175 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2177, cbModelParam._m0[19u].z, fma(_2176, cbModelParam._m0[19u].y, _2175 * cbModelParam._m0[19u].x))), _1485);
            frontier_phi_24_48_ladder = _2375.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2375.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2375.x * cbModelParam._m0[1u].z;
        }
        _1578 = frontier_phi_24_48_ladder_2;
        _1580 = frontier_phi_24_48_ladder_1;
        _1582 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1562 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_584, _585, _586), _1485);
        _1578 = _1562.x * cbModelParam._m0[1u].z;
        _1580 = _1562.y * cbModelParam._m0[1u].z;
        _1582 = _1562.z * cbModelParam._m0[1u].z;
    }
    float _1594 = ((((1.0 - _605) * ((_592 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_605 * _592)) * _576;
    float _1595 = _1594 * ((cbModelParam._m0[1u].w * (_1578 - _1476)) + _1476);
    float _1596 = _1594 * ((cbModelParam._m0[1u].w * (_1580 - _1478)) + _1478);
    float _1597 = _1594 * ((cbModelParam._m0[1u].w * (_1582 - _1480)) + _1480);
    float _1600 = fma(_1597, cbSceneParam._m0[89u].z, fma(_1596, cbSceneParam._m0[89u].y, _1595 * cbSceneParam._m0[89u].x));
    float _1603 = fma(_1597, cbSceneParam._m0[90u].z, fma(_1596, cbSceneParam._m0[90u].y, _1595 * cbSceneParam._m0[90u].x));
    float _1606 = fma(_1597, cbSceneParam._m0[91u].z, fma(_1596, cbSceneParam._m0[91u].y, _1595 * cbSceneParam._m0[91u].x));
    uvec4 _1616 = floatBitsToUint(cbInstanceData._m0[_550 + 5u]);
    uint _1618 = _1616.x * 14u;
    uint _1619 = _1618 + 13u;
    float _1626 = _576 + (-1.0);
    float _1631 = (cbLight._m0[_1619].x * _1626) + 1.0;
    float _1632 = (cbLight._m0[_1619].y * _1626) + 1.0;
    float _1633 = (cbLight._m0[_1619].z * _1626) + 1.0;
    float _1634 = (cbLight._m0[_1619].w * _1626) + 1.0;
    uint _1635 = _1618 + 5u;
    float _1641 = isnan(1.0) ? _1632 : (isnan(_1632) ? 1.0 : min(_1632, 1.0));
    uint _1645 = _1618 + 4u;
    float _1651 = isnan(1.0) ? _1631 : (isnan(_1631) ? 1.0 : min(_1631, 1.0));
    uint _1655 = _1618 | 1u;
    float _1666 = dot(vec3(cbLight._m0[_1618].xyz), vec3(_422, _423, _424));
    float _1669 = dot(vec3(cbLight._m0[_1655].xyz), vec3(_422, _423, _424));
    float _3752 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
    float _3763 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
    float _1674 = (isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0))) * 0.3183098733425140380859375;
    float _1676 = (isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0))) * 0.3183098733425140380859375;
    float _1683 = ((cbLight._m0[_1635].x * _1641) * _1676) + ((cbLight._m0[_1645].x * _1651) * _1674);
    float _1684 = ((_1641 * cbLight._m0[_1635].y) * _1676) + ((_1651 * cbLight._m0[_1645].y) * _1674);
    float _1685 = ((_1641 * cbLight._m0[_1635].z) * _1676) + ((_1651 * cbLight._m0[_1645].z) * _1674);
    uvec4 _1690 = floatBitsToUint(cbLight._m0[_1618 + 12u]);
    bool _1692 = _1690.x == 0u;
    float _1703;
    float _1705;
    float _1707;
    if (_1692)
    {
        _1703 = _1683;
        _1705 = _1684;
        _1707 = _1685;
    }
    else
    {
        uint _1711 = _1618 + 6u;
        float _1727 = (dot(vec3(cbLight._m0[_1618 + 2u].xyz), vec3(_422, _423, _424)) * 0.5) + 0.5;
        float _1728 = _1727 * _1727;
        float _3774 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
        float _1729 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
        float _1730 = isnan(1.0) ? _1633 : (isnan(_1633) ? 1.0 : min(_1633, 1.0));
        _1703 = (((cbLight._m0[_1711].x * 0.3183098733425140380859375) * _1729) * _1730) + _1683;
        _1705 = (((cbLight._m0[_1711].y * 0.3183098733425140380859375) * _1729) * _1730) + _1684;
        _1707 = (((cbLight._m0[_1711].z * 0.3183098733425140380859375) * _1729) * _1730) + _1685;
    }
    bool _1710 = _1690.y == 0u;
    float _1748;
    float _1750;
    float _1752;
    if (_1710)
    {
        _1748 = _1703;
        _1750 = _1705;
        _1752 = _1707;
    }
    else
    {
        uint _1907 = _1618 + 7u;
        float _1923 = (dot(vec3(cbLight._m0[_1618 + 3u].xyz), vec3(_422, _423, _424)) * 0.5) + 0.5;
        float _1924 = _1923 * _1923;
        float _3790 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
        float _1925 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
        float _1926 = isnan(1.0) ? _1634 : (isnan(_1634) ? 1.0 : min(_1634, 1.0));
        _1748 = (((cbLight._m0[_1907].x * 0.3183098733425140380859375) * _1925) * _1926) + _1703;
        _1750 = (((cbLight._m0[_1907].y * 0.3183098733425140380859375) * _1925) * _1926) + _1705;
        _1752 = (((cbLight._m0[_1907].z * 0.3183098733425140380859375) * _1925) * _1926) + _1707;
    }
    uint _1755 = _1618 + 8u;
    float _1768 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1618].w)) * _425) * 0.949999988079071044921875);
    float _1769 = _1768 * _1768;
    float _1770 = cbLight._m0[_1618].x + _503;
    float _1771 = cbLight._m0[_1618].y + _504;
    float _1772 = cbLight._m0[_1618].z + _505;
    float _1776 = inversesqrt(dot(vec3(_1770, _1771, _1772), vec3(_1770, _1771, _1772)));
    float _1777 = _1776 * _1770;
    float _1778 = _1776 * _1771;
    float _1779 = _1776 * _1772;
    float _1780 = dot(vec3(_422, _423, _424), vec3(cbLight._m0[_1618].xyz));
    float _3806 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
    float _1783 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
    float _3817 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _1784 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
    float _1785 = dot(vec3(_422, _423, _424), vec3(_1777, _1778, _1779));
    float _3828 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
    float _1788 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
    float _1789 = dot(vec3(cbLight._m0[_1618].xyz), vec3(_1777, _1778, _1779));
    float _3839 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
    float _1793 = _1769 * _1769;
    float _1797 = ((_1788 * _1788) * (_1793 + (-1.0))) + 1.0;
    float _1808 = (exp2(log2(1.0 - (isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1809 = 1.0 - _1769;
    float _1820 = (0.5 / (((_1784 * ((_1783 * _1809) + _1769)) + 9.9999999392252902907785028219223e-09) + (((_1784 * _1809) + _1769) * _1783))) * _1783;
    float _3850 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
    float _1822 = (isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0))) * (_1793 / ((_1797 * _1797) * 3.141590118408203125));
    uint _1833 = _1618 + 9u;
    float _1844 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1655].w)) * _425) * 0.949999988079071044921875);
    float _1845 = _1844 * _1844;
    float _1846 = cbLight._m0[_1655].x + _503;
    float _1847 = cbLight._m0[_1655].y + _504;
    float _1848 = cbLight._m0[_1655].z + _505;
    float _1852 = inversesqrt(dot(vec3(_1846, _1847, _1848), vec3(_1846, _1847, _1848)));
    float _1853 = _1852 * _1846;
    float _1854 = _1852 * _1847;
    float _1855 = _1852 * _1848;
    float _1856 = dot(vec3(_422, _423, _424), vec3(cbLight._m0[_1655].xyz));
    float _3861 = isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0));
    float _1859 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
    float _1860 = dot(vec3(_422, _423, _424), vec3(_1853, _1854, _1855));
    float _3872 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
    float _1863 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
    float _1864 = dot(vec3(cbLight._m0[_1655].xyz), vec3(_1853, _1854, _1855));
    float _3883 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
    float _1868 = _1845 * _1845;
    float _1872 = ((_1863 * _1863) * (_1868 + (-1.0))) + 1.0;
    float _1881 = (exp2(log2(1.0 - (isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1882 = 1.0 - _1845;
    float _1892 = (0.5 / (((_1784 * ((_1859 * _1882) + _1845)) + 9.9999999392252902907785028219223e-09) + (((_1784 * _1882) + _1845) * _1859))) * _1859;
    float _3894 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
    float _1894 = (isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0))) * (_1868 / ((_1872 * _1872) * 3.141590118408203125));
    float _1904 = (((_1881 * cbLight._m0[_1833].x) * _1894) * _1641) + (((_1808 * cbLight._m0[_1755].x) * _1822) * _1651);
    float _1905 = (((_1881 * cbLight._m0[_1833].y) * _1894) * _1641) + (((_1808 * cbLight._m0[_1755].y) * _1822) * _1651);
    float _1906 = (((_1881 * cbLight._m0[_1833].z) * _1894) * _1641) + (((_1808 * cbLight._m0[_1755].z) * _1822) * _1651);
    float _1968;
    float _1970;
    float _1972;
    if (_1692)
    {
        _1968 = _1904;
        _1970 = _1905;
        _1972 = _1906;
    }
    else
    {
        uint _1974 = _1618 + 2u;
        uint _1978 = _1618 + 10u;
        float _1992 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1974].w)) * _425) * 0.949999988079071044921875);
        float _1993 = _1992 * _1992;
        float _1994 = cbLight._m0[_1974].x + _503;
        float _1995 = cbLight._m0[_1974].y + _504;
        float _1996 = cbLight._m0[_1974].z + _505;
        float _2000 = inversesqrt(dot(vec3(_1994, _1995, _1996), vec3(_1994, _1995, _1996)));
        float _2001 = _2000 * _1994;
        float _2002 = _2000 * _1995;
        float _2003 = _2000 * _1996;
        float _2004 = dot(vec3(_422, _423, _424), vec3(cbLight._m0[_1974].xyz));
        float _3905 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
        float _2007 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _2008 = dot(vec3(_422, _423, _424), vec3(_2001, _2002, _2003));
        float _3916 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
        float _2011 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _2012 = dot(vec3(cbLight._m0[_1974].xyz), vec3(_2001, _2002, _2003));
        float _3927 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
        float _2016 = _1993 * _1993;
        float _2020 = ((_2011 * _2011) * (_2016 + (-1.0))) + 1.0;
        float _2029 = (exp2(log2(1.0 - (isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2030 = 1.0 - _1993;
        float _2040 = (0.5 / (((_1784 * ((_2007 * _2030) + _1993)) + 9.9999999392252902907785028219223e-09) + (((_1784 * _2030) + _1993) * _2007))) * _2007;
        float _3938 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
        float _2042 = (isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))) * (_2016 / ((_2020 * _2020) * 3.141590118408203125));
        float _2043 = isnan(1.0) ? _1633 : (isnan(_1633) ? 1.0 : min(_1633, 1.0));
        _1968 = (((_2029 * cbLight._m0[_1978].x) * _2042) * _2043) + _1904;
        _1970 = (((_2029 * cbLight._m0[_1978].y) * _2042) * _2043) + _1905;
        _1972 = (((_2029 * cbLight._m0[_1978].z) * _2042) * _2043) + _1906;
    }
    float _2078;
    float _2080;
    float _2082;
    if (_1710)
    {
        _2078 = _1968;
        _2080 = _1970;
        _2082 = _1972;
    }
    else
    {
        uint _2089 = _1618 + 3u;
        uint _2093 = _1618 + 11u;
        float _2107 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2089].w)) * _425) * 0.949999988079071044921875);
        float _2108 = _2107 * _2107;
        float _2109 = cbLight._m0[_2089].x + _503;
        float _2110 = cbLight._m0[_2089].y + _504;
        float _2111 = cbLight._m0[_2089].z + _505;
        float _2115 = inversesqrt(dot(vec3(_2109, _2110, _2111), vec3(_2109, _2110, _2111)));
        float _2116 = _2115 * _2109;
        float _2117 = _2115 * _2110;
        float _2118 = _2115 * _2111;
        float _2119 = dot(vec3(_422, _423, _424), vec3(cbLight._m0[_2089].xyz));
        float _3954 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
        float _2122 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
        float _2123 = dot(vec3(_422, _423, _424), vec3(_2116, _2117, _2118));
        float _3965 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
        float _2126 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
        float _2127 = dot(vec3(cbLight._m0[_2089].xyz), vec3(_2116, _2117, _2118));
        float _3976 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
        float _2131 = _2108 * _2108;
        float _2135 = ((_2126 * _2126) * (_2131 + (-1.0))) + 1.0;
        float _2144 = (exp2(log2(1.0 - (isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2145 = 1.0 - _2108;
        float _2155 = (0.5 / (((_1784 * ((_2122 * _2145) + _2108)) + 9.9999999392252902907785028219223e-09) + (((_1784 * _2145) + _2108) * _2122))) * _2122;
        float _3987 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
        float _2157 = (isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))) * (_2131 / ((_2135 * _2135) * 3.141590118408203125));
        float _2158 = isnan(1.0) ? _1634 : (isnan(_1634) ? 1.0 : min(_1634, 1.0));
        _2078 = (((_2144 * cbLight._m0[_2093].x) * _2157) * _2158) + _1968;
        _2080 = (((_2144 * cbLight._m0[_2093].y) * _2157) * _2158) + _1970;
        _2082 = (((_2144 * cbLight._m0[_2093].z) * _2157) * _2158) + _1972;
    }
    float _2292;
    float _2294;
    float _2296;
    float _2298;
    float _2300;
    float _2302;
    if (_1616.y == 0u)
    {
        float _2233 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2234 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2233;
        float _2235 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2233;
        float _2236 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2233;
        uvec4 _2248 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2249 = _2248.x;
        uint _2260 = uint((float(_2248.y) * floor(float(uint(cbSceneParam._m0[85u].y * _512) / _2249))) + floor(float(uint(cbSceneParam._m0[85u].x * _511) / _2249)));
        float _2270 = (log2(_2236 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2271 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
        uint _2274 = uint(isnan(14.0) ? _2271 : (isnan(_2271) ? 14.0 : min(_2271, 14.0)));
        uvec4 _2279 = texelFetch(g_lightClusterGridBuffer, int(((_2274 << 2u) + (_2260 << 6u)) >> 2u));
        uint _2280 = _2279.x;
        uint _2281 = _2248.z;
        float _2380;
        float _2382;
        float _2384;
        float _2386;
        float _2388;
        float _2390;
        if (((((1u << ((_2281 >> 4u) & 15u)) + 4294967295u) & _2280) == 0u) || ((_2281 & 240u) == 0u))
        {
            _2380 = 0.0;
            _2382 = 0.0;
            _2384 = 0.0;
            _2386 = 0.0;
            _2388 = 0.0;
            _2390 = 0.0;
        }
        else
        {
            float _2381;
            float _2383;
            float _2385;
            float _2387;
            float _2389;
            float _2391;
            float _2524 = 0.0;
            float _2525 = 0.0;
            float _2526 = 0.0;
            float _2527 = 0.0;
            float _2528 = 0.0;
            float _2529 = 0.0;
            uint _2530 = 0u;
            uint _2539;
            bool _2540;
            for (;;)
            {
                _2539 = texelFetch(g_lightClassification, int((((_2274 << 5u) + (_2260 << 9u)) + (_2530 << 2u)) >> 2u)).x;
                _2540 = _2539 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2540)
                {
                    frontier_phi_63_pred = _2529;
                    frontier_phi_63_pred_1 = _2528;
                    frontier_phi_63_pred_2 = _2527;
                    frontier_phi_63_pred_3 = _2526;
                    frontier_phi_63_pred_4 = _2525;
                    frontier_phi_63_pred_5 = _2524;
                }
                else
                {
                    float _2648;
                    float _2649;
                    float _2650;
                    float _2651;
                    float _2652;
                    float _2653;
                    uint _2654;
                    _2648 = _2524;
                    _2649 = _2525;
                    _2650 = _2526;
                    _2651 = _2527;
                    _2652 = _2528;
                    _2653 = _2529;
                    _2654 = _2539;
                    float _2580;
                    float _2581;
                    float _2582;
                    float _2583;
                    float _2584;
                    float _2585;
                    for (;;)
                    {
                        uint _2658 = uint(findLSB(_2654)) + (_2530 << 5u);
                        uint _2655 = (_2654 + 4294967295u) & _2654;
                        uint _2660 = _2658 * 48u;
                        vec4 _2674 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2660)).x, texelFetch(g_PointLightRenderingBuffer, int(_2660 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2660 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2660 + 3u)).x));
                        uint _2680 = (_2658 * 48u) + 4u;
                        vec4 _2693 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2680)).x, texelFetch(g_PointLightRenderingBuffer, int(_2680 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2680 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2680 + 3u)).x));
                        uint _2699 = (_2658 * 48u) + 8u;
                        vec3 _2710 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2699)).x, texelFetch(g_PointLightRenderingBuffer, int(_2699 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2699 + 2u)).x));
                        float _2714 = _2674.x - _2234;
                        float _2715 = _2674.y - _2235;
                        float _2716 = _2674.z - _2236;
                        float _2717 = dot(vec3(_2714, _2715, _2716), vec3(_2714, _2715, _2716));
                        float _2720 = inversesqrt(_2717);
                        float _2721 = _2720 * _2714;
                        float _2722 = _2720 * _2715;
                        float _2723 = _2720 * _2716;
                        float _2724 = dot(vec3(_531, _534, _537), vec3(_2721, _2722, _2723));
                        float _2729 = 1.0 - (_2717 * _2674.w);
                        float _4013 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
                        float _2730 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
                        float _2731 = sqrt(_2717) * _2693.w;
                        float _2734 = 1.39999997615814208984375 / (_2731 + 1.39999997615814208984375);
                        float _2735 = _2734 * _2734;
                        float _2738 = ((1.0 - _2735) * _2724) + _2735;
                        float _2741 = _2731 * _2731;
                        float _2745 = ((isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0))) * _2730) / ((_2741 * 0.699999988079071044921875) + 1.0);
                        float _2749 = (-0.0) - _2234;
                        float _2750 = (-0.0) - _2235;
                        float _2751 = (-0.0) - _2236;
                        float _2755 = inversesqrt(dot(vec3(_2749, _2750, _2751), vec3(_2749, _2750, _2751)));
                        float _2756 = _2755 * _2749;
                        float _2757 = _2755 * _2750;
                        float _2758 = _2755 * _2751;
                        float _2766 = exp2(log2(1.0 / ((_2741 * 3.5) + 5.0)) * 0.25);
                        float _2767 = 1.0 - _592;
                        float _2774 = sqrt(1.0 - ((1.0 - (_2767 * _2767)) * (1.0 - (_2766 * _2766))));
                        float _2775 = _2774 * _2774;
                        float _2776 = _2775 * _2775;
                        float _2777 = _2756 + _2721;
                        float _2778 = _2757 + _2722;
                        float _2779 = _2758 + _2723;
                        float _2783 = inversesqrt(dot(vec3(_2777, _2778, _2779), vec3(_2777, _2778, _2779)));
                        float _2787 = dot(vec3(_531, _534, _537), vec3(_2756, _2757, _2758));
                        float _4029 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
                        float _2790 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
                        float _2791 = dot(vec3(_531, _534, _537), vec3(_2783 * _2777, _2783 * _2778, _2783 * _2779));
                        float _4040 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
                        float _2794 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
                        float _2798 = ((_2794 * _2794) * (_2776 + (-1.0))) + 1.0;
                        float _2799 = _2734 * _2775;
                        float _2800 = _2799 * _2799;
                        float _2803 = ((1.0 - _2800) * _2724) + _2800;
                        float _4051 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
                        float _2804 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
                        float _2805 = 1.0 - _2775;
                        float _2815 = (0.5 / (((_2804 * ((_2790 * _2805) + _2775)) + 9.9999999392252902907785028219223e-09) + (((_2804 * _2805) + _2775) * _2790))) * _2804;
                        float _4062 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0));
                        float _2826 = (((_2776 * 3.1415927410125732421875) * (isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0)))) / ((_2798 * _2798) * ((_2741 * 2.1991131305694580078125) + 3.141590118408203125))) * _2730;
                        _2583 = (_2745 * _2693.x) + _2651;
                        _2584 = (_2745 * _2693.y) + _2652;
                        _2585 = (_2745 * _2693.z) + _2653;
                        _2580 = (_2826 * _2710.x) + _2648;
                        _2581 = (_2826 * _2710.y) + _2649;
                        _2582 = (_2826 * _2710.z) + _2650;
                        if (_2655 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2648 = _2580;
                            _2649 = _2581;
                            _2650 = _2582;
                            _2651 = _2583;
                            _2652 = _2584;
                            _2653 = _2585;
                            _2654 = _2655;
                        }
                    }
                    frontier_phi_63_pred = _2585;
                    frontier_phi_63_pred_1 = _2584;
                    frontier_phi_63_pred_2 = _2583;
                    frontier_phi_63_pred_3 = _2582;
                    frontier_phi_63_pred_4 = _2581;
                    frontier_phi_63_pred_5 = _2580;
                }
                _2391 = frontier_phi_63_pred;
                _2389 = frontier_phi_63_pred_1;
                _2387 = frontier_phi_63_pred_2;
                _2385 = frontier_phi_63_pred_3;
                _2383 = frontier_phi_63_pred_4;
                _2381 = frontier_phi_63_pred_5;
                uint _2531 = _2530 + 1u;
                if (_2531 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2524 = _2381;
                    _2525 = _2383;
                    _2526 = _2385;
                    _2527 = _2387;
                    _2528 = _2389;
                    _2529 = _2391;
                    _2530 = _2531;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2380 = _2381;
            _2382 = _2383;
            _2384 = _2385;
            _2386 = _2387;
            _2388 = _2389;
            _2390 = _2391;
        }
        uvec4 _2394 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2395 = _2394.z;
        uint _2397 = (_2395 >> 8u) & 15u;
        float _2492;
        float _2494;
        float _2496;
        float _2498;
        float _2500;
        float _2502;
        if (((4294967295u << _2397) & _2280) == 0u)
        {
            _2492 = _2380;
            _2494 = _2382;
            _2496 = _2384;
            _2498 = _2386;
            _2500 = _2388;
            _2502 = _2390;
        }
        else
        {
            float _2517 = inversesqrt(dot(vec3(_2234, _2235, _2236), vec3(_2234, _2235, _2236)));
            float _2518 = _2517 * _2234;
            float _2519 = _2517 * _2235;
            float _2520 = _2517 * _2236;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2397 < ((_2395 >> 12u) & 15u))
            {
                float _2493;
                float _2495;
                float _2497;
                float _2499;
                float _2501;
                float _2503;
                float _2631 = _2380;
                float _2632 = _2382;
                float _2633 = _2384;
                float _2634 = _2386;
                float _2635 = _2388;
                float _2636 = _2390;
                uint _2637 = _2397;
                uint _2646;
                bool _2647;
                for (;;)
                {
                    _2646 = texelFetch(g_lightClassification, int((((_2274 << 5u) + (_2260 << 9u)) + (_2637 << 2u)) >> 2u)).x;
                    _2647 = _2646 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2647)
                    {
                        frontier_phi_69_pred = _2636;
                        frontier_phi_69_pred_1 = _2635;
                        frontier_phi_69_pred_2 = _2634;
                        frontier_phi_69_pred_3 = _2633;
                        frontier_phi_69_pred_4 = _2632;
                        frontier_phi_69_pred_5 = _2631;
                    }
                    else
                    {
                        float _2831;
                        float _2832;
                        float _2833;
                        float _2834;
                        float _2835;
                        float _2836;
                        float _3127;
                        float _3128;
                        float _3129;
                        float _3130;
                        float _3131;
                        float _3132;
                        float _2844 = _2631;
                        float _2845 = _2632;
                        float _2846 = _2633;
                        float _2847 = _2634;
                        float _2848 = _2635;
                        float _2849 = _2636;
                        uint _2850 = _2646;
                        uint _2851;
                        vec4 _2876;
                        float _2877;
                        vec4 _2892;
                        vec3 _2904;
                        vec4 _2920;
                        vec4 _2936;
                        float _2983;
                        bool _2984;
                        for (;;)
                        {
                            uint _2861 = ((_2637 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2850));
                            _2851 = (_2850 + 4294967295u) & _2850;
                            uint _2863 = _2861 * 40u;
                            _2876 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2863)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2863 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2863 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2863 + 3u)).x));
                            _2877 = _2876.w;
                            uint _2879 = (_2861 * 40u) + 4u;
                            _2892 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2879)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2879 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2879 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2879 + 3u)).x));
                            uint _2894 = (_2861 * 40u) + 8u;
                            _2904 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2894)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 2u)).x));
                            uint _2907 = (_2861 * 40u) + 16u;
                            _2920 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2907)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2907 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2907 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2907 + 3u)).x));
                            uint _2923 = (_2861 * 40u) + 20u;
                            _2936 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2923)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 3u)).x));
                            uint _2939 = (_2861 * 40u) + 24u;
                            vec4 _2952 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2939)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 3u)).x));
                            uint _2958 = (_2861 * 40u) + 28u;
                            vec4 _2971 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2958)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 3u)).x));
                            _2983 = fma(_2236, _2971.z, fma(_2235, _2971.y, _2971.x * _2234)) + _2971.w;
                            _2984 = !((fma(_2236, _2952.z, fma(_2235, _2952.y, _2952.x * _2234)) + _2952.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2984)
                            {
                                float _3011 = _2876.x - _2234;
                                float _3012 = _2876.y - _2235;
                                float _3013 = _2876.z - _2236;
                                float _3014 = dot(vec3(_3011, _3012, _3013), vec3(_3011, _3012, _3013));
                                float _3017 = inversesqrt(_3014);
                                float _3018 = _3017 * _3011;
                                float _3019 = _3017 * _3012;
                                float _3020 = _3017 * _3013;
                                float _3024 = 1.0 - (_3014 / (_2877 * _2877));
                                float _4073 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0));
                                float _3025 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
                                float _3029 = sqrt(_3014) * _2892.w;
                                float _3031 = 1.39999997615814208984375 / (_3029 + 1.39999997615814208984375);
                                float _3032 = _3031 * _3031;
                                float _3035 = ((1.0 - _3032) * dot(vec3(_3018, _3019, _3020), vec3(_531, _534, _537))) + _3032;
                                float _3038 = _3029 * _3029;
                                float _3042 = (fma(_2236, _2920.z, fma(_2235, _2920.y, _2920.x * _2234)) + _2920.w) / _2983;
                                float _3043 = (fma(_2236, _2936.z, fma(_2235, _2936.y, _2936.x * _2234)) + _2936.w) / _2983;
                                float _3047 = 1.0 - dot(vec2(_3042, _3043), vec2(_3042, _3043));
                                float _4089 = isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0));
                                float _3048 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
                                float _3049 = _3048 * (((isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0))) * _3025) / ((_3038 * 0.699999988079071044921875) + 1.0));
                                float _3061 = exp2(log2(1.0 / ((_3038 * 3.5) + 5.0)) * 0.25);
                                float _3062 = 1.0 - _592;
                                float _3069 = sqrt(1.0 - ((1.0 - (_3062 * _3062)) * (1.0 - (_3061 * _3061))));
                                float _3070 = _3069 * _3069;
                                float _3071 = _3070 * _3070;
                                float _3072 = _3018 - _2518;
                                float _3073 = _3019 - _2519;
                                float _3074 = _3020 - _2520;
                                float _3078 = inversesqrt(dot(vec3(_3072, _3073, _3074), vec3(_3072, _3073, _3074)));
                                float _3082 = dot(vec3(_531, _534, _537), vec3((-0.0) - _2518, (-0.0) - _2519, (-0.0) - _2520));
                                float _4100 = isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0));
                                float _3085 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
                                float _3086 = dot(vec3(_531, _534, _537), vec3(_3078 * _3072, _3078 * _3073, _3078 * _3074));
                                float _4111 = isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0));
                                float _3089 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
                                float _3093 = ((_3089 * _3089) * (_3071 + (-1.0))) + 1.0;
                                float _3094 = _3031 * _3070;
                                float _3095 = _3094 * _3094;
                                float _3101 = ((1.0 - _3095) * dot(vec3(_531, _534, _537), vec3(_3018, _3019, _3020))) + _3095;
                                float _4122 = isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0));
                                float _3102 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
                                float _3103 = 1.0 - _3070;
                                float _3113 = (0.5 / (((_3102 * ((_3085 * _3103) + _3070)) + 9.9999999392252902907785028219223e-09) + (((_3102 * _3103) + _3070) * _3085))) * _3102;
                                float _4133 = isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0));
                                float _3123 = (_3048 * _3025) * (((_3071 * 3.1415927410125732421875) * (isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0)))) / ((_3093 * _3093) * ((_3038 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3049 * _2892.z;
                                frontier_phi_75_pred_1 = _3049 * _2892.y;
                                frontier_phi_75_pred_2 = _3049 * _2892.x;
                                frontier_phi_75_pred_3 = _3123 * _2904.z;
                                frontier_phi_75_pred_4 = _3123 * _2904.y;
                                frontier_phi_75_pred_5 = _3123 * _2904.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3132 = frontier_phi_75_pred;
                            _3131 = frontier_phi_75_pred_1;
                            _3130 = frontier_phi_75_pred_2;
                            _3129 = frontier_phi_75_pred_3;
                            _3128 = frontier_phi_75_pred_4;
                            _3127 = frontier_phi_75_pred_5;
                            _2834 = _3130 + _2847;
                            _2835 = _3131 + _2848;
                            _2836 = _3132 + _2849;
                            _2831 = _3127 + _2844;
                            _2832 = _3128 + _2845;
                            _2833 = _3129 + _2846;
                            if (_2851 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2844 = _2831;
                                _2845 = _2832;
                                _2846 = _2833;
                                _2847 = _2834;
                                _2848 = _2835;
                                _2849 = _2836;
                                _2850 = _2851;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2836;
                        frontier_phi_69_pred_1 = _2835;
                        frontier_phi_69_pred_2 = _2834;
                        frontier_phi_69_pred_3 = _2833;
                        frontier_phi_69_pred_4 = _2832;
                        frontier_phi_69_pred_5 = _2831;
                    }
                    _2503 = frontier_phi_69_pred;
                    _2501 = frontier_phi_69_pred_1;
                    _2499 = frontier_phi_69_pred_2;
                    _2497 = frontier_phi_69_pred_3;
                    _2495 = frontier_phi_69_pred_4;
                    _2493 = frontier_phi_69_pred_5;
                    uint _2638 = _2637 + 1u;
                    if (_2638 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2631 = _2493;
                        _2632 = _2495;
                        _2633 = _2497;
                        _2634 = _2499;
                        _2635 = _2501;
                        _2636 = _2503;
                        _2637 = _2638;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2503;
                frontier_phi_57_58_ladder_1 = _2501;
                frontier_phi_57_58_ladder_2 = _2499;
                frontier_phi_57_58_ladder_3 = _2497;
                frontier_phi_57_58_ladder_4 = _2495;
                frontier_phi_57_58_ladder_5 = _2493;
            }
            else
            {
                frontier_phi_57_58_ladder = _2390;
                frontier_phi_57_58_ladder_1 = _2388;
                frontier_phi_57_58_ladder_2 = _2386;
                frontier_phi_57_58_ladder_3 = _2384;
                frontier_phi_57_58_ladder_4 = _2382;
                frontier_phi_57_58_ladder_5 = _2380;
            }
            _2492 = frontier_phi_57_58_ladder_5;
            _2494 = frontier_phi_57_58_ladder_4;
            _2496 = frontier_phi_57_58_ladder_3;
            _2498 = frontier_phi_57_58_ladder_2;
            _2500 = frontier_phi_57_58_ladder_1;
            _2502 = frontier_phi_57_58_ladder;
        }
        float _2507 = isnan(1.0) ? _576 : (isnan(_576) ? 1.0 : min(_576, 1.0));
        _2292 = (_2507 * _2498) + _1748;
        _2294 = (_2507 * _2500) + _1750;
        _2296 = (_2507 * _2502) + _1752;
        _2298 = ((_2492 * 0.039999999105930328369140625) * _2507) + _2078;
        _2300 = ((_2494 * 0.039999999105930328369140625) * _2507) + _2080;
        _2302 = ((_2496 * 0.039999999105930328369140625) * _2507) + _2082;
    }
    else
    {
        _2292 = _1748;
        _2294 = _1750;
        _2296 = _1752;
        _2298 = _2078;
        _2300 = _2080;
        _2302 = _2082;
    }
    float _4149 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _4160 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _4171 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    uint _2322 = _550 + 6u;
    float _2330 = _511 / cbSceneParam._m0[86u].x;
    float _2331 = _512 / cbSceneParam._m0[86u].y;
    vec4 _2345 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2330, _2331, (log2((isnan(cbSceneParam._m0[77u].w) ? _444 : (isnan(_444) ? cbSceneParam._m0[77u].w : min(_444, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2347 = _2345.x;
    float _2348 = _2345.y;
    float _2349 = _2345.z;
    float _2350 = _2345.w;
    float _2442;
    float _2444;
    float _2446;
    float _2448;
    if (_444 > cbSceneParam._m0[78u].w)
    {
        float _2405 = isnan(_444) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _444 : min(cbSceneParam._m0[80u].w, _444));
        float _2406 = _2405 / _444;
        float _2417 = _2406 * _496;
        float _2418 = _497 * _2406;
        float _2419 = (-0.0) - _2418;
        float _2420 = _2406 * _498;
        float _2422 = (cbSceneParam._m0[77u].w * _2419) / _2405;
        float _2423 = _2422 + cbSceneParam._m0[79u].w;
        float _2424 = cbSceneParam._m0[79u].w - _2418;
        float _2430 = sqrt(((_2417 * _2417) + (_2418 * _2418)) + (_2420 * _2420));
        float _2433 = (1.0 - (cbSceneParam._m0[77u].w / _2405)) * _2430;
        float _2438 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2440 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2593;
        if (abs((_2419 - _2422) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2593 = ((((_2423 > 0.0) ? exp2(_2438 * _2423) : (2.0 - exp2(_2440 * _2423))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2433;
        }
        else
        {
            float _2553 = 1.0 / cbSceneParam._m0[80u].x;
            float _2554 = isnan(_2424) ? _2423 : (isnan(_2423) ? _2424 : max(_2423, _2424));
            float _2555 = isnan(_2424) ? _2423 : (isnan(_2423) ? _2424 : min(_2423, _2424));
            float _2564 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : min(_2554, 0.0));
            float _2565 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : min(_2555, 0.0));
            _2593 = ((abs(_2430 / _2419) * cbSceneParam._m0[80u].y) * ((((_2564 - _2565) * 2.0) - ((exp2(_2438 * (isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0)))) - exp2(_2438 * (isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0))))) * _2553)) - ((exp2(_2440 * _2564) - exp2(_2440 * _2565)) * _2553))) + (_2433 * cbSceneParam._m0[80u].z);
        }
        vec4 _2595 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2330, _2331, 1.0), 0.0);
        float _2604 = exp2((_2593 * (-1.44269502162933349609375)) * (1.0 - _2595.w));
        float _2605 = log2(_2604);
        float _2621 = log2(_2350);
        _2442 = (exp2(_2621 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2605 * cbSceneParam._m0[78u].x)) * _2595.x) / cbSceneParam._m0[78u].x)) + _2347;
        _2444 = (exp2(_2621 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2605 * cbSceneParam._m0[78u].y)) * _2595.y) / cbSceneParam._m0[78u].y)) + _2348;
        _2446 = (exp2(_2621 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2605 * cbSceneParam._m0[78u].z)) * _2595.z) / cbSceneParam._m0[78u].z)) + _2349;
        _2448 = _2604 * _2350;
    }
    else
    {
        _2442 = _2347;
        _2444 = _2348;
        _2446 = _2349;
        _2448 = _2350;
    }
    float _2460 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2461 = _2460 == 3.0;
    float _2462 = log2(_2448);
    float _2469 = exp2(_2462 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) * (_2292 + ((isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0))) * _576))) + ((_2298 + ((isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0))) * _1383)) * cbPerFrame._m0[3u].x));
    float _2470 = exp2(_2462 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0))) * (_2294 + ((isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0))) * _576))) + ((_2300 + ((isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0))) * _1383)) * cbPerFrame._m0[3u].x));
    float _2471 = exp2(_2462 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * (_2296 + ((isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0))) * _576))) + ((_2302 + ((isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0))) * _1383)) * cbPerFrame._m0[3u].x));
    float _2480 = (_2460 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2480 * (_2461 ? _2469 : (_2469 + (cbSceneParam._m0[72u].w * _2442)));
    SV_Target.y = _2480 * (_2461 ? _2470 : (_2470 + (cbSceneParam._m0[72u].w * _2444)));
    SV_Target.z = _2480 * (_2461 ? _2471 : (_2471 + (cbSceneParam._m0[72u].w * _2446)));
    SV_Target.w = cbInstanceData._m0[_2322].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2322].w;
}


