#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb3_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb3_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb3_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb3_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb3_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Mb3_snp_0_Texture2D_7;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Mb3_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _993;
float _3362;
float _3363;
float _3364;
float _3365;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _194 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _195 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _196 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _202 = inversesqrt(dot(vec3(_194, _195, _196), vec3(_194, _195, _196)));
    float _209 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _210 = _209 * NORMAL.x;
    float _211 = _209 * NORMAL.y;
    float _212 = _209 * NORMAL.z;
    float _216 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _224;
    float _225;
    float _226;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _224 = (-0.0) - _210;
        _225 = (-0.0) - _211;
        _226 = (-0.0) - _212;
    }
    else
    {
        _224 = _210;
        _225 = _211;
        _226 = _212;
    }
    vec4 _243 = texture(sampler2D(M_AMSN_V_Mb3_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _247 = 1.0 - _243.x;
    float _258 = ((cbMtdParam._m0[9u].x * (-1.39999997615814208984375)) * (((1.0 - TEXCOORD_3.x) * 2.0) - _247)) + 1.0;
    float _3374 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _259 = isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0));
    vec4 _271 = texture(sampler2D(M_AMSN_V_Mb3_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _273 = _271.x;
    float _274 = _271.y;
    float _275 = _271.z;
    vec4 _287 = texture(sampler2D(M_AMSN_V_Mb3_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _298 = ((_287.x - _273) * _259) + _273;
    float _299 = ((_287.y - _274) * _259) + _274;
    float _300 = ((_287.z - _275) * _259) + _275;
    float _307 = (((((1.0 - TEXCOORD_3.y) * 2.0) - _247) * (-1.39999997615814208984375)) * cbMtdParam._m0[9u].y) + 1.0;
    float _3385 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _308 = isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0));
    vec4 _321 = texture(sampler2D(M_AMSN_V_Mb3_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _332 = ((_321.x - _298) * _308) + _298;
    float _333 = ((_321.y - _299) * _308) + _299;
    float _334 = ((_321.z - _300) * _308) + _300;
    vec4 _346 = texture(sampler2D(M_AMSN_V_Mb3_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _348 = _346.x;
    float _349 = _346.y;
    float _350 = _346.z;
    vec4 _362 = texture(sampler2D(M_AMSN_V_Mb3_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _373 = ((_362.x - _348) * _259) + _348;
    float _374 = ((_362.y - _349) * _259) + _349;
    float _375 = ((_362.z - _350) * _259) + _350;
    vec4 _388 = texture(sampler2D(M_AMSN_V_Mb3_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w));
    float _401 = ((_388.z - _375) * _308) + _375;
    float _404 = ((((_388.x - _373) * _308) + _373) * 2.0) + (-1.0);
    float _406 = ((((_388.y - _374) * _308) + _374) * 2.0) + (-1.0);
    float _407 = dot(vec2(_404, _406), vec2(_404, _406));
    float _3396 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _412 = sqrt(1.0 - (isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0))));
    float _415 = fma(_412, _224, fma(_406, _216 * TANGENT.x, (_202 * _194) * _404));
    float _418 = fma(_412, _225, fma(_406, _216 * TANGENT.y, (_202 * _195) * _404));
    float _421 = fma(_412, _226, fma(_406, _216 * TANGENT.z, (_202 * _196) * _404));
    float _425 = inversesqrt(dot(vec3(_415, _418, _421), vec3(_415, _418, _421)));
    float _426 = _425 * _415;
    float _427 = _425 * _418;
    float _428 = _425 * _421;
    float _3407 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _429 = isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0));
    float _3418 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _3429 = isnan(0.0) ? _333 : (isnan(_333) ? 0.0 : max(_333, 0.0));
    float _3440 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _448 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _490 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _500 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _490);
    float _501 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _490);
    float _502 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _490);
    float _506 = inversesqrt(dot(vec3(_500, _501, _502), vec3(_500, _501, _502)));
    float _507 = _500 * _506;
    float _508 = _501 * _506;
    float _509 = _502 * _506;
    vec4 _514 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _516 = _514.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _672 = sqrt(((_500 * _500) + (_501 * _501)) + (_502 * _502));
        float _678 = (cbMatDynParam._m0[5u].x * _672) + cbMatDynParam._m0[5u].y;
        float _3451 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
        float _679 = isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0));
        float _683 = (cbMatDynParam._m0[5u].z * _672) + cbMatDynParam._m0[5u].w;
        float _3462 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0))) - _679)) + _679) < ((_516 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _527 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _528 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _547 = fma(_428, cbSceneParam._m0[5u].z, fma(_427, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _426));
    float _550 = fma(_428, cbSceneParam._m0[6u].z, fma(_427, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _426));
    float _553 = fma(_428, cbSceneParam._m0[7u].z, fma(_427, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _426));
    uint _566 = uint(roundEven(NORMAL.w)) * 13u;
    uint _568 = _566 + 9u;
    uint _569 = _568 + uint(cbMatDynParam._m0[0u].w);
    float _575 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0)))) * cbInstanceData._m0[_569].x;
    float _576 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0)))) * cbInstanceData._m0[_569].y;
    float _577 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0)))) * cbInstanceData._m0[_569].z;
    float _3473 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _578 = isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0));
    float _3484 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _579 = isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0));
    float _3495 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _580 = isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0));
    vec4 _589 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _527, cbSceneParam._m0[86u].y * _528));
    float _592 = _589.x * TEXCOORD_3.w;
    float _593 = dot(vec3(_426, _427, _428), vec3(_507, _508, _509));
    float _596 = _593 * 2.0;
    float _600 = (_596 * _426) - _507;
    float _601 = (_596 * _427) - _508;
    float _602 = (_596 * _428) - _509;
    float _606 = abs(dot(vec3(_507, _508, _509), vec3(_426, _427, _428)));
    float _3506 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _608 = sqrt(_429);
    float _621 = exp2((_608 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_608 * 3.0));
    float _653 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _657 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _661 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _992;
    float _994;
    float _995;
    float _996;
    float _997;
    float _998;
    float _999;
    float _1000;
    float _1001;
    float _1002;
    float _1003;
    float _1004;
    float _1005;
    float _1006;
    float _1007;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _717 = fma(_661, cbModelParam._m0[26u].z, fma(_657, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _653));
        float _721 = fma(_661, cbModelParam._m0[27u].z, fma(_657, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _653));
        float _725 = fma(_661, cbModelParam._m0[28u].z, fma(_657, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _653));
        float _750 = _653 + _426;
        float _751 = _657 + _427;
        float _752 = _661 + _428;
        float _762 = fma(_752, cbModelParam._m0[26u].z, fma(_751, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _750)) - _717;
        float _763 = fma(_752, cbModelParam._m0[27u].z, fma(_751, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _750)) - _721;
        float _764 = fma(_752, cbModelParam._m0[28u].z, fma(_751, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _750)) - _725;
        float _768 = inversesqrt(dot(vec3(_762, _763, _764), vec3(_762, _763, _764)));
        float _781 = ((_768 * _762) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_717 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _782 = ((_768 * _763) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_721 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _783 = ((_768 * _764) / cbModelParam._m0[34u].z) + ((((((_725 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _786 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_781, _782, _783), 0.0);
        vec4 _793 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_781, _782, _783), 0.0);
        vec4 _800 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_781, _782, _783), 0.0);
        vec4 _807 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_781, _782, _783), 0.0);
        float _820 = exp2((_786.w + (-0.5)) * 20.0) * 2.0;
        float _821 = _820 * (_786.x + (-0.5));
        float _822 = _820 * (_786.y + (-0.5));
        float _823 = _820 * (_786.z + (-0.5));
        float _830 = exp2((_793.w + (-0.5)) * 20.0) * 2.0;
        float _831 = _830 * (_793.x + (-0.5));
        float _832 = _830 * (_793.y + (-0.5));
        float _833 = _830 * (_793.z + (-0.5));
        float _840 = exp2((_800.w + (-0.5)) * 20.0) * 2.0;
        float _841 = _840 * (_800.x + (-0.5));
        float _842 = _840 * (_800.y + (-0.5));
        float _843 = _840 * (_800.z + (-0.5));
        float _850 = exp2((_807.w + (-0.5)) * 20.0) * 2.0;
        float _851 = _850 * (_807.x + (-0.5));
        float _852 = _850 * (_807.y + (-0.5));
        float _853 = _850 * (_807.z + (-0.5));
        float _854 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
        float _855 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
        float _856 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
        float _857 = _821 * 0.5;
        float _858 = _831 * 0.5;
        float _859 = _841 * 0.5;
        float _860 = dot(vec3(_857, _858, _859), vec3(_857, _858, _859));
        float _865 = (_860 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_860);
        float _874 = (dot(vec3(_426, _427, _428), vec3(_865 * _857, _865 * _858, _865 * _859)) + 1.0) * 0.5;
        float _3532 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _884 = sqrt(((_858 * _858) + (_857 * _857)) + (_859 * _859)) / (_854 + 9.9999997473787516355514526367188e-06);
        float _3543 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _885 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
        float _886 = _885 * 2.0;
        float _890 = (1.0 - _885) / (_885 + 1.0);
        float _3554 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _891 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
        float _900 = ((((1.0 - _891) * (_886 + 2.0)) * exp2(log2(isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0))) * (_886 + 1.0))) + _891) * _854;
        float _901 = _822 * 0.5;
        float _902 = _832 * 0.5;
        float _903 = _842 * 0.5;
        float _904 = dot(vec3(_901, _902, _903), vec3(_901, _902, _903));
        float _909 = (_904 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_904);
        float _917 = (dot(vec3(_426, _427, _428), vec3(_909 * _901, _909 * _902, _909 * _903)) + 1.0) * 0.5;
        float _3565 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _926 = sqrt(((_902 * _902) + (_901 * _901)) + (_903 * _903)) / (_855 + 9.9999997473787516355514526367188e-06);
        float _3576 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _927 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
        float _928 = _927 * 2.0;
        float _932 = (1.0 - _927) / (_927 + 1.0);
        float _3587 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _933 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
        float _942 = ((((1.0 - _933) * (_928 + 2.0)) * exp2(log2(isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0))) * (_928 + 1.0))) + _933) * _855;
        float _943 = _823 * 0.5;
        float _944 = _833 * 0.5;
        float _945 = _843 * 0.5;
        float _946 = dot(vec3(_943, _944, _945), vec3(_943, _944, _945));
        float _951 = (_946 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_946);
        float _959 = (dot(vec3(_426, _427, _428), vec3(_951 * _943, _951 * _944, _951 * _945)) + 1.0) * 0.5;
        float _3598 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _968 = sqrt(((_944 * _944) + (_943 * _943)) + (_945 * _945)) / (_856 + 9.9999997473787516355514526367188e-06);
        float _3609 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _969 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
        float _970 = _969 * 2.0;
        float _974 = (1.0 - _969) / (_969 + 1.0);
        float _3620 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _975 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
        float _984 = ((((1.0 - _975) * (_970 + 2.0)) * exp2(log2(isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0))) * (_970 + 1.0))) + _975) * _856;
        _992 = _823;
        _994 = _822;
        _995 = _821;
        _996 = _833;
        _997 = _832;
        _998 = _831;
        _999 = _843;
        _1000 = _842;
        _1001 = _841;
        _1002 = _856;
        _1003 = _855;
        _1004 = _854;
        _1005 = cbModelParam._m0[36u].z * (isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0)));
        _1006 = cbModelParam._m0[36u].z * (isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0)));
        _1007 = cbModelParam._m0[36u].z * (isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0)));
    }
    else
    {
        _992 = _993;
        _994 = _993;
        _995 = _993;
        _996 = _993;
        _997 = _993;
        _998 = _993;
        _999 = _993;
        _1000 = _993;
        _1001 = _993;
        _1002 = _993;
        _1003 = _993;
        _1004 = _993;
        _1005 = 0.0;
        _1006 = 0.0;
        _1007 = 0.0;
    }
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1036 = fma(_661, cbModelParam._m0[30u].z, fma(_657, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _653));
        float _1040 = fma(_661, cbModelParam._m0[31u].z, fma(_657, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _653));
        float _1044 = fma(_661, cbModelParam._m0[32u].z, fma(_657, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _653));
        float _1067 = _653 + _426;
        float _1068 = _657 + _427;
        float _1069 = _661 + _428;
        float _1079 = fma(_1069, cbModelParam._m0[30u].z, fma(_1068, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1067)) - _1036;
        float _1080 = fma(_1069, cbModelParam._m0[31u].z, fma(_1068, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1067)) - _1040;
        float _1081 = fma(_1069, cbModelParam._m0[32u].z, fma(_1068, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1067)) - _1044;
        float _1085 = inversesqrt(dot(vec3(_1079, _1080, _1081), vec3(_1079, _1080, _1081)));
        float _1098 = ((_1085 * _1079) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1036 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1099 = ((_1085 * _1080) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1040 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1100 = ((_1085 * _1081) / cbModelParam._m0[35u].z) + ((((((_1044 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1102 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1098, _1099, _1100), 0.0);
        vec4 _1109 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1098, _1099, _1100), 0.0);
        vec4 _1116 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1098, _1099, _1100), 0.0);
        vec4 _1123 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1098, _1099, _1100), 0.0);
        float _1135 = exp2((_1102.w + (-0.5)) * 20.0) * 2.0;
        float _1136 = _1135 * (_1102.x + (-0.5));
        float _1137 = _1135 * (_1102.y + (-0.5));
        float _1138 = _1135 * (_1102.z + (-0.5));
        float _1145 = exp2((_1109.w + (-0.5)) * 20.0) * 2.0;
        float _1146 = _1145 * (_1109.x + (-0.5));
        float _1147 = _1145 * (_1109.y + (-0.5));
        float _1148 = _1145 * (_1109.z + (-0.5));
        float _1155 = exp2((_1116.w + (-0.5)) * 20.0) * 2.0;
        float _1156 = _1155 * (_1116.x + (-0.5));
        float _1157 = _1155 * (_1116.y + (-0.5));
        float _1158 = _1155 * (_1116.z + (-0.5));
        float _1165 = exp2((_1123.w + (-0.5)) * 20.0) * 2.0;
        float _1166 = _1165 * (_1123.x + (-0.5));
        float _1167 = _1165 * (_1123.y + (-0.5));
        float _1168 = _1165 * (_1123.z + (-0.5));
        float _1169 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1170 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1171 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1172 = _1136 * 0.5;
        float _1173 = _1146 * 0.5;
        float _1174 = _1156 * 0.5;
        float _1175 = dot(vec3(_1172, _1173, _1174), vec3(_1172, _1173, _1174));
        float _1180 = (_1175 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1175);
        float _1188 = (dot(vec3(_426, _427, _428), vec3(_1180 * _1172, _1180 * _1173, _1180 * _1174)) + 1.0) * 0.5;
        float _3661 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1197 = sqrt(((_1173 * _1173) + (_1172 * _1172)) + (_1174 * _1174)) / (_1169 + 9.9999997473787516355514526367188e-06);
        float _3672 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
        float _1199 = _1198 * 2.0;
        float _1203 = (1.0 - _1198) / (_1198 + 1.0);
        float _3683 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
        float _1213 = ((((1.0 - _1204) * (_1199 + 2.0)) * exp2(log2(isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0))) * (_1199 + 1.0))) + _1204) * _1169;
        float _1214 = _1137 * 0.5;
        float _1215 = _1147 * 0.5;
        float _1216 = _1157 * 0.5;
        float _1217 = dot(vec3(_1214, _1215, _1216), vec3(_1214, _1215, _1216));
        float _1222 = (_1217 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1217);
        float _1230 = (dot(vec3(_426, _427, _428), vec3(_1222 * _1214, _1222 * _1215, _1222 * _1216)) + 1.0) * 0.5;
        float _3694 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1239 = sqrt(((_1215 * _1215) + (_1214 * _1214)) + (_1216 * _1216)) / (_1170 + 9.9999997473787516355514526367188e-06);
        float _3705 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
        float _1241 = _1240 * 2.0;
        float _1245 = (1.0 - _1240) / (_1240 + 1.0);
        float _3716 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
        float _1255 = ((((1.0 - _1246) * (_1241 + 2.0)) * exp2(log2(isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0))) * (_1241 + 1.0))) + _1246) * _1170;
        float _1256 = _1138 * 0.5;
        float _1257 = _1148 * 0.5;
        float _1258 = _1158 * 0.5;
        float _1259 = dot(vec3(_1256, _1257, _1258), vec3(_1256, _1257, _1258));
        float _1264 = (_1259 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1259);
        float _1272 = (dot(vec3(_426, _427, _428), vec3(_1264 * _1256, _1264 * _1257, _1264 * _1258)) + 1.0) * 0.5;
        float _3727 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1281 = sqrt(((_1257 * _1257) + (_1256 * _1256)) + (_1258 * _1258)) / (_1171 + 9.9999997473787516355514526367188e-06);
        float _3738 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
        float _1283 = _1282 * 2.0;
        float _1287 = (1.0 - _1282) / (_1282 + 1.0);
        float _3749 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1288 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
        float _1297 = ((((1.0 - _1288) * (_1283 + 2.0)) * exp2(log2(isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0))) * (_1283 + 1.0))) + _1288) * _1171;
        _1305 = _1138;
        _1306 = _1137;
        _1307 = _1136;
        _1308 = _1148;
        _1309 = _1147;
        _1310 = _1146;
        _1311 = _1158;
        _1312 = _1157;
        _1313 = _1156;
        _1314 = _1171;
        _1315 = _1170;
        _1316 = _1169;
        _1317 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0)));
        _1318 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0)));
        _1319 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0)));
    }
    else
    {
        _1305 = _993;
        _1306 = _993;
        _1307 = _993;
        _1308 = _993;
        _1309 = _993;
        _1310 = _993;
        _1311 = _993;
        _1312 = _993;
        _1313 = _993;
        _1314 = _993;
        _1315 = _993;
        _1316 = _993;
        _1317 = 0.0;
        _1318 = 0.0;
        _1319 = 0.0;
    }
    float _1329 = (cbModelParam._m0[1u].x * (_1317 - _1005)) + _1005;
    float _1330 = (cbModelParam._m0[1u].x * (_1318 - _1006)) + _1006;
    float _1331 = (cbModelParam._m0[1u].x * (_1319 - _1007)) + _1007;
    float _1352 = fma(_1331, cbSceneParam._m0[89u].z, fma(_1330, cbSceneParam._m0[89u].y, _1329 * cbSceneParam._m0[89u].x));
    float _1355 = fma(_1331, cbSceneParam._m0[90u].z, fma(_1330, cbSceneParam._m0[90u].y, _1329 * cbSceneParam._m0[90u].x));
    float _1358 = fma(_1331, cbSceneParam._m0[91u].z, fma(_1330, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1329));
    float _1373 = _600 * 0.5;
    float _1374 = _601 * 0.5;
    float _1375 = _602 * 0.5;
    float _1376 = dot(vec4(_1373, _1374, _1375, 1.0), vec4(_1307, _1310, _1313, _1316));
    float _1379 = dot(vec4(_1373, _1374, _1375, 1.0), vec4(_1306, _1309, _1312, _1315));
    float _1382 = dot(vec4(_1373, _1374, _1375, 1.0), vec4(_1305, _1308, _1311, _1314));
    float _1416;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1389 = dot(vec4(_1373, _1374, _1375, 1.0), vec4(_992, _996, _999, _1002));
        float _1393 = dot(vec4(_1373, _1374, _1375, 1.0), vec4(_994, _997, _1000, _1003));
        float _1397 = dot(vec4(_1373, _1374, _1375, 1.0), vec4(_995, _998, _1001, _1004));
        float _1404 = dot(vec4(cbModelParam._m0[39u]), vec4(_1373, _1374, _1375, 1.0));
        _1416 = dot(vec3(isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0)), isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0)), isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1404) ? 0.0 : (isnan(0.0) ? _1404 : max(0.0, _1404))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1416 = 1.0;
    }
    float _1427;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1418 = dot(vec4(cbModelParam._m0[40u]), vec4(_1373, _1374, _1375, 1.0));
        _1427 = dot(vec3(isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0)), isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0)), isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1418) ? 0.0 : (isnan(0.0) ? _1418 : max(0.0, _1418))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1427 = 1.0;
    }
    float _1431 = (_1427 * cbModelParam._m0[1u].x) + (_1416 * (1.0 - cbModelParam._m0[1u].x));
    float _1441 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _429);
    float _1442 = isnan(_1441) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1441 : min(cbModelParam._m0[25u].z, _1441));
    float _1524;
    float _1526;
    float _1528;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1491 = fma(_661, cbModelParam._m0[13u].z, fma(_657, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _653)) + cbModelParam._m0[13u].w;
        float _1495 = fma(_661, cbModelParam._m0[14u].z, fma(_657, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _653)) + cbModelParam._m0[14u].w;
        float _1499 = fma(_661, cbModelParam._m0[15u].z, fma(_657, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _653)) + cbModelParam._m0[15u].w;
        float _1502 = fma(_602, cbModelParam._m0[13u].z, fma(_601, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _600));
        float _1505 = fma(_602, cbModelParam._m0[14u].z, fma(_601, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _600));
        float _1508 = fma(_602, cbModelParam._m0[15u].z, fma(_601, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _600));
        float _1536;
        if (_1502 > 0.0)
        {
            _1536 = abs((1.0 - _1491) / _1502);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1502 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1491 + 1.0) / _1502);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1536 = frontier_phi_19_17_ladder;
        }
        float _1741;
        if (_1505 > 0.0)
        {
            _1741 = abs((1.0 - _1495) / _1505);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1505 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1495 + 1.0) / _1505);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1741 = frontier_phi_28_24_ladder;
        }
        float _1984;
        if (_1508 > 0.0)
        {
            _1984 = abs((1.0 - _1499) / _1508);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1508 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1499 + 1.0) / _1508);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1984 = frontier_phi_40_35_ladder;
        }
        float _1986 = isnan(_1741) ? _1536 : (isnan(_1536) ? _1741 : min(_1536, _1741));
        float _1987 = isnan(_1984) ? _1986 : (isnan(_1986) ? _1984 : min(_1986, _1984));
        float _1991 = (_1987 * _1502) + _1491;
        float _1992 = (_1987 * _1505) + _1495;
        float _1993 = (_1987 * _1508) + _1499;
        float _1994 = _1987 * 9.9999997473787516355514526367188e-05;
        float _1996 = (-1.0) - _1994;
        float _1998 = _1994 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1993 > _1998) || ((_1993 < _1996) || ((_1992 > _1998) || ((_1992 < _1996) || ((_1991 < _1996) || (_1991 > _1998))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2117 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1993, cbModelParam._m0[9u].z, fma(_1992, cbModelParam._m0[9u].y, _1991 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1993, cbModelParam._m0[10u].z, fma(_1992, cbModelParam._m0[10u].y, _1991 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1993, cbModelParam._m0[11u].z, fma(_1992, cbModelParam._m0[11u].y, _1991 * cbModelParam._m0[11u].x))), _1442);
            frontier_phi_18_40_ladder = _2117.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2117.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2117.x * cbModelParam._m0[1u].y;
        }
        _1524 = frontier_phi_18_40_ladder_2;
        _1526 = frontier_phi_18_40_ladder_1;
        _1528 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1512 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_600, _601, _602), _1442);
        _1524 = _1512.x * cbModelParam._m0[1u].y;
        _1526 = _1512.y * cbModelParam._m0[1u].y;
        _1528 = _1512.z * cbModelParam._m0[1u].y;
    }
    float _1532 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _429);
    float _1533 = isnan(_1532) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1532 : min(cbModelParam._m0[25u].w, _1532));
    float _1626;
    float _1628;
    float _1630;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1590 = fma(_661, cbModelParam._m0[21u].z, fma(_657, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _653)) + cbModelParam._m0[21u].w;
        float _1594 = fma(_661, cbModelParam._m0[22u].z, fma(_657, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _653)) + cbModelParam._m0[22u].w;
        float _1598 = fma(_661, cbModelParam._m0[23u].z, fma(_657, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _653)) + cbModelParam._m0[23u].w;
        float _1601 = fma(_602, cbModelParam._m0[21u].z, fma(_601, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _600));
        float _1604 = fma(_602, cbModelParam._m0[22u].z, fma(_601, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _600));
        float _1607 = fma(_602, cbModelParam._m0[23u].z, fma(_601, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _600));
        float _1746;
        if (_1601 > 0.0)
        {
            _1746 = abs((1.0 - _1590) / _1601);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1601 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1590 + 1.0) / _1601);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1746 = frontier_phi_30_26_ladder;
        }
        float _2011;
        if (_1604 > 0.0)
        {
            _2011 = abs((1.0 - _1594) / _1604);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1604 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1594 + 1.0) / _1604);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2011 = frontier_phi_42_37_ladder;
        }
        float _2216;
        if (_1607 > 0.0)
        {
            _2216 = abs((1.0 - _1598) / _1607);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1607 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1598 + 1.0) / _1607);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2216 = frontier_phi_51_48_ladder;
        }
        float _2218 = isnan(_2011) ? _1746 : (isnan(_1746) ? _2011 : min(_1746, _2011));
        float _2219 = isnan(_2216) ? _2218 : (isnan(_2218) ? _2216 : min(_2218, _2216));
        float _2223 = (_2219 * _1601) + _1590;
        float _2224 = (_2219 * _1604) + _1594;
        float _2225 = (_2219 * _1607) + _1598;
        float _2226 = _2219 * 9.9999997473787516355514526367188e-05;
        float _2227 = (-1.0) - _2226;
        float _2229 = _2226 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2225 > _2229) || ((_2225 < _2227) || ((_2224 > _2229) || ((_2224 < _2227) || ((_2223 < _2227) || (_2223 > _2229))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2423 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2225, cbModelParam._m0[17u].z, fma(_2224, cbModelParam._m0[17u].y, _2223 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2225, cbModelParam._m0[18u].z, fma(_2224, cbModelParam._m0[18u].y, _2223 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2225, cbModelParam._m0[19u].z, fma(_2224, cbModelParam._m0[19u].y, _2223 * cbModelParam._m0[19u].x))), _1533);
            frontier_phi_27_51_ladder = _2423.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2423.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2423.x * cbModelParam._m0[1u].z;
        }
        _1626 = frontier_phi_27_51_ladder_2;
        _1628 = frontier_phi_27_51_ladder_1;
        _1630 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1610 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_600, _601, _602), _1533);
        _1626 = _1610.x * cbModelParam._m0[1u].z;
        _1628 = _1610.y * cbModelParam._m0[1u].z;
        _1630 = _1610.z * cbModelParam._m0[1u].z;
    }
    float _1642 = ((((1.0 - _621) * ((_608 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_621 * _608)) * _592;
    float _1643 = _1642 * ((cbModelParam._m0[1u].w * (_1626 - _1524)) + _1524);
    float _1644 = _1642 * ((cbModelParam._m0[1u].w * (_1628 - _1526)) + _1526);
    float _1645 = _1642 * ((cbModelParam._m0[1u].w * (_1630 - _1528)) + _1528);
    float _1648 = fma(_1645, cbSceneParam._m0[89u].z, fma(_1644, cbSceneParam._m0[89u].y, _1643 * cbSceneParam._m0[89u].x));
    float _1651 = fma(_1645, cbSceneParam._m0[90u].z, fma(_1644, cbSceneParam._m0[90u].y, _1643 * cbSceneParam._m0[90u].x));
    float _1654 = fma(_1645, cbSceneParam._m0[91u].z, fma(_1644, cbSceneParam._m0[91u].y, _1643 * cbSceneParam._m0[91u].x));
    uvec4 _1664 = floatBitsToUint(cbInstanceData._m0[_566 + 5u]);
    uint _1666 = _1664.x * 14u;
    uint _1667 = _1666 + 13u;
    float _1674 = _592 + (-1.0);
    float _1679 = (cbLight._m0[_1667].x * _1674) + 1.0;
    float _1680 = (cbLight._m0[_1667].y * _1674) + 1.0;
    float _1681 = (cbLight._m0[_1667].z * _1674) + 1.0;
    float _1682 = (cbLight._m0[_1667].w * _1674) + 1.0;
    uint _1683 = _1666 + 5u;
    float _1689 = isnan(1.0) ? _1680 : (isnan(_1680) ? 1.0 : min(_1680, 1.0));
    uint _1693 = _1666 + 4u;
    float _1699 = isnan(1.0) ? _1679 : (isnan(_1679) ? 1.0 : min(_1679, 1.0));
    uint _1703 = _1666 | 1u;
    float _1714 = dot(vec3(cbLight._m0[_1666].xyz), vec3(_426, _427, _428));
    float _1717 = dot(vec3(cbLight._m0[_1703].xyz), vec3(_426, _427, _428));
    float _3885 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
    float _3896 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
    float _1722 = (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) * 0.3183098733425140380859375;
    float _1724 = (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0))) * 0.3183098733425140380859375;
    float _1731 = ((cbLight._m0[_1683].x * _1689) * _1724) + ((cbLight._m0[_1693].x * _1699) * _1722);
    float _1732 = ((_1689 * cbLight._m0[_1683].y) * _1724) + ((_1699 * cbLight._m0[_1693].y) * _1722);
    float _1733 = ((_1689 * cbLight._m0[_1683].z) * _1724) + ((_1699 * cbLight._m0[_1693].z) * _1722);
    uvec4 _1738 = floatBitsToUint(cbLight._m0[_1666 + 12u]);
    bool _1740 = _1738.x == 0u;
    float _1751;
    float _1753;
    float _1755;
    if (_1740)
    {
        _1751 = _1731;
        _1753 = _1732;
        _1755 = _1733;
    }
    else
    {
        uint _1759 = _1666 + 6u;
        float _1775 = (dot(vec3(cbLight._m0[_1666 + 2u].xyz), vec3(_426, _427, _428)) * 0.5) + 0.5;
        float _1776 = _1775 * _1775;
        float _3907 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
        float _1777 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _1778 = isnan(1.0) ? _1681 : (isnan(_1681) ? 1.0 : min(_1681, 1.0));
        _1751 = (((cbLight._m0[_1759].x * 0.3183098733425140380859375) * _1777) * _1778) + _1731;
        _1753 = (((cbLight._m0[_1759].y * 0.3183098733425140380859375) * _1777) * _1778) + _1732;
        _1755 = (((cbLight._m0[_1759].z * 0.3183098733425140380859375) * _1777) * _1778) + _1733;
    }
    bool _1758 = _1738.y == 0u;
    float _1796;
    float _1798;
    float _1800;
    if (_1758)
    {
        _1796 = _1751;
        _1798 = _1753;
        _1800 = _1755;
    }
    else
    {
        uint _1955 = _1666 + 7u;
        float _1971 = (dot(vec3(cbLight._m0[_1666 + 3u].xyz), vec3(_426, _427, _428)) * 0.5) + 0.5;
        float _1972 = _1971 * _1971;
        float _3923 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
        float _1973 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _1974 = isnan(1.0) ? _1682 : (isnan(_1682) ? 1.0 : min(_1682, 1.0));
        _1796 = (((cbLight._m0[_1955].x * 0.3183098733425140380859375) * _1973) * _1974) + _1751;
        _1798 = (((cbLight._m0[_1955].y * 0.3183098733425140380859375) * _1973) * _1974) + _1753;
        _1800 = (((cbLight._m0[_1955].z * 0.3183098733425140380859375) * _1973) * _1974) + _1755;
    }
    uint _1803 = _1666 + 8u;
    float _1816 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1666].w)) * _429) * 0.949999988079071044921875);
    float _1817 = _1816 * _1816;
    float _1818 = cbLight._m0[_1666].x + _507;
    float _1819 = cbLight._m0[_1666].y + _508;
    float _1820 = cbLight._m0[_1666].z + _509;
    float _1824 = inversesqrt(dot(vec3(_1818, _1819, _1820), vec3(_1818, _1819, _1820)));
    float _1825 = _1824 * _1818;
    float _1826 = _1824 * _1819;
    float _1827 = _1824 * _1820;
    float _1828 = dot(vec3(_426, _427, _428), vec3(cbLight._m0[_1666].xyz));
    float _3939 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
    float _1831 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
    float _3950 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _1832 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
    float _1833 = dot(vec3(_426, _427, _428), vec3(_1825, _1826, _1827));
    float _3961 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
    float _1836 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
    float _1837 = dot(vec3(cbLight._m0[_1666].xyz), vec3(_1825, _1826, _1827));
    float _3972 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
    float _1841 = _1817 * _1817;
    float _1845 = ((_1836 * _1836) * (_1841 + (-1.0))) + 1.0;
    float _1856 = (exp2(log2(1.0 - (isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1857 = 1.0 - _1817;
    float _1868 = (0.5 / (((_1832 * ((_1831 * _1857) + _1817)) + 9.9999999392252902907785028219223e-09) + (((_1832 * _1857) + _1817) * _1831))) * _1831;
    float _3983 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
    float _1870 = (isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0))) * (_1841 / ((_1845 * _1845) * 3.141590118408203125));
    uint _1881 = _1666 + 9u;
    float _1892 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1703].w)) * _429) * 0.949999988079071044921875);
    float _1893 = _1892 * _1892;
    float _1894 = cbLight._m0[_1703].x + _507;
    float _1895 = cbLight._m0[_1703].y + _508;
    float _1896 = cbLight._m0[_1703].z + _509;
    float _1900 = inversesqrt(dot(vec3(_1894, _1895, _1896), vec3(_1894, _1895, _1896)));
    float _1901 = _1900 * _1894;
    float _1902 = _1900 * _1895;
    float _1903 = _1900 * _1896;
    float _1904 = dot(vec3(_426, _427, _428), vec3(cbLight._m0[_1703].xyz));
    float _3994 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
    float _1907 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
    float _1908 = dot(vec3(_426, _427, _428), vec3(_1901, _1902, _1903));
    float _4005 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
    float _1911 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
    float _1912 = dot(vec3(cbLight._m0[_1703].xyz), vec3(_1901, _1902, _1903));
    float _4016 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
    float _1916 = _1893 * _1893;
    float _1920 = ((_1911 * _1911) * (_1916 + (-1.0))) + 1.0;
    float _1929 = (exp2(log2(1.0 - (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1930 = 1.0 - _1893;
    float _1940 = (0.5 / (((_1832 * ((_1907 * _1930) + _1893)) + 9.9999999392252902907785028219223e-09) + (((_1832 * _1930) + _1893) * _1907))) * _1907;
    float _4027 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
    float _1942 = (isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0))) * (_1916 / ((_1920 * _1920) * 3.141590118408203125));
    float _1952 = (((_1929 * cbLight._m0[_1881].x) * _1942) * _1689) + (((_1856 * cbLight._m0[_1803].x) * _1870) * _1699);
    float _1953 = (((_1929 * cbLight._m0[_1881].y) * _1942) * _1689) + (((_1856 * cbLight._m0[_1803].y) * _1870) * _1699);
    float _1954 = (((_1929 * cbLight._m0[_1881].z) * _1942) * _1689) + (((_1856 * cbLight._m0[_1803].z) * _1870) * _1699);
    float _2016;
    float _2018;
    float _2020;
    if (_1740)
    {
        _2016 = _1952;
        _2018 = _1953;
        _2020 = _1954;
    }
    else
    {
        uint _2022 = _1666 + 2u;
        uint _2026 = _1666 + 10u;
        float _2040 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2022].w)) * _429) * 0.949999988079071044921875);
        float _2041 = _2040 * _2040;
        float _2042 = cbLight._m0[_2022].x + _507;
        float _2043 = cbLight._m0[_2022].y + _508;
        float _2044 = cbLight._m0[_2022].z + _509;
        float _2048 = inversesqrt(dot(vec3(_2042, _2043, _2044), vec3(_2042, _2043, _2044)));
        float _2049 = _2048 * _2042;
        float _2050 = _2048 * _2043;
        float _2051 = _2048 * _2044;
        float _2052 = dot(vec3(_426, _427, _428), vec3(cbLight._m0[_2022].xyz));
        float _4038 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
        float _2055 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _2056 = dot(vec3(_426, _427, _428), vec3(_2049, _2050, _2051));
        float _4049 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
        float _2059 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _2060 = dot(vec3(cbLight._m0[_2022].xyz), vec3(_2049, _2050, _2051));
        float _4060 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
        float _2064 = _2041 * _2041;
        float _2068 = ((_2059 * _2059) * (_2064 + (-1.0))) + 1.0;
        float _2077 = (exp2(log2(1.0 - (isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2078 = 1.0 - _2041;
        float _2088 = (0.5 / (((_1832 * ((_2055 * _2078) + _2041)) + 9.9999999392252902907785028219223e-09) + (((_1832 * _2078) + _2041) * _2055))) * _2055;
        float _4071 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
        float _2090 = (isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0))) * (_2064 / ((_2068 * _2068) * 3.141590118408203125));
        float _2091 = isnan(1.0) ? _1681 : (isnan(_1681) ? 1.0 : min(_1681, 1.0));
        _2016 = (((_2077 * cbLight._m0[_2026].x) * _2090) * _2091) + _1952;
        _2018 = (((_2077 * cbLight._m0[_2026].y) * _2090) * _2091) + _1953;
        _2020 = (((_2077 * cbLight._m0[_2026].z) * _2090) * _2091) + _1954;
    }
    float _2126;
    float _2128;
    float _2130;
    if (_1758)
    {
        _2126 = _2016;
        _2128 = _2018;
        _2130 = _2020;
    }
    else
    {
        uint _2137 = _1666 + 3u;
        uint _2141 = _1666 + 11u;
        float _2155 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2137].w)) * _429) * 0.949999988079071044921875);
        float _2156 = _2155 * _2155;
        float _2157 = cbLight._m0[_2137].x + _507;
        float _2158 = cbLight._m0[_2137].y + _508;
        float _2159 = cbLight._m0[_2137].z + _509;
        float _2163 = inversesqrt(dot(vec3(_2157, _2158, _2159), vec3(_2157, _2158, _2159)));
        float _2164 = _2163 * _2157;
        float _2165 = _2163 * _2158;
        float _2166 = _2163 * _2159;
        float _2167 = dot(vec3(_426, _427, _428), vec3(cbLight._m0[_2137].xyz));
        float _4087 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
        float _2170 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _2171 = dot(vec3(_426, _427, _428), vec3(_2164, _2165, _2166));
        float _4098 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
        float _2174 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _2175 = dot(vec3(cbLight._m0[_2137].xyz), vec3(_2164, _2165, _2166));
        float _4109 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
        float _2179 = _2156 * _2156;
        float _2183 = ((_2174 * _2174) * (_2179 + (-1.0))) + 1.0;
        float _2192 = (exp2(log2(1.0 - (isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2193 = 1.0 - _2156;
        float _2203 = (0.5 / (((_1832 * ((_2170 * _2193) + _2156)) + 9.9999999392252902907785028219223e-09) + (((_1832 * _2193) + _2156) * _2170))) * _2170;
        float _4120 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
        float _2205 = (isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * (_2179 / ((_2183 * _2183) * 3.141590118408203125));
        float _2206 = isnan(1.0) ? _1682 : (isnan(_1682) ? 1.0 : min(_1682, 1.0));
        _2126 = (((_2192 * cbLight._m0[_2141].x) * _2205) * _2206) + _2016;
        _2128 = (((_2192 * cbLight._m0[_2141].y) * _2205) * _2206) + _2018;
        _2130 = (((_2192 * cbLight._m0[_2141].z) * _2205) * _2206) + _2020;
    }
    float _2340;
    float _2342;
    float _2344;
    float _2346;
    float _2348;
    float _2350;
    if (_1664.y == 0u)
    {
        float _2281 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2282 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2281;
        float _2283 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2281;
        float _2284 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2281;
        uvec4 _2296 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2297 = _2296.x;
        uint _2308 = uint((float(_2296.y) * floor(float(uint(cbSceneParam._m0[85u].y * _528) / _2297))) + floor(float(uint(cbSceneParam._m0[85u].x * _527) / _2297)));
        float _2318 = (log2(_2284 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2319 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
        uint _2322 = uint(isnan(14.0) ? _2319 : (isnan(_2319) ? 14.0 : min(_2319, 14.0)));
        uvec4 _2327 = texelFetch(g_lightClusterGridBuffer, int(((_2322 << 2u) + (_2308 << 6u)) >> 2u));
        uint _2328 = _2327.x;
        uint _2329 = _2296.z;
        float _2428;
        float _2430;
        float _2432;
        float _2434;
        float _2436;
        float _2438;
        if (((((1u << ((_2329 >> 4u) & 15u)) + 4294967295u) & _2328) == 0u) || ((_2329 & 240u) == 0u))
        {
            _2428 = 0.0;
            _2430 = 0.0;
            _2432 = 0.0;
            _2434 = 0.0;
            _2436 = 0.0;
            _2438 = 0.0;
        }
        else
        {
            float _2429;
            float _2431;
            float _2433;
            float _2435;
            float _2437;
            float _2439;
            float _2580 = 0.0;
            float _2581 = 0.0;
            float _2582 = 0.0;
            float _2583 = 0.0;
            float _2584 = 0.0;
            float _2585 = 0.0;
            uint _2586 = 0u;
            uint _2595;
            bool _2596;
            for (;;)
            {
                _2595 = texelFetch(g_lightClassification, int((((_2322 << 5u) + (_2308 << 9u)) + (_2586 << 2u)) >> 2u)).x;
                _2596 = _2595 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2596)
                {
                    frontier_phi_68_pred = _2582;
                    frontier_phi_68_pred_1 = _2585;
                    frontier_phi_68_pred_2 = _2584;
                    frontier_phi_68_pred_3 = _2583;
                    frontier_phi_68_pred_4 = _2581;
                    frontier_phi_68_pred_5 = _2580;
                }
                else
                {
                    float _2725;
                    float _2726;
                    float _2727;
                    float _2728;
                    float _2729;
                    float _2730;
                    uint _2731;
                    _2725 = _2580;
                    _2726 = _2581;
                    _2727 = _2582;
                    _2728 = _2583;
                    _2729 = _2584;
                    _2730 = _2585;
                    _2731 = _2595;
                    float _2652;
                    float _2653;
                    float _2654;
                    float _2655;
                    float _2656;
                    float _2657;
                    for (;;)
                    {
                        uint _2735 = uint(findLSB(_2731)) + (_2586 << 5u);
                        uint _2732 = (_2731 + 4294967295u) & _2731;
                        uint _2737 = _2735 * 48u;
                        vec4 _2751 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2737)).x, texelFetch(g_PointLightRenderingBuffer, int(_2737 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2737 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2737 + 3u)).x));
                        uint _2757 = (_2735 * 48u) + 4u;
                        vec4 _2770 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2757)).x, texelFetch(g_PointLightRenderingBuffer, int(_2757 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2757 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2757 + 3u)).x));
                        uint _2776 = (_2735 * 48u) + 8u;
                        vec3 _2787 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2776)).x, texelFetch(g_PointLightRenderingBuffer, int(_2776 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2776 + 2u)).x));
                        float _2791 = _2751.x - _2282;
                        float _2792 = _2751.y - _2283;
                        float _2793 = _2751.z - _2284;
                        float _2794 = dot(vec3(_2791, _2792, _2793), vec3(_2791, _2792, _2793));
                        float _2797 = inversesqrt(_2794);
                        float _2798 = _2797 * _2791;
                        float _2799 = _2797 * _2792;
                        float _2800 = _2797 * _2793;
                        float _2801 = dot(vec3(_547, _550, _553), vec3(_2798, _2799, _2800));
                        float _2806 = 1.0 - (_2794 * _2751.w);
                        float _4146 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0));
                        float _2807 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
                        float _2808 = sqrt(_2794) * _2770.w;
                        float _2811 = 1.39999997615814208984375 / (_2808 + 1.39999997615814208984375);
                        float _2812 = _2811 * _2811;
                        float _2815 = ((1.0 - _2812) * _2801) + _2812;
                        float _2818 = _2808 * _2808;
                        float _2822 = ((isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0))) * _2807) / ((_2818 * 0.699999988079071044921875) + 1.0);
                        float _2826 = (-0.0) - _2282;
                        float _2827 = (-0.0) - _2283;
                        float _2828 = (-0.0) - _2284;
                        float _2832 = inversesqrt(dot(vec3(_2826, _2827, _2828), vec3(_2826, _2827, _2828)));
                        float _2833 = _2832 * _2826;
                        float _2834 = _2832 * _2827;
                        float _2835 = _2832 * _2828;
                        float _2843 = exp2(log2(1.0 / ((_2818 * 3.5) + 5.0)) * 0.25);
                        float _2844 = 1.0 - _608;
                        float _2851 = sqrt(1.0 - ((1.0 - (_2844 * _2844)) * (1.0 - (_2843 * _2843))));
                        float _2852 = _2851 * _2851;
                        float _2853 = _2852 * _2852;
                        float _2854 = _2833 + _2798;
                        float _2855 = _2834 + _2799;
                        float _2856 = _2835 + _2800;
                        float _2860 = inversesqrt(dot(vec3(_2854, _2855, _2856), vec3(_2854, _2855, _2856)));
                        float _2864 = dot(vec3(_547, _550, _553), vec3(_2833, _2834, _2835));
                        float _4162 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0));
                        float _2867 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
                        float _2868 = dot(vec3(_547, _550, _553), vec3(_2860 * _2854, _2860 * _2855, _2860 * _2856));
                        float _4173 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0));
                        float _2871 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
                        float _2875 = ((_2871 * _2871) * (_2853 + (-1.0))) + 1.0;
                        float _2876 = _2811 * _2852;
                        float _2877 = _2876 * _2876;
                        float _2880 = ((1.0 - _2877) * _2801) + _2877;
                        float _4184 = isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : max(_2880, 0.0));
                        float _2881 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
                        float _2882 = 1.0 - _2852;
                        float _2892 = (0.5 / (((_2881 * ((_2867 * _2882) + _2852)) + 9.9999999392252902907785028219223e-09) + (((_2881 * _2882) + _2852) * _2867))) * _2881;
                        float _4195 = isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : max(_2892, 0.0));
                        float _2903 = (((_2853 * 3.1415927410125732421875) * (isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0)))) / ((_2875 * _2875) * ((_2818 * 2.1991131305694580078125) + 3.141590118408203125))) * _2807;
                        _2655 = (_2822 * _2770.x) + _2728;
                        _2656 = (_2822 * _2770.y) + _2729;
                        _2657 = (_2822 * _2770.z) + _2730;
                        _2652 = (_2903 * _2787.x) + _2725;
                        _2653 = (_2903 * _2787.y) + _2726;
                        _2654 = (_2903 * _2787.z) + _2727;
                        if (_2732 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2725 = _2652;
                            _2726 = _2653;
                            _2727 = _2654;
                            _2728 = _2655;
                            _2729 = _2656;
                            _2730 = _2657;
                            _2731 = _2732;
                        }
                    }
                    frontier_phi_68_pred = _2654;
                    frontier_phi_68_pred_1 = _2657;
                    frontier_phi_68_pred_2 = _2656;
                    frontier_phi_68_pred_3 = _2655;
                    frontier_phi_68_pred_4 = _2653;
                    frontier_phi_68_pred_5 = _2652;
                }
                _2433 = frontier_phi_68_pred;
                _2439 = frontier_phi_68_pred_1;
                _2437 = frontier_phi_68_pred_2;
                _2435 = frontier_phi_68_pred_3;
                _2431 = frontier_phi_68_pred_4;
                _2429 = frontier_phi_68_pred_5;
                uint _2587 = _2586 + 1u;
                if (_2587 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2580 = _2429;
                    _2581 = _2431;
                    _2582 = _2433;
                    _2583 = _2435;
                    _2584 = _2437;
                    _2585 = _2439;
                    _2586 = _2587;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2428 = _2429;
            _2430 = _2431;
            _2432 = _2433;
            _2434 = _2435;
            _2436 = _2437;
            _2438 = _2439;
        }
        uvec4 _2442 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2443 = _2442.z;
        uint _2445 = (_2443 >> 8u) & 15u;
        float _2548;
        float _2550;
        float _2552;
        float _2554;
        float _2556;
        float _2558;
        if (((4294967295u << _2445) & _2328) == 0u)
        {
            _2548 = _2428;
            _2550 = _2430;
            _2552 = _2432;
            _2554 = _2434;
            _2556 = _2436;
            _2558 = _2438;
        }
        else
        {
            float _2573 = inversesqrt(dot(vec3(_2282, _2283, _2284), vec3(_2282, _2283, _2284)));
            float _2574 = _2573 * _2282;
            float _2575 = _2573 * _2283;
            float _2576 = _2573 * _2284;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2445 < ((_2443 >> 12u) & 15u))
            {
                float _2549;
                float _2551;
                float _2553;
                float _2555;
                float _2557;
                float _2559;
                float _2708 = _2428;
                float _2709 = _2430;
                float _2710 = _2432;
                float _2711 = _2434;
                float _2712 = _2436;
                float _2713 = _2438;
                uint _2714 = _2445;
                uint _2723;
                bool _2724;
                for (;;)
                {
                    _2723 = texelFetch(g_lightClassification, int((((_2322 << 5u) + (_2308 << 9u)) + (_2714 << 2u)) >> 2u)).x;
                    _2724 = _2723 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2724)
                    {
                        frontier_phi_79_pred = _2713;
                        frontier_phi_79_pred_1 = _2712;
                        frontier_phi_79_pred_2 = _2711;
                        frontier_phi_79_pred_3 = _2710;
                        frontier_phi_79_pred_4 = _2709;
                        frontier_phi_79_pred_5 = _2708;
                    }
                    else
                    {
                        float _2917;
                        float _2918;
                        float _2919;
                        float _2920;
                        float _2921;
                        float _2922;
                        float _3213;
                        float _3214;
                        float _3215;
                        float _3216;
                        float _3217;
                        float _3218;
                        float _2930 = _2708;
                        float _2931 = _2709;
                        float _2932 = _2710;
                        float _2933 = _2711;
                        float _2934 = _2712;
                        float _2935 = _2713;
                        uint _2936 = _2723;
                        uint _2937;
                        vec4 _2962;
                        float _2963;
                        vec4 _2978;
                        vec3 _2990;
                        vec4 _3006;
                        vec4 _3022;
                        float _3069;
                        bool _3070;
                        for (;;)
                        {
                            uint _2947 = ((_2714 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2936));
                            _2937 = (_2936 + 4294967295u) & _2936;
                            uint _2949 = _2947 * 40u;
                            _2962 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2949)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 3u)).x));
                            _2963 = _2962.w;
                            uint _2965 = (_2947 * 40u) + 4u;
                            _2978 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2965)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 3u)).x));
                            uint _2980 = (_2947 * 40u) + 8u;
                            _2990 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2980)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2980 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2980 + 2u)).x));
                            uint _2993 = (_2947 * 40u) + 16u;
                            _3006 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2993)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 3u)).x));
                            uint _3009 = (_2947 * 40u) + 20u;
                            _3022 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3009)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 3u)).x));
                            uint _3025 = (_2947 * 40u) + 24u;
                            vec4 _3038 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3025)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3025 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3025 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3025 + 3u)).x));
                            uint _3044 = (_2947 * 40u) + 28u;
                            vec4 _3057 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3044)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 3u)).x));
                            _3069 = fma(_2284, _3057.z, fma(_2283, _3057.y, _3057.x * _2282)) + _3057.w;
                            _3070 = !((fma(_2284, _3038.z, fma(_2283, _3038.y, _3038.x * _2282)) + _3038.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3070)
                            {
                                float _3097 = _2962.x - _2282;
                                float _3098 = _2962.y - _2283;
                                float _3099 = _2962.z - _2284;
                                float _3100 = dot(vec3(_3097, _3098, _3099), vec3(_3097, _3098, _3099));
                                float _3103 = inversesqrt(_3100);
                                float _3104 = _3103 * _3097;
                                float _3105 = _3103 * _3098;
                                float _3106 = _3103 * _3099;
                                float _3110 = 1.0 - (_3100 / (_2963 * _2963));
                                float _4206 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0));
                                float _3111 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
                                float _3115 = sqrt(_3100) * _2978.w;
                                float _3117 = 1.39999997615814208984375 / (_3115 + 1.39999997615814208984375);
                                float _3118 = _3117 * _3117;
                                float _3121 = ((1.0 - _3118) * dot(vec3(_3104, _3105, _3106), vec3(_547, _550, _553))) + _3118;
                                float _3124 = _3115 * _3115;
                                float _3128 = (fma(_2284, _3006.z, fma(_2283, _3006.y, _3006.x * _2282)) + _3006.w) / _3069;
                                float _3129 = (fma(_2284, _3022.z, fma(_2283, _3022.y, _3022.x * _2282)) + _3022.w) / _3069;
                                float _3133 = 1.0 - dot(vec2(_3128, _3129), vec2(_3128, _3129));
                                float _4222 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0));
                                float _3134 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
                                float _3135 = _3134 * (((isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0))) * _3111) / ((_3124 * 0.699999988079071044921875) + 1.0));
                                float _3147 = exp2(log2(1.0 / ((_3124 * 3.5) + 5.0)) * 0.25);
                                float _3148 = 1.0 - _608;
                                float _3155 = sqrt(1.0 - ((1.0 - (_3148 * _3148)) * (1.0 - (_3147 * _3147))));
                                float _3156 = _3155 * _3155;
                                float _3157 = _3156 * _3156;
                                float _3158 = _3104 - _2574;
                                float _3159 = _3105 - _2575;
                                float _3160 = _3106 - _2576;
                                float _3164 = inversesqrt(dot(vec3(_3158, _3159, _3160), vec3(_3158, _3159, _3160)));
                                float _3168 = dot(vec3(_547, _550, _553), vec3((-0.0) - _2574, (-0.0) - _2575, (-0.0) - _2576));
                                float _4233 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0));
                                float _3171 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
                                float _3172 = dot(vec3(_547, _550, _553), vec3(_3164 * _3158, _3164 * _3159, _3164 * _3160));
                                float _4244 = isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0));
                                float _3175 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
                                float _3179 = ((_3175 * _3175) * (_3157 + (-1.0))) + 1.0;
                                float _3180 = _3117 * _3156;
                                float _3181 = _3180 * _3180;
                                float _3187 = ((1.0 - _3181) * dot(vec3(_547, _550, _553), vec3(_3104, _3105, _3106))) + _3181;
                                float _4255 = isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0));
                                float _3188 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
                                float _3189 = 1.0 - _3156;
                                float _3199 = (0.5 / (((_3188 * ((_3171 * _3189) + _3156)) + 9.9999999392252902907785028219223e-09) + (((_3188 * _3189) + _3156) * _3171))) * _3188;
                                float _4266 = isnan(0.0) ? _3199 : (isnan(_3199) ? 0.0 : max(_3199, 0.0));
                                float _3209 = (_3134 * _3111) * (((_3157 * 3.1415927410125732421875) * (isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0)))) / ((_3179 * _3179) * ((_3124 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3135 * _2978.z;
                                frontier_phi_85_pred_1 = _3135 * _2978.y;
                                frontier_phi_85_pred_2 = _3135 * _2978.x;
                                frontier_phi_85_pred_3 = _3209 * _2990.z;
                                frontier_phi_85_pred_4 = _3209 * _2990.y;
                                frontier_phi_85_pred_5 = _3209 * _2990.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3218 = frontier_phi_85_pred;
                            _3217 = frontier_phi_85_pred_1;
                            _3216 = frontier_phi_85_pred_2;
                            _3215 = frontier_phi_85_pred_3;
                            _3214 = frontier_phi_85_pred_4;
                            _3213 = frontier_phi_85_pred_5;
                            _2920 = _3216 + _2933;
                            _2921 = _3217 + _2934;
                            _2922 = _3218 + _2935;
                            _2917 = _3213 + _2930;
                            _2918 = _3214 + _2931;
                            _2919 = _3215 + _2932;
                            if (_2937 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2930 = _2917;
                                _2931 = _2918;
                                _2932 = _2919;
                                _2933 = _2920;
                                _2934 = _2921;
                                _2935 = _2922;
                                _2936 = _2937;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2922;
                        frontier_phi_79_pred_1 = _2921;
                        frontier_phi_79_pred_2 = _2920;
                        frontier_phi_79_pred_3 = _2919;
                        frontier_phi_79_pred_4 = _2918;
                        frontier_phi_79_pred_5 = _2917;
                    }
                    _2559 = frontier_phi_79_pred;
                    _2557 = frontier_phi_79_pred_1;
                    _2555 = frontier_phi_79_pred_2;
                    _2553 = frontier_phi_79_pred_3;
                    _2551 = frontier_phi_79_pred_4;
                    _2549 = frontier_phi_79_pred_5;
                    uint _2715 = _2714 + 1u;
                    if (_2715 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2708 = _2549;
                        _2709 = _2551;
                        _2710 = _2553;
                        _2711 = _2555;
                        _2712 = _2557;
                        _2713 = _2559;
                        _2714 = _2715;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2555;
                frontier_phi_60_61_ladder_1 = _2559;
                frontier_phi_60_61_ladder_2 = _2557;
                frontier_phi_60_61_ladder_3 = _2553;
                frontier_phi_60_61_ladder_4 = _2551;
                frontier_phi_60_61_ladder_5 = _2549;
            }
            else
            {
                frontier_phi_60_61_ladder = _2434;
                frontier_phi_60_61_ladder_1 = _2438;
                frontier_phi_60_61_ladder_2 = _2436;
                frontier_phi_60_61_ladder_3 = _2432;
                frontier_phi_60_61_ladder_4 = _2430;
                frontier_phi_60_61_ladder_5 = _2428;
            }
            _2548 = frontier_phi_60_61_ladder_5;
            _2550 = frontier_phi_60_61_ladder_4;
            _2552 = frontier_phi_60_61_ladder_3;
            _2554 = frontier_phi_60_61_ladder;
            _2556 = frontier_phi_60_61_ladder_2;
            _2558 = frontier_phi_60_61_ladder_1;
        }
        float _2563 = isnan(1.0) ? _592 : (isnan(_592) ? 1.0 : min(_592, 1.0));
        _2340 = (_2563 * _2554) + _1796;
        _2342 = (_2563 * _2556) + _1798;
        _2344 = (_2563 * _2558) + _1800;
        _2346 = ((_2548 * 0.039999999105930328369140625) * _2563) + _2126;
        _2348 = ((_2550 * 0.039999999105930328369140625) * _2563) + _2128;
        _2350 = ((_2552 * 0.039999999105930328369140625) * _2563) + _2130;
    }
    else
    {
        _2340 = _1796;
        _2342 = _1798;
        _2344 = _1800;
        _2346 = _2126;
        _2348 = _2128;
        _2350 = _2130;
    }
    float _4282 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _4293 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _4304 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _2367 = ((isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0))) * (_2340 + ((isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0))) * _592))) + ((_2346 + ((isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0))) * _1431)) * cbPerFrame._m0[3u].x);
    float _2368 = ((isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) * (_2342 + ((isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0))) * _592))) + ((_2348 + ((isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0))) * _1431)) * cbPerFrame._m0[3u].x);
    float _2369 = ((isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * (_2344 + ((isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0))) * _592))) + ((_2350 + ((isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0))) * _1431)) * cbPerFrame._m0[3u].x);
    uint _2370 = _566 + 6u;
    float _2378 = _527 / cbSceneParam._m0[86u].x;
    float _2379 = _528 / cbSceneParam._m0[86u].y;
    vec4 _2393 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2378, _2379, (log2((isnan(cbSceneParam._m0[77u].w) ? _448 : (isnan(_448) ? cbSceneParam._m0[77u].w : min(_448, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2395 = _2393.x;
    float _2396 = _2393.y;
    float _2397 = _2393.z;
    float _2398 = _2393.w;
    float _2490;
    float _2492;
    float _2494;
    float _2496;
    if (_448 > cbSceneParam._m0[78u].w)
    {
        float _2453 = isnan(_448) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _448 : min(cbSceneParam._m0[80u].w, _448));
        float _2454 = _2453 / _448;
        float _2465 = _2454 * _500;
        float _2466 = _501 * _2454;
        float _2467 = (-0.0) - _2466;
        float _2468 = _2454 * _502;
        float _2470 = (cbSceneParam._m0[77u].w * _2467) / _2453;
        float _2471 = _2470 + cbSceneParam._m0[79u].w;
        float _2472 = cbSceneParam._m0[79u].w - _2466;
        float _2478 = sqrt(((_2465 * _2465) + (_2466 * _2466)) + (_2468 * _2468));
        float _2481 = (1.0 - (cbSceneParam._m0[77u].w / _2453)) * _2478;
        float _2486 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2488 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2665;
        if (abs((_2467 - _2470) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2665 = ((((_2471 > 0.0) ? exp2(_2486 * _2471) : (2.0 - exp2(_2488 * _2471))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2481;
        }
        else
        {
            float _2609 = 1.0 / cbSceneParam._m0[80u].x;
            float _2610 = isnan(_2472) ? _2471 : (isnan(_2471) ? _2472 : max(_2471, _2472));
            float _2611 = isnan(_2472) ? _2471 : (isnan(_2471) ? _2472 : min(_2471, _2472));
            float _2620 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : min(_2610, 0.0));
            float _2621 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : min(_2611, 0.0));
            _2665 = ((abs(_2478 / _2467) * cbSceneParam._m0[80u].y) * ((((_2620 - _2621) * 2.0) - ((exp2(_2486 * (isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0)))) - exp2(_2486 * (isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0))))) * _2609)) - ((exp2(_2488 * _2620) - exp2(_2488 * _2621)) * _2609))) + (_2481 * cbSceneParam._m0[80u].z);
        }
        vec4 _2667 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2378, _2379, 1.0), 0.0);
        float _2676 = exp2((_2665 * (-1.44269502162933349609375)) * (1.0 - _2667.w));
        float _2677 = log2(_2676);
        float _2693 = log2(_2398);
        _2490 = (exp2(_2693 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2677 * cbSceneParam._m0[78u].x)) * _2667.x) / cbSceneParam._m0[78u].x)) + _2395;
        _2492 = (exp2(_2693 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2677 * cbSceneParam._m0[78u].y)) * _2667.y) / cbSceneParam._m0[78u].y)) + _2396;
        _2494 = (exp2(_2693 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2677 * cbSceneParam._m0[78u].z)) * _2667.z) / cbSceneParam._m0[78u].z)) + _2397;
        _2496 = _2676 * _2398;
    }
    else
    {
        _2490 = _2395;
        _2492 = _2396;
        _2494 = _2397;
        _2496 = _2398;
    }
    bool _2703;
    vec4 _2506;
    vec4 _2528;
    float _2530;
    float _2534;
    float _2535;
    float _2536;
    float _2537;
    bool _2547;
    for (;;)
    {
        _2506 = cbMatDynParam._m0[0u];
        float _2508 = roundEven(_2506.y);
        bool _2509 = _2508 == 3.0;
        float _2510 = log2(_2496);
        float _2517 = exp2(_2510 * cbSceneParam._m0[78u].x) * _2367;
        float _2518 = exp2(_2510 * cbSceneParam._m0[78u].y) * _2368;
        float _2519 = exp2(_2510 * cbSceneParam._m0[78u].z) * _2369;
        float _2526 = _516 + (-0.5);
        _2528 = cbMtdParam._m0[1u];
        _2530 = _2528.y * _2526;
        float _2533 = (_2508 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2534 = _2533 * (_2509 ? _2517 : (_2517 + (cbSceneParam._m0[72u].w * _2490)));
        _2535 = _2533 * (_2509 ? _2518 : (_2518 + (cbSceneParam._m0[72u].w * _2492)));
        _2536 = _2533 * (_2509 ? _2519 : (_2519 + (cbSceneParam._m0[72u].w * _2494)));
        _2537 = _2526 * 0.999000012874603271484375;
        _2547 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2547)
        {
            if ((cbInstanceData._m0[_566 + 7u].x + _2537) < 0.5)
            {
                _2703 = true;
                break;
            }
        }
        uint _2644 = _568 + uint(_2506.w);
        if ((cbInstanceData._m0[_2644].w < 1.0) && ((cbInstanceData._m0[_2644].w + _2537) < 0.5))
        {
            _2703 = true;
            break;
        }
        if ((_2530 + 1.0) < _2528.x)
        {
            _2703 = true;
            break;
        }
        _2703 = false;
        break;
    }
    float _2908;
    if (_2703)
    {
        discard_state = true;
        _2908 = 0.0;
    }
    else
    {
        _2908 = cbInstanceData._m0[_2370].w;
    }
    SV_Target.x = _2534;
    SV_Target.y = _2535;
    SV_Target.z = _2536;
    SV_Target.w = _2908;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2370].w;
    discard_exit();
}


