#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb3_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb3_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb3_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb3_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb3_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Mb3_snp_0_Texture2D_7;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Mb3_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _950;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _200 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _207 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = _207 * NORMAL.x;
    float _209 = _207 * NORMAL.y;
    float _210 = _207 * NORMAL.z;
    float _214 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _222;
    float _223;
    float _224;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _222 = (-0.0) - _208;
        _223 = (-0.0) - _209;
        _224 = (-0.0) - _210;
    }
    else
    {
        _222 = _208;
        _223 = _209;
        _224 = _210;
    }
    vec4 _241 = texture(sampler2D(M_AMSN_V_Mb3_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _245 = 1.0 - _241.x;
    float _256 = ((cbMtdParam._m0[9u].x * (-1.39999997615814208984375)) * (((1.0 - TEXCOORD_3.x) * 2.0) - _245)) + 1.0;
    float _3289 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _257 = isnan(1.0) ? _3289 : (isnan(_3289) ? 1.0 : min(_3289, 1.0));
    vec4 _269 = texture(sampler2D(M_AMSN_V_Mb3_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _271 = _269.x;
    float _272 = _269.y;
    float _273 = _269.z;
    vec4 _285 = texture(sampler2D(M_AMSN_V_Mb3_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _296 = ((_285.x - _271) * _257) + _271;
    float _297 = ((_285.y - _272) * _257) + _272;
    float _298 = ((_285.z - _273) * _257) + _273;
    float _305 = (((((1.0 - TEXCOORD_3.y) * 2.0) - _245) * (-1.39999997615814208984375)) * cbMtdParam._m0[9u].y) + 1.0;
    float _3300 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _306 = isnan(1.0) ? _3300 : (isnan(_3300) ? 1.0 : min(_3300, 1.0));
    vec4 _319 = texture(sampler2D(M_AMSN_V_Mb3_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _330 = ((_319.x - _296) * _306) + _296;
    float _331 = ((_319.y - _297) * _306) + _297;
    float _332 = ((_319.z - _298) * _306) + _298;
    vec4 _344 = texture(sampler2D(M_AMSN_V_Mb3_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _346 = _344.x;
    float _347 = _344.y;
    float _348 = _344.z;
    vec4 _360 = texture(sampler2D(M_AMSN_V_Mb3_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _371 = ((_360.x - _346) * _257) + _346;
    float _372 = ((_360.y - _347) * _257) + _347;
    float _373 = ((_360.z - _348) * _257) + _348;
    vec4 _386 = texture(sampler2D(M_AMSN_V_Mb3_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w));
    float _399 = ((_386.z - _373) * _306) + _373;
    float _402 = ((((_386.x - _371) * _306) + _371) * 2.0) + (-1.0);
    float _404 = ((((_386.y - _372) * _306) + _372) * 2.0) + (-1.0);
    float _405 = dot(vec2(_402, _404), vec2(_402, _404));
    float _3311 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _410 = sqrt(1.0 - (isnan(1.0) ? _3311 : (isnan(_3311) ? 1.0 : min(_3311, 1.0))));
    float _413 = fma(_410, _222, fma(_404, _214 * TANGENT.x, (_200 * _192) * _402));
    float _416 = fma(_410, _223, fma(_404, _214 * TANGENT.y, (_200 * _193) * _402));
    float _419 = fma(_410, _224, fma(_404, _214 * TANGENT.z, (_200 * _194) * _402));
    float _423 = inversesqrt(dot(vec3(_413, _416, _419), vec3(_413, _416, _419)));
    float _424 = _423 * _413;
    float _425 = _423 * _416;
    float _426 = _423 * _419;
    float _3322 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _427 = isnan(1.0) ? _3322 : (isnan(_3322) ? 1.0 : min(_3322, 1.0));
    float _3333 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _3344 = isnan(0.0) ? _331 : (isnan(_331) ? 0.0 : max(_331, 0.0));
    float _3355 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _446 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _488 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _498 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _488);
    float _499 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _488);
    float _500 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _488);
    float _504 = inversesqrt(dot(vec3(_498, _499, _500), vec3(_498, _499, _500)));
    float _505 = _498 * _504;
    float _506 = _499 * _504;
    float _507 = _500 * _504;
    float _513 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _514 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _533 = fma(_426, cbSceneParam._m0[5u].z, fma(_425, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _424));
    float _536 = fma(_426, cbSceneParam._m0[6u].z, fma(_425, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _424));
    float _539 = fma(_426, cbSceneParam._m0[7u].z, fma(_425, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _424));
    uint _552 = uint(roundEven(NORMAL.w)) * 13u;
    uint _555 = (_552 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _561 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3333 : (isnan(_3333) ? 1.0 : min(_3333, 1.0)))) * cbInstanceData._m0[_555].x;
    float _562 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3344 : (isnan(_3344) ? 1.0 : min(_3344, 1.0)))) * cbInstanceData._m0[_555].y;
    float _563 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3355 : (isnan(_3355) ? 1.0 : min(_3355, 1.0)))) * cbInstanceData._m0[_555].z;
    float _3366 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _564 = isnan(1.0) ? _3366 : (isnan(_3366) ? 1.0 : min(_3366, 1.0));
    float _3377 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _565 = isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0));
    float _3388 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _566 = isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0));
    vec4 _575 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _513, cbSceneParam._m0[86u].y * _514));
    float _578 = _575.x * TEXCOORD_3.w;
    float _579 = dot(vec3(_424, _425, _426), vec3(_505, _506, _507));
    float _582 = _579 * 2.0;
    float _586 = (_582 * _424) - _505;
    float _587 = (_582 * _425) - _506;
    float _588 = (_582 * _426) - _507;
    float _592 = abs(dot(vec3(_505, _506, _507), vec3(_424, _425, _426)));
    float _3399 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _594 = sqrt(_427);
    float _607 = exp2((_594 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_594 * 3.0));
    float _639 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _643 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _647 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _949;
    float _951;
    float _952;
    float _953;
    float _954;
    float _955;
    float _956;
    float _957;
    float _958;
    float _959;
    float _960;
    float _961;
    float _962;
    float _963;
    float _964;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _674 = fma(_647, cbModelParam._m0[26u].z, fma(_643, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _639));
        float _678 = fma(_647, cbModelParam._m0[27u].z, fma(_643, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _639));
        float _682 = fma(_647, cbModelParam._m0[28u].z, fma(_643, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _639));
        float _707 = _639 + _424;
        float _708 = _643 + _425;
        float _709 = _647 + _426;
        float _719 = fma(_709, cbModelParam._m0[26u].z, fma(_708, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _707)) - _674;
        float _720 = fma(_709, cbModelParam._m0[27u].z, fma(_708, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _707)) - _678;
        float _721 = fma(_709, cbModelParam._m0[28u].z, fma(_708, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _707)) - _682;
        float _725 = inversesqrt(dot(vec3(_719, _720, _721), vec3(_719, _720, _721)));
        float _738 = ((_725 * _719) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_674 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _739 = ((_725 * _720) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_678 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _740 = ((_725 * _721) / cbModelParam._m0[34u].z) + ((((((_682 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _743 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_738, _739, _740), 0.0);
        vec4 _750 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_738, _739, _740), 0.0);
        vec4 _757 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_738, _739, _740), 0.0);
        vec4 _764 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_738, _739, _740), 0.0);
        float _777 = exp2((_743.w + (-0.5)) * 20.0) * 2.0;
        float _778 = _777 * (_743.x + (-0.5));
        float _779 = _777 * (_743.y + (-0.5));
        float _780 = _777 * (_743.z + (-0.5));
        float _787 = exp2((_750.w + (-0.5)) * 20.0) * 2.0;
        float _788 = _787 * (_750.x + (-0.5));
        float _789 = _787 * (_750.y + (-0.5));
        float _790 = _787 * (_750.z + (-0.5));
        float _797 = exp2((_757.w + (-0.5)) * 20.0) * 2.0;
        float _798 = _797 * (_757.x + (-0.5));
        float _799 = _797 * (_757.y + (-0.5));
        float _800 = _797 * (_757.z + (-0.5));
        float _807 = exp2((_764.w + (-0.5)) * 20.0) * 2.0;
        float _808 = _807 * (_764.x + (-0.5));
        float _809 = _807 * (_764.y + (-0.5));
        float _810 = _807 * (_764.z + (-0.5));
        float _811 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
        float _812 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
        float _813 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
        float _814 = _778 * 0.5;
        float _815 = _788 * 0.5;
        float _816 = _798 * 0.5;
        float _817 = dot(vec3(_814, _815, _816), vec3(_814, _815, _816));
        float _822 = (_817 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_817);
        float _831 = (dot(vec3(_424, _425, _426), vec3(_822 * _814, _822 * _815, _822 * _816)) + 1.0) * 0.5;
        float _3425 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _841 = sqrt(((_815 * _815) + (_814 * _814)) + (_816 * _816)) / (_811 + 9.9999997473787516355514526367188e-06);
        float _3436 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
        float _842 = isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0));
        float _843 = _842 * 2.0;
        float _847 = (1.0 - _842) / (_842 + 1.0);
        float _3447 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        float _848 = isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0));
        float _857 = ((((1.0 - _848) * (_843 + 2.0)) * exp2(log2(isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0))) * (_843 + 1.0))) + _848) * _811;
        float _858 = _779 * 0.5;
        float _859 = _789 * 0.5;
        float _860 = _799 * 0.5;
        float _861 = dot(vec3(_858, _859, _860), vec3(_858, _859, _860));
        float _866 = (_861 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_861);
        float _874 = (dot(vec3(_424, _425, _426), vec3(_866 * _858, _866 * _859, _866 * _860)) + 1.0) * 0.5;
        float _3458 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _883 = sqrt(((_859 * _859) + (_858 * _858)) + (_860 * _860)) / (_812 + 9.9999997473787516355514526367188e-06);
        float _3469 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
        float _884 = isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0));
        float _885 = _884 * 2.0;
        float _889 = (1.0 - _884) / (_884 + 1.0);
        float _3480 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        float _890 = isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0));
        float _899 = ((((1.0 - _890) * (_885 + 2.0)) * exp2(log2(isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0))) * (_885 + 1.0))) + _890) * _812;
        float _900 = _780 * 0.5;
        float _901 = _790 * 0.5;
        float _902 = _800 * 0.5;
        float _903 = dot(vec3(_900, _901, _902), vec3(_900, _901, _902));
        float _908 = (_903 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_903);
        float _916 = (dot(vec3(_424, _425, _426), vec3(_908 * _900, _908 * _901, _908 * _902)) + 1.0) * 0.5;
        float _3491 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _925 = sqrt(((_901 * _901) + (_900 * _900)) + (_902 * _902)) / (_813 + 9.9999997473787516355514526367188e-06);
        float _3502 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _926 = isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0));
        float _927 = _926 * 2.0;
        float _931 = (1.0 - _926) / (_926 + 1.0);
        float _3513 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _932 = isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0));
        float _941 = ((((1.0 - _932) * (_927 + 2.0)) * exp2(log2(isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0))) * (_927 + 1.0))) + _932) * _813;
        _949 = _780;
        _951 = _779;
        _952 = _778;
        _953 = _790;
        _954 = _789;
        _955 = _788;
        _956 = _800;
        _957 = _799;
        _958 = _798;
        _959 = _813;
        _960 = _812;
        _961 = _811;
        _962 = cbModelParam._m0[36u].z * (isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0)));
        _963 = cbModelParam._m0[36u].z * (isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0)));
        _964 = cbModelParam._m0[36u].z * (isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0)));
    }
    else
    {
        _949 = _950;
        _951 = _950;
        _952 = _950;
        _953 = _950;
        _954 = _950;
        _955 = _950;
        _956 = _950;
        _957 = _950;
        _958 = _950;
        _959 = _950;
        _960 = _950;
        _961 = _950;
        _962 = 0.0;
        _963 = 0.0;
        _964 = 0.0;
    }
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _990 = fma(_647, cbModelParam._m0[30u].z, fma(_643, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _639));
        float _994 = fma(_647, cbModelParam._m0[31u].z, fma(_643, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _639));
        float _998 = fma(_647, cbModelParam._m0[32u].z, fma(_643, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _639));
        float _1021 = _639 + _424;
        float _1022 = _643 + _425;
        float _1023 = _647 + _426;
        float _1033 = fma(_1023, cbModelParam._m0[30u].z, fma(_1022, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1021)) - _990;
        float _1034 = fma(_1023, cbModelParam._m0[31u].z, fma(_1022, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1021)) - _994;
        float _1035 = fma(_1023, cbModelParam._m0[32u].z, fma(_1022, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1021)) - _998;
        float _1039 = inversesqrt(dot(vec3(_1033, _1034, _1035), vec3(_1033, _1034, _1035)));
        float _1052 = ((_1039 * _1033) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_990 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1053 = ((_1039 * _1034) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_994 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1054 = ((_1039 * _1035) / cbModelParam._m0[35u].z) + ((((((_998 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1056 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1052, _1053, _1054), 0.0);
        vec4 _1063 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1052, _1053, _1054), 0.0);
        vec4 _1070 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1052, _1053, _1054), 0.0);
        vec4 _1077 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1052, _1053, _1054), 0.0);
        float _1089 = exp2((_1056.w + (-0.5)) * 20.0) * 2.0;
        float _1090 = _1089 * (_1056.x + (-0.5));
        float _1091 = _1089 * (_1056.y + (-0.5));
        float _1092 = _1089 * (_1056.z + (-0.5));
        float _1099 = exp2((_1063.w + (-0.5)) * 20.0) * 2.0;
        float _1100 = _1099 * (_1063.x + (-0.5));
        float _1101 = _1099 * (_1063.y + (-0.5));
        float _1102 = _1099 * (_1063.z + (-0.5));
        float _1109 = exp2((_1070.w + (-0.5)) * 20.0) * 2.0;
        float _1110 = _1109 * (_1070.x + (-0.5));
        float _1111 = _1109 * (_1070.y + (-0.5));
        float _1112 = _1109 * (_1070.z + (-0.5));
        float _1119 = exp2((_1077.w + (-0.5)) * 20.0) * 2.0;
        float _1120 = _1119 * (_1077.x + (-0.5));
        float _1121 = _1119 * (_1077.y + (-0.5));
        float _1122 = _1119 * (_1077.z + (-0.5));
        float _1123 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1124 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1125 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1126 = _1090 * 0.5;
        float _1127 = _1100 * 0.5;
        float _1128 = _1110 * 0.5;
        float _1129 = dot(vec3(_1126, _1127, _1128), vec3(_1126, _1127, _1128));
        float _1134 = (_1129 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1129);
        float _1142 = (dot(vec3(_424, _425, _426), vec3(_1134 * _1126, _1134 * _1127, _1134 * _1128)) + 1.0) * 0.5;
        float _3554 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1151 = sqrt(((_1127 * _1127) + (_1126 * _1126)) + (_1128 * _1128)) / (_1123 + 9.9999997473787516355514526367188e-06);
        float _3565 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
        float _1153 = _1152 * 2.0;
        float _1157 = (1.0 - _1152) / (_1152 + 1.0);
        float _3576 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
        float _1167 = ((((1.0 - _1158) * (_1153 + 2.0)) * exp2(log2(isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0))) * (_1153 + 1.0))) + _1158) * _1123;
        float _1168 = _1091 * 0.5;
        float _1169 = _1101 * 0.5;
        float _1170 = _1111 * 0.5;
        float _1171 = dot(vec3(_1168, _1169, _1170), vec3(_1168, _1169, _1170));
        float _1176 = (_1171 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1171);
        float _1184 = (dot(vec3(_424, _425, _426), vec3(_1176 * _1168, _1176 * _1169, _1176 * _1170)) + 1.0) * 0.5;
        float _3587 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1193 = sqrt(((_1169 * _1169) + (_1168 * _1168)) + (_1170 * _1170)) / (_1124 + 9.9999997473787516355514526367188e-06);
        float _3598 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0));
        float _1195 = _1194 * 2.0;
        float _1199 = (1.0 - _1194) / (_1194 + 1.0);
        float _3609 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
        float _1209 = ((((1.0 - _1200) * (_1195 + 2.0)) * exp2(log2(isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0))) * (_1195 + 1.0))) + _1200) * _1124;
        float _1210 = _1092 * 0.5;
        float _1211 = _1102 * 0.5;
        float _1212 = _1112 * 0.5;
        float _1213 = dot(vec3(_1210, _1211, _1212), vec3(_1210, _1211, _1212));
        float _1218 = (_1213 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1213);
        float _1226 = (dot(vec3(_424, _425, _426), vec3(_1218 * _1210, _1218 * _1211, _1218 * _1212)) + 1.0) * 0.5;
        float _3620 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1235 = sqrt(((_1211 * _1211) + (_1210 * _1210)) + (_1212 * _1212)) / (_1125 + 9.9999997473787516355514526367188e-06);
        float _3631 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
        float _1237 = _1236 * 2.0;
        float _1241 = (1.0 - _1236) / (_1236 + 1.0);
        float _3642 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
        float _1251 = ((((1.0 - _1242) * (_1237 + 2.0)) * exp2(log2(isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0))) * (_1237 + 1.0))) + _1242) * _1125;
        _1259 = _1092;
        _1260 = _1091;
        _1261 = _1090;
        _1262 = _1102;
        _1263 = _1101;
        _1264 = _1100;
        _1265 = _1112;
        _1266 = _1111;
        _1267 = _1110;
        _1268 = _1125;
        _1269 = _1124;
        _1270 = _1123;
        _1271 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0)));
        _1272 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0)));
        _1273 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0)));
    }
    else
    {
        _1259 = _950;
        _1260 = _950;
        _1261 = _950;
        _1262 = _950;
        _1263 = _950;
        _1264 = _950;
        _1265 = _950;
        _1266 = _950;
        _1267 = _950;
        _1268 = _950;
        _1269 = _950;
        _1270 = _950;
        _1271 = 0.0;
        _1272 = 0.0;
        _1273 = 0.0;
    }
    float _1283 = (cbModelParam._m0[1u].x * (_1271 - _962)) + _962;
    float _1284 = (cbModelParam._m0[1u].x * (_1272 - _963)) + _963;
    float _1285 = (cbModelParam._m0[1u].x * (_1273 - _964)) + _964;
    float _1306 = fma(_1285, cbSceneParam._m0[89u].z, fma(_1284, cbSceneParam._m0[89u].y, _1283 * cbSceneParam._m0[89u].x));
    float _1309 = fma(_1285, cbSceneParam._m0[90u].z, fma(_1284, cbSceneParam._m0[90u].y, _1283 * cbSceneParam._m0[90u].x));
    float _1312 = fma(_1285, cbSceneParam._m0[91u].z, fma(_1284, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1283));
    float _1327 = _586 * 0.5;
    float _1328 = _587 * 0.5;
    float _1329 = _588 * 0.5;
    float _1330 = dot(vec4(_1327, _1328, _1329, 1.0), vec4(_1261, _1264, _1267, _1270));
    float _1333 = dot(vec4(_1327, _1328, _1329, 1.0), vec4(_1260, _1263, _1266, _1269));
    float _1336 = dot(vec4(_1327, _1328, _1329, 1.0), vec4(_1259, _1262, _1265, _1268));
    float _1370;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1343 = dot(vec4(_1327, _1328, _1329, 1.0), vec4(_949, _953, _956, _959));
        float _1347 = dot(vec4(_1327, _1328, _1329, 1.0), vec4(_951, _954, _957, _960));
        float _1351 = dot(vec4(_1327, _1328, _1329, 1.0), vec4(_952, _955, _958, _961));
        float _1358 = dot(vec4(cbModelParam._m0[39u]), vec4(_1327, _1328, _1329, 1.0));
        _1370 = dot(vec3(isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0)), isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0)), isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1358) ? 0.0 : (isnan(0.0) ? _1358 : max(0.0, _1358))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1370 = 1.0;
    }
    float _1381;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1372 = dot(vec4(cbModelParam._m0[40u]), vec4(_1327, _1328, _1329, 1.0));
        _1381 = dot(vec3(isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0)), isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0)), isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1372) ? 0.0 : (isnan(0.0) ? _1372 : max(0.0, _1372))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1381 = 1.0;
    }
    float _1385 = (_1381 * cbModelParam._m0[1u].x) + (_1370 * (1.0 - cbModelParam._m0[1u].x));
    float _1395 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _427);
    float _1396 = isnan(_1395) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1395 : min(cbModelParam._m0[25u].z, _1395));
    float _1478;
    float _1480;
    float _1482;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1445 = fma(_647, cbModelParam._m0[13u].z, fma(_643, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _639)) + cbModelParam._m0[13u].w;
        float _1449 = fma(_647, cbModelParam._m0[14u].z, fma(_643, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _639)) + cbModelParam._m0[14u].w;
        float _1453 = fma(_647, cbModelParam._m0[15u].z, fma(_643, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _639)) + cbModelParam._m0[15u].w;
        float _1456 = fma(_588, cbModelParam._m0[13u].z, fma(_587, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _586));
        float _1459 = fma(_588, cbModelParam._m0[14u].z, fma(_587, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _586));
        float _1462 = fma(_588, cbModelParam._m0[15u].z, fma(_587, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _586));
        float _1490;
        if (_1456 > 0.0)
        {
            _1490 = abs((1.0 - _1445) / _1456);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1456 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1445 + 1.0) / _1456);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1490 = frontier_phi_16_14_ladder;
        }
        float _1716;
        if (_1459 > 0.0)
        {
            _1716 = abs((1.0 - _1449) / _1459);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1459 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1449 + 1.0) / _1459);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1716 = frontier_phi_25_21_ladder;
        }
        float _1962;
        if (_1462 > 0.0)
        {
            _1962 = abs((1.0 - _1453) / _1462);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1462 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1453 + 1.0) / _1462);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1962 = frontier_phi_37_32_ladder;
        }
        float _1964 = isnan(_1716) ? _1490 : (isnan(_1490) ? _1716 : min(_1490, _1716));
        float _1965 = isnan(_1962) ? _1964 : (isnan(_1964) ? _1962 : min(_1964, _1962));
        float _1969 = (_1965 * _1456) + _1445;
        float _1970 = (_1965 * _1459) + _1449;
        float _1971 = (_1965 * _1462) + _1453;
        float _1972 = _1965 * 9.9999997473787516355514526367188e-05;
        float _1974 = (-1.0) - _1972;
        float _1976 = _1972 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1971 > _1976) || ((_1971 < _1974) || ((_1970 > _1976) || ((_1970 < _1974) || ((_1969 < _1974) || (_1969 > _1976))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2095 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1971, cbModelParam._m0[9u].z, fma(_1970, cbModelParam._m0[9u].y, _1969 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1971, cbModelParam._m0[10u].z, fma(_1970, cbModelParam._m0[10u].y, _1969 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1971, cbModelParam._m0[11u].z, fma(_1970, cbModelParam._m0[11u].y, _1969 * cbModelParam._m0[11u].x))), _1396);
            frontier_phi_15_37_ladder = _2095.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2095.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2095.x * cbModelParam._m0[1u].y;
        }
        _1478 = frontier_phi_15_37_ladder_2;
        _1480 = frontier_phi_15_37_ladder_1;
        _1482 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1466 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_586, _587, _588), _1396);
        _1478 = _1466.x * cbModelParam._m0[1u].y;
        _1480 = _1466.y * cbModelParam._m0[1u].y;
        _1482 = _1466.z * cbModelParam._m0[1u].y;
    }
    float _1486 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _427);
    float _1487 = isnan(_1486) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1486 : min(cbModelParam._m0[25u].w, _1486));
    float _1580;
    float _1582;
    float _1584;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1544 = fma(_647, cbModelParam._m0[21u].z, fma(_643, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _639)) + cbModelParam._m0[21u].w;
        float _1548 = fma(_647, cbModelParam._m0[22u].z, fma(_643, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _639)) + cbModelParam._m0[22u].w;
        float _1552 = fma(_647, cbModelParam._m0[23u].z, fma(_643, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _639)) + cbModelParam._m0[23u].w;
        float _1555 = fma(_588, cbModelParam._m0[21u].z, fma(_587, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _586));
        float _1558 = fma(_588, cbModelParam._m0[22u].z, fma(_587, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _586));
        float _1561 = fma(_588, cbModelParam._m0[23u].z, fma(_587, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _586));
        float _1721;
        if (_1555 > 0.0)
        {
            _1721 = abs((1.0 - _1544) / _1555);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1555 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1544 + 1.0) / _1555);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1721 = frontier_phi_27_23_ladder;
        }
        float _1989;
        if (_1558 > 0.0)
        {
            _1989 = abs((1.0 - _1548) / _1558);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1558 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1548 + 1.0) / _1558);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1989 = frontier_phi_39_34_ladder;
        }
        float _2194;
        if (_1561 > 0.0)
        {
            _2194 = abs((1.0 - _1552) / _1561);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1561 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1552 + 1.0) / _1561);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2194 = frontier_phi_48_45_ladder;
        }
        float _2196 = isnan(_1989) ? _1721 : (isnan(_1721) ? _1989 : min(_1721, _1989));
        float _2197 = isnan(_2194) ? _2196 : (isnan(_2196) ? _2194 : min(_2196, _2194));
        float _2201 = (_2197 * _1555) + _1544;
        float _2202 = (_2197 * _1558) + _1548;
        float _2203 = (_2197 * _1561) + _1552;
        float _2204 = _2197 * 9.9999997473787516355514526367188e-05;
        float _2205 = (-1.0) - _2204;
        float _2207 = _2204 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2203 > _2207) || ((_2203 < _2205) || ((_2202 > _2207) || ((_2202 < _2205) || ((_2201 < _2205) || (_2201 > _2207))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2401 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2203, cbModelParam._m0[17u].z, fma(_2202, cbModelParam._m0[17u].y, _2201 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2203, cbModelParam._m0[18u].z, fma(_2202, cbModelParam._m0[18u].y, _2201 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2203, cbModelParam._m0[19u].z, fma(_2202, cbModelParam._m0[19u].y, _2201 * cbModelParam._m0[19u].x))), _1487);
            frontier_phi_24_48_ladder = _2401.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2401.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2401.x * cbModelParam._m0[1u].z;
        }
        _1580 = frontier_phi_24_48_ladder_2;
        _1582 = frontier_phi_24_48_ladder_1;
        _1584 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1564 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_586, _587, _588), _1487);
        _1580 = _1564.x * cbModelParam._m0[1u].z;
        _1582 = _1564.y * cbModelParam._m0[1u].z;
        _1584 = _1564.z * cbModelParam._m0[1u].z;
    }
    float _1596 = ((((1.0 - _607) * ((_594 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_607 * _594)) * _578;
    float _1597 = _1596 * ((cbModelParam._m0[1u].w * (_1580 - _1478)) + _1478);
    float _1598 = _1596 * ((cbModelParam._m0[1u].w * (_1582 - _1480)) + _1480);
    float _1599 = _1596 * ((cbModelParam._m0[1u].w * (_1584 - _1482)) + _1482);
    float _1602 = fma(_1599, cbSceneParam._m0[89u].z, fma(_1598, cbSceneParam._m0[89u].y, _1597 * cbSceneParam._m0[89u].x));
    float _1605 = fma(_1599, cbSceneParam._m0[90u].z, fma(_1598, cbSceneParam._m0[90u].y, _1597 * cbSceneParam._m0[90u].x));
    float _1608 = fma(_1599, cbSceneParam._m0[91u].z, fma(_1598, cbSceneParam._m0[91u].y, _1597 * cbSceneParam._m0[91u].x));
    vec4 _1616 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_513, _514));
    float _1618 = _1616.w;
    float _1630 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1618);
    float _1631 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1618);
    float _1632 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1618);
    uvec4 _1636 = floatBitsToUint(cbInstanceData._m0[_552 + 5u]);
    uint _1638 = _1636.x * 14u;
    uint _1639 = _1638 + 13u;
    float _1646 = _578 + (-1.0);
    float _1651 = (cbLight._m0[_1639].x * _1646) + 1.0;
    float _1652 = (cbLight._m0[_1639].y * _1646) + 1.0;
    float _1653 = (cbLight._m0[_1639].z * _1646) + 1.0;
    float _1654 = (cbLight._m0[_1639].w * _1646) + 1.0;
    uint _1655 = _1638 + 5u;
    float _1661 = isnan(1.0) ? _1652 : (isnan(_1652) ? 1.0 : min(_1652, 1.0));
    uint _1665 = _1638 + 4u;
    float _1674 = isnan(1.0) ? _1651 : (isnan(_1651) ? 1.0 : min(_1651, 1.0));
    uint _1678 = _1638 | 1u;
    float _1689 = dot(vec3(cbLight._m0[_1638].xyz), vec3(_424, _425, _426));
    float _1692 = dot(vec3(cbLight._m0[_1678].xyz), vec3(_424, _425, _426));
    float _3778 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
    float _3789 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
    float _1697 = (isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0))) * 0.3183098733425140380859375;
    float _1699 = (isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0))) * 0.3183098733425140380859375;
    float _1706 = ((cbLight._m0[_1655].x * _1661) * _1699) + (((cbLight._m0[_1665].x * _1630) * _1674) * _1697);
    float _1707 = ((_1661 * cbLight._m0[_1655].y) * _1699) + (((cbLight._m0[_1665].y * _1631) * _1674) * _1697);
    float _1708 = ((_1661 * cbLight._m0[_1655].z) * _1699) + (((cbLight._m0[_1665].z * _1632) * _1674) * _1697);
    uvec4 _1713 = floatBitsToUint(cbLight._m0[_1638 + 12u]);
    bool _1715 = _1713.x == 0u;
    float _1726;
    float _1728;
    float _1730;
    if (_1715)
    {
        _1726 = _1706;
        _1728 = _1707;
        _1730 = _1708;
    }
    else
    {
        uint _1734 = _1638 + 6u;
        float _1750 = (dot(vec3(cbLight._m0[_1638 + 2u].xyz), vec3(_424, _425, _426)) * 0.5) + 0.5;
        float _1751 = _1750 * _1750;
        float _3800 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
        float _1752 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
        float _1753 = isnan(1.0) ? _1653 : (isnan(_1653) ? 1.0 : min(_1653, 1.0));
        _1726 = (((cbLight._m0[_1734].x * 0.3183098733425140380859375) * _1752) * _1753) + _1706;
        _1728 = (((cbLight._m0[_1734].y * 0.3183098733425140380859375) * _1752) * _1753) + _1707;
        _1730 = (((cbLight._m0[_1734].z * 0.3183098733425140380859375) * _1752) * _1753) + _1708;
    }
    bool _1733 = _1713.y == 0u;
    float _1771;
    float _1773;
    float _1775;
    if (_1733)
    {
        _1771 = _1726;
        _1773 = _1728;
        _1775 = _1730;
    }
    else
    {
        uint _1933 = _1638 + 7u;
        float _1949 = (dot(vec3(cbLight._m0[_1638 + 3u].xyz), vec3(_424, _425, _426)) * 0.5) + 0.5;
        float _1950 = _1949 * _1949;
        float _3816 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
        float _1951 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _1952 = isnan(1.0) ? _1654 : (isnan(_1654) ? 1.0 : min(_1654, 1.0));
        _1771 = (((cbLight._m0[_1933].x * 0.3183098733425140380859375) * _1951) * _1952) + _1726;
        _1773 = (((cbLight._m0[_1933].y * 0.3183098733425140380859375) * _1951) * _1952) + _1728;
        _1775 = (((cbLight._m0[_1933].z * 0.3183098733425140380859375) * _1951) * _1952) + _1730;
    }
    uint _1778 = _1638 + 8u;
    float _1791 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1638].w)) * _427) * 0.949999988079071044921875);
    float _1792 = _1791 * _1791;
    float _1793 = cbLight._m0[_1638].x + _505;
    float _1794 = cbLight._m0[_1638].y + _506;
    float _1795 = cbLight._m0[_1638].z + _507;
    float _1799 = inversesqrt(dot(vec3(_1793, _1794, _1795), vec3(_1793, _1794, _1795)));
    float _1800 = _1799 * _1793;
    float _1801 = _1799 * _1794;
    float _1802 = _1799 * _1795;
    float _1803 = dot(vec3(_424, _425, _426), vec3(cbLight._m0[_1638].xyz));
    float _3832 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
    float _1806 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
    float _3843 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _1807 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
    float _1808 = dot(vec3(_424, _425, _426), vec3(_1800, _1801, _1802));
    float _3854 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
    float _1811 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
    float _1812 = dot(vec3(cbLight._m0[_1638].xyz), vec3(_1800, _1801, _1802));
    float _3865 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
    float _1816 = _1792 * _1792;
    float _1820 = ((_1811 * _1811) * (_1816 + (-1.0))) + 1.0;
    float _1831 = (exp2(log2(1.0 - (isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1832 = 1.0 - _1792;
    float _1843 = (0.5 / (((_1807 * ((_1806 * _1832) + _1792)) + 9.9999999392252902907785028219223e-09) + (((_1807 * _1832) + _1792) * _1806))) * _1806;
    float _3876 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
    float _1845 = (isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0))) * (_1816 / ((_1820 * _1820) * 3.141590118408203125));
    uint _1859 = _1638 + 9u;
    float _1870 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1678].w)) * _427) * 0.949999988079071044921875);
    float _1871 = _1870 * _1870;
    float _1872 = cbLight._m0[_1678].x + _505;
    float _1873 = cbLight._m0[_1678].y + _506;
    float _1874 = cbLight._m0[_1678].z + _507;
    float _1878 = inversesqrt(dot(vec3(_1872, _1873, _1874), vec3(_1872, _1873, _1874)));
    float _1879 = _1878 * _1872;
    float _1880 = _1878 * _1873;
    float _1881 = _1878 * _1874;
    float _1882 = dot(vec3(_424, _425, _426), vec3(cbLight._m0[_1678].xyz));
    float _3887 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
    float _1885 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
    float _1886 = dot(vec3(_424, _425, _426), vec3(_1879, _1880, _1881));
    float _3898 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
    float _1889 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
    float _1890 = dot(vec3(cbLight._m0[_1678].xyz), vec3(_1879, _1880, _1881));
    float _3909 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
    float _1894 = _1871 * _1871;
    float _1898 = ((_1889 * _1889) * (_1894 + (-1.0))) + 1.0;
    float _1907 = (exp2(log2(1.0 - (isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1908 = 1.0 - _1871;
    float _1918 = (0.5 / (((_1807 * ((_1885 * _1908) + _1871)) + 9.9999999392252902907785028219223e-09) + (((_1807 * _1908) + _1871) * _1885))) * _1885;
    float _3920 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
    float _1920 = (isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))) * (_1894 / ((_1898 * _1898) * 3.141590118408203125));
    float _1930 = (((_1907 * cbLight._m0[_1859].x) * _1920) * _1661) + ((((cbLight._m0[_1778].x * _1630) * _1831) * _1845) * _1674);
    float _1931 = (((_1907 * cbLight._m0[_1859].y) * _1920) * _1661) + ((((cbLight._m0[_1778].y * _1631) * _1831) * _1845) * _1674);
    float _1932 = (((_1907 * cbLight._m0[_1859].z) * _1920) * _1661) + ((((cbLight._m0[_1778].z * _1632) * _1831) * _1845) * _1674);
    float _1994;
    float _1996;
    float _1998;
    if (_1715)
    {
        _1994 = _1930;
        _1996 = _1931;
        _1998 = _1932;
    }
    else
    {
        uint _2000 = _1638 + 2u;
        uint _2004 = _1638 + 10u;
        float _2018 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2000].w)) * _427) * 0.949999988079071044921875);
        float _2019 = _2018 * _2018;
        float _2020 = cbLight._m0[_2000].x + _505;
        float _2021 = cbLight._m0[_2000].y + _506;
        float _2022 = cbLight._m0[_2000].z + _507;
        float _2026 = inversesqrt(dot(vec3(_2020, _2021, _2022), vec3(_2020, _2021, _2022)));
        float _2027 = _2026 * _2020;
        float _2028 = _2026 * _2021;
        float _2029 = _2026 * _2022;
        float _2030 = dot(vec3(_424, _425, _426), vec3(cbLight._m0[_2000].xyz));
        float _3931 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
        float _2033 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _2034 = dot(vec3(_424, _425, _426), vec3(_2027, _2028, _2029));
        float _3942 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
        float _2037 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _2038 = dot(vec3(cbLight._m0[_2000].xyz), vec3(_2027, _2028, _2029));
        float _3953 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
        float _2042 = _2019 * _2019;
        float _2046 = ((_2037 * _2037) * (_2042 + (-1.0))) + 1.0;
        float _2055 = (exp2(log2(1.0 - (isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2056 = 1.0 - _2019;
        float _2066 = (0.5 / (((_1807 * ((_2033 * _2056) + _2019)) + 9.9999999392252902907785028219223e-09) + (((_1807 * _2056) + _2019) * _2033))) * _2033;
        float _3964 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
        float _2068 = (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))) * (_2042 / ((_2046 * _2046) * 3.141590118408203125));
        float _2069 = isnan(1.0) ? _1653 : (isnan(_1653) ? 1.0 : min(_1653, 1.0));
        _1994 = (((_2055 * cbLight._m0[_2004].x) * _2068) * _2069) + _1930;
        _1996 = (((_2055 * cbLight._m0[_2004].y) * _2068) * _2069) + _1931;
        _1998 = (((_2055 * cbLight._m0[_2004].z) * _2068) * _2069) + _1932;
    }
    float _2104;
    float _2106;
    float _2108;
    if (_1733)
    {
        _2104 = _1994;
        _2106 = _1996;
        _2108 = _1998;
    }
    else
    {
        uint _2115 = _1638 + 3u;
        uint _2119 = _1638 + 11u;
        float _2133 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2115].w)) * _427) * 0.949999988079071044921875);
        float _2134 = _2133 * _2133;
        float _2135 = cbLight._m0[_2115].x + _505;
        float _2136 = cbLight._m0[_2115].y + _506;
        float _2137 = cbLight._m0[_2115].z + _507;
        float _2141 = inversesqrt(dot(vec3(_2135, _2136, _2137), vec3(_2135, _2136, _2137)));
        float _2142 = _2141 * _2135;
        float _2143 = _2141 * _2136;
        float _2144 = _2141 * _2137;
        float _2145 = dot(vec3(_424, _425, _426), vec3(cbLight._m0[_2115].xyz));
        float _3980 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
        float _2148 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
        float _2149 = dot(vec3(_424, _425, _426), vec3(_2142, _2143, _2144));
        float _3991 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
        float _2152 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _2153 = dot(vec3(cbLight._m0[_2115].xyz), vec3(_2142, _2143, _2144));
        float _4002 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
        float _2157 = _2134 * _2134;
        float _2161 = ((_2152 * _2152) * (_2157 + (-1.0))) + 1.0;
        float _2170 = (exp2(log2(1.0 - (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2171 = 1.0 - _2134;
        float _2181 = (0.5 / (((_1807 * ((_2148 * _2171) + _2134)) + 9.9999999392252902907785028219223e-09) + (((_1807 * _2171) + _2134) * _2148))) * _2148;
        float _4013 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
        float _2183 = (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) * (_2157 / ((_2161 * _2161) * 3.141590118408203125));
        float _2184 = isnan(1.0) ? _1654 : (isnan(_1654) ? 1.0 : min(_1654, 1.0));
        _2104 = (((_2170 * cbLight._m0[_2119].x) * _2183) * _2184) + _1994;
        _2106 = (((_2170 * cbLight._m0[_2119].y) * _2183) * _2184) + _1996;
        _2108 = (((_2170 * cbLight._m0[_2119].z) * _2183) * _2184) + _1998;
    }
    float _2318;
    float _2320;
    float _2322;
    float _2324;
    float _2326;
    float _2328;
    if (_1636.y == 0u)
    {
        float _2259 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2260 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2259;
        float _2261 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2259;
        float _2262 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2259;
        uvec4 _2274 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2275 = _2274.x;
        uint _2286 = uint((float(_2274.y) * floor(float(uint(cbSceneParam._m0[85u].y * _514) / _2275))) + floor(float(uint(cbSceneParam._m0[85u].x * _513) / _2275)));
        float _2296 = (log2(_2262 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2297 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
        uint _2300 = uint(isnan(14.0) ? _2297 : (isnan(_2297) ? 14.0 : min(_2297, 14.0)));
        uvec4 _2305 = texelFetch(g_lightClusterGridBuffer, int(((_2300 << 2u) + (_2286 << 6u)) >> 2u));
        uint _2306 = _2305.x;
        uint _2307 = _2274.z;
        float _2406;
        float _2408;
        float _2410;
        float _2412;
        float _2414;
        float _2416;
        if (((((1u << ((_2307 >> 4u) & 15u)) + 4294967295u) & _2306) == 0u) || ((_2307 & 240u) == 0u))
        {
            _2406 = 0.0;
            _2408 = 0.0;
            _2410 = 0.0;
            _2412 = 0.0;
            _2414 = 0.0;
            _2416 = 0.0;
        }
        else
        {
            float _2407;
            float _2409;
            float _2411;
            float _2413;
            float _2415;
            float _2417;
            float _2550 = 0.0;
            float _2551 = 0.0;
            float _2552 = 0.0;
            float _2553 = 0.0;
            float _2554 = 0.0;
            float _2555 = 0.0;
            uint _2556 = 0u;
            uint _2565;
            bool _2566;
            for (;;)
            {
                _2565 = texelFetch(g_lightClassification, int((((_2300 << 5u) + (_2286 << 9u)) + (_2556 << 2u)) >> 2u)).x;
                _2566 = _2565 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2566)
                {
                    frontier_phi_63_pred = _2555;
                    frontier_phi_63_pred_1 = _2554;
                    frontier_phi_63_pred_2 = _2553;
                    frontier_phi_63_pred_3 = _2552;
                    frontier_phi_63_pred_4 = _2551;
                    frontier_phi_63_pred_5 = _2550;
                }
                else
                {
                    float _2674;
                    float _2675;
                    float _2676;
                    float _2677;
                    float _2678;
                    float _2679;
                    uint _2680;
                    _2674 = _2550;
                    _2675 = _2551;
                    _2676 = _2552;
                    _2677 = _2553;
                    _2678 = _2554;
                    _2679 = _2555;
                    _2680 = _2565;
                    float _2606;
                    float _2607;
                    float _2608;
                    float _2609;
                    float _2610;
                    float _2611;
                    for (;;)
                    {
                        uint _2684 = uint(findLSB(_2680)) + (_2556 << 5u);
                        uint _2681 = (_2680 + 4294967295u) & _2680;
                        uint _2686 = _2684 * 48u;
                        vec4 _2700 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2686)).x, texelFetch(g_PointLightRenderingBuffer, int(_2686 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2686 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2686 + 3u)).x));
                        uint _2706 = (_2684 * 48u) + 4u;
                        vec4 _2719 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2706)).x, texelFetch(g_PointLightRenderingBuffer, int(_2706 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2706 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2706 + 3u)).x));
                        uint _2725 = (_2684 * 48u) + 8u;
                        vec3 _2736 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2725)).x, texelFetch(g_PointLightRenderingBuffer, int(_2725 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2725 + 2u)).x));
                        float _2740 = _2700.x - _2260;
                        float _2741 = _2700.y - _2261;
                        float _2742 = _2700.z - _2262;
                        float _2743 = dot(vec3(_2740, _2741, _2742), vec3(_2740, _2741, _2742));
                        float _2746 = inversesqrt(_2743);
                        float _2747 = _2746 * _2740;
                        float _2748 = _2746 * _2741;
                        float _2749 = _2746 * _2742;
                        float _2750 = dot(vec3(_533, _536, _539), vec3(_2747, _2748, _2749));
                        float _2755 = 1.0 - (_2743 * _2700.w);
                        float _4039 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
                        float _2756 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
                        float _2757 = sqrt(_2743) * _2719.w;
                        float _2760 = 1.39999997615814208984375 / (_2757 + 1.39999997615814208984375);
                        float _2761 = _2760 * _2760;
                        float _2764 = ((1.0 - _2761) * _2750) + _2761;
                        float _2767 = _2757 * _2757;
                        float _2771 = ((isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0))) * _2756) / ((_2767 * 0.699999988079071044921875) + 1.0);
                        float _2775 = (-0.0) - _2260;
                        float _2776 = (-0.0) - _2261;
                        float _2777 = (-0.0) - _2262;
                        float _2781 = inversesqrt(dot(vec3(_2775, _2776, _2777), vec3(_2775, _2776, _2777)));
                        float _2782 = _2781 * _2775;
                        float _2783 = _2781 * _2776;
                        float _2784 = _2781 * _2777;
                        float _2792 = exp2(log2(1.0 / ((_2767 * 3.5) + 5.0)) * 0.25);
                        float _2793 = 1.0 - _594;
                        float _2800 = sqrt(1.0 - ((1.0 - (_2793 * _2793)) * (1.0 - (_2792 * _2792))));
                        float _2801 = _2800 * _2800;
                        float _2802 = _2801 * _2801;
                        float _2803 = _2782 + _2747;
                        float _2804 = _2783 + _2748;
                        float _2805 = _2784 + _2749;
                        float _2809 = inversesqrt(dot(vec3(_2803, _2804, _2805), vec3(_2803, _2804, _2805)));
                        float _2813 = dot(vec3(_533, _536, _539), vec3(_2782, _2783, _2784));
                        float _4055 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
                        float _2816 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
                        float _2817 = dot(vec3(_533, _536, _539), vec3(_2809 * _2803, _2809 * _2804, _2809 * _2805));
                        float _4066 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
                        float _2820 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
                        float _2824 = ((_2820 * _2820) * (_2802 + (-1.0))) + 1.0;
                        float _2825 = _2760 * _2801;
                        float _2826 = _2825 * _2825;
                        float _2829 = ((1.0 - _2826) * _2750) + _2826;
                        float _4077 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0));
                        float _2830 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
                        float _2831 = 1.0 - _2801;
                        float _2841 = (0.5 / (((_2830 * ((_2816 * _2831) + _2801)) + 9.9999999392252902907785028219223e-09) + (((_2830 * _2831) + _2801) * _2816))) * _2830;
                        float _4088 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0));
                        float _2852 = (((_2802 * 3.1415927410125732421875) * (isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0)))) / ((_2824 * _2824) * ((_2767 * 2.1991131305694580078125) + 3.141590118408203125))) * _2756;
                        _2609 = (_2771 * _2719.x) + _2677;
                        _2610 = (_2771 * _2719.y) + _2678;
                        _2611 = (_2771 * _2719.z) + _2679;
                        _2606 = (_2852 * _2736.x) + _2674;
                        _2607 = (_2852 * _2736.y) + _2675;
                        _2608 = (_2852 * _2736.z) + _2676;
                        if (_2681 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2674 = _2606;
                            _2675 = _2607;
                            _2676 = _2608;
                            _2677 = _2609;
                            _2678 = _2610;
                            _2679 = _2611;
                            _2680 = _2681;
                        }
                    }
                    frontier_phi_63_pred = _2611;
                    frontier_phi_63_pred_1 = _2610;
                    frontier_phi_63_pred_2 = _2609;
                    frontier_phi_63_pred_3 = _2608;
                    frontier_phi_63_pred_4 = _2607;
                    frontier_phi_63_pred_5 = _2606;
                }
                _2417 = frontier_phi_63_pred;
                _2415 = frontier_phi_63_pred_1;
                _2413 = frontier_phi_63_pred_2;
                _2411 = frontier_phi_63_pred_3;
                _2409 = frontier_phi_63_pred_4;
                _2407 = frontier_phi_63_pred_5;
                uint _2557 = _2556 + 1u;
                if (_2557 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2550 = _2407;
                    _2551 = _2409;
                    _2552 = _2411;
                    _2553 = _2413;
                    _2554 = _2415;
                    _2555 = _2417;
                    _2556 = _2557;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2406 = _2407;
            _2408 = _2409;
            _2410 = _2411;
            _2412 = _2413;
            _2414 = _2415;
            _2416 = _2417;
        }
        uvec4 _2420 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2421 = _2420.z;
        uint _2423 = (_2421 >> 8u) & 15u;
        float _2518;
        float _2520;
        float _2522;
        float _2524;
        float _2526;
        float _2528;
        if (((4294967295u << _2423) & _2306) == 0u)
        {
            _2518 = _2406;
            _2520 = _2408;
            _2522 = _2410;
            _2524 = _2412;
            _2526 = _2414;
            _2528 = _2416;
        }
        else
        {
            float _2543 = inversesqrt(dot(vec3(_2260, _2261, _2262), vec3(_2260, _2261, _2262)));
            float _2544 = _2543 * _2260;
            float _2545 = _2543 * _2261;
            float _2546 = _2543 * _2262;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2423 < ((_2421 >> 12u) & 15u))
            {
                float _2519;
                float _2521;
                float _2523;
                float _2525;
                float _2527;
                float _2529;
                float _2657 = _2406;
                float _2658 = _2408;
                float _2659 = _2410;
                float _2660 = _2412;
                float _2661 = _2414;
                float _2662 = _2416;
                uint _2663 = _2423;
                uint _2672;
                bool _2673;
                for (;;)
                {
                    _2672 = texelFetch(g_lightClassification, int((((_2300 << 5u) + (_2286 << 9u)) + (_2663 << 2u)) >> 2u)).x;
                    _2673 = _2672 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2673)
                    {
                        frontier_phi_69_pred = _2662;
                        frontier_phi_69_pred_1 = _2661;
                        frontier_phi_69_pred_2 = _2660;
                        frontier_phi_69_pred_3 = _2659;
                        frontier_phi_69_pred_4 = _2658;
                        frontier_phi_69_pred_5 = _2657;
                    }
                    else
                    {
                        float _2857;
                        float _2858;
                        float _2859;
                        float _2860;
                        float _2861;
                        float _2862;
                        float _3153;
                        float _3154;
                        float _3155;
                        float _3156;
                        float _3157;
                        float _3158;
                        float _2870 = _2657;
                        float _2871 = _2658;
                        float _2872 = _2659;
                        float _2873 = _2660;
                        float _2874 = _2661;
                        float _2875 = _2662;
                        uint _2876 = _2672;
                        uint _2877;
                        vec4 _2902;
                        float _2903;
                        vec4 _2918;
                        vec3 _2930;
                        vec4 _2946;
                        vec4 _2962;
                        float _3009;
                        bool _3010;
                        for (;;)
                        {
                            uint _2887 = ((_2663 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2876));
                            _2877 = (_2876 + 4294967295u) & _2876;
                            uint _2889 = _2887 * 40u;
                            _2902 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2889)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 3u)).x));
                            _2903 = _2902.w;
                            uint _2905 = (_2887 * 40u) + 4u;
                            _2918 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2905)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 3u)).x));
                            uint _2920 = (_2887 * 40u) + 8u;
                            _2930 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2920)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2920 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2920 + 2u)).x));
                            uint _2933 = (_2887 * 40u) + 16u;
                            _2946 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2933)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 3u)).x));
                            uint _2949 = (_2887 * 40u) + 20u;
                            _2962 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2949)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 3u)).x));
                            uint _2965 = (_2887 * 40u) + 24u;
                            vec4 _2978 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2965)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 3u)).x));
                            uint _2984 = (_2887 * 40u) + 28u;
                            vec4 _2997 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2984)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 3u)).x));
                            _3009 = fma(_2262, _2997.z, fma(_2261, _2997.y, _2997.x * _2260)) + _2997.w;
                            _3010 = !((fma(_2262, _2978.z, fma(_2261, _2978.y, _2978.x * _2260)) + _2978.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3010)
                            {
                                float _3037 = _2902.x - _2260;
                                float _3038 = _2902.y - _2261;
                                float _3039 = _2902.z - _2262;
                                float _3040 = dot(vec3(_3037, _3038, _3039), vec3(_3037, _3038, _3039));
                                float _3043 = inversesqrt(_3040);
                                float _3044 = _3043 * _3037;
                                float _3045 = _3043 * _3038;
                                float _3046 = _3043 * _3039;
                                float _3050 = 1.0 - (_3040 / (_2903 * _2903));
                                float _4099 = isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0));
                                float _3051 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
                                float _3055 = sqrt(_3040) * _2918.w;
                                float _3057 = 1.39999997615814208984375 / (_3055 + 1.39999997615814208984375);
                                float _3058 = _3057 * _3057;
                                float _3061 = ((1.0 - _3058) * dot(vec3(_3044, _3045, _3046), vec3(_533, _536, _539))) + _3058;
                                float _3064 = _3055 * _3055;
                                float _3068 = (fma(_2262, _2946.z, fma(_2261, _2946.y, _2946.x * _2260)) + _2946.w) / _3009;
                                float _3069 = (fma(_2262, _2962.z, fma(_2261, _2962.y, _2962.x * _2260)) + _2962.w) / _3009;
                                float _3073 = 1.0 - dot(vec2(_3068, _3069), vec2(_3068, _3069));
                                float _4115 = isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0));
                                float _3074 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
                                float _3075 = _3074 * (((isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0))) * _3051) / ((_3064 * 0.699999988079071044921875) + 1.0));
                                float _3087 = exp2(log2(1.0 / ((_3064 * 3.5) + 5.0)) * 0.25);
                                float _3088 = 1.0 - _594;
                                float _3095 = sqrt(1.0 - ((1.0 - (_3088 * _3088)) * (1.0 - (_3087 * _3087))));
                                float _3096 = _3095 * _3095;
                                float _3097 = _3096 * _3096;
                                float _3098 = _3044 - _2544;
                                float _3099 = _3045 - _2545;
                                float _3100 = _3046 - _2546;
                                float _3104 = inversesqrt(dot(vec3(_3098, _3099, _3100), vec3(_3098, _3099, _3100)));
                                float _3108 = dot(vec3(_533, _536, _539), vec3((-0.0) - _2544, (-0.0) - _2545, (-0.0) - _2546));
                                float _4126 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0));
                                float _3111 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
                                float _3112 = dot(vec3(_533, _536, _539), vec3(_3104 * _3098, _3104 * _3099, _3104 * _3100));
                                float _4137 = isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : max(_3112, 0.0));
                                float _3115 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
                                float _3119 = ((_3115 * _3115) * (_3097 + (-1.0))) + 1.0;
                                float _3120 = _3057 * _3096;
                                float _3121 = _3120 * _3120;
                                float _3127 = ((1.0 - _3121) * dot(vec3(_533, _536, _539), vec3(_3044, _3045, _3046))) + _3121;
                                float _4148 = isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0));
                                float _3128 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
                                float _3129 = 1.0 - _3096;
                                float _3139 = (0.5 / (((_3128 * ((_3111 * _3129) + _3096)) + 9.9999999392252902907785028219223e-09) + (((_3128 * _3129) + _3096) * _3111))) * _3128;
                                float _4159 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0));
                                float _3149 = (_3074 * _3051) * (((_3097 * 3.1415927410125732421875) * (isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0)))) / ((_3119 * _3119) * ((_3064 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3075 * _2918.z;
                                frontier_phi_75_pred_1 = _3075 * _2918.y;
                                frontier_phi_75_pred_2 = _3075 * _2918.x;
                                frontier_phi_75_pred_3 = _3149 * _2930.z;
                                frontier_phi_75_pred_4 = _3149 * _2930.y;
                                frontier_phi_75_pred_5 = _3149 * _2930.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3158 = frontier_phi_75_pred;
                            _3157 = frontier_phi_75_pred_1;
                            _3156 = frontier_phi_75_pred_2;
                            _3155 = frontier_phi_75_pred_3;
                            _3154 = frontier_phi_75_pred_4;
                            _3153 = frontier_phi_75_pred_5;
                            _2860 = _3156 + _2873;
                            _2861 = _3157 + _2874;
                            _2862 = _3158 + _2875;
                            _2857 = _3153 + _2870;
                            _2858 = _3154 + _2871;
                            _2859 = _3155 + _2872;
                            if (_2877 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2870 = _2857;
                                _2871 = _2858;
                                _2872 = _2859;
                                _2873 = _2860;
                                _2874 = _2861;
                                _2875 = _2862;
                                _2876 = _2877;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2862;
                        frontier_phi_69_pred_1 = _2861;
                        frontier_phi_69_pred_2 = _2860;
                        frontier_phi_69_pred_3 = _2859;
                        frontier_phi_69_pred_4 = _2858;
                        frontier_phi_69_pred_5 = _2857;
                    }
                    _2529 = frontier_phi_69_pred;
                    _2527 = frontier_phi_69_pred_1;
                    _2525 = frontier_phi_69_pred_2;
                    _2523 = frontier_phi_69_pred_3;
                    _2521 = frontier_phi_69_pred_4;
                    _2519 = frontier_phi_69_pred_5;
                    uint _2664 = _2663 + 1u;
                    if (_2664 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2657 = _2519;
                        _2658 = _2521;
                        _2659 = _2523;
                        _2660 = _2525;
                        _2661 = _2527;
                        _2662 = _2529;
                        _2663 = _2664;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2529;
                frontier_phi_57_58_ladder_1 = _2527;
                frontier_phi_57_58_ladder_2 = _2525;
                frontier_phi_57_58_ladder_3 = _2523;
                frontier_phi_57_58_ladder_4 = _2521;
                frontier_phi_57_58_ladder_5 = _2519;
            }
            else
            {
                frontier_phi_57_58_ladder = _2416;
                frontier_phi_57_58_ladder_1 = _2414;
                frontier_phi_57_58_ladder_2 = _2412;
                frontier_phi_57_58_ladder_3 = _2410;
                frontier_phi_57_58_ladder_4 = _2408;
                frontier_phi_57_58_ladder_5 = _2406;
            }
            _2518 = frontier_phi_57_58_ladder_5;
            _2520 = frontier_phi_57_58_ladder_4;
            _2522 = frontier_phi_57_58_ladder_3;
            _2524 = frontier_phi_57_58_ladder_2;
            _2526 = frontier_phi_57_58_ladder_1;
            _2528 = frontier_phi_57_58_ladder;
        }
        float _2533 = isnan(1.0) ? _578 : (isnan(_578) ? 1.0 : min(_578, 1.0));
        _2318 = (_2533 * _2524) + _1771;
        _2320 = (_2533 * _2526) + _1773;
        _2322 = (_2533 * _2528) + _1775;
        _2324 = ((_2518 * 0.039999999105930328369140625) * _2533) + _2104;
        _2326 = ((_2520 * 0.039999999105930328369140625) * _2533) + _2106;
        _2328 = ((_2522 * 0.039999999105930328369140625) * _2533) + _2108;
    }
    else
    {
        _2318 = _1771;
        _2320 = _1773;
        _2322 = _1775;
        _2324 = _2104;
        _2326 = _2106;
        _2328 = _2108;
    }
    float _4175 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _4186 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _4197 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    uint _2348 = _552 + 6u;
    float _2356 = _513 / cbSceneParam._m0[86u].x;
    float _2357 = _514 / cbSceneParam._m0[86u].y;
    vec4 _2371 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2356, _2357, (log2((isnan(cbSceneParam._m0[77u].w) ? _446 : (isnan(_446) ? cbSceneParam._m0[77u].w : min(_446, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2373 = _2371.x;
    float _2374 = _2371.y;
    float _2375 = _2371.z;
    float _2376 = _2371.w;
    float _2468;
    float _2470;
    float _2472;
    float _2474;
    if (_446 > cbSceneParam._m0[78u].w)
    {
        float _2431 = isnan(_446) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _446 : min(cbSceneParam._m0[80u].w, _446));
        float _2432 = _2431 / _446;
        float _2443 = _2432 * _498;
        float _2444 = _499 * _2432;
        float _2445 = (-0.0) - _2444;
        float _2446 = _2432 * _500;
        float _2448 = (cbSceneParam._m0[77u].w * _2445) / _2431;
        float _2449 = _2448 + cbSceneParam._m0[79u].w;
        float _2450 = cbSceneParam._m0[79u].w - _2444;
        float _2456 = sqrt(((_2443 * _2443) + (_2444 * _2444)) + (_2446 * _2446));
        float _2459 = (1.0 - (cbSceneParam._m0[77u].w / _2431)) * _2456;
        float _2464 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2466 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2619;
        if (abs((_2445 - _2448) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2619 = ((((_2449 > 0.0) ? exp2(_2464 * _2449) : (2.0 - exp2(_2466 * _2449))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2459;
        }
        else
        {
            float _2579 = 1.0 / cbSceneParam._m0[80u].x;
            float _2580 = isnan(_2450) ? _2449 : (isnan(_2449) ? _2450 : max(_2449, _2450));
            float _2581 = isnan(_2450) ? _2449 : (isnan(_2449) ? _2450 : min(_2449, _2450));
            float _2590 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : min(_2580, 0.0));
            float _2591 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : min(_2581, 0.0));
            _2619 = ((abs(_2456 / _2445) * cbSceneParam._m0[80u].y) * ((((_2590 - _2591) * 2.0) - ((exp2(_2464 * (isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0)))) - exp2(_2464 * (isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0))))) * _2579)) - ((exp2(_2466 * _2590) - exp2(_2466 * _2591)) * _2579))) + (_2459 * cbSceneParam._m0[80u].z);
        }
        vec4 _2621 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2356, _2357, 1.0), 0.0);
        float _2630 = exp2((_2619 * (-1.44269502162933349609375)) * (1.0 - _2621.w));
        float _2631 = log2(_2630);
        float _2647 = log2(_2376);
        _2468 = (exp2(_2647 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2631 * cbSceneParam._m0[78u].x)) * _2621.x) / cbSceneParam._m0[78u].x)) + _2373;
        _2470 = (exp2(_2647 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2631 * cbSceneParam._m0[78u].y)) * _2621.y) / cbSceneParam._m0[78u].y)) + _2374;
        _2472 = (exp2(_2647 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2631 * cbSceneParam._m0[78u].z)) * _2621.z) / cbSceneParam._m0[78u].z)) + _2375;
        _2474 = _2630 * _2376;
    }
    else
    {
        _2468 = _2373;
        _2470 = _2374;
        _2472 = _2375;
        _2474 = _2376;
    }
    float _2486 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2487 = _2486 == 3.0;
    float _2488 = log2(_2474);
    float _2495 = exp2(_2488 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * (_2318 + ((isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0))) * _578))) + ((_2324 + ((isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0))) * _1385)) * cbPerFrame._m0[3u].x));
    float _2496 = exp2(_2488 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0))) * (_2320 + ((isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0))) * _578))) + ((_2326 + ((isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0))) * _1385)) * cbPerFrame._m0[3u].x));
    float _2497 = exp2(_2488 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0))) * (_2322 + ((isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0))) * _578))) + ((_2328 + ((isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0))) * _1385)) * cbPerFrame._m0[3u].x));
    float _2506 = (_2486 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2506 * (_2487 ? _2495 : (_2495 + (cbSceneParam._m0[72u].w * _2468)));
    SV_Target.y = _2506 * (_2487 ? _2496 : (_2496 + (cbSceneParam._m0[72u].w * _2470)));
    SV_Target.z = _2506 * (_2487 ? _2497 : (_2497 + (cbSceneParam._m0[72u].w * _2472)));
    SV_Target.w = cbInstanceData._m0[_2348].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2348].w;
}


