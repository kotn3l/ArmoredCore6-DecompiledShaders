#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ENEParts_AMSN_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ENEParts_AMSN_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D P_ENEParts_AMSN_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D P_ENEParts_AMSN_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _865;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _226 = texture(sampler2D(P_ENEParts_AMSN_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _232 = _226.x * cbMtdParam._m0[9u].x;
    float _233 = _226.y * cbMtdParam._m0[9u].y;
    float _234 = _226.z * cbMtdParam._m0[9u].z;
    vec4 _246 = texture(sampler2D(P_ENEParts_AMSN_Emissive_Glow_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _253 = cbMtdParam._m0[11u].x + _246.x;
    vec4 _265 = texture(sampler2D(P_ENEParts_AMSN_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _269 = _265.z;
    float _273 = (_265.x * 2.0) + (-1.0);
    float _275 = (_265.y * 2.0) + (-1.0);
    float _276 = dot(vec2(_273, _275), vec2(_273, _275));
    float _3528 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _282 = sqrt(1.0 - (isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0))));
    vec4 _301 = texture(sampler2D(P_ENEParts_AMSN_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _308 = fma(_282, _196 * NORMAL.x, fma(_275, _203 * TANGENT.x, (_189 * _182) * _273));
    float _311 = fma(_282, _196 * NORMAL.y, fma(_275, _203 * TANGENT.y, (_189 * _183) * _273));
    float _314 = fma(_282, _196 * NORMAL.z, fma(_275, _203 * TANGENT.z, (_189 * _184) * _273));
    float _318 = inversesqrt(dot(vec3(_308, _311, _314), vec3(_308, _311, _314)));
    float _319 = _318 * _308;
    float _320 = _318 * _311;
    float _321 = _318 * _314;
    float _3539 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _322 = isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0));
    float _3550 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3561 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _3572 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3583 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _326 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
    float _342 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _383 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _393 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _383);
    float _394 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _383);
    float _395 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _383);
    float _399 = inversesqrt(dot(vec3(_393, _394, _395), vec3(_393, _394, _395)));
    float _400 = _393 * _399;
    float _401 = _394 * _399;
    float _402 = _395 * _399;
    float _408 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _409 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _430 = fma(_321, cbSceneParam._m0[5u].z, fma(_320, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _319));
    float _433 = fma(_321, cbSceneParam._m0[6u].z, fma(_320, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _319));
    float _436 = fma(_321, cbSceneParam._m0[7u].z, fma(_320, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _319));
    uint _449 = uint(roundEven(NORMAL.w)) * 13u;
    uint _451 = _449 + 9u;
    uint _452 = _451 + uint(cbMatDynParam._m0[0u].w);
    float _458 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0)))) * cbInstanceData._m0[_452].x;
    float _459 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0)))) * cbInstanceData._m0[_452].y;
    float _460 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0)))) * cbInstanceData._m0[_452].z;
    float _3594 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _461 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
    float _3605 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _462 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
    float _3616 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _463 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
    float _464 = 1.0 - _326;
    float _465 = _461 * _464;
    float _466 = _462 * _464;
    float _467 = _463 * _464;
    float _472 = (_461 + (-0.039999999105930328369140625)) * _326;
    float _473 = (_462 + (-0.039999999105930328369140625)) * _326;
    float _474 = (_463 + (-0.039999999105930328369140625)) * _326;
    float _475 = _472 + 0.039999999105930328369140625;
    float _477 = _473 + 0.039999999105930328369140625;
    float _478 = _474 + 0.039999999105930328369140625;
    vec4 _487 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _408, cbSceneParam._m0[86u].y * _409));
    float _490 = _487.x * TEXCOORD.z;
    float _491 = dot(vec3(_319, _320, _321), vec3(_400, _401, _402));
    float _494 = _491 * 2.0;
    float _498 = (_494 * _319) - _400;
    float _499 = (_494 * _320) - _401;
    float _500 = (_494 * _321) - _402;
    float _504 = abs(dot(vec3(_400, _401, _402), vec3(_319, _320, _321)));
    float _3627 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _506 = sqrt(_322);
    float _519 = exp2((_506 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_506 * 3.0));
    float _525 = (1.0 - _519) * ((_506 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _526 = _519 * _506;
    float _554 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _558 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _562 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _864;
    float _866;
    float _867;
    float _868;
    float _869;
    float _870;
    float _871;
    float _872;
    float _873;
    float _874;
    float _875;
    float _876;
    float _877;
    float _878;
    float _879;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _589 = fma(_562, cbModelParam._m0[26u].z, fma(_558, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _554));
        float _593 = fma(_562, cbModelParam._m0[27u].z, fma(_558, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _554));
        float _597 = fma(_562, cbModelParam._m0[28u].z, fma(_558, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _554));
        float _622 = _554 + _319;
        float _623 = _558 + _320;
        float _624 = _562 + _321;
        float _634 = fma(_624, cbModelParam._m0[26u].z, fma(_623, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _622)) - _589;
        float _635 = fma(_624, cbModelParam._m0[27u].z, fma(_623, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _622)) - _593;
        float _636 = fma(_624, cbModelParam._m0[28u].z, fma(_623, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _622)) - _597;
        float _640 = inversesqrt(dot(vec3(_634, _635, _636), vec3(_634, _635, _636)));
        float _653 = ((_640 * _634) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_589 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _654 = ((_640 * _635) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_593 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _655 = ((_640 * _636) / cbModelParam._m0[34u].z) + ((((((_597 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _658 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_653, _654, _655), 0.0);
        vec4 _665 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_653, _654, _655), 0.0);
        vec4 _672 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_653, _654, _655), 0.0);
        vec4 _679 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_653, _654, _655), 0.0);
        float _692 = exp2((_658.w + (-0.5)) * 20.0) * 2.0;
        float _693 = _692 * (_658.x + (-0.5));
        float _694 = _692 * (_658.y + (-0.5));
        float _695 = _692 * (_658.z + (-0.5));
        float _702 = exp2((_665.w + (-0.5)) * 20.0) * 2.0;
        float _703 = _702 * (_665.x + (-0.5));
        float _704 = _702 * (_665.y + (-0.5));
        float _705 = _702 * (_665.z + (-0.5));
        float _712 = exp2((_672.w + (-0.5)) * 20.0) * 2.0;
        float _713 = _712 * (_672.x + (-0.5));
        float _714 = _712 * (_672.y + (-0.5));
        float _715 = _712 * (_672.z + (-0.5));
        float _722 = exp2((_679.w + (-0.5)) * 20.0) * 2.0;
        float _723 = _722 * (_679.x + (-0.5));
        float _724 = _722 * (_679.y + (-0.5));
        float _725 = _722 * (_679.z + (-0.5));
        float _726 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
        float _727 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
        float _728 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
        float _729 = _693 * 0.5;
        float _730 = _703 * 0.5;
        float _731 = _713 * 0.5;
        float _732 = dot(vec3(_729, _730, _731), vec3(_729, _730, _731));
        float _737 = (_732 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_732);
        float _746 = (dot(vec3(_319, _320, _321), vec3(_737 * _729, _737 * _730, _737 * _731)) + 1.0) * 0.5;
        float _3653 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
        float _756 = sqrt(((_730 * _730) + (_729 * _729)) + (_731 * _731)) / (_726 + 9.9999997473787516355514526367188e-06);
        float _3664 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
        float _757 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
        float _758 = _757 * 2.0;
        float _762 = (1.0 - _757) / (_757 + 1.0);
        float _3675 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
        float _763 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
        float _772 = ((((1.0 - _763) * (_758 + 2.0)) * exp2(log2(isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0))) * (_758 + 1.0))) + _763) * _726;
        float _773 = _694 * 0.5;
        float _774 = _704 * 0.5;
        float _775 = _714 * 0.5;
        float _776 = dot(vec3(_773, _774, _775), vec3(_773, _774, _775));
        float _781 = (_776 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_776);
        float _789 = (dot(vec3(_319, _320, _321), vec3(_781 * _773, _781 * _774, _781 * _775)) + 1.0) * 0.5;
        float _3686 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
        float _798 = sqrt(((_774 * _774) + (_773 * _773)) + (_775 * _775)) / (_727 + 9.9999997473787516355514526367188e-06);
        float _3697 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
        float _799 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
        float _800 = _799 * 2.0;
        float _804 = (1.0 - _799) / (_799 + 1.0);
        float _3708 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
        float _805 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
        float _814 = ((((1.0 - _805) * (_800 + 2.0)) * exp2(log2(isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0))) * (_800 + 1.0))) + _805) * _727;
        float _815 = _695 * 0.5;
        float _816 = _705 * 0.5;
        float _817 = _715 * 0.5;
        float _818 = dot(vec3(_815, _816, _817), vec3(_815, _816, _817));
        float _823 = (_818 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_818);
        float _831 = (dot(vec3(_319, _320, _321), vec3(_823 * _815, _823 * _816, _823 * _817)) + 1.0) * 0.5;
        float _3719 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _840 = sqrt(((_816 * _816) + (_815 * _815)) + (_817 * _817)) / (_728 + 9.9999997473787516355514526367188e-06);
        float _3730 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
        float _841 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
        float _842 = _841 * 2.0;
        float _846 = (1.0 - _841) / (_841 + 1.0);
        float _3741 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
        float _847 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
        float _856 = ((((1.0 - _847) * (_842 + 2.0)) * exp2(log2(isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0))) * (_842 + 1.0))) + _847) * _728;
        _864 = _695;
        _866 = _694;
        _867 = _693;
        _868 = _705;
        _869 = _704;
        _870 = _703;
        _871 = _715;
        _872 = _714;
        _873 = _713;
        _874 = _728;
        _875 = _727;
        _876 = _726;
        _877 = cbModelParam._m0[36u].z * (isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0)));
        _878 = cbModelParam._m0[36u].z * (isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0)));
        _879 = cbModelParam._m0[36u].z * (isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0)));
    }
    else
    {
        _864 = _865;
        _866 = _865;
        _867 = _865;
        _868 = _865;
        _869 = _865;
        _870 = _865;
        _871 = _865;
        _872 = _865;
        _873 = _865;
        _874 = _865;
        _875 = _865;
        _876 = _865;
        _877 = 0.0;
        _878 = 0.0;
        _879 = 0.0;
    }
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _905 = fma(_562, cbModelParam._m0[30u].z, fma(_558, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _554));
        float _909 = fma(_562, cbModelParam._m0[31u].z, fma(_558, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _554));
        float _913 = fma(_562, cbModelParam._m0[32u].z, fma(_558, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _554));
        float _936 = _554 + _319;
        float _937 = _558 + _320;
        float _938 = _562 + _321;
        float _948 = fma(_938, cbModelParam._m0[30u].z, fma(_937, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _936)) - _905;
        float _949 = fma(_938, cbModelParam._m0[31u].z, fma(_937, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _936)) - _909;
        float _950 = fma(_938, cbModelParam._m0[32u].z, fma(_937, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _936)) - _913;
        float _954 = inversesqrt(dot(vec3(_948, _949, _950), vec3(_948, _949, _950)));
        float _967 = ((_954 * _948) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_905 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _968 = ((_954 * _949) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_909 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _969 = ((_954 * _950) / cbModelParam._m0[35u].z) + ((((((_913 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _971 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_967, _968, _969), 0.0);
        vec4 _978 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_967, _968, _969), 0.0);
        vec4 _985 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_967, _968, _969), 0.0);
        vec4 _992 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_967, _968, _969), 0.0);
        float _1004 = exp2((_971.w + (-0.5)) * 20.0) * 2.0;
        float _1005 = _1004 * (_971.x + (-0.5));
        float _1006 = _1004 * (_971.y + (-0.5));
        float _1007 = _1004 * (_971.z + (-0.5));
        float _1014 = exp2((_978.w + (-0.5)) * 20.0) * 2.0;
        float _1015 = _1014 * (_978.x + (-0.5));
        float _1016 = _1014 * (_978.y + (-0.5));
        float _1017 = _1014 * (_978.z + (-0.5));
        float _1024 = exp2((_985.w + (-0.5)) * 20.0) * 2.0;
        float _1025 = _1024 * (_985.x + (-0.5));
        float _1026 = _1024 * (_985.y + (-0.5));
        float _1027 = _1024 * (_985.z + (-0.5));
        float _1034 = exp2((_992.w + (-0.5)) * 20.0) * 2.0;
        float _1035 = _1034 * (_992.x + (-0.5));
        float _1036 = _1034 * (_992.y + (-0.5));
        float _1037 = _1034 * (_992.z + (-0.5));
        float _1038 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1039 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1040 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1041 = _1005 * 0.5;
        float _1042 = _1015 * 0.5;
        float _1043 = _1025 * 0.5;
        float _1044 = dot(vec3(_1041, _1042, _1043), vec3(_1041, _1042, _1043));
        float _1049 = (_1044 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1044);
        float _1057 = (dot(vec3(_319, _320, _321), vec3(_1049 * _1041, _1049 * _1042, _1049 * _1043)) + 1.0) * 0.5;
        float _3782 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1066 = sqrt(((_1042 * _1042) + (_1041 * _1041)) + (_1043 * _1043)) / (_1038 + 9.9999997473787516355514526367188e-06);
        float _3793 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1067 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
        float _1068 = _1067 * 2.0;
        float _1072 = (1.0 - _1067) / (_1067 + 1.0);
        float _3804 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1073 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
        float _1082 = ((((1.0 - _1073) * (_1068 + 2.0)) * exp2(log2(isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0))) * (_1068 + 1.0))) + _1073) * _1038;
        float _1083 = _1006 * 0.5;
        float _1084 = _1016 * 0.5;
        float _1085 = _1026 * 0.5;
        float _1086 = dot(vec3(_1083, _1084, _1085), vec3(_1083, _1084, _1085));
        float _1091 = (_1086 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1086);
        float _1099 = (dot(vec3(_319, _320, _321), vec3(_1091 * _1083, _1091 * _1084, _1091 * _1085)) + 1.0) * 0.5;
        float _3815 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1108 = sqrt(((_1084 * _1084) + (_1083 * _1083)) + (_1085 * _1085)) / (_1039 + 9.9999997473787516355514526367188e-06);
        float _3826 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
        float _1110 = _1109 * 2.0;
        float _1114 = (1.0 - _1109) / (_1109 + 1.0);
        float _3837 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
        float _1124 = ((((1.0 - _1115) * (_1110 + 2.0)) * exp2(log2(isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0))) * (_1110 + 1.0))) + _1115) * _1039;
        float _1125 = _1007 * 0.5;
        float _1126 = _1017 * 0.5;
        float _1127 = _1027 * 0.5;
        float _1128 = dot(vec3(_1125, _1126, _1127), vec3(_1125, _1126, _1127));
        float _1133 = (_1128 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1128);
        float _1141 = (dot(vec3(_319, _320, _321), vec3(_1133 * _1125, _1133 * _1126, _1133 * _1127)) + 1.0) * 0.5;
        float _3848 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1150 = sqrt(((_1126 * _1126) + (_1125 * _1125)) + (_1127 * _1127)) / (_1040 + 9.9999997473787516355514526367188e-06);
        float _3859 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
        float _1152 = _1151 * 2.0;
        float _1156 = (1.0 - _1151) / (_1151 + 1.0);
        float _3870 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
        float _1166 = ((((1.0 - _1157) * (_1152 + 2.0)) * exp2(log2(isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0))) * (_1152 + 1.0))) + _1157) * _1040;
        _1174 = _1007;
        _1175 = _1006;
        _1176 = _1005;
        _1177 = _1017;
        _1178 = _1016;
        _1179 = _1015;
        _1180 = _1027;
        _1181 = _1026;
        _1182 = _1025;
        _1183 = _1040;
        _1184 = _1039;
        _1185 = _1038;
        _1186 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0)));
        _1187 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0)));
        _1188 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0)));
    }
    else
    {
        _1174 = _865;
        _1175 = _865;
        _1176 = _865;
        _1177 = _865;
        _1178 = _865;
        _1179 = _865;
        _1180 = _865;
        _1181 = _865;
        _1182 = _865;
        _1183 = _865;
        _1184 = _865;
        _1185 = _865;
        _1186 = 0.0;
        _1187 = 0.0;
        _1188 = 0.0;
    }
    float _1198 = (cbModelParam._m0[1u].x * (_1186 - _877)) + _877;
    float _1199 = (cbModelParam._m0[1u].x * (_1187 - _878)) + _878;
    float _1200 = (cbModelParam._m0[1u].x * (_1188 - _879)) + _879;
    float _1221 = fma(_1200, cbSceneParam._m0[89u].z, fma(_1199, cbSceneParam._m0[89u].y, _1198 * cbSceneParam._m0[89u].x));
    float _1224 = fma(_1200, cbSceneParam._m0[90u].z, fma(_1199, cbSceneParam._m0[90u].y, _1198 * cbSceneParam._m0[90u].x));
    float _1227 = fma(_1200, cbSceneParam._m0[91u].z, fma(_1199, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1198));
    float _1242 = _498 * 0.5;
    float _1243 = _499 * 0.5;
    float _1244 = _500 * 0.5;
    float _1245 = dot(vec4(_1242, _1243, _1244, 1.0), vec4(_1176, _1179, _1182, _1185));
    float _1248 = dot(vec4(_1242, _1243, _1244, 1.0), vec4(_1175, _1178, _1181, _1184));
    float _1251 = dot(vec4(_1242, _1243, _1244, 1.0), vec4(_1174, _1177, _1180, _1183));
    float _1285;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1258 = dot(vec4(_1242, _1243, _1244, 1.0), vec4(_864, _868, _871, _874));
        float _1262 = dot(vec4(_1242, _1243, _1244, 1.0), vec4(_866, _869, _872, _875));
        float _1266 = dot(vec4(_1242, _1243, _1244, 1.0), vec4(_867, _870, _873, _876));
        float _1273 = dot(vec4(cbModelParam._m0[39u]), vec4(_1242, _1243, _1244, 1.0));
        _1285 = dot(vec3(isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0)), isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0)), isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1273) ? 0.0 : (isnan(0.0) ? _1273 : max(0.0, _1273))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1285 = 1.0;
    }
    float _1296;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1287 = dot(vec4(cbModelParam._m0[40u]), vec4(_1242, _1243, _1244, 1.0));
        _1296 = dot(vec3(isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0)), isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0)), isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1287) ? 0.0 : (isnan(0.0) ? _1287 : max(0.0, _1287))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1296 = 1.0;
    }
    float _1300 = (_1296 * cbModelParam._m0[1u].x) + (_1285 * (1.0 - cbModelParam._m0[1u].x));
    float _1310 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _322);
    float _1311 = isnan(_1310) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1310 : min(cbModelParam._m0[25u].z, _1310));
    float _1393;
    float _1395;
    float _1397;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1360 = fma(_562, cbModelParam._m0[13u].z, fma(_558, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _554)) + cbModelParam._m0[13u].w;
        float _1364 = fma(_562, cbModelParam._m0[14u].z, fma(_558, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _554)) + cbModelParam._m0[14u].w;
        float _1368 = fma(_562, cbModelParam._m0[15u].z, fma(_558, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _554)) + cbModelParam._m0[15u].w;
        float _1371 = fma(_500, cbModelParam._m0[13u].z, fma(_499, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _498));
        float _1374 = fma(_500, cbModelParam._m0[14u].z, fma(_499, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _498));
        float _1377 = fma(_500, cbModelParam._m0[15u].z, fma(_499, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _498));
        float _1405;
        if (_1371 > 0.0)
        {
            _1405 = abs((1.0 - _1360) / _1371);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1371 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1360 + 1.0) / _1371);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1405 = frontier_phi_14_12_ladder;
        }
        float _1580;
        if (_1374 > 0.0)
        {
            _1580 = abs((1.0 - _1364) / _1374);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1374 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1364 + 1.0) / _1374);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1580 = frontier_phi_23_19_ladder;
        }
        float _1876;
        if (_1377 > 0.0)
        {
            _1876 = abs((1.0 - _1368) / _1377);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1377 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1368 + 1.0) / _1377);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1876 = frontier_phi_35_30_ladder;
        }
        float _1878 = isnan(_1580) ? _1405 : (isnan(_1405) ? _1580 : min(_1405, _1580));
        float _1879 = isnan(_1876) ? _1878 : (isnan(_1878) ? _1876 : min(_1878, _1876));
        float _1883 = (_1879 * _1371) + _1360;
        float _1884 = (_1879 * _1374) + _1364;
        float _1885 = (_1879 * _1377) + _1368;
        float _1886 = _1879 * 9.9999997473787516355514526367188e-05;
        float _1888 = (-1.0) - _1886;
        float _1890 = _1886 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1885 > _1890) || ((_1885 < _1888) || ((_1884 > _1890) || ((_1884 < _1888) || ((_1883 < _1888) || (_1883 > _1890))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2030 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1885, cbModelParam._m0[9u].z, fma(_1884, cbModelParam._m0[9u].y, _1883 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1885, cbModelParam._m0[10u].z, fma(_1884, cbModelParam._m0[10u].y, _1883 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1885, cbModelParam._m0[11u].z, fma(_1884, cbModelParam._m0[11u].y, _1883 * cbModelParam._m0[11u].x))), _1311);
            frontier_phi_13_35_ladder = _2030.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2030.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2030.x * cbModelParam._m0[1u].y;
        }
        _1393 = frontier_phi_13_35_ladder_2;
        _1395 = frontier_phi_13_35_ladder_1;
        _1397 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1381 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_498, _499, _500), _1311);
        _1393 = _1381.x * cbModelParam._m0[1u].y;
        _1395 = _1381.y * cbModelParam._m0[1u].y;
        _1397 = _1381.z * cbModelParam._m0[1u].y;
    }
    float _1401 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _322);
    float _1402 = isnan(_1401) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1401 : min(cbModelParam._m0[25u].w, _1401));
    float _1495;
    float _1497;
    float _1499;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1459 = fma(_562, cbModelParam._m0[21u].z, fma(_558, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _554)) + cbModelParam._m0[21u].w;
        float _1463 = fma(_562, cbModelParam._m0[22u].z, fma(_558, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _554)) + cbModelParam._m0[22u].w;
        float _1467 = fma(_562, cbModelParam._m0[23u].z, fma(_558, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _554)) + cbModelParam._m0[23u].w;
        float _1470 = fma(_500, cbModelParam._m0[21u].z, fma(_499, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _498));
        float _1473 = fma(_500, cbModelParam._m0[22u].z, fma(_499, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _498));
        float _1476 = fma(_500, cbModelParam._m0[23u].z, fma(_499, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _498));
        float _1585;
        if (_1470 > 0.0)
        {
            _1585 = abs((1.0 - _1459) / _1470);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1470 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1459 + 1.0) / _1470);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1585 = frontier_phi_25_21_ladder;
        }
        float _1903;
        if (_1473 > 0.0)
        {
            _1903 = abs((1.0 - _1463) / _1473);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1473 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1463 + 1.0) / _1473);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1903 = frontier_phi_37_32_ladder;
        }
        float _2241;
        if (_1476 > 0.0)
        {
            _2241 = abs((1.0 - _1467) / _1476);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1476 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1467 + 1.0) / _1476);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2241 = frontier_phi_47_44_ladder;
        }
        float _2243 = isnan(_1903) ? _1585 : (isnan(_1585) ? _1903 : min(_1585, _1903));
        float _2244 = isnan(_2241) ? _2243 : (isnan(_2243) ? _2241 : min(_2243, _2241));
        float _2248 = (_2244 * _1470) + _1459;
        float _2249 = (_2244 * _1473) + _1463;
        float _2250 = (_2244 * _1476) + _1467;
        float _2251 = _2244 * 9.9999997473787516355514526367188e-05;
        float _2252 = (-1.0) - _2251;
        float _2254 = _2251 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2250 > _2254) || ((_2250 < _2252) || ((_2249 > _2254) || ((_2249 < _2252) || ((_2248 < _2252) || (_2248 > _2254))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2372 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2250, cbModelParam._m0[17u].z, fma(_2249, cbModelParam._m0[17u].y, _2248 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2250, cbModelParam._m0[18u].z, fma(_2249, cbModelParam._m0[18u].y, _2248 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2250, cbModelParam._m0[19u].z, fma(_2249, cbModelParam._m0[19u].y, _2248 * cbModelParam._m0[19u].x))), _1402);
            frontier_phi_22_47_ladder = _2372.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2372.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2372.x * cbModelParam._m0[1u].z;
        }
        _1495 = frontier_phi_22_47_ladder_2;
        _1497 = frontier_phi_22_47_ladder_1;
        _1499 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1479 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_498, _499, _500), _1402);
        _1495 = _1479.x * cbModelParam._m0[1u].z;
        _1497 = _1479.y * cbModelParam._m0[1u].z;
        _1499 = _1479.z * cbModelParam._m0[1u].z;
    }
    float _1512 = (((_525 * _475) + _526) * _490) * ((cbModelParam._m0[1u].w * (_1495 - _1393)) + _1393);
    float _1514 = (((_525 * _477) + _526) * _490) * ((cbModelParam._m0[1u].w * (_1497 - _1395)) + _1395);
    float _1516 = (((_525 * _478) + _526) * _490) * ((cbModelParam._m0[1u].w * (_1499 - _1397)) + _1397);
    float _1519 = fma(_1516, cbSceneParam._m0[89u].z, fma(_1514, cbSceneParam._m0[89u].y, _1512 * cbSceneParam._m0[89u].x));
    float _1522 = fma(_1516, cbSceneParam._m0[90u].z, fma(_1514, cbSceneParam._m0[90u].y, _1512 * cbSceneParam._m0[90u].x));
    float _1525 = fma(_1516, cbSceneParam._m0[91u].z, fma(_1514, cbSceneParam._m0[91u].y, _1512 * cbSceneParam._m0[91u].x));
    float _1559 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1563 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1567 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1571 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1572 = _1559 / _1571;
    float _1573 = _1563 / _1571;
    float _1574 = _1567 / _1571;
    float _1721;
    float _1722;
    float _1723;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1601 = ((uint(_1574 > cbSceneParam._m0[59u].y) + uint(_1574 > cbSceneParam._m0[59u].x)) + uint(_1574 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1602 = _1601 + 43u;
        uint _1610 = _1601 + 44u;
        uint _1618 = _1601 + 45u;
        uint _1626 = _1601 + 46u;
        float _1637 = fma(_1571, cbSceneParam._m0[_1602].w, fma(_1567, cbSceneParam._m0[_1602].z, fma(_1563, cbSceneParam._m0[_1602].y, _1559 * cbSceneParam._m0[_1602].x)));
        float _1641 = fma(_1571, cbSceneParam._m0[_1610].w, fma(_1567, cbSceneParam._m0[_1610].z, fma(_1563, cbSceneParam._m0[_1610].y, _1559 * cbSceneParam._m0[_1610].x)));
        float _1649 = fma(_1571, cbSceneParam._m0[_1626].w, fma(_1567, cbSceneParam._m0[_1626].z, fma(_1563, cbSceneParam._m0[_1626].y, _1559 * cbSceneParam._m0[_1626].x)));
        float _1654 = cbSceneParam._m0[33u].z * _1649;
        float _1656 = cbSceneParam._m0[33u].w * _1649;
        float _1659 = fma(_1571, cbSceneParam._m0[_1618].w, fma(_1567, cbSceneParam._m0[_1618].z, fma(_1563, cbSceneParam._m0[_1618].y, _1559 * cbSceneParam._m0[_1618].x))) / _1649;
        float _1707 = (cbSceneParam._m0[33u].x - sqrt(((_1573 * _1573) + (_1572 * _1572)) + (_1574 * _1574))) * cbSceneParam._m0[33u].y;
        float _3996 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
        float _1714 = (isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1654 + _1637) / _1649, (_1656 + _1641) / _1649), _1659), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1656 + _1637) / _1649, (_1641 - _1654) / _1649), _1659), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1637 - _1654) / _1649, (_1641 - _1656) / _1649), _1659), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1637 - _1656) / _1649, (_1654 + _1641) / _1649), _1659), 0.0)).x), vec4(0.25)));
        _1721 = 1.0 - (_1714 * cbSceneParam._m0[34u].x);
        _1722 = 1.0 - (_1714 * cbSceneParam._m0[34u].y);
        _1723 = 1.0 - (_1714 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1721 = 1.0;
        _1722 = 1.0;
        _1723 = 1.0;
    }
    float _1787;
    float _1789;
    float _1791;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1775 = fma(_1571, cbSceneParam._m0[63u].w, fma(_1567, cbSceneParam._m0[63u].z, fma(_1563, cbSceneParam._m0[63u].y, _1559 * cbSceneParam._m0[63u].x)));
        float _1776 = fma(_1571, cbSceneParam._m0[60u].w, fma(_1567, cbSceneParam._m0[60u].z, fma(_1563, cbSceneParam._m0[60u].y, _1559 * cbSceneParam._m0[60u].x))) / _1775;
        float _1777 = fma(_1571, cbSceneParam._m0[61u].w, fma(_1567, cbSceneParam._m0[61u].z, fma(_1563, cbSceneParam._m0[61u].y, _1559 * cbSceneParam._m0[61u].x))) / _1775;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1776 >= cbSceneParam._m0[64u].x) && (_1777 >= cbSceneParam._m0[64u].y)) && (_1776 <= cbSceneParam._m0[64u].z)) && (_1777 <= cbSceneParam._m0[64u].w))
        {
            float _1916 = fma(_1571, cbSceneParam._m0[62u].w, fma(_1567, cbSceneParam._m0[62u].z, fma(_1563, cbSceneParam._m0[62u].y, _1559 * cbSceneParam._m0[62u].x))) / _1775;
            float _1920 = isnan(cbSceneParam._m0[41u].w) ? _1916 : (isnan(_1916) ? cbSceneParam._m0[41u].w : max(_1916, cbSceneParam._m0[41u].w));
            float _1963 = (cbSceneParam._m0[33u].x - sqrt(((_1573 * _1573) + (_1572 * _1572)) + (_1574 * _1574))) * cbSceneParam._m0[33u].y;
            float _4012 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
            float _1970 = (isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1776, cbSceneParam._m0[33u].w + _1777), _1920), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1776, _1777 - cbSceneParam._m0[33u].z), _1920), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1776 - cbSceneParam._m0[33u].z, _1777 - cbSceneParam._m0[33u].w), _1920), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1776 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1777), _1920), 0.0)).x), vec4(0.25)));
            float _1974 = 1.0 - (_1970 * cbSceneParam._m0[34u].x);
            float _1975 = 1.0 - (_1970 * cbSceneParam._m0[34u].y);
            float _1976 = 1.0 - (_1970 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_1976) ? _1723 : (isnan(_1723) ? _1976 : min(_1723, _1976));
            frontier_phi_34_33_ladder_1 = isnan(_1975) ? _1722 : (isnan(_1722) ? _1975 : min(_1722, _1975));
            frontier_phi_34_33_ladder_2 = isnan(_1974) ? _1721 : (isnan(_1721) ? _1974 : min(_1721, _1974));
        }
        else
        {
            frontier_phi_34_33_ladder = _1723;
            frontier_phi_34_33_ladder_1 = _1722;
            frontier_phi_34_33_ladder_2 = _1721;
        }
        _1787 = frontier_phi_34_33_ladder_2;
        _1789 = frontier_phi_34_33_ladder_1;
        _1791 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1787 = _1721;
        _1789 = _1722;
        _1791 = _1723;
    }
    uvec4 _1796 = floatBitsToUint(cbInstanceData._m0[_449 + 5u]);
    uint _1798 = _1796.x * 14u;
    uint _1799 = _1798 + 13u;
    float _1806 = _490 + (-1.0);
    float _1811 = (cbLight._m0[_1799].x * _1806) + 1.0;
    float _1812 = (cbLight._m0[_1799].y * _1806) + 1.0;
    float _1813 = (cbLight._m0[_1799].z * _1806) + 1.0;
    float _1814 = (cbLight._m0[_1799].w * _1806) + 1.0;
    uint _1815 = _1798 + 5u;
    float _1821 = isnan(1.0) ? _1812 : (isnan(_1812) ? 1.0 : min(_1812, 1.0));
    uint _1825 = _1798 + 4u;
    float _1835 = isnan(1.0) ? _1811 : (isnan(_1811) ? 1.0 : min(_1811, 1.0));
    uint _1839 = _1798 | 1u;
    float _1850 = dot(vec3(cbLight._m0[_1798].xyz), vec3(_319, _320, _321));
    float _1853 = dot(vec3(cbLight._m0[_1839].xyz), vec3(_319, _320, _321));
    float _4048 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
    float _4059 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
    float _1858 = (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * 0.3183098733425140380859375;
    float _1860 = (isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) * 0.3183098733425140380859375;
    float _1867 = ((cbLight._m0[_1815].x * _1821) * _1860) + (((cbLight._m0[_1825].x * _1787) * _1835) * _1858);
    float _1868 = ((_1821 * cbLight._m0[_1815].y) * _1860) + (((cbLight._m0[_1825].y * _1789) * _1835) * _1858);
    float _1869 = ((_1821 * cbLight._m0[_1815].z) * _1860) + (((cbLight._m0[_1825].z * _1791) * _1835) * _1858);
    uvec4 _1873 = floatBitsToUint(cbLight._m0[_1798 + 12u]);
    bool _1875 = _1873.x == 0u;
    float _1977;
    float _1979;
    float _1981;
    if (_1875)
    {
        _1977 = _1867;
        _1979 = _1868;
        _1981 = _1869;
    }
    else
    {
        uint _1985 = _1798 + 6u;
        float _2001 = (dot(vec3(cbLight._m0[_1798 + 2u].xyz), vec3(_319, _320, _321)) * 0.5) + 0.5;
        float _2002 = _2001 * _2001;
        float _4070 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
        float _2003 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _2004 = isnan(1.0) ? _1813 : (isnan(_1813) ? 1.0 : min(_1813, 1.0));
        _1977 = (((cbLight._m0[_1985].x * 0.3183098733425140380859375) * _2003) * _2004) + _1867;
        _1979 = (((cbLight._m0[_1985].y * 0.3183098733425140380859375) * _2003) * _2004) + _1868;
        _1981 = (((cbLight._m0[_1985].z * 0.3183098733425140380859375) * _2003) * _2004) + _1869;
    }
    bool _1984 = _1873.y == 0u;
    float _2039;
    float _2041;
    float _2043;
    if (_1984)
    {
        _2039 = _1977;
        _2041 = _1979;
        _2043 = _1981;
    }
    else
    {
        uint _2212 = _1798 + 7u;
        float _2228 = (dot(vec3(cbLight._m0[_1798 + 3u].xyz), vec3(_319, _320, _321)) * 0.5) + 0.5;
        float _2229 = _2228 * _2228;
        float _4086 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
        float _2230 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
        float _2231 = isnan(1.0) ? _1814 : (isnan(_1814) ? 1.0 : min(_1814, 1.0));
        _2039 = (((cbLight._m0[_2212].x * 0.3183098733425140380859375) * _2230) * _2231) + _1977;
        _2041 = (((cbLight._m0[_2212].y * 0.3183098733425140380859375) * _2230) * _2231) + _1979;
        _2043 = (((cbLight._m0[_2212].z * 0.3183098733425140380859375) * _2230) * _2231) + _1981;
    }
    uint _2046 = _1798 + 8u;
    float _2059 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1798].w)) * _322) * 0.949999988079071044921875);
    float _2060 = _2059 * _2059;
    float _2061 = cbLight._m0[_1798].x + _400;
    float _2062 = cbLight._m0[_1798].y + _401;
    float _2063 = cbLight._m0[_1798].z + _402;
    float _2067 = inversesqrt(dot(vec3(_2061, _2062, _2063), vec3(_2061, _2062, _2063)));
    float _2068 = _2067 * _2061;
    float _2069 = _2067 * _2062;
    float _2070 = _2067 * _2063;
    float _2071 = dot(vec3(_319, _320, _321), vec3(cbLight._m0[_1798].xyz));
    float _4102 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
    float _2074 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
    float _4113 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _2075 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
    float _2076 = dot(vec3(_319, _320, _321), vec3(_2068, _2069, _2070));
    float _4124 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
    float _2079 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
    float _2080 = dot(vec3(cbLight._m0[_1798].xyz), vec3(_2068, _2069, _2070));
    float _4135 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
    float _2084 = _2060 * _2060;
    float _2088 = ((_2079 * _2079) * (_2084 + (-1.0))) + 1.0;
    float _2096 = exp2(log2(1.0 - (isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0)))) * 5.0);
    float _2097 = 0.959999978542327880859375 - _472;
    float _2099 = 0.959999978542327880859375 - _473;
    float _2100 = 0.959999978542327880859375 - _474;
    float _2107 = 1.0 - _2060;
    float _2118 = (0.5 / (((_2075 * ((_2074 * _2107) + _2060)) + 9.9999999392252902907785028219223e-09) + (((_2075 * _2107) + _2060) * _2074))) * _2074;
    float _4146 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
    float _2120 = (isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * (_2084 / ((_2088 * _2088) * 3.141590118408203125));
    uint _2134 = _1798 + 9u;
    float _2145 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1839].w)) * _322) * 0.949999988079071044921875);
    float _2146 = _2145 * _2145;
    float _2147 = cbLight._m0[_1839].x + _400;
    float _2148 = cbLight._m0[_1839].y + _401;
    float _2149 = cbLight._m0[_1839].z + _402;
    float _2153 = inversesqrt(dot(vec3(_2147, _2148, _2149), vec3(_2147, _2148, _2149)));
    float _2154 = _2153 * _2147;
    float _2155 = _2153 * _2148;
    float _2156 = _2153 * _2149;
    float _2157 = dot(vec3(_319, _320, _321), vec3(cbLight._m0[_1839].xyz));
    float _4157 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
    float _2160 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
    float _2161 = dot(vec3(_319, _320, _321), vec3(_2154, _2155, _2156));
    float _4168 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
    float _2164 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
    float _2165 = dot(vec3(cbLight._m0[_1839].xyz), vec3(_2154, _2155, _2156));
    float _4179 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
    float _2169 = _2146 * _2146;
    float _2173 = ((_2164 * _2164) * (_2169 + (-1.0))) + 1.0;
    float _2180 = exp2(log2(1.0 - (isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0)))) * 5.0);
    float _2187 = 1.0 - _2146;
    float _2197 = (0.5 / (((_2075 * ((_2160 * _2187) + _2146)) + 9.9999999392252902907785028219223e-09) + (((_2075 * _2187) + _2146) * _2160))) * _2160;
    float _4190 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
    float _2199 = (isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * (_2169 / ((_2173 * _2173) * 3.141590118408203125));
    float _2209 = (((((_2180 * _2097) + _475) * cbLight._m0[_2134].x) * _2199) * _1821) + ((((cbLight._m0[_2046].x * _1787) * ((_2096 * _2097) + _475)) * _2120) * _1835);
    float _2210 = (((((_2180 * _2099) + _477) * cbLight._m0[_2134].y) * _2199) * _1821) + ((((cbLight._m0[_2046].y * _1789) * ((_2096 * _2099) + _477)) * _2120) * _1835);
    float _2211 = (((((_2180 * _2100) + _478) * cbLight._m0[_2134].z) * _2199) * _1821) + ((((cbLight._m0[_2046].z * _1791) * ((_2096 * _2100) + _478)) * _2120) * _1835);
    float _2267;
    float _2269;
    float _2271;
    if (_1875)
    {
        _2267 = _2209;
        _2269 = _2210;
        _2271 = _2211;
    }
    else
    {
        uint _2273 = _1798 + 2u;
        uint _2277 = _1798 + 10u;
        float _2291 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2273].w)) * _322) * 0.949999988079071044921875);
        float _2292 = _2291 * _2291;
        float _2293 = cbLight._m0[_2273].x + _400;
        float _2294 = cbLight._m0[_2273].y + _401;
        float _2295 = cbLight._m0[_2273].z + _402;
        float _2299 = inversesqrt(dot(vec3(_2293, _2294, _2295), vec3(_2293, _2294, _2295)));
        float _2300 = _2299 * _2293;
        float _2301 = _2299 * _2294;
        float _2302 = _2299 * _2295;
        float _2303 = dot(vec3(_319, _320, _321), vec3(cbLight._m0[_2273].xyz));
        float _4201 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
        float _2306 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _2307 = dot(vec3(_319, _320, _321), vec3(_2300, _2301, _2302));
        float _4212 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
        float _2310 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _2311 = dot(vec3(cbLight._m0[_2273].xyz), vec3(_2300, _2301, _2302));
        float _4223 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
        float _2315 = _2292 * _2292;
        float _2319 = ((_2310 * _2310) * (_2315 + (-1.0))) + 1.0;
        float _2326 = exp2(log2(1.0 - (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0)))) * 5.0);
        float _2333 = 1.0 - _2292;
        float _2343 = (0.5 / (((_2075 * ((_2306 * _2333) + _2292)) + 9.9999999392252902907785028219223e-09) + (((_2075 * _2333) + _2292) * _2306))) * _2306;
        float _4234 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
        float _2345 = (isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * (_2315 / ((_2319 * _2319) * 3.141590118408203125));
        float _2346 = isnan(1.0) ? _1813 : (isnan(_1813) ? 1.0 : min(_1813, 1.0));
        _2267 = (((((_2326 * _2097) + _475) * cbLight._m0[_2277].x) * _2345) * _2346) + _2209;
        _2269 = (((((_2326 * _2099) + _477) * cbLight._m0[_2277].y) * _2345) * _2346) + _2210;
        _2271 = (((((_2326 * _2100) + _478) * cbLight._m0[_2277].z) * _2345) * _2346) + _2211;
    }
    float _2377;
    float _2379;
    float _2381;
    if (_1984)
    {
        _2377 = _2267;
        _2379 = _2269;
        _2381 = _2271;
    }
    else
    {
        uint _2388 = _1798 + 3u;
        uint _2392 = _1798 + 11u;
        float _2406 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2388].w)) * _322) * 0.949999988079071044921875);
        float _2407 = _2406 * _2406;
        float _2408 = cbLight._m0[_2388].x + _400;
        float _2409 = cbLight._m0[_2388].y + _401;
        float _2410 = cbLight._m0[_2388].z + _402;
        float _2414 = inversesqrt(dot(vec3(_2408, _2409, _2410), vec3(_2408, _2409, _2410)));
        float _2415 = _2414 * _2408;
        float _2416 = _2414 * _2409;
        float _2417 = _2414 * _2410;
        float _2418 = dot(vec3(_319, _320, _321), vec3(cbLight._m0[_2388].xyz));
        float _4250 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
        float _2421 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
        float _2422 = dot(vec3(_319, _320, _321), vec3(_2415, _2416, _2417));
        float _4261 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
        float _2425 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
        float _2426 = dot(vec3(cbLight._m0[_2388].xyz), vec3(_2415, _2416, _2417));
        float _4272 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
        float _2430 = _2407 * _2407;
        float _2434 = ((_2425 * _2425) * (_2430 + (-1.0))) + 1.0;
        float _2441 = exp2(log2(1.0 - (isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0)))) * 5.0);
        float _2448 = 1.0 - _2407;
        float _2458 = (0.5 / (((_2075 * ((_2421 * _2448) + _2407)) + 9.9999999392252902907785028219223e-09) + (((_2075 * _2448) + _2407) * _2421))) * _2421;
        float _4283 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
        float _2460 = (isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * (_2430 / ((_2434 * _2434) * 3.141590118408203125));
        float _2461 = isnan(1.0) ? _1814 : (isnan(_1814) ? 1.0 : min(_1814, 1.0));
        _2377 = (((((_2441 * _2097) + _475) * cbLight._m0[_2392].x) * _2460) * _2461) + _2267;
        _2379 = (((((_2441 * _2099) + _477) * cbLight._m0[_2392].y) * _2460) * _2461) + _2269;
        _2381 = (((((_2441 * _2100) + _478) * cbLight._m0[_2392].z) * _2460) * _2461) + _2271;
    }
    float _2527;
    float _2529;
    float _2531;
    float _2533;
    float _2535;
    float _2537;
    if (_1796.y == 0u)
    {
        uvec4 _2482 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2483 = _2482.x;
        uint _2494 = uint((float(_2482.y) * floor(float(uint(cbSceneParam._m0[85u].y * _409) / _2483))) + floor(float(uint(cbSceneParam._m0[85u].x * _408) / _2483)));
        float _2504 = (log2(_1574 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2505 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
        uint _2508 = uint(isnan(14.0) ? _2505 : (isnan(_2505) ? 14.0 : min(_2505, 14.0)));
        uvec4 _2513 = texelFetch(g_lightClusterGridBuffer, int(((_2508 << 2u) + (_2494 << 6u)) >> 2u));
        uint _2514 = _2513.x;
        uint _2515 = _2482.z;
        float _2629;
        float _2631;
        float _2633;
        float _2635;
        float _2637;
        float _2639;
        if (((((1u << ((_2515 >> 4u) & 15u)) + 4294967295u) & _2514) == 0u) || ((_2515 & 240u) == 0u))
        {
            _2629 = 0.0;
            _2631 = 0.0;
            _2633 = 0.0;
            _2635 = 0.0;
            _2637 = 0.0;
            _2639 = 0.0;
        }
        else
        {
            float _2630;
            float _2632;
            float _2634;
            float _2636;
            float _2638;
            float _2640;
            float _2783 = 0.0;
            float _2784 = 0.0;
            float _2785 = 0.0;
            float _2786 = 0.0;
            float _2787 = 0.0;
            float _2788 = 0.0;
            uint _2789 = 0u;
            uint _2798;
            bool _2799;
            for (;;)
            {
                _2798 = texelFetch(g_lightClassification, int((((_2508 << 5u) + (_2494 << 9u)) + (_2789 << 2u)) >> 2u)).x;
                _2799 = _2798 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2799)
                {
                    frontier_phi_66_pred = _2788;
                    frontier_phi_66_pred_1 = _2787;
                    frontier_phi_66_pred_2 = _2786;
                    frontier_phi_66_pred_3 = _2785;
                    frontier_phi_66_pred_4 = _2784;
                    frontier_phi_66_pred_5 = _2783;
                }
                else
                {
                    float _2907;
                    float _2908;
                    float _2909;
                    float _2910;
                    float _2911;
                    float _2912;
                    uint _2913;
                    _2907 = _2783;
                    _2908 = _2784;
                    _2909 = _2785;
                    _2910 = _2786;
                    _2911 = _2787;
                    _2912 = _2788;
                    _2913 = _2798;
                    float _2839;
                    float _2840;
                    float _2841;
                    float _2842;
                    float _2843;
                    float _2844;
                    for (;;)
                    {
                        uint _2917 = uint(findLSB(_2913)) + (_2789 << 5u);
                        uint _2914 = (_2913 + 4294967295u) & _2913;
                        uint _2919 = _2917 * 48u;
                        vec4 _2933 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2919)).x, texelFetch(g_PointLightRenderingBuffer, int(_2919 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2919 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2919 + 3u)).x));
                        uint _2939 = (_2917 * 48u) + 4u;
                        vec4 _2952 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2939)).x, texelFetch(g_PointLightRenderingBuffer, int(_2939 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2939 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2939 + 3u)).x));
                        uint _2958 = (_2917 * 48u) + 8u;
                        vec3 _2969 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2958)).x, texelFetch(g_PointLightRenderingBuffer, int(_2958 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2958 + 2u)).x));
                        float _2973 = _2933.x - _1572;
                        float _2974 = _2933.y - _1573;
                        float _2975 = _2933.z - _1574;
                        float _2976 = dot(vec3(_2973, _2974, _2975), vec3(_2973, _2974, _2975));
                        float _2979 = inversesqrt(_2976);
                        float _2980 = _2979 * _2973;
                        float _2981 = _2979 * _2974;
                        float _2982 = _2979 * _2975;
                        float _2983 = dot(vec3(_430, _433, _436), vec3(_2980, _2981, _2982));
                        float _2988 = 1.0 - (_2976 * _2933.w);
                        float _4309 = isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0));
                        float _2989 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
                        float _2990 = sqrt(_2976) * _2952.w;
                        float _2993 = 1.39999997615814208984375 / (_2990 + 1.39999997615814208984375);
                        float _2994 = _2993 * _2993;
                        float _2997 = ((1.0 - _2994) * _2983) + _2994;
                        float _3000 = _2990 * _2990;
                        float _3004 = ((isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0))) * _2989) / ((_3000 * 0.699999988079071044921875) + 1.0);
                        float _3008 = (-0.0) - _1572;
                        float _3009 = (-0.0) - _1573;
                        float _3010 = (-0.0) - _1574;
                        float _3014 = inversesqrt(dot(vec3(_3008, _3009, _3010), vec3(_3008, _3009, _3010)));
                        float _3015 = _3014 * _3008;
                        float _3016 = _3014 * _3009;
                        float _3017 = _3014 * _3010;
                        float _3024 = exp2(log2(1.0 / ((_3000 * 3.5) + 5.0)) * 0.25);
                        float _3025 = 1.0 - _506;
                        float _3032 = sqrt(1.0 - ((1.0 - (_3025 * _3025)) * (1.0 - (_3024 * _3024))));
                        float _3033 = _3032 * _3032;
                        float _3034 = _3033 * _3033;
                        float _3035 = _3015 + _2980;
                        float _3036 = _3016 + _2981;
                        float _3037 = _3017 + _2982;
                        float _3041 = inversesqrt(dot(vec3(_3035, _3036, _3037), vec3(_3035, _3036, _3037)));
                        float _3045 = dot(vec3(_430, _433, _436), vec3(_3015, _3016, _3017));
                        float _4325 = isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : max(_3045, 0.0));
                        float _3048 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
                        float _3049 = dot(vec3(_430, _433, _436), vec3(_3041 * _3035, _3041 * _3036, _3041 * _3037));
                        float _4336 = isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0));
                        float _3052 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
                        float _3056 = ((_3052 * _3052) * (_3034 + (-1.0))) + 1.0;
                        float _3057 = _2993 * _3033;
                        float _3058 = _3057 * _3057;
                        float _3061 = ((1.0 - _3058) * _2983) + _3058;
                        float _4347 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0));
                        float _3062 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
                        float _3063 = 1.0 - _3033;
                        float _3073 = (0.5 / (((_3062 * ((_3048 * _3063) + _3033)) + 9.9999999392252902907785028219223e-09) + (((_3062 * _3063) + _3033) * _3048))) * _3062;
                        float _4358 = isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0));
                        float _3084 = (((_3034 * 3.1415927410125732421875) * (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0)))) / ((_3056 * _3056) * ((_3000 * 2.1991131305694580078125) + 3.141590118408203125))) * _2989;
                        _2842 = (_3004 * _2952.x) + _2910;
                        _2843 = (_3004 * _2952.y) + _2911;
                        _2844 = (_3004 * _2952.z) + _2912;
                        _2839 = (_3084 * _2969.x) + _2907;
                        _2840 = (_3084 * _2969.y) + _2908;
                        _2841 = (_3084 * _2969.z) + _2909;
                        if (_2914 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2907 = _2839;
                            _2908 = _2840;
                            _2909 = _2841;
                            _2910 = _2842;
                            _2911 = _2843;
                            _2912 = _2844;
                            _2913 = _2914;
                        }
                    }
                    frontier_phi_66_pred = _2844;
                    frontier_phi_66_pred_1 = _2843;
                    frontier_phi_66_pred_2 = _2842;
                    frontier_phi_66_pred_3 = _2841;
                    frontier_phi_66_pred_4 = _2840;
                    frontier_phi_66_pred_5 = _2839;
                }
                _2640 = frontier_phi_66_pred;
                _2638 = frontier_phi_66_pred_1;
                _2636 = frontier_phi_66_pred_2;
                _2634 = frontier_phi_66_pred_3;
                _2632 = frontier_phi_66_pred_4;
                _2630 = frontier_phi_66_pred_5;
                uint _2790 = _2789 + 1u;
                if (_2790 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2783 = _2630;
                    _2784 = _2632;
                    _2785 = _2634;
                    _2786 = _2636;
                    _2787 = _2638;
                    _2788 = _2640;
                    _2789 = _2790;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2629 = _2630;
            _2631 = _2632;
            _2633 = _2634;
            _2635 = _2636;
            _2637 = _2638;
            _2639 = _2640;
        }
        uvec4 _2643 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2644 = _2643.z;
        uint _2646 = (_2644 >> 8u) & 15u;
        float _2751;
        float _2753;
        float _2755;
        float _2757;
        float _2759;
        float _2761;
        if (((4294967295u << _2646) & _2514) == 0u)
        {
            _2751 = _2629;
            _2753 = _2631;
            _2755 = _2633;
            _2757 = _2635;
            _2759 = _2637;
            _2761 = _2639;
        }
        else
        {
            float _2776 = inversesqrt(dot(vec3(_1572, _1573, _1574), vec3(_1572, _1573, _1574)));
            float _2777 = _2776 * _1572;
            float _2778 = _2776 * _1573;
            float _2779 = _2776 * _1574;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2646 < ((_2644 >> 12u) & 15u))
            {
                float _2752;
                float _2754;
                float _2756;
                float _2758;
                float _2760;
                float _2762;
                float _2890 = _2629;
                float _2891 = _2631;
                float _2892 = _2633;
                float _2893 = _2635;
                float _2894 = _2637;
                float _2895 = _2639;
                uint _2896 = _2646;
                uint _2905;
                bool _2906;
                for (;;)
                {
                    _2905 = texelFetch(g_lightClassification, int((((_2508 << 5u) + (_2494 << 9u)) + (_2896 << 2u)) >> 2u)).x;
                    _2906 = _2905 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2906)
                    {
                        frontier_phi_72_pred = _2895;
                        frontier_phi_72_pred_1 = _2894;
                        frontier_phi_72_pred_2 = _2893;
                        frontier_phi_72_pred_3 = _2892;
                        frontier_phi_72_pred_4 = _2891;
                        frontier_phi_72_pred_5 = _2890;
                    }
                    else
                    {
                        float _3089;
                        float _3090;
                        float _3091;
                        float _3092;
                        float _3093;
                        float _3094;
                        float _3385;
                        float _3386;
                        float _3387;
                        float _3388;
                        float _3389;
                        float _3390;
                        float _3102 = _2890;
                        float _3103 = _2891;
                        float _3104 = _2892;
                        float _3105 = _2893;
                        float _3106 = _2894;
                        float _3107 = _2895;
                        uint _3108 = _2905;
                        uint _3109;
                        vec4 _3134;
                        float _3135;
                        vec4 _3150;
                        vec3 _3162;
                        vec4 _3178;
                        vec4 _3194;
                        float _3241;
                        bool _3242;
                        for (;;)
                        {
                            uint _3119 = ((_2896 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3108));
                            _3109 = (_3108 + 4294967295u) & _3108;
                            uint _3121 = _3119 * 40u;
                            _3134 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3121)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 3u)).x));
                            _3135 = _3134.w;
                            uint _3137 = (_3119 * 40u) + 4u;
                            _3150 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3137)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 3u)).x));
                            uint _3152 = (_3119 * 40u) + 8u;
                            _3162 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3152)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 2u)).x));
                            uint _3165 = (_3119 * 40u) + 16u;
                            _3178 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3165)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 3u)).x));
                            uint _3181 = (_3119 * 40u) + 20u;
                            _3194 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3181)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 3u)).x));
                            uint _3197 = (_3119 * 40u) + 24u;
                            vec4 _3210 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3197)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 3u)).x));
                            uint _3216 = (_3119 * 40u) + 28u;
                            vec4 _3229 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3216)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 3u)).x));
                            _3241 = fma(_1574, _3229.z, fma(_1573, _3229.y, _3229.x * _1572)) + _3229.w;
                            _3242 = !((fma(_1574, _3210.z, fma(_1573, _3210.y, _3210.x * _1572)) + _3210.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3242)
                            {
                                float _3269 = _3134.x - _1572;
                                float _3270 = _3134.y - _1573;
                                float _3271 = _3134.z - _1574;
                                float _3272 = dot(vec3(_3269, _3270, _3271), vec3(_3269, _3270, _3271));
                                float _3275 = inversesqrt(_3272);
                                float _3276 = _3275 * _3269;
                                float _3277 = _3275 * _3270;
                                float _3278 = _3275 * _3271;
                                float _3282 = 1.0 - (_3272 / (_3135 * _3135));
                                float _4369 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0));
                                float _3283 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
                                float _3287 = sqrt(_3272) * _3150.w;
                                float _3289 = 1.39999997615814208984375 / (_3287 + 1.39999997615814208984375);
                                float _3290 = _3289 * _3289;
                                float _3293 = ((1.0 - _3290) * dot(vec3(_3276, _3277, _3278), vec3(_430, _433, _436))) + _3290;
                                float _3296 = _3287 * _3287;
                                float _3300 = (fma(_1574, _3178.z, fma(_1573, _3178.y, _3178.x * _1572)) + _3178.w) / _3241;
                                float _3301 = (fma(_1574, _3194.z, fma(_1573, _3194.y, _3194.x * _1572)) + _3194.w) / _3241;
                                float _3305 = 1.0 - dot(vec2(_3300, _3301), vec2(_3300, _3301));
                                float _4385 = isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0));
                                float _3306 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
                                float _3307 = _3306 * (((isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0))) * _3283) / ((_3296 * 0.699999988079071044921875) + 1.0));
                                float _3319 = exp2(log2(1.0 / ((_3296 * 3.5) + 5.0)) * 0.25);
                                float _3320 = 1.0 - _506;
                                float _3327 = sqrt(1.0 - ((1.0 - (_3320 * _3320)) * (1.0 - (_3319 * _3319))));
                                float _3328 = _3327 * _3327;
                                float _3329 = _3328 * _3328;
                                float _3330 = _3276 - _2777;
                                float _3331 = _3277 - _2778;
                                float _3332 = _3278 - _2779;
                                float _3336 = inversesqrt(dot(vec3(_3330, _3331, _3332), vec3(_3330, _3331, _3332)));
                                float _3340 = dot(vec3(_430, _433, _436), vec3((-0.0) - _2777, (-0.0) - _2778, (-0.0) - _2779));
                                float _4396 = isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : max(_3340, 0.0));
                                float _3343 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
                                float _3344 = dot(vec3(_430, _433, _436), vec3(_3336 * _3330, _3336 * _3331, _3336 * _3332));
                                float _4407 = isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0));
                                float _3347 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
                                float _3351 = ((_3347 * _3347) * (_3329 + (-1.0))) + 1.0;
                                float _3352 = _3289 * _3328;
                                float _3353 = _3352 * _3352;
                                float _3359 = ((1.0 - _3353) * dot(vec3(_430, _433, _436), vec3(_3276, _3277, _3278))) + _3353;
                                float _4418 = isnan(0.0) ? _3359 : (isnan(_3359) ? 0.0 : max(_3359, 0.0));
                                float _3360 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
                                float _3361 = 1.0 - _3328;
                                float _3371 = (0.5 / (((_3360 * ((_3343 * _3361) + _3328)) + 9.9999999392252902907785028219223e-09) + (((_3360 * _3361) + _3328) * _3343))) * _3360;
                                float _4429 = isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0));
                                float _3381 = (_3306 * _3283) * (((_3329 * 3.1415927410125732421875) * (isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0)))) / ((_3351 * _3351) * ((_3296 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3307 * _3150.y;
                                frontier_phi_78_pred_1 = _3307 * _3150.x;
                                frontier_phi_78_pred_2 = _3381 * _3162.z;
                                frontier_phi_78_pred_3 = _3381 * _3162.y;
                                frontier_phi_78_pred_4 = _3381 * _3162.x;
                                frontier_phi_78_pred_5 = _3307 * _3150.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3389 = frontier_phi_78_pred;
                            _3388 = frontier_phi_78_pred_1;
                            _3387 = frontier_phi_78_pred_2;
                            _3386 = frontier_phi_78_pred_3;
                            _3385 = frontier_phi_78_pred_4;
                            _3390 = frontier_phi_78_pred_5;
                            _3092 = _3388 + _3105;
                            _3093 = _3389 + _3106;
                            _3094 = _3390 + _3107;
                            _3089 = _3385 + _3102;
                            _3090 = _3386 + _3103;
                            _3091 = _3387 + _3104;
                            if (_3109 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3102 = _3089;
                                _3103 = _3090;
                                _3104 = _3091;
                                _3105 = _3092;
                                _3106 = _3093;
                                _3107 = _3094;
                                _3108 = _3109;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3094;
                        frontier_phi_72_pred_1 = _3093;
                        frontier_phi_72_pred_2 = _3092;
                        frontier_phi_72_pred_3 = _3091;
                        frontier_phi_72_pred_4 = _3090;
                        frontier_phi_72_pred_5 = _3089;
                    }
                    _2762 = frontier_phi_72_pred;
                    _2760 = frontier_phi_72_pred_1;
                    _2758 = frontier_phi_72_pred_2;
                    _2756 = frontier_phi_72_pred_3;
                    _2754 = frontier_phi_72_pred_4;
                    _2752 = frontier_phi_72_pred_5;
                    uint _2897 = _2896 + 1u;
                    if (_2897 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2890 = _2752;
                        _2891 = _2754;
                        _2892 = _2756;
                        _2893 = _2758;
                        _2894 = _2760;
                        _2895 = _2762;
                        _2896 = _2897;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2762;
                frontier_phi_60_61_ladder_1 = _2760;
                frontier_phi_60_61_ladder_2 = _2756;
                frontier_phi_60_61_ladder_3 = _2754;
                frontier_phi_60_61_ladder_4 = _2752;
                frontier_phi_60_61_ladder_5 = _2758;
            }
            else
            {
                frontier_phi_60_61_ladder = _2639;
                frontier_phi_60_61_ladder_1 = _2637;
                frontier_phi_60_61_ladder_2 = _2633;
                frontier_phi_60_61_ladder_3 = _2631;
                frontier_phi_60_61_ladder_4 = _2629;
                frontier_phi_60_61_ladder_5 = _2635;
            }
            _2751 = frontier_phi_60_61_ladder_4;
            _2753 = frontier_phi_60_61_ladder_3;
            _2755 = frontier_phi_60_61_ladder_2;
            _2757 = frontier_phi_60_61_ladder_5;
            _2759 = frontier_phi_60_61_ladder_1;
            _2761 = frontier_phi_60_61_ladder;
        }
        float _2766 = isnan(1.0) ? _490 : (isnan(_490) ? 1.0 : min(_490, 1.0));
        _2527 = (_2766 * _2757) + _2039;
        _2529 = (_2766 * _2759) + _2041;
        _2531 = (_2766 * _2761) + _2043;
        _2533 = ((_2751 * _475) * _2766) + _2377;
        _2535 = ((_2753 * _477) * _2766) + _2379;
        _2537 = ((_2755 * _478) * _2766) + _2381;
    }
    else
    {
        _2527 = _2039;
        _2529 = _2041;
        _2531 = _2043;
        _2533 = _2377;
        _2535 = _2379;
        _2537 = _2381;
    }
    uint _2543 = _451 + uint(cbMatDynParam._m0[0u].w);
    float _2551 = ((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].y) * _301.x) * cbInstanceData._m0[_2543].x;
    float _2554 = ((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].y) * _301.y) * cbInstanceData._m0[_2543].y;
    float _2557 = ((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].y) * _301.z) * cbInstanceData._m0[_2543].z;
    float _4445 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _4456 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _4467 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _2574 = (((isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0))) * (_2527 + ((isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0))) * _490))) + ((_2533 + ((isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0))) * _1300)) * cbPerFrame._m0[3u].x)) + _2551;
    float _2576 = (_2554 + ((_2535 + ((isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0))) * _1300)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0))) * (_2529 + ((isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0))) * _490)));
    float _2578 = (_2557 + ((_2537 + ((isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0))) * _1300)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0))) * (_2531 + ((isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0))) * _490)));
    float _4493 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2591 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
    uint _2592 = _449 + 6u;
    float _2600 = _408 / cbSceneParam._m0[86u].x;
    float _2601 = _409 / cbSceneParam._m0[86u].y;
    vec4 _2615 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2600, _2601, (log2((isnan(cbSceneParam._m0[77u].w) ? _342 : (isnan(_342) ? cbSceneParam._m0[77u].w : min(_342, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2617 = _2615.x;
    float _2618 = _2615.y;
    float _2619 = _2615.z;
    float _2620 = _2615.w;
    float _2692;
    float _2694;
    float _2696;
    float _2698;
    if (_342 > cbSceneParam._m0[78u].w)
    {
        float _2654 = isnan(_342) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _342 : min(cbSceneParam._m0[80u].w, _342));
        float _2655 = _2654 / _342;
        float _2666 = _2655 * _393;
        float _2667 = _394 * _2655;
        float _2668 = (-0.0) - _2667;
        float _2670 = _2655 * _395;
        float _2672 = (cbSceneParam._m0[77u].w * _2668) / _2654;
        float _2673 = _2672 + cbSceneParam._m0[79u].w;
        float _2674 = cbSceneParam._m0[79u].w - _2667;
        float _2680 = sqrt(((_2666 * _2666) + (_2667 * _2667)) + (_2670 * _2670));
        float _2683 = (1.0 - (cbSceneParam._m0[77u].w / _2654)) * _2680;
        float _2688 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2690 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2852;
        if (abs((_2668 - _2672) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2852 = ((((_2673 > 0.0) ? exp2(_2688 * _2673) : (2.0 - exp2(_2690 * _2673))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2683;
        }
        else
        {
            float _2812 = 1.0 / cbSceneParam._m0[80u].x;
            float _2813 = isnan(_2674) ? _2673 : (isnan(_2673) ? _2674 : max(_2673, _2674));
            float _2814 = isnan(_2674) ? _2673 : (isnan(_2673) ? _2674 : min(_2673, _2674));
            float _2823 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : min(_2813, 0.0));
            float _2824 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : min(_2814, 0.0));
            _2852 = ((abs(_2680 / _2668) * cbSceneParam._m0[80u].y) * ((((_2823 - _2824) * 2.0) - ((exp2(_2688 * (isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0)))) - exp2(_2688 * (isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0))))) * _2812)) - ((exp2(_2690 * _2823) - exp2(_2690 * _2824)) * _2812))) + (_2683 * cbSceneParam._m0[80u].z);
        }
        vec4 _2854 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2600, _2601, 1.0), 0.0);
        float _2863 = exp2((_2852 * (-1.44269502162933349609375)) * (1.0 - _2854.w));
        float _2864 = log2(_2863);
        float _2880 = log2(_2620);
        _2692 = (exp2(_2880 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2864 * cbSceneParam._m0[78u].x)) * _2854.x) / cbSceneParam._m0[78u].x)) + _2617;
        _2694 = (exp2(_2880 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2864 * cbSceneParam._m0[78u].y)) * _2854.y) / cbSceneParam._m0[78u].y)) + _2618;
        _2696 = (exp2(_2880 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2864 * cbSceneParam._m0[78u].z)) * _2854.z) / cbSceneParam._m0[78u].z)) + _2619;
        _2698 = _2863 * _2620;
    }
    else
    {
        _2692 = _2617;
        _2694 = _2618;
        _2696 = _2619;
        _2698 = _2620;
    }
    float _2710 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2711 = _2710 == 3.0;
    float _2712 = log2(_2698);
    float _2716 = exp2(_2712 * cbSceneParam._m0[78u].x);
    float _2717 = exp2(_2712 * cbSceneParam._m0[78u].y);
    float _2718 = exp2(_2712 * cbSceneParam._m0[78u].z);
    float _2719 = _2716 * (isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0)));
    float _2720 = _2717 * (isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0)));
    float _2721 = _2718 * (isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0)));
    float _2730 = (_2710 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2730 * (_2711 ? _2719 : (_2719 + (cbSceneParam._m0[72u].w * _2692)));
    SV_Target.y = _2730 * (_2711 ? _2720 : (_2720 + (cbSceneParam._m0[72u].w * _2694)));
    SV_Target.z = _2730 * (_2711 ? _2721 : (_2721 + (cbSceneParam._m0[72u].w * _2696)));
    SV_Target.w = cbInstanceData._m0[_2592].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2551) * _2591) * _2716) * _2730;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2554) * _2591) * _2717) * _2730;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2557) * _2591) * _2718) * _2730;
    SV_Target_1.w = cbInstanceData._m0[_2592].w;
}


