#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ENEParts_AMSN_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ENEParts_AMSN_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D P_ENEParts_AMSN_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _891;
float _3349;
float _3350;
float _3351;
float _3352;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _226 = texture(sampler2D(P_ENEParts_AMSN_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _232 = _226.x * cbMtdParam._m0[9u].x;
    float _233 = _226.y * cbMtdParam._m0[9u].y;
    float _234 = _226.z * cbMtdParam._m0[9u].z;
    vec4 _250 = texture(sampler2D(P_ENEParts_AMSN_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _254 = _250.z;
    float _258 = (_250.x * 2.0) + (-1.0);
    float _260 = (_250.y * 2.0) + (-1.0);
    float _261 = dot(vec2(_258, _260), vec2(_258, _260));
    float _3361 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _267 = sqrt(1.0 - (isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0))));
    vec4 _286 = texture(sampler2D(P_ENEParts_AMSN_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _293 = fma(_267, _196 * NORMAL.x, fma(_260, _203 * TANGENT.x, (_189 * _182) * _258));
    float _296 = fma(_267, _196 * NORMAL.y, fma(_260, _203 * TANGENT.y, (_189 * _183) * _258));
    float _299 = fma(_267, _196 * NORMAL.z, fma(_260, _203 * TANGENT.z, (_189 * _184) * _258));
    float _303 = inversesqrt(dot(vec3(_293, _296, _299), vec3(_293, _296, _299)));
    float _304 = _303 * _293;
    float _305 = _303 * _296;
    float _306 = _303 * _299;
    float _3372 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _307 = isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0));
    float _3383 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3394 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _3405 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3416 = isnan(0.0) ? cbMtdParam._m0[11u].x : (isnan(cbMtdParam._m0[11u].x) ? 0.0 : max(cbMtdParam._m0[11u].x, 0.0));
    float _311 = isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0));
    float _327 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _368 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _378 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _368);
    float _379 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _368);
    float _380 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _368);
    float _384 = inversesqrt(dot(vec3(_378, _379, _380), vec3(_378, _379, _380)));
    float _385 = _378 * _384;
    float _386 = _379 * _384;
    float _387 = _380 * _384;
    vec4 _392 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _394 = _392.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _570 = sqrt(((_378 * _378) + (_379 * _379)) + (_380 * _380));
        float _576 = (cbMatDynParam._m0[5u].x * _570) + cbMatDynParam._m0[5u].y;
        float _3427 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
        float _577 = isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0));
        float _581 = (cbMatDynParam._m0[5u].z * _570) + cbMatDynParam._m0[5u].w;
        float _3438 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0))) - _577)) + _577) < ((_394 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _406 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _407 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _427 = fma(_306, cbSceneParam._m0[5u].z, fma(_305, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _304));
    float _430 = fma(_306, cbSceneParam._m0[6u].z, fma(_305, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _304));
    float _433 = fma(_306, cbSceneParam._m0[7u].z, fma(_305, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _304));
    uint _446 = uint(roundEven(NORMAL.w)) * 13u;
    uint _448 = _446 + 9u;
    uint _449 = _448 + uint(cbMatDynParam._m0[0u].w);
    float _455 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0)))) * cbInstanceData._m0[_449].x;
    float _456 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0)))) * cbInstanceData._m0[_449].y;
    float _457 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0)))) * cbInstanceData._m0[_449].z;
    float _3449 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _458 = isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0));
    float _3460 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _459 = isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0));
    float _3471 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _460 = isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0));
    float _461 = 1.0 - _311;
    float _462 = _458 * _461;
    float _463 = _459 * _461;
    float _464 = _460 * _461;
    float _469 = (_458 + (-0.039999999105930328369140625)) * _311;
    float _470 = (_459 + (-0.039999999105930328369140625)) * _311;
    float _471 = (_460 + (-0.039999999105930328369140625)) * _311;
    float _472 = _469 + 0.039999999105930328369140625;
    float _474 = _470 + 0.039999999105930328369140625;
    float _475 = _471 + 0.039999999105930328369140625;
    vec4 _484 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _406, cbSceneParam._m0[86u].y * _407));
    float _487 = _484.x * TEXCOORD.z;
    float _488 = dot(vec3(_304, _305, _306), vec3(_385, _386, _387));
    float _491 = _488 * 2.0;
    float _495 = (_491 * _304) - _385;
    float _496 = (_491 * _305) - _386;
    float _497 = (_491 * _306) - _387;
    float _501 = abs(dot(vec3(_385, _386, _387), vec3(_304, _305, _306)));
    float _3482 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _503 = sqrt(_307);
    float _516 = exp2((_503 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_503 * 3.0));
    float _522 = (1.0 - _516) * ((_503 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _523 = _516 * _503;
    float _551 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _555 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _559 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _890;
    float _892;
    float _893;
    float _894;
    float _895;
    float _896;
    float _897;
    float _898;
    float _899;
    float _900;
    float _901;
    float _902;
    float _903;
    float _904;
    float _905;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _615 = fma(_559, cbModelParam._m0[26u].z, fma(_555, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _551));
        float _619 = fma(_559, cbModelParam._m0[27u].z, fma(_555, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _551));
        float _623 = fma(_559, cbModelParam._m0[28u].z, fma(_555, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _551));
        float _648 = _551 + _304;
        float _649 = _555 + _305;
        float _650 = _559 + _306;
        float _660 = fma(_650, cbModelParam._m0[26u].z, fma(_649, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _648)) - _615;
        float _661 = fma(_650, cbModelParam._m0[27u].z, fma(_649, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _648)) - _619;
        float _662 = fma(_650, cbModelParam._m0[28u].z, fma(_649, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _648)) - _623;
        float _666 = inversesqrt(dot(vec3(_660, _661, _662), vec3(_660, _661, _662)));
        float _679 = ((_666 * _660) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_615 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _680 = ((_666 * _661) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_619 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _681 = ((_666 * _662) / cbModelParam._m0[34u].z) + ((((((_623 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _684 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_679, _680, _681), 0.0);
        vec4 _691 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_679, _680, _681), 0.0);
        vec4 _698 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_679, _680, _681), 0.0);
        vec4 _705 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_679, _680, _681), 0.0);
        float _718 = exp2((_684.w + (-0.5)) * 20.0) * 2.0;
        float _719 = _718 * (_684.x + (-0.5));
        float _720 = _718 * (_684.y + (-0.5));
        float _721 = _718 * (_684.z + (-0.5));
        float _728 = exp2((_691.w + (-0.5)) * 20.0) * 2.0;
        float _729 = _728 * (_691.x + (-0.5));
        float _730 = _728 * (_691.y + (-0.5));
        float _731 = _728 * (_691.z + (-0.5));
        float _738 = exp2((_698.w + (-0.5)) * 20.0) * 2.0;
        float _739 = _738 * (_698.x + (-0.5));
        float _740 = _738 * (_698.y + (-0.5));
        float _741 = _738 * (_698.z + (-0.5));
        float _748 = exp2((_705.w + (-0.5)) * 20.0) * 2.0;
        float _749 = _748 * (_705.x + (-0.5));
        float _750 = _748 * (_705.y + (-0.5));
        float _751 = _748 * (_705.z + (-0.5));
        float _752 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
        float _753 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        float _754 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
        float _755 = _719 * 0.5;
        float _756 = _729 * 0.5;
        float _757 = _739 * 0.5;
        float _758 = dot(vec3(_755, _756, _757), vec3(_755, _756, _757));
        float _763 = (_758 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_758);
        float _772 = (dot(vec3(_304, _305, _306), vec3(_763 * _755, _763 * _756, _763 * _757)) + 1.0) * 0.5;
        float _3508 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _782 = sqrt(((_756 * _756) + (_755 * _755)) + (_757 * _757)) / (_752 + 9.9999997473787516355514526367188e-06);
        float _3519 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
        float _783 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
        float _784 = _783 * 2.0;
        float _788 = (1.0 - _783) / (_783 + 1.0);
        float _3530 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _789 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
        float _798 = ((((1.0 - _789) * (_784 + 2.0)) * exp2(log2(isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0))) * (_784 + 1.0))) + _789) * _752;
        float _799 = _720 * 0.5;
        float _800 = _730 * 0.5;
        float _801 = _740 * 0.5;
        float _802 = dot(vec3(_799, _800, _801), vec3(_799, _800, _801));
        float _807 = (_802 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_802);
        float _815 = (dot(vec3(_304, _305, _306), vec3(_807 * _799, _807 * _800, _807 * _801)) + 1.0) * 0.5;
        float _3541 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _824 = sqrt(((_800 * _800) + (_799 * _799)) + (_801 * _801)) / (_753 + 9.9999997473787516355514526367188e-06);
        float _3552 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
        float _825 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
        float _826 = _825 * 2.0;
        float _830 = (1.0 - _825) / (_825 + 1.0);
        float _3563 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
        float _831 = isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0));
        float _840 = ((((1.0 - _831) * (_826 + 2.0)) * exp2(log2(isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0))) * (_826 + 1.0))) + _831) * _753;
        float _841 = _721 * 0.5;
        float _842 = _731 * 0.5;
        float _843 = _741 * 0.5;
        float _844 = dot(vec3(_841, _842, _843), vec3(_841, _842, _843));
        float _849 = (_844 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_844);
        float _857 = (dot(vec3(_304, _305, _306), vec3(_849 * _841, _849 * _842, _849 * _843)) + 1.0) * 0.5;
        float _3574 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        float _866 = sqrt(((_842 * _842) + (_841 * _841)) + (_843 * _843)) / (_754 + 9.9999997473787516355514526367188e-06);
        float _3585 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
        float _867 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
        float _868 = _867 * 2.0;
        float _872 = (1.0 - _867) / (_867 + 1.0);
        float _3596 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _873 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
        float _882 = ((((1.0 - _873) * (_868 + 2.0)) * exp2(log2(isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0))) * (_868 + 1.0))) + _873) * _754;
        _890 = _721;
        _892 = _720;
        _893 = _719;
        _894 = _731;
        _895 = _730;
        _896 = _729;
        _897 = _741;
        _898 = _740;
        _899 = _739;
        _900 = _754;
        _901 = _753;
        _902 = _752;
        _903 = cbModelParam._m0[36u].z * (isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0)));
        _904 = cbModelParam._m0[36u].z * (isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0)));
        _905 = cbModelParam._m0[36u].z * (isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0)));
    }
    else
    {
        _890 = _891;
        _892 = _891;
        _893 = _891;
        _894 = _891;
        _895 = _891;
        _896 = _891;
        _897 = _891;
        _898 = _891;
        _899 = _891;
        _900 = _891;
        _901 = _891;
        _902 = _891;
        _903 = 0.0;
        _904 = 0.0;
        _905 = 0.0;
    }
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _934 = fma(_559, cbModelParam._m0[30u].z, fma(_555, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _551));
        float _938 = fma(_559, cbModelParam._m0[31u].z, fma(_555, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _551));
        float _942 = fma(_559, cbModelParam._m0[32u].z, fma(_555, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _551));
        float _965 = _551 + _304;
        float _966 = _555 + _305;
        float _967 = _559 + _306;
        float _977 = fma(_967, cbModelParam._m0[30u].z, fma(_966, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _965)) - _934;
        float _978 = fma(_967, cbModelParam._m0[31u].z, fma(_966, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _965)) - _938;
        float _979 = fma(_967, cbModelParam._m0[32u].z, fma(_966, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _965)) - _942;
        float _983 = inversesqrt(dot(vec3(_977, _978, _979), vec3(_977, _978, _979)));
        float _996 = ((_983 * _977) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_934 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _997 = ((_983 * _978) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_938 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _998 = ((_983 * _979) / cbModelParam._m0[35u].z) + ((((((_942 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1000 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_996, _997, _998), 0.0);
        vec4 _1007 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_996, _997, _998), 0.0);
        vec4 _1014 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_996, _997, _998), 0.0);
        vec4 _1021 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_996, _997, _998), 0.0);
        float _1033 = exp2((_1000.w + (-0.5)) * 20.0) * 2.0;
        float _1034 = _1033 * (_1000.x + (-0.5));
        float _1035 = _1033 * (_1000.y + (-0.5));
        float _1036 = _1033 * (_1000.z + (-0.5));
        float _1043 = exp2((_1007.w + (-0.5)) * 20.0) * 2.0;
        float _1044 = _1043 * (_1007.x + (-0.5));
        float _1045 = _1043 * (_1007.y + (-0.5));
        float _1046 = _1043 * (_1007.z + (-0.5));
        float _1053 = exp2((_1014.w + (-0.5)) * 20.0) * 2.0;
        float _1054 = _1053 * (_1014.x + (-0.5));
        float _1055 = _1053 * (_1014.y + (-0.5));
        float _1056 = _1053 * (_1014.z + (-0.5));
        float _1063 = exp2((_1021.w + (-0.5)) * 20.0) * 2.0;
        float _1064 = _1063 * (_1021.x + (-0.5));
        float _1065 = _1063 * (_1021.y + (-0.5));
        float _1066 = _1063 * (_1021.z + (-0.5));
        float _1067 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1068 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1069 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1070 = _1034 * 0.5;
        float _1071 = _1044 * 0.5;
        float _1072 = _1054 * 0.5;
        float _1073 = dot(vec3(_1070, _1071, _1072), vec3(_1070, _1071, _1072));
        float _1078 = (_1073 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1073);
        float _1086 = (dot(vec3(_304, _305, _306), vec3(_1078 * _1070, _1078 * _1071, _1078 * _1072)) + 1.0) * 0.5;
        float _3637 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1095 = sqrt(((_1071 * _1071) + (_1070 * _1070)) + (_1072 * _1072)) / (_1067 + 9.9999997473787516355514526367188e-06);
        float _3648 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1096 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
        float _1097 = _1096 * 2.0;
        float _1101 = (1.0 - _1096) / (_1096 + 1.0);
        float _3659 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1102 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
        float _1111 = ((((1.0 - _1102) * (_1097 + 2.0)) * exp2(log2(isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0))) * (_1097 + 1.0))) + _1102) * _1067;
        float _1112 = _1035 * 0.5;
        float _1113 = _1045 * 0.5;
        float _1114 = _1055 * 0.5;
        float _1115 = dot(vec3(_1112, _1113, _1114), vec3(_1112, _1113, _1114));
        float _1120 = (_1115 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1115);
        float _1128 = (dot(vec3(_304, _305, _306), vec3(_1120 * _1112, _1120 * _1113, _1120 * _1114)) + 1.0) * 0.5;
        float _3670 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1137 = sqrt(((_1113 * _1113) + (_1112 * _1112)) + (_1114 * _1114)) / (_1068 + 9.9999997473787516355514526367188e-06);
        float _3681 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
        float _1139 = _1138 * 2.0;
        float _1143 = (1.0 - _1138) / (_1138 + 1.0);
        float _3692 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
        float _1153 = ((((1.0 - _1144) * (_1139 + 2.0)) * exp2(log2(isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0))) * (_1139 + 1.0))) + _1144) * _1068;
        float _1154 = _1036 * 0.5;
        float _1155 = _1046 * 0.5;
        float _1156 = _1056 * 0.5;
        float _1157 = dot(vec3(_1154, _1155, _1156), vec3(_1154, _1155, _1156));
        float _1162 = (_1157 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1157);
        float _1170 = (dot(vec3(_304, _305, _306), vec3(_1162 * _1154, _1162 * _1155, _1162 * _1156)) + 1.0) * 0.5;
        float _3703 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1179 = sqrt(((_1155 * _1155) + (_1154 * _1154)) + (_1156 * _1156)) / (_1069 + 9.9999997473787516355514526367188e-06);
        float _3714 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
        float _1181 = _1180 * 2.0;
        float _1185 = (1.0 - _1180) / (_1180 + 1.0);
        float _3725 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
        float _1195 = ((((1.0 - _1186) * (_1181 + 2.0)) * exp2(log2(isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0))) * (_1181 + 1.0))) + _1186) * _1069;
        _1203 = _1036;
        _1204 = _1035;
        _1205 = _1034;
        _1206 = _1046;
        _1207 = _1045;
        _1208 = _1044;
        _1209 = _1056;
        _1210 = _1055;
        _1211 = _1054;
        _1212 = _1069;
        _1213 = _1068;
        _1214 = _1067;
        _1215 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0)));
        _1216 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0)));
        _1217 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0)));
    }
    else
    {
        _1203 = _891;
        _1204 = _891;
        _1205 = _891;
        _1206 = _891;
        _1207 = _891;
        _1208 = _891;
        _1209 = _891;
        _1210 = _891;
        _1211 = _891;
        _1212 = _891;
        _1213 = _891;
        _1214 = _891;
        _1215 = 0.0;
        _1216 = 0.0;
        _1217 = 0.0;
    }
    float _1227 = (cbModelParam._m0[1u].x * (_1215 - _903)) + _903;
    float _1228 = (cbModelParam._m0[1u].x * (_1216 - _904)) + _904;
    float _1229 = (cbModelParam._m0[1u].x * (_1217 - _905)) + _905;
    float _1250 = fma(_1229, cbSceneParam._m0[89u].z, fma(_1228, cbSceneParam._m0[89u].y, _1227 * cbSceneParam._m0[89u].x));
    float _1253 = fma(_1229, cbSceneParam._m0[90u].z, fma(_1228, cbSceneParam._m0[90u].y, _1227 * cbSceneParam._m0[90u].x));
    float _1256 = fma(_1229, cbSceneParam._m0[91u].z, fma(_1228, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1227));
    float _1271 = _495 * 0.5;
    float _1272 = _496 * 0.5;
    float _1273 = _497 * 0.5;
    float _1274 = dot(vec4(_1271, _1272, _1273, 1.0), vec4(_1205, _1208, _1211, _1214));
    float _1277 = dot(vec4(_1271, _1272, _1273, 1.0), vec4(_1204, _1207, _1210, _1213));
    float _1280 = dot(vec4(_1271, _1272, _1273, 1.0), vec4(_1203, _1206, _1209, _1212));
    float _1314;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1287 = dot(vec4(_1271, _1272, _1273, 1.0), vec4(_890, _894, _897, _900));
        float _1291 = dot(vec4(_1271, _1272, _1273, 1.0), vec4(_892, _895, _898, _901));
        float _1295 = dot(vec4(_1271, _1272, _1273, 1.0), vec4(_893, _896, _899, _902));
        float _1302 = dot(vec4(cbModelParam._m0[39u]), vec4(_1271, _1272, _1273, 1.0));
        _1314 = dot(vec3(isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0)), isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0)), isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1302) ? 0.0 : (isnan(0.0) ? _1302 : max(0.0, _1302))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1314 = 1.0;
    }
    float _1325;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1316 = dot(vec4(cbModelParam._m0[40u]), vec4(_1271, _1272, _1273, 1.0));
        _1325 = dot(vec3(isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0)), isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0)), isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1316) ? 0.0 : (isnan(0.0) ? _1316 : max(0.0, _1316))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1325 = 1.0;
    }
    float _1329 = (_1325 * cbModelParam._m0[1u].x) + (_1314 * (1.0 - cbModelParam._m0[1u].x));
    float _1339 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _307);
    float _1340 = isnan(_1339) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1339 : min(cbModelParam._m0[25u].z, _1339));
    float _1422;
    float _1424;
    float _1426;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1389 = fma(_559, cbModelParam._m0[13u].z, fma(_555, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _551)) + cbModelParam._m0[13u].w;
        float _1393 = fma(_559, cbModelParam._m0[14u].z, fma(_555, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _551)) + cbModelParam._m0[14u].w;
        float _1397 = fma(_559, cbModelParam._m0[15u].z, fma(_555, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _551)) + cbModelParam._m0[15u].w;
        float _1400 = fma(_497, cbModelParam._m0[13u].z, fma(_496, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _495));
        float _1403 = fma(_497, cbModelParam._m0[14u].z, fma(_496, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _495));
        float _1406 = fma(_497, cbModelParam._m0[15u].z, fma(_496, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _495));
        float _1434;
        if (_1400 > 0.0)
        {
            _1434 = abs((1.0 - _1389) / _1400);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1400 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1389 + 1.0) / _1400);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1434 = frontier_phi_17_15_ladder;
        }
        float _1662;
        if (_1403 > 0.0)
        {
            _1662 = abs((1.0 - _1393) / _1403);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1403 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1393 + 1.0) / _1403);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1662 = frontier_phi_26_22_ladder;
        }
        float _1919;
        if (_1406 > 0.0)
        {
            _1919 = abs((1.0 - _1397) / _1406);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1406 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1397 + 1.0) / _1406);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1919 = frontier_phi_38_33_ladder;
        }
        float _1921 = isnan(_1662) ? _1434 : (isnan(_1434) ? _1662 : min(_1434, _1662));
        float _1922 = isnan(_1919) ? _1921 : (isnan(_1921) ? _1919 : min(_1921, _1919));
        float _1926 = (_1922 * _1400) + _1389;
        float _1927 = (_1922 * _1403) + _1393;
        float _1928 = (_1922 * _1406) + _1397;
        float _1929 = _1922 * 9.9999997473787516355514526367188e-05;
        float _1931 = (-1.0) - _1929;
        float _1933 = _1929 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1928 > _1933) || ((_1928 < _1931) || ((_1927 > _1933) || ((_1927 < _1931) || ((_1926 < _1931) || (_1926 > _1933))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2056 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1928, cbModelParam._m0[9u].z, fma(_1927, cbModelParam._m0[9u].y, _1926 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1928, cbModelParam._m0[10u].z, fma(_1927, cbModelParam._m0[10u].y, _1926 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1928, cbModelParam._m0[11u].z, fma(_1927, cbModelParam._m0[11u].y, _1926 * cbModelParam._m0[11u].x))), _1340);
            frontier_phi_16_38_ladder = _2056.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2056.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2056.x * cbModelParam._m0[1u].y;
        }
        _1422 = frontier_phi_16_38_ladder_2;
        _1424 = frontier_phi_16_38_ladder_1;
        _1426 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1410 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_495, _496, _497), _1340);
        _1422 = _1410.x * cbModelParam._m0[1u].y;
        _1424 = _1410.y * cbModelParam._m0[1u].y;
        _1426 = _1410.z * cbModelParam._m0[1u].y;
    }
    float _1430 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _307);
    float _1431 = isnan(_1430) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1430 : min(cbModelParam._m0[25u].w, _1430));
    float _1524;
    float _1526;
    float _1528;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1488 = fma(_559, cbModelParam._m0[21u].z, fma(_555, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _551)) + cbModelParam._m0[21u].w;
        float _1492 = fma(_559, cbModelParam._m0[22u].z, fma(_555, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _551)) + cbModelParam._m0[22u].w;
        float _1496 = fma(_559, cbModelParam._m0[23u].z, fma(_555, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _551)) + cbModelParam._m0[23u].w;
        float _1499 = fma(_497, cbModelParam._m0[21u].z, fma(_496, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _495));
        float _1502 = fma(_497, cbModelParam._m0[22u].z, fma(_496, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _495));
        float _1505 = fma(_497, cbModelParam._m0[23u].z, fma(_496, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _495));
        float _1667;
        if (_1499 > 0.0)
        {
            _1667 = abs((1.0 - _1488) / _1499);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1499 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1488 + 1.0) / _1499);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1667 = frontier_phi_28_24_ladder;
        }
        float _1946;
        if (_1502 > 0.0)
        {
            _1946 = abs((1.0 - _1492) / _1502);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1502 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1492 + 1.0) / _1502);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1946 = frontier_phi_40_35_ladder;
        }
        float _2159;
        if (_1505 > 0.0)
        {
            _2159 = abs((1.0 - _1496) / _1505);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1505 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1496 + 1.0) / _1505);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2159 = frontier_phi_49_46_ladder;
        }
        float _2161 = isnan(_1946) ? _1667 : (isnan(_1667) ? _1946 : min(_1667, _1946));
        float _2162 = isnan(_2159) ? _2161 : (isnan(_2161) ? _2159 : min(_2161, _2159));
        float _2166 = (_2162 * _1499) + _1488;
        float _2167 = (_2162 * _1502) + _1492;
        float _2168 = (_2162 * _1505) + _1496;
        float _2169 = _2162 * 9.9999997473787516355514526367188e-05;
        float _2170 = (-1.0) - _2169;
        float _2172 = _2169 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2168 > _2172) || ((_2168 < _2170) || ((_2167 > _2172) || ((_2167 < _2170) || ((_2166 < _2170) || (_2166 > _2172))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2402 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2168, cbModelParam._m0[17u].z, fma(_2167, cbModelParam._m0[17u].y, _2166 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2168, cbModelParam._m0[18u].z, fma(_2167, cbModelParam._m0[18u].y, _2166 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2168, cbModelParam._m0[19u].z, fma(_2167, cbModelParam._m0[19u].y, _2166 * cbModelParam._m0[19u].x))), _1431);
            frontier_phi_25_49_ladder = _2402.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2402.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2402.x * cbModelParam._m0[1u].z;
        }
        _1524 = frontier_phi_25_49_ladder_2;
        _1526 = frontier_phi_25_49_ladder_1;
        _1528 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1508 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_495, _496, _497), _1431);
        _1524 = _1508.x * cbModelParam._m0[1u].z;
        _1526 = _1508.y * cbModelParam._m0[1u].z;
        _1528 = _1508.z * cbModelParam._m0[1u].z;
    }
    float _1541 = (((_522 * _472) + _523) * _487) * ((cbModelParam._m0[1u].w * (_1524 - _1422)) + _1422);
    float _1543 = (((_522 * _474) + _523) * _487) * ((cbModelParam._m0[1u].w * (_1526 - _1424)) + _1424);
    float _1545 = (((_522 * _475) + _523) * _487) * ((cbModelParam._m0[1u].w * (_1528 - _1426)) + _1426);
    float _1548 = fma(_1545, cbSceneParam._m0[89u].z, fma(_1543, cbSceneParam._m0[89u].y, _1541 * cbSceneParam._m0[89u].x));
    float _1551 = fma(_1545, cbSceneParam._m0[90u].z, fma(_1543, cbSceneParam._m0[90u].y, _1541 * cbSceneParam._m0[90u].x));
    float _1554 = fma(_1545, cbSceneParam._m0[91u].z, fma(_1543, cbSceneParam._m0[91u].y, _1541 * cbSceneParam._m0[91u].x));
    vec4 _1562 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_406, _407));
    float _1564 = _1562.w;
    float _1576 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1564);
    float _1577 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1564);
    float _1578 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1564);
    uvec4 _1582 = floatBitsToUint(cbInstanceData._m0[_446 + 5u]);
    uint _1584 = _1582.x * 14u;
    uint _1585 = _1584 + 13u;
    float _1592 = _487 + (-1.0);
    float _1597 = (cbLight._m0[_1585].x * _1592) + 1.0;
    float _1598 = (cbLight._m0[_1585].y * _1592) + 1.0;
    float _1599 = (cbLight._m0[_1585].z * _1592) + 1.0;
    float _1600 = (cbLight._m0[_1585].w * _1592) + 1.0;
    uint _1601 = _1584 + 5u;
    float _1607 = isnan(1.0) ? _1598 : (isnan(_1598) ? 1.0 : min(_1598, 1.0));
    uint _1611 = _1584 + 4u;
    float _1621 = isnan(1.0) ? _1597 : (isnan(_1597) ? 1.0 : min(_1597, 1.0));
    uint _1625 = _1584 | 1u;
    float _1636 = dot(vec3(cbLight._m0[_1584].xyz), vec3(_304, _305, _306));
    float _1639 = dot(vec3(cbLight._m0[_1625].xyz), vec3(_304, _305, _306));
    float _3861 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
    float _3872 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
    float _1644 = (isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))) * 0.3183098733425140380859375;
    float _1646 = (isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0))) * 0.3183098733425140380859375;
    float _1653 = ((cbLight._m0[_1601].x * _1607) * _1646) + (((cbLight._m0[_1611].x * _1576) * _1621) * _1644);
    float _1654 = ((_1607 * cbLight._m0[_1601].y) * _1646) + (((cbLight._m0[_1611].y * _1577) * _1621) * _1644);
    float _1655 = ((_1607 * cbLight._m0[_1601].z) * _1646) + (((cbLight._m0[_1611].z * _1578) * _1621) * _1644);
    uvec4 _1659 = floatBitsToUint(cbLight._m0[_1584 + 12u]);
    bool _1661 = _1659.x == 0u;
    float _1672;
    float _1674;
    float _1676;
    if (_1661)
    {
        _1672 = _1653;
        _1674 = _1654;
        _1676 = _1655;
    }
    else
    {
        uint _1680 = _1584 + 6u;
        float _1696 = (dot(vec3(cbLight._m0[_1584 + 2u].xyz), vec3(_304, _305, _306)) * 0.5) + 0.5;
        float _1697 = _1696 * _1696;
        float _3883 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
        float _1698 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1699 = isnan(1.0) ? _1599 : (isnan(_1599) ? 1.0 : min(_1599, 1.0));
        _1672 = (((cbLight._m0[_1680].x * 0.3183098733425140380859375) * _1698) * _1699) + _1653;
        _1674 = (((cbLight._m0[_1680].y * 0.3183098733425140380859375) * _1698) * _1699) + _1654;
        _1676 = (((cbLight._m0[_1680].z * 0.3183098733425140380859375) * _1698) * _1699) + _1655;
    }
    bool _1679 = _1659.y == 0u;
    float _1717;
    float _1719;
    float _1721;
    if (_1679)
    {
        _1717 = _1672;
        _1719 = _1674;
        _1721 = _1676;
    }
    else
    {
        uint _1890 = _1584 + 7u;
        float _1906 = (dot(vec3(cbLight._m0[_1584 + 3u].xyz), vec3(_304, _305, _306)) * 0.5) + 0.5;
        float _1907 = _1906 * _1906;
        float _3899 = isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0));
        float _1908 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _1909 = isnan(1.0) ? _1600 : (isnan(_1600) ? 1.0 : min(_1600, 1.0));
        _1717 = (((cbLight._m0[_1890].x * 0.3183098733425140380859375) * _1908) * _1909) + _1672;
        _1719 = (((cbLight._m0[_1890].y * 0.3183098733425140380859375) * _1908) * _1909) + _1674;
        _1721 = (((cbLight._m0[_1890].z * 0.3183098733425140380859375) * _1908) * _1909) + _1676;
    }
    uint _1724 = _1584 + 8u;
    float _1737 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1584].w)) * _307) * 0.949999988079071044921875);
    float _1738 = _1737 * _1737;
    float _1739 = cbLight._m0[_1584].x + _385;
    float _1740 = cbLight._m0[_1584].y + _386;
    float _1741 = cbLight._m0[_1584].z + _387;
    float _1745 = inversesqrt(dot(vec3(_1739, _1740, _1741), vec3(_1739, _1740, _1741)));
    float _1746 = _1745 * _1739;
    float _1747 = _1745 * _1740;
    float _1748 = _1745 * _1741;
    float _1749 = dot(vec3(_304, _305, _306), vec3(cbLight._m0[_1584].xyz));
    float _3915 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
    float _1752 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
    float _3926 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _1753 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
    float _1754 = dot(vec3(_304, _305, _306), vec3(_1746, _1747, _1748));
    float _3937 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
    float _1757 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
    float _1758 = dot(vec3(cbLight._m0[_1584].xyz), vec3(_1746, _1747, _1748));
    float _3948 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
    float _1762 = _1738 * _1738;
    float _1766 = ((_1757 * _1757) * (_1762 + (-1.0))) + 1.0;
    float _1774 = exp2(log2(1.0 - (isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0)))) * 5.0);
    float _1775 = 0.959999978542327880859375 - _469;
    float _1777 = 0.959999978542327880859375 - _470;
    float _1778 = 0.959999978542327880859375 - _471;
    float _1785 = 1.0 - _1738;
    float _1796 = (0.5 / (((_1753 * ((_1752 * _1785) + _1738)) + 9.9999999392252902907785028219223e-09) + (((_1753 * _1785) + _1738) * _1752))) * _1752;
    float _3959 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
    float _1798 = (isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0))) * (_1762 / ((_1766 * _1766) * 3.141590118408203125));
    uint _1812 = _1584 + 9u;
    float _1823 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1625].w)) * _307) * 0.949999988079071044921875);
    float _1824 = _1823 * _1823;
    float _1825 = cbLight._m0[_1625].x + _385;
    float _1826 = cbLight._m0[_1625].y + _386;
    float _1827 = cbLight._m0[_1625].z + _387;
    float _1831 = inversesqrt(dot(vec3(_1825, _1826, _1827), vec3(_1825, _1826, _1827)));
    float _1832 = _1831 * _1825;
    float _1833 = _1831 * _1826;
    float _1834 = _1831 * _1827;
    float _1835 = dot(vec3(_304, _305, _306), vec3(cbLight._m0[_1625].xyz));
    float _3970 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
    float _1838 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
    float _1839 = dot(vec3(_304, _305, _306), vec3(_1832, _1833, _1834));
    float _3981 = isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0));
    float _1842 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
    float _1843 = dot(vec3(cbLight._m0[_1625].xyz), vec3(_1832, _1833, _1834));
    float _3992 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
    float _1847 = _1824 * _1824;
    float _1851 = ((_1842 * _1842) * (_1847 + (-1.0))) + 1.0;
    float _1858 = exp2(log2(1.0 - (isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0)))) * 5.0);
    float _1865 = 1.0 - _1824;
    float _1875 = (0.5 / (((_1753 * ((_1838 * _1865) + _1824)) + 9.9999999392252902907785028219223e-09) + (((_1753 * _1865) + _1824) * _1838))) * _1838;
    float _4003 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
    float _1877 = (isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * (_1847 / ((_1851 * _1851) * 3.141590118408203125));
    float _1887 = (((((_1858 * _1775) + _472) * cbLight._m0[_1812].x) * _1877) * _1607) + ((((cbLight._m0[_1724].x * _1576) * ((_1774 * _1775) + _472)) * _1798) * _1621);
    float _1888 = (((((_1858 * _1777) + _474) * cbLight._m0[_1812].y) * _1877) * _1607) + ((((cbLight._m0[_1724].y * _1577) * ((_1774 * _1777) + _474)) * _1798) * _1621);
    float _1889 = (((((_1858 * _1778) + _475) * cbLight._m0[_1812].z) * _1877) * _1607) + ((((cbLight._m0[_1724].z * _1578) * ((_1774 * _1778) + _475)) * _1798) * _1621);
    float _1951;
    float _1953;
    float _1955;
    if (_1661)
    {
        _1951 = _1887;
        _1953 = _1888;
        _1955 = _1889;
    }
    else
    {
        uint _1957 = _1584 + 2u;
        uint _1961 = _1584 + 10u;
        float _1975 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1957].w)) * _307) * 0.949999988079071044921875);
        float _1976 = _1975 * _1975;
        float _1977 = cbLight._m0[_1957].x + _385;
        float _1978 = cbLight._m0[_1957].y + _386;
        float _1979 = cbLight._m0[_1957].z + _387;
        float _1983 = inversesqrt(dot(vec3(_1977, _1978, _1979), vec3(_1977, _1978, _1979)));
        float _1984 = _1983 * _1977;
        float _1985 = _1983 * _1978;
        float _1986 = _1983 * _1979;
        float _1987 = dot(vec3(_304, _305, _306), vec3(cbLight._m0[_1957].xyz));
        float _4014 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
        float _1990 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _1991 = dot(vec3(_304, _305, _306), vec3(_1984, _1985, _1986));
        float _4025 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
        float _1994 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _1995 = dot(vec3(cbLight._m0[_1957].xyz), vec3(_1984, _1985, _1986));
        float _4036 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
        float _1999 = _1976 * _1976;
        float _2003 = ((_1994 * _1994) * (_1999 + (-1.0))) + 1.0;
        float _2010 = exp2(log2(1.0 - (isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0)))) * 5.0);
        float _2017 = 1.0 - _1976;
        float _2027 = (0.5 / (((_1753 * ((_1990 * _2017) + _1976)) + 9.9999999392252902907785028219223e-09) + (((_1753 * _2017) + _1976) * _1990))) * _1990;
        float _4047 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
        float _2029 = (isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0))) * (_1999 / ((_2003 * _2003) * 3.141590118408203125));
        float _2030 = isnan(1.0) ? _1599 : (isnan(_1599) ? 1.0 : min(_1599, 1.0));
        _1951 = (((((_2010 * _1775) + _472) * cbLight._m0[_1961].x) * _2029) * _2030) + _1887;
        _1953 = (((((_2010 * _1777) + _474) * cbLight._m0[_1961].y) * _2029) * _2030) + _1888;
        _1955 = (((((_2010 * _1778) + _475) * cbLight._m0[_1961].z) * _2029) * _2030) + _1889;
    }
    float _2065;
    float _2067;
    float _2069;
    if (_1679)
    {
        _2065 = _1951;
        _2067 = _1953;
        _2069 = _1955;
    }
    else
    {
        uint _2076 = _1584 + 3u;
        uint _2080 = _1584 + 11u;
        float _2094 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2076].w)) * _307) * 0.949999988079071044921875);
        float _2095 = _2094 * _2094;
        float _2096 = cbLight._m0[_2076].x + _385;
        float _2097 = cbLight._m0[_2076].y + _386;
        float _2098 = cbLight._m0[_2076].z + _387;
        float _2102 = inversesqrt(dot(vec3(_2096, _2097, _2098), vec3(_2096, _2097, _2098)));
        float _2103 = _2102 * _2096;
        float _2104 = _2102 * _2097;
        float _2105 = _2102 * _2098;
        float _2106 = dot(vec3(_304, _305, _306), vec3(cbLight._m0[_2076].xyz));
        float _4063 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
        float _2109 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _2110 = dot(vec3(_304, _305, _306), vec3(_2103, _2104, _2105));
        float _4074 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
        float _2113 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _2114 = dot(vec3(cbLight._m0[_2076].xyz), vec3(_2103, _2104, _2105));
        float _4085 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
        float _2118 = _2095 * _2095;
        float _2122 = ((_2113 * _2113) * (_2118 + (-1.0))) + 1.0;
        float _2129 = exp2(log2(1.0 - (isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0)))) * 5.0);
        float _2136 = 1.0 - _2095;
        float _2146 = (0.5 / (((_1753 * ((_2109 * _2136) + _2095)) + 9.9999999392252902907785028219223e-09) + (((_1753 * _2136) + _2095) * _2109))) * _2109;
        float _4096 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
        float _2148 = (isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))) * (_2118 / ((_2122 * _2122) * 3.141590118408203125));
        float _2149 = isnan(1.0) ? _1600 : (isnan(_1600) ? 1.0 : min(_1600, 1.0));
        _2065 = (((((_2129 * _1775) + _472) * cbLight._m0[_2080].x) * _2148) * _2149) + _1951;
        _2067 = (((((_2129 * _1777) + _474) * cbLight._m0[_2080].y) * _2148) * _2149) + _1953;
        _2069 = (((((_2129 * _1778) + _475) * cbLight._m0[_2080].z) * _2148) * _2149) + _1955;
    }
    float _2284;
    float _2286;
    float _2288;
    float _2290;
    float _2292;
    float _2294;
    if (_1582.y == 0u)
    {
        float _2224 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2225 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2224;
        float _2226 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2224;
        float _2227 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2224;
        uvec4 _2239 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2240 = _2239.x;
        uint _2251 = uint((float(_2239.y) * floor(float(uint(cbSceneParam._m0[85u].y * _407) / _2240))) + floor(float(uint(cbSceneParam._m0[85u].x * _406) / _2240)));
        float _2261 = (log2(_2227 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2262 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
        uint _2265 = uint(isnan(14.0) ? _2262 : (isnan(_2262) ? 14.0 : min(_2262, 14.0)));
        uvec4 _2270 = texelFetch(g_lightClusterGridBuffer, int(((_2265 << 2u) + (_2251 << 6u)) >> 2u));
        uint _2271 = _2270.x;
        uint _2272 = _2239.z;
        float _2407;
        float _2409;
        float _2411;
        float _2413;
        float _2415;
        float _2417;
        if (((((1u << ((_2272 >> 4u) & 15u)) + 4294967295u) & _2271) == 0u) || ((_2272 & 240u) == 0u))
        {
            _2407 = 0.0;
            _2409 = 0.0;
            _2411 = 0.0;
            _2413 = 0.0;
            _2415 = 0.0;
            _2417 = 0.0;
        }
        else
        {
            float _2408;
            float _2410;
            float _2412;
            float _2414;
            float _2416;
            float _2418;
            float _2569 = 0.0;
            float _2570 = 0.0;
            float _2571 = 0.0;
            float _2572 = 0.0;
            float _2573 = 0.0;
            float _2574 = 0.0;
            uint _2575 = 0u;
            uint _2584;
            bool _2585;
            for (;;)
            {
                _2584 = texelFetch(g_lightClassification, int((((_2265 << 5u) + (_2251 << 9u)) + (_2575 << 2u)) >> 2u)).x;
                _2585 = _2584 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2585)
                {
                    frontier_phi_66_pred = _2569;
                    frontier_phi_66_pred_1 = _2574;
                    frontier_phi_66_pred_2 = _2573;
                    frontier_phi_66_pred_3 = _2572;
                    frontier_phi_66_pred_4 = _2571;
                    frontier_phi_66_pred_5 = _2570;
                }
                else
                {
                    float _2714;
                    float _2715;
                    float _2716;
                    float _2717;
                    float _2718;
                    float _2719;
                    uint _2720;
                    _2714 = _2569;
                    _2715 = _2570;
                    _2716 = _2571;
                    _2717 = _2572;
                    _2718 = _2573;
                    _2719 = _2574;
                    _2720 = _2584;
                    float _2641;
                    float _2642;
                    float _2643;
                    float _2644;
                    float _2645;
                    float _2646;
                    for (;;)
                    {
                        uint _2724 = uint(findLSB(_2720)) + (_2575 << 5u);
                        uint _2721 = (_2720 + 4294967295u) & _2720;
                        uint _2726 = _2724 * 48u;
                        vec4 _2740 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2726)).x, texelFetch(g_PointLightRenderingBuffer, int(_2726 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2726 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2726 + 3u)).x));
                        uint _2746 = (_2724 * 48u) + 4u;
                        vec4 _2759 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2746)).x, texelFetch(g_PointLightRenderingBuffer, int(_2746 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2746 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2746 + 3u)).x));
                        uint _2765 = (_2724 * 48u) + 8u;
                        vec3 _2776 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2765)).x, texelFetch(g_PointLightRenderingBuffer, int(_2765 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2765 + 2u)).x));
                        float _2780 = _2740.x - _2225;
                        float _2781 = _2740.y - _2226;
                        float _2782 = _2740.z - _2227;
                        float _2783 = dot(vec3(_2780, _2781, _2782), vec3(_2780, _2781, _2782));
                        float _2786 = inversesqrt(_2783);
                        float _2787 = _2786 * _2780;
                        float _2788 = _2786 * _2781;
                        float _2789 = _2786 * _2782;
                        float _2790 = dot(vec3(_427, _430, _433), vec3(_2787, _2788, _2789));
                        float _2795 = 1.0 - (_2783 * _2740.w);
                        float _4122 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
                        float _2796 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
                        float _2797 = sqrt(_2783) * _2759.w;
                        float _2800 = 1.39999997615814208984375 / (_2797 + 1.39999997615814208984375);
                        float _2801 = _2800 * _2800;
                        float _2804 = ((1.0 - _2801) * _2790) + _2801;
                        float _2807 = _2797 * _2797;
                        float _2811 = ((isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0))) * _2796) / ((_2807 * 0.699999988079071044921875) + 1.0);
                        float _2815 = (-0.0) - _2225;
                        float _2816 = (-0.0) - _2226;
                        float _2817 = (-0.0) - _2227;
                        float _2821 = inversesqrt(dot(vec3(_2815, _2816, _2817), vec3(_2815, _2816, _2817)));
                        float _2822 = _2821 * _2815;
                        float _2823 = _2821 * _2816;
                        float _2824 = _2821 * _2817;
                        float _2832 = exp2(log2(1.0 / ((_2807 * 3.5) + 5.0)) * 0.25);
                        float _2833 = 1.0 - _503;
                        float _2840 = sqrt(1.0 - ((1.0 - (_2833 * _2833)) * (1.0 - (_2832 * _2832))));
                        float _2841 = _2840 * _2840;
                        float _2842 = _2841 * _2841;
                        float _2843 = _2822 + _2787;
                        float _2844 = _2823 + _2788;
                        float _2845 = _2824 + _2789;
                        float _2849 = inversesqrt(dot(vec3(_2843, _2844, _2845), vec3(_2843, _2844, _2845)));
                        float _2853 = dot(vec3(_427, _430, _433), vec3(_2822, _2823, _2824));
                        float _4138 = isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0));
                        float _2856 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
                        float _2857 = dot(vec3(_427, _430, _433), vec3(_2849 * _2843, _2849 * _2844, _2849 * _2845));
                        float _4149 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0));
                        float _2860 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
                        float _2864 = ((_2860 * _2860) * (_2842 + (-1.0))) + 1.0;
                        float _2865 = _2800 * _2841;
                        float _2866 = _2865 * _2865;
                        float _2869 = ((1.0 - _2866) * _2790) + _2866;
                        float _4160 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0));
                        float _2870 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
                        float _2871 = 1.0 - _2841;
                        float _2881 = (0.5 / (((_2870 * ((_2856 * _2871) + _2841)) + 9.9999999392252902907785028219223e-09) + (((_2870 * _2871) + _2841) * _2856))) * _2870;
                        float _4171 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
                        float _2892 = (((_2842 * 3.1415927410125732421875) * (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0)))) / ((_2864 * _2864) * ((_2807 * 2.1991131305694580078125) + 3.141590118408203125))) * _2796;
                        _2644 = (_2811 * _2759.x) + _2717;
                        _2645 = (_2811 * _2759.y) + _2718;
                        _2646 = (_2811 * _2759.z) + _2719;
                        _2641 = (_2892 * _2776.x) + _2714;
                        _2642 = (_2892 * _2776.y) + _2715;
                        _2643 = (_2892 * _2776.z) + _2716;
                        if (_2721 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2714 = _2641;
                            _2715 = _2642;
                            _2716 = _2643;
                            _2717 = _2644;
                            _2718 = _2645;
                            _2719 = _2646;
                            _2720 = _2721;
                        }
                    }
                    frontier_phi_66_pred = _2641;
                    frontier_phi_66_pred_1 = _2646;
                    frontier_phi_66_pred_2 = _2645;
                    frontier_phi_66_pred_3 = _2644;
                    frontier_phi_66_pred_4 = _2643;
                    frontier_phi_66_pred_5 = _2642;
                }
                _2408 = frontier_phi_66_pred;
                _2418 = frontier_phi_66_pred_1;
                _2416 = frontier_phi_66_pred_2;
                _2414 = frontier_phi_66_pred_3;
                _2412 = frontier_phi_66_pred_4;
                _2410 = frontier_phi_66_pred_5;
                uint _2576 = _2575 + 1u;
                if (_2576 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2569 = _2408;
                    _2570 = _2410;
                    _2571 = _2412;
                    _2572 = _2414;
                    _2573 = _2416;
                    _2574 = _2418;
                    _2575 = _2576;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2407 = _2408;
            _2409 = _2410;
            _2411 = _2412;
            _2413 = _2414;
            _2415 = _2416;
            _2417 = _2418;
        }
        uvec4 _2421 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2422 = _2421.z;
        uint _2424 = (_2422 >> 8u) & 15u;
        float _2537;
        float _2539;
        float _2541;
        float _2543;
        float _2545;
        float _2547;
        if (((4294967295u << _2424) & _2271) == 0u)
        {
            _2537 = _2407;
            _2539 = _2409;
            _2541 = _2411;
            _2543 = _2413;
            _2545 = _2415;
            _2547 = _2417;
        }
        else
        {
            float _2562 = inversesqrt(dot(vec3(_2225, _2226, _2227), vec3(_2225, _2226, _2227)));
            float _2563 = _2562 * _2225;
            float _2564 = _2562 * _2226;
            float _2565 = _2562 * _2227;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2424 < ((_2422 >> 12u) & 15u))
            {
                float _2538;
                float _2540;
                float _2542;
                float _2544;
                float _2546;
                float _2548;
                float _2697 = _2407;
                float _2698 = _2409;
                float _2699 = _2411;
                float _2700 = _2413;
                float _2701 = _2415;
                float _2702 = _2417;
                uint _2703 = _2424;
                uint _2712;
                bool _2713;
                for (;;)
                {
                    _2712 = texelFetch(g_lightClassification, int((((_2265 << 5u) + (_2251 << 9u)) + (_2703 << 2u)) >> 2u)).x;
                    _2713 = _2712 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2713)
                    {
                        frontier_phi_77_pred = _2702;
                        frontier_phi_77_pred_1 = _2701;
                        frontier_phi_77_pred_2 = _2700;
                        frontier_phi_77_pred_3 = _2699;
                        frontier_phi_77_pred_4 = _2698;
                        frontier_phi_77_pred_5 = _2697;
                    }
                    else
                    {
                        float _2906;
                        float _2907;
                        float _2908;
                        float _2909;
                        float _2910;
                        float _2911;
                        float _3202;
                        float _3203;
                        float _3204;
                        float _3205;
                        float _3206;
                        float _3207;
                        float _2919 = _2697;
                        float _2920 = _2698;
                        float _2921 = _2699;
                        float _2922 = _2700;
                        float _2923 = _2701;
                        float _2924 = _2702;
                        uint _2925 = _2712;
                        uint _2926;
                        vec4 _2951;
                        float _2952;
                        vec4 _2967;
                        vec3 _2979;
                        vec4 _2995;
                        vec4 _3011;
                        float _3058;
                        bool _3059;
                        for (;;)
                        {
                            uint _2936 = ((_2703 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2925));
                            _2926 = (_2925 + 4294967295u) & _2925;
                            uint _2938 = _2936 * 40u;
                            _2951 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2938)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 3u)).x));
                            _2952 = _2951.w;
                            uint _2954 = (_2936 * 40u) + 4u;
                            _2967 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2954)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 3u)).x));
                            uint _2969 = (_2936 * 40u) + 8u;
                            _2979 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2969)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2969 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2969 + 2u)).x));
                            uint _2982 = (_2936 * 40u) + 16u;
                            _2995 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2982)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 3u)).x));
                            uint _2998 = (_2936 * 40u) + 20u;
                            _3011 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2998)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 3u)).x));
                            uint _3014 = (_2936 * 40u) + 24u;
                            vec4 _3027 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3014)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 3u)).x));
                            uint _3033 = (_2936 * 40u) + 28u;
                            vec4 _3046 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3033)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 3u)).x));
                            _3058 = fma(_2227, _3046.z, fma(_2226, _3046.y, _3046.x * _2225)) + _3046.w;
                            _3059 = !((fma(_2227, _3027.z, fma(_2226, _3027.y, _3027.x * _2225)) + _3027.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3059)
                            {
                                float _3086 = _2951.x - _2225;
                                float _3087 = _2951.y - _2226;
                                float _3088 = _2951.z - _2227;
                                float _3089 = dot(vec3(_3086, _3087, _3088), vec3(_3086, _3087, _3088));
                                float _3092 = inversesqrt(_3089);
                                float _3093 = _3092 * _3086;
                                float _3094 = _3092 * _3087;
                                float _3095 = _3092 * _3088;
                                float _3099 = 1.0 - (_3089 / (_2952 * _2952));
                                float _4182 = isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0));
                                float _3100 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
                                float _3104 = sqrt(_3089) * _2967.w;
                                float _3106 = 1.39999997615814208984375 / (_3104 + 1.39999997615814208984375);
                                float _3107 = _3106 * _3106;
                                float _3110 = ((1.0 - _3107) * dot(vec3(_3093, _3094, _3095), vec3(_427, _430, _433))) + _3107;
                                float _3113 = _3104 * _3104;
                                float _3117 = (fma(_2227, _2995.z, fma(_2226, _2995.y, _2995.x * _2225)) + _2995.w) / _3058;
                                float _3118 = (fma(_2227, _3011.z, fma(_2226, _3011.y, _3011.x * _2225)) + _3011.w) / _3058;
                                float _3122 = 1.0 - dot(vec2(_3117, _3118), vec2(_3117, _3118));
                                float _4198 = isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0));
                                float _3123 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
                                float _3124 = _3123 * (((isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0))) * _3100) / ((_3113 * 0.699999988079071044921875) + 1.0));
                                float _3136 = exp2(log2(1.0 / ((_3113 * 3.5) + 5.0)) * 0.25);
                                float _3137 = 1.0 - _503;
                                float _3144 = sqrt(1.0 - ((1.0 - (_3137 * _3137)) * (1.0 - (_3136 * _3136))));
                                float _3145 = _3144 * _3144;
                                float _3146 = _3145 * _3145;
                                float _3147 = _3093 - _2563;
                                float _3148 = _3094 - _2564;
                                float _3149 = _3095 - _2565;
                                float _3153 = inversesqrt(dot(vec3(_3147, _3148, _3149), vec3(_3147, _3148, _3149)));
                                float _3157 = dot(vec3(_427, _430, _433), vec3((-0.0) - _2563, (-0.0) - _2564, (-0.0) - _2565));
                                float _4209 = isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0));
                                float _3160 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
                                float _3161 = dot(vec3(_427, _430, _433), vec3(_3153 * _3147, _3153 * _3148, _3153 * _3149));
                                float _4220 = isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0));
                                float _3164 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
                                float _3168 = ((_3164 * _3164) * (_3146 + (-1.0))) + 1.0;
                                float _3169 = _3106 * _3145;
                                float _3170 = _3169 * _3169;
                                float _3176 = ((1.0 - _3170) * dot(vec3(_427, _430, _433), vec3(_3093, _3094, _3095))) + _3170;
                                float _4231 = isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0));
                                float _3177 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
                                float _3178 = 1.0 - _3145;
                                float _3188 = (0.5 / (((_3177 * ((_3160 * _3178) + _3145)) + 9.9999999392252902907785028219223e-09) + (((_3177 * _3178) + _3145) * _3160))) * _3177;
                                float _4242 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0));
                                float _3198 = (_3123 * _3100) * (((_3146 * 3.1415927410125732421875) * (isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0)))) / ((_3168 * _3168) * ((_3113 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3124 * _2967.y;
                                frontier_phi_83_pred_1 = _3124 * _2967.x;
                                frontier_phi_83_pred_2 = _3198 * _2979.z;
                                frontier_phi_83_pred_3 = _3198 * _2979.y;
                                frontier_phi_83_pred_4 = _3198 * _2979.x;
                                frontier_phi_83_pred_5 = _3124 * _2967.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3206 = frontier_phi_83_pred;
                            _3205 = frontier_phi_83_pred_1;
                            _3204 = frontier_phi_83_pred_2;
                            _3203 = frontier_phi_83_pred_3;
                            _3202 = frontier_phi_83_pred_4;
                            _3207 = frontier_phi_83_pred_5;
                            _2909 = _3205 + _2922;
                            _2910 = _3206 + _2923;
                            _2911 = _3207 + _2924;
                            _2906 = _3202 + _2919;
                            _2907 = _3203 + _2920;
                            _2908 = _3204 + _2921;
                            if (_2926 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2919 = _2906;
                                _2920 = _2907;
                                _2921 = _2908;
                                _2922 = _2909;
                                _2923 = _2910;
                                _2924 = _2911;
                                _2925 = _2926;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2911;
                        frontier_phi_77_pred_1 = _2910;
                        frontier_phi_77_pred_2 = _2909;
                        frontier_phi_77_pred_3 = _2908;
                        frontier_phi_77_pred_4 = _2907;
                        frontier_phi_77_pred_5 = _2906;
                    }
                    _2548 = frontier_phi_77_pred;
                    _2546 = frontier_phi_77_pred_1;
                    _2544 = frontier_phi_77_pred_2;
                    _2542 = frontier_phi_77_pred_3;
                    _2540 = frontier_phi_77_pred_4;
                    _2538 = frontier_phi_77_pred_5;
                    uint _2704 = _2703 + 1u;
                    if (_2704 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2697 = _2538;
                        _2698 = _2540;
                        _2699 = _2542;
                        _2700 = _2544;
                        _2701 = _2546;
                        _2702 = _2548;
                        _2703 = _2704;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2542;
                frontier_phi_58_59_ladder_1 = _2548;
                frontier_phi_58_59_ladder_2 = _2546;
                frontier_phi_58_59_ladder_3 = _2544;
                frontier_phi_58_59_ladder_4 = _2540;
                frontier_phi_58_59_ladder_5 = _2538;
            }
            else
            {
                frontier_phi_58_59_ladder = _2411;
                frontier_phi_58_59_ladder_1 = _2417;
                frontier_phi_58_59_ladder_2 = _2415;
                frontier_phi_58_59_ladder_3 = _2413;
                frontier_phi_58_59_ladder_4 = _2409;
                frontier_phi_58_59_ladder_5 = _2407;
            }
            _2537 = frontier_phi_58_59_ladder_5;
            _2539 = frontier_phi_58_59_ladder_4;
            _2541 = frontier_phi_58_59_ladder;
            _2543 = frontier_phi_58_59_ladder_3;
            _2545 = frontier_phi_58_59_ladder_2;
            _2547 = frontier_phi_58_59_ladder_1;
        }
        float _2552 = isnan(1.0) ? _487 : (isnan(_487) ? 1.0 : min(_487, 1.0));
        _2284 = (_2552 * _2543) + _1717;
        _2286 = (_2552 * _2545) + _1719;
        _2288 = (_2552 * _2547) + _1721;
        _2290 = ((_2537 * _472) * _2552) + _2065;
        _2292 = ((_2539 * _474) * _2552) + _2067;
        _2294 = ((_2541 * _475) * _2552) + _2069;
    }
    else
    {
        _2284 = _1717;
        _2286 = _1719;
        _2288 = _1721;
        _2290 = _2065;
        _2292 = _2067;
        _2294 = _2069;
    }
    uint _2300 = _448 + uint(cbMatDynParam._m0[0u].w);
    float _2308 = ((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].y) * _286.x) * cbInstanceData._m0[_2300].x;
    float _2311 = ((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].y) * _286.y) * cbInstanceData._m0[_2300].y;
    float _2314 = ((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].y) * _286.z) * cbInstanceData._m0[_2300].z;
    float _4258 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _4269 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _4280 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _2331 = (((isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) * (_2284 + ((isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0))) * _487))) + ((_2290 + ((isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0))) * _1329)) * cbPerFrame._m0[3u].x)) + _2308;
    float _2333 = (_2311 + ((_2292 + ((isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0))) * _1329)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * (_2286 + ((isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0))) * _487)));
    float _2335 = (_2314 + ((_2294 + ((isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0))) * _1329)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * (_2288 + ((isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0))) * _487)));
    float _2336 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
    float _2337 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
    float _2338 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
    float _2344 = cbMtdParam._m0[2u].x * _2308;
    float _2345 = cbMtdParam._m0[2u].y * _2311;
    float _2346 = cbMtdParam._m0[2u].z * _2314;
    float _4306 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2348 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
    uint _2349 = _446 + 6u;
    float _2357 = _406 / cbSceneParam._m0[86u].x;
    float _2358 = _407 / cbSceneParam._m0[86u].y;
    vec4 _2372 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2357, _2358, (log2((isnan(cbSceneParam._m0[77u].w) ? _327 : (isnan(_327) ? cbSceneParam._m0[77u].w : min(_327, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2374 = _2372.x;
    float _2375 = _2372.y;
    float _2376 = _2372.z;
    float _2377 = _2372.w;
    float _2470;
    float _2472;
    float _2474;
    float _2476;
    if (_327 > cbSceneParam._m0[78u].w)
    {
        float _2432 = isnan(_327) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _327 : min(cbSceneParam._m0[80u].w, _327));
        float _2433 = _2432 / _327;
        float _2444 = _2433 * _378;
        float _2445 = _379 * _2433;
        float _2446 = (-0.0) - _2445;
        float _2448 = _2433 * _380;
        float _2450 = (cbSceneParam._m0[77u].w * _2446) / _2432;
        float _2451 = _2450 + cbSceneParam._m0[79u].w;
        float _2452 = cbSceneParam._m0[79u].w - _2445;
        float _2458 = sqrt(((_2444 * _2444) + (_2445 * _2445)) + (_2448 * _2448));
        float _2461 = (1.0 - (cbSceneParam._m0[77u].w / _2432)) * _2458;
        float _2466 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2468 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2654;
        if (abs((_2446 - _2450) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2654 = ((((_2451 > 0.0) ? exp2(_2466 * _2451) : (2.0 - exp2(_2468 * _2451))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2461;
        }
        else
        {
            float _2598 = 1.0 / cbSceneParam._m0[80u].x;
            float _2599 = isnan(_2452) ? _2451 : (isnan(_2451) ? _2452 : max(_2451, _2452));
            float _2600 = isnan(_2452) ? _2451 : (isnan(_2451) ? _2452 : min(_2451, _2452));
            float _2609 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : min(_2599, 0.0));
            float _2610 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : min(_2600, 0.0));
            _2654 = ((abs(_2458 / _2446) * cbSceneParam._m0[80u].y) * ((((_2609 - _2610) * 2.0) - ((exp2(_2466 * (isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0)))) - exp2(_2466 * (isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0))))) * _2598)) - ((exp2(_2468 * _2609) - exp2(_2468 * _2610)) * _2598))) + (_2461 * cbSceneParam._m0[80u].z);
        }
        vec4 _2656 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2357, _2358, 1.0), 0.0);
        float _2665 = exp2((_2654 * (-1.44269502162933349609375)) * (1.0 - _2656.w));
        float _2666 = log2(_2665);
        float _2682 = log2(_2377);
        _2470 = (exp2(_2682 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2666 * cbSceneParam._m0[78u].x)) * _2656.x) / cbSceneParam._m0[78u].x)) + _2374;
        _2472 = (exp2(_2682 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2666 * cbSceneParam._m0[78u].y)) * _2656.y) / cbSceneParam._m0[78u].y)) + _2375;
        _2474 = (exp2(_2682 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2666 * cbSceneParam._m0[78u].z)) * _2656.z) / cbSceneParam._m0[78u].z)) + _2376;
        _2476 = _2665 * _2377;
    }
    else
    {
        _2470 = _2374;
        _2472 = _2375;
        _2474 = _2376;
        _2476 = _2377;
    }
    bool _2692;
    vec4 _2486;
    vec4 _2508;
    float _2510;
    float _2514;
    float _2515;
    float _2516;
    float _2519;
    float _2522;
    float _2525;
    float _2526;
    bool _2536;
    for (;;)
    {
        _2486 = cbMatDynParam._m0[0u];
        float _2488 = roundEven(_2486.y);
        bool _2489 = _2488 == 3.0;
        float _2490 = log2(_2476);
        float _2494 = exp2(_2490 * cbSceneParam._m0[78u].x);
        float _2495 = exp2(_2490 * cbSceneParam._m0[78u].y);
        float _2496 = exp2(_2490 * cbSceneParam._m0[78u].z);
        float _2497 = _2494 * _2336;
        float _2498 = _2495 * _2337;
        float _2499 = _2496 * _2338;
        float _2506 = _394 + (-0.5);
        _2508 = cbMtdParam._m0[1u];
        _2510 = _2508.y * _2506;
        float _2513 = (_2488 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2514 = _2513 * (_2489 ? _2497 : (_2497 + (cbSceneParam._m0[72u].w * _2470)));
        _2515 = _2513 * (_2489 ? _2498 : (_2498 + (cbSceneParam._m0[72u].w * _2472)));
        _2516 = _2513 * (_2489 ? _2499 : (_2499 + (cbSceneParam._m0[72u].w * _2474)));
        _2519 = ((_2344 * _2348) * _2494) * _2513;
        _2522 = ((_2345 * _2348) * _2495) * _2513;
        _2525 = ((_2346 * _2348) * _2496) * _2513;
        _2526 = _2506 * 0.999000012874603271484375;
        _2536 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2536)
        {
            if ((cbInstanceData._m0[_446 + 7u].x + _2526) < 0.5)
            {
                _2692 = true;
                break;
            }
        }
        uint _2633 = _448 + uint(_2486.w);
        if ((cbInstanceData._m0[_2633].w < 1.0) && ((cbInstanceData._m0[_2633].w + _2526) < 0.5))
        {
            _2692 = true;
            break;
        }
        if ((_2510 + 1.0) < _2508.x)
        {
            _2692 = true;
            break;
        }
        _2692 = false;
        break;
    }
    float _2897;
    if (_2692)
    {
        discard_state = true;
        _2897 = 0.0;
    }
    else
    {
        _2897 = cbInstanceData._m0[_2349].w;
    }
    SV_Target.x = _2514;
    SV_Target.y = _2515;
    SV_Target.z = _2516;
    SV_Target.w = _2897;
    SV_Target_1.x = _2519;
    SV_Target_1.y = _2522;
    SV_Target_1.z = _2525;
    SV_Target_1.w = cbInstanceData._m0[_2349].w;
    discard_exit();
}


