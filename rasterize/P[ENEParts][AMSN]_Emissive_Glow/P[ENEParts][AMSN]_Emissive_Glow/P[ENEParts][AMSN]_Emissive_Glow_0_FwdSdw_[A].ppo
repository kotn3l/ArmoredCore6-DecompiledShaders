#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ENEParts_AMSN_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ENEParts_AMSN_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D P_ENEParts_AMSN_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D P_ENEParts_AMSN_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _910;
float _3627;
float _3628;
float _3629;
float _3630;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _230 = texture(sampler2D(P_ENEParts_AMSN_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _236 = _230.x * cbMtdParam._m0[9u].x;
    float _237 = _230.y * cbMtdParam._m0[9u].y;
    float _238 = _230.z * cbMtdParam._m0[9u].z;
    vec4 _250 = texture(sampler2D(P_ENEParts_AMSN_Emissive_Glow_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _257 = cbMtdParam._m0[11u].x + _250.x;
    vec4 _269 = texture(sampler2D(P_ENEParts_AMSN_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _273 = _269.z;
    float _277 = (_269.x * 2.0) + (-1.0);
    float _279 = (_269.y * 2.0) + (-1.0);
    float _280 = dot(vec2(_277, _279), vec2(_277, _279));
    float _3639 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _286 = sqrt(1.0 - (isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0))));
    vec4 _305 = texture(sampler2D(P_ENEParts_AMSN_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _312 = fma(_286, _200 * NORMAL.x, fma(_279, _207 * TANGENT.x, (_193 * _186) * _277));
    float _315 = fma(_286, _200 * NORMAL.y, fma(_279, _207 * TANGENT.y, (_193 * _187) * _277));
    float _318 = fma(_286, _200 * NORMAL.z, fma(_279, _207 * TANGENT.z, (_193 * _188) * _277));
    float _322 = inversesqrt(dot(vec3(_312, _315, _318), vec3(_312, _315, _318)));
    float _323 = _322 * _312;
    float _324 = _322 * _315;
    float _325 = _322 * _318;
    float _3650 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _326 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
    float _3661 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _3672 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3683 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _3694 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _330 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
    float _346 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _387 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _397 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _387);
    float _398 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _387);
    float _399 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _387);
    float _403 = inversesqrt(dot(vec3(_397, _398, _399), vec3(_397, _398, _399)));
    float _404 = _397 * _403;
    float _405 = _398 * _403;
    float _406 = _399 * _403;
    vec4 _411 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _413 = _411.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _589 = sqrt(((_397 * _397) + (_398 * _398)) + (_399 * _399));
        float _595 = (cbMatDynParam._m0[5u].x * _589) + cbMatDynParam._m0[5u].y;
        float _3705 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
        float _596 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
        float _600 = (cbMatDynParam._m0[5u].z * _589) + cbMatDynParam._m0[5u].w;
        float _3716 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0))) - _596)) + _596) < ((_413 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _425 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _426 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _446 = fma(_325, cbSceneParam._m0[5u].z, fma(_324, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _323));
    float _449 = fma(_325, cbSceneParam._m0[6u].z, fma(_324, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _323));
    float _452 = fma(_325, cbSceneParam._m0[7u].z, fma(_324, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _323));
    uint _465 = uint(roundEven(NORMAL.w)) * 13u;
    uint _467 = _465 + 9u;
    uint _468 = _467 + uint(cbMatDynParam._m0[0u].w);
    float _474 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0)))) * cbInstanceData._m0[_468].x;
    float _475 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0)))) * cbInstanceData._m0[_468].y;
    float _476 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0)))) * cbInstanceData._m0[_468].z;
    float _3727 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _477 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
    float _3738 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _478 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
    float _3749 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _479 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
    float _480 = 1.0 - _330;
    float _481 = _477 * _480;
    float _482 = _478 * _480;
    float _483 = _479 * _480;
    float _488 = (_477 + (-0.039999999105930328369140625)) * _330;
    float _489 = (_478 + (-0.039999999105930328369140625)) * _330;
    float _490 = (_479 + (-0.039999999105930328369140625)) * _330;
    float _491 = _488 + 0.039999999105930328369140625;
    float _493 = _489 + 0.039999999105930328369140625;
    float _494 = _490 + 0.039999999105930328369140625;
    vec4 _503 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _425, cbSceneParam._m0[86u].y * _426));
    float _506 = _503.x * TEXCOORD.z;
    float _507 = dot(vec3(_323, _324, _325), vec3(_404, _405, _406));
    float _510 = _507 * 2.0;
    float _514 = (_510 * _323) - _404;
    float _515 = (_510 * _324) - _405;
    float _516 = (_510 * _325) - _406;
    float _520 = abs(dot(vec3(_404, _405, _406), vec3(_323, _324, _325)));
    float _3760 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _522 = sqrt(_326);
    float _535 = exp2((_522 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_522 * 3.0));
    float _541 = (1.0 - _535) * ((_522 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _542 = _535 * _522;
    float _570 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _574 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _578 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _909;
    float _911;
    float _912;
    float _913;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    float _919;
    float _920;
    float _921;
    float _922;
    float _923;
    float _924;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _634 = fma(_578, cbModelParam._m0[26u].z, fma(_574, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _570));
        float _638 = fma(_578, cbModelParam._m0[27u].z, fma(_574, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _570));
        float _642 = fma(_578, cbModelParam._m0[28u].z, fma(_574, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _570));
        float _667 = _570 + _323;
        float _668 = _574 + _324;
        float _669 = _578 + _325;
        float _679 = fma(_669, cbModelParam._m0[26u].z, fma(_668, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _667)) - _634;
        float _680 = fma(_669, cbModelParam._m0[27u].z, fma(_668, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _667)) - _638;
        float _681 = fma(_669, cbModelParam._m0[28u].z, fma(_668, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _667)) - _642;
        float _685 = inversesqrt(dot(vec3(_679, _680, _681), vec3(_679, _680, _681)));
        float _698 = ((_685 * _679) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_634 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _699 = ((_685 * _680) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_638 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _700 = ((_685 * _681) / cbModelParam._m0[34u].z) + ((((((_642 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _703 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_698, _699, _700), 0.0);
        vec4 _710 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_698, _699, _700), 0.0);
        vec4 _717 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_698, _699, _700), 0.0);
        vec4 _724 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_698, _699, _700), 0.0);
        float _737 = exp2((_703.w + (-0.5)) * 20.0) * 2.0;
        float _738 = _737 * (_703.x + (-0.5));
        float _739 = _737 * (_703.y + (-0.5));
        float _740 = _737 * (_703.z + (-0.5));
        float _747 = exp2((_710.w + (-0.5)) * 20.0) * 2.0;
        float _748 = _747 * (_710.x + (-0.5));
        float _749 = _747 * (_710.y + (-0.5));
        float _750 = _747 * (_710.z + (-0.5));
        float _757 = exp2((_717.w + (-0.5)) * 20.0) * 2.0;
        float _758 = _757 * (_717.x + (-0.5));
        float _759 = _757 * (_717.y + (-0.5));
        float _760 = _757 * (_717.z + (-0.5));
        float _767 = exp2((_724.w + (-0.5)) * 20.0) * 2.0;
        float _768 = _767 * (_724.x + (-0.5));
        float _769 = _767 * (_724.y + (-0.5));
        float _770 = _767 * (_724.z + (-0.5));
        float _771 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
        float _772 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
        float _773 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _774 = _738 * 0.5;
        float _775 = _748 * 0.5;
        float _776 = _758 * 0.5;
        float _777 = dot(vec3(_774, _775, _776), vec3(_774, _775, _776));
        float _782 = (_777 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_777);
        float _791 = (dot(vec3(_323, _324, _325), vec3(_782 * _774, _782 * _775, _782 * _776)) + 1.0) * 0.5;
        float _3786 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
        float _801 = sqrt(((_775 * _775) + (_774 * _774)) + (_776 * _776)) / (_771 + 9.9999997473787516355514526367188e-06);
        float _3797 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
        float _802 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
        float _803 = _802 * 2.0;
        float _807 = (1.0 - _802) / (_802 + 1.0);
        float _3808 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
        float _808 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
        float _817 = ((((1.0 - _808) * (_803 + 2.0)) * exp2(log2(isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0))) * (_803 + 1.0))) + _808) * _771;
        float _818 = _739 * 0.5;
        float _819 = _749 * 0.5;
        float _820 = _759 * 0.5;
        float _821 = dot(vec3(_818, _819, _820), vec3(_818, _819, _820));
        float _826 = (_821 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_821);
        float _834 = (dot(vec3(_323, _324, _325), vec3(_826 * _818, _826 * _819, _826 * _820)) + 1.0) * 0.5;
        float _3819 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
        float _843 = sqrt(((_819 * _819) + (_818 * _818)) + (_820 * _820)) / (_772 + 9.9999997473787516355514526367188e-06);
        float _3830 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _844 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
        float _845 = _844 * 2.0;
        float _849 = (1.0 - _844) / (_844 + 1.0);
        float _3841 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
        float _850 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
        float _859 = ((((1.0 - _850) * (_845 + 2.0)) * exp2(log2(isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0))) * (_845 + 1.0))) + _850) * _772;
        float _860 = _740 * 0.5;
        float _861 = _750 * 0.5;
        float _862 = _760 * 0.5;
        float _863 = dot(vec3(_860, _861, _862), vec3(_860, _861, _862));
        float _868 = (_863 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_863);
        float _876 = (dot(vec3(_323, _324, _325), vec3(_868 * _860, _868 * _861, _868 * _862)) + 1.0) * 0.5;
        float _3852 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _885 = sqrt(((_861 * _861) + (_860 * _860)) + (_862 * _862)) / (_773 + 9.9999997473787516355514526367188e-06);
        float _3863 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _886 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
        float _887 = _886 * 2.0;
        float _891 = (1.0 - _886) / (_886 + 1.0);
        float _3874 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _892 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _901 = ((((1.0 - _892) * (_887 + 2.0)) * exp2(log2(isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0))) * (_887 + 1.0))) + _892) * _773;
        _909 = _740;
        _911 = _739;
        _912 = _738;
        _913 = _750;
        _914 = _749;
        _915 = _748;
        _916 = _760;
        _917 = _759;
        _918 = _758;
        _919 = _773;
        _920 = _772;
        _921 = _771;
        _922 = cbModelParam._m0[36u].z * (isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0)));
        _923 = cbModelParam._m0[36u].z * (isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0)));
        _924 = cbModelParam._m0[36u].z * (isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0)));
    }
    else
    {
        _909 = _910;
        _911 = _910;
        _912 = _910;
        _913 = _910;
        _914 = _910;
        _915 = _910;
        _916 = _910;
        _917 = _910;
        _918 = _910;
        _919 = _910;
        _920 = _910;
        _921 = _910;
        _922 = 0.0;
        _923 = 0.0;
        _924 = 0.0;
    }
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _953 = fma(_578, cbModelParam._m0[30u].z, fma(_574, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _570));
        float _957 = fma(_578, cbModelParam._m0[31u].z, fma(_574, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _570));
        float _961 = fma(_578, cbModelParam._m0[32u].z, fma(_574, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _570));
        float _984 = _570 + _323;
        float _985 = _574 + _324;
        float _986 = _578 + _325;
        float _996 = fma(_986, cbModelParam._m0[30u].z, fma(_985, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _984)) - _953;
        float _997 = fma(_986, cbModelParam._m0[31u].z, fma(_985, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _984)) - _957;
        float _998 = fma(_986, cbModelParam._m0[32u].z, fma(_985, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _984)) - _961;
        float _1002 = inversesqrt(dot(vec3(_996, _997, _998), vec3(_996, _997, _998)));
        float _1015 = ((_1002 * _996) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_953 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1016 = ((_1002 * _997) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_957 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1017 = ((_1002 * _998) / cbModelParam._m0[35u].z) + ((((((_961 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1019 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1015, _1016, _1017), 0.0);
        vec4 _1026 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1015, _1016, _1017), 0.0);
        vec4 _1033 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1015, _1016, _1017), 0.0);
        vec4 _1040 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1015, _1016, _1017), 0.0);
        float _1052 = exp2((_1019.w + (-0.5)) * 20.0) * 2.0;
        float _1053 = _1052 * (_1019.x + (-0.5));
        float _1054 = _1052 * (_1019.y + (-0.5));
        float _1055 = _1052 * (_1019.z + (-0.5));
        float _1062 = exp2((_1026.w + (-0.5)) * 20.0) * 2.0;
        float _1063 = _1062 * (_1026.x + (-0.5));
        float _1064 = _1062 * (_1026.y + (-0.5));
        float _1065 = _1062 * (_1026.z + (-0.5));
        float _1072 = exp2((_1033.w + (-0.5)) * 20.0) * 2.0;
        float _1073 = _1072 * (_1033.x + (-0.5));
        float _1074 = _1072 * (_1033.y + (-0.5));
        float _1075 = _1072 * (_1033.z + (-0.5));
        float _1082 = exp2((_1040.w + (-0.5)) * 20.0) * 2.0;
        float _1083 = _1082 * (_1040.x + (-0.5));
        float _1084 = _1082 * (_1040.y + (-0.5));
        float _1085 = _1082 * (_1040.z + (-0.5));
        float _1086 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1087 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1088 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1089 = _1053 * 0.5;
        float _1090 = _1063 * 0.5;
        float _1091 = _1073 * 0.5;
        float _1092 = dot(vec3(_1089, _1090, _1091), vec3(_1089, _1090, _1091));
        float _1097 = (_1092 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1092);
        float _1105 = (dot(vec3(_323, _324, _325), vec3(_1097 * _1089, _1097 * _1090, _1097 * _1091)) + 1.0) * 0.5;
        float _3915 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1114 = sqrt(((_1090 * _1090) + (_1089 * _1089)) + (_1091 * _1091)) / (_1086 + 9.9999997473787516355514526367188e-06);
        float _3926 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _1116 = _1115 * 2.0;
        float _1120 = (1.0 - _1115) / (_1115 + 1.0);
        float _3937 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1121 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1130 = ((((1.0 - _1121) * (_1116 + 2.0)) * exp2(log2(isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) * (_1116 + 1.0))) + _1121) * _1086;
        float _1131 = _1054 * 0.5;
        float _1132 = _1064 * 0.5;
        float _1133 = _1074 * 0.5;
        float _1134 = dot(vec3(_1131, _1132, _1133), vec3(_1131, _1132, _1133));
        float _1139 = (_1134 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1134);
        float _1147 = (dot(vec3(_323, _324, _325), vec3(_1139 * _1131, _1139 * _1132, _1139 * _1133)) + 1.0) * 0.5;
        float _3948 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1156 = sqrt(((_1132 * _1132) + (_1131 * _1131)) + (_1133 * _1133)) / (_1087 + 9.9999997473787516355514526367188e-06);
        float _3959 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _1158 = _1157 * 2.0;
        float _1162 = (1.0 - _1157) / (_1157 + 1.0);
        float _3970 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1163 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
        float _1172 = ((((1.0 - _1163) * (_1158 + 2.0)) * exp2(log2(isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0))) * (_1158 + 1.0))) + _1163) * _1087;
        float _1173 = _1055 * 0.5;
        float _1174 = _1065 * 0.5;
        float _1175 = _1075 * 0.5;
        float _1176 = dot(vec3(_1173, _1174, _1175), vec3(_1173, _1174, _1175));
        float _1181 = (_1176 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1176);
        float _1189 = (dot(vec3(_323, _324, _325), vec3(_1181 * _1173, _1181 * _1174, _1181 * _1175)) + 1.0) * 0.5;
        float _3981 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1198 = sqrt(((_1174 * _1174) + (_1173 * _1173)) + (_1175 * _1175)) / (_1088 + 9.9999997473787516355514526367188e-06);
        float _3992 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
        float _1200 = _1199 * 2.0;
        float _1204 = (1.0 - _1199) / (_1199 + 1.0);
        float _4003 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1205 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _1214 = ((((1.0 - _1205) * (_1200 + 2.0)) * exp2(log2(isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0))) * (_1200 + 1.0))) + _1205) * _1088;
        _1222 = _1055;
        _1223 = _1054;
        _1224 = _1053;
        _1225 = _1065;
        _1226 = _1064;
        _1227 = _1063;
        _1228 = _1075;
        _1229 = _1074;
        _1230 = _1073;
        _1231 = _1088;
        _1232 = _1087;
        _1233 = _1086;
        _1234 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0)));
        _1235 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0)));
        _1236 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0)));
    }
    else
    {
        _1222 = _910;
        _1223 = _910;
        _1224 = _910;
        _1225 = _910;
        _1226 = _910;
        _1227 = _910;
        _1228 = _910;
        _1229 = _910;
        _1230 = _910;
        _1231 = _910;
        _1232 = _910;
        _1233 = _910;
        _1234 = 0.0;
        _1235 = 0.0;
        _1236 = 0.0;
    }
    float _1246 = (cbModelParam._m0[1u].x * (_1234 - _922)) + _922;
    float _1247 = (cbModelParam._m0[1u].x * (_1235 - _923)) + _923;
    float _1248 = (cbModelParam._m0[1u].x * (_1236 - _924)) + _924;
    float _1269 = fma(_1248, cbSceneParam._m0[89u].z, fma(_1247, cbSceneParam._m0[89u].y, _1246 * cbSceneParam._m0[89u].x));
    float _1272 = fma(_1248, cbSceneParam._m0[90u].z, fma(_1247, cbSceneParam._m0[90u].y, _1246 * cbSceneParam._m0[90u].x));
    float _1275 = fma(_1248, cbSceneParam._m0[91u].z, fma(_1247, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1246));
    float _1290 = _514 * 0.5;
    float _1291 = _515 * 0.5;
    float _1292 = _516 * 0.5;
    float _1293 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_1224, _1227, _1230, _1233));
    float _1296 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_1223, _1226, _1229, _1232));
    float _1299 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_1222, _1225, _1228, _1231));
    float _1333;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1306 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_909, _913, _916, _919));
        float _1310 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_911, _914, _917, _920));
        float _1314 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_912, _915, _918, _921));
        float _1321 = dot(vec4(cbModelParam._m0[39u]), vec4(_1290, _1291, _1292, 1.0));
        _1333 = dot(vec3(isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0)), isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)), isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1321) ? 0.0 : (isnan(0.0) ? _1321 : max(0.0, _1321))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1333 = 1.0;
    }
    float _1344;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1335 = dot(vec4(cbModelParam._m0[40u]), vec4(_1290, _1291, _1292, 1.0));
        _1344 = dot(vec3(isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0)), isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0)), isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1335) ? 0.0 : (isnan(0.0) ? _1335 : max(0.0, _1335))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1344 = 1.0;
    }
    float _1348 = (_1344 * cbModelParam._m0[1u].x) + (_1333 * (1.0 - cbModelParam._m0[1u].x));
    float _1358 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _326);
    float _1359 = isnan(_1358) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1358 : min(cbModelParam._m0[25u].z, _1358));
    float _1441;
    float _1443;
    float _1445;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1408 = fma(_578, cbModelParam._m0[13u].z, fma(_574, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _570)) + cbModelParam._m0[13u].w;
        float _1412 = fma(_578, cbModelParam._m0[14u].z, fma(_574, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _570)) + cbModelParam._m0[14u].w;
        float _1416 = fma(_578, cbModelParam._m0[15u].z, fma(_574, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _570)) + cbModelParam._m0[15u].w;
        float _1419 = fma(_516, cbModelParam._m0[13u].z, fma(_515, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _514));
        float _1422 = fma(_516, cbModelParam._m0[14u].z, fma(_515, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _514));
        float _1425 = fma(_516, cbModelParam._m0[15u].z, fma(_515, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _514));
        float _1453;
        if (_1419 > 0.0)
        {
            _1453 = abs((1.0 - _1408) / _1419);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1419 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1408 + 1.0) / _1419);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1453 = frontier_phi_17_15_ladder;
        }
        float _1628;
        if (_1422 > 0.0)
        {
            _1628 = abs((1.0 - _1412) / _1422);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1422 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1412 + 1.0) / _1422);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1628 = frontier_phi_26_22_ladder;
        }
        float _1924;
        if (_1425 > 0.0)
        {
            _1924 = abs((1.0 - _1416) / _1425);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1425 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1416 + 1.0) / _1425);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1924 = frontier_phi_38_33_ladder;
        }
        float _1926 = isnan(_1628) ? _1453 : (isnan(_1453) ? _1628 : min(_1453, _1628));
        float _1927 = isnan(_1924) ? _1926 : (isnan(_1926) ? _1924 : min(_1926, _1924));
        float _1931 = (_1927 * _1419) + _1408;
        float _1932 = (_1927 * _1422) + _1412;
        float _1933 = (_1927 * _1425) + _1416;
        float _1934 = _1927 * 9.9999997473787516355514526367188e-05;
        float _1936 = (-1.0) - _1934;
        float _1938 = _1934 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1933 > _1938) || ((_1933 < _1936) || ((_1932 > _1938) || ((_1932 < _1936) || ((_1931 < _1936) || (_1931 > _1938))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2078 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1933, cbModelParam._m0[9u].z, fma(_1932, cbModelParam._m0[9u].y, _1931 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1933, cbModelParam._m0[10u].z, fma(_1932, cbModelParam._m0[10u].y, _1931 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1933, cbModelParam._m0[11u].z, fma(_1932, cbModelParam._m0[11u].y, _1931 * cbModelParam._m0[11u].x))), _1359);
            frontier_phi_16_38_ladder = _2078.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2078.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2078.x * cbModelParam._m0[1u].y;
        }
        _1441 = frontier_phi_16_38_ladder_2;
        _1443 = frontier_phi_16_38_ladder_1;
        _1445 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1429 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_514, _515, _516), _1359);
        _1441 = _1429.x * cbModelParam._m0[1u].y;
        _1443 = _1429.y * cbModelParam._m0[1u].y;
        _1445 = _1429.z * cbModelParam._m0[1u].y;
    }
    float _1449 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _326);
    float _1450 = isnan(_1449) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1449 : min(cbModelParam._m0[25u].w, _1449));
    float _1543;
    float _1545;
    float _1547;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1507 = fma(_578, cbModelParam._m0[21u].z, fma(_574, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _570)) + cbModelParam._m0[21u].w;
        float _1511 = fma(_578, cbModelParam._m0[22u].z, fma(_574, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _570)) + cbModelParam._m0[22u].w;
        float _1515 = fma(_578, cbModelParam._m0[23u].z, fma(_574, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _570)) + cbModelParam._m0[23u].w;
        float _1518 = fma(_516, cbModelParam._m0[21u].z, fma(_515, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _514));
        float _1521 = fma(_516, cbModelParam._m0[22u].z, fma(_515, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _514));
        float _1524 = fma(_516, cbModelParam._m0[23u].z, fma(_515, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _514));
        float _1633;
        if (_1518 > 0.0)
        {
            _1633 = abs((1.0 - _1507) / _1518);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1518 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1507 + 1.0) / _1518);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1633 = frontier_phi_28_24_ladder;
        }
        float _1951;
        if (_1521 > 0.0)
        {
            _1951 = abs((1.0 - _1511) / _1521);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1521 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1511 + 1.0) / _1521);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1951 = frontier_phi_40_35_ladder;
        }
        float _2289;
        if (_1524 > 0.0)
        {
            _2289 = abs((1.0 - _1515) / _1524);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1524 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1515 + 1.0) / _1524);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2289 = frontier_phi_50_47_ladder;
        }
        float _2291 = isnan(_1951) ? _1633 : (isnan(_1633) ? _1951 : min(_1633, _1951));
        float _2292 = isnan(_2289) ? _2291 : (isnan(_2291) ? _2289 : min(_2291, _2289));
        float _2296 = (_2292 * _1518) + _1507;
        float _2297 = (_2292 * _1521) + _1511;
        float _2298 = (_2292 * _1524) + _1515;
        float _2299 = _2292 * 9.9999997473787516355514526367188e-05;
        float _2300 = (-1.0) - _2299;
        float _2302 = _2299 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2298 > _2302) || ((_2298 < _2300) || ((_2297 > _2302) || ((_2297 < _2300) || ((_2296 < _2300) || (_2296 > _2302))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2420 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2298, cbModelParam._m0[17u].z, fma(_2297, cbModelParam._m0[17u].y, _2296 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2298, cbModelParam._m0[18u].z, fma(_2297, cbModelParam._m0[18u].y, _2296 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2298, cbModelParam._m0[19u].z, fma(_2297, cbModelParam._m0[19u].y, _2296 * cbModelParam._m0[19u].x))), _1450);
            frontier_phi_25_50_ladder = _2420.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2420.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2420.x * cbModelParam._m0[1u].z;
        }
        _1543 = frontier_phi_25_50_ladder_2;
        _1545 = frontier_phi_25_50_ladder_1;
        _1547 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1527 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_514, _515, _516), _1450);
        _1543 = _1527.x * cbModelParam._m0[1u].z;
        _1545 = _1527.y * cbModelParam._m0[1u].z;
        _1547 = _1527.z * cbModelParam._m0[1u].z;
    }
    float _1560 = (((_541 * _491) + _542) * _506) * ((cbModelParam._m0[1u].w * (_1543 - _1441)) + _1441);
    float _1562 = (((_541 * _493) + _542) * _506) * ((cbModelParam._m0[1u].w * (_1545 - _1443)) + _1443);
    float _1564 = (((_541 * _494) + _542) * _506) * ((cbModelParam._m0[1u].w * (_1547 - _1445)) + _1445);
    float _1567 = fma(_1564, cbSceneParam._m0[89u].z, fma(_1562, cbSceneParam._m0[89u].y, _1560 * cbSceneParam._m0[89u].x));
    float _1570 = fma(_1564, cbSceneParam._m0[90u].z, fma(_1562, cbSceneParam._m0[90u].y, _1560 * cbSceneParam._m0[90u].x));
    float _1573 = fma(_1564, cbSceneParam._m0[91u].z, fma(_1562, cbSceneParam._m0[91u].y, _1560 * cbSceneParam._m0[91u].x));
    float _1607 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1611 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1615 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1619 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1620 = _1607 / _1619;
    float _1621 = _1611 / _1619;
    float _1622 = _1615 / _1619;
    float _1769;
    float _1770;
    float _1771;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1649 = ((uint(_1622 > cbSceneParam._m0[59u].y) + uint(_1622 > cbSceneParam._m0[59u].x)) + uint(_1622 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1650 = _1649 + 43u;
        uint _1658 = _1649 + 44u;
        uint _1666 = _1649 + 45u;
        uint _1674 = _1649 + 46u;
        float _1685 = fma(_1619, cbSceneParam._m0[_1650].w, fma(_1615, cbSceneParam._m0[_1650].z, fma(_1611, cbSceneParam._m0[_1650].y, _1607 * cbSceneParam._m0[_1650].x)));
        float _1689 = fma(_1619, cbSceneParam._m0[_1658].w, fma(_1615, cbSceneParam._m0[_1658].z, fma(_1611, cbSceneParam._m0[_1658].y, _1607 * cbSceneParam._m0[_1658].x)));
        float _1697 = fma(_1619, cbSceneParam._m0[_1674].w, fma(_1615, cbSceneParam._m0[_1674].z, fma(_1611, cbSceneParam._m0[_1674].y, _1607 * cbSceneParam._m0[_1674].x)));
        float _1702 = cbSceneParam._m0[33u].z * _1697;
        float _1704 = cbSceneParam._m0[33u].w * _1697;
        float _1707 = fma(_1619, cbSceneParam._m0[_1666].w, fma(_1615, cbSceneParam._m0[_1666].z, fma(_1611, cbSceneParam._m0[_1666].y, _1607 * cbSceneParam._m0[_1666].x))) / _1697;
        float _1755 = (cbSceneParam._m0[33u].x - sqrt(((_1621 * _1621) + (_1620 * _1620)) + (_1622 * _1622))) * cbSceneParam._m0[33u].y;
        float _4129 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
        float _1762 = (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1702 + _1685) / _1697, (_1704 + _1689) / _1697), _1707), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1704 + _1685) / _1697, (_1689 - _1702) / _1697), _1707), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1685 - _1702) / _1697, (_1689 - _1704) / _1697), _1707), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1685 - _1704) / _1697, (_1702 + _1689) / _1697), _1707), 0.0)).x), vec4(0.25)));
        _1769 = 1.0 - (_1762 * cbSceneParam._m0[34u].x);
        _1770 = 1.0 - (_1762 * cbSceneParam._m0[34u].y);
        _1771 = 1.0 - (_1762 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1769 = 1.0;
        _1770 = 1.0;
        _1771 = 1.0;
    }
    float _1835;
    float _1837;
    float _1839;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1823 = fma(_1619, cbSceneParam._m0[63u].w, fma(_1615, cbSceneParam._m0[63u].z, fma(_1611, cbSceneParam._m0[63u].y, _1607 * cbSceneParam._m0[63u].x)));
        float _1824 = fma(_1619, cbSceneParam._m0[60u].w, fma(_1615, cbSceneParam._m0[60u].z, fma(_1611, cbSceneParam._m0[60u].y, _1607 * cbSceneParam._m0[60u].x))) / _1823;
        float _1825 = fma(_1619, cbSceneParam._m0[61u].w, fma(_1615, cbSceneParam._m0[61u].z, fma(_1611, cbSceneParam._m0[61u].y, _1607 * cbSceneParam._m0[61u].x))) / _1823;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1824 >= cbSceneParam._m0[64u].x) && (_1825 >= cbSceneParam._m0[64u].y)) && (_1824 <= cbSceneParam._m0[64u].z)) && (_1825 <= cbSceneParam._m0[64u].w))
        {
            float _1964 = fma(_1619, cbSceneParam._m0[62u].w, fma(_1615, cbSceneParam._m0[62u].z, fma(_1611, cbSceneParam._m0[62u].y, _1607 * cbSceneParam._m0[62u].x))) / _1823;
            float _1968 = isnan(cbSceneParam._m0[41u].w) ? _1964 : (isnan(_1964) ? cbSceneParam._m0[41u].w : max(_1964, cbSceneParam._m0[41u].w));
            float _2011 = (cbSceneParam._m0[33u].x - sqrt(((_1621 * _1621) + (_1620 * _1620)) + (_1622 * _1622))) * cbSceneParam._m0[33u].y;
            float _4145 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
            float _2018 = (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1824, cbSceneParam._m0[33u].w + _1825), _1968), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1824, _1825 - cbSceneParam._m0[33u].z), _1968), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1824 - cbSceneParam._m0[33u].z, _1825 - cbSceneParam._m0[33u].w), _1968), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1824 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1825), _1968), 0.0)).x), vec4(0.25)));
            float _2022 = 1.0 - (_2018 * cbSceneParam._m0[34u].x);
            float _2023 = 1.0 - (_2018 * cbSceneParam._m0[34u].y);
            float _2024 = 1.0 - (_2018 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2024) ? _1771 : (isnan(_1771) ? _2024 : min(_1771, _2024));
            frontier_phi_37_36_ladder_1 = isnan(_2023) ? _1770 : (isnan(_1770) ? _2023 : min(_1770, _2023));
            frontier_phi_37_36_ladder_2 = isnan(_2022) ? _1769 : (isnan(_1769) ? _2022 : min(_1769, _2022));
        }
        else
        {
            frontier_phi_37_36_ladder = _1771;
            frontier_phi_37_36_ladder_1 = _1770;
            frontier_phi_37_36_ladder_2 = _1769;
        }
        _1835 = frontier_phi_37_36_ladder_2;
        _1837 = frontier_phi_37_36_ladder_1;
        _1839 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1835 = _1769;
        _1837 = _1770;
        _1839 = _1771;
    }
    uvec4 _1844 = floatBitsToUint(cbInstanceData._m0[_465 + 5u]);
    uint _1846 = _1844.x * 14u;
    uint _1847 = _1846 + 13u;
    float _1854 = _506 + (-1.0);
    float _1859 = (cbLight._m0[_1847].x * _1854) + 1.0;
    float _1860 = (cbLight._m0[_1847].y * _1854) + 1.0;
    float _1861 = (cbLight._m0[_1847].z * _1854) + 1.0;
    float _1862 = (cbLight._m0[_1847].w * _1854) + 1.0;
    uint _1863 = _1846 + 5u;
    float _1869 = isnan(1.0) ? _1860 : (isnan(_1860) ? 1.0 : min(_1860, 1.0));
    uint _1873 = _1846 + 4u;
    float _1883 = isnan(1.0) ? _1859 : (isnan(_1859) ? 1.0 : min(_1859, 1.0));
    uint _1887 = _1846 | 1u;
    float _1898 = dot(vec3(cbLight._m0[_1846].xyz), vec3(_323, _324, _325));
    float _1901 = dot(vec3(cbLight._m0[_1887].xyz), vec3(_323, _324, _325));
    float _4181 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
    float _4192 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
    float _1906 = (isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * 0.3183098733425140380859375;
    float _1908 = (isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * 0.3183098733425140380859375;
    float _1915 = ((cbLight._m0[_1863].x * _1869) * _1908) + (((cbLight._m0[_1873].x * _1835) * _1883) * _1906);
    float _1916 = ((_1869 * cbLight._m0[_1863].y) * _1908) + (((cbLight._m0[_1873].y * _1837) * _1883) * _1906);
    float _1917 = ((_1869 * cbLight._m0[_1863].z) * _1908) + (((cbLight._m0[_1873].z * _1839) * _1883) * _1906);
    uvec4 _1921 = floatBitsToUint(cbLight._m0[_1846 + 12u]);
    bool _1923 = _1921.x == 0u;
    float _2025;
    float _2027;
    float _2029;
    if (_1923)
    {
        _2025 = _1915;
        _2027 = _1916;
        _2029 = _1917;
    }
    else
    {
        uint _2033 = _1846 + 6u;
        float _2049 = (dot(vec3(cbLight._m0[_1846 + 2u].xyz), vec3(_323, _324, _325)) * 0.5) + 0.5;
        float _2050 = _2049 * _2049;
        float _4203 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
        float _2051 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _2052 = isnan(1.0) ? _1861 : (isnan(_1861) ? 1.0 : min(_1861, 1.0));
        _2025 = (((cbLight._m0[_2033].x * 0.3183098733425140380859375) * _2051) * _2052) + _1915;
        _2027 = (((cbLight._m0[_2033].y * 0.3183098733425140380859375) * _2051) * _2052) + _1916;
        _2029 = (((cbLight._m0[_2033].z * 0.3183098733425140380859375) * _2051) * _2052) + _1917;
    }
    bool _2032 = _1921.y == 0u;
    float _2087;
    float _2089;
    float _2091;
    if (_2032)
    {
        _2087 = _2025;
        _2089 = _2027;
        _2091 = _2029;
    }
    else
    {
        uint _2260 = _1846 + 7u;
        float _2276 = (dot(vec3(cbLight._m0[_1846 + 3u].xyz), vec3(_323, _324, _325)) * 0.5) + 0.5;
        float _2277 = _2276 * _2276;
        float _4219 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
        float _2278 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _2279 = isnan(1.0) ? _1862 : (isnan(_1862) ? 1.0 : min(_1862, 1.0));
        _2087 = (((cbLight._m0[_2260].x * 0.3183098733425140380859375) * _2278) * _2279) + _2025;
        _2089 = (((cbLight._m0[_2260].y * 0.3183098733425140380859375) * _2278) * _2279) + _2027;
        _2091 = (((cbLight._m0[_2260].z * 0.3183098733425140380859375) * _2278) * _2279) + _2029;
    }
    uint _2094 = _1846 + 8u;
    float _2107 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1846].w)) * _326) * 0.949999988079071044921875);
    float _2108 = _2107 * _2107;
    float _2109 = cbLight._m0[_1846].x + _404;
    float _2110 = cbLight._m0[_1846].y + _405;
    float _2111 = cbLight._m0[_1846].z + _406;
    float _2115 = inversesqrt(dot(vec3(_2109, _2110, _2111), vec3(_2109, _2110, _2111)));
    float _2116 = _2115 * _2109;
    float _2117 = _2115 * _2110;
    float _2118 = _2115 * _2111;
    float _2119 = dot(vec3(_323, _324, _325), vec3(cbLight._m0[_1846].xyz));
    float _4235 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
    float _2122 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
    float _4246 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _2123 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
    float _2124 = dot(vec3(_323, _324, _325), vec3(_2116, _2117, _2118));
    float _4257 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
    float _2127 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
    float _2128 = dot(vec3(cbLight._m0[_1846].xyz), vec3(_2116, _2117, _2118));
    float _4268 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
    float _2132 = _2108 * _2108;
    float _2136 = ((_2127 * _2127) * (_2132 + (-1.0))) + 1.0;
    float _2144 = exp2(log2(1.0 - (isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0)))) * 5.0);
    float _2145 = 0.959999978542327880859375 - _488;
    float _2147 = 0.959999978542327880859375 - _489;
    float _2148 = 0.959999978542327880859375 - _490;
    float _2155 = 1.0 - _2108;
    float _2166 = (0.5 / (((_2123 * ((_2122 * _2155) + _2108)) + 9.9999999392252902907785028219223e-09) + (((_2123 * _2155) + _2108) * _2122))) * _2122;
    float _4279 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
    float _2168 = (isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * (_2132 / ((_2136 * _2136) * 3.141590118408203125));
    uint _2182 = _1846 + 9u;
    float _2193 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1887].w)) * _326) * 0.949999988079071044921875);
    float _2194 = _2193 * _2193;
    float _2195 = cbLight._m0[_1887].x + _404;
    float _2196 = cbLight._m0[_1887].y + _405;
    float _2197 = cbLight._m0[_1887].z + _406;
    float _2201 = inversesqrt(dot(vec3(_2195, _2196, _2197), vec3(_2195, _2196, _2197)));
    float _2202 = _2201 * _2195;
    float _2203 = _2201 * _2196;
    float _2204 = _2201 * _2197;
    float _2205 = dot(vec3(_323, _324, _325), vec3(cbLight._m0[_1887].xyz));
    float _4290 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
    float _2208 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
    float _2209 = dot(vec3(_323, _324, _325), vec3(_2202, _2203, _2204));
    float _4301 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
    float _2212 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
    float _2213 = dot(vec3(cbLight._m0[_1887].xyz), vec3(_2202, _2203, _2204));
    float _4312 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
    float _2217 = _2194 * _2194;
    float _2221 = ((_2212 * _2212) * (_2217 + (-1.0))) + 1.0;
    float _2228 = exp2(log2(1.0 - (isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0)))) * 5.0);
    float _2235 = 1.0 - _2194;
    float _2245 = (0.5 / (((_2123 * ((_2208 * _2235) + _2194)) + 9.9999999392252902907785028219223e-09) + (((_2123 * _2235) + _2194) * _2208))) * _2208;
    float _4323 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
    float _2247 = (isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0))) * (_2217 / ((_2221 * _2221) * 3.141590118408203125));
    float _2257 = (((((_2228 * _2145) + _491) * cbLight._m0[_2182].x) * _2247) * _1869) + ((((cbLight._m0[_2094].x * _1835) * ((_2144 * _2145) + _491)) * _2168) * _1883);
    float _2258 = (((((_2228 * _2147) + _493) * cbLight._m0[_2182].y) * _2247) * _1869) + ((((cbLight._m0[_2094].y * _1837) * ((_2144 * _2147) + _493)) * _2168) * _1883);
    float _2259 = (((((_2228 * _2148) + _494) * cbLight._m0[_2182].z) * _2247) * _1869) + ((((cbLight._m0[_2094].z * _1839) * ((_2144 * _2148) + _494)) * _2168) * _1883);
    float _2315;
    float _2317;
    float _2319;
    if (_1923)
    {
        _2315 = _2257;
        _2317 = _2258;
        _2319 = _2259;
    }
    else
    {
        uint _2321 = _1846 + 2u;
        uint _2325 = _1846 + 10u;
        float _2339 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2321].w)) * _326) * 0.949999988079071044921875);
        float _2340 = _2339 * _2339;
        float _2341 = cbLight._m0[_2321].x + _404;
        float _2342 = cbLight._m0[_2321].y + _405;
        float _2343 = cbLight._m0[_2321].z + _406;
        float _2347 = inversesqrt(dot(vec3(_2341, _2342, _2343), vec3(_2341, _2342, _2343)));
        float _2348 = _2347 * _2341;
        float _2349 = _2347 * _2342;
        float _2350 = _2347 * _2343;
        float _2351 = dot(vec3(_323, _324, _325), vec3(cbLight._m0[_2321].xyz));
        float _4334 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
        float _2354 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
        float _2355 = dot(vec3(_323, _324, _325), vec3(_2348, _2349, _2350));
        float _4345 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
        float _2358 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
        float _2359 = dot(vec3(cbLight._m0[_2321].xyz), vec3(_2348, _2349, _2350));
        float _4356 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
        float _2363 = _2340 * _2340;
        float _2367 = ((_2358 * _2358) * (_2363 + (-1.0))) + 1.0;
        float _2374 = exp2(log2(1.0 - (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0)))) * 5.0);
        float _2381 = 1.0 - _2340;
        float _2391 = (0.5 / (((_2123 * ((_2354 * _2381) + _2340)) + 9.9999999392252902907785028219223e-09) + (((_2123 * _2381) + _2340) * _2354))) * _2354;
        float _4367 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
        float _2393 = (isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0))) * (_2363 / ((_2367 * _2367) * 3.141590118408203125));
        float _2394 = isnan(1.0) ? _1861 : (isnan(_1861) ? 1.0 : min(_1861, 1.0));
        _2315 = (((((_2374 * _2145) + _491) * cbLight._m0[_2325].x) * _2393) * _2394) + _2257;
        _2317 = (((((_2374 * _2147) + _493) * cbLight._m0[_2325].y) * _2393) * _2394) + _2258;
        _2319 = (((((_2374 * _2148) + _494) * cbLight._m0[_2325].z) * _2393) * _2394) + _2259;
    }
    float _2425;
    float _2427;
    float _2429;
    if (_2032)
    {
        _2425 = _2315;
        _2427 = _2317;
        _2429 = _2319;
    }
    else
    {
        uint _2436 = _1846 + 3u;
        uint _2440 = _1846 + 11u;
        float _2454 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2436].w)) * _326) * 0.949999988079071044921875);
        float _2455 = _2454 * _2454;
        float _2456 = cbLight._m0[_2436].x + _404;
        float _2457 = cbLight._m0[_2436].y + _405;
        float _2458 = cbLight._m0[_2436].z + _406;
        float _2462 = inversesqrt(dot(vec3(_2456, _2457, _2458), vec3(_2456, _2457, _2458)));
        float _2463 = _2462 * _2456;
        float _2464 = _2462 * _2457;
        float _2465 = _2462 * _2458;
        float _2466 = dot(vec3(_323, _324, _325), vec3(cbLight._m0[_2436].xyz));
        float _4383 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
        float _2469 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
        float _2470 = dot(vec3(_323, _324, _325), vec3(_2463, _2464, _2465));
        float _4394 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
        float _2473 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
        float _2474 = dot(vec3(cbLight._m0[_2436].xyz), vec3(_2463, _2464, _2465));
        float _4405 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
        float _2478 = _2455 * _2455;
        float _2482 = ((_2473 * _2473) * (_2478 + (-1.0))) + 1.0;
        float _2489 = exp2(log2(1.0 - (isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0)))) * 5.0);
        float _2496 = 1.0 - _2455;
        float _2506 = (0.5 / (((_2123 * ((_2469 * _2496) + _2455)) + 9.9999999392252902907785028219223e-09) + (((_2123 * _2496) + _2455) * _2469))) * _2469;
        float _4416 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
        float _2508 = (isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0))) * (_2478 / ((_2482 * _2482) * 3.141590118408203125));
        float _2509 = isnan(1.0) ? _1862 : (isnan(_1862) ? 1.0 : min(_1862, 1.0));
        _2425 = (((((_2489 * _2145) + _491) * cbLight._m0[_2440].x) * _2508) * _2509) + _2315;
        _2427 = (((((_2489 * _2147) + _493) * cbLight._m0[_2440].y) * _2508) * _2509) + _2317;
        _2429 = (((((_2489 * _2148) + _494) * cbLight._m0[_2440].z) * _2508) * _2509) + _2319;
    }
    float _2575;
    float _2577;
    float _2579;
    float _2581;
    float _2583;
    float _2585;
    if (_1844.y == 0u)
    {
        uvec4 _2530 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2531 = _2530.x;
        uint _2542 = uint((float(_2530.y) * floor(float(uint(cbSceneParam._m0[85u].y * _426) / _2531))) + floor(float(uint(cbSceneParam._m0[85u].x * _425) / _2531)));
        float _2552 = (log2(_1622 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2553 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
        uint _2556 = uint(isnan(14.0) ? _2553 : (isnan(_2553) ? 14.0 : min(_2553, 14.0)));
        uvec4 _2561 = texelFetch(g_lightClusterGridBuffer, int(((_2556 << 2u) + (_2542 << 6u)) >> 2u));
        uint _2562 = _2561.x;
        uint _2563 = _2530.z;
        float _2677;
        float _2679;
        float _2681;
        float _2683;
        float _2685;
        float _2687;
        if (((((1u << ((_2563 >> 4u) & 15u)) + 4294967295u) & _2562) == 0u) || ((_2563 & 240u) == 0u))
        {
            _2677 = 0.0;
            _2679 = 0.0;
            _2681 = 0.0;
            _2683 = 0.0;
            _2685 = 0.0;
            _2687 = 0.0;
        }
        else
        {
            float _2678;
            float _2680;
            float _2682;
            float _2684;
            float _2686;
            float _2688;
            float _2839 = 0.0;
            float _2840 = 0.0;
            float _2841 = 0.0;
            float _2842 = 0.0;
            float _2843 = 0.0;
            float _2844 = 0.0;
            uint _2845 = 0u;
            uint _2854;
            bool _2855;
            for (;;)
            {
                _2854 = texelFetch(g_lightClassification, int((((_2556 << 5u) + (_2542 << 9u)) + (_2845 << 2u)) >> 2u)).x;
                _2855 = _2854 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2855)
                {
                    frontier_phi_71_pred = _2844;
                    frontier_phi_71_pred_1 = _2843;
                    frontier_phi_71_pred_2 = _2842;
                    frontier_phi_71_pred_3 = _2841;
                    frontier_phi_71_pred_4 = _2840;
                    frontier_phi_71_pred_5 = _2839;
                }
                else
                {
                    float _2984;
                    float _2985;
                    float _2986;
                    float _2987;
                    float _2988;
                    float _2989;
                    uint _2990;
                    _2984 = _2839;
                    _2985 = _2840;
                    _2986 = _2841;
                    _2987 = _2842;
                    _2988 = _2843;
                    _2989 = _2844;
                    _2990 = _2854;
                    float _2911;
                    float _2912;
                    float _2913;
                    float _2914;
                    float _2915;
                    float _2916;
                    for (;;)
                    {
                        uint _2994 = uint(findLSB(_2990)) + (_2845 << 5u);
                        uint _2991 = (_2990 + 4294967295u) & _2990;
                        uint _2996 = _2994 * 48u;
                        vec4 _3010 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2996)).x, texelFetch(g_PointLightRenderingBuffer, int(_2996 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2996 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2996 + 3u)).x));
                        uint _3016 = (_2994 * 48u) + 4u;
                        vec4 _3029 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3016)).x, texelFetch(g_PointLightRenderingBuffer, int(_3016 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3016 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3016 + 3u)).x));
                        uint _3035 = (_2994 * 48u) + 8u;
                        vec3 _3046 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3035)).x, texelFetch(g_PointLightRenderingBuffer, int(_3035 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3035 + 2u)).x));
                        float _3050 = _3010.x - _1620;
                        float _3051 = _3010.y - _1621;
                        float _3052 = _3010.z - _1622;
                        float _3053 = dot(vec3(_3050, _3051, _3052), vec3(_3050, _3051, _3052));
                        float _3056 = inversesqrt(_3053);
                        float _3057 = _3056 * _3050;
                        float _3058 = _3056 * _3051;
                        float _3059 = _3056 * _3052;
                        float _3060 = dot(vec3(_446, _449, _452), vec3(_3057, _3058, _3059));
                        float _3065 = 1.0 - (_3053 * _3010.w);
                        float _4442 = isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0));
                        float _3066 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
                        float _3067 = sqrt(_3053) * _3029.w;
                        float _3070 = 1.39999997615814208984375 / (_3067 + 1.39999997615814208984375);
                        float _3071 = _3070 * _3070;
                        float _3074 = ((1.0 - _3071) * _3060) + _3071;
                        float _3077 = _3067 * _3067;
                        float _3081 = ((isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0))) * _3066) / ((_3077 * 0.699999988079071044921875) + 1.0);
                        float _3085 = (-0.0) - _1620;
                        float _3086 = (-0.0) - _1621;
                        float _3087 = (-0.0) - _1622;
                        float _3091 = inversesqrt(dot(vec3(_3085, _3086, _3087), vec3(_3085, _3086, _3087)));
                        float _3092 = _3091 * _3085;
                        float _3093 = _3091 * _3086;
                        float _3094 = _3091 * _3087;
                        float _3101 = exp2(log2(1.0 / ((_3077 * 3.5) + 5.0)) * 0.25);
                        float _3102 = 1.0 - _522;
                        float _3109 = sqrt(1.0 - ((1.0 - (_3102 * _3102)) * (1.0 - (_3101 * _3101))));
                        float _3110 = _3109 * _3109;
                        float _3111 = _3110 * _3110;
                        float _3112 = _3092 + _3057;
                        float _3113 = _3093 + _3058;
                        float _3114 = _3094 + _3059;
                        float _3118 = inversesqrt(dot(vec3(_3112, _3113, _3114), vec3(_3112, _3113, _3114)));
                        float _3122 = dot(vec3(_446, _449, _452), vec3(_3092, _3093, _3094));
                        float _4458 = isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0));
                        float _3125 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
                        float _3126 = dot(vec3(_446, _449, _452), vec3(_3118 * _3112, _3118 * _3113, _3118 * _3114));
                        float _4469 = isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0));
                        float _3129 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
                        float _3133 = ((_3129 * _3129) * (_3111 + (-1.0))) + 1.0;
                        float _3134 = _3070 * _3110;
                        float _3135 = _3134 * _3134;
                        float _3138 = ((1.0 - _3135) * _3060) + _3135;
                        float _4480 = isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0));
                        float _3139 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
                        float _3140 = 1.0 - _3110;
                        float _3150 = (0.5 / (((_3139 * ((_3125 * _3140) + _3110)) + 9.9999999392252902907785028219223e-09) + (((_3139 * _3140) + _3110) * _3125))) * _3139;
                        float _4491 = isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : max(_3150, 0.0));
                        float _3161 = (((_3111 * 3.1415927410125732421875) * (isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0)))) / ((_3133 * _3133) * ((_3077 * 2.1991131305694580078125) + 3.141590118408203125))) * _3066;
                        _2914 = (_3081 * _3029.x) + _2987;
                        _2915 = (_3081 * _3029.y) + _2988;
                        _2916 = (_3081 * _3029.z) + _2989;
                        _2911 = (_3161 * _3046.x) + _2984;
                        _2912 = (_3161 * _3046.y) + _2985;
                        _2913 = (_3161 * _3046.z) + _2986;
                        if (_2991 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2984 = _2911;
                            _2985 = _2912;
                            _2986 = _2913;
                            _2987 = _2914;
                            _2988 = _2915;
                            _2989 = _2916;
                            _2990 = _2991;
                        }
                    }
                    frontier_phi_71_pred = _2916;
                    frontier_phi_71_pred_1 = _2915;
                    frontier_phi_71_pred_2 = _2914;
                    frontier_phi_71_pred_3 = _2913;
                    frontier_phi_71_pred_4 = _2912;
                    frontier_phi_71_pred_5 = _2911;
                }
                _2688 = frontier_phi_71_pred;
                _2686 = frontier_phi_71_pred_1;
                _2684 = frontier_phi_71_pred_2;
                _2682 = frontier_phi_71_pred_3;
                _2680 = frontier_phi_71_pred_4;
                _2678 = frontier_phi_71_pred_5;
                uint _2846 = _2845 + 1u;
                if (_2846 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2839 = _2678;
                    _2840 = _2680;
                    _2841 = _2682;
                    _2842 = _2684;
                    _2843 = _2686;
                    _2844 = _2688;
                    _2845 = _2846;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2677 = _2678;
            _2679 = _2680;
            _2681 = _2682;
            _2683 = _2684;
            _2685 = _2686;
            _2687 = _2688;
        }
        uvec4 _2691 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2692 = _2691.z;
        uint _2694 = (_2692 >> 8u) & 15u;
        float _2807;
        float _2809;
        float _2811;
        float _2813;
        float _2815;
        float _2817;
        if (((4294967295u << _2694) & _2562) == 0u)
        {
            _2807 = _2677;
            _2809 = _2679;
            _2811 = _2681;
            _2813 = _2683;
            _2815 = _2685;
            _2817 = _2687;
        }
        else
        {
            float _2832 = inversesqrt(dot(vec3(_1620, _1621, _1622), vec3(_1620, _1621, _1622)));
            float _2833 = _2832 * _1620;
            float _2834 = _2832 * _1621;
            float _2835 = _2832 * _1622;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2694 < ((_2692 >> 12u) & 15u))
            {
                float _2808;
                float _2810;
                float _2812;
                float _2814;
                float _2816;
                float _2818;
                float _2967 = _2677;
                float _2968 = _2679;
                float _2969 = _2681;
                float _2970 = _2683;
                float _2971 = _2685;
                float _2972 = _2687;
                uint _2973 = _2694;
                uint _2982;
                bool _2983;
                for (;;)
                {
                    _2982 = texelFetch(g_lightClassification, int((((_2556 << 5u) + (_2542 << 9u)) + (_2973 << 2u)) >> 2u)).x;
                    _2983 = _2982 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2983)
                    {
                        frontier_phi_82_pred = _2972;
                        frontier_phi_82_pred_1 = _2971;
                        frontier_phi_82_pred_2 = _2970;
                        frontier_phi_82_pred_3 = _2969;
                        frontier_phi_82_pred_4 = _2968;
                        frontier_phi_82_pred_5 = _2967;
                    }
                    else
                    {
                        float _3175;
                        float _3176;
                        float _3177;
                        float _3178;
                        float _3179;
                        float _3180;
                        float _3471;
                        float _3472;
                        float _3473;
                        float _3474;
                        float _3475;
                        float _3476;
                        float _3188 = _2967;
                        float _3189 = _2968;
                        float _3190 = _2969;
                        float _3191 = _2970;
                        float _3192 = _2971;
                        float _3193 = _2972;
                        uint _3194 = _2982;
                        uint _3195;
                        vec4 _3220;
                        float _3221;
                        vec4 _3236;
                        vec3 _3248;
                        vec4 _3264;
                        vec4 _3280;
                        float _3327;
                        bool _3328;
                        for (;;)
                        {
                            uint _3205 = ((_2973 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3194));
                            _3195 = (_3194 + 4294967295u) & _3194;
                            uint _3207 = _3205 * 40u;
                            _3220 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3207)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 3u)).x));
                            _3221 = _3220.w;
                            uint _3223 = (_3205 * 40u) + 4u;
                            _3236 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3223)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 3u)).x));
                            uint _3238 = (_3205 * 40u) + 8u;
                            _3248 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3238)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 2u)).x));
                            uint _3251 = (_3205 * 40u) + 16u;
                            _3264 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3251)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3251 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3251 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3251 + 3u)).x));
                            uint _3267 = (_3205 * 40u) + 20u;
                            _3280 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3267)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 3u)).x));
                            uint _3283 = (_3205 * 40u) + 24u;
                            vec4 _3296 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3283)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 3u)).x));
                            uint _3302 = (_3205 * 40u) + 28u;
                            vec4 _3315 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3302)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 3u)).x));
                            _3327 = fma(_1622, _3315.z, fma(_1621, _3315.y, _3315.x * _1620)) + _3315.w;
                            _3328 = !((fma(_1622, _3296.z, fma(_1621, _3296.y, _3296.x * _1620)) + _3296.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3328)
                            {
                                float _3355 = _3220.x - _1620;
                                float _3356 = _3220.y - _1621;
                                float _3357 = _3220.z - _1622;
                                float _3358 = dot(vec3(_3355, _3356, _3357), vec3(_3355, _3356, _3357));
                                float _3361 = inversesqrt(_3358);
                                float _3362 = _3361 * _3355;
                                float _3363 = _3361 * _3356;
                                float _3364 = _3361 * _3357;
                                float _3368 = 1.0 - (_3358 / (_3221 * _3221));
                                float _4502 = isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : max(_3368, 0.0));
                                float _3369 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
                                float _3373 = sqrt(_3358) * _3236.w;
                                float _3375 = 1.39999997615814208984375 / (_3373 + 1.39999997615814208984375);
                                float _3376 = _3375 * _3375;
                                float _3379 = ((1.0 - _3376) * dot(vec3(_3362, _3363, _3364), vec3(_446, _449, _452))) + _3376;
                                float _3382 = _3373 * _3373;
                                float _3386 = (fma(_1622, _3264.z, fma(_1621, _3264.y, _3264.x * _1620)) + _3264.w) / _3327;
                                float _3387 = (fma(_1622, _3280.z, fma(_1621, _3280.y, _3280.x * _1620)) + _3280.w) / _3327;
                                float _3391 = 1.0 - dot(vec2(_3386, _3387), vec2(_3386, _3387));
                                float _4518 = isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : max(_3391, 0.0));
                                float _3392 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
                                float _3393 = _3392 * (((isnan(0.0) ? _3379 : (isnan(_3379) ? 0.0 : max(_3379, 0.0))) * _3369) / ((_3382 * 0.699999988079071044921875) + 1.0));
                                float _3405 = exp2(log2(1.0 / ((_3382 * 3.5) + 5.0)) * 0.25);
                                float _3406 = 1.0 - _522;
                                float _3413 = sqrt(1.0 - ((1.0 - (_3406 * _3406)) * (1.0 - (_3405 * _3405))));
                                float _3414 = _3413 * _3413;
                                float _3415 = _3414 * _3414;
                                float _3416 = _3362 - _2833;
                                float _3417 = _3363 - _2834;
                                float _3418 = _3364 - _2835;
                                float _3422 = inversesqrt(dot(vec3(_3416, _3417, _3418), vec3(_3416, _3417, _3418)));
                                float _3426 = dot(vec3(_446, _449, _452), vec3((-0.0) - _2833, (-0.0) - _2834, (-0.0) - _2835));
                                float _4529 = isnan(0.0) ? _3426 : (isnan(_3426) ? 0.0 : max(_3426, 0.0));
                                float _3429 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
                                float _3430 = dot(vec3(_446, _449, _452), vec3(_3422 * _3416, _3422 * _3417, _3422 * _3418));
                                float _4540 = isnan(0.0) ? _3430 : (isnan(_3430) ? 0.0 : max(_3430, 0.0));
                                float _3433 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
                                float _3437 = ((_3433 * _3433) * (_3415 + (-1.0))) + 1.0;
                                float _3438 = _3375 * _3414;
                                float _3439 = _3438 * _3438;
                                float _3445 = ((1.0 - _3439) * dot(vec3(_446, _449, _452), vec3(_3362, _3363, _3364))) + _3439;
                                float _4551 = isnan(0.0) ? _3445 : (isnan(_3445) ? 0.0 : max(_3445, 0.0));
                                float _3446 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
                                float _3447 = 1.0 - _3414;
                                float _3457 = (0.5 / (((_3446 * ((_3429 * _3447) + _3414)) + 9.9999999392252902907785028219223e-09) + (((_3446 * _3447) + _3414) * _3429))) * _3446;
                                float _4562 = isnan(0.0) ? _3457 : (isnan(_3457) ? 0.0 : max(_3457, 0.0));
                                float _3467 = (_3392 * _3369) * (((_3415 * 3.1415927410125732421875) * (isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0)))) / ((_3437 * _3437) * ((_3382 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3393 * _3236.z;
                                frontier_phi_88_pred_1 = _3393 * _3236.y;
                                frontier_phi_88_pred_2 = _3393 * _3236.x;
                                frontier_phi_88_pred_3 = _3467 * _3248.z;
                                frontier_phi_88_pred_4 = _3467 * _3248.y;
                                frontier_phi_88_pred_5 = _3467 * _3248.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3476 = frontier_phi_88_pred;
                            _3475 = frontier_phi_88_pred_1;
                            _3474 = frontier_phi_88_pred_2;
                            _3473 = frontier_phi_88_pred_3;
                            _3472 = frontier_phi_88_pred_4;
                            _3471 = frontier_phi_88_pred_5;
                            _3178 = _3474 + _3191;
                            _3179 = _3475 + _3192;
                            _3180 = _3476 + _3193;
                            _3175 = _3471 + _3188;
                            _3176 = _3472 + _3189;
                            _3177 = _3473 + _3190;
                            if (_3195 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3188 = _3175;
                                _3189 = _3176;
                                _3190 = _3177;
                                _3191 = _3178;
                                _3192 = _3179;
                                _3193 = _3180;
                                _3194 = _3195;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3180;
                        frontier_phi_82_pred_1 = _3179;
                        frontier_phi_82_pred_2 = _3178;
                        frontier_phi_82_pred_3 = _3177;
                        frontier_phi_82_pred_4 = _3176;
                        frontier_phi_82_pred_5 = _3175;
                    }
                    _2818 = frontier_phi_82_pred;
                    _2816 = frontier_phi_82_pred_1;
                    _2814 = frontier_phi_82_pred_2;
                    _2812 = frontier_phi_82_pred_3;
                    _2810 = frontier_phi_82_pred_4;
                    _2808 = frontier_phi_82_pred_5;
                    uint _2974 = _2973 + 1u;
                    if (_2974 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2967 = _2808;
                        _2968 = _2810;
                        _2969 = _2812;
                        _2970 = _2814;
                        _2971 = _2816;
                        _2972 = _2818;
                        _2973 = _2974;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2814;
                frontier_phi_63_64_ladder_1 = _2818;
                frontier_phi_63_64_ladder_2 = _2816;
                frontier_phi_63_64_ladder_3 = _2812;
                frontier_phi_63_64_ladder_4 = _2810;
                frontier_phi_63_64_ladder_5 = _2808;
            }
            else
            {
                frontier_phi_63_64_ladder = _2683;
                frontier_phi_63_64_ladder_1 = _2687;
                frontier_phi_63_64_ladder_2 = _2685;
                frontier_phi_63_64_ladder_3 = _2681;
                frontier_phi_63_64_ladder_4 = _2679;
                frontier_phi_63_64_ladder_5 = _2677;
            }
            _2807 = frontier_phi_63_64_ladder_5;
            _2809 = frontier_phi_63_64_ladder_4;
            _2811 = frontier_phi_63_64_ladder_3;
            _2813 = frontier_phi_63_64_ladder;
            _2815 = frontier_phi_63_64_ladder_2;
            _2817 = frontier_phi_63_64_ladder_1;
        }
        float _2822 = isnan(1.0) ? _506 : (isnan(_506) ? 1.0 : min(_506, 1.0));
        _2575 = (_2822 * _2813) + _2087;
        _2577 = (_2822 * _2815) + _2089;
        _2579 = (_2822 * _2817) + _2091;
        _2581 = ((_2807 * _491) * _2822) + _2425;
        _2583 = ((_2809 * _493) * _2822) + _2427;
        _2585 = ((_2811 * _494) * _2822) + _2429;
    }
    else
    {
        _2575 = _2087;
        _2577 = _2089;
        _2579 = _2091;
        _2581 = _2425;
        _2583 = _2427;
        _2585 = _2429;
    }
    uint _2591 = _467 + uint(cbMatDynParam._m0[0u].w);
    float _2599 = ((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].y) * _305.x) * cbInstanceData._m0[_2591].x;
    float _2602 = ((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].y) * _305.y) * cbInstanceData._m0[_2591].y;
    float _2605 = ((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].y) * _305.z) * cbInstanceData._m0[_2591].z;
    float _4578 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _4589 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _4600 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _2622 = (((isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0))) * (_2575 + ((isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0))) * _506))) + ((_2581 + ((isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0))) * _1348)) * cbPerFrame._m0[3u].x)) + _2599;
    float _2624 = (_2602 + ((_2583 + ((isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0))) * _1348)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0))) * (_2577 + ((isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0))) * _506)));
    float _2626 = (_2605 + ((_2585 + ((isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0))) * _1348)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0))) * (_2579 + ((isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0))) * _506)));
    float _2627 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
    float _2628 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
    float _2629 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0));
    float _2635 = cbMtdParam._m0[2u].x * _2599;
    float _2636 = cbMtdParam._m0[2u].y * _2602;
    float _2637 = cbMtdParam._m0[2u].z * _2605;
    float _4626 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2639 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
    uint _2640 = _465 + 6u;
    float _2648 = _425 / cbSceneParam._m0[86u].x;
    float _2649 = _426 / cbSceneParam._m0[86u].y;
    vec4 _2663 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2648, _2649, (log2((isnan(cbSceneParam._m0[77u].w) ? _346 : (isnan(_346) ? cbSceneParam._m0[77u].w : min(_346, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2665 = _2663.x;
    float _2666 = _2663.y;
    float _2667 = _2663.z;
    float _2668 = _2663.w;
    float _2740;
    float _2742;
    float _2744;
    float _2746;
    if (_346 > cbSceneParam._m0[78u].w)
    {
        float _2702 = isnan(_346) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _346 : min(cbSceneParam._m0[80u].w, _346));
        float _2703 = _2702 / _346;
        float _2714 = _2703 * _397;
        float _2715 = _398 * _2703;
        float _2716 = (-0.0) - _2715;
        float _2718 = _2703 * _399;
        float _2720 = (cbSceneParam._m0[77u].w * _2716) / _2702;
        float _2721 = _2720 + cbSceneParam._m0[79u].w;
        float _2722 = cbSceneParam._m0[79u].w - _2715;
        float _2728 = sqrt(((_2714 * _2714) + (_2715 * _2715)) + (_2718 * _2718));
        float _2731 = (1.0 - (cbSceneParam._m0[77u].w / _2702)) * _2728;
        float _2736 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2738 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2924;
        if (abs((_2716 - _2720) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2924 = ((((_2721 > 0.0) ? exp2(_2736 * _2721) : (2.0 - exp2(_2738 * _2721))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2731;
        }
        else
        {
            float _2868 = 1.0 / cbSceneParam._m0[80u].x;
            float _2869 = isnan(_2722) ? _2721 : (isnan(_2721) ? _2722 : max(_2721, _2722));
            float _2870 = isnan(_2722) ? _2721 : (isnan(_2721) ? _2722 : min(_2721, _2722));
            float _2879 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : min(_2869, 0.0));
            float _2880 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : min(_2870, 0.0));
            _2924 = ((abs(_2728 / _2716) * cbSceneParam._m0[80u].y) * ((((_2879 - _2880) * 2.0) - ((exp2(_2736 * (isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0)))) - exp2(_2736 * (isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0))))) * _2868)) - ((exp2(_2738 * _2879) - exp2(_2738 * _2880)) * _2868))) + (_2731 * cbSceneParam._m0[80u].z);
        }
        vec4 _2926 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2648, _2649, 1.0), 0.0);
        float _2935 = exp2((_2924 * (-1.44269502162933349609375)) * (1.0 - _2926.w));
        float _2936 = log2(_2935);
        float _2952 = log2(_2668);
        _2740 = (exp2(_2952 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2936 * cbSceneParam._m0[78u].x)) * _2926.x) / cbSceneParam._m0[78u].x)) + _2665;
        _2742 = (exp2(_2952 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2936 * cbSceneParam._m0[78u].y)) * _2926.y) / cbSceneParam._m0[78u].y)) + _2666;
        _2744 = (exp2(_2952 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2936 * cbSceneParam._m0[78u].z)) * _2926.z) / cbSceneParam._m0[78u].z)) + _2667;
        _2746 = _2935 * _2668;
    }
    else
    {
        _2740 = _2665;
        _2742 = _2666;
        _2744 = _2667;
        _2746 = _2668;
    }
    bool _2962;
    vec4 _2756;
    vec4 _2778;
    float _2780;
    float _2784;
    float _2785;
    float _2786;
    float _2789;
    float _2792;
    float _2795;
    float _2796;
    bool _2806;
    for (;;)
    {
        _2756 = cbMatDynParam._m0[0u];
        float _2758 = roundEven(_2756.y);
        bool _2759 = _2758 == 3.0;
        float _2760 = log2(_2746);
        float _2764 = exp2(_2760 * cbSceneParam._m0[78u].x);
        float _2765 = exp2(_2760 * cbSceneParam._m0[78u].y);
        float _2766 = exp2(_2760 * cbSceneParam._m0[78u].z);
        float _2767 = _2764 * _2627;
        float _2768 = _2765 * _2628;
        float _2769 = _2766 * _2629;
        float _2776 = _413 + (-0.5);
        _2778 = cbMtdParam._m0[1u];
        _2780 = _2778.y * _2776;
        float _2783 = (_2758 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2784 = _2783 * (_2759 ? _2767 : (_2767 + (cbSceneParam._m0[72u].w * _2740)));
        _2785 = _2783 * (_2759 ? _2768 : (_2768 + (cbSceneParam._m0[72u].w * _2742)));
        _2786 = _2783 * (_2759 ? _2769 : (_2769 + (cbSceneParam._m0[72u].w * _2744)));
        _2789 = ((_2635 * _2639) * _2764) * _2783;
        _2792 = ((_2636 * _2639) * _2765) * _2783;
        _2795 = ((_2637 * _2639) * _2766) * _2783;
        _2796 = _2776 * 0.999000012874603271484375;
        _2806 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2806)
        {
            if ((cbInstanceData._m0[_465 + 7u].x + _2796) < 0.5)
            {
                _2962 = true;
                break;
            }
        }
        uint _2903 = _467 + uint(_2756.w);
        if ((cbInstanceData._m0[_2903].w < 1.0) && ((cbInstanceData._m0[_2903].w + _2796) < 0.5))
        {
            _2962 = true;
            break;
        }
        if ((_2780 + 1.0) < _2778.x)
        {
            _2962 = true;
            break;
        }
        _2962 = false;
        break;
    }
    float _3166;
    if (_2962)
    {
        discard_state = true;
        _3166 = 0.0;
    }
    else
    {
        _3166 = cbInstanceData._m0[_2640].w;
    }
    SV_Target.x = _2784;
    SV_Target.y = _2785;
    SV_Target.z = _2786;
    SV_Target.w = _3166;
    SV_Target_1.x = _2789;
    SV_Target_1.y = _2792;
    SV_Target_1.z = _2795;
    SV_Target_1.w = cbInstanceData._m0[_2640].w;
    discard_exit();
}


