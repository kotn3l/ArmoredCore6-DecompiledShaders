#version 460

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[18];
} cbMatDynParam;

layout(set = 0, binding = 7, std140) uniform cbvModelParamUBO
{
    vec4 _m0[10];
} cbvModelParam;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in uint BINORMAL;
layout(location = 4) in uvec4 BLENDINDICES;
layout(location = 5) in vec4 BLENDWEIGHT;
layout(location = 6) in vec4 COLOR_1;
layout(location = 7) in ivec2 TEXCOORD;
layout(location = 1) out vec4 NORMAL_1;
layout(location = 2) out vec4 TANGENT_1;
layout(location = 3) out vec3 TEXCOORD_1;
layout(location = 3, component = 3) out float TEXCOORD_8;

void main()
{
    uint _76 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_1.x = 0.0;
    TEXCOORD_1.y = 0.0;
    TEXCOORD_1.z = 0.0;
    TEXCOORD_8 = 0.0;
    float _156 = (float(NORMAL.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _158 = (float(NORMAL.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _159 = (float(NORMAL.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _166 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _167 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _168 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _408;
    float _409;
    float _410;
    float _411;
    float _412;
    float _413;
    float _414;
    float _415;
    float _416;
    float _417;
    float _418;
    float _419;
    if (floatBitsToUint(cbMatDynParam._m0[1u]).x == 0u)
    {
        uint _192 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _76;
        precise float _196 = dot(vec4(1.0), vec4(BLENDWEIGHT.x, BLENDWEIGHT.y, BLENDWEIGHT.z, BLENDWEIGHT.w));
        float _201 = isnan(_196) ? 0.001000000047497451305389404296875 : (isnan(0.001000000047497451305389404296875) ? _196 : max(0.001000000047497451305389404296875, _196));
        precise float _203 = BLENDWEIGHT.x / _201;
        precise float _204 = BLENDWEIGHT.y / _201;
        precise float _205 = BLENDWEIGHT.z / _201;
        precise float _206 = BLENDWEIGHT.w / _201;
        uvec4 _213 = floatBitsToUint(cbInstanceData._m0[(texelFetch(g_InstanceIndexBuffer, int(_192)).x * 13u) + 4u]);
        uint _214 = _213.x;
        uint _216 = (_214 + uint(float(BLENDINDICES.x))) * 3u;
        uint _223 = _216 + 1u;
        uint _230 = _216 + 2u;
        precise float _237 = _203 * cbObjMatrix._m0[_216].x;
        precise float _238 = _203 * cbObjMatrix._m0[_223].x;
        precise float _239 = _203 * cbObjMatrix._m0[_230].x;
        precise float _240 = _203 * cbObjMatrix._m0[_216].y;
        precise float _241 = _203 * cbObjMatrix._m0[_223].y;
        precise float _242 = _203 * cbObjMatrix._m0[_230].y;
        precise float _243 = _203 * cbObjMatrix._m0[_216].z;
        precise float _244 = _203 * cbObjMatrix._m0[_223].z;
        precise float _245 = _203 * cbObjMatrix._m0[_230].z;
        precise float _246 = _203 * cbObjMatrix._m0[_216].w;
        precise float _247 = _203 * cbObjMatrix._m0[_223].w;
        precise float _248 = _203 * cbObjMatrix._m0[_230].w;
        uint _251 = (_214 + uint(float(BLENDINDICES.y))) * 3u;
        uint _258 = _251 + 1u;
        uint _265 = _251 + 2u;
        precise float _272 = _204 * cbObjMatrix._m0[_251].x;
        precise float _273 = _204 * cbObjMatrix._m0[_258].x;
        precise float _274 = _204 * cbObjMatrix._m0[_265].x;
        precise float _275 = _204 * cbObjMatrix._m0[_251].y;
        precise float _276 = _204 * cbObjMatrix._m0[_258].y;
        precise float _277 = _204 * cbObjMatrix._m0[_265].y;
        precise float _278 = _204 * cbObjMatrix._m0[_251].z;
        precise float _279 = _204 * cbObjMatrix._m0[_258].z;
        precise float _280 = _204 * cbObjMatrix._m0[_265].z;
        precise float _281 = _204 * cbObjMatrix._m0[_251].w;
        precise float _282 = _204 * cbObjMatrix._m0[_258].w;
        precise float _283 = _204 * cbObjMatrix._m0[_265].w;
        precise float _284 = _237 + _272;
        precise float _285 = _238 + _273;
        precise float _286 = _239 + _274;
        precise float _287 = _240 + _275;
        precise float _288 = _241 + _276;
        precise float _289 = _242 + _277;
        precise float _290 = _243 + _278;
        precise float _291 = _244 + _279;
        precise float _292 = _245 + _280;
        precise float _293 = _246 + _281;
        precise float _294 = _247 + _282;
        precise float _295 = _248 + _283;
        uint _298 = (_214 + uint(float(BLENDINDICES.z))) * 3u;
        uint _305 = _298 + 1u;
        uint _312 = _298 + 2u;
        precise float _319 = _205 * cbObjMatrix._m0[_298].x;
        precise float _320 = _205 * cbObjMatrix._m0[_305].x;
        precise float _321 = _205 * cbObjMatrix._m0[_312].x;
        precise float _322 = _205 * cbObjMatrix._m0[_298].y;
        precise float _323 = _205 * cbObjMatrix._m0[_305].y;
        precise float _324 = _205 * cbObjMatrix._m0[_312].y;
        precise float _325 = _205 * cbObjMatrix._m0[_298].z;
        precise float _326 = _205 * cbObjMatrix._m0[_305].z;
        precise float _327 = _205 * cbObjMatrix._m0[_312].z;
        precise float _328 = _205 * cbObjMatrix._m0[_298].w;
        precise float _329 = _205 * cbObjMatrix._m0[_305].w;
        precise float _330 = _205 * cbObjMatrix._m0[_312].w;
        precise float _331 = _284 + _319;
        precise float _332 = _285 + _320;
        precise float _333 = _286 + _321;
        precise float _334 = _287 + _322;
        precise float _335 = _288 + _323;
        precise float _336 = _289 + _324;
        precise float _337 = _290 + _325;
        precise float _338 = _291 + _326;
        precise float _339 = _292 + _327;
        precise float _340 = _293 + _328;
        precise float _341 = _294 + _329;
        precise float _342 = _295 + _330;
        uint _345 = (_214 + uint(float(BLENDINDICES.w))) * 3u;
        uint _352 = _345 + 1u;
        uint _359 = _345 + 2u;
        precise float _366 = _206 * cbObjMatrix._m0[_345].x;
        precise float _367 = _206 * cbObjMatrix._m0[_352].x;
        precise float _368 = _206 * cbObjMatrix._m0[_359].x;
        precise float _369 = _206 * cbObjMatrix._m0[_345].y;
        precise float _370 = _206 * cbObjMatrix._m0[_352].y;
        precise float _371 = _206 * cbObjMatrix._m0[_359].y;
        precise float _372 = _206 * cbObjMatrix._m0[_345].z;
        precise float _373 = _206 * cbObjMatrix._m0[_352].z;
        precise float _374 = _206 * cbObjMatrix._m0[_359].z;
        precise float _375 = _206 * cbObjMatrix._m0[_345].w;
        precise float _376 = _206 * cbObjMatrix._m0[_352].w;
        precise float _377 = _206 * cbObjMatrix._m0[_359].w;
        precise float _378 = _331 + _366;
        precise float _379 = _332 + _367;
        precise float _380 = _333 + _368;
        precise float _381 = _334 + _369;
        precise float _382 = _335 + _370;
        precise float _383 = _336 + _371;
        precise float _384 = _337 + _372;
        precise float _385 = _338 + _373;
        precise float _386 = _339 + _374;
        precise float _387 = _340 + _375;
        precise float _388 = _341 + _376;
        precise float _389 = _342 + _377;
        _408 = _378;
        _409 = _381;
        _410 = _384;
        _411 = _387;
        _412 = _379;
        _413 = _382;
        _414 = _385;
        _415 = _388;
        _416 = _380;
        _417 = _383;
        _418 = _386;
        _419 = _389;
    }
    else
    {
        _408 = cbvModelParam._m0[0u].x;
        _409 = cbvModelParam._m0[0u].y;
        _410 = cbvModelParam._m0[0u].z;
        _411 = cbvModelParam._m0[0u].w;
        _412 = cbvModelParam._m0[1u].x;
        _413 = cbvModelParam._m0[1u].y;
        _414 = cbvModelParam._m0[1u].z;
        _415 = cbvModelParam._m0[1u].w;
        _416 = cbvModelParam._m0[2u].x;
        _417 = cbvModelParam._m0[2u].y;
        _418 = cbvModelParam._m0[2u].z;
        _419 = cbvModelParam._m0[2u].w;
    }
    precise float _420 = POSITION.x * _408;
    precise float _421 = POSITION.y * _409;
    precise float _422 = _421 + _420;
    precise float _423 = POSITION.z * _410;
    precise float _424 = _423 + _422;
    precise float _425 = 1.0 * _411;
    precise float _426 = _425 + _424;
    precise float _427 = POSITION.x * _412;
    precise float _428 = POSITION.y * _413;
    precise float _429 = _428 + _427;
    precise float _430 = POSITION.z * _414;
    precise float _431 = _430 + _429;
    precise float _432 = 1.0 * _415;
    precise float _433 = _432 + _431;
    precise float _434 = POSITION.x * _416;
    precise float _435 = POSITION.y * _417;
    precise float _436 = _435 + _434;
    precise float _437 = POSITION.z * _418;
    precise float _438 = _437 + _436;
    precise float _439 = 1.0 * _419;
    precise float _440 = _439 + _438;
    float _446 = cbSceneParam._m0[3u].x - _426;
    float _447 = cbSceneParam._m0[3u].y - _433;
    float _448 = cbSceneParam._m0[3u].z - _440;
    uint _468 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _76;
    precise float _482 = _426 - cbSceneParam._m0[3u].x;
    precise float _483 = _433 - cbSceneParam._m0[3u].y;
    precise float _484 = _440 - cbSceneParam._m0[3u].z;
    precise float _512 = _482 * cbSceneParam._m0[24u].x;
    precise float _513 = _483 * cbSceneParam._m0[24u].y;
    precise float _514 = _513 + _512;
    precise float _515 = _484 * cbSceneParam._m0[24u].z;
    precise float _516 = _515 + _514;
    precise float _517 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _518 = _517 + _516;
    precise float _519 = _482 * cbSceneParam._m0[25u].x;
    precise float _520 = _483 * cbSceneParam._m0[25u].y;
    precise float _521 = _520 + _519;
    precise float _522 = _484 * cbSceneParam._m0[25u].z;
    precise float _523 = _522 + _521;
    precise float _524 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _525 = _524 + _523;
    precise float _526 = _482 * cbSceneParam._m0[26u].x;
    precise float _527 = _483 * cbSceneParam._m0[26u].y;
    precise float _528 = _527 + _526;
    precise float _529 = _484 * cbSceneParam._m0[26u].z;
    precise float _530 = _529 + _528;
    precise float _531 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _532 = _531 + _530;
    precise float _533 = _482 * cbSceneParam._m0[27u].x;
    precise float _534 = _483 * cbSceneParam._m0[27u].y;
    precise float _535 = _534 + _533;
    precise float _536 = _484 * cbSceneParam._m0[27u].z;
    precise float _537 = _536 + _535;
    precise float _538 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _539 = _538 + _537;
    gl_Position.x = _518;
    gl_Position.y = _525;
    gl_Position.z = _532;
    gl_Position.w = _539;
    NORMAL_1.x = fma(_159, _410, fma(_158, _409, _408 * _156));
    NORMAL_1.y = fma(_159, _414, fma(_158, _413, _412 * _156));
    NORMAL_1.z = fma(_159, _418, fma(_158, _417, _416 * _156));
    NORMAL_1.w = float(texelFetch(g_InstanceIndexBuffer, int(_468)).x);
    TANGENT_1.x = fma(_168, _410, fma(_167, _409, _408 * _166));
    TANGENT_1.y = fma(_168, _414, fma(_167, _413, _412 * _166));
    TANGENT_1.z = fma(_168, _418, fma(_167, _417, _416 * _166));
    TANGENT_1.w = (float(BINORMAL) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_1.x = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_1.y = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_1.z = COLOR_1.x;
    TEXCOORD_8 = sqrt(((_446 * _446) + (_447 * _447)) + (_448 * _448));
}


