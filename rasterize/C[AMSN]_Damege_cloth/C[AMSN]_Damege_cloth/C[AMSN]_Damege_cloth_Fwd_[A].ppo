#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[18];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_Damege_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_Damege_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_Damege_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D C_AMSN_Damege_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D C_AMSN_Damege_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D C_AMSN_Damege_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_Damege_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1001;
float _3430;
float _3431;
float _3432;
float _3433;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _199 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _206 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _207 = _206 * NORMAL.x;
    float _208 = _206 * NORMAL.y;
    float _209 = _206 * NORMAL.z;
    float _213 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _221;
    float _222;
    float _223;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _221 = (-0.0) - _207;
        _222 = (-0.0) - _208;
        _223 = (-0.0) - _209;
    }
    else
    {
        _221 = _207;
        _222 = _208;
        _223 = _209;
    }
    vec4 _241 = texture(sampler2D(C_AMSN_Damege_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _244 = _241.x;
    float _245 = _241.y;
    float _246 = _241.z;
    float _247 = _241.w;
    vec4 _259 = texture(sampler2D(C_AMSN_Damege_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _264 = _259.w;
    float _270 = (((cbMatDynParam._m0[17u].x * 10.0) + (-1.0)) + _264) * _264;
    vec4 _283 = texture(sampler2D(C_AMSN_Damege_snp_0_Texture2D_7, SS_ClampLinear), vec2((_270 * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (_270 * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _285 = _283.x;
    float _286 = _283.y;
    float _287 = _283.z;
    float _294 = ((_285 - _244) * cbMatDynParam._m0[17u].x) + _244;
    float _295 = ((_286 - _245) * cbMatDynParam._m0[17u].x) + _245;
    float _296 = ((_287 - _246) * cbMatDynParam._m0[17u].x) + _246;
    float _303 = ((_259.x - _294) * cbMatDynParam._m0[17u].x) + _294;
    float _304 = ((_259.y - _295) * cbMatDynParam._m0[17u].x) + _295;
    float _305 = ((_259.z - _296) * cbMatDynParam._m0[17u].x) + _296;
    vec4 _321 = texture(sampler2D(C_AMSN_Damege_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _323 = _321.x;
    vec4 _337 = texture(sampler2D(C_AMSN_Damege_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _342 = (_323 + cbMtdParam._m0[9u].x) + ((_337.x - _323) * cbMatDynParam._m0[17u].x);
    vec4 _354 = texture(sampler2D(C_AMSN_Damege_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _356 = _354.x;
    float _357 = _354.y;
    float _358 = _354.z;
    vec4 _371 = texture(sampler2D(C_AMSN_Damege_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _384 = ((_371.z - _358) * cbMatDynParam._m0[17u].x) + _358;
    float _388 = ((((_371.x - _356) * cbMatDynParam._m0[17u].x) + _356) * 2.0) + (-1.0);
    float _389 = ((((_371.y - _357) * cbMatDynParam._m0[17u].x) + _357) * 2.0) + (-1.0);
    float _390 = dot(vec2(_388, _389), vec2(_388, _389));
    float _3442 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _396 = sqrt(1.0 - (isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0))));
    float _403 = fma(_396, _221, fma(_389, _213 * TANGENT.x, (_199 * _192) * _388));
    float _406 = fma(_396, _222, fma(_389, _213 * TANGENT.y, (_199 * _193) * _388));
    float _409 = fma(_396, _223, fma(_389, _213 * TANGENT.z, (_199 * _194) * _388));
    float _413 = inversesqrt(dot(vec3(_403, _406, _409), vec3(_403, _406, _409)));
    float _414 = _413 * _403;
    float _415 = _413 * _406;
    float _416 = _413 * _409;
    float _3453 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _417 = isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0));
    float _3464 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _418 = isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0));
    float _3475 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _3486 = isnan(0.0) ? _304 : (isnan(_304) ? 0.0 : max(_304, 0.0));
    float _3497 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _3508 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _422 = isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0));
    float _438 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _480 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _490 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _480);
    float _491 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _480);
    float _492 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _480);
    float _496 = inversesqrt(dot(vec3(_490, _491, _492), vec3(_490, _491, _492)));
    float _497 = _490 * _496;
    float _498 = _491 * _496;
    float _499 = _492 * _496;
    vec4 _504 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _506 = _504.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _680 = sqrt(((_490 * _490) + (_491 * _491)) + (_492 * _492));
        float _686 = (cbMatDynParam._m0[5u].x * _680) + cbMatDynParam._m0[5u].y;
        float _3519 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
        float _687 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
        float _691 = (cbMatDynParam._m0[5u].z * _680) + cbMatDynParam._m0[5u].w;
        float _3530 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0))) - _687)) + _687) < ((_506 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _517 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _518 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _537 = fma(_416, cbSceneParam._m0[5u].z, fma(_415, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _414));
    float _540 = fma(_416, cbSceneParam._m0[6u].z, fma(_415, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _414));
    float _543 = fma(_416, cbSceneParam._m0[7u].z, fma(_415, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _414));
    uint _556 = uint(roundEven(NORMAL.w)) * 13u;
    uint _558 = _556 + 9u;
    uint _559 = _558 + uint(cbMatDynParam._m0[0u].w);
    float _565 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0)))) * cbInstanceData._m0[_559].x;
    float _566 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0)))) * cbInstanceData._m0[_559].y;
    float _567 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0)))) * cbInstanceData._m0[_559].z;
    float _3541 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _568 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
    float _3552 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _569 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
    float _3563 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _570 = isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0));
    float _571 = 1.0 - _422;
    float _572 = _568 * _571;
    float _573 = _569 * _571;
    float _574 = _570 * _571;
    float _579 = (_568 + (-0.039999999105930328369140625)) * _422;
    float _580 = (_569 + (-0.039999999105930328369140625)) * _422;
    float _581 = (_570 + (-0.039999999105930328369140625)) * _422;
    float _582 = _579 + 0.039999999105930328369140625;
    float _584 = _580 + 0.039999999105930328369140625;
    float _585 = _581 + 0.039999999105930328369140625;
    vec4 _594 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _517, cbSceneParam._m0[86u].y * _518));
    float _597 = _594.x * TEXCOORD.z;
    float _598 = dot(vec3(_414, _415, _416), vec3(_497, _498, _499));
    float _601 = _598 * 2.0;
    float _605 = (_601 * _414) - _497;
    float _606 = (_601 * _415) - _498;
    float _607 = (_601 * _416) - _499;
    float _611 = abs(dot(vec3(_497, _498, _499), vec3(_414, _415, _416)));
    float _3574 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _613 = sqrt(_418);
    float _626 = exp2((_613 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_613 * 3.0));
    float _632 = (1.0 - _626) * ((_613 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _633 = _626 * _613;
    float _661 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _665 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _669 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1000;
    float _1002;
    float _1003;
    float _1004;
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _725 = fma(_669, cbModelParam._m0[26u].z, fma(_665, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _661));
        float _729 = fma(_669, cbModelParam._m0[27u].z, fma(_665, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _661));
        float _733 = fma(_669, cbModelParam._m0[28u].z, fma(_665, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _661));
        float _758 = _661 + _414;
        float _759 = _665 + _415;
        float _760 = _669 + _416;
        float _770 = fma(_760, cbModelParam._m0[26u].z, fma(_759, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _758)) - _725;
        float _771 = fma(_760, cbModelParam._m0[27u].z, fma(_759, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _758)) - _729;
        float _772 = fma(_760, cbModelParam._m0[28u].z, fma(_759, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _758)) - _733;
        float _776 = inversesqrt(dot(vec3(_770, _771, _772), vec3(_770, _771, _772)));
        float _789 = ((_776 * _770) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_725 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _790 = ((_776 * _771) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_729 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _791 = ((_776 * _772) / cbModelParam._m0[34u].z) + ((((((_733 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _794 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_789, _790, _791), 0.0);
        vec4 _801 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_789, _790, _791), 0.0);
        vec4 _808 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_789, _790, _791), 0.0);
        vec4 _815 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_789, _790, _791), 0.0);
        float _828 = exp2((_794.w + (-0.5)) * 20.0) * 2.0;
        float _829 = _828 * (_794.x + (-0.5));
        float _830 = _828 * (_794.y + (-0.5));
        float _831 = _828 * (_794.z + (-0.5));
        float _838 = exp2((_801.w + (-0.5)) * 20.0) * 2.0;
        float _839 = _838 * (_801.x + (-0.5));
        float _840 = _838 * (_801.y + (-0.5));
        float _841 = _838 * (_801.z + (-0.5));
        float _848 = exp2((_808.w + (-0.5)) * 20.0) * 2.0;
        float _849 = _848 * (_808.x + (-0.5));
        float _850 = _848 * (_808.y + (-0.5));
        float _851 = _848 * (_808.z + (-0.5));
        float _858 = exp2((_815.w + (-0.5)) * 20.0) * 2.0;
        float _859 = _858 * (_815.x + (-0.5));
        float _860 = _858 * (_815.y + (-0.5));
        float _861 = _858 * (_815.z + (-0.5));
        float _862 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
        float _863 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        float _864 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
        float _865 = _829 * 0.5;
        float _866 = _839 * 0.5;
        float _867 = _849 * 0.5;
        float _868 = dot(vec3(_865, _866, _867), vec3(_865, _866, _867));
        float _873 = (_868 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_868);
        float _882 = (dot(vec3(_414, _415, _416), vec3(_873 * _865, _873 * _866, _873 * _867)) + 1.0) * 0.5;
        float _3600 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _892 = sqrt(((_866 * _866) + (_865 * _865)) + (_867 * _867)) / (_862 + 9.9999997473787516355514526367188e-06);
        float _3611 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _893 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
        float _894 = _893 * 2.0;
        float _898 = (1.0 - _893) / (_893 + 1.0);
        float _3622 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _899 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
        float _908 = ((((1.0 - _899) * (_894 + 2.0)) * exp2(log2(isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0))) * (_894 + 1.0))) + _899) * _862;
        float _909 = _830 * 0.5;
        float _910 = _840 * 0.5;
        float _911 = _850 * 0.5;
        float _912 = dot(vec3(_909, _910, _911), vec3(_909, _910, _911));
        float _917 = (_912 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_912);
        float _925 = (dot(vec3(_414, _415, _416), vec3(_917 * _909, _917 * _910, _917 * _911)) + 1.0) * 0.5;
        float _3633 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _934 = sqrt(((_910 * _910) + (_909 * _909)) + (_911 * _911)) / (_863 + 9.9999997473787516355514526367188e-06);
        float _3644 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _935 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
        float _936 = _935 * 2.0;
        float _940 = (1.0 - _935) / (_935 + 1.0);
        float _3655 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _941 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
        float _950 = ((((1.0 - _941) * (_936 + 2.0)) * exp2(log2(isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0))) * (_936 + 1.0))) + _941) * _863;
        float _951 = _831 * 0.5;
        float _952 = _841 * 0.5;
        float _953 = _851 * 0.5;
        float _954 = dot(vec3(_951, _952, _953), vec3(_951, _952, _953));
        float _959 = (_954 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_954);
        float _967 = (dot(vec3(_414, _415, _416), vec3(_959 * _951, _959 * _952, _959 * _953)) + 1.0) * 0.5;
        float _3666 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _976 = sqrt(((_952 * _952) + (_951 * _951)) + (_953 * _953)) / (_864 + 9.9999997473787516355514526367188e-06);
        float _3677 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _977 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
        float _978 = _977 * 2.0;
        float _982 = (1.0 - _977) / (_977 + 1.0);
        float _3688 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _983 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
        float _992 = ((((1.0 - _983) * (_978 + 2.0)) * exp2(log2(isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0))) * (_978 + 1.0))) + _983) * _864;
        _1000 = _831;
        _1002 = _830;
        _1003 = _829;
        _1004 = _841;
        _1005 = _840;
        _1006 = _839;
        _1007 = _851;
        _1008 = _850;
        _1009 = _849;
        _1010 = _864;
        _1011 = _863;
        _1012 = _862;
        _1013 = cbModelParam._m0[36u].z * (isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0)));
        _1014 = cbModelParam._m0[36u].z * (isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0)));
        _1015 = cbModelParam._m0[36u].z * (isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0)));
    }
    else
    {
        _1000 = _1001;
        _1002 = _1001;
        _1003 = _1001;
        _1004 = _1001;
        _1005 = _1001;
        _1006 = _1001;
        _1007 = _1001;
        _1008 = _1001;
        _1009 = _1001;
        _1010 = _1001;
        _1011 = _1001;
        _1012 = _1001;
        _1013 = 0.0;
        _1014 = 0.0;
        _1015 = 0.0;
    }
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1044 = fma(_669, cbModelParam._m0[30u].z, fma(_665, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _661));
        float _1048 = fma(_669, cbModelParam._m0[31u].z, fma(_665, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _661));
        float _1052 = fma(_669, cbModelParam._m0[32u].z, fma(_665, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _661));
        float _1075 = _661 + _414;
        float _1076 = _665 + _415;
        float _1077 = _669 + _416;
        float _1087 = fma(_1077, cbModelParam._m0[30u].z, fma(_1076, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1075)) - _1044;
        float _1088 = fma(_1077, cbModelParam._m0[31u].z, fma(_1076, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1075)) - _1048;
        float _1089 = fma(_1077, cbModelParam._m0[32u].z, fma(_1076, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1075)) - _1052;
        float _1093 = inversesqrt(dot(vec3(_1087, _1088, _1089), vec3(_1087, _1088, _1089)));
        float _1106 = ((_1093 * _1087) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1044 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1107 = ((_1093 * _1088) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1048 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1108 = ((_1093 * _1089) / cbModelParam._m0[35u].z) + ((((((_1052 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1110 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1106, _1107, _1108), 0.0);
        vec4 _1117 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1106, _1107, _1108), 0.0);
        vec4 _1124 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1106, _1107, _1108), 0.0);
        vec4 _1131 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1106, _1107, _1108), 0.0);
        float _1143 = exp2((_1110.w + (-0.5)) * 20.0) * 2.0;
        float _1144 = _1143 * (_1110.x + (-0.5));
        float _1145 = _1143 * (_1110.y + (-0.5));
        float _1146 = _1143 * (_1110.z + (-0.5));
        float _1153 = exp2((_1117.w + (-0.5)) * 20.0) * 2.0;
        float _1154 = _1153 * (_1117.x + (-0.5));
        float _1155 = _1153 * (_1117.y + (-0.5));
        float _1156 = _1153 * (_1117.z + (-0.5));
        float _1163 = exp2((_1124.w + (-0.5)) * 20.0) * 2.0;
        float _1164 = _1163 * (_1124.x + (-0.5));
        float _1165 = _1163 * (_1124.y + (-0.5));
        float _1166 = _1163 * (_1124.z + (-0.5));
        float _1173 = exp2((_1131.w + (-0.5)) * 20.0) * 2.0;
        float _1174 = _1173 * (_1131.x + (-0.5));
        float _1175 = _1173 * (_1131.y + (-0.5));
        float _1176 = _1173 * (_1131.z + (-0.5));
        float _1177 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1178 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1179 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1180 = _1144 * 0.5;
        float _1181 = _1154 * 0.5;
        float _1182 = _1164 * 0.5;
        float _1183 = dot(vec3(_1180, _1181, _1182), vec3(_1180, _1181, _1182));
        float _1188 = (_1183 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1183);
        float _1196 = (dot(vec3(_414, _415, _416), vec3(_1188 * _1180, _1188 * _1181, _1188 * _1182)) + 1.0) * 0.5;
        float _3729 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1205 = sqrt(((_1181 * _1181) + (_1180 * _1180)) + (_1182 * _1182)) / (_1177 + 9.9999997473787516355514526367188e-06);
        float _3740 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _1207 = _1206 * 2.0;
        float _1211 = (1.0 - _1206) / (_1206 + 1.0);
        float _3751 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1212 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
        float _1221 = ((((1.0 - _1212) * (_1207 + 2.0)) * exp2(log2(isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))) * (_1207 + 1.0))) + _1212) * _1177;
        float _1222 = _1145 * 0.5;
        float _1223 = _1155 * 0.5;
        float _1224 = _1165 * 0.5;
        float _1225 = dot(vec3(_1222, _1223, _1224), vec3(_1222, _1223, _1224));
        float _1230 = (_1225 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1225);
        float _1238 = (dot(vec3(_414, _415, _416), vec3(_1230 * _1222, _1230 * _1223, _1230 * _1224)) + 1.0) * 0.5;
        float _3762 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1247 = sqrt(((_1223 * _1223) + (_1222 * _1222)) + (_1224 * _1224)) / (_1178 + 9.9999997473787516355514526367188e-06);
        float _3773 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _1249 = _1248 * 2.0;
        float _1253 = (1.0 - _1248) / (_1248 + 1.0);
        float _3784 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1254 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
        float _1263 = ((((1.0 - _1254) * (_1249 + 2.0)) * exp2(log2(isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0))) * (_1249 + 1.0))) + _1254) * _1178;
        float _1264 = _1146 * 0.5;
        float _1265 = _1156 * 0.5;
        float _1266 = _1166 * 0.5;
        float _1267 = dot(vec3(_1264, _1265, _1266), vec3(_1264, _1265, _1266));
        float _1272 = (_1267 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1267);
        float _1280 = (dot(vec3(_414, _415, _416), vec3(_1272 * _1264, _1272 * _1265, _1272 * _1266)) + 1.0) * 0.5;
        float _3795 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1289 = sqrt(((_1265 * _1265) + (_1264 * _1264)) + (_1266 * _1266)) / (_1179 + 9.9999997473787516355514526367188e-06);
        float _3806 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _1291 = _1290 * 2.0;
        float _1295 = (1.0 - _1290) / (_1290 + 1.0);
        float _3817 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
        float _1305 = ((((1.0 - _1296) * (_1291 + 2.0)) * exp2(log2(isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) * (_1291 + 1.0))) + _1296) * _1179;
        _1313 = _1146;
        _1314 = _1145;
        _1315 = _1144;
        _1316 = _1156;
        _1317 = _1155;
        _1318 = _1154;
        _1319 = _1166;
        _1320 = _1165;
        _1321 = _1164;
        _1322 = _1179;
        _1323 = _1178;
        _1324 = _1177;
        _1325 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0)));
        _1326 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0)));
        _1327 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0)));
    }
    else
    {
        _1313 = _1001;
        _1314 = _1001;
        _1315 = _1001;
        _1316 = _1001;
        _1317 = _1001;
        _1318 = _1001;
        _1319 = _1001;
        _1320 = _1001;
        _1321 = _1001;
        _1322 = _1001;
        _1323 = _1001;
        _1324 = _1001;
        _1325 = 0.0;
        _1326 = 0.0;
        _1327 = 0.0;
    }
    float _1337 = (cbModelParam._m0[1u].x * (_1325 - _1013)) + _1013;
    float _1338 = (cbModelParam._m0[1u].x * (_1326 - _1014)) + _1014;
    float _1339 = (cbModelParam._m0[1u].x * (_1327 - _1015)) + _1015;
    float _1360 = fma(_1339, cbSceneParam._m0[89u].z, fma(_1338, cbSceneParam._m0[89u].y, _1337 * cbSceneParam._m0[89u].x));
    float _1363 = fma(_1339, cbSceneParam._m0[90u].z, fma(_1338, cbSceneParam._m0[90u].y, _1337 * cbSceneParam._m0[90u].x));
    float _1366 = fma(_1339, cbSceneParam._m0[91u].z, fma(_1338, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1337));
    float _1381 = _605 * 0.5;
    float _1382 = _606 * 0.5;
    float _1383 = _607 * 0.5;
    float _1384 = dot(vec4(_1381, _1382, _1383, 1.0), vec4(_1315, _1318, _1321, _1324));
    float _1387 = dot(vec4(_1381, _1382, _1383, 1.0), vec4(_1314, _1317, _1320, _1323));
    float _1390 = dot(vec4(_1381, _1382, _1383, 1.0), vec4(_1313, _1316, _1319, _1322));
    float _1424;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1397 = dot(vec4(_1381, _1382, _1383, 1.0), vec4(_1000, _1004, _1007, _1010));
        float _1401 = dot(vec4(_1381, _1382, _1383, 1.0), vec4(_1002, _1005, _1008, _1011));
        float _1405 = dot(vec4(_1381, _1382, _1383, 1.0), vec4(_1003, _1006, _1009, _1012));
        float _1412 = dot(vec4(cbModelParam._m0[39u]), vec4(_1381, _1382, _1383, 1.0));
        _1424 = dot(vec3(isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0)), isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0)), isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1412) ? 0.0 : (isnan(0.0) ? _1412 : max(0.0, _1412))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1424 = 1.0;
    }
    float _1435;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1426 = dot(vec4(cbModelParam._m0[40u]), vec4(_1381, _1382, _1383, 1.0));
        _1435 = dot(vec3(isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0)), isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0)), isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1426) ? 0.0 : (isnan(0.0) ? _1426 : max(0.0, _1426))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1435 = 1.0;
    }
    float _1439 = (_1435 * cbModelParam._m0[1u].x) + (_1424 * (1.0 - cbModelParam._m0[1u].x));
    float _1449 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _418);
    float _1450 = isnan(_1449) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1449 : min(cbModelParam._m0[25u].z, _1449));
    float _1532;
    float _1534;
    float _1536;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1499 = fma(_669, cbModelParam._m0[13u].z, fma(_665, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _661)) + cbModelParam._m0[13u].w;
        float _1503 = fma(_669, cbModelParam._m0[14u].z, fma(_665, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _661)) + cbModelParam._m0[14u].w;
        float _1507 = fma(_669, cbModelParam._m0[15u].z, fma(_665, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _661)) + cbModelParam._m0[15u].w;
        float _1510 = fma(_607, cbModelParam._m0[13u].z, fma(_606, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _605));
        float _1513 = fma(_607, cbModelParam._m0[14u].z, fma(_606, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _605));
        float _1516 = fma(_607, cbModelParam._m0[15u].z, fma(_606, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _605));
        float _1544;
        if (_1510 > 0.0)
        {
            _1544 = abs((1.0 - _1499) / _1510);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1510 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1499 + 1.0) / _1510);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1544 = frontier_phi_19_17_ladder;
        }
        float _1750;
        if (_1513 > 0.0)
        {
            _1750 = abs((1.0 - _1503) / _1513);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1513 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1503 + 1.0) / _1513);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1750 = frontier_phi_28_24_ladder;
        }
        float _2004;
        if (_1516 > 0.0)
        {
            _2004 = abs((1.0 - _1507) / _1516);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1516 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1507 + 1.0) / _1516);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2004 = frontier_phi_40_35_ladder;
        }
        float _2006 = isnan(_1750) ? _1544 : (isnan(_1544) ? _1750 : min(_1544, _1750));
        float _2007 = isnan(_2004) ? _2006 : (isnan(_2006) ? _2004 : min(_2006, _2004));
        float _2011 = (_2007 * _1510) + _1499;
        float _2012 = (_2007 * _1513) + _1503;
        float _2013 = (_2007 * _1516) + _1507;
        float _2014 = _2007 * 9.9999997473787516355514526367188e-05;
        float _2016 = (-1.0) - _2014;
        float _2018 = _2014 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2013 > _2018) || ((_2013 < _2016) || ((_2012 > _2018) || ((_2012 < _2016) || ((_2011 < _2016) || (_2011 > _2018))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2141 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2013, cbModelParam._m0[9u].z, fma(_2012, cbModelParam._m0[9u].y, _2011 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2013, cbModelParam._m0[10u].z, fma(_2012, cbModelParam._m0[10u].y, _2011 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2013, cbModelParam._m0[11u].z, fma(_2012, cbModelParam._m0[11u].y, _2011 * cbModelParam._m0[11u].x))), _1450);
            frontier_phi_18_40_ladder = _2141.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2141.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2141.x * cbModelParam._m0[1u].y;
        }
        _1532 = frontier_phi_18_40_ladder_2;
        _1534 = frontier_phi_18_40_ladder_1;
        _1536 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1520 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_605, _606, _607), _1450);
        _1532 = _1520.x * cbModelParam._m0[1u].y;
        _1534 = _1520.y * cbModelParam._m0[1u].y;
        _1536 = _1520.z * cbModelParam._m0[1u].y;
    }
    float _1540 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _418);
    float _1541 = isnan(_1540) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1540 : min(cbModelParam._m0[25u].w, _1540));
    float _1633;
    float _1635;
    float _1637;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1597 = fma(_669, cbModelParam._m0[21u].z, fma(_665, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _661)) + cbModelParam._m0[21u].w;
        float _1601 = fma(_669, cbModelParam._m0[22u].z, fma(_665, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _661)) + cbModelParam._m0[22u].w;
        float _1605 = fma(_669, cbModelParam._m0[23u].z, fma(_665, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _661)) + cbModelParam._m0[23u].w;
        float _1608 = fma(_607, cbModelParam._m0[21u].z, fma(_606, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _605));
        float _1611 = fma(_607, cbModelParam._m0[22u].z, fma(_606, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _605));
        float _1614 = fma(_607, cbModelParam._m0[23u].z, fma(_606, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _605));
        float _1755;
        if (_1608 > 0.0)
        {
            _1755 = abs((1.0 - _1597) / _1608);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1608 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1597 + 1.0) / _1608);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1755 = frontier_phi_30_26_ladder;
        }
        float _2031;
        if (_1611 > 0.0)
        {
            _2031 = abs((1.0 - _1601) / _1611);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1611 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1601 + 1.0) / _1611);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2031 = frontier_phi_42_37_ladder;
        }
        float _2244;
        if (_1614 > 0.0)
        {
            _2244 = abs((1.0 - _1605) / _1614);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1614 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1605 + 1.0) / _1614);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2244 = frontier_phi_51_48_ladder;
        }
        float _2246 = isnan(_2031) ? _1755 : (isnan(_1755) ? _2031 : min(_1755, _2031));
        float _2247 = isnan(_2244) ? _2246 : (isnan(_2246) ? _2244 : min(_2246, _2244));
        float _2251 = (_2247 * _1608) + _1597;
        float _2252 = (_2247 * _1611) + _1601;
        float _2253 = (_2247 * _1614) + _1605;
        float _2254 = _2247 * 9.9999997473787516355514526367188e-05;
        float _2255 = (-1.0) - _2254;
        float _2257 = _2254 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2253 > _2257) || ((_2253 < _2255) || ((_2252 > _2257) || ((_2252 < _2255) || ((_2251 < _2255) || (_2251 > _2257))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2482 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2253, cbModelParam._m0[17u].z, fma(_2252, cbModelParam._m0[17u].y, _2251 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2253, cbModelParam._m0[18u].z, fma(_2252, cbModelParam._m0[18u].y, _2251 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2253, cbModelParam._m0[19u].z, fma(_2252, cbModelParam._m0[19u].y, _2251 * cbModelParam._m0[19u].x))), _1541);
            frontier_phi_27_51_ladder = _2482.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2482.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2482.x * cbModelParam._m0[1u].z;
        }
        _1633 = frontier_phi_27_51_ladder_2;
        _1635 = frontier_phi_27_51_ladder_1;
        _1637 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1617 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_605, _606, _607), _1541);
        _1633 = _1617.x * cbModelParam._m0[1u].z;
        _1635 = _1617.y * cbModelParam._m0[1u].z;
        _1637 = _1617.z * cbModelParam._m0[1u].z;
    }
    float _1650 = (((_632 * _582) + _633) * _597) * ((cbModelParam._m0[1u].w * (_1633 - _1532)) + _1532);
    float _1652 = (((_632 * _584) + _633) * _597) * ((cbModelParam._m0[1u].w * (_1635 - _1534)) + _1534);
    float _1654 = (((_632 * _585) + _633) * _597) * ((cbModelParam._m0[1u].w * (_1637 - _1536)) + _1536);
    float _1657 = fma(_1654, cbSceneParam._m0[89u].z, fma(_1652, cbSceneParam._m0[89u].y, _1650 * cbSceneParam._m0[89u].x));
    float _1660 = fma(_1654, cbSceneParam._m0[90u].z, fma(_1652, cbSceneParam._m0[90u].y, _1650 * cbSceneParam._m0[90u].x));
    float _1663 = fma(_1654, cbSceneParam._m0[91u].z, fma(_1652, cbSceneParam._m0[91u].y, _1650 * cbSceneParam._m0[91u].x));
    uvec4 _1673 = floatBitsToUint(cbInstanceData._m0[_556 + 5u]);
    uint _1675 = _1673.x * 14u;
    uint _1676 = _1675 + 13u;
    float _1683 = _597 + (-1.0);
    float _1688 = (cbLight._m0[_1676].x * _1683) + 1.0;
    float _1689 = (cbLight._m0[_1676].y * _1683) + 1.0;
    float _1690 = (cbLight._m0[_1676].z * _1683) + 1.0;
    float _1691 = (cbLight._m0[_1676].w * _1683) + 1.0;
    uint _1692 = _1675 + 5u;
    float _1698 = isnan(1.0) ? _1689 : (isnan(_1689) ? 1.0 : min(_1689, 1.0));
    uint _1702 = _1675 + 4u;
    float _1708 = isnan(1.0) ? _1688 : (isnan(_1688) ? 1.0 : min(_1688, 1.0));
    uint _1712 = _1675 | 1u;
    float _1723 = dot(vec3(cbLight._m0[_1675].xyz), vec3(_414, _415, _416));
    float _1726 = dot(vec3(cbLight._m0[_1712].xyz), vec3(_414, _415, _416));
    float _3953 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
    float _3964 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
    float _1731 = (isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0))) * 0.3183098733425140380859375;
    float _1733 = (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))) * 0.3183098733425140380859375;
    float _1740 = ((cbLight._m0[_1692].x * _1698) * _1733) + ((cbLight._m0[_1702].x * _1708) * _1731);
    float _1741 = ((_1698 * cbLight._m0[_1692].y) * _1733) + ((_1708 * cbLight._m0[_1702].y) * _1731);
    float _1742 = ((_1698 * cbLight._m0[_1692].z) * _1733) + ((_1708 * cbLight._m0[_1702].z) * _1731);
    uvec4 _1747 = floatBitsToUint(cbLight._m0[_1675 + 12u]);
    bool _1749 = _1747.x == 0u;
    float _1760;
    float _1762;
    float _1764;
    if (_1749)
    {
        _1760 = _1740;
        _1762 = _1741;
        _1764 = _1742;
    }
    else
    {
        uint _1768 = _1675 + 6u;
        float _1784 = (dot(vec3(cbLight._m0[_1675 + 2u].xyz), vec3(_414, _415, _416)) * 0.5) + 0.5;
        float _1785 = _1784 * _1784;
        float _3975 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
        float _1786 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _1787 = isnan(1.0) ? _1690 : (isnan(_1690) ? 1.0 : min(_1690, 1.0));
        _1760 = (((cbLight._m0[_1768].x * 0.3183098733425140380859375) * _1786) * _1787) + _1740;
        _1762 = (((cbLight._m0[_1768].y * 0.3183098733425140380859375) * _1786) * _1787) + _1741;
        _1764 = (((cbLight._m0[_1768].z * 0.3183098733425140380859375) * _1786) * _1787) + _1742;
    }
    bool _1767 = _1747.y == 0u;
    float _1805;
    float _1807;
    float _1809;
    if (_1767)
    {
        _1805 = _1760;
        _1807 = _1762;
        _1809 = _1764;
    }
    else
    {
        uint _1975 = _1675 + 7u;
        float _1991 = (dot(vec3(cbLight._m0[_1675 + 3u].xyz), vec3(_414, _415, _416)) * 0.5) + 0.5;
        float _1992 = _1991 * _1991;
        float _3991 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
        float _1993 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _1994 = isnan(1.0) ? _1691 : (isnan(_1691) ? 1.0 : min(_1691, 1.0));
        _1805 = (((cbLight._m0[_1975].x * 0.3183098733425140380859375) * _1993) * _1994) + _1760;
        _1807 = (((cbLight._m0[_1975].y * 0.3183098733425140380859375) * _1993) * _1994) + _1762;
        _1809 = (((cbLight._m0[_1975].z * 0.3183098733425140380859375) * _1993) * _1994) + _1764;
    }
    uint _1812 = _1675 + 8u;
    float _1825 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1675].w)) * _418) * 0.949999988079071044921875);
    float _1826 = _1825 * _1825;
    float _1827 = cbLight._m0[_1675].x + _497;
    float _1828 = cbLight._m0[_1675].y + _498;
    float _1829 = cbLight._m0[_1675].z + _499;
    float _1833 = inversesqrt(dot(vec3(_1827, _1828, _1829), vec3(_1827, _1828, _1829)));
    float _1834 = _1833 * _1827;
    float _1835 = _1833 * _1828;
    float _1836 = _1833 * _1829;
    float _1837 = dot(vec3(_414, _415, _416), vec3(cbLight._m0[_1675].xyz));
    float _4007 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
    float _1840 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
    float _4018 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _1841 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
    float _1842 = dot(vec3(_414, _415, _416), vec3(_1834, _1835, _1836));
    float _4029 = isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0));
    float _1845 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
    float _1846 = dot(vec3(cbLight._m0[_1675].xyz), vec3(_1834, _1835, _1836));
    float _4040 = isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0));
    float _1850 = _1826 * _1826;
    float _1854 = ((_1845 * _1845) * (_1850 + (-1.0))) + 1.0;
    float _1862 = exp2(log2(1.0 - (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0)))) * 5.0);
    float _1863 = 0.959999978542327880859375 - _579;
    float _1865 = 0.959999978542327880859375 - _580;
    float _1866 = 0.959999978542327880859375 - _581;
    float _1873 = 1.0 - _1826;
    float _1884 = (0.5 / (((_1841 * ((_1840 * _1873) + _1826)) + 9.9999999392252902907785028219223e-09) + (((_1841 * _1873) + _1826) * _1840))) * _1840;
    float _4051 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
    float _1886 = (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * (_1850 / ((_1854 * _1854) * 3.141590118408203125));
    uint _1897 = _1675 + 9u;
    float _1908 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1712].w)) * _418) * 0.949999988079071044921875);
    float _1909 = _1908 * _1908;
    float _1910 = cbLight._m0[_1712].x + _497;
    float _1911 = cbLight._m0[_1712].y + _498;
    float _1912 = cbLight._m0[_1712].z + _499;
    float _1916 = inversesqrt(dot(vec3(_1910, _1911, _1912), vec3(_1910, _1911, _1912)));
    float _1917 = _1916 * _1910;
    float _1918 = _1916 * _1911;
    float _1919 = _1916 * _1912;
    float _1920 = dot(vec3(_414, _415, _416), vec3(cbLight._m0[_1712].xyz));
    float _4062 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
    float _1923 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
    float _1924 = dot(vec3(_414, _415, _416), vec3(_1917, _1918, _1919));
    float _4073 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
    float _1927 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
    float _1928 = dot(vec3(cbLight._m0[_1712].xyz), vec3(_1917, _1918, _1919));
    float _4084 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
    float _1932 = _1909 * _1909;
    float _1936 = ((_1927 * _1927) * (_1932 + (-1.0))) + 1.0;
    float _1943 = exp2(log2(1.0 - (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0)))) * 5.0);
    float _1950 = 1.0 - _1909;
    float _1960 = (0.5 / (((_1841 * ((_1923 * _1950) + _1909)) + 9.9999999392252902907785028219223e-09) + (((_1841 * _1950) + _1909) * _1923))) * _1923;
    float _4095 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
    float _1962 = (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) * (_1932 / ((_1936 * _1936) * 3.141590118408203125));
    float _1972 = (((((_1943 * _1863) + _582) * cbLight._m0[_1897].x) * _1962) * _1698) + (((((_1862 * _1863) + _582) * cbLight._m0[_1812].x) * _1886) * _1708);
    float _1973 = (((((_1943 * _1865) + _584) * cbLight._m0[_1897].y) * _1962) * _1698) + (((((_1862 * _1865) + _584) * cbLight._m0[_1812].y) * _1886) * _1708);
    float _1974 = (((((_1943 * _1866) + _585) * cbLight._m0[_1897].z) * _1962) * _1698) + (((((_1862 * _1866) + _585) * cbLight._m0[_1812].z) * _1886) * _1708);
    float _2036;
    float _2038;
    float _2040;
    if (_1749)
    {
        _2036 = _1972;
        _2038 = _1973;
        _2040 = _1974;
    }
    else
    {
        uint _2042 = _1675 + 2u;
        uint _2046 = _1675 + 10u;
        float _2060 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2042].w)) * _418) * 0.949999988079071044921875);
        float _2061 = _2060 * _2060;
        float _2062 = cbLight._m0[_2042].x + _497;
        float _2063 = cbLight._m0[_2042].y + _498;
        float _2064 = cbLight._m0[_2042].z + _499;
        float _2068 = inversesqrt(dot(vec3(_2062, _2063, _2064), vec3(_2062, _2063, _2064)));
        float _2069 = _2068 * _2062;
        float _2070 = _2068 * _2063;
        float _2071 = _2068 * _2064;
        float _2072 = dot(vec3(_414, _415, _416), vec3(cbLight._m0[_2042].xyz));
        float _4106 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
        float _2075 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _2076 = dot(vec3(_414, _415, _416), vec3(_2069, _2070, _2071));
        float _4117 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
        float _2079 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _2080 = dot(vec3(cbLight._m0[_2042].xyz), vec3(_2069, _2070, _2071));
        float _4128 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
        float _2084 = _2061 * _2061;
        float _2088 = ((_2079 * _2079) * (_2084 + (-1.0))) + 1.0;
        float _2095 = exp2(log2(1.0 - (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0)))) * 5.0);
        float _2102 = 1.0 - _2061;
        float _2112 = (0.5 / (((_1841 * ((_2075 * _2102) + _2061)) + 9.9999999392252902907785028219223e-09) + (((_1841 * _2102) + _2061) * _2075))) * _2075;
        float _4139 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
        float _2114 = (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * (_2084 / ((_2088 * _2088) * 3.141590118408203125));
        float _2115 = isnan(1.0) ? _1690 : (isnan(_1690) ? 1.0 : min(_1690, 1.0));
        _2036 = (((((_2095 * _1863) + _582) * cbLight._m0[_2046].x) * _2114) * _2115) + _1972;
        _2038 = (((((_2095 * _1865) + _584) * cbLight._m0[_2046].y) * _2114) * _2115) + _1973;
        _2040 = (((((_2095 * _1866) + _585) * cbLight._m0[_2046].z) * _2114) * _2115) + _1974;
    }
    float _2150;
    float _2152;
    float _2154;
    if (_1767)
    {
        _2150 = _2036;
        _2152 = _2038;
        _2154 = _2040;
    }
    else
    {
        uint _2161 = _1675 + 3u;
        uint _2165 = _1675 + 11u;
        float _2179 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2161].w)) * _418) * 0.949999988079071044921875);
        float _2180 = _2179 * _2179;
        float _2181 = cbLight._m0[_2161].x + _497;
        float _2182 = cbLight._m0[_2161].y + _498;
        float _2183 = cbLight._m0[_2161].z + _499;
        float _2187 = inversesqrt(dot(vec3(_2181, _2182, _2183), vec3(_2181, _2182, _2183)));
        float _2188 = _2187 * _2181;
        float _2189 = _2187 * _2182;
        float _2190 = _2187 * _2183;
        float _2191 = dot(vec3(_414, _415, _416), vec3(cbLight._m0[_2161].xyz));
        float _4155 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
        float _2194 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _2195 = dot(vec3(_414, _415, _416), vec3(_2188, _2189, _2190));
        float _4166 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
        float _2198 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _2199 = dot(vec3(cbLight._m0[_2161].xyz), vec3(_2188, _2189, _2190));
        float _4177 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
        float _2203 = _2180 * _2180;
        float _2207 = ((_2198 * _2198) * (_2203 + (-1.0))) + 1.0;
        float _2214 = exp2(log2(1.0 - (isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0)))) * 5.0);
        float _2221 = 1.0 - _2180;
        float _2231 = (0.5 / (((_1841 * ((_2194 * _2221) + _2180)) + 9.9999999392252902907785028219223e-09) + (((_1841 * _2221) + _2180) * _2194))) * _2194;
        float _4188 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
        float _2233 = (isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * (_2203 / ((_2207 * _2207) * 3.141590118408203125));
        float _2234 = isnan(1.0) ? _1691 : (isnan(_1691) ? 1.0 : min(_1691, 1.0));
        _2150 = (((((_2214 * _1863) + _582) * cbLight._m0[_2165].x) * _2233) * _2234) + _2036;
        _2152 = (((((_2214 * _1865) + _584) * cbLight._m0[_2165].y) * _2233) * _2234) + _2038;
        _2154 = (((((_2214 * _1866) + _585) * cbLight._m0[_2165].z) * _2233) * _2234) + _2040;
    }
    float _2368;
    float _2370;
    float _2372;
    float _2374;
    float _2376;
    float _2378;
    if (_1673.y == 0u)
    {
        float _2309 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2310 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2309;
        float _2311 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2309;
        float _2312 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2309;
        uvec4 _2324 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2325 = _2324.x;
        uint _2336 = uint((float(_2324.y) * floor(float(uint(cbSceneParam._m0[85u].y * _518) / _2325))) + floor(float(uint(cbSceneParam._m0[85u].x * _517) / _2325)));
        float _2346 = (log2(_2312 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2347 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
        uint _2350 = uint(isnan(14.0) ? _2347 : (isnan(_2347) ? 14.0 : min(_2347, 14.0)));
        uvec4 _2355 = texelFetch(g_lightClusterGridBuffer, int(((_2350 << 2u) + (_2336 << 6u)) >> 2u));
        uint _2356 = _2355.x;
        uint _2357 = _2324.z;
        float _2487;
        float _2489;
        float _2491;
        float _2493;
        float _2495;
        float _2497;
        if (((((1u << ((_2357 >> 4u) & 15u)) + 4294967295u) & _2356) == 0u) || ((_2357 & 240u) == 0u))
        {
            _2487 = 0.0;
            _2489 = 0.0;
            _2491 = 0.0;
            _2493 = 0.0;
            _2495 = 0.0;
            _2497 = 0.0;
        }
        else
        {
            float _2488;
            float _2490;
            float _2492;
            float _2494;
            float _2496;
            float _2498;
            float _2648 = 0.0;
            float _2649 = 0.0;
            float _2650 = 0.0;
            float _2651 = 0.0;
            float _2652 = 0.0;
            float _2653 = 0.0;
            uint _2654 = 0u;
            uint _2663;
            bool _2664;
            for (;;)
            {
                _2663 = texelFetch(g_lightClassification, int((((_2350 << 5u) + (_2336 << 9u)) + (_2654 << 2u)) >> 2u)).x;
                _2664 = _2663 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2664)
                {
                    frontier_phi_68_pred = _2650;
                    frontier_phi_68_pred_1 = _2653;
                    frontier_phi_68_pred_2 = _2652;
                    frontier_phi_68_pred_3 = _2651;
                    frontier_phi_68_pred_4 = _2649;
                    frontier_phi_68_pred_5 = _2648;
                }
                else
                {
                    float _2793;
                    float _2794;
                    float _2795;
                    float _2796;
                    float _2797;
                    float _2798;
                    uint _2799;
                    _2793 = _2648;
                    _2794 = _2649;
                    _2795 = _2650;
                    _2796 = _2651;
                    _2797 = _2652;
                    _2798 = _2653;
                    _2799 = _2663;
                    float _2720;
                    float _2721;
                    float _2722;
                    float _2723;
                    float _2724;
                    float _2725;
                    for (;;)
                    {
                        uint _2803 = uint(findLSB(_2799)) + (_2654 << 5u);
                        uint _2800 = (_2799 + 4294967295u) & _2799;
                        uint _2805 = _2803 * 48u;
                        vec4 _2819 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2805)).x, texelFetch(g_PointLightRenderingBuffer, int(_2805 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2805 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2805 + 3u)).x));
                        uint _2825 = (_2803 * 48u) + 4u;
                        vec4 _2838 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2825)).x, texelFetch(g_PointLightRenderingBuffer, int(_2825 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2825 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2825 + 3u)).x));
                        uint _2844 = (_2803 * 48u) + 8u;
                        vec3 _2855 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2844)).x, texelFetch(g_PointLightRenderingBuffer, int(_2844 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2844 + 2u)).x));
                        float _2859 = _2819.x - _2310;
                        float _2860 = _2819.y - _2311;
                        float _2861 = _2819.z - _2312;
                        float _2862 = dot(vec3(_2859, _2860, _2861), vec3(_2859, _2860, _2861));
                        float _2865 = inversesqrt(_2862);
                        float _2866 = _2865 * _2859;
                        float _2867 = _2865 * _2860;
                        float _2868 = _2865 * _2861;
                        float _2869 = dot(vec3(_537, _540, _543), vec3(_2866, _2867, _2868));
                        float _2874 = 1.0 - (_2862 * _2819.w);
                        float _4214 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0));
                        float _2875 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
                        float _2876 = sqrt(_2862) * _2838.w;
                        float _2879 = 1.39999997615814208984375 / (_2876 + 1.39999997615814208984375);
                        float _2880 = _2879 * _2879;
                        float _2883 = ((1.0 - _2880) * _2869) + _2880;
                        float _2886 = _2876 * _2876;
                        float _2890 = ((isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0))) * _2875) / ((_2886 * 0.699999988079071044921875) + 1.0);
                        float _2894 = (-0.0) - _2310;
                        float _2895 = (-0.0) - _2311;
                        float _2896 = (-0.0) - _2312;
                        float _2900 = inversesqrt(dot(vec3(_2894, _2895, _2896), vec3(_2894, _2895, _2896)));
                        float _2901 = _2900 * _2894;
                        float _2902 = _2900 * _2895;
                        float _2903 = _2900 * _2896;
                        float _2911 = exp2(log2(1.0 / ((_2886 * 3.5) + 5.0)) * 0.25);
                        float _2912 = 1.0 - _613;
                        float _2919 = sqrt(1.0 - ((1.0 - (_2912 * _2912)) * (1.0 - (_2911 * _2911))));
                        float _2920 = _2919 * _2919;
                        float _2921 = _2920 * _2920;
                        float _2922 = _2901 + _2866;
                        float _2923 = _2902 + _2867;
                        float _2924 = _2903 + _2868;
                        float _2928 = inversesqrt(dot(vec3(_2922, _2923, _2924), vec3(_2922, _2923, _2924)));
                        float _2932 = dot(vec3(_537, _540, _543), vec3(_2901, _2902, _2903));
                        float _4230 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0));
                        float _2935 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
                        float _2936 = dot(vec3(_537, _540, _543), vec3(_2928 * _2922, _2928 * _2923, _2928 * _2924));
                        float _4241 = isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0));
                        float _2939 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
                        float _2943 = ((_2939 * _2939) * (_2921 + (-1.0))) + 1.0;
                        float _2944 = _2879 * _2920;
                        float _2945 = _2944 * _2944;
                        float _2948 = ((1.0 - _2945) * _2869) + _2945;
                        float _4252 = isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0));
                        float _2949 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
                        float _2950 = 1.0 - _2920;
                        float _2960 = (0.5 / (((_2949 * ((_2935 * _2950) + _2920)) + 9.9999999392252902907785028219223e-09) + (((_2949 * _2950) + _2920) * _2935))) * _2949;
                        float _4263 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0));
                        float _2971 = (((_2921 * 3.1415927410125732421875) * (isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0)))) / ((_2943 * _2943) * ((_2886 * 2.1991131305694580078125) + 3.141590118408203125))) * _2875;
                        _2723 = (_2890 * _2838.x) + _2796;
                        _2724 = (_2890 * _2838.y) + _2797;
                        _2725 = (_2890 * _2838.z) + _2798;
                        _2720 = (_2971 * _2855.x) + _2793;
                        _2721 = (_2971 * _2855.y) + _2794;
                        _2722 = (_2971 * _2855.z) + _2795;
                        if (_2800 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2793 = _2720;
                            _2794 = _2721;
                            _2795 = _2722;
                            _2796 = _2723;
                            _2797 = _2724;
                            _2798 = _2725;
                            _2799 = _2800;
                        }
                    }
                    frontier_phi_68_pred = _2722;
                    frontier_phi_68_pred_1 = _2725;
                    frontier_phi_68_pred_2 = _2724;
                    frontier_phi_68_pred_3 = _2723;
                    frontier_phi_68_pred_4 = _2721;
                    frontier_phi_68_pred_5 = _2720;
                }
                _2492 = frontier_phi_68_pred;
                _2498 = frontier_phi_68_pred_1;
                _2496 = frontier_phi_68_pred_2;
                _2494 = frontier_phi_68_pred_3;
                _2490 = frontier_phi_68_pred_4;
                _2488 = frontier_phi_68_pred_5;
                uint _2655 = _2654 + 1u;
                if (_2655 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2648 = _2488;
                    _2649 = _2490;
                    _2650 = _2492;
                    _2651 = _2494;
                    _2652 = _2496;
                    _2653 = _2498;
                    _2654 = _2655;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2487 = _2488;
            _2489 = _2490;
            _2491 = _2492;
            _2493 = _2494;
            _2495 = _2496;
            _2497 = _2498;
        }
        uvec4 _2501 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2502 = _2501.z;
        uint _2504 = (_2502 >> 8u) & 15u;
        float _2616;
        float _2618;
        float _2620;
        float _2622;
        float _2624;
        float _2626;
        if (((4294967295u << _2504) & _2356) == 0u)
        {
            _2616 = _2487;
            _2618 = _2489;
            _2620 = _2491;
            _2622 = _2493;
            _2624 = _2495;
            _2626 = _2497;
        }
        else
        {
            float _2641 = inversesqrt(dot(vec3(_2310, _2311, _2312), vec3(_2310, _2311, _2312)));
            float _2642 = _2641 * _2310;
            float _2643 = _2641 * _2311;
            float _2644 = _2641 * _2312;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2504 < ((_2502 >> 12u) & 15u))
            {
                float _2617;
                float _2619;
                float _2621;
                float _2623;
                float _2625;
                float _2627;
                float _2776 = _2487;
                float _2777 = _2489;
                float _2778 = _2491;
                float _2779 = _2493;
                float _2780 = _2495;
                float _2781 = _2497;
                uint _2782 = _2504;
                uint _2791;
                bool _2792;
                for (;;)
                {
                    _2791 = texelFetch(g_lightClassification, int((((_2350 << 5u) + (_2336 << 9u)) + (_2782 << 2u)) >> 2u)).x;
                    _2792 = _2791 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2792)
                    {
                        frontier_phi_79_pred = _2781;
                        frontier_phi_79_pred_1 = _2780;
                        frontier_phi_79_pred_2 = _2779;
                        frontier_phi_79_pred_3 = _2778;
                        frontier_phi_79_pred_4 = _2777;
                        frontier_phi_79_pred_5 = _2776;
                    }
                    else
                    {
                        float _2985;
                        float _2986;
                        float _2987;
                        float _2988;
                        float _2989;
                        float _2990;
                        float _3281;
                        float _3282;
                        float _3283;
                        float _3284;
                        float _3285;
                        float _3286;
                        float _2998 = _2776;
                        float _2999 = _2777;
                        float _3000 = _2778;
                        float _3001 = _2779;
                        float _3002 = _2780;
                        float _3003 = _2781;
                        uint _3004 = _2791;
                        uint _3005;
                        vec4 _3030;
                        float _3031;
                        vec4 _3046;
                        vec3 _3058;
                        vec4 _3074;
                        vec4 _3090;
                        float _3137;
                        bool _3138;
                        for (;;)
                        {
                            uint _3015 = ((_2782 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3004));
                            _3005 = (_3004 + 4294967295u) & _3004;
                            uint _3017 = _3015 * 40u;
                            _3030 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3017)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 3u)).x));
                            _3031 = _3030.w;
                            uint _3033 = (_3015 * 40u) + 4u;
                            _3046 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3033)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 3u)).x));
                            uint _3048 = (_3015 * 40u) + 8u;
                            _3058 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3048)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 2u)).x));
                            uint _3061 = (_3015 * 40u) + 16u;
                            _3074 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3061)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 3u)).x));
                            uint _3077 = (_3015 * 40u) + 20u;
                            _3090 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3077)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 3u)).x));
                            uint _3093 = (_3015 * 40u) + 24u;
                            vec4 _3106 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3093)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 3u)).x));
                            uint _3112 = (_3015 * 40u) + 28u;
                            vec4 _3125 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3112)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 3u)).x));
                            _3137 = fma(_2312, _3125.z, fma(_2311, _3125.y, _3125.x * _2310)) + _3125.w;
                            _3138 = !((fma(_2312, _3106.z, fma(_2311, _3106.y, _3106.x * _2310)) + _3106.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3138)
                            {
                                float _3165 = _3030.x - _2310;
                                float _3166 = _3030.y - _2311;
                                float _3167 = _3030.z - _2312;
                                float _3168 = dot(vec3(_3165, _3166, _3167), vec3(_3165, _3166, _3167));
                                float _3171 = inversesqrt(_3168);
                                float _3172 = _3171 * _3165;
                                float _3173 = _3171 * _3166;
                                float _3174 = _3171 * _3167;
                                float _3178 = 1.0 - (_3168 / (_3031 * _3031));
                                float _4274 = isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : max(_3178, 0.0));
                                float _3179 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
                                float _3183 = sqrt(_3168) * _3046.w;
                                float _3185 = 1.39999997615814208984375 / (_3183 + 1.39999997615814208984375);
                                float _3186 = _3185 * _3185;
                                float _3189 = ((1.0 - _3186) * dot(vec3(_3172, _3173, _3174), vec3(_537, _540, _543))) + _3186;
                                float _3192 = _3183 * _3183;
                                float _3196 = (fma(_2312, _3074.z, fma(_2311, _3074.y, _3074.x * _2310)) + _3074.w) / _3137;
                                float _3197 = (fma(_2312, _3090.z, fma(_2311, _3090.y, _3090.x * _2310)) + _3090.w) / _3137;
                                float _3201 = 1.0 - dot(vec2(_3196, _3197), vec2(_3196, _3197));
                                float _4290 = isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0));
                                float _3202 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
                                float _3203 = _3202 * (((isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : max(_3189, 0.0))) * _3179) / ((_3192 * 0.699999988079071044921875) + 1.0));
                                float _3215 = exp2(log2(1.0 / ((_3192 * 3.5) + 5.0)) * 0.25);
                                float _3216 = 1.0 - _613;
                                float _3223 = sqrt(1.0 - ((1.0 - (_3216 * _3216)) * (1.0 - (_3215 * _3215))));
                                float _3224 = _3223 * _3223;
                                float _3225 = _3224 * _3224;
                                float _3226 = _3172 - _2642;
                                float _3227 = _3173 - _2643;
                                float _3228 = _3174 - _2644;
                                float _3232 = inversesqrt(dot(vec3(_3226, _3227, _3228), vec3(_3226, _3227, _3228)));
                                float _3236 = dot(vec3(_537, _540, _543), vec3((-0.0) - _2642, (-0.0) - _2643, (-0.0) - _2644));
                                float _4301 = isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0));
                                float _3239 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
                                float _3240 = dot(vec3(_537, _540, _543), vec3(_3232 * _3226, _3232 * _3227, _3232 * _3228));
                                float _4312 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0));
                                float _3243 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
                                float _3247 = ((_3243 * _3243) * (_3225 + (-1.0))) + 1.0;
                                float _3248 = _3185 * _3224;
                                float _3249 = _3248 * _3248;
                                float _3255 = ((1.0 - _3249) * dot(vec3(_537, _540, _543), vec3(_3172, _3173, _3174))) + _3249;
                                float _4323 = isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : max(_3255, 0.0));
                                float _3256 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
                                float _3257 = 1.0 - _3224;
                                float _3267 = (0.5 / (((_3256 * ((_3239 * _3257) + _3224)) + 9.9999999392252902907785028219223e-09) + (((_3256 * _3257) + _3224) * _3239))) * _3256;
                                float _4334 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0));
                                float _3277 = (_3202 * _3179) * (((_3225 * 3.1415927410125732421875) * (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0)))) / ((_3247 * _3247) * ((_3192 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3203 * _3046.z;
                                frontier_phi_85_pred_1 = _3203 * _3046.y;
                                frontier_phi_85_pred_2 = _3203 * _3046.x;
                                frontier_phi_85_pred_3 = _3277 * _3058.z;
                                frontier_phi_85_pred_4 = _3277 * _3058.y;
                                frontier_phi_85_pred_5 = _3277 * _3058.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3286 = frontier_phi_85_pred;
                            _3285 = frontier_phi_85_pred_1;
                            _3284 = frontier_phi_85_pred_2;
                            _3283 = frontier_phi_85_pred_3;
                            _3282 = frontier_phi_85_pred_4;
                            _3281 = frontier_phi_85_pred_5;
                            _2988 = _3284 + _3001;
                            _2989 = _3285 + _3002;
                            _2990 = _3286 + _3003;
                            _2985 = _3281 + _2998;
                            _2986 = _3282 + _2999;
                            _2987 = _3283 + _3000;
                            if (_3005 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2998 = _2985;
                                _2999 = _2986;
                                _3000 = _2987;
                                _3001 = _2988;
                                _3002 = _2989;
                                _3003 = _2990;
                                _3004 = _3005;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2990;
                        frontier_phi_79_pred_1 = _2989;
                        frontier_phi_79_pred_2 = _2988;
                        frontier_phi_79_pred_3 = _2987;
                        frontier_phi_79_pred_4 = _2986;
                        frontier_phi_79_pred_5 = _2985;
                    }
                    _2627 = frontier_phi_79_pred;
                    _2625 = frontier_phi_79_pred_1;
                    _2623 = frontier_phi_79_pred_2;
                    _2621 = frontier_phi_79_pred_3;
                    _2619 = frontier_phi_79_pred_4;
                    _2617 = frontier_phi_79_pred_5;
                    uint _2783 = _2782 + 1u;
                    if (_2783 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2776 = _2617;
                        _2777 = _2619;
                        _2778 = _2621;
                        _2779 = _2623;
                        _2780 = _2625;
                        _2781 = _2627;
                        _2782 = _2783;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2623;
                frontier_phi_60_61_ladder_1 = _2627;
                frontier_phi_60_61_ladder_2 = _2625;
                frontier_phi_60_61_ladder_3 = _2621;
                frontier_phi_60_61_ladder_4 = _2619;
                frontier_phi_60_61_ladder_5 = _2617;
            }
            else
            {
                frontier_phi_60_61_ladder = _2493;
                frontier_phi_60_61_ladder_1 = _2497;
                frontier_phi_60_61_ladder_2 = _2495;
                frontier_phi_60_61_ladder_3 = _2491;
                frontier_phi_60_61_ladder_4 = _2489;
                frontier_phi_60_61_ladder_5 = _2487;
            }
            _2616 = frontier_phi_60_61_ladder_5;
            _2618 = frontier_phi_60_61_ladder_4;
            _2620 = frontier_phi_60_61_ladder_3;
            _2622 = frontier_phi_60_61_ladder;
            _2624 = frontier_phi_60_61_ladder_2;
            _2626 = frontier_phi_60_61_ladder_1;
        }
        float _2631 = isnan(1.0) ? _597 : (isnan(_597) ? 1.0 : min(_597, 1.0));
        _2368 = (_2631 * _2622) + _1805;
        _2370 = (_2631 * _2624) + _1807;
        _2372 = (_2631 * _2626) + _1809;
        _2374 = ((_2616 * _582) * _2631) + _2150;
        _2376 = ((_2618 * _584) * _2631) + _2152;
        _2378 = ((_2620 * _585) * _2631) + _2154;
    }
    else
    {
        _2368 = _1805;
        _2370 = _1807;
        _2372 = _1809;
        _2374 = _2150;
        _2376 = _2152;
        _2378 = _2154;
    }
    uint _2384 = _558 + uint(cbMatDynParam._m0[0u].w);
    float _2390 = (cbMatDynParam._m0[17u].y * _285) * cbInstanceData._m0[_2384].x;
    float _2391 = (cbMatDynParam._m0[17u].y * _286) * cbInstanceData._m0[_2384].y;
    float _2392 = (cbMatDynParam._m0[17u].y * _287) * cbInstanceData._m0[_2384].z;
    float _4350 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _4361 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _4372 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _4383 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _2410 = (((isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * (_2368 + ((isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0))) * _597))) + ((_2374 + ((isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0))) * _1439)) * cbPerFrame._m0[3u].x)) + _2390;
    float _2412 = (_2391 + ((_2376 + ((isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0))) * _1439)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0))) * (_2370 + ((isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0))) * _597)));
    float _2414 = (_2392 + ((_2378 + ((isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0))) * _1439)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0))) * (_2372 + ((isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0))) * _597)));
    float _2415 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
    float _2416 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
    float _2417 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
    float _2423 = cbMtdParam._m0[2u].x * _2390;
    float _2424 = cbMtdParam._m0[2u].y * _2391;
    float _2425 = cbMtdParam._m0[2u].z * _2392;
    float _4409 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2427 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
    float _2432 = cbInstanceData._m0[_556 + 6u].w * (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0)));
    float _2437 = _517 / cbSceneParam._m0[86u].x;
    float _2438 = _518 / cbSceneParam._m0[86u].y;
    vec4 _2452 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2437, _2438, (log2((isnan(cbSceneParam._m0[77u].w) ? _438 : (isnan(_438) ? cbSceneParam._m0[77u].w : min(_438, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2454 = _2452.x;
    float _2455 = _2452.y;
    float _2456 = _2452.z;
    float _2457 = _2452.w;
    float _2549;
    float _2551;
    float _2553;
    float _2555;
    if (_438 > cbSceneParam._m0[78u].w)
    {
        float _2512 = isnan(_438) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _438 : min(cbSceneParam._m0[80u].w, _438));
        float _2513 = _2512 / _438;
        float _2524 = _2513 * _490;
        float _2525 = _491 * _2513;
        float _2526 = (-0.0) - _2525;
        float _2527 = _2513 * _492;
        float _2529 = (cbSceneParam._m0[77u].w * _2526) / _2512;
        float _2530 = _2529 + cbSceneParam._m0[79u].w;
        float _2531 = cbSceneParam._m0[79u].w - _2525;
        float _2537 = sqrt(((_2524 * _2524) + (_2525 * _2525)) + (_2527 * _2527));
        float _2540 = (1.0 - (cbSceneParam._m0[77u].w / _2512)) * _2537;
        float _2545 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2547 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2733;
        if (abs((_2526 - _2529) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2733 = ((((_2530 > 0.0) ? exp2(_2545 * _2530) : (2.0 - exp2(_2547 * _2530))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2540;
        }
        else
        {
            float _2677 = 1.0 / cbSceneParam._m0[80u].x;
            float _2678 = isnan(_2531) ? _2530 : (isnan(_2530) ? _2531 : max(_2530, _2531));
            float _2679 = isnan(_2531) ? _2530 : (isnan(_2530) ? _2531 : min(_2530, _2531));
            float _2688 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : min(_2678, 0.0));
            float _2689 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : min(_2679, 0.0));
            _2733 = ((abs(_2537 / _2526) * cbSceneParam._m0[80u].y) * ((((_2688 - _2689) * 2.0) - ((exp2(_2545 * (isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0)))) - exp2(_2545 * (isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0))))) * _2677)) - ((exp2(_2547 * _2688) - exp2(_2547 * _2689)) * _2677))) + (_2540 * cbSceneParam._m0[80u].z);
        }
        vec4 _2735 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2437, _2438, 1.0), 0.0);
        float _2744 = exp2((_2733 * (-1.44269502162933349609375)) * (1.0 - _2735.w));
        float _2745 = log2(_2744);
        float _2761 = log2(_2457);
        _2549 = (exp2(_2761 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2745 * cbSceneParam._m0[78u].x)) * _2735.x) / cbSceneParam._m0[78u].x)) + _2454;
        _2551 = (exp2(_2761 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2745 * cbSceneParam._m0[78u].y)) * _2735.y) / cbSceneParam._m0[78u].y)) + _2455;
        _2553 = (exp2(_2761 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2745 * cbSceneParam._m0[78u].z)) * _2735.z) / cbSceneParam._m0[78u].z)) + _2456;
        _2555 = _2744 * _2457;
    }
    else
    {
        _2549 = _2454;
        _2551 = _2455;
        _2553 = _2456;
        _2555 = _2457;
    }
    bool _2771;
    vec4 _2565;
    vec4 _2587;
    float _2589;
    float _2593;
    float _2594;
    float _2595;
    float _2598;
    float _2601;
    float _2604;
    float _2605;
    bool _2615;
    for (;;)
    {
        _2565 = cbMatDynParam._m0[0u];
        float _2567 = roundEven(_2565.y);
        bool _2568 = _2567 == 3.0;
        float _2569 = log2(_2555);
        float _2573 = exp2(_2569 * cbSceneParam._m0[78u].x);
        float _2574 = exp2(_2569 * cbSceneParam._m0[78u].y);
        float _2575 = exp2(_2569 * cbSceneParam._m0[78u].z);
        float _2576 = _2573 * _2415;
        float _2577 = _2574 * _2416;
        float _2578 = _2575 * _2417;
        float _2585 = _506 + (-0.5);
        _2587 = cbMtdParam._m0[1u];
        _2589 = _2587.y * _2585;
        float _2592 = (_2567 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2593 = _2592 * (_2568 ? _2576 : (_2576 + (cbSceneParam._m0[72u].w * _2549)));
        _2594 = _2592 * (_2568 ? _2577 : (_2577 + (cbSceneParam._m0[72u].w * _2551)));
        _2595 = _2592 * (_2568 ? _2578 : (_2578 + (cbSceneParam._m0[72u].w * _2553)));
        _2598 = ((_2423 * _2427) * _2573) * _2592;
        _2601 = ((_2424 * _2427) * _2574) * _2592;
        _2604 = ((_2425 * _2427) * _2575) * _2592;
        _2605 = _2585 * 0.999000012874603271484375;
        _2615 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2615)
        {
            if ((cbInstanceData._m0[_556 + 7u].x + _2605) < 0.5)
            {
                _2771 = true;
                break;
            }
        }
        uint _2712 = _558 + uint(_2565.w);
        if ((cbInstanceData._m0[_2712].w < 1.0) && ((cbInstanceData._m0[_2712].w + _2605) < 0.5))
        {
            _2771 = true;
            break;
        }
        if ((_2589 + _247) < _2587.x)
        {
            _2771 = true;
            break;
        }
        _2771 = false;
        break;
    }
    float _2976;
    if (_2771)
    {
        discard_state = true;
        _2976 = 0.0;
    }
    else
    {
        _2976 = _2432;
    }
    SV_Target.x = _2593;
    SV_Target.y = _2594;
    SV_Target.z = _2595;
    SV_Target.w = _2976;
    SV_Target_1.x = _2598;
    SV_Target_1.y = _2601;
    SV_Target_1.z = _2604;
    SV_Target_1.w = _2432;
    discard_exit();
}


