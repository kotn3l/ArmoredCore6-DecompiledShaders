#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[18];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_Damege_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_Damege_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_Damege_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D C_AMSN_Damege_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D C_AMSN_Damege_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D C_AMSN_Damege_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_Damege_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _960;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _199 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _206 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _207 = _206 * NORMAL.x;
    float _208 = _206 * NORMAL.y;
    float _209 = _206 * NORMAL.z;
    float _213 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _221;
    float _222;
    float _223;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _221 = (-0.0) - _207;
        _222 = (-0.0) - _208;
        _223 = (-0.0) - _209;
    }
    else
    {
        _221 = _207;
        _222 = _208;
        _223 = _209;
    }
    vec4 _241 = texture(sampler2D(C_AMSN_Damege_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _244 = _241.x;
    float _245 = _241.y;
    float _246 = _241.z;
    float _247 = _241.w;
    vec4 _259 = texture(sampler2D(C_AMSN_Damege_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _264 = _259.w;
    float _270 = (((cbMatDynParam._m0[17u].x * 10.0) + (-1.0)) + _264) * _264;
    vec4 _283 = texture(sampler2D(C_AMSN_Damege_snp_0_Texture2D_7, SS_ClampLinear), vec2((_270 * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (_270 * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _285 = _283.x;
    float _286 = _283.y;
    float _287 = _283.z;
    float _294 = ((_285 - _244) * cbMatDynParam._m0[17u].x) + _244;
    float _295 = ((_286 - _245) * cbMatDynParam._m0[17u].x) + _245;
    float _296 = ((_287 - _246) * cbMatDynParam._m0[17u].x) + _246;
    float _303 = ((_259.x - _294) * cbMatDynParam._m0[17u].x) + _294;
    float _304 = ((_259.y - _295) * cbMatDynParam._m0[17u].x) + _295;
    float _305 = ((_259.z - _296) * cbMatDynParam._m0[17u].x) + _296;
    vec4 _321 = texture(sampler2D(C_AMSN_Damege_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _323 = _321.x;
    vec4 _337 = texture(sampler2D(C_AMSN_Damege_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _342 = (_323 + cbMtdParam._m0[9u].x) + ((_337.x - _323) * cbMatDynParam._m0[17u].x);
    vec4 _354 = texture(sampler2D(C_AMSN_Damege_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _356 = _354.x;
    float _357 = _354.y;
    float _358 = _354.z;
    vec4 _371 = texture(sampler2D(C_AMSN_Damege_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _384 = ((_371.z - _358) * cbMatDynParam._m0[17u].x) + _358;
    float _388 = ((((_371.x - _356) * cbMatDynParam._m0[17u].x) + _356) * 2.0) + (-1.0);
    float _389 = ((((_371.y - _357) * cbMatDynParam._m0[17u].x) + _357) * 2.0) + (-1.0);
    float _390 = dot(vec2(_388, _389), vec2(_388, _389));
    float _3618 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _396 = sqrt(1.0 - (isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0))));
    float _403 = fma(_396, _221, fma(_389, _213 * TANGENT.x, (_199 * _192) * _388));
    float _406 = fma(_396, _222, fma(_389, _213 * TANGENT.y, (_199 * _193) * _388));
    float _409 = fma(_396, _223, fma(_389, _213 * TANGENT.z, (_199 * _194) * _388));
    float _413 = inversesqrt(dot(vec3(_403, _406, _409), vec3(_403, _406, _409)));
    float _414 = _413 * _403;
    float _415 = _413 * _406;
    float _416 = _413 * _409;
    float _3629 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _417 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
    float _3640 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _418 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
    float _3651 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _3662 = isnan(0.0) ? _304 : (isnan(_304) ? 0.0 : max(_304, 0.0));
    float _3673 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _3684 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _422 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
    float _438 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _480 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _490 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _480);
    float _491 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _480);
    float _492 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _480);
    float _496 = inversesqrt(dot(vec3(_490, _491, _492), vec3(_490, _491, _492)));
    float _497 = _490 * _496;
    float _498 = _491 * _496;
    float _499 = _492 * _496;
    float _505 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _506 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _525 = fma(_416, cbSceneParam._m0[5u].z, fma(_415, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _414));
    float _528 = fma(_416, cbSceneParam._m0[6u].z, fma(_415, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _414));
    float _531 = fma(_416, cbSceneParam._m0[7u].z, fma(_415, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _414));
    uint _544 = uint(roundEven(NORMAL.w)) * 13u;
    uint _546 = _544 + 9u;
    uint _547 = _546 + uint(cbMatDynParam._m0[0u].w);
    float _553 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0)))) * cbInstanceData._m0[_547].x;
    float _554 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0)))) * cbInstanceData._m0[_547].y;
    float _555 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0)))) * cbInstanceData._m0[_547].z;
    float _3695 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _556 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
    float _3706 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _557 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
    float _3717 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _558 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
    float _559 = 1.0 - _422;
    float _560 = _556 * _559;
    float _561 = _557 * _559;
    float _562 = _558 * _559;
    float _567 = (_556 + (-0.039999999105930328369140625)) * _422;
    float _568 = (_557 + (-0.039999999105930328369140625)) * _422;
    float _569 = (_558 + (-0.039999999105930328369140625)) * _422;
    float _570 = _567 + 0.039999999105930328369140625;
    float _572 = _568 + 0.039999999105930328369140625;
    float _573 = _569 + 0.039999999105930328369140625;
    vec4 _582 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _505, cbSceneParam._m0[86u].y * _506));
    float _585 = _582.x * TEXCOORD.z;
    float _586 = dot(vec3(_414, _415, _416), vec3(_497, _498, _499));
    float _589 = _586 * 2.0;
    float _593 = (_589 * _414) - _497;
    float _594 = (_589 * _415) - _498;
    float _595 = (_589 * _416) - _499;
    float _599 = abs(dot(vec3(_497, _498, _499), vec3(_414, _415, _416)));
    float _3728 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _601 = sqrt(_418);
    float _614 = exp2((_601 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_601 * 3.0));
    float _620 = (1.0 - _614) * ((_601 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _621 = _614 * _601;
    float _649 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _653 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _657 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _959;
    float _961;
    float _962;
    float _963;
    float _964;
    float _965;
    float _966;
    float _967;
    float _968;
    float _969;
    float _970;
    float _971;
    float _972;
    float _973;
    float _974;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _684 = fma(_657, cbModelParam._m0[26u].z, fma(_653, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _649));
        float _688 = fma(_657, cbModelParam._m0[27u].z, fma(_653, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _649));
        float _692 = fma(_657, cbModelParam._m0[28u].z, fma(_653, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _649));
        float _717 = _649 + _414;
        float _718 = _653 + _415;
        float _719 = _657 + _416;
        float _729 = fma(_719, cbModelParam._m0[26u].z, fma(_718, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _717)) - _684;
        float _730 = fma(_719, cbModelParam._m0[27u].z, fma(_718, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _717)) - _688;
        float _731 = fma(_719, cbModelParam._m0[28u].z, fma(_718, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _717)) - _692;
        float _735 = inversesqrt(dot(vec3(_729, _730, _731), vec3(_729, _730, _731)));
        float _748 = ((_735 * _729) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_684 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _749 = ((_735 * _730) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_688 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _750 = ((_735 * _731) / cbModelParam._m0[34u].z) + ((((((_692 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _753 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_748, _749, _750), 0.0);
        vec4 _760 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_748, _749, _750), 0.0);
        vec4 _767 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_748, _749, _750), 0.0);
        vec4 _774 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_748, _749, _750), 0.0);
        float _787 = exp2((_753.w + (-0.5)) * 20.0) * 2.0;
        float _788 = _787 * (_753.x + (-0.5));
        float _789 = _787 * (_753.y + (-0.5));
        float _790 = _787 * (_753.z + (-0.5));
        float _797 = exp2((_760.w + (-0.5)) * 20.0) * 2.0;
        float _798 = _797 * (_760.x + (-0.5));
        float _799 = _797 * (_760.y + (-0.5));
        float _800 = _797 * (_760.z + (-0.5));
        float _807 = exp2((_767.w + (-0.5)) * 20.0) * 2.0;
        float _808 = _807 * (_767.x + (-0.5));
        float _809 = _807 * (_767.y + (-0.5));
        float _810 = _807 * (_767.z + (-0.5));
        float _817 = exp2((_774.w + (-0.5)) * 20.0) * 2.0;
        float _818 = _817 * (_774.x + (-0.5));
        float _819 = _817 * (_774.y + (-0.5));
        float _820 = _817 * (_774.z + (-0.5));
        float _821 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
        float _822 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
        float _823 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
        float _824 = _788 * 0.5;
        float _825 = _798 * 0.5;
        float _826 = _808 * 0.5;
        float _827 = dot(vec3(_824, _825, _826), vec3(_824, _825, _826));
        float _832 = (_827 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_827);
        float _841 = (dot(vec3(_414, _415, _416), vec3(_832 * _824, _832 * _825, _832 * _826)) + 1.0) * 0.5;
        float _3754 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
        float _851 = sqrt(((_825 * _825) + (_824 * _824)) + (_826 * _826)) / (_821 + 9.9999997473787516355514526367188e-06);
        float _3765 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
        float _852 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
        float _853 = _852 * 2.0;
        float _857 = (1.0 - _852) / (_852 + 1.0);
        float _3776 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        float _858 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _867 = ((((1.0 - _858) * (_853 + 2.0)) * exp2(log2(isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0))) * (_853 + 1.0))) + _858) * _821;
        float _868 = _789 * 0.5;
        float _869 = _799 * 0.5;
        float _870 = _809 * 0.5;
        float _871 = dot(vec3(_868, _869, _870), vec3(_868, _869, _870));
        float _876 = (_871 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_871);
        float _884 = (dot(vec3(_414, _415, _416), vec3(_876 * _868, _876 * _869, _876 * _870)) + 1.0) * 0.5;
        float _3787 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _893 = sqrt(((_869 * _869) + (_868 * _868)) + (_870 * _870)) / (_822 + 9.9999997473787516355514526367188e-06);
        float _3798 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _894 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
        float _895 = _894 * 2.0;
        float _899 = (1.0 - _894) / (_894 + 1.0);
        float _3809 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _900 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
        float _909 = ((((1.0 - _900) * (_895 + 2.0)) * exp2(log2(isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0))) * (_895 + 1.0))) + _900) * _822;
        float _910 = _790 * 0.5;
        float _911 = _800 * 0.5;
        float _912 = _810 * 0.5;
        float _913 = dot(vec3(_910, _911, _912), vec3(_910, _911, _912));
        float _918 = (_913 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_913);
        float _926 = (dot(vec3(_414, _415, _416), vec3(_918 * _910, _918 * _911, _918 * _912)) + 1.0) * 0.5;
        float _3820 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _935 = sqrt(((_911 * _911) + (_910 * _910)) + (_912 * _912)) / (_823 + 9.9999997473787516355514526367188e-06);
        float _3831 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _936 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
        float _937 = _936 * 2.0;
        float _941 = (1.0 - _936) / (_936 + 1.0);
        float _3842 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _942 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _951 = ((((1.0 - _942) * (_937 + 2.0)) * exp2(log2(isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) * (_937 + 1.0))) + _942) * _823;
        _959 = _790;
        _961 = _789;
        _962 = _788;
        _963 = _800;
        _964 = _799;
        _965 = _798;
        _966 = _810;
        _967 = _809;
        _968 = _808;
        _969 = _823;
        _970 = _822;
        _971 = _821;
        _972 = cbModelParam._m0[36u].z * (isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0)));
        _973 = cbModelParam._m0[36u].z * (isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0)));
        _974 = cbModelParam._m0[36u].z * (isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0)));
    }
    else
    {
        _959 = _960;
        _961 = _960;
        _962 = _960;
        _963 = _960;
        _964 = _960;
        _965 = _960;
        _966 = _960;
        _967 = _960;
        _968 = _960;
        _969 = _960;
        _970 = _960;
        _971 = _960;
        _972 = 0.0;
        _973 = 0.0;
        _974 = 0.0;
    }
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1000 = fma(_657, cbModelParam._m0[30u].z, fma(_653, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _649));
        float _1004 = fma(_657, cbModelParam._m0[31u].z, fma(_653, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _649));
        float _1008 = fma(_657, cbModelParam._m0[32u].z, fma(_653, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _649));
        float _1031 = _649 + _414;
        float _1032 = _653 + _415;
        float _1033 = _657 + _416;
        float _1043 = fma(_1033, cbModelParam._m0[30u].z, fma(_1032, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1031)) - _1000;
        float _1044 = fma(_1033, cbModelParam._m0[31u].z, fma(_1032, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1031)) - _1004;
        float _1045 = fma(_1033, cbModelParam._m0[32u].z, fma(_1032, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1031)) - _1008;
        float _1049 = inversesqrt(dot(vec3(_1043, _1044, _1045), vec3(_1043, _1044, _1045)));
        float _1062 = ((_1049 * _1043) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1000 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1063 = ((_1049 * _1044) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1004 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1064 = ((_1049 * _1045) / cbModelParam._m0[35u].z) + ((((((_1008 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1066 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1062, _1063, _1064), 0.0);
        vec4 _1073 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1062, _1063, _1064), 0.0);
        vec4 _1080 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1062, _1063, _1064), 0.0);
        vec4 _1087 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1062, _1063, _1064), 0.0);
        float _1099 = exp2((_1066.w + (-0.5)) * 20.0) * 2.0;
        float _1100 = _1099 * (_1066.x + (-0.5));
        float _1101 = _1099 * (_1066.y + (-0.5));
        float _1102 = _1099 * (_1066.z + (-0.5));
        float _1109 = exp2((_1073.w + (-0.5)) * 20.0) * 2.0;
        float _1110 = _1109 * (_1073.x + (-0.5));
        float _1111 = _1109 * (_1073.y + (-0.5));
        float _1112 = _1109 * (_1073.z + (-0.5));
        float _1119 = exp2((_1080.w + (-0.5)) * 20.0) * 2.0;
        float _1120 = _1119 * (_1080.x + (-0.5));
        float _1121 = _1119 * (_1080.y + (-0.5));
        float _1122 = _1119 * (_1080.z + (-0.5));
        float _1129 = exp2((_1087.w + (-0.5)) * 20.0) * 2.0;
        float _1130 = _1129 * (_1087.x + (-0.5));
        float _1131 = _1129 * (_1087.y + (-0.5));
        float _1132 = _1129 * (_1087.z + (-0.5));
        float _1133 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1134 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1135 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1136 = _1100 * 0.5;
        float _1137 = _1110 * 0.5;
        float _1138 = _1120 * 0.5;
        float _1139 = dot(vec3(_1136, _1137, _1138), vec3(_1136, _1137, _1138));
        float _1144 = (_1139 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1139);
        float _1152 = (dot(vec3(_414, _415, _416), vec3(_1144 * _1136, _1144 * _1137, _1144 * _1138)) + 1.0) * 0.5;
        float _3883 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1161 = sqrt(((_1137 * _1137) + (_1136 * _1136)) + (_1138 * _1138)) / (_1133 + 9.9999997473787516355514526367188e-06);
        float _3894 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1163 = _1162 * 2.0;
        float _1167 = (1.0 - _1162) / (_1162 + 1.0);
        float _3905 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1177 = ((((1.0 - _1168) * (_1163 + 2.0)) * exp2(log2(isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))) * (_1163 + 1.0))) + _1168) * _1133;
        float _1178 = _1101 * 0.5;
        float _1179 = _1111 * 0.5;
        float _1180 = _1121 * 0.5;
        float _1181 = dot(vec3(_1178, _1179, _1180), vec3(_1178, _1179, _1180));
        float _1186 = (_1181 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1181);
        float _1194 = (dot(vec3(_414, _415, _416), vec3(_1186 * _1178, _1186 * _1179, _1186 * _1180)) + 1.0) * 0.5;
        float _3916 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1203 = sqrt(((_1179 * _1179) + (_1178 * _1178)) + (_1180 * _1180)) / (_1134 + 9.9999997473787516355514526367188e-06);
        float _3927 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1205 = _1204 * 2.0;
        float _1209 = (1.0 - _1204) / (_1204 + 1.0);
        float _3938 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1210 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1219 = ((((1.0 - _1210) * (_1205 + 2.0)) * exp2(log2(isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))) * (_1205 + 1.0))) + _1210) * _1134;
        float _1220 = _1102 * 0.5;
        float _1221 = _1112 * 0.5;
        float _1222 = _1122 * 0.5;
        float _1223 = dot(vec3(_1220, _1221, _1222), vec3(_1220, _1221, _1222));
        float _1228 = (_1223 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1223);
        float _1236 = (dot(vec3(_414, _415, _416), vec3(_1228 * _1220, _1228 * _1221, _1228 * _1222)) + 1.0) * 0.5;
        float _3949 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1245 = sqrt(((_1221 * _1221) + (_1220 * _1220)) + (_1222 * _1222)) / (_1135 + 9.9999997473787516355514526367188e-06);
        float _3960 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1247 = _1246 * 2.0;
        float _1251 = (1.0 - _1246) / (_1246 + 1.0);
        float _3971 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _1261 = ((((1.0 - _1252) * (_1247 + 2.0)) * exp2(log2(isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))) * (_1247 + 1.0))) + _1252) * _1135;
        _1269 = _1102;
        _1270 = _1101;
        _1271 = _1100;
        _1272 = _1112;
        _1273 = _1111;
        _1274 = _1110;
        _1275 = _1122;
        _1276 = _1121;
        _1277 = _1120;
        _1278 = _1135;
        _1279 = _1134;
        _1280 = _1133;
        _1281 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0)));
        _1282 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0)));
        _1283 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0)));
    }
    else
    {
        _1269 = _960;
        _1270 = _960;
        _1271 = _960;
        _1272 = _960;
        _1273 = _960;
        _1274 = _960;
        _1275 = _960;
        _1276 = _960;
        _1277 = _960;
        _1278 = _960;
        _1279 = _960;
        _1280 = _960;
        _1281 = 0.0;
        _1282 = 0.0;
        _1283 = 0.0;
    }
    float _1293 = (cbModelParam._m0[1u].x * (_1281 - _972)) + _972;
    float _1294 = (cbModelParam._m0[1u].x * (_1282 - _973)) + _973;
    float _1295 = (cbModelParam._m0[1u].x * (_1283 - _974)) + _974;
    float _1316 = fma(_1295, cbSceneParam._m0[89u].z, fma(_1294, cbSceneParam._m0[89u].y, _1293 * cbSceneParam._m0[89u].x));
    float _1319 = fma(_1295, cbSceneParam._m0[90u].z, fma(_1294, cbSceneParam._m0[90u].y, _1293 * cbSceneParam._m0[90u].x));
    float _1322 = fma(_1295, cbSceneParam._m0[91u].z, fma(_1294, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1293));
    float _1337 = _593 * 0.5;
    float _1338 = _594 * 0.5;
    float _1339 = _595 * 0.5;
    float _1340 = dot(vec4(_1337, _1338, _1339, 1.0), vec4(_1271, _1274, _1277, _1280));
    float _1343 = dot(vec4(_1337, _1338, _1339, 1.0), vec4(_1270, _1273, _1276, _1279));
    float _1346 = dot(vec4(_1337, _1338, _1339, 1.0), vec4(_1269, _1272, _1275, _1278));
    float _1380;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1353 = dot(vec4(_1337, _1338, _1339, 1.0), vec4(_959, _963, _966, _969));
        float _1357 = dot(vec4(_1337, _1338, _1339, 1.0), vec4(_961, _964, _967, _970));
        float _1361 = dot(vec4(_1337, _1338, _1339, 1.0), vec4(_962, _965, _968, _971));
        float _1368 = dot(vec4(cbModelParam._m0[39u]), vec4(_1337, _1338, _1339, 1.0));
        _1380 = dot(vec3(isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0)), isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0)), isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1368) ? 0.0 : (isnan(0.0) ? _1368 : max(0.0, _1368))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1380 = 1.0;
    }
    float _1391;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1382 = dot(vec4(cbModelParam._m0[40u]), vec4(_1337, _1338, _1339, 1.0));
        _1391 = dot(vec3(isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0)), isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0)), isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1382) ? 0.0 : (isnan(0.0) ? _1382 : max(0.0, _1382))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1391 = 1.0;
    }
    float _1395 = (_1391 * cbModelParam._m0[1u].x) + (_1380 * (1.0 - cbModelParam._m0[1u].x));
    float _1405 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _418);
    float _1406 = isnan(_1405) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1405 : min(cbModelParam._m0[25u].z, _1405));
    float _1488;
    float _1490;
    float _1492;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1455 = fma(_657, cbModelParam._m0[13u].z, fma(_653, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _649)) + cbModelParam._m0[13u].w;
        float _1459 = fma(_657, cbModelParam._m0[14u].z, fma(_653, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _649)) + cbModelParam._m0[14u].w;
        float _1463 = fma(_657, cbModelParam._m0[15u].z, fma(_653, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _649)) + cbModelParam._m0[15u].w;
        float _1466 = fma(_595, cbModelParam._m0[13u].z, fma(_594, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _593));
        float _1469 = fma(_595, cbModelParam._m0[14u].z, fma(_594, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _593));
        float _1472 = fma(_595, cbModelParam._m0[15u].z, fma(_594, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _593));
        float _1500;
        if (_1466 > 0.0)
        {
            _1500 = abs((1.0 - _1455) / _1466);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1466 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1455 + 1.0) / _1466);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1500 = frontier_phi_16_14_ladder;
        }
        float _1675;
        if (_1469 > 0.0)
        {
            _1675 = abs((1.0 - _1459) / _1469);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1469 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1459 + 1.0) / _1469);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1675 = frontier_phi_25_21_ladder;
        }
        float _1970;
        if (_1472 > 0.0)
        {
            _1970 = abs((1.0 - _1463) / _1472);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1472 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1463 + 1.0) / _1472);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1970 = frontier_phi_37_32_ladder;
        }
        float _1972 = isnan(_1675) ? _1500 : (isnan(_1500) ? _1675 : min(_1500, _1675));
        float _1973 = isnan(_1970) ? _1972 : (isnan(_1972) ? _1970 : min(_1972, _1970));
        float _1977 = (_1973 * _1466) + _1455;
        float _1978 = (_1973 * _1469) + _1459;
        float _1979 = (_1973 * _1472) + _1463;
        float _1980 = _1973 * 9.9999997473787516355514526367188e-05;
        float _1982 = (-1.0) - _1980;
        float _1984 = _1980 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1979 > _1984) || ((_1979 < _1982) || ((_1978 > _1984) || ((_1978 < _1982) || ((_1977 < _1982) || (_1977 > _1984))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2124 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1979, cbModelParam._m0[9u].z, fma(_1978, cbModelParam._m0[9u].y, _1977 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1979, cbModelParam._m0[10u].z, fma(_1978, cbModelParam._m0[10u].y, _1977 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1979, cbModelParam._m0[11u].z, fma(_1978, cbModelParam._m0[11u].y, _1977 * cbModelParam._m0[11u].x))), _1406);
            frontier_phi_15_37_ladder = _2124.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2124.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2124.z * cbModelParam._m0[1u].y;
        }
        _1488 = frontier_phi_15_37_ladder_1;
        _1490 = frontier_phi_15_37_ladder;
        _1492 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1476 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_593, _594, _595), _1406);
        _1488 = _1476.x * cbModelParam._m0[1u].y;
        _1490 = _1476.y * cbModelParam._m0[1u].y;
        _1492 = _1476.z * cbModelParam._m0[1u].y;
    }
    float _1496 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _418);
    float _1497 = isnan(_1496) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1496 : min(cbModelParam._m0[25u].w, _1496));
    float _1589;
    float _1591;
    float _1593;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1553 = fma(_657, cbModelParam._m0[21u].z, fma(_653, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _649)) + cbModelParam._m0[21u].w;
        float _1557 = fma(_657, cbModelParam._m0[22u].z, fma(_653, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _649)) + cbModelParam._m0[22u].w;
        float _1561 = fma(_657, cbModelParam._m0[23u].z, fma(_653, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _649)) + cbModelParam._m0[23u].w;
        float _1564 = fma(_595, cbModelParam._m0[21u].z, fma(_594, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _593));
        float _1567 = fma(_595, cbModelParam._m0[22u].z, fma(_594, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _593));
        float _1570 = fma(_595, cbModelParam._m0[23u].z, fma(_594, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _593));
        float _1680;
        if (_1564 > 0.0)
        {
            _1680 = abs((1.0 - _1553) / _1564);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1564 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1553 + 1.0) / _1564);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1680 = frontier_phi_27_23_ladder;
        }
        float _1997;
        if (_1567 > 0.0)
        {
            _1997 = abs((1.0 - _1557) / _1567);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1567 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1557 + 1.0) / _1567);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1997 = frontier_phi_39_34_ladder;
        }
        float _2335;
        if (_1570 > 0.0)
        {
            _2335 = abs((1.0 - _1561) / _1570);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1570 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1561 + 1.0) / _1570);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2335 = frontier_phi_49_46_ladder;
        }
        float _2337 = isnan(_1997) ? _1680 : (isnan(_1680) ? _1997 : min(_1680, _1997));
        float _2338 = isnan(_2335) ? _2337 : (isnan(_2337) ? _2335 : min(_2337, _2335));
        float _2342 = (_2338 * _1564) + _1553;
        float _2343 = (_2338 * _1567) + _1557;
        float _2344 = (_2338 * _1570) + _1561;
        float _2345 = _2338 * 9.9999997473787516355514526367188e-05;
        float _2346 = (-1.0) - _2345;
        float _2348 = _2345 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2344 > _2348) || ((_2344 < _2346) || ((_2343 > _2348) || ((_2343 < _2346) || ((_2342 < _2346) || (_2342 > _2348))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2466 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2344, cbModelParam._m0[17u].z, fma(_2343, cbModelParam._m0[17u].y, _2342 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2344, cbModelParam._m0[18u].z, fma(_2343, cbModelParam._m0[18u].y, _2342 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2344, cbModelParam._m0[19u].z, fma(_2343, cbModelParam._m0[19u].y, _2342 * cbModelParam._m0[19u].x))), _1497);
            frontier_phi_24_49_ladder = _2466.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2466.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2466.x * cbModelParam._m0[1u].z;
        }
        _1589 = frontier_phi_24_49_ladder_2;
        _1591 = frontier_phi_24_49_ladder_1;
        _1593 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1573 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_593, _594, _595), _1497);
        _1589 = _1573.x * cbModelParam._m0[1u].z;
        _1591 = _1573.y * cbModelParam._m0[1u].z;
        _1593 = _1573.z * cbModelParam._m0[1u].z;
    }
    float _1606 = (((_620 * _570) + _621) * _585) * ((cbModelParam._m0[1u].w * (_1589 - _1488)) + _1488);
    float _1608 = (((_620 * _572) + _621) * _585) * ((cbModelParam._m0[1u].w * (_1591 - _1490)) + _1490);
    float _1610 = (((_620 * _573) + _621) * _585) * ((cbModelParam._m0[1u].w * (_1593 - _1492)) + _1492);
    float _1613 = fma(_1610, cbSceneParam._m0[89u].z, fma(_1608, cbSceneParam._m0[89u].y, _1606 * cbSceneParam._m0[89u].x));
    float _1616 = fma(_1610, cbSceneParam._m0[90u].z, fma(_1608, cbSceneParam._m0[90u].y, _1606 * cbSceneParam._m0[90u].x));
    float _1619 = fma(_1610, cbSceneParam._m0[91u].z, fma(_1608, cbSceneParam._m0[91u].y, _1606 * cbSceneParam._m0[91u].x));
    float _1654 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1658 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1662 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1666 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1667 = _1654 / _1666;
    float _1668 = _1658 / _1666;
    float _1669 = _1662 / _1666;
    float _1816;
    float _1817;
    float _1818;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1696 = ((uint(_1669 > cbSceneParam._m0[59u].y) + uint(_1669 > cbSceneParam._m0[59u].x)) + uint(_1669 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1697 = _1696 + 43u;
        uint _1705 = _1696 + 44u;
        uint _1713 = _1696 + 45u;
        uint _1721 = _1696 + 46u;
        float _1732 = fma(_1666, cbSceneParam._m0[_1697].w, fma(_1662, cbSceneParam._m0[_1697].z, fma(_1658, cbSceneParam._m0[_1697].y, _1654 * cbSceneParam._m0[_1697].x)));
        float _1736 = fma(_1666, cbSceneParam._m0[_1705].w, fma(_1662, cbSceneParam._m0[_1705].z, fma(_1658, cbSceneParam._m0[_1705].y, _1654 * cbSceneParam._m0[_1705].x)));
        float _1744 = fma(_1666, cbSceneParam._m0[_1721].w, fma(_1662, cbSceneParam._m0[_1721].z, fma(_1658, cbSceneParam._m0[_1721].y, _1654 * cbSceneParam._m0[_1721].x)));
        float _1749 = cbSceneParam._m0[33u].z * _1744;
        float _1751 = cbSceneParam._m0[33u].w * _1744;
        float _1754 = fma(_1666, cbSceneParam._m0[_1713].w, fma(_1662, cbSceneParam._m0[_1713].z, fma(_1658, cbSceneParam._m0[_1713].y, _1654 * cbSceneParam._m0[_1713].x))) / _1744;
        float _1802 = (cbSceneParam._m0[33u].x - sqrt(((_1668 * _1668) + (_1667 * _1667)) + (_1669 * _1669))) * cbSceneParam._m0[33u].y;
        float _4097 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
        float _1809 = (isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1749 + _1732) / _1744, (_1751 + _1736) / _1744), _1754), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1751 + _1732) / _1744, (_1736 - _1749) / _1744), _1754), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1732 - _1749) / _1744, (_1736 - _1751) / _1744), _1754), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1732 - _1751) / _1744, (_1749 + _1736) / _1744), _1754), 0.0)).x), vec4(0.25)));
        _1816 = 1.0 - (_1809 * cbSceneParam._m0[34u].x);
        _1817 = 1.0 - (_1809 * cbSceneParam._m0[34u].y);
        _1818 = 1.0 - (_1809 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1816 = 1.0;
        _1817 = 1.0;
        _1818 = 1.0;
    }
    float _1882;
    float _1884;
    float _1886;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1870 = fma(_1666, cbSceneParam._m0[63u].w, fma(_1662, cbSceneParam._m0[63u].z, fma(_1658, cbSceneParam._m0[63u].y, _1654 * cbSceneParam._m0[63u].x)));
        float _1871 = fma(_1666, cbSceneParam._m0[60u].w, fma(_1662, cbSceneParam._m0[60u].z, fma(_1658, cbSceneParam._m0[60u].y, _1654 * cbSceneParam._m0[60u].x))) / _1870;
        float _1872 = fma(_1666, cbSceneParam._m0[61u].w, fma(_1662, cbSceneParam._m0[61u].z, fma(_1658, cbSceneParam._m0[61u].y, _1654 * cbSceneParam._m0[61u].x))) / _1870;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1871 >= cbSceneParam._m0[64u].x) && (_1872 >= cbSceneParam._m0[64u].y)) && (_1871 <= cbSceneParam._m0[64u].z)) && (_1872 <= cbSceneParam._m0[64u].w))
        {
            float _2010 = fma(_1666, cbSceneParam._m0[62u].w, fma(_1662, cbSceneParam._m0[62u].z, fma(_1658, cbSceneParam._m0[62u].y, _1654 * cbSceneParam._m0[62u].x))) / _1870;
            float _2014 = isnan(cbSceneParam._m0[41u].w) ? _2010 : (isnan(_2010) ? cbSceneParam._m0[41u].w : max(_2010, cbSceneParam._m0[41u].w));
            float _2057 = (cbSceneParam._m0[33u].x - sqrt(((_1668 * _1668) + (_1667 * _1667)) + (_1669 * _1669))) * cbSceneParam._m0[33u].y;
            float _4113 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
            float _2064 = (isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1871, cbSceneParam._m0[33u].w + _1872), _2014), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1871, _1872 - cbSceneParam._m0[33u].z), _2014), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1871 - cbSceneParam._m0[33u].z, _1872 - cbSceneParam._m0[33u].w), _2014), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1871 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1872), _2014), 0.0)).x), vec4(0.25)));
            float _2068 = 1.0 - (_2064 * cbSceneParam._m0[34u].x);
            float _2069 = 1.0 - (_2064 * cbSceneParam._m0[34u].y);
            float _2070 = 1.0 - (_2064 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2069) ? _1817 : (isnan(_1817) ? _2069 : min(_1817, _2069));
            frontier_phi_36_35_ladder_1 = isnan(_2070) ? _1818 : (isnan(_1818) ? _2070 : min(_1818, _2070));
            frontier_phi_36_35_ladder_2 = isnan(_2068) ? _1816 : (isnan(_1816) ? _2068 : min(_1816, _2068));
        }
        else
        {
            frontier_phi_36_35_ladder = _1817;
            frontier_phi_36_35_ladder_1 = _1818;
            frontier_phi_36_35_ladder_2 = _1816;
        }
        _1882 = frontier_phi_36_35_ladder_2;
        _1884 = frontier_phi_36_35_ladder;
        _1886 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1882 = _1816;
        _1884 = _1817;
        _1886 = _1818;
    }
    uvec4 _1891 = floatBitsToUint(cbInstanceData._m0[_544 + 5u]);
    uint _1893 = _1891.x * 14u;
    uint _1894 = _1893 + 13u;
    float _1901 = _585 + (-1.0);
    float _1906 = (cbLight._m0[_1894].x * _1901) + 1.0;
    float _1907 = (cbLight._m0[_1894].y * _1901) + 1.0;
    float _1908 = (cbLight._m0[_1894].z * _1901) + 1.0;
    float _1909 = (cbLight._m0[_1894].w * _1901) + 1.0;
    uint _1910 = _1893 + 5u;
    float _1916 = isnan(1.0) ? _1907 : (isnan(_1907) ? 1.0 : min(_1907, 1.0));
    uint _1920 = _1893 + 4u;
    float _1929 = isnan(1.0) ? _1906 : (isnan(_1906) ? 1.0 : min(_1906, 1.0));
    uint _1933 = _1893 | 1u;
    float _1944 = dot(vec3(cbLight._m0[_1893].xyz), vec3(_414, _415, _416));
    float _1947 = dot(vec3(cbLight._m0[_1933].xyz), vec3(_414, _415, _416));
    float _4149 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
    float _4160 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
    float _1952 = (isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) * 0.3183098733425140380859375;
    float _1954 = (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0))) * 0.3183098733425140380859375;
    float _1961 = ((cbLight._m0[_1910].x * _1916) * _1954) + (((cbLight._m0[_1920].x * _1882) * _1929) * _1952);
    float _1962 = ((_1916 * cbLight._m0[_1910].y) * _1954) + (((cbLight._m0[_1920].y * _1884) * _1929) * _1952);
    float _1963 = ((_1916 * cbLight._m0[_1910].z) * _1954) + (((cbLight._m0[_1920].z * _1886) * _1929) * _1952);
    uvec4 _1967 = floatBitsToUint(cbLight._m0[_1893 + 12u]);
    bool _1969 = _1967.x == 0u;
    float _2071;
    float _2073;
    float _2075;
    if (_1969)
    {
        _2071 = _1961;
        _2073 = _1962;
        _2075 = _1963;
    }
    else
    {
        uint _2079 = _1893 + 6u;
        float _2095 = (dot(vec3(cbLight._m0[_1893 + 2u].xyz), vec3(_414, _415, _416)) * 0.5) + 0.5;
        float _2096 = _2095 * _2095;
        float _4171 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
        float _2097 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _2098 = isnan(1.0) ? _1908 : (isnan(_1908) ? 1.0 : min(_1908, 1.0));
        _2071 = (((cbLight._m0[_2079].x * 0.3183098733425140380859375) * _2097) * _2098) + _1961;
        _2073 = (((cbLight._m0[_2079].y * 0.3183098733425140380859375) * _2097) * _2098) + _1962;
        _2075 = (((cbLight._m0[_2079].z * 0.3183098733425140380859375) * _2097) * _2098) + _1963;
    }
    bool _2078 = _1967.y == 0u;
    float _2133;
    float _2135;
    float _2137;
    if (_2078)
    {
        _2133 = _2071;
        _2135 = _2073;
        _2137 = _2075;
    }
    else
    {
        uint _2306 = _1893 + 7u;
        float _2322 = (dot(vec3(cbLight._m0[_1893 + 3u].xyz), vec3(_414, _415, _416)) * 0.5) + 0.5;
        float _2323 = _2322 * _2322;
        float _4187 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
        float _2324 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
        float _2325 = isnan(1.0) ? _1909 : (isnan(_1909) ? 1.0 : min(_1909, 1.0));
        _2133 = (((cbLight._m0[_2306].x * 0.3183098733425140380859375) * _2324) * _2325) + _2071;
        _2135 = (((cbLight._m0[_2306].y * 0.3183098733425140380859375) * _2324) * _2325) + _2073;
        _2137 = (((cbLight._m0[_2306].z * 0.3183098733425140380859375) * _2324) * _2325) + _2075;
    }
    uint _2140 = _1893 + 8u;
    float _2153 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1893].w)) * _418) * 0.949999988079071044921875);
    float _2154 = _2153 * _2153;
    float _2155 = cbLight._m0[_1893].x + _497;
    float _2156 = cbLight._m0[_1893].y + _498;
    float _2157 = cbLight._m0[_1893].z + _499;
    float _2161 = inversesqrt(dot(vec3(_2155, _2156, _2157), vec3(_2155, _2156, _2157)));
    float _2162 = _2161 * _2155;
    float _2163 = _2161 * _2156;
    float _2164 = _2161 * _2157;
    float _2165 = dot(vec3(_414, _415, _416), vec3(cbLight._m0[_1893].xyz));
    float _4203 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
    float _2168 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
    float _4214 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _2169 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
    float _2170 = dot(vec3(_414, _415, _416), vec3(_2162, _2163, _2164));
    float _4225 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
    float _2173 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
    float _2174 = dot(vec3(cbLight._m0[_1893].xyz), vec3(_2162, _2163, _2164));
    float _4236 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
    float _2178 = _2154 * _2154;
    float _2182 = ((_2173 * _2173) * (_2178 + (-1.0))) + 1.0;
    float _2190 = exp2(log2(1.0 - (isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0)))) * 5.0);
    float _2191 = 0.959999978542327880859375 - _567;
    float _2193 = 0.959999978542327880859375 - _568;
    float _2194 = 0.959999978542327880859375 - _569;
    float _2201 = 1.0 - _2154;
    float _2212 = (0.5 / (((_2169 * ((_2168 * _2201) + _2154)) + 9.9999999392252902907785028219223e-09) + (((_2169 * _2201) + _2154) * _2168))) * _2168;
    float _4247 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
    float _2214 = (isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * (_2178 / ((_2182 * _2182) * 3.141590118408203125));
    uint _2228 = _1893 + 9u;
    float _2239 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1933].w)) * _418) * 0.949999988079071044921875);
    float _2240 = _2239 * _2239;
    float _2241 = cbLight._m0[_1933].x + _497;
    float _2242 = cbLight._m0[_1933].y + _498;
    float _2243 = cbLight._m0[_1933].z + _499;
    float _2247 = inversesqrt(dot(vec3(_2241, _2242, _2243), vec3(_2241, _2242, _2243)));
    float _2248 = _2247 * _2241;
    float _2249 = _2247 * _2242;
    float _2250 = _2247 * _2243;
    float _2251 = dot(vec3(_414, _415, _416), vec3(cbLight._m0[_1933].xyz));
    float _4258 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
    float _2254 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
    float _2255 = dot(vec3(_414, _415, _416), vec3(_2248, _2249, _2250));
    float _4269 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
    float _2258 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
    float _2259 = dot(vec3(cbLight._m0[_1933].xyz), vec3(_2248, _2249, _2250));
    float _4280 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
    float _2263 = _2240 * _2240;
    float _2267 = ((_2258 * _2258) * (_2263 + (-1.0))) + 1.0;
    float _2274 = exp2(log2(1.0 - (isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0)))) * 5.0);
    float _2281 = 1.0 - _2240;
    float _2291 = (0.5 / (((_2169 * ((_2254 * _2281) + _2240)) + 9.9999999392252902907785028219223e-09) + (((_2169 * _2281) + _2240) * _2254))) * _2254;
    float _4291 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
    float _2293 = (isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0))) * (_2263 / ((_2267 * _2267) * 3.141590118408203125));
    float _2303 = (((((_2274 * _2191) + _570) * cbLight._m0[_2228].x) * _2293) * _1916) + ((((cbLight._m0[_2140].x * _1882) * ((_2190 * _2191) + _570)) * _2214) * _1929);
    float _2304 = (((((_2274 * _2193) + _572) * cbLight._m0[_2228].y) * _2293) * _1916) + ((((cbLight._m0[_2140].y * _1884) * ((_2190 * _2193) + _572)) * _2214) * _1929);
    float _2305 = (((((_2274 * _2194) + _573) * cbLight._m0[_2228].z) * _2293) * _1916) + ((((cbLight._m0[_2140].z * _1886) * ((_2190 * _2194) + _573)) * _2214) * _1929);
    float _2361;
    float _2363;
    float _2365;
    if (_1969)
    {
        _2361 = _2303;
        _2363 = _2304;
        _2365 = _2305;
    }
    else
    {
        uint _2367 = _1893 + 2u;
        uint _2371 = _1893 + 10u;
        float _2385 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2367].w)) * _418) * 0.949999988079071044921875);
        float _2386 = _2385 * _2385;
        float _2387 = cbLight._m0[_2367].x + _497;
        float _2388 = cbLight._m0[_2367].y + _498;
        float _2389 = cbLight._m0[_2367].z + _499;
        float _2393 = inversesqrt(dot(vec3(_2387, _2388, _2389), vec3(_2387, _2388, _2389)));
        float _2394 = _2393 * _2387;
        float _2395 = _2393 * _2388;
        float _2396 = _2393 * _2389;
        float _2397 = dot(vec3(_414, _415, _416), vec3(cbLight._m0[_2367].xyz));
        float _4302 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
        float _2400 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _2401 = dot(vec3(_414, _415, _416), vec3(_2394, _2395, _2396));
        float _4313 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
        float _2404 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _2405 = dot(vec3(cbLight._m0[_2367].xyz), vec3(_2394, _2395, _2396));
        float _4324 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
        float _2409 = _2386 * _2386;
        float _2413 = ((_2404 * _2404) * (_2409 + (-1.0))) + 1.0;
        float _2420 = exp2(log2(1.0 - (isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0)))) * 5.0);
        float _2427 = 1.0 - _2386;
        float _2437 = (0.5 / (((_2169 * ((_2400 * _2427) + _2386)) + 9.9999999392252902907785028219223e-09) + (((_2169 * _2427) + _2386) * _2400))) * _2400;
        float _4335 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
        float _2439 = (isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * (_2409 / ((_2413 * _2413) * 3.141590118408203125));
        float _2440 = isnan(1.0) ? _1908 : (isnan(_1908) ? 1.0 : min(_1908, 1.0));
        _2361 = (((((_2420 * _2191) + _570) * cbLight._m0[_2371].x) * _2439) * _2440) + _2303;
        _2363 = (((((_2420 * _2193) + _572) * cbLight._m0[_2371].y) * _2439) * _2440) + _2304;
        _2365 = (((((_2420 * _2194) + _573) * cbLight._m0[_2371].z) * _2439) * _2440) + _2305;
    }
    float _2471;
    float _2473;
    float _2475;
    if (_2078)
    {
        _2471 = _2361;
        _2473 = _2363;
        _2475 = _2365;
    }
    else
    {
        uint _2482 = _1893 + 3u;
        uint _2486 = _1893 + 11u;
        float _2500 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2482].w)) * _418) * 0.949999988079071044921875);
        float _2501 = _2500 * _2500;
        float _2502 = cbLight._m0[_2482].x + _497;
        float _2503 = cbLight._m0[_2482].y + _498;
        float _2504 = cbLight._m0[_2482].z + _499;
        float _2508 = inversesqrt(dot(vec3(_2502, _2503, _2504), vec3(_2502, _2503, _2504)));
        float _2509 = _2508 * _2502;
        float _2510 = _2508 * _2503;
        float _2511 = _2508 * _2504;
        float _2512 = dot(vec3(_414, _415, _416), vec3(cbLight._m0[_2482].xyz));
        float _4351 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
        float _2515 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
        float _2516 = dot(vec3(_414, _415, _416), vec3(_2509, _2510, _2511));
        float _4362 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
        float _2519 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
        float _2520 = dot(vec3(cbLight._m0[_2482].xyz), vec3(_2509, _2510, _2511));
        float _4373 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
        float _2524 = _2501 * _2501;
        float _2528 = ((_2519 * _2519) * (_2524 + (-1.0))) + 1.0;
        float _2535 = exp2(log2(1.0 - (isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0)))) * 5.0);
        float _2542 = 1.0 - _2501;
        float _2552 = (0.5 / (((_2169 * ((_2515 * _2542) + _2501)) + 9.9999999392252902907785028219223e-09) + (((_2169 * _2542) + _2501) * _2515))) * _2515;
        float _4384 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
        float _2554 = (isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0))) * (_2524 / ((_2528 * _2528) * 3.141590118408203125));
        float _2555 = isnan(1.0) ? _1909 : (isnan(_1909) ? 1.0 : min(_1909, 1.0));
        _2471 = (((((_2535 * _2191) + _570) * cbLight._m0[_2486].x) * _2554) * _2555) + _2361;
        _2473 = (((((_2535 * _2193) + _572) * cbLight._m0[_2486].y) * _2554) * _2555) + _2363;
        _2475 = (((((_2535 * _2194) + _573) * cbLight._m0[_2486].z) * _2554) * _2555) + _2365;
    }
    float _2620;
    float _2622;
    float _2624;
    float _2626;
    float _2628;
    float _2630;
    if (_1891.y == 0u)
    {
        uvec4 _2576 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2577 = _2576.x;
        uint _2588 = uint((float(_2576.y) * floor(float(uint(cbSceneParam._m0[85u].y * _506) / _2577))) + floor(float(uint(cbSceneParam._m0[85u].x * _505) / _2577)));
        float _2598 = (log2(_1669 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2599 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0));
        uint _2602 = uint(isnan(14.0) ? _2599 : (isnan(_2599) ? 14.0 : min(_2599, 14.0)));
        uvec4 _2607 = texelFetch(g_lightClusterGridBuffer, int(((_2602 << 2u) + (_2588 << 6u)) >> 2u));
        uint _2608 = _2607.x;
        uint _2609 = _2576.z;
        float _2718;
        float _2720;
        float _2722;
        float _2724;
        float _2726;
        float _2728;
        if (((((1u << ((_2609 >> 4u) & 15u)) + 4294967295u) & _2608) == 0u) || ((_2609 & 240u) == 0u))
        {
            _2718 = 0.0;
            _2720 = 0.0;
            _2722 = 0.0;
            _2724 = 0.0;
            _2726 = 0.0;
            _2728 = 0.0;
        }
        else
        {
            float _2719;
            float _2721;
            float _2723;
            float _2725;
            float _2727;
            float _2729;
            float _2871 = 0.0;
            float _2872 = 0.0;
            float _2873 = 0.0;
            float _2874 = 0.0;
            float _2875 = 0.0;
            float _2876 = 0.0;
            uint _2877 = 0u;
            uint _2886;
            bool _2887;
            for (;;)
            {
                _2886 = texelFetch(g_lightClassification, int((((_2602 << 5u) + (_2588 << 9u)) + (_2877 << 2u)) >> 2u)).x;
                _2887 = _2886 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2887)
                {
                    frontier_phi_68_pred = _2876;
                    frontier_phi_68_pred_1 = _2875;
                    frontier_phi_68_pred_2 = _2874;
                    frontier_phi_68_pred_3 = _2872;
                    frontier_phi_68_pred_4 = _2871;
                    frontier_phi_68_pred_5 = _2873;
                }
                else
                {
                    float _2995;
                    float _2996;
                    float _2997;
                    float _2998;
                    float _2999;
                    float _3000;
                    uint _3001;
                    _2995 = _2871;
                    _2996 = _2872;
                    _2997 = _2873;
                    _2998 = _2874;
                    _2999 = _2875;
                    _3000 = _2876;
                    _3001 = _2886;
                    float _2927;
                    float _2928;
                    float _2929;
                    float _2930;
                    float _2931;
                    float _2932;
                    for (;;)
                    {
                        uint _3005 = uint(findLSB(_3001)) + (_2877 << 5u);
                        uint _3002 = (_3001 + 4294967295u) & _3001;
                        uint _3007 = _3005 * 48u;
                        vec4 _3021 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3007)).x, texelFetch(g_PointLightRenderingBuffer, int(_3007 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3007 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3007 + 3u)).x));
                        uint _3027 = (_3005 * 48u) + 4u;
                        vec4 _3040 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3027)).x, texelFetch(g_PointLightRenderingBuffer, int(_3027 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3027 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3027 + 3u)).x));
                        uint _3046 = (_3005 * 48u) + 8u;
                        vec3 _3057 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3046)).x, texelFetch(g_PointLightRenderingBuffer, int(_3046 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3046 + 2u)).x));
                        float _3061 = _3021.x - _1667;
                        float _3062 = _3021.y - _1668;
                        float _3063 = _3021.z - _1669;
                        float _3064 = dot(vec3(_3061, _3062, _3063), vec3(_3061, _3062, _3063));
                        float _3067 = inversesqrt(_3064);
                        float _3068 = _3067 * _3061;
                        float _3069 = _3067 * _3062;
                        float _3070 = _3067 * _3063;
                        float _3071 = dot(vec3(_525, _528, _531), vec3(_3068, _3069, _3070));
                        float _3076 = 1.0 - (_3064 * _3021.w);
                        float _4410 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0));
                        float _3077 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
                        float _3078 = sqrt(_3064) * _3040.w;
                        float _3081 = 1.39999997615814208984375 / (_3078 + 1.39999997615814208984375);
                        float _3082 = _3081 * _3081;
                        float _3085 = ((1.0 - _3082) * _3071) + _3082;
                        float _3088 = _3078 * _3078;
                        float _3092 = ((isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0))) * _3077) / ((_3088 * 0.699999988079071044921875) + 1.0);
                        float _3096 = (-0.0) - _1667;
                        float _3097 = (-0.0) - _1668;
                        float _3098 = (-0.0) - _1669;
                        float _3102 = inversesqrt(dot(vec3(_3096, _3097, _3098), vec3(_3096, _3097, _3098)));
                        float _3103 = _3102 * _3096;
                        float _3104 = _3102 * _3097;
                        float _3105 = _3102 * _3098;
                        float _3112 = exp2(log2(1.0 / ((_3088 * 3.5) + 5.0)) * 0.25);
                        float _3113 = 1.0 - _601;
                        float _3120 = sqrt(1.0 - ((1.0 - (_3113 * _3113)) * (1.0 - (_3112 * _3112))));
                        float _3121 = _3120 * _3120;
                        float _3122 = _3121 * _3121;
                        float _3123 = _3103 + _3068;
                        float _3124 = _3104 + _3069;
                        float _3125 = _3105 + _3070;
                        float _3129 = inversesqrt(dot(vec3(_3123, _3124, _3125), vec3(_3123, _3124, _3125)));
                        float _3133 = dot(vec3(_525, _528, _531), vec3(_3103, _3104, _3105));
                        float _4426 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0));
                        float _3136 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
                        float _3137 = dot(vec3(_525, _528, _531), vec3(_3129 * _3123, _3129 * _3124, _3129 * _3125));
                        float _4437 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0));
                        float _3140 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
                        float _3144 = ((_3140 * _3140) * (_3122 + (-1.0))) + 1.0;
                        float _3145 = _3081 * _3121;
                        float _3146 = _3145 * _3145;
                        float _3149 = ((1.0 - _3146) * _3071) + _3146;
                        float _4448 = isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0));
                        float _3150 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
                        float _3151 = 1.0 - _3121;
                        float _3161 = (0.5 / (((_3150 * ((_3136 * _3151) + _3121)) + 9.9999999392252902907785028219223e-09) + (((_3150 * _3151) + _3121) * _3136))) * _3150;
                        float _4459 = isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0));
                        float _3172 = (((_3122 * 3.1415927410125732421875) * (isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0)))) / ((_3144 * _3144) * ((_3088 * 2.1991131305694580078125) + 3.141590118408203125))) * _3077;
                        _2930 = (_3092 * _3040.x) + _2998;
                        _2931 = (_3092 * _3040.y) + _2999;
                        _2932 = (_3092 * _3040.z) + _3000;
                        _2927 = (_3172 * _3057.x) + _2995;
                        _2928 = (_3172 * _3057.y) + _2996;
                        _2929 = (_3172 * _3057.z) + _2997;
                        if (_3002 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2995 = _2927;
                            _2996 = _2928;
                            _2997 = _2929;
                            _2998 = _2930;
                            _2999 = _2931;
                            _3000 = _2932;
                            _3001 = _3002;
                        }
                    }
                    frontier_phi_68_pred = _2932;
                    frontier_phi_68_pred_1 = _2931;
                    frontier_phi_68_pred_2 = _2930;
                    frontier_phi_68_pred_3 = _2928;
                    frontier_phi_68_pred_4 = _2927;
                    frontier_phi_68_pred_5 = _2929;
                }
                _2729 = frontier_phi_68_pred;
                _2727 = frontier_phi_68_pred_1;
                _2725 = frontier_phi_68_pred_2;
                _2721 = frontier_phi_68_pred_3;
                _2719 = frontier_phi_68_pred_4;
                _2723 = frontier_phi_68_pred_5;
                uint _2878 = _2877 + 1u;
                if (_2878 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2871 = _2719;
                    _2872 = _2721;
                    _2873 = _2723;
                    _2874 = _2725;
                    _2875 = _2727;
                    _2876 = _2729;
                    _2877 = _2878;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2718 = _2719;
            _2720 = _2721;
            _2722 = _2723;
            _2724 = _2725;
            _2726 = _2727;
            _2728 = _2729;
        }
        uvec4 _2732 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2733 = _2732.z;
        uint _2735 = (_2733 >> 8u) & 15u;
        float _2839;
        float _2841;
        float _2843;
        float _2845;
        float _2847;
        float _2849;
        if (((4294967295u << _2735) & _2608) == 0u)
        {
            _2839 = _2718;
            _2841 = _2720;
            _2843 = _2722;
            _2845 = _2724;
            _2847 = _2726;
            _2849 = _2728;
        }
        else
        {
            float _2864 = inversesqrt(dot(vec3(_1667, _1668, _1669), vec3(_1667, _1668, _1669)));
            float _2865 = _2864 * _1667;
            float _2866 = _2864 * _1668;
            float _2867 = _2864 * _1669;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2735 < ((_2733 >> 12u) & 15u))
            {
                float _2840;
                float _2842;
                float _2844;
                float _2846;
                float _2848;
                float _2850;
                float _2978 = _2718;
                float _2979 = _2720;
                float _2980 = _2722;
                float _2981 = _2724;
                float _2982 = _2726;
                float _2983 = _2728;
                uint _2984 = _2735;
                uint _2993;
                bool _2994;
                for (;;)
                {
                    _2993 = texelFetch(g_lightClassification, int((((_2602 << 5u) + (_2588 << 9u)) + (_2984 << 2u)) >> 2u)).x;
                    _2994 = _2993 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2994)
                    {
                        frontier_phi_74_pred = _2980;
                        frontier_phi_74_pred_1 = _2979;
                        frontier_phi_74_pred_2 = _2978;
                        frontier_phi_74_pred_3 = _2983;
                        frontier_phi_74_pred_4 = _2982;
                        frontier_phi_74_pred_5 = _2981;
                    }
                    else
                    {
                        float _3177;
                        float _3178;
                        float _3179;
                        float _3180;
                        float _3181;
                        float _3182;
                        float _3473;
                        float _3474;
                        float _3475;
                        float _3476;
                        float _3477;
                        float _3478;
                        float _3190 = _2978;
                        float _3191 = _2979;
                        float _3192 = _2980;
                        float _3193 = _2981;
                        float _3194 = _2982;
                        float _3195 = _2983;
                        uint _3196 = _2993;
                        uint _3197;
                        vec4 _3222;
                        float _3223;
                        vec4 _3238;
                        vec3 _3250;
                        vec4 _3266;
                        vec4 _3282;
                        float _3329;
                        bool _3330;
                        for (;;)
                        {
                            uint _3207 = ((_2984 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3196));
                            _3197 = (_3196 + 4294967295u) & _3196;
                            uint _3209 = _3207 * 40u;
                            _3222 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3209)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 3u)).x));
                            _3223 = _3222.w;
                            uint _3225 = (_3207 * 40u) + 4u;
                            _3238 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3225)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 3u)).x));
                            uint _3240 = (_3207 * 40u) + 8u;
                            _3250 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3240)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 2u)).x));
                            uint _3253 = (_3207 * 40u) + 16u;
                            _3266 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3253)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 3u)).x));
                            uint _3269 = (_3207 * 40u) + 20u;
                            _3282 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3269)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 3u)).x));
                            uint _3285 = (_3207 * 40u) + 24u;
                            vec4 _3298 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3285)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 3u)).x));
                            uint _3304 = (_3207 * 40u) + 28u;
                            vec4 _3317 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3304)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 3u)).x));
                            _3329 = fma(_1669, _3317.z, fma(_1668, _3317.y, _3317.x * _1667)) + _3317.w;
                            _3330 = !((fma(_1669, _3298.z, fma(_1668, _3298.y, _3298.x * _1667)) + _3298.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3330)
                            {
                                float _3357 = _3222.x - _1667;
                                float _3358 = _3222.y - _1668;
                                float _3359 = _3222.z - _1669;
                                float _3360 = dot(vec3(_3357, _3358, _3359), vec3(_3357, _3358, _3359));
                                float _3363 = inversesqrt(_3360);
                                float _3364 = _3363 * _3357;
                                float _3365 = _3363 * _3358;
                                float _3366 = _3363 * _3359;
                                float _3370 = 1.0 - (_3360 / (_3223 * _3223));
                                float _4470 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0));
                                float _3371 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
                                float _3375 = sqrt(_3360) * _3238.w;
                                float _3377 = 1.39999997615814208984375 / (_3375 + 1.39999997615814208984375);
                                float _3378 = _3377 * _3377;
                                float _3381 = ((1.0 - _3378) * dot(vec3(_3364, _3365, _3366), vec3(_525, _528, _531))) + _3378;
                                float _3384 = _3375 * _3375;
                                float _3388 = (fma(_1669, _3266.z, fma(_1668, _3266.y, _3266.x * _1667)) + _3266.w) / _3329;
                                float _3389 = (fma(_1669, _3282.z, fma(_1668, _3282.y, _3282.x * _1667)) + _3282.w) / _3329;
                                float _3393 = 1.0 - dot(vec2(_3388, _3389), vec2(_3388, _3389));
                                float _4486 = isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0));
                                float _3394 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
                                float _3395 = _3394 * (((isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0))) * _3371) / ((_3384 * 0.699999988079071044921875) + 1.0));
                                float _3407 = exp2(log2(1.0 / ((_3384 * 3.5) + 5.0)) * 0.25);
                                float _3408 = 1.0 - _601;
                                float _3415 = sqrt(1.0 - ((1.0 - (_3408 * _3408)) * (1.0 - (_3407 * _3407))));
                                float _3416 = _3415 * _3415;
                                float _3417 = _3416 * _3416;
                                float _3418 = _3364 - _2865;
                                float _3419 = _3365 - _2866;
                                float _3420 = _3366 - _2867;
                                float _3424 = inversesqrt(dot(vec3(_3418, _3419, _3420), vec3(_3418, _3419, _3420)));
                                float _3428 = dot(vec3(_525, _528, _531), vec3((-0.0) - _2865, (-0.0) - _2866, (-0.0) - _2867));
                                float _4497 = isnan(0.0) ? _3428 : (isnan(_3428) ? 0.0 : max(_3428, 0.0));
                                float _3431 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
                                float _3432 = dot(vec3(_525, _528, _531), vec3(_3424 * _3418, _3424 * _3419, _3424 * _3420));
                                float _4508 = isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0));
                                float _3435 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
                                float _3439 = ((_3435 * _3435) * (_3417 + (-1.0))) + 1.0;
                                float _3440 = _3377 * _3416;
                                float _3441 = _3440 * _3440;
                                float _3447 = ((1.0 - _3441) * dot(vec3(_525, _528, _531), vec3(_3364, _3365, _3366))) + _3441;
                                float _4519 = isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0));
                                float _3448 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
                                float _3449 = 1.0 - _3416;
                                float _3459 = (0.5 / (((_3448 * ((_3431 * _3449) + _3416)) + 9.9999999392252902907785028219223e-09) + (((_3448 * _3449) + _3416) * _3431))) * _3448;
                                float _4530 = isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0));
                                float _3469 = (_3394 * _3371) * (((_3417 * 3.1415927410125732421875) * (isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0)))) / ((_3439 * _3439) * ((_3384 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3469 * _3250.z;
                                frontier_phi_80_pred_1 = _3469 * _3250.y;
                                frontier_phi_80_pred_2 = _3469 * _3250.x;
                                frontier_phi_80_pred_3 = _3395 * _3238.z;
                                frontier_phi_80_pred_4 = _3395 * _3238.y;
                                frontier_phi_80_pred_5 = _3395 * _3238.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3475 = frontier_phi_80_pred;
                            _3474 = frontier_phi_80_pred_1;
                            _3473 = frontier_phi_80_pred_2;
                            _3478 = frontier_phi_80_pred_3;
                            _3477 = frontier_phi_80_pred_4;
                            _3476 = frontier_phi_80_pred_5;
                            _3180 = _3476 + _3193;
                            _3181 = _3477 + _3194;
                            _3182 = _3478 + _3195;
                            _3177 = _3473 + _3190;
                            _3178 = _3474 + _3191;
                            _3179 = _3475 + _3192;
                            if (_3197 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3190 = _3177;
                                _3191 = _3178;
                                _3192 = _3179;
                                _3193 = _3180;
                                _3194 = _3181;
                                _3195 = _3182;
                                _3196 = _3197;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3179;
                        frontier_phi_74_pred_1 = _3178;
                        frontier_phi_74_pred_2 = _3177;
                        frontier_phi_74_pred_3 = _3182;
                        frontier_phi_74_pred_4 = _3181;
                        frontier_phi_74_pred_5 = _3180;
                    }
                    _2844 = frontier_phi_74_pred;
                    _2842 = frontier_phi_74_pred_1;
                    _2840 = frontier_phi_74_pred_2;
                    _2850 = frontier_phi_74_pred_3;
                    _2848 = frontier_phi_74_pred_4;
                    _2846 = frontier_phi_74_pred_5;
                    uint _2985 = _2984 + 1u;
                    if (_2985 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2978 = _2840;
                        _2979 = _2842;
                        _2980 = _2844;
                        _2981 = _2846;
                        _2982 = _2848;
                        _2983 = _2850;
                        _2984 = _2985;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2848;
                frontier_phi_62_63_ladder_1 = _2846;
                frontier_phi_62_63_ladder_2 = _2844;
                frontier_phi_62_63_ladder_3 = _2850;
                frontier_phi_62_63_ladder_4 = _2842;
                frontier_phi_62_63_ladder_5 = _2840;
            }
            else
            {
                frontier_phi_62_63_ladder = _2726;
                frontier_phi_62_63_ladder_1 = _2724;
                frontier_phi_62_63_ladder_2 = _2722;
                frontier_phi_62_63_ladder_3 = _2728;
                frontier_phi_62_63_ladder_4 = _2720;
                frontier_phi_62_63_ladder_5 = _2718;
            }
            _2839 = frontier_phi_62_63_ladder_5;
            _2841 = frontier_phi_62_63_ladder_4;
            _2843 = frontier_phi_62_63_ladder_2;
            _2845 = frontier_phi_62_63_ladder_1;
            _2847 = frontier_phi_62_63_ladder;
            _2849 = frontier_phi_62_63_ladder_3;
        }
        float _2854 = isnan(1.0) ? _585 : (isnan(_585) ? 1.0 : min(_585, 1.0));
        _2620 = (_2854 * _2845) + _2133;
        _2622 = (_2854 * _2847) + _2135;
        _2624 = (_2854 * _2849) + _2137;
        _2626 = ((_2839 * _570) * _2854) + _2471;
        _2628 = ((_2841 * _572) * _2854) + _2473;
        _2630 = ((_2843 * _573) * _2854) + _2475;
    }
    else
    {
        _2620 = _2133;
        _2622 = _2135;
        _2624 = _2137;
        _2626 = _2471;
        _2628 = _2473;
        _2630 = _2475;
    }
    uint _2636 = _546 + uint(cbMatDynParam._m0[0u].w);
    float _2642 = (cbMatDynParam._m0[17u].y * _285) * cbInstanceData._m0[_2636].x;
    float _2643 = (cbMatDynParam._m0[17u].y * _286) * cbInstanceData._m0[_2636].y;
    float _2644 = (cbMatDynParam._m0[17u].y * _287) * cbInstanceData._m0[_2636].z;
    float _4546 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _4557 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _4568 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _4579 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _2662 = (((isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0))) * (_2620 + ((isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0))) * _585))) + ((_2626 + ((isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0))) * _1395)) * cbPerFrame._m0[3u].x)) + _2642;
    float _2664 = (_2643 + ((_2628 + ((isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0))) * _1395)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0))) * (_2622 + ((isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0))) * _585)));
    float _2666 = (_2644 + ((_2630 + ((isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0))) * _1395)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0))) * (_2624 + ((isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0))) * _585)));
    float _4605 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2679 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
    float _2684 = cbInstanceData._m0[_544 + 6u].w * (isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0)));
    float _2689 = _505 / cbSceneParam._m0[86u].x;
    float _2690 = _506 / cbSceneParam._m0[86u].y;
    vec4 _2704 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2689, _2690, (log2((isnan(cbSceneParam._m0[77u].w) ? _438 : (isnan(_438) ? cbSceneParam._m0[77u].w : min(_438, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2706 = _2704.x;
    float _2707 = _2704.y;
    float _2708 = _2704.z;
    float _2709 = _2704.w;
    float _2780;
    float _2782;
    float _2784;
    float _2786;
    if (_438 > cbSceneParam._m0[78u].w)
    {
        float _2743 = isnan(_438) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _438 : min(cbSceneParam._m0[80u].w, _438));
        float _2744 = _2743 / _438;
        float _2755 = _2744 * _490;
        float _2756 = _491 * _2744;
        float _2757 = (-0.0) - _2756;
        float _2758 = _2744 * _492;
        float _2760 = (cbSceneParam._m0[77u].w * _2757) / _2743;
        float _2761 = _2760 + cbSceneParam._m0[79u].w;
        float _2762 = cbSceneParam._m0[79u].w - _2756;
        float _2768 = sqrt(((_2755 * _2755) + (_2756 * _2756)) + (_2758 * _2758));
        float _2771 = (1.0 - (cbSceneParam._m0[77u].w / _2743)) * _2768;
        float _2776 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2778 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2940;
        if (abs((_2757 - _2760) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2940 = ((((_2761 > 0.0) ? exp2(_2776 * _2761) : (2.0 - exp2(_2778 * _2761))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2771;
        }
        else
        {
            float _2900 = 1.0 / cbSceneParam._m0[80u].x;
            float _2901 = isnan(_2762) ? _2761 : (isnan(_2761) ? _2762 : max(_2761, _2762));
            float _2902 = isnan(_2762) ? _2761 : (isnan(_2761) ? _2762 : min(_2761, _2762));
            float _2911 = isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : min(_2901, 0.0));
            float _2912 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : min(_2902, 0.0));
            _2940 = ((abs(_2768 / _2757) * cbSceneParam._m0[80u].y) * ((((_2911 - _2912) * 2.0) - ((exp2(_2776 * (isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0)))) - exp2(_2776 * (isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0))))) * _2900)) - ((exp2(_2778 * _2911) - exp2(_2778 * _2912)) * _2900))) + (_2771 * cbSceneParam._m0[80u].z);
        }
        vec4 _2942 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2689, _2690, 1.0), 0.0);
        float _2951 = exp2((_2940 * (-1.44269502162933349609375)) * (1.0 - _2942.w));
        float _2952 = log2(_2951);
        float _2968 = log2(_2709);
        _2780 = (exp2(_2968 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2952 * cbSceneParam._m0[78u].x)) * _2942.x) / cbSceneParam._m0[78u].x)) + _2706;
        _2782 = (exp2(_2968 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2952 * cbSceneParam._m0[78u].y)) * _2942.y) / cbSceneParam._m0[78u].y)) + _2707;
        _2784 = (exp2(_2968 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2952 * cbSceneParam._m0[78u].z)) * _2942.z) / cbSceneParam._m0[78u].z)) + _2708;
        _2786 = _2951 * _2709;
    }
    else
    {
        _2780 = _2706;
        _2782 = _2707;
        _2784 = _2708;
        _2786 = _2709;
    }
    float _2798 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2799 = _2798 == 3.0;
    float _2800 = log2(_2786);
    float _2804 = exp2(_2800 * cbSceneParam._m0[78u].x);
    float _2805 = exp2(_2800 * cbSceneParam._m0[78u].y);
    float _2806 = exp2(_2800 * cbSceneParam._m0[78u].z);
    float _2807 = _2804 * (isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0)));
    float _2808 = _2805 * (isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0)));
    float _2809 = _2806 * (isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0)));
    float _2818 = (_2798 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2818 * (_2799 ? _2807 : (_2807 + (cbSceneParam._m0[72u].w * _2780)));
    SV_Target.y = _2818 * (_2799 ? _2808 : (_2808 + (cbSceneParam._m0[72u].w * _2782)));
    SV_Target.z = _2818 * (_2799 ? _2809 : (_2809 + (cbSceneParam._m0[72u].w * _2784)));
    SV_Target.w = _2684;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2642) * _2679) * _2804) * _2818;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2643) * _2679) * _2805) * _2818;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2644) * _2679) * _2806) * _2818;
    SV_Target_1.w = _2684;
}


