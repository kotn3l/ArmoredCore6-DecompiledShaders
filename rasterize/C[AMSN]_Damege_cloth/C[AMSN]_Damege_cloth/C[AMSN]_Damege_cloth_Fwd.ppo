#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[18];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_Damege_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_Damege_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_Damege_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D C_AMSN_Damege_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D C_AMSN_Damege_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D C_AMSN_Damege_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_Damege_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _956;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = _202 * NORMAL.x;
    float _204 = _202 * NORMAL.y;
    float _205 = _202 * NORMAL.z;
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _217;
    float _218;
    float _219;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
    }
    else
    {
        _217 = _203;
        _218 = _204;
        _219 = _205;
    }
    vec4 _237 = texture(sampler2D(C_AMSN_Damege_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _240 = _237.x;
    float _241 = _237.y;
    float _242 = _237.z;
    float _243 = _237.w;
    vec4 _255 = texture(sampler2D(C_AMSN_Damege_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _260 = _255.w;
    float _266 = (((cbMatDynParam._m0[17u].x * 10.0) + (-1.0)) + _260) * _260;
    vec4 _279 = texture(sampler2D(C_AMSN_Damege_snp_0_Texture2D_7, SS_ClampLinear), vec2((_266 * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (_266 * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _281 = _279.x;
    float _282 = _279.y;
    float _283 = _279.z;
    float _290 = ((_281 - _240) * cbMatDynParam._m0[17u].x) + _240;
    float _291 = ((_282 - _241) * cbMatDynParam._m0[17u].x) + _241;
    float _292 = ((_283 - _242) * cbMatDynParam._m0[17u].x) + _242;
    float _299 = ((_255.x - _290) * cbMatDynParam._m0[17u].x) + _290;
    float _300 = ((_255.y - _291) * cbMatDynParam._m0[17u].x) + _291;
    float _301 = ((_255.z - _292) * cbMatDynParam._m0[17u].x) + _292;
    vec4 _317 = texture(sampler2D(C_AMSN_Damege_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _319 = _317.x;
    vec4 _333 = texture(sampler2D(C_AMSN_Damege_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _338 = (_319 + cbMtdParam._m0[9u].x) + ((_333.x - _319) * cbMatDynParam._m0[17u].x);
    vec4 _350 = texture(sampler2D(C_AMSN_Damege_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _352 = _350.x;
    float _353 = _350.y;
    float _354 = _350.z;
    vec4 _367 = texture(sampler2D(C_AMSN_Damege_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _380 = ((_367.z - _354) * cbMatDynParam._m0[17u].x) + _354;
    float _384 = ((((_367.x - _352) * cbMatDynParam._m0[17u].x) + _352) * 2.0) + (-1.0);
    float _385 = ((((_367.y - _353) * cbMatDynParam._m0[17u].x) + _353) * 2.0) + (-1.0);
    float _386 = dot(vec2(_384, _385), vec2(_384, _385));
    float _3331 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _392 = sqrt(1.0 - (isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0))));
    float _399 = fma(_392, _217, fma(_385, _209 * TANGENT.x, (_195 * _188) * _384));
    float _402 = fma(_392, _218, fma(_385, _209 * TANGENT.y, (_195 * _189) * _384));
    float _405 = fma(_392, _219, fma(_385, _209 * TANGENT.z, (_195 * _190) * _384));
    float _409 = inversesqrt(dot(vec3(_399, _402, _405), vec3(_399, _402, _405)));
    float _410 = _409 * _399;
    float _411 = _409 * _402;
    float _412 = _409 * _405;
    float _3342 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _413 = isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0));
    float _3353 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _414 = isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0));
    float _3364 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _3375 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    float _3386 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _3397 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _418 = isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0));
    float _434 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _476 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _486 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _476);
    float _487 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _476);
    float _488 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _476);
    float _492 = inversesqrt(dot(vec3(_486, _487, _488), vec3(_486, _487, _488)));
    float _493 = _486 * _492;
    float _494 = _487 * _492;
    float _495 = _488 * _492;
    float _501 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _502 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _521 = fma(_412, cbSceneParam._m0[5u].z, fma(_411, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _410));
    float _524 = fma(_412, cbSceneParam._m0[6u].z, fma(_411, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _410));
    float _527 = fma(_412, cbSceneParam._m0[7u].z, fma(_411, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _410));
    uint _540 = uint(roundEven(NORMAL.w)) * 13u;
    uint _542 = _540 + 9u;
    uint _543 = _542 + uint(cbMatDynParam._m0[0u].w);
    float _549 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0)))) * cbInstanceData._m0[_543].x;
    float _550 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0)))) * cbInstanceData._m0[_543].y;
    float _551 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0)))) * cbInstanceData._m0[_543].z;
    float _3408 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _552 = isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0));
    float _3419 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _553 = isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0));
    float _3430 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _554 = isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0));
    float _555 = 1.0 - _418;
    float _556 = _552 * _555;
    float _557 = _553 * _555;
    float _558 = _554 * _555;
    float _563 = (_552 + (-0.039999999105930328369140625)) * _418;
    float _564 = (_553 + (-0.039999999105930328369140625)) * _418;
    float _565 = (_554 + (-0.039999999105930328369140625)) * _418;
    float _566 = _563 + 0.039999999105930328369140625;
    float _568 = _564 + 0.039999999105930328369140625;
    float _569 = _565 + 0.039999999105930328369140625;
    vec4 _578 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _501, cbSceneParam._m0[86u].y * _502));
    float _581 = _578.x * TEXCOORD.z;
    float _582 = dot(vec3(_410, _411, _412), vec3(_493, _494, _495));
    float _585 = _582 * 2.0;
    float _589 = (_585 * _410) - _493;
    float _590 = (_585 * _411) - _494;
    float _591 = (_585 * _412) - _495;
    float _595 = abs(dot(vec3(_493, _494, _495), vec3(_410, _411, _412)));
    float _3441 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _597 = sqrt(_414);
    float _610 = exp2((_597 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_597 * 3.0));
    float _616 = (1.0 - _610) * ((_597 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _617 = _610 * _597;
    float _645 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _649 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _653 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _955;
    float _957;
    float _958;
    float _959;
    float _960;
    float _961;
    float _962;
    float _963;
    float _964;
    float _965;
    float _966;
    float _967;
    float _968;
    float _969;
    float _970;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _680 = fma(_653, cbModelParam._m0[26u].z, fma(_649, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _645));
        float _684 = fma(_653, cbModelParam._m0[27u].z, fma(_649, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _645));
        float _688 = fma(_653, cbModelParam._m0[28u].z, fma(_649, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _645));
        float _713 = _645 + _410;
        float _714 = _649 + _411;
        float _715 = _653 + _412;
        float _725 = fma(_715, cbModelParam._m0[26u].z, fma(_714, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _713)) - _680;
        float _726 = fma(_715, cbModelParam._m0[27u].z, fma(_714, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _713)) - _684;
        float _727 = fma(_715, cbModelParam._m0[28u].z, fma(_714, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _713)) - _688;
        float _731 = inversesqrt(dot(vec3(_725, _726, _727), vec3(_725, _726, _727)));
        float _744 = ((_731 * _725) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_680 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _745 = ((_731 * _726) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_684 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _746 = ((_731 * _727) / cbModelParam._m0[34u].z) + ((((((_688 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _749 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_744, _745, _746), 0.0);
        vec4 _756 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_744, _745, _746), 0.0);
        vec4 _763 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_744, _745, _746), 0.0);
        vec4 _770 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_744, _745, _746), 0.0);
        float _783 = exp2((_749.w + (-0.5)) * 20.0) * 2.0;
        float _784 = _783 * (_749.x + (-0.5));
        float _785 = _783 * (_749.y + (-0.5));
        float _786 = _783 * (_749.z + (-0.5));
        float _793 = exp2((_756.w + (-0.5)) * 20.0) * 2.0;
        float _794 = _793 * (_756.x + (-0.5));
        float _795 = _793 * (_756.y + (-0.5));
        float _796 = _793 * (_756.z + (-0.5));
        float _803 = exp2((_763.w + (-0.5)) * 20.0) * 2.0;
        float _804 = _803 * (_763.x + (-0.5));
        float _805 = _803 * (_763.y + (-0.5));
        float _806 = _803 * (_763.z + (-0.5));
        float _813 = exp2((_770.w + (-0.5)) * 20.0) * 2.0;
        float _814 = _813 * (_770.x + (-0.5));
        float _815 = _813 * (_770.y + (-0.5));
        float _816 = _813 * (_770.z + (-0.5));
        float _817 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _818 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _819 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
        float _820 = _784 * 0.5;
        float _821 = _794 * 0.5;
        float _822 = _804 * 0.5;
        float _823 = dot(vec3(_820, _821, _822), vec3(_820, _821, _822));
        float _828 = (_823 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_823);
        float _837 = (dot(vec3(_410, _411, _412), vec3(_828 * _820, _828 * _821, _828 * _822)) + 1.0) * 0.5;
        float _3467 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _847 = sqrt(((_821 * _821) + (_820 * _820)) + (_822 * _822)) / (_817 + 9.9999997473787516355514526367188e-06);
        float _3478 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        float _848 = isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0));
        float _849 = _848 * 2.0;
        float _853 = (1.0 - _848) / (_848 + 1.0);
        float _3489 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
        float _854 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
        float _863 = ((((1.0 - _854) * (_849 + 2.0)) * exp2(log2(isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0))) * (_849 + 1.0))) + _854) * _817;
        float _864 = _785 * 0.5;
        float _865 = _795 * 0.5;
        float _866 = _805 * 0.5;
        float _867 = dot(vec3(_864, _865, _866), vec3(_864, _865, _866));
        float _872 = (_867 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_867);
        float _880 = (dot(vec3(_410, _411, _412), vec3(_872 * _864, _872 * _865, _872 * _866)) + 1.0) * 0.5;
        float _3500 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        float _889 = sqrt(((_865 * _865) + (_864 * _864)) + (_866 * _866)) / (_818 + 9.9999997473787516355514526367188e-06);
        float _3511 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        float _890 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
        float _891 = _890 * 2.0;
        float _895 = (1.0 - _890) / (_890 + 1.0);
        float _3522 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _896 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
        float _905 = ((((1.0 - _896) * (_891 + 2.0)) * exp2(log2(isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0))) * (_891 + 1.0))) + _896) * _818;
        float _906 = _786 * 0.5;
        float _907 = _796 * 0.5;
        float _908 = _806 * 0.5;
        float _909 = dot(vec3(_906, _907, _908), vec3(_906, _907, _908));
        float _914 = (_909 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_909);
        float _922 = (dot(vec3(_410, _411, _412), vec3(_914 * _906, _914 * _907, _914 * _908)) + 1.0) * 0.5;
        float _3533 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _931 = sqrt(((_907 * _907) + (_906 * _906)) + (_908 * _908)) / (_819 + 9.9999997473787516355514526367188e-06);
        float _3544 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _932 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
        float _933 = _932 * 2.0;
        float _937 = (1.0 - _932) / (_932 + 1.0);
        float _3555 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _938 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
        float _947 = ((((1.0 - _938) * (_933 + 2.0)) * exp2(log2(isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0))) * (_933 + 1.0))) + _938) * _819;
        _955 = _786;
        _957 = _785;
        _958 = _784;
        _959 = _796;
        _960 = _795;
        _961 = _794;
        _962 = _806;
        _963 = _805;
        _964 = _804;
        _965 = _819;
        _966 = _818;
        _967 = _817;
        _968 = cbModelParam._m0[36u].z * (isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0)));
        _969 = cbModelParam._m0[36u].z * (isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0)));
        _970 = cbModelParam._m0[36u].z * (isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0)));
    }
    else
    {
        _955 = _956;
        _957 = _956;
        _958 = _956;
        _959 = _956;
        _960 = _956;
        _961 = _956;
        _962 = _956;
        _963 = _956;
        _964 = _956;
        _965 = _956;
        _966 = _956;
        _967 = _956;
        _968 = 0.0;
        _969 = 0.0;
        _970 = 0.0;
    }
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _996 = fma(_653, cbModelParam._m0[30u].z, fma(_649, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _645));
        float _1000 = fma(_653, cbModelParam._m0[31u].z, fma(_649, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _645));
        float _1004 = fma(_653, cbModelParam._m0[32u].z, fma(_649, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _645));
        float _1027 = _645 + _410;
        float _1028 = _649 + _411;
        float _1029 = _653 + _412;
        float _1039 = fma(_1029, cbModelParam._m0[30u].z, fma(_1028, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1027)) - _996;
        float _1040 = fma(_1029, cbModelParam._m0[31u].z, fma(_1028, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1027)) - _1000;
        float _1041 = fma(_1029, cbModelParam._m0[32u].z, fma(_1028, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1027)) - _1004;
        float _1045 = inversesqrt(dot(vec3(_1039, _1040, _1041), vec3(_1039, _1040, _1041)));
        float _1058 = ((_1045 * _1039) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_996 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1059 = ((_1045 * _1040) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1000 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1060 = ((_1045 * _1041) / cbModelParam._m0[35u].z) + ((((((_1004 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1062 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1058, _1059, _1060), 0.0);
        vec4 _1069 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1058, _1059, _1060), 0.0);
        vec4 _1076 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1058, _1059, _1060), 0.0);
        vec4 _1083 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1058, _1059, _1060), 0.0);
        float _1095 = exp2((_1062.w + (-0.5)) * 20.0) * 2.0;
        float _1096 = _1095 * (_1062.x + (-0.5));
        float _1097 = _1095 * (_1062.y + (-0.5));
        float _1098 = _1095 * (_1062.z + (-0.5));
        float _1105 = exp2((_1069.w + (-0.5)) * 20.0) * 2.0;
        float _1106 = _1105 * (_1069.x + (-0.5));
        float _1107 = _1105 * (_1069.y + (-0.5));
        float _1108 = _1105 * (_1069.z + (-0.5));
        float _1115 = exp2((_1076.w + (-0.5)) * 20.0) * 2.0;
        float _1116 = _1115 * (_1076.x + (-0.5));
        float _1117 = _1115 * (_1076.y + (-0.5));
        float _1118 = _1115 * (_1076.z + (-0.5));
        float _1125 = exp2((_1083.w + (-0.5)) * 20.0) * 2.0;
        float _1126 = _1125 * (_1083.x + (-0.5));
        float _1127 = _1125 * (_1083.y + (-0.5));
        float _1128 = _1125 * (_1083.z + (-0.5));
        float _1129 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1130 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1131 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1132 = _1096 * 0.5;
        float _1133 = _1106 * 0.5;
        float _1134 = _1116 * 0.5;
        float _1135 = dot(vec3(_1132, _1133, _1134), vec3(_1132, _1133, _1134));
        float _1140 = (_1135 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1135);
        float _1148 = (dot(vec3(_410, _411, _412), vec3(_1140 * _1132, _1140 * _1133, _1140 * _1134)) + 1.0) * 0.5;
        float _3596 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1157 = sqrt(((_1133 * _1133) + (_1132 * _1132)) + (_1134 * _1134)) / (_1129 + 9.9999997473787516355514526367188e-06);
        float _3607 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
        float _1159 = _1158 * 2.0;
        float _1163 = (1.0 - _1158) / (_1158 + 1.0);
        float _3618 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1164 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
        float _1173 = ((((1.0 - _1164) * (_1159 + 2.0)) * exp2(log2(isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0))) * (_1159 + 1.0))) + _1164) * _1129;
        float _1174 = _1097 * 0.5;
        float _1175 = _1107 * 0.5;
        float _1176 = _1117 * 0.5;
        float _1177 = dot(vec3(_1174, _1175, _1176), vec3(_1174, _1175, _1176));
        float _1182 = (_1177 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1177);
        float _1190 = (dot(vec3(_410, _411, _412), vec3(_1182 * _1174, _1182 * _1175, _1182 * _1176)) + 1.0) * 0.5;
        float _3629 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1199 = sqrt(((_1175 * _1175) + (_1174 * _1174)) + (_1176 * _1176)) / (_1130 + 9.9999997473787516355514526367188e-06);
        float _3640 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
        float _1201 = _1200 * 2.0;
        float _1205 = (1.0 - _1200) / (_1200 + 1.0);
        float _3651 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
        float _1215 = ((((1.0 - _1206) * (_1201 + 2.0)) * exp2(log2(isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0))) * (_1201 + 1.0))) + _1206) * _1130;
        float _1216 = _1098 * 0.5;
        float _1217 = _1108 * 0.5;
        float _1218 = _1118 * 0.5;
        float _1219 = dot(vec3(_1216, _1217, _1218), vec3(_1216, _1217, _1218));
        float _1224 = (_1219 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1219);
        float _1232 = (dot(vec3(_410, _411, _412), vec3(_1224 * _1216, _1224 * _1217, _1224 * _1218)) + 1.0) * 0.5;
        float _3662 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1241 = sqrt(((_1217 * _1217) + (_1216 * _1216)) + (_1218 * _1218)) / (_1131 + 9.9999997473787516355514526367188e-06);
        float _3673 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
        float _1243 = _1242 * 2.0;
        float _1247 = (1.0 - _1242) / (_1242 + 1.0);
        float _3684 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
        float _1257 = ((((1.0 - _1248) * (_1243 + 2.0)) * exp2(log2(isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0))) * (_1243 + 1.0))) + _1248) * _1131;
        _1265 = _1098;
        _1266 = _1097;
        _1267 = _1096;
        _1268 = _1108;
        _1269 = _1107;
        _1270 = _1106;
        _1271 = _1118;
        _1272 = _1117;
        _1273 = _1116;
        _1274 = _1131;
        _1275 = _1130;
        _1276 = _1129;
        _1277 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0)));
        _1278 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0)));
        _1279 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0)));
    }
    else
    {
        _1265 = _956;
        _1266 = _956;
        _1267 = _956;
        _1268 = _956;
        _1269 = _956;
        _1270 = _956;
        _1271 = _956;
        _1272 = _956;
        _1273 = _956;
        _1274 = _956;
        _1275 = _956;
        _1276 = _956;
        _1277 = 0.0;
        _1278 = 0.0;
        _1279 = 0.0;
    }
    float _1289 = (cbModelParam._m0[1u].x * (_1277 - _968)) + _968;
    float _1290 = (cbModelParam._m0[1u].x * (_1278 - _969)) + _969;
    float _1291 = (cbModelParam._m0[1u].x * (_1279 - _970)) + _970;
    float _1312 = fma(_1291, cbSceneParam._m0[89u].z, fma(_1290, cbSceneParam._m0[89u].y, _1289 * cbSceneParam._m0[89u].x));
    float _1315 = fma(_1291, cbSceneParam._m0[90u].z, fma(_1290, cbSceneParam._m0[90u].y, _1289 * cbSceneParam._m0[90u].x));
    float _1318 = fma(_1291, cbSceneParam._m0[91u].z, fma(_1290, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1289));
    float _1333 = _589 * 0.5;
    float _1334 = _590 * 0.5;
    float _1335 = _591 * 0.5;
    float _1336 = dot(vec4(_1333, _1334, _1335, 1.0), vec4(_1267, _1270, _1273, _1276));
    float _1339 = dot(vec4(_1333, _1334, _1335, 1.0), vec4(_1266, _1269, _1272, _1275));
    float _1342 = dot(vec4(_1333, _1334, _1335, 1.0), vec4(_1265, _1268, _1271, _1274));
    float _1376;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1349 = dot(vec4(_1333, _1334, _1335, 1.0), vec4(_955, _959, _962, _965));
        float _1353 = dot(vec4(_1333, _1334, _1335, 1.0), vec4(_957, _960, _963, _966));
        float _1357 = dot(vec4(_1333, _1334, _1335, 1.0), vec4(_958, _961, _964, _967));
        float _1364 = dot(vec4(cbModelParam._m0[39u]), vec4(_1333, _1334, _1335, 1.0));
        _1376 = dot(vec3(isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0)), isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0)), isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1364) ? 0.0 : (isnan(0.0) ? _1364 : max(0.0, _1364))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1376 = 1.0;
    }
    float _1387;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1378 = dot(vec4(cbModelParam._m0[40u]), vec4(_1333, _1334, _1335, 1.0));
        _1387 = dot(vec3(isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0)), isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0)), isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1378) ? 0.0 : (isnan(0.0) ? _1378 : max(0.0, _1378))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1387 = 1.0;
    }
    float _1391 = (_1387 * cbModelParam._m0[1u].x) + (_1376 * (1.0 - cbModelParam._m0[1u].x));
    float _1401 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _414);
    float _1402 = isnan(_1401) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1401 : min(cbModelParam._m0[25u].z, _1401));
    float _1484;
    float _1486;
    float _1488;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1451 = fma(_653, cbModelParam._m0[13u].z, fma(_649, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _645)) + cbModelParam._m0[13u].w;
        float _1455 = fma(_653, cbModelParam._m0[14u].z, fma(_649, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _645)) + cbModelParam._m0[14u].w;
        float _1459 = fma(_653, cbModelParam._m0[15u].z, fma(_649, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _645)) + cbModelParam._m0[15u].w;
        float _1462 = fma(_591, cbModelParam._m0[13u].z, fma(_590, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _589));
        float _1465 = fma(_591, cbModelParam._m0[14u].z, fma(_590, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _589));
        float _1468 = fma(_591, cbModelParam._m0[15u].z, fma(_590, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _589));
        float _1496;
        if (_1462 > 0.0)
        {
            _1496 = abs((1.0 - _1451) / _1462);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1462 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1451 + 1.0) / _1462);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1496 = frontier_phi_16_14_ladder;
        }
        float _1702;
        if (_1465 > 0.0)
        {
            _1702 = abs((1.0 - _1455) / _1465);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1465 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1455 + 1.0) / _1465);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1702 = frontier_phi_25_21_ladder;
        }
        float _1956;
        if (_1468 > 0.0)
        {
            _1956 = abs((1.0 - _1459) / _1468);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1468 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1459 + 1.0) / _1468);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1956 = frontier_phi_37_32_ladder;
        }
        float _1958 = isnan(_1702) ? _1496 : (isnan(_1496) ? _1702 : min(_1496, _1702));
        float _1959 = isnan(_1956) ? _1958 : (isnan(_1958) ? _1956 : min(_1958, _1956));
        float _1963 = (_1959 * _1462) + _1451;
        float _1964 = (_1959 * _1465) + _1455;
        float _1965 = (_1959 * _1468) + _1459;
        float _1966 = _1959 * 9.9999997473787516355514526367188e-05;
        float _1968 = (-1.0) - _1966;
        float _1970 = _1966 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1965 > _1970) || ((_1965 < _1968) || ((_1964 > _1970) || ((_1964 < _1968) || ((_1963 < _1968) || (_1963 > _1970))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2093 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1965, cbModelParam._m0[9u].z, fma(_1964, cbModelParam._m0[9u].y, _1963 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1965, cbModelParam._m0[10u].z, fma(_1964, cbModelParam._m0[10u].y, _1963 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1965, cbModelParam._m0[11u].z, fma(_1964, cbModelParam._m0[11u].y, _1963 * cbModelParam._m0[11u].x))), _1402);
            frontier_phi_15_37_ladder = _2093.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2093.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2093.x * cbModelParam._m0[1u].y;
        }
        _1484 = frontier_phi_15_37_ladder_2;
        _1486 = frontier_phi_15_37_ladder_1;
        _1488 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1472 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_589, _590, _591), _1402);
        _1484 = _1472.x * cbModelParam._m0[1u].y;
        _1486 = _1472.y * cbModelParam._m0[1u].y;
        _1488 = _1472.z * cbModelParam._m0[1u].y;
    }
    float _1492 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _414);
    float _1493 = isnan(_1492) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1492 : min(cbModelParam._m0[25u].w, _1492));
    float _1585;
    float _1587;
    float _1589;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1549 = fma(_653, cbModelParam._m0[21u].z, fma(_649, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _645)) + cbModelParam._m0[21u].w;
        float _1553 = fma(_653, cbModelParam._m0[22u].z, fma(_649, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _645)) + cbModelParam._m0[22u].w;
        float _1557 = fma(_653, cbModelParam._m0[23u].z, fma(_649, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _645)) + cbModelParam._m0[23u].w;
        float _1560 = fma(_591, cbModelParam._m0[21u].z, fma(_590, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _589));
        float _1563 = fma(_591, cbModelParam._m0[22u].z, fma(_590, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _589));
        float _1566 = fma(_591, cbModelParam._m0[23u].z, fma(_590, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _589));
        float _1707;
        if (_1560 > 0.0)
        {
            _1707 = abs((1.0 - _1549) / _1560);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1560 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1549 + 1.0) / _1560);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1707 = frontier_phi_27_23_ladder;
        }
        float _1983;
        if (_1563 > 0.0)
        {
            _1983 = abs((1.0 - _1553) / _1563);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1563 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1553 + 1.0) / _1563);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1983 = frontier_phi_39_34_ladder;
        }
        float _2196;
        if (_1566 > 0.0)
        {
            _2196 = abs((1.0 - _1557) / _1566);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1566 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1557 + 1.0) / _1566);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2196 = frontier_phi_48_45_ladder;
        }
        float _2198 = isnan(_1983) ? _1707 : (isnan(_1707) ? _1983 : min(_1707, _1983));
        float _2199 = isnan(_2196) ? _2198 : (isnan(_2198) ? _2196 : min(_2198, _2196));
        float _2203 = (_2199 * _1560) + _1549;
        float _2204 = (_2199 * _1563) + _1553;
        float _2205 = (_2199 * _1566) + _1557;
        float _2206 = _2199 * 9.9999997473787516355514526367188e-05;
        float _2207 = (-1.0) - _2206;
        float _2209 = _2206 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2205 > _2209) || ((_2205 < _2207) || ((_2204 > _2209) || ((_2204 < _2207) || ((_2203 < _2207) || (_2203 > _2209))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2434 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2205, cbModelParam._m0[17u].z, fma(_2204, cbModelParam._m0[17u].y, _2203 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2205, cbModelParam._m0[18u].z, fma(_2204, cbModelParam._m0[18u].y, _2203 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2205, cbModelParam._m0[19u].z, fma(_2204, cbModelParam._m0[19u].y, _2203 * cbModelParam._m0[19u].x))), _1493);
            frontier_phi_24_48_ladder = _2434.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2434.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2434.x * cbModelParam._m0[1u].z;
        }
        _1585 = frontier_phi_24_48_ladder_2;
        _1587 = frontier_phi_24_48_ladder_1;
        _1589 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1569 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_589, _590, _591), _1493);
        _1585 = _1569.x * cbModelParam._m0[1u].z;
        _1587 = _1569.y * cbModelParam._m0[1u].z;
        _1589 = _1569.z * cbModelParam._m0[1u].z;
    }
    float _1602 = (((_616 * _566) + _617) * _581) * ((cbModelParam._m0[1u].w * (_1585 - _1484)) + _1484);
    float _1604 = (((_616 * _568) + _617) * _581) * ((cbModelParam._m0[1u].w * (_1587 - _1486)) + _1486);
    float _1606 = (((_616 * _569) + _617) * _581) * ((cbModelParam._m0[1u].w * (_1589 - _1488)) + _1488);
    float _1609 = fma(_1606, cbSceneParam._m0[89u].z, fma(_1604, cbSceneParam._m0[89u].y, _1602 * cbSceneParam._m0[89u].x));
    float _1612 = fma(_1606, cbSceneParam._m0[90u].z, fma(_1604, cbSceneParam._m0[90u].y, _1602 * cbSceneParam._m0[90u].x));
    float _1615 = fma(_1606, cbSceneParam._m0[91u].z, fma(_1604, cbSceneParam._m0[91u].y, _1602 * cbSceneParam._m0[91u].x));
    uvec4 _1625 = floatBitsToUint(cbInstanceData._m0[_540 + 5u]);
    uint _1627 = _1625.x * 14u;
    uint _1628 = _1627 + 13u;
    float _1635 = _581 + (-1.0);
    float _1640 = (cbLight._m0[_1628].x * _1635) + 1.0;
    float _1641 = (cbLight._m0[_1628].y * _1635) + 1.0;
    float _1642 = (cbLight._m0[_1628].z * _1635) + 1.0;
    float _1643 = (cbLight._m0[_1628].w * _1635) + 1.0;
    uint _1644 = _1627 + 5u;
    float _1650 = isnan(1.0) ? _1641 : (isnan(_1641) ? 1.0 : min(_1641, 1.0));
    uint _1654 = _1627 + 4u;
    float _1660 = isnan(1.0) ? _1640 : (isnan(_1640) ? 1.0 : min(_1640, 1.0));
    uint _1664 = _1627 | 1u;
    float _1675 = dot(vec3(cbLight._m0[_1627].xyz), vec3(_410, _411, _412));
    float _1678 = dot(vec3(cbLight._m0[_1664].xyz), vec3(_410, _411, _412));
    float _3820 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
    float _3831 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
    float _1683 = (isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) * 0.3183098733425140380859375;
    float _1685 = (isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) * 0.3183098733425140380859375;
    float _1692 = ((cbLight._m0[_1644].x * _1650) * _1685) + ((cbLight._m0[_1654].x * _1660) * _1683);
    float _1693 = ((_1650 * cbLight._m0[_1644].y) * _1685) + ((_1660 * cbLight._m0[_1654].y) * _1683);
    float _1694 = ((_1650 * cbLight._m0[_1644].z) * _1685) + ((_1660 * cbLight._m0[_1654].z) * _1683);
    uvec4 _1699 = floatBitsToUint(cbLight._m0[_1627 + 12u]);
    bool _1701 = _1699.x == 0u;
    float _1712;
    float _1714;
    float _1716;
    if (_1701)
    {
        _1712 = _1692;
        _1714 = _1693;
        _1716 = _1694;
    }
    else
    {
        uint _1720 = _1627 + 6u;
        float _1736 = (dot(vec3(cbLight._m0[_1627 + 2u].xyz), vec3(_410, _411, _412)) * 0.5) + 0.5;
        float _1737 = _1736 * _1736;
        float _3842 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
        float _1738 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _1739 = isnan(1.0) ? _1642 : (isnan(_1642) ? 1.0 : min(_1642, 1.0));
        _1712 = (((cbLight._m0[_1720].x * 0.3183098733425140380859375) * _1738) * _1739) + _1692;
        _1714 = (((cbLight._m0[_1720].y * 0.3183098733425140380859375) * _1738) * _1739) + _1693;
        _1716 = (((cbLight._m0[_1720].z * 0.3183098733425140380859375) * _1738) * _1739) + _1694;
    }
    bool _1719 = _1699.y == 0u;
    float _1757;
    float _1759;
    float _1761;
    if (_1719)
    {
        _1757 = _1712;
        _1759 = _1714;
        _1761 = _1716;
    }
    else
    {
        uint _1927 = _1627 + 7u;
        float _1943 = (dot(vec3(cbLight._m0[_1627 + 3u].xyz), vec3(_410, _411, _412)) * 0.5) + 0.5;
        float _1944 = _1943 * _1943;
        float _3858 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
        float _1945 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
        float _1946 = isnan(1.0) ? _1643 : (isnan(_1643) ? 1.0 : min(_1643, 1.0));
        _1757 = (((cbLight._m0[_1927].x * 0.3183098733425140380859375) * _1945) * _1946) + _1712;
        _1759 = (((cbLight._m0[_1927].y * 0.3183098733425140380859375) * _1945) * _1946) + _1714;
        _1761 = (((cbLight._m0[_1927].z * 0.3183098733425140380859375) * _1945) * _1946) + _1716;
    }
    uint _1764 = _1627 + 8u;
    float _1777 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1627].w)) * _414) * 0.949999988079071044921875);
    float _1778 = _1777 * _1777;
    float _1779 = cbLight._m0[_1627].x + _493;
    float _1780 = cbLight._m0[_1627].y + _494;
    float _1781 = cbLight._m0[_1627].z + _495;
    float _1785 = inversesqrt(dot(vec3(_1779, _1780, _1781), vec3(_1779, _1780, _1781)));
    float _1786 = _1785 * _1779;
    float _1787 = _1785 * _1780;
    float _1788 = _1785 * _1781;
    float _1789 = dot(vec3(_410, _411, _412), vec3(cbLight._m0[_1627].xyz));
    float _3874 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
    float _1792 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
    float _3885 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _1793 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
    float _1794 = dot(vec3(_410, _411, _412), vec3(_1786, _1787, _1788));
    float _3896 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
    float _1797 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
    float _1798 = dot(vec3(cbLight._m0[_1627].xyz), vec3(_1786, _1787, _1788));
    float _3907 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
    float _1802 = _1778 * _1778;
    float _1806 = ((_1797 * _1797) * (_1802 + (-1.0))) + 1.0;
    float _1814 = exp2(log2(1.0 - (isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0)))) * 5.0);
    float _1815 = 0.959999978542327880859375 - _563;
    float _1817 = 0.959999978542327880859375 - _564;
    float _1818 = 0.959999978542327880859375 - _565;
    float _1825 = 1.0 - _1778;
    float _1836 = (0.5 / (((_1793 * ((_1792 * _1825) + _1778)) + 9.9999999392252902907785028219223e-09) + (((_1793 * _1825) + _1778) * _1792))) * _1792;
    float _3918 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
    float _1838 = (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0))) * (_1802 / ((_1806 * _1806) * 3.141590118408203125));
    uint _1849 = _1627 + 9u;
    float _1860 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1664].w)) * _414) * 0.949999988079071044921875);
    float _1861 = _1860 * _1860;
    float _1862 = cbLight._m0[_1664].x + _493;
    float _1863 = cbLight._m0[_1664].y + _494;
    float _1864 = cbLight._m0[_1664].z + _495;
    float _1868 = inversesqrt(dot(vec3(_1862, _1863, _1864), vec3(_1862, _1863, _1864)));
    float _1869 = _1868 * _1862;
    float _1870 = _1868 * _1863;
    float _1871 = _1868 * _1864;
    float _1872 = dot(vec3(_410, _411, _412), vec3(cbLight._m0[_1664].xyz));
    float _3929 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
    float _1875 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _1876 = dot(vec3(_410, _411, _412), vec3(_1869, _1870, _1871));
    float _3940 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
    float _1879 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
    float _1880 = dot(vec3(cbLight._m0[_1664].xyz), vec3(_1869, _1870, _1871));
    float _3951 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
    float _1884 = _1861 * _1861;
    float _1888 = ((_1879 * _1879) * (_1884 + (-1.0))) + 1.0;
    float _1895 = exp2(log2(1.0 - (isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0)))) * 5.0);
    float _1902 = 1.0 - _1861;
    float _1912 = (0.5 / (((_1793 * ((_1875 * _1902) + _1861)) + 9.9999999392252902907785028219223e-09) + (((_1793 * _1902) + _1861) * _1875))) * _1875;
    float _3962 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
    float _1914 = (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * (_1884 / ((_1888 * _1888) * 3.141590118408203125));
    float _1924 = (((((_1895 * _1815) + _566) * cbLight._m0[_1849].x) * _1914) * _1650) + (((((_1814 * _1815) + _566) * cbLight._m0[_1764].x) * _1838) * _1660);
    float _1925 = (((((_1895 * _1817) + _568) * cbLight._m0[_1849].y) * _1914) * _1650) + (((((_1814 * _1817) + _568) * cbLight._m0[_1764].y) * _1838) * _1660);
    float _1926 = (((((_1895 * _1818) + _569) * cbLight._m0[_1849].z) * _1914) * _1650) + (((((_1814 * _1818) + _569) * cbLight._m0[_1764].z) * _1838) * _1660);
    float _1988;
    float _1990;
    float _1992;
    if (_1701)
    {
        _1988 = _1924;
        _1990 = _1925;
        _1992 = _1926;
    }
    else
    {
        uint _1994 = _1627 + 2u;
        uint _1998 = _1627 + 10u;
        float _2012 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1994].w)) * _414) * 0.949999988079071044921875);
        float _2013 = _2012 * _2012;
        float _2014 = cbLight._m0[_1994].x + _493;
        float _2015 = cbLight._m0[_1994].y + _494;
        float _2016 = cbLight._m0[_1994].z + _495;
        float _2020 = inversesqrt(dot(vec3(_2014, _2015, _2016), vec3(_2014, _2015, _2016)));
        float _2021 = _2020 * _2014;
        float _2022 = _2020 * _2015;
        float _2023 = _2020 * _2016;
        float _2024 = dot(vec3(_410, _411, _412), vec3(cbLight._m0[_1994].xyz));
        float _3973 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
        float _2027 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _2028 = dot(vec3(_410, _411, _412), vec3(_2021, _2022, _2023));
        float _3984 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
        float _2031 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _2032 = dot(vec3(cbLight._m0[_1994].xyz), vec3(_2021, _2022, _2023));
        float _3995 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
        float _2036 = _2013 * _2013;
        float _2040 = ((_2031 * _2031) * (_2036 + (-1.0))) + 1.0;
        float _2047 = exp2(log2(1.0 - (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0)))) * 5.0);
        float _2054 = 1.0 - _2013;
        float _2064 = (0.5 / (((_1793 * ((_2027 * _2054) + _2013)) + 9.9999999392252902907785028219223e-09) + (((_1793 * _2054) + _2013) * _2027))) * _2027;
        float _4006 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
        float _2066 = (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * (_2036 / ((_2040 * _2040) * 3.141590118408203125));
        float _2067 = isnan(1.0) ? _1642 : (isnan(_1642) ? 1.0 : min(_1642, 1.0));
        _1988 = (((((_2047 * _1815) + _566) * cbLight._m0[_1998].x) * _2066) * _2067) + _1924;
        _1990 = (((((_2047 * _1817) + _568) * cbLight._m0[_1998].y) * _2066) * _2067) + _1925;
        _1992 = (((((_2047 * _1818) + _569) * cbLight._m0[_1998].z) * _2066) * _2067) + _1926;
    }
    float _2102;
    float _2104;
    float _2106;
    if (_1719)
    {
        _2102 = _1988;
        _2104 = _1990;
        _2106 = _1992;
    }
    else
    {
        uint _2113 = _1627 + 3u;
        uint _2117 = _1627 + 11u;
        float _2131 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2113].w)) * _414) * 0.949999988079071044921875);
        float _2132 = _2131 * _2131;
        float _2133 = cbLight._m0[_2113].x + _493;
        float _2134 = cbLight._m0[_2113].y + _494;
        float _2135 = cbLight._m0[_2113].z + _495;
        float _2139 = inversesqrt(dot(vec3(_2133, _2134, _2135), vec3(_2133, _2134, _2135)));
        float _2140 = _2139 * _2133;
        float _2141 = _2139 * _2134;
        float _2142 = _2139 * _2135;
        float _2143 = dot(vec3(_410, _411, _412), vec3(cbLight._m0[_2113].xyz));
        float _4022 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
        float _2146 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _2147 = dot(vec3(_410, _411, _412), vec3(_2140, _2141, _2142));
        float _4033 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
        float _2150 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _2151 = dot(vec3(cbLight._m0[_2113].xyz), vec3(_2140, _2141, _2142));
        float _4044 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
        float _2155 = _2132 * _2132;
        float _2159 = ((_2150 * _2150) * (_2155 + (-1.0))) + 1.0;
        float _2166 = exp2(log2(1.0 - (isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0)))) * 5.0);
        float _2173 = 1.0 - _2132;
        float _2183 = (0.5 / (((_1793 * ((_2146 * _2173) + _2132)) + 9.9999999392252902907785028219223e-09) + (((_1793 * _2173) + _2132) * _2146))) * _2146;
        float _4055 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
        float _2185 = (isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) * (_2155 / ((_2159 * _2159) * 3.141590118408203125));
        float _2186 = isnan(1.0) ? _1643 : (isnan(_1643) ? 1.0 : min(_1643, 1.0));
        _2102 = (((((_2166 * _1815) + _566) * cbLight._m0[_2117].x) * _2185) * _2186) + _1988;
        _2104 = (((((_2166 * _1817) + _568) * cbLight._m0[_2117].y) * _2185) * _2186) + _1990;
        _2106 = (((((_2166 * _1818) + _569) * cbLight._m0[_2117].z) * _2185) * _2186) + _1992;
    }
    float _2320;
    float _2322;
    float _2324;
    float _2326;
    float _2328;
    float _2330;
    if (_1625.y == 0u)
    {
        float _2261 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2262 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2261;
        float _2263 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2261;
        float _2264 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2261;
        uvec4 _2276 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2277 = _2276.x;
        uint _2288 = uint((float(_2276.y) * floor(float(uint(cbSceneParam._m0[85u].y * _502) / _2277))) + floor(float(uint(cbSceneParam._m0[85u].x * _501) / _2277)));
        float _2298 = (log2(_2264 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2299 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
        uint _2302 = uint(isnan(14.0) ? _2299 : (isnan(_2299) ? 14.0 : min(_2299, 14.0)));
        uvec4 _2307 = texelFetch(g_lightClusterGridBuffer, int(((_2302 << 2u) + (_2288 << 6u)) >> 2u));
        uint _2308 = _2307.x;
        uint _2309 = _2276.z;
        float _2439;
        float _2441;
        float _2443;
        float _2445;
        float _2447;
        float _2449;
        if (((((1u << ((_2309 >> 4u) & 15u)) + 4294967295u) & _2308) == 0u) || ((_2309 & 240u) == 0u))
        {
            _2439 = 0.0;
            _2441 = 0.0;
            _2443 = 0.0;
            _2445 = 0.0;
            _2447 = 0.0;
            _2449 = 0.0;
        }
        else
        {
            float _2440;
            float _2442;
            float _2444;
            float _2446;
            float _2448;
            float _2450;
            float _2592 = 0.0;
            float _2593 = 0.0;
            float _2594 = 0.0;
            float _2595 = 0.0;
            float _2596 = 0.0;
            float _2597 = 0.0;
            uint _2598 = 0u;
            uint _2607;
            bool _2608;
            for (;;)
            {
                _2607 = texelFetch(g_lightClassification, int((((_2302 << 5u) + (_2288 << 9u)) + (_2598 << 2u)) >> 2u)).x;
                _2608 = _2607 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2608)
                {
                    frontier_phi_63_pred = _2597;
                    frontier_phi_63_pred_1 = _2596;
                    frontier_phi_63_pred_2 = _2595;
                    frontier_phi_63_pred_3 = _2594;
                    frontier_phi_63_pred_4 = _2593;
                    frontier_phi_63_pred_5 = _2592;
                }
                else
                {
                    float _2716;
                    float _2717;
                    float _2718;
                    float _2719;
                    float _2720;
                    float _2721;
                    uint _2722;
                    _2716 = _2592;
                    _2717 = _2593;
                    _2718 = _2594;
                    _2719 = _2595;
                    _2720 = _2596;
                    _2721 = _2597;
                    _2722 = _2607;
                    float _2648;
                    float _2649;
                    float _2650;
                    float _2651;
                    float _2652;
                    float _2653;
                    for (;;)
                    {
                        uint _2726 = uint(findLSB(_2722)) + (_2598 << 5u);
                        uint _2723 = (_2722 + 4294967295u) & _2722;
                        uint _2728 = _2726 * 48u;
                        vec4 _2742 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2728)).x, texelFetch(g_PointLightRenderingBuffer, int(_2728 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2728 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2728 + 3u)).x));
                        uint _2748 = (_2726 * 48u) + 4u;
                        vec4 _2761 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2748)).x, texelFetch(g_PointLightRenderingBuffer, int(_2748 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2748 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2748 + 3u)).x));
                        uint _2767 = (_2726 * 48u) + 8u;
                        vec3 _2778 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2767)).x, texelFetch(g_PointLightRenderingBuffer, int(_2767 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2767 + 2u)).x));
                        float _2782 = _2742.x - _2262;
                        float _2783 = _2742.y - _2263;
                        float _2784 = _2742.z - _2264;
                        float _2785 = dot(vec3(_2782, _2783, _2784), vec3(_2782, _2783, _2784));
                        float _2788 = inversesqrt(_2785);
                        float _2789 = _2788 * _2782;
                        float _2790 = _2788 * _2783;
                        float _2791 = _2788 * _2784;
                        float _2792 = dot(vec3(_521, _524, _527), vec3(_2789, _2790, _2791));
                        float _2797 = 1.0 - (_2785 * _2742.w);
                        float _4081 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
                        float _2798 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
                        float _2799 = sqrt(_2785) * _2761.w;
                        float _2802 = 1.39999997615814208984375 / (_2799 + 1.39999997615814208984375);
                        float _2803 = _2802 * _2802;
                        float _2806 = ((1.0 - _2803) * _2792) + _2803;
                        float _2809 = _2799 * _2799;
                        float _2813 = ((isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0))) * _2798) / ((_2809 * 0.699999988079071044921875) + 1.0);
                        float _2817 = (-0.0) - _2262;
                        float _2818 = (-0.0) - _2263;
                        float _2819 = (-0.0) - _2264;
                        float _2823 = inversesqrt(dot(vec3(_2817, _2818, _2819), vec3(_2817, _2818, _2819)));
                        float _2824 = _2823 * _2817;
                        float _2825 = _2823 * _2818;
                        float _2826 = _2823 * _2819;
                        float _2834 = exp2(log2(1.0 / ((_2809 * 3.5) + 5.0)) * 0.25);
                        float _2835 = 1.0 - _597;
                        float _2842 = sqrt(1.0 - ((1.0 - (_2835 * _2835)) * (1.0 - (_2834 * _2834))));
                        float _2843 = _2842 * _2842;
                        float _2844 = _2843 * _2843;
                        float _2845 = _2824 + _2789;
                        float _2846 = _2825 + _2790;
                        float _2847 = _2826 + _2791;
                        float _2851 = inversesqrt(dot(vec3(_2845, _2846, _2847), vec3(_2845, _2846, _2847)));
                        float _2855 = dot(vec3(_521, _524, _527), vec3(_2824, _2825, _2826));
                        float _4097 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
                        float _2858 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
                        float _2859 = dot(vec3(_521, _524, _527), vec3(_2851 * _2845, _2851 * _2846, _2851 * _2847));
                        float _4108 = isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0));
                        float _2862 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
                        float _2866 = ((_2862 * _2862) * (_2844 + (-1.0))) + 1.0;
                        float _2867 = _2802 * _2843;
                        float _2868 = _2867 * _2867;
                        float _2871 = ((1.0 - _2868) * _2792) + _2868;
                        float _4119 = isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0));
                        float _2872 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
                        float _2873 = 1.0 - _2843;
                        float _2883 = (0.5 / (((_2872 * ((_2858 * _2873) + _2843)) + 9.9999999392252902907785028219223e-09) + (((_2872 * _2873) + _2843) * _2858))) * _2872;
                        float _4130 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0));
                        float _2894 = (((_2844 * 3.1415927410125732421875) * (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0)))) / ((_2866 * _2866) * ((_2809 * 2.1991131305694580078125) + 3.141590118408203125))) * _2798;
                        _2651 = (_2813 * _2761.x) + _2719;
                        _2652 = (_2813 * _2761.y) + _2720;
                        _2653 = (_2813 * _2761.z) + _2721;
                        _2648 = (_2894 * _2778.x) + _2716;
                        _2649 = (_2894 * _2778.y) + _2717;
                        _2650 = (_2894 * _2778.z) + _2718;
                        if (_2723 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2716 = _2648;
                            _2717 = _2649;
                            _2718 = _2650;
                            _2719 = _2651;
                            _2720 = _2652;
                            _2721 = _2653;
                            _2722 = _2723;
                        }
                    }
                    frontier_phi_63_pred = _2653;
                    frontier_phi_63_pred_1 = _2652;
                    frontier_phi_63_pred_2 = _2651;
                    frontier_phi_63_pred_3 = _2650;
                    frontier_phi_63_pred_4 = _2649;
                    frontier_phi_63_pred_5 = _2648;
                }
                _2450 = frontier_phi_63_pred;
                _2448 = frontier_phi_63_pred_1;
                _2446 = frontier_phi_63_pred_2;
                _2444 = frontier_phi_63_pred_3;
                _2442 = frontier_phi_63_pred_4;
                _2440 = frontier_phi_63_pred_5;
                uint _2599 = _2598 + 1u;
                if (_2599 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2592 = _2440;
                    _2593 = _2442;
                    _2594 = _2444;
                    _2595 = _2446;
                    _2596 = _2448;
                    _2597 = _2450;
                    _2598 = _2599;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2439 = _2440;
            _2441 = _2442;
            _2443 = _2444;
            _2445 = _2446;
            _2447 = _2448;
            _2449 = _2450;
        }
        uvec4 _2453 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2454 = _2453.z;
        uint _2456 = (_2454 >> 8u) & 15u;
        float _2560;
        float _2562;
        float _2564;
        float _2566;
        float _2568;
        float _2570;
        if (((4294967295u << _2456) & _2308) == 0u)
        {
            _2560 = _2439;
            _2562 = _2441;
            _2564 = _2443;
            _2566 = _2445;
            _2568 = _2447;
            _2570 = _2449;
        }
        else
        {
            float _2585 = inversesqrt(dot(vec3(_2262, _2263, _2264), vec3(_2262, _2263, _2264)));
            float _2586 = _2585 * _2262;
            float _2587 = _2585 * _2263;
            float _2588 = _2585 * _2264;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2456 < ((_2454 >> 12u) & 15u))
            {
                float _2561;
                float _2563;
                float _2565;
                float _2567;
                float _2569;
                float _2571;
                float _2699 = _2439;
                float _2700 = _2441;
                float _2701 = _2443;
                float _2702 = _2445;
                float _2703 = _2447;
                float _2704 = _2449;
                uint _2705 = _2456;
                uint _2714;
                bool _2715;
                for (;;)
                {
                    _2714 = texelFetch(g_lightClassification, int((((_2302 << 5u) + (_2288 << 9u)) + (_2705 << 2u)) >> 2u)).x;
                    _2715 = _2714 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2715)
                    {
                        frontier_phi_69_pred = _2704;
                        frontier_phi_69_pred_1 = _2703;
                        frontier_phi_69_pred_2 = _2702;
                        frontier_phi_69_pred_3 = _2701;
                        frontier_phi_69_pred_4 = _2700;
                        frontier_phi_69_pred_5 = _2699;
                    }
                    else
                    {
                        float _2899;
                        float _2900;
                        float _2901;
                        float _2902;
                        float _2903;
                        float _2904;
                        float _3195;
                        float _3196;
                        float _3197;
                        float _3198;
                        float _3199;
                        float _3200;
                        float _2912 = _2699;
                        float _2913 = _2700;
                        float _2914 = _2701;
                        float _2915 = _2702;
                        float _2916 = _2703;
                        float _2917 = _2704;
                        uint _2918 = _2714;
                        uint _2919;
                        vec4 _2944;
                        float _2945;
                        vec4 _2960;
                        vec3 _2972;
                        vec4 _2988;
                        vec4 _3004;
                        float _3051;
                        bool _3052;
                        for (;;)
                        {
                            uint _2929 = ((_2705 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2918));
                            _2919 = (_2918 + 4294967295u) & _2918;
                            uint _2931 = _2929 * 40u;
                            _2944 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2931)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 3u)).x));
                            _2945 = _2944.w;
                            uint _2947 = (_2929 * 40u) + 4u;
                            _2960 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2947)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 3u)).x));
                            uint _2962 = (_2929 * 40u) + 8u;
                            _2972 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2962)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 2u)).x));
                            uint _2975 = (_2929 * 40u) + 16u;
                            _2988 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2975)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 3u)).x));
                            uint _2991 = (_2929 * 40u) + 20u;
                            _3004 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2991)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 3u)).x));
                            uint _3007 = (_2929 * 40u) + 24u;
                            vec4 _3020 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3007)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 3u)).x));
                            uint _3026 = (_2929 * 40u) + 28u;
                            vec4 _3039 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3026)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 3u)).x));
                            _3051 = fma(_2264, _3039.z, fma(_2263, _3039.y, _3039.x * _2262)) + _3039.w;
                            _3052 = !((fma(_2264, _3020.z, fma(_2263, _3020.y, _3020.x * _2262)) + _3020.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3052)
                            {
                                float _3079 = _2944.x - _2262;
                                float _3080 = _2944.y - _2263;
                                float _3081 = _2944.z - _2264;
                                float _3082 = dot(vec3(_3079, _3080, _3081), vec3(_3079, _3080, _3081));
                                float _3085 = inversesqrt(_3082);
                                float _3086 = _3085 * _3079;
                                float _3087 = _3085 * _3080;
                                float _3088 = _3085 * _3081;
                                float _3092 = 1.0 - (_3082 / (_2945 * _2945));
                                float _4141 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
                                float _3093 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
                                float _3097 = sqrt(_3082) * _2960.w;
                                float _3099 = 1.39999997615814208984375 / (_3097 + 1.39999997615814208984375);
                                float _3100 = _3099 * _3099;
                                float _3103 = ((1.0 - _3100) * dot(vec3(_3086, _3087, _3088), vec3(_521, _524, _527))) + _3100;
                                float _3106 = _3097 * _3097;
                                float _3110 = (fma(_2264, _2988.z, fma(_2263, _2988.y, _2988.x * _2262)) + _2988.w) / _3051;
                                float _3111 = (fma(_2264, _3004.z, fma(_2263, _3004.y, _3004.x * _2262)) + _3004.w) / _3051;
                                float _3115 = 1.0 - dot(vec2(_3110, _3111), vec2(_3110, _3111));
                                float _4157 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0));
                                float _3116 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
                                float _3117 = _3116 * (((isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : max(_3103, 0.0))) * _3093) / ((_3106 * 0.699999988079071044921875) + 1.0));
                                float _3129 = exp2(log2(1.0 / ((_3106 * 3.5) + 5.0)) * 0.25);
                                float _3130 = 1.0 - _597;
                                float _3137 = sqrt(1.0 - ((1.0 - (_3130 * _3130)) * (1.0 - (_3129 * _3129))));
                                float _3138 = _3137 * _3137;
                                float _3139 = _3138 * _3138;
                                float _3140 = _3086 - _2586;
                                float _3141 = _3087 - _2587;
                                float _3142 = _3088 - _2588;
                                float _3146 = inversesqrt(dot(vec3(_3140, _3141, _3142), vec3(_3140, _3141, _3142)));
                                float _3150 = dot(vec3(_521, _524, _527), vec3((-0.0) - _2586, (-0.0) - _2587, (-0.0) - _2588));
                                float _4168 = isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : max(_3150, 0.0));
                                float _3153 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
                                float _3154 = dot(vec3(_521, _524, _527), vec3(_3146 * _3140, _3146 * _3141, _3146 * _3142));
                                float _4179 = isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0));
                                float _3157 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
                                float _3161 = ((_3157 * _3157) * (_3139 + (-1.0))) + 1.0;
                                float _3162 = _3099 * _3138;
                                float _3163 = _3162 * _3162;
                                float _3169 = ((1.0 - _3163) * dot(vec3(_521, _524, _527), vec3(_3086, _3087, _3088))) + _3163;
                                float _4190 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0));
                                float _3170 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
                                float _3171 = 1.0 - _3138;
                                float _3181 = (0.5 / (((_3170 * ((_3153 * _3171) + _3138)) + 9.9999999392252902907785028219223e-09) + (((_3170 * _3171) + _3138) * _3153))) * _3170;
                                float _4201 = isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0));
                                float _3191 = (_3116 * _3093) * (((_3139 * 3.1415927410125732421875) * (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0)))) / ((_3161 * _3161) * ((_3106 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3117 * _2960.z;
                                frontier_phi_75_pred_1 = _3117 * _2960.y;
                                frontier_phi_75_pred_2 = _3117 * _2960.x;
                                frontier_phi_75_pred_3 = _3191 * _2972.z;
                                frontier_phi_75_pred_4 = _3191 * _2972.y;
                                frontier_phi_75_pred_5 = _3191 * _2972.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3200 = frontier_phi_75_pred;
                            _3199 = frontier_phi_75_pred_1;
                            _3198 = frontier_phi_75_pred_2;
                            _3197 = frontier_phi_75_pred_3;
                            _3196 = frontier_phi_75_pred_4;
                            _3195 = frontier_phi_75_pred_5;
                            _2902 = _3198 + _2915;
                            _2903 = _3199 + _2916;
                            _2904 = _3200 + _2917;
                            _2899 = _3195 + _2912;
                            _2900 = _3196 + _2913;
                            _2901 = _3197 + _2914;
                            if (_2919 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2912 = _2899;
                                _2913 = _2900;
                                _2914 = _2901;
                                _2915 = _2902;
                                _2916 = _2903;
                                _2917 = _2904;
                                _2918 = _2919;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2904;
                        frontier_phi_69_pred_1 = _2903;
                        frontier_phi_69_pred_2 = _2902;
                        frontier_phi_69_pred_3 = _2901;
                        frontier_phi_69_pred_4 = _2900;
                        frontier_phi_69_pred_5 = _2899;
                    }
                    _2571 = frontier_phi_69_pred;
                    _2569 = frontier_phi_69_pred_1;
                    _2567 = frontier_phi_69_pred_2;
                    _2565 = frontier_phi_69_pred_3;
                    _2563 = frontier_phi_69_pred_4;
                    _2561 = frontier_phi_69_pred_5;
                    uint _2706 = _2705 + 1u;
                    if (_2706 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2699 = _2561;
                        _2700 = _2563;
                        _2701 = _2565;
                        _2702 = _2567;
                        _2703 = _2569;
                        _2704 = _2571;
                        _2705 = _2706;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2571;
                frontier_phi_57_58_ladder_1 = _2569;
                frontier_phi_57_58_ladder_2 = _2567;
                frontier_phi_57_58_ladder_3 = _2565;
                frontier_phi_57_58_ladder_4 = _2563;
                frontier_phi_57_58_ladder_5 = _2561;
            }
            else
            {
                frontier_phi_57_58_ladder = _2449;
                frontier_phi_57_58_ladder_1 = _2447;
                frontier_phi_57_58_ladder_2 = _2445;
                frontier_phi_57_58_ladder_3 = _2443;
                frontier_phi_57_58_ladder_4 = _2441;
                frontier_phi_57_58_ladder_5 = _2439;
            }
            _2560 = frontier_phi_57_58_ladder_5;
            _2562 = frontier_phi_57_58_ladder_4;
            _2564 = frontier_phi_57_58_ladder_3;
            _2566 = frontier_phi_57_58_ladder_2;
            _2568 = frontier_phi_57_58_ladder_1;
            _2570 = frontier_phi_57_58_ladder;
        }
        float _2575 = isnan(1.0) ? _581 : (isnan(_581) ? 1.0 : min(_581, 1.0));
        _2320 = (_2575 * _2566) + _1757;
        _2322 = (_2575 * _2568) + _1759;
        _2324 = (_2575 * _2570) + _1761;
        _2326 = ((_2560 * _566) * _2575) + _2102;
        _2328 = ((_2562 * _568) * _2575) + _2104;
        _2330 = ((_2564 * _569) * _2575) + _2106;
    }
    else
    {
        _2320 = _1757;
        _2322 = _1759;
        _2324 = _1761;
        _2326 = _2102;
        _2328 = _2104;
        _2330 = _2106;
    }
    uint _2336 = _542 + uint(cbMatDynParam._m0[0u].w);
    float _2342 = (cbMatDynParam._m0[17u].y * _281) * cbInstanceData._m0[_2336].x;
    float _2343 = (cbMatDynParam._m0[17u].y * _282) * cbInstanceData._m0[_2336].y;
    float _2344 = (cbMatDynParam._m0[17u].y * _283) * cbInstanceData._m0[_2336].z;
    float _4217 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _4228 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _4239 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _4250 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _2362 = (((isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * (_2320 + ((isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0))) * _581))) + ((_2326 + ((isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0))) * _1391)) * cbPerFrame._m0[3u].x)) + _2342;
    float _2364 = (_2343 + ((_2328 + ((isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0))) * _1391)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * (_2322 + ((isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0))) * _581)));
    float _2366 = (_2344 + ((_2330 + ((isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0))) * _1391)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) * (_2324 + ((isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0))) * _581)));
    float _4276 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2379 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
    float _2384 = cbInstanceData._m0[_540 + 6u].w * (isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0)));
    float _2389 = _501 / cbSceneParam._m0[86u].x;
    float _2390 = _502 / cbSceneParam._m0[86u].y;
    vec4 _2404 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2389, _2390, (log2((isnan(cbSceneParam._m0[77u].w) ? _434 : (isnan(_434) ? cbSceneParam._m0[77u].w : min(_434, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2406 = _2404.x;
    float _2407 = _2404.y;
    float _2408 = _2404.z;
    float _2409 = _2404.w;
    float _2501;
    float _2503;
    float _2505;
    float _2507;
    if (_434 > cbSceneParam._m0[78u].w)
    {
        float _2464 = isnan(_434) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _434 : min(cbSceneParam._m0[80u].w, _434));
        float _2465 = _2464 / _434;
        float _2476 = _2465 * _486;
        float _2477 = _487 * _2465;
        float _2478 = (-0.0) - _2477;
        float _2479 = _2465 * _488;
        float _2481 = (cbSceneParam._m0[77u].w * _2478) / _2464;
        float _2482 = _2481 + cbSceneParam._m0[79u].w;
        float _2483 = cbSceneParam._m0[79u].w - _2477;
        float _2489 = sqrt(((_2476 * _2476) + (_2477 * _2477)) + (_2479 * _2479));
        float _2492 = (1.0 - (cbSceneParam._m0[77u].w / _2464)) * _2489;
        float _2497 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2499 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2661;
        if (abs((_2478 - _2481) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2661 = ((((_2482 > 0.0) ? exp2(_2497 * _2482) : (2.0 - exp2(_2499 * _2482))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2492;
        }
        else
        {
            float _2621 = 1.0 / cbSceneParam._m0[80u].x;
            float _2622 = isnan(_2483) ? _2482 : (isnan(_2482) ? _2483 : max(_2482, _2483));
            float _2623 = isnan(_2483) ? _2482 : (isnan(_2482) ? _2483 : min(_2482, _2483));
            float _2632 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : min(_2622, 0.0));
            float _2633 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : min(_2623, 0.0));
            _2661 = ((abs(_2489 / _2478) * cbSceneParam._m0[80u].y) * ((((_2632 - _2633) * 2.0) - ((exp2(_2497 * (isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0)))) - exp2(_2497 * (isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0))))) * _2621)) - ((exp2(_2499 * _2632) - exp2(_2499 * _2633)) * _2621))) + (_2492 * cbSceneParam._m0[80u].z);
        }
        vec4 _2663 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2389, _2390, 1.0), 0.0);
        float _2672 = exp2((_2661 * (-1.44269502162933349609375)) * (1.0 - _2663.w));
        float _2673 = log2(_2672);
        float _2689 = log2(_2409);
        _2501 = (exp2(_2689 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2673 * cbSceneParam._m0[78u].x)) * _2663.x) / cbSceneParam._m0[78u].x)) + _2406;
        _2503 = (exp2(_2689 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2673 * cbSceneParam._m0[78u].y)) * _2663.y) / cbSceneParam._m0[78u].y)) + _2407;
        _2505 = (exp2(_2689 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2673 * cbSceneParam._m0[78u].z)) * _2663.z) / cbSceneParam._m0[78u].z)) + _2408;
        _2507 = _2672 * _2409;
    }
    else
    {
        _2501 = _2406;
        _2503 = _2407;
        _2505 = _2408;
        _2507 = _2409;
    }
    float _2519 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2520 = _2519 == 3.0;
    float _2521 = log2(_2507);
    float _2525 = exp2(_2521 * cbSceneParam._m0[78u].x);
    float _2526 = exp2(_2521 * cbSceneParam._m0[78u].y);
    float _2527 = exp2(_2521 * cbSceneParam._m0[78u].z);
    float _2528 = _2525 * (isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0)));
    float _2529 = _2526 * (isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0)));
    float _2530 = _2527 * (isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0)));
    float _2539 = (_2519 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2539 * (_2520 ? _2528 : (_2528 + (cbSceneParam._m0[72u].w * _2501)));
    SV_Target.y = _2539 * (_2520 ? _2529 : (_2529 + (cbSceneParam._m0[72u].w * _2503)));
    SV_Target.z = _2539 * (_2520 ? _2530 : (_2530 + (cbSceneParam._m0[72u].w * _2505)));
    SV_Target.w = _2384;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2342) * _2379) * _2525) * _2539;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2343) * _2379) * _2526) * _2539;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2344) * _2379) * _2527) * _2539;
    SV_Target_1.w = _2384;
}


