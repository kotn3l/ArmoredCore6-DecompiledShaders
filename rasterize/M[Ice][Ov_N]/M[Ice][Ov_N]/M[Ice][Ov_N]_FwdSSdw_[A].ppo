#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Ice_Ov_N_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Ice_Ov_N_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Ice_Ov_N_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Ice_Ov_N_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Ice_Ov_N_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1067;
float _3616;
float _3617;
float _3618;
float _3619;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _194 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _195 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _196 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _202 = inversesqrt(dot(vec3(_194, _195, _196), vec3(_194, _195, _196)));
    float _203 = _202 * _194;
    float _204 = _202 * _195;
    float _205 = _202 * _196;
    float _209 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _210 = _209 * NORMAL.x;
    float _211 = _209 * NORMAL.y;
    float _212 = _209 * NORMAL.z;
    float _216 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _217 = _216 * TANGENT.x;
    float _218 = _216 * TANGENT.y;
    float _219 = _216 * TANGENT.z;
    float _252 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _256 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _260 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _264 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _274 = cbSceneParam._m0[71u].x - (_252 / _264);
    float _275 = cbSceneParam._m0[71u].y - (_256 / _264);
    float _276 = cbSceneParam._m0[71u].z - (_260 / _264);
    float _294 = inversesqrt(dot(vec3(_274, _275, _276), vec3(_274, _275, _276)));
    float _295 = _294 * _274;
    float _296 = _294 * _275;
    float _297 = _294 * _276;
    float _301 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _305 = dot(vec4(_295, _296, _297, 0.0), vec4(_301 * _210, _301 * _211, _301 * _212, 0.0));
    float _3628 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _313 = exp2(log2(1.0 - (isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0)))) * cbMtdParam._m0[12u].z);
    float _3639 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _314 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
    float _321 = (_314 * (cbMtdParam._m0[11u].x - cbMtdParam._m0[10u].x)) + cbMtdParam._m0[10u].x;
    float _322 = (_314 * (cbMtdParam._m0[11u].y - cbMtdParam._m0[10u].y)) + cbMtdParam._m0[10u].y;
    float _323 = (_314 * (cbMtdParam._m0[11u].z - cbMtdParam._m0[10u].z)) + cbMtdParam._m0[10u].z;
    vec4 _342 = texture(sampler2D(M_Ice_Ov_N_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _350 = (_342.x * 2.0) + (-1.0);
    float _352 = (_342.y * 2.0) + (-1.0);
    float _353 = dot(vec2(_350, _352), vec2(_350, _352));
    float _3650 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _358 = sqrt(1.0 - (isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0))));
    float _361 = fma(_358, _210, fma(_352, _217, _350 * _203));
    float _364 = fma(_358, _211, fma(_352, _218, _350 * _204));
    float _367 = fma(_358, _212, fma(_352, _219, _350 * _205));
    float _371 = inversesqrt(dot(vec3(_361, _364, _367), vec3(_361, _364, _367)));
    float _382 = cbMtdParam._m0[13u].y + dot(vec4(_371 * _361, _371 * _364, _371 * _367, 0.0), vec4(cbMtdParam._m0[14u].yzw, 0.0));
    float _3661 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _384 = (isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0))) * TEXCOORD_3.x;
    float _3672 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _385 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
    vec4 _397 = texture(sampler2D(M_Ice_Ov_N_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _416 = (((cbMtdParam._m0[9u].x * _397.x) - _321) * _385) + _321;
    float _417 = (((cbMtdParam._m0[9u].y * _397.y) - _322) * _385) + _322;
    float _418 = (((cbMtdParam._m0[9u].z * _397.z) - _323) * _385) + _323;
    float _423 = ((cbMtdParam._m0[14u].x - cbMtdParam._m0[12u].x) * _385) + cbMtdParam._m0[12u].x;
    float _425 = abs(_210);
    float _426 = abs(_211);
    float _427 = abs(_212);
    float _428 = _425 * _425;
    float _429 = _426 * _426;
    float _430 = _427 * _427;
    float _433 = _256 * 0.0500000007450580596923828125;
    float _444 = (cbTextureTilingScale._m0[4u].x * (_252 * 0.0500000007450580596923828125)) + cbTextureTilingScale._m0[4u].z;
    vec4 _447 = texture(sampler2D(M_Ice_Ov_N_snp_0_Texture2D_9, SS_BumpMap), vec2(_444, (cbTextureTilingScale._m0[4u].y * _433) + cbTextureTilingScale._m0[4u].w));
    float _454 = (cbTextureTilingScale._m0[4u].y * (_260 * 0.0500000007450580596923828125)) + cbTextureTilingScale._m0[4u].w;
    vec4 _455 = texture(sampler2D(M_Ice_Ov_N_snp_0_Texture2D_9, SS_BumpMap), vec2(_444, _454));
    vec4 _465 = texture(sampler2D(M_Ice_Ov_N_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _433) + cbTextureTilingScale._m0[4u].z, _454));
    vec4 _492 = texture(sampler2D(M_Ice_Ov_N_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    vec4 _511 = texture(sampler2D(M_Ice_Ov_N_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _517 = (_511.x * 2.0) + (-1.0);
    float _518 = (_511.y * 2.0) + (-1.0);
    float _3683 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _519 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
    float _524 = (_519 * _519) * (3.0 - (_519 * 2.0));
    float _534 = (((((((_455.x * _429) + (_447.x * _430)) + (_465.x * _428)) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].x) + _350) + (((_524 * (((_492.x * 2.0) + (-1.0)) - _517)) + _517) * cbMtdParam._m0[12u].y);
    float _535 = (((((((_455.y * _429) + (_447.y * _430)) + (_465.y * _428)) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].x) + _352) + (((_524 * (((_492.y * 2.0) + (-1.0)) - _518)) + _518) * cbMtdParam._m0[12u].y);
    float _538 = cbMtdParam._m0[13u].w + _385;
    float _3694 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _539 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
    float _543 = fma(_358, _210, fma(_535, _217, _534 * _203));
    float _546 = fma(_358, _211, fma(_535, _218, _534 * _204));
    float _549 = fma(_358, _212, fma(_535, _219, _534 * _205));
    float _553 = inversesqrt(dot(vec3(_543, _546, _549), vec3(_543, _546, _549)));
    float _554 = _553 * _543;
    float _555 = _553 * _546;
    float _556 = _553 * _549;
    float _3705 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _557 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
    float _3716 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _3727 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _3738 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _576 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _581 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _583 = _581.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _746 = sqrt(((_274 * _274) + (_275 * _275)) + (_276 * _276));
        float _752 = (cbMatDynParam._m0[5u].x * _746) + cbMatDynParam._m0[5u].y;
        float _3749 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
        float _753 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
        float _757 = (cbMatDynParam._m0[5u].z * _746) + cbMatDynParam._m0[5u].w;
        float _3760 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0))) - _753)) + _753) < ((_583 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _595 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _596 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _616 = fma(_556, cbSceneParam._m0[5u].z, fma(_555, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _554));
    float _619 = fma(_556, cbSceneParam._m0[6u].z, fma(_555, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _554));
    float _622 = fma(_556, cbSceneParam._m0[7u].z, fma(_555, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _554));
    uint _635 = uint(roundEven(NORMAL.w)) * 13u;
    uint _636 = _635 + 9u;
    uint _637 = _636 + uint(cbMatDynParam._m0[0u].w);
    float _643 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0)))) * cbInstanceData._m0[_637].x;
    float _644 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0)))) * cbInstanceData._m0[_637].y;
    float _645 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0)))) * cbInstanceData._m0[_637].z;
    float _3771 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _646 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
    float _3782 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _647 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
    float _3793 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _648 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
    vec4 _657 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _595, cbSceneParam._m0[86u].y * _596));
    float _660 = _657.x * TEXCOORD_3.w;
    float _661 = dot(vec3(_554, _555, _556), vec3(_295, _296, _297));
    float _664 = _661 * 2.0;
    float _668 = (_664 * _554) - _295;
    float _669 = (_664 * _555) - _296;
    float _670 = (_664 * _556) - _297;
    float _674 = abs(dot(vec3(_295, _296, _297), vec3(_554, _555, _556)));
    float _3804 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _675 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
    float _683 = 10.0 / (_576 + 10.0);
    float _684 = sqrt(_557);
    float _695 = exp2((_684 * 5.0) * log2(1.0 - (_675 * 0.999000012874603271484375))) / (4.0 - (_684 * 3.0));
    float _727 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _731 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _735 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1066;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _791 = fma(_735, cbModelParam._m0[26u].z, fma(_731, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _727));
        float _795 = fma(_735, cbModelParam._m0[27u].z, fma(_731, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _727));
        float _799 = fma(_735, cbModelParam._m0[28u].z, fma(_731, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _727));
        float _824 = _727 + _554;
        float _825 = _731 + _555;
        float _826 = _735 + _556;
        float _836 = fma(_826, cbModelParam._m0[26u].z, fma(_825, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _824)) - _791;
        float _837 = fma(_826, cbModelParam._m0[27u].z, fma(_825, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _824)) - _795;
        float _838 = fma(_826, cbModelParam._m0[28u].z, fma(_825, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _824)) - _799;
        float _842 = inversesqrt(dot(vec3(_836, _837, _838), vec3(_836, _837, _838)));
        float _855 = ((_842 * _836) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_791 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _856 = ((_842 * _837) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_795 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _857 = ((_842 * _838) / cbModelParam._m0[34u].z) + ((((((_799 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _860 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_855, _856, _857), 0.0);
        vec4 _867 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_855, _856, _857), 0.0);
        vec4 _874 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_855, _856, _857), 0.0);
        vec4 _881 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_855, _856, _857), 0.0);
        float _894 = exp2((_860.w + (-0.5)) * 20.0) * 2.0;
        float _895 = _894 * (_860.x + (-0.5));
        float _896 = _894 * (_860.y + (-0.5));
        float _897 = _894 * (_860.z + (-0.5));
        float _904 = exp2((_867.w + (-0.5)) * 20.0) * 2.0;
        float _905 = _904 * (_867.x + (-0.5));
        float _906 = _904 * (_867.y + (-0.5));
        float _907 = _904 * (_867.z + (-0.5));
        float _914 = exp2((_874.w + (-0.5)) * 20.0) * 2.0;
        float _915 = _914 * (_874.x + (-0.5));
        float _916 = _914 * (_874.y + (-0.5));
        float _917 = _914 * (_874.z + (-0.5));
        float _924 = exp2((_881.w + (-0.5)) * 20.0) * 2.0;
        float _925 = _924 * (_881.x + (-0.5));
        float _926 = _924 * (_881.y + (-0.5));
        float _927 = _924 * (_881.z + (-0.5));
        float _928 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _929 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _930 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _931 = _895 * 0.5;
        float _932 = _905 * 0.5;
        float _933 = _915 * 0.5;
        float _934 = dot(vec3(_931, _932, _933), vec3(_931, _932, _933));
        float _939 = (_934 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_934);
        float _948 = (dot(vec3(_554, _555, _556), vec3(_939 * _931, _939 * _932, _939 * _933)) + 1.0) * 0.5;
        float _3830 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _958 = sqrt(((_932 * _932) + (_931 * _931)) + (_933 * _933)) / (_928 + 9.9999997473787516355514526367188e-06);
        float _3841 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _959 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
        float _960 = _959 * 2.0;
        float _964 = (1.0 - _959) / (_959 + 1.0);
        float _3852 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _965 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
        float _974 = ((((1.0 - _965) * (_960 + 2.0)) * exp2(log2(isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0))) * (_960 + 1.0))) + _965) * _928;
        float _975 = _896 * 0.5;
        float _976 = _906 * 0.5;
        float _977 = _916 * 0.5;
        float _978 = dot(vec3(_975, _976, _977), vec3(_975, _976, _977));
        float _983 = (_978 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_978);
        float _991 = (dot(vec3(_554, _555, _556), vec3(_983 * _975, _983 * _976, _983 * _977)) + 1.0) * 0.5;
        float _3863 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _1000 = sqrt(((_976 * _976) + (_975 * _975)) + (_977 * _977)) / (_929 + 9.9999997473787516355514526367188e-06);
        float _3874 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1001 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _1002 = _1001 * 2.0;
        float _1006 = (1.0 - _1001) / (_1001 + 1.0);
        float _3885 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1007 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
        float _1016 = ((((1.0 - _1007) * (_1002 + 2.0)) * exp2(log2(isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0))) * (_1002 + 1.0))) + _1007) * _929;
        float _1017 = _897 * 0.5;
        float _1018 = _907 * 0.5;
        float _1019 = _917 * 0.5;
        float _1020 = dot(vec3(_1017, _1018, _1019), vec3(_1017, _1018, _1019));
        float _1025 = (_1020 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1020);
        float _1033 = (dot(vec3(_554, _555, _556), vec3(_1025 * _1017, _1025 * _1018, _1025 * _1019)) + 1.0) * 0.5;
        float _3896 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1042 = sqrt(((_1018 * _1018) + (_1017 * _1017)) + (_1019 * _1019)) / (_930 + 9.9999997473787516355514526367188e-06);
        float _3907 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1043 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _1044 = _1043 * 2.0;
        float _1048 = (1.0 - _1043) / (_1043 + 1.0);
        float _3918 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1049 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
        float _1058 = ((((1.0 - _1049) * (_1044 + 2.0)) * exp2(log2(isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0))) * (_1044 + 1.0))) + _1049) * _930;
        _1066 = _897;
        _1068 = _896;
        _1069 = _895;
        _1070 = _907;
        _1071 = _906;
        _1072 = _905;
        _1073 = _917;
        _1074 = _916;
        _1075 = _915;
        _1076 = _930;
        _1077 = _929;
        _1078 = _928;
        _1079 = cbModelParam._m0[36u].z * (isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0)));
        _1080 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0)));
        _1081 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0)));
    }
    else
    {
        _1066 = _1067;
        _1068 = _1067;
        _1069 = _1067;
        _1070 = _1067;
        _1071 = _1067;
        _1072 = _1067;
        _1073 = _1067;
        _1074 = _1067;
        _1075 = _1067;
        _1076 = _1067;
        _1077 = _1067;
        _1078 = _1067;
        _1079 = 0.0;
        _1080 = 0.0;
        _1081 = 0.0;
    }
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1110 = fma(_735, cbModelParam._m0[30u].z, fma(_731, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _727));
        float _1114 = fma(_735, cbModelParam._m0[31u].z, fma(_731, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _727));
        float _1118 = fma(_735, cbModelParam._m0[32u].z, fma(_731, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _727));
        float _1141 = _727 + _554;
        float _1142 = _731 + _555;
        float _1143 = _735 + _556;
        float _1153 = fma(_1143, cbModelParam._m0[30u].z, fma(_1142, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1141)) - _1110;
        float _1154 = fma(_1143, cbModelParam._m0[31u].z, fma(_1142, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1141)) - _1114;
        float _1155 = fma(_1143, cbModelParam._m0[32u].z, fma(_1142, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1141)) - _1118;
        float _1159 = inversesqrt(dot(vec3(_1153, _1154, _1155), vec3(_1153, _1154, _1155)));
        float _1172 = ((_1159 * _1153) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1110 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1173 = ((_1159 * _1154) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1114 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1174 = ((_1159 * _1155) / cbModelParam._m0[35u].z) + ((((((_1118 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1176 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1172, _1173, _1174), 0.0);
        vec4 _1183 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1172, _1173, _1174), 0.0);
        vec4 _1190 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1172, _1173, _1174), 0.0);
        vec4 _1197 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1172, _1173, _1174), 0.0);
        float _1209 = exp2((_1176.w + (-0.5)) * 20.0) * 2.0;
        float _1210 = _1209 * (_1176.x + (-0.5));
        float _1211 = _1209 * (_1176.y + (-0.5));
        float _1212 = _1209 * (_1176.z + (-0.5));
        float _1219 = exp2((_1183.w + (-0.5)) * 20.0) * 2.0;
        float _1220 = _1219 * (_1183.x + (-0.5));
        float _1221 = _1219 * (_1183.y + (-0.5));
        float _1222 = _1219 * (_1183.z + (-0.5));
        float _1229 = exp2((_1190.w + (-0.5)) * 20.0) * 2.0;
        float _1230 = _1229 * (_1190.x + (-0.5));
        float _1231 = _1229 * (_1190.y + (-0.5));
        float _1232 = _1229 * (_1190.z + (-0.5));
        float _1239 = exp2((_1197.w + (-0.5)) * 20.0) * 2.0;
        float _1240 = _1239 * (_1197.x + (-0.5));
        float _1241 = _1239 * (_1197.y + (-0.5));
        float _1242 = _1239 * (_1197.z + (-0.5));
        float _1243 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1244 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1245 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1246 = _1210 * 0.5;
        float _1247 = _1220 * 0.5;
        float _1248 = _1230 * 0.5;
        float _1249 = dot(vec3(_1246, _1247, _1248), vec3(_1246, _1247, _1248));
        float _1254 = (_1249 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1249);
        float _1262 = (dot(vec3(_554, _555, _556), vec3(_1254 * _1246, _1254 * _1247, _1254 * _1248)) + 1.0) * 0.5;
        float _3959 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1271 = sqrt(((_1247 * _1247) + (_1246 * _1246)) + (_1248 * _1248)) / (_1243 + 9.9999997473787516355514526367188e-06);
        float _3970 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
        float _1273 = _1272 * 2.0;
        float _1277 = (1.0 - _1272) / (_1272 + 1.0);
        float _3981 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
        float _1287 = ((((1.0 - _1278) * (_1273 + 2.0)) * exp2(log2(isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0))) * (_1273 + 1.0))) + _1278) * _1243;
        float _1288 = _1211 * 0.5;
        float _1289 = _1221 * 0.5;
        float _1290 = _1231 * 0.5;
        float _1291 = dot(vec3(_1288, _1289, _1290), vec3(_1288, _1289, _1290));
        float _1296 = (_1291 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1291);
        float _1304 = (dot(vec3(_554, _555, _556), vec3(_1296 * _1288, _1296 * _1289, _1296 * _1290)) + 1.0) * 0.5;
        float _3992 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1313 = sqrt(((_1289 * _1289) + (_1288 * _1288)) + (_1290 * _1290)) / (_1244 + 9.9999997473787516355514526367188e-06);
        float _4003 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _1315 = _1314 * 2.0;
        float _1319 = (1.0 - _1314) / (_1314 + 1.0);
        float _4014 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _1329 = ((((1.0 - _1320) * (_1315 + 2.0)) * exp2(log2(isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))) * (_1315 + 1.0))) + _1320) * _1244;
        float _1330 = _1212 * 0.5;
        float _1331 = _1222 * 0.5;
        float _1332 = _1232 * 0.5;
        float _1333 = dot(vec3(_1330, _1331, _1332), vec3(_1330, _1331, _1332));
        float _1338 = (_1333 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1333);
        float _1346 = (dot(vec3(_554, _555, _556), vec3(_1338 * _1330, _1338 * _1331, _1338 * _1332)) + 1.0) * 0.5;
        float _4025 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1355 = sqrt(((_1331 * _1331) + (_1330 * _1330)) + (_1332 * _1332)) / (_1245 + 9.9999997473787516355514526367188e-06);
        float _4036 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _1357 = _1356 * 2.0;
        float _1361 = (1.0 - _1356) / (_1356 + 1.0);
        float _4047 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _1371 = ((((1.0 - _1362) * (_1357 + 2.0)) * exp2(log2(isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0))) * (_1357 + 1.0))) + _1362) * _1245;
        _1379 = _1212;
        _1380 = _1211;
        _1381 = _1210;
        _1382 = _1222;
        _1383 = _1221;
        _1384 = _1220;
        _1385 = _1232;
        _1386 = _1231;
        _1387 = _1230;
        _1388 = _1245;
        _1389 = _1244;
        _1390 = _1243;
        _1391 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0)));
        _1392 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0)));
        _1393 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0)));
    }
    else
    {
        _1379 = _1067;
        _1380 = _1067;
        _1381 = _1067;
        _1382 = _1067;
        _1383 = _1067;
        _1384 = _1067;
        _1385 = _1067;
        _1386 = _1067;
        _1387 = _1067;
        _1388 = _1067;
        _1389 = _1067;
        _1390 = _1067;
        _1391 = 0.0;
        _1392 = 0.0;
        _1393 = 0.0;
    }
    float _1403 = (cbModelParam._m0[1u].x * (_1391 - _1079)) + _1079;
    float _1404 = (cbModelParam._m0[1u].x * (_1392 - _1080)) + _1080;
    float _1405 = (cbModelParam._m0[1u].x * (_1393 - _1081)) + _1081;
    float _1426 = fma(_1405, cbSceneParam._m0[89u].z, fma(_1404, cbSceneParam._m0[89u].y, _1403 * cbSceneParam._m0[89u].x));
    float _1429 = fma(_1405, cbSceneParam._m0[90u].z, fma(_1404, cbSceneParam._m0[90u].y, _1403 * cbSceneParam._m0[90u].x));
    float _1432 = fma(_1405, cbSceneParam._m0[91u].z, fma(_1404, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1403));
    float _1447 = _668 * 0.5;
    float _1448 = _669 * 0.5;
    float _1449 = _670 * 0.5;
    float _1450 = dot(vec4(_1447, _1448, _1449, 1.0), vec4(_1381, _1384, _1387, _1390));
    float _1453 = dot(vec4(_1447, _1448, _1449, 1.0), vec4(_1380, _1383, _1386, _1389));
    float _1456 = dot(vec4(_1447, _1448, _1449, 1.0), vec4(_1379, _1382, _1385, _1388));
    float _1490;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1463 = dot(vec4(_1447, _1448, _1449, 1.0), vec4(_1066, _1070, _1073, _1076));
        float _1467 = dot(vec4(_1447, _1448, _1449, 1.0), vec4(_1068, _1071, _1074, _1077));
        float _1471 = dot(vec4(_1447, _1448, _1449, 1.0), vec4(_1069, _1072, _1075, _1078));
        float _1478 = dot(vec4(cbModelParam._m0[39u]), vec4(_1447, _1448, _1449, 1.0));
        _1490 = dot(vec3(isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0)), isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0)), isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1478) ? 0.0 : (isnan(0.0) ? _1478 : max(0.0, _1478))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1490 = 1.0;
    }
    float _1501;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1492 = dot(vec4(cbModelParam._m0[40u]), vec4(_1447, _1448, _1449, 1.0));
        _1501 = dot(vec3(isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0)), isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0)), isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1492) ? 0.0 : (isnan(0.0) ? _1492 : max(0.0, _1492))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1501 = 1.0;
    }
    float _1505 = (_1501 * cbModelParam._m0[1u].x) + (_1490 * (1.0 - cbModelParam._m0[1u].x));
    float _1515 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _557);
    float _1516 = isnan(_1515) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1515 : min(cbModelParam._m0[25u].z, _1515));
    float _1596;
    float _1598;
    float _1600;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1563 = fma(_735, cbModelParam._m0[13u].z, fma(_731, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _727)) + cbModelParam._m0[13u].w;
        float _1567 = fma(_735, cbModelParam._m0[14u].z, fma(_731, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _727)) + cbModelParam._m0[14u].w;
        float _1571 = fma(_735, cbModelParam._m0[15u].z, fma(_731, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _727)) + cbModelParam._m0[15u].w;
        float _1574 = fma(_670, cbModelParam._m0[13u].z, fma(_669, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _668));
        float _1577 = fma(_670, cbModelParam._m0[14u].z, fma(_669, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _668));
        float _1580 = fma(_670, cbModelParam._m0[15u].z, fma(_669, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _668));
        float _1608;
        if (_1574 > 0.0)
        {
            _1608 = abs((1.0 - _1563) / _1574);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1574 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1563 + 1.0) / _1574);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1608 = frontier_phi_17_15_ladder;
        }
        float _1885;
        if (_1577 > 0.0)
        {
            _1885 = abs((1.0 - _1567) / _1577);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1577 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1567 + 1.0) / _1577);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1885 = frontier_phi_26_22_ladder;
        }
        float _2131;
        if (_1580 > 0.0)
        {
            _2131 = abs((1.0 - _1571) / _1580);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1580 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1571 + 1.0) / _1580);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2131 = frontier_phi_38_33_ladder;
        }
        float _2133 = isnan(_1885) ? _1608 : (isnan(_1608) ? _1885 : min(_1608, _1885));
        float _2134 = isnan(_2131) ? _2133 : (isnan(_2133) ? _2131 : min(_2133, _2131));
        float _2138 = (_2134 * _1574) + _1563;
        float _2139 = (_2134 * _1577) + _1567;
        float _2140 = (_2134 * _1580) + _1571;
        float _2141 = _2134 * 9.9999997473787516355514526367188e-05;
        float _2143 = (-1.0) - _2141;
        float _2145 = _2141 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2140 > _2145) || ((_2140 < _2143) || ((_2139 > _2145) || ((_2139 < _2143) || ((_2138 < _2143) || (_2138 > _2145))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2264 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2140, cbModelParam._m0[9u].z, fma(_2139, cbModelParam._m0[9u].y, _2138 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2140, cbModelParam._m0[10u].z, fma(_2139, cbModelParam._m0[10u].y, _2138 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2140, cbModelParam._m0[11u].z, fma(_2139, cbModelParam._m0[11u].y, _2138 * cbModelParam._m0[11u].x))), _1516);
            frontier_phi_16_38_ladder = _2264.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2264.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2264.x * cbModelParam._m0[1u].y;
        }
        _1596 = frontier_phi_16_38_ladder_2;
        _1598 = frontier_phi_16_38_ladder_1;
        _1600 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1584 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_668, _669, _670), _1516);
        _1596 = _1584.x * cbModelParam._m0[1u].y;
        _1598 = _1584.y * cbModelParam._m0[1u].y;
        _1600 = _1584.z * cbModelParam._m0[1u].y;
    }
    float _1604 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _557);
    float _1605 = isnan(_1604) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1604 : min(cbModelParam._m0[25u].w, _1604));
    float _1698;
    float _1700;
    float _1702;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1662 = fma(_735, cbModelParam._m0[21u].z, fma(_731, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _727)) + cbModelParam._m0[21u].w;
        float _1666 = fma(_735, cbModelParam._m0[22u].z, fma(_731, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _727)) + cbModelParam._m0[22u].w;
        float _1670 = fma(_735, cbModelParam._m0[23u].z, fma(_731, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _727)) + cbModelParam._m0[23u].w;
        float _1673 = fma(_670, cbModelParam._m0[21u].z, fma(_669, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _668));
        float _1676 = fma(_670, cbModelParam._m0[22u].z, fma(_669, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _668));
        float _1679 = fma(_670, cbModelParam._m0[23u].z, fma(_669, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _668));
        float _1890;
        if (_1673 > 0.0)
        {
            _1890 = abs((1.0 - _1662) / _1673);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1673 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1662 + 1.0) / _1673);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1890 = frontier_phi_28_24_ladder;
        }
        float _2158;
        if (_1676 > 0.0)
        {
            _2158 = abs((1.0 - _1666) / _1676);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1676 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1666 + 1.0) / _1676);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2158 = frontier_phi_40_35_ladder;
        }
        float _2363;
        if (_1679 > 0.0)
        {
            _2363 = abs((1.0 - _1670) / _1679);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1679 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1670 + 1.0) / _1679);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2363 = frontier_phi_49_46_ladder;
        }
        float _2365 = isnan(_2158) ? _1890 : (isnan(_1890) ? _2158 : min(_1890, _2158));
        float _2366 = isnan(_2363) ? _2365 : (isnan(_2365) ? _2363 : min(_2365, _2363));
        float _2370 = (_2366 * _1673) + _1662;
        float _2371 = (_2366 * _1676) + _1666;
        float _2372 = (_2366 * _1679) + _1670;
        float _2373 = _2366 * 9.9999997473787516355514526367188e-05;
        float _2374 = (-1.0) - _2373;
        float _2376 = _2373 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2372 > _2376) || ((_2372 < _2374) || ((_2371 > _2376) || ((_2371 < _2374) || ((_2370 < _2374) || (_2370 > _2376))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2647 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2372, cbModelParam._m0[17u].z, fma(_2371, cbModelParam._m0[17u].y, _2370 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2372, cbModelParam._m0[18u].z, fma(_2371, cbModelParam._m0[18u].y, _2370 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2372, cbModelParam._m0[19u].z, fma(_2371, cbModelParam._m0[19u].y, _2370 * cbModelParam._m0[19u].x))), _1605);
            frontier_phi_25_49_ladder = _2647.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2647.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2647.x * cbModelParam._m0[1u].z;
        }
        _1698 = frontier_phi_25_49_ladder_2;
        _1700 = frontier_phi_25_49_ladder_1;
        _1702 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1682 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_668, _669, _670), _1605);
        _1698 = _1682.x * cbModelParam._m0[1u].z;
        _1700 = _1682.y * cbModelParam._m0[1u].z;
        _1702 = _1682.z * cbModelParam._m0[1u].z;
    }
    float _1714 = ((((1.0 - _695) * ((_684 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_695 * _684)) * _660;
    float _1715 = _1714 * ((cbModelParam._m0[1u].w * (_1698 - _1596)) + _1596);
    float _1716 = _1714 * ((cbModelParam._m0[1u].w * (_1700 - _1598)) + _1598);
    float _1717 = _1714 * ((cbModelParam._m0[1u].w * (_1702 - _1600)) + _1600);
    float _1720 = fma(_1717, cbSceneParam._m0[89u].z, fma(_1716, cbSceneParam._m0[89u].y, _1715 * cbSceneParam._m0[89u].x));
    float _1723 = fma(_1717, cbSceneParam._m0[90u].z, fma(_1716, cbSceneParam._m0[90u].y, _1715 * cbSceneParam._m0[90u].x));
    float _1726 = fma(_1717, cbSceneParam._m0[91u].z, fma(_1716, cbSceneParam._m0[91u].y, _1715 * cbSceneParam._m0[91u].x));
    float _1737 = _595 / cbSceneParam._m0[86u].x;
    float _1745 = (cbSceneParam._m0[88u].y * (1.0 - _557)) + cbSceneParam._m0[88u].z;
    float _4173 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
    float _1747 = (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) * 5.0;
    float _1752 = (_683 * cbMtdParam._m0[12u].w) * dot(vec3(_554, _555, _556), vec3(1.0, 0.0, 0.0));
    vec4 _1762 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1752 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1752 + _1737) * cbSceneParam._m0[86u].x, _596), _1747).w) + _1737) * cbSceneParam._m0[86u].x, _596), _1747);
    float _1778 = 1.0 - _1762.w;
    vec4 _1786 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_595, _596));
    float _1788 = _1786.w;
    float _1800 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1788);
    float _1801 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1788);
    float _1802 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1788);
    uvec4 _1806 = floatBitsToUint(cbInstanceData._m0[_635 + 5u]);
    uint _1808 = _1806.x * 14u;
    uint _1809 = _1808 + 13u;
    float _1816 = _660 + (-1.0);
    float _1821 = (cbLight._m0[_1809].x * _1816) + 1.0;
    float _1822 = (cbLight._m0[_1809].y * _1816) + 1.0;
    float _1823 = (cbLight._m0[_1809].z * _1816) + 1.0;
    float _1824 = (cbLight._m0[_1809].w * _1816) + 1.0;
    uint _1825 = _1808 + 5u;
    float _1831 = isnan(1.0) ? _1822 : (isnan(_1822) ? 1.0 : min(_1822, 1.0));
    uint _1835 = _1808 + 4u;
    float _1844 = isnan(1.0) ? _1821 : (isnan(_1821) ? 1.0 : min(_1821, 1.0));
    uint _1848 = _1808 | 1u;
    float _1859 = dot(vec3(cbLight._m0[_1808].xyz), vec3(_554, _555, _556));
    float _1862 = dot(vec3(cbLight._m0[_1848].xyz), vec3(_554, _555, _556));
    float _4194 = isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0));
    float _4205 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
    float _1867 = (isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0))) * 0.3183098733425140380859375;
    float _1869 = (isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0))) * 0.3183098733425140380859375;
    float _1876 = ((cbLight._m0[_1825].x * _1831) * _1869) + (((cbLight._m0[_1835].x * _1800) * _1844) * _1867);
    float _1877 = ((_1831 * cbLight._m0[_1825].y) * _1869) + (((cbLight._m0[_1835].y * _1801) * _1844) * _1867);
    float _1878 = ((_1831 * cbLight._m0[_1825].z) * _1869) + (((cbLight._m0[_1835].z * _1802) * _1844) * _1867);
    uvec4 _1882 = floatBitsToUint(cbLight._m0[_1808 + 12u]);
    bool _1884 = _1882.x == 0u;
    float _1895;
    float _1897;
    float _1899;
    if (_1884)
    {
        _1895 = _1876;
        _1897 = _1877;
        _1899 = _1878;
    }
    else
    {
        uint _1903 = _1808 + 6u;
        float _1919 = (dot(vec3(cbLight._m0[_1808 + 2u].xyz), vec3(_554, _555, _556)) * 0.5) + 0.5;
        float _1920 = _1919 * _1919;
        float _4216 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
        float _1921 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _1922 = isnan(1.0) ? _1823 : (isnan(_1823) ? 1.0 : min(_1823, 1.0));
        _1895 = (((cbLight._m0[_1903].x * 0.3183098733425140380859375) * _1921) * _1922) + _1876;
        _1897 = (((cbLight._m0[_1903].y * 0.3183098733425140380859375) * _1921) * _1922) + _1877;
        _1899 = (((cbLight._m0[_1903].z * 0.3183098733425140380859375) * _1921) * _1922) + _1878;
    }
    bool _1902 = _1882.y == 0u;
    float _1940;
    float _1942;
    float _1944;
    if (_1902)
    {
        _1940 = _1895;
        _1942 = _1897;
        _1944 = _1899;
    }
    else
    {
        uint _2102 = _1808 + 7u;
        float _2118 = (dot(vec3(cbLight._m0[_1808 + 3u].xyz), vec3(_554, _555, _556)) * 0.5) + 0.5;
        float _2119 = _2118 * _2118;
        float _4232 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
        float _2120 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _2121 = isnan(1.0) ? _1824 : (isnan(_1824) ? 1.0 : min(_1824, 1.0));
        _1940 = (((cbLight._m0[_2102].x * 0.3183098733425140380859375) * _2120) * _2121) + _1895;
        _1942 = (((cbLight._m0[_2102].y * 0.3183098733425140380859375) * _2120) * _2121) + _1897;
        _1944 = (((cbLight._m0[_2102].z * 0.3183098733425140380859375) * _2120) * _2121) + _1899;
    }
    uint _1947 = _1808 + 8u;
    float _1960 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1808].w)) * _557) * 0.949999988079071044921875);
    float _1961 = _1960 * _1960;
    float _1962 = cbLight._m0[_1808].x + _295;
    float _1963 = cbLight._m0[_1808].y + _296;
    float _1964 = cbLight._m0[_1808].z + _297;
    float _1968 = inversesqrt(dot(vec3(_1962, _1963, _1964), vec3(_1962, _1963, _1964)));
    float _1969 = _1968 * _1962;
    float _1970 = _1968 * _1963;
    float _1971 = _1968 * _1964;
    float _1972 = dot(vec3(_554, _555, _556), vec3(cbLight._m0[_1808].xyz));
    float _4248 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
    float _1975 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
    float _4259 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _1976 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
    float _1977 = dot(vec3(_554, _555, _556), vec3(_1969, _1970, _1971));
    float _4270 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
    float _1980 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
    float _1981 = dot(vec3(cbLight._m0[_1808].xyz), vec3(_1969, _1970, _1971));
    float _4281 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
    float _1985 = _1961 * _1961;
    float _1989 = ((_1980 * _1980) * (_1985 + (-1.0))) + 1.0;
    float _2000 = (exp2(log2(1.0 - (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2001 = 1.0 - _1961;
    float _2012 = (0.5 / (((_1976 * ((_1975 * _2001) + _1961)) + 9.9999999392252902907785028219223e-09) + (((_1976 * _2001) + _1961) * _1975))) * _1975;
    float _4292 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
    float _2014 = (isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0))) * (_1985 / ((_1989 * _1989) * 3.141590118408203125));
    uint _2028 = _1808 + 9u;
    float _2039 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1848].w)) * _557) * 0.949999988079071044921875);
    float _2040 = _2039 * _2039;
    float _2041 = cbLight._m0[_1848].x + _295;
    float _2042 = cbLight._m0[_1848].y + _296;
    float _2043 = cbLight._m0[_1848].z + _297;
    float _2047 = inversesqrt(dot(vec3(_2041, _2042, _2043), vec3(_2041, _2042, _2043)));
    float _2048 = _2047 * _2041;
    float _2049 = _2047 * _2042;
    float _2050 = _2047 * _2043;
    float _2051 = dot(vec3(_554, _555, _556), vec3(cbLight._m0[_1848].xyz));
    float _4303 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
    float _2054 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
    float _2055 = dot(vec3(_554, _555, _556), vec3(_2048, _2049, _2050));
    float _4314 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
    float _2058 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
    float _2059 = dot(vec3(cbLight._m0[_1848].xyz), vec3(_2048, _2049, _2050));
    float _4325 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2063 = _2040 * _2040;
    float _2067 = ((_2058 * _2058) * (_2063 + (-1.0))) + 1.0;
    float _2076 = (exp2(log2(1.0 - (isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2077 = 1.0 - _2040;
    float _2087 = (0.5 / (((_1976 * ((_2054 * _2077) + _2040)) + 9.9999999392252902907785028219223e-09) + (((_1976 * _2077) + _2040) * _2054))) * _2054;
    float _4336 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
    float _2089 = (isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0))) * (_2063 / ((_2067 * _2067) * 3.141590118408203125));
    float _2099 = (((_2076 * cbLight._m0[_2028].x) * _2089) * _1831) + ((((cbLight._m0[_1947].x * _1800) * _2000) * _2014) * _1844);
    float _2100 = (((_2076 * cbLight._m0[_2028].y) * _2089) * _1831) + ((((cbLight._m0[_1947].y * _1801) * _2000) * _2014) * _1844);
    float _2101 = (((_2076 * cbLight._m0[_2028].z) * _2089) * _1831) + ((((cbLight._m0[_1947].z * _1802) * _2000) * _2014) * _1844);
    float _2163;
    float _2165;
    float _2167;
    if (_1884)
    {
        _2163 = _2099;
        _2165 = _2100;
        _2167 = _2101;
    }
    else
    {
        uint _2169 = _1808 + 2u;
        uint _2173 = _1808 + 10u;
        float _2187 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2169].w)) * _557) * 0.949999988079071044921875);
        float _2188 = _2187 * _2187;
        float _2189 = cbLight._m0[_2169].x + _295;
        float _2190 = cbLight._m0[_2169].y + _296;
        float _2191 = cbLight._m0[_2169].z + _297;
        float _2195 = inversesqrt(dot(vec3(_2189, _2190, _2191), vec3(_2189, _2190, _2191)));
        float _2196 = _2195 * _2189;
        float _2197 = _2195 * _2190;
        float _2198 = _2195 * _2191;
        float _2199 = dot(vec3(_554, _555, _556), vec3(cbLight._m0[_2169].xyz));
        float _4347 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
        float _2202 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
        float _2203 = dot(vec3(_554, _555, _556), vec3(_2196, _2197, _2198));
        float _4358 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
        float _2206 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
        float _2207 = dot(vec3(cbLight._m0[_2169].xyz), vec3(_2196, _2197, _2198));
        float _4369 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
        float _2211 = _2188 * _2188;
        float _2215 = ((_2206 * _2206) * (_2211 + (-1.0))) + 1.0;
        float _2224 = (exp2(log2(1.0 - (isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2225 = 1.0 - _2188;
        float _2235 = (0.5 / (((_1976 * ((_2202 * _2225) + _2188)) + 9.9999999392252902907785028219223e-09) + (((_1976 * _2225) + _2188) * _2202))) * _2202;
        float _4380 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
        float _2237 = (isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0))) * (_2211 / ((_2215 * _2215) * 3.141590118408203125));
        float _2238 = isnan(1.0) ? _1823 : (isnan(_1823) ? 1.0 : min(_1823, 1.0));
        _2163 = (((_2224 * cbLight._m0[_2173].x) * _2237) * _2238) + _2099;
        _2165 = (((_2224 * cbLight._m0[_2173].y) * _2237) * _2238) + _2100;
        _2167 = (((_2224 * cbLight._m0[_2173].z) * _2237) * _2238) + _2101;
    }
    float _2273;
    float _2275;
    float _2277;
    if (_1902)
    {
        _2273 = _2163;
        _2275 = _2165;
        _2277 = _2167;
    }
    else
    {
        uint _2284 = _1808 + 3u;
        uint _2288 = _1808 + 11u;
        float _2302 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2284].w)) * _557) * 0.949999988079071044921875);
        float _2303 = _2302 * _2302;
        float _2304 = cbLight._m0[_2284].x + _295;
        float _2305 = cbLight._m0[_2284].y + _296;
        float _2306 = cbLight._m0[_2284].z + _297;
        float _2310 = inversesqrt(dot(vec3(_2304, _2305, _2306), vec3(_2304, _2305, _2306)));
        float _2311 = _2310 * _2304;
        float _2312 = _2310 * _2305;
        float _2313 = _2310 * _2306;
        float _2314 = dot(vec3(_554, _555, _556), vec3(cbLight._m0[_2284].xyz));
        float _4396 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
        float _2317 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
        float _2318 = dot(vec3(_554, _555, _556), vec3(_2311, _2312, _2313));
        float _4407 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
        float _2321 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
        float _2322 = dot(vec3(cbLight._m0[_2284].xyz), vec3(_2311, _2312, _2313));
        float _4418 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
        float _2326 = _2303 * _2303;
        float _2330 = ((_2321 * _2321) * (_2326 + (-1.0))) + 1.0;
        float _2339 = (exp2(log2(1.0 - (isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2340 = 1.0 - _2303;
        float _2350 = (0.5 / (((_1976 * ((_2317 * _2340) + _2303)) + 9.9999999392252902907785028219223e-09) + (((_1976 * _2340) + _2303) * _2317))) * _2317;
        float _4429 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
        float _2352 = (isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0))) * (_2326 / ((_2330 * _2330) * 3.141590118408203125));
        float _2353 = isnan(1.0) ? _1824 : (isnan(_1824) ? 1.0 : min(_1824, 1.0));
        _2273 = (((_2339 * cbLight._m0[_2288].x) * _2352) * _2353) + _2163;
        _2275 = (((_2339 * cbLight._m0[_2288].y) * _2352) * _2353) + _2165;
        _2277 = (((_2339 * cbLight._m0[_2288].z) * _2352) * _2353) + _2167;
    }
    float _2488;
    float _2490;
    float _2492;
    float _2494;
    float _2496;
    float _2498;
    if (_1806.y == 0u)
    {
        float _2428 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2429 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2428;
        float _2430 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2428;
        float _2431 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2428;
        uvec4 _2443 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2444 = _2443.x;
        uint _2455 = uint((float(_2443.y) * floor(float(uint(cbSceneParam._m0[85u].y * _596) / _2444))) + floor(float(uint(cbSceneParam._m0[85u].x * _595) / _2444)));
        float _2465 = (log2(_2431 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2466 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
        uint _2469 = uint(isnan(14.0) ? _2466 : (isnan(_2466) ? 14.0 : min(_2466, 14.0)));
        uvec4 _2474 = texelFetch(g_lightClusterGridBuffer, int(((_2469 << 2u) + (_2455 << 6u)) >> 2u));
        uint _2475 = _2474.x;
        uint _2476 = _2443.z;
        float _2652;
        float _2654;
        float _2656;
        float _2658;
        float _2660;
        float _2662;
        if (((((1u << ((_2476 >> 4u) & 15u)) + 4294967295u) & _2475) == 0u) || ((_2476 & 240u) == 0u))
        {
            _2652 = 0.0;
            _2654 = 0.0;
            _2656 = 0.0;
            _2658 = 0.0;
            _2660 = 0.0;
            _2662 = 0.0;
        }
        else
        {
            float _2653;
            float _2655;
            float _2657;
            float _2659;
            float _2661;
            float _2663;
            float _2836 = 0.0;
            float _2837 = 0.0;
            float _2838 = 0.0;
            float _2839 = 0.0;
            float _2840 = 0.0;
            float _2841 = 0.0;
            uint _2842 = 0u;
            uint _2851;
            bool _2852;
            for (;;)
            {
                _2851 = texelFetch(g_lightClassification, int((((_2469 << 5u) + (_2455 << 9u)) + (_2842 << 2u)) >> 2u)).x;
                _2852 = _2851 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2852)
                {
                    frontier_phi_66_pred = _2836;
                    frontier_phi_66_pred_1 = _2841;
                    frontier_phi_66_pred_2 = _2840;
                    frontier_phi_66_pred_3 = _2839;
                    frontier_phi_66_pred_4 = _2838;
                    frontier_phi_66_pred_5 = _2837;
                }
                else
                {
                    float _2981;
                    float _2982;
                    float _2983;
                    float _2984;
                    float _2985;
                    float _2986;
                    uint _2987;
                    _2981 = _2836;
                    _2982 = _2837;
                    _2983 = _2838;
                    _2984 = _2839;
                    _2985 = _2840;
                    _2986 = _2841;
                    _2987 = _2851;
                    float _2908;
                    float _2909;
                    float _2910;
                    float _2911;
                    float _2912;
                    float _2913;
                    for (;;)
                    {
                        uint _2991 = uint(findLSB(_2987)) + (_2842 << 5u);
                        uint _2988 = (_2987 + 4294967295u) & _2987;
                        uint _2993 = _2991 * 48u;
                        vec4 _3007 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2993)).x, texelFetch(g_PointLightRenderingBuffer, int(_2993 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2993 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2993 + 3u)).x));
                        uint _3013 = (_2991 * 48u) + 4u;
                        vec4 _3026 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3013)).x, texelFetch(g_PointLightRenderingBuffer, int(_3013 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3013 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3013 + 3u)).x));
                        uint _3032 = (_2991 * 48u) + 8u;
                        vec3 _3043 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3032)).x, texelFetch(g_PointLightRenderingBuffer, int(_3032 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3032 + 2u)).x));
                        float _3047 = _3007.x - _2429;
                        float _3048 = _3007.y - _2430;
                        float _3049 = _3007.z - _2431;
                        float _3050 = dot(vec3(_3047, _3048, _3049), vec3(_3047, _3048, _3049));
                        float _3053 = inversesqrt(_3050);
                        float _3054 = _3053 * _3047;
                        float _3055 = _3053 * _3048;
                        float _3056 = _3053 * _3049;
                        float _3057 = dot(vec3(_616, _619, _622), vec3(_3054, _3055, _3056));
                        float _3062 = 1.0 - (_3050 * _3007.w);
                        float _4455 = isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0));
                        float _3063 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
                        float _3064 = sqrt(_3050) * _3026.w;
                        float _3067 = 1.39999997615814208984375 / (_3064 + 1.39999997615814208984375);
                        float _3068 = _3067 * _3067;
                        float _3071 = ((1.0 - _3068) * _3057) + _3068;
                        float _3074 = _3064 * _3064;
                        float _3078 = ((isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0))) * _3063) / ((_3074 * 0.699999988079071044921875) + 1.0);
                        float _3082 = (-0.0) - _2429;
                        float _3083 = (-0.0) - _2430;
                        float _3084 = (-0.0) - _2431;
                        float _3088 = inversesqrt(dot(vec3(_3082, _3083, _3084), vec3(_3082, _3083, _3084)));
                        float _3089 = _3088 * _3082;
                        float _3090 = _3088 * _3083;
                        float _3091 = _3088 * _3084;
                        float _3099 = exp2(log2(1.0 / ((_3074 * 3.5) + 5.0)) * 0.25);
                        float _3100 = 1.0 - _684;
                        float _3107 = sqrt(1.0 - ((1.0 - (_3100 * _3100)) * (1.0 - (_3099 * _3099))));
                        float _3108 = _3107 * _3107;
                        float _3109 = _3108 * _3108;
                        float _3110 = _3089 + _3054;
                        float _3111 = _3090 + _3055;
                        float _3112 = _3091 + _3056;
                        float _3116 = inversesqrt(dot(vec3(_3110, _3111, _3112), vec3(_3110, _3111, _3112)));
                        float _3120 = dot(vec3(_616, _619, _622), vec3(_3089, _3090, _3091));
                        float _4471 = isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0));
                        float _3123 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
                        float _3124 = dot(vec3(_616, _619, _622), vec3(_3116 * _3110, _3116 * _3111, _3116 * _3112));
                        float _4482 = isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0));
                        float _3127 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
                        float _3131 = ((_3127 * _3127) * (_3109 + (-1.0))) + 1.0;
                        float _3132 = _3067 * _3108;
                        float _3133 = _3132 * _3132;
                        float _3136 = ((1.0 - _3133) * _3057) + _3133;
                        float _4493 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0));
                        float _3137 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
                        float _3138 = 1.0 - _3108;
                        float _3148 = (0.5 / (((_3137 * ((_3123 * _3138) + _3108)) + 9.9999999392252902907785028219223e-09) + (((_3137 * _3138) + _3108) * _3123))) * _3137;
                        float _4504 = isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0));
                        float _3159 = (((_3109 * 3.1415927410125732421875) * (isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0)))) / ((_3131 * _3131) * ((_3074 * 2.1991131305694580078125) + 3.141590118408203125))) * _3063;
                        _2911 = (_3078 * _3026.x) + _2984;
                        _2912 = (_3078 * _3026.y) + _2985;
                        _2913 = (_3078 * _3026.z) + _2986;
                        _2908 = (_3159 * _3043.x) + _2981;
                        _2909 = (_3159 * _3043.y) + _2982;
                        _2910 = (_3159 * _3043.z) + _2983;
                        if (_2988 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2981 = _2908;
                            _2982 = _2909;
                            _2983 = _2910;
                            _2984 = _2911;
                            _2985 = _2912;
                            _2986 = _2913;
                            _2987 = _2988;
                        }
                    }
                    frontier_phi_66_pred = _2908;
                    frontier_phi_66_pred_1 = _2913;
                    frontier_phi_66_pred_2 = _2912;
                    frontier_phi_66_pred_3 = _2911;
                    frontier_phi_66_pred_4 = _2910;
                    frontier_phi_66_pred_5 = _2909;
                }
                _2653 = frontier_phi_66_pred;
                _2663 = frontier_phi_66_pred_1;
                _2661 = frontier_phi_66_pred_2;
                _2659 = frontier_phi_66_pred_3;
                _2657 = frontier_phi_66_pred_4;
                _2655 = frontier_phi_66_pred_5;
                uint _2843 = _2842 + 1u;
                if (_2843 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2836 = _2653;
                    _2837 = _2655;
                    _2838 = _2657;
                    _2839 = _2659;
                    _2840 = _2661;
                    _2841 = _2663;
                    _2842 = _2843;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2652 = _2653;
            _2654 = _2655;
            _2656 = _2657;
            _2658 = _2659;
            _2660 = _2661;
            _2662 = _2663;
        }
        uvec4 _2666 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2667 = _2666.z;
        uint _2669 = (_2667 >> 8u) & 15u;
        float _2804;
        float _2806;
        float _2808;
        float _2810;
        float _2812;
        float _2814;
        if (((4294967295u << _2669) & _2475) == 0u)
        {
            _2804 = _2652;
            _2806 = _2654;
            _2808 = _2656;
            _2810 = _2658;
            _2812 = _2660;
            _2814 = _2662;
        }
        else
        {
            float _2829 = inversesqrt(dot(vec3(_2429, _2430, _2431), vec3(_2429, _2430, _2431)));
            float _2830 = _2829 * _2429;
            float _2831 = _2829 * _2430;
            float _2832 = _2829 * _2431;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2669 < ((_2667 >> 12u) & 15u))
            {
                float _2805;
                float _2807;
                float _2809;
                float _2811;
                float _2813;
                float _2815;
                float _2964 = _2652;
                float _2965 = _2654;
                float _2966 = _2656;
                float _2967 = _2658;
                float _2968 = _2660;
                float _2969 = _2662;
                uint _2970 = _2669;
                uint _2979;
                bool _2980;
                for (;;)
                {
                    _2979 = texelFetch(g_lightClassification, int((((_2469 << 5u) + (_2455 << 9u)) + (_2970 << 2u)) >> 2u)).x;
                    _2980 = _2979 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2980)
                    {
                        frontier_phi_77_pred = _2969;
                        frontier_phi_77_pred_1 = _2968;
                        frontier_phi_77_pred_2 = _2967;
                        frontier_phi_77_pred_3 = _2966;
                        frontier_phi_77_pred_4 = _2965;
                        frontier_phi_77_pred_5 = _2964;
                    }
                    else
                    {
                        float _3173;
                        float _3174;
                        float _3175;
                        float _3176;
                        float _3177;
                        float _3178;
                        float _3469;
                        float _3470;
                        float _3471;
                        float _3472;
                        float _3473;
                        float _3474;
                        float _3186 = _2964;
                        float _3187 = _2965;
                        float _3188 = _2966;
                        float _3189 = _2967;
                        float _3190 = _2968;
                        float _3191 = _2969;
                        uint _3192 = _2979;
                        uint _3193;
                        vec4 _3218;
                        float _3219;
                        vec4 _3234;
                        vec3 _3246;
                        vec4 _3262;
                        vec4 _3278;
                        float _3325;
                        bool _3326;
                        for (;;)
                        {
                            uint _3203 = ((_2970 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3192));
                            _3193 = (_3192 + 4294967295u) & _3192;
                            uint _3205 = _3203 * 40u;
                            _3218 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3205)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 3u)).x));
                            _3219 = _3218.w;
                            uint _3221 = (_3203 * 40u) + 4u;
                            _3234 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3221)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 3u)).x));
                            uint _3236 = (_3203 * 40u) + 8u;
                            _3246 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3236)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 2u)).x));
                            uint _3249 = (_3203 * 40u) + 16u;
                            _3262 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3249)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 3u)).x));
                            uint _3265 = (_3203 * 40u) + 20u;
                            _3278 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3265)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 3u)).x));
                            uint _3281 = (_3203 * 40u) + 24u;
                            vec4 _3294 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3281)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 3u)).x));
                            uint _3300 = (_3203 * 40u) + 28u;
                            vec4 _3313 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3300)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 3u)).x));
                            _3325 = fma(_2431, _3313.z, fma(_2430, _3313.y, _3313.x * _2429)) + _3313.w;
                            _3326 = !((fma(_2431, _3294.z, fma(_2430, _3294.y, _3294.x * _2429)) + _3294.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3326)
                            {
                                float _3353 = _3218.x - _2429;
                                float _3354 = _3218.y - _2430;
                                float _3355 = _3218.z - _2431;
                                float _3356 = dot(vec3(_3353, _3354, _3355), vec3(_3353, _3354, _3355));
                                float _3359 = inversesqrt(_3356);
                                float _3360 = _3359 * _3353;
                                float _3361 = _3359 * _3354;
                                float _3362 = _3359 * _3355;
                                float _3366 = 1.0 - (_3356 / (_3219 * _3219));
                                float _4515 = isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0));
                                float _3367 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
                                float _3371 = sqrt(_3356) * _3234.w;
                                float _3373 = 1.39999997615814208984375 / (_3371 + 1.39999997615814208984375);
                                float _3374 = _3373 * _3373;
                                float _3377 = ((1.0 - _3374) * dot(vec3(_3360, _3361, _3362), vec3(_616, _619, _622))) + _3374;
                                float _3380 = _3371 * _3371;
                                float _3384 = (fma(_2431, _3262.z, fma(_2430, _3262.y, _3262.x * _2429)) + _3262.w) / _3325;
                                float _3385 = (fma(_2431, _3278.z, fma(_2430, _3278.y, _3278.x * _2429)) + _3278.w) / _3325;
                                float _3389 = 1.0 - dot(vec2(_3384, _3385), vec2(_3384, _3385));
                                float _4531 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0));
                                float _3390 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
                                float _3391 = _3390 * (((isnan(0.0) ? _3377 : (isnan(_3377) ? 0.0 : max(_3377, 0.0))) * _3367) / ((_3380 * 0.699999988079071044921875) + 1.0));
                                float _3403 = exp2(log2(1.0 / ((_3380 * 3.5) + 5.0)) * 0.25);
                                float _3404 = 1.0 - _684;
                                float _3411 = sqrt(1.0 - ((1.0 - (_3404 * _3404)) * (1.0 - (_3403 * _3403))));
                                float _3412 = _3411 * _3411;
                                float _3413 = _3412 * _3412;
                                float _3414 = _3360 - _2830;
                                float _3415 = _3361 - _2831;
                                float _3416 = _3362 - _2832;
                                float _3420 = inversesqrt(dot(vec3(_3414, _3415, _3416), vec3(_3414, _3415, _3416)));
                                float _3424 = dot(vec3(_616, _619, _622), vec3((-0.0) - _2830, (-0.0) - _2831, (-0.0) - _2832));
                                float _4542 = isnan(0.0) ? _3424 : (isnan(_3424) ? 0.0 : max(_3424, 0.0));
                                float _3427 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
                                float _3428 = dot(vec3(_616, _619, _622), vec3(_3420 * _3414, _3420 * _3415, _3420 * _3416));
                                float _4553 = isnan(0.0) ? _3428 : (isnan(_3428) ? 0.0 : max(_3428, 0.0));
                                float _3431 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
                                float _3435 = ((_3431 * _3431) * (_3413 + (-1.0))) + 1.0;
                                float _3436 = _3373 * _3412;
                                float _3437 = _3436 * _3436;
                                float _3443 = ((1.0 - _3437) * dot(vec3(_616, _619, _622), vec3(_3360, _3361, _3362))) + _3437;
                                float _4564 = isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0));
                                float _3444 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
                                float _3445 = 1.0 - _3412;
                                float _3455 = (0.5 / (((_3444 * ((_3427 * _3445) + _3412)) + 9.9999999392252902907785028219223e-09) + (((_3444 * _3445) + _3412) * _3427))) * _3444;
                                float _4575 = isnan(0.0) ? _3455 : (isnan(_3455) ? 0.0 : max(_3455, 0.0));
                                float _3465 = (_3390 * _3367) * (((_3413 * 3.1415927410125732421875) * (isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0)))) / ((_3435 * _3435) * ((_3380 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3391 * _3234.y;
                                frontier_phi_83_pred_1 = _3391 * _3234.x;
                                frontier_phi_83_pred_2 = _3465 * _3246.z;
                                frontier_phi_83_pred_3 = _3465 * _3246.y;
                                frontier_phi_83_pred_4 = _3465 * _3246.x;
                                frontier_phi_83_pred_5 = _3391 * _3234.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3473 = frontier_phi_83_pred;
                            _3472 = frontier_phi_83_pred_1;
                            _3471 = frontier_phi_83_pred_2;
                            _3470 = frontier_phi_83_pred_3;
                            _3469 = frontier_phi_83_pred_4;
                            _3474 = frontier_phi_83_pred_5;
                            _3176 = _3472 + _3189;
                            _3177 = _3473 + _3190;
                            _3178 = _3474 + _3191;
                            _3173 = _3469 + _3186;
                            _3174 = _3470 + _3187;
                            _3175 = _3471 + _3188;
                            if (_3193 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3186 = _3173;
                                _3187 = _3174;
                                _3188 = _3175;
                                _3189 = _3176;
                                _3190 = _3177;
                                _3191 = _3178;
                                _3192 = _3193;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3178;
                        frontier_phi_77_pred_1 = _3177;
                        frontier_phi_77_pred_2 = _3176;
                        frontier_phi_77_pred_3 = _3175;
                        frontier_phi_77_pred_4 = _3174;
                        frontier_phi_77_pred_5 = _3173;
                    }
                    _2815 = frontier_phi_77_pred;
                    _2813 = frontier_phi_77_pred_1;
                    _2811 = frontier_phi_77_pred_2;
                    _2809 = frontier_phi_77_pred_3;
                    _2807 = frontier_phi_77_pred_4;
                    _2805 = frontier_phi_77_pred_5;
                    uint _2971 = _2970 + 1u;
                    if (_2971 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2964 = _2805;
                        _2965 = _2807;
                        _2966 = _2809;
                        _2967 = _2811;
                        _2968 = _2813;
                        _2969 = _2815;
                        _2970 = _2971;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2809;
                frontier_phi_58_59_ladder_1 = _2815;
                frontier_phi_58_59_ladder_2 = _2813;
                frontier_phi_58_59_ladder_3 = _2811;
                frontier_phi_58_59_ladder_4 = _2807;
                frontier_phi_58_59_ladder_5 = _2805;
            }
            else
            {
                frontier_phi_58_59_ladder = _2656;
                frontier_phi_58_59_ladder_1 = _2662;
                frontier_phi_58_59_ladder_2 = _2660;
                frontier_phi_58_59_ladder_3 = _2658;
                frontier_phi_58_59_ladder_4 = _2654;
                frontier_phi_58_59_ladder_5 = _2652;
            }
            _2804 = frontier_phi_58_59_ladder_5;
            _2806 = frontier_phi_58_59_ladder_4;
            _2808 = frontier_phi_58_59_ladder;
            _2810 = frontier_phi_58_59_ladder_3;
            _2812 = frontier_phi_58_59_ladder_2;
            _2814 = frontier_phi_58_59_ladder_1;
        }
        float _2819 = isnan(1.0) ? _660 : (isnan(_660) ? 1.0 : min(_660, 1.0));
        _2488 = (_2819 * _2810) + _1940;
        _2490 = (_2819 * _2812) + _1942;
        _2492 = (_2819 * _2814) + _1944;
        _2494 = ((_2804 * 0.039999999105930328369140625) * _2819) + _2273;
        _2496 = ((_2806 * 0.039999999105930328369140625) * _2819) + _2275;
        _2498 = ((_2808 * 0.039999999105930328369140625) * _2819) + _2277;
    }
    else
    {
        _2488 = _1940;
        _2490 = _1942;
        _2492 = _1944;
        _2494 = _2273;
        _2496 = _2275;
        _2498 = _2277;
    }
    float _2518 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2519 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2520 = cbSceneParam._m0[86u].x * ((_595 / cbSceneParam._m0[86u].x) + ((_683 * cbMtdParam._m0[13u].z) * dot(vec3(_554, _555, _556), vec3(_203, _204, _205))));
    float _2521 = isnan(_2518) ? _2520 : (isnan(_2520) ? _2518 : min(_2520, _2518));
    float _2522 = isnan(_2519) ? _596 : (isnan(_596) ? _2519 : min(_596, _2519));
    vec4 _2524 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2521, _2522), 0.0);
    float _2526 = _2524.x;
    bool _2547 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2526)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2526))) > _576;
    vec4 _2551 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2547 ? _2521 : _595, _2547 ? _2522 : _596));
    float _4601 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _4612 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _4623 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _2575 = 0.959999978542327880859375 - (exp2(log2(1.0 - _675) * 5.0) * 0.959999978542327880859375);
    float _2577 = (_2551.x * _2575) * cbSceneParam._m0[72u].w;
    float _2579 = (_2551.y * _2575) * cbSceneParam._m0[72u].w;
    float _2581 = (_2551.z * _2575) * cbSceneParam._m0[72u].w;
    float _2589 = (_2577 + (((((_1714 * _1762.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0))) * _1505) * _1778)) + _2494) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0))) * (_2488 + ((isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0))) * _660))) - _2577) * _539);
    float _2591 = (_2579 + (((((_1714 * _1762.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0))) * _1505) * _1778)) + _2496) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0))) * (_2490 + ((isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0))) * _660))) - _2579) * _539);
    float _2593 = (_2581 + (((((_1714 * _1762.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0))) * _1505) * _1778)) + _2498) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0))) * (_2492 + ((isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0))) * _660))) - _2581) * _539);
    uint _2594 = _635 + 6u;
    float _2602 = _595 / cbSceneParam._m0[86u].x;
    float _2603 = _596 / cbSceneParam._m0[86u].y;
    vec4 _2617 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2602, _2603, (log2((isnan(cbSceneParam._m0[77u].w) ? _576 : (isnan(_576) ? cbSceneParam._m0[77u].w : min(_576, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2619 = _2617.x;
    float _2620 = _2617.y;
    float _2621 = _2617.z;
    float _2622 = _2617.w;
    float _2714;
    float _2716;
    float _2718;
    float _2720;
    if (_576 > cbSceneParam._m0[78u].w)
    {
        float _2677 = isnan(_576) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _576 : min(cbSceneParam._m0[80u].w, _576));
        float _2678 = _2677 / _576;
        float _2689 = _2678 * _274;
        float _2690 = _275 * _2678;
        float _2691 = (-0.0) - _2690;
        float _2692 = _2678 * _276;
        float _2694 = (cbSceneParam._m0[77u].w * _2691) / _2677;
        float _2695 = _2694 + cbSceneParam._m0[79u].w;
        float _2696 = cbSceneParam._m0[79u].w - _2690;
        float _2702 = sqrt(((_2689 * _2689) + (_2690 * _2690)) + (_2692 * _2692));
        float _2705 = (1.0 - (cbSceneParam._m0[77u].w / _2677)) * _2702;
        float _2710 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2712 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2921;
        if (abs((_2691 - _2694) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2921 = ((((_2695 > 0.0) ? exp2(_2710 * _2695) : (2.0 - exp2(_2712 * _2695))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2705;
        }
        else
        {
            float _2865 = 1.0 / cbSceneParam._m0[80u].x;
            float _2866 = isnan(_2696) ? _2695 : (isnan(_2695) ? _2696 : max(_2695, _2696));
            float _2867 = isnan(_2696) ? _2695 : (isnan(_2695) ? _2696 : min(_2695, _2696));
            float _2876 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : min(_2866, 0.0));
            float _2877 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : min(_2867, 0.0));
            _2921 = ((abs(_2702 / _2691) * cbSceneParam._m0[80u].y) * ((((_2876 - _2877) * 2.0) - ((exp2(_2710 * (isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0)))) - exp2(_2710 * (isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0))))) * _2865)) - ((exp2(_2712 * _2876) - exp2(_2712 * _2877)) * _2865))) + (_2705 * cbSceneParam._m0[80u].z);
        }
        vec4 _2923 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2602, _2603, 1.0), 0.0);
        float _2932 = exp2((_2921 * (-1.44269502162933349609375)) * (1.0 - _2923.w));
        float _2933 = log2(_2932);
        float _2949 = log2(_2622);
        _2714 = (exp2(_2949 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2933 * cbSceneParam._m0[78u].x)) * _2923.x) / cbSceneParam._m0[78u].x)) + _2619;
        _2716 = (exp2(_2949 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2933 * cbSceneParam._m0[78u].y)) * _2923.y) / cbSceneParam._m0[78u].y)) + _2620;
        _2718 = (exp2(_2949 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2933 * cbSceneParam._m0[78u].z)) * _2923.z) / cbSceneParam._m0[78u].z)) + _2621;
        _2720 = _2932 * _2622;
    }
    else
    {
        _2714 = _2619;
        _2716 = _2620;
        _2718 = _2621;
        _2720 = _2622;
    }
    bool _2959;
    float _2775;
    vec4 _2778;
    float _2780;
    vec4 _2782;
    float _2790;
    float _2791;
    float _2792;
    float _2793;
    bool _2803;
    for (;;)
    {
        bool _2732 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _2733 = log2(_2720);
        float _2740 = exp2(_2733 * cbSceneParam._m0[78u].x) * _2589;
        float _2741 = exp2(_2733 * cbSceneParam._m0[78u].y) * _2591;
        float _2742 = exp2(_2733 * cbSceneParam._m0[78u].z) * _2593;
        vec4 _2750 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_595, _596));
        float _2752 = _2750.x;
        float _2773 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2752)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2752))) - _576) * 3.0;
        float _4674 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0));
        _2775 = (isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0))) * cbInstanceData._m0[_2594].w;
        float _2776 = _583 + (-0.5);
        _2778 = cbMtdParam._m0[1u];
        _2780 = _2778.y * _2776;
        _2782 = cbMatDynParam._m0[0u];
        float _2789 = (roundEven(_2782.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2790 = _2789 * (_2732 ? _2740 : (_2740 + (cbSceneParam._m0[72u].w * _2714)));
        _2791 = _2789 * (_2732 ? _2741 : (_2741 + (cbSceneParam._m0[72u].w * _2716)));
        _2792 = _2789 * (_2732 ? _2742 : (_2742 + (cbSceneParam._m0[72u].w * _2718)));
        _2793 = _2776 * 0.999000012874603271484375;
        _2803 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2803)
        {
            if ((cbInstanceData._m0[_635 + 7u].x + _2793) < 0.5)
            {
                _2959 = true;
                break;
            }
        }
        uint _2900 = _636 + uint(_2782.w);
        if ((cbInstanceData._m0[_2900].w < 1.0) && ((cbInstanceData._m0[_2900].w + _2793) < 0.5))
        {
            _2959 = true;
            break;
        }
        if ((_2780 + 1.0) < _2778.x)
        {
            _2959 = true;
            break;
        }
        _2959 = false;
        break;
    }
    float _3164;
    if (_2959)
    {
        discard_state = true;
        _3164 = 0.0;
    }
    else
    {
        _3164 = _2775;
    }
    SV_Target.x = _2790;
    SV_Target.y = _2791;
    SV_Target.z = _2792;
    SV_Target.w = _3164;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2775;
    discard_exit();
}


