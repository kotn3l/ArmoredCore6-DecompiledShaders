#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Ice_Ov_N_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Ice_Ov_N_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Ice_Ov_N_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Ice_Ov_N_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Ice_Ov_N_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1065;
float _3584;
float _3585;
float _3586;
float _3587;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _200 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _201 = _200 * _192;
    float _202 = _200 * _193;
    float _203 = _200 * _194;
    float _207 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = _207 * NORMAL.x;
    float _209 = _207 * NORMAL.y;
    float _210 = _207 * NORMAL.z;
    float _214 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _215 = _214 * TANGENT.x;
    float _216 = _214 * TANGENT.y;
    float _217 = _214 * TANGENT.z;
    float _250 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _254 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _258 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _262 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _272 = cbSceneParam._m0[71u].x - (_250 / _262);
    float _273 = cbSceneParam._m0[71u].y - (_254 / _262);
    float _274 = cbSceneParam._m0[71u].z - (_258 / _262);
    float _292 = inversesqrt(dot(vec3(_272, _273, _274), vec3(_272, _273, _274)));
    float _293 = _292 * _272;
    float _294 = _292 * _273;
    float _295 = _292 * _274;
    float _299 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _303 = dot(vec4(_293, _294, _295, 0.0), vec4(_299 * _208, _299 * _209, _299 * _210, 0.0));
    float _3596 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _311 = exp2(log2(1.0 - (isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0)))) * cbMtdParam._m0[12u].z);
    float _3607 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _312 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
    float _319 = (_312 * (cbMtdParam._m0[11u].x - cbMtdParam._m0[10u].x)) + cbMtdParam._m0[10u].x;
    float _320 = (_312 * (cbMtdParam._m0[11u].y - cbMtdParam._m0[10u].y)) + cbMtdParam._m0[10u].y;
    float _321 = (_312 * (cbMtdParam._m0[11u].z - cbMtdParam._m0[10u].z)) + cbMtdParam._m0[10u].z;
    vec4 _340 = texture(sampler2D(M_Ice_Ov_N_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _348 = (_340.x * 2.0) + (-1.0);
    float _350 = (_340.y * 2.0) + (-1.0);
    float _351 = dot(vec2(_348, _350), vec2(_348, _350));
    float _3618 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _356 = sqrt(1.0 - (isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0))));
    float _359 = fma(_356, _208, fma(_350, _215, _348 * _201));
    float _362 = fma(_356, _209, fma(_350, _216, _348 * _202));
    float _365 = fma(_356, _210, fma(_350, _217, _348 * _203));
    float _369 = inversesqrt(dot(vec3(_359, _362, _365), vec3(_359, _362, _365)));
    float _380 = cbMtdParam._m0[13u].y + dot(vec4(_369 * _359, _369 * _362, _369 * _365, 0.0), vec4(cbMtdParam._m0[14u].yzw, 0.0));
    float _3629 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _382 = (isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0))) * TEXCOORD_3.x;
    float _3640 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _383 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
    vec4 _395 = texture(sampler2D(M_Ice_Ov_N_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _414 = (((cbMtdParam._m0[9u].x * _395.x) - _319) * _383) + _319;
    float _415 = (((cbMtdParam._m0[9u].y * _395.y) - _320) * _383) + _320;
    float _416 = (((cbMtdParam._m0[9u].z * _395.z) - _321) * _383) + _321;
    float _421 = ((cbMtdParam._m0[14u].x - cbMtdParam._m0[12u].x) * _383) + cbMtdParam._m0[12u].x;
    float _423 = abs(_208);
    float _424 = abs(_209);
    float _425 = abs(_210);
    float _426 = _423 * _423;
    float _427 = _424 * _424;
    float _428 = _425 * _425;
    float _431 = _254 * 0.0500000007450580596923828125;
    float _442 = (cbTextureTilingScale._m0[4u].x * (_250 * 0.0500000007450580596923828125)) + cbTextureTilingScale._m0[4u].z;
    vec4 _445 = texture(sampler2D(M_Ice_Ov_N_snp_0_Texture2D_9, SS_BumpMap), vec2(_442, (cbTextureTilingScale._m0[4u].y * _431) + cbTextureTilingScale._m0[4u].w));
    float _452 = (cbTextureTilingScale._m0[4u].y * (_258 * 0.0500000007450580596923828125)) + cbTextureTilingScale._m0[4u].w;
    vec4 _453 = texture(sampler2D(M_Ice_Ov_N_snp_0_Texture2D_9, SS_BumpMap), vec2(_442, _452));
    vec4 _463 = texture(sampler2D(M_Ice_Ov_N_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _431) + cbTextureTilingScale._m0[4u].z, _452));
    vec4 _490 = texture(sampler2D(M_Ice_Ov_N_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    vec4 _509 = texture(sampler2D(M_Ice_Ov_N_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _515 = (_509.x * 2.0) + (-1.0);
    float _516 = (_509.y * 2.0) + (-1.0);
    float _3651 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _517 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
    float _522 = (_517 * _517) * (3.0 - (_517 * 2.0));
    float _532 = (((((((_453.x * _427) + (_445.x * _428)) + (_463.x * _426)) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].x) + _348) + (((_522 * (((_490.x * 2.0) + (-1.0)) - _515)) + _515) * cbMtdParam._m0[12u].y);
    float _533 = (((((((_453.y * _427) + (_445.y * _428)) + (_463.y * _426)) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].x) + _350) + (((_522 * (((_490.y * 2.0) + (-1.0)) - _516)) + _516) * cbMtdParam._m0[12u].y);
    float _536 = cbMtdParam._m0[13u].w + _383;
    float _3662 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _537 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
    float _541 = fma(_356, _208, fma(_533, _215, _532 * _201));
    float _544 = fma(_356, _209, fma(_533, _216, _532 * _202));
    float _547 = fma(_356, _210, fma(_533, _217, _532 * _203));
    float _551 = inversesqrt(dot(vec3(_541, _544, _547), vec3(_541, _544, _547)));
    float _552 = _551 * _541;
    float _553 = _551 * _544;
    float _554 = _551 * _547;
    float _3673 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _555 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
    float _3684 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _3695 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _3706 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _574 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _579 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _581 = _579.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _744 = sqrt(((_272 * _272) + (_273 * _273)) + (_274 * _274));
        float _750 = (cbMatDynParam._m0[5u].x * _744) + cbMatDynParam._m0[5u].y;
        float _3717 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        float _751 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
        float _755 = (cbMatDynParam._m0[5u].z * _744) + cbMatDynParam._m0[5u].w;
        float _3728 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0))) - _751)) + _751) < ((_581 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _593 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _594 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _614 = fma(_554, cbSceneParam._m0[5u].z, fma(_553, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _552));
    float _617 = fma(_554, cbSceneParam._m0[6u].z, fma(_553, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _552));
    float _620 = fma(_554, cbSceneParam._m0[7u].z, fma(_553, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _552));
    uint _633 = uint(roundEven(NORMAL.w)) * 13u;
    uint _634 = _633 + 9u;
    uint _635 = _634 + uint(cbMatDynParam._m0[0u].w);
    float _641 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0)))) * cbInstanceData._m0[_635].x;
    float _642 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0)))) * cbInstanceData._m0[_635].y;
    float _643 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0)))) * cbInstanceData._m0[_635].z;
    float _3739 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _644 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
    float _3750 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _645 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
    float _3761 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _646 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
    vec4 _655 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _593, cbSceneParam._m0[86u].y * _594));
    float _658 = _655.x * TEXCOORD_3.w;
    float _659 = dot(vec3(_552, _553, _554), vec3(_293, _294, _295));
    float _662 = _659 * 2.0;
    float _666 = (_662 * _552) - _293;
    float _667 = (_662 * _553) - _294;
    float _668 = (_662 * _554) - _295;
    float _672 = abs(dot(vec3(_293, _294, _295), vec3(_552, _553, _554)));
    float _3772 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _673 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
    float _681 = 10.0 / (_574 + 10.0);
    float _682 = sqrt(_555);
    float _693 = exp2((_682 * 5.0) * log2(1.0 - (_673 * 0.999000012874603271484375))) / (4.0 - (_682 * 3.0));
    float _725 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _729 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _733 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1064;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _789 = fma(_733, cbModelParam._m0[26u].z, fma(_729, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _725));
        float _793 = fma(_733, cbModelParam._m0[27u].z, fma(_729, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _725));
        float _797 = fma(_733, cbModelParam._m0[28u].z, fma(_729, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _725));
        float _822 = _725 + _552;
        float _823 = _729 + _553;
        float _824 = _733 + _554;
        float _834 = fma(_824, cbModelParam._m0[26u].z, fma(_823, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _822)) - _789;
        float _835 = fma(_824, cbModelParam._m0[27u].z, fma(_823, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _822)) - _793;
        float _836 = fma(_824, cbModelParam._m0[28u].z, fma(_823, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _822)) - _797;
        float _840 = inversesqrt(dot(vec3(_834, _835, _836), vec3(_834, _835, _836)));
        float _853 = ((_840 * _834) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_789 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _854 = ((_840 * _835) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_793 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _855 = ((_840 * _836) / cbModelParam._m0[34u].z) + ((((((_797 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _858 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_853, _854, _855), 0.0);
        vec4 _865 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_853, _854, _855), 0.0);
        vec4 _872 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_853, _854, _855), 0.0);
        vec4 _879 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_853, _854, _855), 0.0);
        float _892 = exp2((_858.w + (-0.5)) * 20.0) * 2.0;
        float _893 = _892 * (_858.x + (-0.5));
        float _894 = _892 * (_858.y + (-0.5));
        float _895 = _892 * (_858.z + (-0.5));
        float _902 = exp2((_865.w + (-0.5)) * 20.0) * 2.0;
        float _903 = _902 * (_865.x + (-0.5));
        float _904 = _902 * (_865.y + (-0.5));
        float _905 = _902 * (_865.z + (-0.5));
        float _912 = exp2((_872.w + (-0.5)) * 20.0) * 2.0;
        float _913 = _912 * (_872.x + (-0.5));
        float _914 = _912 * (_872.y + (-0.5));
        float _915 = _912 * (_872.z + (-0.5));
        float _922 = exp2((_879.w + (-0.5)) * 20.0) * 2.0;
        float _923 = _922 * (_879.x + (-0.5));
        float _924 = _922 * (_879.y + (-0.5));
        float _925 = _922 * (_879.z + (-0.5));
        float _926 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _927 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _928 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _929 = _893 * 0.5;
        float _930 = _903 * 0.5;
        float _931 = _913 * 0.5;
        float _932 = dot(vec3(_929, _930, _931), vec3(_929, _930, _931));
        float _937 = (_932 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_932);
        float _946 = (dot(vec3(_552, _553, _554), vec3(_937 * _929, _937 * _930, _937 * _931)) + 1.0) * 0.5;
        float _3798 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _956 = sqrt(((_930 * _930) + (_929 * _929)) + (_931 * _931)) / (_926 + 9.9999997473787516355514526367188e-06);
        float _3809 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _957 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
        float _958 = _957 * 2.0;
        float _962 = (1.0 - _957) / (_957 + 1.0);
        float _3820 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _963 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
        float _972 = ((((1.0 - _963) * (_958 + 2.0)) * exp2(log2(isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0))) * (_958 + 1.0))) + _963) * _926;
        float _973 = _894 * 0.5;
        float _974 = _904 * 0.5;
        float _975 = _914 * 0.5;
        float _976 = dot(vec3(_973, _974, _975), vec3(_973, _974, _975));
        float _981 = (_976 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_976);
        float _989 = (dot(vec3(_552, _553, _554), vec3(_981 * _973, _981 * _974, _981 * _975)) + 1.0) * 0.5;
        float _3831 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _998 = sqrt(((_974 * _974) + (_973 * _973)) + (_975 * _975)) / (_927 + 9.9999997473787516355514526367188e-06);
        float _3842 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _999 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _1000 = _999 * 2.0;
        float _1004 = (1.0 - _999) / (_999 + 1.0);
        float _3853 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1005 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _1014 = ((((1.0 - _1005) * (_1000 + 2.0)) * exp2(log2(isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) * (_1000 + 1.0))) + _1005) * _927;
        float _1015 = _895 * 0.5;
        float _1016 = _905 * 0.5;
        float _1017 = _915 * 0.5;
        float _1018 = dot(vec3(_1015, _1016, _1017), vec3(_1015, _1016, _1017));
        float _1023 = (_1018 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1018);
        float _1031 = (dot(vec3(_552, _553, _554), vec3(_1023 * _1015, _1023 * _1016, _1023 * _1017)) + 1.0) * 0.5;
        float _3864 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1040 = sqrt(((_1016 * _1016) + (_1015 * _1015)) + (_1017 * _1017)) / (_928 + 9.9999997473787516355514526367188e-06);
        float _3875 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1041 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1042 = _1041 * 2.0;
        float _1046 = (1.0 - _1041) / (_1041 + 1.0);
        float _3886 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1047 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _1056 = ((((1.0 - _1047) * (_1042 + 2.0)) * exp2(log2(isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))) * (_1042 + 1.0))) + _1047) * _928;
        _1064 = _895;
        _1066 = _894;
        _1067 = _893;
        _1068 = _905;
        _1069 = _904;
        _1070 = _903;
        _1071 = _915;
        _1072 = _914;
        _1073 = _913;
        _1074 = _928;
        _1075 = _927;
        _1076 = _926;
        _1077 = cbModelParam._m0[36u].z * (isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0)));
        _1078 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0)));
        _1079 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0)));
    }
    else
    {
        _1064 = _1065;
        _1066 = _1065;
        _1067 = _1065;
        _1068 = _1065;
        _1069 = _1065;
        _1070 = _1065;
        _1071 = _1065;
        _1072 = _1065;
        _1073 = _1065;
        _1074 = _1065;
        _1075 = _1065;
        _1076 = _1065;
        _1077 = 0.0;
        _1078 = 0.0;
        _1079 = 0.0;
    }
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1108 = fma(_733, cbModelParam._m0[30u].z, fma(_729, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _725));
        float _1112 = fma(_733, cbModelParam._m0[31u].z, fma(_729, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _725));
        float _1116 = fma(_733, cbModelParam._m0[32u].z, fma(_729, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _725));
        float _1139 = _725 + _552;
        float _1140 = _729 + _553;
        float _1141 = _733 + _554;
        float _1151 = fma(_1141, cbModelParam._m0[30u].z, fma(_1140, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1139)) - _1108;
        float _1152 = fma(_1141, cbModelParam._m0[31u].z, fma(_1140, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1139)) - _1112;
        float _1153 = fma(_1141, cbModelParam._m0[32u].z, fma(_1140, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1139)) - _1116;
        float _1157 = inversesqrt(dot(vec3(_1151, _1152, _1153), vec3(_1151, _1152, _1153)));
        float _1170 = ((_1157 * _1151) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1108 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1171 = ((_1157 * _1152) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1112 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1172 = ((_1157 * _1153) / cbModelParam._m0[35u].z) + ((((((_1116 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1174 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1170, _1171, _1172), 0.0);
        vec4 _1181 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1170, _1171, _1172), 0.0);
        vec4 _1188 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1170, _1171, _1172), 0.0);
        vec4 _1195 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1170, _1171, _1172), 0.0);
        float _1207 = exp2((_1174.w + (-0.5)) * 20.0) * 2.0;
        float _1208 = _1207 * (_1174.x + (-0.5));
        float _1209 = _1207 * (_1174.y + (-0.5));
        float _1210 = _1207 * (_1174.z + (-0.5));
        float _1217 = exp2((_1181.w + (-0.5)) * 20.0) * 2.0;
        float _1218 = _1217 * (_1181.x + (-0.5));
        float _1219 = _1217 * (_1181.y + (-0.5));
        float _1220 = _1217 * (_1181.z + (-0.5));
        float _1227 = exp2((_1188.w + (-0.5)) * 20.0) * 2.0;
        float _1228 = _1227 * (_1188.x + (-0.5));
        float _1229 = _1227 * (_1188.y + (-0.5));
        float _1230 = _1227 * (_1188.z + (-0.5));
        float _1237 = exp2((_1195.w + (-0.5)) * 20.0) * 2.0;
        float _1238 = _1237 * (_1195.x + (-0.5));
        float _1239 = _1237 * (_1195.y + (-0.5));
        float _1240 = _1237 * (_1195.z + (-0.5));
        float _1241 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1242 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1243 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1244 = _1208 * 0.5;
        float _1245 = _1218 * 0.5;
        float _1246 = _1228 * 0.5;
        float _1247 = dot(vec3(_1244, _1245, _1246), vec3(_1244, _1245, _1246));
        float _1252 = (_1247 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1247);
        float _1260 = (dot(vec3(_552, _553, _554), vec3(_1252 * _1244, _1252 * _1245, _1252 * _1246)) + 1.0) * 0.5;
        float _3927 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1269 = sqrt(((_1245 * _1245) + (_1244 * _1244)) + (_1246 * _1246)) / (_1241 + 9.9999997473787516355514526367188e-06);
        float _3938 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1271 = _1270 * 2.0;
        float _1275 = (1.0 - _1270) / (_1270 + 1.0);
        float _3949 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _1285 = ((((1.0 - _1276) * (_1271 + 2.0)) * exp2(log2(isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0))) * (_1271 + 1.0))) + _1276) * _1241;
        float _1286 = _1209 * 0.5;
        float _1287 = _1219 * 0.5;
        float _1288 = _1229 * 0.5;
        float _1289 = dot(vec3(_1286, _1287, _1288), vec3(_1286, _1287, _1288));
        float _1294 = (_1289 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1289);
        float _1302 = (dot(vec3(_552, _553, _554), vec3(_1294 * _1286, _1294 * _1287, _1294 * _1288)) + 1.0) * 0.5;
        float _3960 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1311 = sqrt(((_1287 * _1287) + (_1286 * _1286)) + (_1288 * _1288)) / (_1242 + 9.9999997473787516355514526367188e-06);
        float _3971 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _1313 = _1312 * 2.0;
        float _1317 = (1.0 - _1312) / (_1312 + 1.0);
        float _3982 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _1327 = ((((1.0 - _1318) * (_1313 + 2.0)) * exp2(log2(isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * (_1313 + 1.0))) + _1318) * _1242;
        float _1328 = _1210 * 0.5;
        float _1329 = _1220 * 0.5;
        float _1330 = _1230 * 0.5;
        float _1331 = dot(vec3(_1328, _1329, _1330), vec3(_1328, _1329, _1330));
        float _1336 = (_1331 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1331);
        float _1344 = (dot(vec3(_552, _553, _554), vec3(_1336 * _1328, _1336 * _1329, _1336 * _1330)) + 1.0) * 0.5;
        float _3993 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1353 = sqrt(((_1329 * _1329) + (_1328 * _1328)) + (_1330 * _1330)) / (_1243 + 9.9999997473787516355514526367188e-06);
        float _4004 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _1355 = _1354 * 2.0;
        float _1359 = (1.0 - _1354) / (_1354 + 1.0);
        float _4015 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1360 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _1369 = ((((1.0 - _1360) * (_1355 + 2.0)) * exp2(log2(isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0))) * (_1355 + 1.0))) + _1360) * _1243;
        _1377 = _1210;
        _1378 = _1209;
        _1379 = _1208;
        _1380 = _1220;
        _1381 = _1219;
        _1382 = _1218;
        _1383 = _1230;
        _1384 = _1229;
        _1385 = _1228;
        _1386 = _1243;
        _1387 = _1242;
        _1388 = _1241;
        _1389 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0)));
        _1390 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0)));
        _1391 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0)));
    }
    else
    {
        _1377 = _1065;
        _1378 = _1065;
        _1379 = _1065;
        _1380 = _1065;
        _1381 = _1065;
        _1382 = _1065;
        _1383 = _1065;
        _1384 = _1065;
        _1385 = _1065;
        _1386 = _1065;
        _1387 = _1065;
        _1388 = _1065;
        _1389 = 0.0;
        _1390 = 0.0;
        _1391 = 0.0;
    }
    float _1401 = (cbModelParam._m0[1u].x * (_1389 - _1077)) + _1077;
    float _1402 = (cbModelParam._m0[1u].x * (_1390 - _1078)) + _1078;
    float _1403 = (cbModelParam._m0[1u].x * (_1391 - _1079)) + _1079;
    float _1424 = fma(_1403, cbSceneParam._m0[89u].z, fma(_1402, cbSceneParam._m0[89u].y, _1401 * cbSceneParam._m0[89u].x));
    float _1427 = fma(_1403, cbSceneParam._m0[90u].z, fma(_1402, cbSceneParam._m0[90u].y, _1401 * cbSceneParam._m0[90u].x));
    float _1430 = fma(_1403, cbSceneParam._m0[91u].z, fma(_1402, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1401));
    float _1445 = _666 * 0.5;
    float _1446 = _667 * 0.5;
    float _1447 = _668 * 0.5;
    float _1448 = dot(vec4(_1445, _1446, _1447, 1.0), vec4(_1379, _1382, _1385, _1388));
    float _1451 = dot(vec4(_1445, _1446, _1447, 1.0), vec4(_1378, _1381, _1384, _1387));
    float _1454 = dot(vec4(_1445, _1446, _1447, 1.0), vec4(_1377, _1380, _1383, _1386));
    float _1488;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1461 = dot(vec4(_1445, _1446, _1447, 1.0), vec4(_1064, _1068, _1071, _1074));
        float _1465 = dot(vec4(_1445, _1446, _1447, 1.0), vec4(_1066, _1069, _1072, _1075));
        float _1469 = dot(vec4(_1445, _1446, _1447, 1.0), vec4(_1067, _1070, _1073, _1076));
        float _1476 = dot(vec4(cbModelParam._m0[39u]), vec4(_1445, _1446, _1447, 1.0));
        _1488 = dot(vec3(isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0)), isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0)), isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1476) ? 0.0 : (isnan(0.0) ? _1476 : max(0.0, _1476))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1488 = 1.0;
    }
    float _1499;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1490 = dot(vec4(cbModelParam._m0[40u]), vec4(_1445, _1446, _1447, 1.0));
        _1499 = dot(vec3(isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0)), isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0)), isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1490) ? 0.0 : (isnan(0.0) ? _1490 : max(0.0, _1490))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1499 = 1.0;
    }
    float _1503 = (_1499 * cbModelParam._m0[1u].x) + (_1488 * (1.0 - cbModelParam._m0[1u].x));
    float _1513 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _555);
    float _1514 = isnan(_1513) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1513 : min(cbModelParam._m0[25u].z, _1513));
    float _1594;
    float _1596;
    float _1598;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1561 = fma(_733, cbModelParam._m0[13u].z, fma(_729, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _725)) + cbModelParam._m0[13u].w;
        float _1565 = fma(_733, cbModelParam._m0[14u].z, fma(_729, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _725)) + cbModelParam._m0[14u].w;
        float _1569 = fma(_733, cbModelParam._m0[15u].z, fma(_729, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _725)) + cbModelParam._m0[15u].w;
        float _1572 = fma(_668, cbModelParam._m0[13u].z, fma(_667, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _666));
        float _1575 = fma(_668, cbModelParam._m0[14u].z, fma(_667, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _666));
        float _1578 = fma(_668, cbModelParam._m0[15u].z, fma(_667, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _666));
        float _1606;
        if (_1572 > 0.0)
        {
            _1606 = abs((1.0 - _1561) / _1572);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1572 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1561 + 1.0) / _1572);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1606 = frontier_phi_17_15_ladder;
        }
        float _1862;
        if (_1575 > 0.0)
        {
            _1862 = abs((1.0 - _1565) / _1575);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1575 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1565 + 1.0) / _1575);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1862 = frontier_phi_26_22_ladder;
        }
        float _2105;
        if (_1578 > 0.0)
        {
            _2105 = abs((1.0 - _1569) / _1578);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1578 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1569 + 1.0) / _1578);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2105 = frontier_phi_38_33_ladder;
        }
        float _2107 = isnan(_1862) ? _1606 : (isnan(_1606) ? _1862 : min(_1606, _1862));
        float _2108 = isnan(_2105) ? _2107 : (isnan(_2107) ? _2105 : min(_2107, _2105));
        float _2112 = (_2108 * _1572) + _1561;
        float _2113 = (_2108 * _1575) + _1565;
        float _2114 = (_2108 * _1578) + _1569;
        float _2115 = _2108 * 9.9999997473787516355514526367188e-05;
        float _2117 = (-1.0) - _2115;
        float _2119 = _2115 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2114 > _2119) || ((_2114 < _2117) || ((_2113 > _2119) || ((_2113 < _2117) || ((_2112 < _2117) || (_2112 > _2119))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2238 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2114, cbModelParam._m0[9u].z, fma(_2113, cbModelParam._m0[9u].y, _2112 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2114, cbModelParam._m0[10u].z, fma(_2113, cbModelParam._m0[10u].y, _2112 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2114, cbModelParam._m0[11u].z, fma(_2113, cbModelParam._m0[11u].y, _2112 * cbModelParam._m0[11u].x))), _1514);
            frontier_phi_16_38_ladder = _2238.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2238.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2238.x * cbModelParam._m0[1u].y;
        }
        _1594 = frontier_phi_16_38_ladder_2;
        _1596 = frontier_phi_16_38_ladder_1;
        _1598 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1582 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_666, _667, _668), _1514);
        _1594 = _1582.x * cbModelParam._m0[1u].y;
        _1596 = _1582.y * cbModelParam._m0[1u].y;
        _1598 = _1582.z * cbModelParam._m0[1u].y;
    }
    float _1602 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _555);
    float _1603 = isnan(_1602) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1602 : min(cbModelParam._m0[25u].w, _1602));
    float _1696;
    float _1698;
    float _1700;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1660 = fma(_733, cbModelParam._m0[21u].z, fma(_729, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _725)) + cbModelParam._m0[21u].w;
        float _1664 = fma(_733, cbModelParam._m0[22u].z, fma(_729, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _725)) + cbModelParam._m0[22u].w;
        float _1668 = fma(_733, cbModelParam._m0[23u].z, fma(_729, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _725)) + cbModelParam._m0[23u].w;
        float _1671 = fma(_668, cbModelParam._m0[21u].z, fma(_667, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _666));
        float _1674 = fma(_668, cbModelParam._m0[22u].z, fma(_667, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _666));
        float _1677 = fma(_668, cbModelParam._m0[23u].z, fma(_667, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _666));
        float _1867;
        if (_1671 > 0.0)
        {
            _1867 = abs((1.0 - _1660) / _1671);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1671 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1660 + 1.0) / _1671);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1867 = frontier_phi_28_24_ladder;
        }
        float _2132;
        if (_1674 > 0.0)
        {
            _2132 = abs((1.0 - _1664) / _1674);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1674 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1664 + 1.0) / _1674);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2132 = frontier_phi_40_35_ladder;
        }
        float _2337;
        if (_1677 > 0.0)
        {
            _2337 = abs((1.0 - _1668) / _1677);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1677 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1668 + 1.0) / _1677);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2337 = frontier_phi_49_46_ladder;
        }
        float _2339 = isnan(_2132) ? _1867 : (isnan(_1867) ? _2132 : min(_1867, _2132));
        float _2340 = isnan(_2337) ? _2339 : (isnan(_2339) ? _2337 : min(_2339, _2337));
        float _2344 = (_2340 * _1671) + _1660;
        float _2345 = (_2340 * _1674) + _1664;
        float _2346 = (_2340 * _1677) + _1668;
        float _2347 = _2340 * 9.9999997473787516355514526367188e-05;
        float _2348 = (-1.0) - _2347;
        float _2350 = _2347 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2346 > _2350) || ((_2346 < _2348) || ((_2345 > _2350) || ((_2345 < _2348) || ((_2344 < _2348) || (_2344 > _2350))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2615 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2346, cbModelParam._m0[17u].z, fma(_2345, cbModelParam._m0[17u].y, _2344 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2346, cbModelParam._m0[18u].z, fma(_2345, cbModelParam._m0[18u].y, _2344 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2346, cbModelParam._m0[19u].z, fma(_2345, cbModelParam._m0[19u].y, _2344 * cbModelParam._m0[19u].x))), _1603);
            frontier_phi_25_49_ladder = _2615.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2615.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2615.x * cbModelParam._m0[1u].z;
        }
        _1696 = frontier_phi_25_49_ladder_2;
        _1698 = frontier_phi_25_49_ladder_1;
        _1700 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1680 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_666, _667, _668), _1603);
        _1696 = _1680.x * cbModelParam._m0[1u].z;
        _1698 = _1680.y * cbModelParam._m0[1u].z;
        _1700 = _1680.z * cbModelParam._m0[1u].z;
    }
    float _1712 = ((((1.0 - _693) * ((_682 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_693 * _682)) * _658;
    float _1713 = _1712 * ((cbModelParam._m0[1u].w * (_1696 - _1594)) + _1594);
    float _1714 = _1712 * ((cbModelParam._m0[1u].w * (_1698 - _1596)) + _1596);
    float _1715 = _1712 * ((cbModelParam._m0[1u].w * (_1700 - _1598)) + _1598);
    float _1718 = fma(_1715, cbSceneParam._m0[89u].z, fma(_1714, cbSceneParam._m0[89u].y, _1713 * cbSceneParam._m0[89u].x));
    float _1721 = fma(_1715, cbSceneParam._m0[90u].z, fma(_1714, cbSceneParam._m0[90u].y, _1713 * cbSceneParam._m0[90u].x));
    float _1724 = fma(_1715, cbSceneParam._m0[91u].z, fma(_1714, cbSceneParam._m0[91u].y, _1713 * cbSceneParam._m0[91u].x));
    float _1735 = _593 / cbSceneParam._m0[86u].x;
    float _1743 = (cbSceneParam._m0[88u].y * (1.0 - _555)) + cbSceneParam._m0[88u].z;
    float _4141 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
    float _1745 = (isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0))) * 5.0;
    float _1750 = (_681 * cbMtdParam._m0[12u].w) * dot(vec3(_552, _553, _554), vec3(1.0, 0.0, 0.0));
    vec4 _1760 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1750 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1750 + _1735) * cbSceneParam._m0[86u].x, _594), _1745).w) + _1735) * cbSceneParam._m0[86u].x, _594), _1745);
    float _1776 = 1.0 - _1760.w;
    uvec4 _1786 = floatBitsToUint(cbInstanceData._m0[_633 + 5u]);
    uint _1788 = _1786.x * 14u;
    uint _1789 = _1788 + 13u;
    float _1796 = _658 + (-1.0);
    float _1801 = (cbLight._m0[_1789].x * _1796) + 1.0;
    float _1802 = (cbLight._m0[_1789].y * _1796) + 1.0;
    float _1803 = (cbLight._m0[_1789].z * _1796) + 1.0;
    float _1804 = (cbLight._m0[_1789].w * _1796) + 1.0;
    uint _1805 = _1788 + 5u;
    float _1811 = isnan(1.0) ? _1802 : (isnan(_1802) ? 1.0 : min(_1802, 1.0));
    uint _1815 = _1788 + 4u;
    float _1821 = isnan(1.0) ? _1801 : (isnan(_1801) ? 1.0 : min(_1801, 1.0));
    uint _1825 = _1788 | 1u;
    float _1836 = dot(vec3(cbLight._m0[_1788].xyz), vec3(_552, _553, _554));
    float _1839 = dot(vec3(cbLight._m0[_1825].xyz), vec3(_552, _553, _554));
    float _4162 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
    float _4173 = isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0));
    float _1844 = (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * 0.3183098733425140380859375;
    float _1846 = (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) * 0.3183098733425140380859375;
    float _1853 = ((cbLight._m0[_1805].x * _1811) * _1846) + ((cbLight._m0[_1815].x * _1821) * _1844);
    float _1854 = ((_1811 * cbLight._m0[_1805].y) * _1846) + ((_1821 * cbLight._m0[_1815].y) * _1844);
    float _1855 = ((_1811 * cbLight._m0[_1805].z) * _1846) + ((_1821 * cbLight._m0[_1815].z) * _1844);
    uvec4 _1859 = floatBitsToUint(cbLight._m0[_1788 + 12u]);
    bool _1861 = _1859.x == 0u;
    float _1872;
    float _1874;
    float _1876;
    if (_1861)
    {
        _1872 = _1853;
        _1874 = _1854;
        _1876 = _1855;
    }
    else
    {
        uint _1880 = _1788 + 6u;
        float _1896 = (dot(vec3(cbLight._m0[_1788 + 2u].xyz), vec3(_552, _553, _554)) * 0.5) + 0.5;
        float _1897 = _1896 * _1896;
        float _4184 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
        float _1898 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _1899 = isnan(1.0) ? _1803 : (isnan(_1803) ? 1.0 : min(_1803, 1.0));
        _1872 = (((cbLight._m0[_1880].x * 0.3183098733425140380859375) * _1898) * _1899) + _1853;
        _1874 = (((cbLight._m0[_1880].y * 0.3183098733425140380859375) * _1898) * _1899) + _1854;
        _1876 = (((cbLight._m0[_1880].z * 0.3183098733425140380859375) * _1898) * _1899) + _1855;
    }
    bool _1879 = _1859.y == 0u;
    float _1917;
    float _1919;
    float _1921;
    if (_1879)
    {
        _1917 = _1872;
        _1919 = _1874;
        _1921 = _1876;
    }
    else
    {
        uint _2076 = _1788 + 7u;
        float _2092 = (dot(vec3(cbLight._m0[_1788 + 3u].xyz), vec3(_552, _553, _554)) * 0.5) + 0.5;
        float _2093 = _2092 * _2092;
        float _4200 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
        float _2094 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _2095 = isnan(1.0) ? _1804 : (isnan(_1804) ? 1.0 : min(_1804, 1.0));
        _1917 = (((cbLight._m0[_2076].x * 0.3183098733425140380859375) * _2094) * _2095) + _1872;
        _1919 = (((cbLight._m0[_2076].y * 0.3183098733425140380859375) * _2094) * _2095) + _1874;
        _1921 = (((cbLight._m0[_2076].z * 0.3183098733425140380859375) * _2094) * _2095) + _1876;
    }
    uint _1924 = _1788 + 8u;
    float _1937 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1788].w)) * _555) * 0.949999988079071044921875);
    float _1938 = _1937 * _1937;
    float _1939 = cbLight._m0[_1788].x + _293;
    float _1940 = cbLight._m0[_1788].y + _294;
    float _1941 = cbLight._m0[_1788].z + _295;
    float _1945 = inversesqrt(dot(vec3(_1939, _1940, _1941), vec3(_1939, _1940, _1941)));
    float _1946 = _1945 * _1939;
    float _1947 = _1945 * _1940;
    float _1948 = _1945 * _1941;
    float _1949 = dot(vec3(_552, _553, _554), vec3(cbLight._m0[_1788].xyz));
    float _4216 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
    float _1952 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
    float _4227 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _1953 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
    float _1954 = dot(vec3(_552, _553, _554), vec3(_1946, _1947, _1948));
    float _4238 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
    float _1957 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
    float _1958 = dot(vec3(cbLight._m0[_1788].xyz), vec3(_1946, _1947, _1948));
    float _4249 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
    float _1962 = _1938 * _1938;
    float _1966 = ((_1957 * _1957) * (_1962 + (-1.0))) + 1.0;
    float _1977 = (exp2(log2(1.0 - (isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1978 = 1.0 - _1938;
    float _1989 = (0.5 / (((_1953 * ((_1952 * _1978) + _1938)) + 9.9999999392252902907785028219223e-09) + (((_1953 * _1978) + _1938) * _1952))) * _1952;
    float _4260 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
    float _1991 = (isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0))) * (_1962 / ((_1966 * _1966) * 3.141590118408203125));
    uint _2002 = _1788 + 9u;
    float _2013 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1825].w)) * _555) * 0.949999988079071044921875);
    float _2014 = _2013 * _2013;
    float _2015 = cbLight._m0[_1825].x + _293;
    float _2016 = cbLight._m0[_1825].y + _294;
    float _2017 = cbLight._m0[_1825].z + _295;
    float _2021 = inversesqrt(dot(vec3(_2015, _2016, _2017), vec3(_2015, _2016, _2017)));
    float _2022 = _2021 * _2015;
    float _2023 = _2021 * _2016;
    float _2024 = _2021 * _2017;
    float _2025 = dot(vec3(_552, _553, _554), vec3(cbLight._m0[_1825].xyz));
    float _4271 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
    float _2028 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
    float _2029 = dot(vec3(_552, _553, _554), vec3(_2022, _2023, _2024));
    float _4282 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
    float _2032 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
    float _2033 = dot(vec3(cbLight._m0[_1825].xyz), vec3(_2022, _2023, _2024));
    float _4293 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
    float _2037 = _2014 * _2014;
    float _2041 = ((_2032 * _2032) * (_2037 + (-1.0))) + 1.0;
    float _2050 = (exp2(log2(1.0 - (isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2051 = 1.0 - _2014;
    float _2061 = (0.5 / (((_1953 * ((_2028 * _2051) + _2014)) + 9.9999999392252902907785028219223e-09) + (((_1953 * _2051) + _2014) * _2028))) * _2028;
    float _4304 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
    float _2063 = (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * (_2037 / ((_2041 * _2041) * 3.141590118408203125));
    float _2073 = (((_2050 * cbLight._m0[_2002].x) * _2063) * _1811) + (((_1977 * cbLight._m0[_1924].x) * _1991) * _1821);
    float _2074 = (((_2050 * cbLight._m0[_2002].y) * _2063) * _1811) + (((_1977 * cbLight._m0[_1924].y) * _1991) * _1821);
    float _2075 = (((_2050 * cbLight._m0[_2002].z) * _2063) * _1811) + (((_1977 * cbLight._m0[_1924].z) * _1991) * _1821);
    float _2137;
    float _2139;
    float _2141;
    if (_1861)
    {
        _2137 = _2073;
        _2139 = _2074;
        _2141 = _2075;
    }
    else
    {
        uint _2143 = _1788 + 2u;
        uint _2147 = _1788 + 10u;
        float _2161 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2143].w)) * _555) * 0.949999988079071044921875);
        float _2162 = _2161 * _2161;
        float _2163 = cbLight._m0[_2143].x + _293;
        float _2164 = cbLight._m0[_2143].y + _294;
        float _2165 = cbLight._m0[_2143].z + _295;
        float _2169 = inversesqrt(dot(vec3(_2163, _2164, _2165), vec3(_2163, _2164, _2165)));
        float _2170 = _2169 * _2163;
        float _2171 = _2169 * _2164;
        float _2172 = _2169 * _2165;
        float _2173 = dot(vec3(_552, _553, _554), vec3(cbLight._m0[_2143].xyz));
        float _4315 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
        float _2176 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
        float _2177 = dot(vec3(_552, _553, _554), vec3(_2170, _2171, _2172));
        float _4326 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
        float _2180 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _2181 = dot(vec3(cbLight._m0[_2143].xyz), vec3(_2170, _2171, _2172));
        float _4337 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
        float _2185 = _2162 * _2162;
        float _2189 = ((_2180 * _2180) * (_2185 + (-1.0))) + 1.0;
        float _2198 = (exp2(log2(1.0 - (isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2199 = 1.0 - _2162;
        float _2209 = (0.5 / (((_1953 * ((_2176 * _2199) + _2162)) + 9.9999999392252902907785028219223e-09) + (((_1953 * _2199) + _2162) * _2176))) * _2176;
        float _4348 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
        float _2211 = (isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))) * (_2185 / ((_2189 * _2189) * 3.141590118408203125));
        float _2212 = isnan(1.0) ? _1803 : (isnan(_1803) ? 1.0 : min(_1803, 1.0));
        _2137 = (((_2198 * cbLight._m0[_2147].x) * _2211) * _2212) + _2073;
        _2139 = (((_2198 * cbLight._m0[_2147].y) * _2211) * _2212) + _2074;
        _2141 = (((_2198 * cbLight._m0[_2147].z) * _2211) * _2212) + _2075;
    }
    float _2247;
    float _2249;
    float _2251;
    if (_1879)
    {
        _2247 = _2137;
        _2249 = _2139;
        _2251 = _2141;
    }
    else
    {
        uint _2258 = _1788 + 3u;
        uint _2262 = _1788 + 11u;
        float _2276 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2258].w)) * _555) * 0.949999988079071044921875);
        float _2277 = _2276 * _2276;
        float _2278 = cbLight._m0[_2258].x + _293;
        float _2279 = cbLight._m0[_2258].y + _294;
        float _2280 = cbLight._m0[_2258].z + _295;
        float _2284 = inversesqrt(dot(vec3(_2278, _2279, _2280), vec3(_2278, _2279, _2280)));
        float _2285 = _2284 * _2278;
        float _2286 = _2284 * _2279;
        float _2287 = _2284 * _2280;
        float _2288 = dot(vec3(_552, _553, _554), vec3(cbLight._m0[_2258].xyz));
        float _4364 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
        float _2291 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
        float _2292 = dot(vec3(_552, _553, _554), vec3(_2285, _2286, _2287));
        float _4375 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
        float _2295 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
        float _2296 = dot(vec3(cbLight._m0[_2258].xyz), vec3(_2285, _2286, _2287));
        float _4386 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
        float _2300 = _2277 * _2277;
        float _2304 = ((_2295 * _2295) * (_2300 + (-1.0))) + 1.0;
        float _2313 = (exp2(log2(1.0 - (isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2314 = 1.0 - _2277;
        float _2324 = (0.5 / (((_1953 * ((_2291 * _2314) + _2277)) + 9.9999999392252902907785028219223e-09) + (((_1953 * _2314) + _2277) * _2291))) * _2291;
        float _4397 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
        float _2326 = (isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0))) * (_2300 / ((_2304 * _2304) * 3.141590118408203125));
        float _2327 = isnan(1.0) ? _1804 : (isnan(_1804) ? 1.0 : min(_1804, 1.0));
        _2247 = (((_2313 * cbLight._m0[_2262].x) * _2326) * _2327) + _2137;
        _2249 = (((_2313 * cbLight._m0[_2262].y) * _2326) * _2327) + _2139;
        _2251 = (((_2313 * cbLight._m0[_2262].z) * _2326) * _2327) + _2141;
    }
    float _2462;
    float _2464;
    float _2466;
    float _2468;
    float _2470;
    float _2472;
    if (_1786.y == 0u)
    {
        float _2402 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2403 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2402;
        float _2404 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2402;
        float _2405 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2402;
        uvec4 _2417 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2418 = _2417.x;
        uint _2429 = uint((float(_2417.y) * floor(float(uint(cbSceneParam._m0[85u].y * _594) / _2418))) + floor(float(uint(cbSceneParam._m0[85u].x * _593) / _2418)));
        float _2439 = (log2(_2405 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2440 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
        uint _2443 = uint(isnan(14.0) ? _2440 : (isnan(_2440) ? 14.0 : min(_2440, 14.0)));
        uvec4 _2448 = texelFetch(g_lightClusterGridBuffer, int(((_2443 << 2u) + (_2429 << 6u)) >> 2u));
        uint _2449 = _2448.x;
        uint _2450 = _2417.z;
        float _2620;
        float _2622;
        float _2624;
        float _2626;
        float _2628;
        float _2630;
        if (((((1u << ((_2450 >> 4u) & 15u)) + 4294967295u) & _2449) == 0u) || ((_2450 & 240u) == 0u))
        {
            _2620 = 0.0;
            _2622 = 0.0;
            _2624 = 0.0;
            _2626 = 0.0;
            _2628 = 0.0;
            _2630 = 0.0;
        }
        else
        {
            float _2621;
            float _2623;
            float _2625;
            float _2627;
            float _2629;
            float _2631;
            float _2804 = 0.0;
            float _2805 = 0.0;
            float _2806 = 0.0;
            float _2807 = 0.0;
            float _2808 = 0.0;
            float _2809 = 0.0;
            uint _2810 = 0u;
            uint _2819;
            bool _2820;
            for (;;)
            {
                _2819 = texelFetch(g_lightClassification, int((((_2443 << 5u) + (_2429 << 9u)) + (_2810 << 2u)) >> 2u)).x;
                _2820 = _2819 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2820)
                {
                    frontier_phi_66_pred = _2804;
                    frontier_phi_66_pred_1 = _2809;
                    frontier_phi_66_pred_2 = _2808;
                    frontier_phi_66_pred_3 = _2807;
                    frontier_phi_66_pred_4 = _2806;
                    frontier_phi_66_pred_5 = _2805;
                }
                else
                {
                    float _2949;
                    float _2950;
                    float _2951;
                    float _2952;
                    float _2953;
                    float _2954;
                    uint _2955;
                    _2949 = _2804;
                    _2950 = _2805;
                    _2951 = _2806;
                    _2952 = _2807;
                    _2953 = _2808;
                    _2954 = _2809;
                    _2955 = _2819;
                    float _2876;
                    float _2877;
                    float _2878;
                    float _2879;
                    float _2880;
                    float _2881;
                    for (;;)
                    {
                        uint _2959 = uint(findLSB(_2955)) + (_2810 << 5u);
                        uint _2956 = (_2955 + 4294967295u) & _2955;
                        uint _2961 = _2959 * 48u;
                        vec4 _2975 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2961)).x, texelFetch(g_PointLightRenderingBuffer, int(_2961 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2961 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2961 + 3u)).x));
                        uint _2981 = (_2959 * 48u) + 4u;
                        vec4 _2994 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2981)).x, texelFetch(g_PointLightRenderingBuffer, int(_2981 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2981 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2981 + 3u)).x));
                        uint _3000 = (_2959 * 48u) + 8u;
                        vec3 _3011 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3000)).x, texelFetch(g_PointLightRenderingBuffer, int(_3000 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3000 + 2u)).x));
                        float _3015 = _2975.x - _2403;
                        float _3016 = _2975.y - _2404;
                        float _3017 = _2975.z - _2405;
                        float _3018 = dot(vec3(_3015, _3016, _3017), vec3(_3015, _3016, _3017));
                        float _3021 = inversesqrt(_3018);
                        float _3022 = _3021 * _3015;
                        float _3023 = _3021 * _3016;
                        float _3024 = _3021 * _3017;
                        float _3025 = dot(vec3(_614, _617, _620), vec3(_3022, _3023, _3024));
                        float _3030 = 1.0 - (_3018 * _2975.w);
                        float _4423 = isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0));
                        float _3031 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
                        float _3032 = sqrt(_3018) * _2994.w;
                        float _3035 = 1.39999997615814208984375 / (_3032 + 1.39999997615814208984375);
                        float _3036 = _3035 * _3035;
                        float _3039 = ((1.0 - _3036) * _3025) + _3036;
                        float _3042 = _3032 * _3032;
                        float _3046 = ((isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0))) * _3031) / ((_3042 * 0.699999988079071044921875) + 1.0);
                        float _3050 = (-0.0) - _2403;
                        float _3051 = (-0.0) - _2404;
                        float _3052 = (-0.0) - _2405;
                        float _3056 = inversesqrt(dot(vec3(_3050, _3051, _3052), vec3(_3050, _3051, _3052)));
                        float _3057 = _3056 * _3050;
                        float _3058 = _3056 * _3051;
                        float _3059 = _3056 * _3052;
                        float _3067 = exp2(log2(1.0 / ((_3042 * 3.5) + 5.0)) * 0.25);
                        float _3068 = 1.0 - _682;
                        float _3075 = sqrt(1.0 - ((1.0 - (_3068 * _3068)) * (1.0 - (_3067 * _3067))));
                        float _3076 = _3075 * _3075;
                        float _3077 = _3076 * _3076;
                        float _3078 = _3057 + _3022;
                        float _3079 = _3058 + _3023;
                        float _3080 = _3059 + _3024;
                        float _3084 = inversesqrt(dot(vec3(_3078, _3079, _3080), vec3(_3078, _3079, _3080)));
                        float _3088 = dot(vec3(_614, _617, _620), vec3(_3057, _3058, _3059));
                        float _4439 = isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : max(_3088, 0.0));
                        float _3091 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
                        float _3092 = dot(vec3(_614, _617, _620), vec3(_3084 * _3078, _3084 * _3079, _3084 * _3080));
                        float _4450 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
                        float _3095 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
                        float _3099 = ((_3095 * _3095) * (_3077 + (-1.0))) + 1.0;
                        float _3100 = _3035 * _3076;
                        float _3101 = _3100 * _3100;
                        float _3104 = ((1.0 - _3101) * _3025) + _3101;
                        float _4461 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0));
                        float _3105 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
                        float _3106 = 1.0 - _3076;
                        float _3116 = (0.5 / (((_3105 * ((_3091 * _3106) + _3076)) + 9.9999999392252902907785028219223e-09) + (((_3105 * _3106) + _3076) * _3091))) * _3105;
                        float _4472 = isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0));
                        float _3127 = (((_3077 * 3.1415927410125732421875) * (isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0)))) / ((_3099 * _3099) * ((_3042 * 2.1991131305694580078125) + 3.141590118408203125))) * _3031;
                        _2879 = (_3046 * _2994.x) + _2952;
                        _2880 = (_3046 * _2994.y) + _2953;
                        _2881 = (_3046 * _2994.z) + _2954;
                        _2876 = (_3127 * _3011.x) + _2949;
                        _2877 = (_3127 * _3011.y) + _2950;
                        _2878 = (_3127 * _3011.z) + _2951;
                        if (_2956 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2949 = _2876;
                            _2950 = _2877;
                            _2951 = _2878;
                            _2952 = _2879;
                            _2953 = _2880;
                            _2954 = _2881;
                            _2955 = _2956;
                        }
                    }
                    frontier_phi_66_pred = _2876;
                    frontier_phi_66_pred_1 = _2881;
                    frontier_phi_66_pred_2 = _2880;
                    frontier_phi_66_pred_3 = _2879;
                    frontier_phi_66_pred_4 = _2878;
                    frontier_phi_66_pred_5 = _2877;
                }
                _2621 = frontier_phi_66_pred;
                _2631 = frontier_phi_66_pred_1;
                _2629 = frontier_phi_66_pred_2;
                _2627 = frontier_phi_66_pred_3;
                _2625 = frontier_phi_66_pred_4;
                _2623 = frontier_phi_66_pred_5;
                uint _2811 = _2810 + 1u;
                if (_2811 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2804 = _2621;
                    _2805 = _2623;
                    _2806 = _2625;
                    _2807 = _2627;
                    _2808 = _2629;
                    _2809 = _2631;
                    _2810 = _2811;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2620 = _2621;
            _2622 = _2623;
            _2624 = _2625;
            _2626 = _2627;
            _2628 = _2629;
            _2630 = _2631;
        }
        uvec4 _2634 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2635 = _2634.z;
        uint _2637 = (_2635 >> 8u) & 15u;
        float _2772;
        float _2774;
        float _2776;
        float _2778;
        float _2780;
        float _2782;
        if (((4294967295u << _2637) & _2449) == 0u)
        {
            _2772 = _2620;
            _2774 = _2622;
            _2776 = _2624;
            _2778 = _2626;
            _2780 = _2628;
            _2782 = _2630;
        }
        else
        {
            float _2797 = inversesqrt(dot(vec3(_2403, _2404, _2405), vec3(_2403, _2404, _2405)));
            float _2798 = _2797 * _2403;
            float _2799 = _2797 * _2404;
            float _2800 = _2797 * _2405;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2637 < ((_2635 >> 12u) & 15u))
            {
                float _2773;
                float _2775;
                float _2777;
                float _2779;
                float _2781;
                float _2783;
                float _2932 = _2620;
                float _2933 = _2622;
                float _2934 = _2624;
                float _2935 = _2626;
                float _2936 = _2628;
                float _2937 = _2630;
                uint _2938 = _2637;
                uint _2947;
                bool _2948;
                for (;;)
                {
                    _2947 = texelFetch(g_lightClassification, int((((_2443 << 5u) + (_2429 << 9u)) + (_2938 << 2u)) >> 2u)).x;
                    _2948 = _2947 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2948)
                    {
                        frontier_phi_77_pred = _2937;
                        frontier_phi_77_pred_1 = _2936;
                        frontier_phi_77_pred_2 = _2935;
                        frontier_phi_77_pred_3 = _2934;
                        frontier_phi_77_pred_4 = _2933;
                        frontier_phi_77_pred_5 = _2932;
                    }
                    else
                    {
                        float _3141;
                        float _3142;
                        float _3143;
                        float _3144;
                        float _3145;
                        float _3146;
                        float _3437;
                        float _3438;
                        float _3439;
                        float _3440;
                        float _3441;
                        float _3442;
                        float _3154 = _2932;
                        float _3155 = _2933;
                        float _3156 = _2934;
                        float _3157 = _2935;
                        float _3158 = _2936;
                        float _3159 = _2937;
                        uint _3160 = _2947;
                        uint _3161;
                        vec4 _3186;
                        float _3187;
                        vec4 _3202;
                        vec3 _3214;
                        vec4 _3230;
                        vec4 _3246;
                        float _3293;
                        bool _3294;
                        for (;;)
                        {
                            uint _3171 = ((_2938 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3160));
                            _3161 = (_3160 + 4294967295u) & _3160;
                            uint _3173 = _3171 * 40u;
                            _3186 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3173)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 3u)).x));
                            _3187 = _3186.w;
                            uint _3189 = (_3171 * 40u) + 4u;
                            _3202 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3189)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 3u)).x));
                            uint _3204 = (_3171 * 40u) + 8u;
                            _3214 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3204)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 2u)).x));
                            uint _3217 = (_3171 * 40u) + 16u;
                            _3230 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3217)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 3u)).x));
                            uint _3233 = (_3171 * 40u) + 20u;
                            _3246 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3233)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 3u)).x));
                            uint _3249 = (_3171 * 40u) + 24u;
                            vec4 _3262 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3249)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 3u)).x));
                            uint _3268 = (_3171 * 40u) + 28u;
                            vec4 _3281 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3268)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 3u)).x));
                            _3293 = fma(_2405, _3281.z, fma(_2404, _3281.y, _3281.x * _2403)) + _3281.w;
                            _3294 = !((fma(_2405, _3262.z, fma(_2404, _3262.y, _3262.x * _2403)) + _3262.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3294)
                            {
                                float _3321 = _3186.x - _2403;
                                float _3322 = _3186.y - _2404;
                                float _3323 = _3186.z - _2405;
                                float _3324 = dot(vec3(_3321, _3322, _3323), vec3(_3321, _3322, _3323));
                                float _3327 = inversesqrt(_3324);
                                float _3328 = _3327 * _3321;
                                float _3329 = _3327 * _3322;
                                float _3330 = _3327 * _3323;
                                float _3334 = 1.0 - (_3324 / (_3187 * _3187));
                                float _4483 = isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0));
                                float _3335 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
                                float _3339 = sqrt(_3324) * _3202.w;
                                float _3341 = 1.39999997615814208984375 / (_3339 + 1.39999997615814208984375);
                                float _3342 = _3341 * _3341;
                                float _3345 = ((1.0 - _3342) * dot(vec3(_3328, _3329, _3330), vec3(_614, _617, _620))) + _3342;
                                float _3348 = _3339 * _3339;
                                float _3352 = (fma(_2405, _3230.z, fma(_2404, _3230.y, _3230.x * _2403)) + _3230.w) / _3293;
                                float _3353 = (fma(_2405, _3246.z, fma(_2404, _3246.y, _3246.x * _2403)) + _3246.w) / _3293;
                                float _3357 = 1.0 - dot(vec2(_3352, _3353), vec2(_3352, _3353));
                                float _4499 = isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0));
                                float _3358 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
                                float _3359 = _3358 * (((isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0))) * _3335) / ((_3348 * 0.699999988079071044921875) + 1.0));
                                float _3371 = exp2(log2(1.0 / ((_3348 * 3.5) + 5.0)) * 0.25);
                                float _3372 = 1.0 - _682;
                                float _3379 = sqrt(1.0 - ((1.0 - (_3372 * _3372)) * (1.0 - (_3371 * _3371))));
                                float _3380 = _3379 * _3379;
                                float _3381 = _3380 * _3380;
                                float _3382 = _3328 - _2798;
                                float _3383 = _3329 - _2799;
                                float _3384 = _3330 - _2800;
                                float _3388 = inversesqrt(dot(vec3(_3382, _3383, _3384), vec3(_3382, _3383, _3384)));
                                float _3392 = dot(vec3(_614, _617, _620), vec3((-0.0) - _2798, (-0.0) - _2799, (-0.0) - _2800));
                                float _4510 = isnan(0.0) ? _3392 : (isnan(_3392) ? 0.0 : max(_3392, 0.0));
                                float _3395 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
                                float _3396 = dot(vec3(_614, _617, _620), vec3(_3388 * _3382, _3388 * _3383, _3388 * _3384));
                                float _4521 = isnan(0.0) ? _3396 : (isnan(_3396) ? 0.0 : max(_3396, 0.0));
                                float _3399 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
                                float _3403 = ((_3399 * _3399) * (_3381 + (-1.0))) + 1.0;
                                float _3404 = _3341 * _3380;
                                float _3405 = _3404 * _3404;
                                float _3411 = ((1.0 - _3405) * dot(vec3(_614, _617, _620), vec3(_3328, _3329, _3330))) + _3405;
                                float _4532 = isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0));
                                float _3412 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
                                float _3413 = 1.0 - _3380;
                                float _3423 = (0.5 / (((_3412 * ((_3395 * _3413) + _3380)) + 9.9999999392252902907785028219223e-09) + (((_3412 * _3413) + _3380) * _3395))) * _3412;
                                float _4543 = isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0));
                                float _3433 = (_3358 * _3335) * (((_3381 * 3.1415927410125732421875) * (isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0)))) / ((_3403 * _3403) * ((_3348 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3359 * _3202.y;
                                frontier_phi_83_pred_1 = _3359 * _3202.x;
                                frontier_phi_83_pred_2 = _3433 * _3214.z;
                                frontier_phi_83_pred_3 = _3433 * _3214.y;
                                frontier_phi_83_pred_4 = _3433 * _3214.x;
                                frontier_phi_83_pred_5 = _3359 * _3202.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3441 = frontier_phi_83_pred;
                            _3440 = frontier_phi_83_pred_1;
                            _3439 = frontier_phi_83_pred_2;
                            _3438 = frontier_phi_83_pred_3;
                            _3437 = frontier_phi_83_pred_4;
                            _3442 = frontier_phi_83_pred_5;
                            _3144 = _3440 + _3157;
                            _3145 = _3441 + _3158;
                            _3146 = _3442 + _3159;
                            _3141 = _3437 + _3154;
                            _3142 = _3438 + _3155;
                            _3143 = _3439 + _3156;
                            if (_3161 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3154 = _3141;
                                _3155 = _3142;
                                _3156 = _3143;
                                _3157 = _3144;
                                _3158 = _3145;
                                _3159 = _3146;
                                _3160 = _3161;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3146;
                        frontier_phi_77_pred_1 = _3145;
                        frontier_phi_77_pred_2 = _3144;
                        frontier_phi_77_pred_3 = _3143;
                        frontier_phi_77_pred_4 = _3142;
                        frontier_phi_77_pred_5 = _3141;
                    }
                    _2783 = frontier_phi_77_pred;
                    _2781 = frontier_phi_77_pred_1;
                    _2779 = frontier_phi_77_pred_2;
                    _2777 = frontier_phi_77_pred_3;
                    _2775 = frontier_phi_77_pred_4;
                    _2773 = frontier_phi_77_pred_5;
                    uint _2939 = _2938 + 1u;
                    if (_2939 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2932 = _2773;
                        _2933 = _2775;
                        _2934 = _2777;
                        _2935 = _2779;
                        _2936 = _2781;
                        _2937 = _2783;
                        _2938 = _2939;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2777;
                frontier_phi_58_59_ladder_1 = _2783;
                frontier_phi_58_59_ladder_2 = _2781;
                frontier_phi_58_59_ladder_3 = _2779;
                frontier_phi_58_59_ladder_4 = _2775;
                frontier_phi_58_59_ladder_5 = _2773;
            }
            else
            {
                frontier_phi_58_59_ladder = _2624;
                frontier_phi_58_59_ladder_1 = _2630;
                frontier_phi_58_59_ladder_2 = _2628;
                frontier_phi_58_59_ladder_3 = _2626;
                frontier_phi_58_59_ladder_4 = _2622;
                frontier_phi_58_59_ladder_5 = _2620;
            }
            _2772 = frontier_phi_58_59_ladder_5;
            _2774 = frontier_phi_58_59_ladder_4;
            _2776 = frontier_phi_58_59_ladder;
            _2778 = frontier_phi_58_59_ladder_3;
            _2780 = frontier_phi_58_59_ladder_2;
            _2782 = frontier_phi_58_59_ladder_1;
        }
        float _2787 = isnan(1.0) ? _658 : (isnan(_658) ? 1.0 : min(_658, 1.0));
        _2462 = (_2787 * _2778) + _1917;
        _2464 = (_2787 * _2780) + _1919;
        _2466 = (_2787 * _2782) + _1921;
        _2468 = ((_2772 * 0.039999999105930328369140625) * _2787) + _2247;
        _2470 = ((_2774 * 0.039999999105930328369140625) * _2787) + _2249;
        _2472 = ((_2776 * 0.039999999105930328369140625) * _2787) + _2251;
    }
    else
    {
        _2462 = _1917;
        _2464 = _1919;
        _2466 = _1921;
        _2468 = _2247;
        _2470 = _2249;
        _2472 = _2251;
    }
    float _2486 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2487 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2488 = cbSceneParam._m0[86u].x * (_1735 + ((_681 * cbMtdParam._m0[13u].z) * dot(vec3(_552, _553, _554), vec3(_201, _202, _203))));
    float _2489 = isnan(_2486) ? _2488 : (isnan(_2488) ? _2486 : min(_2488, _2486));
    float _2490 = isnan(_2487) ? _594 : (isnan(_594) ? _2487 : min(_594, _2487));
    vec4 _2492 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2489, _2490), 0.0);
    float _2494 = _2492.x;
    bool _2515 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2494)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2494))) > _574;
    vec4 _2519 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2515 ? _2489 : _593, _2515 ? _2490 : _594));
    float _4569 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _4580 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _4591 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _2543 = 0.959999978542327880859375 - (exp2(log2(1.0 - _673) * 5.0) * 0.959999978542327880859375);
    float _2545 = (_2519.x * _2543) * cbSceneParam._m0[72u].w;
    float _2547 = (_2519.y * _2543) * cbSceneParam._m0[72u].w;
    float _2549 = (_2519.z * _2543) * cbSceneParam._m0[72u].w;
    float _2557 = (_2545 + (((((_1712 * _1760.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0))) * _1503) * _1776)) + _2468) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0))) * (_2462 + ((isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0))) * _658))) - _2545) * _537);
    float _2559 = (_2547 + (((((_1712 * _1760.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0))) * _1503) * _1776)) + _2470) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0))) * (_2464 + ((isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0))) * _658))) - _2547) * _537);
    float _2561 = (_2549 + (((((_1712 * _1760.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0))) * _1503) * _1776)) + _2472) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0))) * (_2466 + ((isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0))) * _658))) - _2549) * _537);
    uint _2562 = _633 + 6u;
    float _2570 = _593 / cbSceneParam._m0[86u].x;
    float _2571 = _594 / cbSceneParam._m0[86u].y;
    vec4 _2585 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2570, _2571, (log2((isnan(cbSceneParam._m0[77u].w) ? _574 : (isnan(_574) ? cbSceneParam._m0[77u].w : min(_574, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2587 = _2585.x;
    float _2588 = _2585.y;
    float _2589 = _2585.z;
    float _2590 = _2585.w;
    float _2682;
    float _2684;
    float _2686;
    float _2688;
    if (_574 > cbSceneParam._m0[78u].w)
    {
        float _2645 = isnan(_574) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _574 : min(cbSceneParam._m0[80u].w, _574));
        float _2646 = _2645 / _574;
        float _2657 = _2646 * _272;
        float _2658 = _273 * _2646;
        float _2659 = (-0.0) - _2658;
        float _2660 = _2646 * _274;
        float _2662 = (cbSceneParam._m0[77u].w * _2659) / _2645;
        float _2663 = _2662 + cbSceneParam._m0[79u].w;
        float _2664 = cbSceneParam._m0[79u].w - _2658;
        float _2670 = sqrt(((_2657 * _2657) + (_2658 * _2658)) + (_2660 * _2660));
        float _2673 = (1.0 - (cbSceneParam._m0[77u].w / _2645)) * _2670;
        float _2678 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2680 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2889;
        if (abs((_2659 - _2662) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2889 = ((((_2663 > 0.0) ? exp2(_2678 * _2663) : (2.0 - exp2(_2680 * _2663))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2673;
        }
        else
        {
            float _2833 = 1.0 / cbSceneParam._m0[80u].x;
            float _2834 = isnan(_2664) ? _2663 : (isnan(_2663) ? _2664 : max(_2663, _2664));
            float _2835 = isnan(_2664) ? _2663 : (isnan(_2663) ? _2664 : min(_2663, _2664));
            float _2844 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : min(_2834, 0.0));
            float _2845 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : min(_2835, 0.0));
            _2889 = ((abs(_2670 / _2659) * cbSceneParam._m0[80u].y) * ((((_2844 - _2845) * 2.0) - ((exp2(_2678 * (isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0)))) - exp2(_2678 * (isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0))))) * _2833)) - ((exp2(_2680 * _2844) - exp2(_2680 * _2845)) * _2833))) + (_2673 * cbSceneParam._m0[80u].z);
        }
        vec4 _2891 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2570, _2571, 1.0), 0.0);
        float _2900 = exp2((_2889 * (-1.44269502162933349609375)) * (1.0 - _2891.w));
        float _2901 = log2(_2900);
        float _2917 = log2(_2590);
        _2682 = (exp2(_2917 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2901 * cbSceneParam._m0[78u].x)) * _2891.x) / cbSceneParam._m0[78u].x)) + _2587;
        _2684 = (exp2(_2917 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2901 * cbSceneParam._m0[78u].y)) * _2891.y) / cbSceneParam._m0[78u].y)) + _2588;
        _2686 = (exp2(_2917 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2901 * cbSceneParam._m0[78u].z)) * _2891.z) / cbSceneParam._m0[78u].z)) + _2589;
        _2688 = _2900 * _2590;
    }
    else
    {
        _2682 = _2587;
        _2684 = _2588;
        _2686 = _2589;
        _2688 = _2590;
    }
    bool _2927;
    float _2743;
    vec4 _2746;
    float _2748;
    vec4 _2750;
    float _2758;
    float _2759;
    float _2760;
    float _2761;
    bool _2771;
    for (;;)
    {
        bool _2700 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _2701 = log2(_2688);
        float _2708 = exp2(_2701 * cbSceneParam._m0[78u].x) * _2557;
        float _2709 = exp2(_2701 * cbSceneParam._m0[78u].y) * _2559;
        float _2710 = exp2(_2701 * cbSceneParam._m0[78u].z) * _2561;
        vec4 _2718 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_593, _594));
        float _2720 = _2718.x;
        float _2741 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2720)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2720))) - _574) * 3.0;
        float _4642 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0));
        _2743 = (isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0))) * cbInstanceData._m0[_2562].w;
        float _2744 = _581 + (-0.5);
        _2746 = cbMtdParam._m0[1u];
        _2748 = _2746.y * _2744;
        _2750 = cbMatDynParam._m0[0u];
        float _2757 = (roundEven(_2750.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2758 = _2757 * (_2700 ? _2708 : (_2708 + (cbSceneParam._m0[72u].w * _2682)));
        _2759 = _2757 * (_2700 ? _2709 : (_2709 + (cbSceneParam._m0[72u].w * _2684)));
        _2760 = _2757 * (_2700 ? _2710 : (_2710 + (cbSceneParam._m0[72u].w * _2686)));
        _2761 = _2744 * 0.999000012874603271484375;
        _2771 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2771)
        {
            if ((cbInstanceData._m0[_633 + 7u].x + _2761) < 0.5)
            {
                _2927 = true;
                break;
            }
        }
        uint _2868 = _634 + uint(_2750.w);
        if ((cbInstanceData._m0[_2868].w < 1.0) && ((cbInstanceData._m0[_2868].w + _2761) < 0.5))
        {
            _2927 = true;
            break;
        }
        if ((_2748 + 1.0) < _2746.x)
        {
            _2927 = true;
            break;
        }
        _2927 = false;
        break;
    }
    float _3132;
    if (_2927)
    {
        discard_state = true;
        _3132 = 0.0;
    }
    else
    {
        _3132 = _2743;
    }
    SV_Target.x = _2758;
    SV_Target.y = _2759;
    SV_Target.z = _2760;
    SV_Target.w = _3132;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2743;
    discard_exit();
}


