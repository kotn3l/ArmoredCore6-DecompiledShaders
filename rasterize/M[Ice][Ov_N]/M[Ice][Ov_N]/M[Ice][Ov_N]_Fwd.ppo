#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Ice_Ov_N_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Ice_Ov_N_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Ice_Ov_N_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Ice_Ov_N_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Ice_Ov_N_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1020;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _196 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _197 = _196 * _188;
    float _198 = _196 * _189;
    float _199 = _196 * _190;
    float _203 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _204 = _203 * NORMAL.x;
    float _205 = _203 * NORMAL.y;
    float _206 = _203 * NORMAL.z;
    float _210 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _211 = _210 * TANGENT.x;
    float _212 = _210 * TANGENT.y;
    float _213 = _210 * TANGENT.z;
    float _246 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _250 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _254 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _258 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _268 = cbSceneParam._m0[71u].x - (_246 / _258);
    float _269 = cbSceneParam._m0[71u].y - (_250 / _258);
    float _270 = cbSceneParam._m0[71u].z - (_254 / _258);
    float _288 = inversesqrt(dot(vec3(_268, _269, _270), vec3(_268, _269, _270)));
    float _289 = _288 * _268;
    float _290 = _288 * _269;
    float _291 = _288 * _270;
    float _295 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _299 = dot(vec4(_289, _290, _291, 0.0), vec4(_295 * _204, _295 * _205, _295 * _206, 0.0));
    float _3485 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _307 = exp2(log2(1.0 - (isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0)))) * cbMtdParam._m0[12u].z);
    float _3496 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _308 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
    float _315 = (_308 * (cbMtdParam._m0[11u].x - cbMtdParam._m0[10u].x)) + cbMtdParam._m0[10u].x;
    float _316 = (_308 * (cbMtdParam._m0[11u].y - cbMtdParam._m0[10u].y)) + cbMtdParam._m0[10u].y;
    float _317 = (_308 * (cbMtdParam._m0[11u].z - cbMtdParam._m0[10u].z)) + cbMtdParam._m0[10u].z;
    vec4 _336 = texture(sampler2D(M_Ice_Ov_N_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _344 = (_336.x * 2.0) + (-1.0);
    float _346 = (_336.y * 2.0) + (-1.0);
    float _347 = dot(vec2(_344, _346), vec2(_344, _346));
    float _3507 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _352 = sqrt(1.0 - (isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0))));
    float _355 = fma(_352, _204, fma(_346, _211, _344 * _197));
    float _358 = fma(_352, _205, fma(_346, _212, _344 * _198));
    float _361 = fma(_352, _206, fma(_346, _213, _344 * _199));
    float _365 = inversesqrt(dot(vec3(_355, _358, _361), vec3(_355, _358, _361)));
    float _376 = cbMtdParam._m0[13u].y + dot(vec4(_365 * _355, _365 * _358, _365 * _361, 0.0), vec4(cbMtdParam._m0[14u].yzw, 0.0));
    float _3518 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _378 = (isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0))) * TEXCOORD_3.x;
    float _3529 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _379 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
    vec4 _391 = texture(sampler2D(M_Ice_Ov_N_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _410 = (((cbMtdParam._m0[9u].x * _391.x) - _315) * _379) + _315;
    float _411 = (((cbMtdParam._m0[9u].y * _391.y) - _316) * _379) + _316;
    float _412 = (((cbMtdParam._m0[9u].z * _391.z) - _317) * _379) + _317;
    float _417 = ((cbMtdParam._m0[14u].x - cbMtdParam._m0[12u].x) * _379) + cbMtdParam._m0[12u].x;
    float _419 = abs(_204);
    float _420 = abs(_205);
    float _421 = abs(_206);
    float _422 = _419 * _419;
    float _423 = _420 * _420;
    float _424 = _421 * _421;
    float _427 = _250 * 0.0500000007450580596923828125;
    float _438 = (cbTextureTilingScale._m0[4u].x * (_246 * 0.0500000007450580596923828125)) + cbTextureTilingScale._m0[4u].z;
    vec4 _441 = texture(sampler2D(M_Ice_Ov_N_snp_0_Texture2D_9, SS_BumpMap), vec2(_438, (cbTextureTilingScale._m0[4u].y * _427) + cbTextureTilingScale._m0[4u].w));
    float _448 = (cbTextureTilingScale._m0[4u].y * (_254 * 0.0500000007450580596923828125)) + cbTextureTilingScale._m0[4u].w;
    vec4 _449 = texture(sampler2D(M_Ice_Ov_N_snp_0_Texture2D_9, SS_BumpMap), vec2(_438, _448));
    vec4 _459 = texture(sampler2D(M_Ice_Ov_N_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _427) + cbTextureTilingScale._m0[4u].z, _448));
    vec4 _486 = texture(sampler2D(M_Ice_Ov_N_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    vec4 _505 = texture(sampler2D(M_Ice_Ov_N_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _511 = (_505.x * 2.0) + (-1.0);
    float _512 = (_505.y * 2.0) + (-1.0);
    float _3540 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _513 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
    float _518 = (_513 * _513) * (3.0 - (_513 * 2.0));
    float _528 = (((((((_449.x * _423) + (_441.x * _424)) + (_459.x * _422)) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].x) + _344) + (((_518 * (((_486.x * 2.0) + (-1.0)) - _511)) + _511) * cbMtdParam._m0[12u].y);
    float _529 = (((((((_449.y * _423) + (_441.y * _424)) + (_459.y * _422)) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].x) + _346) + (((_518 * (((_486.y * 2.0) + (-1.0)) - _512)) + _512) * cbMtdParam._m0[12u].y);
    float _532 = cbMtdParam._m0[13u].w + _379;
    float _3551 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _533 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
    float _537 = fma(_352, _204, fma(_529, _211, _528 * _197));
    float _540 = fma(_352, _205, fma(_529, _212, _528 * _198));
    float _543 = fma(_352, _206, fma(_529, _213, _528 * _199));
    float _547 = inversesqrt(dot(vec3(_537, _540, _543), vec3(_537, _540, _543)));
    float _548 = _547 * _537;
    float _549 = _547 * _540;
    float _550 = _547 * _543;
    float _3562 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _551 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
    float _3573 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _3584 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _3595 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _570 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _576 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _577 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _598 = fma(_550, cbSceneParam._m0[5u].z, fma(_549, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _548));
    float _601 = fma(_550, cbSceneParam._m0[6u].z, fma(_549, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _548));
    float _604 = fma(_550, cbSceneParam._m0[7u].z, fma(_549, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _548));
    uint _617 = uint(roundEven(NORMAL.w)) * 13u;
    uint _619 = (_617 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _625 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0)))) * cbInstanceData._m0[_619].x;
    float _626 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0)))) * cbInstanceData._m0[_619].y;
    float _627 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0)))) * cbInstanceData._m0[_619].z;
    float _3606 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _628 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
    float _3617 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _629 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
    float _3628 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _630 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
    vec4 _639 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _576, cbSceneParam._m0[86u].y * _577));
    float _642 = _639.x * TEXCOORD_3.w;
    float _643 = dot(vec3(_548, _549, _550), vec3(_289, _290, _291));
    float _646 = _643 * 2.0;
    float _650 = (_646 * _548) - _289;
    float _651 = (_646 * _549) - _290;
    float _652 = (_646 * _550) - _291;
    float _656 = abs(dot(vec3(_289, _290, _291), vec3(_548, _549, _550)));
    float _3639 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _657 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
    float _665 = 10.0 / (_570 + 10.0);
    float _666 = sqrt(_551);
    float _677 = exp2((_666 * 5.0) * log2(1.0 - (_657 * 0.999000012874603271484375))) / (4.0 - (_666 * 3.0));
    float _709 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _713 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _717 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1019;
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _744 = fma(_717, cbModelParam._m0[26u].z, fma(_713, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _709));
        float _748 = fma(_717, cbModelParam._m0[27u].z, fma(_713, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _709));
        float _752 = fma(_717, cbModelParam._m0[28u].z, fma(_713, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _709));
        float _777 = _709 + _548;
        float _778 = _713 + _549;
        float _779 = _717 + _550;
        float _789 = fma(_779, cbModelParam._m0[26u].z, fma(_778, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _777)) - _744;
        float _790 = fma(_779, cbModelParam._m0[27u].z, fma(_778, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _777)) - _748;
        float _791 = fma(_779, cbModelParam._m0[28u].z, fma(_778, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _777)) - _752;
        float _795 = inversesqrt(dot(vec3(_789, _790, _791), vec3(_789, _790, _791)));
        float _808 = ((_795 * _789) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_744 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _809 = ((_795 * _790) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_748 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _810 = ((_795 * _791) / cbModelParam._m0[34u].z) + ((((((_752 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _813 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_808, _809, _810), 0.0);
        vec4 _820 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_808, _809, _810), 0.0);
        vec4 _827 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_808, _809, _810), 0.0);
        vec4 _834 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_808, _809, _810), 0.0);
        float _847 = exp2((_813.w + (-0.5)) * 20.0) * 2.0;
        float _848 = _847 * (_813.x + (-0.5));
        float _849 = _847 * (_813.y + (-0.5));
        float _850 = _847 * (_813.z + (-0.5));
        float _857 = exp2((_820.w + (-0.5)) * 20.0) * 2.0;
        float _858 = _857 * (_820.x + (-0.5));
        float _859 = _857 * (_820.y + (-0.5));
        float _860 = _857 * (_820.z + (-0.5));
        float _867 = exp2((_827.w + (-0.5)) * 20.0) * 2.0;
        float _868 = _867 * (_827.x + (-0.5));
        float _869 = _867 * (_827.y + (-0.5));
        float _870 = _867 * (_827.z + (-0.5));
        float _877 = exp2((_834.w + (-0.5)) * 20.0) * 2.0;
        float _878 = _877 * (_834.x + (-0.5));
        float _879 = _877 * (_834.y + (-0.5));
        float _880 = _877 * (_834.z + (-0.5));
        float _881 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _882 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        float _883 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        float _884 = _848 * 0.5;
        float _885 = _858 * 0.5;
        float _886 = _868 * 0.5;
        float _887 = dot(vec3(_884, _885, _886), vec3(_884, _885, _886));
        float _892 = (_887 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_887);
        float _901 = (dot(vec3(_548, _549, _550), vec3(_892 * _884, _892 * _885, _892 * _886)) + 1.0) * 0.5;
        float _3665 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _911 = sqrt(((_885 * _885) + (_884 * _884)) + (_886 * _886)) / (_881 + 9.9999997473787516355514526367188e-06);
        float _3676 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _912 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
        float _913 = _912 * 2.0;
        float _917 = (1.0 - _912) / (_912 + 1.0);
        float _3687 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _918 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
        float _927 = ((((1.0 - _918) * (_913 + 2.0)) * exp2(log2(isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0))) * (_913 + 1.0))) + _918) * _881;
        float _928 = _849 * 0.5;
        float _929 = _859 * 0.5;
        float _930 = _869 * 0.5;
        float _931 = dot(vec3(_928, _929, _930), vec3(_928, _929, _930));
        float _936 = (_931 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_931);
        float _944 = (dot(vec3(_548, _549, _550), vec3(_936 * _928, _936 * _929, _936 * _930)) + 1.0) * 0.5;
        float _3698 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _953 = sqrt(((_929 * _929) + (_928 * _928)) + (_930 * _930)) / (_882 + 9.9999997473787516355514526367188e-06);
        float _3709 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _954 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _955 = _954 * 2.0;
        float _959 = (1.0 - _954) / (_954 + 1.0);
        float _3720 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _960 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
        float _969 = ((((1.0 - _960) * (_955 + 2.0)) * exp2(log2(isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0))) * (_955 + 1.0))) + _960) * _882;
        float _970 = _850 * 0.5;
        float _971 = _860 * 0.5;
        float _972 = _870 * 0.5;
        float _973 = dot(vec3(_970, _971, _972), vec3(_970, _971, _972));
        float _978 = (_973 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_973);
        float _986 = (dot(vec3(_548, _549, _550), vec3(_978 * _970, _978 * _971, _978 * _972)) + 1.0) * 0.5;
        float _3731 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _995 = sqrt(((_971 * _971) + (_970 * _970)) + (_972 * _972)) / (_883 + 9.9999997473787516355514526367188e-06);
        float _3742 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _996 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _997 = _996 * 2.0;
        float _1001 = (1.0 - _996) / (_996 + 1.0);
        float _3753 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1002 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
        float _1011 = ((((1.0 - _1002) * (_997 + 2.0)) * exp2(log2(isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0))) * (_997 + 1.0))) + _1002) * _883;
        _1019 = _850;
        _1021 = _849;
        _1022 = _848;
        _1023 = _860;
        _1024 = _859;
        _1025 = _858;
        _1026 = _870;
        _1027 = _869;
        _1028 = _868;
        _1029 = _883;
        _1030 = _882;
        _1031 = _881;
        _1032 = cbModelParam._m0[36u].z * (isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0)));
        _1033 = cbModelParam._m0[36u].z * (isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0)));
        _1034 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0)));
    }
    else
    {
        _1019 = _1020;
        _1021 = _1020;
        _1022 = _1020;
        _1023 = _1020;
        _1024 = _1020;
        _1025 = _1020;
        _1026 = _1020;
        _1027 = _1020;
        _1028 = _1020;
        _1029 = _1020;
        _1030 = _1020;
        _1031 = _1020;
        _1032 = 0.0;
        _1033 = 0.0;
        _1034 = 0.0;
    }
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1060 = fma(_717, cbModelParam._m0[30u].z, fma(_713, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _709));
        float _1064 = fma(_717, cbModelParam._m0[31u].z, fma(_713, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _709));
        float _1068 = fma(_717, cbModelParam._m0[32u].z, fma(_713, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _709));
        float _1091 = _709 + _548;
        float _1092 = _713 + _549;
        float _1093 = _717 + _550;
        float _1103 = fma(_1093, cbModelParam._m0[30u].z, fma(_1092, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1091)) - _1060;
        float _1104 = fma(_1093, cbModelParam._m0[31u].z, fma(_1092, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1091)) - _1064;
        float _1105 = fma(_1093, cbModelParam._m0[32u].z, fma(_1092, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1091)) - _1068;
        float _1109 = inversesqrt(dot(vec3(_1103, _1104, _1105), vec3(_1103, _1104, _1105)));
        float _1122 = ((_1109 * _1103) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1060 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1123 = ((_1109 * _1104) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1064 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1124 = ((_1109 * _1105) / cbModelParam._m0[35u].z) + ((((((_1068 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1126 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1122, _1123, _1124), 0.0);
        vec4 _1133 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1122, _1123, _1124), 0.0);
        vec4 _1140 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1122, _1123, _1124), 0.0);
        vec4 _1147 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1122, _1123, _1124), 0.0);
        float _1159 = exp2((_1126.w + (-0.5)) * 20.0) * 2.0;
        float _1160 = _1159 * (_1126.x + (-0.5));
        float _1161 = _1159 * (_1126.y + (-0.5));
        float _1162 = _1159 * (_1126.z + (-0.5));
        float _1169 = exp2((_1133.w + (-0.5)) * 20.0) * 2.0;
        float _1170 = _1169 * (_1133.x + (-0.5));
        float _1171 = _1169 * (_1133.y + (-0.5));
        float _1172 = _1169 * (_1133.z + (-0.5));
        float _1179 = exp2((_1140.w + (-0.5)) * 20.0) * 2.0;
        float _1180 = _1179 * (_1140.x + (-0.5));
        float _1181 = _1179 * (_1140.y + (-0.5));
        float _1182 = _1179 * (_1140.z + (-0.5));
        float _1189 = exp2((_1147.w + (-0.5)) * 20.0) * 2.0;
        float _1190 = _1189 * (_1147.x + (-0.5));
        float _1191 = _1189 * (_1147.y + (-0.5));
        float _1192 = _1189 * (_1147.z + (-0.5));
        float _1193 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1194 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1195 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1196 = _1160 * 0.5;
        float _1197 = _1170 * 0.5;
        float _1198 = _1180 * 0.5;
        float _1199 = dot(vec3(_1196, _1197, _1198), vec3(_1196, _1197, _1198));
        float _1204 = (_1199 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1199);
        float _1212 = (dot(vec3(_548, _549, _550), vec3(_1204 * _1196, _1204 * _1197, _1204 * _1198)) + 1.0) * 0.5;
        float _3794 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1221 = sqrt(((_1197 * _1197) + (_1196 * _1196)) + (_1198 * _1198)) / (_1193 + 9.9999997473787516355514526367188e-06);
        float _3805 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
        float _1223 = _1222 * 2.0;
        float _1227 = (1.0 - _1222) / (_1222 + 1.0);
        float _3816 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _1237 = ((((1.0 - _1228) * (_1223 + 2.0)) * exp2(log2(isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) * (_1223 + 1.0))) + _1228) * _1193;
        float _1238 = _1161 * 0.5;
        float _1239 = _1171 * 0.5;
        float _1240 = _1181 * 0.5;
        float _1241 = dot(vec3(_1238, _1239, _1240), vec3(_1238, _1239, _1240));
        float _1246 = (_1241 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1241);
        float _1254 = (dot(vec3(_548, _549, _550), vec3(_1246 * _1238, _1246 * _1239, _1246 * _1240)) + 1.0) * 0.5;
        float _3827 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1263 = sqrt(((_1239 * _1239) + (_1238 * _1238)) + (_1240 * _1240)) / (_1194 + 9.9999997473787516355514526367188e-06);
        float _3838 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
        float _1265 = _1264 * 2.0;
        float _1269 = (1.0 - _1264) / (_1264 + 1.0);
        float _3849 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _1279 = ((((1.0 - _1270) * (_1265 + 2.0)) * exp2(log2(isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0))) * (_1265 + 1.0))) + _1270) * _1194;
        float _1280 = _1162 * 0.5;
        float _1281 = _1172 * 0.5;
        float _1282 = _1182 * 0.5;
        float _1283 = dot(vec3(_1280, _1281, _1282), vec3(_1280, _1281, _1282));
        float _1288 = (_1283 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1283);
        float _1296 = (dot(vec3(_548, _549, _550), vec3(_1288 * _1280, _1288 * _1281, _1288 * _1282)) + 1.0) * 0.5;
        float _3860 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1305 = sqrt(((_1281 * _1281) + (_1280 * _1280)) + (_1282 * _1282)) / (_1195 + 9.9999997473787516355514526367188e-06);
        float _3871 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _1307 = _1306 * 2.0;
        float _1311 = (1.0 - _1306) / (_1306 + 1.0);
        float _3882 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _1321 = ((((1.0 - _1312) * (_1307 + 2.0)) * exp2(log2(isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0))) * (_1307 + 1.0))) + _1312) * _1195;
        _1329 = _1162;
        _1330 = _1161;
        _1331 = _1160;
        _1332 = _1172;
        _1333 = _1171;
        _1334 = _1170;
        _1335 = _1182;
        _1336 = _1181;
        _1337 = _1180;
        _1338 = _1195;
        _1339 = _1194;
        _1340 = _1193;
        _1341 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0)));
        _1342 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0)));
        _1343 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0)));
    }
    else
    {
        _1329 = _1020;
        _1330 = _1020;
        _1331 = _1020;
        _1332 = _1020;
        _1333 = _1020;
        _1334 = _1020;
        _1335 = _1020;
        _1336 = _1020;
        _1337 = _1020;
        _1338 = _1020;
        _1339 = _1020;
        _1340 = _1020;
        _1341 = 0.0;
        _1342 = 0.0;
        _1343 = 0.0;
    }
    float _1353 = (cbModelParam._m0[1u].x * (_1341 - _1032)) + _1032;
    float _1354 = (cbModelParam._m0[1u].x * (_1342 - _1033)) + _1033;
    float _1355 = (cbModelParam._m0[1u].x * (_1343 - _1034)) + _1034;
    float _1376 = fma(_1355, cbSceneParam._m0[89u].z, fma(_1354, cbSceneParam._m0[89u].y, _1353 * cbSceneParam._m0[89u].x));
    float _1379 = fma(_1355, cbSceneParam._m0[90u].z, fma(_1354, cbSceneParam._m0[90u].y, _1353 * cbSceneParam._m0[90u].x));
    float _1382 = fma(_1355, cbSceneParam._m0[91u].z, fma(_1354, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1353));
    float _1397 = _650 * 0.5;
    float _1398 = _651 * 0.5;
    float _1399 = _652 * 0.5;
    float _1400 = dot(vec4(_1397, _1398, _1399, 1.0), vec4(_1331, _1334, _1337, _1340));
    float _1403 = dot(vec4(_1397, _1398, _1399, 1.0), vec4(_1330, _1333, _1336, _1339));
    float _1406 = dot(vec4(_1397, _1398, _1399, 1.0), vec4(_1329, _1332, _1335, _1338));
    float _1440;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1413 = dot(vec4(_1397, _1398, _1399, 1.0), vec4(_1019, _1023, _1026, _1029));
        float _1417 = dot(vec4(_1397, _1398, _1399, 1.0), vec4(_1021, _1024, _1027, _1030));
        float _1421 = dot(vec4(_1397, _1398, _1399, 1.0), vec4(_1022, _1025, _1028, _1031));
        float _1428 = dot(vec4(cbModelParam._m0[39u]), vec4(_1397, _1398, _1399, 1.0));
        _1440 = dot(vec3(isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0)), isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0)), isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1428) ? 0.0 : (isnan(0.0) ? _1428 : max(0.0, _1428))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1440 = 1.0;
    }
    float _1451;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1442 = dot(vec4(cbModelParam._m0[40u]), vec4(_1397, _1398, _1399, 1.0));
        _1451 = dot(vec3(isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0)), isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0)), isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1442) ? 0.0 : (isnan(0.0) ? _1442 : max(0.0, _1442))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1451 = 1.0;
    }
    float _1455 = (_1451 * cbModelParam._m0[1u].x) + (_1440 * (1.0 - cbModelParam._m0[1u].x));
    float _1465 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _551);
    float _1466 = isnan(_1465) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1465 : min(cbModelParam._m0[25u].z, _1465));
    float _1546;
    float _1548;
    float _1550;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1513 = fma(_717, cbModelParam._m0[13u].z, fma(_713, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _709)) + cbModelParam._m0[13u].w;
        float _1517 = fma(_717, cbModelParam._m0[14u].z, fma(_713, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _709)) + cbModelParam._m0[14u].w;
        float _1521 = fma(_717, cbModelParam._m0[15u].z, fma(_713, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _709)) + cbModelParam._m0[15u].w;
        float _1524 = fma(_652, cbModelParam._m0[13u].z, fma(_651, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _650));
        float _1527 = fma(_652, cbModelParam._m0[14u].z, fma(_651, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _650));
        float _1530 = fma(_652, cbModelParam._m0[15u].z, fma(_651, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _650));
        float _1558;
        if (_1524 > 0.0)
        {
            _1558 = abs((1.0 - _1513) / _1524);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1524 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1513 + 1.0) / _1524);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1558 = frontier_phi_14_12_ladder;
        }
        float _1814;
        if (_1527 > 0.0)
        {
            _1814 = abs((1.0 - _1517) / _1527);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1527 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1517 + 1.0) / _1527);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1814 = frontier_phi_23_19_ladder;
        }
        float _2057;
        if (_1530 > 0.0)
        {
            _2057 = abs((1.0 - _1521) / _1530);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1530 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1521 + 1.0) / _1530);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2057 = frontier_phi_35_30_ladder;
        }
        float _2059 = isnan(_1814) ? _1558 : (isnan(_1558) ? _1814 : min(_1558, _1814));
        float _2060 = isnan(_2057) ? _2059 : (isnan(_2059) ? _2057 : min(_2059, _2057));
        float _2064 = (_2060 * _1524) + _1513;
        float _2065 = (_2060 * _1527) + _1517;
        float _2066 = (_2060 * _1530) + _1521;
        float _2067 = _2060 * 9.9999997473787516355514526367188e-05;
        float _2069 = (-1.0) - _2067;
        float _2071 = _2067 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2066 > _2071) || ((_2066 < _2069) || ((_2065 > _2071) || ((_2065 < _2069) || ((_2064 < _2069) || (_2064 > _2071))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2190 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2066, cbModelParam._m0[9u].z, fma(_2065, cbModelParam._m0[9u].y, _2064 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2066, cbModelParam._m0[10u].z, fma(_2065, cbModelParam._m0[10u].y, _2064 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2066, cbModelParam._m0[11u].z, fma(_2065, cbModelParam._m0[11u].y, _2064 * cbModelParam._m0[11u].x))), _1466);
            frontier_phi_13_35_ladder = _2190.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2190.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2190.x * cbModelParam._m0[1u].y;
        }
        _1546 = frontier_phi_13_35_ladder_2;
        _1548 = frontier_phi_13_35_ladder_1;
        _1550 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1534 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_650, _651, _652), _1466);
        _1546 = _1534.x * cbModelParam._m0[1u].y;
        _1548 = _1534.y * cbModelParam._m0[1u].y;
        _1550 = _1534.z * cbModelParam._m0[1u].y;
    }
    float _1554 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _551);
    float _1555 = isnan(_1554) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1554 : min(cbModelParam._m0[25u].w, _1554));
    float _1648;
    float _1650;
    float _1652;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1612 = fma(_717, cbModelParam._m0[21u].z, fma(_713, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _709)) + cbModelParam._m0[21u].w;
        float _1616 = fma(_717, cbModelParam._m0[22u].z, fma(_713, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _709)) + cbModelParam._m0[22u].w;
        float _1620 = fma(_717, cbModelParam._m0[23u].z, fma(_713, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _709)) + cbModelParam._m0[23u].w;
        float _1623 = fma(_652, cbModelParam._m0[21u].z, fma(_651, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _650));
        float _1626 = fma(_652, cbModelParam._m0[22u].z, fma(_651, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _650));
        float _1629 = fma(_652, cbModelParam._m0[23u].z, fma(_651, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _650));
        float _1819;
        if (_1623 > 0.0)
        {
            _1819 = abs((1.0 - _1612) / _1623);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1623 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1612 + 1.0) / _1623);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1819 = frontier_phi_25_21_ladder;
        }
        float _2084;
        if (_1626 > 0.0)
        {
            _2084 = abs((1.0 - _1616) / _1626);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1626 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1616 + 1.0) / _1626);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2084 = frontier_phi_37_32_ladder;
        }
        float _2289;
        if (_1629 > 0.0)
        {
            _2289 = abs((1.0 - _1620) / _1629);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1629 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1620 + 1.0) / _1629);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2289 = frontier_phi_46_43_ladder;
        }
        float _2291 = isnan(_2084) ? _1819 : (isnan(_1819) ? _2084 : min(_1819, _2084));
        float _2292 = isnan(_2289) ? _2291 : (isnan(_2291) ? _2289 : min(_2291, _2289));
        float _2296 = (_2292 * _1623) + _1612;
        float _2297 = (_2292 * _1626) + _1616;
        float _2298 = (_2292 * _1629) + _1620;
        float _2299 = _2292 * 9.9999997473787516355514526367188e-05;
        float _2300 = (-1.0) - _2299;
        float _2302 = _2299 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2298 > _2302) || ((_2298 < _2300) || ((_2297 > _2302) || ((_2297 < _2300) || ((_2296 < _2300) || (_2296 > _2302))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2567 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2298, cbModelParam._m0[17u].z, fma(_2297, cbModelParam._m0[17u].y, _2296 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2298, cbModelParam._m0[18u].z, fma(_2297, cbModelParam._m0[18u].y, _2296 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2298, cbModelParam._m0[19u].z, fma(_2297, cbModelParam._m0[19u].y, _2296 * cbModelParam._m0[19u].x))), _1555);
            frontier_phi_22_46_ladder = _2567.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2567.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2567.x * cbModelParam._m0[1u].z;
        }
        _1648 = frontier_phi_22_46_ladder_2;
        _1650 = frontier_phi_22_46_ladder_1;
        _1652 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1632 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_650, _651, _652), _1555);
        _1648 = _1632.x * cbModelParam._m0[1u].z;
        _1650 = _1632.y * cbModelParam._m0[1u].z;
        _1652 = _1632.z * cbModelParam._m0[1u].z;
    }
    float _1664 = ((((1.0 - _677) * ((_666 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_677 * _666)) * _642;
    float _1665 = _1664 * ((cbModelParam._m0[1u].w * (_1648 - _1546)) + _1546);
    float _1666 = _1664 * ((cbModelParam._m0[1u].w * (_1650 - _1548)) + _1548);
    float _1667 = _1664 * ((cbModelParam._m0[1u].w * (_1652 - _1550)) + _1550);
    float _1670 = fma(_1667, cbSceneParam._m0[89u].z, fma(_1666, cbSceneParam._m0[89u].y, _1665 * cbSceneParam._m0[89u].x));
    float _1673 = fma(_1667, cbSceneParam._m0[90u].z, fma(_1666, cbSceneParam._m0[90u].y, _1665 * cbSceneParam._m0[90u].x));
    float _1676 = fma(_1667, cbSceneParam._m0[91u].z, fma(_1666, cbSceneParam._m0[91u].y, _1665 * cbSceneParam._m0[91u].x));
    float _1687 = _576 / cbSceneParam._m0[86u].x;
    float _1695 = (cbSceneParam._m0[88u].y * (1.0 - _551)) + cbSceneParam._m0[88u].z;
    float _4008 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
    float _1697 = (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0))) * 5.0;
    float _1702 = (_665 * cbMtdParam._m0[12u].w) * dot(vec3(_548, _549, _550), vec3(1.0, 0.0, 0.0));
    vec4 _1712 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1702 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1702 + _1687) * cbSceneParam._m0[86u].x, _577), _1697).w) + _1687) * cbSceneParam._m0[86u].x, _577), _1697);
    float _1728 = 1.0 - _1712.w;
    uvec4 _1738 = floatBitsToUint(cbInstanceData._m0[_617 + 5u]);
    uint _1740 = _1738.x * 14u;
    uint _1741 = _1740 + 13u;
    float _1748 = _642 + (-1.0);
    float _1753 = (cbLight._m0[_1741].x * _1748) + 1.0;
    float _1754 = (cbLight._m0[_1741].y * _1748) + 1.0;
    float _1755 = (cbLight._m0[_1741].z * _1748) + 1.0;
    float _1756 = (cbLight._m0[_1741].w * _1748) + 1.0;
    uint _1757 = _1740 + 5u;
    float _1763 = isnan(1.0) ? _1754 : (isnan(_1754) ? 1.0 : min(_1754, 1.0));
    uint _1767 = _1740 + 4u;
    float _1773 = isnan(1.0) ? _1753 : (isnan(_1753) ? 1.0 : min(_1753, 1.0));
    uint _1777 = _1740 | 1u;
    float _1788 = dot(vec3(cbLight._m0[_1740].xyz), vec3(_548, _549, _550));
    float _1791 = dot(vec3(cbLight._m0[_1777].xyz), vec3(_548, _549, _550));
    float _4029 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
    float _4040 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
    float _1796 = (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) * 0.3183098733425140380859375;
    float _1798 = (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * 0.3183098733425140380859375;
    float _1805 = ((cbLight._m0[_1757].x * _1763) * _1798) + ((cbLight._m0[_1767].x * _1773) * _1796);
    float _1806 = ((_1763 * cbLight._m0[_1757].y) * _1798) + ((_1773 * cbLight._m0[_1767].y) * _1796);
    float _1807 = ((_1763 * cbLight._m0[_1757].z) * _1798) + ((_1773 * cbLight._m0[_1767].z) * _1796);
    uvec4 _1811 = floatBitsToUint(cbLight._m0[_1740 + 12u]);
    bool _1813 = _1811.x == 0u;
    float _1824;
    float _1826;
    float _1828;
    if (_1813)
    {
        _1824 = _1805;
        _1826 = _1806;
        _1828 = _1807;
    }
    else
    {
        uint _1832 = _1740 + 6u;
        float _1848 = (dot(vec3(cbLight._m0[_1740 + 2u].xyz), vec3(_548, _549, _550)) * 0.5) + 0.5;
        float _1849 = _1848 * _1848;
        float _4051 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
        float _1850 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _1851 = isnan(1.0) ? _1755 : (isnan(_1755) ? 1.0 : min(_1755, 1.0));
        _1824 = (((cbLight._m0[_1832].x * 0.3183098733425140380859375) * _1850) * _1851) + _1805;
        _1826 = (((cbLight._m0[_1832].y * 0.3183098733425140380859375) * _1850) * _1851) + _1806;
        _1828 = (((cbLight._m0[_1832].z * 0.3183098733425140380859375) * _1850) * _1851) + _1807;
    }
    bool _1831 = _1811.y == 0u;
    float _1869;
    float _1871;
    float _1873;
    if (_1831)
    {
        _1869 = _1824;
        _1871 = _1826;
        _1873 = _1828;
    }
    else
    {
        uint _2028 = _1740 + 7u;
        float _2044 = (dot(vec3(cbLight._m0[_1740 + 3u].xyz), vec3(_548, _549, _550)) * 0.5) + 0.5;
        float _2045 = _2044 * _2044;
        float _4067 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
        float _2046 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _2047 = isnan(1.0) ? _1756 : (isnan(_1756) ? 1.0 : min(_1756, 1.0));
        _1869 = (((cbLight._m0[_2028].x * 0.3183098733425140380859375) * _2046) * _2047) + _1824;
        _1871 = (((cbLight._m0[_2028].y * 0.3183098733425140380859375) * _2046) * _2047) + _1826;
        _1873 = (((cbLight._m0[_2028].z * 0.3183098733425140380859375) * _2046) * _2047) + _1828;
    }
    uint _1876 = _1740 + 8u;
    float _1889 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1740].w)) * _551) * 0.949999988079071044921875);
    float _1890 = _1889 * _1889;
    float _1891 = cbLight._m0[_1740].x + _289;
    float _1892 = cbLight._m0[_1740].y + _290;
    float _1893 = cbLight._m0[_1740].z + _291;
    float _1897 = inversesqrt(dot(vec3(_1891, _1892, _1893), vec3(_1891, _1892, _1893)));
    float _1898 = _1897 * _1891;
    float _1899 = _1897 * _1892;
    float _1900 = _1897 * _1893;
    float _1901 = dot(vec3(_548, _549, _550), vec3(cbLight._m0[_1740].xyz));
    float _4083 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
    float _1904 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
    float _4094 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _1905 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
    float _1906 = dot(vec3(_548, _549, _550), vec3(_1898, _1899, _1900));
    float _4105 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
    float _1909 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
    float _1910 = dot(vec3(cbLight._m0[_1740].xyz), vec3(_1898, _1899, _1900));
    float _4116 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
    float _1914 = _1890 * _1890;
    float _1918 = ((_1909 * _1909) * (_1914 + (-1.0))) + 1.0;
    float _1929 = (exp2(log2(1.0 - (isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1930 = 1.0 - _1890;
    float _1941 = (0.5 / (((_1905 * ((_1904 * _1930) + _1890)) + 9.9999999392252902907785028219223e-09) + (((_1905 * _1930) + _1890) * _1904))) * _1904;
    float _4127 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
    float _1943 = (isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0))) * (_1914 / ((_1918 * _1918) * 3.141590118408203125));
    uint _1954 = _1740 + 9u;
    float _1965 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1777].w)) * _551) * 0.949999988079071044921875);
    float _1966 = _1965 * _1965;
    float _1967 = cbLight._m0[_1777].x + _289;
    float _1968 = cbLight._m0[_1777].y + _290;
    float _1969 = cbLight._m0[_1777].z + _291;
    float _1973 = inversesqrt(dot(vec3(_1967, _1968, _1969), vec3(_1967, _1968, _1969)));
    float _1974 = _1973 * _1967;
    float _1975 = _1973 * _1968;
    float _1976 = _1973 * _1969;
    float _1977 = dot(vec3(_548, _549, _550), vec3(cbLight._m0[_1777].xyz));
    float _4138 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
    float _1980 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
    float _1981 = dot(vec3(_548, _549, _550), vec3(_1974, _1975, _1976));
    float _4149 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
    float _1984 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
    float _1985 = dot(vec3(cbLight._m0[_1777].xyz), vec3(_1974, _1975, _1976));
    float _4160 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
    float _1989 = _1966 * _1966;
    float _1993 = ((_1984 * _1984) * (_1989 + (-1.0))) + 1.0;
    float _2002 = (exp2(log2(1.0 - (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2003 = 1.0 - _1966;
    float _2013 = (0.5 / (((_1905 * ((_1980 * _2003) + _1966)) + 9.9999999392252902907785028219223e-09) + (((_1905 * _2003) + _1966) * _1980))) * _1980;
    float _4171 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
    float _2015 = (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * (_1989 / ((_1993 * _1993) * 3.141590118408203125));
    float _2025 = (((_2002 * cbLight._m0[_1954].x) * _2015) * _1763) + (((_1929 * cbLight._m0[_1876].x) * _1943) * _1773);
    float _2026 = (((_2002 * cbLight._m0[_1954].y) * _2015) * _1763) + (((_1929 * cbLight._m0[_1876].y) * _1943) * _1773);
    float _2027 = (((_2002 * cbLight._m0[_1954].z) * _2015) * _1763) + (((_1929 * cbLight._m0[_1876].z) * _1943) * _1773);
    float _2089;
    float _2091;
    float _2093;
    if (_1813)
    {
        _2089 = _2025;
        _2091 = _2026;
        _2093 = _2027;
    }
    else
    {
        uint _2095 = _1740 + 2u;
        uint _2099 = _1740 + 10u;
        float _2113 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2095].w)) * _551) * 0.949999988079071044921875);
        float _2114 = _2113 * _2113;
        float _2115 = cbLight._m0[_2095].x + _289;
        float _2116 = cbLight._m0[_2095].y + _290;
        float _2117 = cbLight._m0[_2095].z + _291;
        float _2121 = inversesqrt(dot(vec3(_2115, _2116, _2117), vec3(_2115, _2116, _2117)));
        float _2122 = _2121 * _2115;
        float _2123 = _2121 * _2116;
        float _2124 = _2121 * _2117;
        float _2125 = dot(vec3(_548, _549, _550), vec3(cbLight._m0[_2095].xyz));
        float _4182 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
        float _2128 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _2129 = dot(vec3(_548, _549, _550), vec3(_2122, _2123, _2124));
        float _4193 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
        float _2132 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _2133 = dot(vec3(cbLight._m0[_2095].xyz), vec3(_2122, _2123, _2124));
        float _4204 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
        float _2137 = _2114 * _2114;
        float _2141 = ((_2132 * _2132) * (_2137 + (-1.0))) + 1.0;
        float _2150 = (exp2(log2(1.0 - (isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2151 = 1.0 - _2114;
        float _2161 = (0.5 / (((_1905 * ((_2128 * _2151) + _2114)) + 9.9999999392252902907785028219223e-09) + (((_1905 * _2151) + _2114) * _2128))) * _2128;
        float _4215 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
        float _2163 = (isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))) * (_2137 / ((_2141 * _2141) * 3.141590118408203125));
        float _2164 = isnan(1.0) ? _1755 : (isnan(_1755) ? 1.0 : min(_1755, 1.0));
        _2089 = (((_2150 * cbLight._m0[_2099].x) * _2163) * _2164) + _2025;
        _2091 = (((_2150 * cbLight._m0[_2099].y) * _2163) * _2164) + _2026;
        _2093 = (((_2150 * cbLight._m0[_2099].z) * _2163) * _2164) + _2027;
    }
    float _2199;
    float _2201;
    float _2203;
    if (_1831)
    {
        _2199 = _2089;
        _2201 = _2091;
        _2203 = _2093;
    }
    else
    {
        uint _2210 = _1740 + 3u;
        uint _2214 = _1740 + 11u;
        float _2228 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2210].w)) * _551) * 0.949999988079071044921875);
        float _2229 = _2228 * _2228;
        float _2230 = cbLight._m0[_2210].x + _289;
        float _2231 = cbLight._m0[_2210].y + _290;
        float _2232 = cbLight._m0[_2210].z + _291;
        float _2236 = inversesqrt(dot(vec3(_2230, _2231, _2232), vec3(_2230, _2231, _2232)));
        float _2237 = _2236 * _2230;
        float _2238 = _2236 * _2231;
        float _2239 = _2236 * _2232;
        float _2240 = dot(vec3(_548, _549, _550), vec3(cbLight._m0[_2210].xyz));
        float _4231 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
        float _2243 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _2244 = dot(vec3(_548, _549, _550), vec3(_2237, _2238, _2239));
        float _4242 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
        float _2247 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
        float _2248 = dot(vec3(cbLight._m0[_2210].xyz), vec3(_2237, _2238, _2239));
        float _4253 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
        float _2252 = _2229 * _2229;
        float _2256 = ((_2247 * _2247) * (_2252 + (-1.0))) + 1.0;
        float _2265 = (exp2(log2(1.0 - (isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2266 = 1.0 - _2229;
        float _2276 = (0.5 / (((_1905 * ((_2243 * _2266) + _2229)) + 9.9999999392252902907785028219223e-09) + (((_1905 * _2266) + _2229) * _2243))) * _2243;
        float _4264 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
        float _2278 = (isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0))) * (_2252 / ((_2256 * _2256) * 3.141590118408203125));
        float _2279 = isnan(1.0) ? _1756 : (isnan(_1756) ? 1.0 : min(_1756, 1.0));
        _2199 = (((_2265 * cbLight._m0[_2214].x) * _2278) * _2279) + _2089;
        _2201 = (((_2265 * cbLight._m0[_2214].y) * _2278) * _2279) + _2091;
        _2203 = (((_2265 * cbLight._m0[_2214].z) * _2278) * _2279) + _2093;
    }
    float _2414;
    float _2416;
    float _2418;
    float _2420;
    float _2422;
    float _2424;
    if (_1738.y == 0u)
    {
        float _2354 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2355 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2354;
        float _2356 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2354;
        float _2357 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2354;
        uvec4 _2369 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2370 = _2369.x;
        uint _2381 = uint((float(_2369.y) * floor(float(uint(cbSceneParam._m0[85u].y * _577) / _2370))) + floor(float(uint(cbSceneParam._m0[85u].x * _576) / _2370)));
        float _2391 = (log2(_2357 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2392 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
        uint _2395 = uint(isnan(14.0) ? _2392 : (isnan(_2392) ? 14.0 : min(_2392, 14.0)));
        uvec4 _2400 = texelFetch(g_lightClusterGridBuffer, int(((_2395 << 2u) + (_2381 << 6u)) >> 2u));
        uint _2401 = _2400.x;
        uint _2402 = _2369.z;
        float _2572;
        float _2574;
        float _2576;
        float _2578;
        float _2580;
        float _2582;
        if (((((1u << ((_2402 >> 4u) & 15u)) + 4294967295u) & _2401) == 0u) || ((_2402 & 240u) == 0u))
        {
            _2572 = 0.0;
            _2574 = 0.0;
            _2576 = 0.0;
            _2578 = 0.0;
            _2580 = 0.0;
            _2582 = 0.0;
        }
        else
        {
            float _2573;
            float _2575;
            float _2577;
            float _2579;
            float _2581;
            float _2583;
            float _2748 = 0.0;
            float _2749 = 0.0;
            float _2750 = 0.0;
            float _2751 = 0.0;
            float _2752 = 0.0;
            float _2753 = 0.0;
            uint _2754 = 0u;
            uint _2763;
            bool _2764;
            for (;;)
            {
                _2763 = texelFetch(g_lightClassification, int((((_2395 << 5u) + (_2381 << 9u)) + (_2754 << 2u)) >> 2u)).x;
                _2764 = _2763 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2764)
                {
                    frontier_phi_61_pred = _2748;
                    frontier_phi_61_pred_1 = _2753;
                    frontier_phi_61_pred_2 = _2752;
                    frontier_phi_61_pred_3 = _2751;
                    frontier_phi_61_pred_4 = _2750;
                    frontier_phi_61_pred_5 = _2749;
                }
                else
                {
                    float _2872;
                    float _2873;
                    float _2874;
                    float _2875;
                    float _2876;
                    float _2877;
                    uint _2878;
                    _2872 = _2748;
                    _2873 = _2749;
                    _2874 = _2750;
                    _2875 = _2751;
                    _2876 = _2752;
                    _2877 = _2753;
                    _2878 = _2763;
                    float _2804;
                    float _2805;
                    float _2806;
                    float _2807;
                    float _2808;
                    float _2809;
                    for (;;)
                    {
                        uint _2882 = uint(findLSB(_2878)) + (_2754 << 5u);
                        uint _2879 = (_2878 + 4294967295u) & _2878;
                        uint _2884 = _2882 * 48u;
                        vec4 _2898 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2884)).x, texelFetch(g_PointLightRenderingBuffer, int(_2884 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2884 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2884 + 3u)).x));
                        uint _2904 = (_2882 * 48u) + 4u;
                        vec4 _2917 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2904)).x, texelFetch(g_PointLightRenderingBuffer, int(_2904 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2904 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2904 + 3u)).x));
                        uint _2923 = (_2882 * 48u) + 8u;
                        vec3 _2934 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2923)).x, texelFetch(g_PointLightRenderingBuffer, int(_2923 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2923 + 2u)).x));
                        float _2938 = _2898.x - _2355;
                        float _2939 = _2898.y - _2356;
                        float _2940 = _2898.z - _2357;
                        float _2941 = dot(vec3(_2938, _2939, _2940), vec3(_2938, _2939, _2940));
                        float _2944 = inversesqrt(_2941);
                        float _2945 = _2944 * _2938;
                        float _2946 = _2944 * _2939;
                        float _2947 = _2944 * _2940;
                        float _2948 = dot(vec3(_598, _601, _604), vec3(_2945, _2946, _2947));
                        float _2953 = 1.0 - (_2941 * _2898.w);
                        float _4290 = isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0));
                        float _2954 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
                        float _2955 = sqrt(_2941) * _2917.w;
                        float _2958 = 1.39999997615814208984375 / (_2955 + 1.39999997615814208984375);
                        float _2959 = _2958 * _2958;
                        float _2962 = ((1.0 - _2959) * _2948) + _2959;
                        float _2965 = _2955 * _2955;
                        float _2969 = ((isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0))) * _2954) / ((_2965 * 0.699999988079071044921875) + 1.0);
                        float _2973 = (-0.0) - _2355;
                        float _2974 = (-0.0) - _2356;
                        float _2975 = (-0.0) - _2357;
                        float _2979 = inversesqrt(dot(vec3(_2973, _2974, _2975), vec3(_2973, _2974, _2975)));
                        float _2980 = _2979 * _2973;
                        float _2981 = _2979 * _2974;
                        float _2982 = _2979 * _2975;
                        float _2990 = exp2(log2(1.0 / ((_2965 * 3.5) + 5.0)) * 0.25);
                        float _2991 = 1.0 - _666;
                        float _2998 = sqrt(1.0 - ((1.0 - (_2991 * _2991)) * (1.0 - (_2990 * _2990))));
                        float _2999 = _2998 * _2998;
                        float _3000 = _2999 * _2999;
                        float _3001 = _2980 + _2945;
                        float _3002 = _2981 + _2946;
                        float _3003 = _2982 + _2947;
                        float _3007 = inversesqrt(dot(vec3(_3001, _3002, _3003), vec3(_3001, _3002, _3003)));
                        float _3011 = dot(vec3(_598, _601, _604), vec3(_2980, _2981, _2982));
                        float _4306 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0));
                        float _3014 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
                        float _3015 = dot(vec3(_598, _601, _604), vec3(_3007 * _3001, _3007 * _3002, _3007 * _3003));
                        float _4317 = isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0));
                        float _3018 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
                        float _3022 = ((_3018 * _3018) * (_3000 + (-1.0))) + 1.0;
                        float _3023 = _2958 * _2999;
                        float _3024 = _3023 * _3023;
                        float _3027 = ((1.0 - _3024) * _2948) + _3024;
                        float _4328 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0));
                        float _3028 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
                        float _3029 = 1.0 - _2999;
                        float _3039 = (0.5 / (((_3028 * ((_3014 * _3029) + _2999)) + 9.9999999392252902907785028219223e-09) + (((_3028 * _3029) + _2999) * _3014))) * _3028;
                        float _4339 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0));
                        float _3050 = (((_3000 * 3.1415927410125732421875) * (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0)))) / ((_3022 * _3022) * ((_2965 * 2.1991131305694580078125) + 3.141590118408203125))) * _2954;
                        _2807 = (_2969 * _2917.x) + _2875;
                        _2808 = (_2969 * _2917.y) + _2876;
                        _2809 = (_2969 * _2917.z) + _2877;
                        _2804 = (_3050 * _2934.x) + _2872;
                        _2805 = (_3050 * _2934.y) + _2873;
                        _2806 = (_3050 * _2934.z) + _2874;
                        if (_2879 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2872 = _2804;
                            _2873 = _2805;
                            _2874 = _2806;
                            _2875 = _2807;
                            _2876 = _2808;
                            _2877 = _2809;
                            _2878 = _2879;
                        }
                    }
                    frontier_phi_61_pred = _2804;
                    frontier_phi_61_pred_1 = _2809;
                    frontier_phi_61_pred_2 = _2808;
                    frontier_phi_61_pred_3 = _2807;
                    frontier_phi_61_pred_4 = _2806;
                    frontier_phi_61_pred_5 = _2805;
                }
                _2573 = frontier_phi_61_pred;
                _2583 = frontier_phi_61_pred_1;
                _2581 = frontier_phi_61_pred_2;
                _2579 = frontier_phi_61_pred_3;
                _2577 = frontier_phi_61_pred_4;
                _2575 = frontier_phi_61_pred_5;
                uint _2755 = _2754 + 1u;
                if (_2755 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2748 = _2573;
                    _2749 = _2575;
                    _2750 = _2577;
                    _2751 = _2579;
                    _2752 = _2581;
                    _2753 = _2583;
                    _2754 = _2755;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2572 = _2573;
            _2574 = _2575;
            _2576 = _2577;
            _2578 = _2579;
            _2580 = _2581;
            _2582 = _2583;
        }
        uvec4 _2586 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2587 = _2586.z;
        uint _2589 = (_2587 >> 8u) & 15u;
        float _2716;
        float _2718;
        float _2720;
        float _2722;
        float _2724;
        float _2726;
        if (((4294967295u << _2589) & _2401) == 0u)
        {
            _2716 = _2572;
            _2718 = _2574;
            _2720 = _2576;
            _2722 = _2578;
            _2724 = _2580;
            _2726 = _2582;
        }
        else
        {
            float _2741 = inversesqrt(dot(vec3(_2355, _2356, _2357), vec3(_2355, _2356, _2357)));
            float _2742 = _2741 * _2355;
            float _2743 = _2741 * _2356;
            float _2744 = _2741 * _2357;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2589 < ((_2587 >> 12u) & 15u))
            {
                float _2717;
                float _2719;
                float _2721;
                float _2723;
                float _2725;
                float _2727;
                float _2855 = _2572;
                float _2856 = _2574;
                float _2857 = _2576;
                float _2858 = _2578;
                float _2859 = _2580;
                float _2860 = _2582;
                uint _2861 = _2589;
                uint _2870;
                bool _2871;
                for (;;)
                {
                    _2870 = texelFetch(g_lightClassification, int((((_2395 << 5u) + (_2381 << 9u)) + (_2861 << 2u)) >> 2u)).x;
                    _2871 = _2870 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2871)
                    {
                        frontier_phi_67_pred = _2858;
                        frontier_phi_67_pred_1 = _2859;
                        frontier_phi_67_pred_2 = _2860;
                        frontier_phi_67_pred_3 = _2857;
                        frontier_phi_67_pred_4 = _2856;
                        frontier_phi_67_pred_5 = _2855;
                    }
                    else
                    {
                        float _3055;
                        float _3056;
                        float _3057;
                        float _3058;
                        float _3059;
                        float _3060;
                        float _3351;
                        float _3352;
                        float _3353;
                        float _3354;
                        float _3355;
                        float _3356;
                        float _3068 = _2855;
                        float _3069 = _2856;
                        float _3070 = _2857;
                        float _3071 = _2858;
                        float _3072 = _2859;
                        float _3073 = _2860;
                        uint _3074 = _2870;
                        uint _3075;
                        vec4 _3100;
                        float _3101;
                        vec4 _3116;
                        vec3 _3128;
                        vec4 _3144;
                        vec4 _3160;
                        float _3207;
                        bool _3208;
                        for (;;)
                        {
                            uint _3085 = ((_2861 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3074));
                            _3075 = (_3074 + 4294967295u) & _3074;
                            uint _3087 = _3085 * 40u;
                            _3100 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3087)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 3u)).x));
                            _3101 = _3100.w;
                            uint _3103 = (_3085 * 40u) + 4u;
                            _3116 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3103)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 3u)).x));
                            uint _3118 = (_3085 * 40u) + 8u;
                            _3128 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3118)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 2u)).x));
                            uint _3131 = (_3085 * 40u) + 16u;
                            _3144 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3131)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 3u)).x));
                            uint _3147 = (_3085 * 40u) + 20u;
                            _3160 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3147)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 3u)).x));
                            uint _3163 = (_3085 * 40u) + 24u;
                            vec4 _3176 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3163)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 3u)).x));
                            uint _3182 = (_3085 * 40u) + 28u;
                            vec4 _3195 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3182)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 3u)).x));
                            _3207 = fma(_2357, _3195.z, fma(_2356, _3195.y, _3195.x * _2355)) + _3195.w;
                            _3208 = !((fma(_2357, _3176.z, fma(_2356, _3176.y, _3176.x * _2355)) + _3176.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3208)
                            {
                                float _3235 = _3100.x - _2355;
                                float _3236 = _3100.y - _2356;
                                float _3237 = _3100.z - _2357;
                                float _3238 = dot(vec3(_3235, _3236, _3237), vec3(_3235, _3236, _3237));
                                float _3241 = inversesqrt(_3238);
                                float _3242 = _3241 * _3235;
                                float _3243 = _3241 * _3236;
                                float _3244 = _3241 * _3237;
                                float _3248 = 1.0 - (_3238 / (_3101 * _3101));
                                float _4350 = isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0));
                                float _3249 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
                                float _3253 = sqrt(_3238) * _3116.w;
                                float _3255 = 1.39999997615814208984375 / (_3253 + 1.39999997615814208984375);
                                float _3256 = _3255 * _3255;
                                float _3259 = ((1.0 - _3256) * dot(vec3(_3242, _3243, _3244), vec3(_598, _601, _604))) + _3256;
                                float _3262 = _3253 * _3253;
                                float _3266 = (fma(_2357, _3144.z, fma(_2356, _3144.y, _3144.x * _2355)) + _3144.w) / _3207;
                                float _3267 = (fma(_2357, _3160.z, fma(_2356, _3160.y, _3160.x * _2355)) + _3160.w) / _3207;
                                float _3271 = 1.0 - dot(vec2(_3266, _3267), vec2(_3266, _3267));
                                float _4366 = isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0));
                                float _3272 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
                                float _3273 = _3272 * (((isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0))) * _3249) / ((_3262 * 0.699999988079071044921875) + 1.0));
                                float _3285 = exp2(log2(1.0 / ((_3262 * 3.5) + 5.0)) * 0.25);
                                float _3286 = 1.0 - _666;
                                float _3293 = sqrt(1.0 - ((1.0 - (_3286 * _3286)) * (1.0 - (_3285 * _3285))));
                                float _3294 = _3293 * _3293;
                                float _3295 = _3294 * _3294;
                                float _3296 = _3242 - _2742;
                                float _3297 = _3243 - _2743;
                                float _3298 = _3244 - _2744;
                                float _3302 = inversesqrt(dot(vec3(_3296, _3297, _3298), vec3(_3296, _3297, _3298)));
                                float _3306 = dot(vec3(_598, _601, _604), vec3((-0.0) - _2742, (-0.0) - _2743, (-0.0) - _2744));
                                float _4377 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
                                float _3309 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
                                float _3310 = dot(vec3(_598, _601, _604), vec3(_3302 * _3296, _3302 * _3297, _3302 * _3298));
                                float _4388 = isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0));
                                float _3313 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
                                float _3317 = ((_3313 * _3313) * (_3295 + (-1.0))) + 1.0;
                                float _3318 = _3255 * _3294;
                                float _3319 = _3318 * _3318;
                                float _3325 = ((1.0 - _3319) * dot(vec3(_598, _601, _604), vec3(_3242, _3243, _3244))) + _3319;
                                float _4399 = isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : max(_3325, 0.0));
                                float _3326 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
                                float _3327 = 1.0 - _3294;
                                float _3337 = (0.5 / (((_3326 * ((_3309 * _3327) + _3294)) + 9.9999999392252902907785028219223e-09) + (((_3326 * _3327) + _3294) * _3309))) * _3326;
                                float _4410 = isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : max(_3337, 0.0));
                                float _3347 = (_3272 * _3249) * (((_3295 * 3.1415927410125732421875) * (isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0)))) / ((_3317 * _3317) * ((_3262 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3347 * _3128.x;
                                frontier_phi_73_pred_1 = _3347 * _3128.y;
                                frontier_phi_73_pred_2 = _3273 * _3116.z;
                                frontier_phi_73_pred_3 = _3273 * _3116.y;
                                frontier_phi_73_pred_4 = _3273 * _3116.x;
                                frontier_phi_73_pred_5 = _3347 * _3128.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3351 = frontier_phi_73_pred;
                            _3352 = frontier_phi_73_pred_1;
                            _3356 = frontier_phi_73_pred_2;
                            _3355 = frontier_phi_73_pred_3;
                            _3354 = frontier_phi_73_pred_4;
                            _3353 = frontier_phi_73_pred_5;
                            _3058 = _3354 + _3071;
                            _3059 = _3355 + _3072;
                            _3060 = _3356 + _3073;
                            _3055 = _3351 + _3068;
                            _3056 = _3352 + _3069;
                            _3057 = _3353 + _3070;
                            if (_3075 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3068 = _3055;
                                _3069 = _3056;
                                _3070 = _3057;
                                _3071 = _3058;
                                _3072 = _3059;
                                _3073 = _3060;
                                _3074 = _3075;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3058;
                        frontier_phi_67_pred_1 = _3059;
                        frontier_phi_67_pred_2 = _3060;
                        frontier_phi_67_pred_3 = _3057;
                        frontier_phi_67_pred_4 = _3056;
                        frontier_phi_67_pred_5 = _3055;
                    }
                    _2723 = frontier_phi_67_pred;
                    _2725 = frontier_phi_67_pred_1;
                    _2727 = frontier_phi_67_pred_2;
                    _2721 = frontier_phi_67_pred_3;
                    _2719 = frontier_phi_67_pred_4;
                    _2717 = frontier_phi_67_pred_5;
                    uint _2862 = _2861 + 1u;
                    if (_2862 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2855 = _2717;
                        _2856 = _2719;
                        _2857 = _2721;
                        _2858 = _2723;
                        _2859 = _2725;
                        _2860 = _2727;
                        _2861 = _2862;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2725;
                frontier_phi_55_56_ladder_1 = _2727;
                frontier_phi_55_56_ladder_2 = _2723;
                frontier_phi_55_56_ladder_3 = _2721;
                frontier_phi_55_56_ladder_4 = _2719;
                frontier_phi_55_56_ladder_5 = _2717;
            }
            else
            {
                frontier_phi_55_56_ladder = _2580;
                frontier_phi_55_56_ladder_1 = _2582;
                frontier_phi_55_56_ladder_2 = _2578;
                frontier_phi_55_56_ladder_3 = _2576;
                frontier_phi_55_56_ladder_4 = _2574;
                frontier_phi_55_56_ladder_5 = _2572;
            }
            _2716 = frontier_phi_55_56_ladder_5;
            _2718 = frontier_phi_55_56_ladder_4;
            _2720 = frontier_phi_55_56_ladder_3;
            _2722 = frontier_phi_55_56_ladder_2;
            _2724 = frontier_phi_55_56_ladder;
            _2726 = frontier_phi_55_56_ladder_1;
        }
        float _2731 = isnan(1.0) ? _642 : (isnan(_642) ? 1.0 : min(_642, 1.0));
        _2414 = (_2731 * _2722) + _1869;
        _2416 = (_2731 * _2724) + _1871;
        _2418 = (_2731 * _2726) + _1873;
        _2420 = ((_2716 * 0.039999999105930328369140625) * _2731) + _2199;
        _2422 = ((_2718 * 0.039999999105930328369140625) * _2731) + _2201;
        _2424 = ((_2720 * 0.039999999105930328369140625) * _2731) + _2203;
    }
    else
    {
        _2414 = _1869;
        _2416 = _1871;
        _2418 = _1873;
        _2420 = _2199;
        _2422 = _2201;
        _2424 = _2203;
    }
    float _2438 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2439 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2440 = cbSceneParam._m0[86u].x * (_1687 + ((_665 * cbMtdParam._m0[13u].z) * dot(vec3(_548, _549, _550), vec3(_197, _198, _199))));
    float _2441 = isnan(_2438) ? _2440 : (isnan(_2440) ? _2438 : min(_2440, _2438));
    float _2442 = isnan(_2439) ? _577 : (isnan(_577) ? _2439 : min(_577, _2439));
    vec4 _2444 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2441, _2442), 0.0);
    float _2446 = _2444.x;
    bool _2467 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2446)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2446))) > _570;
    vec4 _2471 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2467 ? _2441 : _576, _2467 ? _2442 : _577));
    float _4436 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _4447 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _4458 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _2495 = 0.959999978542327880859375 - (exp2(log2(1.0 - _657) * 5.0) * 0.959999978542327880859375);
    float _2497 = (_2471.x * _2495) * cbSceneParam._m0[72u].w;
    float _2499 = (_2471.y * _2495) * cbSceneParam._m0[72u].w;
    float _2501 = (_2471.z * _2495) * cbSceneParam._m0[72u].w;
    float _2522 = _576 / cbSceneParam._m0[86u].x;
    float _2523 = _577 / cbSceneParam._m0[86u].y;
    vec4 _2537 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2522, _2523, (log2((isnan(cbSceneParam._m0[77u].w) ? _570 : (isnan(_570) ? cbSceneParam._m0[77u].w : min(_570, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2539 = _2537.x;
    float _2540 = _2537.y;
    float _2541 = _2537.z;
    float _2542 = _2537.w;
    float _2634;
    float _2636;
    float _2638;
    float _2640;
    if (_570 > cbSceneParam._m0[78u].w)
    {
        float _2597 = isnan(_570) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _570 : min(cbSceneParam._m0[80u].w, _570));
        float _2598 = _2597 / _570;
        float _2609 = _2598 * _268;
        float _2610 = _269 * _2598;
        float _2611 = (-0.0) - _2610;
        float _2612 = _2598 * _270;
        float _2614 = (cbSceneParam._m0[77u].w * _2611) / _2597;
        float _2615 = _2614 + cbSceneParam._m0[79u].w;
        float _2616 = cbSceneParam._m0[79u].w - _2610;
        float _2622 = sqrt(((_2609 * _2609) + (_2610 * _2610)) + (_2612 * _2612));
        float _2625 = (1.0 - (cbSceneParam._m0[77u].w / _2597)) * _2622;
        float _2630 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2632 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2817;
        if (abs((_2611 - _2614) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2817 = ((((_2615 > 0.0) ? exp2(_2630 * _2615) : (2.0 - exp2(_2632 * _2615))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2625;
        }
        else
        {
            float _2777 = 1.0 / cbSceneParam._m0[80u].x;
            float _2778 = isnan(_2616) ? _2615 : (isnan(_2615) ? _2616 : max(_2615, _2616));
            float _2779 = isnan(_2616) ? _2615 : (isnan(_2615) ? _2616 : min(_2615, _2616));
            float _2788 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : min(_2778, 0.0));
            float _2789 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : min(_2779, 0.0));
            _2817 = ((abs(_2622 / _2611) * cbSceneParam._m0[80u].y) * ((((_2788 - _2789) * 2.0) - ((exp2(_2630 * (isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0)))) - exp2(_2630 * (isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0))))) * _2777)) - ((exp2(_2632 * _2788) - exp2(_2632 * _2789)) * _2777))) + (_2625 * cbSceneParam._m0[80u].z);
        }
        vec4 _2819 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2522, _2523, 1.0), 0.0);
        float _2828 = exp2((_2817 * (-1.44269502162933349609375)) * (1.0 - _2819.w));
        float _2829 = log2(_2828);
        float _2845 = log2(_2542);
        _2634 = (exp2(_2845 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2829 * cbSceneParam._m0[78u].x)) * _2819.x) / cbSceneParam._m0[78u].x)) + _2539;
        _2636 = (exp2(_2845 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2829 * cbSceneParam._m0[78u].y)) * _2819.y) / cbSceneParam._m0[78u].y)) + _2540;
        _2638 = (exp2(_2845 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2829 * cbSceneParam._m0[78u].z)) * _2819.z) / cbSceneParam._m0[78u].z)) + _2541;
        _2640 = _2828 * _2542;
    }
    else
    {
        _2634 = _2539;
        _2636 = _2540;
        _2638 = _2541;
        _2640 = _2542;
    }
    bool _2652 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
    float _2653 = log2(_2640);
    float _2660 = exp2(_2653 * cbSceneParam._m0[78u].x) * ((_2497 + (((((_1664 * _1712.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0))) * _1455) * _1728)) + _2420) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0))) * (_2414 + ((isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0))) * _642))) - _2497) * _533));
    float _2661 = exp2(_2653 * cbSceneParam._m0[78u].y) * ((_2499 + (((((_1664 * _1712.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0))) * _1455) * _1728)) + _2422) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0))) * (_2416 + ((isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0))) * _642))) - _2499) * _533));
    float _2662 = exp2(_2653 * cbSceneParam._m0[78u].z) * ((_2501 + (((((_1664 * _1712.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0))) * _1455) * _1728)) + _2424) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0))) * (_2418 + ((isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0))) * _642))) - _2501) * _533));
    vec4 _2670 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_576, _577));
    float _2672 = _2670.x;
    float _2693 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2672)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2672))) - _570) * 3.0;
    float _4509 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
    float _2695 = (isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0))) * cbInstanceData._m0[_617 + 6u].w;
    float _2704 = (roundEven(cbMatDynParam._m0[0u].y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2704 * (_2652 ? _2660 : (_2660 + (cbSceneParam._m0[72u].w * _2634)));
    SV_Target.y = _2704 * (_2652 ? _2661 : (_2661 + (cbSceneParam._m0[72u].w * _2636)));
    SV_Target.z = _2704 * (_2652 ? _2662 : (_2662 + (cbSceneParam._m0[72u].w * _2638)));
    SV_Target.w = _2695;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2695;
}


