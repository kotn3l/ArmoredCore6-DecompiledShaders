#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 0, std140) uniform cbPerSceneUBO
{
    vec4 _m0[39];
} cbPerScene;

layout(set = 0, binding = 26) uniform texture2D g_PrevFrameTexture;
layout(set = 0, binding = 27) uniform texture2D g_ConvertedDepthTexture;
layout(set = 0, binding = 2) uniform texture2D M_Ice_Ov_N_snp_0_Texture2D_10;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    float _103 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _104 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _105 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _111 = inversesqrt(dot(vec3(_103, _104, _105), vec3(_103, _104, _105)));
    float _118 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _119 = _118 * NORMAL.x;
    float _120 = _118 * NORMAL.y;
    float _121 = _118 * NORMAL.z;
    float _125 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _148 = texture(sampler2D(M_Ice_Ov_N_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _156 = (_148.x * 2.0) + (-1.0);
    float _158 = (_148.y * 2.0) + (-1.0);
    float _159 = dot(vec2(_156, _158), vec2(_156, _158));
    float _752 = isnan(0.0) ? _159 : (isnan(_159) ? 0.0 : max(_159, 0.0));
    float _165 = sqrt(1.0 - (isnan(1.0) ? _752 : (isnan(_752) ? 1.0 : min(_752, 1.0))));
    float _168 = fma(_165, _119, fma(_158, _125 * TANGENT.x, (_111 * _103) * _156));
    float _171 = fma(_165, _120, fma(_158, _125 * TANGENT.y, (_111 * _104) * _156));
    float _174 = fma(_165, _121, fma(_158, _125 * TANGENT.z, (_111 * _105) * _156));
    float _178 = inversesqrt(dot(vec3(_168, _171, _174), vec3(_168, _171, _174)));
    float _189 = cbMtdParam._m0[13u].y + dot(vec4(_178 * _168, _178 * _171, _178 * _174, 0.0), vec4(cbMtdParam._m0[14u].yzw, 0.0));
    float _763 = isnan(0.0) ? _189 : (isnan(_189) ? 0.0 : max(_189, 0.0));
    float _191 = (isnan(1.0) ? _763 : (isnan(_763) ? 1.0 : min(_763, 1.0))) * TEXCOORD_3.x;
    float _774 = isnan(0.0) ? _191 : (isnan(_191) ? 0.0 : max(_191, 0.0));
    float _200 = ((cbMtdParam._m0[14u].x - cbMtdParam._m0[12u].x) * (isnan(1.0) ? _774 : (isnan(_774) ? 1.0 : min(_774, 1.0)))) + cbMtdParam._m0[12u].x;
    float _785 = isnan(0.0) ? _200 : (isnan(_200) ? 0.0 : max(_200, 0.0));
    float _201 = isnan(1.0) ? _785 : (isnan(_785) ? 1.0 : min(_785, 1.0));
    float _215 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _216 = POSITION_1.x / POSITION_1.w;
    float _217 = POSITION_1.y / POSITION_1.w;
    float _221 = (_216 * 0.5) + 0.5;
    float _222 = 0.5 - (_217 * 0.5);
    float _228;
    float _230;
    float _232;
    float _234;
    if (_201 < cbPerScene._m0[22u].z)
    {
        _228 = 0.0;
        _230 = 0.0;
        _232 = 0.0;
        _234 = 0.0;
    }
    else
    {
        float _240 = 1.0 / _215;
        float frontier_phi_1_2_ladder;
        float frontier_phi_1_2_ladder_1;
        float frontier_phi_1_2_ladder_2;
        float frontier_phi_1_2_ladder_3;
        if (!(cbPerScene._m0[21u].y >= _240))
        {
            float _266 = fma(_121, cbPerScene._m0[8u].z, fma(_120, cbPerScene._m0[8u].y, cbPerScene._m0[8u].x * _119));
            float _269 = fma(_121, cbPerScene._m0[9u].z, fma(_120, cbPerScene._m0[9u].y, cbPerScene._m0[9u].x * _119));
            float _272 = fma(_121, cbPerScene._m0[10u].z, fma(_120, cbPerScene._m0[10u].y, cbPerScene._m0[10u].x * _119));
            float _279 = (_215 * _216) * cbPerScene._m0[28u].x;
            float _281 = (_215 * _217) * cbPerScene._m0[28u].y;
            float _285 = inversesqrt(dot(vec3(_279, _281, _215), vec3(_279, _281, _215)));
            float _286 = _279 * _285;
            float _287 = _281 * _285;
            float _288 = _285 * _215;
            float _292 = dot(vec3(_286, _287, _288), vec3(_266, _269, _272)) * 2.0;
            float _296 = _286 - (_292 * _266);
            float _297 = _287 - (_292 * _269);
            float _298 = _288 - (_292 * _272);
            float _302 = inversesqrt(dot(vec3(_296, _297, _298), vec3(_296, _297, _298)));
            float _305 = _298 * _302;
            float frontier_phi_1_2_ladder_3_ladder;
            float frontier_phi_1_2_ladder_3_ladder_1;
            float frontier_phi_1_2_ladder_3_ladder_2;
            float frontier_phi_1_2_ladder_3_ladder_3;
            if (_305 < cbPerScene._m0[16u].x)
            {
                frontier_phi_1_2_ladder_3_ladder = 0.0;
                frontier_phi_1_2_ladder_3_ladder_1 = 0.0;
                frontier_phi_1_2_ladder_3_ladder_2 = 0.0;
                frontier_phi_1_2_ladder_3_ladder_3 = 0.0;
            }
            else
            {
                float _318 = abs(dot(vec3((-0.0) - _286, (-0.0) - _287, (-0.0) - _288), vec3(_266, _269, _272)));
                float _796 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
                float _329 = (((_201 * _201) * 0.959999978542327880859375) * exp2(log2(1.0 - (isnan(1.0) ? _796 : (isnan(_796) ? 1.0 : min(_796, 1.0)))) * 5.0)) + 0.039999999105930328369140625;
                float _338 = (cbPerScene._m0[29u].x * (1.0 - _201)) + cbPerScene._m0[29u].y;
                float _807 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
                float _347 = ((cbPerScene._m0[23u].w - cbPerScene._m0[23u].z) * (isnan(1.0) ? _807 : (isnan(_807) ? 1.0 : min(_807, 1.0)))) + cbPerScene._m0[23u].z;
                float frontier_phi_1_2_ladder_3_ladder_4_ladder;
                float frontier_phi_1_2_ladder_3_ladder_4_ladder_1;
                float frontier_phi_1_2_ladder_3_ladder_4_ladder_2;
                float frontier_phi_1_2_ladder_3_ladder_4_ladder_3;
                if (_329 < cbPerScene._m0[22u].x)
                {
                    frontier_phi_1_2_ladder_3_ladder_4_ladder = 0.0;
                    frontier_phi_1_2_ladder_3_ladder_4_ladder_1 = 0.0;
                    frontier_phi_1_2_ladder_3_ladder_4_ladder_2 = 0.0;
                    frontier_phi_1_2_ladder_3_ladder_4_ladder_3 = 0.0;
                }
                else
                {
                    float _350 = _305 - cbPerScene._m0[16u].x;
                    float _818 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
                    float _351 = isnan(1.0) ? _818 : (isnan(_818) ? 1.0 : min(_818, 1.0));
                    float _352 = _351 * _351;
                    float _354 = (_329 - cbPerScene._m0[22u].x) * 10.0;
                    float _829 = isnan(0.0) ? _354 : (isnan(_354) ? 0.0 : max(_354, 0.0));
                    float _356 = isnan(1.0) ? _829 : (isnan(_829) ? 1.0 : min(_829, 1.0));
                    float _357 = isnan(_356) ? _352 : (isnan(_352) ? _356 : min(_352, _356));
                    float _361 = (cbPerScene._m0[21u].x - _215) * cbPerScene._m0[21u].z;
                    float _845 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
                    float _362 = isnan(1.0) ? _845 : (isnan(_845) ? 1.0 : min(_845, 1.0));
                    float _363 = isnan(_362) ? _357 : (isnan(_357) ? _362 : min(_357, _362));
                    float _364 = (_296 * _302) + _279;
                    float _365 = (_297 * _302) + _281;
                    float _366 = _305 + _215;
                    float _399 = fma(_366, cbPerScene._m0[7u].z, fma(_365, cbPerScene._m0[7u].y, cbPerScene._m0[7u].x * _364)) + cbPerScene._m0[7u].w;
                    float _403 = ((fma(_366, cbPerScene._m0[4u].z, fma(_365, cbPerScene._m0[4u].y, cbPerScene._m0[4u].x * _364)) + cbPerScene._m0[4u].w) / _399) - _221;
                    float _404 = ((fma(_366, cbPerScene._m0[5u].z, fma(_365, cbPerScene._m0[5u].y, cbPerScene._m0[5u].x * _364)) + cbPerScene._m0[5u].w) / _399) - _222;
                    float _411 = cbPerScene._m0[18u].x * _403;
                    float _412 = cbPerScene._m0[18u].y * _404;
                    float _417 = sqrt((_411 * _411) + (_412 * _412)) + 9.9999997473787516355514526367188e-06;
                    float _422 = (_403 / _417) * _347;
                    float _423 = (_404 / _417) * _347;
                    float _424 = (((1.0 / _366) - _240) / _417) * _347;
                    float _453 = abs(float(_422 > 0.0) - _221) / (abs(_422) + 1.0000000116860974230803549289703e-07);
                    float _454 = abs(float(_423 > 0.0) - _222) / (abs(_423) + 1.0000000116860974230803549289703e-07);
                    float _456 = (abs(((_424 > 0.0) ? cbPerScene._m0[20u].x : cbPerScene._m0[20u].y) - _240) / (abs(_424) + 1.0000000116860974230803549289703e-07)) + 2.0;
                    float _457 = isnan(_454) ? _453 : (isnan(_453) ? _454 : min(_453, _454));
                    float _458 = isnan(_456) ? _457 : (isnan(_457) ? _456 : min(_457, _456));
                    uint _461 = uint(int(isnan(cbPerScene._m0[23u].y) ? _458 : (isnan(_458) ? cbPerScene._m0[23u].y : min(_458, cbPerScene._m0[23u].y))));
                    float _235;
                    float _466;
                    float _468;
                    float _470;
                    if (int(_461) > int(0u))
                    {
                        float _463 = _424 + _240;
                        float _464 = _423 + _222;
                        float _465 = _422 + _221;
                        float _467;
                        float _469;
                        float _471;
                        float _472;
                        uint _483;
                        float _485;
                        float _487;
                        float _489;
                        float _491;
                        float _493;
                        float _495;
                        float _497;
                        uint _499;
                        float _501;
                        float _503;
                        float _505;
                        float _478 = 0.0;
                        float _479 = 0.0;
                        float _480 = 0.0;
                        float _481 = 0.0;
                        uint _482 = 0u;
                        float _484 = _240;
                        float _486 = _465;
                        float _488 = _464;
                        float _490 = _463;
                        float _492 = _221;
                        float _494 = _222;
                        float _496 = _240;
                        uint _498 = 1u;
                        float _500 = 0.0;
                        float _502 = 0.0;
                        float _504 = 0.0;
                        float _516;
                        float _523;
                        float _524;
                        float _525;
                        float _526;
                        float _527;
                        float _528;
                        uint _529;
                        float _530;
                        bool _536;
                        for (;;)
                        {
                            _516 = textureLod(sampler2D(g_ConvertedDepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[86u].x * _486, cbSceneParam._m0[86u].y * _488), 0.0).x;
                            bool _522 = _482 == (_461 + 4294967295u);
                            _523 = _522 ? _500 : _486;
                            _524 = _522 ? _502 : _488;
                            _525 = _522 ? _504 : _490;
                            _526 = _522 ? _500 : _492;
                            _527 = _522 ? _502 : _494;
                            _528 = _522 ? _504 : _496;
                            _529 = _522 ? 1u : _498;
                            _530 = _522 ? (-1.0) : (_490 - _516);
                            _536 = (_529 != 0u) && ((_530 <= 0.0) && ((_522 ? (-1.0) : (_516 - (_484 * cbPerScene._m0[19u].y))) < 0.0));
                            float frontier_phi_14_pred;
                            float frontier_phi_14_pred_1;
                            float frontier_phi_14_pred_2;
                            uint frontier_phi_14_pred_3;
                            float frontier_phi_14_pred_4;
                            float frontier_phi_14_pred_5;
                            float frontier_phi_14_pred_6;
                            float frontier_phi_14_pred_7;
                            float frontier_phi_14_pred_8;
                            float frontier_phi_14_pred_9;
                            float frontier_phi_14_pred_10;
                            float frontier_phi_14_pred_11;
                            float frontier_phi_14_pred_12;
                            float frontier_phi_14_pred_13;
                            float frontier_phi_14_pred_14;
                            uint frontier_phi_14_pred_15;
                            if (_536)
                            {
                                uint _546 = uint(int(log2(_347) + 0.999000012874603271484375));
                                float _557;
                                float _559;
                                float _561;
                                float _563;
                                float _565;
                                float _567;
                                float _569;
                                if (int(_546) > int(0u))
                                {
                                    uint _667;
                                    float _669;
                                    float _670;
                                    float _671;
                                    float _672;
                                    float _673;
                                    float _674;
                                    float _675;
                                    _667 = 0u;
                                    _669 = _523;
                                    _670 = _524;
                                    _671 = _525;
                                    _672 = _526;
                                    _673 = _527;
                                    _674 = _528;
                                    _675 = _516;
                                    float _558;
                                    float _560;
                                    float _562;
                                    float _564;
                                    float _566;
                                    float _568;
                                    float _570;
                                    for (;;)
                                    {
                                        float _679 = (_672 + _669) * 0.5;
                                        float _680 = (_673 + _670) * 0.5;
                                        float _681 = (_674 + _671) * 0.5;
                                        vec4 _689 = textureLod(sampler2D(g_ConvertedDepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[86u].x * _679, cbSceneParam._m0[86u].y * _680), 0.0);
                                        float _691 = _689.x;
                                        bool _693 = (_681 - _691) < 0.0;
                                        _558 = _693 ? _679 : _669;
                                        _560 = _693 ? _680 : _670;
                                        _562 = _693 ? _681 : _671;
                                        _564 = _693 ? _672 : _679;
                                        _566 = _693 ? _673 : _680;
                                        _568 = _693 ? _674 : _681;
                                        _570 = _693 ? _691 : _675;
                                        uint _668 = _667 + 1u;
                                        if (_668 == _546)
                                        {
                                            break;
                                        }
                                        else
                                        {
                                            _667 = _668;
                                            _669 = _558;
                                            _670 = _560;
                                            _671 = _562;
                                            _672 = _564;
                                            _673 = _566;
                                            _674 = _568;
                                            _675 = _570;
                                        }
                                    }
                                    _557 = _558;
                                    _559 = _560;
                                    _561 = _562;
                                    _563 = _564;
                                    _565 = _566;
                                    _567 = _568;
                                    _569 = _570;
                                }
                                else
                                {
                                    _557 = _523;
                                    _559 = _524;
                                    _561 = _525;
                                    _563 = _526;
                                    _565 = _527;
                                    _567 = _528;
                                    _569 = _516;
                                }
                                float _579 = cbPerScene._m0[28u].x * ((_557 * 2.0) + (-1.0));
                                float _580 = cbPerScene._m0[28u].y * (1.0 - (_559 * 2.0));
                                float _612 = fma(_569, cbPerScene._m0[27u].w, fma(_580, cbPerScene._m0[27u].y, cbPerScene._m0[27u].x * _579) + cbPerScene._m0[27u].z);
                                float _613 = fma(_569, cbPerScene._m0[24u].w, fma(_580, cbPerScene._m0[24u].y, _579 * cbPerScene._m0[24u].x) + cbPerScene._m0[24u].z) / _612;
                                float _614 = fma(_569, cbPerScene._m0[25u].w, fma(_580, cbPerScene._m0[25u].y, cbPerScene._m0[25u].x * _579) + cbPerScene._m0[25u].z) / _612;
                                vec4 _623 = textureLod(sampler2D(g_PrevFrameTexture, SS_ClampLinear), vec2(cbSceneParam._m0[87u].z * _613, cbSceneParam._m0[87u].w * _614), 0.0);
                                float _628 = isnan(_363) ? 1.0 : (isnan(1.0) ? _363 : min(1.0, _363));
                                float _629 = 0.5 - _613;
                                float _630 = 0.5 - _614;
                                float _631 = _629 * 2.0;
                                float _632 = _630 * 2.0;
                                float _633 = _631 * _631;
                                float _634 = _632 * _632;
                                float _881 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
                                float _892 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
                                float _643 = inversesqrt(dot(vec2(_422, _423), vec2(_422, _423)));
                                float _649 = inversesqrt(dot(vec2(_631, _632), vec2(_631, _632)));
                                float _655 = dot(vec2((_629 * (-2.0)) * _649, (_630 * (-2.0)) * _649), vec2(_643 * _422, _643 * _423));
                                float _903 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
                                float _662 = ((1.0 - (isnan(1.0) ? _892 : (isnan(_892) ? 1.0 : min(_892, 1.0)))) * (1.0 - (isnan(1.0) ? _881 : (isnan(_881) ? 1.0 : min(_881, 1.0))))) * (4.0 - ((isnan(1.0) ? _903 : (isnan(_903) ? 1.0 : min(_903, 1.0))) * 2.0));
                                float _914 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
                                float _663 = isnan(1.0) ? _914 : (isnan(_914) ? 1.0 : min(_914, 1.0));
                                float _664 = _663 * _663;
                                frontier_phi_14_pred = _504;
                                frontier_phi_14_pred_1 = _502;
                                frontier_phi_14_pred_2 = _500;
                                frontier_phi_14_pred_3 = _529;
                                frontier_phi_14_pred_4 = _567;
                                frontier_phi_14_pred_5 = _565;
                                frontier_phi_14_pred_6 = _563;
                                frontier_phi_14_pred_7 = _561;
                                frontier_phi_14_pred_8 = _559;
                                frontier_phi_14_pred_9 = _557;
                                frontier_phi_14_pred_10 = _484;
                                frontier_phi_14_pred_11 = isnan(_664) ? _628 : (isnan(_628) ? _664 : min(_628, _664));
                                frontier_phi_14_pred_12 = _623.z;
                                frontier_phi_14_pred_13 = _623.y;
                                frontier_phi_14_pred_14 = _623.x;
                                frontier_phi_14_pred_15 = _461;
                            }
                            else
                            {
                                bool _548 = _530 > 0.0;
                                frontier_phi_14_pred = _548 ? _525 : _504;
                                frontier_phi_14_pred_1 = _548 ? _524 : _502;
                                frontier_phi_14_pred_2 = _548 ? _523 : _500;
                                frontier_phi_14_pred_3 = uint(_548);
                                frontier_phi_14_pred_4 = _525;
                                frontier_phi_14_pred_5 = _524;
                                frontier_phi_14_pred_6 = _523;
                                frontier_phi_14_pred_7 = _525 + _424;
                                frontier_phi_14_pred_8 = _524 + _423;
                                frontier_phi_14_pred_9 = _523 + _422;
                                frontier_phi_14_pred_10 = _516;
                                frontier_phi_14_pred_11 = _481;
                                frontier_phi_14_pred_12 = _480;
                                frontier_phi_14_pred_13 = _479;
                                frontier_phi_14_pred_14 = _478;
                                frontier_phi_14_pred_15 = _482 + 1u;
                            }
                            _505 = frontier_phi_14_pred;
                            _503 = frontier_phi_14_pred_1;
                            _501 = frontier_phi_14_pred_2;
                            _499 = frontier_phi_14_pred_3;
                            _497 = frontier_phi_14_pred_4;
                            _495 = frontier_phi_14_pred_5;
                            _493 = frontier_phi_14_pred_6;
                            _491 = frontier_phi_14_pred_7;
                            _489 = frontier_phi_14_pred_8;
                            _487 = frontier_phi_14_pred_9;
                            _485 = frontier_phi_14_pred_10;
                            _472 = frontier_phi_14_pred_11;
                            _471 = frontier_phi_14_pred_12;
                            _469 = frontier_phi_14_pred_13;
                            _467 = frontier_phi_14_pred_14;
                            _483 = frontier_phi_14_pred_15;
                            if (int(_483) < int(_461))
                            {
                                _478 = _467;
                                _479 = _469;
                                _480 = _471;
                                _481 = _472;
                                _482 = _483;
                                _484 = _485;
                                _486 = _487;
                                _488 = _489;
                                _490 = _491;
                                _492 = _493;
                                _494 = _495;
                                _496 = _497;
                                _498 = _499;
                                _500 = _501;
                                _502 = _503;
                                _504 = _505;
                                continue;
                            }
                            else
                            {
                                break;
                            }
                        }
                        _466 = _467;
                        _468 = _469;
                        _470 = _471;
                        _235 = _472;
                    }
                    else
                    {
                        _466 = 0.0;
                        _468 = 0.0;
                        _470 = 0.0;
                        _235 = 0.0;
                    }
                    float frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder;
                    float frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_1;
                    float frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_2;
                    float frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_3;
                    if ((isnan(_466) || isnan(_468)) || isnan(_470))
                    {
                        frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder = 0.0;
                        frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_1 = 0.0;
                        frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_2 = 0.0;
                        frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_3 = 0.0;
                    }
                    else
                    {
                        frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder = (_235 * _466) * cbPerScene._m0[28u].w;
                        frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_1 = _235;
                        frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_2 = (_235 * _470) * cbPerScene._m0[28u].w;
                        frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_3 = (_235 * _468) * cbPerScene._m0[28u].w;
                    }
                    frontier_phi_1_2_ladder_3_ladder_4_ladder = frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder;
                    frontier_phi_1_2_ladder_3_ladder_4_ladder_1 = frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_1;
                    frontier_phi_1_2_ladder_3_ladder_4_ladder_2 = frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_2;
                    frontier_phi_1_2_ladder_3_ladder_4_ladder_3 = frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_3;
                }
                frontier_phi_1_2_ladder_3_ladder = frontier_phi_1_2_ladder_3_ladder_4_ladder;
                frontier_phi_1_2_ladder_3_ladder_1 = frontier_phi_1_2_ladder_3_ladder_4_ladder_1;
                frontier_phi_1_2_ladder_3_ladder_2 = frontier_phi_1_2_ladder_3_ladder_4_ladder_2;
                frontier_phi_1_2_ladder_3_ladder_3 = frontier_phi_1_2_ladder_3_ladder_4_ladder_3;
            }
            frontier_phi_1_2_ladder = frontier_phi_1_2_ladder_3_ladder;
            frontier_phi_1_2_ladder_1 = frontier_phi_1_2_ladder_3_ladder_1;
            frontier_phi_1_2_ladder_2 = frontier_phi_1_2_ladder_3_ladder_2;
            frontier_phi_1_2_ladder_3 = frontier_phi_1_2_ladder_3_ladder_3;
        }
        else
        {
            frontier_phi_1_2_ladder = 0.0;
            frontier_phi_1_2_ladder_1 = 0.0;
            frontier_phi_1_2_ladder_2 = 0.0;
            frontier_phi_1_2_ladder_3 = 0.0;
        }
        _228 = frontier_phi_1_2_ladder;
        _230 = frontier_phi_1_2_ladder_3;
        _232 = frontier_phi_1_2_ladder_2;
        _234 = frontier_phi_1_2_ladder_1;
    }
    SV_Target.x = _228;
    SV_Target.y = _230;
    SV_Target.z = _232;
    SV_Target.w = _234;
}


