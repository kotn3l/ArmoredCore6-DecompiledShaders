#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Ice_Ov_N_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Ice_Ov_N_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Ice_Ov_N_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Ice_Ov_N_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Ice_Ov_N_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1022;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _198 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _199 = _198 * _190;
    float _200 = _198 * _191;
    float _201 = _198 * _192;
    float _205 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _206 = _205 * NORMAL.x;
    float _207 = _205 * NORMAL.y;
    float _208 = _205 * NORMAL.z;
    float _212 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _213 = _212 * TANGENT.x;
    float _214 = _212 * TANGENT.y;
    float _215 = _212 * TANGENT.z;
    float _248 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _252 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _256 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _260 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _270 = cbSceneParam._m0[71u].x - (_248 / _260);
    float _271 = cbSceneParam._m0[71u].y - (_252 / _260);
    float _272 = cbSceneParam._m0[71u].z - (_256 / _260);
    float _290 = inversesqrt(dot(vec3(_270, _271, _272), vec3(_270, _271, _272)));
    float _291 = _290 * _270;
    float _292 = _290 * _271;
    float _293 = _290 * _272;
    float _297 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _301 = dot(vec4(_291, _292, _293, 0.0), vec4(_297 * _206, _297 * _207, _297 * _208, 0.0));
    float _3517 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _309 = exp2(log2(1.0 - (isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0)))) * cbMtdParam._m0[12u].z);
    float _3528 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _310 = isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0));
    float _317 = (_310 * (cbMtdParam._m0[11u].x - cbMtdParam._m0[10u].x)) + cbMtdParam._m0[10u].x;
    float _318 = (_310 * (cbMtdParam._m0[11u].y - cbMtdParam._m0[10u].y)) + cbMtdParam._m0[10u].y;
    float _319 = (_310 * (cbMtdParam._m0[11u].z - cbMtdParam._m0[10u].z)) + cbMtdParam._m0[10u].z;
    vec4 _338 = texture(sampler2D(M_Ice_Ov_N_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _346 = (_338.x * 2.0) + (-1.0);
    float _348 = (_338.y * 2.0) + (-1.0);
    float _349 = dot(vec2(_346, _348), vec2(_346, _348));
    float _3539 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _354 = sqrt(1.0 - (isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0))));
    float _357 = fma(_354, _206, fma(_348, _213, _346 * _199));
    float _360 = fma(_354, _207, fma(_348, _214, _346 * _200));
    float _363 = fma(_354, _208, fma(_348, _215, _346 * _201));
    float _367 = inversesqrt(dot(vec3(_357, _360, _363), vec3(_357, _360, _363)));
    float _378 = cbMtdParam._m0[13u].y + dot(vec4(_367 * _357, _367 * _360, _367 * _363, 0.0), vec4(cbMtdParam._m0[14u].yzw, 0.0));
    float _3550 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _380 = (isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0))) * TEXCOORD_3.x;
    float _3561 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _381 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
    vec4 _393 = texture(sampler2D(M_Ice_Ov_N_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _412 = (((cbMtdParam._m0[9u].x * _393.x) - _317) * _381) + _317;
    float _413 = (((cbMtdParam._m0[9u].y * _393.y) - _318) * _381) + _318;
    float _414 = (((cbMtdParam._m0[9u].z * _393.z) - _319) * _381) + _319;
    float _419 = ((cbMtdParam._m0[14u].x - cbMtdParam._m0[12u].x) * _381) + cbMtdParam._m0[12u].x;
    float _421 = abs(_206);
    float _422 = abs(_207);
    float _423 = abs(_208);
    float _424 = _421 * _421;
    float _425 = _422 * _422;
    float _426 = _423 * _423;
    float _429 = _252 * 0.0500000007450580596923828125;
    float _440 = (cbTextureTilingScale._m0[4u].x * (_248 * 0.0500000007450580596923828125)) + cbTextureTilingScale._m0[4u].z;
    vec4 _443 = texture(sampler2D(M_Ice_Ov_N_snp_0_Texture2D_9, SS_BumpMap), vec2(_440, (cbTextureTilingScale._m0[4u].y * _429) + cbTextureTilingScale._m0[4u].w));
    float _450 = (cbTextureTilingScale._m0[4u].y * (_256 * 0.0500000007450580596923828125)) + cbTextureTilingScale._m0[4u].w;
    vec4 _451 = texture(sampler2D(M_Ice_Ov_N_snp_0_Texture2D_9, SS_BumpMap), vec2(_440, _450));
    vec4 _461 = texture(sampler2D(M_Ice_Ov_N_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _429) + cbTextureTilingScale._m0[4u].z, _450));
    vec4 _488 = texture(sampler2D(M_Ice_Ov_N_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    vec4 _507 = texture(sampler2D(M_Ice_Ov_N_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _513 = (_507.x * 2.0) + (-1.0);
    float _514 = (_507.y * 2.0) + (-1.0);
    float _3572 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _515 = isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0));
    float _520 = (_515 * _515) * (3.0 - (_515 * 2.0));
    float _530 = (((((((_451.x * _425) + (_443.x * _426)) + (_461.x * _424)) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].x) + _346) + (((_520 * (((_488.x * 2.0) + (-1.0)) - _513)) + _513) * cbMtdParam._m0[12u].y);
    float _531 = (((((((_451.y * _425) + (_443.y * _426)) + (_461.y * _424)) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].x) + _348) + (((_520 * (((_488.y * 2.0) + (-1.0)) - _514)) + _514) * cbMtdParam._m0[12u].y);
    float _534 = cbMtdParam._m0[13u].w + _381;
    float _3583 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _535 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
    float _539 = fma(_354, _206, fma(_531, _213, _530 * _199));
    float _542 = fma(_354, _207, fma(_531, _214, _530 * _200));
    float _545 = fma(_354, _208, fma(_531, _215, _530 * _201));
    float _549 = inversesqrt(dot(vec3(_539, _542, _545), vec3(_539, _542, _545)));
    float _550 = _549 * _539;
    float _551 = _549 * _542;
    float _552 = _549 * _545;
    float _3594 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _553 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
    float _3605 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _3616 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _3627 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _572 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _578 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _579 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _600 = fma(_552, cbSceneParam._m0[5u].z, fma(_551, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _550));
    float _603 = fma(_552, cbSceneParam._m0[6u].z, fma(_551, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _550));
    float _606 = fma(_552, cbSceneParam._m0[7u].z, fma(_551, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _550));
    uint _619 = uint(roundEven(NORMAL.w)) * 13u;
    uint _621 = (_619 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _627 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0)))) * cbInstanceData._m0[_621].x;
    float _628 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0)))) * cbInstanceData._m0[_621].y;
    float _629 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0)))) * cbInstanceData._m0[_621].z;
    float _3638 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _630 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
    float _3649 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _631 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
    float _3660 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _632 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
    vec4 _641 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _578, cbSceneParam._m0[86u].y * _579));
    float _644 = _641.x * TEXCOORD_3.w;
    float _645 = dot(vec3(_550, _551, _552), vec3(_291, _292, _293));
    float _648 = _645 * 2.0;
    float _652 = (_648 * _550) - _291;
    float _653 = (_648 * _551) - _292;
    float _654 = (_648 * _552) - _293;
    float _658 = abs(dot(vec3(_291, _292, _293), vec3(_550, _551, _552)));
    float _3671 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _659 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
    float _667 = 10.0 / (_572 + 10.0);
    float _668 = sqrt(_553);
    float _679 = exp2((_668 * 5.0) * log2(1.0 - (_659 * 0.999000012874603271484375))) / (4.0 - (_668 * 3.0));
    float _711 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _715 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _719 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1021;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _746 = fma(_719, cbModelParam._m0[26u].z, fma(_715, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _711));
        float _750 = fma(_719, cbModelParam._m0[27u].z, fma(_715, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _711));
        float _754 = fma(_719, cbModelParam._m0[28u].z, fma(_715, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _711));
        float _779 = _711 + _550;
        float _780 = _715 + _551;
        float _781 = _719 + _552;
        float _791 = fma(_781, cbModelParam._m0[26u].z, fma(_780, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _779)) - _746;
        float _792 = fma(_781, cbModelParam._m0[27u].z, fma(_780, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _779)) - _750;
        float _793 = fma(_781, cbModelParam._m0[28u].z, fma(_780, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _779)) - _754;
        float _797 = inversesqrt(dot(vec3(_791, _792, _793), vec3(_791, _792, _793)));
        float _810 = ((_797 * _791) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_746 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _811 = ((_797 * _792) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_750 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _812 = ((_797 * _793) / cbModelParam._m0[34u].z) + ((((((_754 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _815 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_810, _811, _812), 0.0);
        vec4 _822 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_810, _811, _812), 0.0);
        vec4 _829 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_810, _811, _812), 0.0);
        vec4 _836 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_810, _811, _812), 0.0);
        float _849 = exp2((_815.w + (-0.5)) * 20.0) * 2.0;
        float _850 = _849 * (_815.x + (-0.5));
        float _851 = _849 * (_815.y + (-0.5));
        float _852 = _849 * (_815.z + (-0.5));
        float _859 = exp2((_822.w + (-0.5)) * 20.0) * 2.0;
        float _860 = _859 * (_822.x + (-0.5));
        float _861 = _859 * (_822.y + (-0.5));
        float _862 = _859 * (_822.z + (-0.5));
        float _869 = exp2((_829.w + (-0.5)) * 20.0) * 2.0;
        float _870 = _869 * (_829.x + (-0.5));
        float _871 = _869 * (_829.y + (-0.5));
        float _872 = _869 * (_829.z + (-0.5));
        float _879 = exp2((_836.w + (-0.5)) * 20.0) * 2.0;
        float _880 = _879 * (_836.x + (-0.5));
        float _881 = _879 * (_836.y + (-0.5));
        float _882 = _879 * (_836.z + (-0.5));
        float _883 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        float _884 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
        float _885 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _886 = _850 * 0.5;
        float _887 = _860 * 0.5;
        float _888 = _870 * 0.5;
        float _889 = dot(vec3(_886, _887, _888), vec3(_886, _887, _888));
        float _894 = (_889 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_889);
        float _903 = (dot(vec3(_550, _551, _552), vec3(_894 * _886, _894 * _887, _894 * _888)) + 1.0) * 0.5;
        float _3697 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _913 = sqrt(((_887 * _887) + (_886 * _886)) + (_888 * _888)) / (_883 + 9.9999997473787516355514526367188e-06);
        float _3708 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _914 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
        float _915 = _914 * 2.0;
        float _919 = (1.0 - _914) / (_914 + 1.0);
        float _3719 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _920 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
        float _929 = ((((1.0 - _920) * (_915 + 2.0)) * exp2(log2(isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))) * (_915 + 1.0))) + _920) * _883;
        float _930 = _851 * 0.5;
        float _931 = _861 * 0.5;
        float _932 = _871 * 0.5;
        float _933 = dot(vec3(_930, _931, _932), vec3(_930, _931, _932));
        float _938 = (_933 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_933);
        float _946 = (dot(vec3(_550, _551, _552), vec3(_938 * _930, _938 * _931, _938 * _932)) + 1.0) * 0.5;
        float _3730 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _955 = sqrt(((_931 * _931) + (_930 * _930)) + (_932 * _932)) / (_884 + 9.9999997473787516355514526367188e-06);
        float _3741 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _956 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
        float _957 = _956 * 2.0;
        float _961 = (1.0 - _956) / (_956 + 1.0);
        float _3752 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _962 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
        float _971 = ((((1.0 - _962) * (_957 + 2.0)) * exp2(log2(isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))) * (_957 + 1.0))) + _962) * _884;
        float _972 = _852 * 0.5;
        float _973 = _862 * 0.5;
        float _974 = _872 * 0.5;
        float _975 = dot(vec3(_972, _973, _974), vec3(_972, _973, _974));
        float _980 = (_975 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_975);
        float _988 = (dot(vec3(_550, _551, _552), vec3(_980 * _972, _980 * _973, _980 * _974)) + 1.0) * 0.5;
        float _3763 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _997 = sqrt(((_973 * _973) + (_972 * _972)) + (_974 * _974)) / (_885 + 9.9999997473787516355514526367188e-06);
        float _3774 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _998 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
        float _999 = _998 * 2.0;
        float _1003 = (1.0 - _998) / (_998 + 1.0);
        float _3785 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1004 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
        float _1013 = ((((1.0 - _1004) * (_999 + 2.0)) * exp2(log2(isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0))) * (_999 + 1.0))) + _1004) * _885;
        _1021 = _852;
        _1023 = _851;
        _1024 = _850;
        _1025 = _862;
        _1026 = _861;
        _1027 = _860;
        _1028 = _872;
        _1029 = _871;
        _1030 = _870;
        _1031 = _885;
        _1032 = _884;
        _1033 = _883;
        _1034 = cbModelParam._m0[36u].z * (isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0)));
        _1035 = cbModelParam._m0[36u].z * (isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0)));
        _1036 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0)));
    }
    else
    {
        _1021 = _1022;
        _1023 = _1022;
        _1024 = _1022;
        _1025 = _1022;
        _1026 = _1022;
        _1027 = _1022;
        _1028 = _1022;
        _1029 = _1022;
        _1030 = _1022;
        _1031 = _1022;
        _1032 = _1022;
        _1033 = _1022;
        _1034 = 0.0;
        _1035 = 0.0;
        _1036 = 0.0;
    }
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1062 = fma(_719, cbModelParam._m0[30u].z, fma(_715, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _711));
        float _1066 = fma(_719, cbModelParam._m0[31u].z, fma(_715, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _711));
        float _1070 = fma(_719, cbModelParam._m0[32u].z, fma(_715, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _711));
        float _1093 = _711 + _550;
        float _1094 = _715 + _551;
        float _1095 = _719 + _552;
        float _1105 = fma(_1095, cbModelParam._m0[30u].z, fma(_1094, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1093)) - _1062;
        float _1106 = fma(_1095, cbModelParam._m0[31u].z, fma(_1094, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1093)) - _1066;
        float _1107 = fma(_1095, cbModelParam._m0[32u].z, fma(_1094, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1093)) - _1070;
        float _1111 = inversesqrt(dot(vec3(_1105, _1106, _1107), vec3(_1105, _1106, _1107)));
        float _1124 = ((_1111 * _1105) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1062 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1125 = ((_1111 * _1106) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1066 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1126 = ((_1111 * _1107) / cbModelParam._m0[35u].z) + ((((((_1070 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1128 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1124, _1125, _1126), 0.0);
        vec4 _1135 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1124, _1125, _1126), 0.0);
        vec4 _1142 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1124, _1125, _1126), 0.0);
        vec4 _1149 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1124, _1125, _1126), 0.0);
        float _1161 = exp2((_1128.w + (-0.5)) * 20.0) * 2.0;
        float _1162 = _1161 * (_1128.x + (-0.5));
        float _1163 = _1161 * (_1128.y + (-0.5));
        float _1164 = _1161 * (_1128.z + (-0.5));
        float _1171 = exp2((_1135.w + (-0.5)) * 20.0) * 2.0;
        float _1172 = _1171 * (_1135.x + (-0.5));
        float _1173 = _1171 * (_1135.y + (-0.5));
        float _1174 = _1171 * (_1135.z + (-0.5));
        float _1181 = exp2((_1142.w + (-0.5)) * 20.0) * 2.0;
        float _1182 = _1181 * (_1142.x + (-0.5));
        float _1183 = _1181 * (_1142.y + (-0.5));
        float _1184 = _1181 * (_1142.z + (-0.5));
        float _1191 = exp2((_1149.w + (-0.5)) * 20.0) * 2.0;
        float _1192 = _1191 * (_1149.x + (-0.5));
        float _1193 = _1191 * (_1149.y + (-0.5));
        float _1194 = _1191 * (_1149.z + (-0.5));
        float _1195 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1196 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1197 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1198 = _1162 * 0.5;
        float _1199 = _1172 * 0.5;
        float _1200 = _1182 * 0.5;
        float _1201 = dot(vec3(_1198, _1199, _1200), vec3(_1198, _1199, _1200));
        float _1206 = (_1201 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1201);
        float _1214 = (dot(vec3(_550, _551, _552), vec3(_1206 * _1198, _1206 * _1199, _1206 * _1200)) + 1.0) * 0.5;
        float _3826 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1223 = sqrt(((_1199 * _1199) + (_1198 * _1198)) + (_1200 * _1200)) / (_1195 + 9.9999997473787516355514526367188e-06);
        float _3837 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
        float _1225 = _1224 * 2.0;
        float _1229 = (1.0 - _1224) / (_1224 + 1.0);
        float _3848 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _1239 = ((((1.0 - _1230) * (_1225 + 2.0)) * exp2(log2(isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0))) * (_1225 + 1.0))) + _1230) * _1195;
        float _1240 = _1163 * 0.5;
        float _1241 = _1173 * 0.5;
        float _1242 = _1183 * 0.5;
        float _1243 = dot(vec3(_1240, _1241, _1242), vec3(_1240, _1241, _1242));
        float _1248 = (_1243 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1243);
        float _1256 = (dot(vec3(_550, _551, _552), vec3(_1248 * _1240, _1248 * _1241, _1248 * _1242)) + 1.0) * 0.5;
        float _3859 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1265 = sqrt(((_1241 * _1241) + (_1240 * _1240)) + (_1242 * _1242)) / (_1196 + 9.9999997473787516355514526367188e-06);
        float _3870 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
        float _1267 = _1266 * 2.0;
        float _1271 = (1.0 - _1266) / (_1266 + 1.0);
        float _3881 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _1281 = ((((1.0 - _1272) * (_1267 + 2.0)) * exp2(log2(isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0))) * (_1267 + 1.0))) + _1272) * _1196;
        float _1282 = _1164 * 0.5;
        float _1283 = _1174 * 0.5;
        float _1284 = _1184 * 0.5;
        float _1285 = dot(vec3(_1282, _1283, _1284), vec3(_1282, _1283, _1284));
        float _1290 = (_1285 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1285);
        float _1298 = (dot(vec3(_550, _551, _552), vec3(_1290 * _1282, _1290 * _1283, _1290 * _1284)) + 1.0) * 0.5;
        float _3892 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1307 = sqrt(((_1283 * _1283) + (_1282 * _1282)) + (_1284 * _1284)) / (_1197 + 9.9999997473787516355514526367188e-06);
        float _3903 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
        float _1309 = _1308 * 2.0;
        float _1313 = (1.0 - _1308) / (_1308 + 1.0);
        float _3914 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _1323 = ((((1.0 - _1314) * (_1309 + 2.0)) * exp2(log2(isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0))) * (_1309 + 1.0))) + _1314) * _1197;
        _1331 = _1164;
        _1332 = _1163;
        _1333 = _1162;
        _1334 = _1174;
        _1335 = _1173;
        _1336 = _1172;
        _1337 = _1184;
        _1338 = _1183;
        _1339 = _1182;
        _1340 = _1197;
        _1341 = _1196;
        _1342 = _1195;
        _1343 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0)));
        _1344 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)));
        _1345 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0)));
    }
    else
    {
        _1331 = _1022;
        _1332 = _1022;
        _1333 = _1022;
        _1334 = _1022;
        _1335 = _1022;
        _1336 = _1022;
        _1337 = _1022;
        _1338 = _1022;
        _1339 = _1022;
        _1340 = _1022;
        _1341 = _1022;
        _1342 = _1022;
        _1343 = 0.0;
        _1344 = 0.0;
        _1345 = 0.0;
    }
    float _1355 = (cbModelParam._m0[1u].x * (_1343 - _1034)) + _1034;
    float _1356 = (cbModelParam._m0[1u].x * (_1344 - _1035)) + _1035;
    float _1357 = (cbModelParam._m0[1u].x * (_1345 - _1036)) + _1036;
    float _1378 = fma(_1357, cbSceneParam._m0[89u].z, fma(_1356, cbSceneParam._m0[89u].y, _1355 * cbSceneParam._m0[89u].x));
    float _1381 = fma(_1357, cbSceneParam._m0[90u].z, fma(_1356, cbSceneParam._m0[90u].y, _1355 * cbSceneParam._m0[90u].x));
    float _1384 = fma(_1357, cbSceneParam._m0[91u].z, fma(_1356, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1355));
    float _1399 = _652 * 0.5;
    float _1400 = _653 * 0.5;
    float _1401 = _654 * 0.5;
    float _1402 = dot(vec4(_1399, _1400, _1401, 1.0), vec4(_1333, _1336, _1339, _1342));
    float _1405 = dot(vec4(_1399, _1400, _1401, 1.0), vec4(_1332, _1335, _1338, _1341));
    float _1408 = dot(vec4(_1399, _1400, _1401, 1.0), vec4(_1331, _1334, _1337, _1340));
    float _1442;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1415 = dot(vec4(_1399, _1400, _1401, 1.0), vec4(_1021, _1025, _1028, _1031));
        float _1419 = dot(vec4(_1399, _1400, _1401, 1.0), vec4(_1023, _1026, _1029, _1032));
        float _1423 = dot(vec4(_1399, _1400, _1401, 1.0), vec4(_1024, _1027, _1030, _1033));
        float _1430 = dot(vec4(cbModelParam._m0[39u]), vec4(_1399, _1400, _1401, 1.0));
        _1442 = dot(vec3(isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0)), isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0)), isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1430) ? 0.0 : (isnan(0.0) ? _1430 : max(0.0, _1430))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1442 = 1.0;
    }
    float _1453;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1444 = dot(vec4(cbModelParam._m0[40u]), vec4(_1399, _1400, _1401, 1.0));
        _1453 = dot(vec3(isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0)), isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0)), isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1444) ? 0.0 : (isnan(0.0) ? _1444 : max(0.0, _1444))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1453 = 1.0;
    }
    float _1457 = (_1453 * cbModelParam._m0[1u].x) + (_1442 * (1.0 - cbModelParam._m0[1u].x));
    float _1467 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _553);
    float _1468 = isnan(_1467) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1467 : min(cbModelParam._m0[25u].z, _1467));
    float _1548;
    float _1550;
    float _1552;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1515 = fma(_719, cbModelParam._m0[13u].z, fma(_715, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _711)) + cbModelParam._m0[13u].w;
        float _1519 = fma(_719, cbModelParam._m0[14u].z, fma(_715, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _711)) + cbModelParam._m0[14u].w;
        float _1523 = fma(_719, cbModelParam._m0[15u].z, fma(_715, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _711)) + cbModelParam._m0[15u].w;
        float _1526 = fma(_654, cbModelParam._m0[13u].z, fma(_653, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _652));
        float _1529 = fma(_654, cbModelParam._m0[14u].z, fma(_653, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _652));
        float _1532 = fma(_654, cbModelParam._m0[15u].z, fma(_653, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _652));
        float _1560;
        if (_1526 > 0.0)
        {
            _1560 = abs((1.0 - _1515) / _1526);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1526 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1515 + 1.0) / _1526);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1560 = frontier_phi_14_12_ladder;
        }
        float _1837;
        if (_1529 > 0.0)
        {
            _1837 = abs((1.0 - _1519) / _1529);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1529 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1519 + 1.0) / _1529);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1837 = frontier_phi_23_19_ladder;
        }
        float _2083;
        if (_1532 > 0.0)
        {
            _2083 = abs((1.0 - _1523) / _1532);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1532 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1523 + 1.0) / _1532);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2083 = frontier_phi_35_30_ladder;
        }
        float _2085 = isnan(_1837) ? _1560 : (isnan(_1560) ? _1837 : min(_1560, _1837));
        float _2086 = isnan(_2083) ? _2085 : (isnan(_2085) ? _2083 : min(_2085, _2083));
        float _2090 = (_2086 * _1526) + _1515;
        float _2091 = (_2086 * _1529) + _1519;
        float _2092 = (_2086 * _1532) + _1523;
        float _2093 = _2086 * 9.9999997473787516355514526367188e-05;
        float _2095 = (-1.0) - _2093;
        float _2097 = _2093 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2092 > _2097) || ((_2092 < _2095) || ((_2091 > _2097) || ((_2091 < _2095) || ((_2090 < _2095) || (_2090 > _2097))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2216 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2092, cbModelParam._m0[9u].z, fma(_2091, cbModelParam._m0[9u].y, _2090 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2092, cbModelParam._m0[10u].z, fma(_2091, cbModelParam._m0[10u].y, _2090 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2092, cbModelParam._m0[11u].z, fma(_2091, cbModelParam._m0[11u].y, _2090 * cbModelParam._m0[11u].x))), _1468);
            frontier_phi_13_35_ladder = _2216.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2216.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2216.x * cbModelParam._m0[1u].y;
        }
        _1548 = frontier_phi_13_35_ladder_2;
        _1550 = frontier_phi_13_35_ladder_1;
        _1552 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1536 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_652, _653, _654), _1468);
        _1548 = _1536.x * cbModelParam._m0[1u].y;
        _1550 = _1536.y * cbModelParam._m0[1u].y;
        _1552 = _1536.z * cbModelParam._m0[1u].y;
    }
    float _1556 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _553);
    float _1557 = isnan(_1556) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1556 : min(cbModelParam._m0[25u].w, _1556));
    float _1650;
    float _1652;
    float _1654;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1614 = fma(_719, cbModelParam._m0[21u].z, fma(_715, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _711)) + cbModelParam._m0[21u].w;
        float _1618 = fma(_719, cbModelParam._m0[22u].z, fma(_715, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _711)) + cbModelParam._m0[22u].w;
        float _1622 = fma(_719, cbModelParam._m0[23u].z, fma(_715, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _711)) + cbModelParam._m0[23u].w;
        float _1625 = fma(_654, cbModelParam._m0[21u].z, fma(_653, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _652));
        float _1628 = fma(_654, cbModelParam._m0[22u].z, fma(_653, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _652));
        float _1631 = fma(_654, cbModelParam._m0[23u].z, fma(_653, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _652));
        float _1842;
        if (_1625 > 0.0)
        {
            _1842 = abs((1.0 - _1614) / _1625);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1625 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1614 + 1.0) / _1625);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1842 = frontier_phi_25_21_ladder;
        }
        float _2110;
        if (_1628 > 0.0)
        {
            _2110 = abs((1.0 - _1618) / _1628);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1628 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1618 + 1.0) / _1628);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2110 = frontier_phi_37_32_ladder;
        }
        float _2315;
        if (_1631 > 0.0)
        {
            _2315 = abs((1.0 - _1622) / _1631);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1631 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1622 + 1.0) / _1631);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2315 = frontier_phi_46_43_ladder;
        }
        float _2317 = isnan(_2110) ? _1842 : (isnan(_1842) ? _2110 : min(_1842, _2110));
        float _2318 = isnan(_2315) ? _2317 : (isnan(_2317) ? _2315 : min(_2317, _2315));
        float _2322 = (_2318 * _1625) + _1614;
        float _2323 = (_2318 * _1628) + _1618;
        float _2324 = (_2318 * _1631) + _1622;
        float _2325 = _2318 * 9.9999997473787516355514526367188e-05;
        float _2326 = (-1.0) - _2325;
        float _2328 = _2325 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2324 > _2328) || ((_2324 < _2326) || ((_2323 > _2328) || ((_2323 < _2326) || ((_2322 < _2326) || (_2322 > _2328))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2599 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2324, cbModelParam._m0[17u].z, fma(_2323, cbModelParam._m0[17u].y, _2322 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2324, cbModelParam._m0[18u].z, fma(_2323, cbModelParam._m0[18u].y, _2322 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2324, cbModelParam._m0[19u].z, fma(_2323, cbModelParam._m0[19u].y, _2322 * cbModelParam._m0[19u].x))), _1557);
            frontier_phi_22_46_ladder = _2599.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2599.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2599.x * cbModelParam._m0[1u].z;
        }
        _1650 = frontier_phi_22_46_ladder_2;
        _1652 = frontier_phi_22_46_ladder_1;
        _1654 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1634 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_652, _653, _654), _1557);
        _1650 = _1634.x * cbModelParam._m0[1u].z;
        _1652 = _1634.y * cbModelParam._m0[1u].z;
        _1654 = _1634.z * cbModelParam._m0[1u].z;
    }
    float _1666 = ((((1.0 - _679) * ((_668 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_679 * _668)) * _644;
    float _1667 = _1666 * ((cbModelParam._m0[1u].w * (_1650 - _1548)) + _1548);
    float _1668 = _1666 * ((cbModelParam._m0[1u].w * (_1652 - _1550)) + _1550);
    float _1669 = _1666 * ((cbModelParam._m0[1u].w * (_1654 - _1552)) + _1552);
    float _1672 = fma(_1669, cbSceneParam._m0[89u].z, fma(_1668, cbSceneParam._m0[89u].y, _1667 * cbSceneParam._m0[89u].x));
    float _1675 = fma(_1669, cbSceneParam._m0[90u].z, fma(_1668, cbSceneParam._m0[90u].y, _1667 * cbSceneParam._m0[90u].x));
    float _1678 = fma(_1669, cbSceneParam._m0[91u].z, fma(_1668, cbSceneParam._m0[91u].y, _1667 * cbSceneParam._m0[91u].x));
    float _1689 = _578 / cbSceneParam._m0[86u].x;
    float _1697 = (cbSceneParam._m0[88u].y * (1.0 - _553)) + cbSceneParam._m0[88u].z;
    float _4040 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
    float _1699 = (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * 5.0;
    float _1704 = (_667 * cbMtdParam._m0[12u].w) * dot(vec3(_550, _551, _552), vec3(1.0, 0.0, 0.0));
    vec4 _1714 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1704 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1704 + _1689) * cbSceneParam._m0[86u].x, _579), _1699).w) + _1689) * cbSceneParam._m0[86u].x, _579), _1699);
    float _1730 = 1.0 - _1714.w;
    vec4 _1738 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_578, _579));
    float _1740 = _1738.w;
    float _1752 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1740);
    float _1753 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1740);
    float _1754 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1740);
    uvec4 _1758 = floatBitsToUint(cbInstanceData._m0[_619 + 5u]);
    uint _1760 = _1758.x * 14u;
    uint _1761 = _1760 + 13u;
    float _1768 = _644 + (-1.0);
    float _1773 = (cbLight._m0[_1761].x * _1768) + 1.0;
    float _1774 = (cbLight._m0[_1761].y * _1768) + 1.0;
    float _1775 = (cbLight._m0[_1761].z * _1768) + 1.0;
    float _1776 = (cbLight._m0[_1761].w * _1768) + 1.0;
    uint _1777 = _1760 + 5u;
    float _1783 = isnan(1.0) ? _1774 : (isnan(_1774) ? 1.0 : min(_1774, 1.0));
    uint _1787 = _1760 + 4u;
    float _1796 = isnan(1.0) ? _1773 : (isnan(_1773) ? 1.0 : min(_1773, 1.0));
    uint _1800 = _1760 | 1u;
    float _1811 = dot(vec3(cbLight._m0[_1760].xyz), vec3(_550, _551, _552));
    float _1814 = dot(vec3(cbLight._m0[_1800].xyz), vec3(_550, _551, _552));
    float _4061 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
    float _4072 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
    float _1819 = (isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) * 0.3183098733425140380859375;
    float _1821 = (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0))) * 0.3183098733425140380859375;
    float _1828 = ((cbLight._m0[_1777].x * _1783) * _1821) + (((cbLight._m0[_1787].x * _1752) * _1796) * _1819);
    float _1829 = ((_1783 * cbLight._m0[_1777].y) * _1821) + (((cbLight._m0[_1787].y * _1753) * _1796) * _1819);
    float _1830 = ((_1783 * cbLight._m0[_1777].z) * _1821) + (((cbLight._m0[_1787].z * _1754) * _1796) * _1819);
    uvec4 _1834 = floatBitsToUint(cbLight._m0[_1760 + 12u]);
    bool _1836 = _1834.x == 0u;
    float _1847;
    float _1849;
    float _1851;
    if (_1836)
    {
        _1847 = _1828;
        _1849 = _1829;
        _1851 = _1830;
    }
    else
    {
        uint _1855 = _1760 + 6u;
        float _1871 = (dot(vec3(cbLight._m0[_1760 + 2u].xyz), vec3(_550, _551, _552)) * 0.5) + 0.5;
        float _1872 = _1871 * _1871;
        float _4083 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
        float _1873 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _1874 = isnan(1.0) ? _1775 : (isnan(_1775) ? 1.0 : min(_1775, 1.0));
        _1847 = (((cbLight._m0[_1855].x * 0.3183098733425140380859375) * _1873) * _1874) + _1828;
        _1849 = (((cbLight._m0[_1855].y * 0.3183098733425140380859375) * _1873) * _1874) + _1829;
        _1851 = (((cbLight._m0[_1855].z * 0.3183098733425140380859375) * _1873) * _1874) + _1830;
    }
    bool _1854 = _1834.y == 0u;
    float _1892;
    float _1894;
    float _1896;
    if (_1854)
    {
        _1892 = _1847;
        _1894 = _1849;
        _1896 = _1851;
    }
    else
    {
        uint _2054 = _1760 + 7u;
        float _2070 = (dot(vec3(cbLight._m0[_1760 + 3u].xyz), vec3(_550, _551, _552)) * 0.5) + 0.5;
        float _2071 = _2070 * _2070;
        float _4099 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
        float _2072 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _2073 = isnan(1.0) ? _1776 : (isnan(_1776) ? 1.0 : min(_1776, 1.0));
        _1892 = (((cbLight._m0[_2054].x * 0.3183098733425140380859375) * _2072) * _2073) + _1847;
        _1894 = (((cbLight._m0[_2054].y * 0.3183098733425140380859375) * _2072) * _2073) + _1849;
        _1896 = (((cbLight._m0[_2054].z * 0.3183098733425140380859375) * _2072) * _2073) + _1851;
    }
    uint _1899 = _1760 + 8u;
    float _1912 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1760].w)) * _553) * 0.949999988079071044921875);
    float _1913 = _1912 * _1912;
    float _1914 = cbLight._m0[_1760].x + _291;
    float _1915 = cbLight._m0[_1760].y + _292;
    float _1916 = cbLight._m0[_1760].z + _293;
    float _1920 = inversesqrt(dot(vec3(_1914, _1915, _1916), vec3(_1914, _1915, _1916)));
    float _1921 = _1920 * _1914;
    float _1922 = _1920 * _1915;
    float _1923 = _1920 * _1916;
    float _1924 = dot(vec3(_550, _551, _552), vec3(cbLight._m0[_1760].xyz));
    float _4115 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
    float _1927 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
    float _4126 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _1928 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
    float _1929 = dot(vec3(_550, _551, _552), vec3(_1921, _1922, _1923));
    float _4137 = isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0));
    float _1932 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
    float _1933 = dot(vec3(cbLight._m0[_1760].xyz), vec3(_1921, _1922, _1923));
    float _4148 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
    float _1937 = _1913 * _1913;
    float _1941 = ((_1932 * _1932) * (_1937 + (-1.0))) + 1.0;
    float _1952 = (exp2(log2(1.0 - (isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1953 = 1.0 - _1913;
    float _1964 = (0.5 / (((_1928 * ((_1927 * _1953) + _1913)) + 9.9999999392252902907785028219223e-09) + (((_1928 * _1953) + _1913) * _1927))) * _1927;
    float _4159 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
    float _1966 = (isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * (_1937 / ((_1941 * _1941) * 3.141590118408203125));
    uint _1980 = _1760 + 9u;
    float _1991 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1800].w)) * _553) * 0.949999988079071044921875);
    float _1992 = _1991 * _1991;
    float _1993 = cbLight._m0[_1800].x + _291;
    float _1994 = cbLight._m0[_1800].y + _292;
    float _1995 = cbLight._m0[_1800].z + _293;
    float _1999 = inversesqrt(dot(vec3(_1993, _1994, _1995), vec3(_1993, _1994, _1995)));
    float _2000 = _1999 * _1993;
    float _2001 = _1999 * _1994;
    float _2002 = _1999 * _1995;
    float _2003 = dot(vec3(_550, _551, _552), vec3(cbLight._m0[_1800].xyz));
    float _4170 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
    float _2006 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
    float _2007 = dot(vec3(_550, _551, _552), vec3(_2000, _2001, _2002));
    float _4181 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
    float _2010 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
    float _2011 = dot(vec3(cbLight._m0[_1800].xyz), vec3(_2000, _2001, _2002));
    float _4192 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _2015 = _1992 * _1992;
    float _2019 = ((_2010 * _2010) * (_2015 + (-1.0))) + 1.0;
    float _2028 = (exp2(log2(1.0 - (isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2029 = 1.0 - _1992;
    float _2039 = (0.5 / (((_1928 * ((_2006 * _2029) + _1992)) + 9.9999999392252902907785028219223e-09) + (((_1928 * _2029) + _1992) * _2006))) * _2006;
    float _4203 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
    float _2041 = (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * (_2015 / ((_2019 * _2019) * 3.141590118408203125));
    float _2051 = (((_2028 * cbLight._m0[_1980].x) * _2041) * _1783) + ((((cbLight._m0[_1899].x * _1752) * _1952) * _1966) * _1796);
    float _2052 = (((_2028 * cbLight._m0[_1980].y) * _2041) * _1783) + ((((cbLight._m0[_1899].y * _1753) * _1952) * _1966) * _1796);
    float _2053 = (((_2028 * cbLight._m0[_1980].z) * _2041) * _1783) + ((((cbLight._m0[_1899].z * _1754) * _1952) * _1966) * _1796);
    float _2115;
    float _2117;
    float _2119;
    if (_1836)
    {
        _2115 = _2051;
        _2117 = _2052;
        _2119 = _2053;
    }
    else
    {
        uint _2121 = _1760 + 2u;
        uint _2125 = _1760 + 10u;
        float _2139 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2121].w)) * _553) * 0.949999988079071044921875);
        float _2140 = _2139 * _2139;
        float _2141 = cbLight._m0[_2121].x + _291;
        float _2142 = cbLight._m0[_2121].y + _292;
        float _2143 = cbLight._m0[_2121].z + _293;
        float _2147 = inversesqrt(dot(vec3(_2141, _2142, _2143), vec3(_2141, _2142, _2143)));
        float _2148 = _2147 * _2141;
        float _2149 = _2147 * _2142;
        float _2150 = _2147 * _2143;
        float _2151 = dot(vec3(_550, _551, _552), vec3(cbLight._m0[_2121].xyz));
        float _4214 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
        float _2154 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _2155 = dot(vec3(_550, _551, _552), vec3(_2148, _2149, _2150));
        float _4225 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
        float _2158 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _2159 = dot(vec3(cbLight._m0[_2121].xyz), vec3(_2148, _2149, _2150));
        float _4236 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
        float _2163 = _2140 * _2140;
        float _2167 = ((_2158 * _2158) * (_2163 + (-1.0))) + 1.0;
        float _2176 = (exp2(log2(1.0 - (isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2177 = 1.0 - _2140;
        float _2187 = (0.5 / (((_1928 * ((_2154 * _2177) + _2140)) + 9.9999999392252902907785028219223e-09) + (((_1928 * _2177) + _2140) * _2154))) * _2154;
        float _4247 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
        float _2189 = (isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * (_2163 / ((_2167 * _2167) * 3.141590118408203125));
        float _2190 = isnan(1.0) ? _1775 : (isnan(_1775) ? 1.0 : min(_1775, 1.0));
        _2115 = (((_2176 * cbLight._m0[_2125].x) * _2189) * _2190) + _2051;
        _2117 = (((_2176 * cbLight._m0[_2125].y) * _2189) * _2190) + _2052;
        _2119 = (((_2176 * cbLight._m0[_2125].z) * _2189) * _2190) + _2053;
    }
    float _2225;
    float _2227;
    float _2229;
    if (_1854)
    {
        _2225 = _2115;
        _2227 = _2117;
        _2229 = _2119;
    }
    else
    {
        uint _2236 = _1760 + 3u;
        uint _2240 = _1760 + 11u;
        float _2254 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2236].w)) * _553) * 0.949999988079071044921875);
        float _2255 = _2254 * _2254;
        float _2256 = cbLight._m0[_2236].x + _291;
        float _2257 = cbLight._m0[_2236].y + _292;
        float _2258 = cbLight._m0[_2236].z + _293;
        float _2262 = inversesqrt(dot(vec3(_2256, _2257, _2258), vec3(_2256, _2257, _2258)));
        float _2263 = _2262 * _2256;
        float _2264 = _2262 * _2257;
        float _2265 = _2262 * _2258;
        float _2266 = dot(vec3(_550, _551, _552), vec3(cbLight._m0[_2236].xyz));
        float _4263 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
        float _2269 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _2270 = dot(vec3(_550, _551, _552), vec3(_2263, _2264, _2265));
        float _4274 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
        float _2273 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
        float _2274 = dot(vec3(cbLight._m0[_2236].xyz), vec3(_2263, _2264, _2265));
        float _4285 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
        float _2278 = _2255 * _2255;
        float _2282 = ((_2273 * _2273) * (_2278 + (-1.0))) + 1.0;
        float _2291 = (exp2(log2(1.0 - (isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2292 = 1.0 - _2255;
        float _2302 = (0.5 / (((_1928 * ((_2269 * _2292) + _2255)) + 9.9999999392252902907785028219223e-09) + (((_1928 * _2292) + _2255) * _2269))) * _2269;
        float _4296 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
        float _2304 = (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0))) * (_2278 / ((_2282 * _2282) * 3.141590118408203125));
        float _2305 = isnan(1.0) ? _1776 : (isnan(_1776) ? 1.0 : min(_1776, 1.0));
        _2225 = (((_2291 * cbLight._m0[_2240].x) * _2304) * _2305) + _2115;
        _2227 = (((_2291 * cbLight._m0[_2240].y) * _2304) * _2305) + _2117;
        _2229 = (((_2291 * cbLight._m0[_2240].z) * _2304) * _2305) + _2119;
    }
    float _2440;
    float _2442;
    float _2444;
    float _2446;
    float _2448;
    float _2450;
    if (_1758.y == 0u)
    {
        float _2380 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2381 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2380;
        float _2382 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2380;
        float _2383 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2380;
        uvec4 _2395 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2396 = _2395.x;
        uint _2407 = uint((float(_2395.y) * floor(float(uint(cbSceneParam._m0[85u].y * _579) / _2396))) + floor(float(uint(cbSceneParam._m0[85u].x * _578) / _2396)));
        float _2417 = (log2(_2383 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2418 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
        uint _2421 = uint(isnan(14.0) ? _2418 : (isnan(_2418) ? 14.0 : min(_2418, 14.0)));
        uvec4 _2426 = texelFetch(g_lightClusterGridBuffer, int(((_2421 << 2u) + (_2407 << 6u)) >> 2u));
        uint _2427 = _2426.x;
        uint _2428 = _2395.z;
        float _2604;
        float _2606;
        float _2608;
        float _2610;
        float _2612;
        float _2614;
        if (((((1u << ((_2428 >> 4u) & 15u)) + 4294967295u) & _2427) == 0u) || ((_2428 & 240u) == 0u))
        {
            _2604 = 0.0;
            _2606 = 0.0;
            _2608 = 0.0;
            _2610 = 0.0;
            _2612 = 0.0;
            _2614 = 0.0;
        }
        else
        {
            float _2605;
            float _2607;
            float _2609;
            float _2611;
            float _2613;
            float _2615;
            float _2780 = 0.0;
            float _2781 = 0.0;
            float _2782 = 0.0;
            float _2783 = 0.0;
            float _2784 = 0.0;
            float _2785 = 0.0;
            uint _2786 = 0u;
            uint _2795;
            bool _2796;
            for (;;)
            {
                _2795 = texelFetch(g_lightClassification, int((((_2421 << 5u) + (_2407 << 9u)) + (_2786 << 2u)) >> 2u)).x;
                _2796 = _2795 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2796)
                {
                    frontier_phi_61_pred = _2780;
                    frontier_phi_61_pred_1 = _2785;
                    frontier_phi_61_pred_2 = _2784;
                    frontier_phi_61_pred_3 = _2783;
                    frontier_phi_61_pred_4 = _2782;
                    frontier_phi_61_pred_5 = _2781;
                }
                else
                {
                    float _2904;
                    float _2905;
                    float _2906;
                    float _2907;
                    float _2908;
                    float _2909;
                    uint _2910;
                    _2904 = _2780;
                    _2905 = _2781;
                    _2906 = _2782;
                    _2907 = _2783;
                    _2908 = _2784;
                    _2909 = _2785;
                    _2910 = _2795;
                    float _2836;
                    float _2837;
                    float _2838;
                    float _2839;
                    float _2840;
                    float _2841;
                    for (;;)
                    {
                        uint _2914 = uint(findLSB(_2910)) + (_2786 << 5u);
                        uint _2911 = (_2910 + 4294967295u) & _2910;
                        uint _2916 = _2914 * 48u;
                        vec4 _2930 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2916)).x, texelFetch(g_PointLightRenderingBuffer, int(_2916 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2916 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2916 + 3u)).x));
                        uint _2936 = (_2914 * 48u) + 4u;
                        vec4 _2949 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2936)).x, texelFetch(g_PointLightRenderingBuffer, int(_2936 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2936 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2936 + 3u)).x));
                        uint _2955 = (_2914 * 48u) + 8u;
                        vec3 _2966 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2955)).x, texelFetch(g_PointLightRenderingBuffer, int(_2955 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2955 + 2u)).x));
                        float _2970 = _2930.x - _2381;
                        float _2971 = _2930.y - _2382;
                        float _2972 = _2930.z - _2383;
                        float _2973 = dot(vec3(_2970, _2971, _2972), vec3(_2970, _2971, _2972));
                        float _2976 = inversesqrt(_2973);
                        float _2977 = _2976 * _2970;
                        float _2978 = _2976 * _2971;
                        float _2979 = _2976 * _2972;
                        float _2980 = dot(vec3(_600, _603, _606), vec3(_2977, _2978, _2979));
                        float _2985 = 1.0 - (_2973 * _2930.w);
                        float _4322 = isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0));
                        float _2986 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
                        float _2987 = sqrt(_2973) * _2949.w;
                        float _2990 = 1.39999997615814208984375 / (_2987 + 1.39999997615814208984375);
                        float _2991 = _2990 * _2990;
                        float _2994 = ((1.0 - _2991) * _2980) + _2991;
                        float _2997 = _2987 * _2987;
                        float _3001 = ((isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0))) * _2986) / ((_2997 * 0.699999988079071044921875) + 1.0);
                        float _3005 = (-0.0) - _2381;
                        float _3006 = (-0.0) - _2382;
                        float _3007 = (-0.0) - _2383;
                        float _3011 = inversesqrt(dot(vec3(_3005, _3006, _3007), vec3(_3005, _3006, _3007)));
                        float _3012 = _3011 * _3005;
                        float _3013 = _3011 * _3006;
                        float _3014 = _3011 * _3007;
                        float _3022 = exp2(log2(1.0 / ((_2997 * 3.5) + 5.0)) * 0.25);
                        float _3023 = 1.0 - _668;
                        float _3030 = sqrt(1.0 - ((1.0 - (_3023 * _3023)) * (1.0 - (_3022 * _3022))));
                        float _3031 = _3030 * _3030;
                        float _3032 = _3031 * _3031;
                        float _3033 = _3012 + _2977;
                        float _3034 = _3013 + _2978;
                        float _3035 = _3014 + _2979;
                        float _3039 = inversesqrt(dot(vec3(_3033, _3034, _3035), vec3(_3033, _3034, _3035)));
                        float _3043 = dot(vec3(_600, _603, _606), vec3(_3012, _3013, _3014));
                        float _4338 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
                        float _3046 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
                        float _3047 = dot(vec3(_600, _603, _606), vec3(_3039 * _3033, _3039 * _3034, _3039 * _3035));
                        float _4349 = isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0));
                        float _3050 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
                        float _3054 = ((_3050 * _3050) * (_3032 + (-1.0))) + 1.0;
                        float _3055 = _2990 * _3031;
                        float _3056 = _3055 * _3055;
                        float _3059 = ((1.0 - _3056) * _2980) + _3056;
                        float _4360 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0));
                        float _3060 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
                        float _3061 = 1.0 - _3031;
                        float _3071 = (0.5 / (((_3060 * ((_3046 * _3061) + _3031)) + 9.9999999392252902907785028219223e-09) + (((_3060 * _3061) + _3031) * _3046))) * _3060;
                        float _4371 = isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0));
                        float _3082 = (((_3032 * 3.1415927410125732421875) * (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0)))) / ((_3054 * _3054) * ((_2997 * 2.1991131305694580078125) + 3.141590118408203125))) * _2986;
                        _2839 = (_3001 * _2949.x) + _2907;
                        _2840 = (_3001 * _2949.y) + _2908;
                        _2841 = (_3001 * _2949.z) + _2909;
                        _2836 = (_3082 * _2966.x) + _2904;
                        _2837 = (_3082 * _2966.y) + _2905;
                        _2838 = (_3082 * _2966.z) + _2906;
                        if (_2911 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2904 = _2836;
                            _2905 = _2837;
                            _2906 = _2838;
                            _2907 = _2839;
                            _2908 = _2840;
                            _2909 = _2841;
                            _2910 = _2911;
                        }
                    }
                    frontier_phi_61_pred = _2836;
                    frontier_phi_61_pred_1 = _2841;
                    frontier_phi_61_pred_2 = _2840;
                    frontier_phi_61_pred_3 = _2839;
                    frontier_phi_61_pred_4 = _2838;
                    frontier_phi_61_pred_5 = _2837;
                }
                _2605 = frontier_phi_61_pred;
                _2615 = frontier_phi_61_pred_1;
                _2613 = frontier_phi_61_pred_2;
                _2611 = frontier_phi_61_pred_3;
                _2609 = frontier_phi_61_pred_4;
                _2607 = frontier_phi_61_pred_5;
                uint _2787 = _2786 + 1u;
                if (_2787 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2780 = _2605;
                    _2781 = _2607;
                    _2782 = _2609;
                    _2783 = _2611;
                    _2784 = _2613;
                    _2785 = _2615;
                    _2786 = _2787;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2604 = _2605;
            _2606 = _2607;
            _2608 = _2609;
            _2610 = _2611;
            _2612 = _2613;
            _2614 = _2615;
        }
        uvec4 _2618 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2619 = _2618.z;
        uint _2621 = (_2619 >> 8u) & 15u;
        float _2748;
        float _2750;
        float _2752;
        float _2754;
        float _2756;
        float _2758;
        if (((4294967295u << _2621) & _2427) == 0u)
        {
            _2748 = _2604;
            _2750 = _2606;
            _2752 = _2608;
            _2754 = _2610;
            _2756 = _2612;
            _2758 = _2614;
        }
        else
        {
            float _2773 = inversesqrt(dot(vec3(_2381, _2382, _2383), vec3(_2381, _2382, _2383)));
            float _2774 = _2773 * _2381;
            float _2775 = _2773 * _2382;
            float _2776 = _2773 * _2383;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2621 < ((_2619 >> 12u) & 15u))
            {
                float _2749;
                float _2751;
                float _2753;
                float _2755;
                float _2757;
                float _2759;
                float _2887 = _2604;
                float _2888 = _2606;
                float _2889 = _2608;
                float _2890 = _2610;
                float _2891 = _2612;
                float _2892 = _2614;
                uint _2893 = _2621;
                uint _2902;
                bool _2903;
                for (;;)
                {
                    _2902 = texelFetch(g_lightClassification, int((((_2421 << 5u) + (_2407 << 9u)) + (_2893 << 2u)) >> 2u)).x;
                    _2903 = _2902 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2903)
                    {
                        frontier_phi_67_pred = _2890;
                        frontier_phi_67_pred_1 = _2891;
                        frontier_phi_67_pred_2 = _2892;
                        frontier_phi_67_pred_3 = _2889;
                        frontier_phi_67_pred_4 = _2888;
                        frontier_phi_67_pred_5 = _2887;
                    }
                    else
                    {
                        float _3087;
                        float _3088;
                        float _3089;
                        float _3090;
                        float _3091;
                        float _3092;
                        float _3383;
                        float _3384;
                        float _3385;
                        float _3386;
                        float _3387;
                        float _3388;
                        float _3100 = _2887;
                        float _3101 = _2888;
                        float _3102 = _2889;
                        float _3103 = _2890;
                        float _3104 = _2891;
                        float _3105 = _2892;
                        uint _3106 = _2902;
                        uint _3107;
                        vec4 _3132;
                        float _3133;
                        vec4 _3148;
                        vec3 _3160;
                        vec4 _3176;
                        vec4 _3192;
                        float _3239;
                        bool _3240;
                        for (;;)
                        {
                            uint _3117 = ((_2893 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3106));
                            _3107 = (_3106 + 4294967295u) & _3106;
                            uint _3119 = _3117 * 40u;
                            _3132 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3119)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 3u)).x));
                            _3133 = _3132.w;
                            uint _3135 = (_3117 * 40u) + 4u;
                            _3148 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3135)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 3u)).x));
                            uint _3150 = (_3117 * 40u) + 8u;
                            _3160 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3150)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 2u)).x));
                            uint _3163 = (_3117 * 40u) + 16u;
                            _3176 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3163)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 3u)).x));
                            uint _3179 = (_3117 * 40u) + 20u;
                            _3192 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3179)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 3u)).x));
                            uint _3195 = (_3117 * 40u) + 24u;
                            vec4 _3208 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3195)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 3u)).x));
                            uint _3214 = (_3117 * 40u) + 28u;
                            vec4 _3227 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3214)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 3u)).x));
                            _3239 = fma(_2383, _3227.z, fma(_2382, _3227.y, _3227.x * _2381)) + _3227.w;
                            _3240 = !((fma(_2383, _3208.z, fma(_2382, _3208.y, _3208.x * _2381)) + _3208.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3240)
                            {
                                float _3267 = _3132.x - _2381;
                                float _3268 = _3132.y - _2382;
                                float _3269 = _3132.z - _2383;
                                float _3270 = dot(vec3(_3267, _3268, _3269), vec3(_3267, _3268, _3269));
                                float _3273 = inversesqrt(_3270);
                                float _3274 = _3273 * _3267;
                                float _3275 = _3273 * _3268;
                                float _3276 = _3273 * _3269;
                                float _3280 = 1.0 - (_3270 / (_3133 * _3133));
                                float _4382 = isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0));
                                float _3281 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
                                float _3285 = sqrt(_3270) * _3148.w;
                                float _3287 = 1.39999997615814208984375 / (_3285 + 1.39999997615814208984375);
                                float _3288 = _3287 * _3287;
                                float _3291 = ((1.0 - _3288) * dot(vec3(_3274, _3275, _3276), vec3(_600, _603, _606))) + _3288;
                                float _3294 = _3285 * _3285;
                                float _3298 = (fma(_2383, _3176.z, fma(_2382, _3176.y, _3176.x * _2381)) + _3176.w) / _3239;
                                float _3299 = (fma(_2383, _3192.z, fma(_2382, _3192.y, _3192.x * _2381)) + _3192.w) / _3239;
                                float _3303 = 1.0 - dot(vec2(_3298, _3299), vec2(_3298, _3299));
                                float _4398 = isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0));
                                float _3304 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
                                float _3305 = _3304 * (((isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0))) * _3281) / ((_3294 * 0.699999988079071044921875) + 1.0));
                                float _3317 = exp2(log2(1.0 / ((_3294 * 3.5) + 5.0)) * 0.25);
                                float _3318 = 1.0 - _668;
                                float _3325 = sqrt(1.0 - ((1.0 - (_3318 * _3318)) * (1.0 - (_3317 * _3317))));
                                float _3326 = _3325 * _3325;
                                float _3327 = _3326 * _3326;
                                float _3328 = _3274 - _2774;
                                float _3329 = _3275 - _2775;
                                float _3330 = _3276 - _2776;
                                float _3334 = inversesqrt(dot(vec3(_3328, _3329, _3330), vec3(_3328, _3329, _3330)));
                                float _3338 = dot(vec3(_600, _603, _606), vec3((-0.0) - _2774, (-0.0) - _2775, (-0.0) - _2776));
                                float _4409 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0));
                                float _3341 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
                                float _3342 = dot(vec3(_600, _603, _606), vec3(_3334 * _3328, _3334 * _3329, _3334 * _3330));
                                float _4420 = isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0));
                                float _3345 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
                                float _3349 = ((_3345 * _3345) * (_3327 + (-1.0))) + 1.0;
                                float _3350 = _3287 * _3326;
                                float _3351 = _3350 * _3350;
                                float _3357 = ((1.0 - _3351) * dot(vec3(_600, _603, _606), vec3(_3274, _3275, _3276))) + _3351;
                                float _4431 = isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0));
                                float _3358 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
                                float _3359 = 1.0 - _3326;
                                float _3369 = (0.5 / (((_3358 * ((_3341 * _3359) + _3326)) + 9.9999999392252902907785028219223e-09) + (((_3358 * _3359) + _3326) * _3341))) * _3358;
                                float _4442 = isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0));
                                float _3379 = (_3304 * _3281) * (((_3327 * 3.1415927410125732421875) * (isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0)))) / ((_3349 * _3349) * ((_3294 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3379 * _3160.x;
                                frontier_phi_73_pred_1 = _3379 * _3160.y;
                                frontier_phi_73_pred_2 = _3305 * _3148.z;
                                frontier_phi_73_pred_3 = _3305 * _3148.y;
                                frontier_phi_73_pred_4 = _3305 * _3148.x;
                                frontier_phi_73_pred_5 = _3379 * _3160.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3383 = frontier_phi_73_pred;
                            _3384 = frontier_phi_73_pred_1;
                            _3388 = frontier_phi_73_pred_2;
                            _3387 = frontier_phi_73_pred_3;
                            _3386 = frontier_phi_73_pred_4;
                            _3385 = frontier_phi_73_pred_5;
                            _3090 = _3386 + _3103;
                            _3091 = _3387 + _3104;
                            _3092 = _3388 + _3105;
                            _3087 = _3383 + _3100;
                            _3088 = _3384 + _3101;
                            _3089 = _3385 + _3102;
                            if (_3107 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3100 = _3087;
                                _3101 = _3088;
                                _3102 = _3089;
                                _3103 = _3090;
                                _3104 = _3091;
                                _3105 = _3092;
                                _3106 = _3107;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3090;
                        frontier_phi_67_pred_1 = _3091;
                        frontier_phi_67_pred_2 = _3092;
                        frontier_phi_67_pred_3 = _3089;
                        frontier_phi_67_pred_4 = _3088;
                        frontier_phi_67_pred_5 = _3087;
                    }
                    _2755 = frontier_phi_67_pred;
                    _2757 = frontier_phi_67_pred_1;
                    _2759 = frontier_phi_67_pred_2;
                    _2753 = frontier_phi_67_pred_3;
                    _2751 = frontier_phi_67_pred_4;
                    _2749 = frontier_phi_67_pred_5;
                    uint _2894 = _2893 + 1u;
                    if (_2894 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2887 = _2749;
                        _2888 = _2751;
                        _2889 = _2753;
                        _2890 = _2755;
                        _2891 = _2757;
                        _2892 = _2759;
                        _2893 = _2894;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2757;
                frontier_phi_55_56_ladder_1 = _2759;
                frontier_phi_55_56_ladder_2 = _2755;
                frontier_phi_55_56_ladder_3 = _2753;
                frontier_phi_55_56_ladder_4 = _2751;
                frontier_phi_55_56_ladder_5 = _2749;
            }
            else
            {
                frontier_phi_55_56_ladder = _2612;
                frontier_phi_55_56_ladder_1 = _2614;
                frontier_phi_55_56_ladder_2 = _2610;
                frontier_phi_55_56_ladder_3 = _2608;
                frontier_phi_55_56_ladder_4 = _2606;
                frontier_phi_55_56_ladder_5 = _2604;
            }
            _2748 = frontier_phi_55_56_ladder_5;
            _2750 = frontier_phi_55_56_ladder_4;
            _2752 = frontier_phi_55_56_ladder_3;
            _2754 = frontier_phi_55_56_ladder_2;
            _2756 = frontier_phi_55_56_ladder;
            _2758 = frontier_phi_55_56_ladder_1;
        }
        float _2763 = isnan(1.0) ? _644 : (isnan(_644) ? 1.0 : min(_644, 1.0));
        _2440 = (_2763 * _2754) + _1892;
        _2442 = (_2763 * _2756) + _1894;
        _2444 = (_2763 * _2758) + _1896;
        _2446 = ((_2748 * 0.039999999105930328369140625) * _2763) + _2225;
        _2448 = ((_2750 * 0.039999999105930328369140625) * _2763) + _2227;
        _2450 = ((_2752 * 0.039999999105930328369140625) * _2763) + _2229;
    }
    else
    {
        _2440 = _1892;
        _2442 = _1894;
        _2444 = _1896;
        _2446 = _2225;
        _2448 = _2227;
        _2450 = _2229;
    }
    float _2470 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2471 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2472 = cbSceneParam._m0[86u].x * ((_578 / cbSceneParam._m0[86u].x) + ((_667 * cbMtdParam._m0[13u].z) * dot(vec3(_550, _551, _552), vec3(_199, _200, _201))));
    float _2473 = isnan(_2470) ? _2472 : (isnan(_2472) ? _2470 : min(_2472, _2470));
    float _2474 = isnan(_2471) ? _579 : (isnan(_579) ? _2471 : min(_579, _2471));
    vec4 _2476 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2473, _2474), 0.0);
    float _2478 = _2476.x;
    bool _2499 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2478)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2478))) > _572;
    vec4 _2503 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2499 ? _2473 : _578, _2499 ? _2474 : _579));
    float _4468 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _4479 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _4490 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _2527 = 0.959999978542327880859375 - (exp2(log2(1.0 - _659) * 5.0) * 0.959999978542327880859375);
    float _2529 = (_2503.x * _2527) * cbSceneParam._m0[72u].w;
    float _2531 = (_2503.y * _2527) * cbSceneParam._m0[72u].w;
    float _2533 = (_2503.z * _2527) * cbSceneParam._m0[72u].w;
    float _2554 = _578 / cbSceneParam._m0[86u].x;
    float _2555 = _579 / cbSceneParam._m0[86u].y;
    vec4 _2569 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2554, _2555, (log2((isnan(cbSceneParam._m0[77u].w) ? _572 : (isnan(_572) ? cbSceneParam._m0[77u].w : min(_572, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2571 = _2569.x;
    float _2572 = _2569.y;
    float _2573 = _2569.z;
    float _2574 = _2569.w;
    float _2666;
    float _2668;
    float _2670;
    float _2672;
    if (_572 > cbSceneParam._m0[78u].w)
    {
        float _2629 = isnan(_572) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _572 : min(cbSceneParam._m0[80u].w, _572));
        float _2630 = _2629 / _572;
        float _2641 = _2630 * _270;
        float _2642 = _271 * _2630;
        float _2643 = (-0.0) - _2642;
        float _2644 = _2630 * _272;
        float _2646 = (cbSceneParam._m0[77u].w * _2643) / _2629;
        float _2647 = _2646 + cbSceneParam._m0[79u].w;
        float _2648 = cbSceneParam._m0[79u].w - _2642;
        float _2654 = sqrt(((_2641 * _2641) + (_2642 * _2642)) + (_2644 * _2644));
        float _2657 = (1.0 - (cbSceneParam._m0[77u].w / _2629)) * _2654;
        float _2662 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2664 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2849;
        if (abs((_2643 - _2646) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2849 = ((((_2647 > 0.0) ? exp2(_2662 * _2647) : (2.0 - exp2(_2664 * _2647))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2657;
        }
        else
        {
            float _2809 = 1.0 / cbSceneParam._m0[80u].x;
            float _2810 = isnan(_2648) ? _2647 : (isnan(_2647) ? _2648 : max(_2647, _2648));
            float _2811 = isnan(_2648) ? _2647 : (isnan(_2647) ? _2648 : min(_2647, _2648));
            float _2820 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : min(_2810, 0.0));
            float _2821 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : min(_2811, 0.0));
            _2849 = ((abs(_2654 / _2643) * cbSceneParam._m0[80u].y) * ((((_2820 - _2821) * 2.0) - ((exp2(_2662 * (isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0)))) - exp2(_2662 * (isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0))))) * _2809)) - ((exp2(_2664 * _2820) - exp2(_2664 * _2821)) * _2809))) + (_2657 * cbSceneParam._m0[80u].z);
        }
        vec4 _2851 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2554, _2555, 1.0), 0.0);
        float _2860 = exp2((_2849 * (-1.44269502162933349609375)) * (1.0 - _2851.w));
        float _2861 = log2(_2860);
        float _2877 = log2(_2574);
        _2666 = (exp2(_2877 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2861 * cbSceneParam._m0[78u].x)) * _2851.x) / cbSceneParam._m0[78u].x)) + _2571;
        _2668 = (exp2(_2877 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2861 * cbSceneParam._m0[78u].y)) * _2851.y) / cbSceneParam._m0[78u].y)) + _2572;
        _2670 = (exp2(_2877 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2861 * cbSceneParam._m0[78u].z)) * _2851.z) / cbSceneParam._m0[78u].z)) + _2573;
        _2672 = _2860 * _2574;
    }
    else
    {
        _2666 = _2571;
        _2668 = _2572;
        _2670 = _2573;
        _2672 = _2574;
    }
    bool _2684 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
    float _2685 = log2(_2672);
    float _2692 = exp2(_2685 * cbSceneParam._m0[78u].x) * ((_2529 + (((((_1666 * _1714.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0))) * _1457) * _1730)) + _2446) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * (_2440 + ((isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0))) * _644))) - _2529) * _535));
    float _2693 = exp2(_2685 * cbSceneParam._m0[78u].y) * ((_2531 + (((((_1666 * _1714.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0))) * _1457) * _1730)) + _2448) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0))) * (_2442 + ((isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0))) * _644))) - _2531) * _535));
    float _2694 = exp2(_2685 * cbSceneParam._m0[78u].z) * ((_2533 + (((((_1666 * _1714.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0))) * _1457) * _1730)) + _2450) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0))) * (_2444 + ((isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0))) * _644))) - _2533) * _535));
    vec4 _2702 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_578, _579));
    float _2704 = _2702.x;
    float _2725 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2704)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2704))) - _572) * 3.0;
    float _4541 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
    float _2727 = (isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0))) * cbInstanceData._m0[_619 + 6u].w;
    float _2736 = (roundEven(cbMatDynParam._m0[0u].y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2736 * (_2684 ? _2692 : (_2692 + (cbSceneParam._m0[72u].w * _2666)));
    SV_Target.y = _2736 * (_2684 ? _2693 : (_2693 + (cbSceneParam._m0[72u].w * _2668)));
    SV_Target.z = _2736 * (_2684 ? _2694 : (_2694 + (cbSceneParam._m0[72u].w * _2670)));
    SV_Target.w = _2727;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2727;
}


