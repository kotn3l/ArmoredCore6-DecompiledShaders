#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Ice_Ov_N_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Ice_Ov_N_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Ice_Ov_N_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Ice_Ov_N_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Ice_Ov_N_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1069;
float _3871;
float _3872;
float _3873;
float _3874;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _205 = _204 * _196;
    float _206 = _204 * _197;
    float _207 = _204 * _198;
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _212 = _211 * NORMAL.x;
    float _213 = _211 * NORMAL.y;
    float _214 = _211 * NORMAL.z;
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _219 = _218 * TANGENT.x;
    float _220 = _218 * TANGENT.y;
    float _221 = _218 * TANGENT.z;
    float _254 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _258 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _262 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _266 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _276 = cbSceneParam._m0[71u].x - (_254 / _266);
    float _277 = cbSceneParam._m0[71u].y - (_258 / _266);
    float _278 = cbSceneParam._m0[71u].z - (_262 / _266);
    float _296 = inversesqrt(dot(vec3(_276, _277, _278), vec3(_276, _277, _278)));
    float _297 = _296 * _276;
    float _298 = _296 * _277;
    float _299 = _296 * _278;
    float _303 = inversesqrt(dot(vec3(_212, _213, _214), vec3(_212, _213, _214)));
    float _307 = dot(vec4(_297, _298, _299, 0.0), vec4(_303 * _212, _303 * _213, _303 * _214, 0.0));
    float _3883 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _315 = exp2(log2(1.0 - (isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0)))) * cbMtdParam._m0[12u].z);
    float _3894 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _316 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
    float _323 = (_316 * (cbMtdParam._m0[11u].x - cbMtdParam._m0[10u].x)) + cbMtdParam._m0[10u].x;
    float _324 = (_316 * (cbMtdParam._m0[11u].y - cbMtdParam._m0[10u].y)) + cbMtdParam._m0[10u].y;
    float _325 = (_316 * (cbMtdParam._m0[11u].z - cbMtdParam._m0[10u].z)) + cbMtdParam._m0[10u].z;
    vec4 _344 = texture(sampler2D(M_Ice_Ov_N_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _352 = (_344.x * 2.0) + (-1.0);
    float _354 = (_344.y * 2.0) + (-1.0);
    float _355 = dot(vec2(_352, _354), vec2(_352, _354));
    float _3905 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _360 = sqrt(1.0 - (isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0))));
    float _363 = fma(_360, _212, fma(_354, _219, _352 * _205));
    float _366 = fma(_360, _213, fma(_354, _220, _352 * _206));
    float _369 = fma(_360, _214, fma(_354, _221, _352 * _207));
    float _373 = inversesqrt(dot(vec3(_363, _366, _369), vec3(_363, _366, _369)));
    float _384 = cbMtdParam._m0[13u].y + dot(vec4(_373 * _363, _373 * _366, _373 * _369, 0.0), vec4(cbMtdParam._m0[14u].yzw, 0.0));
    float _3916 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _386 = (isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))) * TEXCOORD_3.x;
    float _3927 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _387 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
    vec4 _399 = texture(sampler2D(M_Ice_Ov_N_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _418 = (((cbMtdParam._m0[9u].x * _399.x) - _323) * _387) + _323;
    float _419 = (((cbMtdParam._m0[9u].y * _399.y) - _324) * _387) + _324;
    float _420 = (((cbMtdParam._m0[9u].z * _399.z) - _325) * _387) + _325;
    float _425 = ((cbMtdParam._m0[14u].x - cbMtdParam._m0[12u].x) * _387) + cbMtdParam._m0[12u].x;
    float _427 = abs(_212);
    float _428 = abs(_213);
    float _429 = abs(_214);
    float _430 = _427 * _427;
    float _431 = _428 * _428;
    float _432 = _429 * _429;
    float _435 = _258 * 0.0500000007450580596923828125;
    float _446 = (cbTextureTilingScale._m0[4u].x * (_254 * 0.0500000007450580596923828125)) + cbTextureTilingScale._m0[4u].z;
    vec4 _449 = texture(sampler2D(M_Ice_Ov_N_snp_0_Texture2D_9, SS_BumpMap), vec2(_446, (cbTextureTilingScale._m0[4u].y * _435) + cbTextureTilingScale._m0[4u].w));
    float _456 = (cbTextureTilingScale._m0[4u].y * (_262 * 0.0500000007450580596923828125)) + cbTextureTilingScale._m0[4u].w;
    vec4 _457 = texture(sampler2D(M_Ice_Ov_N_snp_0_Texture2D_9, SS_BumpMap), vec2(_446, _456));
    vec4 _467 = texture(sampler2D(M_Ice_Ov_N_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _435) + cbTextureTilingScale._m0[4u].z, _456));
    vec4 _494 = texture(sampler2D(M_Ice_Ov_N_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    vec4 _513 = texture(sampler2D(M_Ice_Ov_N_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _519 = (_513.x * 2.0) + (-1.0);
    float _520 = (_513.y * 2.0) + (-1.0);
    float _3938 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _521 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
    float _526 = (_521 * _521) * (3.0 - (_521 * 2.0));
    float _536 = (((((((_457.x * _431) + (_449.x * _432)) + (_467.x * _430)) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].x) + _352) + (((_526 * (((_494.x * 2.0) + (-1.0)) - _519)) + _519) * cbMtdParam._m0[12u].y);
    float _537 = (((((((_457.y * _431) + (_449.y * _432)) + (_467.y * _430)) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].x) + _354) + (((_526 * (((_494.y * 2.0) + (-1.0)) - _520)) + _520) * cbMtdParam._m0[12u].y);
    float _540 = cbMtdParam._m0[13u].w + _387;
    float _3949 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _541 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
    float _545 = fma(_360, _212, fma(_537, _219, _536 * _205));
    float _548 = fma(_360, _213, fma(_537, _220, _536 * _206));
    float _551 = fma(_360, _214, fma(_537, _221, _536 * _207));
    float _555 = inversesqrt(dot(vec3(_545, _548, _551), vec3(_545, _548, _551)));
    float _556 = _555 * _545;
    float _557 = _555 * _548;
    float _558 = _555 * _551;
    float _3960 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _559 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
    float _3971 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _3982 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _3993 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _578 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _583 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _585 = _583.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _748 = sqrt(((_276 * _276) + (_277 * _277)) + (_278 * _278));
        float _754 = (cbMatDynParam._m0[5u].x * _748) + cbMatDynParam._m0[5u].y;
        float _4004 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        float _755 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _759 = (cbMatDynParam._m0[5u].z * _748) + cbMatDynParam._m0[5u].w;
        float _4015 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) - _755)) + _755) < ((_585 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _597 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _598 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _618 = fma(_558, cbSceneParam._m0[5u].z, fma(_557, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _556));
    float _621 = fma(_558, cbSceneParam._m0[6u].z, fma(_557, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _556));
    float _624 = fma(_558, cbSceneParam._m0[7u].z, fma(_557, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _556));
    uint _637 = uint(roundEven(NORMAL.w)) * 13u;
    uint _638 = _637 + 9u;
    uint _639 = _638 + uint(cbMatDynParam._m0[0u].w);
    float _645 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0)))) * cbInstanceData._m0[_639].x;
    float _646 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0)))) * cbInstanceData._m0[_639].y;
    float _647 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0)))) * cbInstanceData._m0[_639].z;
    float _4026 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _648 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
    float _4037 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _649 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
    float _4048 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _650 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
    vec4 _659 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _597, cbSceneParam._m0[86u].y * _598));
    float _662 = _659.x * TEXCOORD_3.w;
    float _663 = dot(vec3(_556, _557, _558), vec3(_297, _298, _299));
    float _666 = _663 * 2.0;
    float _670 = (_666 * _556) - _297;
    float _671 = (_666 * _557) - _298;
    float _672 = (_666 * _558) - _299;
    float _676 = abs(dot(vec3(_297, _298, _299), vec3(_556, _557, _558)));
    float _4059 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _677 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
    float _685 = 10.0 / (_578 + 10.0);
    float _686 = sqrt(_559);
    float _697 = exp2((_686 * 5.0) * log2(1.0 - (_677 * 0.999000012874603271484375))) / (4.0 - (_686 * 3.0));
    float _729 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _733 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _737 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1068;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _793 = fma(_737, cbModelParam._m0[26u].z, fma(_733, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _729));
        float _797 = fma(_737, cbModelParam._m0[27u].z, fma(_733, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _729));
        float _801 = fma(_737, cbModelParam._m0[28u].z, fma(_733, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _729));
        float _826 = _729 + _556;
        float _827 = _733 + _557;
        float _828 = _737 + _558;
        float _838 = fma(_828, cbModelParam._m0[26u].z, fma(_827, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _826)) - _793;
        float _839 = fma(_828, cbModelParam._m0[27u].z, fma(_827, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _826)) - _797;
        float _840 = fma(_828, cbModelParam._m0[28u].z, fma(_827, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _826)) - _801;
        float _844 = inversesqrt(dot(vec3(_838, _839, _840), vec3(_838, _839, _840)));
        float _857 = ((_844 * _838) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_793 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _858 = ((_844 * _839) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_797 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _859 = ((_844 * _840) / cbModelParam._m0[34u].z) + ((((((_801 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _862 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_857, _858, _859), 0.0);
        vec4 _869 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_857, _858, _859), 0.0);
        vec4 _876 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_857, _858, _859), 0.0);
        vec4 _883 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_857, _858, _859), 0.0);
        float _896 = exp2((_862.w + (-0.5)) * 20.0) * 2.0;
        float _897 = _896 * (_862.x + (-0.5));
        float _898 = _896 * (_862.y + (-0.5));
        float _899 = _896 * (_862.z + (-0.5));
        float _906 = exp2((_869.w + (-0.5)) * 20.0) * 2.0;
        float _907 = _906 * (_869.x + (-0.5));
        float _908 = _906 * (_869.y + (-0.5));
        float _909 = _906 * (_869.z + (-0.5));
        float _916 = exp2((_876.w + (-0.5)) * 20.0) * 2.0;
        float _917 = _916 * (_876.x + (-0.5));
        float _918 = _916 * (_876.y + (-0.5));
        float _919 = _916 * (_876.z + (-0.5));
        float _926 = exp2((_883.w + (-0.5)) * 20.0) * 2.0;
        float _927 = _926 * (_883.x + (-0.5));
        float _928 = _926 * (_883.y + (-0.5));
        float _929 = _926 * (_883.z + (-0.5));
        float _930 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _931 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _932 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _933 = _897 * 0.5;
        float _934 = _907 * 0.5;
        float _935 = _917 * 0.5;
        float _936 = dot(vec3(_933, _934, _935), vec3(_933, _934, _935));
        float _941 = (_936 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_936);
        float _950 = (dot(vec3(_556, _557, _558), vec3(_941 * _933, _941 * _934, _941 * _935)) + 1.0) * 0.5;
        float _4085 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _960 = sqrt(((_934 * _934) + (_933 * _933)) + (_935 * _935)) / (_930 + 9.9999997473787516355514526367188e-06);
        float _4096 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _961 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _962 = _961 * 2.0;
        float _966 = (1.0 - _961) / (_961 + 1.0);
        float _4107 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _967 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
        float _976 = ((((1.0 - _967) * (_962 + 2.0)) * exp2(log2(isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0))) * (_962 + 1.0))) + _967) * _930;
        float _977 = _898 * 0.5;
        float _978 = _908 * 0.5;
        float _979 = _918 * 0.5;
        float _980 = dot(vec3(_977, _978, _979), vec3(_977, _978, _979));
        float _985 = (_980 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_980);
        float _993 = (dot(vec3(_556, _557, _558), vec3(_985 * _977, _985 * _978, _985 * _979)) + 1.0) * 0.5;
        float _4118 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _1002 = sqrt(((_978 * _978) + (_977 * _977)) + (_979 * _979)) / (_931 + 9.9999997473787516355514526367188e-06);
        float _4129 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1003 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _1004 = _1003 * 2.0;
        float _1008 = (1.0 - _1003) / (_1003 + 1.0);
        float _4140 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1009 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _1018 = ((((1.0 - _1009) * (_1004 + 2.0)) * exp2(log2(isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))) * (_1004 + 1.0))) + _1009) * _931;
        float _1019 = _899 * 0.5;
        float _1020 = _909 * 0.5;
        float _1021 = _919 * 0.5;
        float _1022 = dot(vec3(_1019, _1020, _1021), vec3(_1019, _1020, _1021));
        float _1027 = (_1022 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1022);
        float _1035 = (dot(vec3(_556, _557, _558), vec3(_1027 * _1019, _1027 * _1020, _1027 * _1021)) + 1.0) * 0.5;
        float _4151 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1044 = sqrt(((_1020 * _1020) + (_1019 * _1019)) + (_1021 * _1021)) / (_932 + 9.9999997473787516355514526367188e-06);
        float _4162 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1045 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1046 = _1045 * 2.0;
        float _1050 = (1.0 - _1045) / (_1045 + 1.0);
        float _4173 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1051 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _1060 = ((((1.0 - _1051) * (_1046 + 2.0)) * exp2(log2(isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * (_1046 + 1.0))) + _1051) * _932;
        _1068 = _899;
        _1070 = _898;
        _1071 = _897;
        _1072 = _909;
        _1073 = _908;
        _1074 = _907;
        _1075 = _919;
        _1076 = _918;
        _1077 = _917;
        _1078 = _932;
        _1079 = _931;
        _1080 = _930;
        _1081 = cbModelParam._m0[36u].z * (isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0)));
        _1082 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0)));
        _1083 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0)));
    }
    else
    {
        _1068 = _1069;
        _1070 = _1069;
        _1071 = _1069;
        _1072 = _1069;
        _1073 = _1069;
        _1074 = _1069;
        _1075 = _1069;
        _1076 = _1069;
        _1077 = _1069;
        _1078 = _1069;
        _1079 = _1069;
        _1080 = _1069;
        _1081 = 0.0;
        _1082 = 0.0;
        _1083 = 0.0;
    }
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1112 = fma(_737, cbModelParam._m0[30u].z, fma(_733, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _729));
        float _1116 = fma(_737, cbModelParam._m0[31u].z, fma(_733, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _729));
        float _1120 = fma(_737, cbModelParam._m0[32u].z, fma(_733, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _729));
        float _1143 = _729 + _556;
        float _1144 = _733 + _557;
        float _1145 = _737 + _558;
        float _1155 = fma(_1145, cbModelParam._m0[30u].z, fma(_1144, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1143)) - _1112;
        float _1156 = fma(_1145, cbModelParam._m0[31u].z, fma(_1144, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1143)) - _1116;
        float _1157 = fma(_1145, cbModelParam._m0[32u].z, fma(_1144, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1143)) - _1120;
        float _1161 = inversesqrt(dot(vec3(_1155, _1156, _1157), vec3(_1155, _1156, _1157)));
        float _1174 = ((_1161 * _1155) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1112 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1175 = ((_1161 * _1156) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1116 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1176 = ((_1161 * _1157) / cbModelParam._m0[35u].z) + ((((((_1120 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1178 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1174, _1175, _1176), 0.0);
        vec4 _1185 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1174, _1175, _1176), 0.0);
        vec4 _1192 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1174, _1175, _1176), 0.0);
        vec4 _1199 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1174, _1175, _1176), 0.0);
        float _1211 = exp2((_1178.w + (-0.5)) * 20.0) * 2.0;
        float _1212 = _1211 * (_1178.x + (-0.5));
        float _1213 = _1211 * (_1178.y + (-0.5));
        float _1214 = _1211 * (_1178.z + (-0.5));
        float _1221 = exp2((_1185.w + (-0.5)) * 20.0) * 2.0;
        float _1222 = _1221 * (_1185.x + (-0.5));
        float _1223 = _1221 * (_1185.y + (-0.5));
        float _1224 = _1221 * (_1185.z + (-0.5));
        float _1231 = exp2((_1192.w + (-0.5)) * 20.0) * 2.0;
        float _1232 = _1231 * (_1192.x + (-0.5));
        float _1233 = _1231 * (_1192.y + (-0.5));
        float _1234 = _1231 * (_1192.z + (-0.5));
        float _1241 = exp2((_1199.w + (-0.5)) * 20.0) * 2.0;
        float _1242 = _1241 * (_1199.x + (-0.5));
        float _1243 = _1241 * (_1199.y + (-0.5));
        float _1244 = _1241 * (_1199.z + (-0.5));
        float _1245 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1246 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1247 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1248 = _1212 * 0.5;
        float _1249 = _1222 * 0.5;
        float _1250 = _1232 * 0.5;
        float _1251 = dot(vec3(_1248, _1249, _1250), vec3(_1248, _1249, _1250));
        float _1256 = (_1251 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1251);
        float _1264 = (dot(vec3(_556, _557, _558), vec3(_1256 * _1248, _1256 * _1249, _1256 * _1250)) + 1.0) * 0.5;
        float _4214 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1273 = sqrt(((_1249 * _1249) + (_1248 * _1248)) + (_1250 * _1250)) / (_1245 + 9.9999997473787516355514526367188e-06);
        float _4225 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _1275 = _1274 * 2.0;
        float _1279 = (1.0 - _1274) / (_1274 + 1.0);
        float _4236 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
        float _1289 = ((((1.0 - _1280) * (_1275 + 2.0)) * exp2(log2(isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) * (_1275 + 1.0))) + _1280) * _1245;
        float _1290 = _1213 * 0.5;
        float _1291 = _1223 * 0.5;
        float _1292 = _1233 * 0.5;
        float _1293 = dot(vec3(_1290, _1291, _1292), vec3(_1290, _1291, _1292));
        float _1298 = (_1293 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1293);
        float _1306 = (dot(vec3(_556, _557, _558), vec3(_1298 * _1290, _1298 * _1291, _1298 * _1292)) + 1.0) * 0.5;
        float _4247 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1315 = sqrt(((_1291 * _1291) + (_1290 * _1290)) + (_1292 * _1292)) / (_1246 + 9.9999997473787516355514526367188e-06);
        float _4258 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _1317 = _1316 * 2.0;
        float _1321 = (1.0 - _1316) / (_1316 + 1.0);
        float _4269 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _1331 = ((((1.0 - _1322) * (_1317 + 2.0)) * exp2(log2(isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * (_1317 + 1.0))) + _1322) * _1246;
        float _1332 = _1214 * 0.5;
        float _1333 = _1224 * 0.5;
        float _1334 = _1234 * 0.5;
        float _1335 = dot(vec3(_1332, _1333, _1334), vec3(_1332, _1333, _1334));
        float _1340 = (_1335 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1335);
        float _1348 = (dot(vec3(_556, _557, _558), vec3(_1340 * _1332, _1340 * _1333, _1340 * _1334)) + 1.0) * 0.5;
        float _4280 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1357 = sqrt(((_1333 * _1333) + (_1332 * _1332)) + (_1334 * _1334)) / (_1247 + 9.9999997473787516355514526367188e-06);
        float _4291 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _1359 = _1358 * 2.0;
        float _1363 = (1.0 - _1358) / (_1358 + 1.0);
        float _4302 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1364 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _1373 = ((((1.0 - _1364) * (_1359 + 2.0)) * exp2(log2(isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * (_1359 + 1.0))) + _1364) * _1247;
        _1381 = _1214;
        _1382 = _1213;
        _1383 = _1212;
        _1384 = _1224;
        _1385 = _1223;
        _1386 = _1222;
        _1387 = _1234;
        _1388 = _1233;
        _1389 = _1232;
        _1390 = _1247;
        _1391 = _1246;
        _1392 = _1245;
        _1393 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0)));
        _1394 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0)));
        _1395 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0)));
    }
    else
    {
        _1381 = _1069;
        _1382 = _1069;
        _1383 = _1069;
        _1384 = _1069;
        _1385 = _1069;
        _1386 = _1069;
        _1387 = _1069;
        _1388 = _1069;
        _1389 = _1069;
        _1390 = _1069;
        _1391 = _1069;
        _1392 = _1069;
        _1393 = 0.0;
        _1394 = 0.0;
        _1395 = 0.0;
    }
    float _1405 = (cbModelParam._m0[1u].x * (_1393 - _1081)) + _1081;
    float _1406 = (cbModelParam._m0[1u].x * (_1394 - _1082)) + _1082;
    float _1407 = (cbModelParam._m0[1u].x * (_1395 - _1083)) + _1083;
    float _1428 = fma(_1407, cbSceneParam._m0[89u].z, fma(_1406, cbSceneParam._m0[89u].y, _1405 * cbSceneParam._m0[89u].x));
    float _1431 = fma(_1407, cbSceneParam._m0[90u].z, fma(_1406, cbSceneParam._m0[90u].y, _1405 * cbSceneParam._m0[90u].x));
    float _1434 = fma(_1407, cbSceneParam._m0[91u].z, fma(_1406, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1405));
    float _1449 = _670 * 0.5;
    float _1450 = _671 * 0.5;
    float _1451 = _672 * 0.5;
    float _1452 = dot(vec4(_1449, _1450, _1451, 1.0), vec4(_1383, _1386, _1389, _1392));
    float _1455 = dot(vec4(_1449, _1450, _1451, 1.0), vec4(_1382, _1385, _1388, _1391));
    float _1458 = dot(vec4(_1449, _1450, _1451, 1.0), vec4(_1381, _1384, _1387, _1390));
    float _1492;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1465 = dot(vec4(_1449, _1450, _1451, 1.0), vec4(_1068, _1072, _1075, _1078));
        float _1469 = dot(vec4(_1449, _1450, _1451, 1.0), vec4(_1070, _1073, _1076, _1079));
        float _1473 = dot(vec4(_1449, _1450, _1451, 1.0), vec4(_1071, _1074, _1077, _1080));
        float _1480 = dot(vec4(cbModelParam._m0[39u]), vec4(_1449, _1450, _1451, 1.0));
        _1492 = dot(vec3(isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0)), isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0)), isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1480) ? 0.0 : (isnan(0.0) ? _1480 : max(0.0, _1480))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1492 = 1.0;
    }
    float _1503;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1494 = dot(vec4(cbModelParam._m0[40u]), vec4(_1449, _1450, _1451, 1.0));
        _1503 = dot(vec3(isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0)), isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0)), isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1494) ? 0.0 : (isnan(0.0) ? _1494 : max(0.0, _1494))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1503 = 1.0;
    }
    float _1507 = (_1503 * cbModelParam._m0[1u].x) + (_1492 * (1.0 - cbModelParam._m0[1u].x));
    float _1517 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _559);
    float _1518 = isnan(_1517) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1517 : min(cbModelParam._m0[25u].z, _1517));
    float _1598;
    float _1600;
    float _1602;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1565 = fma(_737, cbModelParam._m0[13u].z, fma(_733, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _729)) + cbModelParam._m0[13u].w;
        float _1569 = fma(_737, cbModelParam._m0[14u].z, fma(_733, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _729)) + cbModelParam._m0[14u].w;
        float _1573 = fma(_737, cbModelParam._m0[15u].z, fma(_733, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _729)) + cbModelParam._m0[15u].w;
        float _1576 = fma(_672, cbModelParam._m0[13u].z, fma(_671, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _670));
        float _1579 = fma(_672, cbModelParam._m0[14u].z, fma(_671, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _670));
        float _1582 = fma(_672, cbModelParam._m0[15u].z, fma(_671, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _670));
        float _1610;
        if (_1576 > 0.0)
        {
            _1610 = abs((1.0 - _1565) / _1576);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1576 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1565 + 1.0) / _1576);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1610 = frontier_phi_17_15_ladder;
        }
        float _1835;
        if (_1579 > 0.0)
        {
            _1835 = abs((1.0 - _1569) / _1579);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1579 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1569 + 1.0) / _1579);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1835 = frontier_phi_26_22_ladder;
        }
        float _2130;
        if (_1582 > 0.0)
        {
            _2130 = abs((1.0 - _1573) / _1582);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1582 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1573 + 1.0) / _1582);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2130 = frontier_phi_38_33_ladder;
        }
        float _2132 = isnan(_1835) ? _1610 : (isnan(_1610) ? _1835 : min(_1610, _1835));
        float _2133 = isnan(_2130) ? _2132 : (isnan(_2132) ? _2130 : min(_2132, _2130));
        float _2137 = (_2133 * _1576) + _1565;
        float _2138 = (_2133 * _1579) + _1569;
        float _2139 = (_2133 * _1582) + _1573;
        float _2140 = _2133 * 9.9999997473787516355514526367188e-05;
        float _2142 = (-1.0) - _2140;
        float _2144 = _2140 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2139 > _2144) || ((_2139 < _2142) || ((_2138 > _2144) || ((_2138 < _2142) || ((_2137 < _2142) || (_2137 > _2144))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2284 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2139, cbModelParam._m0[9u].z, fma(_2138, cbModelParam._m0[9u].y, _2137 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2139, cbModelParam._m0[10u].z, fma(_2138, cbModelParam._m0[10u].y, _2137 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2139, cbModelParam._m0[11u].z, fma(_2138, cbModelParam._m0[11u].y, _2137 * cbModelParam._m0[11u].x))), _1518);
            frontier_phi_16_38_ladder = _2284.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2284.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2284.x * cbModelParam._m0[1u].y;
        }
        _1598 = frontier_phi_16_38_ladder_2;
        _1600 = frontier_phi_16_38_ladder_1;
        _1602 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1586 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_670, _671, _672), _1518);
        _1598 = _1586.x * cbModelParam._m0[1u].y;
        _1600 = _1586.y * cbModelParam._m0[1u].y;
        _1602 = _1586.z * cbModelParam._m0[1u].y;
    }
    float _1606 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _559);
    float _1607 = isnan(_1606) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1606 : min(cbModelParam._m0[25u].w, _1606));
    float _1700;
    float _1702;
    float _1704;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1664 = fma(_737, cbModelParam._m0[21u].z, fma(_733, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _729)) + cbModelParam._m0[21u].w;
        float _1668 = fma(_737, cbModelParam._m0[22u].z, fma(_733, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _729)) + cbModelParam._m0[22u].w;
        float _1672 = fma(_737, cbModelParam._m0[23u].z, fma(_733, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _729)) + cbModelParam._m0[23u].w;
        float _1675 = fma(_672, cbModelParam._m0[21u].z, fma(_671, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _670));
        float _1678 = fma(_672, cbModelParam._m0[22u].z, fma(_671, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _670));
        float _1681 = fma(_672, cbModelParam._m0[23u].z, fma(_671, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _670));
        float _1840;
        if (_1675 > 0.0)
        {
            _1840 = abs((1.0 - _1664) / _1675);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1675 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1664 + 1.0) / _1675);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1840 = frontier_phi_28_24_ladder;
        }
        float _2157;
        if (_1678 > 0.0)
        {
            _2157 = abs((1.0 - _1668) / _1678);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1678 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1668 + 1.0) / _1678);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2157 = frontier_phi_40_35_ladder;
        }
        float _2484;
        if (_1681 > 0.0)
        {
            _2484 = abs((1.0 - _1672) / _1681);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1681 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1672 + 1.0) / _1681);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2484 = frontier_phi_50_47_ladder;
        }
        float _2486 = isnan(_2157) ? _1840 : (isnan(_1840) ? _2157 : min(_1840, _2157));
        float _2487 = isnan(_2484) ? _2486 : (isnan(_2486) ? _2484 : min(_2486, _2484));
        float _2491 = (_2487 * _1675) + _1664;
        float _2492 = (_2487 * _1678) + _1668;
        float _2493 = (_2487 * _1681) + _1672;
        float _2494 = _2487 * 9.9999997473787516355514526367188e-05;
        float _2495 = (-1.0) - _2494;
        float _2497 = _2494 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2493 > _2497) || ((_2493 < _2495) || ((_2492 > _2497) || ((_2492 < _2495) || ((_2491 < _2495) || (_2491 > _2497))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2611 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2493, cbModelParam._m0[17u].z, fma(_2492, cbModelParam._m0[17u].y, _2491 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2493, cbModelParam._m0[18u].z, fma(_2492, cbModelParam._m0[18u].y, _2491 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2493, cbModelParam._m0[19u].z, fma(_2492, cbModelParam._m0[19u].y, _2491 * cbModelParam._m0[19u].x))), _1607);
            frontier_phi_25_50_ladder = _2611.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2611.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2611.x * cbModelParam._m0[1u].z;
        }
        _1700 = frontier_phi_25_50_ladder_2;
        _1702 = frontier_phi_25_50_ladder_1;
        _1704 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1684 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_670, _671, _672), _1607);
        _1700 = _1684.x * cbModelParam._m0[1u].z;
        _1702 = _1684.y * cbModelParam._m0[1u].z;
        _1704 = _1684.z * cbModelParam._m0[1u].z;
    }
    float _1716 = ((((1.0 - _697) * ((_686 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_697 * _686)) * _662;
    float _1717 = _1716 * ((cbModelParam._m0[1u].w * (_1700 - _1598)) + _1598);
    float _1718 = _1716 * ((cbModelParam._m0[1u].w * (_1702 - _1600)) + _1600);
    float _1719 = _1716 * ((cbModelParam._m0[1u].w * (_1704 - _1602)) + _1602);
    float _1722 = fma(_1719, cbSceneParam._m0[89u].z, fma(_1718, cbSceneParam._m0[89u].y, _1717 * cbSceneParam._m0[89u].x));
    float _1725 = fma(_1719, cbSceneParam._m0[90u].z, fma(_1718, cbSceneParam._m0[90u].y, _1717 * cbSceneParam._m0[90u].x));
    float _1728 = fma(_1719, cbSceneParam._m0[91u].z, fma(_1718, cbSceneParam._m0[91u].y, _1717 * cbSceneParam._m0[91u].x));
    float _1739 = _597 / cbSceneParam._m0[86u].x;
    float _1747 = (cbSceneParam._m0[88u].y * (1.0 - _559)) + cbSceneParam._m0[88u].z;
    float _4428 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
    float _1749 = (isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0))) * 5.0;
    float _1754 = (_685 * cbMtdParam._m0[12u].w) * dot(vec3(_556, _557, _558), vec3(1.0, 0.0, 0.0));
    vec4 _1764 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1754 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1754 + _1739) * cbSceneParam._m0[86u].x, _598), _1749).w) + _1739) * cbSceneParam._m0[86u].x, _598), _1749);
    float _1780 = 1.0 - _1764.w;
    float _1814 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1818 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1822 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1826 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1827 = _1814 / _1826;
    float _1828 = _1818 / _1826;
    float _1829 = _1822 / _1826;
    float _1976;
    float _1977;
    float _1978;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1856 = ((uint(_1829 > cbSceneParam._m0[59u].y) + uint(_1829 > cbSceneParam._m0[59u].x)) + uint(_1829 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1857 = _1856 + 43u;
        uint _1865 = _1856 + 44u;
        uint _1873 = _1856 + 45u;
        uint _1881 = _1856 + 46u;
        float _1892 = fma(_1826, cbSceneParam._m0[_1857].w, fma(_1822, cbSceneParam._m0[_1857].z, fma(_1818, cbSceneParam._m0[_1857].y, _1814 * cbSceneParam._m0[_1857].x)));
        float _1896 = fma(_1826, cbSceneParam._m0[_1865].w, fma(_1822, cbSceneParam._m0[_1865].z, fma(_1818, cbSceneParam._m0[_1865].y, _1814 * cbSceneParam._m0[_1865].x)));
        float _1904 = fma(_1826, cbSceneParam._m0[_1881].w, fma(_1822, cbSceneParam._m0[_1881].z, fma(_1818, cbSceneParam._m0[_1881].y, _1814 * cbSceneParam._m0[_1881].x)));
        float _1909 = cbSceneParam._m0[33u].z * _1904;
        float _1911 = cbSceneParam._m0[33u].w * _1904;
        float _1914 = fma(_1826, cbSceneParam._m0[_1873].w, fma(_1822, cbSceneParam._m0[_1873].z, fma(_1818, cbSceneParam._m0[_1873].y, _1814 * cbSceneParam._m0[_1873].x))) / _1904;
        float _1962 = (cbSceneParam._m0[33u].x - sqrt(((_1828 * _1828) + (_1827 * _1827)) + (_1829 * _1829))) * cbSceneParam._m0[33u].y;
        float _4439 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
        float _1969 = (isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1909 + _1892) / _1904, (_1911 + _1896) / _1904), _1914), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1911 + _1892) / _1904, (_1896 - _1909) / _1904), _1914), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1892 - _1909) / _1904, (_1896 - _1911) / _1904), _1914), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1892 - _1911) / _1904, (_1909 + _1896) / _1904), _1914), 0.0)).x), vec4(0.25)));
        _1976 = 1.0 - (_1969 * cbSceneParam._m0[34u].x);
        _1977 = 1.0 - (_1969 * cbSceneParam._m0[34u].y);
        _1978 = 1.0 - (_1969 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1976 = 1.0;
        _1977 = 1.0;
        _1978 = 1.0;
    }
    float _2042;
    float _2044;
    float _2046;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2030 = fma(_1826, cbSceneParam._m0[63u].w, fma(_1822, cbSceneParam._m0[63u].z, fma(_1818, cbSceneParam._m0[63u].y, _1814 * cbSceneParam._m0[63u].x)));
        float _2031 = fma(_1826, cbSceneParam._m0[60u].w, fma(_1822, cbSceneParam._m0[60u].z, fma(_1818, cbSceneParam._m0[60u].y, _1814 * cbSceneParam._m0[60u].x))) / _2030;
        float _2032 = fma(_1826, cbSceneParam._m0[61u].w, fma(_1822, cbSceneParam._m0[61u].z, fma(_1818, cbSceneParam._m0[61u].y, _1814 * cbSceneParam._m0[61u].x))) / _2030;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2031 >= cbSceneParam._m0[64u].x) && (_2032 >= cbSceneParam._m0[64u].y)) && (_2031 <= cbSceneParam._m0[64u].z)) && (_2032 <= cbSceneParam._m0[64u].w))
        {
            float _2170 = fma(_1826, cbSceneParam._m0[62u].w, fma(_1822, cbSceneParam._m0[62u].z, fma(_1818, cbSceneParam._m0[62u].y, _1814 * cbSceneParam._m0[62u].x))) / _2030;
            float _2174 = isnan(cbSceneParam._m0[41u].w) ? _2170 : (isnan(_2170) ? cbSceneParam._m0[41u].w : max(_2170, cbSceneParam._m0[41u].w));
            float _2217 = (cbSceneParam._m0[33u].x - sqrt(((_1828 * _1828) + (_1827 * _1827)) + (_1829 * _1829))) * cbSceneParam._m0[33u].y;
            float _4455 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
            float _2224 = (isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2031, cbSceneParam._m0[33u].w + _2032), _2174), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2031, _2032 - cbSceneParam._m0[33u].z), _2174), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2031 - cbSceneParam._m0[33u].z, _2032 - cbSceneParam._m0[33u].w), _2174), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2031 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2032), _2174), 0.0)).x), vec4(0.25)));
            float _2228 = 1.0 - (_2224 * cbSceneParam._m0[34u].x);
            float _2229 = 1.0 - (_2224 * cbSceneParam._m0[34u].y);
            float _2230 = 1.0 - (_2224 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2230) ? _1978 : (isnan(_1978) ? _2230 : min(_1978, _2230));
            frontier_phi_37_36_ladder_1 = isnan(_2229) ? _1977 : (isnan(_1977) ? _2229 : min(_1977, _2229));
            frontier_phi_37_36_ladder_2 = isnan(_2228) ? _1976 : (isnan(_1976) ? _2228 : min(_1976, _2228));
        }
        else
        {
            frontier_phi_37_36_ladder = _1978;
            frontier_phi_37_36_ladder_1 = _1977;
            frontier_phi_37_36_ladder_2 = _1976;
        }
        _2042 = frontier_phi_37_36_ladder_2;
        _2044 = frontier_phi_37_36_ladder_1;
        _2046 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2042 = _1976;
        _2044 = _1977;
        _2046 = _1978;
    }
    uvec4 _2051 = floatBitsToUint(cbInstanceData._m0[_637 + 5u]);
    uint _2053 = _2051.x * 14u;
    uint _2054 = _2053 + 13u;
    float _2061 = _662 + (-1.0);
    float _2066 = (cbLight._m0[_2054].x * _2061) + 1.0;
    float _2067 = (cbLight._m0[_2054].y * _2061) + 1.0;
    float _2068 = (cbLight._m0[_2054].z * _2061) + 1.0;
    float _2069 = (cbLight._m0[_2054].w * _2061) + 1.0;
    uint _2070 = _2053 + 5u;
    float _2076 = isnan(1.0) ? _2067 : (isnan(_2067) ? 1.0 : min(_2067, 1.0));
    uint _2080 = _2053 + 4u;
    float _2089 = isnan(1.0) ? _2066 : (isnan(_2066) ? 1.0 : min(_2066, 1.0));
    uint _2093 = _2053 | 1u;
    float _2104 = dot(vec3(cbLight._m0[_2053].xyz), vec3(_556, _557, _558));
    float _2107 = dot(vec3(cbLight._m0[_2093].xyz), vec3(_556, _557, _558));
    float _4491 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
    float _4502 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
    float _2112 = (isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0))) * 0.3183098733425140380859375;
    float _2114 = (isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0))) * 0.3183098733425140380859375;
    float _2121 = ((cbLight._m0[_2070].x * _2076) * _2114) + (((cbLight._m0[_2080].x * _2042) * _2089) * _2112);
    float _2122 = ((_2076 * cbLight._m0[_2070].y) * _2114) + (((cbLight._m0[_2080].y * _2044) * _2089) * _2112);
    float _2123 = ((_2076 * cbLight._m0[_2070].z) * _2114) + (((cbLight._m0[_2080].z * _2046) * _2089) * _2112);
    uvec4 _2127 = floatBitsToUint(cbLight._m0[_2053 + 12u]);
    bool _2129 = _2127.x == 0u;
    float _2231;
    float _2233;
    float _2235;
    if (_2129)
    {
        _2231 = _2121;
        _2233 = _2122;
        _2235 = _2123;
    }
    else
    {
        uint _2239 = _2053 + 6u;
        float _2255 = (dot(vec3(cbLight._m0[_2053 + 2u].xyz), vec3(_556, _557, _558)) * 0.5) + 0.5;
        float _2256 = _2255 * _2255;
        float _4513 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
        float _2257 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
        float _2258 = isnan(1.0) ? _2068 : (isnan(_2068) ? 1.0 : min(_2068, 1.0));
        _2231 = (((cbLight._m0[_2239].x * 0.3183098733425140380859375) * _2257) * _2258) + _2121;
        _2233 = (((cbLight._m0[_2239].y * 0.3183098733425140380859375) * _2257) * _2258) + _2122;
        _2235 = (((cbLight._m0[_2239].z * 0.3183098733425140380859375) * _2257) * _2258) + _2123;
    }
    bool _2238 = _2127.y == 0u;
    float _2293;
    float _2295;
    float _2297;
    if (_2238)
    {
        _2293 = _2231;
        _2295 = _2233;
        _2297 = _2235;
    }
    else
    {
        uint _2455 = _2053 + 7u;
        float _2471 = (dot(vec3(cbLight._m0[_2053 + 3u].xyz), vec3(_556, _557, _558)) * 0.5) + 0.5;
        float _2472 = _2471 * _2471;
        float _4529 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
        float _2473 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
        float _2474 = isnan(1.0) ? _2069 : (isnan(_2069) ? 1.0 : min(_2069, 1.0));
        _2293 = (((cbLight._m0[_2455].x * 0.3183098733425140380859375) * _2473) * _2474) + _2231;
        _2295 = (((cbLight._m0[_2455].y * 0.3183098733425140380859375) * _2473) * _2474) + _2233;
        _2297 = (((cbLight._m0[_2455].z * 0.3183098733425140380859375) * _2473) * _2474) + _2235;
    }
    uint _2300 = _2053 + 8u;
    float _2313 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2053].w)) * _559) * 0.949999988079071044921875);
    float _2314 = _2313 * _2313;
    float _2315 = cbLight._m0[_2053].x + _297;
    float _2316 = cbLight._m0[_2053].y + _298;
    float _2317 = cbLight._m0[_2053].z + _299;
    float _2321 = inversesqrt(dot(vec3(_2315, _2316, _2317), vec3(_2315, _2316, _2317)));
    float _2322 = _2321 * _2315;
    float _2323 = _2321 * _2316;
    float _2324 = _2321 * _2317;
    float _2325 = dot(vec3(_556, _557, _558), vec3(cbLight._m0[_2053].xyz));
    float _4545 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
    float _2328 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
    float _4556 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _2329 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
    float _2330 = dot(vec3(_556, _557, _558), vec3(_2322, _2323, _2324));
    float _4567 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
    float _2333 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
    float _2334 = dot(vec3(cbLight._m0[_2053].xyz), vec3(_2322, _2323, _2324));
    float _4578 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
    float _2338 = _2314 * _2314;
    float _2342 = ((_2333 * _2333) * (_2338 + (-1.0))) + 1.0;
    float _2353 = (exp2(log2(1.0 - (isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2354 = 1.0 - _2314;
    float _2365 = (0.5 / (((_2329 * ((_2328 * _2354) + _2314)) + 9.9999999392252902907785028219223e-09) + (((_2329 * _2354) + _2314) * _2328))) * _2328;
    float _4589 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _2367 = (isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0))) * (_2338 / ((_2342 * _2342) * 3.141590118408203125));
    uint _2381 = _2053 + 9u;
    float _2392 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2093].w)) * _559) * 0.949999988079071044921875);
    float _2393 = _2392 * _2392;
    float _2394 = cbLight._m0[_2093].x + _297;
    float _2395 = cbLight._m0[_2093].y + _298;
    float _2396 = cbLight._m0[_2093].z + _299;
    float _2400 = inversesqrt(dot(vec3(_2394, _2395, _2396), vec3(_2394, _2395, _2396)));
    float _2401 = _2400 * _2394;
    float _2402 = _2400 * _2395;
    float _2403 = _2400 * _2396;
    float _2404 = dot(vec3(_556, _557, _558), vec3(cbLight._m0[_2093].xyz));
    float _4600 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
    float _2407 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
    float _2408 = dot(vec3(_556, _557, _558), vec3(_2401, _2402, _2403));
    float _4611 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
    float _2411 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
    float _2412 = dot(vec3(cbLight._m0[_2093].xyz), vec3(_2401, _2402, _2403));
    float _4622 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
    float _2416 = _2393 * _2393;
    float _2420 = ((_2411 * _2411) * (_2416 + (-1.0))) + 1.0;
    float _2429 = (exp2(log2(1.0 - (isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2430 = 1.0 - _2393;
    float _2440 = (0.5 / (((_2329 * ((_2407 * _2430) + _2393)) + 9.9999999392252902907785028219223e-09) + (((_2329 * _2430) + _2393) * _2407))) * _2407;
    float _4633 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
    float _2442 = (isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0))) * (_2416 / ((_2420 * _2420) * 3.141590118408203125));
    float _2452 = (((_2429 * cbLight._m0[_2381].x) * _2442) * _2076) + ((((cbLight._m0[_2300].x * _2042) * _2353) * _2367) * _2089);
    float _2453 = (((_2429 * cbLight._m0[_2381].y) * _2442) * _2076) + ((((cbLight._m0[_2300].y * _2044) * _2353) * _2367) * _2089);
    float _2454 = (((_2429 * cbLight._m0[_2381].z) * _2442) * _2076) + ((((cbLight._m0[_2300].z * _2046) * _2353) * _2367) * _2089);
    float _2510;
    float _2512;
    float _2514;
    if (_2129)
    {
        _2510 = _2452;
        _2512 = _2453;
        _2514 = _2454;
    }
    else
    {
        uint _2516 = _2053 + 2u;
        uint _2520 = _2053 + 10u;
        float _2534 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2516].w)) * _559) * 0.949999988079071044921875);
        float _2535 = _2534 * _2534;
        float _2536 = cbLight._m0[_2516].x + _297;
        float _2537 = cbLight._m0[_2516].y + _298;
        float _2538 = cbLight._m0[_2516].z + _299;
        float _2542 = inversesqrt(dot(vec3(_2536, _2537, _2538), vec3(_2536, _2537, _2538)));
        float _2543 = _2542 * _2536;
        float _2544 = _2542 * _2537;
        float _2545 = _2542 * _2538;
        float _2546 = dot(vec3(_556, _557, _558), vec3(cbLight._m0[_2516].xyz));
        float _4644 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
        float _2549 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
        float _2550 = dot(vec3(_556, _557, _558), vec3(_2543, _2544, _2545));
        float _4655 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
        float _2553 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
        float _2554 = dot(vec3(cbLight._m0[_2516].xyz), vec3(_2543, _2544, _2545));
        float _4666 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
        float _2558 = _2535 * _2535;
        float _2562 = ((_2553 * _2553) * (_2558 + (-1.0))) + 1.0;
        float _2571 = (exp2(log2(1.0 - (isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2572 = 1.0 - _2535;
        float _2582 = (0.5 / (((_2329 * ((_2549 * _2572) + _2535)) + 9.9999999392252902907785028219223e-09) + (((_2329 * _2572) + _2535) * _2549))) * _2549;
        float _4677 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
        float _2584 = (isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0))) * (_2558 / ((_2562 * _2562) * 3.141590118408203125));
        float _2585 = isnan(1.0) ? _2068 : (isnan(_2068) ? 1.0 : min(_2068, 1.0));
        _2510 = (((_2571 * cbLight._m0[_2520].x) * _2584) * _2585) + _2452;
        _2512 = (((_2571 * cbLight._m0[_2520].y) * _2584) * _2585) + _2453;
        _2514 = (((_2571 * cbLight._m0[_2520].z) * _2584) * _2585) + _2454;
    }
    float _2616;
    float _2618;
    float _2620;
    if (_2238)
    {
        _2616 = _2510;
        _2618 = _2512;
        _2620 = _2514;
    }
    else
    {
        uint _2627 = _2053 + 3u;
        uint _2631 = _2053 + 11u;
        float _2645 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2627].w)) * _559) * 0.949999988079071044921875);
        float _2646 = _2645 * _2645;
        float _2647 = cbLight._m0[_2627].x + _297;
        float _2648 = cbLight._m0[_2627].y + _298;
        float _2649 = cbLight._m0[_2627].z + _299;
        float _2653 = inversesqrt(dot(vec3(_2647, _2648, _2649), vec3(_2647, _2648, _2649)));
        float _2654 = _2653 * _2647;
        float _2655 = _2653 * _2648;
        float _2656 = _2653 * _2649;
        float _2657 = dot(vec3(_556, _557, _558), vec3(cbLight._m0[_2627].xyz));
        float _4693 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
        float _2660 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
        float _2661 = dot(vec3(_556, _557, _558), vec3(_2654, _2655, _2656));
        float _4704 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
        float _2664 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
        float _2665 = dot(vec3(cbLight._m0[_2627].xyz), vec3(_2654, _2655, _2656));
        float _4715 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
        float _2669 = _2646 * _2646;
        float _2673 = ((_2664 * _2664) * (_2669 + (-1.0))) + 1.0;
        float _2682 = (exp2(log2(1.0 - (isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2683 = 1.0 - _2646;
        float _2693 = (0.5 / (((_2329 * ((_2660 * _2683) + _2646)) + 9.9999999392252902907785028219223e-09) + (((_2329 * _2683) + _2646) * _2660))) * _2660;
        float _4726 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
        float _2695 = (isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0))) * (_2669 / ((_2673 * _2673) * 3.141590118408203125));
        float _2696 = isnan(1.0) ? _2069 : (isnan(_2069) ? 1.0 : min(_2069, 1.0));
        _2616 = (((_2682 * cbLight._m0[_2631].x) * _2695) * _2696) + _2510;
        _2618 = (((_2682 * cbLight._m0[_2631].y) * _2695) * _2696) + _2512;
        _2620 = (((_2682 * cbLight._m0[_2631].z) * _2695) * _2696) + _2514;
    }
    float _2762;
    float _2764;
    float _2766;
    float _2768;
    float _2770;
    float _2772;
    if (_2051.y == 0u)
    {
        uvec4 _2717 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2718 = _2717.x;
        uint _2729 = uint((float(_2717.y) * floor(float(uint(cbSceneParam._m0[85u].y * _598) / _2718))) + floor(float(uint(cbSceneParam._m0[85u].x * _597) / _2718)));
        float _2739 = (log2(_1829 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2740 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
        uint _2743 = uint(isnan(14.0) ? _2740 : (isnan(_2740) ? 14.0 : min(_2740, 14.0)));
        uvec4 _2748 = texelFetch(g_lightClusterGridBuffer, int(((_2743 << 2u) + (_2729 << 6u)) >> 2u));
        uint _2749 = _2748.x;
        uint _2750 = _2717.z;
        float _2899;
        float _2901;
        float _2903;
        float _2905;
        float _2907;
        float _2909;
        if (((((1u << ((_2750 >> 4u) & 15u)) + 4294967295u) & _2749) == 0u) || ((_2750 & 240u) == 0u))
        {
            _2899 = 0.0;
            _2901 = 0.0;
            _2903 = 0.0;
            _2905 = 0.0;
            _2907 = 0.0;
            _2909 = 0.0;
        }
        else
        {
            float _2900;
            float _2902;
            float _2904;
            float _2906;
            float _2908;
            float _2910;
            float _3083 = 0.0;
            float _3084 = 0.0;
            float _3085 = 0.0;
            float _3086 = 0.0;
            float _3087 = 0.0;
            float _3088 = 0.0;
            uint _3089 = 0u;
            uint _3098;
            bool _3099;
            for (;;)
            {
                _3098 = texelFetch(g_lightClassification, int((((_2743 << 5u) + (_2729 << 9u)) + (_3089 << 2u)) >> 2u)).x;
                _3099 = _3098 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3099)
                {
                    frontier_phi_71_pred = _3088;
                    frontier_phi_71_pred_1 = _3087;
                    frontier_phi_71_pred_2 = _3086;
                    frontier_phi_71_pred_3 = _3085;
                    frontier_phi_71_pred_4 = _3084;
                    frontier_phi_71_pred_5 = _3083;
                }
                else
                {
                    float _3228;
                    float _3229;
                    float _3230;
                    float _3231;
                    float _3232;
                    float _3233;
                    uint _3234;
                    _3228 = _3083;
                    _3229 = _3084;
                    _3230 = _3085;
                    _3231 = _3086;
                    _3232 = _3087;
                    _3233 = _3088;
                    _3234 = _3098;
                    float _3155;
                    float _3156;
                    float _3157;
                    float _3158;
                    float _3159;
                    float _3160;
                    for (;;)
                    {
                        uint _3238 = uint(findLSB(_3234)) + (_3089 << 5u);
                        uint _3235 = (_3234 + 4294967295u) & _3234;
                        uint _3240 = _3238 * 48u;
                        vec4 _3254 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3240)).x, texelFetch(g_PointLightRenderingBuffer, int(_3240 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3240 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3240 + 3u)).x));
                        uint _3260 = (_3238 * 48u) + 4u;
                        vec4 _3273 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3260)).x, texelFetch(g_PointLightRenderingBuffer, int(_3260 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3260 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3260 + 3u)).x));
                        uint _3279 = (_3238 * 48u) + 8u;
                        vec3 _3290 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3279)).x, texelFetch(g_PointLightRenderingBuffer, int(_3279 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3279 + 2u)).x));
                        float _3294 = _3254.x - _1827;
                        float _3295 = _3254.y - _1828;
                        float _3296 = _3254.z - _1829;
                        float _3297 = dot(vec3(_3294, _3295, _3296), vec3(_3294, _3295, _3296));
                        float _3300 = inversesqrt(_3297);
                        float _3301 = _3300 * _3294;
                        float _3302 = _3300 * _3295;
                        float _3303 = _3300 * _3296;
                        float _3304 = dot(vec3(_618, _621, _624), vec3(_3301, _3302, _3303));
                        float _3309 = 1.0 - (_3297 * _3254.w);
                        float _4752 = isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0));
                        float _3310 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
                        float _3311 = sqrt(_3297) * _3273.w;
                        float _3314 = 1.39999997615814208984375 / (_3311 + 1.39999997615814208984375);
                        float _3315 = _3314 * _3314;
                        float _3318 = ((1.0 - _3315) * _3304) + _3315;
                        float _3321 = _3311 * _3311;
                        float _3325 = ((isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0))) * _3310) / ((_3321 * 0.699999988079071044921875) + 1.0);
                        float _3329 = (-0.0) - _1827;
                        float _3330 = (-0.0) - _1828;
                        float _3331 = (-0.0) - _1829;
                        float _3335 = inversesqrt(dot(vec3(_3329, _3330, _3331), vec3(_3329, _3330, _3331)));
                        float _3336 = _3335 * _3329;
                        float _3337 = _3335 * _3330;
                        float _3338 = _3335 * _3331;
                        float _3345 = exp2(log2(1.0 / ((_3321 * 3.5) + 5.0)) * 0.25);
                        float _3346 = 1.0 - _686;
                        float _3353 = sqrt(1.0 - ((1.0 - (_3346 * _3346)) * (1.0 - (_3345 * _3345))));
                        float _3354 = _3353 * _3353;
                        float _3355 = _3354 * _3354;
                        float _3356 = _3336 + _3301;
                        float _3357 = _3337 + _3302;
                        float _3358 = _3338 + _3303;
                        float _3362 = inversesqrt(dot(vec3(_3356, _3357, _3358), vec3(_3356, _3357, _3358)));
                        float _3366 = dot(vec3(_618, _621, _624), vec3(_3336, _3337, _3338));
                        float _4768 = isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0));
                        float _3369 = isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0));
                        float _3370 = dot(vec3(_618, _621, _624), vec3(_3362 * _3356, _3362 * _3357, _3362 * _3358));
                        float _4779 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0));
                        float _3373 = isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0));
                        float _3377 = ((_3373 * _3373) * (_3355 + (-1.0))) + 1.0;
                        float _3378 = _3314 * _3354;
                        float _3379 = _3378 * _3378;
                        float _3382 = ((1.0 - _3379) * _3304) + _3379;
                        float _4790 = isnan(0.0) ? _3382 : (isnan(_3382) ? 0.0 : max(_3382, 0.0));
                        float _3383 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
                        float _3384 = 1.0 - _3354;
                        float _3394 = (0.5 / (((_3383 * ((_3369 * _3384) + _3354)) + 9.9999999392252902907785028219223e-09) + (((_3383 * _3384) + _3354) * _3369))) * _3383;
                        float _4801 = isnan(0.0) ? _3394 : (isnan(_3394) ? 0.0 : max(_3394, 0.0));
                        float _3405 = (((_3355 * 3.1415927410125732421875) * (isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0)))) / ((_3377 * _3377) * ((_3321 * 2.1991131305694580078125) + 3.141590118408203125))) * _3310;
                        _3158 = (_3325 * _3273.x) + _3231;
                        _3159 = (_3325 * _3273.y) + _3232;
                        _3160 = (_3325 * _3273.z) + _3233;
                        _3155 = (_3405 * _3290.x) + _3228;
                        _3156 = (_3405 * _3290.y) + _3229;
                        _3157 = (_3405 * _3290.z) + _3230;
                        if (_3235 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3228 = _3155;
                            _3229 = _3156;
                            _3230 = _3157;
                            _3231 = _3158;
                            _3232 = _3159;
                            _3233 = _3160;
                            _3234 = _3235;
                        }
                    }
                    frontier_phi_71_pred = _3160;
                    frontier_phi_71_pred_1 = _3159;
                    frontier_phi_71_pred_2 = _3158;
                    frontier_phi_71_pred_3 = _3157;
                    frontier_phi_71_pred_4 = _3156;
                    frontier_phi_71_pred_5 = _3155;
                }
                _2910 = frontier_phi_71_pred;
                _2908 = frontier_phi_71_pred_1;
                _2906 = frontier_phi_71_pred_2;
                _2904 = frontier_phi_71_pred_3;
                _2902 = frontier_phi_71_pred_4;
                _2900 = frontier_phi_71_pred_5;
                uint _3090 = _3089 + 1u;
                if (_3090 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3083 = _2900;
                    _3084 = _2902;
                    _3085 = _2904;
                    _3086 = _2906;
                    _3087 = _2908;
                    _3088 = _2910;
                    _3089 = _3090;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2899 = _2900;
            _2901 = _2902;
            _2903 = _2904;
            _2905 = _2906;
            _2907 = _2908;
            _2909 = _2910;
        }
        uvec4 _2913 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2914 = _2913.z;
        uint _2916 = (_2914 >> 8u) & 15u;
        float _3051;
        float _3053;
        float _3055;
        float _3057;
        float _3059;
        float _3061;
        if (((4294967295u << _2916) & _2749) == 0u)
        {
            _3051 = _2899;
            _3053 = _2901;
            _3055 = _2903;
            _3057 = _2905;
            _3059 = _2907;
            _3061 = _2909;
        }
        else
        {
            float _3076 = inversesqrt(dot(vec3(_1827, _1828, _1829), vec3(_1827, _1828, _1829)));
            float _3077 = _3076 * _1827;
            float _3078 = _3076 * _1828;
            float _3079 = _3076 * _1829;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2916 < ((_2914 >> 12u) & 15u))
            {
                float _3052;
                float _3054;
                float _3056;
                float _3058;
                float _3060;
                float _3062;
                float _3211 = _2899;
                float _3212 = _2901;
                float _3213 = _2903;
                float _3214 = _2905;
                float _3215 = _2907;
                float _3216 = _2909;
                uint _3217 = _2916;
                uint _3226;
                bool _3227;
                for (;;)
                {
                    _3226 = texelFetch(g_lightClassification, int((((_2743 << 5u) + (_2729 << 9u)) + (_3217 << 2u)) >> 2u)).x;
                    _3227 = _3226 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3227)
                    {
                        frontier_phi_82_pred = _3216;
                        frontier_phi_82_pred_1 = _3215;
                        frontier_phi_82_pred_2 = _3214;
                        frontier_phi_82_pred_3 = _3213;
                        frontier_phi_82_pred_4 = _3212;
                        frontier_phi_82_pred_5 = _3211;
                    }
                    else
                    {
                        float _3419;
                        float _3420;
                        float _3421;
                        float _3422;
                        float _3423;
                        float _3424;
                        float _3715;
                        float _3716;
                        float _3717;
                        float _3718;
                        float _3719;
                        float _3720;
                        float _3432 = _3211;
                        float _3433 = _3212;
                        float _3434 = _3213;
                        float _3435 = _3214;
                        float _3436 = _3215;
                        float _3437 = _3216;
                        uint _3438 = _3226;
                        uint _3439;
                        vec4 _3464;
                        float _3465;
                        vec4 _3480;
                        vec3 _3492;
                        vec4 _3508;
                        vec4 _3524;
                        float _3571;
                        bool _3572;
                        for (;;)
                        {
                            uint _3449 = ((_3217 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3438));
                            _3439 = (_3438 + 4294967295u) & _3438;
                            uint _3451 = _3449 * 40u;
                            _3464 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3451)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 3u)).x));
                            _3465 = _3464.w;
                            uint _3467 = (_3449 * 40u) + 4u;
                            _3480 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3467)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 3u)).x));
                            uint _3482 = (_3449 * 40u) + 8u;
                            _3492 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3482)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 2u)).x));
                            uint _3495 = (_3449 * 40u) + 16u;
                            _3508 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3495)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 3u)).x));
                            uint _3511 = (_3449 * 40u) + 20u;
                            _3524 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3511)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 3u)).x));
                            uint _3527 = (_3449 * 40u) + 24u;
                            vec4 _3540 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3527)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 3u)).x));
                            uint _3546 = (_3449 * 40u) + 28u;
                            vec4 _3559 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3546)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 3u)).x));
                            _3571 = fma(_1829, _3559.z, fma(_1828, _3559.y, _3559.x * _1827)) + _3559.w;
                            _3572 = !((fma(_1829, _3540.z, fma(_1828, _3540.y, _3540.x * _1827)) + _3540.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3572)
                            {
                                float _3599 = _3464.x - _1827;
                                float _3600 = _3464.y - _1828;
                                float _3601 = _3464.z - _1829;
                                float _3602 = dot(vec3(_3599, _3600, _3601), vec3(_3599, _3600, _3601));
                                float _3605 = inversesqrt(_3602);
                                float _3606 = _3605 * _3599;
                                float _3607 = _3605 * _3600;
                                float _3608 = _3605 * _3601;
                                float _3612 = 1.0 - (_3602 / (_3465 * _3465));
                                float _4812 = isnan(0.0) ? _3612 : (isnan(_3612) ? 0.0 : max(_3612, 0.0));
                                float _3613 = isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0));
                                float _3617 = sqrt(_3602) * _3480.w;
                                float _3619 = 1.39999997615814208984375 / (_3617 + 1.39999997615814208984375);
                                float _3620 = _3619 * _3619;
                                float _3623 = ((1.0 - _3620) * dot(vec3(_3606, _3607, _3608), vec3(_618, _621, _624))) + _3620;
                                float _3626 = _3617 * _3617;
                                float _3630 = (fma(_1829, _3508.z, fma(_1828, _3508.y, _3508.x * _1827)) + _3508.w) / _3571;
                                float _3631 = (fma(_1829, _3524.z, fma(_1828, _3524.y, _3524.x * _1827)) + _3524.w) / _3571;
                                float _3635 = 1.0 - dot(vec2(_3630, _3631), vec2(_3630, _3631));
                                float _4828 = isnan(0.0) ? _3635 : (isnan(_3635) ? 0.0 : max(_3635, 0.0));
                                float _3636 = isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0));
                                float _3637 = _3636 * (((isnan(0.0) ? _3623 : (isnan(_3623) ? 0.0 : max(_3623, 0.0))) * _3613) / ((_3626 * 0.699999988079071044921875) + 1.0));
                                float _3649 = exp2(log2(1.0 / ((_3626 * 3.5) + 5.0)) * 0.25);
                                float _3650 = 1.0 - _686;
                                float _3657 = sqrt(1.0 - ((1.0 - (_3650 * _3650)) * (1.0 - (_3649 * _3649))));
                                float _3658 = _3657 * _3657;
                                float _3659 = _3658 * _3658;
                                float _3660 = _3606 - _3077;
                                float _3661 = _3607 - _3078;
                                float _3662 = _3608 - _3079;
                                float _3666 = inversesqrt(dot(vec3(_3660, _3661, _3662), vec3(_3660, _3661, _3662)));
                                float _3670 = dot(vec3(_618, _621, _624), vec3((-0.0) - _3077, (-0.0) - _3078, (-0.0) - _3079));
                                float _4839 = isnan(0.0) ? _3670 : (isnan(_3670) ? 0.0 : max(_3670, 0.0));
                                float _3673 = isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0));
                                float _3674 = dot(vec3(_618, _621, _624), vec3(_3666 * _3660, _3666 * _3661, _3666 * _3662));
                                float _4850 = isnan(0.0) ? _3674 : (isnan(_3674) ? 0.0 : max(_3674, 0.0));
                                float _3677 = isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0));
                                float _3681 = ((_3677 * _3677) * (_3659 + (-1.0))) + 1.0;
                                float _3682 = _3619 * _3658;
                                float _3683 = _3682 * _3682;
                                float _3689 = ((1.0 - _3683) * dot(vec3(_618, _621, _624), vec3(_3606, _3607, _3608))) + _3683;
                                float _4861 = isnan(0.0) ? _3689 : (isnan(_3689) ? 0.0 : max(_3689, 0.0));
                                float _3690 = isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0));
                                float _3691 = 1.0 - _3658;
                                float _3701 = (0.5 / (((_3690 * ((_3673 * _3691) + _3658)) + 9.9999999392252902907785028219223e-09) + (((_3690 * _3691) + _3658) * _3673))) * _3690;
                                float _4872 = isnan(0.0) ? _3701 : (isnan(_3701) ? 0.0 : max(_3701, 0.0));
                                float _3711 = (_3636 * _3613) * (((_3659 * 3.1415927410125732421875) * (isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0)))) / ((_3681 * _3681) * ((_3626 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3637 * _3480.z;
                                frontier_phi_88_pred_1 = _3637 * _3480.y;
                                frontier_phi_88_pred_2 = _3637 * _3480.x;
                                frontier_phi_88_pred_3 = _3711 * _3492.z;
                                frontier_phi_88_pred_4 = _3711 * _3492.y;
                                frontier_phi_88_pred_5 = _3711 * _3492.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3720 = frontier_phi_88_pred;
                            _3719 = frontier_phi_88_pred_1;
                            _3718 = frontier_phi_88_pred_2;
                            _3717 = frontier_phi_88_pred_3;
                            _3716 = frontier_phi_88_pred_4;
                            _3715 = frontier_phi_88_pred_5;
                            _3422 = _3718 + _3435;
                            _3423 = _3719 + _3436;
                            _3424 = _3720 + _3437;
                            _3419 = _3715 + _3432;
                            _3420 = _3716 + _3433;
                            _3421 = _3717 + _3434;
                            if (_3439 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3432 = _3419;
                                _3433 = _3420;
                                _3434 = _3421;
                                _3435 = _3422;
                                _3436 = _3423;
                                _3437 = _3424;
                                _3438 = _3439;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3424;
                        frontier_phi_82_pred_1 = _3423;
                        frontier_phi_82_pred_2 = _3422;
                        frontier_phi_82_pred_3 = _3421;
                        frontier_phi_82_pred_4 = _3420;
                        frontier_phi_82_pred_5 = _3419;
                    }
                    _3062 = frontier_phi_82_pred;
                    _3060 = frontier_phi_82_pred_1;
                    _3058 = frontier_phi_82_pred_2;
                    _3056 = frontier_phi_82_pred_3;
                    _3054 = frontier_phi_82_pred_4;
                    _3052 = frontier_phi_82_pred_5;
                    uint _3218 = _3217 + 1u;
                    if (_3218 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3211 = _3052;
                        _3212 = _3054;
                        _3213 = _3056;
                        _3214 = _3058;
                        _3215 = _3060;
                        _3216 = _3062;
                        _3217 = _3218;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3058;
                frontier_phi_63_64_ladder_1 = _3062;
                frontier_phi_63_64_ladder_2 = _3060;
                frontier_phi_63_64_ladder_3 = _3056;
                frontier_phi_63_64_ladder_4 = _3054;
                frontier_phi_63_64_ladder_5 = _3052;
            }
            else
            {
                frontier_phi_63_64_ladder = _2905;
                frontier_phi_63_64_ladder_1 = _2909;
                frontier_phi_63_64_ladder_2 = _2907;
                frontier_phi_63_64_ladder_3 = _2903;
                frontier_phi_63_64_ladder_4 = _2901;
                frontier_phi_63_64_ladder_5 = _2899;
            }
            _3051 = frontier_phi_63_64_ladder_5;
            _3053 = frontier_phi_63_64_ladder_4;
            _3055 = frontier_phi_63_64_ladder_3;
            _3057 = frontier_phi_63_64_ladder;
            _3059 = frontier_phi_63_64_ladder_2;
            _3061 = frontier_phi_63_64_ladder_1;
        }
        float _3066 = isnan(1.0) ? _662 : (isnan(_662) ? 1.0 : min(_662, 1.0));
        _2762 = (_3066 * _3057) + _2293;
        _2764 = (_3066 * _3059) + _2295;
        _2766 = (_3066 * _3061) + _2297;
        _2768 = ((_3051 * 0.039999999105930328369140625) * _3066) + _2616;
        _2770 = ((_3053 * 0.039999999105930328369140625) * _3066) + _2618;
        _2772 = ((_3055 * 0.039999999105930328369140625) * _3066) + _2620;
    }
    else
    {
        _2762 = _2293;
        _2764 = _2295;
        _2766 = _2297;
        _2768 = _2616;
        _2770 = _2618;
        _2772 = _2620;
    }
    float _2786 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2787 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2788 = cbSceneParam._m0[86u].x * (_1739 + ((_685 * cbMtdParam._m0[13u].z) * dot(vec3(_556, _557, _558), vec3(_205, _206, _207))));
    float _2789 = isnan(_2786) ? _2788 : (isnan(_2788) ? _2786 : min(_2788, _2786));
    float _2790 = isnan(_2787) ? _598 : (isnan(_598) ? _2787 : min(_598, _2787));
    vec4 _2792 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2789, _2790), 0.0);
    float _2794 = _2792.x;
    bool _2815 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2794)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2794))) > _578;
    vec4 _2819 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2815 ? _2789 : _597, _2815 ? _2790 : _598));
    float _4898 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _4909 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _4920 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _2843 = 0.959999978542327880859375 - (exp2(log2(1.0 - _677) * 5.0) * 0.959999978542327880859375);
    float _2845 = (_2819.x * _2843) * cbSceneParam._m0[72u].w;
    float _2847 = (_2819.y * _2843) * cbSceneParam._m0[72u].w;
    float _2849 = (_2819.z * _2843) * cbSceneParam._m0[72u].w;
    float _2857 = (_2845 + (((((_1716 * _1764.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0))) * _1507) * _1780)) + _2768) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0))) * (_2762 + ((isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0))) * _662))) - _2845) * _541);
    float _2859 = (_2847 + (((((_1716 * _1764.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0))) * _1507) * _1780)) + _2770) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0))) * (_2764 + ((isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0))) * _662))) - _2847) * _541);
    float _2861 = (_2849 + (((((_1716 * _1764.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0))) * _1507) * _1780)) + _2772) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0))) * (_2766 + ((isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0))) * _662))) - _2849) * _541);
    uint _2862 = _637 + 6u;
    float _2870 = _597 / cbSceneParam._m0[86u].x;
    float _2871 = _598 / cbSceneParam._m0[86u].y;
    vec4 _2885 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2870, _2871, (log2((isnan(cbSceneParam._m0[77u].w) ? _578 : (isnan(_578) ? cbSceneParam._m0[77u].w : min(_578, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2887 = _2885.x;
    float _2888 = _2885.y;
    float _2889 = _2885.z;
    float _2890 = _2885.w;
    float _2961;
    float _2963;
    float _2965;
    float _2967;
    if (_578 > cbSceneParam._m0[78u].w)
    {
        float _2924 = isnan(_578) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _578 : min(cbSceneParam._m0[80u].w, _578));
        float _2925 = _2924 / _578;
        float _2936 = _2925 * _276;
        float _2937 = _277 * _2925;
        float _2938 = (-0.0) - _2937;
        float _2939 = _2925 * _278;
        float _2941 = (cbSceneParam._m0[77u].w * _2938) / _2924;
        float _2942 = _2941 + cbSceneParam._m0[79u].w;
        float _2943 = cbSceneParam._m0[79u].w - _2937;
        float _2949 = sqrt(((_2936 * _2936) + (_2937 * _2937)) + (_2939 * _2939));
        float _2952 = (1.0 - (cbSceneParam._m0[77u].w / _2924)) * _2949;
        float _2957 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2959 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3168;
        if (abs((_2938 - _2941) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3168 = ((((_2942 > 0.0) ? exp2(_2957 * _2942) : (2.0 - exp2(_2959 * _2942))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2952;
        }
        else
        {
            float _3112 = 1.0 / cbSceneParam._m0[80u].x;
            float _3113 = isnan(_2943) ? _2942 : (isnan(_2942) ? _2943 : max(_2942, _2943));
            float _3114 = isnan(_2943) ? _2942 : (isnan(_2942) ? _2943 : min(_2942, _2943));
            float _3123 = isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : min(_3113, 0.0));
            float _3124 = isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : min(_3114, 0.0));
            _3168 = ((abs(_2949 / _2938) * cbSceneParam._m0[80u].y) * ((((_3123 - _3124) * 2.0) - ((exp2(_2957 * (isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0)))) - exp2(_2957 * (isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0))))) * _3112)) - ((exp2(_2959 * _3123) - exp2(_2959 * _3124)) * _3112))) + (_2952 * cbSceneParam._m0[80u].z);
        }
        vec4 _3170 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2870, _2871, 1.0), 0.0);
        float _3179 = exp2((_3168 * (-1.44269502162933349609375)) * (1.0 - _3170.w));
        float _3180 = log2(_3179);
        float _3196 = log2(_2890);
        _2961 = (exp2(_3196 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3180 * cbSceneParam._m0[78u].x)) * _3170.x) / cbSceneParam._m0[78u].x)) + _2887;
        _2963 = (exp2(_3196 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3180 * cbSceneParam._m0[78u].y)) * _3170.y) / cbSceneParam._m0[78u].y)) + _2888;
        _2965 = (exp2(_3196 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3180 * cbSceneParam._m0[78u].z)) * _3170.z) / cbSceneParam._m0[78u].z)) + _2889;
        _2967 = _3179 * _2890;
    }
    else
    {
        _2961 = _2887;
        _2963 = _2888;
        _2965 = _2889;
        _2967 = _2890;
    }
    bool _3206;
    float _3022;
    vec4 _3025;
    float _3027;
    vec4 _3029;
    float _3037;
    float _3038;
    float _3039;
    float _3040;
    bool _3050;
    for (;;)
    {
        bool _2979 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _2980 = log2(_2967);
        float _2987 = exp2(_2980 * cbSceneParam._m0[78u].x) * _2857;
        float _2988 = exp2(_2980 * cbSceneParam._m0[78u].y) * _2859;
        float _2989 = exp2(_2980 * cbSceneParam._m0[78u].z) * _2861;
        vec4 _2997 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_597, _598));
        float _2999 = _2997.x;
        float _3020 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2999)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2999))) - _578) * 3.0;
        float _4971 = isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0));
        _3022 = (isnan(1.0) ? _4971 : (isnan(_4971) ? 1.0 : min(_4971, 1.0))) * cbInstanceData._m0[_2862].w;
        float _3023 = _585 + (-0.5);
        _3025 = cbMtdParam._m0[1u];
        _3027 = _3025.y * _3023;
        _3029 = cbMatDynParam._m0[0u];
        float _3036 = (roundEven(_3029.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3037 = _3036 * (_2979 ? _2987 : (_2987 + (cbSceneParam._m0[72u].w * _2961)));
        _3038 = _3036 * (_2979 ? _2988 : (_2988 + (cbSceneParam._m0[72u].w * _2963)));
        _3039 = _3036 * (_2979 ? _2989 : (_2989 + (cbSceneParam._m0[72u].w * _2965)));
        _3040 = _3023 * 0.999000012874603271484375;
        _3050 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3050)
        {
            if ((cbInstanceData._m0[_637 + 7u].x + _3040) < 0.5)
            {
                _3206 = true;
                break;
            }
        }
        uint _3147 = _638 + uint(_3029.w);
        if ((cbInstanceData._m0[_3147].w < 1.0) && ((cbInstanceData._m0[_3147].w + _3040) < 0.5))
        {
            _3206 = true;
            break;
        }
        if ((_3027 + 1.0) < _3025.x)
        {
            _3206 = true;
            break;
        }
        _3206 = false;
        break;
    }
    float _3410;
    if (_3206)
    {
        discard_state = true;
        _3410 = 0.0;
    }
    else
    {
        _3410 = _3022;
    }
    SV_Target.x = _3037;
    SV_Target.y = _3038;
    SV_Target.z = _3039;
    SV_Target.w = _3410;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _3022;
    discard_exit();
}


