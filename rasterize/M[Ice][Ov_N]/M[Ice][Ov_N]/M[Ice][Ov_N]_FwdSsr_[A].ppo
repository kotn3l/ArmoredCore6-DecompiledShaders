#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 0, std140) uniform cbPerSceneUBO
{
    vec4 _m0[39];
} cbPerScene;

layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 26) uniform texture2D g_PrevFrameTexture;
layout(set = 0, binding = 27) uniform texture2D g_ConvertedDepthTexture;
layout(set = 0, binding = 2) uniform texture2D M_Ice_Ov_N_snp_0_Texture2D_10;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
bool discard_state;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    float _116 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _117 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _118 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _124 = inversesqrt(dot(vec3(_116, _117, _118), vec3(_116, _117, _118)));
    float _131 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _132 = _131 * NORMAL.x;
    float _133 = _131 * NORMAL.y;
    float _134 = _131 * NORMAL.z;
    float _138 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _161 = texture(sampler2D(M_Ice_Ov_N_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _169 = (_161.x * 2.0) + (-1.0);
    float _171 = (_161.y * 2.0) + (-1.0);
    float _172 = dot(vec2(_169, _171), vec2(_169, _171));
    float _875 = isnan(0.0) ? _172 : (isnan(_172) ? 0.0 : max(_172, 0.0));
    float _178 = sqrt(1.0 - (isnan(1.0) ? _875 : (isnan(_875) ? 1.0 : min(_875, 1.0))));
    float _181 = fma(_178, _132, fma(_171, _138 * TANGENT.x, (_124 * _116) * _169));
    float _184 = fma(_178, _133, fma(_171, _138 * TANGENT.y, (_124 * _117) * _169));
    float _187 = fma(_178, _134, fma(_171, _138 * TANGENT.z, (_124 * _118) * _169));
    float _191 = inversesqrt(dot(vec3(_181, _184, _187), vec3(_181, _184, _187)));
    float _202 = cbMtdParam._m0[13u].y + dot(vec4(_191 * _181, _191 * _184, _191 * _187, 0.0), vec4(cbMtdParam._m0[14u].yzw, 0.0));
    float _886 = isnan(0.0) ? _202 : (isnan(_202) ? 0.0 : max(_202, 0.0));
    float _204 = (isnan(1.0) ? _886 : (isnan(_886) ? 1.0 : min(_886, 1.0))) * TEXCOORD_3.x;
    float _897 = isnan(0.0) ? _204 : (isnan(_204) ? 0.0 : max(_204, 0.0));
    float _213 = ((cbMtdParam._m0[14u].x - cbMtdParam._m0[12u].x) * (isnan(1.0) ? _897 : (isnan(_897) ? 1.0 : min(_897, 1.0)))) + cbMtdParam._m0[12u].x;
    float _908 = isnan(0.0) ? _213 : (isnan(_213) ? 0.0 : max(_213, 0.0));
    float _214 = isnan(1.0) ? _908 : (isnan(_908) ? 1.0 : min(_908, 1.0));
    float _228 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _272 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _282 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _272);
    float _283 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _272);
    float _284 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _272);
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _315 = sqrt(((_282 * _282) + (_283 * _283)) + (_284 * _284));
        float _322 = (cbMatDynParam._m0[5u].x * _315) + cbMatDynParam._m0[5u].y;
        float _919 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
        float _323 = isnan(1.0) ? _919 : (isnan(_919) ? 1.0 : min(_919, 1.0));
        float _327 = (cbMatDynParam._m0[5u].z * _315) + cbMatDynParam._m0[5u].w;
        float _930 = isnan(0.0) ? _327 : (isnan(_327) ? 0.0 : max(_327, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _930 : (isnan(_930) ? 1.0 : min(_930, 1.0))) - _323)) + _323) < ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _294 = POSITION_1.x / POSITION_1.w;
    float _295 = POSITION_1.y / POSITION_1.w;
    float _299 = (_294 * 0.5) + 0.5;
    float _300 = 0.5 - (_295 * 0.5);
    float _340;
    float _342;
    float _344;
    float _346;
    if (_214 < cbPerScene._m0[22u].z)
    {
        _340 = 0.0;
        _342 = 0.0;
        _344 = 0.0;
        _346 = 0.0;
    }
    else
    {
        float _352 = 1.0 / _228;
        float frontier_phi_3_4_ladder;
        float frontier_phi_3_4_ladder_1;
        float frontier_phi_3_4_ladder_2;
        float frontier_phi_3_4_ladder_3;
        if (!(cbPerScene._m0[21u].y >= _352))
        {
            float _378 = fma(_134, cbPerScene._m0[8u].z, fma(_133, cbPerScene._m0[8u].y, cbPerScene._m0[8u].x * _132));
            float _381 = fma(_134, cbPerScene._m0[9u].z, fma(_133, cbPerScene._m0[9u].y, cbPerScene._m0[9u].x * _132));
            float _384 = fma(_134, cbPerScene._m0[10u].z, fma(_133, cbPerScene._m0[10u].y, cbPerScene._m0[10u].x * _132));
            float _391 = (_294 * _228) * cbPerScene._m0[28u].x;
            float _393 = (_295 * _228) * cbPerScene._m0[28u].y;
            float _397 = inversesqrt(dot(vec3(_391, _393, _228), vec3(_391, _393, _228)));
            float _398 = _391 * _397;
            float _399 = _393 * _397;
            float _400 = _397 * _228;
            float _404 = dot(vec3(_398, _399, _400), vec3(_378, _381, _384)) * 2.0;
            float _408 = _398 - (_404 * _378);
            float _409 = _399 - (_404 * _381);
            float _410 = _400 - (_404 * _384);
            float _414 = inversesqrt(dot(vec3(_408, _409, _410), vec3(_408, _409, _410)));
            float _417 = _410 * _414;
            float frontier_phi_3_4_ladder_6_ladder;
            float frontier_phi_3_4_ladder_6_ladder_1;
            float frontier_phi_3_4_ladder_6_ladder_2;
            float frontier_phi_3_4_ladder_6_ladder_3;
            if (_417 < cbPerScene._m0[16u].x)
            {
                frontier_phi_3_4_ladder_6_ladder = 0.0;
                frontier_phi_3_4_ladder_6_ladder_1 = 0.0;
                frontier_phi_3_4_ladder_6_ladder_2 = 0.0;
                frontier_phi_3_4_ladder_6_ladder_3 = 0.0;
            }
            else
            {
                float _430 = abs(dot(vec3((-0.0) - _398, (-0.0) - _399, (-0.0) - _400), vec3(_378, _381, _384)));
                float _941 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
                float _441 = (((_214 * _214) * 0.959999978542327880859375) * exp2(log2(1.0 - (isnan(1.0) ? _941 : (isnan(_941) ? 1.0 : min(_941, 1.0)))) * 5.0)) + 0.039999999105930328369140625;
                float _450 = (cbPerScene._m0[29u].x * (1.0 - _214)) + cbPerScene._m0[29u].y;
                float _952 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
                float _459 = ((cbPerScene._m0[23u].w - cbPerScene._m0[23u].z) * (isnan(1.0) ? _952 : (isnan(_952) ? 1.0 : min(_952, 1.0)))) + cbPerScene._m0[23u].z;
                float frontier_phi_3_4_ladder_6_ladder_7_ladder;
                float frontier_phi_3_4_ladder_6_ladder_7_ladder_1;
                float frontier_phi_3_4_ladder_6_ladder_7_ladder_2;
                float frontier_phi_3_4_ladder_6_ladder_7_ladder_3;
                if (_441 < cbPerScene._m0[22u].x)
                {
                    frontier_phi_3_4_ladder_6_ladder_7_ladder = 0.0;
                    frontier_phi_3_4_ladder_6_ladder_7_ladder_1 = 0.0;
                    frontier_phi_3_4_ladder_6_ladder_7_ladder_2 = 0.0;
                    frontier_phi_3_4_ladder_6_ladder_7_ladder_3 = 0.0;
                }
                else
                {
                    float _462 = _417 - cbPerScene._m0[16u].x;
                    float _963 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
                    float _463 = isnan(1.0) ? _963 : (isnan(_963) ? 1.0 : min(_963, 1.0));
                    float _464 = _463 * _463;
                    float _466 = (_441 - cbPerScene._m0[22u].x) * 10.0;
                    float _974 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
                    float _468 = isnan(1.0) ? _974 : (isnan(_974) ? 1.0 : min(_974, 1.0));
                    float _469 = isnan(_468) ? _464 : (isnan(_464) ? _468 : min(_464, _468));
                    float _473 = (cbPerScene._m0[21u].x - _228) * cbPerScene._m0[21u].z;
                    float _990 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
                    float _474 = isnan(1.0) ? _990 : (isnan(_990) ? 1.0 : min(_990, 1.0));
                    float _475 = isnan(_474) ? _469 : (isnan(_469) ? _474 : min(_469, _474));
                    float _476 = (_408 * _414) + _391;
                    float _477 = (_409 * _414) + _393;
                    float _478 = _417 + _228;
                    float _510 = fma(_478, cbPerScene._m0[7u].z, fma(_477, cbPerScene._m0[7u].y, cbPerScene._m0[7u].x * _476)) + cbPerScene._m0[7u].w;
                    float _514 = ((fma(_478, cbPerScene._m0[4u].z, fma(_477, cbPerScene._m0[4u].y, cbPerScene._m0[4u].x * _476)) + cbPerScene._m0[4u].w) / _510) - _299;
                    float _515 = ((fma(_478, cbPerScene._m0[5u].z, fma(_477, cbPerScene._m0[5u].y, cbPerScene._m0[5u].x * _476)) + cbPerScene._m0[5u].w) / _510) - _300;
                    float _522 = cbPerScene._m0[18u].x * _514;
                    float _523 = cbPerScene._m0[18u].y * _515;
                    float _528 = sqrt((_522 * _522) + (_523 * _523)) + 9.9999997473787516355514526367188e-06;
                    float _533 = (_514 / _528) * _459;
                    float _534 = (_515 / _528) * _459;
                    float _535 = (((1.0 / _478) - _352) / _528) * _459;
                    float _564 = abs(float(_533 > 0.0) - _299) / (abs(_533) + 1.0000000116860974230803549289703e-07);
                    float _565 = abs(float(_534 > 0.0) - _300) / (abs(_534) + 1.0000000116860974230803549289703e-07);
                    float _567 = (abs(((_535 > 0.0) ? cbPerScene._m0[20u].x : cbPerScene._m0[20u].y) - _352) / (abs(_535) + 1.0000000116860974230803549289703e-07)) + 2.0;
                    float _568 = isnan(_565) ? _564 : (isnan(_564) ? _565 : min(_564, _565));
                    float _569 = isnan(_567) ? _568 : (isnan(_568) ? _567 : min(_568, _567));
                    uint _572 = uint(int(isnan(cbPerScene._m0[23u].y) ? _569 : (isnan(_569) ? cbPerScene._m0[23u].y : min(_569, cbPerScene._m0[23u].y))));
                    float _347;
                    float _577;
                    float _579;
                    float _581;
                    if (int(_572) > int(0u))
                    {
                        float _574 = _535 + _352;
                        float _575 = _534 + _300;
                        float _576 = _533 + _299;
                        float _578;
                        float _580;
                        float _582;
                        float _583;
                        uint _594;
                        float _596;
                        float _598;
                        float _600;
                        float _602;
                        float _604;
                        float _606;
                        float _608;
                        uint _610;
                        float _612;
                        float _614;
                        float _616;
                        float _589 = 0.0;
                        float _590 = 0.0;
                        float _591 = 0.0;
                        float _592 = 0.0;
                        uint _593 = 0u;
                        float _595 = _352;
                        float _597 = _576;
                        float _599 = _575;
                        float _601 = _574;
                        float _603 = _299;
                        float _605 = _300;
                        float _607 = _352;
                        uint _609 = 1u;
                        float _611 = 0.0;
                        float _613 = 0.0;
                        float _615 = 0.0;
                        float _627;
                        float _634;
                        float _635;
                        float _636;
                        float _637;
                        float _638;
                        float _639;
                        uint _640;
                        float _641;
                        bool _647;
                        for (;;)
                        {
                            _627 = textureLod(sampler2D(g_ConvertedDepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[86u].x * _597, cbSceneParam._m0[86u].y * _599), 0.0).x;
                            bool _633 = _593 == (_572 + 4294967295u);
                            _634 = _633 ? _611 : _597;
                            _635 = _633 ? _613 : _599;
                            _636 = _633 ? _615 : _601;
                            _637 = _633 ? _611 : _603;
                            _638 = _633 ? _613 : _605;
                            _639 = _633 ? _615 : _607;
                            _640 = _633 ? 1u : _609;
                            _641 = _633 ? (-1.0) : (_601 - _627);
                            _647 = (_640 != 0u) && ((_641 <= 0.0) && ((_633 ? (-1.0) : (_627 - (_595 * cbPerScene._m0[19u].y))) < 0.0));
                            float frontier_phi_17_pred;
                            float frontier_phi_17_pred_1;
                            float frontier_phi_17_pred_2;
                            uint frontier_phi_17_pred_3;
                            float frontier_phi_17_pred_4;
                            float frontier_phi_17_pred_5;
                            float frontier_phi_17_pred_6;
                            float frontier_phi_17_pred_7;
                            float frontier_phi_17_pred_8;
                            float frontier_phi_17_pred_9;
                            float frontier_phi_17_pred_10;
                            float frontier_phi_17_pred_11;
                            float frontier_phi_17_pred_12;
                            float frontier_phi_17_pred_13;
                            float frontier_phi_17_pred_14;
                            uint frontier_phi_17_pred_15;
                            if (_647)
                            {
                                uint _657 = uint(int(log2(_459) + 0.999000012874603271484375));
                                float _668;
                                float _670;
                                float _672;
                                float _674;
                                float _676;
                                float _678;
                                float _680;
                                if (int(_657) > int(0u))
                                {
                                    uint _778;
                                    float _780;
                                    float _781;
                                    float _782;
                                    float _783;
                                    float _784;
                                    float _785;
                                    float _786;
                                    _778 = 0u;
                                    _780 = _634;
                                    _781 = _635;
                                    _782 = _636;
                                    _783 = _637;
                                    _784 = _638;
                                    _785 = _639;
                                    _786 = _627;
                                    float _669;
                                    float _671;
                                    float _673;
                                    float _675;
                                    float _677;
                                    float _679;
                                    float _681;
                                    for (;;)
                                    {
                                        float _790 = (_783 + _780) * 0.5;
                                        float _791 = (_784 + _781) * 0.5;
                                        float _792 = (_785 + _782) * 0.5;
                                        vec4 _800 = textureLod(sampler2D(g_ConvertedDepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[86u].x * _790, cbSceneParam._m0[86u].y * _791), 0.0);
                                        float _802 = _800.x;
                                        bool _804 = (_792 - _802) < 0.0;
                                        _669 = _804 ? _790 : _780;
                                        _671 = _804 ? _791 : _781;
                                        _673 = _804 ? _792 : _782;
                                        _675 = _804 ? _783 : _790;
                                        _677 = _804 ? _784 : _791;
                                        _679 = _804 ? _785 : _792;
                                        _681 = _804 ? _802 : _786;
                                        uint _779 = _778 + 1u;
                                        if (_779 == _657)
                                        {
                                            break;
                                        }
                                        else
                                        {
                                            _778 = _779;
                                            _780 = _669;
                                            _781 = _671;
                                            _782 = _673;
                                            _783 = _675;
                                            _784 = _677;
                                            _785 = _679;
                                            _786 = _681;
                                        }
                                    }
                                    _668 = _669;
                                    _670 = _671;
                                    _672 = _673;
                                    _674 = _675;
                                    _676 = _677;
                                    _678 = _679;
                                    _680 = _681;
                                }
                                else
                                {
                                    _668 = _634;
                                    _670 = _635;
                                    _672 = _636;
                                    _674 = _637;
                                    _676 = _638;
                                    _678 = _639;
                                    _680 = _627;
                                }
                                float _690 = cbPerScene._m0[28u].x * ((_668 * 2.0) + (-1.0));
                                float _691 = cbPerScene._m0[28u].y * (1.0 - (_670 * 2.0));
                                float _723 = fma(_680, cbPerScene._m0[27u].w, fma(_691, cbPerScene._m0[27u].y, cbPerScene._m0[27u].x * _690) + cbPerScene._m0[27u].z);
                                float _724 = fma(_680, cbPerScene._m0[24u].w, fma(_691, cbPerScene._m0[24u].y, _690 * cbPerScene._m0[24u].x) + cbPerScene._m0[24u].z) / _723;
                                float _725 = fma(_680, cbPerScene._m0[25u].w, fma(_691, cbPerScene._m0[25u].y, cbPerScene._m0[25u].x * _690) + cbPerScene._m0[25u].z) / _723;
                                vec4 _734 = textureLod(sampler2D(g_PrevFrameTexture, SS_ClampLinear), vec2(cbSceneParam._m0[87u].z * _724, cbSceneParam._m0[87u].w * _725), 0.0);
                                float _739 = isnan(_475) ? 1.0 : (isnan(1.0) ? _475 : min(1.0, _475));
                                float _740 = 0.5 - _724;
                                float _741 = 0.5 - _725;
                                float _742 = _740 * 2.0;
                                float _743 = _741 * 2.0;
                                float _744 = _742 * _742;
                                float _745 = _743 * _743;
                                float _1026 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
                                float _1037 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
                                float _754 = inversesqrt(dot(vec2(_533, _534), vec2(_533, _534)));
                                float _760 = inversesqrt(dot(vec2(_742, _743), vec2(_742, _743)));
                                float _766 = dot(vec2((_740 * (-2.0)) * _760, (_741 * (-2.0)) * _760), vec2(_754 * _533, _754 * _534));
                                float _1048 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
                                float _773 = ((1.0 - (isnan(1.0) ? _1037 : (isnan(_1037) ? 1.0 : min(_1037, 1.0)))) * (1.0 - (isnan(1.0) ? _1026 : (isnan(_1026) ? 1.0 : min(_1026, 1.0))))) * (4.0 - ((isnan(1.0) ? _1048 : (isnan(_1048) ? 1.0 : min(_1048, 1.0))) * 2.0));
                                float _1059 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
                                float _774 = isnan(1.0) ? _1059 : (isnan(_1059) ? 1.0 : min(_1059, 1.0));
                                float _775 = _774 * _774;
                                frontier_phi_17_pred = _615;
                                frontier_phi_17_pred_1 = _613;
                                frontier_phi_17_pred_2 = _611;
                                frontier_phi_17_pred_3 = _640;
                                frontier_phi_17_pred_4 = _678;
                                frontier_phi_17_pred_5 = _676;
                                frontier_phi_17_pred_6 = _674;
                                frontier_phi_17_pred_7 = _672;
                                frontier_phi_17_pred_8 = _670;
                                frontier_phi_17_pred_9 = _668;
                                frontier_phi_17_pred_10 = _595;
                                frontier_phi_17_pred_11 = isnan(_775) ? _739 : (isnan(_739) ? _775 : min(_739, _775));
                                frontier_phi_17_pred_12 = _734.z;
                                frontier_phi_17_pred_13 = _734.y;
                                frontier_phi_17_pred_14 = _734.x;
                                frontier_phi_17_pred_15 = _572;
                            }
                            else
                            {
                                bool _659 = _641 > 0.0;
                                frontier_phi_17_pred = _659 ? _636 : _615;
                                frontier_phi_17_pred_1 = _659 ? _635 : _613;
                                frontier_phi_17_pred_2 = _659 ? _634 : _611;
                                frontier_phi_17_pred_3 = uint(_659);
                                frontier_phi_17_pred_4 = _636;
                                frontier_phi_17_pred_5 = _635;
                                frontier_phi_17_pred_6 = _634;
                                frontier_phi_17_pred_7 = _636 + _535;
                                frontier_phi_17_pred_8 = _635 + _534;
                                frontier_phi_17_pred_9 = _634 + _533;
                                frontier_phi_17_pred_10 = _627;
                                frontier_phi_17_pred_11 = _592;
                                frontier_phi_17_pred_12 = _591;
                                frontier_phi_17_pred_13 = _590;
                                frontier_phi_17_pred_14 = _589;
                                frontier_phi_17_pred_15 = _593 + 1u;
                            }
                            _616 = frontier_phi_17_pred;
                            _614 = frontier_phi_17_pred_1;
                            _612 = frontier_phi_17_pred_2;
                            _610 = frontier_phi_17_pred_3;
                            _608 = frontier_phi_17_pred_4;
                            _606 = frontier_phi_17_pred_5;
                            _604 = frontier_phi_17_pred_6;
                            _602 = frontier_phi_17_pred_7;
                            _600 = frontier_phi_17_pred_8;
                            _598 = frontier_phi_17_pred_9;
                            _596 = frontier_phi_17_pred_10;
                            _583 = frontier_phi_17_pred_11;
                            _582 = frontier_phi_17_pred_12;
                            _580 = frontier_phi_17_pred_13;
                            _578 = frontier_phi_17_pred_14;
                            _594 = frontier_phi_17_pred_15;
                            if (int(_594) < int(_572))
                            {
                                _589 = _578;
                                _590 = _580;
                                _591 = _582;
                                _592 = _583;
                                _593 = _594;
                                _595 = _596;
                                _597 = _598;
                                _599 = _600;
                                _601 = _602;
                                _603 = _604;
                                _605 = _606;
                                _607 = _608;
                                _609 = _610;
                                _611 = _612;
                                _613 = _614;
                                _615 = _616;
                                continue;
                            }
                            else
                            {
                                break;
                            }
                        }
                        _577 = _578;
                        _579 = _580;
                        _581 = _582;
                        _347 = _583;
                    }
                    else
                    {
                        _577 = 0.0;
                        _579 = 0.0;
                        _581 = 0.0;
                        _347 = 0.0;
                    }
                    float frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder;
                    float frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_1;
                    float frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_2;
                    float frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_3;
                    if ((isnan(_577) || isnan(_579)) || isnan(_581))
                    {
                        frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder = 0.0;
                        frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_1 = 0.0;
                        frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_2 = 0.0;
                        frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_3 = 0.0;
                    }
                    else
                    {
                        frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder = (_347 * _577) * cbPerScene._m0[28u].w;
                        frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_1 = _347;
                        frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_2 = (_347 * _581) * cbPerScene._m0[28u].w;
                        frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_3 = (_347 * _579) * cbPerScene._m0[28u].w;
                    }
                    frontier_phi_3_4_ladder_6_ladder_7_ladder = frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder;
                    frontier_phi_3_4_ladder_6_ladder_7_ladder_1 = frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_1;
                    frontier_phi_3_4_ladder_6_ladder_7_ladder_2 = frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_2;
                    frontier_phi_3_4_ladder_6_ladder_7_ladder_3 = frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_3;
                }
                frontier_phi_3_4_ladder_6_ladder = frontier_phi_3_4_ladder_6_ladder_7_ladder;
                frontier_phi_3_4_ladder_6_ladder_1 = frontier_phi_3_4_ladder_6_ladder_7_ladder_1;
                frontier_phi_3_4_ladder_6_ladder_2 = frontier_phi_3_4_ladder_6_ladder_7_ladder_2;
                frontier_phi_3_4_ladder_6_ladder_3 = frontier_phi_3_4_ladder_6_ladder_7_ladder_3;
            }
            frontier_phi_3_4_ladder = frontier_phi_3_4_ladder_6_ladder;
            frontier_phi_3_4_ladder_1 = frontier_phi_3_4_ladder_6_ladder_1;
            frontier_phi_3_4_ladder_2 = frontier_phi_3_4_ladder_6_ladder_2;
            frontier_phi_3_4_ladder_3 = frontier_phi_3_4_ladder_6_ladder_3;
        }
        else
        {
            frontier_phi_3_4_ladder = 0.0;
            frontier_phi_3_4_ladder_1 = 0.0;
            frontier_phi_3_4_ladder_2 = 0.0;
            frontier_phi_3_4_ladder_3 = 0.0;
        }
        _340 = frontier_phi_3_4_ladder;
        _342 = frontier_phi_3_4_ladder_3;
        _344 = frontier_phi_3_4_ladder_2;
        _346 = frontier_phi_3_4_ladder_1;
    }
    SV_Target.x = _340;
    SV_Target.y = _342;
    SV_Target.z = _344;
    SV_Target.w = _346;
    discard_exit();
}


