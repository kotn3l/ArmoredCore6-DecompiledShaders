#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Ice_Ov_N_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Ice_Ov_N_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Ice_Ov_N_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Ice_Ov_N_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Ice_Ov_N_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1024;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _200 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _201 = _200 * _192;
    float _202 = _200 * _193;
    float _203 = _200 * _194;
    float _207 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = _207 * NORMAL.x;
    float _209 = _207 * NORMAL.y;
    float _210 = _207 * NORMAL.z;
    float _214 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _215 = _214 * TANGENT.x;
    float _216 = _214 * TANGENT.y;
    float _217 = _214 * TANGENT.z;
    float _250 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _254 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _258 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _262 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _272 = cbSceneParam._m0[71u].x - (_250 / _262);
    float _273 = cbSceneParam._m0[71u].y - (_254 / _262);
    float _274 = cbSceneParam._m0[71u].z - (_258 / _262);
    float _292 = inversesqrt(dot(vec3(_272, _273, _274), vec3(_272, _273, _274)));
    float _293 = _292 * _272;
    float _294 = _292 * _273;
    float _295 = _292 * _274;
    float _299 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _303 = dot(vec4(_293, _294, _295, 0.0), vec4(_299 * _208, _299 * _209, _299 * _210, 0.0));
    float _3772 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _311 = exp2(log2(1.0 - (isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0)))) * cbMtdParam._m0[12u].z);
    float _3783 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _312 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
    float _319 = (_312 * (cbMtdParam._m0[11u].x - cbMtdParam._m0[10u].x)) + cbMtdParam._m0[10u].x;
    float _320 = (_312 * (cbMtdParam._m0[11u].y - cbMtdParam._m0[10u].y)) + cbMtdParam._m0[10u].y;
    float _321 = (_312 * (cbMtdParam._m0[11u].z - cbMtdParam._m0[10u].z)) + cbMtdParam._m0[10u].z;
    vec4 _340 = texture(sampler2D(M_Ice_Ov_N_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _348 = (_340.x * 2.0) + (-1.0);
    float _350 = (_340.y * 2.0) + (-1.0);
    float _351 = dot(vec2(_348, _350), vec2(_348, _350));
    float _3794 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _356 = sqrt(1.0 - (isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))));
    float _359 = fma(_356, _208, fma(_350, _215, _348 * _201));
    float _362 = fma(_356, _209, fma(_350, _216, _348 * _202));
    float _365 = fma(_356, _210, fma(_350, _217, _348 * _203));
    float _369 = inversesqrt(dot(vec3(_359, _362, _365), vec3(_359, _362, _365)));
    float _380 = cbMtdParam._m0[13u].y + dot(vec4(_369 * _359, _369 * _362, _369 * _365, 0.0), vec4(cbMtdParam._m0[14u].yzw, 0.0));
    float _3805 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _382 = (isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))) * TEXCOORD_3.x;
    float _3816 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _383 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
    vec4 _395 = texture(sampler2D(M_Ice_Ov_N_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _414 = (((cbMtdParam._m0[9u].x * _395.x) - _319) * _383) + _319;
    float _415 = (((cbMtdParam._m0[9u].y * _395.y) - _320) * _383) + _320;
    float _416 = (((cbMtdParam._m0[9u].z * _395.z) - _321) * _383) + _321;
    float _421 = ((cbMtdParam._m0[14u].x - cbMtdParam._m0[12u].x) * _383) + cbMtdParam._m0[12u].x;
    float _423 = abs(_208);
    float _424 = abs(_209);
    float _425 = abs(_210);
    float _426 = _423 * _423;
    float _427 = _424 * _424;
    float _428 = _425 * _425;
    float _431 = _254 * 0.0500000007450580596923828125;
    float _442 = (cbTextureTilingScale._m0[4u].x * (_250 * 0.0500000007450580596923828125)) + cbTextureTilingScale._m0[4u].z;
    vec4 _445 = texture(sampler2D(M_Ice_Ov_N_snp_0_Texture2D_9, SS_BumpMap), vec2(_442, (cbTextureTilingScale._m0[4u].y * _431) + cbTextureTilingScale._m0[4u].w));
    float _452 = (cbTextureTilingScale._m0[4u].y * (_258 * 0.0500000007450580596923828125)) + cbTextureTilingScale._m0[4u].w;
    vec4 _453 = texture(sampler2D(M_Ice_Ov_N_snp_0_Texture2D_9, SS_BumpMap), vec2(_442, _452));
    vec4 _463 = texture(sampler2D(M_Ice_Ov_N_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _431) + cbTextureTilingScale._m0[4u].z, _452));
    vec4 _490 = texture(sampler2D(M_Ice_Ov_N_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    vec4 _509 = texture(sampler2D(M_Ice_Ov_N_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _515 = (_509.x * 2.0) + (-1.0);
    float _516 = (_509.y * 2.0) + (-1.0);
    float _3827 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _517 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
    float _522 = (_517 * _517) * (3.0 - (_517 * 2.0));
    float _532 = (((((((_453.x * _427) + (_445.x * _428)) + (_463.x * _426)) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].x) + _348) + (((_522 * (((_490.x * 2.0) + (-1.0)) - _515)) + _515) * cbMtdParam._m0[12u].y);
    float _533 = (((((((_453.y * _427) + (_445.y * _428)) + (_463.y * _426)) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].x) + _350) + (((_522 * (((_490.y * 2.0) + (-1.0)) - _516)) + _516) * cbMtdParam._m0[12u].y);
    float _536 = cbMtdParam._m0[13u].w + _383;
    float _3838 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _537 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
    float _541 = fma(_356, _208, fma(_533, _215, _532 * _201));
    float _544 = fma(_356, _209, fma(_533, _216, _532 * _202));
    float _547 = fma(_356, _210, fma(_533, _217, _532 * _203));
    float _551 = inversesqrt(dot(vec3(_541, _544, _547), vec3(_541, _544, _547)));
    float _552 = _551 * _541;
    float _553 = _551 * _544;
    float _554 = _551 * _547;
    float _3849 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _555 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
    float _3860 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _3871 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _3882 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _574 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _580 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _581 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _602 = fma(_554, cbSceneParam._m0[5u].z, fma(_553, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _552));
    float _605 = fma(_554, cbSceneParam._m0[6u].z, fma(_553, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _552));
    float _608 = fma(_554, cbSceneParam._m0[7u].z, fma(_553, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _552));
    uint _621 = uint(roundEven(NORMAL.w)) * 13u;
    uint _623 = (_621 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _629 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0)))) * cbInstanceData._m0[_623].x;
    float _630 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0)))) * cbInstanceData._m0[_623].y;
    float _631 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0)))) * cbInstanceData._m0[_623].z;
    float _3893 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _632 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
    float _3904 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _633 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
    float _3915 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _634 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
    vec4 _643 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _580, cbSceneParam._m0[86u].y * _581));
    float _646 = _643.x * TEXCOORD_3.w;
    float _647 = dot(vec3(_552, _553, _554), vec3(_293, _294, _295));
    float _650 = _647 * 2.0;
    float _654 = (_650 * _552) - _293;
    float _655 = (_650 * _553) - _294;
    float _656 = (_650 * _554) - _295;
    float _660 = abs(dot(vec3(_293, _294, _295), vec3(_552, _553, _554)));
    float _3926 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _661 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
    float _669 = 10.0 / (_574 + 10.0);
    float _670 = sqrt(_555);
    float _681 = exp2((_670 * 5.0) * log2(1.0 - (_661 * 0.999000012874603271484375))) / (4.0 - (_670 * 3.0));
    float _713 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _717 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _721 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1023;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _748 = fma(_721, cbModelParam._m0[26u].z, fma(_717, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _713));
        float _752 = fma(_721, cbModelParam._m0[27u].z, fma(_717, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _713));
        float _756 = fma(_721, cbModelParam._m0[28u].z, fma(_717, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _713));
        float _781 = _713 + _552;
        float _782 = _717 + _553;
        float _783 = _721 + _554;
        float _793 = fma(_783, cbModelParam._m0[26u].z, fma(_782, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _781)) - _748;
        float _794 = fma(_783, cbModelParam._m0[27u].z, fma(_782, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _781)) - _752;
        float _795 = fma(_783, cbModelParam._m0[28u].z, fma(_782, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _781)) - _756;
        float _799 = inversesqrt(dot(vec3(_793, _794, _795), vec3(_793, _794, _795)));
        float _812 = ((_799 * _793) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_748 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _813 = ((_799 * _794) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_752 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _814 = ((_799 * _795) / cbModelParam._m0[34u].z) + ((((((_756 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _817 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_812, _813, _814), 0.0);
        vec4 _824 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_812, _813, _814), 0.0);
        vec4 _831 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_812, _813, _814), 0.0);
        vec4 _838 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_812, _813, _814), 0.0);
        float _851 = exp2((_817.w + (-0.5)) * 20.0) * 2.0;
        float _852 = _851 * (_817.x + (-0.5));
        float _853 = _851 * (_817.y + (-0.5));
        float _854 = _851 * (_817.z + (-0.5));
        float _861 = exp2((_824.w + (-0.5)) * 20.0) * 2.0;
        float _862 = _861 * (_824.x + (-0.5));
        float _863 = _861 * (_824.y + (-0.5));
        float _864 = _861 * (_824.z + (-0.5));
        float _871 = exp2((_831.w + (-0.5)) * 20.0) * 2.0;
        float _872 = _871 * (_831.x + (-0.5));
        float _873 = _871 * (_831.y + (-0.5));
        float _874 = _871 * (_831.z + (-0.5));
        float _881 = exp2((_838.w + (-0.5)) * 20.0) * 2.0;
        float _882 = _881 * (_838.x + (-0.5));
        float _883 = _881 * (_838.y + (-0.5));
        float _884 = _881 * (_838.z + (-0.5));
        float _885 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _886 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
        float _887 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _888 = _852 * 0.5;
        float _889 = _862 * 0.5;
        float _890 = _872 * 0.5;
        float _891 = dot(vec3(_888, _889, _890), vec3(_888, _889, _890));
        float _896 = (_891 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_891);
        float _905 = (dot(vec3(_552, _553, _554), vec3(_896 * _888, _896 * _889, _896 * _890)) + 1.0) * 0.5;
        float _3952 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _915 = sqrt(((_889 * _889) + (_888 * _888)) + (_890 * _890)) / (_885 + 9.9999997473787516355514526367188e-06);
        float _3963 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _916 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _917 = _916 * 2.0;
        float _921 = (1.0 - _916) / (_916 + 1.0);
        float _3974 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _922 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _931 = ((((1.0 - _922) * (_917 + 2.0)) * exp2(log2(isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * (_917 + 1.0))) + _922) * _885;
        float _932 = _853 * 0.5;
        float _933 = _863 * 0.5;
        float _934 = _873 * 0.5;
        float _935 = dot(vec3(_932, _933, _934), vec3(_932, _933, _934));
        float _940 = (_935 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_935);
        float _948 = (dot(vec3(_552, _553, _554), vec3(_940 * _932, _940 * _933, _940 * _934)) + 1.0) * 0.5;
        float _3985 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _957 = sqrt(((_933 * _933) + (_932 * _932)) + (_934 * _934)) / (_886 + 9.9999997473787516355514526367188e-06);
        float _3996 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _958 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _959 = _958 * 2.0;
        float _963 = (1.0 - _958) / (_958 + 1.0);
        float _4007 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _964 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _973 = ((((1.0 - _964) * (_959 + 2.0)) * exp2(log2(isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) * (_959 + 1.0))) + _964) * _886;
        float _974 = _854 * 0.5;
        float _975 = _864 * 0.5;
        float _976 = _874 * 0.5;
        float _977 = dot(vec3(_974, _975, _976), vec3(_974, _975, _976));
        float _982 = (_977 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_977);
        float _990 = (dot(vec3(_552, _553, _554), vec3(_982 * _974, _982 * _975, _982 * _976)) + 1.0) * 0.5;
        float _4018 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _999 = sqrt(((_975 * _975) + (_974 * _974)) + (_976 * _976)) / (_887 + 9.9999997473787516355514526367188e-06);
        float _4029 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1000 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1001 = _1000 * 2.0;
        float _1005 = (1.0 - _1000) / (_1000 + 1.0);
        float _4040 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1006 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1015 = ((((1.0 - _1006) * (_1001 + 2.0)) * exp2(log2(isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * (_1001 + 1.0))) + _1006) * _887;
        _1023 = _854;
        _1025 = _853;
        _1026 = _852;
        _1027 = _864;
        _1028 = _863;
        _1029 = _862;
        _1030 = _874;
        _1031 = _873;
        _1032 = _872;
        _1033 = _887;
        _1034 = _886;
        _1035 = _885;
        _1036 = cbModelParam._m0[36u].z * (isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0)));
        _1037 = cbModelParam._m0[36u].z * (isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0)));
        _1038 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0)));
    }
    else
    {
        _1023 = _1024;
        _1025 = _1024;
        _1026 = _1024;
        _1027 = _1024;
        _1028 = _1024;
        _1029 = _1024;
        _1030 = _1024;
        _1031 = _1024;
        _1032 = _1024;
        _1033 = _1024;
        _1034 = _1024;
        _1035 = _1024;
        _1036 = 0.0;
        _1037 = 0.0;
        _1038 = 0.0;
    }
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1064 = fma(_721, cbModelParam._m0[30u].z, fma(_717, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _713));
        float _1068 = fma(_721, cbModelParam._m0[31u].z, fma(_717, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _713));
        float _1072 = fma(_721, cbModelParam._m0[32u].z, fma(_717, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _713));
        float _1095 = _713 + _552;
        float _1096 = _717 + _553;
        float _1097 = _721 + _554;
        float _1107 = fma(_1097, cbModelParam._m0[30u].z, fma(_1096, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1095)) - _1064;
        float _1108 = fma(_1097, cbModelParam._m0[31u].z, fma(_1096, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1095)) - _1068;
        float _1109 = fma(_1097, cbModelParam._m0[32u].z, fma(_1096, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1095)) - _1072;
        float _1113 = inversesqrt(dot(vec3(_1107, _1108, _1109), vec3(_1107, _1108, _1109)));
        float _1126 = ((_1113 * _1107) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1064 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1127 = ((_1113 * _1108) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1068 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1128 = ((_1113 * _1109) / cbModelParam._m0[35u].z) + ((((((_1072 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1130 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1126, _1127, _1128), 0.0);
        vec4 _1137 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1126, _1127, _1128), 0.0);
        vec4 _1144 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1126, _1127, _1128), 0.0);
        vec4 _1151 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1126, _1127, _1128), 0.0);
        float _1163 = exp2((_1130.w + (-0.5)) * 20.0) * 2.0;
        float _1164 = _1163 * (_1130.x + (-0.5));
        float _1165 = _1163 * (_1130.y + (-0.5));
        float _1166 = _1163 * (_1130.z + (-0.5));
        float _1173 = exp2((_1137.w + (-0.5)) * 20.0) * 2.0;
        float _1174 = _1173 * (_1137.x + (-0.5));
        float _1175 = _1173 * (_1137.y + (-0.5));
        float _1176 = _1173 * (_1137.z + (-0.5));
        float _1183 = exp2((_1144.w + (-0.5)) * 20.0) * 2.0;
        float _1184 = _1183 * (_1144.x + (-0.5));
        float _1185 = _1183 * (_1144.y + (-0.5));
        float _1186 = _1183 * (_1144.z + (-0.5));
        float _1193 = exp2((_1151.w + (-0.5)) * 20.0) * 2.0;
        float _1194 = _1193 * (_1151.x + (-0.5));
        float _1195 = _1193 * (_1151.y + (-0.5));
        float _1196 = _1193 * (_1151.z + (-0.5));
        float _1197 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1198 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1199 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1200 = _1164 * 0.5;
        float _1201 = _1174 * 0.5;
        float _1202 = _1184 * 0.5;
        float _1203 = dot(vec3(_1200, _1201, _1202), vec3(_1200, _1201, _1202));
        float _1208 = (_1203 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1203);
        float _1216 = (dot(vec3(_552, _553, _554), vec3(_1208 * _1200, _1208 * _1201, _1208 * _1202)) + 1.0) * 0.5;
        float _4081 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1225 = sqrt(((_1201 * _1201) + (_1200 * _1200)) + (_1202 * _1202)) / (_1197 + 9.9999997473787516355514526367188e-06);
        float _4092 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _1227 = _1226 * 2.0;
        float _1231 = (1.0 - _1226) / (_1226 + 1.0);
        float _4103 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1232 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _1241 = ((((1.0 - _1232) * (_1227 + 2.0)) * exp2(log2(isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * (_1227 + 1.0))) + _1232) * _1197;
        float _1242 = _1165 * 0.5;
        float _1243 = _1175 * 0.5;
        float _1244 = _1185 * 0.5;
        float _1245 = dot(vec3(_1242, _1243, _1244), vec3(_1242, _1243, _1244));
        float _1250 = (_1245 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1245);
        float _1258 = (dot(vec3(_552, _553, _554), vec3(_1250 * _1242, _1250 * _1243, _1250 * _1244)) + 1.0) * 0.5;
        float _4114 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1267 = sqrt(((_1243 * _1243) + (_1242 * _1242)) + (_1244 * _1244)) / (_1198 + 9.9999997473787516355514526367188e-06);
        float _4125 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _1269 = _1268 * 2.0;
        float _1273 = (1.0 - _1268) / (_1268 + 1.0);
        float _4136 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _1283 = ((((1.0 - _1274) * (_1269 + 2.0)) * exp2(log2(isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * (_1269 + 1.0))) + _1274) * _1198;
        float _1284 = _1166 * 0.5;
        float _1285 = _1176 * 0.5;
        float _1286 = _1186 * 0.5;
        float _1287 = dot(vec3(_1284, _1285, _1286), vec3(_1284, _1285, _1286));
        float _1292 = (_1287 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1287);
        float _1300 = (dot(vec3(_552, _553, _554), vec3(_1292 * _1284, _1292 * _1285, _1292 * _1286)) + 1.0) * 0.5;
        float _4147 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1309 = sqrt(((_1285 * _1285) + (_1284 * _1284)) + (_1286 * _1286)) / (_1199 + 9.9999997473787516355514526367188e-06);
        float _4158 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1311 = _1310 * 2.0;
        float _1315 = (1.0 - _1310) / (_1310 + 1.0);
        float _4169 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _1325 = ((((1.0 - _1316) * (_1311 + 2.0)) * exp2(log2(isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * (_1311 + 1.0))) + _1316) * _1199;
        _1333 = _1166;
        _1334 = _1165;
        _1335 = _1164;
        _1336 = _1176;
        _1337 = _1175;
        _1338 = _1174;
        _1339 = _1186;
        _1340 = _1185;
        _1341 = _1184;
        _1342 = _1199;
        _1343 = _1198;
        _1344 = _1197;
        _1345 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0)));
        _1346 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0)));
        _1347 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0)));
    }
    else
    {
        _1333 = _1024;
        _1334 = _1024;
        _1335 = _1024;
        _1336 = _1024;
        _1337 = _1024;
        _1338 = _1024;
        _1339 = _1024;
        _1340 = _1024;
        _1341 = _1024;
        _1342 = _1024;
        _1343 = _1024;
        _1344 = _1024;
        _1345 = 0.0;
        _1346 = 0.0;
        _1347 = 0.0;
    }
    float _1357 = (cbModelParam._m0[1u].x * (_1345 - _1036)) + _1036;
    float _1358 = (cbModelParam._m0[1u].x * (_1346 - _1037)) + _1037;
    float _1359 = (cbModelParam._m0[1u].x * (_1347 - _1038)) + _1038;
    float _1380 = fma(_1359, cbSceneParam._m0[89u].z, fma(_1358, cbSceneParam._m0[89u].y, _1357 * cbSceneParam._m0[89u].x));
    float _1383 = fma(_1359, cbSceneParam._m0[90u].z, fma(_1358, cbSceneParam._m0[90u].y, _1357 * cbSceneParam._m0[90u].x));
    float _1386 = fma(_1359, cbSceneParam._m0[91u].z, fma(_1358, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1357));
    float _1401 = _654 * 0.5;
    float _1402 = _655 * 0.5;
    float _1403 = _656 * 0.5;
    float _1404 = dot(vec4(_1401, _1402, _1403, 1.0), vec4(_1335, _1338, _1341, _1344));
    float _1407 = dot(vec4(_1401, _1402, _1403, 1.0), vec4(_1334, _1337, _1340, _1343));
    float _1410 = dot(vec4(_1401, _1402, _1403, 1.0), vec4(_1333, _1336, _1339, _1342));
    float _1444;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1417 = dot(vec4(_1401, _1402, _1403, 1.0), vec4(_1023, _1027, _1030, _1033));
        float _1421 = dot(vec4(_1401, _1402, _1403, 1.0), vec4(_1025, _1028, _1031, _1034));
        float _1425 = dot(vec4(_1401, _1402, _1403, 1.0), vec4(_1026, _1029, _1032, _1035));
        float _1432 = dot(vec4(cbModelParam._m0[39u]), vec4(_1401, _1402, _1403, 1.0));
        _1444 = dot(vec3(isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0)), isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0)), isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1432) ? 0.0 : (isnan(0.0) ? _1432 : max(0.0, _1432))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1444 = 1.0;
    }
    float _1455;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1446 = dot(vec4(cbModelParam._m0[40u]), vec4(_1401, _1402, _1403, 1.0));
        _1455 = dot(vec3(isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0)), isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0)), isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1446) ? 0.0 : (isnan(0.0) ? _1446 : max(0.0, _1446))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1455 = 1.0;
    }
    float _1459 = (_1455 * cbModelParam._m0[1u].x) + (_1444 * (1.0 - cbModelParam._m0[1u].x));
    float _1469 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _555);
    float _1470 = isnan(_1469) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1469 : min(cbModelParam._m0[25u].z, _1469));
    float _1550;
    float _1552;
    float _1554;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1517 = fma(_721, cbModelParam._m0[13u].z, fma(_717, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _713)) + cbModelParam._m0[13u].w;
        float _1521 = fma(_721, cbModelParam._m0[14u].z, fma(_717, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _713)) + cbModelParam._m0[14u].w;
        float _1525 = fma(_721, cbModelParam._m0[15u].z, fma(_717, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _713)) + cbModelParam._m0[15u].w;
        float _1528 = fma(_656, cbModelParam._m0[13u].z, fma(_655, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _654));
        float _1531 = fma(_656, cbModelParam._m0[14u].z, fma(_655, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _654));
        float _1534 = fma(_656, cbModelParam._m0[15u].z, fma(_655, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _654));
        float _1562;
        if (_1528 > 0.0)
        {
            _1562 = abs((1.0 - _1517) / _1528);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1528 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1517 + 1.0) / _1528);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1562 = frontier_phi_14_12_ladder;
        }
        float _1787;
        if (_1531 > 0.0)
        {
            _1787 = abs((1.0 - _1521) / _1531);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1531 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1521 + 1.0) / _1531);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1787 = frontier_phi_23_19_ladder;
        }
        float _2082;
        if (_1534 > 0.0)
        {
            _2082 = abs((1.0 - _1525) / _1534);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1534 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1525 + 1.0) / _1534);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2082 = frontier_phi_35_30_ladder;
        }
        float _2084 = isnan(_1787) ? _1562 : (isnan(_1562) ? _1787 : min(_1562, _1787));
        float _2085 = isnan(_2082) ? _2084 : (isnan(_2084) ? _2082 : min(_2084, _2082));
        float _2089 = (_2085 * _1528) + _1517;
        float _2090 = (_2085 * _1531) + _1521;
        float _2091 = (_2085 * _1534) + _1525;
        float _2092 = _2085 * 9.9999997473787516355514526367188e-05;
        float _2094 = (-1.0) - _2092;
        float _2096 = _2092 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2091 > _2096) || ((_2091 < _2094) || ((_2090 > _2096) || ((_2090 < _2094) || ((_2089 < _2094) || (_2089 > _2096))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2236 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2091, cbModelParam._m0[9u].z, fma(_2090, cbModelParam._m0[9u].y, _2089 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2091, cbModelParam._m0[10u].z, fma(_2090, cbModelParam._m0[10u].y, _2089 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2091, cbModelParam._m0[11u].z, fma(_2090, cbModelParam._m0[11u].y, _2089 * cbModelParam._m0[11u].x))), _1470);
            frontier_phi_13_35_ladder = _2236.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2236.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2236.x * cbModelParam._m0[1u].y;
        }
        _1550 = frontier_phi_13_35_ladder_2;
        _1552 = frontier_phi_13_35_ladder_1;
        _1554 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1538 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_654, _655, _656), _1470);
        _1550 = _1538.x * cbModelParam._m0[1u].y;
        _1552 = _1538.y * cbModelParam._m0[1u].y;
        _1554 = _1538.z * cbModelParam._m0[1u].y;
    }
    float _1558 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _555);
    float _1559 = isnan(_1558) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1558 : min(cbModelParam._m0[25u].w, _1558));
    float _1652;
    float _1654;
    float _1656;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1616 = fma(_721, cbModelParam._m0[21u].z, fma(_717, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _713)) + cbModelParam._m0[21u].w;
        float _1620 = fma(_721, cbModelParam._m0[22u].z, fma(_717, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _713)) + cbModelParam._m0[22u].w;
        float _1624 = fma(_721, cbModelParam._m0[23u].z, fma(_717, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _713)) + cbModelParam._m0[23u].w;
        float _1627 = fma(_656, cbModelParam._m0[21u].z, fma(_655, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _654));
        float _1630 = fma(_656, cbModelParam._m0[22u].z, fma(_655, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _654));
        float _1633 = fma(_656, cbModelParam._m0[23u].z, fma(_655, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _654));
        float _1792;
        if (_1627 > 0.0)
        {
            _1792 = abs((1.0 - _1616) / _1627);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1627 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1616 + 1.0) / _1627);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1792 = frontier_phi_25_21_ladder;
        }
        float _2109;
        if (_1630 > 0.0)
        {
            _2109 = abs((1.0 - _1620) / _1630);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1630 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1620 + 1.0) / _1630);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2109 = frontier_phi_37_32_ladder;
        }
        float _2436;
        if (_1633 > 0.0)
        {
            _2436 = abs((1.0 - _1624) / _1633);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1633 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1624 + 1.0) / _1633);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2436 = frontier_phi_47_44_ladder;
        }
        float _2438 = isnan(_2109) ? _1792 : (isnan(_1792) ? _2109 : min(_1792, _2109));
        float _2439 = isnan(_2436) ? _2438 : (isnan(_2438) ? _2436 : min(_2438, _2436));
        float _2443 = (_2439 * _1627) + _1616;
        float _2444 = (_2439 * _1630) + _1620;
        float _2445 = (_2439 * _1633) + _1624;
        float _2446 = _2439 * 9.9999997473787516355514526367188e-05;
        float _2447 = (-1.0) - _2446;
        float _2449 = _2446 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2445 > _2449) || ((_2445 < _2447) || ((_2444 > _2449) || ((_2444 < _2447) || ((_2443 < _2447) || (_2443 > _2449))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2563 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2445, cbModelParam._m0[17u].z, fma(_2444, cbModelParam._m0[17u].y, _2443 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2445, cbModelParam._m0[18u].z, fma(_2444, cbModelParam._m0[18u].y, _2443 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2445, cbModelParam._m0[19u].z, fma(_2444, cbModelParam._m0[19u].y, _2443 * cbModelParam._m0[19u].x))), _1559);
            frontier_phi_22_47_ladder = _2563.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2563.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2563.x * cbModelParam._m0[1u].z;
        }
        _1652 = frontier_phi_22_47_ladder_2;
        _1654 = frontier_phi_22_47_ladder_1;
        _1656 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1636 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_654, _655, _656), _1559);
        _1652 = _1636.x * cbModelParam._m0[1u].z;
        _1654 = _1636.y * cbModelParam._m0[1u].z;
        _1656 = _1636.z * cbModelParam._m0[1u].z;
    }
    float _1668 = ((((1.0 - _681) * ((_670 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_681 * _670)) * _646;
    float _1669 = _1668 * ((cbModelParam._m0[1u].w * (_1652 - _1550)) + _1550);
    float _1670 = _1668 * ((cbModelParam._m0[1u].w * (_1654 - _1552)) + _1552);
    float _1671 = _1668 * ((cbModelParam._m0[1u].w * (_1656 - _1554)) + _1554);
    float _1674 = fma(_1671, cbSceneParam._m0[89u].z, fma(_1670, cbSceneParam._m0[89u].y, _1669 * cbSceneParam._m0[89u].x));
    float _1677 = fma(_1671, cbSceneParam._m0[90u].z, fma(_1670, cbSceneParam._m0[90u].y, _1669 * cbSceneParam._m0[90u].x));
    float _1680 = fma(_1671, cbSceneParam._m0[91u].z, fma(_1670, cbSceneParam._m0[91u].y, _1669 * cbSceneParam._m0[91u].x));
    float _1691 = _580 / cbSceneParam._m0[86u].x;
    float _1699 = (cbSceneParam._m0[88u].y * (1.0 - _555)) + cbSceneParam._m0[88u].z;
    float _4295 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
    float _1701 = (isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * 5.0;
    float _1706 = (_669 * cbMtdParam._m0[12u].w) * dot(vec3(_552, _553, _554), vec3(1.0, 0.0, 0.0));
    vec4 _1716 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1706 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1706 + _1691) * cbSceneParam._m0[86u].x, _581), _1701).w) + _1691) * cbSceneParam._m0[86u].x, _581), _1701);
    float _1732 = 1.0 - _1716.w;
    float _1766 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1770 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1774 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1778 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1779 = _1766 / _1778;
    float _1780 = _1770 / _1778;
    float _1781 = _1774 / _1778;
    float _1928;
    float _1929;
    float _1930;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1808 = ((uint(_1781 > cbSceneParam._m0[59u].y) + uint(_1781 > cbSceneParam._m0[59u].x)) + uint(_1781 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1809 = _1808 + 43u;
        uint _1817 = _1808 + 44u;
        uint _1825 = _1808 + 45u;
        uint _1833 = _1808 + 46u;
        float _1844 = fma(_1778, cbSceneParam._m0[_1809].w, fma(_1774, cbSceneParam._m0[_1809].z, fma(_1770, cbSceneParam._m0[_1809].y, _1766 * cbSceneParam._m0[_1809].x)));
        float _1848 = fma(_1778, cbSceneParam._m0[_1817].w, fma(_1774, cbSceneParam._m0[_1817].z, fma(_1770, cbSceneParam._m0[_1817].y, _1766 * cbSceneParam._m0[_1817].x)));
        float _1856 = fma(_1778, cbSceneParam._m0[_1833].w, fma(_1774, cbSceneParam._m0[_1833].z, fma(_1770, cbSceneParam._m0[_1833].y, _1766 * cbSceneParam._m0[_1833].x)));
        float _1861 = cbSceneParam._m0[33u].z * _1856;
        float _1863 = cbSceneParam._m0[33u].w * _1856;
        float _1866 = fma(_1778, cbSceneParam._m0[_1825].w, fma(_1774, cbSceneParam._m0[_1825].z, fma(_1770, cbSceneParam._m0[_1825].y, _1766 * cbSceneParam._m0[_1825].x))) / _1856;
        float _1914 = (cbSceneParam._m0[33u].x - sqrt(((_1780 * _1780) + (_1779 * _1779)) + (_1781 * _1781))) * cbSceneParam._m0[33u].y;
        float _4306 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
        float _1921 = (isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1861 + _1844) / _1856, (_1863 + _1848) / _1856), _1866), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1863 + _1844) / _1856, (_1848 - _1861) / _1856), _1866), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1844 - _1861) / _1856, (_1848 - _1863) / _1856), _1866), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1844 - _1863) / _1856, (_1861 + _1848) / _1856), _1866), 0.0)).x), vec4(0.25)));
        _1928 = 1.0 - (_1921 * cbSceneParam._m0[34u].x);
        _1929 = 1.0 - (_1921 * cbSceneParam._m0[34u].y);
        _1930 = 1.0 - (_1921 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1928 = 1.0;
        _1929 = 1.0;
        _1930 = 1.0;
    }
    float _1994;
    float _1996;
    float _1998;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1982 = fma(_1778, cbSceneParam._m0[63u].w, fma(_1774, cbSceneParam._m0[63u].z, fma(_1770, cbSceneParam._m0[63u].y, _1766 * cbSceneParam._m0[63u].x)));
        float _1983 = fma(_1778, cbSceneParam._m0[60u].w, fma(_1774, cbSceneParam._m0[60u].z, fma(_1770, cbSceneParam._m0[60u].y, _1766 * cbSceneParam._m0[60u].x))) / _1982;
        float _1984 = fma(_1778, cbSceneParam._m0[61u].w, fma(_1774, cbSceneParam._m0[61u].z, fma(_1770, cbSceneParam._m0[61u].y, _1766 * cbSceneParam._m0[61u].x))) / _1982;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1983 >= cbSceneParam._m0[64u].x) && (_1984 >= cbSceneParam._m0[64u].y)) && (_1983 <= cbSceneParam._m0[64u].z)) && (_1984 <= cbSceneParam._m0[64u].w))
        {
            float _2122 = fma(_1778, cbSceneParam._m0[62u].w, fma(_1774, cbSceneParam._m0[62u].z, fma(_1770, cbSceneParam._m0[62u].y, _1766 * cbSceneParam._m0[62u].x))) / _1982;
            float _2126 = isnan(cbSceneParam._m0[41u].w) ? _2122 : (isnan(_2122) ? cbSceneParam._m0[41u].w : max(_2122, cbSceneParam._m0[41u].w));
            float _2169 = (cbSceneParam._m0[33u].x - sqrt(((_1780 * _1780) + (_1779 * _1779)) + (_1781 * _1781))) * cbSceneParam._m0[33u].y;
            float _4322 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
            float _2176 = (isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1983, cbSceneParam._m0[33u].w + _1984), _2126), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1983, _1984 - cbSceneParam._m0[33u].z), _2126), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1983 - cbSceneParam._m0[33u].z, _1984 - cbSceneParam._m0[33u].w), _2126), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1983 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1984), _2126), 0.0)).x), vec4(0.25)));
            float _2180 = 1.0 - (_2176 * cbSceneParam._m0[34u].x);
            float _2181 = 1.0 - (_2176 * cbSceneParam._m0[34u].y);
            float _2182 = 1.0 - (_2176 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2182) ? _1930 : (isnan(_1930) ? _2182 : min(_1930, _2182));
            frontier_phi_34_33_ladder_1 = isnan(_2181) ? _1929 : (isnan(_1929) ? _2181 : min(_1929, _2181));
            frontier_phi_34_33_ladder_2 = isnan(_2180) ? _1928 : (isnan(_1928) ? _2180 : min(_1928, _2180));
        }
        else
        {
            frontier_phi_34_33_ladder = _1930;
            frontier_phi_34_33_ladder_1 = _1929;
            frontier_phi_34_33_ladder_2 = _1928;
        }
        _1994 = frontier_phi_34_33_ladder_2;
        _1996 = frontier_phi_34_33_ladder_1;
        _1998 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1994 = _1928;
        _1996 = _1929;
        _1998 = _1930;
    }
    uvec4 _2003 = floatBitsToUint(cbInstanceData._m0[_621 + 5u]);
    uint _2005 = _2003.x * 14u;
    uint _2006 = _2005 + 13u;
    float _2013 = _646 + (-1.0);
    float _2018 = (cbLight._m0[_2006].x * _2013) + 1.0;
    float _2019 = (cbLight._m0[_2006].y * _2013) + 1.0;
    float _2020 = (cbLight._m0[_2006].z * _2013) + 1.0;
    float _2021 = (cbLight._m0[_2006].w * _2013) + 1.0;
    uint _2022 = _2005 + 5u;
    float _2028 = isnan(1.0) ? _2019 : (isnan(_2019) ? 1.0 : min(_2019, 1.0));
    uint _2032 = _2005 + 4u;
    float _2041 = isnan(1.0) ? _2018 : (isnan(_2018) ? 1.0 : min(_2018, 1.0));
    uint _2045 = _2005 | 1u;
    float _2056 = dot(vec3(cbLight._m0[_2005].xyz), vec3(_552, _553, _554));
    float _2059 = dot(vec3(cbLight._m0[_2045].xyz), vec3(_552, _553, _554));
    float _4358 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
    float _4369 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2064 = (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0))) * 0.3183098733425140380859375;
    float _2066 = (isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0))) * 0.3183098733425140380859375;
    float _2073 = ((cbLight._m0[_2022].x * _2028) * _2066) + (((cbLight._m0[_2032].x * _1994) * _2041) * _2064);
    float _2074 = ((_2028 * cbLight._m0[_2022].y) * _2066) + (((cbLight._m0[_2032].y * _1996) * _2041) * _2064);
    float _2075 = ((_2028 * cbLight._m0[_2022].z) * _2066) + (((cbLight._m0[_2032].z * _1998) * _2041) * _2064);
    uvec4 _2079 = floatBitsToUint(cbLight._m0[_2005 + 12u]);
    bool _2081 = _2079.x == 0u;
    float _2183;
    float _2185;
    float _2187;
    if (_2081)
    {
        _2183 = _2073;
        _2185 = _2074;
        _2187 = _2075;
    }
    else
    {
        uint _2191 = _2005 + 6u;
        float _2207 = (dot(vec3(cbLight._m0[_2005 + 2u].xyz), vec3(_552, _553, _554)) * 0.5) + 0.5;
        float _2208 = _2207 * _2207;
        float _4380 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
        float _2209 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
        float _2210 = isnan(1.0) ? _2020 : (isnan(_2020) ? 1.0 : min(_2020, 1.0));
        _2183 = (((cbLight._m0[_2191].x * 0.3183098733425140380859375) * _2209) * _2210) + _2073;
        _2185 = (((cbLight._m0[_2191].y * 0.3183098733425140380859375) * _2209) * _2210) + _2074;
        _2187 = (((cbLight._m0[_2191].z * 0.3183098733425140380859375) * _2209) * _2210) + _2075;
    }
    bool _2190 = _2079.y == 0u;
    float _2245;
    float _2247;
    float _2249;
    if (_2190)
    {
        _2245 = _2183;
        _2247 = _2185;
        _2249 = _2187;
    }
    else
    {
        uint _2407 = _2005 + 7u;
        float _2423 = (dot(vec3(cbLight._m0[_2005 + 3u].xyz), vec3(_552, _553, _554)) * 0.5) + 0.5;
        float _2424 = _2423 * _2423;
        float _4396 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
        float _2425 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
        float _2426 = isnan(1.0) ? _2021 : (isnan(_2021) ? 1.0 : min(_2021, 1.0));
        _2245 = (((cbLight._m0[_2407].x * 0.3183098733425140380859375) * _2425) * _2426) + _2183;
        _2247 = (((cbLight._m0[_2407].y * 0.3183098733425140380859375) * _2425) * _2426) + _2185;
        _2249 = (((cbLight._m0[_2407].z * 0.3183098733425140380859375) * _2425) * _2426) + _2187;
    }
    uint _2252 = _2005 + 8u;
    float _2265 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2005].w)) * _555) * 0.949999988079071044921875);
    float _2266 = _2265 * _2265;
    float _2267 = cbLight._m0[_2005].x + _293;
    float _2268 = cbLight._m0[_2005].y + _294;
    float _2269 = cbLight._m0[_2005].z + _295;
    float _2273 = inversesqrt(dot(vec3(_2267, _2268, _2269), vec3(_2267, _2268, _2269)));
    float _2274 = _2273 * _2267;
    float _2275 = _2273 * _2268;
    float _2276 = _2273 * _2269;
    float _2277 = dot(vec3(_552, _553, _554), vec3(cbLight._m0[_2005].xyz));
    float _4412 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
    float _2280 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
    float _4423 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _2281 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
    float _2282 = dot(vec3(_552, _553, _554), vec3(_2274, _2275, _2276));
    float _4434 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
    float _2285 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
    float _2286 = dot(vec3(cbLight._m0[_2005].xyz), vec3(_2274, _2275, _2276));
    float _4445 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
    float _2290 = _2266 * _2266;
    float _2294 = ((_2285 * _2285) * (_2290 + (-1.0))) + 1.0;
    float _2305 = (exp2(log2(1.0 - (isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2306 = 1.0 - _2266;
    float _2317 = (0.5 / (((_2281 * ((_2280 * _2306) + _2266)) + 9.9999999392252902907785028219223e-09) + (((_2281 * _2306) + _2266) * _2280))) * _2280;
    float _4456 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
    float _2319 = (isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0))) * (_2290 / ((_2294 * _2294) * 3.141590118408203125));
    uint _2333 = _2005 + 9u;
    float _2344 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2045].w)) * _555) * 0.949999988079071044921875);
    float _2345 = _2344 * _2344;
    float _2346 = cbLight._m0[_2045].x + _293;
    float _2347 = cbLight._m0[_2045].y + _294;
    float _2348 = cbLight._m0[_2045].z + _295;
    float _2352 = inversesqrt(dot(vec3(_2346, _2347, _2348), vec3(_2346, _2347, _2348)));
    float _2353 = _2352 * _2346;
    float _2354 = _2352 * _2347;
    float _2355 = _2352 * _2348;
    float _2356 = dot(vec3(_552, _553, _554), vec3(cbLight._m0[_2045].xyz));
    float _4467 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
    float _2359 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
    float _2360 = dot(vec3(_552, _553, _554), vec3(_2353, _2354, _2355));
    float _4478 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
    float _2363 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
    float _2364 = dot(vec3(cbLight._m0[_2045].xyz), vec3(_2353, _2354, _2355));
    float _4489 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
    float _2368 = _2345 * _2345;
    float _2372 = ((_2363 * _2363) * (_2368 + (-1.0))) + 1.0;
    float _2381 = (exp2(log2(1.0 - (isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2382 = 1.0 - _2345;
    float _2392 = (0.5 / (((_2281 * ((_2359 * _2382) + _2345)) + 9.9999999392252902907785028219223e-09) + (((_2281 * _2382) + _2345) * _2359))) * _2359;
    float _4500 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
    float _2394 = (isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0))) * (_2368 / ((_2372 * _2372) * 3.141590118408203125));
    float _2404 = (((_2381 * cbLight._m0[_2333].x) * _2394) * _2028) + ((((cbLight._m0[_2252].x * _1994) * _2305) * _2319) * _2041);
    float _2405 = (((_2381 * cbLight._m0[_2333].y) * _2394) * _2028) + ((((cbLight._m0[_2252].y * _1996) * _2305) * _2319) * _2041);
    float _2406 = (((_2381 * cbLight._m0[_2333].z) * _2394) * _2028) + ((((cbLight._m0[_2252].z * _1998) * _2305) * _2319) * _2041);
    float _2462;
    float _2464;
    float _2466;
    if (_2081)
    {
        _2462 = _2404;
        _2464 = _2405;
        _2466 = _2406;
    }
    else
    {
        uint _2468 = _2005 + 2u;
        uint _2472 = _2005 + 10u;
        float _2486 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2468].w)) * _555) * 0.949999988079071044921875);
        float _2487 = _2486 * _2486;
        float _2488 = cbLight._m0[_2468].x + _293;
        float _2489 = cbLight._m0[_2468].y + _294;
        float _2490 = cbLight._m0[_2468].z + _295;
        float _2494 = inversesqrt(dot(vec3(_2488, _2489, _2490), vec3(_2488, _2489, _2490)));
        float _2495 = _2494 * _2488;
        float _2496 = _2494 * _2489;
        float _2497 = _2494 * _2490;
        float _2498 = dot(vec3(_552, _553, _554), vec3(cbLight._m0[_2468].xyz));
        float _4511 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
        float _2501 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
        float _2502 = dot(vec3(_552, _553, _554), vec3(_2495, _2496, _2497));
        float _4522 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
        float _2505 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
        float _2506 = dot(vec3(cbLight._m0[_2468].xyz), vec3(_2495, _2496, _2497));
        float _4533 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
        float _2510 = _2487 * _2487;
        float _2514 = ((_2505 * _2505) * (_2510 + (-1.0))) + 1.0;
        float _2523 = (exp2(log2(1.0 - (isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2524 = 1.0 - _2487;
        float _2534 = (0.5 / (((_2281 * ((_2501 * _2524) + _2487)) + 9.9999999392252902907785028219223e-09) + (((_2281 * _2524) + _2487) * _2501))) * _2501;
        float _4544 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
        float _2536 = (isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0))) * (_2510 / ((_2514 * _2514) * 3.141590118408203125));
        float _2537 = isnan(1.0) ? _2020 : (isnan(_2020) ? 1.0 : min(_2020, 1.0));
        _2462 = (((_2523 * cbLight._m0[_2472].x) * _2536) * _2537) + _2404;
        _2464 = (((_2523 * cbLight._m0[_2472].y) * _2536) * _2537) + _2405;
        _2466 = (((_2523 * cbLight._m0[_2472].z) * _2536) * _2537) + _2406;
    }
    float _2568;
    float _2570;
    float _2572;
    if (_2190)
    {
        _2568 = _2462;
        _2570 = _2464;
        _2572 = _2466;
    }
    else
    {
        uint _2579 = _2005 + 3u;
        uint _2583 = _2005 + 11u;
        float _2597 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2579].w)) * _555) * 0.949999988079071044921875);
        float _2598 = _2597 * _2597;
        float _2599 = cbLight._m0[_2579].x + _293;
        float _2600 = cbLight._m0[_2579].y + _294;
        float _2601 = cbLight._m0[_2579].z + _295;
        float _2605 = inversesqrt(dot(vec3(_2599, _2600, _2601), vec3(_2599, _2600, _2601)));
        float _2606 = _2605 * _2599;
        float _2607 = _2605 * _2600;
        float _2608 = _2605 * _2601;
        float _2609 = dot(vec3(_552, _553, _554), vec3(cbLight._m0[_2579].xyz));
        float _4560 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
        float _2612 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
        float _2613 = dot(vec3(_552, _553, _554), vec3(_2606, _2607, _2608));
        float _4571 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
        float _2616 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
        float _2617 = dot(vec3(cbLight._m0[_2579].xyz), vec3(_2606, _2607, _2608));
        float _4582 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
        float _2621 = _2598 * _2598;
        float _2625 = ((_2616 * _2616) * (_2621 + (-1.0))) + 1.0;
        float _2634 = (exp2(log2(1.0 - (isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2635 = 1.0 - _2598;
        float _2645 = (0.5 / (((_2281 * ((_2612 * _2635) + _2598)) + 9.9999999392252902907785028219223e-09) + (((_2281 * _2635) + _2598) * _2612))) * _2612;
        float _4593 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
        float _2647 = (isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0))) * (_2621 / ((_2625 * _2625) * 3.141590118408203125));
        float _2648 = isnan(1.0) ? _2021 : (isnan(_2021) ? 1.0 : min(_2021, 1.0));
        _2568 = (((_2634 * cbLight._m0[_2583].x) * _2647) * _2648) + _2462;
        _2570 = (((_2634 * cbLight._m0[_2583].y) * _2647) * _2648) + _2464;
        _2572 = (((_2634 * cbLight._m0[_2583].z) * _2647) * _2648) + _2466;
    }
    float _2714;
    float _2716;
    float _2718;
    float _2720;
    float _2722;
    float _2724;
    if (_2003.y == 0u)
    {
        uvec4 _2669 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2670 = _2669.x;
        uint _2681 = uint((float(_2669.y) * floor(float(uint(cbSceneParam._m0[85u].y * _581) / _2670))) + floor(float(uint(cbSceneParam._m0[85u].x * _580) / _2670)));
        float _2691 = (log2(_1781 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2692 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
        uint _2695 = uint(isnan(14.0) ? _2692 : (isnan(_2692) ? 14.0 : min(_2692, 14.0)));
        uvec4 _2700 = texelFetch(g_lightClusterGridBuffer, int(((_2695 << 2u) + (_2681 << 6u)) >> 2u));
        uint _2701 = _2700.x;
        uint _2702 = _2669.z;
        float _2851;
        float _2853;
        float _2855;
        float _2857;
        float _2859;
        float _2861;
        if (((((1u << ((_2702 >> 4u) & 15u)) + 4294967295u) & _2701) == 0u) || ((_2702 & 240u) == 0u))
        {
            _2851 = 0.0;
            _2853 = 0.0;
            _2855 = 0.0;
            _2857 = 0.0;
            _2859 = 0.0;
            _2861 = 0.0;
        }
        else
        {
            float _2852;
            float _2854;
            float _2856;
            float _2858;
            float _2860;
            float _2862;
            float _3027 = 0.0;
            float _3028 = 0.0;
            float _3029 = 0.0;
            float _3030 = 0.0;
            float _3031 = 0.0;
            float _3032 = 0.0;
            uint _3033 = 0u;
            uint _3042;
            bool _3043;
            for (;;)
            {
                _3042 = texelFetch(g_lightClassification, int((((_2695 << 5u) + (_2681 << 9u)) + (_3033 << 2u)) >> 2u)).x;
                _3043 = _3042 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3043)
                {
                    frontier_phi_66_pred = _3032;
                    frontier_phi_66_pred_1 = _3031;
                    frontier_phi_66_pred_2 = _3030;
                    frontier_phi_66_pred_3 = _3029;
                    frontier_phi_66_pred_4 = _3028;
                    frontier_phi_66_pred_5 = _3027;
                }
                else
                {
                    float _3151;
                    float _3152;
                    float _3153;
                    float _3154;
                    float _3155;
                    float _3156;
                    uint _3157;
                    _3151 = _3027;
                    _3152 = _3028;
                    _3153 = _3029;
                    _3154 = _3030;
                    _3155 = _3031;
                    _3156 = _3032;
                    _3157 = _3042;
                    float _3083;
                    float _3084;
                    float _3085;
                    float _3086;
                    float _3087;
                    float _3088;
                    for (;;)
                    {
                        uint _3161 = uint(findLSB(_3157)) + (_3033 << 5u);
                        uint _3158 = (_3157 + 4294967295u) & _3157;
                        uint _3163 = _3161 * 48u;
                        vec4 _3177 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3163)).x, texelFetch(g_PointLightRenderingBuffer, int(_3163 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3163 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3163 + 3u)).x));
                        uint _3183 = (_3161 * 48u) + 4u;
                        vec4 _3196 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3183)).x, texelFetch(g_PointLightRenderingBuffer, int(_3183 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3183 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3183 + 3u)).x));
                        uint _3202 = (_3161 * 48u) + 8u;
                        vec3 _3213 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3202)).x, texelFetch(g_PointLightRenderingBuffer, int(_3202 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3202 + 2u)).x));
                        float _3217 = _3177.x - _1779;
                        float _3218 = _3177.y - _1780;
                        float _3219 = _3177.z - _1781;
                        float _3220 = dot(vec3(_3217, _3218, _3219), vec3(_3217, _3218, _3219));
                        float _3223 = inversesqrt(_3220);
                        float _3224 = _3223 * _3217;
                        float _3225 = _3223 * _3218;
                        float _3226 = _3223 * _3219;
                        float _3227 = dot(vec3(_602, _605, _608), vec3(_3224, _3225, _3226));
                        float _3232 = 1.0 - (_3220 * _3177.w);
                        float _4619 = isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0));
                        float _3233 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
                        float _3234 = sqrt(_3220) * _3196.w;
                        float _3237 = 1.39999997615814208984375 / (_3234 + 1.39999997615814208984375);
                        float _3238 = _3237 * _3237;
                        float _3241 = ((1.0 - _3238) * _3227) + _3238;
                        float _3244 = _3234 * _3234;
                        float _3248 = ((isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0))) * _3233) / ((_3244 * 0.699999988079071044921875) + 1.0);
                        float _3252 = (-0.0) - _1779;
                        float _3253 = (-0.0) - _1780;
                        float _3254 = (-0.0) - _1781;
                        float _3258 = inversesqrt(dot(vec3(_3252, _3253, _3254), vec3(_3252, _3253, _3254)));
                        float _3259 = _3258 * _3252;
                        float _3260 = _3258 * _3253;
                        float _3261 = _3258 * _3254;
                        float _3268 = exp2(log2(1.0 / ((_3244 * 3.5) + 5.0)) * 0.25);
                        float _3269 = 1.0 - _670;
                        float _3276 = sqrt(1.0 - ((1.0 - (_3269 * _3269)) * (1.0 - (_3268 * _3268))));
                        float _3277 = _3276 * _3276;
                        float _3278 = _3277 * _3277;
                        float _3279 = _3259 + _3224;
                        float _3280 = _3260 + _3225;
                        float _3281 = _3261 + _3226;
                        float _3285 = inversesqrt(dot(vec3(_3279, _3280, _3281), vec3(_3279, _3280, _3281)));
                        float _3289 = dot(vec3(_602, _605, _608), vec3(_3259, _3260, _3261));
                        float _4635 = isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0));
                        float _3292 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
                        float _3293 = dot(vec3(_602, _605, _608), vec3(_3285 * _3279, _3285 * _3280, _3285 * _3281));
                        float _4646 = isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0));
                        float _3296 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
                        float _3300 = ((_3296 * _3296) * (_3278 + (-1.0))) + 1.0;
                        float _3301 = _3237 * _3277;
                        float _3302 = _3301 * _3301;
                        float _3305 = ((1.0 - _3302) * _3227) + _3302;
                        float _4657 = isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0));
                        float _3306 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
                        float _3307 = 1.0 - _3277;
                        float _3317 = (0.5 / (((_3306 * ((_3292 * _3307) + _3277)) + 9.9999999392252902907785028219223e-09) + (((_3306 * _3307) + _3277) * _3292))) * _3306;
                        float _4668 = isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0));
                        float _3328 = (((_3278 * 3.1415927410125732421875) * (isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0)))) / ((_3300 * _3300) * ((_3244 * 2.1991131305694580078125) + 3.141590118408203125))) * _3233;
                        _3086 = (_3248 * _3196.x) + _3154;
                        _3087 = (_3248 * _3196.y) + _3155;
                        _3088 = (_3248 * _3196.z) + _3156;
                        _3083 = (_3328 * _3213.x) + _3151;
                        _3084 = (_3328 * _3213.y) + _3152;
                        _3085 = (_3328 * _3213.z) + _3153;
                        if (_3158 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3151 = _3083;
                            _3152 = _3084;
                            _3153 = _3085;
                            _3154 = _3086;
                            _3155 = _3087;
                            _3156 = _3088;
                            _3157 = _3158;
                        }
                    }
                    frontier_phi_66_pred = _3088;
                    frontier_phi_66_pred_1 = _3087;
                    frontier_phi_66_pred_2 = _3086;
                    frontier_phi_66_pred_3 = _3085;
                    frontier_phi_66_pred_4 = _3084;
                    frontier_phi_66_pred_5 = _3083;
                }
                _2862 = frontier_phi_66_pred;
                _2860 = frontier_phi_66_pred_1;
                _2858 = frontier_phi_66_pred_2;
                _2856 = frontier_phi_66_pred_3;
                _2854 = frontier_phi_66_pred_4;
                _2852 = frontier_phi_66_pred_5;
                uint _3034 = _3033 + 1u;
                if (_3034 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3027 = _2852;
                    _3028 = _2854;
                    _3029 = _2856;
                    _3030 = _2858;
                    _3031 = _2860;
                    _3032 = _2862;
                    _3033 = _3034;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2851 = _2852;
            _2853 = _2854;
            _2855 = _2856;
            _2857 = _2858;
            _2859 = _2860;
            _2861 = _2862;
        }
        uvec4 _2865 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2866 = _2865.z;
        uint _2868 = (_2866 >> 8u) & 15u;
        float _2995;
        float _2997;
        float _2999;
        float _3001;
        float _3003;
        float _3005;
        if (((4294967295u << _2868) & _2701) == 0u)
        {
            _2995 = _2851;
            _2997 = _2853;
            _2999 = _2855;
            _3001 = _2857;
            _3003 = _2859;
            _3005 = _2861;
        }
        else
        {
            float _3020 = inversesqrt(dot(vec3(_1779, _1780, _1781), vec3(_1779, _1780, _1781)));
            float _3021 = _3020 * _1779;
            float _3022 = _3020 * _1780;
            float _3023 = _3020 * _1781;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2868 < ((_2866 >> 12u) & 15u))
            {
                float _2996;
                float _2998;
                float _3000;
                float _3002;
                float _3004;
                float _3006;
                float _3134 = _2851;
                float _3135 = _2853;
                float _3136 = _2855;
                float _3137 = _2857;
                float _3138 = _2859;
                float _3139 = _2861;
                uint _3140 = _2868;
                uint _3149;
                bool _3150;
                for (;;)
                {
                    _3149 = texelFetch(g_lightClassification, int((((_2695 << 5u) + (_2681 << 9u)) + (_3140 << 2u)) >> 2u)).x;
                    _3150 = _3149 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3150)
                    {
                        frontier_phi_72_pred = _3139;
                        frontier_phi_72_pred_1 = _3138;
                        frontier_phi_72_pred_2 = _3137;
                        frontier_phi_72_pred_3 = _3136;
                        frontier_phi_72_pred_4 = _3135;
                        frontier_phi_72_pred_5 = _3134;
                    }
                    else
                    {
                        float _3333;
                        float _3334;
                        float _3335;
                        float _3336;
                        float _3337;
                        float _3338;
                        float _3629;
                        float _3630;
                        float _3631;
                        float _3632;
                        float _3633;
                        float _3634;
                        float _3346 = _3134;
                        float _3347 = _3135;
                        float _3348 = _3136;
                        float _3349 = _3137;
                        float _3350 = _3138;
                        float _3351 = _3139;
                        uint _3352 = _3149;
                        uint _3353;
                        vec4 _3378;
                        float _3379;
                        vec4 _3394;
                        vec3 _3406;
                        vec4 _3422;
                        vec4 _3438;
                        float _3485;
                        bool _3486;
                        for (;;)
                        {
                            uint _3363 = ((_3140 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3352));
                            _3353 = (_3352 + 4294967295u) & _3352;
                            uint _3365 = _3363 * 40u;
                            _3378 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3365)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 3u)).x));
                            _3379 = _3378.w;
                            uint _3381 = (_3363 * 40u) + 4u;
                            _3394 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3381)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 3u)).x));
                            uint _3396 = (_3363 * 40u) + 8u;
                            _3406 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3396)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 2u)).x));
                            uint _3409 = (_3363 * 40u) + 16u;
                            _3422 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3409)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 3u)).x));
                            uint _3425 = (_3363 * 40u) + 20u;
                            _3438 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3425)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 3u)).x));
                            uint _3441 = (_3363 * 40u) + 24u;
                            vec4 _3454 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3441)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 3u)).x));
                            uint _3460 = (_3363 * 40u) + 28u;
                            vec4 _3473 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3460)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 3u)).x));
                            _3485 = fma(_1781, _3473.z, fma(_1780, _3473.y, _3473.x * _1779)) + _3473.w;
                            _3486 = !((fma(_1781, _3454.z, fma(_1780, _3454.y, _3454.x * _1779)) + _3454.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3486)
                            {
                                float _3513 = _3378.x - _1779;
                                float _3514 = _3378.y - _1780;
                                float _3515 = _3378.z - _1781;
                                float _3516 = dot(vec3(_3513, _3514, _3515), vec3(_3513, _3514, _3515));
                                float _3519 = inversesqrt(_3516);
                                float _3520 = _3519 * _3513;
                                float _3521 = _3519 * _3514;
                                float _3522 = _3519 * _3515;
                                float _3526 = 1.0 - (_3516 / (_3379 * _3379));
                                float _4679 = isnan(0.0) ? _3526 : (isnan(_3526) ? 0.0 : max(_3526, 0.0));
                                float _3527 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
                                float _3531 = sqrt(_3516) * _3394.w;
                                float _3533 = 1.39999997615814208984375 / (_3531 + 1.39999997615814208984375);
                                float _3534 = _3533 * _3533;
                                float _3537 = ((1.0 - _3534) * dot(vec3(_3520, _3521, _3522), vec3(_602, _605, _608))) + _3534;
                                float _3540 = _3531 * _3531;
                                float _3544 = (fma(_1781, _3422.z, fma(_1780, _3422.y, _3422.x * _1779)) + _3422.w) / _3485;
                                float _3545 = (fma(_1781, _3438.z, fma(_1780, _3438.y, _3438.x * _1779)) + _3438.w) / _3485;
                                float _3549 = 1.0 - dot(vec2(_3544, _3545), vec2(_3544, _3545));
                                float _4695 = isnan(0.0) ? _3549 : (isnan(_3549) ? 0.0 : max(_3549, 0.0));
                                float _3550 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
                                float _3551 = _3550 * (((isnan(0.0) ? _3537 : (isnan(_3537) ? 0.0 : max(_3537, 0.0))) * _3527) / ((_3540 * 0.699999988079071044921875) + 1.0));
                                float _3563 = exp2(log2(1.0 / ((_3540 * 3.5) + 5.0)) * 0.25);
                                float _3564 = 1.0 - _670;
                                float _3571 = sqrt(1.0 - ((1.0 - (_3564 * _3564)) * (1.0 - (_3563 * _3563))));
                                float _3572 = _3571 * _3571;
                                float _3573 = _3572 * _3572;
                                float _3574 = _3520 - _3021;
                                float _3575 = _3521 - _3022;
                                float _3576 = _3522 - _3023;
                                float _3580 = inversesqrt(dot(vec3(_3574, _3575, _3576), vec3(_3574, _3575, _3576)));
                                float _3584 = dot(vec3(_602, _605, _608), vec3((-0.0) - _3021, (-0.0) - _3022, (-0.0) - _3023));
                                float _4706 = isnan(0.0) ? _3584 : (isnan(_3584) ? 0.0 : max(_3584, 0.0));
                                float _3587 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
                                float _3588 = dot(vec3(_602, _605, _608), vec3(_3580 * _3574, _3580 * _3575, _3580 * _3576));
                                float _4717 = isnan(0.0) ? _3588 : (isnan(_3588) ? 0.0 : max(_3588, 0.0));
                                float _3591 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
                                float _3595 = ((_3591 * _3591) * (_3573 + (-1.0))) + 1.0;
                                float _3596 = _3533 * _3572;
                                float _3597 = _3596 * _3596;
                                float _3603 = ((1.0 - _3597) * dot(vec3(_602, _605, _608), vec3(_3520, _3521, _3522))) + _3597;
                                float _4728 = isnan(0.0) ? _3603 : (isnan(_3603) ? 0.0 : max(_3603, 0.0));
                                float _3604 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
                                float _3605 = 1.0 - _3572;
                                float _3615 = (0.5 / (((_3604 * ((_3587 * _3605) + _3572)) + 9.9999999392252902907785028219223e-09) + (((_3604 * _3605) + _3572) * _3587))) * _3604;
                                float _4739 = isnan(0.0) ? _3615 : (isnan(_3615) ? 0.0 : max(_3615, 0.0));
                                float _3625 = (_3550 * _3527) * (((_3573 * 3.1415927410125732421875) * (isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0)))) / ((_3595 * _3595) * ((_3540 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3551 * _3394.y;
                                frontier_phi_78_pred_1 = _3551 * _3394.x;
                                frontier_phi_78_pred_2 = _3625 * _3406.z;
                                frontier_phi_78_pred_3 = _3625 * _3406.y;
                                frontier_phi_78_pred_4 = _3625 * _3406.x;
                                frontier_phi_78_pred_5 = _3551 * _3394.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3633 = frontier_phi_78_pred;
                            _3632 = frontier_phi_78_pred_1;
                            _3631 = frontier_phi_78_pred_2;
                            _3630 = frontier_phi_78_pred_3;
                            _3629 = frontier_phi_78_pred_4;
                            _3634 = frontier_phi_78_pred_5;
                            _3336 = _3632 + _3349;
                            _3337 = _3633 + _3350;
                            _3338 = _3634 + _3351;
                            _3333 = _3629 + _3346;
                            _3334 = _3630 + _3347;
                            _3335 = _3631 + _3348;
                            if (_3353 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3346 = _3333;
                                _3347 = _3334;
                                _3348 = _3335;
                                _3349 = _3336;
                                _3350 = _3337;
                                _3351 = _3338;
                                _3352 = _3353;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3338;
                        frontier_phi_72_pred_1 = _3337;
                        frontier_phi_72_pred_2 = _3336;
                        frontier_phi_72_pred_3 = _3335;
                        frontier_phi_72_pred_4 = _3334;
                        frontier_phi_72_pred_5 = _3333;
                    }
                    _3006 = frontier_phi_72_pred;
                    _3004 = frontier_phi_72_pred_1;
                    _3002 = frontier_phi_72_pred_2;
                    _3000 = frontier_phi_72_pred_3;
                    _2998 = frontier_phi_72_pred_4;
                    _2996 = frontier_phi_72_pred_5;
                    uint _3141 = _3140 + 1u;
                    if (_3141 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3134 = _2996;
                        _3135 = _2998;
                        _3136 = _3000;
                        _3137 = _3002;
                        _3138 = _3004;
                        _3139 = _3006;
                        _3140 = _3141;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3006;
                frontier_phi_60_61_ladder_1 = _3004;
                frontier_phi_60_61_ladder_2 = _3000;
                frontier_phi_60_61_ladder_3 = _2998;
                frontier_phi_60_61_ladder_4 = _2996;
                frontier_phi_60_61_ladder_5 = _3002;
            }
            else
            {
                frontier_phi_60_61_ladder = _2861;
                frontier_phi_60_61_ladder_1 = _2859;
                frontier_phi_60_61_ladder_2 = _2855;
                frontier_phi_60_61_ladder_3 = _2853;
                frontier_phi_60_61_ladder_4 = _2851;
                frontier_phi_60_61_ladder_5 = _2857;
            }
            _2995 = frontier_phi_60_61_ladder_4;
            _2997 = frontier_phi_60_61_ladder_3;
            _2999 = frontier_phi_60_61_ladder_2;
            _3001 = frontier_phi_60_61_ladder_5;
            _3003 = frontier_phi_60_61_ladder_1;
            _3005 = frontier_phi_60_61_ladder;
        }
        float _3010 = isnan(1.0) ? _646 : (isnan(_646) ? 1.0 : min(_646, 1.0));
        _2714 = (_3010 * _3001) + _2245;
        _2716 = (_3010 * _3003) + _2247;
        _2718 = (_3010 * _3005) + _2249;
        _2720 = ((_2995 * 0.039999999105930328369140625) * _3010) + _2568;
        _2722 = ((_2997 * 0.039999999105930328369140625) * _3010) + _2570;
        _2724 = ((_2999 * 0.039999999105930328369140625) * _3010) + _2572;
    }
    else
    {
        _2714 = _2245;
        _2716 = _2247;
        _2718 = _2249;
        _2720 = _2568;
        _2722 = _2570;
        _2724 = _2572;
    }
    float _2738 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2739 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2740 = cbSceneParam._m0[86u].x * (_1691 + ((_669 * cbMtdParam._m0[13u].z) * dot(vec3(_552, _553, _554), vec3(_201, _202, _203))));
    float _2741 = isnan(_2738) ? _2740 : (isnan(_2740) ? _2738 : min(_2740, _2738));
    float _2742 = isnan(_2739) ? _581 : (isnan(_581) ? _2739 : min(_581, _2739));
    vec4 _2744 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2741, _2742), 0.0);
    float _2746 = _2744.x;
    bool _2767 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2746)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2746))) > _574;
    vec4 _2771 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2767 ? _2741 : _580, _2767 ? _2742 : _581));
    float _4765 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _4776 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _4787 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _2795 = 0.959999978542327880859375 - (exp2(log2(1.0 - _661) * 5.0) * 0.959999978542327880859375);
    float _2797 = (_2771.x * _2795) * cbSceneParam._m0[72u].w;
    float _2799 = (_2771.y * _2795) * cbSceneParam._m0[72u].w;
    float _2801 = (_2771.z * _2795) * cbSceneParam._m0[72u].w;
    float _2822 = _580 / cbSceneParam._m0[86u].x;
    float _2823 = _581 / cbSceneParam._m0[86u].y;
    vec4 _2837 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2822, _2823, (log2((isnan(cbSceneParam._m0[77u].w) ? _574 : (isnan(_574) ? cbSceneParam._m0[77u].w : min(_574, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2839 = _2837.x;
    float _2840 = _2837.y;
    float _2841 = _2837.z;
    float _2842 = _2837.w;
    float _2913;
    float _2915;
    float _2917;
    float _2919;
    if (_574 > cbSceneParam._m0[78u].w)
    {
        float _2876 = isnan(_574) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _574 : min(cbSceneParam._m0[80u].w, _574));
        float _2877 = _2876 / _574;
        float _2888 = _2877 * _272;
        float _2889 = _273 * _2877;
        float _2890 = (-0.0) - _2889;
        float _2891 = _2877 * _274;
        float _2893 = (cbSceneParam._m0[77u].w * _2890) / _2876;
        float _2894 = _2893 + cbSceneParam._m0[79u].w;
        float _2895 = cbSceneParam._m0[79u].w - _2889;
        float _2901 = sqrt(((_2888 * _2888) + (_2889 * _2889)) + (_2891 * _2891));
        float _2904 = (1.0 - (cbSceneParam._m0[77u].w / _2876)) * _2901;
        float _2909 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2911 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3096;
        if (abs((_2890 - _2893) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3096 = ((((_2894 > 0.0) ? exp2(_2909 * _2894) : (2.0 - exp2(_2911 * _2894))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2904;
        }
        else
        {
            float _3056 = 1.0 / cbSceneParam._m0[80u].x;
            float _3057 = isnan(_2895) ? _2894 : (isnan(_2894) ? _2895 : max(_2894, _2895));
            float _3058 = isnan(_2895) ? _2894 : (isnan(_2894) ? _2895 : min(_2894, _2895));
            float _3067 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : min(_3057, 0.0));
            float _3068 = isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : min(_3058, 0.0));
            _3096 = ((abs(_2901 / _2890) * cbSceneParam._m0[80u].y) * ((((_3067 - _3068) * 2.0) - ((exp2(_2909 * (isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0)))) - exp2(_2909 * (isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0))))) * _3056)) - ((exp2(_2911 * _3067) - exp2(_2911 * _3068)) * _3056))) + (_2904 * cbSceneParam._m0[80u].z);
        }
        vec4 _3098 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2822, _2823, 1.0), 0.0);
        float _3107 = exp2((_3096 * (-1.44269502162933349609375)) * (1.0 - _3098.w));
        float _3108 = log2(_3107);
        float _3124 = log2(_2842);
        _2913 = (exp2(_3124 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3108 * cbSceneParam._m0[78u].x)) * _3098.x) / cbSceneParam._m0[78u].x)) + _2839;
        _2915 = (exp2(_3124 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3108 * cbSceneParam._m0[78u].y)) * _3098.y) / cbSceneParam._m0[78u].y)) + _2840;
        _2917 = (exp2(_3124 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3108 * cbSceneParam._m0[78u].z)) * _3098.z) / cbSceneParam._m0[78u].z)) + _2841;
        _2919 = _3107 * _2842;
    }
    else
    {
        _2913 = _2839;
        _2915 = _2840;
        _2917 = _2841;
        _2919 = _2842;
    }
    bool _2931 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
    float _2932 = log2(_2919);
    float _2939 = exp2(_2932 * cbSceneParam._m0[78u].x) * ((_2797 + (((((_1668 * _1716.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0))) * _1459) * _1732)) + _2720) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0))) * (_2714 + ((isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0))) * _646))) - _2797) * _537));
    float _2940 = exp2(_2932 * cbSceneParam._m0[78u].y) * ((_2799 + (((((_1668 * _1716.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0))) * _1459) * _1732)) + _2722) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0))) * (_2716 + ((isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0))) * _646))) - _2799) * _537));
    float _2941 = exp2(_2932 * cbSceneParam._m0[78u].z) * ((_2801 + (((((_1668 * _1716.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0))) * _1459) * _1732)) + _2724) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0))) * (_2718 + ((isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0))) * _646))) - _2801) * _537));
    vec4 _2949 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_580, _581));
    float _2951 = _2949.x;
    float _2972 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2951)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2951))) - _574) * 3.0;
    float _4838 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0));
    float _2974 = (isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0))) * cbInstanceData._m0[_621 + 6u].w;
    float _2983 = (roundEven(cbMatDynParam._m0[0u].y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2983 * (_2931 ? _2939 : (_2939 + (cbSceneParam._m0[72u].w * _2913)));
    SV_Target.y = _2983 * (_2931 ? _2940 : (_2940 + (cbSceneParam._m0[72u].w * _2915)));
    SV_Target.z = _2983 * (_2931 ? _2941 : (_2941 + (cbSceneParam._m0[72u].w * _2917)));
    SV_Target.w = _2974;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2974;
}


