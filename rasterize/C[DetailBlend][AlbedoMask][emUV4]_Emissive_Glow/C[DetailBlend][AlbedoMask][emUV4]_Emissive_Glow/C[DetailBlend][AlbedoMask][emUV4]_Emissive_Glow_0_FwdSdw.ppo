#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 11) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 12) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1380;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _232 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _239 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _240 = _239 * NORMAL.x;
    float _241 = _239 * NORMAL.y;
    float _242 = _239 * NORMAL.z;
    float _246 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _254;
    float _255;
    float _256;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _254 = (-0.0) - _240;
        _255 = (-0.0) - _241;
        _256 = (-0.0) - _242;
    }
    else
    {
        _254 = _240;
        _255 = _241;
        _256 = _242;
    }
    vec4 _274 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _288 = exp2(log2(_274.w * cbMtdParam._m0[23u].z) * cbMtdParam._m0[21u].y);
    float _289 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
    float _290 = isnan(1.0) ? _289 : (isnan(_289) ? 1.0 : min(_289, 1.0));
    vec4 _304 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _308 = _304.z;
    float _309 = _304.w;
    float _317 = exp2(log2(_308 * cbMtdParam._m0[21u].w) * cbMtdParam._m0[20u].y);
    float _318 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _319 = isnan(1.0) ? _318 : (isnan(_318) ? 1.0 : min(_318, 1.0));
    vec4 _332 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    vec4 _355 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _357 = _355.x;
    float _358 = _355.y;
    float _382 = ((cbMtdParam._m0[20u].w * _355.z) * (texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_15, SS_WrapLinear), vec2(((cbMtdParam._m0[20u].z * TEXCOORD.x) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, ((cbMtdParam._m0[20u].z * TEXCOORD.y) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w)).x - _357)) + _357;
    bool _418 = _382 >= 0.25;
    bool _423 = _382 >= 0.3499999940395355224609375;
    bool _428 = _382 >= 0.5;
    bool _433 = _382 >= 0.64999997615814208984375;
    bool _438 = _382 >= 0.75;
    vec4 _466 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _476 = cbMtdParam._m0[9u].x * _466.x;
    float _477 = cbMtdParam._m0[9u].y * _466.y;
    float _478 = cbMtdParam._m0[9u].z * _466.z;
    float _485 = (((((((_438 ? cbMtdParam._m0[14u].x : (_433 ? cbMtdParam._m0[19u].x : (_428 ? cbMtdParam._m0[18u].x : (_423 ? cbMtdParam._m0[17u].x : (_418 ? cbMtdParam._m0[16u].x : cbMtdParam._m0[15u].x))))) - cbMtdParam._m0[10u].x) * _358) + cbMtdParam._m0[10u].x) * _332.x) - _476) * _319) + _476;
    float _486 = (((((((_438 ? cbMtdParam._m0[14u].y : (_433 ? cbMtdParam._m0[19u].y : (_428 ? cbMtdParam._m0[18u].y : (_423 ? cbMtdParam._m0[17u].y : (_418 ? cbMtdParam._m0[16u].y : cbMtdParam._m0[15u].y))))) - cbMtdParam._m0[10u].y) * _358) + cbMtdParam._m0[10u].y) * _332.y) - _477) * _319) + _477;
    float _487 = (((((((_438 ? cbMtdParam._m0[14u].z : (_433 ? cbMtdParam._m0[19u].z : (_428 ? cbMtdParam._m0[18u].z : (_423 ? cbMtdParam._m0[17u].z : (_418 ? cbMtdParam._m0[16u].z : cbMtdParam._m0[15u].z))))) - cbMtdParam._m0[10u].z) * _358) + cbMtdParam._m0[10u].z) * _332.z) - _478) * _319) + _478;
    float _494 = exp2(log2(_309) * cbMtdParam._m0[22u].y);
    vec4 _507 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _527 = (((cbMtdParam._m0[12u].x * _507.x) - _485) * _494) + _485;
    float _528 = (((cbMtdParam._m0[12u].y * _507.y) - _486) * _494) + _486;
    float _529 = (((cbMtdParam._m0[12u].z * _507.z) - _487) * _494) + _487;
    vec4 _541 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _565 = (_274.x * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].x * _541.x) - _527) * _290) + _527);
    float _567 = (_274.y * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].y * _541.y) - _528) * _290) + _528);
    float _569 = (_274.z * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].z * _541.z) - _529) * _290) + _529);
    float _574 = exp2(log2(1.0 - _309) * 0.00999999977648258209228515625);
    float _592 = ((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_11, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x - cbMtdParam._m0[22u].w) * _574) + cbMtdParam._m0[22u].w;
    float _611 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w)).x - _592) + cbMtdParam._m0[21u].z) * _494) + _592;
    float _631 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w)).x - _611) + cbMtdParam._m0[23u].w) * _290) + _611;
    vec4 _644 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _662 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _664 = _662.x;
    float _665 = _662.y;
    float _668 = cbMtdParam._m0[20u].x + _662.z;
    float _671 = (((cbMtdParam._m0[21u].x + _644.z) - _668) * _574) + _668;
    vec4 _683 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _695 = (_308 * 2.0) * ((((_683.z - _671) + cbMtdParam._m0[23u].y) * _494) + _671);
    vec4 _707 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _716 = (((_707.z - _695) + cbMtdParam._m0[22u].x) * _290) + _695;
    vec4 _735 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _750 = ((_644.x - _664) * _574) + _664;
    float _751 = ((_644.y - _665) * _574) + _665;
    float _756 = ((_683.x - _750) * _494) + _750;
    float _757 = ((_683.y - _751) * _494) + _751;
    float _766 = ((((_707.x - _756) * _290) + _756) * 2.0) + (-1.0);
    float _767 = ((((_707.y - _757) * _290) + _757) * 2.0) + (-1.0);
    float _768 = dot(vec2(_766, _767), vec2(_766, _767));
    float _4052 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _773 = sqrt(1.0 - (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))));
    float _776 = (cbMtdParam._m0[23u].x * ((_304.x * 2.0) + (-1.0))) + _766;
    float _777 = (cbMtdParam._m0[23u].x * ((_304.y * 2.0) + (-1.0))) + _767;
    float _780 = fma(_773, _254, fma(_777, _246 * TANGENT.x, (_232 * _225) * _776));
    float _783 = fma(_773, _255, fma(_777, _246 * TANGENT.y, (_232 * _226) * _776));
    float _786 = fma(_773, _256, fma(_777, _246 * TANGENT.z, (_232 * _227) * _776));
    float _790 = inversesqrt(dot(vec3(_780, _783, _786), vec3(_780, _783, _786)));
    float _791 = _790 * _780;
    float _792 = _790 * _783;
    float _793 = _790 * _786;
    float _4063 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _794 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
    float _4074 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _4085 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _4096 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _4107 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _798 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
    float _814 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _854 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _864 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _854);
    float _865 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _854);
    float _866 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _854);
    float _870 = inversesqrt(dot(vec3(_864, _865, _866), vec3(_864, _865, _866)));
    float _871 = _864 * _870;
    float _872 = _865 * _870;
    float _873 = _866 * _870;
    float _879 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _880 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _882 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _884 = _882.w;
    float _902 = fma(_793, cbSceneParam._m0[5u].z, fma(_792, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _791));
    float _905 = fma(_793, cbSceneParam._m0[6u].z, fma(_792, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _791));
    float _908 = fma(_793, cbSceneParam._m0[7u].z, fma(_792, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _791));
    vec4 _910 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _921 = (((_910.y - _794) + (_910.w * _794)) * cbMtdParam._m0[3u].x) + _794;
    uint _934 = uint(roundEven(NORMAL.w)) * 13u;
    uint _935 = _934 + 9u;
    uint _936 = _935 + uint(cbMatDynParam._m0[0u].w);
    float _942 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0)))) * cbInstanceData._m0[_936].x;
    float _943 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0)))) * cbInstanceData._m0[_936].y;
    float _944 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0)))) * cbInstanceData._m0[_936].z;
    float _4118 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    float _945 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
    float _4129 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _946 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
    float _4140 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _947 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
    vec4 _948 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _953 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _964 = (((_953.x - _798) + (_953.w * _798)) * cbMtdParam._m0[3u].x) + _798;
    float _977 = (cbMtdParam._m0[3u].x * (((_945 * _884) - _945) + _948.x)) + _945;
    float _978 = (cbMtdParam._m0[3u].x * (((_946 * _884) - _946) + _948.y)) + _946;
    float _979 = (cbMtdParam._m0[3u].x * (((_947 * _884) - _947) + _948.z)) + _947;
    float _980 = 1.0 - _964;
    float _981 = _980 * _977;
    float _982 = _980 * _978;
    float _983 = _980 * _979;
    float _988 = (_977 + (-0.039999999105930328369140625)) * _964;
    float _989 = (_978 + (-0.039999999105930328369140625)) * _964;
    float _990 = (_979 + (-0.039999999105930328369140625)) * _964;
    float _991 = _988 + 0.039999999105930328369140625;
    float _993 = _989 + 0.039999999105930328369140625;
    float _994 = _990 + 0.039999999105930328369140625;
    vec4 _1003 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _879, cbSceneParam._m0[86u].y * _880));
    float _1006 = _1003.x * TEXCOORD_4.z;
    float _1007 = dot(vec3(_791, _792, _793), vec3(_871, _872, _873));
    float _1010 = _1007 * 2.0;
    float _1014 = (_1010 * _791) - _871;
    float _1015 = (_1010 * _792) - _872;
    float _1016 = (_1010 * _793) - _873;
    float _1020 = abs(dot(vec3(_871, _872, _873), vec3(_791, _792, _793)));
    float _4151 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
    float _1022 = sqrt(_921);
    float _1035 = exp2((_1022 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1022 * 3.0));
    float _1041 = (1.0 - _1035) * ((_1022 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1042 = _1035 * _1022;
    float _1070 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1074 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1078 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1379;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1105 = fma(_1078, cbModelParam._m0[26u].z, fma(_1074, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1070));
        float _1109 = fma(_1078, cbModelParam._m0[27u].z, fma(_1074, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1070));
        float _1113 = fma(_1078, cbModelParam._m0[28u].z, fma(_1074, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1070));
        float _1137 = _1070 + _791;
        float _1138 = _1074 + _792;
        float _1139 = _1078 + _793;
        float _1149 = fma(_1139, cbModelParam._m0[26u].z, fma(_1138, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1137)) - _1105;
        float _1150 = fma(_1139, cbModelParam._m0[27u].z, fma(_1138, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1137)) - _1109;
        float _1151 = fma(_1139, cbModelParam._m0[28u].z, fma(_1138, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1137)) - _1113;
        float _1155 = inversesqrt(dot(vec3(_1149, _1150, _1151), vec3(_1149, _1150, _1151)));
        float _1168 = ((_1155 * _1149) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1105 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1169 = ((_1155 * _1150) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1109 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1170 = ((_1155 * _1151) / cbModelParam._m0[34u].z) + ((((((_1113 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1173 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        vec4 _1180 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        vec4 _1187 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        vec4 _1194 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        float _1207 = exp2((_1173.w + (-0.5)) * 20.0) * 2.0;
        float _1208 = _1207 * (_1173.x + (-0.5));
        float _1209 = _1207 * (_1173.y + (-0.5));
        float _1210 = _1207 * (_1173.z + (-0.5));
        float _1217 = exp2((_1180.w + (-0.5)) * 20.0) * 2.0;
        float _1218 = _1217 * (_1180.x + (-0.5));
        float _1219 = _1217 * (_1180.y + (-0.5));
        float _1220 = _1217 * (_1180.z + (-0.5));
        float _1227 = exp2((_1187.w + (-0.5)) * 20.0) * 2.0;
        float _1228 = _1227 * (_1187.x + (-0.5));
        float _1229 = _1227 * (_1187.y + (-0.5));
        float _1230 = _1227 * (_1187.z + (-0.5));
        float _1237 = exp2((_1194.w + (-0.5)) * 20.0) * 2.0;
        float _1238 = _1237 * (_1194.x + (-0.5));
        float _1239 = _1237 * (_1194.y + (-0.5));
        float _1240 = _1237 * (_1194.z + (-0.5));
        float _1241 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1242 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1243 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1244 = _1208 * 0.5;
        float _1245 = _1218 * 0.5;
        float _1246 = _1228 * 0.5;
        float _1247 = dot(vec3(_1244, _1245, _1246), vec3(_1244, _1245, _1246));
        float _1252 = (_1247 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1247);
        float _1261 = (dot(vec3(_791, _792, _793), vec3(_1252 * _1244, _1252 * _1245, _1252 * _1246)) + 1.0) * 0.5;
        float _4177 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1271 = sqrt(((_1245 * _1245) + (_1244 * _1244)) + (_1246 * _1246)) / (_1241 + 9.9999997473787516355514526367188e-06);
        float _4188 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1273 = _1272 * 2.0;
        float _1277 = (1.0 - _1272) / (_1272 + 1.0);
        float _4199 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1287 = ((((1.0 - _1278) * (_1273 + 2.0)) * exp2(log2(isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * (_1273 + 1.0))) + _1278) * _1241;
        float _1288 = _1209 * 0.5;
        float _1289 = _1219 * 0.5;
        float _1290 = _1229 * 0.5;
        float _1291 = dot(vec3(_1288, _1289, _1290), vec3(_1288, _1289, _1290));
        float _1296 = (_1291 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1291);
        float _1304 = (dot(vec3(_791, _792, _793), vec3(_1296 * _1288, _1296 * _1289, _1296 * _1290)) + 1.0) * 0.5;
        float _4210 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1313 = sqrt(((_1289 * _1289) + (_1288 * _1288)) + (_1290 * _1290)) / (_1242 + 9.9999997473787516355514526367188e-06);
        float _4221 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _1315 = _1314 * 2.0;
        float _1319 = (1.0 - _1314) / (_1314 + 1.0);
        float _4232 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _1329 = ((((1.0 - _1320) * (_1315 + 2.0)) * exp2(log2(isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * (_1315 + 1.0))) + _1320) * _1242;
        float _1330 = _1210 * 0.5;
        float _1331 = _1220 * 0.5;
        float _1332 = _1230 * 0.5;
        float _1333 = dot(vec3(_1330, _1331, _1332), vec3(_1330, _1331, _1332));
        float _1338 = (_1333 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1333);
        float _1346 = (dot(vec3(_791, _792, _793), vec3(_1338 * _1330, _1338 * _1331, _1338 * _1332)) + 1.0) * 0.5;
        float _4243 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1355 = sqrt(((_1331 * _1331) + (_1330 * _1330)) + (_1332 * _1332)) / (_1243 + 9.9999997473787516355514526367188e-06);
        float _4254 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _1357 = _1356 * 2.0;
        float _1361 = (1.0 - _1356) / (_1356 + 1.0);
        float _4265 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _1371 = ((((1.0 - _1362) * (_1357 + 2.0)) * exp2(log2(isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0))) * (_1357 + 1.0))) + _1362) * _1243;
        _1379 = _1210;
        _1381 = _1209;
        _1382 = _1208;
        _1383 = _1220;
        _1384 = _1219;
        _1385 = _1218;
        _1386 = _1230;
        _1387 = _1229;
        _1388 = _1228;
        _1389 = _1243;
        _1390 = _1242;
        _1391 = _1241;
        _1392 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0)));
        _1393 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0)));
        _1394 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0)));
    }
    else
    {
        _1379 = _1380;
        _1381 = _1380;
        _1382 = _1380;
        _1383 = _1380;
        _1384 = _1380;
        _1385 = _1380;
        _1386 = _1380;
        _1387 = _1380;
        _1388 = _1380;
        _1389 = _1380;
        _1390 = _1380;
        _1391 = _1380;
        _1392 = 0.0;
        _1393 = 0.0;
        _1394 = 0.0;
    }
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1420 = fma(_1078, cbModelParam._m0[30u].z, fma(_1074, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1070));
        float _1424 = fma(_1078, cbModelParam._m0[31u].z, fma(_1074, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1070));
        float _1428 = fma(_1078, cbModelParam._m0[32u].z, fma(_1074, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1070));
        float _1451 = _1070 + _791;
        float _1452 = _1074 + _792;
        float _1453 = _1078 + _793;
        float _1463 = fma(_1453, cbModelParam._m0[30u].z, fma(_1452, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1451)) - _1420;
        float _1464 = fma(_1453, cbModelParam._m0[31u].z, fma(_1452, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1451)) - _1424;
        float _1465 = fma(_1453, cbModelParam._m0[32u].z, fma(_1452, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1451)) - _1428;
        float _1469 = inversesqrt(dot(vec3(_1463, _1464, _1465), vec3(_1463, _1464, _1465)));
        float _1482 = ((_1469 * _1463) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1420 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1483 = ((_1469 * _1464) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1424 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1484 = ((_1469 * _1465) / cbModelParam._m0[35u].z) + ((((((_1428 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1486 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1482, _1483, _1484), 0.0);
        vec4 _1493 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1482, _1483, _1484), 0.0);
        vec4 _1500 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1482, _1483, _1484), 0.0);
        vec4 _1507 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1482, _1483, _1484), 0.0);
        float _1519 = exp2((_1486.w + (-0.5)) * 20.0) * 2.0;
        float _1520 = _1519 * (_1486.x + (-0.5));
        float _1521 = _1519 * (_1486.y + (-0.5));
        float _1522 = _1519 * (_1486.z + (-0.5));
        float _1529 = exp2((_1493.w + (-0.5)) * 20.0) * 2.0;
        float _1530 = _1529 * (_1493.x + (-0.5));
        float _1531 = _1529 * (_1493.y + (-0.5));
        float _1532 = _1529 * (_1493.z + (-0.5));
        float _1539 = exp2((_1500.w + (-0.5)) * 20.0) * 2.0;
        float _1540 = _1539 * (_1500.x + (-0.5));
        float _1541 = _1539 * (_1500.y + (-0.5));
        float _1542 = _1539 * (_1500.z + (-0.5));
        float _1549 = exp2((_1507.w + (-0.5)) * 20.0) * 2.0;
        float _1550 = _1549 * (_1507.x + (-0.5));
        float _1551 = _1549 * (_1507.y + (-0.5));
        float _1552 = _1549 * (_1507.z + (-0.5));
        float _1553 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1554 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1555 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1556 = _1520 * 0.5;
        float _1557 = _1530 * 0.5;
        float _1558 = _1540 * 0.5;
        float _1559 = dot(vec3(_1556, _1557, _1558), vec3(_1556, _1557, _1558));
        float _1564 = (_1559 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1559);
        float _1572 = (dot(vec3(_791, _792, _793), vec3(_1564 * _1556, _1564 * _1557, _1564 * _1558)) + 1.0) * 0.5;
        float _4306 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1581 = sqrt(((_1557 * _1557) + (_1556 * _1556)) + (_1558 * _1558)) / (_1553 + 9.9999997473787516355514526367188e-06);
        float _4317 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1582 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _1583 = _1582 * 2.0;
        float _1587 = (1.0 - _1582) / (_1582 + 1.0);
        float _4328 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1588 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _1597 = ((((1.0 - _1588) * (_1583 + 2.0)) * exp2(log2(isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (_1583 + 1.0))) + _1588) * _1553;
        float _1598 = _1521 * 0.5;
        float _1599 = _1531 * 0.5;
        float _1600 = _1541 * 0.5;
        float _1601 = dot(vec3(_1598, _1599, _1600), vec3(_1598, _1599, _1600));
        float _1606 = (_1601 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1601);
        float _1614 = (dot(vec3(_791, _792, _793), vec3(_1606 * _1598, _1606 * _1599, _1606 * _1600)) + 1.0) * 0.5;
        float _4339 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1623 = sqrt(((_1599 * _1599) + (_1598 * _1598)) + (_1600 * _1600)) / (_1554 + 9.9999997473787516355514526367188e-06);
        float _4350 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1624 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
        float _1625 = _1624 * 2.0;
        float _1629 = (1.0 - _1624) / (_1624 + 1.0);
        float _4361 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1630 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _1639 = ((((1.0 - _1630) * (_1625 + 2.0)) * exp2(log2(isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * (_1625 + 1.0))) + _1630) * _1554;
        float _1640 = _1522 * 0.5;
        float _1641 = _1532 * 0.5;
        float _1642 = _1542 * 0.5;
        float _1643 = dot(vec3(_1640, _1641, _1642), vec3(_1640, _1641, _1642));
        float _1648 = (_1643 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1643);
        float _1656 = (dot(vec3(_791, _792, _793), vec3(_1648 * _1640, _1648 * _1641, _1648 * _1642)) + 1.0) * 0.5;
        float _4372 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1665 = sqrt(((_1641 * _1641) + (_1640 * _1640)) + (_1642 * _1642)) / (_1555 + 9.9999997473787516355514526367188e-06);
        float _4383 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1666 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
        float _1667 = _1666 * 2.0;
        float _1671 = (1.0 - _1666) / (_1666 + 1.0);
        float _4394 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
        float _1672 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
        float _1681 = ((((1.0 - _1672) * (_1667 + 2.0)) * exp2(log2(isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0))) * (_1667 + 1.0))) + _1672) * _1555;
        _1689 = _1522;
        _1690 = _1521;
        _1691 = _1520;
        _1692 = _1532;
        _1693 = _1531;
        _1694 = _1530;
        _1695 = _1542;
        _1696 = _1541;
        _1697 = _1540;
        _1698 = _1555;
        _1699 = _1554;
        _1700 = _1553;
        _1701 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0)));
        _1702 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0)));
        _1703 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0)));
    }
    else
    {
        _1689 = _1380;
        _1690 = _1380;
        _1691 = _1380;
        _1692 = _1380;
        _1693 = _1380;
        _1694 = _1380;
        _1695 = _1380;
        _1696 = _1380;
        _1697 = _1380;
        _1698 = _1380;
        _1699 = _1380;
        _1700 = _1380;
        _1701 = 0.0;
        _1702 = 0.0;
        _1703 = 0.0;
    }
    float _1713 = (cbModelParam._m0[1u].x * (_1701 - _1392)) + _1392;
    float _1714 = (cbModelParam._m0[1u].x * (_1702 - _1393)) + _1393;
    float _1715 = (cbModelParam._m0[1u].x * (_1703 - _1394)) + _1394;
    float _1736 = fma(_1715, cbSceneParam._m0[89u].z, fma(_1714, cbSceneParam._m0[89u].y, _1713 * cbSceneParam._m0[89u].x));
    float _1739 = fma(_1715, cbSceneParam._m0[90u].z, fma(_1714, cbSceneParam._m0[90u].y, _1713 * cbSceneParam._m0[90u].x));
    float _1742 = fma(_1715, cbSceneParam._m0[91u].z, fma(_1714, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1713));
    float _1757 = _1014 * 0.5;
    float _1758 = _1015 * 0.5;
    float _1759 = _1016 * 0.5;
    float _1760 = dot(vec4(_1757, _1758, _1759, 1.0), vec4(_1691, _1694, _1697, _1700));
    float _1763 = dot(vec4(_1757, _1758, _1759, 1.0), vec4(_1690, _1693, _1696, _1699));
    float _1766 = dot(vec4(_1757, _1758, _1759, 1.0), vec4(_1689, _1692, _1695, _1698));
    float _1800;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1773 = dot(vec4(_1757, _1758, _1759, 1.0), vec4(_1379, _1383, _1386, _1389));
        float _1777 = dot(vec4(_1757, _1758, _1759, 1.0), vec4(_1381, _1384, _1387, _1390));
        float _1781 = dot(vec4(_1757, _1758, _1759, 1.0), vec4(_1382, _1385, _1388, _1391));
        float _1788 = dot(vec4(cbModelParam._m0[39u]), vec4(_1757, _1758, _1759, 1.0));
        _1800 = dot(vec3(isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0)), isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0)), isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1788) ? 0.0 : (isnan(0.0) ? _1788 : max(0.0, _1788))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1800 = 1.0;
    }
    float _1811;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1802 = dot(vec4(cbModelParam._m0[40u]), vec4(_1757, _1758, _1759, 1.0));
        _1811 = dot(vec3(isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0)), isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0)), isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1802) ? 0.0 : (isnan(0.0) ? _1802 : max(0.0, _1802))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1811 = 1.0;
    }
    float _1815 = (_1811 * cbModelParam._m0[1u].x) + (_1800 * (1.0 - cbModelParam._m0[1u].x));
    float _1825 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _921);
    float _1826 = isnan(_1825) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1825 : min(cbModelParam._m0[25u].z, _1825));
    float _1906;
    float _1908;
    float _1910;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1873 = fma(_1078, cbModelParam._m0[13u].z, fma(_1074, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1070)) + cbModelParam._m0[13u].w;
        float _1877 = fma(_1078, cbModelParam._m0[14u].z, fma(_1074, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1070)) + cbModelParam._m0[14u].w;
        float _1881 = fma(_1078, cbModelParam._m0[15u].z, fma(_1074, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1070)) + cbModelParam._m0[15u].w;
        float _1884 = fma(_1016, cbModelParam._m0[13u].z, fma(_1015, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1014));
        float _1887 = fma(_1016, cbModelParam._m0[14u].z, fma(_1015, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1014));
        float _1890 = fma(_1016, cbModelParam._m0[15u].z, fma(_1015, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1014));
        float _1918;
        if (_1884 > 0.0)
        {
            _1918 = abs((1.0 - _1873) / _1884);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1884 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1873 + 1.0) / _1884);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1918 = frontier_phi_16_14_ladder;
        }
        float _2089;
        if (_1887 > 0.0)
        {
            _2089 = abs((1.0 - _1877) / _1887);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1887 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1877 + 1.0) / _1887);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2089 = frontier_phi_25_21_ladder;
        }
        float _2383;
        if (_1890 > 0.0)
        {
            _2383 = abs((1.0 - _1881) / _1890);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1890 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1881 + 1.0) / _1890);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2383 = frontier_phi_37_32_ladder;
        }
        float _2385 = isnan(_2089) ? _1918 : (isnan(_1918) ? _2089 : min(_1918, _2089));
        float _2386 = isnan(_2383) ? _2385 : (isnan(_2385) ? _2383 : min(_2385, _2383));
        float _2390 = (_2386 * _1884) + _1873;
        float _2391 = (_2386 * _1887) + _1877;
        float _2392 = (_2386 * _1890) + _1881;
        float _2393 = _2386 * 9.9999997473787516355514526367188e-05;
        float _2395 = (-1.0) - _2393;
        float _2397 = _2393 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2392 > _2397) || ((_2392 < _2395) || ((_2391 > _2397) || ((_2391 < _2395) || ((_2390 < _2395) || (_2390 > _2397))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2537 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2392, cbModelParam._m0[9u].z, fma(_2391, cbModelParam._m0[9u].y, _2390 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2392, cbModelParam._m0[10u].z, fma(_2391, cbModelParam._m0[10u].y, _2390 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2392, cbModelParam._m0[11u].z, fma(_2391, cbModelParam._m0[11u].y, _2390 * cbModelParam._m0[11u].x))), _1826);
            frontier_phi_15_37_ladder = _2537.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2537.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2537.z * cbModelParam._m0[1u].y;
        }
        _1906 = frontier_phi_15_37_ladder_1;
        _1908 = frontier_phi_15_37_ladder;
        _1910 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1894 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1014, _1015, _1016), _1826);
        _1906 = _1894.x * cbModelParam._m0[1u].y;
        _1908 = _1894.y * cbModelParam._m0[1u].y;
        _1910 = _1894.z * cbModelParam._m0[1u].y;
    }
    float _1914 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _921);
    float _1915 = isnan(_1914) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1914 : min(cbModelParam._m0[25u].w, _1914));
    float _2004;
    float _2006;
    float _2008;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1968 = fma(_1078, cbModelParam._m0[21u].z, fma(_1074, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1070)) + cbModelParam._m0[21u].w;
        float _1972 = fma(_1078, cbModelParam._m0[22u].z, fma(_1074, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1070)) + cbModelParam._m0[22u].w;
        float _1976 = fma(_1078, cbModelParam._m0[23u].z, fma(_1074, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1070)) + cbModelParam._m0[23u].w;
        float _1979 = fma(_1016, cbModelParam._m0[21u].z, fma(_1015, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1014));
        float _1982 = fma(_1016, cbModelParam._m0[22u].z, fma(_1015, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1014));
        float _1985 = fma(_1016, cbModelParam._m0[23u].z, fma(_1015, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1014));
        float _2094;
        if (_1979 > 0.0)
        {
            _2094 = abs((1.0 - _1968) / _1979);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1979 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1968 + 1.0) / _1979);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2094 = frontier_phi_27_23_ladder;
        }
        float _2410;
        if (_1982 > 0.0)
        {
            _2410 = abs((1.0 - _1972) / _1982);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1982 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1972 + 1.0) / _1982);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2410 = frontier_phi_39_34_ladder;
        }
        float _2748;
        if (_1985 > 0.0)
        {
            _2748 = abs((1.0 - _1976) / _1985);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1985 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1976 + 1.0) / _1985);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2748 = frontier_phi_49_46_ladder;
        }
        float _2750 = isnan(_2410) ? _2094 : (isnan(_2094) ? _2410 : min(_2094, _2410));
        float _2751 = isnan(_2748) ? _2750 : (isnan(_2750) ? _2748 : min(_2750, _2748));
        float _2755 = (_2751 * _1979) + _1968;
        float _2756 = (_2751 * _1982) + _1972;
        float _2757 = (_2751 * _1985) + _1976;
        float _2758 = _2751 * 9.9999997473787516355514526367188e-05;
        float _2759 = (-1.0) - _2758;
        float _2761 = _2758 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2757 > _2761) || ((_2757 < _2759) || ((_2756 > _2761) || ((_2756 < _2759) || ((_2755 < _2759) || (_2755 > _2761))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2879 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2757, cbModelParam._m0[17u].z, fma(_2756, cbModelParam._m0[17u].y, _2755 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2757, cbModelParam._m0[18u].z, fma(_2756, cbModelParam._m0[18u].y, _2755 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2757, cbModelParam._m0[19u].z, fma(_2756, cbModelParam._m0[19u].y, _2755 * cbModelParam._m0[19u].x))), _1915);
            frontier_phi_24_49_ladder = _2879.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2879.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2879.x * cbModelParam._m0[1u].z;
        }
        _2004 = frontier_phi_24_49_ladder_2;
        _2006 = frontier_phi_24_49_ladder_1;
        _2008 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1988 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1014, _1015, _1016), _1915);
        _2004 = _1988.x * cbModelParam._m0[1u].z;
        _2006 = _1988.y * cbModelParam._m0[1u].z;
        _2008 = _1988.z * cbModelParam._m0[1u].z;
    }
    float _2021 = (((_1041 * _991) + _1042) * _1006) * ((cbModelParam._m0[1u].w * (_2004 - _1906)) + _1906);
    float _2023 = (((_1041 * _993) + _1042) * _1006) * ((cbModelParam._m0[1u].w * (_2006 - _1908)) + _1908);
    float _2025 = (((_1041 * _994) + _1042) * _1006) * ((cbModelParam._m0[1u].w * (_2008 - _1910)) + _1910);
    float _2028 = fma(_2025, cbSceneParam._m0[89u].z, fma(_2023, cbSceneParam._m0[89u].y, _2021 * cbSceneParam._m0[89u].x));
    float _2031 = fma(_2025, cbSceneParam._m0[90u].z, fma(_2023, cbSceneParam._m0[90u].y, _2021 * cbSceneParam._m0[90u].x));
    float _2034 = fma(_2025, cbSceneParam._m0[91u].z, fma(_2023, cbSceneParam._m0[91u].y, _2021 * cbSceneParam._m0[91u].x));
    float _2068 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2072 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2076 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2080 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2081 = _2068 / _2080;
    float _2082 = _2072 / _2080;
    float _2083 = _2076 / _2080;
    float _2229;
    float _2230;
    float _2231;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2110 = ((uint(_2083 > cbSceneParam._m0[59u].y) + uint(_2083 > cbSceneParam._m0[59u].x)) + uint(_2083 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2111 = _2110 + 43u;
        uint _2119 = _2110 + 44u;
        uint _2127 = _2110 + 45u;
        uint _2135 = _2110 + 46u;
        float _2146 = fma(_2080, cbSceneParam._m0[_2111].w, fma(_2076, cbSceneParam._m0[_2111].z, fma(_2072, cbSceneParam._m0[_2111].y, _2068 * cbSceneParam._m0[_2111].x)));
        float _2150 = fma(_2080, cbSceneParam._m0[_2119].w, fma(_2076, cbSceneParam._m0[_2119].z, fma(_2072, cbSceneParam._m0[_2119].y, _2068 * cbSceneParam._m0[_2119].x)));
        float _2158 = fma(_2080, cbSceneParam._m0[_2135].w, fma(_2076, cbSceneParam._m0[_2135].z, fma(_2072, cbSceneParam._m0[_2135].y, _2068 * cbSceneParam._m0[_2135].x)));
        float _2163 = cbSceneParam._m0[33u].z * _2158;
        float _2165 = cbSceneParam._m0[33u].w * _2158;
        float _2168 = fma(_2080, cbSceneParam._m0[_2127].w, fma(_2076, cbSceneParam._m0[_2127].z, fma(_2072, cbSceneParam._m0[_2127].y, _2068 * cbSceneParam._m0[_2127].x))) / _2158;
        float _2215 = (cbSceneParam._m0[33u].x - sqrt(((_2082 * _2082) + (_2081 * _2081)) + (_2083 * _2083))) * cbSceneParam._m0[33u].y;
        float _4520 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
        float _2222 = (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2163 + _2146) / _2158, (_2165 + _2150) / _2158), _2168), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2165 + _2146) / _2158, (_2150 - _2163) / _2158), _2168), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2146 - _2163) / _2158, (_2150 - _2165) / _2158), _2168), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2146 - _2165) / _2158, (_2163 + _2150) / _2158), _2168), 0.0)).x), vec4(0.25)));
        _2229 = 1.0 - (_2222 * cbSceneParam._m0[34u].x);
        _2230 = 1.0 - (_2222 * cbSceneParam._m0[34u].y);
        _2231 = 1.0 - (_2222 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2229 = 1.0;
        _2230 = 1.0;
        _2231 = 1.0;
    }
    float _2295;
    float _2297;
    float _2299;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2283 = fma(_2080, cbSceneParam._m0[63u].w, fma(_2076, cbSceneParam._m0[63u].z, fma(_2072, cbSceneParam._m0[63u].y, _2068 * cbSceneParam._m0[63u].x)));
        float _2284 = fma(_2080, cbSceneParam._m0[60u].w, fma(_2076, cbSceneParam._m0[60u].z, fma(_2072, cbSceneParam._m0[60u].y, _2068 * cbSceneParam._m0[60u].x))) / _2283;
        float _2285 = fma(_2080, cbSceneParam._m0[61u].w, fma(_2076, cbSceneParam._m0[61u].z, fma(_2072, cbSceneParam._m0[61u].y, _2068 * cbSceneParam._m0[61u].x))) / _2283;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_2284 >= cbSceneParam._m0[64u].x) && (_2285 >= cbSceneParam._m0[64u].y)) && (_2284 <= cbSceneParam._m0[64u].z)) && (_2285 <= cbSceneParam._m0[64u].w))
        {
            float _2423 = fma(_2080, cbSceneParam._m0[62u].w, fma(_2076, cbSceneParam._m0[62u].z, fma(_2072, cbSceneParam._m0[62u].y, _2068 * cbSceneParam._m0[62u].x))) / _2283;
            float _2427 = isnan(cbSceneParam._m0[41u].w) ? _2423 : (isnan(_2423) ? cbSceneParam._m0[41u].w : max(_2423, cbSceneParam._m0[41u].w));
            float _2470 = (cbSceneParam._m0[33u].x - sqrt(((_2082 * _2082) + (_2081 * _2081)) + (_2083 * _2083))) * cbSceneParam._m0[33u].y;
            float _4536 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
            float _2477 = (isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2284, cbSceneParam._m0[33u].w + _2285), _2427), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2284, _2285 - cbSceneParam._m0[33u].z), _2427), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2284 - cbSceneParam._m0[33u].z, _2285 - cbSceneParam._m0[33u].w), _2427), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2284 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2285), _2427), 0.0)).x), vec4(0.25)));
            float _2481 = 1.0 - (_2477 * cbSceneParam._m0[34u].x);
            float _2482 = 1.0 - (_2477 * cbSceneParam._m0[34u].y);
            float _2483 = 1.0 - (_2477 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2482) ? _2230 : (isnan(_2230) ? _2482 : min(_2230, _2482));
            frontier_phi_36_35_ladder_1 = isnan(_2483) ? _2231 : (isnan(_2231) ? _2483 : min(_2231, _2483));
            frontier_phi_36_35_ladder_2 = isnan(_2481) ? _2229 : (isnan(_2229) ? _2481 : min(_2229, _2481));
        }
        else
        {
            frontier_phi_36_35_ladder = _2230;
            frontier_phi_36_35_ladder_1 = _2231;
            frontier_phi_36_35_ladder_2 = _2229;
        }
        _2295 = frontier_phi_36_35_ladder_2;
        _2297 = frontier_phi_36_35_ladder;
        _2299 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _2295 = _2229;
        _2297 = _2230;
        _2299 = _2231;
    }
    uvec4 _2304 = floatBitsToUint(cbInstanceData._m0[_934 + 5u]);
    uint _2306 = _2304.x * 14u;
    uint _2307 = _2306 + 13u;
    float _2314 = _1006 + (-1.0);
    float _2319 = (cbLight._m0[_2307].x * _2314) + 1.0;
    float _2320 = (cbLight._m0[_2307].y * _2314) + 1.0;
    float _2321 = (cbLight._m0[_2307].z * _2314) + 1.0;
    float _2322 = (cbLight._m0[_2307].w * _2314) + 1.0;
    uint _2323 = _2306 + 5u;
    float _2329 = isnan(1.0) ? _2320 : (isnan(_2320) ? 1.0 : min(_2320, 1.0));
    uint _2333 = _2306 + 4u;
    float _2342 = isnan(1.0) ? _2319 : (isnan(_2319) ? 1.0 : min(_2319, 1.0));
    uint _2346 = _2306 | 1u;
    float _2357 = dot(vec3(cbLight._m0[_2306].xyz), vec3(_791, _792, _793));
    float _2360 = dot(vec3(cbLight._m0[_2346].xyz), vec3(_791, _792, _793));
    float _4572 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
    float _4583 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
    float _2365 = (isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0))) * 0.3183098733425140380859375;
    float _2367 = (isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0))) * 0.3183098733425140380859375;
    float _2374 = ((cbLight._m0[_2323].x * _2329) * _2367) + (((cbLight._m0[_2333].x * _2295) * _2342) * _2365);
    float _2375 = ((_2329 * cbLight._m0[_2323].y) * _2367) + (((cbLight._m0[_2333].y * _2297) * _2342) * _2365);
    float _2376 = ((_2329 * cbLight._m0[_2323].z) * _2367) + (((cbLight._m0[_2333].z * _2299) * _2342) * _2365);
    uvec4 _2380 = floatBitsToUint(cbLight._m0[_2306 + 12u]);
    bool _2382 = _2380.x == 0u;
    float _2484;
    float _2486;
    float _2488;
    if (_2382)
    {
        _2484 = _2374;
        _2486 = _2375;
        _2488 = _2376;
    }
    else
    {
        uint _2492 = _2306 + 6u;
        float _2508 = (dot(vec3(cbLight._m0[_2306 + 2u].xyz), vec3(_791, _792, _793)) * 0.5) + 0.5;
        float _2509 = _2508 * _2508;
        float _4594 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
        float _2510 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
        float _2511 = isnan(1.0) ? _2321 : (isnan(_2321) ? 1.0 : min(_2321, 1.0));
        _2484 = (((cbLight._m0[_2492].x * 0.3183098733425140380859375) * _2510) * _2511) + _2374;
        _2486 = (((cbLight._m0[_2492].y * 0.3183098733425140380859375) * _2510) * _2511) + _2375;
        _2488 = (((cbLight._m0[_2492].z * 0.3183098733425140380859375) * _2510) * _2511) + _2376;
    }
    bool _2491 = _2380.y == 0u;
    float _2546;
    float _2548;
    float _2550;
    if (_2491)
    {
        _2546 = _2484;
        _2548 = _2486;
        _2550 = _2488;
    }
    else
    {
        uint _2719 = _2306 + 7u;
        float _2735 = (dot(vec3(cbLight._m0[_2306 + 3u].xyz), vec3(_791, _792, _793)) * 0.5) + 0.5;
        float _2736 = _2735 * _2735;
        float _4610 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
        float _2737 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
        float _2738 = isnan(1.0) ? _2322 : (isnan(_2322) ? 1.0 : min(_2322, 1.0));
        _2546 = (((cbLight._m0[_2719].x * 0.3183098733425140380859375) * _2737) * _2738) + _2484;
        _2548 = (((cbLight._m0[_2719].y * 0.3183098733425140380859375) * _2737) * _2738) + _2486;
        _2550 = (((cbLight._m0[_2719].z * 0.3183098733425140380859375) * _2737) * _2738) + _2488;
    }
    uint _2553 = _2306 + 8u;
    float _2566 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2306].w)) * _921) * 0.949999988079071044921875);
    float _2567 = _2566 * _2566;
    float _2568 = cbLight._m0[_2306].x + _871;
    float _2569 = cbLight._m0[_2306].y + _872;
    float _2570 = cbLight._m0[_2306].z + _873;
    float _2574 = inversesqrt(dot(vec3(_2568, _2569, _2570), vec3(_2568, _2569, _2570)));
    float _2575 = _2574 * _2568;
    float _2576 = _2574 * _2569;
    float _2577 = _2574 * _2570;
    float _2578 = dot(vec3(_791, _792, _793), vec3(cbLight._m0[_2306].xyz));
    float _4626 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
    float _2581 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
    float _4637 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
    float _2582 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
    float _2583 = dot(vec3(_791, _792, _793), vec3(_2575, _2576, _2577));
    float _4648 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
    float _2586 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
    float _2587 = dot(vec3(cbLight._m0[_2306].xyz), vec3(_2575, _2576, _2577));
    float _4659 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
    float _2591 = _2567 * _2567;
    float _2595 = ((_2586 * _2586) * (_2591 + (-1.0))) + 1.0;
    float _2603 = exp2(log2(1.0 - (isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0)))) * 5.0);
    float _2604 = 0.959999978542327880859375 - _988;
    float _2606 = 0.959999978542327880859375 - _989;
    float _2607 = 0.959999978542327880859375 - _990;
    float _2614 = 1.0 - _2567;
    float _2625 = (0.5 / (((_2582 * ((_2581 * _2614) + _2567)) + 9.9999999392252902907785028219223e-09) + (((_2582 * _2614) + _2567) * _2581))) * _2581;
    float _4670 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
    float _2627 = (isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0))) * (_2591 / ((_2595 * _2595) * 3.141590118408203125));
    uint _2641 = _2306 + 9u;
    float _2652 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2346].w)) * _921) * 0.949999988079071044921875);
    float _2653 = _2652 * _2652;
    float _2654 = cbLight._m0[_2346].x + _871;
    float _2655 = cbLight._m0[_2346].y + _872;
    float _2656 = cbLight._m0[_2346].z + _873;
    float _2660 = inversesqrt(dot(vec3(_2654, _2655, _2656), vec3(_2654, _2655, _2656)));
    float _2661 = _2660 * _2654;
    float _2662 = _2660 * _2655;
    float _2663 = _2660 * _2656;
    float _2664 = dot(vec3(_791, _792, _793), vec3(cbLight._m0[_2346].xyz));
    float _4681 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
    float _2667 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
    float _2668 = dot(vec3(_791, _792, _793), vec3(_2661, _2662, _2663));
    float _4692 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
    float _2671 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
    float _2672 = dot(vec3(cbLight._m0[_2346].xyz), vec3(_2661, _2662, _2663));
    float _4703 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
    float _2676 = _2653 * _2653;
    float _2680 = ((_2671 * _2671) * (_2676 + (-1.0))) + 1.0;
    float _2687 = exp2(log2(1.0 - (isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0)))) * 5.0);
    float _2694 = 1.0 - _2653;
    float _2704 = (0.5 / (((_2582 * ((_2667 * _2694) + _2653)) + 9.9999999392252902907785028219223e-09) + (((_2582 * _2694) + _2653) * _2667))) * _2667;
    float _4714 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0));
    float _2706 = (isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0))) * (_2676 / ((_2680 * _2680) * 3.141590118408203125));
    float _2716 = (((((_2687 * _2604) + _991) * cbLight._m0[_2641].x) * _2706) * _2329) + ((((cbLight._m0[_2553].x * _2295) * ((_2603 * _2604) + _991)) * _2627) * _2342);
    float _2717 = (((((_2687 * _2606) + _993) * cbLight._m0[_2641].y) * _2706) * _2329) + ((((cbLight._m0[_2553].y * _2297) * ((_2603 * _2606) + _993)) * _2627) * _2342);
    float _2718 = (((((_2687 * _2607) + _994) * cbLight._m0[_2641].z) * _2706) * _2329) + ((((cbLight._m0[_2553].z * _2299) * ((_2603 * _2607) + _994)) * _2627) * _2342);
    float _2774;
    float _2776;
    float _2778;
    if (_2382)
    {
        _2774 = _2716;
        _2776 = _2717;
        _2778 = _2718;
    }
    else
    {
        uint _2780 = _2306 + 2u;
        uint _2784 = _2306 + 10u;
        float _2798 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2780].w)) * _921) * 0.949999988079071044921875);
        float _2799 = _2798 * _2798;
        float _2800 = cbLight._m0[_2780].x + _871;
        float _2801 = cbLight._m0[_2780].y + _872;
        float _2802 = cbLight._m0[_2780].z + _873;
        float _2806 = inversesqrt(dot(vec3(_2800, _2801, _2802), vec3(_2800, _2801, _2802)));
        float _2807 = _2806 * _2800;
        float _2808 = _2806 * _2801;
        float _2809 = _2806 * _2802;
        float _2810 = dot(vec3(_791, _792, _793), vec3(cbLight._m0[_2780].xyz));
        float _4725 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
        float _2813 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
        float _2814 = dot(vec3(_791, _792, _793), vec3(_2807, _2808, _2809));
        float _4736 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
        float _2817 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
        float _2818 = dot(vec3(cbLight._m0[_2780].xyz), vec3(_2807, _2808, _2809));
        float _4747 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
        float _2822 = _2799 * _2799;
        float _2826 = ((_2817 * _2817) * (_2822 + (-1.0))) + 1.0;
        float _2833 = exp2(log2(1.0 - (isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0)))) * 5.0);
        float _2840 = 1.0 - _2799;
        float _2850 = (0.5 / (((_2582 * ((_2813 * _2840) + _2799)) + 9.9999999392252902907785028219223e-09) + (((_2582 * _2840) + _2799) * _2813))) * _2813;
        float _4758 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0));
        float _2852 = (isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0))) * (_2822 / ((_2826 * _2826) * 3.141590118408203125));
        float _2853 = isnan(1.0) ? _2321 : (isnan(_2321) ? 1.0 : min(_2321, 1.0));
        _2774 = (((((_2833 * _2604) + _991) * cbLight._m0[_2784].x) * _2852) * _2853) + _2716;
        _2776 = (((((_2833 * _2606) + _993) * cbLight._m0[_2784].y) * _2852) * _2853) + _2717;
        _2778 = (((((_2833 * _2607) + _994) * cbLight._m0[_2784].z) * _2852) * _2853) + _2718;
    }
    float _2884;
    float _2886;
    float _2888;
    if (_2491)
    {
        _2884 = _2774;
        _2886 = _2776;
        _2888 = _2778;
    }
    else
    {
        uint _2895 = _2306 + 3u;
        uint _2899 = _2306 + 11u;
        float _2913 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2895].w)) * _921) * 0.949999988079071044921875);
        float _2914 = _2913 * _2913;
        float _2915 = cbLight._m0[_2895].x + _871;
        float _2916 = cbLight._m0[_2895].y + _872;
        float _2917 = cbLight._m0[_2895].z + _873;
        float _2921 = inversesqrt(dot(vec3(_2915, _2916, _2917), vec3(_2915, _2916, _2917)));
        float _2922 = _2921 * _2915;
        float _2923 = _2921 * _2916;
        float _2924 = _2921 * _2917;
        float _2925 = dot(vec3(_791, _792, _793), vec3(cbLight._m0[_2895].xyz));
        float _4774 = isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : max(_2925, 0.0));
        float _2928 = isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0));
        float _2929 = dot(vec3(_791, _792, _793), vec3(_2922, _2923, _2924));
        float _4785 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0));
        float _2932 = isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0));
        float _2933 = dot(vec3(cbLight._m0[_2895].xyz), vec3(_2922, _2923, _2924));
        float _4796 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0));
        float _2937 = _2914 * _2914;
        float _2941 = ((_2932 * _2932) * (_2937 + (-1.0))) + 1.0;
        float _2948 = exp2(log2(1.0 - (isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0)))) * 5.0);
        float _2955 = 1.0 - _2914;
        float _2965 = (0.5 / (((_2582 * ((_2928 * _2955) + _2914)) + 9.9999999392252902907785028219223e-09) + (((_2582 * _2955) + _2914) * _2928))) * _2928;
        float _4807 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0));
        float _2967 = (isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0))) * (_2937 / ((_2941 * _2941) * 3.141590118408203125));
        float _2968 = isnan(1.0) ? _2322 : (isnan(_2322) ? 1.0 : min(_2322, 1.0));
        _2884 = (((((_2948 * _2604) + _991) * cbLight._m0[_2899].x) * _2967) * _2968) + _2774;
        _2886 = (((((_2948 * _2606) + _993) * cbLight._m0[_2899].y) * _2967) * _2968) + _2776;
        _2888 = (((((_2948 * _2607) + _994) * cbLight._m0[_2899].z) * _2967) * _2968) + _2778;
    }
    float _3033;
    float _3035;
    float _3037;
    float _3039;
    float _3041;
    float _3043;
    if (_2304.y == 0u)
    {
        uvec4 _2989 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2990 = _2989.x;
        uint _3001 = uint((float(_2989.y) * floor(float(uint(cbSceneParam._m0[85u].y * _880) / _2990))) + floor(float(uint(cbSceneParam._m0[85u].x * _879) / _2990)));
        float _3011 = (log2(_2083 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3012 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0));
        uint _3015 = uint(isnan(14.0) ? _3012 : (isnan(_3012) ? 14.0 : min(_3012, 14.0)));
        uvec4 _3020 = texelFetch(g_lightClusterGridBuffer, int(((_3015 << 2u) + (_3001 << 6u)) >> 2u));
        uint _3021 = _3020.x;
        uint _3022 = _2989.z;
        float _3135;
        float _3137;
        float _3139;
        float _3141;
        float _3143;
        float _3145;
        if (((((1u << ((_3022 >> 4u) & 15u)) + 4294967295u) & _3021) == 0u) || ((_3022 & 240u) == 0u))
        {
            _3135 = 0.0;
            _3137 = 0.0;
            _3139 = 0.0;
            _3141 = 0.0;
            _3143 = 0.0;
            _3145 = 0.0;
        }
        else
        {
            float _3136;
            float _3138;
            float _3140;
            float _3142;
            float _3144;
            float _3146;
            float _3288 = 0.0;
            float _3289 = 0.0;
            float _3290 = 0.0;
            float _3291 = 0.0;
            float _3292 = 0.0;
            float _3293 = 0.0;
            uint _3294 = 0u;
            uint _3303;
            bool _3304;
            for (;;)
            {
                _3303 = texelFetch(g_lightClassification, int((((_3015 << 5u) + (_3001 << 9u)) + (_3294 << 2u)) >> 2u)).x;
                _3304 = _3303 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3304)
                {
                    frontier_phi_68_pred = _3293;
                    frontier_phi_68_pred_1 = _3292;
                    frontier_phi_68_pred_2 = _3291;
                    frontier_phi_68_pred_3 = _3289;
                    frontier_phi_68_pred_4 = _3288;
                    frontier_phi_68_pred_5 = _3290;
                }
                else
                {
                    float _3412;
                    float _3413;
                    float _3414;
                    float _3415;
                    float _3416;
                    float _3417;
                    uint _3418;
                    _3412 = _3288;
                    _3413 = _3289;
                    _3414 = _3290;
                    _3415 = _3291;
                    _3416 = _3292;
                    _3417 = _3293;
                    _3418 = _3303;
                    float _3344;
                    float _3345;
                    float _3346;
                    float _3347;
                    float _3348;
                    float _3349;
                    for (;;)
                    {
                        uint _3422 = uint(findLSB(_3418)) + (_3294 << 5u);
                        uint _3419 = (_3418 + 4294967295u) & _3418;
                        uint _3424 = _3422 * 48u;
                        vec4 _3438 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3424)).x, texelFetch(g_PointLightRenderingBuffer, int(_3424 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3424 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3424 + 3u)).x));
                        uint _3444 = (_3422 * 48u) + 4u;
                        vec4 _3457 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3444)).x, texelFetch(g_PointLightRenderingBuffer, int(_3444 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3444 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3444 + 3u)).x));
                        uint _3463 = (_3422 * 48u) + 8u;
                        vec3 _3474 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3463)).x, texelFetch(g_PointLightRenderingBuffer, int(_3463 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3463 + 2u)).x));
                        float _3478 = _3438.x - _2081;
                        float _3479 = _3438.y - _2082;
                        float _3480 = _3438.z - _2083;
                        float _3481 = dot(vec3(_3478, _3479, _3480), vec3(_3478, _3479, _3480));
                        float _3484 = inversesqrt(_3481);
                        float _3485 = _3484 * _3478;
                        float _3486 = _3484 * _3479;
                        float _3487 = _3484 * _3480;
                        float _3488 = dot(vec3(_902, _905, _908), vec3(_3485, _3486, _3487));
                        float _3493 = 1.0 - (_3481 * _3438.w);
                        float _4833 = isnan(0.0) ? _3493 : (isnan(_3493) ? 0.0 : max(_3493, 0.0));
                        float _3494 = isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0));
                        float _3495 = sqrt(_3481) * _3457.w;
                        float _3498 = 1.39999997615814208984375 / (_3495 + 1.39999997615814208984375);
                        float _3499 = _3498 * _3498;
                        float _3502 = ((1.0 - _3499) * _3488) + _3499;
                        float _3505 = _3495 * _3495;
                        float _3509 = ((isnan(0.0) ? _3502 : (isnan(_3502) ? 0.0 : max(_3502, 0.0))) * _3494) / ((_3505 * 0.699999988079071044921875) + 1.0);
                        float _3513 = (-0.0) - _2081;
                        float _3514 = (-0.0) - _2082;
                        float _3515 = (-0.0) - _2083;
                        float _3519 = inversesqrt(dot(vec3(_3513, _3514, _3515), vec3(_3513, _3514, _3515)));
                        float _3520 = _3519 * _3513;
                        float _3521 = _3519 * _3514;
                        float _3522 = _3519 * _3515;
                        float _3529 = exp2(log2(1.0 / ((_3505 * 3.5) + 5.0)) * 0.25);
                        float _3530 = 1.0 - _1022;
                        float _3537 = sqrt(1.0 - ((1.0 - (_3530 * _3530)) * (1.0 - (_3529 * _3529))));
                        float _3538 = _3537 * _3537;
                        float _3539 = _3538 * _3538;
                        float _3540 = _3520 + _3485;
                        float _3541 = _3521 + _3486;
                        float _3542 = _3522 + _3487;
                        float _3546 = inversesqrt(dot(vec3(_3540, _3541, _3542), vec3(_3540, _3541, _3542)));
                        float _3550 = dot(vec3(_902, _905, _908), vec3(_3520, _3521, _3522));
                        float _4849 = isnan(0.0) ? _3550 : (isnan(_3550) ? 0.0 : max(_3550, 0.0));
                        float _3553 = isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0));
                        float _3554 = dot(vec3(_902, _905, _908), vec3(_3546 * _3540, _3546 * _3541, _3546 * _3542));
                        float _4860 = isnan(0.0) ? _3554 : (isnan(_3554) ? 0.0 : max(_3554, 0.0));
                        float _3557 = isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0));
                        float _3561 = ((_3557 * _3557) * (_3539 + (-1.0))) + 1.0;
                        float _3562 = _3498 * _3538;
                        float _3563 = _3562 * _3562;
                        float _3566 = ((1.0 - _3563) * _3488) + _3563;
                        float _4871 = isnan(0.0) ? _3566 : (isnan(_3566) ? 0.0 : max(_3566, 0.0));
                        float _3567 = isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0));
                        float _3568 = 1.0 - _3538;
                        float _3578 = (0.5 / (((_3567 * ((_3553 * _3568) + _3538)) + 9.9999999392252902907785028219223e-09) + (((_3567 * _3568) + _3538) * _3553))) * _3567;
                        float _4882 = isnan(0.0) ? _3578 : (isnan(_3578) ? 0.0 : max(_3578, 0.0));
                        float _3589 = (((_3539 * 3.1415927410125732421875) * (isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0)))) / ((_3561 * _3561) * ((_3505 * 2.1991131305694580078125) + 3.141590118408203125))) * _3494;
                        _3347 = (_3509 * _3457.x) + _3415;
                        _3348 = (_3509 * _3457.y) + _3416;
                        _3349 = (_3509 * _3457.z) + _3417;
                        _3344 = (_3589 * _3474.x) + _3412;
                        _3345 = (_3589 * _3474.y) + _3413;
                        _3346 = (_3589 * _3474.z) + _3414;
                        if (_3419 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3412 = _3344;
                            _3413 = _3345;
                            _3414 = _3346;
                            _3415 = _3347;
                            _3416 = _3348;
                            _3417 = _3349;
                            _3418 = _3419;
                        }
                    }
                    frontier_phi_68_pred = _3349;
                    frontier_phi_68_pred_1 = _3348;
                    frontier_phi_68_pred_2 = _3347;
                    frontier_phi_68_pred_3 = _3345;
                    frontier_phi_68_pred_4 = _3344;
                    frontier_phi_68_pred_5 = _3346;
                }
                _3146 = frontier_phi_68_pred;
                _3144 = frontier_phi_68_pred_1;
                _3142 = frontier_phi_68_pred_2;
                _3138 = frontier_phi_68_pred_3;
                _3136 = frontier_phi_68_pred_4;
                _3140 = frontier_phi_68_pred_5;
                uint _3295 = _3294 + 1u;
                if (_3295 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3288 = _3136;
                    _3289 = _3138;
                    _3290 = _3140;
                    _3291 = _3142;
                    _3292 = _3144;
                    _3293 = _3146;
                    _3294 = _3295;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3135 = _3136;
            _3137 = _3138;
            _3139 = _3140;
            _3141 = _3142;
            _3143 = _3144;
            _3145 = _3146;
        }
        uvec4 _3149 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3150 = _3149.z;
        uint _3152 = (_3150 >> 8u) & 15u;
        float _3256;
        float _3258;
        float _3260;
        float _3262;
        float _3264;
        float _3266;
        if (((4294967295u << _3152) & _3021) == 0u)
        {
            _3256 = _3135;
            _3258 = _3137;
            _3260 = _3139;
            _3262 = _3141;
            _3264 = _3143;
            _3266 = _3145;
        }
        else
        {
            float _3281 = inversesqrt(dot(vec3(_2081, _2082, _2083), vec3(_2081, _2082, _2083)));
            float _3282 = _3281 * _2081;
            float _3283 = _3281 * _2082;
            float _3284 = _3281 * _2083;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_3152 < ((_3150 >> 12u) & 15u))
            {
                float _3257;
                float _3259;
                float _3261;
                float _3263;
                float _3265;
                float _3267;
                float _3395 = _3135;
                float _3396 = _3137;
                float _3397 = _3139;
                float _3398 = _3141;
                float _3399 = _3143;
                float _3400 = _3145;
                uint _3401 = _3152;
                uint _3410;
                bool _3411;
                for (;;)
                {
                    _3410 = texelFetch(g_lightClassification, int((((_3015 << 5u) + (_3001 << 9u)) + (_3401 << 2u)) >> 2u)).x;
                    _3411 = _3410 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3411)
                    {
                        frontier_phi_74_pred = _3397;
                        frontier_phi_74_pred_1 = _3396;
                        frontier_phi_74_pred_2 = _3395;
                        frontier_phi_74_pred_3 = _3400;
                        frontier_phi_74_pred_4 = _3399;
                        frontier_phi_74_pred_5 = _3398;
                    }
                    else
                    {
                        float _3594;
                        float _3595;
                        float _3596;
                        float _3597;
                        float _3598;
                        float _3599;
                        float _3887;
                        float _3888;
                        float _3889;
                        float _3890;
                        float _3891;
                        float _3892;
                        float _3607 = _3395;
                        float _3608 = _3396;
                        float _3609 = _3397;
                        float _3610 = _3398;
                        float _3611 = _3399;
                        float _3612 = _3400;
                        uint _3613 = _3410;
                        uint _3614;
                        vec4 _3639;
                        float _3640;
                        vec4 _3655;
                        vec3 _3667;
                        vec4 _3682;
                        vec4 _3697;
                        float _3743;
                        bool _3744;
                        for (;;)
                        {
                            uint _3624 = ((_3401 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3613));
                            _3614 = (_3613 + 4294967295u) & _3613;
                            uint _3626 = _3624 * 40u;
                            _3639 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3626)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 3u)).x));
                            _3640 = _3639.w;
                            uint _3642 = (_3624 * 40u) + 4u;
                            _3655 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3642)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 3u)).x));
                            uint _3657 = (_3624 * 40u) + 8u;
                            _3667 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3657)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 2u)).x));
                            uint _3669 = (_3624 * 40u) + 16u;
                            _3682 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3669)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 3u)).x));
                            uint _3684 = (_3624 * 40u) + 20u;
                            _3697 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3684)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3684 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3684 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3684 + 3u)).x));
                            uint _3699 = (_3624 * 40u) + 24u;
                            vec4 _3712 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3699)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3699 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3699 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3699 + 3u)).x));
                            uint _3718 = (_3624 * 40u) + 28u;
                            vec4 _3731 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3718)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3718 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3718 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3718 + 3u)).x));
                            _3743 = fma(_2083, _3731.z, fma(_2082, _3731.y, _3731.x * _2081)) + _3731.w;
                            _3744 = !((fma(_2083, _3712.z, fma(_2082, _3712.y, _3712.x * _2081)) + _3712.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3744)
                            {
                                float _3771 = _3639.x - _2081;
                                float _3772 = _3639.y - _2082;
                                float _3773 = _3639.z - _2083;
                                float _3774 = dot(vec3(_3771, _3772, _3773), vec3(_3771, _3772, _3773));
                                float _3777 = inversesqrt(_3774);
                                float _3778 = _3777 * _3771;
                                float _3779 = _3777 * _3772;
                                float _3780 = _3777 * _3773;
                                float _3784 = 1.0 - (_3774 / (_3640 * _3640));
                                float _4893 = isnan(0.0) ? _3784 : (isnan(_3784) ? 0.0 : max(_3784, 0.0));
                                float _3785 = isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0));
                                float _3789 = sqrt(_3774) * _3655.w;
                                float _3791 = 1.39999997615814208984375 / (_3789 + 1.39999997615814208984375);
                                float _3792 = _3791 * _3791;
                                float _3795 = ((1.0 - _3792) * dot(vec3(_3778, _3779, _3780), vec3(_902, _905, _908))) + _3792;
                                float _3798 = _3789 * _3789;
                                float _3802 = (fma(_2083, _3682.z, fma(_2082, _3682.y, _3682.x * _2081)) + _3682.w) / _3743;
                                float _3803 = (fma(_2083, _3697.z, fma(_2082, _3697.y, _3697.x * _2081)) + _3697.w) / _3743;
                                float _3807 = 1.0 - dot(vec2(_3802, _3803), vec2(_3802, _3803));
                                float _4909 = isnan(0.0) ? _3807 : (isnan(_3807) ? 0.0 : max(_3807, 0.0));
                                float _3808 = isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0));
                                float _3809 = _3808 * (((isnan(0.0) ? _3795 : (isnan(_3795) ? 0.0 : max(_3795, 0.0))) * _3785) / ((_3798 * 0.699999988079071044921875) + 1.0));
                                float _3821 = exp2(log2(1.0 / ((_3798 * 3.5) + 5.0)) * 0.25);
                                float _3822 = 1.0 - _1022;
                                float _3829 = sqrt(1.0 - ((1.0 - (_3822 * _3822)) * (1.0 - (_3821 * _3821))));
                                float _3830 = _3829 * _3829;
                                float _3831 = _3830 * _3830;
                                float _3832 = _3778 - _3282;
                                float _3833 = _3779 - _3283;
                                float _3834 = _3780 - _3284;
                                float _3838 = inversesqrt(dot(vec3(_3832, _3833, _3834), vec3(_3832, _3833, _3834)));
                                float _3842 = dot(vec3(_902, _905, _908), vec3((-0.0) - _3282, (-0.0) - _3283, (-0.0) - _3284));
                                float _4920 = isnan(0.0) ? _3842 : (isnan(_3842) ? 0.0 : max(_3842, 0.0));
                                float _3845 = isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0));
                                float _3846 = dot(vec3(_902, _905, _908), vec3(_3838 * _3832, _3838 * _3833, _3838 * _3834));
                                float _4931 = isnan(0.0) ? _3846 : (isnan(_3846) ? 0.0 : max(_3846, 0.0));
                                float _3849 = isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0));
                                float _3853 = ((_3849 * _3849) * (_3831 + (-1.0))) + 1.0;
                                float _3854 = _3791 * _3830;
                                float _3855 = _3854 * _3854;
                                float _3861 = ((1.0 - _3855) * dot(vec3(_902, _905, _908), vec3(_3778, _3779, _3780))) + _3855;
                                float _4942 = isnan(0.0) ? _3861 : (isnan(_3861) ? 0.0 : max(_3861, 0.0));
                                float _3862 = isnan(1.0) ? _4942 : (isnan(_4942) ? 1.0 : min(_4942, 1.0));
                                float _3863 = 1.0 - _3830;
                                float _3873 = (0.5 / (((_3862 * ((_3845 * _3863) + _3830)) + 9.9999999392252902907785028219223e-09) + (((_3862 * _3863) + _3830) * _3845))) * _3862;
                                float _4953 = isnan(0.0) ? _3873 : (isnan(_3873) ? 0.0 : max(_3873, 0.0));
                                float _3883 = (_3808 * _3785) * (((_3831 * 3.1415927410125732421875) * (isnan(1.0) ? _4953 : (isnan(_4953) ? 1.0 : min(_4953, 1.0)))) / ((_3853 * _3853) * ((_3798 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3883 * _3667.z;
                                frontier_phi_80_pred_1 = _3883 * _3667.y;
                                frontier_phi_80_pred_2 = _3883 * _3667.x;
                                frontier_phi_80_pred_3 = _3809 * _3655.z;
                                frontier_phi_80_pred_4 = _3809 * _3655.y;
                                frontier_phi_80_pred_5 = _3809 * _3655.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3889 = frontier_phi_80_pred;
                            _3888 = frontier_phi_80_pred_1;
                            _3887 = frontier_phi_80_pred_2;
                            _3892 = frontier_phi_80_pred_3;
                            _3891 = frontier_phi_80_pred_4;
                            _3890 = frontier_phi_80_pred_5;
                            _3597 = _3890 + _3610;
                            _3598 = _3891 + _3611;
                            _3599 = _3892 + _3612;
                            _3594 = _3887 + _3607;
                            _3595 = _3888 + _3608;
                            _3596 = _3889 + _3609;
                            if (_3614 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3607 = _3594;
                                _3608 = _3595;
                                _3609 = _3596;
                                _3610 = _3597;
                                _3611 = _3598;
                                _3612 = _3599;
                                _3613 = _3614;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3596;
                        frontier_phi_74_pred_1 = _3595;
                        frontier_phi_74_pred_2 = _3594;
                        frontier_phi_74_pred_3 = _3599;
                        frontier_phi_74_pred_4 = _3598;
                        frontier_phi_74_pred_5 = _3597;
                    }
                    _3261 = frontier_phi_74_pred;
                    _3259 = frontier_phi_74_pred_1;
                    _3257 = frontier_phi_74_pred_2;
                    _3267 = frontier_phi_74_pred_3;
                    _3265 = frontier_phi_74_pred_4;
                    _3263 = frontier_phi_74_pred_5;
                    uint _3402 = _3401 + 1u;
                    if (_3402 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3395 = _3257;
                        _3396 = _3259;
                        _3397 = _3261;
                        _3398 = _3263;
                        _3399 = _3265;
                        _3400 = _3267;
                        _3401 = _3402;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _3265;
                frontier_phi_62_63_ladder_1 = _3263;
                frontier_phi_62_63_ladder_2 = _3261;
                frontier_phi_62_63_ladder_3 = _3267;
                frontier_phi_62_63_ladder_4 = _3259;
                frontier_phi_62_63_ladder_5 = _3257;
            }
            else
            {
                frontier_phi_62_63_ladder = _3143;
                frontier_phi_62_63_ladder_1 = _3141;
                frontier_phi_62_63_ladder_2 = _3139;
                frontier_phi_62_63_ladder_3 = _3145;
                frontier_phi_62_63_ladder_4 = _3137;
                frontier_phi_62_63_ladder_5 = _3135;
            }
            _3256 = frontier_phi_62_63_ladder_5;
            _3258 = frontier_phi_62_63_ladder_4;
            _3260 = frontier_phi_62_63_ladder_2;
            _3262 = frontier_phi_62_63_ladder_1;
            _3264 = frontier_phi_62_63_ladder;
            _3266 = frontier_phi_62_63_ladder_3;
        }
        float _3271 = isnan(1.0) ? _1006 : (isnan(_1006) ? 1.0 : min(_1006, 1.0));
        _3033 = (_3271 * _3262) + _2546;
        _3035 = (_3271 * _3264) + _2548;
        _3037 = (_3271 * _3266) + _2550;
        _3039 = ((_3256 * _991) * _3271) + _2884;
        _3041 = ((_3258 * _993) * _3271) + _2886;
        _3043 = ((_3260 * _994) * _3271) + _2888;
    }
    else
    {
        _3033 = _2546;
        _3035 = _2548;
        _3037 = _2550;
        _3039 = _2884;
        _3041 = _2886;
        _3043 = _2888;
    }
    uint _3049 = _935 + uint(cbMatDynParam._m0[0u].w);
    float _3057 = ((cbMtdParam._m0[11u].x * cbMtdParam._m0[22u].z) * _735.x) * cbInstanceData._m0[_3049].x;
    float _3060 = ((cbMtdParam._m0[11u].y * cbMtdParam._m0[22u].z) * _735.y) * cbInstanceData._m0[_3049].y;
    float _3063 = ((cbMtdParam._m0[11u].z * cbMtdParam._m0[22u].z) * _735.z) * cbInstanceData._m0[_3049].z;
    float _4969 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _4980 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    float _4991 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
    float _3080 = (((isnan(1.0) ? _4969 : (isnan(_4969) ? 1.0 : min(_4969, 1.0))) * (_3033 + ((isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0))) * _1006))) + ((_3039 + ((isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0))) * _1815)) * cbPerFrame._m0[3u].x)) + _3057;
    float _3082 = (_3060 + ((_3041 + ((isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0))) * _1815)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4980 : (isnan(_4980) ? 1.0 : min(_4980, 1.0))) * (_3035 + ((isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0))) * _1006)));
    float _3084 = (_3063 + ((_3043 + ((isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0))) * _1815)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4991 : (isnan(_4991) ? 1.0 : min(_4991, 1.0))) * (_3037 + ((isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0))) * _1006)));
    float _5017 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3097 = isnan(1.0) ? _5017 : (isnan(_5017) ? 1.0 : min(_5017, 1.0));
    uint _3098 = _934 + 6u;
    float _3106 = _879 / cbSceneParam._m0[86u].x;
    float _3107 = _880 / cbSceneParam._m0[86u].y;
    vec4 _3121 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3106, _3107, (log2((isnan(cbSceneParam._m0[77u].w) ? _814 : (isnan(_814) ? cbSceneParam._m0[77u].w : min(_814, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3123 = _3121.x;
    float _3124 = _3121.y;
    float _3125 = _3121.z;
    float _3126 = _3121.w;
    float _3197;
    float _3199;
    float _3201;
    float _3203;
    if (_814 > cbSceneParam._m0[78u].w)
    {
        float _3160 = isnan(_814) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _814 : min(cbSceneParam._m0[80u].w, _814));
        float _3161 = _3160 / _814;
        float _3172 = _3161 * _864;
        float _3173 = _865 * _3161;
        float _3174 = (-0.0) - _3173;
        float _3175 = _3161 * _866;
        float _3177 = (cbSceneParam._m0[77u].w * _3174) / _3160;
        float _3178 = _3177 + cbSceneParam._m0[79u].w;
        float _3179 = cbSceneParam._m0[79u].w - _3173;
        float _3185 = sqrt(((_3172 * _3172) + (_3173 * _3173)) + (_3175 * _3175));
        float _3188 = (1.0 - (cbSceneParam._m0[77u].w / _3160)) * _3185;
        float _3193 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3195 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3357;
        if (abs((_3174 - _3177) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3357 = ((((_3178 > 0.0) ? exp2(_3193 * _3178) : (2.0 - exp2(_3195 * _3178))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3188;
        }
        else
        {
            float _3317 = 1.0 / cbSceneParam._m0[80u].x;
            float _3318 = isnan(_3179) ? _3178 : (isnan(_3178) ? _3179 : max(_3178, _3179));
            float _3319 = isnan(_3179) ? _3178 : (isnan(_3178) ? _3179 : min(_3178, _3179));
            float _3328 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : min(_3318, 0.0));
            float _3329 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : min(_3319, 0.0));
            _3357 = ((abs(_3185 / _3174) * cbSceneParam._m0[80u].y) * ((((_3328 - _3329) * 2.0) - ((exp2(_3193 * (isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0)))) - exp2(_3193 * (isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0))))) * _3317)) - ((exp2(_3195 * _3328) - exp2(_3195 * _3329)) * _3317))) + (_3188 * cbSceneParam._m0[80u].z);
        }
        vec4 _3359 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3106, _3107, 1.0), 0.0);
        float _3368 = exp2((_3357 * (-1.44269502162933349609375)) * (1.0 - _3359.w));
        float _3369 = log2(_3368);
        float _3385 = log2(_3126);
        _3197 = (exp2(_3385 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3369 * cbSceneParam._m0[78u].x)) * _3359.x) / cbSceneParam._m0[78u].x)) + _3123;
        _3199 = (exp2(_3385 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3369 * cbSceneParam._m0[78u].y)) * _3359.y) / cbSceneParam._m0[78u].y)) + _3124;
        _3201 = (exp2(_3385 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3369 * cbSceneParam._m0[78u].z)) * _3359.z) / cbSceneParam._m0[78u].z)) + _3125;
        _3203 = _3368 * _3126;
    }
    else
    {
        _3197 = _3123;
        _3199 = _3124;
        _3201 = _3125;
        _3203 = _3126;
    }
    float _3215 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3216 = _3215 == 3.0;
    float _3217 = log2(_3203);
    float _3221 = exp2(_3217 * cbSceneParam._m0[78u].x);
    float _3222 = exp2(_3217 * cbSceneParam._m0[78u].y);
    float _3223 = exp2(_3217 * cbSceneParam._m0[78u].z);
    float _3224 = _3221 * (isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0)));
    float _3225 = _3222 * (isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0)));
    float _3226 = _3223 * (isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : max(_3084, 0.0)));
    float _3235 = (_3215 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3235 * (_3216 ? _3224 : (_3224 + (cbSceneParam._m0[72u].w * _3197)));
    SV_Target.y = _3235 * (_3216 ? _3225 : (_3225 + (cbSceneParam._m0[72u].w * _3199)));
    SV_Target.z = _3235 * (_3216 ? _3226 : (_3226 + (cbSceneParam._m0[72u].w * _3201)));
    SV_Target.w = cbInstanceData._m0[_3098].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _3057) * _3097) * _3221) * _3235;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _3060) * _3097) * _3222) * _3235;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _3063) * _3097) * _3223) * _3235;
    SV_Target_1.w = cbInstanceData._m0[_3098].w;
}


