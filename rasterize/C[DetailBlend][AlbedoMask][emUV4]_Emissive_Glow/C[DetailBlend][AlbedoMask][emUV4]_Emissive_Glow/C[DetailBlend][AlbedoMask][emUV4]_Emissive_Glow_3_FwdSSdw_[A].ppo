#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 11) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 12) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1314;
float _3765;
float _3766;
float _3767;
float _3768;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _230 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _238 = _237 * NORMAL.x;
    float _239 = _237 * NORMAL.y;
    float _240 = _237 * NORMAL.z;
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _252;
    float _253;
    float _254;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _252 = (-0.0) - _238;
        _253 = (-0.0) - _239;
        _254 = (-0.0) - _240;
    }
    else
    {
        _252 = _238;
        _253 = _239;
        _254 = _240;
    }
    vec4 _272 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _286 = exp2(log2(_272.w * cbMtdParam._m0[23u].z) * cbMtdParam._m0[21u].y);
    float _287 = isnan(0.0) ? _286 : (isnan(_286) ? 0.0 : max(_286, 0.0));
    float _288 = isnan(1.0) ? _287 : (isnan(_287) ? 1.0 : min(_287, 1.0));
    vec4 _302 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _306 = _302.z;
    float _307 = _302.w;
    float _315 = exp2(log2(_306 * cbMtdParam._m0[21u].w) * cbMtdParam._m0[20u].y);
    float _316 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _317 = isnan(1.0) ? _316 : (isnan(_316) ? 1.0 : min(_316, 1.0));
    vec4 _330 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    vec4 _355 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _365 = cbMtdParam._m0[9u].x * _355.x;
    float _366 = cbMtdParam._m0[9u].y * _355.y;
    float _367 = cbMtdParam._m0[9u].z * _355.z;
    float _374 = (((cbMtdParam._m0[10u].x * _330.x) - _365) * _317) + _365;
    float _375 = (((cbMtdParam._m0[10u].y * _330.y) - _366) * _317) + _366;
    float _376 = (((cbMtdParam._m0[10u].z * _330.z) - _367) * _317) + _367;
    float _383 = exp2(log2(_307) * cbMtdParam._m0[22u].y);
    vec4 _396 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _416 = (((cbMtdParam._m0[12u].x * _396.x) - _374) * _383) + _374;
    float _417 = (((cbMtdParam._m0[12u].y * _396.y) - _375) * _383) + _375;
    float _418 = (((cbMtdParam._m0[12u].z * _396.z) - _376) * _383) + _376;
    vec4 _430 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _454 = (_272.x * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].x * _430.x) - _416) * _288) + _416);
    float _456 = (_272.y * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].y * _430.y) - _417) * _288) + _417);
    float _458 = (_272.z * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].z * _430.z) - _418) * _288) + _418);
    float _463 = exp2(log2(1.0 - _307) * 0.00999999977648258209228515625);
    float _481 = ((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_11, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x - cbMtdParam._m0[22u].w) * _463) + cbMtdParam._m0[22u].w;
    float _500 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w)).x - _481) + cbMtdParam._m0[21u].z) * _383) + _481;
    float _520 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w)).x - _500) + cbMtdParam._m0[23u].w) * _288) + _500;
    vec4 _533 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _551 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _553 = _551.x;
    float _554 = _551.y;
    float _557 = cbMtdParam._m0[20u].x + _551.z;
    float _560 = (((cbMtdParam._m0[21u].x + _533.z) - _557) * _463) + _557;
    vec4 _573 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _585 = (_306 * 2.0) * ((((_573.z - _560) + cbMtdParam._m0[23u].y) * _383) + _560);
    vec4 _598 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _607 = (((_598.z - _585) + cbMtdParam._m0[22u].x) * _288) + _585;
    vec4 _626 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _641 = ((_533.x - _553) * _463) + _553;
    float _642 = ((_533.y - _554) * _463) + _554;
    float _647 = ((_573.x - _641) * _383) + _641;
    float _648 = ((_573.y - _642) * _383) + _642;
    float _657 = ((((_598.x - _647) * _288) + _647) * 2.0) + (-1.0);
    float _658 = ((((_598.y - _648) * _288) + _648) * 2.0) + (-1.0);
    float _659 = dot(vec2(_657, _658), vec2(_657, _658));
    float _3797 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _664 = sqrt(1.0 - (isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0))));
    float _667 = (cbMtdParam._m0[23u].x * ((_302.x * 2.0) + (-1.0))) + _657;
    float _668 = (cbMtdParam._m0[23u].x * ((_302.y * 2.0) + (-1.0))) + _658;
    float _671 = fma(_664, _252, fma(_668, _244 * TANGENT.x, (_230 * _223) * _667));
    float _674 = fma(_664, _253, fma(_668, _244 * TANGENT.y, (_230 * _224) * _667));
    float _677 = fma(_664, _254, fma(_668, _244 * TANGENT.z, (_230 * _225) * _667));
    float _681 = inversesqrt(dot(vec3(_671, _674, _677), vec3(_671, _674, _677)));
    float _682 = _681 * _671;
    float _683 = _681 * _674;
    float _684 = _681 * _677;
    float _3808 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _685 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
    float _3819 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _3830 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _3841 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _3852 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _689 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
    float _705 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _745 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _755 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _745);
    float _756 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _745);
    float _757 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _745);
    float _761 = inversesqrt(dot(vec3(_755, _756, _757), vec3(_755, _756, _757)));
    float _762 = _755 * _761;
    float _763 = _756 * _761;
    float _764 = _757 * _761;
    vec4 _769 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _771 = _769.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _994 = sqrt(((_755 * _755) + (_756 * _756)) + (_757 * _757));
        float _1000 = (cbMatDynParam._m0[5u].x * _994) + cbMatDynParam._m0[5u].y;
        float _3863 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1001 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
        float _1005 = (cbMatDynParam._m0[5u].z * _994) + cbMatDynParam._m0[5u].w;
        float _3874 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0))) - _1001)) + _1001) < ((_771 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _783 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _784 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _786 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _788 = _786.w;
    float _807 = fma(_684, cbSceneParam._m0[5u].z, fma(_683, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _682));
    float _810 = fma(_684, cbSceneParam._m0[6u].z, fma(_683, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _682));
    float _813 = fma(_684, cbSceneParam._m0[7u].z, fma(_683, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _682));
    vec4 _815 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _826 = (((_815.y - _685) + (_815.w * _685)) * cbMtdParam._m0[3u].x) + _685;
    uint _839 = uint(roundEven(NORMAL.w)) * 13u;
    uint _840 = _839 + 9u;
    uint _841 = _840 + uint(cbMatDynParam._m0[0u].w);
    float _847 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0)))) * cbInstanceData._m0[_841].x;
    float _848 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0)))) * cbInstanceData._m0[_841].y;
    float _849 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0)))) * cbInstanceData._m0[_841].z;
    float _3885 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _850 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
    float _3896 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _851 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
    float _3907 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _852 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
    vec4 _853 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _858 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _869 = (((_858.x - _689) + (_858.w * _689)) * cbMtdParam._m0[3u].x) + _689;
    float _882 = (cbMtdParam._m0[3u].x * (((_850 * _788) - _850) + _853.x)) + _850;
    float _883 = (cbMtdParam._m0[3u].x * (((_851 * _788) - _851) + _853.y)) + _851;
    float _884 = (cbMtdParam._m0[3u].x * (((_852 * _788) - _852) + _853.z)) + _852;
    float _885 = 1.0 - _869;
    float _886 = _885 * _882;
    float _887 = _885 * _883;
    float _888 = _885 * _884;
    float _893 = (_882 + (-0.039999999105930328369140625)) * _869;
    float _894 = (_883 + (-0.039999999105930328369140625)) * _869;
    float _895 = (_884 + (-0.039999999105930328369140625)) * _869;
    float _896 = _893 + 0.039999999105930328369140625;
    float _898 = _894 + 0.039999999105930328369140625;
    float _899 = _895 + 0.039999999105930328369140625;
    vec4 _908 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _783, cbSceneParam._m0[86u].y * _784));
    float _911 = _908.x * TEXCOORD_4.z;
    float _912 = dot(vec3(_682, _683, _684), vec3(_762, _763, _764));
    float _915 = _912 * 2.0;
    float _919 = (_915 * _682) - _762;
    float _920 = (_915 * _683) - _763;
    float _921 = (_915 * _684) - _764;
    float _925 = abs(dot(vec3(_762, _763, _764), vec3(_682, _683, _684)));
    float _3918 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
    float _927 = sqrt(_826);
    float _940 = exp2((_927 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_927 * 3.0));
    float _946 = (1.0 - _940) * ((_927 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _947 = _940 * _927;
    float _975 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _979 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _983 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1313;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1038 = fma(_983, cbModelParam._m0[26u].z, fma(_979, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _975));
        float _1042 = fma(_983, cbModelParam._m0[27u].z, fma(_979, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _975));
        float _1046 = fma(_983, cbModelParam._m0[28u].z, fma(_979, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _975));
        float _1071 = _975 + _682;
        float _1072 = _979 + _683;
        float _1073 = _983 + _684;
        float _1083 = fma(_1073, cbModelParam._m0[26u].z, fma(_1072, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1071)) - _1038;
        float _1084 = fma(_1073, cbModelParam._m0[27u].z, fma(_1072, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1071)) - _1042;
        float _1085 = fma(_1073, cbModelParam._m0[28u].z, fma(_1072, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1071)) - _1046;
        float _1089 = inversesqrt(dot(vec3(_1083, _1084, _1085), vec3(_1083, _1084, _1085)));
        float _1102 = ((_1089 * _1083) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1038 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1103 = ((_1089 * _1084) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1042 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1104 = ((_1089 * _1085) / cbModelParam._m0[34u].z) + ((((((_1046 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1107 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1102, _1103, _1104), 0.0);
        vec4 _1114 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1102, _1103, _1104), 0.0);
        vec4 _1121 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1102, _1103, _1104), 0.0);
        vec4 _1128 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1102, _1103, _1104), 0.0);
        float _1141 = exp2((_1107.w + (-0.5)) * 20.0) * 2.0;
        float _1142 = _1141 * (_1107.x + (-0.5));
        float _1143 = _1141 * (_1107.y + (-0.5));
        float _1144 = _1141 * (_1107.z + (-0.5));
        float _1151 = exp2((_1114.w + (-0.5)) * 20.0) * 2.0;
        float _1152 = _1151 * (_1114.x + (-0.5));
        float _1153 = _1151 * (_1114.y + (-0.5));
        float _1154 = _1151 * (_1114.z + (-0.5));
        float _1161 = exp2((_1121.w + (-0.5)) * 20.0) * 2.0;
        float _1162 = _1161 * (_1121.x + (-0.5));
        float _1163 = _1161 * (_1121.y + (-0.5));
        float _1164 = _1161 * (_1121.z + (-0.5));
        float _1171 = exp2((_1128.w + (-0.5)) * 20.0) * 2.0;
        float _1172 = _1171 * (_1128.x + (-0.5));
        float _1173 = _1171 * (_1128.y + (-0.5));
        float _1174 = _1171 * (_1128.z + (-0.5));
        float _1175 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1176 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1177 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1178 = _1142 * 0.5;
        float _1179 = _1152 * 0.5;
        float _1180 = _1162 * 0.5;
        float _1181 = dot(vec3(_1178, _1179, _1180), vec3(_1178, _1179, _1180));
        float _1186 = (_1181 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1181);
        float _1195 = (dot(vec3(_682, _683, _684), vec3(_1186 * _1178, _1186 * _1179, _1186 * _1180)) + 1.0) * 0.5;
        float _3944 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1205 = sqrt(((_1179 * _1179) + (_1178 * _1178)) + (_1180 * _1180)) / (_1175 + 9.9999997473787516355514526367188e-06);
        float _3955 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
        float _1207 = _1206 * 2.0;
        float _1211 = (1.0 - _1206) / (_1206 + 1.0);
        float _3966 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1212 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
        float _1221 = ((((1.0 - _1212) * (_1207 + 2.0)) * exp2(log2(isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0))) * (_1207 + 1.0))) + _1212) * _1175;
        float _1222 = _1143 * 0.5;
        float _1223 = _1153 * 0.5;
        float _1224 = _1163 * 0.5;
        float _1225 = dot(vec3(_1222, _1223, _1224), vec3(_1222, _1223, _1224));
        float _1230 = (_1225 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1225);
        float _1238 = (dot(vec3(_682, _683, _684), vec3(_1230 * _1222, _1230 * _1223, _1230 * _1224)) + 1.0) * 0.5;
        float _3977 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1247 = sqrt(((_1223 * _1223) + (_1222 * _1222)) + (_1224 * _1224)) / (_1176 + 9.9999997473787516355514526367188e-06);
        float _3988 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _1249 = _1248 * 2.0;
        float _1253 = (1.0 - _1248) / (_1248 + 1.0);
        float _3999 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1254 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _1263 = ((((1.0 - _1254) * (_1249 + 2.0)) * exp2(log2(isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))) * (_1249 + 1.0))) + _1254) * _1176;
        float _1264 = _1144 * 0.5;
        float _1265 = _1154 * 0.5;
        float _1266 = _1164 * 0.5;
        float _1267 = dot(vec3(_1264, _1265, _1266), vec3(_1264, _1265, _1266));
        float _1272 = (_1267 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1267);
        float _1280 = (dot(vec3(_682, _683, _684), vec3(_1272 * _1264, _1272 * _1265, _1272 * _1266)) + 1.0) * 0.5;
        float _4010 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1289 = sqrt(((_1265 * _1265) + (_1264 * _1264)) + (_1266 * _1266)) / (_1177 + 9.9999997473787516355514526367188e-06);
        float _4021 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _1291 = _1290 * 2.0;
        float _1295 = (1.0 - _1290) / (_1290 + 1.0);
        float _4032 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _1305 = ((((1.0 - _1296) * (_1291 + 2.0)) * exp2(log2(isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))) * (_1291 + 1.0))) + _1296) * _1177;
        _1313 = _1144;
        _1315 = _1143;
        _1316 = _1142;
        _1317 = _1154;
        _1318 = _1153;
        _1319 = _1152;
        _1320 = _1164;
        _1321 = _1163;
        _1322 = _1162;
        _1323 = _1177;
        _1324 = _1176;
        _1325 = _1175;
        _1326 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0)));
        _1327 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0)));
        _1328 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0)));
    }
    else
    {
        _1313 = _1314;
        _1315 = _1314;
        _1316 = _1314;
        _1317 = _1314;
        _1318 = _1314;
        _1319 = _1314;
        _1320 = _1314;
        _1321 = _1314;
        _1322 = _1314;
        _1323 = _1314;
        _1324 = _1314;
        _1325 = _1314;
        _1326 = 0.0;
        _1327 = 0.0;
        _1328 = 0.0;
    }
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1357 = fma(_983, cbModelParam._m0[30u].z, fma(_979, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _975));
        float _1361 = fma(_983, cbModelParam._m0[31u].z, fma(_979, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _975));
        float _1365 = fma(_983, cbModelParam._m0[32u].z, fma(_979, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _975));
        float _1388 = _975 + _682;
        float _1389 = _979 + _683;
        float _1390 = _983 + _684;
        float _1400 = fma(_1390, cbModelParam._m0[30u].z, fma(_1389, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1388)) - _1357;
        float _1401 = fma(_1390, cbModelParam._m0[31u].z, fma(_1389, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1388)) - _1361;
        float _1402 = fma(_1390, cbModelParam._m0[32u].z, fma(_1389, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1388)) - _1365;
        float _1406 = inversesqrt(dot(vec3(_1400, _1401, _1402), vec3(_1400, _1401, _1402)));
        float _1419 = ((_1406 * _1400) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1357 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1420 = ((_1406 * _1401) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1361 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1421 = ((_1406 * _1402) / cbModelParam._m0[35u].z) + ((((((_1365 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1423 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1419, _1420, _1421), 0.0);
        vec4 _1430 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1419, _1420, _1421), 0.0);
        vec4 _1437 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1419, _1420, _1421), 0.0);
        vec4 _1444 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1419, _1420, _1421), 0.0);
        float _1456 = exp2((_1423.w + (-0.5)) * 20.0) * 2.0;
        float _1457 = _1456 * (_1423.x + (-0.5));
        float _1458 = _1456 * (_1423.y + (-0.5));
        float _1459 = _1456 * (_1423.z + (-0.5));
        float _1466 = exp2((_1430.w + (-0.5)) * 20.0) * 2.0;
        float _1467 = _1466 * (_1430.x + (-0.5));
        float _1468 = _1466 * (_1430.y + (-0.5));
        float _1469 = _1466 * (_1430.z + (-0.5));
        float _1476 = exp2((_1437.w + (-0.5)) * 20.0) * 2.0;
        float _1477 = _1476 * (_1437.x + (-0.5));
        float _1478 = _1476 * (_1437.y + (-0.5));
        float _1479 = _1476 * (_1437.z + (-0.5));
        float _1486 = exp2((_1444.w + (-0.5)) * 20.0) * 2.0;
        float _1487 = _1486 * (_1444.x + (-0.5));
        float _1488 = _1486 * (_1444.y + (-0.5));
        float _1489 = _1486 * (_1444.z + (-0.5));
        float _1490 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1491 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1492 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1493 = _1457 * 0.5;
        float _1494 = _1467 * 0.5;
        float _1495 = _1477 * 0.5;
        float _1496 = dot(vec3(_1493, _1494, _1495), vec3(_1493, _1494, _1495));
        float _1501 = (_1496 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1496);
        float _1509 = (dot(vec3(_682, _683, _684), vec3(_1501 * _1493, _1501 * _1494, _1501 * _1495)) + 1.0) * 0.5;
        float _4073 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1518 = sqrt(((_1494 * _1494) + (_1493 * _1493)) + (_1495 * _1495)) / (_1490 + 9.9999997473787516355514526367188e-06);
        float _4084 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1519 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _1520 = _1519 * 2.0;
        float _1524 = (1.0 - _1519) / (_1519 + 1.0);
        float _4095 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1525 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _1534 = ((((1.0 - _1525) * (_1520 + 2.0)) * exp2(log2(isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * (_1520 + 1.0))) + _1525) * _1490;
        float _1535 = _1458 * 0.5;
        float _1536 = _1468 * 0.5;
        float _1537 = _1478 * 0.5;
        float _1538 = dot(vec3(_1535, _1536, _1537), vec3(_1535, _1536, _1537));
        float _1543 = (_1538 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1538);
        float _1551 = (dot(vec3(_682, _683, _684), vec3(_1543 * _1535, _1543 * _1536, _1543 * _1537)) + 1.0) * 0.5;
        float _4106 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1560 = sqrt(((_1536 * _1536) + (_1535 * _1535)) + (_1537 * _1537)) / (_1491 + 9.9999997473787516355514526367188e-06);
        float _4117 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1561 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _1562 = _1561 * 2.0;
        float _1566 = (1.0 - _1561) / (_1561 + 1.0);
        float _4128 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1567 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _1576 = ((((1.0 - _1567) * (_1562 + 2.0)) * exp2(log2(isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))) * (_1562 + 1.0))) + _1567) * _1491;
        float _1577 = _1459 * 0.5;
        float _1578 = _1469 * 0.5;
        float _1579 = _1479 * 0.5;
        float _1580 = dot(vec3(_1577, _1578, _1579), vec3(_1577, _1578, _1579));
        float _1585 = (_1580 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1580);
        float _1593 = (dot(vec3(_682, _683, _684), vec3(_1585 * _1577, _1585 * _1578, _1585 * _1579)) + 1.0) * 0.5;
        float _4139 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1602 = sqrt(((_1578 * _1578) + (_1577 * _1577)) + (_1579 * _1579)) / (_1492 + 9.9999997473787516355514526367188e-06);
        float _4150 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1603 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _1604 = _1603 * 2.0;
        float _1608 = (1.0 - _1603) / (_1603 + 1.0);
        float _4161 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1609 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1618 = ((((1.0 - _1609) * (_1604 + 2.0)) * exp2(log2(isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * (_1604 + 1.0))) + _1609) * _1492;
        _1626 = _1459;
        _1627 = _1458;
        _1628 = _1457;
        _1629 = _1469;
        _1630 = _1468;
        _1631 = _1467;
        _1632 = _1479;
        _1633 = _1478;
        _1634 = _1477;
        _1635 = _1492;
        _1636 = _1491;
        _1637 = _1490;
        _1638 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0)));
        _1639 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0)));
        _1640 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0)));
    }
    else
    {
        _1626 = _1314;
        _1627 = _1314;
        _1628 = _1314;
        _1629 = _1314;
        _1630 = _1314;
        _1631 = _1314;
        _1632 = _1314;
        _1633 = _1314;
        _1634 = _1314;
        _1635 = _1314;
        _1636 = _1314;
        _1637 = _1314;
        _1638 = 0.0;
        _1639 = 0.0;
        _1640 = 0.0;
    }
    float _1650 = (cbModelParam._m0[1u].x * (_1638 - _1326)) + _1326;
    float _1651 = (cbModelParam._m0[1u].x * (_1639 - _1327)) + _1327;
    float _1652 = (cbModelParam._m0[1u].x * (_1640 - _1328)) + _1328;
    float _1673 = fma(_1652, cbSceneParam._m0[89u].z, fma(_1651, cbSceneParam._m0[89u].y, _1650 * cbSceneParam._m0[89u].x));
    float _1676 = fma(_1652, cbSceneParam._m0[90u].z, fma(_1651, cbSceneParam._m0[90u].y, _1650 * cbSceneParam._m0[90u].x));
    float _1679 = fma(_1652, cbSceneParam._m0[91u].z, fma(_1651, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1650));
    float _1694 = _919 * 0.5;
    float _1695 = _920 * 0.5;
    float _1696 = _921 * 0.5;
    float _1697 = dot(vec4(_1694, _1695, _1696, 1.0), vec4(_1628, _1631, _1634, _1637));
    float _1700 = dot(vec4(_1694, _1695, _1696, 1.0), vec4(_1627, _1630, _1633, _1636));
    float _1703 = dot(vec4(_1694, _1695, _1696, 1.0), vec4(_1626, _1629, _1632, _1635));
    float _1737;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1710 = dot(vec4(_1694, _1695, _1696, 1.0), vec4(_1313, _1317, _1320, _1323));
        float _1714 = dot(vec4(_1694, _1695, _1696, 1.0), vec4(_1315, _1318, _1321, _1324));
        float _1718 = dot(vec4(_1694, _1695, _1696, 1.0), vec4(_1316, _1319, _1322, _1325));
        float _1725 = dot(vec4(cbModelParam._m0[39u]), vec4(_1694, _1695, _1696, 1.0));
        _1737 = dot(vec3(isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0)), isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0)), isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1725) ? 0.0 : (isnan(0.0) ? _1725 : max(0.0, _1725))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1737 = 1.0;
    }
    float _1748;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1739 = dot(vec4(cbModelParam._m0[40u]), vec4(_1694, _1695, _1696, 1.0));
        _1748 = dot(vec3(isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0)), isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0)), isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1739) ? 0.0 : (isnan(0.0) ? _1739 : max(0.0, _1739))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1748 = 1.0;
    }
    float _1752 = (_1748 * cbModelParam._m0[1u].x) + (_1737 * (1.0 - cbModelParam._m0[1u].x));
    float _1762 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _826);
    float _1763 = isnan(_1762) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1762 : min(cbModelParam._m0[25u].z, _1762));
    float _1843;
    float _1845;
    float _1847;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1810 = fma(_983, cbModelParam._m0[13u].z, fma(_979, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _975)) + cbModelParam._m0[13u].w;
        float _1814 = fma(_983, cbModelParam._m0[14u].z, fma(_979, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _975)) + cbModelParam._m0[14u].w;
        float _1818 = fma(_983, cbModelParam._m0[15u].z, fma(_979, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _975)) + cbModelParam._m0[15u].w;
        float _1821 = fma(_921, cbModelParam._m0[13u].z, fma(_920, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _919));
        float _1824 = fma(_921, cbModelParam._m0[14u].z, fma(_920, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _919));
        float _1827 = fma(_921, cbModelParam._m0[15u].z, fma(_920, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _919));
        float _1855;
        if (_1821 > 0.0)
        {
            _1855 = abs((1.0 - _1810) / _1821);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1821 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1810 + 1.0) / _1821);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1855 = frontier_phi_19_17_ladder;
        }
        float _2080;
        if (_1824 > 0.0)
        {
            _2080 = abs((1.0 - _1814) / _1824);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1824 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1814 + 1.0) / _1824);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2080 = frontier_phi_28_24_ladder;
        }
        float _2337;
        if (_1827 > 0.0)
        {
            _2337 = abs((1.0 - _1818) / _1827);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1827 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1818 + 1.0) / _1827);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2337 = frontier_phi_40_35_ladder;
        }
        float _2339 = isnan(_2080) ? _1855 : (isnan(_1855) ? _2080 : min(_1855, _2080));
        float _2340 = isnan(_2337) ? _2339 : (isnan(_2339) ? _2337 : min(_2339, _2337));
        float _2344 = (_2340 * _1821) + _1810;
        float _2345 = (_2340 * _1824) + _1814;
        float _2346 = (_2340 * _1827) + _1818;
        float _2347 = _2340 * 9.9999997473787516355514526367188e-05;
        float _2349 = (-1.0) - _2347;
        float _2351 = _2347 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2346 > _2351) || ((_2346 < _2349) || ((_2345 > _2351) || ((_2345 < _2349) || ((_2344 < _2349) || (_2344 > _2351))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2474 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2346, cbModelParam._m0[9u].z, fma(_2345, cbModelParam._m0[9u].y, _2344 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2346, cbModelParam._m0[10u].z, fma(_2345, cbModelParam._m0[10u].y, _2344 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2346, cbModelParam._m0[11u].z, fma(_2345, cbModelParam._m0[11u].y, _2344 * cbModelParam._m0[11u].x))), _1763);
            frontier_phi_18_40_ladder = _2474.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2474.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2474.x * cbModelParam._m0[1u].y;
        }
        _1843 = frontier_phi_18_40_ladder_2;
        _1845 = frontier_phi_18_40_ladder_1;
        _1847 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1831 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_919, _920, _921), _1763);
        _1843 = _1831.x * cbModelParam._m0[1u].y;
        _1845 = _1831.y * cbModelParam._m0[1u].y;
        _1847 = _1831.z * cbModelParam._m0[1u].y;
    }
    float _1851 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _826);
    float _1852 = isnan(_1851) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1851 : min(cbModelParam._m0[25u].w, _1851));
    float _1943;
    float _1945;
    float _1947;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1907 = fma(_983, cbModelParam._m0[21u].z, fma(_979, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _975)) + cbModelParam._m0[21u].w;
        float _1911 = fma(_983, cbModelParam._m0[22u].z, fma(_979, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _975)) + cbModelParam._m0[22u].w;
        float _1915 = fma(_983, cbModelParam._m0[23u].z, fma(_979, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _975)) + cbModelParam._m0[23u].w;
        float _1918 = fma(_921, cbModelParam._m0[21u].z, fma(_920, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _919));
        float _1921 = fma(_921, cbModelParam._m0[22u].z, fma(_920, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _919));
        float _1924 = fma(_921, cbModelParam._m0[23u].z, fma(_920, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _919));
        float _2085;
        if (_1918 > 0.0)
        {
            _2085 = abs((1.0 - _1907) / _1918);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1918 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1907 + 1.0) / _1918);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2085 = frontier_phi_30_26_ladder;
        }
        float _2364;
        if (_1921 > 0.0)
        {
            _2364 = abs((1.0 - _1911) / _1921);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1921 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1911 + 1.0) / _1921);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2364 = frontier_phi_42_37_ladder;
        }
        float _2577;
        if (_1924 > 0.0)
        {
            _2577 = abs((1.0 - _1915) / _1924);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1924 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1915 + 1.0) / _1924);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2577 = frontier_phi_51_48_ladder;
        }
        float _2579 = isnan(_2364) ? _2085 : (isnan(_2085) ? _2364 : min(_2085, _2364));
        float _2580 = isnan(_2577) ? _2579 : (isnan(_2579) ? _2577 : min(_2579, _2577));
        float _2584 = (_2580 * _1918) + _1907;
        float _2585 = (_2580 * _1921) + _1911;
        float _2586 = (_2580 * _1924) + _1915;
        float _2587 = _2580 * 9.9999997473787516355514526367188e-05;
        float _2588 = (-1.0) - _2587;
        float _2590 = _2587 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2586 > _2590) || ((_2586 < _2588) || ((_2585 > _2590) || ((_2585 < _2588) || ((_2584 < _2588) || (_2584 > _2590))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2819 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2586, cbModelParam._m0[17u].z, fma(_2585, cbModelParam._m0[17u].y, _2584 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2586, cbModelParam._m0[18u].z, fma(_2585, cbModelParam._m0[18u].y, _2584 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2586, cbModelParam._m0[19u].z, fma(_2585, cbModelParam._m0[19u].y, _2584 * cbModelParam._m0[19u].x))), _1852);
            frontier_phi_27_51_ladder = _2819.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2819.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2819.x * cbModelParam._m0[1u].z;
        }
        _1943 = frontier_phi_27_51_ladder_2;
        _1945 = frontier_phi_27_51_ladder_1;
        _1947 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1927 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_919, _920, _921), _1852);
        _1943 = _1927.x * cbModelParam._m0[1u].z;
        _1945 = _1927.y * cbModelParam._m0[1u].z;
        _1947 = _1927.z * cbModelParam._m0[1u].z;
    }
    float _1960 = (((_946 * _896) + _947) * _911) * ((cbModelParam._m0[1u].w * (_1943 - _1843)) + _1843);
    float _1962 = (((_946 * _898) + _947) * _911) * ((cbModelParam._m0[1u].w * (_1945 - _1845)) + _1845);
    float _1964 = (((_946 * _899) + _947) * _911) * ((cbModelParam._m0[1u].w * (_1947 - _1847)) + _1847);
    float _1967 = fma(_1964, cbSceneParam._m0[89u].z, fma(_1962, cbSceneParam._m0[89u].y, _1960 * cbSceneParam._m0[89u].x));
    float _1970 = fma(_1964, cbSceneParam._m0[90u].z, fma(_1962, cbSceneParam._m0[90u].y, _1960 * cbSceneParam._m0[90u].x));
    float _1973 = fma(_1964, cbSceneParam._m0[91u].z, fma(_1962, cbSceneParam._m0[91u].y, _1960 * cbSceneParam._m0[91u].x));
    vec4 _1981 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_783, _784));
    float _1983 = _1981.w;
    float _1995 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1983);
    float _1996 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1983);
    float _1997 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1983);
    uvec4 _2001 = floatBitsToUint(cbInstanceData._m0[_839 + 5u]);
    uint _2003 = _2001.x * 14u;
    uint _2004 = _2003 + 13u;
    float _2011 = _911 + (-1.0);
    float _2016 = (cbLight._m0[_2004].x * _2011) + 1.0;
    float _2017 = (cbLight._m0[_2004].y * _2011) + 1.0;
    float _2018 = (cbLight._m0[_2004].z * _2011) + 1.0;
    float _2019 = (cbLight._m0[_2004].w * _2011) + 1.0;
    uint _2020 = _2003 + 5u;
    float _2026 = isnan(1.0) ? _2017 : (isnan(_2017) ? 1.0 : min(_2017, 1.0));
    uint _2030 = _2003 + 4u;
    float _2039 = isnan(1.0) ? _2016 : (isnan(_2016) ? 1.0 : min(_2016, 1.0));
    uint _2043 = _2003 | 1u;
    float _2054 = dot(vec3(cbLight._m0[_2003].xyz), vec3(_682, _683, _684));
    float _2057 = dot(vec3(cbLight._m0[_2043].xyz), vec3(_682, _683, _684));
    float _4297 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
    float _4308 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
    float _2062 = (isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0))) * 0.3183098733425140380859375;
    float _2064 = (isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0))) * 0.3183098733425140380859375;
    float _2071 = ((cbLight._m0[_2020].x * _2026) * _2064) + (((cbLight._m0[_2030].x * _1995) * _2039) * _2062);
    float _2072 = ((_2026 * cbLight._m0[_2020].y) * _2064) + (((cbLight._m0[_2030].y * _1996) * _2039) * _2062);
    float _2073 = ((_2026 * cbLight._m0[_2020].z) * _2064) + (((cbLight._m0[_2030].z * _1997) * _2039) * _2062);
    uvec4 _2077 = floatBitsToUint(cbLight._m0[_2003 + 12u]);
    bool _2079 = _2077.x == 0u;
    float _2090;
    float _2092;
    float _2094;
    if (_2079)
    {
        _2090 = _2071;
        _2092 = _2072;
        _2094 = _2073;
    }
    else
    {
        uint _2098 = _2003 + 6u;
        float _2114 = (dot(vec3(cbLight._m0[_2003 + 2u].xyz), vec3(_682, _683, _684)) * 0.5) + 0.5;
        float _2115 = _2114 * _2114;
        float _4319 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
        float _2116 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
        float _2117 = isnan(1.0) ? _2018 : (isnan(_2018) ? 1.0 : min(_2018, 1.0));
        _2090 = (((cbLight._m0[_2098].x * 0.3183098733425140380859375) * _2116) * _2117) + _2071;
        _2092 = (((cbLight._m0[_2098].y * 0.3183098733425140380859375) * _2116) * _2117) + _2072;
        _2094 = (((cbLight._m0[_2098].z * 0.3183098733425140380859375) * _2116) * _2117) + _2073;
    }
    bool _2097 = _2077.y == 0u;
    float _2135;
    float _2137;
    float _2139;
    if (_2097)
    {
        _2135 = _2090;
        _2137 = _2092;
        _2139 = _2094;
    }
    else
    {
        uint _2308 = _2003 + 7u;
        float _2324 = (dot(vec3(cbLight._m0[_2003 + 3u].xyz), vec3(_682, _683, _684)) * 0.5) + 0.5;
        float _2325 = _2324 * _2324;
        float _4335 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
        float _2326 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _2327 = isnan(1.0) ? _2019 : (isnan(_2019) ? 1.0 : min(_2019, 1.0));
        _2135 = (((cbLight._m0[_2308].x * 0.3183098733425140380859375) * _2326) * _2327) + _2090;
        _2137 = (((cbLight._m0[_2308].y * 0.3183098733425140380859375) * _2326) * _2327) + _2092;
        _2139 = (((cbLight._m0[_2308].z * 0.3183098733425140380859375) * _2326) * _2327) + _2094;
    }
    uint _2142 = _2003 + 8u;
    float _2155 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2003].w)) * _826) * 0.949999988079071044921875);
    float _2156 = _2155 * _2155;
    float _2157 = cbLight._m0[_2003].x + _762;
    float _2158 = cbLight._m0[_2003].y + _763;
    float _2159 = cbLight._m0[_2003].z + _764;
    float _2163 = inversesqrt(dot(vec3(_2157, _2158, _2159), vec3(_2157, _2158, _2159)));
    float _2164 = _2163 * _2157;
    float _2165 = _2163 * _2158;
    float _2166 = _2163 * _2159;
    float _2167 = dot(vec3(_682, _683, _684), vec3(cbLight._m0[_2003].xyz));
    float _4351 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
    float _2170 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
    float _4362 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _2171 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
    float _2172 = dot(vec3(_682, _683, _684), vec3(_2164, _2165, _2166));
    float _4373 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
    float _2175 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
    float _2176 = dot(vec3(cbLight._m0[_2003].xyz), vec3(_2164, _2165, _2166));
    float _4384 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
    float _2180 = _2156 * _2156;
    float _2184 = ((_2175 * _2175) * (_2180 + (-1.0))) + 1.0;
    float _2192 = exp2(log2(1.0 - (isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0)))) * 5.0);
    float _2193 = 0.959999978542327880859375 - _893;
    float _2195 = 0.959999978542327880859375 - _894;
    float _2196 = 0.959999978542327880859375 - _895;
    float _2203 = 1.0 - _2156;
    float _2214 = (0.5 / (((_2171 * ((_2170 * _2203) + _2156)) + 9.9999999392252902907785028219223e-09) + (((_2171 * _2203) + _2156) * _2170))) * _2170;
    float _4395 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
    float _2216 = (isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0))) * (_2180 / ((_2184 * _2184) * 3.141590118408203125));
    uint _2230 = _2003 + 9u;
    float _2241 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2043].w)) * _826) * 0.949999988079071044921875);
    float _2242 = _2241 * _2241;
    float _2243 = cbLight._m0[_2043].x + _762;
    float _2244 = cbLight._m0[_2043].y + _763;
    float _2245 = cbLight._m0[_2043].z + _764;
    float _2249 = inversesqrt(dot(vec3(_2243, _2244, _2245), vec3(_2243, _2244, _2245)));
    float _2250 = _2249 * _2243;
    float _2251 = _2249 * _2244;
    float _2252 = _2249 * _2245;
    float _2253 = dot(vec3(_682, _683, _684), vec3(cbLight._m0[_2043].xyz));
    float _4406 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
    float _2256 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
    float _2257 = dot(vec3(_682, _683, _684), vec3(_2250, _2251, _2252));
    float _4417 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
    float _2260 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
    float _2261 = dot(vec3(cbLight._m0[_2043].xyz), vec3(_2250, _2251, _2252));
    float _4428 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
    float _2265 = _2242 * _2242;
    float _2269 = ((_2260 * _2260) * (_2265 + (-1.0))) + 1.0;
    float _2276 = exp2(log2(1.0 - (isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0)))) * 5.0);
    float _2283 = 1.0 - _2242;
    float _2293 = (0.5 / (((_2171 * ((_2256 * _2283) + _2242)) + 9.9999999392252902907785028219223e-09) + (((_2171 * _2283) + _2242) * _2256))) * _2256;
    float _4439 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
    float _2295 = (isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0))) * (_2265 / ((_2269 * _2269) * 3.141590118408203125));
    float _2305 = (((((_2276 * _2193) + _896) * cbLight._m0[_2230].x) * _2295) * _2026) + ((((cbLight._m0[_2142].x * _1995) * ((_2192 * _2193) + _896)) * _2216) * _2039);
    float _2306 = (((((_2276 * _2195) + _898) * cbLight._m0[_2230].y) * _2295) * _2026) + ((((cbLight._m0[_2142].y * _1996) * ((_2192 * _2195) + _898)) * _2216) * _2039);
    float _2307 = (((((_2276 * _2196) + _899) * cbLight._m0[_2230].z) * _2295) * _2026) + ((((cbLight._m0[_2142].z * _1997) * ((_2192 * _2196) + _899)) * _2216) * _2039);
    float _2369;
    float _2371;
    float _2373;
    if (_2079)
    {
        _2369 = _2305;
        _2371 = _2306;
        _2373 = _2307;
    }
    else
    {
        uint _2375 = _2003 + 2u;
        uint _2379 = _2003 + 10u;
        float _2393 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2375].w)) * _826) * 0.949999988079071044921875);
        float _2394 = _2393 * _2393;
        float _2395 = cbLight._m0[_2375].x + _762;
        float _2396 = cbLight._m0[_2375].y + _763;
        float _2397 = cbLight._m0[_2375].z + _764;
        float _2401 = inversesqrt(dot(vec3(_2395, _2396, _2397), vec3(_2395, _2396, _2397)));
        float _2402 = _2401 * _2395;
        float _2403 = _2401 * _2396;
        float _2404 = _2401 * _2397;
        float _2405 = dot(vec3(_682, _683, _684), vec3(cbLight._m0[_2375].xyz));
        float _4450 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
        float _2408 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
        float _2409 = dot(vec3(_682, _683, _684), vec3(_2402, _2403, _2404));
        float _4461 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
        float _2412 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
        float _2413 = dot(vec3(cbLight._m0[_2375].xyz), vec3(_2402, _2403, _2404));
        float _4472 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
        float _2417 = _2394 * _2394;
        float _2421 = ((_2412 * _2412) * (_2417 + (-1.0))) + 1.0;
        float _2428 = exp2(log2(1.0 - (isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0)))) * 5.0);
        float _2435 = 1.0 - _2394;
        float _2445 = (0.5 / (((_2171 * ((_2408 * _2435) + _2394)) + 9.9999999392252902907785028219223e-09) + (((_2171 * _2435) + _2394) * _2408))) * _2408;
        float _4483 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
        float _2447 = (isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0))) * (_2417 / ((_2421 * _2421) * 3.141590118408203125));
        float _2448 = isnan(1.0) ? _2018 : (isnan(_2018) ? 1.0 : min(_2018, 1.0));
        _2369 = (((((_2428 * _2193) + _896) * cbLight._m0[_2379].x) * _2447) * _2448) + _2305;
        _2371 = (((((_2428 * _2195) + _898) * cbLight._m0[_2379].y) * _2447) * _2448) + _2306;
        _2373 = (((((_2428 * _2196) + _899) * cbLight._m0[_2379].z) * _2447) * _2448) + _2307;
    }
    float _2483;
    float _2485;
    float _2487;
    if (_2097)
    {
        _2483 = _2369;
        _2485 = _2371;
        _2487 = _2373;
    }
    else
    {
        uint _2494 = _2003 + 3u;
        uint _2498 = _2003 + 11u;
        float _2512 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2494].w)) * _826) * 0.949999988079071044921875);
        float _2513 = _2512 * _2512;
        float _2514 = cbLight._m0[_2494].x + _762;
        float _2515 = cbLight._m0[_2494].y + _763;
        float _2516 = cbLight._m0[_2494].z + _764;
        float _2520 = inversesqrt(dot(vec3(_2514, _2515, _2516), vec3(_2514, _2515, _2516)));
        float _2521 = _2520 * _2514;
        float _2522 = _2520 * _2515;
        float _2523 = _2520 * _2516;
        float _2524 = dot(vec3(_682, _683, _684), vec3(cbLight._m0[_2494].xyz));
        float _4499 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
        float _2527 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
        float _2528 = dot(vec3(_682, _683, _684), vec3(_2521, _2522, _2523));
        float _4510 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
        float _2531 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
        float _2532 = dot(vec3(cbLight._m0[_2494].xyz), vec3(_2521, _2522, _2523));
        float _4521 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
        float _2536 = _2513 * _2513;
        float _2540 = ((_2531 * _2531) * (_2536 + (-1.0))) + 1.0;
        float _2547 = exp2(log2(1.0 - (isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0)))) * 5.0);
        float _2554 = 1.0 - _2513;
        float _2564 = (0.5 / (((_2171 * ((_2527 * _2554) + _2513)) + 9.9999999392252902907785028219223e-09) + (((_2171 * _2554) + _2513) * _2527))) * _2527;
        float _4532 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
        float _2566 = (isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0))) * (_2536 / ((_2540 * _2540) * 3.141590118408203125));
        float _2567 = isnan(1.0) ? _2019 : (isnan(_2019) ? 1.0 : min(_2019, 1.0));
        _2483 = (((((_2547 * _2193) + _896) * cbLight._m0[_2498].x) * _2566) * _2567) + _2369;
        _2485 = (((((_2547 * _2195) + _898) * cbLight._m0[_2498].y) * _2566) * _2567) + _2371;
        _2487 = (((((_2547 * _2196) + _899) * cbLight._m0[_2498].z) * _2566) * _2567) + _2373;
    }
    float _2701;
    float _2703;
    float _2705;
    float _2707;
    float _2709;
    float _2711;
    if (_2001.y == 0u)
    {
        float _2642 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2643 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2642;
        float _2644 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2642;
        float _2645 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2642;
        uvec4 _2657 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2658 = _2657.x;
        uint _2669 = uint((float(_2657.y) * floor(float(uint(cbSceneParam._m0[85u].y * _784) / _2658))) + floor(float(uint(cbSceneParam._m0[85u].x * _783) / _2658)));
        float _2679 = (log2(_2645 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2680 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0));
        uint _2683 = uint(isnan(14.0) ? _2680 : (isnan(_2680) ? 14.0 : min(_2680, 14.0)));
        uvec4 _2688 = texelFetch(g_lightClusterGridBuffer, int(((_2683 << 2u) + (_2669 << 6u)) >> 2u));
        uint _2689 = _2688.x;
        uint _2690 = _2657.z;
        float _2824;
        float _2826;
        float _2828;
        float _2830;
        float _2832;
        float _2834;
        if (((((1u << ((_2690 >> 4u) & 15u)) + 4294967295u) & _2689) == 0u) || ((_2690 & 240u) == 0u))
        {
            _2824 = 0.0;
            _2826 = 0.0;
            _2828 = 0.0;
            _2830 = 0.0;
            _2832 = 0.0;
            _2834 = 0.0;
        }
        else
        {
            float _2825;
            float _2827;
            float _2829;
            float _2831;
            float _2833;
            float _2835;
            float _2985 = 0.0;
            float _2986 = 0.0;
            float _2987 = 0.0;
            float _2988 = 0.0;
            float _2989 = 0.0;
            float _2990 = 0.0;
            uint _2991 = 0u;
            uint _3000;
            bool _3001;
            for (;;)
            {
                _3000 = texelFetch(g_lightClassification, int((((_2683 << 5u) + (_2669 << 9u)) + (_2991 << 2u)) >> 2u)).x;
                _3001 = _3000 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3001)
                {
                    frontier_phi_68_pred = _2987;
                    frontier_phi_68_pred_1 = _2990;
                    frontier_phi_68_pred_2 = _2989;
                    frontier_phi_68_pred_3 = _2988;
                    frontier_phi_68_pred_4 = _2986;
                    frontier_phi_68_pred_5 = _2985;
                }
                else
                {
                    float _3130;
                    float _3131;
                    float _3132;
                    float _3133;
                    float _3134;
                    float _3135;
                    uint _3136;
                    _3130 = _2985;
                    _3131 = _2986;
                    _3132 = _2987;
                    _3133 = _2988;
                    _3134 = _2989;
                    _3135 = _2990;
                    _3136 = _3000;
                    float _3057;
                    float _3058;
                    float _3059;
                    float _3060;
                    float _3061;
                    float _3062;
                    for (;;)
                    {
                        uint _3140 = uint(findLSB(_3136)) + (_2991 << 5u);
                        uint _3137 = (_3136 + 4294967295u) & _3136;
                        uint _3142 = _3140 * 48u;
                        vec4 _3156 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3142)).x, texelFetch(g_PointLightRenderingBuffer, int(_3142 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3142 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3142 + 3u)).x));
                        uint _3162 = (_3140 * 48u) + 4u;
                        vec4 _3175 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3162)).x, texelFetch(g_PointLightRenderingBuffer, int(_3162 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3162 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3162 + 3u)).x));
                        uint _3181 = (_3140 * 48u) + 8u;
                        vec3 _3192 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3181)).x, texelFetch(g_PointLightRenderingBuffer, int(_3181 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3181 + 2u)).x));
                        float _3196 = _3156.x - _2643;
                        float _3197 = _3156.y - _2644;
                        float _3198 = _3156.z - _2645;
                        float _3199 = dot(vec3(_3196, _3197, _3198), vec3(_3196, _3197, _3198));
                        float _3202 = inversesqrt(_3199);
                        float _3203 = _3202 * _3196;
                        float _3204 = _3202 * _3197;
                        float _3205 = _3202 * _3198;
                        float _3206 = dot(vec3(_807, _810, _813), vec3(_3203, _3204, _3205));
                        float _3211 = 1.0 - (_3199 * _3156.w);
                        float _4558 = isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : max(_3211, 0.0));
                        float _3212 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
                        float _3213 = sqrt(_3199) * _3175.w;
                        float _3216 = 1.39999997615814208984375 / (_3213 + 1.39999997615814208984375);
                        float _3217 = _3216 * _3216;
                        float _3220 = ((1.0 - _3217) * _3206) + _3217;
                        float _3223 = _3213 * _3213;
                        float _3227 = ((isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0))) * _3212) / ((_3223 * 0.699999988079071044921875) + 1.0);
                        float _3231 = (-0.0) - _2643;
                        float _3232 = (-0.0) - _2644;
                        float _3233 = (-0.0) - _2645;
                        float _3237 = inversesqrt(dot(vec3(_3231, _3232, _3233), vec3(_3231, _3232, _3233)));
                        float _3238 = _3237 * _3231;
                        float _3239 = _3237 * _3232;
                        float _3240 = _3237 * _3233;
                        float _3248 = exp2(log2(1.0 / ((_3223 * 3.5) + 5.0)) * 0.25);
                        float _3249 = 1.0 - _927;
                        float _3256 = sqrt(1.0 - ((1.0 - (_3249 * _3249)) * (1.0 - (_3248 * _3248))));
                        float _3257 = _3256 * _3256;
                        float _3258 = _3257 * _3257;
                        float _3259 = _3238 + _3203;
                        float _3260 = _3239 + _3204;
                        float _3261 = _3240 + _3205;
                        float _3265 = inversesqrt(dot(vec3(_3259, _3260, _3261), vec3(_3259, _3260, _3261)));
                        float _3269 = dot(vec3(_807, _810, _813), vec3(_3238, _3239, _3240));
                        float _4574 = isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0));
                        float _3272 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
                        float _3273 = dot(vec3(_807, _810, _813), vec3(_3265 * _3259, _3265 * _3260, _3265 * _3261));
                        float _4585 = isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0));
                        float _3276 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
                        float _3280 = ((_3276 * _3276) * (_3258 + (-1.0))) + 1.0;
                        float _3281 = _3216 * _3257;
                        float _3282 = _3281 * _3281;
                        float _3285 = ((1.0 - _3282) * _3206) + _3282;
                        float _4596 = isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0));
                        float _3286 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
                        float _3287 = 1.0 - _3257;
                        float _3297 = (0.5 / (((_3286 * ((_3272 * _3287) + _3257)) + 9.9999999392252902907785028219223e-09) + (((_3286 * _3287) + _3257) * _3272))) * _3286;
                        float _4607 = isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0));
                        float _3308 = (((_3258 * 3.1415927410125732421875) * (isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0)))) / ((_3280 * _3280) * ((_3223 * 2.1991131305694580078125) + 3.141590118408203125))) * _3212;
                        _3060 = (_3227 * _3175.x) + _3133;
                        _3061 = (_3227 * _3175.y) + _3134;
                        _3062 = (_3227 * _3175.z) + _3135;
                        _3057 = (_3308 * _3192.x) + _3130;
                        _3058 = (_3308 * _3192.y) + _3131;
                        _3059 = (_3308 * _3192.z) + _3132;
                        if (_3137 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3130 = _3057;
                            _3131 = _3058;
                            _3132 = _3059;
                            _3133 = _3060;
                            _3134 = _3061;
                            _3135 = _3062;
                            _3136 = _3137;
                        }
                    }
                    frontier_phi_68_pred = _3059;
                    frontier_phi_68_pred_1 = _3062;
                    frontier_phi_68_pred_2 = _3061;
                    frontier_phi_68_pred_3 = _3060;
                    frontier_phi_68_pred_4 = _3058;
                    frontier_phi_68_pred_5 = _3057;
                }
                _2829 = frontier_phi_68_pred;
                _2835 = frontier_phi_68_pred_1;
                _2833 = frontier_phi_68_pred_2;
                _2831 = frontier_phi_68_pred_3;
                _2827 = frontier_phi_68_pred_4;
                _2825 = frontier_phi_68_pred_5;
                uint _2992 = _2991 + 1u;
                if (_2992 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2985 = _2825;
                    _2986 = _2827;
                    _2987 = _2829;
                    _2988 = _2831;
                    _2989 = _2833;
                    _2990 = _2835;
                    _2991 = _2992;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2824 = _2825;
            _2826 = _2827;
            _2828 = _2829;
            _2830 = _2831;
            _2832 = _2833;
            _2834 = _2835;
        }
        uvec4 _2838 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2839 = _2838.z;
        uint _2841 = (_2839 >> 8u) & 15u;
        float _2953;
        float _2955;
        float _2957;
        float _2959;
        float _2961;
        float _2963;
        if (((4294967295u << _2841) & _2689) == 0u)
        {
            _2953 = _2824;
            _2955 = _2826;
            _2957 = _2828;
            _2959 = _2830;
            _2961 = _2832;
            _2963 = _2834;
        }
        else
        {
            float _2978 = inversesqrt(dot(vec3(_2643, _2644, _2645), vec3(_2643, _2644, _2645)));
            float _2979 = _2978 * _2643;
            float _2980 = _2978 * _2644;
            float _2981 = _2978 * _2645;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2841 < ((_2839 >> 12u) & 15u))
            {
                float _2954;
                float _2956;
                float _2958;
                float _2960;
                float _2962;
                float _2964;
                float _3113 = _2824;
                float _3114 = _2826;
                float _3115 = _2828;
                float _3116 = _2830;
                float _3117 = _2832;
                float _3118 = _2834;
                uint _3119 = _2841;
                uint _3128;
                bool _3129;
                for (;;)
                {
                    _3128 = texelFetch(g_lightClassification, int((((_2683 << 5u) + (_2669 << 9u)) + (_3119 << 2u)) >> 2u)).x;
                    _3129 = _3128 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3129)
                    {
                        frontier_phi_79_pred = _3118;
                        frontier_phi_79_pred_1 = _3117;
                        frontier_phi_79_pred_2 = _3116;
                        frontier_phi_79_pred_3 = _3115;
                        frontier_phi_79_pred_4 = _3114;
                        frontier_phi_79_pred_5 = _3113;
                    }
                    else
                    {
                        float _3322;
                        float _3323;
                        float _3324;
                        float _3325;
                        float _3326;
                        float _3327;
                        float _3616;
                        float _3617;
                        float _3618;
                        float _3619;
                        float _3620;
                        float _3621;
                        float _3335 = _3113;
                        float _3336 = _3114;
                        float _3337 = _3115;
                        float _3338 = _3116;
                        float _3339 = _3117;
                        float _3340 = _3118;
                        uint _3341 = _3128;
                        uint _3342;
                        vec4 _3367;
                        float _3368;
                        vec4 _3383;
                        vec3 _3395;
                        vec4 _3411;
                        vec4 _3426;
                        float _3472;
                        bool _3473;
                        for (;;)
                        {
                            uint _3352 = ((_3119 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3341));
                            _3342 = (_3341 + 4294967295u) & _3341;
                            uint _3354 = _3352 * 40u;
                            _3367 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3354)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 3u)).x));
                            _3368 = _3367.w;
                            uint _3370 = (_3352 * 40u) + 4u;
                            _3383 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3370)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 3u)).x));
                            uint _3385 = (_3352 * 40u) + 8u;
                            _3395 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3385)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 2u)).x));
                            uint _3398 = (_3352 * 40u) + 16u;
                            _3411 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3398)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 3u)).x));
                            uint _3413 = (_3352 * 40u) + 20u;
                            _3426 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3413)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 3u)).x));
                            uint _3428 = (_3352 * 40u) + 24u;
                            vec4 _3441 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3428)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 3u)).x));
                            uint _3447 = (_3352 * 40u) + 28u;
                            vec4 _3460 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3447)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 3u)).x));
                            _3472 = fma(_2645, _3460.z, fma(_2644, _3460.y, _3460.x * _2643)) + _3460.w;
                            _3473 = !((fma(_2645, _3441.z, fma(_2644, _3441.y, _3441.x * _2643)) + _3441.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3473)
                            {
                                float _3500 = _3367.x - _2643;
                                float _3501 = _3367.y - _2644;
                                float _3502 = _3367.z - _2645;
                                float _3503 = dot(vec3(_3500, _3501, _3502), vec3(_3500, _3501, _3502));
                                float _3506 = inversesqrt(_3503);
                                float _3507 = _3506 * _3500;
                                float _3508 = _3506 * _3501;
                                float _3509 = _3506 * _3502;
                                float _3513 = 1.0 - (_3503 / (_3368 * _3368));
                                float _4618 = isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : max(_3513, 0.0));
                                float _3514 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
                                float _3518 = sqrt(_3503) * _3383.w;
                                float _3520 = 1.39999997615814208984375 / (_3518 + 1.39999997615814208984375);
                                float _3521 = _3520 * _3520;
                                float _3524 = ((1.0 - _3521) * dot(vec3(_3507, _3508, _3509), vec3(_807, _810, _813))) + _3521;
                                float _3527 = _3518 * _3518;
                                float _3531 = (fma(_2645, _3411.z, fma(_2644, _3411.y, _3411.x * _2643)) + _3411.w) / _3472;
                                float _3532 = (fma(_2645, _3426.z, fma(_2644, _3426.y, _3426.x * _2643)) + _3426.w) / _3472;
                                float _3536 = 1.0 - dot(vec2(_3531, _3532), vec2(_3531, _3532));
                                float _4634 = isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0));
                                float _3537 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
                                float _3538 = _3537 * (((isnan(0.0) ? _3524 : (isnan(_3524) ? 0.0 : max(_3524, 0.0))) * _3514) / ((_3527 * 0.699999988079071044921875) + 1.0));
                                float _3550 = exp2(log2(1.0 / ((_3527 * 3.5) + 5.0)) * 0.25);
                                float _3551 = 1.0 - _927;
                                float _3558 = sqrt(1.0 - ((1.0 - (_3551 * _3551)) * (1.0 - (_3550 * _3550))));
                                float _3559 = _3558 * _3558;
                                float _3560 = _3559 * _3559;
                                float _3561 = _3507 - _2979;
                                float _3562 = _3508 - _2980;
                                float _3563 = _3509 - _2981;
                                float _3567 = inversesqrt(dot(vec3(_3561, _3562, _3563), vec3(_3561, _3562, _3563)));
                                float _3571 = dot(vec3(_807, _810, _813), vec3((-0.0) - _2979, (-0.0) - _2980, (-0.0) - _2981));
                                float _4645 = isnan(0.0) ? _3571 : (isnan(_3571) ? 0.0 : max(_3571, 0.0));
                                float _3574 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
                                float _3575 = dot(vec3(_807, _810, _813), vec3(_3567 * _3561, _3567 * _3562, _3567 * _3563));
                                float _4656 = isnan(0.0) ? _3575 : (isnan(_3575) ? 0.0 : max(_3575, 0.0));
                                float _3578 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
                                float _3582 = ((_3578 * _3578) * (_3560 + (-1.0))) + 1.0;
                                float _3583 = _3520 * _3559;
                                float _3584 = _3583 * _3583;
                                float _3590 = ((1.0 - _3584) * dot(vec3(_807, _810, _813), vec3(_3507, _3508, _3509))) + _3584;
                                float _4667 = isnan(0.0) ? _3590 : (isnan(_3590) ? 0.0 : max(_3590, 0.0));
                                float _3591 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
                                float _3592 = 1.0 - _3559;
                                float _3602 = (0.5 / (((_3591 * ((_3574 * _3592) + _3559)) + 9.9999999392252902907785028219223e-09) + (((_3591 * _3592) + _3559) * _3574))) * _3591;
                                float _4678 = isnan(0.0) ? _3602 : (isnan(_3602) ? 0.0 : max(_3602, 0.0));
                                float _3612 = (_3537 * _3514) * (((_3560 * 3.1415927410125732421875) * (isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0)))) / ((_3582 * _3582) * ((_3527 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3538 * _3383.z;
                                frontier_phi_85_pred_1 = _3538 * _3383.y;
                                frontier_phi_85_pred_2 = _3538 * _3383.x;
                                frontier_phi_85_pred_3 = _3612 * _3395.z;
                                frontier_phi_85_pred_4 = _3612 * _3395.y;
                                frontier_phi_85_pred_5 = _3612 * _3395.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3621 = frontier_phi_85_pred;
                            _3620 = frontier_phi_85_pred_1;
                            _3619 = frontier_phi_85_pred_2;
                            _3618 = frontier_phi_85_pred_3;
                            _3617 = frontier_phi_85_pred_4;
                            _3616 = frontier_phi_85_pred_5;
                            _3325 = _3619 + _3338;
                            _3326 = _3620 + _3339;
                            _3327 = _3621 + _3340;
                            _3322 = _3616 + _3335;
                            _3323 = _3617 + _3336;
                            _3324 = _3618 + _3337;
                            if (_3342 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3335 = _3322;
                                _3336 = _3323;
                                _3337 = _3324;
                                _3338 = _3325;
                                _3339 = _3326;
                                _3340 = _3327;
                                _3341 = _3342;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3327;
                        frontier_phi_79_pred_1 = _3326;
                        frontier_phi_79_pred_2 = _3325;
                        frontier_phi_79_pred_3 = _3324;
                        frontier_phi_79_pred_4 = _3323;
                        frontier_phi_79_pred_5 = _3322;
                    }
                    _2964 = frontier_phi_79_pred;
                    _2962 = frontier_phi_79_pred_1;
                    _2960 = frontier_phi_79_pred_2;
                    _2958 = frontier_phi_79_pred_3;
                    _2956 = frontier_phi_79_pred_4;
                    _2954 = frontier_phi_79_pred_5;
                    uint _3120 = _3119 + 1u;
                    if (_3120 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3113 = _2954;
                        _3114 = _2956;
                        _3115 = _2958;
                        _3116 = _2960;
                        _3117 = _2962;
                        _3118 = _2964;
                        _3119 = _3120;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2960;
                frontier_phi_60_61_ladder_1 = _2964;
                frontier_phi_60_61_ladder_2 = _2962;
                frontier_phi_60_61_ladder_3 = _2958;
                frontier_phi_60_61_ladder_4 = _2956;
                frontier_phi_60_61_ladder_5 = _2954;
            }
            else
            {
                frontier_phi_60_61_ladder = _2830;
                frontier_phi_60_61_ladder_1 = _2834;
                frontier_phi_60_61_ladder_2 = _2832;
                frontier_phi_60_61_ladder_3 = _2828;
                frontier_phi_60_61_ladder_4 = _2826;
                frontier_phi_60_61_ladder_5 = _2824;
            }
            _2953 = frontier_phi_60_61_ladder_5;
            _2955 = frontier_phi_60_61_ladder_4;
            _2957 = frontier_phi_60_61_ladder_3;
            _2959 = frontier_phi_60_61_ladder;
            _2961 = frontier_phi_60_61_ladder_2;
            _2963 = frontier_phi_60_61_ladder_1;
        }
        float _2968 = isnan(1.0) ? _911 : (isnan(_911) ? 1.0 : min(_911, 1.0));
        _2701 = (_2968 * _2959) + _2135;
        _2703 = (_2968 * _2961) + _2137;
        _2705 = (_2968 * _2963) + _2139;
        _2707 = ((_2953 * _896) * _2968) + _2483;
        _2709 = ((_2955 * _898) * _2968) + _2485;
        _2711 = ((_2957 * _899) * _2968) + _2487;
    }
    else
    {
        _2701 = _2135;
        _2703 = _2137;
        _2705 = _2139;
        _2707 = _2483;
        _2709 = _2485;
        _2711 = _2487;
    }
    uint _2717 = _840 + uint(cbMatDynParam._m0[0u].w);
    float _2725 = ((cbMtdParam._m0[11u].x * cbMtdParam._m0[22u].z) * _626.x) * cbInstanceData._m0[_2717].x;
    float _2728 = ((cbMtdParam._m0[11u].y * cbMtdParam._m0[22u].z) * _626.y) * cbInstanceData._m0[_2717].y;
    float _2731 = ((cbMtdParam._m0[11u].z * cbMtdParam._m0[22u].z) * _626.z) * cbInstanceData._m0[_2717].z;
    float _4694 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _4705 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _4716 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _2748 = (((isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0))) * (_2701 + ((isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0))) * _911))) + ((_2707 + ((isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0))) * _1752)) * cbPerFrame._m0[3u].x)) + _2725;
    float _2750 = (_2728 + ((_2709 + ((isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0))) * _1752)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0))) * (_2703 + ((isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0))) * _911)));
    float _2752 = (_2731 + ((_2711 + ((isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0))) * _1752)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0))) * (_2705 + ((isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0))) * _911)));
    float _2753 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
    float _2754 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0));
    float _2755 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0));
    float _2761 = cbMtdParam._m0[2u].x * _2725;
    float _2762 = cbMtdParam._m0[2u].y * _2728;
    float _2763 = cbMtdParam._m0[2u].z * _2731;
    float _4742 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2765 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
    uint _2766 = _839 + 6u;
    float _2774 = _783 / cbSceneParam._m0[86u].x;
    float _2775 = _784 / cbSceneParam._m0[86u].y;
    vec4 _2789 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2774, _2775, (log2((isnan(cbSceneParam._m0[77u].w) ? _705 : (isnan(_705) ? cbSceneParam._m0[77u].w : min(_705, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2791 = _2789.x;
    float _2792 = _2789.y;
    float _2793 = _2789.z;
    float _2794 = _2789.w;
    float _2886;
    float _2888;
    float _2890;
    float _2892;
    if (_705 > cbSceneParam._m0[78u].w)
    {
        float _2849 = isnan(_705) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _705 : min(cbSceneParam._m0[80u].w, _705));
        float _2850 = _2849 / _705;
        float _2861 = _2850 * _755;
        float _2862 = _756 * _2850;
        float _2863 = (-0.0) - _2862;
        float _2864 = _2850 * _757;
        float _2866 = (cbSceneParam._m0[77u].w * _2863) / _2849;
        float _2867 = _2866 + cbSceneParam._m0[79u].w;
        float _2868 = cbSceneParam._m0[79u].w - _2862;
        float _2874 = sqrt(((_2861 * _2861) + (_2862 * _2862)) + (_2864 * _2864));
        float _2877 = (1.0 - (cbSceneParam._m0[77u].w / _2849)) * _2874;
        float _2882 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2884 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3070;
        if (abs((_2863 - _2866) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3070 = ((((_2867 > 0.0) ? exp2(_2882 * _2867) : (2.0 - exp2(_2884 * _2867))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2877;
        }
        else
        {
            float _3014 = 1.0 / cbSceneParam._m0[80u].x;
            float _3015 = isnan(_2868) ? _2867 : (isnan(_2867) ? _2868 : max(_2867, _2868));
            float _3016 = isnan(_2868) ? _2867 : (isnan(_2867) ? _2868 : min(_2867, _2868));
            float _3025 = isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : min(_3015, 0.0));
            float _3026 = isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : min(_3016, 0.0));
            _3070 = ((abs(_2874 / _2863) * cbSceneParam._m0[80u].y) * ((((_3025 - _3026) * 2.0) - ((exp2(_2882 * (isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0)))) - exp2(_2882 * (isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0))))) * _3014)) - ((exp2(_2884 * _3025) - exp2(_2884 * _3026)) * _3014))) + (_2877 * cbSceneParam._m0[80u].z);
        }
        vec4 _3072 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2774, _2775, 1.0), 0.0);
        float _3081 = exp2((_3070 * (-1.44269502162933349609375)) * (1.0 - _3072.w));
        float _3082 = log2(_3081);
        float _3098 = log2(_2794);
        _2886 = (exp2(_3098 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3082 * cbSceneParam._m0[78u].x)) * _3072.x) / cbSceneParam._m0[78u].x)) + _2791;
        _2888 = (exp2(_3098 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3082 * cbSceneParam._m0[78u].y)) * _3072.y) / cbSceneParam._m0[78u].y)) + _2792;
        _2890 = (exp2(_3098 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3082 * cbSceneParam._m0[78u].z)) * _3072.z) / cbSceneParam._m0[78u].z)) + _2793;
        _2892 = _3081 * _2794;
    }
    else
    {
        _2886 = _2791;
        _2888 = _2792;
        _2890 = _2793;
        _2892 = _2794;
    }
    bool _3108;
    vec4 _2902;
    vec4 _2924;
    float _2926;
    float _2930;
    float _2931;
    float _2932;
    float _2935;
    float _2938;
    float _2941;
    float _2942;
    bool _2952;
    for (;;)
    {
        _2902 = cbMatDynParam._m0[0u];
        float _2904 = roundEven(_2902.y);
        bool _2905 = _2904 == 3.0;
        float _2906 = log2(_2892);
        float _2910 = exp2(_2906 * cbSceneParam._m0[78u].x);
        float _2911 = exp2(_2906 * cbSceneParam._m0[78u].y);
        float _2912 = exp2(_2906 * cbSceneParam._m0[78u].z);
        float _2913 = _2910 * _2753;
        float _2914 = _2911 * _2754;
        float _2915 = _2912 * _2755;
        float _2922 = _771 + (-0.5);
        _2924 = cbMtdParam._m0[1u];
        _2926 = _2924.y * _2922;
        float _2929 = (_2904 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2930 = _2929 * (_2905 ? _2913 : (_2913 + (cbSceneParam._m0[72u].w * _2886)));
        _2931 = _2929 * (_2905 ? _2914 : (_2914 + (cbSceneParam._m0[72u].w * _2888)));
        _2932 = _2929 * (_2905 ? _2915 : (_2915 + (cbSceneParam._m0[72u].w * _2890)));
        _2935 = ((_2761 * _2765) * _2910) * _2929;
        _2938 = ((_2762 * _2765) * _2911) * _2929;
        _2941 = ((_2763 * _2765) * _2912) * _2929;
        _2942 = _2922 * 0.999000012874603271484375;
        _2952 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2952)
        {
            if ((cbInstanceData._m0[_839 + 7u].x + _2942) < 0.5)
            {
                _3108 = true;
                break;
            }
        }
        uint _3049 = _840 + uint(_2902.w);
        if ((cbInstanceData._m0[_3049].w < 1.0) && ((cbInstanceData._m0[_3049].w + _2942) < 0.5))
        {
            _3108 = true;
            break;
        }
        if ((_2926 + 1.0) < _2924.x)
        {
            _3108 = true;
            break;
        }
        _3108 = false;
        break;
    }
    float _3313;
    if (_3108)
    {
        discard_state = true;
        _3313 = 0.0;
    }
    else
    {
        _3313 = cbInstanceData._m0[_2766].w;
    }
    SV_Target.x = _2930;
    SV_Target.y = _2931;
    SV_Target.z = _2932;
    SV_Target.w = _3313;
    SV_Target_1.x = _2935;
    SV_Target_1.y = _2938;
    SV_Target_1.z = _2941;
    SV_Target_1.w = cbInstanceData._m0[_2766].w;
    discard_exit();
}


