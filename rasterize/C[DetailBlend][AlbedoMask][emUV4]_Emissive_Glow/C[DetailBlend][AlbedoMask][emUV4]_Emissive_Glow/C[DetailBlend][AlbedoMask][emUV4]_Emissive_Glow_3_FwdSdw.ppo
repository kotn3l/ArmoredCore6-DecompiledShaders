#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 11) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 12) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1272;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _228 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = _235 * NORMAL.x;
    float _237 = _235 * NORMAL.y;
    float _238 = _235 * NORMAL.z;
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _250;
    float _251;
    float _252;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _250 = (-0.0) - _236;
        _251 = (-0.0) - _237;
        _252 = (-0.0) - _238;
    }
    else
    {
        _250 = _236;
        _251 = _237;
        _252 = _238;
    }
    vec4 _270 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _284 = exp2(log2(_270.w * cbMtdParam._m0[23u].z) * cbMtdParam._m0[21u].y);
    float _285 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _286 = isnan(1.0) ? _285 : (isnan(_285) ? 1.0 : min(_285, 1.0));
    vec4 _300 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _304 = _300.z;
    float _305 = _300.w;
    float _313 = exp2(log2(_304 * cbMtdParam._m0[21u].w) * cbMtdParam._m0[20u].y);
    float _314 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _315 = isnan(1.0) ? _314 : (isnan(_314) ? 1.0 : min(_314, 1.0));
    vec4 _328 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    vec4 _353 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _363 = cbMtdParam._m0[9u].x * _353.x;
    float _364 = cbMtdParam._m0[9u].y * _353.y;
    float _365 = cbMtdParam._m0[9u].z * _353.z;
    float _372 = (((cbMtdParam._m0[10u].x * _328.x) - _363) * _315) + _363;
    float _373 = (((cbMtdParam._m0[10u].y * _328.y) - _364) * _315) + _364;
    float _374 = (((cbMtdParam._m0[10u].z * _328.z) - _365) * _315) + _365;
    float _381 = exp2(log2(_305) * cbMtdParam._m0[22u].y);
    vec4 _394 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _414 = (((cbMtdParam._m0[12u].x * _394.x) - _372) * _381) + _372;
    float _415 = (((cbMtdParam._m0[12u].y * _394.y) - _373) * _381) + _373;
    float _416 = (((cbMtdParam._m0[12u].z * _394.z) - _374) * _381) + _374;
    vec4 _428 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _452 = (_270.x * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].x * _428.x) - _414) * _286) + _414);
    float _454 = (_270.y * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].y * _428.y) - _415) * _286) + _415);
    float _456 = (_270.z * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].z * _428.z) - _416) * _286) + _416);
    float _461 = exp2(log2(1.0 - _305) * 0.00999999977648258209228515625);
    float _479 = ((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_11, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x - cbMtdParam._m0[22u].w) * _461) + cbMtdParam._m0[22u].w;
    float _498 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w)).x - _479) + cbMtdParam._m0[21u].z) * _381) + _479;
    float _518 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w)).x - _498) + cbMtdParam._m0[23u].w) * _286) + _498;
    vec4 _531 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _549 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _551 = _549.x;
    float _552 = _549.y;
    float _555 = cbMtdParam._m0[20u].x + _549.z;
    float _558 = (((cbMtdParam._m0[21u].x + _531.z) - _555) * _461) + _555;
    vec4 _571 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _583 = (_304 * 2.0) * ((((_571.z - _558) + cbMtdParam._m0[23u].y) * _381) + _558);
    vec4 _596 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _605 = (((_596.z - _583) + cbMtdParam._m0[22u].x) * _286) + _583;
    vec4 _624 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _639 = ((_531.x - _551) * _461) + _551;
    float _640 = ((_531.y - _552) * _461) + _552;
    float _645 = ((_571.x - _639) * _381) + _639;
    float _646 = ((_571.y - _640) * _381) + _640;
    float _655 = ((((_596.x - _645) * _286) + _645) * 2.0) + (-1.0);
    float _656 = ((((_596.y - _646) * _286) + _646) * 2.0) + (-1.0);
    float _657 = dot(vec2(_655, _656), vec2(_655, _656));
    float _3948 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _662 = sqrt(1.0 - (isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0))));
    float _665 = (cbMtdParam._m0[23u].x * ((_300.x * 2.0) + (-1.0))) + _655;
    float _666 = (cbMtdParam._m0[23u].x * ((_300.y * 2.0) + (-1.0))) + _656;
    float _669 = fma(_662, _250, fma(_666, _242 * TANGENT.x, (_228 * _221) * _665));
    float _672 = fma(_662, _251, fma(_666, _242 * TANGENT.y, (_228 * _222) * _665));
    float _675 = fma(_662, _252, fma(_666, _242 * TANGENT.z, (_228 * _223) * _665));
    float _679 = inversesqrt(dot(vec3(_669, _672, _675), vec3(_669, _672, _675)));
    float _680 = _679 * _669;
    float _681 = _679 * _672;
    float _682 = _679 * _675;
    float _3959 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _683 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
    float _3970 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _3981 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _3992 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _4003 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _687 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
    float _703 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _743 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _753 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _743);
    float _754 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _743);
    float _755 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _743);
    float _759 = inversesqrt(dot(vec3(_753, _754, _755), vec3(_753, _754, _755)));
    float _760 = _753 * _759;
    float _761 = _754 * _759;
    float _762 = _755 * _759;
    float _768 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _769 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _771 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _773 = _771.w;
    float _793 = fma(_682, cbSceneParam._m0[5u].z, fma(_681, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _680));
    float _796 = fma(_682, cbSceneParam._m0[6u].z, fma(_681, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _680));
    float _799 = fma(_682, cbSceneParam._m0[7u].z, fma(_681, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _680));
    vec4 _801 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _812 = (((_801.y - _683) + (_801.w * _683)) * cbMtdParam._m0[3u].x) + _683;
    uint _825 = uint(roundEven(NORMAL.w)) * 13u;
    uint _826 = _825 + 9u;
    uint _827 = _826 + uint(cbMatDynParam._m0[0u].w);
    float _833 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0)))) * cbInstanceData._m0[_827].x;
    float _834 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0)))) * cbInstanceData._m0[_827].y;
    float _835 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0)))) * cbInstanceData._m0[_827].z;
    float _4014 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _836 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
    float _4025 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _837 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
    float _4036 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _838 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
    vec4 _839 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _844 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _855 = (((_844.x - _687) + (_844.w * _687)) * cbMtdParam._m0[3u].x) + _687;
    float _868 = (cbMtdParam._m0[3u].x * (((_836 * _773) - _836) + _839.x)) + _836;
    float _869 = (cbMtdParam._m0[3u].x * (((_837 * _773) - _837) + _839.y)) + _837;
    float _870 = (cbMtdParam._m0[3u].x * (((_838 * _773) - _838) + _839.z)) + _838;
    float _871 = 1.0 - _855;
    float _872 = _871 * _868;
    float _873 = _871 * _869;
    float _874 = _871 * _870;
    float _879 = (_868 + (-0.039999999105930328369140625)) * _855;
    float _880 = (_869 + (-0.039999999105930328369140625)) * _855;
    float _881 = (_870 + (-0.039999999105930328369140625)) * _855;
    float _882 = _879 + 0.039999999105930328369140625;
    float _884 = _880 + 0.039999999105930328369140625;
    float _885 = _881 + 0.039999999105930328369140625;
    vec4 _894 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _768, cbSceneParam._m0[86u].y * _769));
    float _897 = _894.x * TEXCOORD_4.z;
    float _898 = dot(vec3(_680, _681, _682), vec3(_760, _761, _762));
    float _901 = _898 * 2.0;
    float _905 = (_901 * _680) - _760;
    float _906 = (_901 * _681) - _761;
    float _907 = (_901 * _682) - _762;
    float _911 = abs(dot(vec3(_760, _761, _762), vec3(_680, _681, _682)));
    float _4047 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _913 = sqrt(_812);
    float _926 = exp2((_913 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_913 * 3.0));
    float _932 = (1.0 - _926) * ((_913 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _933 = _926 * _913;
    float _961 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _965 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _969 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1271;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _996 = fma(_969, cbModelParam._m0[26u].z, fma(_965, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _961));
        float _1000 = fma(_969, cbModelParam._m0[27u].z, fma(_965, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _961));
        float _1004 = fma(_969, cbModelParam._m0[28u].z, fma(_965, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _961));
        float _1029 = _961 + _680;
        float _1030 = _965 + _681;
        float _1031 = _969 + _682;
        float _1041 = fma(_1031, cbModelParam._m0[26u].z, fma(_1030, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1029)) - _996;
        float _1042 = fma(_1031, cbModelParam._m0[27u].z, fma(_1030, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1029)) - _1000;
        float _1043 = fma(_1031, cbModelParam._m0[28u].z, fma(_1030, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1029)) - _1004;
        float _1047 = inversesqrt(dot(vec3(_1041, _1042, _1043), vec3(_1041, _1042, _1043)));
        float _1060 = ((_1047 * _1041) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_996 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1061 = ((_1047 * _1042) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1000 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1062 = ((_1047 * _1043) / cbModelParam._m0[34u].z) + ((((((_1004 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1065 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1060, _1061, _1062), 0.0);
        vec4 _1072 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1060, _1061, _1062), 0.0);
        vec4 _1079 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1060, _1061, _1062), 0.0);
        vec4 _1086 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1060, _1061, _1062), 0.0);
        float _1099 = exp2((_1065.w + (-0.5)) * 20.0) * 2.0;
        float _1100 = _1099 * (_1065.x + (-0.5));
        float _1101 = _1099 * (_1065.y + (-0.5));
        float _1102 = _1099 * (_1065.z + (-0.5));
        float _1109 = exp2((_1072.w + (-0.5)) * 20.0) * 2.0;
        float _1110 = _1109 * (_1072.x + (-0.5));
        float _1111 = _1109 * (_1072.y + (-0.5));
        float _1112 = _1109 * (_1072.z + (-0.5));
        float _1119 = exp2((_1079.w + (-0.5)) * 20.0) * 2.0;
        float _1120 = _1119 * (_1079.x + (-0.5));
        float _1121 = _1119 * (_1079.y + (-0.5));
        float _1122 = _1119 * (_1079.z + (-0.5));
        float _1129 = exp2((_1086.w + (-0.5)) * 20.0) * 2.0;
        float _1130 = _1129 * (_1086.x + (-0.5));
        float _1131 = _1129 * (_1086.y + (-0.5));
        float _1132 = _1129 * (_1086.z + (-0.5));
        float _1133 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1134 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1135 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1136 = _1100 * 0.5;
        float _1137 = _1110 * 0.5;
        float _1138 = _1120 * 0.5;
        float _1139 = dot(vec3(_1136, _1137, _1138), vec3(_1136, _1137, _1138));
        float _1144 = (_1139 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1139);
        float _1153 = (dot(vec3(_680, _681, _682), vec3(_1144 * _1136, _1144 * _1137, _1144 * _1138)) + 1.0) * 0.5;
        float _4073 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1163 = sqrt(((_1137 * _1137) + (_1136 * _1136)) + (_1138 * _1138)) / (_1133 + 9.9999997473787516355514526367188e-06);
        float _4084 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1164 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _1165 = _1164 * 2.0;
        float _1169 = (1.0 - _1164) / (_1164 + 1.0);
        float _4095 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1170 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _1179 = ((((1.0 - _1170) * (_1165 + 2.0)) * exp2(log2(isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * (_1165 + 1.0))) + _1170) * _1133;
        float _1180 = _1101 * 0.5;
        float _1181 = _1111 * 0.5;
        float _1182 = _1121 * 0.5;
        float _1183 = dot(vec3(_1180, _1181, _1182), vec3(_1180, _1181, _1182));
        float _1188 = (_1183 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1183);
        float _1196 = (dot(vec3(_680, _681, _682), vec3(_1188 * _1180, _1188 * _1181, _1188 * _1182)) + 1.0) * 0.5;
        float _4106 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1205 = sqrt(((_1181 * _1181) + (_1180 * _1180)) + (_1182 * _1182)) / (_1134 + 9.9999997473787516355514526367188e-06);
        float _4117 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _1207 = _1206 * 2.0;
        float _1211 = (1.0 - _1206) / (_1206 + 1.0);
        float _4128 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1212 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _1221 = ((((1.0 - _1212) * (_1207 + 2.0)) * exp2(log2(isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))) * (_1207 + 1.0))) + _1212) * _1134;
        float _1222 = _1102 * 0.5;
        float _1223 = _1112 * 0.5;
        float _1224 = _1122 * 0.5;
        float _1225 = dot(vec3(_1222, _1223, _1224), vec3(_1222, _1223, _1224));
        float _1230 = (_1225 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1225);
        float _1238 = (dot(vec3(_680, _681, _682), vec3(_1230 * _1222, _1230 * _1223, _1230 * _1224)) + 1.0) * 0.5;
        float _4139 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1247 = sqrt(((_1223 * _1223) + (_1222 * _1222)) + (_1224 * _1224)) / (_1135 + 9.9999997473787516355514526367188e-06);
        float _4150 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _1249 = _1248 * 2.0;
        float _1253 = (1.0 - _1248) / (_1248 + 1.0);
        float _4161 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1254 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1263 = ((((1.0 - _1254) * (_1249 + 2.0)) * exp2(log2(isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * (_1249 + 1.0))) + _1254) * _1135;
        _1271 = _1102;
        _1273 = _1101;
        _1274 = _1100;
        _1275 = _1112;
        _1276 = _1111;
        _1277 = _1110;
        _1278 = _1122;
        _1279 = _1121;
        _1280 = _1120;
        _1281 = _1135;
        _1282 = _1134;
        _1283 = _1133;
        _1284 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0)));
        _1285 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0)));
        _1286 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0)));
    }
    else
    {
        _1271 = _1272;
        _1273 = _1272;
        _1274 = _1272;
        _1275 = _1272;
        _1276 = _1272;
        _1277 = _1272;
        _1278 = _1272;
        _1279 = _1272;
        _1280 = _1272;
        _1281 = _1272;
        _1282 = _1272;
        _1283 = _1272;
        _1284 = 0.0;
        _1285 = 0.0;
        _1286 = 0.0;
    }
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1312 = fma(_969, cbModelParam._m0[30u].z, fma(_965, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _961));
        float _1316 = fma(_969, cbModelParam._m0[31u].z, fma(_965, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _961));
        float _1320 = fma(_969, cbModelParam._m0[32u].z, fma(_965, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _961));
        float _1343 = _961 + _680;
        float _1344 = _965 + _681;
        float _1345 = _969 + _682;
        float _1355 = fma(_1345, cbModelParam._m0[30u].z, fma(_1344, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1343)) - _1312;
        float _1356 = fma(_1345, cbModelParam._m0[31u].z, fma(_1344, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1343)) - _1316;
        float _1357 = fma(_1345, cbModelParam._m0[32u].z, fma(_1344, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1343)) - _1320;
        float _1361 = inversesqrt(dot(vec3(_1355, _1356, _1357), vec3(_1355, _1356, _1357)));
        float _1374 = ((_1361 * _1355) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1312 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1375 = ((_1361 * _1356) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1316 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1376 = ((_1361 * _1357) / cbModelParam._m0[35u].z) + ((((((_1320 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1378 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1374, _1375, _1376), 0.0);
        vec4 _1385 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1374, _1375, _1376), 0.0);
        vec4 _1392 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1374, _1375, _1376), 0.0);
        vec4 _1399 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1374, _1375, _1376), 0.0);
        float _1411 = exp2((_1378.w + (-0.5)) * 20.0) * 2.0;
        float _1412 = _1411 * (_1378.x + (-0.5));
        float _1413 = _1411 * (_1378.y + (-0.5));
        float _1414 = _1411 * (_1378.z + (-0.5));
        float _1421 = exp2((_1385.w + (-0.5)) * 20.0) * 2.0;
        float _1422 = _1421 * (_1385.x + (-0.5));
        float _1423 = _1421 * (_1385.y + (-0.5));
        float _1424 = _1421 * (_1385.z + (-0.5));
        float _1431 = exp2((_1392.w + (-0.5)) * 20.0) * 2.0;
        float _1432 = _1431 * (_1392.x + (-0.5));
        float _1433 = _1431 * (_1392.y + (-0.5));
        float _1434 = _1431 * (_1392.z + (-0.5));
        float _1441 = exp2((_1399.w + (-0.5)) * 20.0) * 2.0;
        float _1442 = _1441 * (_1399.x + (-0.5));
        float _1443 = _1441 * (_1399.y + (-0.5));
        float _1444 = _1441 * (_1399.z + (-0.5));
        float _1445 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1446 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1447 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1448 = _1412 * 0.5;
        float _1449 = _1422 * 0.5;
        float _1450 = _1432 * 0.5;
        float _1451 = dot(vec3(_1448, _1449, _1450), vec3(_1448, _1449, _1450));
        float _1456 = (_1451 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1451);
        float _1464 = (dot(vec3(_680, _681, _682), vec3(_1456 * _1448, _1456 * _1449, _1456 * _1450)) + 1.0) * 0.5;
        float _4202 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1473 = sqrt(((_1449 * _1449) + (_1448 * _1448)) + (_1450 * _1450)) / (_1445 + 9.9999997473787516355514526367188e-06);
        float _4213 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1474 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _1475 = _1474 * 2.0;
        float _1479 = (1.0 - _1474) / (_1474 + 1.0);
        float _4224 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1480 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _1489 = ((((1.0 - _1480) * (_1475 + 2.0)) * exp2(log2(isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * (_1475 + 1.0))) + _1480) * _1445;
        float _1490 = _1413 * 0.5;
        float _1491 = _1423 * 0.5;
        float _1492 = _1433 * 0.5;
        float _1493 = dot(vec3(_1490, _1491, _1492), vec3(_1490, _1491, _1492));
        float _1498 = (_1493 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1493);
        float _1506 = (dot(vec3(_680, _681, _682), vec3(_1498 * _1490, _1498 * _1491, _1498 * _1492)) + 1.0) * 0.5;
        float _4235 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1515 = sqrt(((_1491 * _1491) + (_1490 * _1490)) + (_1492 * _1492)) / (_1446 + 9.9999997473787516355514526367188e-06);
        float _4246 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _1517 = _1516 * 2.0;
        float _1521 = (1.0 - _1516) / (_1516 + 1.0);
        float _4257 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1522 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _1531 = ((((1.0 - _1522) * (_1517 + 2.0)) * exp2(log2(isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * (_1517 + 1.0))) + _1522) * _1446;
        float _1532 = _1414 * 0.5;
        float _1533 = _1424 * 0.5;
        float _1534 = _1434 * 0.5;
        float _1535 = dot(vec3(_1532, _1533, _1534), vec3(_1532, _1533, _1534));
        float _1540 = (_1535 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1535);
        float _1548 = (dot(vec3(_680, _681, _682), vec3(_1540 * _1532, _1540 * _1533, _1540 * _1534)) + 1.0) * 0.5;
        float _4268 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1557 = sqrt(((_1533 * _1533) + (_1532 * _1532)) + (_1534 * _1534)) / (_1447 + 9.9999997473787516355514526367188e-06);
        float _4279 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1558 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _1559 = _1558 * 2.0;
        float _1563 = (1.0 - _1558) / (_1558 + 1.0);
        float _4290 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1564 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _1573 = ((((1.0 - _1564) * (_1559 + 2.0)) * exp2(log2(isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0))) * (_1559 + 1.0))) + _1564) * _1447;
        _1581 = _1414;
        _1582 = _1413;
        _1583 = _1412;
        _1584 = _1424;
        _1585 = _1423;
        _1586 = _1422;
        _1587 = _1434;
        _1588 = _1433;
        _1589 = _1432;
        _1590 = _1447;
        _1591 = _1446;
        _1592 = _1445;
        _1593 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0)));
        _1594 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0)));
        _1595 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0)));
    }
    else
    {
        _1581 = _1272;
        _1582 = _1272;
        _1583 = _1272;
        _1584 = _1272;
        _1585 = _1272;
        _1586 = _1272;
        _1587 = _1272;
        _1588 = _1272;
        _1589 = _1272;
        _1590 = _1272;
        _1591 = _1272;
        _1592 = _1272;
        _1593 = 0.0;
        _1594 = 0.0;
        _1595 = 0.0;
    }
    float _1605 = (cbModelParam._m0[1u].x * (_1593 - _1284)) + _1284;
    float _1606 = (cbModelParam._m0[1u].x * (_1594 - _1285)) + _1285;
    float _1607 = (cbModelParam._m0[1u].x * (_1595 - _1286)) + _1286;
    float _1628 = fma(_1607, cbSceneParam._m0[89u].z, fma(_1606, cbSceneParam._m0[89u].y, _1605 * cbSceneParam._m0[89u].x));
    float _1631 = fma(_1607, cbSceneParam._m0[90u].z, fma(_1606, cbSceneParam._m0[90u].y, _1605 * cbSceneParam._m0[90u].x));
    float _1634 = fma(_1607, cbSceneParam._m0[91u].z, fma(_1606, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1605));
    float _1649 = _905 * 0.5;
    float _1650 = _906 * 0.5;
    float _1651 = _907 * 0.5;
    float _1652 = dot(vec4(_1649, _1650, _1651, 1.0), vec4(_1583, _1586, _1589, _1592));
    float _1655 = dot(vec4(_1649, _1650, _1651, 1.0), vec4(_1582, _1585, _1588, _1591));
    float _1658 = dot(vec4(_1649, _1650, _1651, 1.0), vec4(_1581, _1584, _1587, _1590));
    float _1692;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1665 = dot(vec4(_1649, _1650, _1651, 1.0), vec4(_1271, _1275, _1278, _1281));
        float _1669 = dot(vec4(_1649, _1650, _1651, 1.0), vec4(_1273, _1276, _1279, _1282));
        float _1673 = dot(vec4(_1649, _1650, _1651, 1.0), vec4(_1274, _1277, _1280, _1283));
        float _1680 = dot(vec4(cbModelParam._m0[39u]), vec4(_1649, _1650, _1651, 1.0));
        _1692 = dot(vec3(isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0)), isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0)), isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1680) ? 0.0 : (isnan(0.0) ? _1680 : max(0.0, _1680))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1692 = 1.0;
    }
    float _1703;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1694 = dot(vec4(cbModelParam._m0[40u]), vec4(_1649, _1650, _1651, 1.0));
        _1703 = dot(vec3(isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0)), isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0)), isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1694) ? 0.0 : (isnan(0.0) ? _1694 : max(0.0, _1694))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1703 = 1.0;
    }
    float _1707 = (_1703 * cbModelParam._m0[1u].x) + (_1692 * (1.0 - cbModelParam._m0[1u].x));
    float _1717 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _812);
    float _1718 = isnan(_1717) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1717 : min(cbModelParam._m0[25u].z, _1717));
    float _1798;
    float _1800;
    float _1802;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1765 = fma(_969, cbModelParam._m0[13u].z, fma(_965, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _961)) + cbModelParam._m0[13u].w;
        float _1769 = fma(_969, cbModelParam._m0[14u].z, fma(_965, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _961)) + cbModelParam._m0[14u].w;
        float _1773 = fma(_969, cbModelParam._m0[15u].z, fma(_965, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _961)) + cbModelParam._m0[15u].w;
        float _1776 = fma(_907, cbModelParam._m0[13u].z, fma(_906, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _905));
        float _1779 = fma(_907, cbModelParam._m0[14u].z, fma(_906, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _905));
        float _1782 = fma(_907, cbModelParam._m0[15u].z, fma(_906, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _905));
        float _1810;
        if (_1776 > 0.0)
        {
            _1810 = abs((1.0 - _1765) / _1776);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1776 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1765 + 1.0) / _1776);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1810 = frontier_phi_16_14_ladder;
        }
        float _1983;
        if (_1779 > 0.0)
        {
            _1983 = abs((1.0 - _1769) / _1779);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1779 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1769 + 1.0) / _1779);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1983 = frontier_phi_25_21_ladder;
        }
        float _2278;
        if (_1782 > 0.0)
        {
            _2278 = abs((1.0 - _1773) / _1782);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1782 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1773 + 1.0) / _1782);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2278 = frontier_phi_37_32_ladder;
        }
        float _2280 = isnan(_1983) ? _1810 : (isnan(_1810) ? _1983 : min(_1810, _1983));
        float _2281 = isnan(_2278) ? _2280 : (isnan(_2280) ? _2278 : min(_2280, _2278));
        float _2285 = (_2281 * _1776) + _1765;
        float _2286 = (_2281 * _1779) + _1769;
        float _2287 = (_2281 * _1782) + _1773;
        float _2288 = _2281 * 9.9999997473787516355514526367188e-05;
        float _2290 = (-1.0) - _2288;
        float _2292 = _2288 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2287 > _2292) || ((_2287 < _2290) || ((_2286 > _2292) || ((_2286 < _2290) || ((_2285 < _2290) || (_2285 > _2292))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2432 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2287, cbModelParam._m0[9u].z, fma(_2286, cbModelParam._m0[9u].y, _2285 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2287, cbModelParam._m0[10u].z, fma(_2286, cbModelParam._m0[10u].y, _2285 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2287, cbModelParam._m0[11u].z, fma(_2286, cbModelParam._m0[11u].y, _2285 * cbModelParam._m0[11u].x))), _1718);
            frontier_phi_15_37_ladder = _2432.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2432.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2432.z * cbModelParam._m0[1u].y;
        }
        _1798 = frontier_phi_15_37_ladder_1;
        _1800 = frontier_phi_15_37_ladder;
        _1802 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1786 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_905, _906, _907), _1718);
        _1798 = _1786.x * cbModelParam._m0[1u].y;
        _1800 = _1786.y * cbModelParam._m0[1u].y;
        _1802 = _1786.z * cbModelParam._m0[1u].y;
    }
    float _1806 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _812);
    float _1807 = isnan(_1806) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1806 : min(cbModelParam._m0[25u].w, _1806));
    float _1898;
    float _1900;
    float _1902;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1862 = fma(_969, cbModelParam._m0[21u].z, fma(_965, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _961)) + cbModelParam._m0[21u].w;
        float _1866 = fma(_969, cbModelParam._m0[22u].z, fma(_965, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _961)) + cbModelParam._m0[22u].w;
        float _1870 = fma(_969, cbModelParam._m0[23u].z, fma(_965, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _961)) + cbModelParam._m0[23u].w;
        float _1873 = fma(_907, cbModelParam._m0[21u].z, fma(_906, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _905));
        float _1876 = fma(_907, cbModelParam._m0[22u].z, fma(_906, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _905));
        float _1879 = fma(_907, cbModelParam._m0[23u].z, fma(_906, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _905));
        float _1988;
        if (_1873 > 0.0)
        {
            _1988 = abs((1.0 - _1862) / _1873);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1873 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1862 + 1.0) / _1873);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1988 = frontier_phi_27_23_ladder;
        }
        float _2305;
        if (_1876 > 0.0)
        {
            _2305 = abs((1.0 - _1866) / _1876);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1876 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1866 + 1.0) / _1876);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2305 = frontier_phi_39_34_ladder;
        }
        float _2643;
        if (_1879 > 0.0)
        {
            _2643 = abs((1.0 - _1870) / _1879);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1879 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1870 + 1.0) / _1879);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2643 = frontier_phi_49_46_ladder;
        }
        float _2645 = isnan(_2305) ? _1988 : (isnan(_1988) ? _2305 : min(_1988, _2305));
        float _2646 = isnan(_2643) ? _2645 : (isnan(_2645) ? _2643 : min(_2645, _2643));
        float _2650 = (_2646 * _1873) + _1862;
        float _2651 = (_2646 * _1876) + _1866;
        float _2652 = (_2646 * _1879) + _1870;
        float _2653 = _2646 * 9.9999997473787516355514526367188e-05;
        float _2654 = (-1.0) - _2653;
        float _2656 = _2653 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2652 > _2656) || ((_2652 < _2654) || ((_2651 > _2656) || ((_2651 < _2654) || ((_2650 < _2654) || (_2650 > _2656))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2774 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2652, cbModelParam._m0[17u].z, fma(_2651, cbModelParam._m0[17u].y, _2650 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2652, cbModelParam._m0[18u].z, fma(_2651, cbModelParam._m0[18u].y, _2650 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2652, cbModelParam._m0[19u].z, fma(_2651, cbModelParam._m0[19u].y, _2650 * cbModelParam._m0[19u].x))), _1807);
            frontier_phi_24_49_ladder = _2774.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2774.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2774.x * cbModelParam._m0[1u].z;
        }
        _1898 = frontier_phi_24_49_ladder_2;
        _1900 = frontier_phi_24_49_ladder_1;
        _1902 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1882 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_905, _906, _907), _1807);
        _1898 = _1882.x * cbModelParam._m0[1u].z;
        _1900 = _1882.y * cbModelParam._m0[1u].z;
        _1902 = _1882.z * cbModelParam._m0[1u].z;
    }
    float _1915 = (((_932 * _882) + _933) * _897) * ((cbModelParam._m0[1u].w * (_1898 - _1798)) + _1798);
    float _1917 = (((_932 * _884) + _933) * _897) * ((cbModelParam._m0[1u].w * (_1900 - _1800)) + _1800);
    float _1919 = (((_932 * _885) + _933) * _897) * ((cbModelParam._m0[1u].w * (_1902 - _1802)) + _1802);
    float _1922 = fma(_1919, cbSceneParam._m0[89u].z, fma(_1917, cbSceneParam._m0[89u].y, _1915 * cbSceneParam._m0[89u].x));
    float _1925 = fma(_1919, cbSceneParam._m0[90u].z, fma(_1917, cbSceneParam._m0[90u].y, _1915 * cbSceneParam._m0[90u].x));
    float _1928 = fma(_1919, cbSceneParam._m0[91u].z, fma(_1917, cbSceneParam._m0[91u].y, _1915 * cbSceneParam._m0[91u].x));
    float _1962 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1966 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1970 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1974 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1975 = _1962 / _1974;
    float _1976 = _1966 / _1974;
    float _1977 = _1970 / _1974;
    float _2124;
    float _2125;
    float _2126;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2004 = ((uint(_1977 > cbSceneParam._m0[59u].y) + uint(_1977 > cbSceneParam._m0[59u].x)) + uint(_1977 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2005 = _2004 + 43u;
        uint _2013 = _2004 + 44u;
        uint _2021 = _2004 + 45u;
        uint _2029 = _2004 + 46u;
        float _2040 = fma(_1974, cbSceneParam._m0[_2005].w, fma(_1970, cbSceneParam._m0[_2005].z, fma(_1966, cbSceneParam._m0[_2005].y, _1962 * cbSceneParam._m0[_2005].x)));
        float _2044 = fma(_1974, cbSceneParam._m0[_2013].w, fma(_1970, cbSceneParam._m0[_2013].z, fma(_1966, cbSceneParam._m0[_2013].y, _1962 * cbSceneParam._m0[_2013].x)));
        float _2052 = fma(_1974, cbSceneParam._m0[_2029].w, fma(_1970, cbSceneParam._m0[_2029].z, fma(_1966, cbSceneParam._m0[_2029].y, _1962 * cbSceneParam._m0[_2029].x)));
        float _2057 = cbSceneParam._m0[33u].z * _2052;
        float _2059 = cbSceneParam._m0[33u].w * _2052;
        float _2062 = fma(_1974, cbSceneParam._m0[_2021].w, fma(_1970, cbSceneParam._m0[_2021].z, fma(_1966, cbSceneParam._m0[_2021].y, _1962 * cbSceneParam._m0[_2021].x))) / _2052;
        float _2110 = (cbSceneParam._m0[33u].x - sqrt(((_1976 * _1976) + (_1975 * _1975)) + (_1977 * _1977))) * cbSceneParam._m0[33u].y;
        float _4416 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
        float _2117 = (isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2057 + _2040) / _2052, (_2059 + _2044) / _2052), _2062), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2059 + _2040) / _2052, (_2044 - _2057) / _2052), _2062), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2040 - _2057) / _2052, (_2044 - _2059) / _2052), _2062), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2040 - _2059) / _2052, (_2057 + _2044) / _2052), _2062), 0.0)).x), vec4(0.25)));
        _2124 = 1.0 - (_2117 * cbSceneParam._m0[34u].x);
        _2125 = 1.0 - (_2117 * cbSceneParam._m0[34u].y);
        _2126 = 1.0 - (_2117 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2124 = 1.0;
        _2125 = 1.0;
        _2126 = 1.0;
    }
    float _2190;
    float _2192;
    float _2194;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2178 = fma(_1974, cbSceneParam._m0[63u].w, fma(_1970, cbSceneParam._m0[63u].z, fma(_1966, cbSceneParam._m0[63u].y, _1962 * cbSceneParam._m0[63u].x)));
        float _2179 = fma(_1974, cbSceneParam._m0[60u].w, fma(_1970, cbSceneParam._m0[60u].z, fma(_1966, cbSceneParam._m0[60u].y, _1962 * cbSceneParam._m0[60u].x))) / _2178;
        float _2180 = fma(_1974, cbSceneParam._m0[61u].w, fma(_1970, cbSceneParam._m0[61u].z, fma(_1966, cbSceneParam._m0[61u].y, _1962 * cbSceneParam._m0[61u].x))) / _2178;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_2179 >= cbSceneParam._m0[64u].x) && (_2180 >= cbSceneParam._m0[64u].y)) && (_2179 <= cbSceneParam._m0[64u].z)) && (_2180 <= cbSceneParam._m0[64u].w))
        {
            float _2318 = fma(_1974, cbSceneParam._m0[62u].w, fma(_1970, cbSceneParam._m0[62u].z, fma(_1966, cbSceneParam._m0[62u].y, _1962 * cbSceneParam._m0[62u].x))) / _2178;
            float _2322 = isnan(cbSceneParam._m0[41u].w) ? _2318 : (isnan(_2318) ? cbSceneParam._m0[41u].w : max(_2318, cbSceneParam._m0[41u].w));
            float _2365 = (cbSceneParam._m0[33u].x - sqrt(((_1976 * _1976) + (_1975 * _1975)) + (_1977 * _1977))) * cbSceneParam._m0[33u].y;
            float _4432 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
            float _2372 = (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2179, cbSceneParam._m0[33u].w + _2180), _2322), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2179, _2180 - cbSceneParam._m0[33u].z), _2322), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2179 - cbSceneParam._m0[33u].z, _2180 - cbSceneParam._m0[33u].w), _2322), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2179 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2180), _2322), 0.0)).x), vec4(0.25)));
            float _2376 = 1.0 - (_2372 * cbSceneParam._m0[34u].x);
            float _2377 = 1.0 - (_2372 * cbSceneParam._m0[34u].y);
            float _2378 = 1.0 - (_2372 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2377) ? _2125 : (isnan(_2125) ? _2377 : min(_2125, _2377));
            frontier_phi_36_35_ladder_1 = isnan(_2378) ? _2126 : (isnan(_2126) ? _2378 : min(_2126, _2378));
            frontier_phi_36_35_ladder_2 = isnan(_2376) ? _2124 : (isnan(_2124) ? _2376 : min(_2124, _2376));
        }
        else
        {
            frontier_phi_36_35_ladder = _2125;
            frontier_phi_36_35_ladder_1 = _2126;
            frontier_phi_36_35_ladder_2 = _2124;
        }
        _2190 = frontier_phi_36_35_ladder_2;
        _2192 = frontier_phi_36_35_ladder;
        _2194 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _2190 = _2124;
        _2192 = _2125;
        _2194 = _2126;
    }
    uvec4 _2199 = floatBitsToUint(cbInstanceData._m0[_825 + 5u]);
    uint _2201 = _2199.x * 14u;
    uint _2202 = _2201 + 13u;
    float _2209 = _897 + (-1.0);
    float _2214 = (cbLight._m0[_2202].x * _2209) + 1.0;
    float _2215 = (cbLight._m0[_2202].y * _2209) + 1.0;
    float _2216 = (cbLight._m0[_2202].z * _2209) + 1.0;
    float _2217 = (cbLight._m0[_2202].w * _2209) + 1.0;
    uint _2218 = _2201 + 5u;
    float _2224 = isnan(1.0) ? _2215 : (isnan(_2215) ? 1.0 : min(_2215, 1.0));
    uint _2228 = _2201 + 4u;
    float _2237 = isnan(1.0) ? _2214 : (isnan(_2214) ? 1.0 : min(_2214, 1.0));
    uint _2241 = _2201 | 1u;
    float _2252 = dot(vec3(cbLight._m0[_2201].xyz), vec3(_680, _681, _682));
    float _2255 = dot(vec3(cbLight._m0[_2241].xyz), vec3(_680, _681, _682));
    float _4468 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
    float _4479 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
    float _2260 = (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * 0.3183098733425140380859375;
    float _2262 = (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0))) * 0.3183098733425140380859375;
    float _2269 = ((cbLight._m0[_2218].x * _2224) * _2262) + (((cbLight._m0[_2228].x * _2190) * _2237) * _2260);
    float _2270 = ((_2224 * cbLight._m0[_2218].y) * _2262) + (((cbLight._m0[_2228].y * _2192) * _2237) * _2260);
    float _2271 = ((_2224 * cbLight._m0[_2218].z) * _2262) + (((cbLight._m0[_2228].z * _2194) * _2237) * _2260);
    uvec4 _2275 = floatBitsToUint(cbLight._m0[_2201 + 12u]);
    bool _2277 = _2275.x == 0u;
    float _2379;
    float _2381;
    float _2383;
    if (_2277)
    {
        _2379 = _2269;
        _2381 = _2270;
        _2383 = _2271;
    }
    else
    {
        uint _2387 = _2201 + 6u;
        float _2403 = (dot(vec3(cbLight._m0[_2201 + 2u].xyz), vec3(_680, _681, _682)) * 0.5) + 0.5;
        float _2404 = _2403 * _2403;
        float _4490 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
        float _2405 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
        float _2406 = isnan(1.0) ? _2216 : (isnan(_2216) ? 1.0 : min(_2216, 1.0));
        _2379 = (((cbLight._m0[_2387].x * 0.3183098733425140380859375) * _2405) * _2406) + _2269;
        _2381 = (((cbLight._m0[_2387].y * 0.3183098733425140380859375) * _2405) * _2406) + _2270;
        _2383 = (((cbLight._m0[_2387].z * 0.3183098733425140380859375) * _2405) * _2406) + _2271;
    }
    bool _2386 = _2275.y == 0u;
    float _2441;
    float _2443;
    float _2445;
    if (_2386)
    {
        _2441 = _2379;
        _2443 = _2381;
        _2445 = _2383;
    }
    else
    {
        uint _2614 = _2201 + 7u;
        float _2630 = (dot(vec3(cbLight._m0[_2201 + 3u].xyz), vec3(_680, _681, _682)) * 0.5) + 0.5;
        float _2631 = _2630 * _2630;
        float _4506 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
        float _2632 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
        float _2633 = isnan(1.0) ? _2217 : (isnan(_2217) ? 1.0 : min(_2217, 1.0));
        _2441 = (((cbLight._m0[_2614].x * 0.3183098733425140380859375) * _2632) * _2633) + _2379;
        _2443 = (((cbLight._m0[_2614].y * 0.3183098733425140380859375) * _2632) * _2633) + _2381;
        _2445 = (((cbLight._m0[_2614].z * 0.3183098733425140380859375) * _2632) * _2633) + _2383;
    }
    uint _2448 = _2201 + 8u;
    float _2461 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2201].w)) * _812) * 0.949999988079071044921875);
    float _2462 = _2461 * _2461;
    float _2463 = cbLight._m0[_2201].x + _760;
    float _2464 = cbLight._m0[_2201].y + _761;
    float _2465 = cbLight._m0[_2201].z + _762;
    float _2469 = inversesqrt(dot(vec3(_2463, _2464, _2465), vec3(_2463, _2464, _2465)));
    float _2470 = _2469 * _2463;
    float _2471 = _2469 * _2464;
    float _2472 = _2469 * _2465;
    float _2473 = dot(vec3(_680, _681, _682), vec3(cbLight._m0[_2201].xyz));
    float _4522 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
    float _2476 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
    float _4533 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
    float _2477 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
    float _2478 = dot(vec3(_680, _681, _682), vec3(_2470, _2471, _2472));
    float _4544 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
    float _2481 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
    float _2482 = dot(vec3(cbLight._m0[_2201].xyz), vec3(_2470, _2471, _2472));
    float _4555 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
    float _2486 = _2462 * _2462;
    float _2490 = ((_2481 * _2481) * (_2486 + (-1.0))) + 1.0;
    float _2498 = exp2(log2(1.0 - (isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0)))) * 5.0);
    float _2499 = 0.959999978542327880859375 - _879;
    float _2501 = 0.959999978542327880859375 - _880;
    float _2502 = 0.959999978542327880859375 - _881;
    float _2509 = 1.0 - _2462;
    float _2520 = (0.5 / (((_2477 * ((_2476 * _2509) + _2462)) + 9.9999999392252902907785028219223e-09) + (((_2477 * _2509) + _2462) * _2476))) * _2476;
    float _4566 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
    float _2522 = (isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0))) * (_2486 / ((_2490 * _2490) * 3.141590118408203125));
    uint _2536 = _2201 + 9u;
    float _2547 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2241].w)) * _812) * 0.949999988079071044921875);
    float _2548 = _2547 * _2547;
    float _2549 = cbLight._m0[_2241].x + _760;
    float _2550 = cbLight._m0[_2241].y + _761;
    float _2551 = cbLight._m0[_2241].z + _762;
    float _2555 = inversesqrt(dot(vec3(_2549, _2550, _2551), vec3(_2549, _2550, _2551)));
    float _2556 = _2555 * _2549;
    float _2557 = _2555 * _2550;
    float _2558 = _2555 * _2551;
    float _2559 = dot(vec3(_680, _681, _682), vec3(cbLight._m0[_2241].xyz));
    float _4577 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
    float _2562 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
    float _2563 = dot(vec3(_680, _681, _682), vec3(_2556, _2557, _2558));
    float _4588 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
    float _2566 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
    float _2567 = dot(vec3(cbLight._m0[_2241].xyz), vec3(_2556, _2557, _2558));
    float _4599 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
    float _2571 = _2548 * _2548;
    float _2575 = ((_2566 * _2566) * (_2571 + (-1.0))) + 1.0;
    float _2582 = exp2(log2(1.0 - (isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0)))) * 5.0);
    float _2589 = 1.0 - _2548;
    float _2599 = (0.5 / (((_2477 * ((_2562 * _2589) + _2548)) + 9.9999999392252902907785028219223e-09) + (((_2477 * _2589) + _2548) * _2562))) * _2562;
    float _4610 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
    float _2601 = (isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0))) * (_2571 / ((_2575 * _2575) * 3.141590118408203125));
    float _2611 = (((((_2582 * _2499) + _882) * cbLight._m0[_2536].x) * _2601) * _2224) + ((((cbLight._m0[_2448].x * _2190) * ((_2498 * _2499) + _882)) * _2522) * _2237);
    float _2612 = (((((_2582 * _2501) + _884) * cbLight._m0[_2536].y) * _2601) * _2224) + ((((cbLight._m0[_2448].y * _2192) * ((_2498 * _2501) + _884)) * _2522) * _2237);
    float _2613 = (((((_2582 * _2502) + _885) * cbLight._m0[_2536].z) * _2601) * _2224) + ((((cbLight._m0[_2448].z * _2194) * ((_2498 * _2502) + _885)) * _2522) * _2237);
    float _2669;
    float _2671;
    float _2673;
    if (_2277)
    {
        _2669 = _2611;
        _2671 = _2612;
        _2673 = _2613;
    }
    else
    {
        uint _2675 = _2201 + 2u;
        uint _2679 = _2201 + 10u;
        float _2693 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2675].w)) * _812) * 0.949999988079071044921875);
        float _2694 = _2693 * _2693;
        float _2695 = cbLight._m0[_2675].x + _760;
        float _2696 = cbLight._m0[_2675].y + _761;
        float _2697 = cbLight._m0[_2675].z + _762;
        float _2701 = inversesqrt(dot(vec3(_2695, _2696, _2697), vec3(_2695, _2696, _2697)));
        float _2702 = _2701 * _2695;
        float _2703 = _2701 * _2696;
        float _2704 = _2701 * _2697;
        float _2705 = dot(vec3(_680, _681, _682), vec3(cbLight._m0[_2675].xyz));
        float _4621 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
        float _2708 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
        float _2709 = dot(vec3(_680, _681, _682), vec3(_2702, _2703, _2704));
        float _4632 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
        float _2712 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
        float _2713 = dot(vec3(cbLight._m0[_2675].xyz), vec3(_2702, _2703, _2704));
        float _4643 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
        float _2717 = _2694 * _2694;
        float _2721 = ((_2712 * _2712) * (_2717 + (-1.0))) + 1.0;
        float _2728 = exp2(log2(1.0 - (isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0)))) * 5.0);
        float _2735 = 1.0 - _2694;
        float _2745 = (0.5 / (((_2477 * ((_2708 * _2735) + _2694)) + 9.9999999392252902907785028219223e-09) + (((_2477 * _2735) + _2694) * _2708))) * _2708;
        float _4654 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0));
        float _2747 = (isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0))) * (_2717 / ((_2721 * _2721) * 3.141590118408203125));
        float _2748 = isnan(1.0) ? _2216 : (isnan(_2216) ? 1.0 : min(_2216, 1.0));
        _2669 = (((((_2728 * _2499) + _882) * cbLight._m0[_2679].x) * _2747) * _2748) + _2611;
        _2671 = (((((_2728 * _2501) + _884) * cbLight._m0[_2679].y) * _2747) * _2748) + _2612;
        _2673 = (((((_2728 * _2502) + _885) * cbLight._m0[_2679].z) * _2747) * _2748) + _2613;
    }
    float _2779;
    float _2781;
    float _2783;
    if (_2386)
    {
        _2779 = _2669;
        _2781 = _2671;
        _2783 = _2673;
    }
    else
    {
        uint _2790 = _2201 + 3u;
        uint _2794 = _2201 + 11u;
        float _2808 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2790].w)) * _812) * 0.949999988079071044921875);
        float _2809 = _2808 * _2808;
        float _2810 = cbLight._m0[_2790].x + _760;
        float _2811 = cbLight._m0[_2790].y + _761;
        float _2812 = cbLight._m0[_2790].z + _762;
        float _2816 = inversesqrt(dot(vec3(_2810, _2811, _2812), vec3(_2810, _2811, _2812)));
        float _2817 = _2816 * _2810;
        float _2818 = _2816 * _2811;
        float _2819 = _2816 * _2812;
        float _2820 = dot(vec3(_680, _681, _682), vec3(cbLight._m0[_2790].xyz));
        float _4670 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0));
        float _2823 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
        float _2824 = dot(vec3(_680, _681, _682), vec3(_2817, _2818, _2819));
        float _4681 = isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0));
        float _2827 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
        float _2828 = dot(vec3(cbLight._m0[_2790].xyz), vec3(_2817, _2818, _2819));
        float _4692 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0));
        float _2832 = _2809 * _2809;
        float _2836 = ((_2827 * _2827) * (_2832 + (-1.0))) + 1.0;
        float _2843 = exp2(log2(1.0 - (isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0)))) * 5.0);
        float _2850 = 1.0 - _2809;
        float _2860 = (0.5 / (((_2477 * ((_2823 * _2850) + _2809)) + 9.9999999392252902907785028219223e-09) + (((_2477 * _2850) + _2809) * _2823))) * _2823;
        float _4703 = isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0));
        float _2862 = (isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0))) * (_2832 / ((_2836 * _2836) * 3.141590118408203125));
        float _2863 = isnan(1.0) ? _2217 : (isnan(_2217) ? 1.0 : min(_2217, 1.0));
        _2779 = (((((_2843 * _2499) + _882) * cbLight._m0[_2794].x) * _2862) * _2863) + _2669;
        _2781 = (((((_2843 * _2501) + _884) * cbLight._m0[_2794].y) * _2862) * _2863) + _2671;
        _2783 = (((((_2843 * _2502) + _885) * cbLight._m0[_2794].z) * _2862) * _2863) + _2673;
    }
    float _2928;
    float _2930;
    float _2932;
    float _2934;
    float _2936;
    float _2938;
    if (_2199.y == 0u)
    {
        uvec4 _2884 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2885 = _2884.x;
        uint _2896 = uint((float(_2884.y) * floor(float(uint(cbSceneParam._m0[85u].y * _769) / _2885))) + floor(float(uint(cbSceneParam._m0[85u].x * _768) / _2885)));
        float _2906 = (log2(_1977 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2907 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0));
        uint _2910 = uint(isnan(14.0) ? _2907 : (isnan(_2907) ? 14.0 : min(_2907, 14.0)));
        uvec4 _2915 = texelFetch(g_lightClusterGridBuffer, int(((_2910 << 2u) + (_2896 << 6u)) >> 2u));
        uint _2916 = _2915.x;
        uint _2917 = _2884.z;
        float _3030;
        float _3032;
        float _3034;
        float _3036;
        float _3038;
        float _3040;
        if (((((1u << ((_2917 >> 4u) & 15u)) + 4294967295u) & _2916) == 0u) || ((_2917 & 240u) == 0u))
        {
            _3030 = 0.0;
            _3032 = 0.0;
            _3034 = 0.0;
            _3036 = 0.0;
            _3038 = 0.0;
            _3040 = 0.0;
        }
        else
        {
            float _3031;
            float _3033;
            float _3035;
            float _3037;
            float _3039;
            float _3041;
            float _3183 = 0.0;
            float _3184 = 0.0;
            float _3185 = 0.0;
            float _3186 = 0.0;
            float _3187 = 0.0;
            float _3188 = 0.0;
            uint _3189 = 0u;
            uint _3198;
            bool _3199;
            for (;;)
            {
                _3198 = texelFetch(g_lightClassification, int((((_2910 << 5u) + (_2896 << 9u)) + (_3189 << 2u)) >> 2u)).x;
                _3199 = _3198 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3199)
                {
                    frontier_phi_68_pred = _3188;
                    frontier_phi_68_pred_1 = _3187;
                    frontier_phi_68_pred_2 = _3186;
                    frontier_phi_68_pred_3 = _3184;
                    frontier_phi_68_pred_4 = _3183;
                    frontier_phi_68_pred_5 = _3185;
                }
                else
                {
                    float _3307;
                    float _3308;
                    float _3309;
                    float _3310;
                    float _3311;
                    float _3312;
                    uint _3313;
                    _3307 = _3183;
                    _3308 = _3184;
                    _3309 = _3185;
                    _3310 = _3186;
                    _3311 = _3187;
                    _3312 = _3188;
                    _3313 = _3198;
                    float _3239;
                    float _3240;
                    float _3241;
                    float _3242;
                    float _3243;
                    float _3244;
                    for (;;)
                    {
                        uint _3317 = uint(findLSB(_3313)) + (_3189 << 5u);
                        uint _3314 = (_3313 + 4294967295u) & _3313;
                        uint _3319 = _3317 * 48u;
                        vec4 _3333 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3319)).x, texelFetch(g_PointLightRenderingBuffer, int(_3319 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3319 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3319 + 3u)).x));
                        uint _3339 = (_3317 * 48u) + 4u;
                        vec4 _3352 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3339)).x, texelFetch(g_PointLightRenderingBuffer, int(_3339 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3339 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3339 + 3u)).x));
                        uint _3358 = (_3317 * 48u) + 8u;
                        vec3 _3369 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3358)).x, texelFetch(g_PointLightRenderingBuffer, int(_3358 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3358 + 2u)).x));
                        float _3373 = _3333.x - _1975;
                        float _3374 = _3333.y - _1976;
                        float _3375 = _3333.z - _1977;
                        float _3376 = dot(vec3(_3373, _3374, _3375), vec3(_3373, _3374, _3375));
                        float _3379 = inversesqrt(_3376);
                        float _3380 = _3379 * _3373;
                        float _3381 = _3379 * _3374;
                        float _3382 = _3379 * _3375;
                        float _3383 = dot(vec3(_793, _796, _799), vec3(_3380, _3381, _3382));
                        float _3388 = 1.0 - (_3376 * _3333.w);
                        float _4729 = isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0));
                        float _3389 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
                        float _3390 = sqrt(_3376) * _3352.w;
                        float _3393 = 1.39999997615814208984375 / (_3390 + 1.39999997615814208984375);
                        float _3394 = _3393 * _3393;
                        float _3397 = ((1.0 - _3394) * _3383) + _3394;
                        float _3400 = _3390 * _3390;
                        float _3404 = ((isnan(0.0) ? _3397 : (isnan(_3397) ? 0.0 : max(_3397, 0.0))) * _3389) / ((_3400 * 0.699999988079071044921875) + 1.0);
                        float _3408 = (-0.0) - _1975;
                        float _3409 = (-0.0) - _1976;
                        float _3410 = (-0.0) - _1977;
                        float _3414 = inversesqrt(dot(vec3(_3408, _3409, _3410), vec3(_3408, _3409, _3410)));
                        float _3415 = _3414 * _3408;
                        float _3416 = _3414 * _3409;
                        float _3417 = _3414 * _3410;
                        float _3424 = exp2(log2(1.0 / ((_3400 * 3.5) + 5.0)) * 0.25);
                        float _3425 = 1.0 - _913;
                        float _3432 = sqrt(1.0 - ((1.0 - (_3425 * _3425)) * (1.0 - (_3424 * _3424))));
                        float _3433 = _3432 * _3432;
                        float _3434 = _3433 * _3433;
                        float _3435 = _3415 + _3380;
                        float _3436 = _3416 + _3381;
                        float _3437 = _3417 + _3382;
                        float _3441 = inversesqrt(dot(vec3(_3435, _3436, _3437), vec3(_3435, _3436, _3437)));
                        float _3445 = dot(vec3(_793, _796, _799), vec3(_3415, _3416, _3417));
                        float _4745 = isnan(0.0) ? _3445 : (isnan(_3445) ? 0.0 : max(_3445, 0.0));
                        float _3448 = isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0));
                        float _3449 = dot(vec3(_793, _796, _799), vec3(_3441 * _3435, _3441 * _3436, _3441 * _3437));
                        float _4756 = isnan(0.0) ? _3449 : (isnan(_3449) ? 0.0 : max(_3449, 0.0));
                        float _3452 = isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0));
                        float _3456 = ((_3452 * _3452) * (_3434 + (-1.0))) + 1.0;
                        float _3457 = _3393 * _3433;
                        float _3458 = _3457 * _3457;
                        float _3461 = ((1.0 - _3458) * _3383) + _3458;
                        float _4767 = isnan(0.0) ? _3461 : (isnan(_3461) ? 0.0 : max(_3461, 0.0));
                        float _3462 = isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0));
                        float _3463 = 1.0 - _3433;
                        float _3473 = (0.5 / (((_3462 * ((_3448 * _3463) + _3433)) + 9.9999999392252902907785028219223e-09) + (((_3462 * _3463) + _3433) * _3448))) * _3462;
                        float _4778 = isnan(0.0) ? _3473 : (isnan(_3473) ? 0.0 : max(_3473, 0.0));
                        float _3484 = (((_3434 * 3.1415927410125732421875) * (isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0)))) / ((_3456 * _3456) * ((_3400 * 2.1991131305694580078125) + 3.141590118408203125))) * _3389;
                        _3242 = (_3404 * _3352.x) + _3310;
                        _3243 = (_3404 * _3352.y) + _3311;
                        _3244 = (_3404 * _3352.z) + _3312;
                        _3239 = (_3484 * _3369.x) + _3307;
                        _3240 = (_3484 * _3369.y) + _3308;
                        _3241 = (_3484 * _3369.z) + _3309;
                        if (_3314 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3307 = _3239;
                            _3308 = _3240;
                            _3309 = _3241;
                            _3310 = _3242;
                            _3311 = _3243;
                            _3312 = _3244;
                            _3313 = _3314;
                        }
                    }
                    frontier_phi_68_pred = _3244;
                    frontier_phi_68_pred_1 = _3243;
                    frontier_phi_68_pred_2 = _3242;
                    frontier_phi_68_pred_3 = _3240;
                    frontier_phi_68_pred_4 = _3239;
                    frontier_phi_68_pred_5 = _3241;
                }
                _3041 = frontier_phi_68_pred;
                _3039 = frontier_phi_68_pred_1;
                _3037 = frontier_phi_68_pred_2;
                _3033 = frontier_phi_68_pred_3;
                _3031 = frontier_phi_68_pred_4;
                _3035 = frontier_phi_68_pred_5;
                uint _3190 = _3189 + 1u;
                if (_3190 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3183 = _3031;
                    _3184 = _3033;
                    _3185 = _3035;
                    _3186 = _3037;
                    _3187 = _3039;
                    _3188 = _3041;
                    _3189 = _3190;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3030 = _3031;
            _3032 = _3033;
            _3034 = _3035;
            _3036 = _3037;
            _3038 = _3039;
            _3040 = _3041;
        }
        uvec4 _3044 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3045 = _3044.z;
        uint _3047 = (_3045 >> 8u) & 15u;
        float _3151;
        float _3153;
        float _3155;
        float _3157;
        float _3159;
        float _3161;
        if (((4294967295u << _3047) & _2916) == 0u)
        {
            _3151 = _3030;
            _3153 = _3032;
            _3155 = _3034;
            _3157 = _3036;
            _3159 = _3038;
            _3161 = _3040;
        }
        else
        {
            float _3176 = inversesqrt(dot(vec3(_1975, _1976, _1977), vec3(_1975, _1976, _1977)));
            float _3177 = _3176 * _1975;
            float _3178 = _3176 * _1976;
            float _3179 = _3176 * _1977;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_3047 < ((_3045 >> 12u) & 15u))
            {
                float _3152;
                float _3154;
                float _3156;
                float _3158;
                float _3160;
                float _3162;
                float _3290 = _3030;
                float _3291 = _3032;
                float _3292 = _3034;
                float _3293 = _3036;
                float _3294 = _3038;
                float _3295 = _3040;
                uint _3296 = _3047;
                uint _3305;
                bool _3306;
                for (;;)
                {
                    _3305 = texelFetch(g_lightClassification, int((((_2910 << 5u) + (_2896 << 9u)) + (_3296 << 2u)) >> 2u)).x;
                    _3306 = _3305 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3306)
                    {
                        frontier_phi_74_pred = _3292;
                        frontier_phi_74_pred_1 = _3291;
                        frontier_phi_74_pred_2 = _3290;
                        frontier_phi_74_pred_3 = _3295;
                        frontier_phi_74_pred_4 = _3294;
                        frontier_phi_74_pred_5 = _3293;
                    }
                    else
                    {
                        float _3489;
                        float _3490;
                        float _3491;
                        float _3492;
                        float _3493;
                        float _3494;
                        float _3783;
                        float _3784;
                        float _3785;
                        float _3786;
                        float _3787;
                        float _3788;
                        float _3502 = _3290;
                        float _3503 = _3291;
                        float _3504 = _3292;
                        float _3505 = _3293;
                        float _3506 = _3294;
                        float _3507 = _3295;
                        uint _3508 = _3305;
                        uint _3509;
                        vec4 _3534;
                        float _3535;
                        vec4 _3550;
                        vec3 _3562;
                        vec4 _3578;
                        vec4 _3593;
                        float _3639;
                        bool _3640;
                        for (;;)
                        {
                            uint _3519 = ((_3296 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3508));
                            _3509 = (_3508 + 4294967295u) & _3508;
                            uint _3521 = _3519 * 40u;
                            _3534 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3521)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 3u)).x));
                            _3535 = _3534.w;
                            uint _3537 = (_3519 * 40u) + 4u;
                            _3550 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3537)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 3u)).x));
                            uint _3552 = (_3519 * 40u) + 8u;
                            _3562 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3552)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 2u)).x));
                            uint _3565 = (_3519 * 40u) + 16u;
                            _3578 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3565)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 3u)).x));
                            uint _3580 = (_3519 * 40u) + 20u;
                            _3593 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3580)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 3u)).x));
                            uint _3595 = (_3519 * 40u) + 24u;
                            vec4 _3608 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3595)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 3u)).x));
                            uint _3614 = (_3519 * 40u) + 28u;
                            vec4 _3627 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3614)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 3u)).x));
                            _3639 = fma(_1977, _3627.z, fma(_1976, _3627.y, _3627.x * _1975)) + _3627.w;
                            _3640 = !((fma(_1977, _3608.z, fma(_1976, _3608.y, _3608.x * _1975)) + _3608.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3640)
                            {
                                float _3667 = _3534.x - _1975;
                                float _3668 = _3534.y - _1976;
                                float _3669 = _3534.z - _1977;
                                float _3670 = dot(vec3(_3667, _3668, _3669), vec3(_3667, _3668, _3669));
                                float _3673 = inversesqrt(_3670);
                                float _3674 = _3673 * _3667;
                                float _3675 = _3673 * _3668;
                                float _3676 = _3673 * _3669;
                                float _3680 = 1.0 - (_3670 / (_3535 * _3535));
                                float _4789 = isnan(0.0) ? _3680 : (isnan(_3680) ? 0.0 : max(_3680, 0.0));
                                float _3681 = isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0));
                                float _3685 = sqrt(_3670) * _3550.w;
                                float _3687 = 1.39999997615814208984375 / (_3685 + 1.39999997615814208984375);
                                float _3688 = _3687 * _3687;
                                float _3691 = ((1.0 - _3688) * dot(vec3(_3674, _3675, _3676), vec3(_793, _796, _799))) + _3688;
                                float _3694 = _3685 * _3685;
                                float _3698 = (fma(_1977, _3578.z, fma(_1976, _3578.y, _3578.x * _1975)) + _3578.w) / _3639;
                                float _3699 = (fma(_1977, _3593.z, fma(_1976, _3593.y, _3593.x * _1975)) + _3593.w) / _3639;
                                float _3703 = 1.0 - dot(vec2(_3698, _3699), vec2(_3698, _3699));
                                float _4805 = isnan(0.0) ? _3703 : (isnan(_3703) ? 0.0 : max(_3703, 0.0));
                                float _3704 = isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0));
                                float _3705 = _3704 * (((isnan(0.0) ? _3691 : (isnan(_3691) ? 0.0 : max(_3691, 0.0))) * _3681) / ((_3694 * 0.699999988079071044921875) + 1.0));
                                float _3717 = exp2(log2(1.0 / ((_3694 * 3.5) + 5.0)) * 0.25);
                                float _3718 = 1.0 - _913;
                                float _3725 = sqrt(1.0 - ((1.0 - (_3718 * _3718)) * (1.0 - (_3717 * _3717))));
                                float _3726 = _3725 * _3725;
                                float _3727 = _3726 * _3726;
                                float _3728 = _3674 - _3177;
                                float _3729 = _3675 - _3178;
                                float _3730 = _3676 - _3179;
                                float _3734 = inversesqrt(dot(vec3(_3728, _3729, _3730), vec3(_3728, _3729, _3730)));
                                float _3738 = dot(vec3(_793, _796, _799), vec3((-0.0) - _3177, (-0.0) - _3178, (-0.0) - _3179));
                                float _4816 = isnan(0.0) ? _3738 : (isnan(_3738) ? 0.0 : max(_3738, 0.0));
                                float _3741 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
                                float _3742 = dot(vec3(_793, _796, _799), vec3(_3734 * _3728, _3734 * _3729, _3734 * _3730));
                                float _4827 = isnan(0.0) ? _3742 : (isnan(_3742) ? 0.0 : max(_3742, 0.0));
                                float _3745 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
                                float _3749 = ((_3745 * _3745) * (_3727 + (-1.0))) + 1.0;
                                float _3750 = _3687 * _3726;
                                float _3751 = _3750 * _3750;
                                float _3757 = ((1.0 - _3751) * dot(vec3(_793, _796, _799), vec3(_3674, _3675, _3676))) + _3751;
                                float _4838 = isnan(0.0) ? _3757 : (isnan(_3757) ? 0.0 : max(_3757, 0.0));
                                float _3758 = isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0));
                                float _3759 = 1.0 - _3726;
                                float _3769 = (0.5 / (((_3758 * ((_3741 * _3759) + _3726)) + 9.9999999392252902907785028219223e-09) + (((_3758 * _3759) + _3726) * _3741))) * _3758;
                                float _4849 = isnan(0.0) ? _3769 : (isnan(_3769) ? 0.0 : max(_3769, 0.0));
                                float _3779 = (_3704 * _3681) * (((_3727 * 3.1415927410125732421875) * (isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0)))) / ((_3749 * _3749) * ((_3694 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3779 * _3562.z;
                                frontier_phi_80_pred_1 = _3779 * _3562.y;
                                frontier_phi_80_pred_2 = _3779 * _3562.x;
                                frontier_phi_80_pred_3 = _3705 * _3550.z;
                                frontier_phi_80_pred_4 = _3705 * _3550.y;
                                frontier_phi_80_pred_5 = _3705 * _3550.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3785 = frontier_phi_80_pred;
                            _3784 = frontier_phi_80_pred_1;
                            _3783 = frontier_phi_80_pred_2;
                            _3788 = frontier_phi_80_pred_3;
                            _3787 = frontier_phi_80_pred_4;
                            _3786 = frontier_phi_80_pred_5;
                            _3492 = _3786 + _3505;
                            _3493 = _3787 + _3506;
                            _3494 = _3788 + _3507;
                            _3489 = _3783 + _3502;
                            _3490 = _3784 + _3503;
                            _3491 = _3785 + _3504;
                            if (_3509 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3502 = _3489;
                                _3503 = _3490;
                                _3504 = _3491;
                                _3505 = _3492;
                                _3506 = _3493;
                                _3507 = _3494;
                                _3508 = _3509;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3491;
                        frontier_phi_74_pred_1 = _3490;
                        frontier_phi_74_pred_2 = _3489;
                        frontier_phi_74_pred_3 = _3494;
                        frontier_phi_74_pred_4 = _3493;
                        frontier_phi_74_pred_5 = _3492;
                    }
                    _3156 = frontier_phi_74_pred;
                    _3154 = frontier_phi_74_pred_1;
                    _3152 = frontier_phi_74_pred_2;
                    _3162 = frontier_phi_74_pred_3;
                    _3160 = frontier_phi_74_pred_4;
                    _3158 = frontier_phi_74_pred_5;
                    uint _3297 = _3296 + 1u;
                    if (_3297 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3290 = _3152;
                        _3291 = _3154;
                        _3292 = _3156;
                        _3293 = _3158;
                        _3294 = _3160;
                        _3295 = _3162;
                        _3296 = _3297;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _3160;
                frontier_phi_62_63_ladder_1 = _3158;
                frontier_phi_62_63_ladder_2 = _3156;
                frontier_phi_62_63_ladder_3 = _3162;
                frontier_phi_62_63_ladder_4 = _3154;
                frontier_phi_62_63_ladder_5 = _3152;
            }
            else
            {
                frontier_phi_62_63_ladder = _3038;
                frontier_phi_62_63_ladder_1 = _3036;
                frontier_phi_62_63_ladder_2 = _3034;
                frontier_phi_62_63_ladder_3 = _3040;
                frontier_phi_62_63_ladder_4 = _3032;
                frontier_phi_62_63_ladder_5 = _3030;
            }
            _3151 = frontier_phi_62_63_ladder_5;
            _3153 = frontier_phi_62_63_ladder_4;
            _3155 = frontier_phi_62_63_ladder_2;
            _3157 = frontier_phi_62_63_ladder_1;
            _3159 = frontier_phi_62_63_ladder;
            _3161 = frontier_phi_62_63_ladder_3;
        }
        float _3166 = isnan(1.0) ? _897 : (isnan(_897) ? 1.0 : min(_897, 1.0));
        _2928 = (_3166 * _3157) + _2441;
        _2930 = (_3166 * _3159) + _2443;
        _2932 = (_3166 * _3161) + _2445;
        _2934 = ((_3151 * _882) * _3166) + _2779;
        _2936 = ((_3153 * _884) * _3166) + _2781;
        _2938 = ((_3155 * _885) * _3166) + _2783;
    }
    else
    {
        _2928 = _2441;
        _2930 = _2443;
        _2932 = _2445;
        _2934 = _2779;
        _2936 = _2781;
        _2938 = _2783;
    }
    uint _2944 = _826 + uint(cbMatDynParam._m0[0u].w);
    float _2952 = ((cbMtdParam._m0[11u].x * cbMtdParam._m0[22u].z) * _624.x) * cbInstanceData._m0[_2944].x;
    float _2955 = ((cbMtdParam._m0[11u].y * cbMtdParam._m0[22u].z) * _624.y) * cbInstanceData._m0[_2944].y;
    float _2958 = ((cbMtdParam._m0[11u].z * cbMtdParam._m0[22u].z) * _624.z) * cbInstanceData._m0[_2944].z;
    float _4865 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _4876 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _4887 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _2975 = (((isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0))) * (_2928 + ((isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0))) * _897))) + ((_2934 + ((isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0))) * _1707)) * cbPerFrame._m0[3u].x)) + _2952;
    float _2977 = (_2955 + ((_2936 + ((isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0))) * _1707)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0))) * (_2930 + ((isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0))) * _897)));
    float _2979 = (_2958 + ((_2938 + ((isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0))) * _1707)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0))) * (_2932 + ((isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0))) * _897)));
    float _4913 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2992 = isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0));
    uint _2993 = _825 + 6u;
    float _3001 = _768 / cbSceneParam._m0[86u].x;
    float _3002 = _769 / cbSceneParam._m0[86u].y;
    vec4 _3016 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3001, _3002, (log2((isnan(cbSceneParam._m0[77u].w) ? _703 : (isnan(_703) ? cbSceneParam._m0[77u].w : min(_703, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3018 = _3016.x;
    float _3019 = _3016.y;
    float _3020 = _3016.z;
    float _3021 = _3016.w;
    float _3092;
    float _3094;
    float _3096;
    float _3098;
    if (_703 > cbSceneParam._m0[78u].w)
    {
        float _3055 = isnan(_703) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _703 : min(cbSceneParam._m0[80u].w, _703));
        float _3056 = _3055 / _703;
        float _3067 = _3056 * _753;
        float _3068 = _754 * _3056;
        float _3069 = (-0.0) - _3068;
        float _3070 = _3056 * _755;
        float _3072 = (cbSceneParam._m0[77u].w * _3069) / _3055;
        float _3073 = _3072 + cbSceneParam._m0[79u].w;
        float _3074 = cbSceneParam._m0[79u].w - _3068;
        float _3080 = sqrt(((_3067 * _3067) + (_3068 * _3068)) + (_3070 * _3070));
        float _3083 = (1.0 - (cbSceneParam._m0[77u].w / _3055)) * _3080;
        float _3088 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3090 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3252;
        if (abs((_3069 - _3072) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3252 = ((((_3073 > 0.0) ? exp2(_3088 * _3073) : (2.0 - exp2(_3090 * _3073))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3083;
        }
        else
        {
            float _3212 = 1.0 / cbSceneParam._m0[80u].x;
            float _3213 = isnan(_3074) ? _3073 : (isnan(_3073) ? _3074 : max(_3073, _3074));
            float _3214 = isnan(_3074) ? _3073 : (isnan(_3073) ? _3074 : min(_3073, _3074));
            float _3223 = isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : min(_3213, 0.0));
            float _3224 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : min(_3214, 0.0));
            _3252 = ((abs(_3080 / _3069) * cbSceneParam._m0[80u].y) * ((((_3223 - _3224) * 2.0) - ((exp2(_3088 * (isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0)))) - exp2(_3088 * (isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0))))) * _3212)) - ((exp2(_3090 * _3223) - exp2(_3090 * _3224)) * _3212))) + (_3083 * cbSceneParam._m0[80u].z);
        }
        vec4 _3254 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3001, _3002, 1.0), 0.0);
        float _3263 = exp2((_3252 * (-1.44269502162933349609375)) * (1.0 - _3254.w));
        float _3264 = log2(_3263);
        float _3280 = log2(_3021);
        _3092 = (exp2(_3280 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3264 * cbSceneParam._m0[78u].x)) * _3254.x) / cbSceneParam._m0[78u].x)) + _3018;
        _3094 = (exp2(_3280 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3264 * cbSceneParam._m0[78u].y)) * _3254.y) / cbSceneParam._m0[78u].y)) + _3019;
        _3096 = (exp2(_3280 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3264 * cbSceneParam._m0[78u].z)) * _3254.z) / cbSceneParam._m0[78u].z)) + _3020;
        _3098 = _3263 * _3021;
    }
    else
    {
        _3092 = _3018;
        _3094 = _3019;
        _3096 = _3020;
        _3098 = _3021;
    }
    float _3110 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3111 = _3110 == 3.0;
    float _3112 = log2(_3098);
    float _3116 = exp2(_3112 * cbSceneParam._m0[78u].x);
    float _3117 = exp2(_3112 * cbSceneParam._m0[78u].y);
    float _3118 = exp2(_3112 * cbSceneParam._m0[78u].z);
    float _3119 = _3116 * (isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0)));
    float _3120 = _3117 * (isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0)));
    float _3121 = _3118 * (isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0)));
    float _3130 = (_3110 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3130 * (_3111 ? _3119 : (_3119 + (cbSceneParam._m0[72u].w * _3092)));
    SV_Target.y = _3130 * (_3111 ? _3120 : (_3120 + (cbSceneParam._m0[72u].w * _3094)));
    SV_Target.z = _3130 * (_3111 ? _3121 : (_3121 + (cbSceneParam._m0[72u].w * _3096)));
    SV_Target.w = cbInstanceData._m0[_2993].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2952) * _2992) * _3116) * _3130;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2955) * _2992) * _3117) * _3130;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2958) * _2992) * _3118) * _3130;
    SV_Target_1.w = cbInstanceData._m0[_2993].w;
}


