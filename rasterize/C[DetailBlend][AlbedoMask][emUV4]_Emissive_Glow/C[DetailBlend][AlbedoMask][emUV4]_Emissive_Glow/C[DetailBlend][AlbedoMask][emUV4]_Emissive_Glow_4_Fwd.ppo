#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 11) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 12) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1265;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _224 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _231 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _232 = _231 * NORMAL.x;
    float _233 = _231 * NORMAL.y;
    float _234 = _231 * NORMAL.z;
    float _238 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _246;
    float _247;
    float _248;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _246 = (-0.0) - _232;
        _247 = (-0.0) - _233;
        _248 = (-0.0) - _234;
    }
    else
    {
        _246 = _232;
        _247 = _233;
        _248 = _234;
    }
    vec4 _263 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _273 = log2(0.0);
    float _275 = exp2(_273 * cbMtdParam._m0[21u].y);
    float _276 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _277 = isnan(1.0) ? _276 : (isnan(_276) ? 1.0 : min(_276, 1.0));
    vec4 _291 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _295 = _291.z;
    float _296 = _291.w;
    float _304 = exp2(log2(_295 * cbMtdParam._m0[21u].w) * cbMtdParam._m0[20u].y);
    float _305 = isnan(0.0) ? _304 : (isnan(_304) ? 0.0 : max(_304, 0.0));
    float _306 = isnan(1.0) ? _305 : (isnan(_305) ? 1.0 : min(_305, 1.0));
    vec4 _319 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    vec4 _344 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _354 = cbMtdParam._m0[9u].x * _344.x;
    float _355 = cbMtdParam._m0[9u].y * _344.y;
    float _356 = cbMtdParam._m0[9u].z * _344.z;
    float _363 = (((cbMtdParam._m0[10u].x * _319.x) - _354) * _306) + _354;
    float _364 = (((cbMtdParam._m0[10u].y * _319.y) - _355) * _306) + _355;
    float _365 = (((cbMtdParam._m0[10u].z * _319.z) - _356) * _306) + _356;
    float _372 = exp2(log2(_296) * cbMtdParam._m0[22u].y);
    vec4 _385 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _405 = (((cbMtdParam._m0[12u].x * _385.x) - _363) * _372) + _363;
    float _406 = (((cbMtdParam._m0[12u].y * _385.y) - _364) * _372) + _364;
    float _407 = (((cbMtdParam._m0[12u].z * _385.z) - _365) * _372) + _365;
    vec4 _419 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _443 = (_263.x * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].x * _419.x) - _405) * _277) + _405);
    float _445 = (_263.y * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].y * _419.y) - _406) * _277) + _406);
    float _447 = (_263.z * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].z * _419.z) - _407) * _277) + _407);
    float _452 = exp2(log2(1.0 - _296) * 0.00999999977648258209228515625);
    float _470 = ((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_11, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x - cbMtdParam._m0[22u].w) * _452) + cbMtdParam._m0[22u].w;
    float _489 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w)).x - _470) + cbMtdParam._m0[21u].z) * _372) + _470;
    float _511 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w)).x - _489) + cbMtdParam._m0[23u].w) * _277) + _489;
    vec4 _524 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _542 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _544 = _542.x;
    float _545 = _542.y;
    float _548 = cbMtdParam._m0[20u].x + _542.z;
    float _551 = (((cbMtdParam._m0[21u].x + _524.z) - _548) * _452) + _548;
    vec4 _564 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _576 = (_295 * 2.0) * ((((_564.z - _551) + cbMtdParam._m0[23u].y) * _372) + _551);
    vec4 _589 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _598 = (((_589.z - _576) + cbMtdParam._m0[22u].x) * _277) + _576;
    vec4 _617 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _632 = ((_524.x - _544) * _452) + _544;
    float _633 = ((_524.y - _545) * _452) + _545;
    float _638 = ((_564.x - _632) * _372) + _632;
    float _639 = ((_564.y - _633) * _372) + _633;
    float _648 = ((((_589.x - _638) * _277) + _638) * 2.0) + (-1.0);
    float _649 = ((((_589.y - _639) * _277) + _639) * 2.0) + (-1.0);
    float _650 = dot(vec2(_648, _649), vec2(_648, _649));
    float _3658 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _655 = sqrt(1.0 - (isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0))));
    float _658 = (cbMtdParam._m0[23u].x * ((_291.x * 2.0) + (-1.0))) + _648;
    float _659 = (cbMtdParam._m0[23u].x * ((_291.y * 2.0) + (-1.0))) + _649;
    float _662 = fma(_655, _246, fma(_659, _238 * TANGENT.x, (_224 * _217) * _658));
    float _665 = fma(_655, _247, fma(_659, _238 * TANGENT.y, (_224 * _218) * _658));
    float _668 = fma(_655, _248, fma(_659, _238 * TANGENT.z, (_224 * _219) * _658));
    float _672 = inversesqrt(dot(vec3(_662, _665, _668), vec3(_662, _665, _668)));
    float _673 = _672 * _662;
    float _674 = _672 * _665;
    float _675 = _672 * _668;
    float _3669 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _676 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
    float _3680 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _3691 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _3702 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _3713 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _680 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
    float _696 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _736 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _746 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _736);
    float _747 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _736);
    float _748 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _736);
    float _752 = inversesqrt(dot(vec3(_746, _747, _748), vec3(_746, _747, _748)));
    float _753 = _746 * _752;
    float _754 = _747 * _752;
    float _755 = _748 * _752;
    float _761 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _762 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _764 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _766 = _764.w;
    float _786 = fma(_675, cbSceneParam._m0[5u].z, fma(_674, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _673));
    float _789 = fma(_675, cbSceneParam._m0[6u].z, fma(_674, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _673));
    float _792 = fma(_675, cbSceneParam._m0[7u].z, fma(_674, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _673));
    vec4 _794 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _805 = (((_794.y - _676) + (_794.w * _676)) * cbMtdParam._m0[3u].x) + _676;
    uint _818 = uint(roundEven(NORMAL.w)) * 13u;
    uint _819 = _818 + 9u;
    uint _820 = _819 + uint(cbMatDynParam._m0[0u].w);
    float _826 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0)))) * cbInstanceData._m0[_820].x;
    float _827 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0)))) * cbInstanceData._m0[_820].y;
    float _828 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0)))) * cbInstanceData._m0[_820].z;
    float _3724 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
    float _829 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
    float _3735 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _830 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
    float _3746 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _831 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
    vec4 _832 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _837 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _848 = (((_837.x - _680) + (_837.w * _680)) * cbMtdParam._m0[3u].x) + _680;
    float _861 = (cbMtdParam._m0[3u].x * (((_829 * _766) - _829) + _832.x)) + _829;
    float _862 = (cbMtdParam._m0[3u].x * (((_830 * _766) - _830) + _832.y)) + _830;
    float _863 = (cbMtdParam._m0[3u].x * (((_831 * _766) - _831) + _832.z)) + _831;
    float _864 = 1.0 - _848;
    float _865 = _864 * _861;
    float _866 = _864 * _862;
    float _867 = _864 * _863;
    float _872 = (_861 + (-0.039999999105930328369140625)) * _848;
    float _873 = (_862 + (-0.039999999105930328369140625)) * _848;
    float _874 = (_863 + (-0.039999999105930328369140625)) * _848;
    float _875 = _872 + 0.039999999105930328369140625;
    float _877 = _873 + 0.039999999105930328369140625;
    float _878 = _874 + 0.039999999105930328369140625;
    vec4 _887 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _761, cbSceneParam._m0[86u].y * _762));
    float _890 = _887.x * TEXCOORD_4.z;
    float _891 = dot(vec3(_673, _674, _675), vec3(_753, _754, _755));
    float _894 = _891 * 2.0;
    float _898 = (_894 * _673) - _753;
    float _899 = (_894 * _674) - _754;
    float _900 = (_894 * _675) - _755;
    float _904 = abs(dot(vec3(_753, _754, _755), vec3(_673, _674, _675)));
    float _3757 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _906 = sqrt(_805);
    float _919 = exp2((_906 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_906 * 3.0));
    float _925 = (1.0 - _919) * ((_906 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _926 = _919 * _906;
    float _954 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _958 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _962 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1264;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _989 = fma(_962, cbModelParam._m0[26u].z, fma(_958, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _954));
        float _993 = fma(_962, cbModelParam._m0[27u].z, fma(_958, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _954));
        float _997 = fma(_962, cbModelParam._m0[28u].z, fma(_958, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _954));
        float _1022 = _954 + _673;
        float _1023 = _958 + _674;
        float _1024 = _962 + _675;
        float _1034 = fma(_1024, cbModelParam._m0[26u].z, fma(_1023, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1022)) - _989;
        float _1035 = fma(_1024, cbModelParam._m0[27u].z, fma(_1023, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1022)) - _993;
        float _1036 = fma(_1024, cbModelParam._m0[28u].z, fma(_1023, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1022)) - _997;
        float _1040 = inversesqrt(dot(vec3(_1034, _1035, _1036), vec3(_1034, _1035, _1036)));
        float _1053 = ((_1040 * _1034) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_989 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1054 = ((_1040 * _1035) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_993 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1055 = ((_1040 * _1036) / cbModelParam._m0[34u].z) + ((((((_997 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1058 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1053, _1054, _1055), 0.0);
        vec4 _1065 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1053, _1054, _1055), 0.0);
        vec4 _1072 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1053, _1054, _1055), 0.0);
        vec4 _1079 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1053, _1054, _1055), 0.0);
        float _1092 = exp2((_1058.w + (-0.5)) * 20.0) * 2.0;
        float _1093 = _1092 * (_1058.x + (-0.5));
        float _1094 = _1092 * (_1058.y + (-0.5));
        float _1095 = _1092 * (_1058.z + (-0.5));
        float _1102 = exp2((_1065.w + (-0.5)) * 20.0) * 2.0;
        float _1103 = _1102 * (_1065.x + (-0.5));
        float _1104 = _1102 * (_1065.y + (-0.5));
        float _1105 = _1102 * (_1065.z + (-0.5));
        float _1112 = exp2((_1072.w + (-0.5)) * 20.0) * 2.0;
        float _1113 = _1112 * (_1072.x + (-0.5));
        float _1114 = _1112 * (_1072.y + (-0.5));
        float _1115 = _1112 * (_1072.z + (-0.5));
        float _1122 = exp2((_1079.w + (-0.5)) * 20.0) * 2.0;
        float _1123 = _1122 * (_1079.x + (-0.5));
        float _1124 = _1122 * (_1079.y + (-0.5));
        float _1125 = _1122 * (_1079.z + (-0.5));
        float _1126 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1127 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1128 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1129 = _1093 * 0.5;
        float _1130 = _1103 * 0.5;
        float _1131 = _1113 * 0.5;
        float _1132 = dot(vec3(_1129, _1130, _1131), vec3(_1129, _1130, _1131));
        float _1137 = (_1132 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1132);
        float _1146 = (dot(vec3(_673, _674, _675), vec3(_1137 * _1129, _1137 * _1130, _1137 * _1131)) + 1.0) * 0.5;
        float _3783 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1156 = sqrt(((_1130 * _1130) + (_1129 * _1129)) + (_1131 * _1131)) / (_1126 + 9.9999997473787516355514526367188e-06);
        float _3794 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
        float _1158 = _1157 * 2.0;
        float _1162 = (1.0 - _1157) / (_1157 + 1.0);
        float _3805 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1163 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
        float _1172 = ((((1.0 - _1163) * (_1158 + 2.0)) * exp2(log2(isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0))) * (_1158 + 1.0))) + _1163) * _1126;
        float _1173 = _1094 * 0.5;
        float _1174 = _1104 * 0.5;
        float _1175 = _1114 * 0.5;
        float _1176 = dot(vec3(_1173, _1174, _1175), vec3(_1173, _1174, _1175));
        float _1181 = (_1176 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1176);
        float _1189 = (dot(vec3(_673, _674, _675), vec3(_1181 * _1173, _1181 * _1174, _1181 * _1175)) + 1.0) * 0.5;
        float _3816 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1198 = sqrt(((_1174 * _1174) + (_1173 * _1173)) + (_1175 * _1175)) / (_1127 + 9.9999997473787516355514526367188e-06);
        float _3827 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _1200 = _1199 * 2.0;
        float _1204 = (1.0 - _1199) / (_1199 + 1.0);
        float _3838 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1205 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
        float _1214 = ((((1.0 - _1205) * (_1200 + 2.0)) * exp2(log2(isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) * (_1200 + 1.0))) + _1205) * _1127;
        float _1215 = _1095 * 0.5;
        float _1216 = _1105 * 0.5;
        float _1217 = _1115 * 0.5;
        float _1218 = dot(vec3(_1215, _1216, _1217), vec3(_1215, _1216, _1217));
        float _1223 = (_1218 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1218);
        float _1231 = (dot(vec3(_673, _674, _675), vec3(_1223 * _1215, _1223 * _1216, _1223 * _1217)) + 1.0) * 0.5;
        float _3849 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1240 = sqrt(((_1216 * _1216) + (_1215 * _1215)) + (_1217 * _1217)) / (_1128 + 9.9999997473787516355514526367188e-06);
        float _3860 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1241 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1242 = _1241 * 2.0;
        float _1246 = (1.0 - _1241) / (_1241 + 1.0);
        float _3871 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _1256 = ((((1.0 - _1247) * (_1242 + 2.0)) * exp2(log2(isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) * (_1242 + 1.0))) + _1247) * _1128;
        _1264 = _1095;
        _1266 = _1094;
        _1267 = _1093;
        _1268 = _1105;
        _1269 = _1104;
        _1270 = _1103;
        _1271 = _1115;
        _1272 = _1114;
        _1273 = _1113;
        _1274 = _1128;
        _1275 = _1127;
        _1276 = _1126;
        _1277 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0)));
        _1278 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0)));
        _1279 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0)));
    }
    else
    {
        _1264 = _1265;
        _1266 = _1265;
        _1267 = _1265;
        _1268 = _1265;
        _1269 = _1265;
        _1270 = _1265;
        _1271 = _1265;
        _1272 = _1265;
        _1273 = _1265;
        _1274 = _1265;
        _1275 = _1265;
        _1276 = _1265;
        _1277 = 0.0;
        _1278 = 0.0;
        _1279 = 0.0;
    }
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1305 = fma(_962, cbModelParam._m0[30u].z, fma(_958, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _954));
        float _1309 = fma(_962, cbModelParam._m0[31u].z, fma(_958, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _954));
        float _1313 = fma(_962, cbModelParam._m0[32u].z, fma(_958, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _954));
        float _1336 = _954 + _673;
        float _1337 = _958 + _674;
        float _1338 = _962 + _675;
        float _1348 = fma(_1338, cbModelParam._m0[30u].z, fma(_1337, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1336)) - _1305;
        float _1349 = fma(_1338, cbModelParam._m0[31u].z, fma(_1337, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1336)) - _1309;
        float _1350 = fma(_1338, cbModelParam._m0[32u].z, fma(_1337, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1336)) - _1313;
        float _1354 = inversesqrt(dot(vec3(_1348, _1349, _1350), vec3(_1348, _1349, _1350)));
        float _1367 = ((_1354 * _1348) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1305 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1368 = ((_1354 * _1349) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1309 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1369 = ((_1354 * _1350) / cbModelParam._m0[35u].z) + ((((((_1313 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1371 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1367, _1368, _1369), 0.0);
        vec4 _1378 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1367, _1368, _1369), 0.0);
        vec4 _1385 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1367, _1368, _1369), 0.0);
        vec4 _1392 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1367, _1368, _1369), 0.0);
        float _1404 = exp2((_1371.w + (-0.5)) * 20.0) * 2.0;
        float _1405 = _1404 * (_1371.x + (-0.5));
        float _1406 = _1404 * (_1371.y + (-0.5));
        float _1407 = _1404 * (_1371.z + (-0.5));
        float _1414 = exp2((_1378.w + (-0.5)) * 20.0) * 2.0;
        float _1415 = _1414 * (_1378.x + (-0.5));
        float _1416 = _1414 * (_1378.y + (-0.5));
        float _1417 = _1414 * (_1378.z + (-0.5));
        float _1424 = exp2((_1385.w + (-0.5)) * 20.0) * 2.0;
        float _1425 = _1424 * (_1385.x + (-0.5));
        float _1426 = _1424 * (_1385.y + (-0.5));
        float _1427 = _1424 * (_1385.z + (-0.5));
        float _1434 = exp2((_1392.w + (-0.5)) * 20.0) * 2.0;
        float _1435 = _1434 * (_1392.x + (-0.5));
        float _1436 = _1434 * (_1392.y + (-0.5));
        float _1437 = _1434 * (_1392.z + (-0.5));
        float _1438 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1439 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1440 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1441 = _1405 * 0.5;
        float _1442 = _1415 * 0.5;
        float _1443 = _1425 * 0.5;
        float _1444 = dot(vec3(_1441, _1442, _1443), vec3(_1441, _1442, _1443));
        float _1449 = (_1444 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1444);
        float _1457 = (dot(vec3(_673, _674, _675), vec3(_1449 * _1441, _1449 * _1442, _1449 * _1443)) + 1.0) * 0.5;
        float _3912 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1466 = sqrt(((_1442 * _1442) + (_1441 * _1441)) + (_1443 * _1443)) / (_1438 + 9.9999997473787516355514526367188e-06);
        float _3923 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1467 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _1468 = _1467 * 2.0;
        float _1472 = (1.0 - _1467) / (_1467 + 1.0);
        float _3934 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1473 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _1482 = ((((1.0 - _1473) * (_1468 + 2.0)) * exp2(log2(isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0))) * (_1468 + 1.0))) + _1473) * _1438;
        float _1483 = _1406 * 0.5;
        float _1484 = _1416 * 0.5;
        float _1485 = _1426 * 0.5;
        float _1486 = dot(vec3(_1483, _1484, _1485), vec3(_1483, _1484, _1485));
        float _1491 = (_1486 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1486);
        float _1499 = (dot(vec3(_673, _674, _675), vec3(_1491 * _1483, _1491 * _1484, _1491 * _1485)) + 1.0) * 0.5;
        float _3945 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1508 = sqrt(((_1484 * _1484) + (_1483 * _1483)) + (_1485 * _1485)) / (_1439 + 9.9999997473787516355514526367188e-06);
        float _3956 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1509 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1510 = _1509 * 2.0;
        float _1514 = (1.0 - _1509) / (_1509 + 1.0);
        float _3967 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1515 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _1524 = ((((1.0 - _1515) * (_1510 + 2.0)) * exp2(log2(isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) * (_1510 + 1.0))) + _1515) * _1439;
        float _1525 = _1407 * 0.5;
        float _1526 = _1417 * 0.5;
        float _1527 = _1427 * 0.5;
        float _1528 = dot(vec3(_1525, _1526, _1527), vec3(_1525, _1526, _1527));
        float _1533 = (_1528 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1528);
        float _1541 = (dot(vec3(_673, _674, _675), vec3(_1533 * _1525, _1533 * _1526, _1533 * _1527)) + 1.0) * 0.5;
        float _3978 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1550 = sqrt(((_1526 * _1526) + (_1525 * _1525)) + (_1527 * _1527)) / (_1440 + 9.9999997473787516355514526367188e-06);
        float _3989 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1551 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _1552 = _1551 * 2.0;
        float _1556 = (1.0 - _1551) / (_1551 + 1.0);
        float _4000 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1557 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _1566 = ((((1.0 - _1557) * (_1552 + 2.0)) * exp2(log2(isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) * (_1552 + 1.0))) + _1557) * _1440;
        _1574 = _1407;
        _1575 = _1406;
        _1576 = _1405;
        _1577 = _1417;
        _1578 = _1416;
        _1579 = _1415;
        _1580 = _1427;
        _1581 = _1426;
        _1582 = _1425;
        _1583 = _1440;
        _1584 = _1439;
        _1585 = _1438;
        _1586 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0)));
        _1587 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0)));
        _1588 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0)));
    }
    else
    {
        _1574 = _1265;
        _1575 = _1265;
        _1576 = _1265;
        _1577 = _1265;
        _1578 = _1265;
        _1579 = _1265;
        _1580 = _1265;
        _1581 = _1265;
        _1582 = _1265;
        _1583 = _1265;
        _1584 = _1265;
        _1585 = _1265;
        _1586 = 0.0;
        _1587 = 0.0;
        _1588 = 0.0;
    }
    float _1598 = (cbModelParam._m0[1u].x * (_1586 - _1277)) + _1277;
    float _1599 = (cbModelParam._m0[1u].x * (_1587 - _1278)) + _1278;
    float _1600 = (cbModelParam._m0[1u].x * (_1588 - _1279)) + _1279;
    float _1621 = fma(_1600, cbSceneParam._m0[89u].z, fma(_1599, cbSceneParam._m0[89u].y, _1598 * cbSceneParam._m0[89u].x));
    float _1624 = fma(_1600, cbSceneParam._m0[90u].z, fma(_1599, cbSceneParam._m0[90u].y, _1598 * cbSceneParam._m0[90u].x));
    float _1627 = fma(_1600, cbSceneParam._m0[91u].z, fma(_1599, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1598));
    float _1642 = _898 * 0.5;
    float _1643 = _899 * 0.5;
    float _1644 = _900 * 0.5;
    float _1645 = dot(vec4(_1642, _1643, _1644, 1.0), vec4(_1576, _1579, _1582, _1585));
    float _1648 = dot(vec4(_1642, _1643, _1644, 1.0), vec4(_1575, _1578, _1581, _1584));
    float _1651 = dot(vec4(_1642, _1643, _1644, 1.0), vec4(_1574, _1577, _1580, _1583));
    float _1685;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1658 = dot(vec4(_1642, _1643, _1644, 1.0), vec4(_1264, _1268, _1271, _1274));
        float _1662 = dot(vec4(_1642, _1643, _1644, 1.0), vec4(_1266, _1269, _1272, _1275));
        float _1666 = dot(vec4(_1642, _1643, _1644, 1.0), vec4(_1267, _1270, _1273, _1276));
        float _1673 = dot(vec4(cbModelParam._m0[39u]), vec4(_1642, _1643, _1644, 1.0));
        _1685 = dot(vec3(isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0)), isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0)), isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1673) ? 0.0 : (isnan(0.0) ? _1673 : max(0.0, _1673))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1685 = 1.0;
    }
    float _1696;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1687 = dot(vec4(cbModelParam._m0[40u]), vec4(_1642, _1643, _1644, 1.0));
        _1696 = dot(vec3(isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0)), isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0)), isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1687) ? 0.0 : (isnan(0.0) ? _1687 : max(0.0, _1687))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1696 = 1.0;
    }
    float _1700 = (_1696 * cbModelParam._m0[1u].x) + (_1685 * (1.0 - cbModelParam._m0[1u].x));
    float _1710 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _805);
    float _1711 = isnan(_1710) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1710 : min(cbModelParam._m0[25u].z, _1710));
    float _1791;
    float _1793;
    float _1795;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1758 = fma(_962, cbModelParam._m0[13u].z, fma(_958, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _954)) + cbModelParam._m0[13u].w;
        float _1762 = fma(_962, cbModelParam._m0[14u].z, fma(_958, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _954)) + cbModelParam._m0[14u].w;
        float _1766 = fma(_962, cbModelParam._m0[15u].z, fma(_958, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _954)) + cbModelParam._m0[15u].w;
        float _1769 = fma(_900, cbModelParam._m0[13u].z, fma(_899, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _898));
        float _1772 = fma(_900, cbModelParam._m0[14u].z, fma(_899, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _898));
        float _1775 = fma(_900, cbModelParam._m0[15u].z, fma(_899, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _898));
        float _1803;
        if (_1769 > 0.0)
        {
            _1803 = abs((1.0 - _1758) / _1769);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1769 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1758 + 1.0) / _1769);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1803 = frontier_phi_16_14_ladder;
        }
        float _2007;
        if (_1772 > 0.0)
        {
            _2007 = abs((1.0 - _1762) / _1772);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1772 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1762 + 1.0) / _1772);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2007 = frontier_phi_25_21_ladder;
        }
        float _2261;
        if (_1775 > 0.0)
        {
            _2261 = abs((1.0 - _1766) / _1775);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1775 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1766 + 1.0) / _1775);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2261 = frontier_phi_37_32_ladder;
        }
        float _2263 = isnan(_2007) ? _1803 : (isnan(_1803) ? _2007 : min(_1803, _2007));
        float _2264 = isnan(_2261) ? _2263 : (isnan(_2263) ? _2261 : min(_2263, _2261));
        float _2268 = (_2264 * _1769) + _1758;
        float _2269 = (_2264 * _1772) + _1762;
        float _2270 = (_2264 * _1775) + _1766;
        float _2271 = _2264 * 9.9999997473787516355514526367188e-05;
        float _2273 = (-1.0) - _2271;
        float _2275 = _2271 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2270 > _2275) || ((_2270 < _2273) || ((_2269 > _2275) || ((_2269 < _2273) || ((_2268 < _2273) || (_2268 > _2275))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2398 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2270, cbModelParam._m0[9u].z, fma(_2269, cbModelParam._m0[9u].y, _2268 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2270, cbModelParam._m0[10u].z, fma(_2269, cbModelParam._m0[10u].y, _2268 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2270, cbModelParam._m0[11u].z, fma(_2269, cbModelParam._m0[11u].y, _2268 * cbModelParam._m0[11u].x))), _1711);
            frontier_phi_15_37_ladder = _2398.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2398.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2398.x * cbModelParam._m0[1u].y;
        }
        _1791 = frontier_phi_15_37_ladder_2;
        _1793 = frontier_phi_15_37_ladder_1;
        _1795 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1779 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_898, _899, _900), _1711);
        _1791 = _1779.x * cbModelParam._m0[1u].y;
        _1793 = _1779.y * cbModelParam._m0[1u].y;
        _1795 = _1779.z * cbModelParam._m0[1u].y;
    }
    float _1799 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _805);
    float _1800 = isnan(_1799) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1799 : min(cbModelParam._m0[25u].w, _1799));
    float _1891;
    float _1893;
    float _1895;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1855 = fma(_962, cbModelParam._m0[21u].z, fma(_958, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _954)) + cbModelParam._m0[21u].w;
        float _1859 = fma(_962, cbModelParam._m0[22u].z, fma(_958, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _954)) + cbModelParam._m0[22u].w;
        float _1863 = fma(_962, cbModelParam._m0[23u].z, fma(_958, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _954)) + cbModelParam._m0[23u].w;
        float _1866 = fma(_900, cbModelParam._m0[21u].z, fma(_899, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _898));
        float _1869 = fma(_900, cbModelParam._m0[22u].z, fma(_899, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _898));
        float _1872 = fma(_900, cbModelParam._m0[23u].z, fma(_899, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _898));
        float _2012;
        if (_1866 > 0.0)
        {
            _2012 = abs((1.0 - _1855) / _1866);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1866 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1855 + 1.0) / _1866);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2012 = frontier_phi_27_23_ladder;
        }
        float _2288;
        if (_1869 > 0.0)
        {
            _2288 = abs((1.0 - _1859) / _1869);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1869 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1859 + 1.0) / _1869);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2288 = frontier_phi_39_34_ladder;
        }
        float _2501;
        if (_1872 > 0.0)
        {
            _2501 = abs((1.0 - _1863) / _1872);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1872 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1863 + 1.0) / _1872);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2501 = frontier_phi_48_45_ladder;
        }
        float _2503 = isnan(_2288) ? _2012 : (isnan(_2012) ? _2288 : min(_2012, _2288));
        float _2504 = isnan(_2501) ? _2503 : (isnan(_2503) ? _2501 : min(_2503, _2501));
        float _2508 = (_2504 * _1866) + _1855;
        float _2509 = (_2504 * _1869) + _1859;
        float _2510 = (_2504 * _1872) + _1863;
        float _2511 = _2504 * 9.9999997473787516355514526367188e-05;
        float _2512 = (-1.0) - _2511;
        float _2514 = _2511 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2510 > _2514) || ((_2510 < _2512) || ((_2509 > _2514) || ((_2509 < _2512) || ((_2508 < _2512) || (_2508 > _2514))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2743 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2510, cbModelParam._m0[17u].z, fma(_2509, cbModelParam._m0[17u].y, _2508 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2510, cbModelParam._m0[18u].z, fma(_2509, cbModelParam._m0[18u].y, _2508 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2510, cbModelParam._m0[19u].z, fma(_2509, cbModelParam._m0[19u].y, _2508 * cbModelParam._m0[19u].x))), _1800);
            frontier_phi_24_48_ladder = _2743.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2743.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2743.x * cbModelParam._m0[1u].z;
        }
        _1891 = frontier_phi_24_48_ladder_2;
        _1893 = frontier_phi_24_48_ladder_1;
        _1895 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1875 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_898, _899, _900), _1800);
        _1891 = _1875.x * cbModelParam._m0[1u].z;
        _1893 = _1875.y * cbModelParam._m0[1u].z;
        _1895 = _1875.z * cbModelParam._m0[1u].z;
    }
    float _1908 = (((_925 * _875) + _926) * _890) * ((cbModelParam._m0[1u].w * (_1891 - _1791)) + _1791);
    float _1910 = (((_925 * _877) + _926) * _890) * ((cbModelParam._m0[1u].w * (_1893 - _1793)) + _1793);
    float _1912 = (((_925 * _878) + _926) * _890) * ((cbModelParam._m0[1u].w * (_1895 - _1795)) + _1795);
    float _1915 = fma(_1912, cbSceneParam._m0[89u].z, fma(_1910, cbSceneParam._m0[89u].y, _1908 * cbSceneParam._m0[89u].x));
    float _1918 = fma(_1912, cbSceneParam._m0[90u].z, fma(_1910, cbSceneParam._m0[90u].y, _1908 * cbSceneParam._m0[90u].x));
    float _1921 = fma(_1912, cbSceneParam._m0[91u].z, fma(_1910, cbSceneParam._m0[91u].y, _1908 * cbSceneParam._m0[91u].x));
    uvec4 _1931 = floatBitsToUint(cbInstanceData._m0[_818 + 5u]);
    uint _1933 = _1931.x * 14u;
    uint _1934 = _1933 + 13u;
    float _1941 = _890 + (-1.0);
    float _1946 = (cbLight._m0[_1934].x * _1941) + 1.0;
    float _1947 = (cbLight._m0[_1934].y * _1941) + 1.0;
    float _1948 = (cbLight._m0[_1934].z * _1941) + 1.0;
    float _1949 = (cbLight._m0[_1934].w * _1941) + 1.0;
    uint _1950 = _1933 + 5u;
    float _1956 = isnan(1.0) ? _1947 : (isnan(_1947) ? 1.0 : min(_1947, 1.0));
    uint _1960 = _1933 + 4u;
    float _1966 = isnan(1.0) ? _1946 : (isnan(_1946) ? 1.0 : min(_1946, 1.0));
    uint _1970 = _1933 | 1u;
    float _1981 = dot(vec3(cbLight._m0[_1933].xyz), vec3(_673, _674, _675));
    float _1984 = dot(vec3(cbLight._m0[_1970].xyz), vec3(_673, _674, _675));
    float _4136 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
    float _4147 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
    float _1989 = (isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * 0.3183098733425140380859375;
    float _1991 = (isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * 0.3183098733425140380859375;
    float _1998 = ((cbLight._m0[_1950].x * _1956) * _1991) + ((cbLight._m0[_1960].x * _1966) * _1989);
    float _1999 = ((_1956 * cbLight._m0[_1950].y) * _1991) + ((_1966 * cbLight._m0[_1960].y) * _1989);
    float _2000 = ((_1956 * cbLight._m0[_1950].z) * _1991) + ((_1966 * cbLight._m0[_1960].z) * _1989);
    uvec4 _2004 = floatBitsToUint(cbLight._m0[_1933 + 12u]);
    bool _2006 = _2004.x == 0u;
    float _2017;
    float _2019;
    float _2021;
    if (_2006)
    {
        _2017 = _1998;
        _2019 = _1999;
        _2021 = _2000;
    }
    else
    {
        uint _2025 = _1933 + 6u;
        float _2041 = (dot(vec3(cbLight._m0[_1933 + 2u].xyz), vec3(_673, _674, _675)) * 0.5) + 0.5;
        float _2042 = _2041 * _2041;
        float _4158 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
        float _2043 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _2044 = isnan(1.0) ? _1948 : (isnan(_1948) ? 1.0 : min(_1948, 1.0));
        _2017 = (((cbLight._m0[_2025].x * 0.3183098733425140380859375) * _2043) * _2044) + _1998;
        _2019 = (((cbLight._m0[_2025].y * 0.3183098733425140380859375) * _2043) * _2044) + _1999;
        _2021 = (((cbLight._m0[_2025].z * 0.3183098733425140380859375) * _2043) * _2044) + _2000;
    }
    bool _2024 = _2004.y == 0u;
    float _2062;
    float _2064;
    float _2066;
    if (_2024)
    {
        _2062 = _2017;
        _2064 = _2019;
        _2066 = _2021;
    }
    else
    {
        uint _2232 = _1933 + 7u;
        float _2248 = (dot(vec3(cbLight._m0[_1933 + 3u].xyz), vec3(_673, _674, _675)) * 0.5) + 0.5;
        float _2249 = _2248 * _2248;
        float _4174 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
        float _2250 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _2251 = isnan(1.0) ? _1949 : (isnan(_1949) ? 1.0 : min(_1949, 1.0));
        _2062 = (((cbLight._m0[_2232].x * 0.3183098733425140380859375) * _2250) * _2251) + _2017;
        _2064 = (((cbLight._m0[_2232].y * 0.3183098733425140380859375) * _2250) * _2251) + _2019;
        _2066 = (((cbLight._m0[_2232].z * 0.3183098733425140380859375) * _2250) * _2251) + _2021;
    }
    uint _2069 = _1933 + 8u;
    float _2082 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1933].w)) * _805) * 0.949999988079071044921875);
    float _2083 = _2082 * _2082;
    float _2084 = cbLight._m0[_1933].x + _753;
    float _2085 = cbLight._m0[_1933].y + _754;
    float _2086 = cbLight._m0[_1933].z + _755;
    float _2090 = inversesqrt(dot(vec3(_2084, _2085, _2086), vec3(_2084, _2085, _2086)));
    float _2091 = _2090 * _2084;
    float _2092 = _2090 * _2085;
    float _2093 = _2090 * _2086;
    float _2094 = dot(vec3(_673, _674, _675), vec3(cbLight._m0[_1933].xyz));
    float _4190 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
    float _2097 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
    float _4201 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _2098 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
    float _2099 = dot(vec3(_673, _674, _675), vec3(_2091, _2092, _2093));
    float _4212 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
    float _2102 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
    float _2103 = dot(vec3(cbLight._m0[_1933].xyz), vec3(_2091, _2092, _2093));
    float _4223 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
    float _2107 = _2083 * _2083;
    float _2111 = ((_2102 * _2102) * (_2107 + (-1.0))) + 1.0;
    float _2119 = exp2(log2(1.0 - (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0)))) * 5.0);
    float _2120 = 0.959999978542327880859375 - _872;
    float _2122 = 0.959999978542327880859375 - _873;
    float _2123 = 0.959999978542327880859375 - _874;
    float _2130 = 1.0 - _2083;
    float _2141 = (0.5 / (((_2098 * ((_2097 * _2130) + _2083)) + 9.9999999392252902907785028219223e-09) + (((_2098 * _2130) + _2083) * _2097))) * _2097;
    float _4234 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
    float _2143 = (isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * (_2107 / ((_2111 * _2111) * 3.141590118408203125));
    uint _2154 = _1933 + 9u;
    float _2165 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1970].w)) * _805) * 0.949999988079071044921875);
    float _2166 = _2165 * _2165;
    float _2167 = cbLight._m0[_1970].x + _753;
    float _2168 = cbLight._m0[_1970].y + _754;
    float _2169 = cbLight._m0[_1970].z + _755;
    float _2173 = inversesqrt(dot(vec3(_2167, _2168, _2169), vec3(_2167, _2168, _2169)));
    float _2174 = _2173 * _2167;
    float _2175 = _2173 * _2168;
    float _2176 = _2173 * _2169;
    float _2177 = dot(vec3(_673, _674, _675), vec3(cbLight._m0[_1970].xyz));
    float _4245 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
    float _2180 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
    float _2181 = dot(vec3(_673, _674, _675), vec3(_2174, _2175, _2176));
    float _4256 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
    float _2184 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
    float _2185 = dot(vec3(cbLight._m0[_1970].xyz), vec3(_2174, _2175, _2176));
    float _4267 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
    float _2189 = _2166 * _2166;
    float _2193 = ((_2184 * _2184) * (_2189 + (-1.0))) + 1.0;
    float _2200 = exp2(log2(1.0 - (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0)))) * 5.0);
    float _2207 = 1.0 - _2166;
    float _2217 = (0.5 / (((_2098 * ((_2180 * _2207) + _2166)) + 9.9999999392252902907785028219223e-09) + (((_2098 * _2207) + _2166) * _2180))) * _2180;
    float _4278 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
    float _2219 = (isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0))) * (_2189 / ((_2193 * _2193) * 3.141590118408203125));
    float _2229 = (((((_2200 * _2120) + _875) * cbLight._m0[_2154].x) * _2219) * _1956) + (((((_2119 * _2120) + _875) * cbLight._m0[_2069].x) * _2143) * _1966);
    float _2230 = (((((_2200 * _2122) + _877) * cbLight._m0[_2154].y) * _2219) * _1956) + (((((_2119 * _2122) + _877) * cbLight._m0[_2069].y) * _2143) * _1966);
    float _2231 = (((((_2200 * _2123) + _878) * cbLight._m0[_2154].z) * _2219) * _1956) + (((((_2119 * _2123) + _878) * cbLight._m0[_2069].z) * _2143) * _1966);
    float _2293;
    float _2295;
    float _2297;
    if (_2006)
    {
        _2293 = _2229;
        _2295 = _2230;
        _2297 = _2231;
    }
    else
    {
        uint _2299 = _1933 + 2u;
        uint _2303 = _1933 + 10u;
        float _2317 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2299].w)) * _805) * 0.949999988079071044921875);
        float _2318 = _2317 * _2317;
        float _2319 = cbLight._m0[_2299].x + _753;
        float _2320 = cbLight._m0[_2299].y + _754;
        float _2321 = cbLight._m0[_2299].z + _755;
        float _2325 = inversesqrt(dot(vec3(_2319, _2320, _2321), vec3(_2319, _2320, _2321)));
        float _2326 = _2325 * _2319;
        float _2327 = _2325 * _2320;
        float _2328 = _2325 * _2321;
        float _2329 = dot(vec3(_673, _674, _675), vec3(cbLight._m0[_2299].xyz));
        float _4289 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
        float _2332 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _2333 = dot(vec3(_673, _674, _675), vec3(_2326, _2327, _2328));
        float _4300 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
        float _2336 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _2337 = dot(vec3(cbLight._m0[_2299].xyz), vec3(_2326, _2327, _2328));
        float _4311 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
        float _2341 = _2318 * _2318;
        float _2345 = ((_2336 * _2336) * (_2341 + (-1.0))) + 1.0;
        float _2352 = exp2(log2(1.0 - (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0)))) * 5.0);
        float _2359 = 1.0 - _2318;
        float _2369 = (0.5 / (((_2098 * ((_2332 * _2359) + _2318)) + 9.9999999392252902907785028219223e-09) + (((_2098 * _2359) + _2318) * _2332))) * _2332;
        float _4322 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
        float _2371 = (isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0))) * (_2341 / ((_2345 * _2345) * 3.141590118408203125));
        float _2372 = isnan(1.0) ? _1948 : (isnan(_1948) ? 1.0 : min(_1948, 1.0));
        _2293 = (((((_2352 * _2120) + _875) * cbLight._m0[_2303].x) * _2371) * _2372) + _2229;
        _2295 = (((((_2352 * _2122) + _877) * cbLight._m0[_2303].y) * _2371) * _2372) + _2230;
        _2297 = (((((_2352 * _2123) + _878) * cbLight._m0[_2303].z) * _2371) * _2372) + _2231;
    }
    float _2407;
    float _2409;
    float _2411;
    if (_2024)
    {
        _2407 = _2293;
        _2409 = _2295;
        _2411 = _2297;
    }
    else
    {
        uint _2418 = _1933 + 3u;
        uint _2422 = _1933 + 11u;
        float _2436 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2418].w)) * _805) * 0.949999988079071044921875);
        float _2437 = _2436 * _2436;
        float _2438 = cbLight._m0[_2418].x + _753;
        float _2439 = cbLight._m0[_2418].y + _754;
        float _2440 = cbLight._m0[_2418].z + _755;
        float _2444 = inversesqrt(dot(vec3(_2438, _2439, _2440), vec3(_2438, _2439, _2440)));
        float _2445 = _2444 * _2438;
        float _2446 = _2444 * _2439;
        float _2447 = _2444 * _2440;
        float _2448 = dot(vec3(_673, _674, _675), vec3(cbLight._m0[_2418].xyz));
        float _4338 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
        float _2451 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _2452 = dot(vec3(_673, _674, _675), vec3(_2445, _2446, _2447));
        float _4349 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0));
        float _2455 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _2456 = dot(vec3(cbLight._m0[_2418].xyz), vec3(_2445, _2446, _2447));
        float _4360 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
        float _2460 = _2437 * _2437;
        float _2464 = ((_2455 * _2455) * (_2460 + (-1.0))) + 1.0;
        float _2471 = exp2(log2(1.0 - (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0)))) * 5.0);
        float _2478 = 1.0 - _2437;
        float _2488 = (0.5 / (((_2098 * ((_2451 * _2478) + _2437)) + 9.9999999392252902907785028219223e-09) + (((_2098 * _2478) + _2437) * _2451))) * _2451;
        float _4371 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
        float _2490 = (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) * (_2460 / ((_2464 * _2464) * 3.141590118408203125));
        float _2491 = isnan(1.0) ? _1949 : (isnan(_1949) ? 1.0 : min(_1949, 1.0));
        _2407 = (((((_2471 * _2120) + _875) * cbLight._m0[_2422].x) * _2490) * _2491) + _2293;
        _2409 = (((((_2471 * _2122) + _877) * cbLight._m0[_2422].y) * _2490) * _2491) + _2295;
        _2411 = (((((_2471 * _2123) + _878) * cbLight._m0[_2422].z) * _2490) * _2491) + _2297;
    }
    float _2625;
    float _2627;
    float _2629;
    float _2631;
    float _2633;
    float _2635;
    if (_1931.y == 0u)
    {
        float _2566 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2567 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2566;
        float _2568 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2566;
        float _2569 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2566;
        uvec4 _2581 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2582 = _2581.x;
        uint _2593 = uint((float(_2581.y) * floor(float(uint(cbSceneParam._m0[85u].y * _762) / _2582))) + floor(float(uint(cbSceneParam._m0[85u].x * _761) / _2582)));
        float _2603 = (log2(_2569 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2604 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
        uint _2607 = uint(isnan(14.0) ? _2604 : (isnan(_2604) ? 14.0 : min(_2604, 14.0)));
        uvec4 _2612 = texelFetch(g_lightClusterGridBuffer, int(((_2607 << 2u) + (_2593 << 6u)) >> 2u));
        uint _2613 = _2612.x;
        uint _2614 = _2581.z;
        float _2748;
        float _2750;
        float _2752;
        float _2754;
        float _2756;
        float _2758;
        if (((((1u << ((_2614 >> 4u) & 15u)) + 4294967295u) & _2613) == 0u) || ((_2614 & 240u) == 0u))
        {
            _2748 = 0.0;
            _2750 = 0.0;
            _2752 = 0.0;
            _2754 = 0.0;
            _2756 = 0.0;
            _2758 = 0.0;
        }
        else
        {
            float _2749;
            float _2751;
            float _2753;
            float _2755;
            float _2757;
            float _2759;
            float _2901 = 0.0;
            float _2902 = 0.0;
            float _2903 = 0.0;
            float _2904 = 0.0;
            float _2905 = 0.0;
            float _2906 = 0.0;
            uint _2907 = 0u;
            uint _2916;
            bool _2917;
            for (;;)
            {
                _2916 = texelFetch(g_lightClassification, int((((_2607 << 5u) + (_2593 << 9u)) + (_2907 << 2u)) >> 2u)).x;
                _2917 = _2916 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2917)
                {
                    frontier_phi_63_pred = _2906;
                    frontier_phi_63_pred_1 = _2905;
                    frontier_phi_63_pred_2 = _2904;
                    frontier_phi_63_pred_3 = _2903;
                    frontier_phi_63_pred_4 = _2902;
                    frontier_phi_63_pred_5 = _2901;
                }
                else
                {
                    float _3025;
                    float _3026;
                    float _3027;
                    float _3028;
                    float _3029;
                    float _3030;
                    uint _3031;
                    _3025 = _2901;
                    _3026 = _2902;
                    _3027 = _2903;
                    _3028 = _2904;
                    _3029 = _2905;
                    _3030 = _2906;
                    _3031 = _2916;
                    float _2957;
                    float _2958;
                    float _2959;
                    float _2960;
                    float _2961;
                    float _2962;
                    for (;;)
                    {
                        uint _3035 = uint(findLSB(_3031)) + (_2907 << 5u);
                        uint _3032 = (_3031 + 4294967295u) & _3031;
                        uint _3037 = _3035 * 48u;
                        vec4 _3051 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3037)).x, texelFetch(g_PointLightRenderingBuffer, int(_3037 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3037 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3037 + 3u)).x));
                        uint _3057 = (_3035 * 48u) + 4u;
                        vec4 _3070 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3057)).x, texelFetch(g_PointLightRenderingBuffer, int(_3057 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3057 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3057 + 3u)).x));
                        uint _3076 = (_3035 * 48u) + 8u;
                        vec3 _3087 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3076)).x, texelFetch(g_PointLightRenderingBuffer, int(_3076 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3076 + 2u)).x));
                        float _3091 = _3051.x - _2567;
                        float _3092 = _3051.y - _2568;
                        float _3093 = _3051.z - _2569;
                        float _3094 = dot(vec3(_3091, _3092, _3093), vec3(_3091, _3092, _3093));
                        float _3097 = inversesqrt(_3094);
                        float _3098 = _3097 * _3091;
                        float _3099 = _3097 * _3092;
                        float _3100 = _3097 * _3093;
                        float _3101 = dot(vec3(_786, _789, _792), vec3(_3098, _3099, _3100));
                        float _3106 = 1.0 - (_3094 * _3051.w);
                        float _4397 = isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0));
                        float _3107 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
                        float _3108 = sqrt(_3094) * _3070.w;
                        float _3111 = 1.39999997615814208984375 / (_3108 + 1.39999997615814208984375);
                        float _3112 = _3111 * _3111;
                        float _3115 = ((1.0 - _3112) * _3101) + _3112;
                        float _3118 = _3108 * _3108;
                        float _3122 = ((isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0))) * _3107) / ((_3118 * 0.699999988079071044921875) + 1.0);
                        float _3126 = (-0.0) - _2567;
                        float _3127 = (-0.0) - _2568;
                        float _3128 = (-0.0) - _2569;
                        float _3132 = inversesqrt(dot(vec3(_3126, _3127, _3128), vec3(_3126, _3127, _3128)));
                        float _3133 = _3132 * _3126;
                        float _3134 = _3132 * _3127;
                        float _3135 = _3132 * _3128;
                        float _3143 = exp2(log2(1.0 / ((_3118 * 3.5) + 5.0)) * 0.25);
                        float _3144 = 1.0 - _906;
                        float _3151 = sqrt(1.0 - ((1.0 - (_3144 * _3144)) * (1.0 - (_3143 * _3143))));
                        float _3152 = _3151 * _3151;
                        float _3153 = _3152 * _3152;
                        float _3154 = _3133 + _3098;
                        float _3155 = _3134 + _3099;
                        float _3156 = _3135 + _3100;
                        float _3160 = inversesqrt(dot(vec3(_3154, _3155, _3156), vec3(_3154, _3155, _3156)));
                        float _3164 = dot(vec3(_786, _789, _792), vec3(_3133, _3134, _3135));
                        float _4413 = isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0));
                        float _3167 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
                        float _3168 = dot(vec3(_786, _789, _792), vec3(_3160 * _3154, _3160 * _3155, _3160 * _3156));
                        float _4424 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0));
                        float _3171 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
                        float _3175 = ((_3171 * _3171) * (_3153 + (-1.0))) + 1.0;
                        float _3176 = _3111 * _3152;
                        float _3177 = _3176 * _3176;
                        float _3180 = ((1.0 - _3177) * _3101) + _3177;
                        float _4435 = isnan(0.0) ? _3180 : (isnan(_3180) ? 0.0 : max(_3180, 0.0));
                        float _3181 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
                        float _3182 = 1.0 - _3152;
                        float _3192 = (0.5 / (((_3181 * ((_3167 * _3182) + _3152)) + 9.9999999392252902907785028219223e-09) + (((_3181 * _3182) + _3152) * _3167))) * _3181;
                        float _4446 = isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0));
                        float _3203 = (((_3153 * 3.1415927410125732421875) * (isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0)))) / ((_3175 * _3175) * ((_3118 * 2.1991131305694580078125) + 3.141590118408203125))) * _3107;
                        _2960 = (_3122 * _3070.x) + _3028;
                        _2961 = (_3122 * _3070.y) + _3029;
                        _2962 = (_3122 * _3070.z) + _3030;
                        _2957 = (_3203 * _3087.x) + _3025;
                        _2958 = (_3203 * _3087.y) + _3026;
                        _2959 = (_3203 * _3087.z) + _3027;
                        if (_3032 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3025 = _2957;
                            _3026 = _2958;
                            _3027 = _2959;
                            _3028 = _2960;
                            _3029 = _2961;
                            _3030 = _2962;
                            _3031 = _3032;
                        }
                    }
                    frontier_phi_63_pred = _2962;
                    frontier_phi_63_pred_1 = _2961;
                    frontier_phi_63_pred_2 = _2960;
                    frontier_phi_63_pred_3 = _2959;
                    frontier_phi_63_pred_4 = _2958;
                    frontier_phi_63_pred_5 = _2957;
                }
                _2759 = frontier_phi_63_pred;
                _2757 = frontier_phi_63_pred_1;
                _2755 = frontier_phi_63_pred_2;
                _2753 = frontier_phi_63_pred_3;
                _2751 = frontier_phi_63_pred_4;
                _2749 = frontier_phi_63_pred_5;
                uint _2908 = _2907 + 1u;
                if (_2908 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2901 = _2749;
                    _2902 = _2751;
                    _2903 = _2753;
                    _2904 = _2755;
                    _2905 = _2757;
                    _2906 = _2759;
                    _2907 = _2908;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2748 = _2749;
            _2750 = _2751;
            _2752 = _2753;
            _2754 = _2755;
            _2756 = _2757;
            _2758 = _2759;
        }
        uvec4 _2762 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2763 = _2762.z;
        uint _2765 = (_2763 >> 8u) & 15u;
        float _2869;
        float _2871;
        float _2873;
        float _2875;
        float _2877;
        float _2879;
        if (((4294967295u << _2765) & _2613) == 0u)
        {
            _2869 = _2748;
            _2871 = _2750;
            _2873 = _2752;
            _2875 = _2754;
            _2877 = _2756;
            _2879 = _2758;
        }
        else
        {
            float _2894 = inversesqrt(dot(vec3(_2567, _2568, _2569), vec3(_2567, _2568, _2569)));
            float _2895 = _2894 * _2567;
            float _2896 = _2894 * _2568;
            float _2897 = _2894 * _2569;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2765 < ((_2763 >> 12u) & 15u))
            {
                float _2870;
                float _2872;
                float _2874;
                float _2876;
                float _2878;
                float _2880;
                float _3008 = _2748;
                float _3009 = _2750;
                float _3010 = _2752;
                float _3011 = _2754;
                float _3012 = _2756;
                float _3013 = _2758;
                uint _3014 = _2765;
                uint _3023;
                bool _3024;
                for (;;)
                {
                    _3023 = texelFetch(g_lightClassification, int((((_2607 << 5u) + (_2593 << 9u)) + (_3014 << 2u)) >> 2u)).x;
                    _3024 = _3023 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_3024)
                    {
                        frontier_phi_69_pred = _3013;
                        frontier_phi_69_pred_1 = _3012;
                        frontier_phi_69_pred_2 = _3011;
                        frontier_phi_69_pred_3 = _3010;
                        frontier_phi_69_pred_4 = _3009;
                        frontier_phi_69_pred_5 = _3008;
                    }
                    else
                    {
                        float _3208;
                        float _3209;
                        float _3210;
                        float _3211;
                        float _3212;
                        float _3213;
                        float _3502;
                        float _3503;
                        float _3504;
                        float _3505;
                        float _3506;
                        float _3507;
                        float _3221 = _3008;
                        float _3222 = _3009;
                        float _3223 = _3010;
                        float _3224 = _3011;
                        float _3225 = _3012;
                        float _3226 = _3013;
                        uint _3227 = _3023;
                        uint _3228;
                        vec4 _3253;
                        float _3254;
                        vec4 _3269;
                        vec3 _3281;
                        vec4 _3297;
                        vec4 _3312;
                        float _3358;
                        bool _3359;
                        for (;;)
                        {
                            uint _3238 = ((_3014 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3227));
                            _3228 = (_3227 + 4294967295u) & _3227;
                            uint _3240 = _3238 * 40u;
                            _3253 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3240)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 3u)).x));
                            _3254 = _3253.w;
                            uint _3256 = (_3238 * 40u) + 4u;
                            _3269 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3256)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 3u)).x));
                            uint _3271 = (_3238 * 40u) + 8u;
                            _3281 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3271)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 2u)).x));
                            uint _3284 = (_3238 * 40u) + 16u;
                            _3297 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3284)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 3u)).x));
                            uint _3299 = (_3238 * 40u) + 20u;
                            _3312 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3299)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 3u)).x));
                            uint _3314 = (_3238 * 40u) + 24u;
                            vec4 _3327 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3314)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 3u)).x));
                            uint _3333 = (_3238 * 40u) + 28u;
                            vec4 _3346 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3333)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 3u)).x));
                            _3358 = fma(_2569, _3346.z, fma(_2568, _3346.y, _3346.x * _2567)) + _3346.w;
                            _3359 = !((fma(_2569, _3327.z, fma(_2568, _3327.y, _3327.x * _2567)) + _3327.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3359)
                            {
                                float _3386 = _3253.x - _2567;
                                float _3387 = _3253.y - _2568;
                                float _3388 = _3253.z - _2569;
                                float _3389 = dot(vec3(_3386, _3387, _3388), vec3(_3386, _3387, _3388));
                                float _3392 = inversesqrt(_3389);
                                float _3393 = _3392 * _3386;
                                float _3394 = _3392 * _3387;
                                float _3395 = _3392 * _3388;
                                float _3399 = 1.0 - (_3389 / (_3254 * _3254));
                                float _4457 = isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : max(_3399, 0.0));
                                float _3400 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
                                float _3404 = sqrt(_3389) * _3269.w;
                                float _3406 = 1.39999997615814208984375 / (_3404 + 1.39999997615814208984375);
                                float _3407 = _3406 * _3406;
                                float _3410 = ((1.0 - _3407) * dot(vec3(_3393, _3394, _3395), vec3(_786, _789, _792))) + _3407;
                                float _3413 = _3404 * _3404;
                                float _3417 = (fma(_2569, _3297.z, fma(_2568, _3297.y, _3297.x * _2567)) + _3297.w) / _3358;
                                float _3418 = (fma(_2569, _3312.z, fma(_2568, _3312.y, _3312.x * _2567)) + _3312.w) / _3358;
                                float _3422 = 1.0 - dot(vec2(_3417, _3418), vec2(_3417, _3418));
                                float _4473 = isnan(0.0) ? _3422 : (isnan(_3422) ? 0.0 : max(_3422, 0.0));
                                float _3423 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
                                float _3424 = _3423 * (((isnan(0.0) ? _3410 : (isnan(_3410) ? 0.0 : max(_3410, 0.0))) * _3400) / ((_3413 * 0.699999988079071044921875) + 1.0));
                                float _3436 = exp2(log2(1.0 / ((_3413 * 3.5) + 5.0)) * 0.25);
                                float _3437 = 1.0 - _906;
                                float _3444 = sqrt(1.0 - ((1.0 - (_3437 * _3437)) * (1.0 - (_3436 * _3436))));
                                float _3445 = _3444 * _3444;
                                float _3446 = _3445 * _3445;
                                float _3447 = _3393 - _2895;
                                float _3448 = _3394 - _2896;
                                float _3449 = _3395 - _2897;
                                float _3453 = inversesqrt(dot(vec3(_3447, _3448, _3449), vec3(_3447, _3448, _3449)));
                                float _3457 = dot(vec3(_786, _789, _792), vec3((-0.0) - _2895, (-0.0) - _2896, (-0.0) - _2897));
                                float _4484 = isnan(0.0) ? _3457 : (isnan(_3457) ? 0.0 : max(_3457, 0.0));
                                float _3460 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
                                float _3461 = dot(vec3(_786, _789, _792), vec3(_3453 * _3447, _3453 * _3448, _3453 * _3449));
                                float _4495 = isnan(0.0) ? _3461 : (isnan(_3461) ? 0.0 : max(_3461, 0.0));
                                float _3464 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
                                float _3468 = ((_3464 * _3464) * (_3446 + (-1.0))) + 1.0;
                                float _3469 = _3406 * _3445;
                                float _3470 = _3469 * _3469;
                                float _3476 = ((1.0 - _3470) * dot(vec3(_786, _789, _792), vec3(_3393, _3394, _3395))) + _3470;
                                float _4506 = isnan(0.0) ? _3476 : (isnan(_3476) ? 0.0 : max(_3476, 0.0));
                                float _3477 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
                                float _3478 = 1.0 - _3445;
                                float _3488 = (0.5 / (((_3477 * ((_3460 * _3478) + _3445)) + 9.9999999392252902907785028219223e-09) + (((_3477 * _3478) + _3445) * _3460))) * _3477;
                                float _4517 = isnan(0.0) ? _3488 : (isnan(_3488) ? 0.0 : max(_3488, 0.0));
                                float _3498 = (_3423 * _3400) * (((_3446 * 3.1415927410125732421875) * (isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0)))) / ((_3468 * _3468) * ((_3413 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3424 * _3269.z;
                                frontier_phi_75_pred_1 = _3424 * _3269.y;
                                frontier_phi_75_pred_2 = _3424 * _3269.x;
                                frontier_phi_75_pred_3 = _3498 * _3281.z;
                                frontier_phi_75_pred_4 = _3498 * _3281.y;
                                frontier_phi_75_pred_5 = _3498 * _3281.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3507 = frontier_phi_75_pred;
                            _3506 = frontier_phi_75_pred_1;
                            _3505 = frontier_phi_75_pred_2;
                            _3504 = frontier_phi_75_pred_3;
                            _3503 = frontier_phi_75_pred_4;
                            _3502 = frontier_phi_75_pred_5;
                            _3211 = _3505 + _3224;
                            _3212 = _3506 + _3225;
                            _3213 = _3507 + _3226;
                            _3208 = _3502 + _3221;
                            _3209 = _3503 + _3222;
                            _3210 = _3504 + _3223;
                            if (_3228 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3221 = _3208;
                                _3222 = _3209;
                                _3223 = _3210;
                                _3224 = _3211;
                                _3225 = _3212;
                                _3226 = _3213;
                                _3227 = _3228;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3213;
                        frontier_phi_69_pred_1 = _3212;
                        frontier_phi_69_pred_2 = _3211;
                        frontier_phi_69_pred_3 = _3210;
                        frontier_phi_69_pred_4 = _3209;
                        frontier_phi_69_pred_5 = _3208;
                    }
                    _2880 = frontier_phi_69_pred;
                    _2878 = frontier_phi_69_pred_1;
                    _2876 = frontier_phi_69_pred_2;
                    _2874 = frontier_phi_69_pred_3;
                    _2872 = frontier_phi_69_pred_4;
                    _2870 = frontier_phi_69_pred_5;
                    uint _3015 = _3014 + 1u;
                    if (_3015 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3008 = _2870;
                        _3009 = _2872;
                        _3010 = _2874;
                        _3011 = _2876;
                        _3012 = _2878;
                        _3013 = _2880;
                        _3014 = _3015;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2880;
                frontier_phi_57_58_ladder_1 = _2878;
                frontier_phi_57_58_ladder_2 = _2876;
                frontier_phi_57_58_ladder_3 = _2874;
                frontier_phi_57_58_ladder_4 = _2872;
                frontier_phi_57_58_ladder_5 = _2870;
            }
            else
            {
                frontier_phi_57_58_ladder = _2758;
                frontier_phi_57_58_ladder_1 = _2756;
                frontier_phi_57_58_ladder_2 = _2754;
                frontier_phi_57_58_ladder_3 = _2752;
                frontier_phi_57_58_ladder_4 = _2750;
                frontier_phi_57_58_ladder_5 = _2748;
            }
            _2869 = frontier_phi_57_58_ladder_5;
            _2871 = frontier_phi_57_58_ladder_4;
            _2873 = frontier_phi_57_58_ladder_3;
            _2875 = frontier_phi_57_58_ladder_2;
            _2877 = frontier_phi_57_58_ladder_1;
            _2879 = frontier_phi_57_58_ladder;
        }
        float _2884 = isnan(1.0) ? _890 : (isnan(_890) ? 1.0 : min(_890, 1.0));
        _2625 = (_2884 * _2875) + _2062;
        _2627 = (_2884 * _2877) + _2064;
        _2629 = (_2884 * _2879) + _2066;
        _2631 = ((_2869 * _875) * _2884) + _2407;
        _2633 = ((_2871 * _877) * _2884) + _2409;
        _2635 = ((_2873 * _878) * _2884) + _2411;
    }
    else
    {
        _2625 = _2062;
        _2627 = _2064;
        _2629 = _2066;
        _2631 = _2407;
        _2633 = _2409;
        _2635 = _2411;
    }
    uint _2641 = _819 + uint(cbMatDynParam._m0[0u].w);
    float _2649 = ((cbMtdParam._m0[11u].x * cbMtdParam._m0[22u].z) * _617.x) * cbInstanceData._m0[_2641].x;
    float _2652 = ((cbMtdParam._m0[11u].y * cbMtdParam._m0[22u].z) * _617.y) * cbInstanceData._m0[_2641].y;
    float _2655 = ((cbMtdParam._m0[11u].z * cbMtdParam._m0[22u].z) * _617.z) * cbInstanceData._m0[_2641].z;
    float _4533 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _4544 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _4555 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _2672 = (((isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0))) * (_2625 + ((isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0))) * _890))) + ((_2631 + ((isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0))) * _1700)) * cbPerFrame._m0[3u].x)) + _2649;
    float _2674 = (_2652 + ((_2633 + ((isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0))) * _1700)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0))) * (_2627 + ((isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0))) * _890)));
    float _2676 = (_2655 + ((_2635 + ((isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0))) * _1700)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0))) * (_2629 + ((isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0))) * _890)));
    float _4581 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2689 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
    uint _2690 = _818 + 6u;
    float _2698 = _761 / cbSceneParam._m0[86u].x;
    float _2699 = _762 / cbSceneParam._m0[86u].y;
    vec4 _2713 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2698, _2699, (log2((isnan(cbSceneParam._m0[77u].w) ? _696 : (isnan(_696) ? cbSceneParam._m0[77u].w : min(_696, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2715 = _2713.x;
    float _2716 = _2713.y;
    float _2717 = _2713.z;
    float _2718 = _2713.w;
    float _2810;
    float _2812;
    float _2814;
    float _2816;
    if (_696 > cbSceneParam._m0[78u].w)
    {
        float _2773 = isnan(_696) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _696 : min(cbSceneParam._m0[80u].w, _696));
        float _2774 = _2773 / _696;
        float _2785 = _2774 * _746;
        float _2786 = _747 * _2774;
        float _2787 = (-0.0) - _2786;
        float _2788 = _2774 * _748;
        float _2790 = (cbSceneParam._m0[77u].w * _2787) / _2773;
        float _2791 = _2790 + cbSceneParam._m0[79u].w;
        float _2792 = cbSceneParam._m0[79u].w - _2786;
        float _2798 = sqrt(((_2785 * _2785) + (_2786 * _2786)) + (_2788 * _2788));
        float _2801 = (1.0 - (cbSceneParam._m0[77u].w / _2773)) * _2798;
        float _2806 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2808 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2970;
        if (abs((_2787 - _2790) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2970 = ((((_2791 > 0.0) ? exp2(_2806 * _2791) : (2.0 - exp2(_2808 * _2791))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2801;
        }
        else
        {
            float _2930 = 1.0 / cbSceneParam._m0[80u].x;
            float _2931 = isnan(_2792) ? _2791 : (isnan(_2791) ? _2792 : max(_2791, _2792));
            float _2932 = isnan(_2792) ? _2791 : (isnan(_2791) ? _2792 : min(_2791, _2792));
            float _2941 = isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : min(_2931, 0.0));
            float _2942 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : min(_2932, 0.0));
            _2970 = ((abs(_2798 / _2787) * cbSceneParam._m0[80u].y) * ((((_2941 - _2942) * 2.0) - ((exp2(_2806 * (isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : max(_2931, 0.0)))) - exp2(_2806 * (isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0))))) * _2930)) - ((exp2(_2808 * _2941) - exp2(_2808 * _2942)) * _2930))) + (_2801 * cbSceneParam._m0[80u].z);
        }
        vec4 _2972 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2698, _2699, 1.0), 0.0);
        float _2981 = exp2((_2970 * (-1.44269502162933349609375)) * (1.0 - _2972.w));
        float _2982 = log2(_2981);
        float _2998 = log2(_2718);
        _2810 = (exp2(_2998 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2982 * cbSceneParam._m0[78u].x)) * _2972.x) / cbSceneParam._m0[78u].x)) + _2715;
        _2812 = (exp2(_2998 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2982 * cbSceneParam._m0[78u].y)) * _2972.y) / cbSceneParam._m0[78u].y)) + _2716;
        _2814 = (exp2(_2998 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2982 * cbSceneParam._m0[78u].z)) * _2972.z) / cbSceneParam._m0[78u].z)) + _2717;
        _2816 = _2981 * _2718;
    }
    else
    {
        _2810 = _2715;
        _2812 = _2716;
        _2814 = _2717;
        _2816 = _2718;
    }
    float _2828 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2829 = _2828 == 3.0;
    float _2830 = log2(_2816);
    float _2834 = exp2(_2830 * cbSceneParam._m0[78u].x);
    float _2835 = exp2(_2830 * cbSceneParam._m0[78u].y);
    float _2836 = exp2(_2830 * cbSceneParam._m0[78u].z);
    float _2837 = _2834 * (isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0)));
    float _2838 = _2835 * (isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0)));
    float _2839 = _2836 * (isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0)));
    float _2848 = (_2828 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2848 * (_2829 ? _2837 : (_2837 + (cbSceneParam._m0[72u].w * _2810)));
    SV_Target.y = _2848 * (_2829 ? _2838 : (_2838 + (cbSceneParam._m0[72u].w * _2812)));
    SV_Target.z = _2848 * (_2829 ? _2839 : (_2839 + (cbSceneParam._m0[72u].w * _2814)));
    SV_Target.w = cbInstanceData._m0[_2690].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2649) * _2689) * _2834) * _2848;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2652) * _2689) * _2835) * _2848;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2655) * _2689) * _2836) * _2848;
    SV_Target_1.w = cbInstanceData._m0[_2690].w;
}


