#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 11) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 12) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1397;
float _3820;
float _3821;
float _3822;
float _3823;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _230 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _238 = _237 * NORMAL.x;
    float _239 = _237 * NORMAL.y;
    float _240 = _237 * NORMAL.z;
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _252;
    float _253;
    float _254;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _252 = (-0.0) - _238;
        _253 = (-0.0) - _239;
        _254 = (-0.0) - _240;
    }
    else
    {
        _252 = _238;
        _253 = _239;
        _254 = _240;
    }
    vec4 _269 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _279 = log2(0.0);
    float _281 = exp2(_279 * cbMtdParam._m0[21u].y);
    float _282 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    float _283 = isnan(1.0) ? _282 : (isnan(_282) ? 1.0 : min(_282, 1.0));
    vec4 _297 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _301 = _297.z;
    float _302 = _297.w;
    float _310 = exp2(log2(_301 * cbMtdParam._m0[21u].w) * cbMtdParam._m0[20u].y);
    float _311 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
    float _312 = isnan(1.0) ? _311 : (isnan(_311) ? 1.0 : min(_311, 1.0));
    vec4 _325 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    vec4 _348 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _350 = _348.x;
    float _351 = _348.y;
    float _356 = _350 - ((_350 * _348.z) * cbMtdParam._m0[20u].w);
    bool _392 = _356 >= 0.25;
    bool _397 = _356 >= 0.3499999940395355224609375;
    bool _402 = _356 >= 0.5;
    bool _407 = _356 >= 0.64999997615814208984375;
    bool _412 = _356 >= 0.75;
    vec4 _440 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _450 = cbMtdParam._m0[9u].x * _440.x;
    float _451 = cbMtdParam._m0[9u].y * _440.y;
    float _452 = cbMtdParam._m0[9u].z * _440.z;
    float _459 = (((((((_412 ? cbMtdParam._m0[14u].x : (_407 ? cbMtdParam._m0[19u].x : (_402 ? cbMtdParam._m0[18u].x : (_397 ? cbMtdParam._m0[17u].x : (_392 ? cbMtdParam._m0[16u].x : cbMtdParam._m0[15u].x))))) - cbMtdParam._m0[10u].x) * _351) + cbMtdParam._m0[10u].x) * _325.x) - _450) * _312) + _450;
    float _460 = (((((((_412 ? cbMtdParam._m0[14u].y : (_407 ? cbMtdParam._m0[19u].y : (_402 ? cbMtdParam._m0[18u].y : (_397 ? cbMtdParam._m0[17u].y : (_392 ? cbMtdParam._m0[16u].y : cbMtdParam._m0[15u].y))))) - cbMtdParam._m0[10u].y) * _351) + cbMtdParam._m0[10u].y) * _325.y) - _451) * _312) + _451;
    float _461 = (((((((_412 ? cbMtdParam._m0[14u].z : (_407 ? cbMtdParam._m0[19u].z : (_402 ? cbMtdParam._m0[18u].z : (_397 ? cbMtdParam._m0[17u].z : (_392 ? cbMtdParam._m0[16u].z : cbMtdParam._m0[15u].z))))) - cbMtdParam._m0[10u].z) * _351) + cbMtdParam._m0[10u].z) * _325.z) - _452) * _312) + _452;
    float _468 = exp2(log2(_302) * cbMtdParam._m0[22u].y);
    vec4 _481 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _501 = (((cbMtdParam._m0[12u].x * _481.x) - _459) * _468) + _459;
    float _502 = (((cbMtdParam._m0[12u].y * _481.y) - _460) * _468) + _460;
    float _503 = (((cbMtdParam._m0[12u].z * _481.z) - _461) * _468) + _461;
    vec4 _515 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _539 = (_269.x * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].x * _515.x) - _501) * _283) + _501);
    float _541 = (_269.y * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].y * _515.y) - _502) * _283) + _502);
    float _543 = (_269.z * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].z * _515.z) - _503) * _283) + _503);
    float _548 = exp2(log2(1.0 - _302) * 0.00999999977648258209228515625);
    float _566 = ((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_11, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x - cbMtdParam._m0[22u].w) * _548) + cbMtdParam._m0[22u].w;
    float _585 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w)).x - _566) + cbMtdParam._m0[21u].z) * _468) + _566;
    float _607 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w)).x - _585) + cbMtdParam._m0[23u].w) * _283) + _585;
    vec4 _620 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _638 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _640 = _638.x;
    float _641 = _638.y;
    float _644 = cbMtdParam._m0[20u].x + _638.z;
    float _647 = (((cbMtdParam._m0[21u].x + _620.z) - _644) * _548) + _644;
    vec4 _659 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _671 = (_301 * 2.0) * ((((_659.z - _647) + cbMtdParam._m0[23u].y) * _468) + _647);
    vec4 _683 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _692 = (((_683.z - _671) + cbMtdParam._m0[22u].x) * _283) + _671;
    vec4 _711 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _726 = ((_620.x - _640) * _548) + _640;
    float _727 = ((_620.y - _641) * _548) + _641;
    float _732 = ((_659.x - _726) * _468) + _726;
    float _733 = ((_659.y - _727) * _468) + _727;
    float _742 = ((((_683.x - _732) * _283) + _732) * 2.0) + (-1.0);
    float _743 = ((((_683.y - _733) * _283) + _733) * 2.0) + (-1.0);
    float _744 = dot(vec2(_742, _743), vec2(_742, _743));
    float _3852 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _749 = sqrt(1.0 - (isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0))));
    float _752 = (cbMtdParam._m0[23u].x * ((_297.x * 2.0) + (-1.0))) + _742;
    float _753 = (cbMtdParam._m0[23u].x * ((_297.y * 2.0) + (-1.0))) + _743;
    float _756 = fma(_749, _252, fma(_753, _244 * TANGENT.x, (_230 * _223) * _752));
    float _759 = fma(_749, _253, fma(_753, _244 * TANGENT.y, (_230 * _224) * _752));
    float _762 = fma(_749, _254, fma(_753, _244 * TANGENT.z, (_230 * _225) * _752));
    float _766 = inversesqrt(dot(vec3(_756, _759, _762), vec3(_756, _759, _762)));
    float _767 = _766 * _756;
    float _768 = _766 * _759;
    float _769 = _766 * _762;
    float _3863 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _770 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
    float _3874 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _3885 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _3896 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _3907 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _774 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
    float _790 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _830 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _840 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _830);
    float _841 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _830);
    float _842 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _830);
    float _846 = inversesqrt(dot(vec3(_840, _841, _842), vec3(_840, _841, _842)));
    float _847 = _840 * _846;
    float _848 = _841 * _846;
    float _849 = _842 * _846;
    vec4 _854 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _856 = _854.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1078 = sqrt(((_840 * _840) + (_841 * _841)) + (_842 * _842));
        float _1084 = (cbMatDynParam._m0[5u].x * _1078) + cbMatDynParam._m0[5u].y;
        float _3918 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1085 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
        float _1089 = (cbMatDynParam._m0[5u].z * _1078) + cbMatDynParam._m0[5u].w;
        float _3929 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0))) - _1085)) + _1085) < ((_856 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _868 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _869 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _871 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _873 = _871.w;
    float _891 = fma(_769, cbSceneParam._m0[5u].z, fma(_768, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _767));
    float _894 = fma(_769, cbSceneParam._m0[6u].z, fma(_768, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _767));
    float _897 = fma(_769, cbSceneParam._m0[7u].z, fma(_768, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _767));
    vec4 _899 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _910 = (((_899.y - _770) + (_899.w * _770)) * cbMtdParam._m0[3u].x) + _770;
    uint _923 = uint(roundEven(NORMAL.w)) * 13u;
    uint _924 = _923 + 9u;
    uint _925 = _924 + uint(cbMatDynParam._m0[0u].w);
    float _931 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0)))) * cbInstanceData._m0[_925].x;
    float _932 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0)))) * cbInstanceData._m0[_925].y;
    float _933 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0)))) * cbInstanceData._m0[_925].z;
    float _3940 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
    float _934 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
    float _3951 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _935 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    float _3962 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    float _936 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
    vec4 _937 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _942 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _953 = (((_942.x - _774) + (_942.w * _774)) * cbMtdParam._m0[3u].x) + _774;
    float _966 = (cbMtdParam._m0[3u].x * (((_934 * _873) - _934) + _937.x)) + _934;
    float _967 = (cbMtdParam._m0[3u].x * (((_935 * _873) - _935) + _937.y)) + _935;
    float _968 = (cbMtdParam._m0[3u].x * (((_936 * _873) - _936) + _937.z)) + _936;
    float _969 = 1.0 - _953;
    float _970 = _969 * _966;
    float _971 = _969 * _967;
    float _972 = _969 * _968;
    float _977 = (_966 + (-0.039999999105930328369140625)) * _953;
    float _978 = (_967 + (-0.039999999105930328369140625)) * _953;
    float _979 = (_968 + (-0.039999999105930328369140625)) * _953;
    float _980 = _977 + 0.039999999105930328369140625;
    float _982 = _978 + 0.039999999105930328369140625;
    float _983 = _979 + 0.039999999105930328369140625;
    vec4 _992 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _868, cbSceneParam._m0[86u].y * _869));
    float _995 = _992.x * TEXCOORD_4.z;
    float _996 = dot(vec3(_767, _768, _769), vec3(_847, _848, _849));
    float _999 = _996 * 2.0;
    float _1003 = (_999 * _767) - _847;
    float _1004 = (_999 * _768) - _848;
    float _1005 = (_999 * _769) - _849;
    float _1009 = abs(dot(vec3(_847, _848, _849), vec3(_767, _768, _769)));
    float _3973 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
    float _1011 = sqrt(_910);
    float _1024 = exp2((_1011 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1011 * 3.0));
    float _1030 = (1.0 - _1024) * ((_1011 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1031 = _1024 * _1011;
    float _1059 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1063 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1067 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1396;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1122 = fma(_1067, cbModelParam._m0[26u].z, fma(_1063, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1059));
        float _1126 = fma(_1067, cbModelParam._m0[27u].z, fma(_1063, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1059));
        float _1130 = fma(_1067, cbModelParam._m0[28u].z, fma(_1063, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1059));
        float _1154 = _1059 + _767;
        float _1155 = _1063 + _768;
        float _1156 = _1067 + _769;
        float _1166 = fma(_1156, cbModelParam._m0[26u].z, fma(_1155, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1154)) - _1122;
        float _1167 = fma(_1156, cbModelParam._m0[27u].z, fma(_1155, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1154)) - _1126;
        float _1168 = fma(_1156, cbModelParam._m0[28u].z, fma(_1155, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1154)) - _1130;
        float _1172 = inversesqrt(dot(vec3(_1166, _1167, _1168), vec3(_1166, _1167, _1168)));
        float _1185 = ((_1172 * _1166) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1122 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1186 = ((_1172 * _1167) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1126 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1187 = ((_1172 * _1168) / cbModelParam._m0[34u].z) + ((((((_1130 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1190 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        vec4 _1197 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        vec4 _1204 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        vec4 _1211 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        float _1224 = exp2((_1190.w + (-0.5)) * 20.0) * 2.0;
        float _1225 = _1224 * (_1190.x + (-0.5));
        float _1226 = _1224 * (_1190.y + (-0.5));
        float _1227 = _1224 * (_1190.z + (-0.5));
        float _1234 = exp2((_1197.w + (-0.5)) * 20.0) * 2.0;
        float _1235 = _1234 * (_1197.x + (-0.5));
        float _1236 = _1234 * (_1197.y + (-0.5));
        float _1237 = _1234 * (_1197.z + (-0.5));
        float _1244 = exp2((_1204.w + (-0.5)) * 20.0) * 2.0;
        float _1245 = _1244 * (_1204.x + (-0.5));
        float _1246 = _1244 * (_1204.y + (-0.5));
        float _1247 = _1244 * (_1204.z + (-0.5));
        float _1254 = exp2((_1211.w + (-0.5)) * 20.0) * 2.0;
        float _1255 = _1254 * (_1211.x + (-0.5));
        float _1256 = _1254 * (_1211.y + (-0.5));
        float _1257 = _1254 * (_1211.z + (-0.5));
        float _1258 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1259 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1260 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1261 = _1225 * 0.5;
        float _1262 = _1235 * 0.5;
        float _1263 = _1245 * 0.5;
        float _1264 = dot(vec3(_1261, _1262, _1263), vec3(_1261, _1262, _1263));
        float _1269 = (_1264 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1264);
        float _1278 = (dot(vec3(_767, _768, _769), vec3(_1269 * _1261, _1269 * _1262, _1269 * _1263)) + 1.0) * 0.5;
        float _3999 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1288 = sqrt(((_1262 * _1262) + (_1261 * _1261)) + (_1263 * _1263)) / (_1258 + 9.9999997473787516355514526367188e-06);
        float _4010 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1290 = _1289 * 2.0;
        float _1294 = (1.0 - _1289) / (_1289 + 1.0);
        float _4021 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _1304 = ((((1.0 - _1295) * (_1290 + 2.0)) * exp2(log2(isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * (_1290 + 1.0))) + _1295) * _1258;
        float _1305 = _1226 * 0.5;
        float _1306 = _1236 * 0.5;
        float _1307 = _1246 * 0.5;
        float _1308 = dot(vec3(_1305, _1306, _1307), vec3(_1305, _1306, _1307));
        float _1313 = (_1308 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1308);
        float _1321 = (dot(vec3(_767, _768, _769), vec3(_1313 * _1305, _1313 * _1306, _1313 * _1307)) + 1.0) * 0.5;
        float _4032 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1330 = sqrt(((_1306 * _1306) + (_1305 * _1305)) + (_1307 * _1307)) / (_1259 + 9.9999997473787516355514526367188e-06);
        float _4043 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1332 = _1331 * 2.0;
        float _1336 = (1.0 - _1331) / (_1331 + 1.0);
        float _4054 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _1346 = ((((1.0 - _1337) * (_1332 + 2.0)) * exp2(log2(isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * (_1332 + 1.0))) + _1337) * _1259;
        float _1347 = _1227 * 0.5;
        float _1348 = _1237 * 0.5;
        float _1349 = _1247 * 0.5;
        float _1350 = dot(vec3(_1347, _1348, _1349), vec3(_1347, _1348, _1349));
        float _1355 = (_1350 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1350);
        float _1363 = (dot(vec3(_767, _768, _769), vec3(_1355 * _1347, _1355 * _1348, _1355 * _1349)) + 1.0) * 0.5;
        float _4065 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1372 = sqrt(((_1348 * _1348) + (_1347 * _1347)) + (_1349 * _1349)) / (_1260 + 9.9999997473787516355514526367188e-06);
        float _4076 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _1374 = _1373 * 2.0;
        float _1378 = (1.0 - _1373) / (_1373 + 1.0);
        float _4087 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _1388 = ((((1.0 - _1379) * (_1374 + 2.0)) * exp2(log2(isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) * (_1374 + 1.0))) + _1379) * _1260;
        _1396 = _1227;
        _1398 = _1226;
        _1399 = _1225;
        _1400 = _1237;
        _1401 = _1236;
        _1402 = _1235;
        _1403 = _1247;
        _1404 = _1246;
        _1405 = _1245;
        _1406 = _1260;
        _1407 = _1259;
        _1408 = _1258;
        _1409 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)));
        _1410 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0)));
        _1411 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0)));
    }
    else
    {
        _1396 = _1397;
        _1398 = _1397;
        _1399 = _1397;
        _1400 = _1397;
        _1401 = _1397;
        _1402 = _1397;
        _1403 = _1397;
        _1404 = _1397;
        _1405 = _1397;
        _1406 = _1397;
        _1407 = _1397;
        _1408 = _1397;
        _1409 = 0.0;
        _1410 = 0.0;
        _1411 = 0.0;
    }
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1440 = fma(_1067, cbModelParam._m0[30u].z, fma(_1063, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1059));
        float _1444 = fma(_1067, cbModelParam._m0[31u].z, fma(_1063, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1059));
        float _1448 = fma(_1067, cbModelParam._m0[32u].z, fma(_1063, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1059));
        float _1471 = _1059 + _767;
        float _1472 = _1063 + _768;
        float _1473 = _1067 + _769;
        float _1483 = fma(_1473, cbModelParam._m0[30u].z, fma(_1472, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1471)) - _1440;
        float _1484 = fma(_1473, cbModelParam._m0[31u].z, fma(_1472, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1471)) - _1444;
        float _1485 = fma(_1473, cbModelParam._m0[32u].z, fma(_1472, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1471)) - _1448;
        float _1489 = inversesqrt(dot(vec3(_1483, _1484, _1485), vec3(_1483, _1484, _1485)));
        float _1502 = ((_1489 * _1483) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1440 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1503 = ((_1489 * _1484) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1444 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1504 = ((_1489 * _1485) / cbModelParam._m0[35u].z) + ((((((_1448 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1506 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1502, _1503, _1504), 0.0);
        vec4 _1513 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1502, _1503, _1504), 0.0);
        vec4 _1520 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1502, _1503, _1504), 0.0);
        vec4 _1527 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1502, _1503, _1504), 0.0);
        float _1539 = exp2((_1506.w + (-0.5)) * 20.0) * 2.0;
        float _1540 = _1539 * (_1506.x + (-0.5));
        float _1541 = _1539 * (_1506.y + (-0.5));
        float _1542 = _1539 * (_1506.z + (-0.5));
        float _1549 = exp2((_1513.w + (-0.5)) * 20.0) * 2.0;
        float _1550 = _1549 * (_1513.x + (-0.5));
        float _1551 = _1549 * (_1513.y + (-0.5));
        float _1552 = _1549 * (_1513.z + (-0.5));
        float _1559 = exp2((_1520.w + (-0.5)) * 20.0) * 2.0;
        float _1560 = _1559 * (_1520.x + (-0.5));
        float _1561 = _1559 * (_1520.y + (-0.5));
        float _1562 = _1559 * (_1520.z + (-0.5));
        float _1569 = exp2((_1527.w + (-0.5)) * 20.0) * 2.0;
        float _1570 = _1569 * (_1527.x + (-0.5));
        float _1571 = _1569 * (_1527.y + (-0.5));
        float _1572 = _1569 * (_1527.z + (-0.5));
        float _1573 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1574 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1575 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1576 = _1540 * 0.5;
        float _1577 = _1550 * 0.5;
        float _1578 = _1560 * 0.5;
        float _1579 = dot(vec3(_1576, _1577, _1578), vec3(_1576, _1577, _1578));
        float _1584 = (_1579 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1579);
        float _1592 = (dot(vec3(_767, _768, _769), vec3(_1584 * _1576, _1584 * _1577, _1584 * _1578)) + 1.0) * 0.5;
        float _4128 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1601 = sqrt(((_1577 * _1577) + (_1576 * _1576)) + (_1578 * _1578)) / (_1573 + 9.9999997473787516355514526367188e-06);
        float _4139 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1602 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _1603 = _1602 * 2.0;
        float _1607 = (1.0 - _1602) / (_1602 + 1.0);
        float _4150 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1608 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _1617 = ((((1.0 - _1608) * (_1603 + 2.0)) * exp2(log2(isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * (_1603 + 1.0))) + _1608) * _1573;
        float _1618 = _1541 * 0.5;
        float _1619 = _1551 * 0.5;
        float _1620 = _1561 * 0.5;
        float _1621 = dot(vec3(_1618, _1619, _1620), vec3(_1618, _1619, _1620));
        float _1626 = (_1621 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1621);
        float _1634 = (dot(vec3(_767, _768, _769), vec3(_1626 * _1618, _1626 * _1619, _1626 * _1620)) + 1.0) * 0.5;
        float _4161 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1643 = sqrt(((_1619 * _1619) + (_1618 * _1618)) + (_1620 * _1620)) / (_1574 + 9.9999997473787516355514526367188e-06);
        float _4172 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1644 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1645 = _1644 * 2.0;
        float _1649 = (1.0 - _1644) / (_1644 + 1.0);
        float _4183 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1650 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _1659 = ((((1.0 - _1650) * (_1645 + 2.0)) * exp2(log2(isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * (_1645 + 1.0))) + _1650) * _1574;
        float _1660 = _1542 * 0.5;
        float _1661 = _1552 * 0.5;
        float _1662 = _1562 * 0.5;
        float _1663 = dot(vec3(_1660, _1661, _1662), vec3(_1660, _1661, _1662));
        float _1668 = (_1663 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1663);
        float _1676 = (dot(vec3(_767, _768, _769), vec3(_1668 * _1660, _1668 * _1661, _1668 * _1662)) + 1.0) * 0.5;
        float _4194 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1685 = sqrt(((_1661 * _1661) + (_1660 * _1660)) + (_1662 * _1662)) / (_1575 + 9.9999997473787516355514526367188e-06);
        float _4205 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1686 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _1687 = _1686 * 2.0;
        float _1691 = (1.0 - _1686) / (_1686 + 1.0);
        float _4216 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
        float _1692 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _1701 = ((((1.0 - _1692) * (_1687 + 2.0)) * exp2(log2(isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0))) * (_1687 + 1.0))) + _1692) * _1575;
        _1709 = _1542;
        _1710 = _1541;
        _1711 = _1540;
        _1712 = _1552;
        _1713 = _1551;
        _1714 = _1550;
        _1715 = _1562;
        _1716 = _1561;
        _1717 = _1560;
        _1718 = _1575;
        _1719 = _1574;
        _1720 = _1573;
        _1721 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0)));
        _1722 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0)));
        _1723 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0)));
    }
    else
    {
        _1709 = _1397;
        _1710 = _1397;
        _1711 = _1397;
        _1712 = _1397;
        _1713 = _1397;
        _1714 = _1397;
        _1715 = _1397;
        _1716 = _1397;
        _1717 = _1397;
        _1718 = _1397;
        _1719 = _1397;
        _1720 = _1397;
        _1721 = 0.0;
        _1722 = 0.0;
        _1723 = 0.0;
    }
    float _1733 = (cbModelParam._m0[1u].x * (_1721 - _1409)) + _1409;
    float _1734 = (cbModelParam._m0[1u].x * (_1722 - _1410)) + _1410;
    float _1735 = (cbModelParam._m0[1u].x * (_1723 - _1411)) + _1411;
    float _1756 = fma(_1735, cbSceneParam._m0[89u].z, fma(_1734, cbSceneParam._m0[89u].y, _1733 * cbSceneParam._m0[89u].x));
    float _1759 = fma(_1735, cbSceneParam._m0[90u].z, fma(_1734, cbSceneParam._m0[90u].y, _1733 * cbSceneParam._m0[90u].x));
    float _1762 = fma(_1735, cbSceneParam._m0[91u].z, fma(_1734, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1733));
    float _1777 = _1003 * 0.5;
    float _1778 = _1004 * 0.5;
    float _1779 = _1005 * 0.5;
    float _1780 = dot(vec4(_1777, _1778, _1779, 1.0), vec4(_1711, _1714, _1717, _1720));
    float _1783 = dot(vec4(_1777, _1778, _1779, 1.0), vec4(_1710, _1713, _1716, _1719));
    float _1786 = dot(vec4(_1777, _1778, _1779, 1.0), vec4(_1709, _1712, _1715, _1718));
    float _1820;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1793 = dot(vec4(_1777, _1778, _1779, 1.0), vec4(_1396, _1400, _1403, _1406));
        float _1797 = dot(vec4(_1777, _1778, _1779, 1.0), vec4(_1398, _1401, _1404, _1407));
        float _1801 = dot(vec4(_1777, _1778, _1779, 1.0), vec4(_1399, _1402, _1405, _1408));
        float _1808 = dot(vec4(cbModelParam._m0[39u]), vec4(_1777, _1778, _1779, 1.0));
        _1820 = dot(vec3(isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0)), isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0)), isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1808) ? 0.0 : (isnan(0.0) ? _1808 : max(0.0, _1808))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1820 = 1.0;
    }
    float _1831;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1822 = dot(vec4(cbModelParam._m0[40u]), vec4(_1777, _1778, _1779, 1.0));
        _1831 = dot(vec3(isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0)), isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0)), isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1822) ? 0.0 : (isnan(0.0) ? _1822 : max(0.0, _1822))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1831 = 1.0;
    }
    float _1835 = (_1831 * cbModelParam._m0[1u].x) + (_1820 * (1.0 - cbModelParam._m0[1u].x));
    float _1845 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _910);
    float _1846 = isnan(_1845) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1845 : min(cbModelParam._m0[25u].z, _1845));
    float _1926;
    float _1928;
    float _1930;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1893 = fma(_1067, cbModelParam._m0[13u].z, fma(_1063, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1059)) + cbModelParam._m0[13u].w;
        float _1897 = fma(_1067, cbModelParam._m0[14u].z, fma(_1063, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1059)) + cbModelParam._m0[14u].w;
        float _1901 = fma(_1067, cbModelParam._m0[15u].z, fma(_1063, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1059)) + cbModelParam._m0[15u].w;
        float _1904 = fma(_1005, cbModelParam._m0[13u].z, fma(_1004, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1003));
        float _1907 = fma(_1005, cbModelParam._m0[14u].z, fma(_1004, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1003));
        float _1910 = fma(_1005, cbModelParam._m0[15u].z, fma(_1004, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1003));
        float _1938;
        if (_1904 > 0.0)
        {
            _1938 = abs((1.0 - _1893) / _1904);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1904 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1893 + 1.0) / _1904);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1938 = frontier_phi_19_17_ladder;
        }
        float _2140;
        if (_1907 > 0.0)
        {
            _2140 = abs((1.0 - _1897) / _1907);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1907 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1897 + 1.0) / _1907);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2140 = frontier_phi_28_24_ladder;
        }
        float _2394;
        if (_1910 > 0.0)
        {
            _2394 = abs((1.0 - _1901) / _1910);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1910 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1901 + 1.0) / _1910);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2394 = frontier_phi_40_35_ladder;
        }
        float _2396 = isnan(_2140) ? _1938 : (isnan(_1938) ? _2140 : min(_1938, _2140));
        float _2397 = isnan(_2394) ? _2396 : (isnan(_2396) ? _2394 : min(_2396, _2394));
        float _2401 = (_2397 * _1904) + _1893;
        float _2402 = (_2397 * _1907) + _1897;
        float _2403 = (_2397 * _1910) + _1901;
        float _2404 = _2397 * 9.9999997473787516355514526367188e-05;
        float _2406 = (-1.0) - _2404;
        float _2408 = _2404 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2403 > _2408) || ((_2403 < _2406) || ((_2402 > _2408) || ((_2402 < _2406) || ((_2401 < _2406) || (_2401 > _2408))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2531 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2403, cbModelParam._m0[9u].z, fma(_2402, cbModelParam._m0[9u].y, _2401 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2403, cbModelParam._m0[10u].z, fma(_2402, cbModelParam._m0[10u].y, _2401 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2403, cbModelParam._m0[11u].z, fma(_2402, cbModelParam._m0[11u].y, _2401 * cbModelParam._m0[11u].x))), _1846);
            frontier_phi_18_40_ladder = _2531.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2531.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2531.x * cbModelParam._m0[1u].y;
        }
        _1926 = frontier_phi_18_40_ladder_2;
        _1928 = frontier_phi_18_40_ladder_1;
        _1930 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1914 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1003, _1004, _1005), _1846);
        _1926 = _1914.x * cbModelParam._m0[1u].y;
        _1928 = _1914.y * cbModelParam._m0[1u].y;
        _1930 = _1914.z * cbModelParam._m0[1u].y;
    }
    float _1934 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _910);
    float _1935 = isnan(_1934) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1934 : min(cbModelParam._m0[25u].w, _1934));
    float _2024;
    float _2026;
    float _2028;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1988 = fma(_1067, cbModelParam._m0[21u].z, fma(_1063, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1059)) + cbModelParam._m0[21u].w;
        float _1992 = fma(_1067, cbModelParam._m0[22u].z, fma(_1063, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1059)) + cbModelParam._m0[22u].w;
        float _1996 = fma(_1067, cbModelParam._m0[23u].z, fma(_1063, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1059)) + cbModelParam._m0[23u].w;
        float _1999 = fma(_1005, cbModelParam._m0[21u].z, fma(_1004, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1003));
        float _2002 = fma(_1005, cbModelParam._m0[22u].z, fma(_1004, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1003));
        float _2005 = fma(_1005, cbModelParam._m0[23u].z, fma(_1004, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1003));
        float _2145;
        if (_1999 > 0.0)
        {
            _2145 = abs((1.0 - _1988) / _1999);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1999 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1988 + 1.0) / _1999);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2145 = frontier_phi_30_26_ladder;
        }
        float _2421;
        if (_2002 > 0.0)
        {
            _2421 = abs((1.0 - _1992) / _2002);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2002 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1992 + 1.0) / _2002);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2421 = frontier_phi_42_37_ladder;
        }
        float _2634;
        if (_2005 > 0.0)
        {
            _2634 = abs((1.0 - _1996) / _2005);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_2005 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1996 + 1.0) / _2005);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2634 = frontier_phi_51_48_ladder;
        }
        float _2636 = isnan(_2421) ? _2145 : (isnan(_2145) ? _2421 : min(_2145, _2421));
        float _2637 = isnan(_2634) ? _2636 : (isnan(_2636) ? _2634 : min(_2636, _2634));
        float _2641 = (_2637 * _1999) + _1988;
        float _2642 = (_2637 * _2002) + _1992;
        float _2643 = (_2637 * _2005) + _1996;
        float _2644 = _2637 * 9.9999997473787516355514526367188e-05;
        float _2645 = (-1.0) - _2644;
        float _2647 = _2644 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2643 > _2647) || ((_2643 < _2645) || ((_2642 > _2647) || ((_2642 < _2645) || ((_2641 < _2645) || (_2641 > _2647))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2876 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2643, cbModelParam._m0[17u].z, fma(_2642, cbModelParam._m0[17u].y, _2641 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2643, cbModelParam._m0[18u].z, fma(_2642, cbModelParam._m0[18u].y, _2641 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2643, cbModelParam._m0[19u].z, fma(_2642, cbModelParam._m0[19u].y, _2641 * cbModelParam._m0[19u].x))), _1935);
            frontier_phi_27_51_ladder = _2876.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2876.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2876.x * cbModelParam._m0[1u].z;
        }
        _2024 = frontier_phi_27_51_ladder_2;
        _2026 = frontier_phi_27_51_ladder_1;
        _2028 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _2008 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1003, _1004, _1005), _1935);
        _2024 = _2008.x * cbModelParam._m0[1u].z;
        _2026 = _2008.y * cbModelParam._m0[1u].z;
        _2028 = _2008.z * cbModelParam._m0[1u].z;
    }
    float _2041 = (((_1030 * _980) + _1031) * _995) * ((cbModelParam._m0[1u].w * (_2024 - _1926)) + _1926);
    float _2043 = (((_1030 * _982) + _1031) * _995) * ((cbModelParam._m0[1u].w * (_2026 - _1928)) + _1928);
    float _2045 = (((_1030 * _983) + _1031) * _995) * ((cbModelParam._m0[1u].w * (_2028 - _1930)) + _1930);
    float _2048 = fma(_2045, cbSceneParam._m0[89u].z, fma(_2043, cbSceneParam._m0[89u].y, _2041 * cbSceneParam._m0[89u].x));
    float _2051 = fma(_2045, cbSceneParam._m0[90u].z, fma(_2043, cbSceneParam._m0[90u].y, _2041 * cbSceneParam._m0[90u].x));
    float _2054 = fma(_2045, cbSceneParam._m0[91u].z, fma(_2043, cbSceneParam._m0[91u].y, _2041 * cbSceneParam._m0[91u].x));
    uvec4 _2064 = floatBitsToUint(cbInstanceData._m0[_923 + 5u]);
    uint _2066 = _2064.x * 14u;
    uint _2067 = _2066 + 13u;
    float _2074 = _995 + (-1.0);
    float _2079 = (cbLight._m0[_2067].x * _2074) + 1.0;
    float _2080 = (cbLight._m0[_2067].y * _2074) + 1.0;
    float _2081 = (cbLight._m0[_2067].z * _2074) + 1.0;
    float _2082 = (cbLight._m0[_2067].w * _2074) + 1.0;
    uint _2083 = _2066 + 5u;
    float _2089 = isnan(1.0) ? _2080 : (isnan(_2080) ? 1.0 : min(_2080, 1.0));
    uint _2093 = _2066 + 4u;
    float _2099 = isnan(1.0) ? _2079 : (isnan(_2079) ? 1.0 : min(_2079, 1.0));
    uint _2103 = _2066 | 1u;
    float _2114 = dot(vec3(cbLight._m0[_2066].xyz), vec3(_767, _768, _769));
    float _2117 = dot(vec3(cbLight._m0[_2103].xyz), vec3(_767, _768, _769));
    float _4352 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
    float _4363 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
    float _2122 = (isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0))) * 0.3183098733425140380859375;
    float _2124 = (isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0))) * 0.3183098733425140380859375;
    float _2131 = ((cbLight._m0[_2083].x * _2089) * _2124) + ((cbLight._m0[_2093].x * _2099) * _2122);
    float _2132 = ((_2089 * cbLight._m0[_2083].y) * _2124) + ((_2099 * cbLight._m0[_2093].y) * _2122);
    float _2133 = ((_2089 * cbLight._m0[_2083].z) * _2124) + ((_2099 * cbLight._m0[_2093].z) * _2122);
    uvec4 _2137 = floatBitsToUint(cbLight._m0[_2066 + 12u]);
    bool _2139 = _2137.x == 0u;
    float _2150;
    float _2152;
    float _2154;
    if (_2139)
    {
        _2150 = _2131;
        _2152 = _2132;
        _2154 = _2133;
    }
    else
    {
        uint _2158 = _2066 + 6u;
        float _2174 = (dot(vec3(cbLight._m0[_2066 + 2u].xyz), vec3(_767, _768, _769)) * 0.5) + 0.5;
        float _2175 = _2174 * _2174;
        float _4374 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
        float _2176 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
        float _2177 = isnan(1.0) ? _2081 : (isnan(_2081) ? 1.0 : min(_2081, 1.0));
        _2150 = (((cbLight._m0[_2158].x * 0.3183098733425140380859375) * _2176) * _2177) + _2131;
        _2152 = (((cbLight._m0[_2158].y * 0.3183098733425140380859375) * _2176) * _2177) + _2132;
        _2154 = (((cbLight._m0[_2158].z * 0.3183098733425140380859375) * _2176) * _2177) + _2133;
    }
    bool _2157 = _2137.y == 0u;
    float _2195;
    float _2197;
    float _2199;
    if (_2157)
    {
        _2195 = _2150;
        _2197 = _2152;
        _2199 = _2154;
    }
    else
    {
        uint _2365 = _2066 + 7u;
        float _2381 = (dot(vec3(cbLight._m0[_2066 + 3u].xyz), vec3(_767, _768, _769)) * 0.5) + 0.5;
        float _2382 = _2381 * _2381;
        float _4390 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
        float _2383 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
        float _2384 = isnan(1.0) ? _2082 : (isnan(_2082) ? 1.0 : min(_2082, 1.0));
        _2195 = (((cbLight._m0[_2365].x * 0.3183098733425140380859375) * _2383) * _2384) + _2150;
        _2197 = (((cbLight._m0[_2365].y * 0.3183098733425140380859375) * _2383) * _2384) + _2152;
        _2199 = (((cbLight._m0[_2365].z * 0.3183098733425140380859375) * _2383) * _2384) + _2154;
    }
    uint _2202 = _2066 + 8u;
    float _2215 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2066].w)) * _910) * 0.949999988079071044921875);
    float _2216 = _2215 * _2215;
    float _2217 = cbLight._m0[_2066].x + _847;
    float _2218 = cbLight._m0[_2066].y + _848;
    float _2219 = cbLight._m0[_2066].z + _849;
    float _2223 = inversesqrt(dot(vec3(_2217, _2218, _2219), vec3(_2217, _2218, _2219)));
    float _2224 = _2223 * _2217;
    float _2225 = _2223 * _2218;
    float _2226 = _2223 * _2219;
    float _2227 = dot(vec3(_767, _768, _769), vec3(cbLight._m0[_2066].xyz));
    float _4406 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
    float _2230 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
    float _4417 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
    float _2231 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
    float _2232 = dot(vec3(_767, _768, _769), vec3(_2224, _2225, _2226));
    float _4428 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
    float _2235 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
    float _2236 = dot(vec3(cbLight._m0[_2066].xyz), vec3(_2224, _2225, _2226));
    float _4439 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
    float _2240 = _2216 * _2216;
    float _2244 = ((_2235 * _2235) * (_2240 + (-1.0))) + 1.0;
    float _2252 = exp2(log2(1.0 - (isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0)))) * 5.0);
    float _2253 = 0.959999978542327880859375 - _977;
    float _2255 = 0.959999978542327880859375 - _978;
    float _2256 = 0.959999978542327880859375 - _979;
    float _2263 = 1.0 - _2216;
    float _2274 = (0.5 / (((_2231 * ((_2230 * _2263) + _2216)) + 9.9999999392252902907785028219223e-09) + (((_2231 * _2263) + _2216) * _2230))) * _2230;
    float _4450 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
    float _2276 = (isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0))) * (_2240 / ((_2244 * _2244) * 3.141590118408203125));
    uint _2287 = _2066 + 9u;
    float _2298 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2103].w)) * _910) * 0.949999988079071044921875);
    float _2299 = _2298 * _2298;
    float _2300 = cbLight._m0[_2103].x + _847;
    float _2301 = cbLight._m0[_2103].y + _848;
    float _2302 = cbLight._m0[_2103].z + _849;
    float _2306 = inversesqrt(dot(vec3(_2300, _2301, _2302), vec3(_2300, _2301, _2302)));
    float _2307 = _2306 * _2300;
    float _2308 = _2306 * _2301;
    float _2309 = _2306 * _2302;
    float _2310 = dot(vec3(_767, _768, _769), vec3(cbLight._m0[_2103].xyz));
    float _4461 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
    float _2313 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
    float _2314 = dot(vec3(_767, _768, _769), vec3(_2307, _2308, _2309));
    float _4472 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
    float _2317 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
    float _2318 = dot(vec3(cbLight._m0[_2103].xyz), vec3(_2307, _2308, _2309));
    float _4483 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
    float _2322 = _2299 * _2299;
    float _2326 = ((_2317 * _2317) * (_2322 + (-1.0))) + 1.0;
    float _2333 = exp2(log2(1.0 - (isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0)))) * 5.0);
    float _2340 = 1.0 - _2299;
    float _2350 = (0.5 / (((_2231 * ((_2313 * _2340) + _2299)) + 9.9999999392252902907785028219223e-09) + (((_2231 * _2340) + _2299) * _2313))) * _2313;
    float _4494 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
    float _2352 = (isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0))) * (_2322 / ((_2326 * _2326) * 3.141590118408203125));
    float _2362 = (((((_2333 * _2253) + _980) * cbLight._m0[_2287].x) * _2352) * _2089) + (((((_2252 * _2253) + _980) * cbLight._m0[_2202].x) * _2276) * _2099);
    float _2363 = (((((_2333 * _2255) + _982) * cbLight._m0[_2287].y) * _2352) * _2089) + (((((_2252 * _2255) + _982) * cbLight._m0[_2202].y) * _2276) * _2099);
    float _2364 = (((((_2333 * _2256) + _983) * cbLight._m0[_2287].z) * _2352) * _2089) + (((((_2252 * _2256) + _983) * cbLight._m0[_2202].z) * _2276) * _2099);
    float _2426;
    float _2428;
    float _2430;
    if (_2139)
    {
        _2426 = _2362;
        _2428 = _2363;
        _2430 = _2364;
    }
    else
    {
        uint _2432 = _2066 + 2u;
        uint _2436 = _2066 + 10u;
        float _2450 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2432].w)) * _910) * 0.949999988079071044921875);
        float _2451 = _2450 * _2450;
        float _2452 = cbLight._m0[_2432].x + _847;
        float _2453 = cbLight._m0[_2432].y + _848;
        float _2454 = cbLight._m0[_2432].z + _849;
        float _2458 = inversesqrt(dot(vec3(_2452, _2453, _2454), vec3(_2452, _2453, _2454)));
        float _2459 = _2458 * _2452;
        float _2460 = _2458 * _2453;
        float _2461 = _2458 * _2454;
        float _2462 = dot(vec3(_767, _768, _769), vec3(cbLight._m0[_2432].xyz));
        float _4505 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
        float _2465 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
        float _2466 = dot(vec3(_767, _768, _769), vec3(_2459, _2460, _2461));
        float _4516 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
        float _2469 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
        float _2470 = dot(vec3(cbLight._m0[_2432].xyz), vec3(_2459, _2460, _2461));
        float _4527 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
        float _2474 = _2451 * _2451;
        float _2478 = ((_2469 * _2469) * (_2474 + (-1.0))) + 1.0;
        float _2485 = exp2(log2(1.0 - (isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0)))) * 5.0);
        float _2492 = 1.0 - _2451;
        float _2502 = (0.5 / (((_2231 * ((_2465 * _2492) + _2451)) + 9.9999999392252902907785028219223e-09) + (((_2231 * _2492) + _2451) * _2465))) * _2465;
        float _4538 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
        float _2504 = (isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0))) * (_2474 / ((_2478 * _2478) * 3.141590118408203125));
        float _2505 = isnan(1.0) ? _2081 : (isnan(_2081) ? 1.0 : min(_2081, 1.0));
        _2426 = (((((_2485 * _2253) + _980) * cbLight._m0[_2436].x) * _2504) * _2505) + _2362;
        _2428 = (((((_2485 * _2255) + _982) * cbLight._m0[_2436].y) * _2504) * _2505) + _2363;
        _2430 = (((((_2485 * _2256) + _983) * cbLight._m0[_2436].z) * _2504) * _2505) + _2364;
    }
    float _2540;
    float _2542;
    float _2544;
    if (_2157)
    {
        _2540 = _2426;
        _2542 = _2428;
        _2544 = _2430;
    }
    else
    {
        uint _2551 = _2066 + 3u;
        uint _2555 = _2066 + 11u;
        float _2569 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2551].w)) * _910) * 0.949999988079071044921875);
        float _2570 = _2569 * _2569;
        float _2571 = cbLight._m0[_2551].x + _847;
        float _2572 = cbLight._m0[_2551].y + _848;
        float _2573 = cbLight._m0[_2551].z + _849;
        float _2577 = inversesqrt(dot(vec3(_2571, _2572, _2573), vec3(_2571, _2572, _2573)));
        float _2578 = _2577 * _2571;
        float _2579 = _2577 * _2572;
        float _2580 = _2577 * _2573;
        float _2581 = dot(vec3(_767, _768, _769), vec3(cbLight._m0[_2551].xyz));
        float _4554 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
        float _2584 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
        float _2585 = dot(vec3(_767, _768, _769), vec3(_2578, _2579, _2580));
        float _4565 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
        float _2588 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
        float _2589 = dot(vec3(cbLight._m0[_2551].xyz), vec3(_2578, _2579, _2580));
        float _4576 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
        float _2593 = _2570 * _2570;
        float _2597 = ((_2588 * _2588) * (_2593 + (-1.0))) + 1.0;
        float _2604 = exp2(log2(1.0 - (isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0)))) * 5.0);
        float _2611 = 1.0 - _2570;
        float _2621 = (0.5 / (((_2231 * ((_2584 * _2611) + _2570)) + 9.9999999392252902907785028219223e-09) + (((_2231 * _2611) + _2570) * _2584))) * _2584;
        float _4587 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
        float _2623 = (isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0))) * (_2593 / ((_2597 * _2597) * 3.141590118408203125));
        float _2624 = isnan(1.0) ? _2082 : (isnan(_2082) ? 1.0 : min(_2082, 1.0));
        _2540 = (((((_2604 * _2253) + _980) * cbLight._m0[_2555].x) * _2623) * _2624) + _2426;
        _2542 = (((((_2604 * _2255) + _982) * cbLight._m0[_2555].y) * _2623) * _2624) + _2428;
        _2544 = (((((_2604 * _2256) + _983) * cbLight._m0[_2555].z) * _2623) * _2624) + _2430;
    }
    float _2758;
    float _2760;
    float _2762;
    float _2764;
    float _2766;
    float _2768;
    if (_2064.y == 0u)
    {
        float _2699 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2700 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2699;
        float _2701 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2699;
        float _2702 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2699;
        uvec4 _2714 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2715 = _2714.x;
        uint _2726 = uint((float(_2714.y) * floor(float(uint(cbSceneParam._m0[85u].y * _869) / _2715))) + floor(float(uint(cbSceneParam._m0[85u].x * _868) / _2715)));
        float _2736 = (log2(_2702 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2737 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
        uint _2740 = uint(isnan(14.0) ? _2737 : (isnan(_2737) ? 14.0 : min(_2737, 14.0)));
        uvec4 _2745 = texelFetch(g_lightClusterGridBuffer, int(((_2740 << 2u) + (_2726 << 6u)) >> 2u));
        uint _2746 = _2745.x;
        uint _2747 = _2714.z;
        float _2881;
        float _2883;
        float _2885;
        float _2887;
        float _2889;
        float _2891;
        if (((((1u << ((_2747 >> 4u) & 15u)) + 4294967295u) & _2746) == 0u) || ((_2747 & 240u) == 0u))
        {
            _2881 = 0.0;
            _2883 = 0.0;
            _2885 = 0.0;
            _2887 = 0.0;
            _2889 = 0.0;
            _2891 = 0.0;
        }
        else
        {
            float _2882;
            float _2884;
            float _2886;
            float _2888;
            float _2890;
            float _2892;
            float _3042 = 0.0;
            float _3043 = 0.0;
            float _3044 = 0.0;
            float _3045 = 0.0;
            float _3046 = 0.0;
            float _3047 = 0.0;
            uint _3048 = 0u;
            uint _3057;
            bool _3058;
            for (;;)
            {
                _3057 = texelFetch(g_lightClassification, int((((_2740 << 5u) + (_2726 << 9u)) + (_3048 << 2u)) >> 2u)).x;
                _3058 = _3057 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3058)
                {
                    frontier_phi_68_pred = _3044;
                    frontier_phi_68_pred_1 = _3047;
                    frontier_phi_68_pred_2 = _3046;
                    frontier_phi_68_pred_3 = _3045;
                    frontier_phi_68_pred_4 = _3043;
                    frontier_phi_68_pred_5 = _3042;
                }
                else
                {
                    float _3187;
                    float _3188;
                    float _3189;
                    float _3190;
                    float _3191;
                    float _3192;
                    uint _3193;
                    _3187 = _3042;
                    _3188 = _3043;
                    _3189 = _3044;
                    _3190 = _3045;
                    _3191 = _3046;
                    _3192 = _3047;
                    _3193 = _3057;
                    float _3114;
                    float _3115;
                    float _3116;
                    float _3117;
                    float _3118;
                    float _3119;
                    for (;;)
                    {
                        uint _3197 = uint(findLSB(_3193)) + (_3048 << 5u);
                        uint _3194 = (_3193 + 4294967295u) & _3193;
                        uint _3199 = _3197 * 48u;
                        vec4 _3213 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3199)).x, texelFetch(g_PointLightRenderingBuffer, int(_3199 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3199 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3199 + 3u)).x));
                        uint _3219 = (_3197 * 48u) + 4u;
                        vec4 _3232 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3219)).x, texelFetch(g_PointLightRenderingBuffer, int(_3219 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3219 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3219 + 3u)).x));
                        uint _3238 = (_3197 * 48u) + 8u;
                        vec3 _3249 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3238)).x, texelFetch(g_PointLightRenderingBuffer, int(_3238 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3238 + 2u)).x));
                        float _3253 = _3213.x - _2700;
                        float _3254 = _3213.y - _2701;
                        float _3255 = _3213.z - _2702;
                        float _3256 = dot(vec3(_3253, _3254, _3255), vec3(_3253, _3254, _3255));
                        float _3259 = inversesqrt(_3256);
                        float _3260 = _3259 * _3253;
                        float _3261 = _3259 * _3254;
                        float _3262 = _3259 * _3255;
                        float _3263 = dot(vec3(_891, _894, _897), vec3(_3260, _3261, _3262));
                        float _3268 = 1.0 - (_3256 * _3213.w);
                        float _4613 = isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : max(_3268, 0.0));
                        float _3269 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
                        float _3270 = sqrt(_3256) * _3232.w;
                        float _3273 = 1.39999997615814208984375 / (_3270 + 1.39999997615814208984375);
                        float _3274 = _3273 * _3273;
                        float _3277 = ((1.0 - _3274) * _3263) + _3274;
                        float _3280 = _3270 * _3270;
                        float _3284 = ((isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0))) * _3269) / ((_3280 * 0.699999988079071044921875) + 1.0);
                        float _3288 = (-0.0) - _2700;
                        float _3289 = (-0.0) - _2701;
                        float _3290 = (-0.0) - _2702;
                        float _3294 = inversesqrt(dot(vec3(_3288, _3289, _3290), vec3(_3288, _3289, _3290)));
                        float _3295 = _3294 * _3288;
                        float _3296 = _3294 * _3289;
                        float _3297 = _3294 * _3290;
                        float _3304 = exp2(log2(1.0 / ((_3280 * 3.5) + 5.0)) * 0.25);
                        float _3305 = 1.0 - _1011;
                        float _3312 = sqrt(1.0 - ((1.0 - (_3305 * _3305)) * (1.0 - (_3304 * _3304))));
                        float _3313 = _3312 * _3312;
                        float _3314 = _3313 * _3313;
                        float _3315 = _3295 + _3260;
                        float _3316 = _3296 + _3261;
                        float _3317 = _3297 + _3262;
                        float _3321 = inversesqrt(dot(vec3(_3315, _3316, _3317), vec3(_3315, _3316, _3317)));
                        float _3325 = dot(vec3(_891, _894, _897), vec3(_3295, _3296, _3297));
                        float _4629 = isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : max(_3325, 0.0));
                        float _3328 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
                        float _3329 = dot(vec3(_891, _894, _897), vec3(_3321 * _3315, _3321 * _3316, _3321 * _3317));
                        float _4640 = isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0));
                        float _3332 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
                        float _3336 = ((_3332 * _3332) * (_3314 + (-1.0))) + 1.0;
                        float _3337 = _3273 * _3313;
                        float _3338 = _3337 * _3337;
                        float _3341 = ((1.0 - _3338) * _3263) + _3338;
                        float _4651 = isnan(0.0) ? _3341 : (isnan(_3341) ? 0.0 : max(_3341, 0.0));
                        float _3342 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
                        float _3343 = 1.0 - _3313;
                        float _3353 = (0.5 / (((_3342 * ((_3328 * _3343) + _3313)) + 9.9999999392252902907785028219223e-09) + (((_3342 * _3343) + _3313) * _3328))) * _3342;
                        float _4662 = isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0));
                        float _3364 = (((_3314 * 3.1415927410125732421875) * (isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0)))) / ((_3336 * _3336) * ((_3280 * 2.1991131305694580078125) + 3.141590118408203125))) * _3269;
                        _3117 = (_3284 * _3232.x) + _3190;
                        _3118 = (_3284 * _3232.y) + _3191;
                        _3119 = (_3284 * _3232.z) + _3192;
                        _3114 = (_3364 * _3249.x) + _3187;
                        _3115 = (_3364 * _3249.y) + _3188;
                        _3116 = (_3364 * _3249.z) + _3189;
                        if (_3194 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3187 = _3114;
                            _3188 = _3115;
                            _3189 = _3116;
                            _3190 = _3117;
                            _3191 = _3118;
                            _3192 = _3119;
                            _3193 = _3194;
                        }
                    }
                    frontier_phi_68_pred = _3116;
                    frontier_phi_68_pred_1 = _3119;
                    frontier_phi_68_pred_2 = _3118;
                    frontier_phi_68_pred_3 = _3117;
                    frontier_phi_68_pred_4 = _3115;
                    frontier_phi_68_pred_5 = _3114;
                }
                _2886 = frontier_phi_68_pred;
                _2892 = frontier_phi_68_pred_1;
                _2890 = frontier_phi_68_pred_2;
                _2888 = frontier_phi_68_pred_3;
                _2884 = frontier_phi_68_pred_4;
                _2882 = frontier_phi_68_pred_5;
                uint _3049 = _3048 + 1u;
                if (_3049 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3042 = _2882;
                    _3043 = _2884;
                    _3044 = _2886;
                    _3045 = _2888;
                    _3046 = _2890;
                    _3047 = _2892;
                    _3048 = _3049;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2881 = _2882;
            _2883 = _2884;
            _2885 = _2886;
            _2887 = _2888;
            _2889 = _2890;
            _2891 = _2892;
        }
        uvec4 _2895 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2896 = _2895.z;
        uint _2898 = (_2896 >> 8u) & 15u;
        float _3010;
        float _3012;
        float _3014;
        float _3016;
        float _3018;
        float _3020;
        if (((4294967295u << _2898) & _2746) == 0u)
        {
            _3010 = _2881;
            _3012 = _2883;
            _3014 = _2885;
            _3016 = _2887;
            _3018 = _2889;
            _3020 = _2891;
        }
        else
        {
            float _3035 = inversesqrt(dot(vec3(_2700, _2701, _2702), vec3(_2700, _2701, _2702)));
            float _3036 = _3035 * _2700;
            float _3037 = _3035 * _2701;
            float _3038 = _3035 * _2702;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2898 < ((_2896 >> 12u) & 15u))
            {
                float _3011;
                float _3013;
                float _3015;
                float _3017;
                float _3019;
                float _3021;
                float _3170 = _2881;
                float _3171 = _2883;
                float _3172 = _2885;
                float _3173 = _2887;
                float _3174 = _2889;
                float _3175 = _2891;
                uint _3176 = _2898;
                uint _3185;
                bool _3186;
                for (;;)
                {
                    _3185 = texelFetch(g_lightClassification, int((((_2740 << 5u) + (_2726 << 9u)) + (_3176 << 2u)) >> 2u)).x;
                    _3186 = _3185 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3186)
                    {
                        frontier_phi_79_pred = _3175;
                        frontier_phi_79_pred_1 = _3174;
                        frontier_phi_79_pred_2 = _3173;
                        frontier_phi_79_pred_3 = _3172;
                        frontier_phi_79_pred_4 = _3171;
                        frontier_phi_79_pred_5 = _3170;
                    }
                    else
                    {
                        float _3378;
                        float _3379;
                        float _3380;
                        float _3381;
                        float _3382;
                        float _3383;
                        float _3671;
                        float _3672;
                        float _3673;
                        float _3674;
                        float _3675;
                        float _3676;
                        float _3391 = _3170;
                        float _3392 = _3171;
                        float _3393 = _3172;
                        float _3394 = _3173;
                        float _3395 = _3174;
                        float _3396 = _3175;
                        uint _3397 = _3185;
                        uint _3398;
                        vec4 _3423;
                        float _3424;
                        vec4 _3439;
                        vec3 _3451;
                        vec4 _3466;
                        vec4 _3481;
                        float _3527;
                        bool _3528;
                        for (;;)
                        {
                            uint _3408 = ((_3176 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3397));
                            _3398 = (_3397 + 4294967295u) & _3397;
                            uint _3410 = _3408 * 40u;
                            _3423 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3410)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 3u)).x));
                            _3424 = _3423.w;
                            uint _3426 = (_3408 * 40u) + 4u;
                            _3439 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3426)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 3u)).x));
                            uint _3441 = (_3408 * 40u) + 8u;
                            _3451 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3441)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 2u)).x));
                            uint _3453 = (_3408 * 40u) + 16u;
                            _3466 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3453)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 3u)).x));
                            uint _3468 = (_3408 * 40u) + 20u;
                            _3481 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3468)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 3u)).x));
                            uint _3483 = (_3408 * 40u) + 24u;
                            vec4 _3496 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3483)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 3u)).x));
                            uint _3502 = (_3408 * 40u) + 28u;
                            vec4 _3515 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3502)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 3u)).x));
                            _3527 = fma(_2702, _3515.z, fma(_2701, _3515.y, _3515.x * _2700)) + _3515.w;
                            _3528 = !((fma(_2702, _3496.z, fma(_2701, _3496.y, _3496.x * _2700)) + _3496.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3528)
                            {
                                float _3555 = _3423.x - _2700;
                                float _3556 = _3423.y - _2701;
                                float _3557 = _3423.z - _2702;
                                float _3558 = dot(vec3(_3555, _3556, _3557), vec3(_3555, _3556, _3557));
                                float _3561 = inversesqrt(_3558);
                                float _3562 = _3561 * _3555;
                                float _3563 = _3561 * _3556;
                                float _3564 = _3561 * _3557;
                                float _3568 = 1.0 - (_3558 / (_3424 * _3424));
                                float _4673 = isnan(0.0) ? _3568 : (isnan(_3568) ? 0.0 : max(_3568, 0.0));
                                float _3569 = isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0));
                                float _3573 = sqrt(_3558) * _3439.w;
                                float _3575 = 1.39999997615814208984375 / (_3573 + 1.39999997615814208984375);
                                float _3576 = _3575 * _3575;
                                float _3579 = ((1.0 - _3576) * dot(vec3(_3562, _3563, _3564), vec3(_891, _894, _897))) + _3576;
                                float _3582 = _3573 * _3573;
                                float _3586 = (fma(_2702, _3466.z, fma(_2701, _3466.y, _3466.x * _2700)) + _3466.w) / _3527;
                                float _3587 = (fma(_2702, _3481.z, fma(_2701, _3481.y, _3481.x * _2700)) + _3481.w) / _3527;
                                float _3591 = 1.0 - dot(vec2(_3586, _3587), vec2(_3586, _3587));
                                float _4689 = isnan(0.0) ? _3591 : (isnan(_3591) ? 0.0 : max(_3591, 0.0));
                                float _3592 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
                                float _3593 = _3592 * (((isnan(0.0) ? _3579 : (isnan(_3579) ? 0.0 : max(_3579, 0.0))) * _3569) / ((_3582 * 0.699999988079071044921875) + 1.0));
                                float _3605 = exp2(log2(1.0 / ((_3582 * 3.5) + 5.0)) * 0.25);
                                float _3606 = 1.0 - _1011;
                                float _3613 = sqrt(1.0 - ((1.0 - (_3606 * _3606)) * (1.0 - (_3605 * _3605))));
                                float _3614 = _3613 * _3613;
                                float _3615 = _3614 * _3614;
                                float _3616 = _3562 - _3036;
                                float _3617 = _3563 - _3037;
                                float _3618 = _3564 - _3038;
                                float _3622 = inversesqrt(dot(vec3(_3616, _3617, _3618), vec3(_3616, _3617, _3618)));
                                float _3626 = dot(vec3(_891, _894, _897), vec3((-0.0) - _3036, (-0.0) - _3037, (-0.0) - _3038));
                                float _4700 = isnan(0.0) ? _3626 : (isnan(_3626) ? 0.0 : max(_3626, 0.0));
                                float _3629 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
                                float _3630 = dot(vec3(_891, _894, _897), vec3(_3622 * _3616, _3622 * _3617, _3622 * _3618));
                                float _4711 = isnan(0.0) ? _3630 : (isnan(_3630) ? 0.0 : max(_3630, 0.0));
                                float _3633 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
                                float _3637 = ((_3633 * _3633) * (_3615 + (-1.0))) + 1.0;
                                float _3638 = _3575 * _3614;
                                float _3639 = _3638 * _3638;
                                float _3645 = ((1.0 - _3639) * dot(vec3(_891, _894, _897), vec3(_3562, _3563, _3564))) + _3639;
                                float _4722 = isnan(0.0) ? _3645 : (isnan(_3645) ? 0.0 : max(_3645, 0.0));
                                float _3646 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
                                float _3647 = 1.0 - _3614;
                                float _3657 = (0.5 / (((_3646 * ((_3629 * _3647) + _3614)) + 9.9999999392252902907785028219223e-09) + (((_3646 * _3647) + _3614) * _3629))) * _3646;
                                float _4733 = isnan(0.0) ? _3657 : (isnan(_3657) ? 0.0 : max(_3657, 0.0));
                                float _3667 = (_3592 * _3569) * (((_3615 * 3.1415927410125732421875) * (isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0)))) / ((_3637 * _3637) * ((_3582 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3593 * _3439.z;
                                frontier_phi_85_pred_1 = _3593 * _3439.y;
                                frontier_phi_85_pred_2 = _3593 * _3439.x;
                                frontier_phi_85_pred_3 = _3667 * _3451.z;
                                frontier_phi_85_pred_4 = _3667 * _3451.y;
                                frontier_phi_85_pred_5 = _3667 * _3451.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3676 = frontier_phi_85_pred;
                            _3675 = frontier_phi_85_pred_1;
                            _3674 = frontier_phi_85_pred_2;
                            _3673 = frontier_phi_85_pred_3;
                            _3672 = frontier_phi_85_pred_4;
                            _3671 = frontier_phi_85_pred_5;
                            _3381 = _3674 + _3394;
                            _3382 = _3675 + _3395;
                            _3383 = _3676 + _3396;
                            _3378 = _3671 + _3391;
                            _3379 = _3672 + _3392;
                            _3380 = _3673 + _3393;
                            if (_3398 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3391 = _3378;
                                _3392 = _3379;
                                _3393 = _3380;
                                _3394 = _3381;
                                _3395 = _3382;
                                _3396 = _3383;
                                _3397 = _3398;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3383;
                        frontier_phi_79_pred_1 = _3382;
                        frontier_phi_79_pred_2 = _3381;
                        frontier_phi_79_pred_3 = _3380;
                        frontier_phi_79_pred_4 = _3379;
                        frontier_phi_79_pred_5 = _3378;
                    }
                    _3021 = frontier_phi_79_pred;
                    _3019 = frontier_phi_79_pred_1;
                    _3017 = frontier_phi_79_pred_2;
                    _3015 = frontier_phi_79_pred_3;
                    _3013 = frontier_phi_79_pred_4;
                    _3011 = frontier_phi_79_pred_5;
                    uint _3177 = _3176 + 1u;
                    if (_3177 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3170 = _3011;
                        _3171 = _3013;
                        _3172 = _3015;
                        _3173 = _3017;
                        _3174 = _3019;
                        _3175 = _3021;
                        _3176 = _3177;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3017;
                frontier_phi_60_61_ladder_1 = _3021;
                frontier_phi_60_61_ladder_2 = _3019;
                frontier_phi_60_61_ladder_3 = _3015;
                frontier_phi_60_61_ladder_4 = _3013;
                frontier_phi_60_61_ladder_5 = _3011;
            }
            else
            {
                frontier_phi_60_61_ladder = _2887;
                frontier_phi_60_61_ladder_1 = _2891;
                frontier_phi_60_61_ladder_2 = _2889;
                frontier_phi_60_61_ladder_3 = _2885;
                frontier_phi_60_61_ladder_4 = _2883;
                frontier_phi_60_61_ladder_5 = _2881;
            }
            _3010 = frontier_phi_60_61_ladder_5;
            _3012 = frontier_phi_60_61_ladder_4;
            _3014 = frontier_phi_60_61_ladder_3;
            _3016 = frontier_phi_60_61_ladder;
            _3018 = frontier_phi_60_61_ladder_2;
            _3020 = frontier_phi_60_61_ladder_1;
        }
        float _3025 = isnan(1.0) ? _995 : (isnan(_995) ? 1.0 : min(_995, 1.0));
        _2758 = (_3025 * _3016) + _2195;
        _2760 = (_3025 * _3018) + _2197;
        _2762 = (_3025 * _3020) + _2199;
        _2764 = ((_3010 * _980) * _3025) + _2540;
        _2766 = ((_3012 * _982) * _3025) + _2542;
        _2768 = ((_3014 * _983) * _3025) + _2544;
    }
    else
    {
        _2758 = _2195;
        _2760 = _2197;
        _2762 = _2199;
        _2764 = _2540;
        _2766 = _2542;
        _2768 = _2544;
    }
    uint _2774 = _924 + uint(cbMatDynParam._m0[0u].w);
    float _2782 = ((cbMtdParam._m0[11u].x * cbMtdParam._m0[22u].z) * _711.x) * cbInstanceData._m0[_2774].x;
    float _2785 = ((cbMtdParam._m0[11u].y * cbMtdParam._m0[22u].z) * _711.y) * cbInstanceData._m0[_2774].y;
    float _2788 = ((cbMtdParam._m0[11u].z * cbMtdParam._m0[22u].z) * _711.z) * cbInstanceData._m0[_2774].z;
    float _4749 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
    float _4760 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
    float _4771 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
    float _2805 = (((isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0))) * (_2758 + ((isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0))) * _995))) + ((_2764 + ((isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0))) * _1835)) * cbPerFrame._m0[3u].x)) + _2782;
    float _2807 = (_2785 + ((_2766 + ((isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0))) * _1835)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0))) * (_2760 + ((isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0))) * _995)));
    float _2809 = (_2788 + ((_2768 + ((isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0))) * _1835)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0))) * (_2762 + ((isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0))) * _995)));
    float _2810 = isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0));
    float _2811 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
    float _2812 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0));
    float _2818 = cbMtdParam._m0[2u].x * _2782;
    float _2819 = cbMtdParam._m0[2u].y * _2785;
    float _2820 = cbMtdParam._m0[2u].z * _2788;
    float _4797 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2822 = isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0));
    uint _2823 = _923 + 6u;
    float _2831 = _868 / cbSceneParam._m0[86u].x;
    float _2832 = _869 / cbSceneParam._m0[86u].y;
    vec4 _2846 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2831, _2832, (log2((isnan(cbSceneParam._m0[77u].w) ? _790 : (isnan(_790) ? cbSceneParam._m0[77u].w : min(_790, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2848 = _2846.x;
    float _2849 = _2846.y;
    float _2850 = _2846.z;
    float _2851 = _2846.w;
    float _2943;
    float _2945;
    float _2947;
    float _2949;
    if (_790 > cbSceneParam._m0[78u].w)
    {
        float _2906 = isnan(_790) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _790 : min(cbSceneParam._m0[80u].w, _790));
        float _2907 = _2906 / _790;
        float _2918 = _2907 * _840;
        float _2919 = _841 * _2907;
        float _2920 = (-0.0) - _2919;
        float _2921 = _2907 * _842;
        float _2923 = (cbSceneParam._m0[77u].w * _2920) / _2906;
        float _2924 = _2923 + cbSceneParam._m0[79u].w;
        float _2925 = cbSceneParam._m0[79u].w - _2919;
        float _2931 = sqrt(((_2918 * _2918) + (_2919 * _2919)) + (_2921 * _2921));
        float _2934 = (1.0 - (cbSceneParam._m0[77u].w / _2906)) * _2931;
        float _2939 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2941 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3127;
        if (abs((_2920 - _2923) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3127 = ((((_2924 > 0.0) ? exp2(_2939 * _2924) : (2.0 - exp2(_2941 * _2924))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2934;
        }
        else
        {
            float _3071 = 1.0 / cbSceneParam._m0[80u].x;
            float _3072 = isnan(_2925) ? _2924 : (isnan(_2924) ? _2925 : max(_2924, _2925));
            float _3073 = isnan(_2925) ? _2924 : (isnan(_2924) ? _2925 : min(_2924, _2925));
            float _3082 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : min(_3072, 0.0));
            float _3083 = isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : min(_3073, 0.0));
            _3127 = ((abs(_2931 / _2920) * cbSceneParam._m0[80u].y) * ((((_3082 - _3083) * 2.0) - ((exp2(_2939 * (isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0)))) - exp2(_2939 * (isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0))))) * _3071)) - ((exp2(_2941 * _3082) - exp2(_2941 * _3083)) * _3071))) + (_2934 * cbSceneParam._m0[80u].z);
        }
        vec4 _3129 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2831, _2832, 1.0), 0.0);
        float _3138 = exp2((_3127 * (-1.44269502162933349609375)) * (1.0 - _3129.w));
        float _3139 = log2(_3138);
        float _3155 = log2(_2851);
        _2943 = (exp2(_3155 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3139 * cbSceneParam._m0[78u].x)) * _3129.x) / cbSceneParam._m0[78u].x)) + _2848;
        _2945 = (exp2(_3155 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3139 * cbSceneParam._m0[78u].y)) * _3129.y) / cbSceneParam._m0[78u].y)) + _2849;
        _2947 = (exp2(_3155 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3139 * cbSceneParam._m0[78u].z)) * _3129.z) / cbSceneParam._m0[78u].z)) + _2850;
        _2949 = _3138 * _2851;
    }
    else
    {
        _2943 = _2848;
        _2945 = _2849;
        _2947 = _2850;
        _2949 = _2851;
    }
    bool _3165;
    vec4 _2959;
    vec4 _2981;
    float _2983;
    float _2987;
    float _2988;
    float _2989;
    float _2992;
    float _2995;
    float _2998;
    float _2999;
    bool _3009;
    for (;;)
    {
        _2959 = cbMatDynParam._m0[0u];
        float _2961 = roundEven(_2959.y);
        bool _2962 = _2961 == 3.0;
        float _2963 = log2(_2949);
        float _2967 = exp2(_2963 * cbSceneParam._m0[78u].x);
        float _2968 = exp2(_2963 * cbSceneParam._m0[78u].y);
        float _2969 = exp2(_2963 * cbSceneParam._m0[78u].z);
        float _2970 = _2967 * _2810;
        float _2971 = _2968 * _2811;
        float _2972 = _2969 * _2812;
        float _2979 = _856 + (-0.5);
        _2981 = cbMtdParam._m0[1u];
        _2983 = _2981.y * _2979;
        float _2986 = (_2961 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2987 = _2986 * (_2962 ? _2970 : (_2970 + (cbSceneParam._m0[72u].w * _2943)));
        _2988 = _2986 * (_2962 ? _2971 : (_2971 + (cbSceneParam._m0[72u].w * _2945)));
        _2989 = _2986 * (_2962 ? _2972 : (_2972 + (cbSceneParam._m0[72u].w * _2947)));
        _2992 = ((_2818 * _2822) * _2967) * _2986;
        _2995 = ((_2819 * _2822) * _2968) * _2986;
        _2998 = ((_2820 * _2822) * _2969) * _2986;
        _2999 = _2979 * 0.999000012874603271484375;
        _3009 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3009)
        {
            if ((cbInstanceData._m0[_923 + 7u].x + _2999) < 0.5)
            {
                _3165 = true;
                break;
            }
        }
        uint _3106 = _924 + uint(_2959.w);
        if ((cbInstanceData._m0[_3106].w < 1.0) && ((cbInstanceData._m0[_3106].w + _2999) < 0.5))
        {
            _3165 = true;
            break;
        }
        if ((_2983 + 1.0) < _2981.x)
        {
            _3165 = true;
            break;
        }
        _3165 = false;
        break;
    }
    float _3369;
    if (_3165)
    {
        discard_state = true;
        _3369 = 0.0;
    }
    else
    {
        _3369 = cbInstanceData._m0[_2823].w;
    }
    SV_Target.x = _2987;
    SV_Target.y = _2988;
    SV_Target.z = _2989;
    SV_Target.w = _3369;
    SV_Target_1.x = _2992;
    SV_Target_1.y = _2995;
    SV_Target_1.z = _2998;
    SV_Target_1.w = cbInstanceData._m0[_2823].w;
    discard_exit();
}


