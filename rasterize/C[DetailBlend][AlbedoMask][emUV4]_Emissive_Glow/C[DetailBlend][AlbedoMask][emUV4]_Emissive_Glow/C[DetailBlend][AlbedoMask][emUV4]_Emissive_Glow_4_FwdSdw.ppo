#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 11) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 12) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1269;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _228 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = _235 * NORMAL.x;
    float _237 = _235 * NORMAL.y;
    float _238 = _235 * NORMAL.z;
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _250;
    float _251;
    float _252;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _250 = (-0.0) - _236;
        _251 = (-0.0) - _237;
        _252 = (-0.0) - _238;
    }
    else
    {
        _250 = _236;
        _251 = _237;
        _252 = _238;
    }
    vec4 _267 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _277 = log2(0.0);
    float _279 = exp2(_277 * cbMtdParam._m0[21u].y);
    float _280 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _281 = isnan(1.0) ? _280 : (isnan(_280) ? 1.0 : min(_280, 1.0));
    vec4 _295 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _299 = _295.z;
    float _300 = _295.w;
    float _308 = exp2(log2(_299 * cbMtdParam._m0[21u].w) * cbMtdParam._m0[20u].y);
    float _309 = isnan(0.0) ? _308 : (isnan(_308) ? 0.0 : max(_308, 0.0));
    float _310 = isnan(1.0) ? _309 : (isnan(_309) ? 1.0 : min(_309, 1.0));
    vec4 _323 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    vec4 _348 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _358 = cbMtdParam._m0[9u].x * _348.x;
    float _359 = cbMtdParam._m0[9u].y * _348.y;
    float _360 = cbMtdParam._m0[9u].z * _348.z;
    float _367 = (((cbMtdParam._m0[10u].x * _323.x) - _358) * _310) + _358;
    float _368 = (((cbMtdParam._m0[10u].y * _323.y) - _359) * _310) + _359;
    float _369 = (((cbMtdParam._m0[10u].z * _323.z) - _360) * _310) + _360;
    float _376 = exp2(log2(_300) * cbMtdParam._m0[22u].y);
    vec4 _389 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _409 = (((cbMtdParam._m0[12u].x * _389.x) - _367) * _376) + _367;
    float _410 = (((cbMtdParam._m0[12u].y * _389.y) - _368) * _376) + _368;
    float _411 = (((cbMtdParam._m0[12u].z * _389.z) - _369) * _376) + _369;
    vec4 _423 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _447 = (_267.x * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].x * _423.x) - _409) * _281) + _409);
    float _449 = (_267.y * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].y * _423.y) - _410) * _281) + _410);
    float _451 = (_267.z * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].z * _423.z) - _411) * _281) + _411);
    float _456 = exp2(log2(1.0 - _300) * 0.00999999977648258209228515625);
    float _474 = ((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_11, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x - cbMtdParam._m0[22u].w) * _456) + cbMtdParam._m0[22u].w;
    float _493 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w)).x - _474) + cbMtdParam._m0[21u].z) * _376) + _474;
    float _515 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w)).x - _493) + cbMtdParam._m0[23u].w) * _281) + _493;
    vec4 _528 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _546 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _548 = _546.x;
    float _549 = _546.y;
    float _552 = cbMtdParam._m0[20u].x + _546.z;
    float _555 = (((cbMtdParam._m0[21u].x + _528.z) - _552) * _456) + _552;
    vec4 _568 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _580 = (_299 * 2.0) * ((((_568.z - _555) + cbMtdParam._m0[23u].y) * _376) + _555);
    vec4 _593 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _602 = (((_593.z - _580) + cbMtdParam._m0[22u].x) * _281) + _580;
    vec4 _621 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _636 = ((_528.x - _548) * _456) + _548;
    float _637 = ((_528.y - _549) * _456) + _549;
    float _642 = ((_568.x - _636) * _376) + _636;
    float _643 = ((_568.y - _637) * _376) + _637;
    float _652 = ((((_593.x - _642) * _281) + _642) * 2.0) + (-1.0);
    float _653 = ((((_593.y - _643) * _281) + _643) * 2.0) + (-1.0);
    float _654 = dot(vec2(_652, _653), vec2(_652, _653));
    float _3945 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _659 = sqrt(1.0 - (isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))));
    float _662 = (cbMtdParam._m0[23u].x * ((_295.x * 2.0) + (-1.0))) + _652;
    float _663 = (cbMtdParam._m0[23u].x * ((_295.y * 2.0) + (-1.0))) + _653;
    float _666 = fma(_659, _250, fma(_663, _242 * TANGENT.x, (_228 * _221) * _662));
    float _669 = fma(_659, _251, fma(_663, _242 * TANGENT.y, (_228 * _222) * _662));
    float _672 = fma(_659, _252, fma(_663, _242 * TANGENT.z, (_228 * _223) * _662));
    float _676 = inversesqrt(dot(vec3(_666, _669, _672), vec3(_666, _669, _672)));
    float _677 = _676 * _666;
    float _678 = _676 * _669;
    float _679 = _676 * _672;
    float _3956 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _680 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
    float _3967 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _3978 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _3989 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _4000 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _684 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
    float _700 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _740 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _750 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _740);
    float _751 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _740);
    float _752 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _740);
    float _756 = inversesqrt(dot(vec3(_750, _751, _752), vec3(_750, _751, _752)));
    float _757 = _750 * _756;
    float _758 = _751 * _756;
    float _759 = _752 * _756;
    float _765 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _766 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _768 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _770 = _768.w;
    float _790 = fma(_679, cbSceneParam._m0[5u].z, fma(_678, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _677));
    float _793 = fma(_679, cbSceneParam._m0[6u].z, fma(_678, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _677));
    float _796 = fma(_679, cbSceneParam._m0[7u].z, fma(_678, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _677));
    vec4 _798 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _809 = (((_798.y - _680) + (_798.w * _680)) * cbMtdParam._m0[3u].x) + _680;
    uint _822 = uint(roundEven(NORMAL.w)) * 13u;
    uint _823 = _822 + 9u;
    uint _824 = _823 + uint(cbMatDynParam._m0[0u].w);
    float _830 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0)))) * cbInstanceData._m0[_824].x;
    float _831 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0)))) * cbInstanceData._m0[_824].y;
    float _832 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0)))) * cbInstanceData._m0[_824].z;
    float _4011 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _833 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
    float _4022 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _834 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
    float _4033 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _835 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
    vec4 _836 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _841 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _852 = (((_841.x - _684) + (_841.w * _684)) * cbMtdParam._m0[3u].x) + _684;
    float _865 = (cbMtdParam._m0[3u].x * (((_833 * _770) - _833) + _836.x)) + _833;
    float _866 = (cbMtdParam._m0[3u].x * (((_834 * _770) - _834) + _836.y)) + _834;
    float _867 = (cbMtdParam._m0[3u].x * (((_835 * _770) - _835) + _836.z)) + _835;
    float _868 = 1.0 - _852;
    float _869 = _868 * _865;
    float _870 = _868 * _866;
    float _871 = _868 * _867;
    float _876 = (_865 + (-0.039999999105930328369140625)) * _852;
    float _877 = (_866 + (-0.039999999105930328369140625)) * _852;
    float _878 = (_867 + (-0.039999999105930328369140625)) * _852;
    float _879 = _876 + 0.039999999105930328369140625;
    float _881 = _877 + 0.039999999105930328369140625;
    float _882 = _878 + 0.039999999105930328369140625;
    vec4 _891 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _765, cbSceneParam._m0[86u].y * _766));
    float _894 = _891.x * TEXCOORD_4.z;
    float _895 = dot(vec3(_677, _678, _679), vec3(_757, _758, _759));
    float _898 = _895 * 2.0;
    float _902 = (_898 * _677) - _757;
    float _903 = (_898 * _678) - _758;
    float _904 = (_898 * _679) - _759;
    float _908 = abs(dot(vec3(_757, _758, _759), vec3(_677, _678, _679)));
    float _4044 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _910 = sqrt(_809);
    float _923 = exp2((_910 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_910 * 3.0));
    float _929 = (1.0 - _923) * ((_910 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _930 = _923 * _910;
    float _958 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _962 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _966 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1268;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _993 = fma(_966, cbModelParam._m0[26u].z, fma(_962, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _958));
        float _997 = fma(_966, cbModelParam._m0[27u].z, fma(_962, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _958));
        float _1001 = fma(_966, cbModelParam._m0[28u].z, fma(_962, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _958));
        float _1026 = _958 + _677;
        float _1027 = _962 + _678;
        float _1028 = _966 + _679;
        float _1038 = fma(_1028, cbModelParam._m0[26u].z, fma(_1027, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1026)) - _993;
        float _1039 = fma(_1028, cbModelParam._m0[27u].z, fma(_1027, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1026)) - _997;
        float _1040 = fma(_1028, cbModelParam._m0[28u].z, fma(_1027, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1026)) - _1001;
        float _1044 = inversesqrt(dot(vec3(_1038, _1039, _1040), vec3(_1038, _1039, _1040)));
        float _1057 = ((_1044 * _1038) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_993 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1058 = ((_1044 * _1039) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_997 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1059 = ((_1044 * _1040) / cbModelParam._m0[34u].z) + ((((((_1001 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1062 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1057, _1058, _1059), 0.0);
        vec4 _1069 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1057, _1058, _1059), 0.0);
        vec4 _1076 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1057, _1058, _1059), 0.0);
        vec4 _1083 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1057, _1058, _1059), 0.0);
        float _1096 = exp2((_1062.w + (-0.5)) * 20.0) * 2.0;
        float _1097 = _1096 * (_1062.x + (-0.5));
        float _1098 = _1096 * (_1062.y + (-0.5));
        float _1099 = _1096 * (_1062.z + (-0.5));
        float _1106 = exp2((_1069.w + (-0.5)) * 20.0) * 2.0;
        float _1107 = _1106 * (_1069.x + (-0.5));
        float _1108 = _1106 * (_1069.y + (-0.5));
        float _1109 = _1106 * (_1069.z + (-0.5));
        float _1116 = exp2((_1076.w + (-0.5)) * 20.0) * 2.0;
        float _1117 = _1116 * (_1076.x + (-0.5));
        float _1118 = _1116 * (_1076.y + (-0.5));
        float _1119 = _1116 * (_1076.z + (-0.5));
        float _1126 = exp2((_1083.w + (-0.5)) * 20.0) * 2.0;
        float _1127 = _1126 * (_1083.x + (-0.5));
        float _1128 = _1126 * (_1083.y + (-0.5));
        float _1129 = _1126 * (_1083.z + (-0.5));
        float _1130 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1131 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1132 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1133 = _1097 * 0.5;
        float _1134 = _1107 * 0.5;
        float _1135 = _1117 * 0.5;
        float _1136 = dot(vec3(_1133, _1134, _1135), vec3(_1133, _1134, _1135));
        float _1141 = (_1136 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1136);
        float _1150 = (dot(vec3(_677, _678, _679), vec3(_1141 * _1133, _1141 * _1134, _1141 * _1135)) + 1.0) * 0.5;
        float _4070 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1160 = sqrt(((_1134 * _1134) + (_1133 * _1133)) + (_1135 * _1135)) / (_1130 + 9.9999997473787516355514526367188e-06);
        float _4081 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _1162 = _1161 * 2.0;
        float _1166 = (1.0 - _1161) / (_1161 + 1.0);
        float _4092 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1167 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _1176 = ((((1.0 - _1167) * (_1162 + 2.0)) * exp2(log2(isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0))) * (_1162 + 1.0))) + _1167) * _1130;
        float _1177 = _1098 * 0.5;
        float _1178 = _1108 * 0.5;
        float _1179 = _1118 * 0.5;
        float _1180 = dot(vec3(_1177, _1178, _1179), vec3(_1177, _1178, _1179));
        float _1185 = (_1180 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1180);
        float _1193 = (dot(vec3(_677, _678, _679), vec3(_1185 * _1177, _1185 * _1178, _1185 * _1179)) + 1.0) * 0.5;
        float _4103 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1202 = sqrt(((_1178 * _1178) + (_1177 * _1177)) + (_1179 * _1179)) / (_1131 + 9.9999997473787516355514526367188e-06);
        float _4114 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _1204 = _1203 * 2.0;
        float _1208 = (1.0 - _1203) / (_1203 + 1.0);
        float _4125 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1209 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _1218 = ((((1.0 - _1209) * (_1204 + 2.0)) * exp2(log2(isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))) * (_1204 + 1.0))) + _1209) * _1131;
        float _1219 = _1099 * 0.5;
        float _1220 = _1109 * 0.5;
        float _1221 = _1119 * 0.5;
        float _1222 = dot(vec3(_1219, _1220, _1221), vec3(_1219, _1220, _1221));
        float _1227 = (_1222 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1222);
        float _1235 = (dot(vec3(_677, _678, _679), vec3(_1227 * _1219, _1227 * _1220, _1227 * _1221)) + 1.0) * 0.5;
        float _4136 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1244 = sqrt(((_1220 * _1220) + (_1219 * _1219)) + (_1221 * _1221)) / (_1132 + 9.9999997473787516355514526367188e-06);
        float _4147 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _1246 = _1245 * 2.0;
        float _1250 = (1.0 - _1245) / (_1245 + 1.0);
        float _4158 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1260 = ((((1.0 - _1251) * (_1246 + 2.0)) * exp2(log2(isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * (_1246 + 1.0))) + _1251) * _1132;
        _1268 = _1099;
        _1270 = _1098;
        _1271 = _1097;
        _1272 = _1109;
        _1273 = _1108;
        _1274 = _1107;
        _1275 = _1119;
        _1276 = _1118;
        _1277 = _1117;
        _1278 = _1132;
        _1279 = _1131;
        _1280 = _1130;
        _1281 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0)));
        _1282 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0)));
        _1283 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0)));
    }
    else
    {
        _1268 = _1269;
        _1270 = _1269;
        _1271 = _1269;
        _1272 = _1269;
        _1273 = _1269;
        _1274 = _1269;
        _1275 = _1269;
        _1276 = _1269;
        _1277 = _1269;
        _1278 = _1269;
        _1279 = _1269;
        _1280 = _1269;
        _1281 = 0.0;
        _1282 = 0.0;
        _1283 = 0.0;
    }
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1309 = fma(_966, cbModelParam._m0[30u].z, fma(_962, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _958));
        float _1313 = fma(_966, cbModelParam._m0[31u].z, fma(_962, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _958));
        float _1317 = fma(_966, cbModelParam._m0[32u].z, fma(_962, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _958));
        float _1340 = _958 + _677;
        float _1341 = _962 + _678;
        float _1342 = _966 + _679;
        float _1352 = fma(_1342, cbModelParam._m0[30u].z, fma(_1341, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1340)) - _1309;
        float _1353 = fma(_1342, cbModelParam._m0[31u].z, fma(_1341, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1340)) - _1313;
        float _1354 = fma(_1342, cbModelParam._m0[32u].z, fma(_1341, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1340)) - _1317;
        float _1358 = inversesqrt(dot(vec3(_1352, _1353, _1354), vec3(_1352, _1353, _1354)));
        float _1371 = ((_1358 * _1352) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1309 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1372 = ((_1358 * _1353) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1313 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1373 = ((_1358 * _1354) / cbModelParam._m0[35u].z) + ((((((_1317 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1375 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1371, _1372, _1373), 0.0);
        vec4 _1382 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1371, _1372, _1373), 0.0);
        vec4 _1389 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1371, _1372, _1373), 0.0);
        vec4 _1396 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1371, _1372, _1373), 0.0);
        float _1408 = exp2((_1375.w + (-0.5)) * 20.0) * 2.0;
        float _1409 = _1408 * (_1375.x + (-0.5));
        float _1410 = _1408 * (_1375.y + (-0.5));
        float _1411 = _1408 * (_1375.z + (-0.5));
        float _1418 = exp2((_1382.w + (-0.5)) * 20.0) * 2.0;
        float _1419 = _1418 * (_1382.x + (-0.5));
        float _1420 = _1418 * (_1382.y + (-0.5));
        float _1421 = _1418 * (_1382.z + (-0.5));
        float _1428 = exp2((_1389.w + (-0.5)) * 20.0) * 2.0;
        float _1429 = _1428 * (_1389.x + (-0.5));
        float _1430 = _1428 * (_1389.y + (-0.5));
        float _1431 = _1428 * (_1389.z + (-0.5));
        float _1438 = exp2((_1396.w + (-0.5)) * 20.0) * 2.0;
        float _1439 = _1438 * (_1396.x + (-0.5));
        float _1440 = _1438 * (_1396.y + (-0.5));
        float _1441 = _1438 * (_1396.z + (-0.5));
        float _1442 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1443 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1444 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1445 = _1409 * 0.5;
        float _1446 = _1419 * 0.5;
        float _1447 = _1429 * 0.5;
        float _1448 = dot(vec3(_1445, _1446, _1447), vec3(_1445, _1446, _1447));
        float _1453 = (_1448 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1448);
        float _1461 = (dot(vec3(_677, _678, _679), vec3(_1453 * _1445, _1453 * _1446, _1453 * _1447)) + 1.0) * 0.5;
        float _4199 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1470 = sqrt(((_1446 * _1446) + (_1445 * _1445)) + (_1447 * _1447)) / (_1442 + 9.9999997473787516355514526367188e-06);
        float _4210 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1471 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _1472 = _1471 * 2.0;
        float _1476 = (1.0 - _1471) / (_1471 + 1.0);
        float _4221 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1477 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _1486 = ((((1.0 - _1477) * (_1472 + 2.0)) * exp2(log2(isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0))) * (_1472 + 1.0))) + _1477) * _1442;
        float _1487 = _1410 * 0.5;
        float _1488 = _1420 * 0.5;
        float _1489 = _1430 * 0.5;
        float _1490 = dot(vec3(_1487, _1488, _1489), vec3(_1487, _1488, _1489));
        float _1495 = (_1490 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1490);
        float _1503 = (dot(vec3(_677, _678, _679), vec3(_1495 * _1487, _1495 * _1488, _1495 * _1489)) + 1.0) * 0.5;
        float _4232 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1512 = sqrt(((_1488 * _1488) + (_1487 * _1487)) + (_1489 * _1489)) / (_1443 + 9.9999997473787516355514526367188e-06);
        float _4243 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1513 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _1514 = _1513 * 2.0;
        float _1518 = (1.0 - _1513) / (_1513 + 1.0);
        float _4254 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1519 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _1528 = ((((1.0 - _1519) * (_1514 + 2.0)) * exp2(log2(isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * (_1514 + 1.0))) + _1519) * _1443;
        float _1529 = _1411 * 0.5;
        float _1530 = _1421 * 0.5;
        float _1531 = _1431 * 0.5;
        float _1532 = dot(vec3(_1529, _1530, _1531), vec3(_1529, _1530, _1531));
        float _1537 = (_1532 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1532);
        float _1545 = (dot(vec3(_677, _678, _679), vec3(_1537 * _1529, _1537 * _1530, _1537 * _1531)) + 1.0) * 0.5;
        float _4265 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1554 = sqrt(((_1530 * _1530) + (_1529 * _1529)) + (_1531 * _1531)) / (_1444 + 9.9999997473787516355514526367188e-06);
        float _4276 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1555 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _1556 = _1555 * 2.0;
        float _1560 = (1.0 - _1555) / (_1555 + 1.0);
        float _4287 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1561 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
        float _1570 = ((((1.0 - _1561) * (_1556 + 2.0)) * exp2(log2(isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0))) * (_1556 + 1.0))) + _1561) * _1444;
        _1578 = _1411;
        _1579 = _1410;
        _1580 = _1409;
        _1581 = _1421;
        _1582 = _1420;
        _1583 = _1419;
        _1584 = _1431;
        _1585 = _1430;
        _1586 = _1429;
        _1587 = _1444;
        _1588 = _1443;
        _1589 = _1442;
        _1590 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0)));
        _1591 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0)));
        _1592 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0)));
    }
    else
    {
        _1578 = _1269;
        _1579 = _1269;
        _1580 = _1269;
        _1581 = _1269;
        _1582 = _1269;
        _1583 = _1269;
        _1584 = _1269;
        _1585 = _1269;
        _1586 = _1269;
        _1587 = _1269;
        _1588 = _1269;
        _1589 = _1269;
        _1590 = 0.0;
        _1591 = 0.0;
        _1592 = 0.0;
    }
    float _1602 = (cbModelParam._m0[1u].x * (_1590 - _1281)) + _1281;
    float _1603 = (cbModelParam._m0[1u].x * (_1591 - _1282)) + _1282;
    float _1604 = (cbModelParam._m0[1u].x * (_1592 - _1283)) + _1283;
    float _1625 = fma(_1604, cbSceneParam._m0[89u].z, fma(_1603, cbSceneParam._m0[89u].y, _1602 * cbSceneParam._m0[89u].x));
    float _1628 = fma(_1604, cbSceneParam._m0[90u].z, fma(_1603, cbSceneParam._m0[90u].y, _1602 * cbSceneParam._m0[90u].x));
    float _1631 = fma(_1604, cbSceneParam._m0[91u].z, fma(_1603, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1602));
    float _1646 = _902 * 0.5;
    float _1647 = _903 * 0.5;
    float _1648 = _904 * 0.5;
    float _1649 = dot(vec4(_1646, _1647, _1648, 1.0), vec4(_1580, _1583, _1586, _1589));
    float _1652 = dot(vec4(_1646, _1647, _1648, 1.0), vec4(_1579, _1582, _1585, _1588));
    float _1655 = dot(vec4(_1646, _1647, _1648, 1.0), vec4(_1578, _1581, _1584, _1587));
    float _1689;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1662 = dot(vec4(_1646, _1647, _1648, 1.0), vec4(_1268, _1272, _1275, _1278));
        float _1666 = dot(vec4(_1646, _1647, _1648, 1.0), vec4(_1270, _1273, _1276, _1279));
        float _1670 = dot(vec4(_1646, _1647, _1648, 1.0), vec4(_1271, _1274, _1277, _1280));
        float _1677 = dot(vec4(cbModelParam._m0[39u]), vec4(_1646, _1647, _1648, 1.0));
        _1689 = dot(vec3(isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0)), isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0)), isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1677) ? 0.0 : (isnan(0.0) ? _1677 : max(0.0, _1677))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1689 = 1.0;
    }
    float _1700;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1691 = dot(vec4(cbModelParam._m0[40u]), vec4(_1646, _1647, _1648, 1.0));
        _1700 = dot(vec3(isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0)), isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0)), isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1691) ? 0.0 : (isnan(0.0) ? _1691 : max(0.0, _1691))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1700 = 1.0;
    }
    float _1704 = (_1700 * cbModelParam._m0[1u].x) + (_1689 * (1.0 - cbModelParam._m0[1u].x));
    float _1714 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _809);
    float _1715 = isnan(_1714) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1714 : min(cbModelParam._m0[25u].z, _1714));
    float _1795;
    float _1797;
    float _1799;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1762 = fma(_966, cbModelParam._m0[13u].z, fma(_962, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _958)) + cbModelParam._m0[13u].w;
        float _1766 = fma(_966, cbModelParam._m0[14u].z, fma(_962, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _958)) + cbModelParam._m0[14u].w;
        float _1770 = fma(_966, cbModelParam._m0[15u].z, fma(_962, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _958)) + cbModelParam._m0[15u].w;
        float _1773 = fma(_904, cbModelParam._m0[13u].z, fma(_903, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _902));
        float _1776 = fma(_904, cbModelParam._m0[14u].z, fma(_903, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _902));
        float _1779 = fma(_904, cbModelParam._m0[15u].z, fma(_903, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _902));
        float _1807;
        if (_1773 > 0.0)
        {
            _1807 = abs((1.0 - _1762) / _1773);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1773 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1762 + 1.0) / _1773);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1807 = frontier_phi_16_14_ladder;
        }
        float _1980;
        if (_1776 > 0.0)
        {
            _1980 = abs((1.0 - _1766) / _1776);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1776 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1766 + 1.0) / _1776);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1980 = frontier_phi_25_21_ladder;
        }
        float _2275;
        if (_1779 > 0.0)
        {
            _2275 = abs((1.0 - _1770) / _1779);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1779 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1770 + 1.0) / _1779);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2275 = frontier_phi_37_32_ladder;
        }
        float _2277 = isnan(_1980) ? _1807 : (isnan(_1807) ? _1980 : min(_1807, _1980));
        float _2278 = isnan(_2275) ? _2277 : (isnan(_2277) ? _2275 : min(_2277, _2275));
        float _2282 = (_2278 * _1773) + _1762;
        float _2283 = (_2278 * _1776) + _1766;
        float _2284 = (_2278 * _1779) + _1770;
        float _2285 = _2278 * 9.9999997473787516355514526367188e-05;
        float _2287 = (-1.0) - _2285;
        float _2289 = _2285 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2284 > _2289) || ((_2284 < _2287) || ((_2283 > _2289) || ((_2283 < _2287) || ((_2282 < _2287) || (_2282 > _2289))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2429 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2284, cbModelParam._m0[9u].z, fma(_2283, cbModelParam._m0[9u].y, _2282 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2284, cbModelParam._m0[10u].z, fma(_2283, cbModelParam._m0[10u].y, _2282 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2284, cbModelParam._m0[11u].z, fma(_2283, cbModelParam._m0[11u].y, _2282 * cbModelParam._m0[11u].x))), _1715);
            frontier_phi_15_37_ladder = _2429.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2429.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2429.z * cbModelParam._m0[1u].y;
        }
        _1795 = frontier_phi_15_37_ladder_1;
        _1797 = frontier_phi_15_37_ladder;
        _1799 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1783 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_902, _903, _904), _1715);
        _1795 = _1783.x * cbModelParam._m0[1u].y;
        _1797 = _1783.y * cbModelParam._m0[1u].y;
        _1799 = _1783.z * cbModelParam._m0[1u].y;
    }
    float _1803 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _809);
    float _1804 = isnan(_1803) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1803 : min(cbModelParam._m0[25u].w, _1803));
    float _1895;
    float _1897;
    float _1899;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1859 = fma(_966, cbModelParam._m0[21u].z, fma(_962, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _958)) + cbModelParam._m0[21u].w;
        float _1863 = fma(_966, cbModelParam._m0[22u].z, fma(_962, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _958)) + cbModelParam._m0[22u].w;
        float _1867 = fma(_966, cbModelParam._m0[23u].z, fma(_962, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _958)) + cbModelParam._m0[23u].w;
        float _1870 = fma(_904, cbModelParam._m0[21u].z, fma(_903, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _902));
        float _1873 = fma(_904, cbModelParam._m0[22u].z, fma(_903, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _902));
        float _1876 = fma(_904, cbModelParam._m0[23u].z, fma(_903, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _902));
        float _1985;
        if (_1870 > 0.0)
        {
            _1985 = abs((1.0 - _1859) / _1870);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1870 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1859 + 1.0) / _1870);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1985 = frontier_phi_27_23_ladder;
        }
        float _2302;
        if (_1873 > 0.0)
        {
            _2302 = abs((1.0 - _1863) / _1873);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1873 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1863 + 1.0) / _1873);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2302 = frontier_phi_39_34_ladder;
        }
        float _2640;
        if (_1876 > 0.0)
        {
            _2640 = abs((1.0 - _1867) / _1876);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1876 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1867 + 1.0) / _1876);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2640 = frontier_phi_49_46_ladder;
        }
        float _2642 = isnan(_2302) ? _1985 : (isnan(_1985) ? _2302 : min(_1985, _2302));
        float _2643 = isnan(_2640) ? _2642 : (isnan(_2642) ? _2640 : min(_2642, _2640));
        float _2647 = (_2643 * _1870) + _1859;
        float _2648 = (_2643 * _1873) + _1863;
        float _2649 = (_2643 * _1876) + _1867;
        float _2650 = _2643 * 9.9999997473787516355514526367188e-05;
        float _2651 = (-1.0) - _2650;
        float _2653 = _2650 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2649 > _2653) || ((_2649 < _2651) || ((_2648 > _2653) || ((_2648 < _2651) || ((_2647 < _2651) || (_2647 > _2653))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2771 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2649, cbModelParam._m0[17u].z, fma(_2648, cbModelParam._m0[17u].y, _2647 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2649, cbModelParam._m0[18u].z, fma(_2648, cbModelParam._m0[18u].y, _2647 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2649, cbModelParam._m0[19u].z, fma(_2648, cbModelParam._m0[19u].y, _2647 * cbModelParam._m0[19u].x))), _1804);
            frontier_phi_24_49_ladder = _2771.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2771.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2771.x * cbModelParam._m0[1u].z;
        }
        _1895 = frontier_phi_24_49_ladder_2;
        _1897 = frontier_phi_24_49_ladder_1;
        _1899 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1879 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_902, _903, _904), _1804);
        _1895 = _1879.x * cbModelParam._m0[1u].z;
        _1897 = _1879.y * cbModelParam._m0[1u].z;
        _1899 = _1879.z * cbModelParam._m0[1u].z;
    }
    float _1912 = (((_929 * _879) + _930) * _894) * ((cbModelParam._m0[1u].w * (_1895 - _1795)) + _1795);
    float _1914 = (((_929 * _881) + _930) * _894) * ((cbModelParam._m0[1u].w * (_1897 - _1797)) + _1797);
    float _1916 = (((_929 * _882) + _930) * _894) * ((cbModelParam._m0[1u].w * (_1899 - _1799)) + _1799);
    float _1919 = fma(_1916, cbSceneParam._m0[89u].z, fma(_1914, cbSceneParam._m0[89u].y, _1912 * cbSceneParam._m0[89u].x));
    float _1922 = fma(_1916, cbSceneParam._m0[90u].z, fma(_1914, cbSceneParam._m0[90u].y, _1912 * cbSceneParam._m0[90u].x));
    float _1925 = fma(_1916, cbSceneParam._m0[91u].z, fma(_1914, cbSceneParam._m0[91u].y, _1912 * cbSceneParam._m0[91u].x));
    float _1959 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1963 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1967 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1971 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1972 = _1959 / _1971;
    float _1973 = _1963 / _1971;
    float _1974 = _1967 / _1971;
    float _2121;
    float _2122;
    float _2123;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2001 = ((uint(_1974 > cbSceneParam._m0[59u].y) + uint(_1974 > cbSceneParam._m0[59u].x)) + uint(_1974 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2002 = _2001 + 43u;
        uint _2010 = _2001 + 44u;
        uint _2018 = _2001 + 45u;
        uint _2026 = _2001 + 46u;
        float _2037 = fma(_1971, cbSceneParam._m0[_2002].w, fma(_1967, cbSceneParam._m0[_2002].z, fma(_1963, cbSceneParam._m0[_2002].y, _1959 * cbSceneParam._m0[_2002].x)));
        float _2041 = fma(_1971, cbSceneParam._m0[_2010].w, fma(_1967, cbSceneParam._m0[_2010].z, fma(_1963, cbSceneParam._m0[_2010].y, _1959 * cbSceneParam._m0[_2010].x)));
        float _2049 = fma(_1971, cbSceneParam._m0[_2026].w, fma(_1967, cbSceneParam._m0[_2026].z, fma(_1963, cbSceneParam._m0[_2026].y, _1959 * cbSceneParam._m0[_2026].x)));
        float _2054 = cbSceneParam._m0[33u].z * _2049;
        float _2056 = cbSceneParam._m0[33u].w * _2049;
        float _2059 = fma(_1971, cbSceneParam._m0[_2018].w, fma(_1967, cbSceneParam._m0[_2018].z, fma(_1963, cbSceneParam._m0[_2018].y, _1959 * cbSceneParam._m0[_2018].x))) / _2049;
        float _2107 = (cbSceneParam._m0[33u].x - sqrt(((_1973 * _1973) + (_1972 * _1972)) + (_1974 * _1974))) * cbSceneParam._m0[33u].y;
        float _4413 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
        float _2114 = (isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2054 + _2037) / _2049, (_2056 + _2041) / _2049), _2059), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2056 + _2037) / _2049, (_2041 - _2054) / _2049), _2059), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2037 - _2054) / _2049, (_2041 - _2056) / _2049), _2059), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2037 - _2056) / _2049, (_2054 + _2041) / _2049), _2059), 0.0)).x), vec4(0.25)));
        _2121 = 1.0 - (_2114 * cbSceneParam._m0[34u].x);
        _2122 = 1.0 - (_2114 * cbSceneParam._m0[34u].y);
        _2123 = 1.0 - (_2114 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2121 = 1.0;
        _2122 = 1.0;
        _2123 = 1.0;
    }
    float _2187;
    float _2189;
    float _2191;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2175 = fma(_1971, cbSceneParam._m0[63u].w, fma(_1967, cbSceneParam._m0[63u].z, fma(_1963, cbSceneParam._m0[63u].y, _1959 * cbSceneParam._m0[63u].x)));
        float _2176 = fma(_1971, cbSceneParam._m0[60u].w, fma(_1967, cbSceneParam._m0[60u].z, fma(_1963, cbSceneParam._m0[60u].y, _1959 * cbSceneParam._m0[60u].x))) / _2175;
        float _2177 = fma(_1971, cbSceneParam._m0[61u].w, fma(_1967, cbSceneParam._m0[61u].z, fma(_1963, cbSceneParam._m0[61u].y, _1959 * cbSceneParam._m0[61u].x))) / _2175;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_2176 >= cbSceneParam._m0[64u].x) && (_2177 >= cbSceneParam._m0[64u].y)) && (_2176 <= cbSceneParam._m0[64u].z)) && (_2177 <= cbSceneParam._m0[64u].w))
        {
            float _2315 = fma(_1971, cbSceneParam._m0[62u].w, fma(_1967, cbSceneParam._m0[62u].z, fma(_1963, cbSceneParam._m0[62u].y, _1959 * cbSceneParam._m0[62u].x))) / _2175;
            float _2319 = isnan(cbSceneParam._m0[41u].w) ? _2315 : (isnan(_2315) ? cbSceneParam._m0[41u].w : max(_2315, cbSceneParam._m0[41u].w));
            float _2362 = (cbSceneParam._m0[33u].x - sqrt(((_1973 * _1973) + (_1972 * _1972)) + (_1974 * _1974))) * cbSceneParam._m0[33u].y;
            float _4429 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
            float _2369 = (isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2176, cbSceneParam._m0[33u].w + _2177), _2319), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2176, _2177 - cbSceneParam._m0[33u].z), _2319), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2176 - cbSceneParam._m0[33u].z, _2177 - cbSceneParam._m0[33u].w), _2319), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2176 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2177), _2319), 0.0)).x), vec4(0.25)));
            float _2373 = 1.0 - (_2369 * cbSceneParam._m0[34u].x);
            float _2374 = 1.0 - (_2369 * cbSceneParam._m0[34u].y);
            float _2375 = 1.0 - (_2369 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2374) ? _2122 : (isnan(_2122) ? _2374 : min(_2122, _2374));
            frontier_phi_36_35_ladder_1 = isnan(_2375) ? _2123 : (isnan(_2123) ? _2375 : min(_2123, _2375));
            frontier_phi_36_35_ladder_2 = isnan(_2373) ? _2121 : (isnan(_2121) ? _2373 : min(_2121, _2373));
        }
        else
        {
            frontier_phi_36_35_ladder = _2122;
            frontier_phi_36_35_ladder_1 = _2123;
            frontier_phi_36_35_ladder_2 = _2121;
        }
        _2187 = frontier_phi_36_35_ladder_2;
        _2189 = frontier_phi_36_35_ladder;
        _2191 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _2187 = _2121;
        _2189 = _2122;
        _2191 = _2123;
    }
    uvec4 _2196 = floatBitsToUint(cbInstanceData._m0[_822 + 5u]);
    uint _2198 = _2196.x * 14u;
    uint _2199 = _2198 + 13u;
    float _2206 = _894 + (-1.0);
    float _2211 = (cbLight._m0[_2199].x * _2206) + 1.0;
    float _2212 = (cbLight._m0[_2199].y * _2206) + 1.0;
    float _2213 = (cbLight._m0[_2199].z * _2206) + 1.0;
    float _2214 = (cbLight._m0[_2199].w * _2206) + 1.0;
    uint _2215 = _2198 + 5u;
    float _2221 = isnan(1.0) ? _2212 : (isnan(_2212) ? 1.0 : min(_2212, 1.0));
    uint _2225 = _2198 + 4u;
    float _2234 = isnan(1.0) ? _2211 : (isnan(_2211) ? 1.0 : min(_2211, 1.0));
    uint _2238 = _2198 | 1u;
    float _2249 = dot(vec3(cbLight._m0[_2198].xyz), vec3(_677, _678, _679));
    float _2252 = dot(vec3(cbLight._m0[_2238].xyz), vec3(_677, _678, _679));
    float _4465 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
    float _4476 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
    float _2257 = (isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0))) * 0.3183098733425140380859375;
    float _2259 = (isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0))) * 0.3183098733425140380859375;
    float _2266 = ((cbLight._m0[_2215].x * _2221) * _2259) + (((cbLight._m0[_2225].x * _2187) * _2234) * _2257);
    float _2267 = ((_2221 * cbLight._m0[_2215].y) * _2259) + (((cbLight._m0[_2225].y * _2189) * _2234) * _2257);
    float _2268 = ((_2221 * cbLight._m0[_2215].z) * _2259) + (((cbLight._m0[_2225].z * _2191) * _2234) * _2257);
    uvec4 _2272 = floatBitsToUint(cbLight._m0[_2198 + 12u]);
    bool _2274 = _2272.x == 0u;
    float _2376;
    float _2378;
    float _2380;
    if (_2274)
    {
        _2376 = _2266;
        _2378 = _2267;
        _2380 = _2268;
    }
    else
    {
        uint _2384 = _2198 + 6u;
        float _2400 = (dot(vec3(cbLight._m0[_2198 + 2u].xyz), vec3(_677, _678, _679)) * 0.5) + 0.5;
        float _2401 = _2400 * _2400;
        float _4487 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
        float _2402 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
        float _2403 = isnan(1.0) ? _2213 : (isnan(_2213) ? 1.0 : min(_2213, 1.0));
        _2376 = (((cbLight._m0[_2384].x * 0.3183098733425140380859375) * _2402) * _2403) + _2266;
        _2378 = (((cbLight._m0[_2384].y * 0.3183098733425140380859375) * _2402) * _2403) + _2267;
        _2380 = (((cbLight._m0[_2384].z * 0.3183098733425140380859375) * _2402) * _2403) + _2268;
    }
    bool _2383 = _2272.y == 0u;
    float _2438;
    float _2440;
    float _2442;
    if (_2383)
    {
        _2438 = _2376;
        _2440 = _2378;
        _2442 = _2380;
    }
    else
    {
        uint _2611 = _2198 + 7u;
        float _2627 = (dot(vec3(cbLight._m0[_2198 + 3u].xyz), vec3(_677, _678, _679)) * 0.5) + 0.5;
        float _2628 = _2627 * _2627;
        float _4503 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
        float _2629 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
        float _2630 = isnan(1.0) ? _2214 : (isnan(_2214) ? 1.0 : min(_2214, 1.0));
        _2438 = (((cbLight._m0[_2611].x * 0.3183098733425140380859375) * _2629) * _2630) + _2376;
        _2440 = (((cbLight._m0[_2611].y * 0.3183098733425140380859375) * _2629) * _2630) + _2378;
        _2442 = (((cbLight._m0[_2611].z * 0.3183098733425140380859375) * _2629) * _2630) + _2380;
    }
    uint _2445 = _2198 + 8u;
    float _2458 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2198].w)) * _809) * 0.949999988079071044921875);
    float _2459 = _2458 * _2458;
    float _2460 = cbLight._m0[_2198].x + _757;
    float _2461 = cbLight._m0[_2198].y + _758;
    float _2462 = cbLight._m0[_2198].z + _759;
    float _2466 = inversesqrt(dot(vec3(_2460, _2461, _2462), vec3(_2460, _2461, _2462)));
    float _2467 = _2466 * _2460;
    float _2468 = _2466 * _2461;
    float _2469 = _2466 * _2462;
    float _2470 = dot(vec3(_677, _678, _679), vec3(cbLight._m0[_2198].xyz));
    float _4519 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
    float _2473 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
    float _4530 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _2474 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
    float _2475 = dot(vec3(_677, _678, _679), vec3(_2467, _2468, _2469));
    float _4541 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
    float _2478 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
    float _2479 = dot(vec3(cbLight._m0[_2198].xyz), vec3(_2467, _2468, _2469));
    float _4552 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
    float _2483 = _2459 * _2459;
    float _2487 = ((_2478 * _2478) * (_2483 + (-1.0))) + 1.0;
    float _2495 = exp2(log2(1.0 - (isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0)))) * 5.0);
    float _2496 = 0.959999978542327880859375 - _876;
    float _2498 = 0.959999978542327880859375 - _877;
    float _2499 = 0.959999978542327880859375 - _878;
    float _2506 = 1.0 - _2459;
    float _2517 = (0.5 / (((_2474 * ((_2473 * _2506) + _2459)) + 9.9999999392252902907785028219223e-09) + (((_2474 * _2506) + _2459) * _2473))) * _2473;
    float _4563 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
    float _2519 = (isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0))) * (_2483 / ((_2487 * _2487) * 3.141590118408203125));
    uint _2533 = _2198 + 9u;
    float _2544 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2238].w)) * _809) * 0.949999988079071044921875);
    float _2545 = _2544 * _2544;
    float _2546 = cbLight._m0[_2238].x + _757;
    float _2547 = cbLight._m0[_2238].y + _758;
    float _2548 = cbLight._m0[_2238].z + _759;
    float _2552 = inversesqrt(dot(vec3(_2546, _2547, _2548), vec3(_2546, _2547, _2548)));
    float _2553 = _2552 * _2546;
    float _2554 = _2552 * _2547;
    float _2555 = _2552 * _2548;
    float _2556 = dot(vec3(_677, _678, _679), vec3(cbLight._m0[_2238].xyz));
    float _4574 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
    float _2559 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
    float _2560 = dot(vec3(_677, _678, _679), vec3(_2553, _2554, _2555));
    float _4585 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
    float _2563 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
    float _2564 = dot(vec3(cbLight._m0[_2238].xyz), vec3(_2553, _2554, _2555));
    float _4596 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
    float _2568 = _2545 * _2545;
    float _2572 = ((_2563 * _2563) * (_2568 + (-1.0))) + 1.0;
    float _2579 = exp2(log2(1.0 - (isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0)))) * 5.0);
    float _2586 = 1.0 - _2545;
    float _2596 = (0.5 / (((_2474 * ((_2559 * _2586) + _2545)) + 9.9999999392252902907785028219223e-09) + (((_2474 * _2586) + _2545) * _2559))) * _2559;
    float _4607 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
    float _2598 = (isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0))) * (_2568 / ((_2572 * _2572) * 3.141590118408203125));
    float _2608 = (((((_2579 * _2496) + _879) * cbLight._m0[_2533].x) * _2598) * _2221) + ((((cbLight._m0[_2445].x * _2187) * ((_2495 * _2496) + _879)) * _2519) * _2234);
    float _2609 = (((((_2579 * _2498) + _881) * cbLight._m0[_2533].y) * _2598) * _2221) + ((((cbLight._m0[_2445].y * _2189) * ((_2495 * _2498) + _881)) * _2519) * _2234);
    float _2610 = (((((_2579 * _2499) + _882) * cbLight._m0[_2533].z) * _2598) * _2221) + ((((cbLight._m0[_2445].z * _2191) * ((_2495 * _2499) + _882)) * _2519) * _2234);
    float _2666;
    float _2668;
    float _2670;
    if (_2274)
    {
        _2666 = _2608;
        _2668 = _2609;
        _2670 = _2610;
    }
    else
    {
        uint _2672 = _2198 + 2u;
        uint _2676 = _2198 + 10u;
        float _2690 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2672].w)) * _809) * 0.949999988079071044921875);
        float _2691 = _2690 * _2690;
        float _2692 = cbLight._m0[_2672].x + _757;
        float _2693 = cbLight._m0[_2672].y + _758;
        float _2694 = cbLight._m0[_2672].z + _759;
        float _2698 = inversesqrt(dot(vec3(_2692, _2693, _2694), vec3(_2692, _2693, _2694)));
        float _2699 = _2698 * _2692;
        float _2700 = _2698 * _2693;
        float _2701 = _2698 * _2694;
        float _2702 = dot(vec3(_677, _678, _679), vec3(cbLight._m0[_2672].xyz));
        float _4618 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0));
        float _2705 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
        float _2706 = dot(vec3(_677, _678, _679), vec3(_2699, _2700, _2701));
        float _4629 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
        float _2709 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
        float _2710 = dot(vec3(cbLight._m0[_2672].xyz), vec3(_2699, _2700, _2701));
        float _4640 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
        float _2714 = _2691 * _2691;
        float _2718 = ((_2709 * _2709) * (_2714 + (-1.0))) + 1.0;
        float _2725 = exp2(log2(1.0 - (isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0)))) * 5.0);
        float _2732 = 1.0 - _2691;
        float _2742 = (0.5 / (((_2474 * ((_2705 * _2732) + _2691)) + 9.9999999392252902907785028219223e-09) + (((_2474 * _2732) + _2691) * _2705))) * _2705;
        float _4651 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
        float _2744 = (isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0))) * (_2714 / ((_2718 * _2718) * 3.141590118408203125));
        float _2745 = isnan(1.0) ? _2213 : (isnan(_2213) ? 1.0 : min(_2213, 1.0));
        _2666 = (((((_2725 * _2496) + _879) * cbLight._m0[_2676].x) * _2744) * _2745) + _2608;
        _2668 = (((((_2725 * _2498) + _881) * cbLight._m0[_2676].y) * _2744) * _2745) + _2609;
        _2670 = (((((_2725 * _2499) + _882) * cbLight._m0[_2676].z) * _2744) * _2745) + _2610;
    }
    float _2776;
    float _2778;
    float _2780;
    if (_2383)
    {
        _2776 = _2666;
        _2778 = _2668;
        _2780 = _2670;
    }
    else
    {
        uint _2787 = _2198 + 3u;
        uint _2791 = _2198 + 11u;
        float _2805 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2787].w)) * _809) * 0.949999988079071044921875);
        float _2806 = _2805 * _2805;
        float _2807 = cbLight._m0[_2787].x + _757;
        float _2808 = cbLight._m0[_2787].y + _758;
        float _2809 = cbLight._m0[_2787].z + _759;
        float _2813 = inversesqrt(dot(vec3(_2807, _2808, _2809), vec3(_2807, _2808, _2809)));
        float _2814 = _2813 * _2807;
        float _2815 = _2813 * _2808;
        float _2816 = _2813 * _2809;
        float _2817 = dot(vec3(_677, _678, _679), vec3(cbLight._m0[_2787].xyz));
        float _4667 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
        float _2820 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
        float _2821 = dot(vec3(_677, _678, _679), vec3(_2814, _2815, _2816));
        float _4678 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0));
        float _2824 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
        float _2825 = dot(vec3(cbLight._m0[_2787].xyz), vec3(_2814, _2815, _2816));
        float _4689 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
        float _2829 = _2806 * _2806;
        float _2833 = ((_2824 * _2824) * (_2829 + (-1.0))) + 1.0;
        float _2840 = exp2(log2(1.0 - (isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0)))) * 5.0);
        float _2847 = 1.0 - _2806;
        float _2857 = (0.5 / (((_2474 * ((_2820 * _2847) + _2806)) + 9.9999999392252902907785028219223e-09) + (((_2474 * _2847) + _2806) * _2820))) * _2820;
        float _4700 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0));
        float _2859 = (isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0))) * (_2829 / ((_2833 * _2833) * 3.141590118408203125));
        float _2860 = isnan(1.0) ? _2214 : (isnan(_2214) ? 1.0 : min(_2214, 1.0));
        _2776 = (((((_2840 * _2496) + _879) * cbLight._m0[_2791].x) * _2859) * _2860) + _2666;
        _2778 = (((((_2840 * _2498) + _881) * cbLight._m0[_2791].y) * _2859) * _2860) + _2668;
        _2780 = (((((_2840 * _2499) + _882) * cbLight._m0[_2791].z) * _2859) * _2860) + _2670;
    }
    float _2925;
    float _2927;
    float _2929;
    float _2931;
    float _2933;
    float _2935;
    if (_2196.y == 0u)
    {
        uvec4 _2881 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2882 = _2881.x;
        uint _2893 = uint((float(_2881.y) * floor(float(uint(cbSceneParam._m0[85u].y * _766) / _2882))) + floor(float(uint(cbSceneParam._m0[85u].x * _765) / _2882)));
        float _2903 = (log2(_1974 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2904 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0));
        uint _2907 = uint(isnan(14.0) ? _2904 : (isnan(_2904) ? 14.0 : min(_2904, 14.0)));
        uvec4 _2912 = texelFetch(g_lightClusterGridBuffer, int(((_2907 << 2u) + (_2893 << 6u)) >> 2u));
        uint _2913 = _2912.x;
        uint _2914 = _2881.z;
        float _3027;
        float _3029;
        float _3031;
        float _3033;
        float _3035;
        float _3037;
        if (((((1u << ((_2914 >> 4u) & 15u)) + 4294967295u) & _2913) == 0u) || ((_2914 & 240u) == 0u))
        {
            _3027 = 0.0;
            _3029 = 0.0;
            _3031 = 0.0;
            _3033 = 0.0;
            _3035 = 0.0;
            _3037 = 0.0;
        }
        else
        {
            float _3028;
            float _3030;
            float _3032;
            float _3034;
            float _3036;
            float _3038;
            float _3180 = 0.0;
            float _3181 = 0.0;
            float _3182 = 0.0;
            float _3183 = 0.0;
            float _3184 = 0.0;
            float _3185 = 0.0;
            uint _3186 = 0u;
            uint _3195;
            bool _3196;
            for (;;)
            {
                _3195 = texelFetch(g_lightClassification, int((((_2907 << 5u) + (_2893 << 9u)) + (_3186 << 2u)) >> 2u)).x;
                _3196 = _3195 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3196)
                {
                    frontier_phi_68_pred = _3185;
                    frontier_phi_68_pred_1 = _3184;
                    frontier_phi_68_pred_2 = _3183;
                    frontier_phi_68_pred_3 = _3181;
                    frontier_phi_68_pred_4 = _3180;
                    frontier_phi_68_pred_5 = _3182;
                }
                else
                {
                    float _3304;
                    float _3305;
                    float _3306;
                    float _3307;
                    float _3308;
                    float _3309;
                    uint _3310;
                    _3304 = _3180;
                    _3305 = _3181;
                    _3306 = _3182;
                    _3307 = _3183;
                    _3308 = _3184;
                    _3309 = _3185;
                    _3310 = _3195;
                    float _3236;
                    float _3237;
                    float _3238;
                    float _3239;
                    float _3240;
                    float _3241;
                    for (;;)
                    {
                        uint _3314 = uint(findLSB(_3310)) + (_3186 << 5u);
                        uint _3311 = (_3310 + 4294967295u) & _3310;
                        uint _3316 = _3314 * 48u;
                        vec4 _3330 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3316)).x, texelFetch(g_PointLightRenderingBuffer, int(_3316 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3316 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3316 + 3u)).x));
                        uint _3336 = (_3314 * 48u) + 4u;
                        vec4 _3349 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3336)).x, texelFetch(g_PointLightRenderingBuffer, int(_3336 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3336 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3336 + 3u)).x));
                        uint _3355 = (_3314 * 48u) + 8u;
                        vec3 _3366 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3355)).x, texelFetch(g_PointLightRenderingBuffer, int(_3355 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3355 + 2u)).x));
                        float _3370 = _3330.x - _1972;
                        float _3371 = _3330.y - _1973;
                        float _3372 = _3330.z - _1974;
                        float _3373 = dot(vec3(_3370, _3371, _3372), vec3(_3370, _3371, _3372));
                        float _3376 = inversesqrt(_3373);
                        float _3377 = _3376 * _3370;
                        float _3378 = _3376 * _3371;
                        float _3379 = _3376 * _3372;
                        float _3380 = dot(vec3(_790, _793, _796), vec3(_3377, _3378, _3379));
                        float _3385 = 1.0 - (_3373 * _3330.w);
                        float _4726 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0));
                        float _3386 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
                        float _3387 = sqrt(_3373) * _3349.w;
                        float _3390 = 1.39999997615814208984375 / (_3387 + 1.39999997615814208984375);
                        float _3391 = _3390 * _3390;
                        float _3394 = ((1.0 - _3391) * _3380) + _3391;
                        float _3397 = _3387 * _3387;
                        float _3401 = ((isnan(0.0) ? _3394 : (isnan(_3394) ? 0.0 : max(_3394, 0.0))) * _3386) / ((_3397 * 0.699999988079071044921875) + 1.0);
                        float _3405 = (-0.0) - _1972;
                        float _3406 = (-0.0) - _1973;
                        float _3407 = (-0.0) - _1974;
                        float _3411 = inversesqrt(dot(vec3(_3405, _3406, _3407), vec3(_3405, _3406, _3407)));
                        float _3412 = _3411 * _3405;
                        float _3413 = _3411 * _3406;
                        float _3414 = _3411 * _3407;
                        float _3421 = exp2(log2(1.0 / ((_3397 * 3.5) + 5.0)) * 0.25);
                        float _3422 = 1.0 - _910;
                        float _3429 = sqrt(1.0 - ((1.0 - (_3422 * _3422)) * (1.0 - (_3421 * _3421))));
                        float _3430 = _3429 * _3429;
                        float _3431 = _3430 * _3430;
                        float _3432 = _3412 + _3377;
                        float _3433 = _3413 + _3378;
                        float _3434 = _3414 + _3379;
                        float _3438 = inversesqrt(dot(vec3(_3432, _3433, _3434), vec3(_3432, _3433, _3434)));
                        float _3442 = dot(vec3(_790, _793, _796), vec3(_3412, _3413, _3414));
                        float _4742 = isnan(0.0) ? _3442 : (isnan(_3442) ? 0.0 : max(_3442, 0.0));
                        float _3445 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
                        float _3446 = dot(vec3(_790, _793, _796), vec3(_3438 * _3432, _3438 * _3433, _3438 * _3434));
                        float _4753 = isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0));
                        float _3449 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
                        float _3453 = ((_3449 * _3449) * (_3431 + (-1.0))) + 1.0;
                        float _3454 = _3390 * _3430;
                        float _3455 = _3454 * _3454;
                        float _3458 = ((1.0 - _3455) * _3380) + _3455;
                        float _4764 = isnan(0.0) ? _3458 : (isnan(_3458) ? 0.0 : max(_3458, 0.0));
                        float _3459 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
                        float _3460 = 1.0 - _3430;
                        float _3470 = (0.5 / (((_3459 * ((_3445 * _3460) + _3430)) + 9.9999999392252902907785028219223e-09) + (((_3459 * _3460) + _3430) * _3445))) * _3459;
                        float _4775 = isnan(0.0) ? _3470 : (isnan(_3470) ? 0.0 : max(_3470, 0.0));
                        float _3481 = (((_3431 * 3.1415927410125732421875) * (isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0)))) / ((_3453 * _3453) * ((_3397 * 2.1991131305694580078125) + 3.141590118408203125))) * _3386;
                        _3239 = (_3401 * _3349.x) + _3307;
                        _3240 = (_3401 * _3349.y) + _3308;
                        _3241 = (_3401 * _3349.z) + _3309;
                        _3236 = (_3481 * _3366.x) + _3304;
                        _3237 = (_3481 * _3366.y) + _3305;
                        _3238 = (_3481 * _3366.z) + _3306;
                        if (_3311 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3304 = _3236;
                            _3305 = _3237;
                            _3306 = _3238;
                            _3307 = _3239;
                            _3308 = _3240;
                            _3309 = _3241;
                            _3310 = _3311;
                        }
                    }
                    frontier_phi_68_pred = _3241;
                    frontier_phi_68_pred_1 = _3240;
                    frontier_phi_68_pred_2 = _3239;
                    frontier_phi_68_pred_3 = _3237;
                    frontier_phi_68_pred_4 = _3236;
                    frontier_phi_68_pred_5 = _3238;
                }
                _3038 = frontier_phi_68_pred;
                _3036 = frontier_phi_68_pred_1;
                _3034 = frontier_phi_68_pred_2;
                _3030 = frontier_phi_68_pred_3;
                _3028 = frontier_phi_68_pred_4;
                _3032 = frontier_phi_68_pred_5;
                uint _3187 = _3186 + 1u;
                if (_3187 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3180 = _3028;
                    _3181 = _3030;
                    _3182 = _3032;
                    _3183 = _3034;
                    _3184 = _3036;
                    _3185 = _3038;
                    _3186 = _3187;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3027 = _3028;
            _3029 = _3030;
            _3031 = _3032;
            _3033 = _3034;
            _3035 = _3036;
            _3037 = _3038;
        }
        uvec4 _3041 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3042 = _3041.z;
        uint _3044 = (_3042 >> 8u) & 15u;
        float _3148;
        float _3150;
        float _3152;
        float _3154;
        float _3156;
        float _3158;
        if (((4294967295u << _3044) & _2913) == 0u)
        {
            _3148 = _3027;
            _3150 = _3029;
            _3152 = _3031;
            _3154 = _3033;
            _3156 = _3035;
            _3158 = _3037;
        }
        else
        {
            float _3173 = inversesqrt(dot(vec3(_1972, _1973, _1974), vec3(_1972, _1973, _1974)));
            float _3174 = _3173 * _1972;
            float _3175 = _3173 * _1973;
            float _3176 = _3173 * _1974;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_3044 < ((_3042 >> 12u) & 15u))
            {
                float _3149;
                float _3151;
                float _3153;
                float _3155;
                float _3157;
                float _3159;
                float _3287 = _3027;
                float _3288 = _3029;
                float _3289 = _3031;
                float _3290 = _3033;
                float _3291 = _3035;
                float _3292 = _3037;
                uint _3293 = _3044;
                uint _3302;
                bool _3303;
                for (;;)
                {
                    _3302 = texelFetch(g_lightClassification, int((((_2907 << 5u) + (_2893 << 9u)) + (_3293 << 2u)) >> 2u)).x;
                    _3303 = _3302 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3303)
                    {
                        frontier_phi_74_pred = _3289;
                        frontier_phi_74_pred_1 = _3288;
                        frontier_phi_74_pred_2 = _3287;
                        frontier_phi_74_pred_3 = _3292;
                        frontier_phi_74_pred_4 = _3291;
                        frontier_phi_74_pred_5 = _3290;
                    }
                    else
                    {
                        float _3486;
                        float _3487;
                        float _3488;
                        float _3489;
                        float _3490;
                        float _3491;
                        float _3780;
                        float _3781;
                        float _3782;
                        float _3783;
                        float _3784;
                        float _3785;
                        float _3499 = _3287;
                        float _3500 = _3288;
                        float _3501 = _3289;
                        float _3502 = _3290;
                        float _3503 = _3291;
                        float _3504 = _3292;
                        uint _3505 = _3302;
                        uint _3506;
                        vec4 _3531;
                        float _3532;
                        vec4 _3547;
                        vec3 _3559;
                        vec4 _3575;
                        vec4 _3590;
                        float _3636;
                        bool _3637;
                        for (;;)
                        {
                            uint _3516 = ((_3293 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3505));
                            _3506 = (_3505 + 4294967295u) & _3505;
                            uint _3518 = _3516 * 40u;
                            _3531 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3518)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 3u)).x));
                            _3532 = _3531.w;
                            uint _3534 = (_3516 * 40u) + 4u;
                            _3547 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3534)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 3u)).x));
                            uint _3549 = (_3516 * 40u) + 8u;
                            _3559 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3549)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 2u)).x));
                            uint _3562 = (_3516 * 40u) + 16u;
                            _3575 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3562)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 3u)).x));
                            uint _3577 = (_3516 * 40u) + 20u;
                            _3590 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3577)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 3u)).x));
                            uint _3592 = (_3516 * 40u) + 24u;
                            vec4 _3605 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3592)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 3u)).x));
                            uint _3611 = (_3516 * 40u) + 28u;
                            vec4 _3624 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3611)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 3u)).x));
                            _3636 = fma(_1974, _3624.z, fma(_1973, _3624.y, _3624.x * _1972)) + _3624.w;
                            _3637 = !((fma(_1974, _3605.z, fma(_1973, _3605.y, _3605.x * _1972)) + _3605.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3637)
                            {
                                float _3664 = _3531.x - _1972;
                                float _3665 = _3531.y - _1973;
                                float _3666 = _3531.z - _1974;
                                float _3667 = dot(vec3(_3664, _3665, _3666), vec3(_3664, _3665, _3666));
                                float _3670 = inversesqrt(_3667);
                                float _3671 = _3670 * _3664;
                                float _3672 = _3670 * _3665;
                                float _3673 = _3670 * _3666;
                                float _3677 = 1.0 - (_3667 / (_3532 * _3532));
                                float _4786 = isnan(0.0) ? _3677 : (isnan(_3677) ? 0.0 : max(_3677, 0.0));
                                float _3678 = isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0));
                                float _3682 = sqrt(_3667) * _3547.w;
                                float _3684 = 1.39999997615814208984375 / (_3682 + 1.39999997615814208984375);
                                float _3685 = _3684 * _3684;
                                float _3688 = ((1.0 - _3685) * dot(vec3(_3671, _3672, _3673), vec3(_790, _793, _796))) + _3685;
                                float _3691 = _3682 * _3682;
                                float _3695 = (fma(_1974, _3575.z, fma(_1973, _3575.y, _3575.x * _1972)) + _3575.w) / _3636;
                                float _3696 = (fma(_1974, _3590.z, fma(_1973, _3590.y, _3590.x * _1972)) + _3590.w) / _3636;
                                float _3700 = 1.0 - dot(vec2(_3695, _3696), vec2(_3695, _3696));
                                float _4802 = isnan(0.0) ? _3700 : (isnan(_3700) ? 0.0 : max(_3700, 0.0));
                                float _3701 = isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0));
                                float _3702 = _3701 * (((isnan(0.0) ? _3688 : (isnan(_3688) ? 0.0 : max(_3688, 0.0))) * _3678) / ((_3691 * 0.699999988079071044921875) + 1.0));
                                float _3714 = exp2(log2(1.0 / ((_3691 * 3.5) + 5.0)) * 0.25);
                                float _3715 = 1.0 - _910;
                                float _3722 = sqrt(1.0 - ((1.0 - (_3715 * _3715)) * (1.0 - (_3714 * _3714))));
                                float _3723 = _3722 * _3722;
                                float _3724 = _3723 * _3723;
                                float _3725 = _3671 - _3174;
                                float _3726 = _3672 - _3175;
                                float _3727 = _3673 - _3176;
                                float _3731 = inversesqrt(dot(vec3(_3725, _3726, _3727), vec3(_3725, _3726, _3727)));
                                float _3735 = dot(vec3(_790, _793, _796), vec3((-0.0) - _3174, (-0.0) - _3175, (-0.0) - _3176));
                                float _4813 = isnan(0.0) ? _3735 : (isnan(_3735) ? 0.0 : max(_3735, 0.0));
                                float _3738 = isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0));
                                float _3739 = dot(vec3(_790, _793, _796), vec3(_3731 * _3725, _3731 * _3726, _3731 * _3727));
                                float _4824 = isnan(0.0) ? _3739 : (isnan(_3739) ? 0.0 : max(_3739, 0.0));
                                float _3742 = isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0));
                                float _3746 = ((_3742 * _3742) * (_3724 + (-1.0))) + 1.0;
                                float _3747 = _3684 * _3723;
                                float _3748 = _3747 * _3747;
                                float _3754 = ((1.0 - _3748) * dot(vec3(_790, _793, _796), vec3(_3671, _3672, _3673))) + _3748;
                                float _4835 = isnan(0.0) ? _3754 : (isnan(_3754) ? 0.0 : max(_3754, 0.0));
                                float _3755 = isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0));
                                float _3756 = 1.0 - _3723;
                                float _3766 = (0.5 / (((_3755 * ((_3738 * _3756) + _3723)) + 9.9999999392252902907785028219223e-09) + (((_3755 * _3756) + _3723) * _3738))) * _3755;
                                float _4846 = isnan(0.0) ? _3766 : (isnan(_3766) ? 0.0 : max(_3766, 0.0));
                                float _3776 = (_3701 * _3678) * (((_3724 * 3.1415927410125732421875) * (isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0)))) / ((_3746 * _3746) * ((_3691 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3776 * _3559.z;
                                frontier_phi_80_pred_1 = _3776 * _3559.y;
                                frontier_phi_80_pred_2 = _3776 * _3559.x;
                                frontier_phi_80_pred_3 = _3702 * _3547.z;
                                frontier_phi_80_pred_4 = _3702 * _3547.y;
                                frontier_phi_80_pred_5 = _3702 * _3547.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3782 = frontier_phi_80_pred;
                            _3781 = frontier_phi_80_pred_1;
                            _3780 = frontier_phi_80_pred_2;
                            _3785 = frontier_phi_80_pred_3;
                            _3784 = frontier_phi_80_pred_4;
                            _3783 = frontier_phi_80_pred_5;
                            _3489 = _3783 + _3502;
                            _3490 = _3784 + _3503;
                            _3491 = _3785 + _3504;
                            _3486 = _3780 + _3499;
                            _3487 = _3781 + _3500;
                            _3488 = _3782 + _3501;
                            if (_3506 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3499 = _3486;
                                _3500 = _3487;
                                _3501 = _3488;
                                _3502 = _3489;
                                _3503 = _3490;
                                _3504 = _3491;
                                _3505 = _3506;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3488;
                        frontier_phi_74_pred_1 = _3487;
                        frontier_phi_74_pred_2 = _3486;
                        frontier_phi_74_pred_3 = _3491;
                        frontier_phi_74_pred_4 = _3490;
                        frontier_phi_74_pred_5 = _3489;
                    }
                    _3153 = frontier_phi_74_pred;
                    _3151 = frontier_phi_74_pred_1;
                    _3149 = frontier_phi_74_pred_2;
                    _3159 = frontier_phi_74_pred_3;
                    _3157 = frontier_phi_74_pred_4;
                    _3155 = frontier_phi_74_pred_5;
                    uint _3294 = _3293 + 1u;
                    if (_3294 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3287 = _3149;
                        _3288 = _3151;
                        _3289 = _3153;
                        _3290 = _3155;
                        _3291 = _3157;
                        _3292 = _3159;
                        _3293 = _3294;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _3157;
                frontier_phi_62_63_ladder_1 = _3155;
                frontier_phi_62_63_ladder_2 = _3153;
                frontier_phi_62_63_ladder_3 = _3159;
                frontier_phi_62_63_ladder_4 = _3151;
                frontier_phi_62_63_ladder_5 = _3149;
            }
            else
            {
                frontier_phi_62_63_ladder = _3035;
                frontier_phi_62_63_ladder_1 = _3033;
                frontier_phi_62_63_ladder_2 = _3031;
                frontier_phi_62_63_ladder_3 = _3037;
                frontier_phi_62_63_ladder_4 = _3029;
                frontier_phi_62_63_ladder_5 = _3027;
            }
            _3148 = frontier_phi_62_63_ladder_5;
            _3150 = frontier_phi_62_63_ladder_4;
            _3152 = frontier_phi_62_63_ladder_2;
            _3154 = frontier_phi_62_63_ladder_1;
            _3156 = frontier_phi_62_63_ladder;
            _3158 = frontier_phi_62_63_ladder_3;
        }
        float _3163 = isnan(1.0) ? _894 : (isnan(_894) ? 1.0 : min(_894, 1.0));
        _2925 = (_3163 * _3154) + _2438;
        _2927 = (_3163 * _3156) + _2440;
        _2929 = (_3163 * _3158) + _2442;
        _2931 = ((_3148 * _879) * _3163) + _2776;
        _2933 = ((_3150 * _881) * _3163) + _2778;
        _2935 = ((_3152 * _882) * _3163) + _2780;
    }
    else
    {
        _2925 = _2438;
        _2927 = _2440;
        _2929 = _2442;
        _2931 = _2776;
        _2933 = _2778;
        _2935 = _2780;
    }
    uint _2941 = _823 + uint(cbMatDynParam._m0[0u].w);
    float _2949 = ((cbMtdParam._m0[11u].x * cbMtdParam._m0[22u].z) * _621.x) * cbInstanceData._m0[_2941].x;
    float _2952 = ((cbMtdParam._m0[11u].y * cbMtdParam._m0[22u].z) * _621.y) * cbInstanceData._m0[_2941].y;
    float _2955 = ((cbMtdParam._m0[11u].z * cbMtdParam._m0[22u].z) * _621.z) * cbInstanceData._m0[_2941].z;
    float _4862 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _4873 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _4884 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _2972 = (((isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0))) * (_2925 + ((isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0))) * _894))) + ((_2931 + ((isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0))) * _1704)) * cbPerFrame._m0[3u].x)) + _2949;
    float _2974 = (_2952 + ((_2933 + ((isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0))) * _1704)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0))) * (_2927 + ((isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0))) * _894)));
    float _2976 = (_2955 + ((_2935 + ((isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0))) * _1704)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0))) * (_2929 + ((isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0))) * _894)));
    float _4910 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2989 = isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0));
    uint _2990 = _822 + 6u;
    float _2998 = _765 / cbSceneParam._m0[86u].x;
    float _2999 = _766 / cbSceneParam._m0[86u].y;
    vec4 _3013 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2998, _2999, (log2((isnan(cbSceneParam._m0[77u].w) ? _700 : (isnan(_700) ? cbSceneParam._m0[77u].w : min(_700, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3015 = _3013.x;
    float _3016 = _3013.y;
    float _3017 = _3013.z;
    float _3018 = _3013.w;
    float _3089;
    float _3091;
    float _3093;
    float _3095;
    if (_700 > cbSceneParam._m0[78u].w)
    {
        float _3052 = isnan(_700) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _700 : min(cbSceneParam._m0[80u].w, _700));
        float _3053 = _3052 / _700;
        float _3064 = _3053 * _750;
        float _3065 = _751 * _3053;
        float _3066 = (-0.0) - _3065;
        float _3067 = _3053 * _752;
        float _3069 = (cbSceneParam._m0[77u].w * _3066) / _3052;
        float _3070 = _3069 + cbSceneParam._m0[79u].w;
        float _3071 = cbSceneParam._m0[79u].w - _3065;
        float _3077 = sqrt(((_3064 * _3064) + (_3065 * _3065)) + (_3067 * _3067));
        float _3080 = (1.0 - (cbSceneParam._m0[77u].w / _3052)) * _3077;
        float _3085 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3087 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3249;
        if (abs((_3066 - _3069) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3249 = ((((_3070 > 0.0) ? exp2(_3085 * _3070) : (2.0 - exp2(_3087 * _3070))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3080;
        }
        else
        {
            float _3209 = 1.0 / cbSceneParam._m0[80u].x;
            float _3210 = isnan(_3071) ? _3070 : (isnan(_3070) ? _3071 : max(_3070, _3071));
            float _3211 = isnan(_3071) ? _3070 : (isnan(_3070) ? _3071 : min(_3070, _3071));
            float _3220 = isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : min(_3210, 0.0));
            float _3221 = isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : min(_3211, 0.0));
            _3249 = ((abs(_3077 / _3066) * cbSceneParam._m0[80u].y) * ((((_3220 - _3221) * 2.0) - ((exp2(_3085 * (isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0)))) - exp2(_3085 * (isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : max(_3211, 0.0))))) * _3209)) - ((exp2(_3087 * _3220) - exp2(_3087 * _3221)) * _3209))) + (_3080 * cbSceneParam._m0[80u].z);
        }
        vec4 _3251 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2998, _2999, 1.0), 0.0);
        float _3260 = exp2((_3249 * (-1.44269502162933349609375)) * (1.0 - _3251.w));
        float _3261 = log2(_3260);
        float _3277 = log2(_3018);
        _3089 = (exp2(_3277 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3261 * cbSceneParam._m0[78u].x)) * _3251.x) / cbSceneParam._m0[78u].x)) + _3015;
        _3091 = (exp2(_3277 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3261 * cbSceneParam._m0[78u].y)) * _3251.y) / cbSceneParam._m0[78u].y)) + _3016;
        _3093 = (exp2(_3277 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3261 * cbSceneParam._m0[78u].z)) * _3251.z) / cbSceneParam._m0[78u].z)) + _3017;
        _3095 = _3260 * _3018;
    }
    else
    {
        _3089 = _3015;
        _3091 = _3016;
        _3093 = _3017;
        _3095 = _3018;
    }
    float _3107 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3108 = _3107 == 3.0;
    float _3109 = log2(_3095);
    float _3113 = exp2(_3109 * cbSceneParam._m0[78u].x);
    float _3114 = exp2(_3109 * cbSceneParam._m0[78u].y);
    float _3115 = exp2(_3109 * cbSceneParam._m0[78u].z);
    float _3116 = _3113 * (isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0)));
    float _3117 = _3114 * (isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0)));
    float _3118 = _3115 * (isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0)));
    float _3127 = (_3107 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3127 * (_3108 ? _3116 : (_3116 + (cbSceneParam._m0[72u].w * _3089)));
    SV_Target.y = _3127 * (_3108 ? _3117 : (_3117 + (cbSceneParam._m0[72u].w * _3091)));
    SV_Target.z = _3127 * (_3108 ? _3118 : (_3118 + (cbSceneParam._m0[72u].w * _3093)));
    SV_Target.w = cbInstanceData._m0[_2990].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2949) * _2989) * _3113) * _3127;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2952) * _2989) * _3114) * _3127;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2955) * _2989) * _3115) * _3127;
    SV_Target_1.w = cbInstanceData._m0[_2990].w;
}


