#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 11) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 12) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1376;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _228 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = _235 * NORMAL.x;
    float _237 = _235 * NORMAL.y;
    float _238 = _235 * NORMAL.z;
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _250;
    float _251;
    float _252;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _250 = (-0.0) - _236;
        _251 = (-0.0) - _237;
        _252 = (-0.0) - _238;
    }
    else
    {
        _250 = _236;
        _251 = _237;
        _252 = _238;
    }
    vec4 _270 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _284 = exp2(log2(_270.w * cbMtdParam._m0[23u].z) * cbMtdParam._m0[21u].y);
    float _285 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _286 = isnan(1.0) ? _285 : (isnan(_285) ? 1.0 : min(_285, 1.0));
    vec4 _300 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _304 = _300.z;
    float _305 = _300.w;
    float _313 = exp2(log2(_304 * cbMtdParam._m0[21u].w) * cbMtdParam._m0[20u].y);
    float _314 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _315 = isnan(1.0) ? _314 : (isnan(_314) ? 1.0 : min(_314, 1.0));
    vec4 _328 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    vec4 _351 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _353 = _351.x;
    float _354 = _351.y;
    float _378 = ((cbMtdParam._m0[20u].w * _351.z) * (texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_15, SS_WrapLinear), vec2(((cbMtdParam._m0[20u].z * TEXCOORD.x) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, ((cbMtdParam._m0[20u].z * TEXCOORD.y) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w)).x - _353)) + _353;
    bool _414 = _378 >= 0.25;
    bool _419 = _378 >= 0.3499999940395355224609375;
    bool _424 = _378 >= 0.5;
    bool _429 = _378 >= 0.64999997615814208984375;
    bool _434 = _378 >= 0.75;
    vec4 _462 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _472 = cbMtdParam._m0[9u].x * _462.x;
    float _473 = cbMtdParam._m0[9u].y * _462.y;
    float _474 = cbMtdParam._m0[9u].z * _462.z;
    float _481 = (((((((_434 ? cbMtdParam._m0[14u].x : (_429 ? cbMtdParam._m0[19u].x : (_424 ? cbMtdParam._m0[18u].x : (_419 ? cbMtdParam._m0[17u].x : (_414 ? cbMtdParam._m0[16u].x : cbMtdParam._m0[15u].x))))) - cbMtdParam._m0[10u].x) * _354) + cbMtdParam._m0[10u].x) * _328.x) - _472) * _315) + _472;
    float _482 = (((((((_434 ? cbMtdParam._m0[14u].y : (_429 ? cbMtdParam._m0[19u].y : (_424 ? cbMtdParam._m0[18u].y : (_419 ? cbMtdParam._m0[17u].y : (_414 ? cbMtdParam._m0[16u].y : cbMtdParam._m0[15u].y))))) - cbMtdParam._m0[10u].y) * _354) + cbMtdParam._m0[10u].y) * _328.y) - _473) * _315) + _473;
    float _483 = (((((((_434 ? cbMtdParam._m0[14u].z : (_429 ? cbMtdParam._m0[19u].z : (_424 ? cbMtdParam._m0[18u].z : (_419 ? cbMtdParam._m0[17u].z : (_414 ? cbMtdParam._m0[16u].z : cbMtdParam._m0[15u].z))))) - cbMtdParam._m0[10u].z) * _354) + cbMtdParam._m0[10u].z) * _328.z) - _474) * _315) + _474;
    float _490 = exp2(log2(_305) * cbMtdParam._m0[22u].y);
    vec4 _503 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _523 = (((cbMtdParam._m0[12u].x * _503.x) - _481) * _490) + _481;
    float _524 = (((cbMtdParam._m0[12u].y * _503.y) - _482) * _490) + _482;
    float _525 = (((cbMtdParam._m0[12u].z * _503.z) - _483) * _490) + _483;
    vec4 _537 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _561 = (_270.x * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].x * _537.x) - _523) * _286) + _523);
    float _563 = (_270.y * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].y * _537.y) - _524) * _286) + _524);
    float _565 = (_270.z * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].z * _537.z) - _525) * _286) + _525);
    float _570 = exp2(log2(1.0 - _305) * 0.00999999977648258209228515625);
    float _588 = ((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_11, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x - cbMtdParam._m0[22u].w) * _570) + cbMtdParam._m0[22u].w;
    float _607 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w)).x - _588) + cbMtdParam._m0[21u].z) * _490) + _588;
    float _627 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w)).x - _607) + cbMtdParam._m0[23u].w) * _286) + _607;
    vec4 _640 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _658 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _660 = _658.x;
    float _661 = _658.y;
    float _664 = cbMtdParam._m0[20u].x + _658.z;
    float _667 = (((cbMtdParam._m0[21u].x + _640.z) - _664) * _570) + _664;
    vec4 _679 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _691 = (_304 * 2.0) * ((((_679.z - _667) + cbMtdParam._m0[23u].y) * _490) + _667);
    vec4 _703 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _712 = (((_703.z - _691) + cbMtdParam._m0[22u].x) * _286) + _691;
    vec4 _731 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _746 = ((_640.x - _660) * _570) + _660;
    float _747 = ((_640.y - _661) * _570) + _661;
    float _752 = ((_679.x - _746) * _490) + _746;
    float _753 = ((_679.y - _747) * _490) + _747;
    float _762 = ((((_703.x - _752) * _286) + _752) * 2.0) + (-1.0);
    float _763 = ((((_703.y - _753) * _286) + _753) * 2.0) + (-1.0);
    float _764 = dot(vec2(_762, _763), vec2(_762, _763));
    float _3765 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _769 = sqrt(1.0 - (isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0))));
    float _772 = (cbMtdParam._m0[23u].x * ((_300.x * 2.0) + (-1.0))) + _762;
    float _773 = (cbMtdParam._m0[23u].x * ((_300.y * 2.0) + (-1.0))) + _763;
    float _776 = fma(_769, _250, fma(_773, _242 * TANGENT.x, (_228 * _221) * _772));
    float _779 = fma(_769, _251, fma(_773, _242 * TANGENT.y, (_228 * _222) * _772));
    float _782 = fma(_769, _252, fma(_773, _242 * TANGENT.z, (_228 * _223) * _772));
    float _786 = inversesqrt(dot(vec3(_776, _779, _782), vec3(_776, _779, _782)));
    float _787 = _786 * _776;
    float _788 = _786 * _779;
    float _789 = _786 * _782;
    float _3776 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _790 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
    float _3787 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _3798 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _3809 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _3820 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _794 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
    float _810 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _850 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _860 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _850);
    float _861 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _850);
    float _862 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _850);
    float _866 = inversesqrt(dot(vec3(_860, _861, _862), vec3(_860, _861, _862)));
    float _867 = _860 * _866;
    float _868 = _861 * _866;
    float _869 = _862 * _866;
    float _875 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _876 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _878 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _880 = _878.w;
    float _898 = fma(_789, cbSceneParam._m0[5u].z, fma(_788, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _787));
    float _901 = fma(_789, cbSceneParam._m0[6u].z, fma(_788, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _787));
    float _904 = fma(_789, cbSceneParam._m0[7u].z, fma(_788, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _787));
    vec4 _906 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _917 = (((_906.y - _790) + (_906.w * _790)) * cbMtdParam._m0[3u].x) + _790;
    uint _930 = uint(roundEven(NORMAL.w)) * 13u;
    uint _931 = _930 + 9u;
    uint _932 = _931 + uint(cbMatDynParam._m0[0u].w);
    float _938 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0)))) * cbInstanceData._m0[_932].x;
    float _939 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0)))) * cbInstanceData._m0[_932].y;
    float _940 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0)))) * cbInstanceData._m0[_932].z;
    float _3831 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
    float _941 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
    float _3842 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    float _942 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
    float _3853 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    float _943 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
    vec4 _944 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _949 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _960 = (((_949.x - _794) + (_949.w * _794)) * cbMtdParam._m0[3u].x) + _794;
    float _973 = (cbMtdParam._m0[3u].x * (((_941 * _880) - _941) + _944.x)) + _941;
    float _974 = (cbMtdParam._m0[3u].x * (((_942 * _880) - _942) + _944.y)) + _942;
    float _975 = (cbMtdParam._m0[3u].x * (((_943 * _880) - _943) + _944.z)) + _943;
    float _976 = 1.0 - _960;
    float _977 = _976 * _973;
    float _978 = _976 * _974;
    float _979 = _976 * _975;
    float _984 = (_973 + (-0.039999999105930328369140625)) * _960;
    float _985 = (_974 + (-0.039999999105930328369140625)) * _960;
    float _986 = (_975 + (-0.039999999105930328369140625)) * _960;
    float _987 = _984 + 0.039999999105930328369140625;
    float _989 = _985 + 0.039999999105930328369140625;
    float _990 = _986 + 0.039999999105930328369140625;
    vec4 _999 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _875, cbSceneParam._m0[86u].y * _876));
    float _1002 = _999.x * TEXCOORD_4.z;
    float _1003 = dot(vec3(_787, _788, _789), vec3(_867, _868, _869));
    float _1006 = _1003 * 2.0;
    float _1010 = (_1006 * _787) - _867;
    float _1011 = (_1006 * _788) - _868;
    float _1012 = (_1006 * _789) - _869;
    float _1016 = abs(dot(vec3(_867, _868, _869), vec3(_787, _788, _789)));
    float _3864 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
    float _1018 = sqrt(_917);
    float _1031 = exp2((_1018 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1018 * 3.0));
    float _1037 = (1.0 - _1031) * ((_1018 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1038 = _1031 * _1018;
    float _1066 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1070 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1074 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1375;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1101 = fma(_1074, cbModelParam._m0[26u].z, fma(_1070, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1066));
        float _1105 = fma(_1074, cbModelParam._m0[27u].z, fma(_1070, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1066));
        float _1109 = fma(_1074, cbModelParam._m0[28u].z, fma(_1070, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1066));
        float _1133 = _1066 + _787;
        float _1134 = _1070 + _788;
        float _1135 = _1074 + _789;
        float _1145 = fma(_1135, cbModelParam._m0[26u].z, fma(_1134, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1133)) - _1101;
        float _1146 = fma(_1135, cbModelParam._m0[27u].z, fma(_1134, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1133)) - _1105;
        float _1147 = fma(_1135, cbModelParam._m0[28u].z, fma(_1134, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1133)) - _1109;
        float _1151 = inversesqrt(dot(vec3(_1145, _1146, _1147), vec3(_1145, _1146, _1147)));
        float _1164 = ((_1151 * _1145) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1101 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1165 = ((_1151 * _1146) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1105 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1166 = ((_1151 * _1147) / cbModelParam._m0[34u].z) + ((((((_1109 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1169 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1164, _1165, _1166), 0.0);
        vec4 _1176 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1164, _1165, _1166), 0.0);
        vec4 _1183 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1164, _1165, _1166), 0.0);
        vec4 _1190 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1164, _1165, _1166), 0.0);
        float _1203 = exp2((_1169.w + (-0.5)) * 20.0) * 2.0;
        float _1204 = _1203 * (_1169.x + (-0.5));
        float _1205 = _1203 * (_1169.y + (-0.5));
        float _1206 = _1203 * (_1169.z + (-0.5));
        float _1213 = exp2((_1176.w + (-0.5)) * 20.0) * 2.0;
        float _1214 = _1213 * (_1176.x + (-0.5));
        float _1215 = _1213 * (_1176.y + (-0.5));
        float _1216 = _1213 * (_1176.z + (-0.5));
        float _1223 = exp2((_1183.w + (-0.5)) * 20.0) * 2.0;
        float _1224 = _1223 * (_1183.x + (-0.5));
        float _1225 = _1223 * (_1183.y + (-0.5));
        float _1226 = _1223 * (_1183.z + (-0.5));
        float _1233 = exp2((_1190.w + (-0.5)) * 20.0) * 2.0;
        float _1234 = _1233 * (_1190.x + (-0.5));
        float _1235 = _1233 * (_1190.y + (-0.5));
        float _1236 = _1233 * (_1190.z + (-0.5));
        float _1237 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1238 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1239 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1240 = _1204 * 0.5;
        float _1241 = _1214 * 0.5;
        float _1242 = _1224 * 0.5;
        float _1243 = dot(vec3(_1240, _1241, _1242), vec3(_1240, _1241, _1242));
        float _1248 = (_1243 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1243);
        float _1257 = (dot(vec3(_787, _788, _789), vec3(_1248 * _1240, _1248 * _1241, _1248 * _1242)) + 1.0) * 0.5;
        float _3890 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1267 = sqrt(((_1241 * _1241) + (_1240 * _1240)) + (_1242 * _1242)) / (_1237 + 9.9999997473787516355514526367188e-06);
        float _3901 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _1269 = _1268 * 2.0;
        float _1273 = (1.0 - _1268) / (_1268 + 1.0);
        float _3912 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _1283 = ((((1.0 - _1274) * (_1269 + 2.0)) * exp2(log2(isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0))) * (_1269 + 1.0))) + _1274) * _1237;
        float _1284 = _1205 * 0.5;
        float _1285 = _1215 * 0.5;
        float _1286 = _1225 * 0.5;
        float _1287 = dot(vec3(_1284, _1285, _1286), vec3(_1284, _1285, _1286));
        float _1292 = (_1287 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1287);
        float _1300 = (dot(vec3(_787, _788, _789), vec3(_1292 * _1284, _1292 * _1285, _1292 * _1286)) + 1.0) * 0.5;
        float _3923 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1309 = sqrt(((_1285 * _1285) + (_1284 * _1284)) + (_1286 * _1286)) / (_1238 + 9.9999997473787516355514526367188e-06);
        float _3934 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _1311 = _1310 * 2.0;
        float _1315 = (1.0 - _1310) / (_1310 + 1.0);
        float _3945 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1325 = ((((1.0 - _1316) * (_1311 + 2.0)) * exp2(log2(isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))) * (_1311 + 1.0))) + _1316) * _1238;
        float _1326 = _1206 * 0.5;
        float _1327 = _1216 * 0.5;
        float _1328 = _1226 * 0.5;
        float _1329 = dot(vec3(_1326, _1327, _1328), vec3(_1326, _1327, _1328));
        float _1334 = (_1329 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1329);
        float _1342 = (dot(vec3(_787, _788, _789), vec3(_1334 * _1326, _1334 * _1327, _1334 * _1328)) + 1.0) * 0.5;
        float _3956 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1351 = sqrt(((_1327 * _1327) + (_1326 * _1326)) + (_1328 * _1328)) / (_1239 + 9.9999997473787516355514526367188e-06);
        float _3967 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _1353 = _1352 * 2.0;
        float _1357 = (1.0 - _1352) / (_1352 + 1.0);
        float _3978 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
        float _1367 = ((((1.0 - _1358) * (_1353 + 2.0)) * exp2(log2(isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0))) * (_1353 + 1.0))) + _1358) * _1239;
        _1375 = _1206;
        _1377 = _1205;
        _1378 = _1204;
        _1379 = _1216;
        _1380 = _1215;
        _1381 = _1214;
        _1382 = _1226;
        _1383 = _1225;
        _1384 = _1224;
        _1385 = _1239;
        _1386 = _1238;
        _1387 = _1237;
        _1388 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0)));
        _1389 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0)));
        _1390 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0)));
    }
    else
    {
        _1375 = _1376;
        _1377 = _1376;
        _1378 = _1376;
        _1379 = _1376;
        _1380 = _1376;
        _1381 = _1376;
        _1382 = _1376;
        _1383 = _1376;
        _1384 = _1376;
        _1385 = _1376;
        _1386 = _1376;
        _1387 = _1376;
        _1388 = 0.0;
        _1389 = 0.0;
        _1390 = 0.0;
    }
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1416 = fma(_1074, cbModelParam._m0[30u].z, fma(_1070, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1066));
        float _1420 = fma(_1074, cbModelParam._m0[31u].z, fma(_1070, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1066));
        float _1424 = fma(_1074, cbModelParam._m0[32u].z, fma(_1070, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1066));
        float _1447 = _1066 + _787;
        float _1448 = _1070 + _788;
        float _1449 = _1074 + _789;
        float _1459 = fma(_1449, cbModelParam._m0[30u].z, fma(_1448, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1447)) - _1416;
        float _1460 = fma(_1449, cbModelParam._m0[31u].z, fma(_1448, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1447)) - _1420;
        float _1461 = fma(_1449, cbModelParam._m0[32u].z, fma(_1448, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1447)) - _1424;
        float _1465 = inversesqrt(dot(vec3(_1459, _1460, _1461), vec3(_1459, _1460, _1461)));
        float _1478 = ((_1465 * _1459) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1416 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1479 = ((_1465 * _1460) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1420 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1480 = ((_1465 * _1461) / cbModelParam._m0[35u].z) + ((((((_1424 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1482 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1478, _1479, _1480), 0.0);
        vec4 _1489 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1478, _1479, _1480), 0.0);
        vec4 _1496 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1478, _1479, _1480), 0.0);
        vec4 _1503 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1478, _1479, _1480), 0.0);
        float _1515 = exp2((_1482.w + (-0.5)) * 20.0) * 2.0;
        float _1516 = _1515 * (_1482.x + (-0.5));
        float _1517 = _1515 * (_1482.y + (-0.5));
        float _1518 = _1515 * (_1482.z + (-0.5));
        float _1525 = exp2((_1489.w + (-0.5)) * 20.0) * 2.0;
        float _1526 = _1525 * (_1489.x + (-0.5));
        float _1527 = _1525 * (_1489.y + (-0.5));
        float _1528 = _1525 * (_1489.z + (-0.5));
        float _1535 = exp2((_1496.w + (-0.5)) * 20.0) * 2.0;
        float _1536 = _1535 * (_1496.x + (-0.5));
        float _1537 = _1535 * (_1496.y + (-0.5));
        float _1538 = _1535 * (_1496.z + (-0.5));
        float _1545 = exp2((_1503.w + (-0.5)) * 20.0) * 2.0;
        float _1546 = _1545 * (_1503.x + (-0.5));
        float _1547 = _1545 * (_1503.y + (-0.5));
        float _1548 = _1545 * (_1503.z + (-0.5));
        float _1549 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1550 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1551 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1552 = _1516 * 0.5;
        float _1553 = _1526 * 0.5;
        float _1554 = _1536 * 0.5;
        float _1555 = dot(vec3(_1552, _1553, _1554), vec3(_1552, _1553, _1554));
        float _1560 = (_1555 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1555);
        float _1568 = (dot(vec3(_787, _788, _789), vec3(_1560 * _1552, _1560 * _1553, _1560 * _1554)) + 1.0) * 0.5;
        float _4019 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1577 = sqrt(((_1553 * _1553) + (_1552 * _1552)) + (_1554 * _1554)) / (_1549 + 9.9999997473787516355514526367188e-06);
        float _4030 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1578 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _1579 = _1578 * 2.0;
        float _1583 = (1.0 - _1578) / (_1578 + 1.0);
        float _4041 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1584 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _1593 = ((((1.0 - _1584) * (_1579 + 2.0)) * exp2(log2(isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * (_1579 + 1.0))) + _1584) * _1549;
        float _1594 = _1517 * 0.5;
        float _1595 = _1527 * 0.5;
        float _1596 = _1537 * 0.5;
        float _1597 = dot(vec3(_1594, _1595, _1596), vec3(_1594, _1595, _1596));
        float _1602 = (_1597 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1597);
        float _1610 = (dot(vec3(_787, _788, _789), vec3(_1602 * _1594, _1602 * _1595, _1602 * _1596)) + 1.0) * 0.5;
        float _4052 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1619 = sqrt(((_1595 * _1595) + (_1594 * _1594)) + (_1596 * _1596)) / (_1550 + 9.9999997473787516355514526367188e-06);
        float _4063 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1620 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _1621 = _1620 * 2.0;
        float _1625 = (1.0 - _1620) / (_1620 + 1.0);
        float _4074 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1626 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _1635 = ((((1.0 - _1626) * (_1621 + 2.0)) * exp2(log2(isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * (_1621 + 1.0))) + _1626) * _1550;
        float _1636 = _1518 * 0.5;
        float _1637 = _1528 * 0.5;
        float _1638 = _1538 * 0.5;
        float _1639 = dot(vec3(_1636, _1637, _1638), vec3(_1636, _1637, _1638));
        float _1644 = (_1639 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1639);
        float _1652 = (dot(vec3(_787, _788, _789), vec3(_1644 * _1636, _1644 * _1637, _1644 * _1638)) + 1.0) * 0.5;
        float _4085 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1661 = sqrt(((_1637 * _1637) + (_1636 * _1636)) + (_1638 * _1638)) / (_1551 + 9.9999997473787516355514526367188e-06);
        float _4096 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1662 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _1663 = _1662 * 2.0;
        float _1667 = (1.0 - _1662) / (_1662 + 1.0);
        float _4107 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1668 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
        float _1677 = ((((1.0 - _1668) * (_1663 + 2.0)) * exp2(log2(isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0))) * (_1663 + 1.0))) + _1668) * _1551;
        _1685 = _1518;
        _1686 = _1517;
        _1687 = _1516;
        _1688 = _1528;
        _1689 = _1527;
        _1690 = _1526;
        _1691 = _1538;
        _1692 = _1537;
        _1693 = _1536;
        _1694 = _1551;
        _1695 = _1550;
        _1696 = _1549;
        _1697 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0)));
        _1698 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0)));
        _1699 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0)));
    }
    else
    {
        _1685 = _1376;
        _1686 = _1376;
        _1687 = _1376;
        _1688 = _1376;
        _1689 = _1376;
        _1690 = _1376;
        _1691 = _1376;
        _1692 = _1376;
        _1693 = _1376;
        _1694 = _1376;
        _1695 = _1376;
        _1696 = _1376;
        _1697 = 0.0;
        _1698 = 0.0;
        _1699 = 0.0;
    }
    float _1709 = (cbModelParam._m0[1u].x * (_1697 - _1388)) + _1388;
    float _1710 = (cbModelParam._m0[1u].x * (_1698 - _1389)) + _1389;
    float _1711 = (cbModelParam._m0[1u].x * (_1699 - _1390)) + _1390;
    float _1732 = fma(_1711, cbSceneParam._m0[89u].z, fma(_1710, cbSceneParam._m0[89u].y, _1709 * cbSceneParam._m0[89u].x));
    float _1735 = fma(_1711, cbSceneParam._m0[90u].z, fma(_1710, cbSceneParam._m0[90u].y, _1709 * cbSceneParam._m0[90u].x));
    float _1738 = fma(_1711, cbSceneParam._m0[91u].z, fma(_1710, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1709));
    float _1753 = _1010 * 0.5;
    float _1754 = _1011 * 0.5;
    float _1755 = _1012 * 0.5;
    float _1756 = dot(vec4(_1753, _1754, _1755, 1.0), vec4(_1687, _1690, _1693, _1696));
    float _1759 = dot(vec4(_1753, _1754, _1755, 1.0), vec4(_1686, _1689, _1692, _1695));
    float _1762 = dot(vec4(_1753, _1754, _1755, 1.0), vec4(_1685, _1688, _1691, _1694));
    float _1796;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1769 = dot(vec4(_1753, _1754, _1755, 1.0), vec4(_1375, _1379, _1382, _1385));
        float _1773 = dot(vec4(_1753, _1754, _1755, 1.0), vec4(_1377, _1380, _1383, _1386));
        float _1777 = dot(vec4(_1753, _1754, _1755, 1.0), vec4(_1378, _1381, _1384, _1387));
        float _1784 = dot(vec4(cbModelParam._m0[39u]), vec4(_1753, _1754, _1755, 1.0));
        _1796 = dot(vec3(isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0)), isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0)), isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1784) ? 0.0 : (isnan(0.0) ? _1784 : max(0.0, _1784))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1796 = 1.0;
    }
    float _1807;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1798 = dot(vec4(cbModelParam._m0[40u]), vec4(_1753, _1754, _1755, 1.0));
        _1807 = dot(vec3(isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0)), isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0)), isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1798) ? 0.0 : (isnan(0.0) ? _1798 : max(0.0, _1798))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1807 = 1.0;
    }
    float _1811 = (_1807 * cbModelParam._m0[1u].x) + (_1796 * (1.0 - cbModelParam._m0[1u].x));
    float _1821 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _917);
    float _1822 = isnan(_1821) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1821 : min(cbModelParam._m0[25u].z, _1821));
    float _1902;
    float _1904;
    float _1906;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1869 = fma(_1074, cbModelParam._m0[13u].z, fma(_1070, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1066)) + cbModelParam._m0[13u].w;
        float _1873 = fma(_1074, cbModelParam._m0[14u].z, fma(_1070, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1066)) + cbModelParam._m0[14u].w;
        float _1877 = fma(_1074, cbModelParam._m0[15u].z, fma(_1070, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1066)) + cbModelParam._m0[15u].w;
        float _1880 = fma(_1012, cbModelParam._m0[13u].z, fma(_1011, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1010));
        float _1883 = fma(_1012, cbModelParam._m0[14u].z, fma(_1011, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1010));
        float _1886 = fma(_1012, cbModelParam._m0[15u].z, fma(_1011, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1010));
        float _1914;
        if (_1880 > 0.0)
        {
            _1914 = abs((1.0 - _1869) / _1880);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1880 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1869 + 1.0) / _1880);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1914 = frontier_phi_16_14_ladder;
        }
        float _2116;
        if (_1883 > 0.0)
        {
            _2116 = abs((1.0 - _1873) / _1883);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1883 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1873 + 1.0) / _1883);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2116 = frontier_phi_25_21_ladder;
        }
        float _2370;
        if (_1886 > 0.0)
        {
            _2370 = abs((1.0 - _1877) / _1886);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1886 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1877 + 1.0) / _1886);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2370 = frontier_phi_37_32_ladder;
        }
        float _2372 = isnan(_2116) ? _1914 : (isnan(_1914) ? _2116 : min(_1914, _2116));
        float _2373 = isnan(_2370) ? _2372 : (isnan(_2372) ? _2370 : min(_2372, _2370));
        float _2377 = (_2373 * _1880) + _1869;
        float _2378 = (_2373 * _1883) + _1873;
        float _2379 = (_2373 * _1886) + _1877;
        float _2380 = _2373 * 9.9999997473787516355514526367188e-05;
        float _2382 = (-1.0) - _2380;
        float _2384 = _2380 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2379 > _2384) || ((_2379 < _2382) || ((_2378 > _2384) || ((_2378 < _2382) || ((_2377 < _2382) || (_2377 > _2384))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2507 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2379, cbModelParam._m0[9u].z, fma(_2378, cbModelParam._m0[9u].y, _2377 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2379, cbModelParam._m0[10u].z, fma(_2378, cbModelParam._m0[10u].y, _2377 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2379, cbModelParam._m0[11u].z, fma(_2378, cbModelParam._m0[11u].y, _2377 * cbModelParam._m0[11u].x))), _1822);
            frontier_phi_15_37_ladder = _2507.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2507.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2507.x * cbModelParam._m0[1u].y;
        }
        _1902 = frontier_phi_15_37_ladder_2;
        _1904 = frontier_phi_15_37_ladder_1;
        _1906 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1890 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1010, _1011, _1012), _1822);
        _1902 = _1890.x * cbModelParam._m0[1u].y;
        _1904 = _1890.y * cbModelParam._m0[1u].y;
        _1906 = _1890.z * cbModelParam._m0[1u].y;
    }
    float _1910 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _917);
    float _1911 = isnan(_1910) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1910 : min(cbModelParam._m0[25u].w, _1910));
    float _2000;
    float _2002;
    float _2004;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1964 = fma(_1074, cbModelParam._m0[21u].z, fma(_1070, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1066)) + cbModelParam._m0[21u].w;
        float _1968 = fma(_1074, cbModelParam._m0[22u].z, fma(_1070, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1066)) + cbModelParam._m0[22u].w;
        float _1972 = fma(_1074, cbModelParam._m0[23u].z, fma(_1070, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1066)) + cbModelParam._m0[23u].w;
        float _1975 = fma(_1012, cbModelParam._m0[21u].z, fma(_1011, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1010));
        float _1978 = fma(_1012, cbModelParam._m0[22u].z, fma(_1011, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1010));
        float _1981 = fma(_1012, cbModelParam._m0[23u].z, fma(_1011, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1010));
        float _2121;
        if (_1975 > 0.0)
        {
            _2121 = abs((1.0 - _1964) / _1975);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1975 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1964 + 1.0) / _1975);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2121 = frontier_phi_27_23_ladder;
        }
        float _2397;
        if (_1978 > 0.0)
        {
            _2397 = abs((1.0 - _1968) / _1978);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1978 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1968 + 1.0) / _1978);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2397 = frontier_phi_39_34_ladder;
        }
        float _2610;
        if (_1981 > 0.0)
        {
            _2610 = abs((1.0 - _1972) / _1981);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1981 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1972 + 1.0) / _1981);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2610 = frontier_phi_48_45_ladder;
        }
        float _2612 = isnan(_2397) ? _2121 : (isnan(_2121) ? _2397 : min(_2121, _2397));
        float _2613 = isnan(_2610) ? _2612 : (isnan(_2612) ? _2610 : min(_2612, _2610));
        float _2617 = (_2613 * _1975) + _1964;
        float _2618 = (_2613 * _1978) + _1968;
        float _2619 = (_2613 * _1981) + _1972;
        float _2620 = _2613 * 9.9999997473787516355514526367188e-05;
        float _2621 = (-1.0) - _2620;
        float _2623 = _2620 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2619 > _2623) || ((_2619 < _2621) || ((_2618 > _2623) || ((_2618 < _2621) || ((_2617 < _2621) || (_2617 > _2623))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2852 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2619, cbModelParam._m0[17u].z, fma(_2618, cbModelParam._m0[17u].y, _2617 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2619, cbModelParam._m0[18u].z, fma(_2618, cbModelParam._m0[18u].y, _2617 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2619, cbModelParam._m0[19u].z, fma(_2618, cbModelParam._m0[19u].y, _2617 * cbModelParam._m0[19u].x))), _1911);
            frontier_phi_24_48_ladder = _2852.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2852.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2852.x * cbModelParam._m0[1u].z;
        }
        _2000 = frontier_phi_24_48_ladder_2;
        _2002 = frontier_phi_24_48_ladder_1;
        _2004 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1984 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1010, _1011, _1012), _1911);
        _2000 = _1984.x * cbModelParam._m0[1u].z;
        _2002 = _1984.y * cbModelParam._m0[1u].z;
        _2004 = _1984.z * cbModelParam._m0[1u].z;
    }
    float _2017 = (((_1037 * _987) + _1038) * _1002) * ((cbModelParam._m0[1u].w * (_2000 - _1902)) + _1902);
    float _2019 = (((_1037 * _989) + _1038) * _1002) * ((cbModelParam._m0[1u].w * (_2002 - _1904)) + _1904);
    float _2021 = (((_1037 * _990) + _1038) * _1002) * ((cbModelParam._m0[1u].w * (_2004 - _1906)) + _1906);
    float _2024 = fma(_2021, cbSceneParam._m0[89u].z, fma(_2019, cbSceneParam._m0[89u].y, _2017 * cbSceneParam._m0[89u].x));
    float _2027 = fma(_2021, cbSceneParam._m0[90u].z, fma(_2019, cbSceneParam._m0[90u].y, _2017 * cbSceneParam._m0[90u].x));
    float _2030 = fma(_2021, cbSceneParam._m0[91u].z, fma(_2019, cbSceneParam._m0[91u].y, _2017 * cbSceneParam._m0[91u].x));
    uvec4 _2040 = floatBitsToUint(cbInstanceData._m0[_930 + 5u]);
    uint _2042 = _2040.x * 14u;
    uint _2043 = _2042 + 13u;
    float _2050 = _1002 + (-1.0);
    float _2055 = (cbLight._m0[_2043].x * _2050) + 1.0;
    float _2056 = (cbLight._m0[_2043].y * _2050) + 1.0;
    float _2057 = (cbLight._m0[_2043].z * _2050) + 1.0;
    float _2058 = (cbLight._m0[_2043].w * _2050) + 1.0;
    uint _2059 = _2042 + 5u;
    float _2065 = isnan(1.0) ? _2056 : (isnan(_2056) ? 1.0 : min(_2056, 1.0));
    uint _2069 = _2042 + 4u;
    float _2075 = isnan(1.0) ? _2055 : (isnan(_2055) ? 1.0 : min(_2055, 1.0));
    uint _2079 = _2042 | 1u;
    float _2090 = dot(vec3(cbLight._m0[_2042].xyz), vec3(_787, _788, _789));
    float _2093 = dot(vec3(cbLight._m0[_2079].xyz), vec3(_787, _788, _789));
    float _4243 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
    float _4254 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
    float _2098 = (isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0))) * 0.3183098733425140380859375;
    float _2100 = (isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * 0.3183098733425140380859375;
    float _2107 = ((cbLight._m0[_2059].x * _2065) * _2100) + ((cbLight._m0[_2069].x * _2075) * _2098);
    float _2108 = ((_2065 * cbLight._m0[_2059].y) * _2100) + ((_2075 * cbLight._m0[_2069].y) * _2098);
    float _2109 = ((_2065 * cbLight._m0[_2059].z) * _2100) + ((_2075 * cbLight._m0[_2069].z) * _2098);
    uvec4 _2113 = floatBitsToUint(cbLight._m0[_2042 + 12u]);
    bool _2115 = _2113.x == 0u;
    float _2126;
    float _2128;
    float _2130;
    if (_2115)
    {
        _2126 = _2107;
        _2128 = _2108;
        _2130 = _2109;
    }
    else
    {
        uint _2134 = _2042 + 6u;
        float _2150 = (dot(vec3(cbLight._m0[_2042 + 2u].xyz), vec3(_787, _788, _789)) * 0.5) + 0.5;
        float _2151 = _2150 * _2150;
        float _4265 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
        float _2152 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _2153 = isnan(1.0) ? _2057 : (isnan(_2057) ? 1.0 : min(_2057, 1.0));
        _2126 = (((cbLight._m0[_2134].x * 0.3183098733425140380859375) * _2152) * _2153) + _2107;
        _2128 = (((cbLight._m0[_2134].y * 0.3183098733425140380859375) * _2152) * _2153) + _2108;
        _2130 = (((cbLight._m0[_2134].z * 0.3183098733425140380859375) * _2152) * _2153) + _2109;
    }
    bool _2133 = _2113.y == 0u;
    float _2171;
    float _2173;
    float _2175;
    if (_2133)
    {
        _2171 = _2126;
        _2173 = _2128;
        _2175 = _2130;
    }
    else
    {
        uint _2341 = _2042 + 7u;
        float _2357 = (dot(vec3(cbLight._m0[_2042 + 3u].xyz), vec3(_787, _788, _789)) * 0.5) + 0.5;
        float _2358 = _2357 * _2357;
        float _4281 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
        float _2359 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
        float _2360 = isnan(1.0) ? _2058 : (isnan(_2058) ? 1.0 : min(_2058, 1.0));
        _2171 = (((cbLight._m0[_2341].x * 0.3183098733425140380859375) * _2359) * _2360) + _2126;
        _2173 = (((cbLight._m0[_2341].y * 0.3183098733425140380859375) * _2359) * _2360) + _2128;
        _2175 = (((cbLight._m0[_2341].z * 0.3183098733425140380859375) * _2359) * _2360) + _2130;
    }
    uint _2178 = _2042 + 8u;
    float _2191 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2042].w)) * _917) * 0.949999988079071044921875);
    float _2192 = _2191 * _2191;
    float _2193 = cbLight._m0[_2042].x + _867;
    float _2194 = cbLight._m0[_2042].y + _868;
    float _2195 = cbLight._m0[_2042].z + _869;
    float _2199 = inversesqrt(dot(vec3(_2193, _2194, _2195), vec3(_2193, _2194, _2195)));
    float _2200 = _2199 * _2193;
    float _2201 = _2199 * _2194;
    float _2202 = _2199 * _2195;
    float _2203 = dot(vec3(_787, _788, _789), vec3(cbLight._m0[_2042].xyz));
    float _4297 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
    float _2206 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
    float _4308 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
    float _2207 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
    float _2208 = dot(vec3(_787, _788, _789), vec3(_2200, _2201, _2202));
    float _4319 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
    float _2211 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
    float _2212 = dot(vec3(cbLight._m0[_2042].xyz), vec3(_2200, _2201, _2202));
    float _4330 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
    float _2216 = _2192 * _2192;
    float _2220 = ((_2211 * _2211) * (_2216 + (-1.0))) + 1.0;
    float _2228 = exp2(log2(1.0 - (isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0)))) * 5.0);
    float _2229 = 0.959999978542327880859375 - _984;
    float _2231 = 0.959999978542327880859375 - _985;
    float _2232 = 0.959999978542327880859375 - _986;
    float _2239 = 1.0 - _2192;
    float _2250 = (0.5 / (((_2207 * ((_2206 * _2239) + _2192)) + 9.9999999392252902907785028219223e-09) + (((_2207 * _2239) + _2192) * _2206))) * _2206;
    float _4341 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
    float _2252 = (isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0))) * (_2216 / ((_2220 * _2220) * 3.141590118408203125));
    uint _2263 = _2042 + 9u;
    float _2274 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2079].w)) * _917) * 0.949999988079071044921875);
    float _2275 = _2274 * _2274;
    float _2276 = cbLight._m0[_2079].x + _867;
    float _2277 = cbLight._m0[_2079].y + _868;
    float _2278 = cbLight._m0[_2079].z + _869;
    float _2282 = inversesqrt(dot(vec3(_2276, _2277, _2278), vec3(_2276, _2277, _2278)));
    float _2283 = _2282 * _2276;
    float _2284 = _2282 * _2277;
    float _2285 = _2282 * _2278;
    float _2286 = dot(vec3(_787, _788, _789), vec3(cbLight._m0[_2079].xyz));
    float _4352 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
    float _2289 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
    float _2290 = dot(vec3(_787, _788, _789), vec3(_2283, _2284, _2285));
    float _4363 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
    float _2293 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
    float _2294 = dot(vec3(cbLight._m0[_2079].xyz), vec3(_2283, _2284, _2285));
    float _4374 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
    float _2298 = _2275 * _2275;
    float _2302 = ((_2293 * _2293) * (_2298 + (-1.0))) + 1.0;
    float _2309 = exp2(log2(1.0 - (isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0)))) * 5.0);
    float _2316 = 1.0 - _2275;
    float _2326 = (0.5 / (((_2207 * ((_2289 * _2316) + _2275)) + 9.9999999392252902907785028219223e-09) + (((_2207 * _2316) + _2275) * _2289))) * _2289;
    float _4385 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
    float _2328 = (isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))) * (_2298 / ((_2302 * _2302) * 3.141590118408203125));
    float _2338 = (((((_2309 * _2229) + _987) * cbLight._m0[_2263].x) * _2328) * _2065) + (((((_2228 * _2229) + _987) * cbLight._m0[_2178].x) * _2252) * _2075);
    float _2339 = (((((_2309 * _2231) + _989) * cbLight._m0[_2263].y) * _2328) * _2065) + (((((_2228 * _2231) + _989) * cbLight._m0[_2178].y) * _2252) * _2075);
    float _2340 = (((((_2309 * _2232) + _990) * cbLight._m0[_2263].z) * _2328) * _2065) + (((((_2228 * _2232) + _990) * cbLight._m0[_2178].z) * _2252) * _2075);
    float _2402;
    float _2404;
    float _2406;
    if (_2115)
    {
        _2402 = _2338;
        _2404 = _2339;
        _2406 = _2340;
    }
    else
    {
        uint _2408 = _2042 + 2u;
        uint _2412 = _2042 + 10u;
        float _2426 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2408].w)) * _917) * 0.949999988079071044921875);
        float _2427 = _2426 * _2426;
        float _2428 = cbLight._m0[_2408].x + _867;
        float _2429 = cbLight._m0[_2408].y + _868;
        float _2430 = cbLight._m0[_2408].z + _869;
        float _2434 = inversesqrt(dot(vec3(_2428, _2429, _2430), vec3(_2428, _2429, _2430)));
        float _2435 = _2434 * _2428;
        float _2436 = _2434 * _2429;
        float _2437 = _2434 * _2430;
        float _2438 = dot(vec3(_787, _788, _789), vec3(cbLight._m0[_2408].xyz));
        float _4396 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
        float _2441 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
        float _2442 = dot(vec3(_787, _788, _789), vec3(_2435, _2436, _2437));
        float _4407 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
        float _2445 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
        float _2446 = dot(vec3(cbLight._m0[_2408].xyz), vec3(_2435, _2436, _2437));
        float _4418 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
        float _2450 = _2427 * _2427;
        float _2454 = ((_2445 * _2445) * (_2450 + (-1.0))) + 1.0;
        float _2461 = exp2(log2(1.0 - (isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0)))) * 5.0);
        float _2468 = 1.0 - _2427;
        float _2478 = (0.5 / (((_2207 * ((_2441 * _2468) + _2427)) + 9.9999999392252902907785028219223e-09) + (((_2207 * _2468) + _2427) * _2441))) * _2441;
        float _4429 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
        float _2480 = (isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0))) * (_2450 / ((_2454 * _2454) * 3.141590118408203125));
        float _2481 = isnan(1.0) ? _2057 : (isnan(_2057) ? 1.0 : min(_2057, 1.0));
        _2402 = (((((_2461 * _2229) + _987) * cbLight._m0[_2412].x) * _2480) * _2481) + _2338;
        _2404 = (((((_2461 * _2231) + _989) * cbLight._m0[_2412].y) * _2480) * _2481) + _2339;
        _2406 = (((((_2461 * _2232) + _990) * cbLight._m0[_2412].z) * _2480) * _2481) + _2340;
    }
    float _2516;
    float _2518;
    float _2520;
    if (_2133)
    {
        _2516 = _2402;
        _2518 = _2404;
        _2520 = _2406;
    }
    else
    {
        uint _2527 = _2042 + 3u;
        uint _2531 = _2042 + 11u;
        float _2545 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2527].w)) * _917) * 0.949999988079071044921875);
        float _2546 = _2545 * _2545;
        float _2547 = cbLight._m0[_2527].x + _867;
        float _2548 = cbLight._m0[_2527].y + _868;
        float _2549 = cbLight._m0[_2527].z + _869;
        float _2553 = inversesqrt(dot(vec3(_2547, _2548, _2549), vec3(_2547, _2548, _2549)));
        float _2554 = _2553 * _2547;
        float _2555 = _2553 * _2548;
        float _2556 = _2553 * _2549;
        float _2557 = dot(vec3(_787, _788, _789), vec3(cbLight._m0[_2527].xyz));
        float _4445 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
        float _2560 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
        float _2561 = dot(vec3(_787, _788, _789), vec3(_2554, _2555, _2556));
        float _4456 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
        float _2564 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
        float _2565 = dot(vec3(cbLight._m0[_2527].xyz), vec3(_2554, _2555, _2556));
        float _4467 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
        float _2569 = _2546 * _2546;
        float _2573 = ((_2564 * _2564) * (_2569 + (-1.0))) + 1.0;
        float _2580 = exp2(log2(1.0 - (isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0)))) * 5.0);
        float _2587 = 1.0 - _2546;
        float _2597 = (0.5 / (((_2207 * ((_2560 * _2587) + _2546)) + 9.9999999392252902907785028219223e-09) + (((_2207 * _2587) + _2546) * _2560))) * _2560;
        float _4478 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
        float _2599 = (isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0))) * (_2569 / ((_2573 * _2573) * 3.141590118408203125));
        float _2600 = isnan(1.0) ? _2058 : (isnan(_2058) ? 1.0 : min(_2058, 1.0));
        _2516 = (((((_2580 * _2229) + _987) * cbLight._m0[_2531].x) * _2599) * _2600) + _2402;
        _2518 = (((((_2580 * _2231) + _989) * cbLight._m0[_2531].y) * _2599) * _2600) + _2404;
        _2520 = (((((_2580 * _2232) + _990) * cbLight._m0[_2531].z) * _2599) * _2600) + _2406;
    }
    float _2734;
    float _2736;
    float _2738;
    float _2740;
    float _2742;
    float _2744;
    if (_2040.y == 0u)
    {
        float _2675 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2676 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2675;
        float _2677 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2675;
        float _2678 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2675;
        uvec4 _2690 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2691 = _2690.x;
        uint _2702 = uint((float(_2690.y) * floor(float(uint(cbSceneParam._m0[85u].y * _876) / _2691))) + floor(float(uint(cbSceneParam._m0[85u].x * _875) / _2691)));
        float _2712 = (log2(_2678 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2713 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
        uint _2716 = uint(isnan(14.0) ? _2713 : (isnan(_2713) ? 14.0 : min(_2713, 14.0)));
        uvec4 _2721 = texelFetch(g_lightClusterGridBuffer, int(((_2716 << 2u) + (_2702 << 6u)) >> 2u));
        uint _2722 = _2721.x;
        uint _2723 = _2690.z;
        float _2857;
        float _2859;
        float _2861;
        float _2863;
        float _2865;
        float _2867;
        if (((((1u << ((_2723 >> 4u) & 15u)) + 4294967295u) & _2722) == 0u) || ((_2723 & 240u) == 0u))
        {
            _2857 = 0.0;
            _2859 = 0.0;
            _2861 = 0.0;
            _2863 = 0.0;
            _2865 = 0.0;
            _2867 = 0.0;
        }
        else
        {
            float _2858;
            float _2860;
            float _2862;
            float _2864;
            float _2866;
            float _2868;
            float _3010 = 0.0;
            float _3011 = 0.0;
            float _3012 = 0.0;
            float _3013 = 0.0;
            float _3014 = 0.0;
            float _3015 = 0.0;
            uint _3016 = 0u;
            uint _3025;
            bool _3026;
            for (;;)
            {
                _3025 = texelFetch(g_lightClassification, int((((_2716 << 5u) + (_2702 << 9u)) + (_3016 << 2u)) >> 2u)).x;
                _3026 = _3025 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_3026)
                {
                    frontier_phi_63_pred = _3015;
                    frontier_phi_63_pred_1 = _3014;
                    frontier_phi_63_pred_2 = _3013;
                    frontier_phi_63_pred_3 = _3012;
                    frontier_phi_63_pred_4 = _3011;
                    frontier_phi_63_pred_5 = _3010;
                }
                else
                {
                    float _3134;
                    float _3135;
                    float _3136;
                    float _3137;
                    float _3138;
                    float _3139;
                    uint _3140;
                    _3134 = _3010;
                    _3135 = _3011;
                    _3136 = _3012;
                    _3137 = _3013;
                    _3138 = _3014;
                    _3139 = _3015;
                    _3140 = _3025;
                    float _3066;
                    float _3067;
                    float _3068;
                    float _3069;
                    float _3070;
                    float _3071;
                    for (;;)
                    {
                        uint _3144 = uint(findLSB(_3140)) + (_3016 << 5u);
                        uint _3141 = (_3140 + 4294967295u) & _3140;
                        uint _3146 = _3144 * 48u;
                        vec4 _3160 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3146)).x, texelFetch(g_PointLightRenderingBuffer, int(_3146 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3146 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3146 + 3u)).x));
                        uint _3166 = (_3144 * 48u) + 4u;
                        vec4 _3179 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3166)).x, texelFetch(g_PointLightRenderingBuffer, int(_3166 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3166 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3166 + 3u)).x));
                        uint _3185 = (_3144 * 48u) + 8u;
                        vec3 _3196 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3185)).x, texelFetch(g_PointLightRenderingBuffer, int(_3185 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3185 + 2u)).x));
                        float _3200 = _3160.x - _2676;
                        float _3201 = _3160.y - _2677;
                        float _3202 = _3160.z - _2678;
                        float _3203 = dot(vec3(_3200, _3201, _3202), vec3(_3200, _3201, _3202));
                        float _3206 = inversesqrt(_3203);
                        float _3207 = _3206 * _3200;
                        float _3208 = _3206 * _3201;
                        float _3209 = _3206 * _3202;
                        float _3210 = dot(vec3(_898, _901, _904), vec3(_3207, _3208, _3209));
                        float _3215 = 1.0 - (_3203 * _3160.w);
                        float _4504 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0));
                        float _3216 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
                        float _3217 = sqrt(_3203) * _3179.w;
                        float _3220 = 1.39999997615814208984375 / (_3217 + 1.39999997615814208984375);
                        float _3221 = _3220 * _3220;
                        float _3224 = ((1.0 - _3221) * _3210) + _3221;
                        float _3227 = _3217 * _3217;
                        float _3231 = ((isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0))) * _3216) / ((_3227 * 0.699999988079071044921875) + 1.0);
                        float _3235 = (-0.0) - _2676;
                        float _3236 = (-0.0) - _2677;
                        float _3237 = (-0.0) - _2678;
                        float _3241 = inversesqrt(dot(vec3(_3235, _3236, _3237), vec3(_3235, _3236, _3237)));
                        float _3242 = _3241 * _3235;
                        float _3243 = _3241 * _3236;
                        float _3244 = _3241 * _3237;
                        float _3251 = exp2(log2(1.0 / ((_3227 * 3.5) + 5.0)) * 0.25);
                        float _3252 = 1.0 - _1018;
                        float _3259 = sqrt(1.0 - ((1.0 - (_3252 * _3252)) * (1.0 - (_3251 * _3251))));
                        float _3260 = _3259 * _3259;
                        float _3261 = _3260 * _3260;
                        float _3262 = _3242 + _3207;
                        float _3263 = _3243 + _3208;
                        float _3264 = _3244 + _3209;
                        float _3268 = inversesqrt(dot(vec3(_3262, _3263, _3264), vec3(_3262, _3263, _3264)));
                        float _3272 = dot(vec3(_898, _901, _904), vec3(_3242, _3243, _3244));
                        float _4520 = isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : max(_3272, 0.0));
                        float _3275 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
                        float _3276 = dot(vec3(_898, _901, _904), vec3(_3268 * _3262, _3268 * _3263, _3268 * _3264));
                        float _4531 = isnan(0.0) ? _3276 : (isnan(_3276) ? 0.0 : max(_3276, 0.0));
                        float _3279 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
                        float _3283 = ((_3279 * _3279) * (_3261 + (-1.0))) + 1.0;
                        float _3284 = _3220 * _3260;
                        float _3285 = _3284 * _3284;
                        float _3288 = ((1.0 - _3285) * _3210) + _3285;
                        float _4542 = isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0));
                        float _3289 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
                        float _3290 = 1.0 - _3260;
                        float _3300 = (0.5 / (((_3289 * ((_3275 * _3290) + _3260)) + 9.9999999392252902907785028219223e-09) + (((_3289 * _3290) + _3260) * _3275))) * _3289;
                        float _4553 = isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : max(_3300, 0.0));
                        float _3311 = (((_3261 * 3.1415927410125732421875) * (isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0)))) / ((_3283 * _3283) * ((_3227 * 2.1991131305694580078125) + 3.141590118408203125))) * _3216;
                        _3069 = (_3231 * _3179.x) + _3137;
                        _3070 = (_3231 * _3179.y) + _3138;
                        _3071 = (_3231 * _3179.z) + _3139;
                        _3066 = (_3311 * _3196.x) + _3134;
                        _3067 = (_3311 * _3196.y) + _3135;
                        _3068 = (_3311 * _3196.z) + _3136;
                        if (_3141 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3134 = _3066;
                            _3135 = _3067;
                            _3136 = _3068;
                            _3137 = _3069;
                            _3138 = _3070;
                            _3139 = _3071;
                            _3140 = _3141;
                        }
                    }
                    frontier_phi_63_pred = _3071;
                    frontier_phi_63_pred_1 = _3070;
                    frontier_phi_63_pred_2 = _3069;
                    frontier_phi_63_pred_3 = _3068;
                    frontier_phi_63_pred_4 = _3067;
                    frontier_phi_63_pred_5 = _3066;
                }
                _2868 = frontier_phi_63_pred;
                _2866 = frontier_phi_63_pred_1;
                _2864 = frontier_phi_63_pred_2;
                _2862 = frontier_phi_63_pred_3;
                _2860 = frontier_phi_63_pred_4;
                _2858 = frontier_phi_63_pred_5;
                uint _3017 = _3016 + 1u;
                if (_3017 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3010 = _2858;
                    _3011 = _2860;
                    _3012 = _2862;
                    _3013 = _2864;
                    _3014 = _2866;
                    _3015 = _2868;
                    _3016 = _3017;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2857 = _2858;
            _2859 = _2860;
            _2861 = _2862;
            _2863 = _2864;
            _2865 = _2866;
            _2867 = _2868;
        }
        uvec4 _2871 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2872 = _2871.z;
        uint _2874 = (_2872 >> 8u) & 15u;
        float _2978;
        float _2980;
        float _2982;
        float _2984;
        float _2986;
        float _2988;
        if (((4294967295u << _2874) & _2722) == 0u)
        {
            _2978 = _2857;
            _2980 = _2859;
            _2982 = _2861;
            _2984 = _2863;
            _2986 = _2865;
            _2988 = _2867;
        }
        else
        {
            float _3003 = inversesqrt(dot(vec3(_2676, _2677, _2678), vec3(_2676, _2677, _2678)));
            float _3004 = _3003 * _2676;
            float _3005 = _3003 * _2677;
            float _3006 = _3003 * _2678;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2874 < ((_2872 >> 12u) & 15u))
            {
                float _2979;
                float _2981;
                float _2983;
                float _2985;
                float _2987;
                float _2989;
                float _3117 = _2857;
                float _3118 = _2859;
                float _3119 = _2861;
                float _3120 = _2863;
                float _3121 = _2865;
                float _3122 = _2867;
                uint _3123 = _2874;
                uint _3132;
                bool _3133;
                for (;;)
                {
                    _3132 = texelFetch(g_lightClassification, int((((_2716 << 5u) + (_2702 << 9u)) + (_3123 << 2u)) >> 2u)).x;
                    _3133 = _3132 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_3133)
                    {
                        frontier_phi_69_pred = _3122;
                        frontier_phi_69_pred_1 = _3121;
                        frontier_phi_69_pred_2 = _3120;
                        frontier_phi_69_pred_3 = _3119;
                        frontier_phi_69_pred_4 = _3118;
                        frontier_phi_69_pred_5 = _3117;
                    }
                    else
                    {
                        float _3316;
                        float _3317;
                        float _3318;
                        float _3319;
                        float _3320;
                        float _3321;
                        float _3609;
                        float _3610;
                        float _3611;
                        float _3612;
                        float _3613;
                        float _3614;
                        float _3329 = _3117;
                        float _3330 = _3118;
                        float _3331 = _3119;
                        float _3332 = _3120;
                        float _3333 = _3121;
                        float _3334 = _3122;
                        uint _3335 = _3132;
                        uint _3336;
                        vec4 _3361;
                        float _3362;
                        vec4 _3377;
                        vec3 _3389;
                        vec4 _3404;
                        vec4 _3419;
                        float _3465;
                        bool _3466;
                        for (;;)
                        {
                            uint _3346 = ((_3123 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3335));
                            _3336 = (_3335 + 4294967295u) & _3335;
                            uint _3348 = _3346 * 40u;
                            _3361 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3348)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 3u)).x));
                            _3362 = _3361.w;
                            uint _3364 = (_3346 * 40u) + 4u;
                            _3377 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3364)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 3u)).x));
                            uint _3379 = (_3346 * 40u) + 8u;
                            _3389 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3379)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 2u)).x));
                            uint _3391 = (_3346 * 40u) + 16u;
                            _3404 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3391)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 3u)).x));
                            uint _3406 = (_3346 * 40u) + 20u;
                            _3419 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3406)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 3u)).x));
                            uint _3421 = (_3346 * 40u) + 24u;
                            vec4 _3434 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3421)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 3u)).x));
                            uint _3440 = (_3346 * 40u) + 28u;
                            vec4 _3453 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3440)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 3u)).x));
                            _3465 = fma(_2678, _3453.z, fma(_2677, _3453.y, _3453.x * _2676)) + _3453.w;
                            _3466 = !((fma(_2678, _3434.z, fma(_2677, _3434.y, _3434.x * _2676)) + _3434.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3466)
                            {
                                float _3493 = _3361.x - _2676;
                                float _3494 = _3361.y - _2677;
                                float _3495 = _3361.z - _2678;
                                float _3496 = dot(vec3(_3493, _3494, _3495), vec3(_3493, _3494, _3495));
                                float _3499 = inversesqrt(_3496);
                                float _3500 = _3499 * _3493;
                                float _3501 = _3499 * _3494;
                                float _3502 = _3499 * _3495;
                                float _3506 = 1.0 - (_3496 / (_3362 * _3362));
                                float _4564 = isnan(0.0) ? _3506 : (isnan(_3506) ? 0.0 : max(_3506, 0.0));
                                float _3507 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
                                float _3511 = sqrt(_3496) * _3377.w;
                                float _3513 = 1.39999997615814208984375 / (_3511 + 1.39999997615814208984375);
                                float _3514 = _3513 * _3513;
                                float _3517 = ((1.0 - _3514) * dot(vec3(_3500, _3501, _3502), vec3(_898, _901, _904))) + _3514;
                                float _3520 = _3511 * _3511;
                                float _3524 = (fma(_2678, _3404.z, fma(_2677, _3404.y, _3404.x * _2676)) + _3404.w) / _3465;
                                float _3525 = (fma(_2678, _3419.z, fma(_2677, _3419.y, _3419.x * _2676)) + _3419.w) / _3465;
                                float _3529 = 1.0 - dot(vec2(_3524, _3525), vec2(_3524, _3525));
                                float _4580 = isnan(0.0) ? _3529 : (isnan(_3529) ? 0.0 : max(_3529, 0.0));
                                float _3530 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
                                float _3531 = _3530 * (((isnan(0.0) ? _3517 : (isnan(_3517) ? 0.0 : max(_3517, 0.0))) * _3507) / ((_3520 * 0.699999988079071044921875) + 1.0));
                                float _3543 = exp2(log2(1.0 / ((_3520 * 3.5) + 5.0)) * 0.25);
                                float _3544 = 1.0 - _1018;
                                float _3551 = sqrt(1.0 - ((1.0 - (_3544 * _3544)) * (1.0 - (_3543 * _3543))));
                                float _3552 = _3551 * _3551;
                                float _3553 = _3552 * _3552;
                                float _3554 = _3500 - _3004;
                                float _3555 = _3501 - _3005;
                                float _3556 = _3502 - _3006;
                                float _3560 = inversesqrt(dot(vec3(_3554, _3555, _3556), vec3(_3554, _3555, _3556)));
                                float _3564 = dot(vec3(_898, _901, _904), vec3((-0.0) - _3004, (-0.0) - _3005, (-0.0) - _3006));
                                float _4591 = isnan(0.0) ? _3564 : (isnan(_3564) ? 0.0 : max(_3564, 0.0));
                                float _3567 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
                                float _3568 = dot(vec3(_898, _901, _904), vec3(_3560 * _3554, _3560 * _3555, _3560 * _3556));
                                float _4602 = isnan(0.0) ? _3568 : (isnan(_3568) ? 0.0 : max(_3568, 0.0));
                                float _3571 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
                                float _3575 = ((_3571 * _3571) * (_3553 + (-1.0))) + 1.0;
                                float _3576 = _3513 * _3552;
                                float _3577 = _3576 * _3576;
                                float _3583 = ((1.0 - _3577) * dot(vec3(_898, _901, _904), vec3(_3500, _3501, _3502))) + _3577;
                                float _4613 = isnan(0.0) ? _3583 : (isnan(_3583) ? 0.0 : max(_3583, 0.0));
                                float _3584 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
                                float _3585 = 1.0 - _3552;
                                float _3595 = (0.5 / (((_3584 * ((_3567 * _3585) + _3552)) + 9.9999999392252902907785028219223e-09) + (((_3584 * _3585) + _3552) * _3567))) * _3584;
                                float _4624 = isnan(0.0) ? _3595 : (isnan(_3595) ? 0.0 : max(_3595, 0.0));
                                float _3605 = (_3530 * _3507) * (((_3553 * 3.1415927410125732421875) * (isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0)))) / ((_3575 * _3575) * ((_3520 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3531 * _3377.z;
                                frontier_phi_75_pred_1 = _3531 * _3377.y;
                                frontier_phi_75_pred_2 = _3531 * _3377.x;
                                frontier_phi_75_pred_3 = _3605 * _3389.z;
                                frontier_phi_75_pred_4 = _3605 * _3389.y;
                                frontier_phi_75_pred_5 = _3605 * _3389.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3614 = frontier_phi_75_pred;
                            _3613 = frontier_phi_75_pred_1;
                            _3612 = frontier_phi_75_pred_2;
                            _3611 = frontier_phi_75_pred_3;
                            _3610 = frontier_phi_75_pred_4;
                            _3609 = frontier_phi_75_pred_5;
                            _3319 = _3612 + _3332;
                            _3320 = _3613 + _3333;
                            _3321 = _3614 + _3334;
                            _3316 = _3609 + _3329;
                            _3317 = _3610 + _3330;
                            _3318 = _3611 + _3331;
                            if (_3336 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3329 = _3316;
                                _3330 = _3317;
                                _3331 = _3318;
                                _3332 = _3319;
                                _3333 = _3320;
                                _3334 = _3321;
                                _3335 = _3336;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3321;
                        frontier_phi_69_pred_1 = _3320;
                        frontier_phi_69_pred_2 = _3319;
                        frontier_phi_69_pred_3 = _3318;
                        frontier_phi_69_pred_4 = _3317;
                        frontier_phi_69_pred_5 = _3316;
                    }
                    _2989 = frontier_phi_69_pred;
                    _2987 = frontier_phi_69_pred_1;
                    _2985 = frontier_phi_69_pred_2;
                    _2983 = frontier_phi_69_pred_3;
                    _2981 = frontier_phi_69_pred_4;
                    _2979 = frontier_phi_69_pred_5;
                    uint _3124 = _3123 + 1u;
                    if (_3124 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3117 = _2979;
                        _3118 = _2981;
                        _3119 = _2983;
                        _3120 = _2985;
                        _3121 = _2987;
                        _3122 = _2989;
                        _3123 = _3124;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2989;
                frontier_phi_57_58_ladder_1 = _2987;
                frontier_phi_57_58_ladder_2 = _2985;
                frontier_phi_57_58_ladder_3 = _2983;
                frontier_phi_57_58_ladder_4 = _2981;
                frontier_phi_57_58_ladder_5 = _2979;
            }
            else
            {
                frontier_phi_57_58_ladder = _2867;
                frontier_phi_57_58_ladder_1 = _2865;
                frontier_phi_57_58_ladder_2 = _2863;
                frontier_phi_57_58_ladder_3 = _2861;
                frontier_phi_57_58_ladder_4 = _2859;
                frontier_phi_57_58_ladder_5 = _2857;
            }
            _2978 = frontier_phi_57_58_ladder_5;
            _2980 = frontier_phi_57_58_ladder_4;
            _2982 = frontier_phi_57_58_ladder_3;
            _2984 = frontier_phi_57_58_ladder_2;
            _2986 = frontier_phi_57_58_ladder_1;
            _2988 = frontier_phi_57_58_ladder;
        }
        float _2993 = isnan(1.0) ? _1002 : (isnan(_1002) ? 1.0 : min(_1002, 1.0));
        _2734 = (_2993 * _2984) + _2171;
        _2736 = (_2993 * _2986) + _2173;
        _2738 = (_2993 * _2988) + _2175;
        _2740 = ((_2978 * _987) * _2993) + _2516;
        _2742 = ((_2980 * _989) * _2993) + _2518;
        _2744 = ((_2982 * _990) * _2993) + _2520;
    }
    else
    {
        _2734 = _2171;
        _2736 = _2173;
        _2738 = _2175;
        _2740 = _2516;
        _2742 = _2518;
        _2744 = _2520;
    }
    uint _2750 = _931 + uint(cbMatDynParam._m0[0u].w);
    float _2758 = ((cbMtdParam._m0[11u].x * cbMtdParam._m0[22u].z) * _731.x) * cbInstanceData._m0[_2750].x;
    float _2761 = ((cbMtdParam._m0[11u].y * cbMtdParam._m0[22u].z) * _731.y) * cbInstanceData._m0[_2750].y;
    float _2764 = ((cbMtdParam._m0[11u].z * cbMtdParam._m0[22u].z) * _731.z) * cbInstanceData._m0[_2750].z;
    float _4640 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
    float _4651 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    float _4662 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
    float _2781 = (((isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0))) * (_2734 + ((isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0))) * _1002))) + ((_2740 + ((isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0))) * _1811)) * cbPerFrame._m0[3u].x)) + _2758;
    float _2783 = (_2761 + ((_2742 + ((isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0))) * _1811)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0))) * (_2736 + ((isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0))) * _1002)));
    float _2785 = (_2764 + ((_2744 + ((isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0))) * _1811)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0))) * (_2738 + ((isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0))) * _1002)));
    float _4688 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2798 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
    uint _2799 = _930 + 6u;
    float _2807 = _875 / cbSceneParam._m0[86u].x;
    float _2808 = _876 / cbSceneParam._m0[86u].y;
    vec4 _2822 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2807, _2808, (log2((isnan(cbSceneParam._m0[77u].w) ? _810 : (isnan(_810) ? cbSceneParam._m0[77u].w : min(_810, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2824 = _2822.x;
    float _2825 = _2822.y;
    float _2826 = _2822.z;
    float _2827 = _2822.w;
    float _2919;
    float _2921;
    float _2923;
    float _2925;
    if (_810 > cbSceneParam._m0[78u].w)
    {
        float _2882 = isnan(_810) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _810 : min(cbSceneParam._m0[80u].w, _810));
        float _2883 = _2882 / _810;
        float _2894 = _2883 * _860;
        float _2895 = _861 * _2883;
        float _2896 = (-0.0) - _2895;
        float _2897 = _2883 * _862;
        float _2899 = (cbSceneParam._m0[77u].w * _2896) / _2882;
        float _2900 = _2899 + cbSceneParam._m0[79u].w;
        float _2901 = cbSceneParam._m0[79u].w - _2895;
        float _2907 = sqrt(((_2894 * _2894) + (_2895 * _2895)) + (_2897 * _2897));
        float _2910 = (1.0 - (cbSceneParam._m0[77u].w / _2882)) * _2907;
        float _2915 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2917 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3079;
        if (abs((_2896 - _2899) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3079 = ((((_2900 > 0.0) ? exp2(_2915 * _2900) : (2.0 - exp2(_2917 * _2900))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2910;
        }
        else
        {
            float _3039 = 1.0 / cbSceneParam._m0[80u].x;
            float _3040 = isnan(_2901) ? _2900 : (isnan(_2900) ? _2901 : max(_2900, _2901));
            float _3041 = isnan(_2901) ? _2900 : (isnan(_2900) ? _2901 : min(_2900, _2901));
            float _3050 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : min(_3040, 0.0));
            float _3051 = isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : min(_3041, 0.0));
            _3079 = ((abs(_2907 / _2896) * cbSceneParam._m0[80u].y) * ((((_3050 - _3051) * 2.0) - ((exp2(_2915 * (isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0)))) - exp2(_2915 * (isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0))))) * _3039)) - ((exp2(_2917 * _3050) - exp2(_2917 * _3051)) * _3039))) + (_2910 * cbSceneParam._m0[80u].z);
        }
        vec4 _3081 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2807, _2808, 1.0), 0.0);
        float _3090 = exp2((_3079 * (-1.44269502162933349609375)) * (1.0 - _3081.w));
        float _3091 = log2(_3090);
        float _3107 = log2(_2827);
        _2919 = (exp2(_3107 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3091 * cbSceneParam._m0[78u].x)) * _3081.x) / cbSceneParam._m0[78u].x)) + _2824;
        _2921 = (exp2(_3107 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3091 * cbSceneParam._m0[78u].y)) * _3081.y) / cbSceneParam._m0[78u].y)) + _2825;
        _2923 = (exp2(_3107 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3091 * cbSceneParam._m0[78u].z)) * _3081.z) / cbSceneParam._m0[78u].z)) + _2826;
        _2925 = _3090 * _2827;
    }
    else
    {
        _2919 = _2824;
        _2921 = _2825;
        _2923 = _2826;
        _2925 = _2827;
    }
    float _2937 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2938 = _2937 == 3.0;
    float _2939 = log2(_2925);
    float _2943 = exp2(_2939 * cbSceneParam._m0[78u].x);
    float _2944 = exp2(_2939 * cbSceneParam._m0[78u].y);
    float _2945 = exp2(_2939 * cbSceneParam._m0[78u].z);
    float _2946 = _2943 * (isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : max(_2781, 0.0)));
    float _2947 = _2944 * (isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0)));
    float _2948 = _2945 * (isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0)));
    float _2957 = (_2937 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2957 * (_2938 ? _2946 : (_2946 + (cbSceneParam._m0[72u].w * _2919)));
    SV_Target.y = _2957 * (_2938 ? _2947 : (_2947 + (cbSceneParam._m0[72u].w * _2921)));
    SV_Target.z = _2957 * (_2938 ? _2948 : (_2948 + (cbSceneParam._m0[72u].w * _2923)));
    SV_Target.w = cbInstanceData._m0[_2799].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2758) * _2798) * _2943) * _2957;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2761) * _2798) * _2944) * _2957;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2764) * _2798) * _2945) * _2957;
    SV_Target_1.w = cbInstanceData._m0[_2799].w;
}


