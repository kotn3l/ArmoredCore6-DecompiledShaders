#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 11) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 12) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1353;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _226 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _233 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _234 = _233 * NORMAL.x;
    float _235 = _233 * NORMAL.y;
    float _236 = _233 * NORMAL.z;
    float _240 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _248;
    float _249;
    float _250;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _248 = (-0.0) - _234;
        _249 = (-0.0) - _235;
        _250 = (-0.0) - _236;
    }
    else
    {
        _248 = _234;
        _249 = _235;
        _250 = _236;
    }
    vec4 _265 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _275 = log2(0.0);
    float _277 = exp2(_275 * cbMtdParam._m0[21u].y);
    float _278 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _279 = isnan(1.0) ? _278 : (isnan(_278) ? 1.0 : min(_278, 1.0));
    vec4 _293 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _297 = _293.z;
    float _298 = _293.w;
    float _306 = exp2(log2(_297 * cbMtdParam._m0[21u].w) * cbMtdParam._m0[20u].y);
    float _307 = isnan(0.0) ? _306 : (isnan(_306) ? 0.0 : max(_306, 0.0));
    float _308 = isnan(1.0) ? _307 : (isnan(_307) ? 1.0 : min(_307, 1.0));
    vec4 _321 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    vec4 _344 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _346 = _344.x;
    float _347 = _344.y;
    float _352 = _346 - ((_346 * _344.z) * cbMtdParam._m0[20u].w);
    bool _388 = _352 >= 0.25;
    bool _393 = _352 >= 0.3499999940395355224609375;
    bool _398 = _352 >= 0.5;
    bool _403 = _352 >= 0.64999997615814208984375;
    bool _408 = _352 >= 0.75;
    vec4 _436 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _446 = cbMtdParam._m0[9u].x * _436.x;
    float _447 = cbMtdParam._m0[9u].y * _436.y;
    float _448 = cbMtdParam._m0[9u].z * _436.z;
    float _455 = (((((((_408 ? cbMtdParam._m0[14u].x : (_403 ? cbMtdParam._m0[19u].x : (_398 ? cbMtdParam._m0[18u].x : (_393 ? cbMtdParam._m0[17u].x : (_388 ? cbMtdParam._m0[16u].x : cbMtdParam._m0[15u].x))))) - cbMtdParam._m0[10u].x) * _347) + cbMtdParam._m0[10u].x) * _321.x) - _446) * _308) + _446;
    float _456 = (((((((_408 ? cbMtdParam._m0[14u].y : (_403 ? cbMtdParam._m0[19u].y : (_398 ? cbMtdParam._m0[18u].y : (_393 ? cbMtdParam._m0[17u].y : (_388 ? cbMtdParam._m0[16u].y : cbMtdParam._m0[15u].y))))) - cbMtdParam._m0[10u].y) * _347) + cbMtdParam._m0[10u].y) * _321.y) - _447) * _308) + _447;
    float _457 = (((((((_408 ? cbMtdParam._m0[14u].z : (_403 ? cbMtdParam._m0[19u].z : (_398 ? cbMtdParam._m0[18u].z : (_393 ? cbMtdParam._m0[17u].z : (_388 ? cbMtdParam._m0[16u].z : cbMtdParam._m0[15u].z))))) - cbMtdParam._m0[10u].z) * _347) + cbMtdParam._m0[10u].z) * _321.z) - _448) * _308) + _448;
    float _464 = exp2(log2(_298) * cbMtdParam._m0[22u].y);
    vec4 _477 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _497 = (((cbMtdParam._m0[12u].x * _477.x) - _455) * _464) + _455;
    float _498 = (((cbMtdParam._m0[12u].y * _477.y) - _456) * _464) + _456;
    float _499 = (((cbMtdParam._m0[12u].z * _477.z) - _457) * _464) + _457;
    vec4 _511 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _535 = (_265.x * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].x * _511.x) - _497) * _279) + _497);
    float _537 = (_265.y * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].y * _511.y) - _498) * _279) + _498);
    float _539 = (_265.z * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].z * _511.z) - _499) * _279) + _499);
    float _544 = exp2(log2(1.0 - _298) * 0.00999999977648258209228515625);
    float _562 = ((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_11, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x - cbMtdParam._m0[22u].w) * _544) + cbMtdParam._m0[22u].w;
    float _581 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w)).x - _562) + cbMtdParam._m0[21u].z) * _464) + _562;
    float _603 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w)).x - _581) + cbMtdParam._m0[23u].w) * _279) + _581;
    vec4 _616 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _634 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _636 = _634.x;
    float _637 = _634.y;
    float _640 = cbMtdParam._m0[20u].x + _634.z;
    float _643 = (((cbMtdParam._m0[21u].x + _616.z) - _640) * _544) + _640;
    vec4 _655 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _667 = (_297 * 2.0) * ((((_655.z - _643) + cbMtdParam._m0[23u].y) * _464) + _643);
    vec4 _679 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _688 = (((_679.z - _667) + cbMtdParam._m0[22u].x) * _279) + _667;
    vec4 _707 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _722 = ((_616.x - _636) * _544) + _636;
    float _723 = ((_616.y - _637) * _544) + _637;
    float _728 = ((_655.x - _722) * _464) + _722;
    float _729 = ((_655.y - _723) * _464) + _723;
    float _738 = ((((_679.x - _728) * _279) + _728) * 2.0) + (-1.0);
    float _739 = ((((_679.y - _729) * _279) + _729) * 2.0) + (-1.0);
    float _740 = dot(vec2(_738, _739), vec2(_738, _739));
    float _3742 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _745 = sqrt(1.0 - (isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0))));
    float _748 = (cbMtdParam._m0[23u].x * ((_293.x * 2.0) + (-1.0))) + _738;
    float _749 = (cbMtdParam._m0[23u].x * ((_293.y * 2.0) + (-1.0))) + _739;
    float _752 = fma(_745, _248, fma(_749, _240 * TANGENT.x, (_226 * _219) * _748));
    float _755 = fma(_745, _249, fma(_749, _240 * TANGENT.y, (_226 * _220) * _748));
    float _758 = fma(_745, _250, fma(_749, _240 * TANGENT.z, (_226 * _221) * _748));
    float _762 = inversesqrt(dot(vec3(_752, _755, _758), vec3(_752, _755, _758)));
    float _763 = _762 * _752;
    float _764 = _762 * _755;
    float _765 = _762 * _758;
    float _3753 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _766 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
    float _3764 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _3775 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _3786 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _3797 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _770 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
    float _786 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _826 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _836 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _826);
    float _837 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _826);
    float _838 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _826);
    float _842 = inversesqrt(dot(vec3(_836, _837, _838), vec3(_836, _837, _838)));
    float _843 = _836 * _842;
    float _844 = _837 * _842;
    float _845 = _838 * _842;
    float _851 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _852 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _854 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _856 = _854.w;
    float _875 = fma(_765, cbSceneParam._m0[5u].z, fma(_764, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _763));
    float _878 = fma(_765, cbSceneParam._m0[6u].z, fma(_764, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _763));
    float _881 = fma(_765, cbSceneParam._m0[7u].z, fma(_764, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _763));
    vec4 _883 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _894 = (((_883.y - _766) + (_883.w * _766)) * cbMtdParam._m0[3u].x) + _766;
    uint _907 = uint(roundEven(NORMAL.w)) * 13u;
    uint _908 = _907 + 9u;
    uint _909 = _908 + uint(cbMatDynParam._m0[0u].w);
    float _915 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0)))) * cbInstanceData._m0[_909].x;
    float _916 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0)))) * cbInstanceData._m0[_909].y;
    float _917 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0)))) * cbInstanceData._m0[_909].z;
    float _3808 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _918 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
    float _3819 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _919 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
    float _3830 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    float _920 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
    vec4 _921 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _926 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _937 = (((_926.x - _770) + (_926.w * _770)) * cbMtdParam._m0[3u].x) + _770;
    float _950 = (cbMtdParam._m0[3u].x * (((_918 * _856) - _918) + _921.x)) + _918;
    float _951 = (cbMtdParam._m0[3u].x * (((_919 * _856) - _919) + _921.y)) + _919;
    float _952 = (cbMtdParam._m0[3u].x * (((_920 * _856) - _920) + _921.z)) + _920;
    float _953 = 1.0 - _937;
    float _954 = _953 * _950;
    float _955 = _953 * _951;
    float _956 = _953 * _952;
    float _961 = (_950 + (-0.039999999105930328369140625)) * _937;
    float _962 = (_951 + (-0.039999999105930328369140625)) * _937;
    float _963 = (_952 + (-0.039999999105930328369140625)) * _937;
    float _964 = _961 + 0.039999999105930328369140625;
    float _966 = _962 + 0.039999999105930328369140625;
    float _967 = _963 + 0.039999999105930328369140625;
    vec4 _976 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _851, cbSceneParam._m0[86u].y * _852));
    float _979 = _976.x * TEXCOORD_4.z;
    float _980 = dot(vec3(_763, _764, _765), vec3(_843, _844, _845));
    float _983 = _980 * 2.0;
    float _987 = (_983 * _763) - _843;
    float _988 = (_983 * _764) - _844;
    float _989 = (_983 * _765) - _845;
    float _993 = abs(dot(vec3(_843, _844, _845), vec3(_763, _764, _765)));
    float _3841 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
    float _995 = sqrt(_894);
    float _1008 = exp2((_995 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_995 * 3.0));
    float _1014 = (1.0 - _1008) * ((_995 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1015 = _1008 * _995;
    float _1043 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1047 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1051 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1352;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1078 = fma(_1051, cbModelParam._m0[26u].z, fma(_1047, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1043));
        float _1082 = fma(_1051, cbModelParam._m0[27u].z, fma(_1047, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1043));
        float _1086 = fma(_1051, cbModelParam._m0[28u].z, fma(_1047, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1043));
        float _1110 = _1043 + _763;
        float _1111 = _1047 + _764;
        float _1112 = _1051 + _765;
        float _1122 = fma(_1112, cbModelParam._m0[26u].z, fma(_1111, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1110)) - _1078;
        float _1123 = fma(_1112, cbModelParam._m0[27u].z, fma(_1111, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1110)) - _1082;
        float _1124 = fma(_1112, cbModelParam._m0[28u].z, fma(_1111, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1110)) - _1086;
        float _1128 = inversesqrt(dot(vec3(_1122, _1123, _1124), vec3(_1122, _1123, _1124)));
        float _1141 = ((_1128 * _1122) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1078 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1142 = ((_1128 * _1123) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1082 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1143 = ((_1128 * _1124) / cbModelParam._m0[34u].z) + ((((((_1086 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1146 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1141, _1142, _1143), 0.0);
        vec4 _1153 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1141, _1142, _1143), 0.0);
        vec4 _1160 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1141, _1142, _1143), 0.0);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1141, _1142, _1143), 0.0);
        float _1180 = exp2((_1146.w + (-0.5)) * 20.0) * 2.0;
        float _1181 = _1180 * (_1146.x + (-0.5));
        float _1182 = _1180 * (_1146.y + (-0.5));
        float _1183 = _1180 * (_1146.z + (-0.5));
        float _1190 = exp2((_1153.w + (-0.5)) * 20.0) * 2.0;
        float _1191 = _1190 * (_1153.x + (-0.5));
        float _1192 = _1190 * (_1153.y + (-0.5));
        float _1193 = _1190 * (_1153.z + (-0.5));
        float _1200 = exp2((_1160.w + (-0.5)) * 20.0) * 2.0;
        float _1201 = _1200 * (_1160.x + (-0.5));
        float _1202 = _1200 * (_1160.y + (-0.5));
        float _1203 = _1200 * (_1160.z + (-0.5));
        float _1210 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1211 = _1210 * (_1167.x + (-0.5));
        float _1212 = _1210 * (_1167.y + (-0.5));
        float _1213 = _1210 * (_1167.z + (-0.5));
        float _1214 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1215 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1216 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1217 = _1181 * 0.5;
        float _1218 = _1191 * 0.5;
        float _1219 = _1201 * 0.5;
        float _1220 = dot(vec3(_1217, _1218, _1219), vec3(_1217, _1218, _1219));
        float _1225 = (_1220 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1220);
        float _1234 = (dot(vec3(_763, _764, _765), vec3(_1225 * _1217, _1225 * _1218, _1225 * _1219)) + 1.0) * 0.5;
        float _3867 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1244 = sqrt(((_1218 * _1218) + (_1217 * _1217)) + (_1219 * _1219)) / (_1214 + 9.9999997473787516355514526367188e-06);
        float _3878 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1246 = _1245 * 2.0;
        float _1250 = (1.0 - _1245) / (_1245 + 1.0);
        float _3889 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
        float _1260 = ((((1.0 - _1251) * (_1246 + 2.0)) * exp2(log2(isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))) * (_1246 + 1.0))) + _1251) * _1214;
        float _1261 = _1182 * 0.5;
        float _1262 = _1192 * 0.5;
        float _1263 = _1202 * 0.5;
        float _1264 = dot(vec3(_1261, _1262, _1263), vec3(_1261, _1262, _1263));
        float _1269 = (_1264 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1264);
        float _1277 = (dot(vec3(_763, _764, _765), vec3(_1269 * _1261, _1269 * _1262, _1269 * _1263)) + 1.0) * 0.5;
        float _3900 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1286 = sqrt(((_1262 * _1262) + (_1261 * _1261)) + (_1263 * _1263)) / (_1215 + 9.9999997473787516355514526367188e-06);
        float _3911 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1288 = _1287 * 2.0;
        float _1292 = (1.0 - _1287) / (_1287 + 1.0);
        float _3922 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
        float _1302 = ((((1.0 - _1293) * (_1288 + 2.0)) * exp2(log2(isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0))) * (_1288 + 1.0))) + _1293) * _1215;
        float _1303 = _1183 * 0.5;
        float _1304 = _1193 * 0.5;
        float _1305 = _1203 * 0.5;
        float _1306 = dot(vec3(_1303, _1304, _1305), vec3(_1303, _1304, _1305));
        float _1311 = (_1306 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1306);
        float _1319 = (dot(vec3(_763, _764, _765), vec3(_1311 * _1303, _1311 * _1304, _1311 * _1305)) + 1.0) * 0.5;
        float _3933 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1328 = sqrt(((_1304 * _1304) + (_1303 * _1303)) + (_1305 * _1305)) / (_1216 + 9.9999997473787516355514526367188e-06);
        float _3944 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
        float _1330 = _1329 * 2.0;
        float _1334 = (1.0 - _1329) / (_1329 + 1.0);
        float _3955 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
        float _1344 = ((((1.0 - _1335) * (_1330 + 2.0)) * exp2(log2(isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0))) * (_1330 + 1.0))) + _1335) * _1216;
        _1352 = _1183;
        _1354 = _1182;
        _1355 = _1181;
        _1356 = _1193;
        _1357 = _1192;
        _1358 = _1191;
        _1359 = _1203;
        _1360 = _1202;
        _1361 = _1201;
        _1362 = _1216;
        _1363 = _1215;
        _1364 = _1214;
        _1365 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0)));
        _1366 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0)));
        _1367 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0)));
    }
    else
    {
        _1352 = _1353;
        _1354 = _1353;
        _1355 = _1353;
        _1356 = _1353;
        _1357 = _1353;
        _1358 = _1353;
        _1359 = _1353;
        _1360 = _1353;
        _1361 = _1353;
        _1362 = _1353;
        _1363 = _1353;
        _1364 = _1353;
        _1365 = 0.0;
        _1366 = 0.0;
        _1367 = 0.0;
    }
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1393 = fma(_1051, cbModelParam._m0[30u].z, fma(_1047, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1043));
        float _1397 = fma(_1051, cbModelParam._m0[31u].z, fma(_1047, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1043));
        float _1401 = fma(_1051, cbModelParam._m0[32u].z, fma(_1047, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1043));
        float _1424 = _1043 + _763;
        float _1425 = _1047 + _764;
        float _1426 = _1051 + _765;
        float _1436 = fma(_1426, cbModelParam._m0[30u].z, fma(_1425, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1424)) - _1393;
        float _1437 = fma(_1426, cbModelParam._m0[31u].z, fma(_1425, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1424)) - _1397;
        float _1438 = fma(_1426, cbModelParam._m0[32u].z, fma(_1425, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1424)) - _1401;
        float _1442 = inversesqrt(dot(vec3(_1436, _1437, _1438), vec3(_1436, _1437, _1438)));
        float _1455 = ((_1442 * _1436) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1393 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1456 = ((_1442 * _1437) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1397 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1457 = ((_1442 * _1438) / cbModelParam._m0[35u].z) + ((((((_1401 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1459 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1455, _1456, _1457), 0.0);
        vec4 _1466 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1455, _1456, _1457), 0.0);
        vec4 _1473 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1455, _1456, _1457), 0.0);
        vec4 _1480 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1455, _1456, _1457), 0.0);
        float _1492 = exp2((_1459.w + (-0.5)) * 20.0) * 2.0;
        float _1493 = _1492 * (_1459.x + (-0.5));
        float _1494 = _1492 * (_1459.y + (-0.5));
        float _1495 = _1492 * (_1459.z + (-0.5));
        float _1502 = exp2((_1466.w + (-0.5)) * 20.0) * 2.0;
        float _1503 = _1502 * (_1466.x + (-0.5));
        float _1504 = _1502 * (_1466.y + (-0.5));
        float _1505 = _1502 * (_1466.z + (-0.5));
        float _1512 = exp2((_1473.w + (-0.5)) * 20.0) * 2.0;
        float _1513 = _1512 * (_1473.x + (-0.5));
        float _1514 = _1512 * (_1473.y + (-0.5));
        float _1515 = _1512 * (_1473.z + (-0.5));
        float _1522 = exp2((_1480.w + (-0.5)) * 20.0) * 2.0;
        float _1523 = _1522 * (_1480.x + (-0.5));
        float _1524 = _1522 * (_1480.y + (-0.5));
        float _1525 = _1522 * (_1480.z + (-0.5));
        float _1526 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1527 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1528 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1529 = _1493 * 0.5;
        float _1530 = _1503 * 0.5;
        float _1531 = _1513 * 0.5;
        float _1532 = dot(vec3(_1529, _1530, _1531), vec3(_1529, _1530, _1531));
        float _1537 = (_1532 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1532);
        float _1545 = (dot(vec3(_763, _764, _765), vec3(_1537 * _1529, _1537 * _1530, _1537 * _1531)) + 1.0) * 0.5;
        float _3996 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1554 = sqrt(((_1530 * _1530) + (_1529 * _1529)) + (_1531 * _1531)) / (_1526 + 9.9999997473787516355514526367188e-06);
        float _4007 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1555 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1556 = _1555 * 2.0;
        float _1560 = (1.0 - _1555) / (_1555 + 1.0);
        float _4018 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1561 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _1570 = ((((1.0 - _1561) * (_1556 + 2.0)) * exp2(log2(isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) * (_1556 + 1.0))) + _1561) * _1526;
        float _1571 = _1494 * 0.5;
        float _1572 = _1504 * 0.5;
        float _1573 = _1514 * 0.5;
        float _1574 = dot(vec3(_1571, _1572, _1573), vec3(_1571, _1572, _1573));
        float _1579 = (_1574 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1574);
        float _1587 = (dot(vec3(_763, _764, _765), vec3(_1579 * _1571, _1579 * _1572, _1579 * _1573)) + 1.0) * 0.5;
        float _4029 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1596 = sqrt(((_1572 * _1572) + (_1571 * _1571)) + (_1573 * _1573)) / (_1527 + 9.9999997473787516355514526367188e-06);
        float _4040 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1597 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1598 = _1597 * 2.0;
        float _1602 = (1.0 - _1597) / (_1597 + 1.0);
        float _4051 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1603 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _1612 = ((((1.0 - _1603) * (_1598 + 2.0)) * exp2(log2(isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) * (_1598 + 1.0))) + _1603) * _1527;
        float _1613 = _1495 * 0.5;
        float _1614 = _1505 * 0.5;
        float _1615 = _1515 * 0.5;
        float _1616 = dot(vec3(_1613, _1614, _1615), vec3(_1613, _1614, _1615));
        float _1621 = (_1616 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1616);
        float _1629 = (dot(vec3(_763, _764, _765), vec3(_1621 * _1613, _1621 * _1614, _1621 * _1615)) + 1.0) * 0.5;
        float _4062 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1638 = sqrt(((_1614 * _1614) + (_1613 * _1613)) + (_1615 * _1615)) / (_1528 + 9.9999997473787516355514526367188e-06);
        float _4073 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1639 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _1640 = _1639 * 2.0;
        float _1644 = (1.0 - _1639) / (_1639 + 1.0);
        float _4084 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1645 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _1654 = ((((1.0 - _1645) * (_1640 + 2.0)) * exp2(log2(isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0))) * (_1640 + 1.0))) + _1645) * _1528;
        _1662 = _1495;
        _1663 = _1494;
        _1664 = _1493;
        _1665 = _1505;
        _1666 = _1504;
        _1667 = _1503;
        _1668 = _1515;
        _1669 = _1514;
        _1670 = _1513;
        _1671 = _1528;
        _1672 = _1527;
        _1673 = _1526;
        _1674 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0)));
        _1675 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0)));
        _1676 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0)));
    }
    else
    {
        _1662 = _1353;
        _1663 = _1353;
        _1664 = _1353;
        _1665 = _1353;
        _1666 = _1353;
        _1667 = _1353;
        _1668 = _1353;
        _1669 = _1353;
        _1670 = _1353;
        _1671 = _1353;
        _1672 = _1353;
        _1673 = _1353;
        _1674 = 0.0;
        _1675 = 0.0;
        _1676 = 0.0;
    }
    float _1686 = (cbModelParam._m0[1u].x * (_1674 - _1365)) + _1365;
    float _1687 = (cbModelParam._m0[1u].x * (_1675 - _1366)) + _1366;
    float _1688 = (cbModelParam._m0[1u].x * (_1676 - _1367)) + _1367;
    float _1709 = fma(_1688, cbSceneParam._m0[89u].z, fma(_1687, cbSceneParam._m0[89u].y, _1686 * cbSceneParam._m0[89u].x));
    float _1712 = fma(_1688, cbSceneParam._m0[90u].z, fma(_1687, cbSceneParam._m0[90u].y, _1686 * cbSceneParam._m0[90u].x));
    float _1715 = fma(_1688, cbSceneParam._m0[91u].z, fma(_1687, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1686));
    float _1730 = _987 * 0.5;
    float _1731 = _988 * 0.5;
    float _1732 = _989 * 0.5;
    float _1733 = dot(vec4(_1730, _1731, _1732, 1.0), vec4(_1664, _1667, _1670, _1673));
    float _1736 = dot(vec4(_1730, _1731, _1732, 1.0), vec4(_1663, _1666, _1669, _1672));
    float _1739 = dot(vec4(_1730, _1731, _1732, 1.0), vec4(_1662, _1665, _1668, _1671));
    float _1773;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1746 = dot(vec4(_1730, _1731, _1732, 1.0), vec4(_1352, _1356, _1359, _1362));
        float _1750 = dot(vec4(_1730, _1731, _1732, 1.0), vec4(_1354, _1357, _1360, _1363));
        float _1754 = dot(vec4(_1730, _1731, _1732, 1.0), vec4(_1355, _1358, _1361, _1364));
        float _1761 = dot(vec4(cbModelParam._m0[39u]), vec4(_1730, _1731, _1732, 1.0));
        _1773 = dot(vec3(isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0)), isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0)), isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1761) ? 0.0 : (isnan(0.0) ? _1761 : max(0.0, _1761))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1773 = 1.0;
    }
    float _1784;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1775 = dot(vec4(cbModelParam._m0[40u]), vec4(_1730, _1731, _1732, 1.0));
        _1784 = dot(vec3(isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0)), isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0)), isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1775) ? 0.0 : (isnan(0.0) ? _1775 : max(0.0, _1775))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1784 = 1.0;
    }
    float _1788 = (_1784 * cbModelParam._m0[1u].x) + (_1773 * (1.0 - cbModelParam._m0[1u].x));
    float _1798 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _894);
    float _1799 = isnan(_1798) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1798 : min(cbModelParam._m0[25u].z, _1798));
    float _1879;
    float _1881;
    float _1883;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1846 = fma(_1051, cbModelParam._m0[13u].z, fma(_1047, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1043)) + cbModelParam._m0[13u].w;
        float _1850 = fma(_1051, cbModelParam._m0[14u].z, fma(_1047, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1043)) + cbModelParam._m0[14u].w;
        float _1854 = fma(_1051, cbModelParam._m0[15u].z, fma(_1047, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1043)) + cbModelParam._m0[15u].w;
        float _1857 = fma(_989, cbModelParam._m0[13u].z, fma(_988, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _987));
        float _1860 = fma(_989, cbModelParam._m0[14u].z, fma(_988, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _987));
        float _1863 = fma(_989, cbModelParam._m0[15u].z, fma(_988, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _987));
        float _1891;
        if (_1857 > 0.0)
        {
            _1891 = abs((1.0 - _1846) / _1857);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1857 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1846 + 1.0) / _1857);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1891 = frontier_phi_16_14_ladder;
        }
        float _2093;
        if (_1860 > 0.0)
        {
            _2093 = abs((1.0 - _1850) / _1860);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1860 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1850 + 1.0) / _1860);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2093 = frontier_phi_25_21_ladder;
        }
        float _2347;
        if (_1863 > 0.0)
        {
            _2347 = abs((1.0 - _1854) / _1863);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1863 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1854 + 1.0) / _1863);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2347 = frontier_phi_37_32_ladder;
        }
        float _2349 = isnan(_2093) ? _1891 : (isnan(_1891) ? _2093 : min(_1891, _2093));
        float _2350 = isnan(_2347) ? _2349 : (isnan(_2349) ? _2347 : min(_2349, _2347));
        float _2354 = (_2350 * _1857) + _1846;
        float _2355 = (_2350 * _1860) + _1850;
        float _2356 = (_2350 * _1863) + _1854;
        float _2357 = _2350 * 9.9999997473787516355514526367188e-05;
        float _2359 = (-1.0) - _2357;
        float _2361 = _2357 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2356 > _2361) || ((_2356 < _2359) || ((_2355 > _2361) || ((_2355 < _2359) || ((_2354 < _2359) || (_2354 > _2361))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2484 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2356, cbModelParam._m0[9u].z, fma(_2355, cbModelParam._m0[9u].y, _2354 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2356, cbModelParam._m0[10u].z, fma(_2355, cbModelParam._m0[10u].y, _2354 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2356, cbModelParam._m0[11u].z, fma(_2355, cbModelParam._m0[11u].y, _2354 * cbModelParam._m0[11u].x))), _1799);
            frontier_phi_15_37_ladder = _2484.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2484.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2484.x * cbModelParam._m0[1u].y;
        }
        _1879 = frontier_phi_15_37_ladder_2;
        _1881 = frontier_phi_15_37_ladder_1;
        _1883 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1867 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_987, _988, _989), _1799);
        _1879 = _1867.x * cbModelParam._m0[1u].y;
        _1881 = _1867.y * cbModelParam._m0[1u].y;
        _1883 = _1867.z * cbModelParam._m0[1u].y;
    }
    float _1887 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _894);
    float _1888 = isnan(_1887) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1887 : min(cbModelParam._m0[25u].w, _1887));
    float _1977;
    float _1979;
    float _1981;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1941 = fma(_1051, cbModelParam._m0[21u].z, fma(_1047, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1043)) + cbModelParam._m0[21u].w;
        float _1945 = fma(_1051, cbModelParam._m0[22u].z, fma(_1047, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1043)) + cbModelParam._m0[22u].w;
        float _1949 = fma(_1051, cbModelParam._m0[23u].z, fma(_1047, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1043)) + cbModelParam._m0[23u].w;
        float _1952 = fma(_989, cbModelParam._m0[21u].z, fma(_988, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _987));
        float _1955 = fma(_989, cbModelParam._m0[22u].z, fma(_988, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _987));
        float _1958 = fma(_989, cbModelParam._m0[23u].z, fma(_988, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _987));
        float _2098;
        if (_1952 > 0.0)
        {
            _2098 = abs((1.0 - _1941) / _1952);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1952 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1941 + 1.0) / _1952);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2098 = frontier_phi_27_23_ladder;
        }
        float _2374;
        if (_1955 > 0.0)
        {
            _2374 = abs((1.0 - _1945) / _1955);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1955 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1945 + 1.0) / _1955);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2374 = frontier_phi_39_34_ladder;
        }
        float _2587;
        if (_1958 > 0.0)
        {
            _2587 = abs((1.0 - _1949) / _1958);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1958 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1949 + 1.0) / _1958);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2587 = frontier_phi_48_45_ladder;
        }
        float _2589 = isnan(_2374) ? _2098 : (isnan(_2098) ? _2374 : min(_2098, _2374));
        float _2590 = isnan(_2587) ? _2589 : (isnan(_2589) ? _2587 : min(_2589, _2587));
        float _2594 = (_2590 * _1952) + _1941;
        float _2595 = (_2590 * _1955) + _1945;
        float _2596 = (_2590 * _1958) + _1949;
        float _2597 = _2590 * 9.9999997473787516355514526367188e-05;
        float _2598 = (-1.0) - _2597;
        float _2600 = _2597 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2596 > _2600) || ((_2596 < _2598) || ((_2595 > _2600) || ((_2595 < _2598) || ((_2594 < _2598) || (_2594 > _2600))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2829 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2596, cbModelParam._m0[17u].z, fma(_2595, cbModelParam._m0[17u].y, _2594 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2596, cbModelParam._m0[18u].z, fma(_2595, cbModelParam._m0[18u].y, _2594 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2596, cbModelParam._m0[19u].z, fma(_2595, cbModelParam._m0[19u].y, _2594 * cbModelParam._m0[19u].x))), _1888);
            frontier_phi_24_48_ladder = _2829.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2829.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2829.x * cbModelParam._m0[1u].z;
        }
        _1977 = frontier_phi_24_48_ladder_2;
        _1979 = frontier_phi_24_48_ladder_1;
        _1981 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1961 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_987, _988, _989), _1888);
        _1977 = _1961.x * cbModelParam._m0[1u].z;
        _1979 = _1961.y * cbModelParam._m0[1u].z;
        _1981 = _1961.z * cbModelParam._m0[1u].z;
    }
    float _1994 = (((_1014 * _964) + _1015) * _979) * ((cbModelParam._m0[1u].w * (_1977 - _1879)) + _1879);
    float _1996 = (((_1014 * _966) + _1015) * _979) * ((cbModelParam._m0[1u].w * (_1979 - _1881)) + _1881);
    float _1998 = (((_1014 * _967) + _1015) * _979) * ((cbModelParam._m0[1u].w * (_1981 - _1883)) + _1883);
    float _2001 = fma(_1998, cbSceneParam._m0[89u].z, fma(_1996, cbSceneParam._m0[89u].y, _1994 * cbSceneParam._m0[89u].x));
    float _2004 = fma(_1998, cbSceneParam._m0[90u].z, fma(_1996, cbSceneParam._m0[90u].y, _1994 * cbSceneParam._m0[90u].x));
    float _2007 = fma(_1998, cbSceneParam._m0[91u].z, fma(_1996, cbSceneParam._m0[91u].y, _1994 * cbSceneParam._m0[91u].x));
    uvec4 _2017 = floatBitsToUint(cbInstanceData._m0[_907 + 5u]);
    uint _2019 = _2017.x * 14u;
    uint _2020 = _2019 + 13u;
    float _2027 = _979 + (-1.0);
    float _2032 = (cbLight._m0[_2020].x * _2027) + 1.0;
    float _2033 = (cbLight._m0[_2020].y * _2027) + 1.0;
    float _2034 = (cbLight._m0[_2020].z * _2027) + 1.0;
    float _2035 = (cbLight._m0[_2020].w * _2027) + 1.0;
    uint _2036 = _2019 + 5u;
    float _2042 = isnan(1.0) ? _2033 : (isnan(_2033) ? 1.0 : min(_2033, 1.0));
    uint _2046 = _2019 + 4u;
    float _2052 = isnan(1.0) ? _2032 : (isnan(_2032) ? 1.0 : min(_2032, 1.0));
    uint _2056 = _2019 | 1u;
    float _2067 = dot(vec3(cbLight._m0[_2019].xyz), vec3(_763, _764, _765));
    float _2070 = dot(vec3(cbLight._m0[_2056].xyz), vec3(_763, _764, _765));
    float _4220 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
    float _4231 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
    float _2075 = (isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))) * 0.3183098733425140380859375;
    float _2077 = (isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0))) * 0.3183098733425140380859375;
    float _2084 = ((cbLight._m0[_2036].x * _2042) * _2077) + ((cbLight._m0[_2046].x * _2052) * _2075);
    float _2085 = ((_2042 * cbLight._m0[_2036].y) * _2077) + ((_2052 * cbLight._m0[_2046].y) * _2075);
    float _2086 = ((_2042 * cbLight._m0[_2036].z) * _2077) + ((_2052 * cbLight._m0[_2046].z) * _2075);
    uvec4 _2090 = floatBitsToUint(cbLight._m0[_2019 + 12u]);
    bool _2092 = _2090.x == 0u;
    float _2103;
    float _2105;
    float _2107;
    if (_2092)
    {
        _2103 = _2084;
        _2105 = _2085;
        _2107 = _2086;
    }
    else
    {
        uint _2111 = _2019 + 6u;
        float _2127 = (dot(vec3(cbLight._m0[_2019 + 2u].xyz), vec3(_763, _764, _765)) * 0.5) + 0.5;
        float _2128 = _2127 * _2127;
        float _4242 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
        float _2129 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
        float _2130 = isnan(1.0) ? _2034 : (isnan(_2034) ? 1.0 : min(_2034, 1.0));
        _2103 = (((cbLight._m0[_2111].x * 0.3183098733425140380859375) * _2129) * _2130) + _2084;
        _2105 = (((cbLight._m0[_2111].y * 0.3183098733425140380859375) * _2129) * _2130) + _2085;
        _2107 = (((cbLight._m0[_2111].z * 0.3183098733425140380859375) * _2129) * _2130) + _2086;
    }
    bool _2110 = _2090.y == 0u;
    float _2148;
    float _2150;
    float _2152;
    if (_2110)
    {
        _2148 = _2103;
        _2150 = _2105;
        _2152 = _2107;
    }
    else
    {
        uint _2318 = _2019 + 7u;
        float _2334 = (dot(vec3(cbLight._m0[_2019 + 3u].xyz), vec3(_763, _764, _765)) * 0.5) + 0.5;
        float _2335 = _2334 * _2334;
        float _4258 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
        float _2336 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _2337 = isnan(1.0) ? _2035 : (isnan(_2035) ? 1.0 : min(_2035, 1.0));
        _2148 = (((cbLight._m0[_2318].x * 0.3183098733425140380859375) * _2336) * _2337) + _2103;
        _2150 = (((cbLight._m0[_2318].y * 0.3183098733425140380859375) * _2336) * _2337) + _2105;
        _2152 = (((cbLight._m0[_2318].z * 0.3183098733425140380859375) * _2336) * _2337) + _2107;
    }
    uint _2155 = _2019 + 8u;
    float _2168 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2019].w)) * _894) * 0.949999988079071044921875);
    float _2169 = _2168 * _2168;
    float _2170 = cbLight._m0[_2019].x + _843;
    float _2171 = cbLight._m0[_2019].y + _844;
    float _2172 = cbLight._m0[_2019].z + _845;
    float _2176 = inversesqrt(dot(vec3(_2170, _2171, _2172), vec3(_2170, _2171, _2172)));
    float _2177 = _2176 * _2170;
    float _2178 = _2176 * _2171;
    float _2179 = _2176 * _2172;
    float _2180 = dot(vec3(_763, _764, _765), vec3(cbLight._m0[_2019].xyz));
    float _4274 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
    float _2183 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
    float _4285 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _2184 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
    float _2185 = dot(vec3(_763, _764, _765), vec3(_2177, _2178, _2179));
    float _4296 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
    float _2188 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
    float _2189 = dot(vec3(cbLight._m0[_2019].xyz), vec3(_2177, _2178, _2179));
    float _4307 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
    float _2193 = _2169 * _2169;
    float _2197 = ((_2188 * _2188) * (_2193 + (-1.0))) + 1.0;
    float _2205 = exp2(log2(1.0 - (isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0)))) * 5.0);
    float _2206 = 0.959999978542327880859375 - _961;
    float _2208 = 0.959999978542327880859375 - _962;
    float _2209 = 0.959999978542327880859375 - _963;
    float _2216 = 1.0 - _2169;
    float _2227 = (0.5 / (((_2184 * ((_2183 * _2216) + _2169)) + 9.9999999392252902907785028219223e-09) + (((_2184 * _2216) + _2169) * _2183))) * _2183;
    float _4318 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
    float _2229 = (isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) * (_2193 / ((_2197 * _2197) * 3.141590118408203125));
    uint _2240 = _2019 + 9u;
    float _2251 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2056].w)) * _894) * 0.949999988079071044921875);
    float _2252 = _2251 * _2251;
    float _2253 = cbLight._m0[_2056].x + _843;
    float _2254 = cbLight._m0[_2056].y + _844;
    float _2255 = cbLight._m0[_2056].z + _845;
    float _2259 = inversesqrt(dot(vec3(_2253, _2254, _2255), vec3(_2253, _2254, _2255)));
    float _2260 = _2259 * _2253;
    float _2261 = _2259 * _2254;
    float _2262 = _2259 * _2255;
    float _2263 = dot(vec3(_763, _764, _765), vec3(cbLight._m0[_2056].xyz));
    float _4329 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
    float _2266 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
    float _2267 = dot(vec3(_763, _764, _765), vec3(_2260, _2261, _2262));
    float _4340 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
    float _2270 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
    float _2271 = dot(vec3(cbLight._m0[_2056].xyz), vec3(_2260, _2261, _2262));
    float _4351 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
    float _2275 = _2252 * _2252;
    float _2279 = ((_2270 * _2270) * (_2275 + (-1.0))) + 1.0;
    float _2286 = exp2(log2(1.0 - (isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0)))) * 5.0);
    float _2293 = 1.0 - _2252;
    float _2303 = (0.5 / (((_2184 * ((_2266 * _2293) + _2252)) + 9.9999999392252902907785028219223e-09) + (((_2184 * _2293) + _2252) * _2266))) * _2266;
    float _4362 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
    float _2305 = (isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0))) * (_2275 / ((_2279 * _2279) * 3.141590118408203125));
    float _2315 = (((((_2286 * _2206) + _964) * cbLight._m0[_2240].x) * _2305) * _2042) + (((((_2205 * _2206) + _964) * cbLight._m0[_2155].x) * _2229) * _2052);
    float _2316 = (((((_2286 * _2208) + _966) * cbLight._m0[_2240].y) * _2305) * _2042) + (((((_2205 * _2208) + _966) * cbLight._m0[_2155].y) * _2229) * _2052);
    float _2317 = (((((_2286 * _2209) + _967) * cbLight._m0[_2240].z) * _2305) * _2042) + (((((_2205 * _2209) + _967) * cbLight._m0[_2155].z) * _2229) * _2052);
    float _2379;
    float _2381;
    float _2383;
    if (_2092)
    {
        _2379 = _2315;
        _2381 = _2316;
        _2383 = _2317;
    }
    else
    {
        uint _2385 = _2019 + 2u;
        uint _2389 = _2019 + 10u;
        float _2403 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2385].w)) * _894) * 0.949999988079071044921875);
        float _2404 = _2403 * _2403;
        float _2405 = cbLight._m0[_2385].x + _843;
        float _2406 = cbLight._m0[_2385].y + _844;
        float _2407 = cbLight._m0[_2385].z + _845;
        float _2411 = inversesqrt(dot(vec3(_2405, _2406, _2407), vec3(_2405, _2406, _2407)));
        float _2412 = _2411 * _2405;
        float _2413 = _2411 * _2406;
        float _2414 = _2411 * _2407;
        float _2415 = dot(vec3(_763, _764, _765), vec3(cbLight._m0[_2385].xyz));
        float _4373 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
        float _2418 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
        float _2419 = dot(vec3(_763, _764, _765), vec3(_2412, _2413, _2414));
        float _4384 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
        float _2422 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
        float _2423 = dot(vec3(cbLight._m0[_2385].xyz), vec3(_2412, _2413, _2414));
        float _4395 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
        float _2427 = _2404 * _2404;
        float _2431 = ((_2422 * _2422) * (_2427 + (-1.0))) + 1.0;
        float _2438 = exp2(log2(1.0 - (isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0)))) * 5.0);
        float _2445 = 1.0 - _2404;
        float _2455 = (0.5 / (((_2184 * ((_2418 * _2445) + _2404)) + 9.9999999392252902907785028219223e-09) + (((_2184 * _2445) + _2404) * _2418))) * _2418;
        float _4406 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
        float _2457 = (isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0))) * (_2427 / ((_2431 * _2431) * 3.141590118408203125));
        float _2458 = isnan(1.0) ? _2034 : (isnan(_2034) ? 1.0 : min(_2034, 1.0));
        _2379 = (((((_2438 * _2206) + _964) * cbLight._m0[_2389].x) * _2457) * _2458) + _2315;
        _2381 = (((((_2438 * _2208) + _966) * cbLight._m0[_2389].y) * _2457) * _2458) + _2316;
        _2383 = (((((_2438 * _2209) + _967) * cbLight._m0[_2389].z) * _2457) * _2458) + _2317;
    }
    float _2493;
    float _2495;
    float _2497;
    if (_2110)
    {
        _2493 = _2379;
        _2495 = _2381;
        _2497 = _2383;
    }
    else
    {
        uint _2504 = _2019 + 3u;
        uint _2508 = _2019 + 11u;
        float _2522 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2504].w)) * _894) * 0.949999988079071044921875);
        float _2523 = _2522 * _2522;
        float _2524 = cbLight._m0[_2504].x + _843;
        float _2525 = cbLight._m0[_2504].y + _844;
        float _2526 = cbLight._m0[_2504].z + _845;
        float _2530 = inversesqrt(dot(vec3(_2524, _2525, _2526), vec3(_2524, _2525, _2526)));
        float _2531 = _2530 * _2524;
        float _2532 = _2530 * _2525;
        float _2533 = _2530 * _2526;
        float _2534 = dot(vec3(_763, _764, _765), vec3(cbLight._m0[_2504].xyz));
        float _4422 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
        float _2537 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
        float _2538 = dot(vec3(_763, _764, _765), vec3(_2531, _2532, _2533));
        float _4433 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
        float _2541 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
        float _2542 = dot(vec3(cbLight._m0[_2504].xyz), vec3(_2531, _2532, _2533));
        float _4444 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
        float _2546 = _2523 * _2523;
        float _2550 = ((_2541 * _2541) * (_2546 + (-1.0))) + 1.0;
        float _2557 = exp2(log2(1.0 - (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0)))) * 5.0);
        float _2564 = 1.0 - _2523;
        float _2574 = (0.5 / (((_2184 * ((_2537 * _2564) + _2523)) + 9.9999999392252902907785028219223e-09) + (((_2184 * _2564) + _2523) * _2537))) * _2537;
        float _4455 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
        float _2576 = (isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0))) * (_2546 / ((_2550 * _2550) * 3.141590118408203125));
        float _2577 = isnan(1.0) ? _2035 : (isnan(_2035) ? 1.0 : min(_2035, 1.0));
        _2493 = (((((_2557 * _2206) + _964) * cbLight._m0[_2508].x) * _2576) * _2577) + _2379;
        _2495 = (((((_2557 * _2208) + _966) * cbLight._m0[_2508].y) * _2576) * _2577) + _2381;
        _2497 = (((((_2557 * _2209) + _967) * cbLight._m0[_2508].z) * _2576) * _2577) + _2383;
    }
    float _2711;
    float _2713;
    float _2715;
    float _2717;
    float _2719;
    float _2721;
    if (_2017.y == 0u)
    {
        float _2652 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2653 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2652;
        float _2654 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2652;
        float _2655 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2652;
        uvec4 _2667 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2668 = _2667.x;
        uint _2679 = uint((float(_2667.y) * floor(float(uint(cbSceneParam._m0[85u].y * _852) / _2668))) + floor(float(uint(cbSceneParam._m0[85u].x * _851) / _2668)));
        float _2689 = (log2(_2655 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2690 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
        uint _2693 = uint(isnan(14.0) ? _2690 : (isnan(_2690) ? 14.0 : min(_2690, 14.0)));
        uvec4 _2698 = texelFetch(g_lightClusterGridBuffer, int(((_2693 << 2u) + (_2679 << 6u)) >> 2u));
        uint _2699 = _2698.x;
        uint _2700 = _2667.z;
        float _2834;
        float _2836;
        float _2838;
        float _2840;
        float _2842;
        float _2844;
        if (((((1u << ((_2700 >> 4u) & 15u)) + 4294967295u) & _2699) == 0u) || ((_2700 & 240u) == 0u))
        {
            _2834 = 0.0;
            _2836 = 0.0;
            _2838 = 0.0;
            _2840 = 0.0;
            _2842 = 0.0;
            _2844 = 0.0;
        }
        else
        {
            float _2835;
            float _2837;
            float _2839;
            float _2841;
            float _2843;
            float _2845;
            float _2987 = 0.0;
            float _2988 = 0.0;
            float _2989 = 0.0;
            float _2990 = 0.0;
            float _2991 = 0.0;
            float _2992 = 0.0;
            uint _2993 = 0u;
            uint _3002;
            bool _3003;
            for (;;)
            {
                _3002 = texelFetch(g_lightClassification, int((((_2693 << 5u) + (_2679 << 9u)) + (_2993 << 2u)) >> 2u)).x;
                _3003 = _3002 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_3003)
                {
                    frontier_phi_63_pred = _2992;
                    frontier_phi_63_pred_1 = _2991;
                    frontier_phi_63_pred_2 = _2990;
                    frontier_phi_63_pred_3 = _2989;
                    frontier_phi_63_pred_4 = _2988;
                    frontier_phi_63_pred_5 = _2987;
                }
                else
                {
                    float _3111;
                    float _3112;
                    float _3113;
                    float _3114;
                    float _3115;
                    float _3116;
                    uint _3117;
                    _3111 = _2987;
                    _3112 = _2988;
                    _3113 = _2989;
                    _3114 = _2990;
                    _3115 = _2991;
                    _3116 = _2992;
                    _3117 = _3002;
                    float _3043;
                    float _3044;
                    float _3045;
                    float _3046;
                    float _3047;
                    float _3048;
                    for (;;)
                    {
                        uint _3121 = uint(findLSB(_3117)) + (_2993 << 5u);
                        uint _3118 = (_3117 + 4294967295u) & _3117;
                        uint _3123 = _3121 * 48u;
                        vec4 _3137 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3123)).x, texelFetch(g_PointLightRenderingBuffer, int(_3123 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3123 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3123 + 3u)).x));
                        uint _3143 = (_3121 * 48u) + 4u;
                        vec4 _3156 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3143)).x, texelFetch(g_PointLightRenderingBuffer, int(_3143 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3143 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3143 + 3u)).x));
                        uint _3162 = (_3121 * 48u) + 8u;
                        vec3 _3173 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3162)).x, texelFetch(g_PointLightRenderingBuffer, int(_3162 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3162 + 2u)).x));
                        float _3177 = _3137.x - _2653;
                        float _3178 = _3137.y - _2654;
                        float _3179 = _3137.z - _2655;
                        float _3180 = dot(vec3(_3177, _3178, _3179), vec3(_3177, _3178, _3179));
                        float _3183 = inversesqrt(_3180);
                        float _3184 = _3183 * _3177;
                        float _3185 = _3183 * _3178;
                        float _3186 = _3183 * _3179;
                        float _3187 = dot(vec3(_875, _878, _881), vec3(_3184, _3185, _3186));
                        float _3192 = 1.0 - (_3180 * _3137.w);
                        float _4481 = isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0));
                        float _3193 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
                        float _3194 = sqrt(_3180) * _3156.w;
                        float _3197 = 1.39999997615814208984375 / (_3194 + 1.39999997615814208984375);
                        float _3198 = _3197 * _3197;
                        float _3201 = ((1.0 - _3198) * _3187) + _3198;
                        float _3204 = _3194 * _3194;
                        float _3208 = ((isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0))) * _3193) / ((_3204 * 0.699999988079071044921875) + 1.0);
                        float _3212 = (-0.0) - _2653;
                        float _3213 = (-0.0) - _2654;
                        float _3214 = (-0.0) - _2655;
                        float _3218 = inversesqrt(dot(vec3(_3212, _3213, _3214), vec3(_3212, _3213, _3214)));
                        float _3219 = _3218 * _3212;
                        float _3220 = _3218 * _3213;
                        float _3221 = _3218 * _3214;
                        float _3228 = exp2(log2(1.0 / ((_3204 * 3.5) + 5.0)) * 0.25);
                        float _3229 = 1.0 - _995;
                        float _3236 = sqrt(1.0 - ((1.0 - (_3229 * _3229)) * (1.0 - (_3228 * _3228))));
                        float _3237 = _3236 * _3236;
                        float _3238 = _3237 * _3237;
                        float _3239 = _3219 + _3184;
                        float _3240 = _3220 + _3185;
                        float _3241 = _3221 + _3186;
                        float _3245 = inversesqrt(dot(vec3(_3239, _3240, _3241), vec3(_3239, _3240, _3241)));
                        float _3249 = dot(vec3(_875, _878, _881), vec3(_3219, _3220, _3221));
                        float _4497 = isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0));
                        float _3252 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
                        float _3253 = dot(vec3(_875, _878, _881), vec3(_3245 * _3239, _3245 * _3240, _3245 * _3241));
                        float _4508 = isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0));
                        float _3256 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
                        float _3260 = ((_3256 * _3256) * (_3238 + (-1.0))) + 1.0;
                        float _3261 = _3197 * _3237;
                        float _3262 = _3261 * _3261;
                        float _3265 = ((1.0 - _3262) * _3187) + _3262;
                        float _4519 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0));
                        float _3266 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
                        float _3267 = 1.0 - _3237;
                        float _3277 = (0.5 / (((_3266 * ((_3252 * _3267) + _3237)) + 9.9999999392252902907785028219223e-09) + (((_3266 * _3267) + _3237) * _3252))) * _3266;
                        float _4530 = isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0));
                        float _3288 = (((_3238 * 3.1415927410125732421875) * (isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0)))) / ((_3260 * _3260) * ((_3204 * 2.1991131305694580078125) + 3.141590118408203125))) * _3193;
                        _3046 = (_3208 * _3156.x) + _3114;
                        _3047 = (_3208 * _3156.y) + _3115;
                        _3048 = (_3208 * _3156.z) + _3116;
                        _3043 = (_3288 * _3173.x) + _3111;
                        _3044 = (_3288 * _3173.y) + _3112;
                        _3045 = (_3288 * _3173.z) + _3113;
                        if (_3118 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3111 = _3043;
                            _3112 = _3044;
                            _3113 = _3045;
                            _3114 = _3046;
                            _3115 = _3047;
                            _3116 = _3048;
                            _3117 = _3118;
                        }
                    }
                    frontier_phi_63_pred = _3048;
                    frontier_phi_63_pred_1 = _3047;
                    frontier_phi_63_pred_2 = _3046;
                    frontier_phi_63_pred_3 = _3045;
                    frontier_phi_63_pred_4 = _3044;
                    frontier_phi_63_pred_5 = _3043;
                }
                _2845 = frontier_phi_63_pred;
                _2843 = frontier_phi_63_pred_1;
                _2841 = frontier_phi_63_pred_2;
                _2839 = frontier_phi_63_pred_3;
                _2837 = frontier_phi_63_pred_4;
                _2835 = frontier_phi_63_pred_5;
                uint _2994 = _2993 + 1u;
                if (_2994 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2987 = _2835;
                    _2988 = _2837;
                    _2989 = _2839;
                    _2990 = _2841;
                    _2991 = _2843;
                    _2992 = _2845;
                    _2993 = _2994;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2834 = _2835;
            _2836 = _2837;
            _2838 = _2839;
            _2840 = _2841;
            _2842 = _2843;
            _2844 = _2845;
        }
        uvec4 _2848 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2849 = _2848.z;
        uint _2851 = (_2849 >> 8u) & 15u;
        float _2955;
        float _2957;
        float _2959;
        float _2961;
        float _2963;
        float _2965;
        if (((4294967295u << _2851) & _2699) == 0u)
        {
            _2955 = _2834;
            _2957 = _2836;
            _2959 = _2838;
            _2961 = _2840;
            _2963 = _2842;
            _2965 = _2844;
        }
        else
        {
            float _2980 = inversesqrt(dot(vec3(_2653, _2654, _2655), vec3(_2653, _2654, _2655)));
            float _2981 = _2980 * _2653;
            float _2982 = _2980 * _2654;
            float _2983 = _2980 * _2655;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2851 < ((_2849 >> 12u) & 15u))
            {
                float _2956;
                float _2958;
                float _2960;
                float _2962;
                float _2964;
                float _2966;
                float _3094 = _2834;
                float _3095 = _2836;
                float _3096 = _2838;
                float _3097 = _2840;
                float _3098 = _2842;
                float _3099 = _2844;
                uint _3100 = _2851;
                uint _3109;
                bool _3110;
                for (;;)
                {
                    _3109 = texelFetch(g_lightClassification, int((((_2693 << 5u) + (_2679 << 9u)) + (_3100 << 2u)) >> 2u)).x;
                    _3110 = _3109 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_3110)
                    {
                        frontier_phi_69_pred = _3099;
                        frontier_phi_69_pred_1 = _3098;
                        frontier_phi_69_pred_2 = _3097;
                        frontier_phi_69_pred_3 = _3096;
                        frontier_phi_69_pred_4 = _3095;
                        frontier_phi_69_pred_5 = _3094;
                    }
                    else
                    {
                        float _3293;
                        float _3294;
                        float _3295;
                        float _3296;
                        float _3297;
                        float _3298;
                        float _3586;
                        float _3587;
                        float _3588;
                        float _3589;
                        float _3590;
                        float _3591;
                        float _3306 = _3094;
                        float _3307 = _3095;
                        float _3308 = _3096;
                        float _3309 = _3097;
                        float _3310 = _3098;
                        float _3311 = _3099;
                        uint _3312 = _3109;
                        uint _3313;
                        vec4 _3338;
                        float _3339;
                        vec4 _3354;
                        vec3 _3366;
                        vec4 _3381;
                        vec4 _3396;
                        float _3442;
                        bool _3443;
                        for (;;)
                        {
                            uint _3323 = ((_3100 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3312));
                            _3313 = (_3312 + 4294967295u) & _3312;
                            uint _3325 = _3323 * 40u;
                            _3338 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3325)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 3u)).x));
                            _3339 = _3338.w;
                            uint _3341 = (_3323 * 40u) + 4u;
                            _3354 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3341)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 3u)).x));
                            uint _3356 = (_3323 * 40u) + 8u;
                            _3366 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3356)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 2u)).x));
                            uint _3368 = (_3323 * 40u) + 16u;
                            _3381 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3368)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 3u)).x));
                            uint _3383 = (_3323 * 40u) + 20u;
                            _3396 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3383)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 3u)).x));
                            uint _3398 = (_3323 * 40u) + 24u;
                            vec4 _3411 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3398)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 3u)).x));
                            uint _3417 = (_3323 * 40u) + 28u;
                            vec4 _3430 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3417)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 3u)).x));
                            _3442 = fma(_2655, _3430.z, fma(_2654, _3430.y, _3430.x * _2653)) + _3430.w;
                            _3443 = !((fma(_2655, _3411.z, fma(_2654, _3411.y, _3411.x * _2653)) + _3411.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3443)
                            {
                                float _3470 = _3338.x - _2653;
                                float _3471 = _3338.y - _2654;
                                float _3472 = _3338.z - _2655;
                                float _3473 = dot(vec3(_3470, _3471, _3472), vec3(_3470, _3471, _3472));
                                float _3476 = inversesqrt(_3473);
                                float _3477 = _3476 * _3470;
                                float _3478 = _3476 * _3471;
                                float _3479 = _3476 * _3472;
                                float _3483 = 1.0 - (_3473 / (_3339 * _3339));
                                float _4541 = isnan(0.0) ? _3483 : (isnan(_3483) ? 0.0 : max(_3483, 0.0));
                                float _3484 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
                                float _3488 = sqrt(_3473) * _3354.w;
                                float _3490 = 1.39999997615814208984375 / (_3488 + 1.39999997615814208984375);
                                float _3491 = _3490 * _3490;
                                float _3494 = ((1.0 - _3491) * dot(vec3(_3477, _3478, _3479), vec3(_875, _878, _881))) + _3491;
                                float _3497 = _3488 * _3488;
                                float _3501 = (fma(_2655, _3381.z, fma(_2654, _3381.y, _3381.x * _2653)) + _3381.w) / _3442;
                                float _3502 = (fma(_2655, _3396.z, fma(_2654, _3396.y, _3396.x * _2653)) + _3396.w) / _3442;
                                float _3506 = 1.0 - dot(vec2(_3501, _3502), vec2(_3501, _3502));
                                float _4557 = isnan(0.0) ? _3506 : (isnan(_3506) ? 0.0 : max(_3506, 0.0));
                                float _3507 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
                                float _3508 = _3507 * (((isnan(0.0) ? _3494 : (isnan(_3494) ? 0.0 : max(_3494, 0.0))) * _3484) / ((_3497 * 0.699999988079071044921875) + 1.0));
                                float _3520 = exp2(log2(1.0 / ((_3497 * 3.5) + 5.0)) * 0.25);
                                float _3521 = 1.0 - _995;
                                float _3528 = sqrt(1.0 - ((1.0 - (_3521 * _3521)) * (1.0 - (_3520 * _3520))));
                                float _3529 = _3528 * _3528;
                                float _3530 = _3529 * _3529;
                                float _3531 = _3477 - _2981;
                                float _3532 = _3478 - _2982;
                                float _3533 = _3479 - _2983;
                                float _3537 = inversesqrt(dot(vec3(_3531, _3532, _3533), vec3(_3531, _3532, _3533)));
                                float _3541 = dot(vec3(_875, _878, _881), vec3((-0.0) - _2981, (-0.0) - _2982, (-0.0) - _2983));
                                float _4568 = isnan(0.0) ? _3541 : (isnan(_3541) ? 0.0 : max(_3541, 0.0));
                                float _3544 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
                                float _3545 = dot(vec3(_875, _878, _881), vec3(_3537 * _3531, _3537 * _3532, _3537 * _3533));
                                float _4579 = isnan(0.0) ? _3545 : (isnan(_3545) ? 0.0 : max(_3545, 0.0));
                                float _3548 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
                                float _3552 = ((_3548 * _3548) * (_3530 + (-1.0))) + 1.0;
                                float _3553 = _3490 * _3529;
                                float _3554 = _3553 * _3553;
                                float _3560 = ((1.0 - _3554) * dot(vec3(_875, _878, _881), vec3(_3477, _3478, _3479))) + _3554;
                                float _4590 = isnan(0.0) ? _3560 : (isnan(_3560) ? 0.0 : max(_3560, 0.0));
                                float _3561 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
                                float _3562 = 1.0 - _3529;
                                float _3572 = (0.5 / (((_3561 * ((_3544 * _3562) + _3529)) + 9.9999999392252902907785028219223e-09) + (((_3561 * _3562) + _3529) * _3544))) * _3561;
                                float _4601 = isnan(0.0) ? _3572 : (isnan(_3572) ? 0.0 : max(_3572, 0.0));
                                float _3582 = (_3507 * _3484) * (((_3530 * 3.1415927410125732421875) * (isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0)))) / ((_3552 * _3552) * ((_3497 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3508 * _3354.z;
                                frontier_phi_75_pred_1 = _3508 * _3354.y;
                                frontier_phi_75_pred_2 = _3508 * _3354.x;
                                frontier_phi_75_pred_3 = _3582 * _3366.z;
                                frontier_phi_75_pred_4 = _3582 * _3366.y;
                                frontier_phi_75_pred_5 = _3582 * _3366.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3591 = frontier_phi_75_pred;
                            _3590 = frontier_phi_75_pred_1;
                            _3589 = frontier_phi_75_pred_2;
                            _3588 = frontier_phi_75_pred_3;
                            _3587 = frontier_phi_75_pred_4;
                            _3586 = frontier_phi_75_pred_5;
                            _3296 = _3589 + _3309;
                            _3297 = _3590 + _3310;
                            _3298 = _3591 + _3311;
                            _3293 = _3586 + _3306;
                            _3294 = _3587 + _3307;
                            _3295 = _3588 + _3308;
                            if (_3313 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3306 = _3293;
                                _3307 = _3294;
                                _3308 = _3295;
                                _3309 = _3296;
                                _3310 = _3297;
                                _3311 = _3298;
                                _3312 = _3313;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3298;
                        frontier_phi_69_pred_1 = _3297;
                        frontier_phi_69_pred_2 = _3296;
                        frontier_phi_69_pred_3 = _3295;
                        frontier_phi_69_pred_4 = _3294;
                        frontier_phi_69_pred_5 = _3293;
                    }
                    _2966 = frontier_phi_69_pred;
                    _2964 = frontier_phi_69_pred_1;
                    _2962 = frontier_phi_69_pred_2;
                    _2960 = frontier_phi_69_pred_3;
                    _2958 = frontier_phi_69_pred_4;
                    _2956 = frontier_phi_69_pred_5;
                    uint _3101 = _3100 + 1u;
                    if (_3101 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3094 = _2956;
                        _3095 = _2958;
                        _3096 = _2960;
                        _3097 = _2962;
                        _3098 = _2964;
                        _3099 = _2966;
                        _3100 = _3101;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2966;
                frontier_phi_57_58_ladder_1 = _2964;
                frontier_phi_57_58_ladder_2 = _2962;
                frontier_phi_57_58_ladder_3 = _2960;
                frontier_phi_57_58_ladder_4 = _2958;
                frontier_phi_57_58_ladder_5 = _2956;
            }
            else
            {
                frontier_phi_57_58_ladder = _2844;
                frontier_phi_57_58_ladder_1 = _2842;
                frontier_phi_57_58_ladder_2 = _2840;
                frontier_phi_57_58_ladder_3 = _2838;
                frontier_phi_57_58_ladder_4 = _2836;
                frontier_phi_57_58_ladder_5 = _2834;
            }
            _2955 = frontier_phi_57_58_ladder_5;
            _2957 = frontier_phi_57_58_ladder_4;
            _2959 = frontier_phi_57_58_ladder_3;
            _2961 = frontier_phi_57_58_ladder_2;
            _2963 = frontier_phi_57_58_ladder_1;
            _2965 = frontier_phi_57_58_ladder;
        }
        float _2970 = isnan(1.0) ? _979 : (isnan(_979) ? 1.0 : min(_979, 1.0));
        _2711 = (_2970 * _2961) + _2148;
        _2713 = (_2970 * _2963) + _2150;
        _2715 = (_2970 * _2965) + _2152;
        _2717 = ((_2955 * _964) * _2970) + _2493;
        _2719 = ((_2957 * _966) * _2970) + _2495;
        _2721 = ((_2959 * _967) * _2970) + _2497;
    }
    else
    {
        _2711 = _2148;
        _2713 = _2150;
        _2715 = _2152;
        _2717 = _2493;
        _2719 = _2495;
        _2721 = _2497;
    }
    uint _2727 = _908 + uint(cbMatDynParam._m0[0u].w);
    float _2735 = ((cbMtdParam._m0[11u].x * cbMtdParam._m0[22u].z) * _707.x) * cbInstanceData._m0[_2727].x;
    float _2738 = ((cbMtdParam._m0[11u].y * cbMtdParam._m0[22u].z) * _707.y) * cbInstanceData._m0[_2727].y;
    float _2741 = ((cbMtdParam._m0[11u].z * cbMtdParam._m0[22u].z) * _707.z) * cbInstanceData._m0[_2727].z;
    float _4617 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
    float _4628 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    float _4639 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _2758 = (((isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0))) * (_2711 + ((isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0))) * _979))) + ((_2717 + ((isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0))) * _1788)) * cbPerFrame._m0[3u].x)) + _2735;
    float _2760 = (_2738 + ((_2719 + ((isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0))) * _1788)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0))) * (_2713 + ((isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0))) * _979)));
    float _2762 = (_2741 + ((_2721 + ((isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0))) * _1788)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0))) * (_2715 + ((isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0))) * _979)));
    float _4665 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2775 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
    uint _2776 = _907 + 6u;
    float _2784 = _851 / cbSceneParam._m0[86u].x;
    float _2785 = _852 / cbSceneParam._m0[86u].y;
    vec4 _2799 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2784, _2785, (log2((isnan(cbSceneParam._m0[77u].w) ? _786 : (isnan(_786) ? cbSceneParam._m0[77u].w : min(_786, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2801 = _2799.x;
    float _2802 = _2799.y;
    float _2803 = _2799.z;
    float _2804 = _2799.w;
    float _2896;
    float _2898;
    float _2900;
    float _2902;
    if (_786 > cbSceneParam._m0[78u].w)
    {
        float _2859 = isnan(_786) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _786 : min(cbSceneParam._m0[80u].w, _786));
        float _2860 = _2859 / _786;
        float _2871 = _2860 * _836;
        float _2872 = _837 * _2860;
        float _2873 = (-0.0) - _2872;
        float _2874 = _2860 * _838;
        float _2876 = (cbSceneParam._m0[77u].w * _2873) / _2859;
        float _2877 = _2876 + cbSceneParam._m0[79u].w;
        float _2878 = cbSceneParam._m0[79u].w - _2872;
        float _2884 = sqrt(((_2871 * _2871) + (_2872 * _2872)) + (_2874 * _2874));
        float _2887 = (1.0 - (cbSceneParam._m0[77u].w / _2859)) * _2884;
        float _2892 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2894 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3056;
        if (abs((_2873 - _2876) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3056 = ((((_2877 > 0.0) ? exp2(_2892 * _2877) : (2.0 - exp2(_2894 * _2877))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2887;
        }
        else
        {
            float _3016 = 1.0 / cbSceneParam._m0[80u].x;
            float _3017 = isnan(_2878) ? _2877 : (isnan(_2877) ? _2878 : max(_2877, _2878));
            float _3018 = isnan(_2878) ? _2877 : (isnan(_2877) ? _2878 : min(_2877, _2878));
            float _3027 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : min(_3017, 0.0));
            float _3028 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : min(_3018, 0.0));
            _3056 = ((abs(_2884 / _2873) * cbSceneParam._m0[80u].y) * ((((_3027 - _3028) * 2.0) - ((exp2(_2892 * (isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0)))) - exp2(_2892 * (isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0))))) * _3016)) - ((exp2(_2894 * _3027) - exp2(_2894 * _3028)) * _3016))) + (_2887 * cbSceneParam._m0[80u].z);
        }
        vec4 _3058 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2784, _2785, 1.0), 0.0);
        float _3067 = exp2((_3056 * (-1.44269502162933349609375)) * (1.0 - _3058.w));
        float _3068 = log2(_3067);
        float _3084 = log2(_2804);
        _2896 = (exp2(_3084 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3068 * cbSceneParam._m0[78u].x)) * _3058.x) / cbSceneParam._m0[78u].x)) + _2801;
        _2898 = (exp2(_3084 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3068 * cbSceneParam._m0[78u].y)) * _3058.y) / cbSceneParam._m0[78u].y)) + _2802;
        _2900 = (exp2(_3084 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3068 * cbSceneParam._m0[78u].z)) * _3058.z) / cbSceneParam._m0[78u].z)) + _2803;
        _2902 = _3067 * _2804;
    }
    else
    {
        _2896 = _2801;
        _2898 = _2802;
        _2900 = _2803;
        _2902 = _2804;
    }
    float _2914 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2915 = _2914 == 3.0;
    float _2916 = log2(_2902);
    float _2920 = exp2(_2916 * cbSceneParam._m0[78u].x);
    float _2921 = exp2(_2916 * cbSceneParam._m0[78u].y);
    float _2922 = exp2(_2916 * cbSceneParam._m0[78u].z);
    float _2923 = _2920 * (isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0)));
    float _2924 = _2921 * (isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0)));
    float _2925 = _2922 * (isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0)));
    float _2934 = (_2914 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2934 * (_2915 ? _2923 : (_2923 + (cbSceneParam._m0[72u].w * _2896)));
    SV_Target.y = _2934 * (_2915 ? _2924 : (_2924 + (cbSceneParam._m0[72u].w * _2898)));
    SV_Target.z = _2934 * (_2915 ? _2925 : (_2925 + (cbSceneParam._m0[72u].w * _2900)));
    SV_Target.w = cbInstanceData._m0[_2776].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2735) * _2775) * _2920) * _2934;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2738) * _2775) * _2921) * _2934;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2741) * _2775) * _2922) * _2934;
    SV_Target_1.w = cbInstanceData._m0[_2776].w;
}


