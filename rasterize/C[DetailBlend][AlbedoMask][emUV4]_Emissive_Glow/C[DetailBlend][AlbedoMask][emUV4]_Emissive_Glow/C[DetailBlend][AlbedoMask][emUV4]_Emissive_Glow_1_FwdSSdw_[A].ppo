#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 11) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 12) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1419;
float _3866;
float _3867;
float _3868;
float _3869;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _234 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _241 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _242 = _241 * NORMAL.x;
    float _243 = _241 * NORMAL.y;
    float _244 = _241 * NORMAL.z;
    float _248 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _256;
    float _257;
    float _258;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _256 = (-0.0) - _242;
        _257 = (-0.0) - _243;
        _258 = (-0.0) - _244;
    }
    else
    {
        _256 = _242;
        _257 = _243;
        _258 = _244;
    }
    vec4 _273 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _283 = log2(0.0);
    float _285 = exp2(_283 * cbMtdParam._m0[21u].y);
    float _286 = isnan(0.0) ? _285 : (isnan(_285) ? 0.0 : max(_285, 0.0));
    float _287 = isnan(1.0) ? _286 : (isnan(_286) ? 1.0 : min(_286, 1.0));
    vec4 _301 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _305 = _301.z;
    float _306 = _301.w;
    float _314 = exp2(log2(_305 * cbMtdParam._m0[21u].w) * cbMtdParam._m0[20u].y);
    float _315 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _316 = isnan(1.0) ? _315 : (isnan(_315) ? 1.0 : min(_315, 1.0));
    vec4 _329 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    vec4 _352 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _354 = _352.x;
    float _355 = _352.y;
    float _379 = ((cbMtdParam._m0[20u].w * _352.z) * (texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_15, SS_WrapLinear), vec2(((cbMtdParam._m0[20u].z * TEXCOORD.x) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, ((cbMtdParam._m0[20u].z * TEXCOORD.y) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w)).x - _354)) + _354;
    bool _415 = _379 >= 0.25;
    bool _420 = _379 >= 0.3499999940395355224609375;
    bool _425 = _379 >= 0.5;
    bool _430 = _379 >= 0.64999997615814208984375;
    bool _435 = _379 >= 0.75;
    vec4 _463 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _473 = cbMtdParam._m0[9u].x * _463.x;
    float _474 = cbMtdParam._m0[9u].y * _463.y;
    float _475 = cbMtdParam._m0[9u].z * _463.z;
    float _482 = (((((((_435 ? cbMtdParam._m0[14u].x : (_430 ? cbMtdParam._m0[19u].x : (_425 ? cbMtdParam._m0[18u].x : (_420 ? cbMtdParam._m0[17u].x : (_415 ? cbMtdParam._m0[16u].x : cbMtdParam._m0[15u].x))))) - cbMtdParam._m0[10u].x) * _355) + cbMtdParam._m0[10u].x) * _329.x) - _473) * _316) + _473;
    float _483 = (((((((_435 ? cbMtdParam._m0[14u].y : (_430 ? cbMtdParam._m0[19u].y : (_425 ? cbMtdParam._m0[18u].y : (_420 ? cbMtdParam._m0[17u].y : (_415 ? cbMtdParam._m0[16u].y : cbMtdParam._m0[15u].y))))) - cbMtdParam._m0[10u].y) * _355) + cbMtdParam._m0[10u].y) * _329.y) - _474) * _316) + _474;
    float _484 = (((((((_435 ? cbMtdParam._m0[14u].z : (_430 ? cbMtdParam._m0[19u].z : (_425 ? cbMtdParam._m0[18u].z : (_420 ? cbMtdParam._m0[17u].z : (_415 ? cbMtdParam._m0[16u].z : cbMtdParam._m0[15u].z))))) - cbMtdParam._m0[10u].z) * _355) + cbMtdParam._m0[10u].z) * _329.z) - _475) * _316) + _475;
    float _491 = exp2(log2(_306) * cbMtdParam._m0[22u].y);
    vec4 _504 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _524 = (((cbMtdParam._m0[12u].x * _504.x) - _482) * _491) + _482;
    float _525 = (((cbMtdParam._m0[12u].y * _504.y) - _483) * _491) + _483;
    float _526 = (((cbMtdParam._m0[12u].z * _504.z) - _484) * _491) + _484;
    vec4 _538 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _562 = (_273.x * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].x * _538.x) - _524) * _287) + _524);
    float _564 = (_273.y * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].y * _538.y) - _525) * _287) + _525);
    float _566 = (_273.z * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].z * _538.z) - _526) * _287) + _526);
    float _571 = exp2(log2(1.0 - _306) * 0.00999999977648258209228515625);
    float _589 = ((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_11, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x - cbMtdParam._m0[22u].w) * _571) + cbMtdParam._m0[22u].w;
    float _608 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w)).x - _589) + cbMtdParam._m0[21u].z) * _491) + _589;
    float _630 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w)).x - _608) + cbMtdParam._m0[23u].w) * _287) + _608;
    vec4 _643 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _661 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _663 = _661.x;
    float _664 = _661.y;
    float _667 = cbMtdParam._m0[20u].x + _661.z;
    float _670 = (((cbMtdParam._m0[21u].x + _643.z) - _667) * _571) + _667;
    vec4 _682 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _694 = (_305 * 2.0) * ((((_682.z - _670) + cbMtdParam._m0[23u].y) * _491) + _670);
    vec4 _706 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _715 = (((_706.z - _694) + cbMtdParam._m0[22u].x) * _287) + _694;
    vec4 _734 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _749 = ((_643.x - _663) * _571) + _663;
    float _750 = ((_643.y - _664) * _571) + _664;
    float _755 = ((_682.x - _749) * _491) + _749;
    float _756 = ((_682.y - _750) * _491) + _750;
    float _765 = ((((_706.x - _755) * _287) + _755) * 2.0) + (-1.0);
    float _766 = ((((_706.y - _756) * _287) + _756) * 2.0) + (-1.0);
    float _767 = dot(vec2(_765, _766), vec2(_765, _766));
    float _3898 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _772 = sqrt(1.0 - (isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0))));
    float _775 = (cbMtdParam._m0[23u].x * ((_301.x * 2.0) + (-1.0))) + _765;
    float _776 = (cbMtdParam._m0[23u].x * ((_301.y * 2.0) + (-1.0))) + _766;
    float _779 = fma(_772, _256, fma(_776, _248 * TANGENT.x, (_234 * _227) * _775));
    float _782 = fma(_772, _257, fma(_776, _248 * TANGENT.y, (_234 * _228) * _775));
    float _785 = fma(_772, _258, fma(_776, _248 * TANGENT.z, (_234 * _229) * _775));
    float _789 = inversesqrt(dot(vec3(_779, _782, _785), vec3(_779, _782, _785)));
    float _790 = _789 * _779;
    float _791 = _789 * _782;
    float _792 = _789 * _785;
    float _3909 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _793 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
    float _3920 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _3931 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _3942 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _3953 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _797 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
    float _813 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _853 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _863 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _853);
    float _864 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _853);
    float _865 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _853);
    float _869 = inversesqrt(dot(vec3(_863, _864, _865), vec3(_863, _864, _865)));
    float _870 = _863 * _869;
    float _871 = _864 * _869;
    float _872 = _865 * _869;
    vec4 _877 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _879 = _877.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1100 = sqrt(((_863 * _863) + (_864 * _864)) + (_865 * _865));
        float _1106 = (cbMatDynParam._m0[5u].x * _1100) + cbMatDynParam._m0[5u].y;
        float _3964 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
        float _1111 = (cbMatDynParam._m0[5u].z * _1100) + cbMatDynParam._m0[5u].w;
        float _3975 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0))) - _1107)) + _1107) < ((_879 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _890 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _891 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _893 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _895 = _893.w;
    float _913 = fma(_792, cbSceneParam._m0[5u].z, fma(_791, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _790));
    float _916 = fma(_792, cbSceneParam._m0[6u].z, fma(_791, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _790));
    float _919 = fma(_792, cbSceneParam._m0[7u].z, fma(_791, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _790));
    vec4 _921 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _932 = (((_921.y - _793) + (_921.w * _793)) * cbMtdParam._m0[3u].x) + _793;
    uint _945 = uint(roundEven(NORMAL.w)) * 13u;
    uint _946 = _945 + 9u;
    uint _947 = _946 + uint(cbMatDynParam._m0[0u].w);
    float _953 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0)))) * cbInstanceData._m0[_947].x;
    float _954 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0)))) * cbInstanceData._m0[_947].y;
    float _955 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0)))) * cbInstanceData._m0[_947].z;
    float _3986 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
    float _956 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
    float _3997 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
    float _957 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
    float _4008 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    float _958 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
    vec4 _959 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _964 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _975 = (((_964.x - _797) + (_964.w * _797)) * cbMtdParam._m0[3u].x) + _797;
    float _988 = (cbMtdParam._m0[3u].x * (((_956 * _895) - _956) + _959.x)) + _956;
    float _989 = (cbMtdParam._m0[3u].x * (((_957 * _895) - _957) + _959.y)) + _957;
    float _990 = (cbMtdParam._m0[3u].x * (((_958 * _895) - _958) + _959.z)) + _958;
    float _991 = 1.0 - _975;
    float _992 = _991 * _988;
    float _993 = _991 * _989;
    float _994 = _991 * _990;
    float _999 = (_988 + (-0.039999999105930328369140625)) * _975;
    float _1000 = (_989 + (-0.039999999105930328369140625)) * _975;
    float _1001 = (_990 + (-0.039999999105930328369140625)) * _975;
    float _1002 = _999 + 0.039999999105930328369140625;
    float _1004 = _1000 + 0.039999999105930328369140625;
    float _1005 = _1001 + 0.039999999105930328369140625;
    vec4 _1014 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _890, cbSceneParam._m0[86u].y * _891));
    float _1017 = _1014.x * TEXCOORD_4.z;
    float _1018 = dot(vec3(_790, _791, _792), vec3(_870, _871, _872));
    float _1021 = _1018 * 2.0;
    float _1025 = (_1021 * _790) - _870;
    float _1026 = (_1021 * _791) - _871;
    float _1027 = (_1021 * _792) - _872;
    float _1031 = abs(dot(vec3(_870, _871, _872), vec3(_790, _791, _792)));
    float _4019 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
    float _1033 = sqrt(_932);
    float _1046 = exp2((_1033 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1033 * 3.0));
    float _1052 = (1.0 - _1046) * ((_1033 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1053 = _1046 * _1033;
    float _1081 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1085 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1089 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1418;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1144 = fma(_1089, cbModelParam._m0[26u].z, fma(_1085, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1081));
        float _1148 = fma(_1089, cbModelParam._m0[27u].z, fma(_1085, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1081));
        float _1152 = fma(_1089, cbModelParam._m0[28u].z, fma(_1085, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1081));
        float _1176 = _1081 + _790;
        float _1177 = _1085 + _791;
        float _1178 = _1089 + _792;
        float _1188 = fma(_1178, cbModelParam._m0[26u].z, fma(_1177, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1176)) - _1144;
        float _1189 = fma(_1178, cbModelParam._m0[27u].z, fma(_1177, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1176)) - _1148;
        float _1190 = fma(_1178, cbModelParam._m0[28u].z, fma(_1177, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1176)) - _1152;
        float _1194 = inversesqrt(dot(vec3(_1188, _1189, _1190), vec3(_1188, _1189, _1190)));
        float _1207 = ((_1194 * _1188) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1144 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1208 = ((_1194 * _1189) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1148 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1209 = ((_1194 * _1190) / cbModelParam._m0[34u].z) + ((((((_1152 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1212 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1207, _1208, _1209), 0.0);
        vec4 _1219 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1207, _1208, _1209), 0.0);
        vec4 _1226 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1207, _1208, _1209), 0.0);
        vec4 _1233 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1207, _1208, _1209), 0.0);
        float _1246 = exp2((_1212.w + (-0.5)) * 20.0) * 2.0;
        float _1247 = _1246 * (_1212.x + (-0.5));
        float _1248 = _1246 * (_1212.y + (-0.5));
        float _1249 = _1246 * (_1212.z + (-0.5));
        float _1256 = exp2((_1219.w + (-0.5)) * 20.0) * 2.0;
        float _1257 = _1256 * (_1219.x + (-0.5));
        float _1258 = _1256 * (_1219.y + (-0.5));
        float _1259 = _1256 * (_1219.z + (-0.5));
        float _1266 = exp2((_1226.w + (-0.5)) * 20.0) * 2.0;
        float _1267 = _1266 * (_1226.x + (-0.5));
        float _1268 = _1266 * (_1226.y + (-0.5));
        float _1269 = _1266 * (_1226.z + (-0.5));
        float _1276 = exp2((_1233.w + (-0.5)) * 20.0) * 2.0;
        float _1277 = _1276 * (_1233.x + (-0.5));
        float _1278 = _1276 * (_1233.y + (-0.5));
        float _1279 = _1276 * (_1233.z + (-0.5));
        float _1280 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1281 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1282 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1283 = _1247 * 0.5;
        float _1284 = _1257 * 0.5;
        float _1285 = _1267 * 0.5;
        float _1286 = dot(vec3(_1283, _1284, _1285), vec3(_1283, _1284, _1285));
        float _1291 = (_1286 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1286);
        float _1300 = (dot(vec3(_790, _791, _792), vec3(_1291 * _1283, _1291 * _1284, _1291 * _1285)) + 1.0) * 0.5;
        float _4045 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1310 = sqrt(((_1284 * _1284) + (_1283 * _1283)) + (_1285 * _1285)) / (_1280 + 9.9999997473787516355514526367188e-06);
        float _4056 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1312 = _1311 * 2.0;
        float _1316 = (1.0 - _1311) / (_1311 + 1.0);
        float _4067 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1317 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1326 = ((((1.0 - _1317) * (_1312 + 2.0)) * exp2(log2(isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * (_1312 + 1.0))) + _1317) * _1280;
        float _1327 = _1248 * 0.5;
        float _1328 = _1258 * 0.5;
        float _1329 = _1268 * 0.5;
        float _1330 = dot(vec3(_1327, _1328, _1329), vec3(_1327, _1328, _1329));
        float _1335 = (_1330 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1330);
        float _1343 = (dot(vec3(_790, _791, _792), vec3(_1335 * _1327, _1335 * _1328, _1335 * _1329)) + 1.0) * 0.5;
        float _4078 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1352 = sqrt(((_1328 * _1328) + (_1327 * _1327)) + (_1329 * _1329)) / (_1281 + 9.9999997473787516355514526367188e-06);
        float _4089 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1353 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _1354 = _1353 * 2.0;
        float _1358 = (1.0 - _1353) / (_1353 + 1.0);
        float _4100 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1359 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _1368 = ((((1.0 - _1359) * (_1354 + 2.0)) * exp2(log2(isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * (_1354 + 1.0))) + _1359) * _1281;
        float _1369 = _1249 * 0.5;
        float _1370 = _1259 * 0.5;
        float _1371 = _1269 * 0.5;
        float _1372 = dot(vec3(_1369, _1370, _1371), vec3(_1369, _1370, _1371));
        float _1377 = (_1372 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1372);
        float _1385 = (dot(vec3(_790, _791, _792), vec3(_1377 * _1369, _1377 * _1370, _1377 * _1371)) + 1.0) * 0.5;
        float _4111 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1394 = sqrt(((_1370 * _1370) + (_1369 * _1369)) + (_1371 * _1371)) / (_1282 + 9.9999997473787516355514526367188e-06);
        float _4122 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1395 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _1396 = _1395 * 2.0;
        float _1400 = (1.0 - _1395) / (_1395 + 1.0);
        float _4133 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1401 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _1410 = ((((1.0 - _1401) * (_1396 + 2.0)) * exp2(log2(isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * (_1396 + 1.0))) + _1401) * _1282;
        _1418 = _1249;
        _1420 = _1248;
        _1421 = _1247;
        _1422 = _1259;
        _1423 = _1258;
        _1424 = _1257;
        _1425 = _1269;
        _1426 = _1268;
        _1427 = _1267;
        _1428 = _1282;
        _1429 = _1281;
        _1430 = _1280;
        _1431 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0)));
        _1432 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0)));
        _1433 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0)));
    }
    else
    {
        _1418 = _1419;
        _1420 = _1419;
        _1421 = _1419;
        _1422 = _1419;
        _1423 = _1419;
        _1424 = _1419;
        _1425 = _1419;
        _1426 = _1419;
        _1427 = _1419;
        _1428 = _1419;
        _1429 = _1419;
        _1430 = _1419;
        _1431 = 0.0;
        _1432 = 0.0;
        _1433 = 0.0;
    }
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1462 = fma(_1089, cbModelParam._m0[30u].z, fma(_1085, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1081));
        float _1466 = fma(_1089, cbModelParam._m0[31u].z, fma(_1085, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1081));
        float _1470 = fma(_1089, cbModelParam._m0[32u].z, fma(_1085, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1081));
        float _1493 = _1081 + _790;
        float _1494 = _1085 + _791;
        float _1495 = _1089 + _792;
        float _1505 = fma(_1495, cbModelParam._m0[30u].z, fma(_1494, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1493)) - _1462;
        float _1506 = fma(_1495, cbModelParam._m0[31u].z, fma(_1494, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1493)) - _1466;
        float _1507 = fma(_1495, cbModelParam._m0[32u].z, fma(_1494, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1493)) - _1470;
        float _1511 = inversesqrt(dot(vec3(_1505, _1506, _1507), vec3(_1505, _1506, _1507)));
        float _1524 = ((_1511 * _1505) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1462 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1525 = ((_1511 * _1506) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1466 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1526 = ((_1511 * _1507) / cbModelParam._m0[35u].z) + ((((((_1470 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1528 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1524, _1525, _1526), 0.0);
        vec4 _1535 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1524, _1525, _1526), 0.0);
        vec4 _1542 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1524, _1525, _1526), 0.0);
        vec4 _1549 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1524, _1525, _1526), 0.0);
        float _1561 = exp2((_1528.w + (-0.5)) * 20.0) * 2.0;
        float _1562 = _1561 * (_1528.x + (-0.5));
        float _1563 = _1561 * (_1528.y + (-0.5));
        float _1564 = _1561 * (_1528.z + (-0.5));
        float _1571 = exp2((_1535.w + (-0.5)) * 20.0) * 2.0;
        float _1572 = _1571 * (_1535.x + (-0.5));
        float _1573 = _1571 * (_1535.y + (-0.5));
        float _1574 = _1571 * (_1535.z + (-0.5));
        float _1581 = exp2((_1542.w + (-0.5)) * 20.0) * 2.0;
        float _1582 = _1581 * (_1542.x + (-0.5));
        float _1583 = _1581 * (_1542.y + (-0.5));
        float _1584 = _1581 * (_1542.z + (-0.5));
        float _1591 = exp2((_1549.w + (-0.5)) * 20.0) * 2.0;
        float _1592 = _1591 * (_1549.x + (-0.5));
        float _1593 = _1591 * (_1549.y + (-0.5));
        float _1594 = _1591 * (_1549.z + (-0.5));
        float _1595 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1596 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1597 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1598 = _1562 * 0.5;
        float _1599 = _1572 * 0.5;
        float _1600 = _1582 * 0.5;
        float _1601 = dot(vec3(_1598, _1599, _1600), vec3(_1598, _1599, _1600));
        float _1606 = (_1601 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1601);
        float _1614 = (dot(vec3(_790, _791, _792), vec3(_1606 * _1598, _1606 * _1599, _1606 * _1600)) + 1.0) * 0.5;
        float _4174 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1623 = sqrt(((_1599 * _1599) + (_1598 * _1598)) + (_1600 * _1600)) / (_1595 + 9.9999997473787516355514526367188e-06);
        float _4185 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1624 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _1625 = _1624 * 2.0;
        float _1629 = (1.0 - _1624) / (_1624 + 1.0);
        float _4196 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1630 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _1639 = ((((1.0 - _1630) * (_1625 + 2.0)) * exp2(log2(isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * (_1625 + 1.0))) + _1630) * _1595;
        float _1640 = _1563 * 0.5;
        float _1641 = _1573 * 0.5;
        float _1642 = _1583 * 0.5;
        float _1643 = dot(vec3(_1640, _1641, _1642), vec3(_1640, _1641, _1642));
        float _1648 = (_1643 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1643);
        float _1656 = (dot(vec3(_790, _791, _792), vec3(_1648 * _1640, _1648 * _1641, _1648 * _1642)) + 1.0) * 0.5;
        float _4207 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1665 = sqrt(((_1641 * _1641) + (_1640 * _1640)) + (_1642 * _1642)) / (_1596 + 9.9999997473787516355514526367188e-06);
        float _4218 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1666 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _1667 = _1666 * 2.0;
        float _1671 = (1.0 - _1666) / (_1666 + 1.0);
        float _4229 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
        float _1672 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _1681 = ((((1.0 - _1672) * (_1667 + 2.0)) * exp2(log2(isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) * (_1667 + 1.0))) + _1672) * _1596;
        float _1682 = _1564 * 0.5;
        float _1683 = _1574 * 0.5;
        float _1684 = _1584 * 0.5;
        float _1685 = dot(vec3(_1682, _1683, _1684), vec3(_1682, _1683, _1684));
        float _1690 = (_1685 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1685);
        float _1698 = (dot(vec3(_790, _791, _792), vec3(_1690 * _1682, _1690 * _1683, _1690 * _1684)) + 1.0) * 0.5;
        float _4240 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
        float _1707 = sqrt(((_1683 * _1683) + (_1682 * _1682)) + (_1684 * _1684)) / (_1597 + 9.9999997473787516355514526367188e-06);
        float _4251 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
        float _1708 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _1709 = _1708 * 2.0;
        float _1713 = (1.0 - _1708) / (_1708 + 1.0);
        float _4262 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
        float _1714 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _1723 = ((((1.0 - _1714) * (_1709 + 2.0)) * exp2(log2(isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0))) * (_1709 + 1.0))) + _1714) * _1597;
        _1731 = _1564;
        _1732 = _1563;
        _1733 = _1562;
        _1734 = _1574;
        _1735 = _1573;
        _1736 = _1572;
        _1737 = _1584;
        _1738 = _1583;
        _1739 = _1582;
        _1740 = _1597;
        _1741 = _1596;
        _1742 = _1595;
        _1743 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0)));
        _1744 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0)));
        _1745 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0)));
    }
    else
    {
        _1731 = _1419;
        _1732 = _1419;
        _1733 = _1419;
        _1734 = _1419;
        _1735 = _1419;
        _1736 = _1419;
        _1737 = _1419;
        _1738 = _1419;
        _1739 = _1419;
        _1740 = _1419;
        _1741 = _1419;
        _1742 = _1419;
        _1743 = 0.0;
        _1744 = 0.0;
        _1745 = 0.0;
    }
    float _1755 = (cbModelParam._m0[1u].x * (_1743 - _1431)) + _1431;
    float _1756 = (cbModelParam._m0[1u].x * (_1744 - _1432)) + _1432;
    float _1757 = (cbModelParam._m0[1u].x * (_1745 - _1433)) + _1433;
    float _1778 = fma(_1757, cbSceneParam._m0[89u].z, fma(_1756, cbSceneParam._m0[89u].y, _1755 * cbSceneParam._m0[89u].x));
    float _1781 = fma(_1757, cbSceneParam._m0[90u].z, fma(_1756, cbSceneParam._m0[90u].y, _1755 * cbSceneParam._m0[90u].x));
    float _1784 = fma(_1757, cbSceneParam._m0[91u].z, fma(_1756, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1755));
    float _1799 = _1025 * 0.5;
    float _1800 = _1026 * 0.5;
    float _1801 = _1027 * 0.5;
    float _1802 = dot(vec4(_1799, _1800, _1801, 1.0), vec4(_1733, _1736, _1739, _1742));
    float _1805 = dot(vec4(_1799, _1800, _1801, 1.0), vec4(_1732, _1735, _1738, _1741));
    float _1808 = dot(vec4(_1799, _1800, _1801, 1.0), vec4(_1731, _1734, _1737, _1740));
    float _1842;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1815 = dot(vec4(_1799, _1800, _1801, 1.0), vec4(_1418, _1422, _1425, _1428));
        float _1819 = dot(vec4(_1799, _1800, _1801, 1.0), vec4(_1420, _1423, _1426, _1429));
        float _1823 = dot(vec4(_1799, _1800, _1801, 1.0), vec4(_1421, _1424, _1427, _1430));
        float _1830 = dot(vec4(cbModelParam._m0[39u]), vec4(_1799, _1800, _1801, 1.0));
        _1842 = dot(vec3(isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0)), isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0)), isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1830) ? 0.0 : (isnan(0.0) ? _1830 : max(0.0, _1830))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1842 = 1.0;
    }
    float _1853;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1844 = dot(vec4(cbModelParam._m0[40u]), vec4(_1799, _1800, _1801, 1.0));
        _1853 = dot(vec3(isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0)), isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0)), isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1844) ? 0.0 : (isnan(0.0) ? _1844 : max(0.0, _1844))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1853 = 1.0;
    }
    float _1857 = (_1853 * cbModelParam._m0[1u].x) + (_1842 * (1.0 - cbModelParam._m0[1u].x));
    float _1867 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _932);
    float _1868 = isnan(_1867) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1867 : min(cbModelParam._m0[25u].z, _1867));
    float _1948;
    float _1950;
    float _1952;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1915 = fma(_1089, cbModelParam._m0[13u].z, fma(_1085, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1081)) + cbModelParam._m0[13u].w;
        float _1919 = fma(_1089, cbModelParam._m0[14u].z, fma(_1085, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1081)) + cbModelParam._m0[14u].w;
        float _1923 = fma(_1089, cbModelParam._m0[15u].z, fma(_1085, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1081)) + cbModelParam._m0[15u].w;
        float _1926 = fma(_1027, cbModelParam._m0[13u].z, fma(_1026, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1025));
        float _1929 = fma(_1027, cbModelParam._m0[14u].z, fma(_1026, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1025));
        float _1932 = fma(_1027, cbModelParam._m0[15u].z, fma(_1026, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1025));
        float _1960;
        if (_1926 > 0.0)
        {
            _1960 = abs((1.0 - _1915) / _1926);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1926 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1915 + 1.0) / _1926);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1960 = frontier_phi_19_17_ladder;
        }
        float _2183;
        if (_1929 > 0.0)
        {
            _2183 = abs((1.0 - _1919) / _1929);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1929 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1919 + 1.0) / _1929);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2183 = frontier_phi_28_24_ladder;
        }
        float _2440;
        if (_1932 > 0.0)
        {
            _2440 = abs((1.0 - _1923) / _1932);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1932 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1923 + 1.0) / _1932);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2440 = frontier_phi_40_35_ladder;
        }
        float _2442 = isnan(_2183) ? _1960 : (isnan(_1960) ? _2183 : min(_1960, _2183));
        float _2443 = isnan(_2440) ? _2442 : (isnan(_2442) ? _2440 : min(_2442, _2440));
        float _2447 = (_2443 * _1926) + _1915;
        float _2448 = (_2443 * _1929) + _1919;
        float _2449 = (_2443 * _1932) + _1923;
        float _2450 = _2443 * 9.9999997473787516355514526367188e-05;
        float _2452 = (-1.0) - _2450;
        float _2454 = _2450 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2449 > _2454) || ((_2449 < _2452) || ((_2448 > _2454) || ((_2448 < _2452) || ((_2447 < _2452) || (_2447 > _2454))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2577 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2449, cbModelParam._m0[9u].z, fma(_2448, cbModelParam._m0[9u].y, _2447 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2449, cbModelParam._m0[10u].z, fma(_2448, cbModelParam._m0[10u].y, _2447 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2449, cbModelParam._m0[11u].z, fma(_2448, cbModelParam._m0[11u].y, _2447 * cbModelParam._m0[11u].x))), _1868);
            frontier_phi_18_40_ladder = _2577.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2577.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2577.x * cbModelParam._m0[1u].y;
        }
        _1948 = frontier_phi_18_40_ladder_2;
        _1950 = frontier_phi_18_40_ladder_1;
        _1952 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1936 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1025, _1026, _1027), _1868);
        _1948 = _1936.x * cbModelParam._m0[1u].y;
        _1950 = _1936.y * cbModelParam._m0[1u].y;
        _1952 = _1936.z * cbModelParam._m0[1u].y;
    }
    float _1956 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _932);
    float _1957 = isnan(_1956) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1956 : min(cbModelParam._m0[25u].w, _1956));
    float _2046;
    float _2048;
    float _2050;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2010 = fma(_1089, cbModelParam._m0[21u].z, fma(_1085, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1081)) + cbModelParam._m0[21u].w;
        float _2014 = fma(_1089, cbModelParam._m0[22u].z, fma(_1085, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1081)) + cbModelParam._m0[22u].w;
        float _2018 = fma(_1089, cbModelParam._m0[23u].z, fma(_1085, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1081)) + cbModelParam._m0[23u].w;
        float _2021 = fma(_1027, cbModelParam._m0[21u].z, fma(_1026, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1025));
        float _2024 = fma(_1027, cbModelParam._m0[22u].z, fma(_1026, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1025));
        float _2027 = fma(_1027, cbModelParam._m0[23u].z, fma(_1026, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1025));
        float _2188;
        if (_2021 > 0.0)
        {
            _2188 = abs((1.0 - _2010) / _2021);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2021 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2010 + 1.0) / _2021);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2188 = frontier_phi_30_26_ladder;
        }
        float _2467;
        if (_2024 > 0.0)
        {
            _2467 = abs((1.0 - _2014) / _2024);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2024 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2014 + 1.0) / _2024);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2467 = frontier_phi_42_37_ladder;
        }
        float _2680;
        if (_2027 > 0.0)
        {
            _2680 = abs((1.0 - _2018) / _2027);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_2027 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_2018 + 1.0) / _2027);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2680 = frontier_phi_51_48_ladder;
        }
        float _2682 = isnan(_2467) ? _2188 : (isnan(_2188) ? _2467 : min(_2188, _2467));
        float _2683 = isnan(_2680) ? _2682 : (isnan(_2682) ? _2680 : min(_2682, _2680));
        float _2687 = (_2683 * _2021) + _2010;
        float _2688 = (_2683 * _2024) + _2014;
        float _2689 = (_2683 * _2027) + _2018;
        float _2690 = _2683 * 9.9999997473787516355514526367188e-05;
        float _2691 = (-1.0) - _2690;
        float _2693 = _2690 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2689 > _2693) || ((_2689 < _2691) || ((_2688 > _2693) || ((_2688 < _2691) || ((_2687 < _2691) || (_2687 > _2693))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2922 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2689, cbModelParam._m0[17u].z, fma(_2688, cbModelParam._m0[17u].y, _2687 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2689, cbModelParam._m0[18u].z, fma(_2688, cbModelParam._m0[18u].y, _2687 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2689, cbModelParam._m0[19u].z, fma(_2688, cbModelParam._m0[19u].y, _2687 * cbModelParam._m0[19u].x))), _1957);
            frontier_phi_27_51_ladder = _2922.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2922.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2922.x * cbModelParam._m0[1u].z;
        }
        _2046 = frontier_phi_27_51_ladder_2;
        _2048 = frontier_phi_27_51_ladder_1;
        _2050 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _2030 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1025, _1026, _1027), _1957);
        _2046 = _2030.x * cbModelParam._m0[1u].z;
        _2048 = _2030.y * cbModelParam._m0[1u].z;
        _2050 = _2030.z * cbModelParam._m0[1u].z;
    }
    float _2063 = (((_1052 * _1002) + _1053) * _1017) * ((cbModelParam._m0[1u].w * (_2046 - _1948)) + _1948);
    float _2065 = (((_1052 * _1004) + _1053) * _1017) * ((cbModelParam._m0[1u].w * (_2048 - _1950)) + _1950);
    float _2067 = (((_1052 * _1005) + _1053) * _1017) * ((cbModelParam._m0[1u].w * (_2050 - _1952)) + _1952);
    float _2070 = fma(_2067, cbSceneParam._m0[89u].z, fma(_2065, cbSceneParam._m0[89u].y, _2063 * cbSceneParam._m0[89u].x));
    float _2073 = fma(_2067, cbSceneParam._m0[90u].z, fma(_2065, cbSceneParam._m0[90u].y, _2063 * cbSceneParam._m0[90u].x));
    float _2076 = fma(_2067, cbSceneParam._m0[91u].z, fma(_2065, cbSceneParam._m0[91u].y, _2063 * cbSceneParam._m0[91u].x));
    vec4 _2084 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_890, _891));
    float _2086 = _2084.w;
    float _2098 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2086);
    float _2099 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2086);
    float _2100 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2086);
    uvec4 _2104 = floatBitsToUint(cbInstanceData._m0[_945 + 5u]);
    uint _2106 = _2104.x * 14u;
    uint _2107 = _2106 + 13u;
    float _2114 = _1017 + (-1.0);
    float _2119 = (cbLight._m0[_2107].x * _2114) + 1.0;
    float _2120 = (cbLight._m0[_2107].y * _2114) + 1.0;
    float _2121 = (cbLight._m0[_2107].z * _2114) + 1.0;
    float _2122 = (cbLight._m0[_2107].w * _2114) + 1.0;
    uint _2123 = _2106 + 5u;
    float _2129 = isnan(1.0) ? _2120 : (isnan(_2120) ? 1.0 : min(_2120, 1.0));
    uint _2133 = _2106 + 4u;
    float _2142 = isnan(1.0) ? _2119 : (isnan(_2119) ? 1.0 : min(_2119, 1.0));
    uint _2146 = _2106 | 1u;
    float _2157 = dot(vec3(cbLight._m0[_2106].xyz), vec3(_790, _791, _792));
    float _2160 = dot(vec3(cbLight._m0[_2146].xyz), vec3(_790, _791, _792));
    float _4398 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
    float _4409 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
    float _2165 = (isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0))) * 0.3183098733425140380859375;
    float _2167 = (isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0))) * 0.3183098733425140380859375;
    float _2174 = ((cbLight._m0[_2123].x * _2129) * _2167) + (((cbLight._m0[_2133].x * _2098) * _2142) * _2165);
    float _2175 = ((_2129 * cbLight._m0[_2123].y) * _2167) + (((cbLight._m0[_2133].y * _2099) * _2142) * _2165);
    float _2176 = ((_2129 * cbLight._m0[_2123].z) * _2167) + (((cbLight._m0[_2133].z * _2100) * _2142) * _2165);
    uvec4 _2180 = floatBitsToUint(cbLight._m0[_2106 + 12u]);
    bool _2182 = _2180.x == 0u;
    float _2193;
    float _2195;
    float _2197;
    if (_2182)
    {
        _2193 = _2174;
        _2195 = _2175;
        _2197 = _2176;
    }
    else
    {
        uint _2201 = _2106 + 6u;
        float _2217 = (dot(vec3(cbLight._m0[_2106 + 2u].xyz), vec3(_790, _791, _792)) * 0.5) + 0.5;
        float _2218 = _2217 * _2217;
        float _4420 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
        float _2219 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
        float _2220 = isnan(1.0) ? _2121 : (isnan(_2121) ? 1.0 : min(_2121, 1.0));
        _2193 = (((cbLight._m0[_2201].x * 0.3183098733425140380859375) * _2219) * _2220) + _2174;
        _2195 = (((cbLight._m0[_2201].y * 0.3183098733425140380859375) * _2219) * _2220) + _2175;
        _2197 = (((cbLight._m0[_2201].z * 0.3183098733425140380859375) * _2219) * _2220) + _2176;
    }
    bool _2200 = _2180.y == 0u;
    float _2238;
    float _2240;
    float _2242;
    if (_2200)
    {
        _2238 = _2193;
        _2240 = _2195;
        _2242 = _2197;
    }
    else
    {
        uint _2411 = _2106 + 7u;
        float _2427 = (dot(vec3(cbLight._m0[_2106 + 3u].xyz), vec3(_790, _791, _792)) * 0.5) + 0.5;
        float _2428 = _2427 * _2427;
        float _4436 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
        float _2429 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
        float _2430 = isnan(1.0) ? _2122 : (isnan(_2122) ? 1.0 : min(_2122, 1.0));
        _2238 = (((cbLight._m0[_2411].x * 0.3183098733425140380859375) * _2429) * _2430) + _2193;
        _2240 = (((cbLight._m0[_2411].y * 0.3183098733425140380859375) * _2429) * _2430) + _2195;
        _2242 = (((cbLight._m0[_2411].z * 0.3183098733425140380859375) * _2429) * _2430) + _2197;
    }
    uint _2245 = _2106 + 8u;
    float _2258 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2106].w)) * _932) * 0.949999988079071044921875);
    float _2259 = _2258 * _2258;
    float _2260 = cbLight._m0[_2106].x + _870;
    float _2261 = cbLight._m0[_2106].y + _871;
    float _2262 = cbLight._m0[_2106].z + _872;
    float _2266 = inversesqrt(dot(vec3(_2260, _2261, _2262), vec3(_2260, _2261, _2262)));
    float _2267 = _2266 * _2260;
    float _2268 = _2266 * _2261;
    float _2269 = _2266 * _2262;
    float _2270 = dot(vec3(_790, _791, _792), vec3(cbLight._m0[_2106].xyz));
    float _4452 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
    float _2273 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
    float _4463 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
    float _2274 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
    float _2275 = dot(vec3(_790, _791, _792), vec3(_2267, _2268, _2269));
    float _4474 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
    float _2278 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
    float _2279 = dot(vec3(cbLight._m0[_2106].xyz), vec3(_2267, _2268, _2269));
    float _4485 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
    float _2283 = _2259 * _2259;
    float _2287 = ((_2278 * _2278) * (_2283 + (-1.0))) + 1.0;
    float _2295 = exp2(log2(1.0 - (isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0)))) * 5.0);
    float _2296 = 0.959999978542327880859375 - _999;
    float _2298 = 0.959999978542327880859375 - _1000;
    float _2299 = 0.959999978542327880859375 - _1001;
    float _2306 = 1.0 - _2259;
    float _2317 = (0.5 / (((_2274 * ((_2273 * _2306) + _2259)) + 9.9999999392252902907785028219223e-09) + (((_2274 * _2306) + _2259) * _2273))) * _2273;
    float _4496 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
    float _2319 = (isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0))) * (_2283 / ((_2287 * _2287) * 3.141590118408203125));
    uint _2333 = _2106 + 9u;
    float _2344 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2146].w)) * _932) * 0.949999988079071044921875);
    float _2345 = _2344 * _2344;
    float _2346 = cbLight._m0[_2146].x + _870;
    float _2347 = cbLight._m0[_2146].y + _871;
    float _2348 = cbLight._m0[_2146].z + _872;
    float _2352 = inversesqrt(dot(vec3(_2346, _2347, _2348), vec3(_2346, _2347, _2348)));
    float _2353 = _2352 * _2346;
    float _2354 = _2352 * _2347;
    float _2355 = _2352 * _2348;
    float _2356 = dot(vec3(_790, _791, _792), vec3(cbLight._m0[_2146].xyz));
    float _4507 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
    float _2359 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
    float _2360 = dot(vec3(_790, _791, _792), vec3(_2353, _2354, _2355));
    float _4518 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
    float _2363 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
    float _2364 = dot(vec3(cbLight._m0[_2146].xyz), vec3(_2353, _2354, _2355));
    float _4529 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
    float _2368 = _2345 * _2345;
    float _2372 = ((_2363 * _2363) * (_2368 + (-1.0))) + 1.0;
    float _2379 = exp2(log2(1.0 - (isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0)))) * 5.0);
    float _2386 = 1.0 - _2345;
    float _2396 = (0.5 / (((_2274 * ((_2359 * _2386) + _2345)) + 9.9999999392252902907785028219223e-09) + (((_2274 * _2386) + _2345) * _2359))) * _2359;
    float _4540 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
    float _2398 = (isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0))) * (_2368 / ((_2372 * _2372) * 3.141590118408203125));
    float _2408 = (((((_2379 * _2296) + _1002) * cbLight._m0[_2333].x) * _2398) * _2129) + ((((cbLight._m0[_2245].x * _2098) * ((_2295 * _2296) + _1002)) * _2319) * _2142);
    float _2409 = (((((_2379 * _2298) + _1004) * cbLight._m0[_2333].y) * _2398) * _2129) + ((((cbLight._m0[_2245].y * _2099) * ((_2295 * _2298) + _1004)) * _2319) * _2142);
    float _2410 = (((((_2379 * _2299) + _1005) * cbLight._m0[_2333].z) * _2398) * _2129) + ((((cbLight._m0[_2245].z * _2100) * ((_2295 * _2299) + _1005)) * _2319) * _2142);
    float _2472;
    float _2474;
    float _2476;
    if (_2182)
    {
        _2472 = _2408;
        _2474 = _2409;
        _2476 = _2410;
    }
    else
    {
        uint _2478 = _2106 + 2u;
        uint _2482 = _2106 + 10u;
        float _2496 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2478].w)) * _932) * 0.949999988079071044921875);
        float _2497 = _2496 * _2496;
        float _2498 = cbLight._m0[_2478].x + _870;
        float _2499 = cbLight._m0[_2478].y + _871;
        float _2500 = cbLight._m0[_2478].z + _872;
        float _2504 = inversesqrt(dot(vec3(_2498, _2499, _2500), vec3(_2498, _2499, _2500)));
        float _2505 = _2504 * _2498;
        float _2506 = _2504 * _2499;
        float _2507 = _2504 * _2500;
        float _2508 = dot(vec3(_790, _791, _792), vec3(cbLight._m0[_2478].xyz));
        float _4551 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
        float _2511 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
        float _2512 = dot(vec3(_790, _791, _792), vec3(_2505, _2506, _2507));
        float _4562 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
        float _2515 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
        float _2516 = dot(vec3(cbLight._m0[_2478].xyz), vec3(_2505, _2506, _2507));
        float _4573 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
        float _2520 = _2497 * _2497;
        float _2524 = ((_2515 * _2515) * (_2520 + (-1.0))) + 1.0;
        float _2531 = exp2(log2(1.0 - (isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0)))) * 5.0);
        float _2538 = 1.0 - _2497;
        float _2548 = (0.5 / (((_2274 * ((_2511 * _2538) + _2497)) + 9.9999999392252902907785028219223e-09) + (((_2274 * _2538) + _2497) * _2511))) * _2511;
        float _4584 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
        float _2550 = (isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0))) * (_2520 / ((_2524 * _2524) * 3.141590118408203125));
        float _2551 = isnan(1.0) ? _2121 : (isnan(_2121) ? 1.0 : min(_2121, 1.0));
        _2472 = (((((_2531 * _2296) + _1002) * cbLight._m0[_2482].x) * _2550) * _2551) + _2408;
        _2474 = (((((_2531 * _2298) + _1004) * cbLight._m0[_2482].y) * _2550) * _2551) + _2409;
        _2476 = (((((_2531 * _2299) + _1005) * cbLight._m0[_2482].z) * _2550) * _2551) + _2410;
    }
    float _2586;
    float _2588;
    float _2590;
    if (_2200)
    {
        _2586 = _2472;
        _2588 = _2474;
        _2590 = _2476;
    }
    else
    {
        uint _2597 = _2106 + 3u;
        uint _2601 = _2106 + 11u;
        float _2615 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2597].w)) * _932) * 0.949999988079071044921875);
        float _2616 = _2615 * _2615;
        float _2617 = cbLight._m0[_2597].x + _870;
        float _2618 = cbLight._m0[_2597].y + _871;
        float _2619 = cbLight._m0[_2597].z + _872;
        float _2623 = inversesqrt(dot(vec3(_2617, _2618, _2619), vec3(_2617, _2618, _2619)));
        float _2624 = _2623 * _2617;
        float _2625 = _2623 * _2618;
        float _2626 = _2623 * _2619;
        float _2627 = dot(vec3(_790, _791, _792), vec3(cbLight._m0[_2597].xyz));
        float _4600 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
        float _2630 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
        float _2631 = dot(vec3(_790, _791, _792), vec3(_2624, _2625, _2626));
        float _4611 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
        float _2634 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
        float _2635 = dot(vec3(cbLight._m0[_2597].xyz), vec3(_2624, _2625, _2626));
        float _4622 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
        float _2639 = _2616 * _2616;
        float _2643 = ((_2634 * _2634) * (_2639 + (-1.0))) + 1.0;
        float _2650 = exp2(log2(1.0 - (isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0)))) * 5.0);
        float _2657 = 1.0 - _2616;
        float _2667 = (0.5 / (((_2274 * ((_2630 * _2657) + _2616)) + 9.9999999392252902907785028219223e-09) + (((_2274 * _2657) + _2616) * _2630))) * _2630;
        float _4633 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
        float _2669 = (isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0))) * (_2639 / ((_2643 * _2643) * 3.141590118408203125));
        float _2670 = isnan(1.0) ? _2122 : (isnan(_2122) ? 1.0 : min(_2122, 1.0));
        _2586 = (((((_2650 * _2296) + _1002) * cbLight._m0[_2601].x) * _2669) * _2670) + _2472;
        _2588 = (((((_2650 * _2298) + _1004) * cbLight._m0[_2601].y) * _2669) * _2670) + _2474;
        _2590 = (((((_2650 * _2299) + _1005) * cbLight._m0[_2601].z) * _2669) * _2670) + _2476;
    }
    float _2804;
    float _2806;
    float _2808;
    float _2810;
    float _2812;
    float _2814;
    if (_2104.y == 0u)
    {
        float _2745 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2746 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2745;
        float _2747 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2745;
        float _2748 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2745;
        uvec4 _2760 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2761 = _2760.x;
        uint _2772 = uint((float(_2760.y) * floor(float(uint(cbSceneParam._m0[85u].y * _891) / _2761))) + floor(float(uint(cbSceneParam._m0[85u].x * _890) / _2761)));
        float _2782 = (log2(_2748 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2783 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
        uint _2786 = uint(isnan(14.0) ? _2783 : (isnan(_2783) ? 14.0 : min(_2783, 14.0)));
        uvec4 _2791 = texelFetch(g_lightClusterGridBuffer, int(((_2786 << 2u) + (_2772 << 6u)) >> 2u));
        uint _2792 = _2791.x;
        uint _2793 = _2760.z;
        float _2927;
        float _2929;
        float _2931;
        float _2933;
        float _2935;
        float _2937;
        if (((((1u << ((_2793 >> 4u) & 15u)) + 4294967295u) & _2792) == 0u) || ((_2793 & 240u) == 0u))
        {
            _2927 = 0.0;
            _2929 = 0.0;
            _2931 = 0.0;
            _2933 = 0.0;
            _2935 = 0.0;
            _2937 = 0.0;
        }
        else
        {
            float _2928;
            float _2930;
            float _2932;
            float _2934;
            float _2936;
            float _2938;
            float _3088 = 0.0;
            float _3089 = 0.0;
            float _3090 = 0.0;
            float _3091 = 0.0;
            float _3092 = 0.0;
            float _3093 = 0.0;
            uint _3094 = 0u;
            uint _3103;
            bool _3104;
            for (;;)
            {
                _3103 = texelFetch(g_lightClassification, int((((_2786 << 5u) + (_2772 << 9u)) + (_3094 << 2u)) >> 2u)).x;
                _3104 = _3103 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3104)
                {
                    frontier_phi_68_pred = _3090;
                    frontier_phi_68_pred_1 = _3093;
                    frontier_phi_68_pred_2 = _3092;
                    frontier_phi_68_pred_3 = _3091;
                    frontier_phi_68_pred_4 = _3089;
                    frontier_phi_68_pred_5 = _3088;
                }
                else
                {
                    float _3233;
                    float _3234;
                    float _3235;
                    float _3236;
                    float _3237;
                    float _3238;
                    uint _3239;
                    _3233 = _3088;
                    _3234 = _3089;
                    _3235 = _3090;
                    _3236 = _3091;
                    _3237 = _3092;
                    _3238 = _3093;
                    _3239 = _3103;
                    float _3160;
                    float _3161;
                    float _3162;
                    float _3163;
                    float _3164;
                    float _3165;
                    for (;;)
                    {
                        uint _3243 = uint(findLSB(_3239)) + (_3094 << 5u);
                        uint _3240 = (_3239 + 4294967295u) & _3239;
                        uint _3245 = _3243 * 48u;
                        vec4 _3259 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3245)).x, texelFetch(g_PointLightRenderingBuffer, int(_3245 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3245 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3245 + 3u)).x));
                        uint _3265 = (_3243 * 48u) + 4u;
                        vec4 _3278 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3265)).x, texelFetch(g_PointLightRenderingBuffer, int(_3265 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3265 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3265 + 3u)).x));
                        uint _3284 = (_3243 * 48u) + 8u;
                        vec3 _3295 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3284)).x, texelFetch(g_PointLightRenderingBuffer, int(_3284 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3284 + 2u)).x));
                        float _3299 = _3259.x - _2746;
                        float _3300 = _3259.y - _2747;
                        float _3301 = _3259.z - _2748;
                        float _3302 = dot(vec3(_3299, _3300, _3301), vec3(_3299, _3300, _3301));
                        float _3305 = inversesqrt(_3302);
                        float _3306 = _3305 * _3299;
                        float _3307 = _3305 * _3300;
                        float _3308 = _3305 * _3301;
                        float _3309 = dot(vec3(_913, _916, _919), vec3(_3306, _3307, _3308));
                        float _3314 = 1.0 - (_3302 * _3259.w);
                        float _4659 = isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0));
                        float _3315 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
                        float _3316 = sqrt(_3302) * _3278.w;
                        float _3319 = 1.39999997615814208984375 / (_3316 + 1.39999997615814208984375);
                        float _3320 = _3319 * _3319;
                        float _3323 = ((1.0 - _3320) * _3309) + _3320;
                        float _3326 = _3316 * _3316;
                        float _3330 = ((isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0))) * _3315) / ((_3326 * 0.699999988079071044921875) + 1.0);
                        float _3334 = (-0.0) - _2746;
                        float _3335 = (-0.0) - _2747;
                        float _3336 = (-0.0) - _2748;
                        float _3340 = inversesqrt(dot(vec3(_3334, _3335, _3336), vec3(_3334, _3335, _3336)));
                        float _3341 = _3340 * _3334;
                        float _3342 = _3340 * _3335;
                        float _3343 = _3340 * _3336;
                        float _3350 = exp2(log2(1.0 / ((_3326 * 3.5) + 5.0)) * 0.25);
                        float _3351 = 1.0 - _1033;
                        float _3358 = sqrt(1.0 - ((1.0 - (_3351 * _3351)) * (1.0 - (_3350 * _3350))));
                        float _3359 = _3358 * _3358;
                        float _3360 = _3359 * _3359;
                        float _3361 = _3341 + _3306;
                        float _3362 = _3342 + _3307;
                        float _3363 = _3343 + _3308;
                        float _3367 = inversesqrt(dot(vec3(_3361, _3362, _3363), vec3(_3361, _3362, _3363)));
                        float _3371 = dot(vec3(_913, _916, _919), vec3(_3341, _3342, _3343));
                        float _4675 = isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0));
                        float _3374 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
                        float _3375 = dot(vec3(_913, _916, _919), vec3(_3367 * _3361, _3367 * _3362, _3367 * _3363));
                        float _4686 = isnan(0.0) ? _3375 : (isnan(_3375) ? 0.0 : max(_3375, 0.0));
                        float _3378 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
                        float _3382 = ((_3378 * _3378) * (_3360 + (-1.0))) + 1.0;
                        float _3383 = _3319 * _3359;
                        float _3384 = _3383 * _3383;
                        float _3387 = ((1.0 - _3384) * _3309) + _3384;
                        float _4697 = isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : max(_3387, 0.0));
                        float _3388 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
                        float _3389 = 1.0 - _3359;
                        float _3399 = (0.5 / (((_3388 * ((_3374 * _3389) + _3359)) + 9.9999999392252902907785028219223e-09) + (((_3388 * _3389) + _3359) * _3374))) * _3388;
                        float _4708 = isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : max(_3399, 0.0));
                        float _3410 = (((_3360 * 3.1415927410125732421875) * (isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0)))) / ((_3382 * _3382) * ((_3326 * 2.1991131305694580078125) + 3.141590118408203125))) * _3315;
                        _3163 = (_3330 * _3278.x) + _3236;
                        _3164 = (_3330 * _3278.y) + _3237;
                        _3165 = (_3330 * _3278.z) + _3238;
                        _3160 = (_3410 * _3295.x) + _3233;
                        _3161 = (_3410 * _3295.y) + _3234;
                        _3162 = (_3410 * _3295.z) + _3235;
                        if (_3240 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3233 = _3160;
                            _3234 = _3161;
                            _3235 = _3162;
                            _3236 = _3163;
                            _3237 = _3164;
                            _3238 = _3165;
                            _3239 = _3240;
                        }
                    }
                    frontier_phi_68_pred = _3162;
                    frontier_phi_68_pred_1 = _3165;
                    frontier_phi_68_pred_2 = _3164;
                    frontier_phi_68_pred_3 = _3163;
                    frontier_phi_68_pred_4 = _3161;
                    frontier_phi_68_pred_5 = _3160;
                }
                _2932 = frontier_phi_68_pred;
                _2938 = frontier_phi_68_pred_1;
                _2936 = frontier_phi_68_pred_2;
                _2934 = frontier_phi_68_pred_3;
                _2930 = frontier_phi_68_pred_4;
                _2928 = frontier_phi_68_pred_5;
                uint _3095 = _3094 + 1u;
                if (_3095 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3088 = _2928;
                    _3089 = _2930;
                    _3090 = _2932;
                    _3091 = _2934;
                    _3092 = _2936;
                    _3093 = _2938;
                    _3094 = _3095;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2927 = _2928;
            _2929 = _2930;
            _2931 = _2932;
            _2933 = _2934;
            _2935 = _2936;
            _2937 = _2938;
        }
        uvec4 _2941 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2942 = _2941.z;
        uint _2944 = (_2942 >> 8u) & 15u;
        float _3056;
        float _3058;
        float _3060;
        float _3062;
        float _3064;
        float _3066;
        if (((4294967295u << _2944) & _2792) == 0u)
        {
            _3056 = _2927;
            _3058 = _2929;
            _3060 = _2931;
            _3062 = _2933;
            _3064 = _2935;
            _3066 = _2937;
        }
        else
        {
            float _3081 = inversesqrt(dot(vec3(_2746, _2747, _2748), vec3(_2746, _2747, _2748)));
            float _3082 = _3081 * _2746;
            float _3083 = _3081 * _2747;
            float _3084 = _3081 * _2748;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2944 < ((_2942 >> 12u) & 15u))
            {
                float _3057;
                float _3059;
                float _3061;
                float _3063;
                float _3065;
                float _3067;
                float _3216 = _2927;
                float _3217 = _2929;
                float _3218 = _2931;
                float _3219 = _2933;
                float _3220 = _2935;
                float _3221 = _2937;
                uint _3222 = _2944;
                uint _3231;
                bool _3232;
                for (;;)
                {
                    _3231 = texelFetch(g_lightClassification, int((((_2786 << 5u) + (_2772 << 9u)) + (_3222 << 2u)) >> 2u)).x;
                    _3232 = _3231 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3232)
                    {
                        frontier_phi_79_pred = _3221;
                        frontier_phi_79_pred_1 = _3220;
                        frontier_phi_79_pred_2 = _3219;
                        frontier_phi_79_pred_3 = _3218;
                        frontier_phi_79_pred_4 = _3217;
                        frontier_phi_79_pred_5 = _3216;
                    }
                    else
                    {
                        float _3424;
                        float _3425;
                        float _3426;
                        float _3427;
                        float _3428;
                        float _3429;
                        float _3717;
                        float _3718;
                        float _3719;
                        float _3720;
                        float _3721;
                        float _3722;
                        float _3437 = _3216;
                        float _3438 = _3217;
                        float _3439 = _3218;
                        float _3440 = _3219;
                        float _3441 = _3220;
                        float _3442 = _3221;
                        uint _3443 = _3231;
                        uint _3444;
                        vec4 _3469;
                        float _3470;
                        vec4 _3485;
                        vec3 _3497;
                        vec4 _3512;
                        vec4 _3527;
                        float _3573;
                        bool _3574;
                        for (;;)
                        {
                            uint _3454 = ((_3222 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3443));
                            _3444 = (_3443 + 4294967295u) & _3443;
                            uint _3456 = _3454 * 40u;
                            _3469 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3456)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 3u)).x));
                            _3470 = _3469.w;
                            uint _3472 = (_3454 * 40u) + 4u;
                            _3485 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3472)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 3u)).x));
                            uint _3487 = (_3454 * 40u) + 8u;
                            _3497 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3487)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 2u)).x));
                            uint _3499 = (_3454 * 40u) + 16u;
                            _3512 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3499)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 3u)).x));
                            uint _3514 = (_3454 * 40u) + 20u;
                            _3527 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3514)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 3u)).x));
                            uint _3529 = (_3454 * 40u) + 24u;
                            vec4 _3542 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3529)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 3u)).x));
                            uint _3548 = (_3454 * 40u) + 28u;
                            vec4 _3561 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3548)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 3u)).x));
                            _3573 = fma(_2748, _3561.z, fma(_2747, _3561.y, _3561.x * _2746)) + _3561.w;
                            _3574 = !((fma(_2748, _3542.z, fma(_2747, _3542.y, _3542.x * _2746)) + _3542.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3574)
                            {
                                float _3601 = _3469.x - _2746;
                                float _3602 = _3469.y - _2747;
                                float _3603 = _3469.z - _2748;
                                float _3604 = dot(vec3(_3601, _3602, _3603), vec3(_3601, _3602, _3603));
                                float _3607 = inversesqrt(_3604);
                                float _3608 = _3607 * _3601;
                                float _3609 = _3607 * _3602;
                                float _3610 = _3607 * _3603;
                                float _3614 = 1.0 - (_3604 / (_3470 * _3470));
                                float _4719 = isnan(0.0) ? _3614 : (isnan(_3614) ? 0.0 : max(_3614, 0.0));
                                float _3615 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
                                float _3619 = sqrt(_3604) * _3485.w;
                                float _3621 = 1.39999997615814208984375 / (_3619 + 1.39999997615814208984375);
                                float _3622 = _3621 * _3621;
                                float _3625 = ((1.0 - _3622) * dot(vec3(_3608, _3609, _3610), vec3(_913, _916, _919))) + _3622;
                                float _3628 = _3619 * _3619;
                                float _3632 = (fma(_2748, _3512.z, fma(_2747, _3512.y, _3512.x * _2746)) + _3512.w) / _3573;
                                float _3633 = (fma(_2748, _3527.z, fma(_2747, _3527.y, _3527.x * _2746)) + _3527.w) / _3573;
                                float _3637 = 1.0 - dot(vec2(_3632, _3633), vec2(_3632, _3633));
                                float _4735 = isnan(0.0) ? _3637 : (isnan(_3637) ? 0.0 : max(_3637, 0.0));
                                float _3638 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
                                float _3639 = _3638 * (((isnan(0.0) ? _3625 : (isnan(_3625) ? 0.0 : max(_3625, 0.0))) * _3615) / ((_3628 * 0.699999988079071044921875) + 1.0));
                                float _3651 = exp2(log2(1.0 / ((_3628 * 3.5) + 5.0)) * 0.25);
                                float _3652 = 1.0 - _1033;
                                float _3659 = sqrt(1.0 - ((1.0 - (_3652 * _3652)) * (1.0 - (_3651 * _3651))));
                                float _3660 = _3659 * _3659;
                                float _3661 = _3660 * _3660;
                                float _3662 = _3608 - _3082;
                                float _3663 = _3609 - _3083;
                                float _3664 = _3610 - _3084;
                                float _3668 = inversesqrt(dot(vec3(_3662, _3663, _3664), vec3(_3662, _3663, _3664)));
                                float _3672 = dot(vec3(_913, _916, _919), vec3((-0.0) - _3082, (-0.0) - _3083, (-0.0) - _3084));
                                float _4746 = isnan(0.0) ? _3672 : (isnan(_3672) ? 0.0 : max(_3672, 0.0));
                                float _3675 = isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0));
                                float _3676 = dot(vec3(_913, _916, _919), vec3(_3668 * _3662, _3668 * _3663, _3668 * _3664));
                                float _4757 = isnan(0.0) ? _3676 : (isnan(_3676) ? 0.0 : max(_3676, 0.0));
                                float _3679 = isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0));
                                float _3683 = ((_3679 * _3679) * (_3661 + (-1.0))) + 1.0;
                                float _3684 = _3621 * _3660;
                                float _3685 = _3684 * _3684;
                                float _3691 = ((1.0 - _3685) * dot(vec3(_913, _916, _919), vec3(_3608, _3609, _3610))) + _3685;
                                float _4768 = isnan(0.0) ? _3691 : (isnan(_3691) ? 0.0 : max(_3691, 0.0));
                                float _3692 = isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0));
                                float _3693 = 1.0 - _3660;
                                float _3703 = (0.5 / (((_3692 * ((_3675 * _3693) + _3660)) + 9.9999999392252902907785028219223e-09) + (((_3692 * _3693) + _3660) * _3675))) * _3692;
                                float _4779 = isnan(0.0) ? _3703 : (isnan(_3703) ? 0.0 : max(_3703, 0.0));
                                float _3713 = (_3638 * _3615) * (((_3661 * 3.1415927410125732421875) * (isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0)))) / ((_3683 * _3683) * ((_3628 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3639 * _3485.z;
                                frontier_phi_85_pred_1 = _3639 * _3485.y;
                                frontier_phi_85_pred_2 = _3639 * _3485.x;
                                frontier_phi_85_pred_3 = _3713 * _3497.z;
                                frontier_phi_85_pred_4 = _3713 * _3497.y;
                                frontier_phi_85_pred_5 = _3713 * _3497.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3722 = frontier_phi_85_pred;
                            _3721 = frontier_phi_85_pred_1;
                            _3720 = frontier_phi_85_pred_2;
                            _3719 = frontier_phi_85_pred_3;
                            _3718 = frontier_phi_85_pred_4;
                            _3717 = frontier_phi_85_pred_5;
                            _3427 = _3720 + _3440;
                            _3428 = _3721 + _3441;
                            _3429 = _3722 + _3442;
                            _3424 = _3717 + _3437;
                            _3425 = _3718 + _3438;
                            _3426 = _3719 + _3439;
                            if (_3444 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3437 = _3424;
                                _3438 = _3425;
                                _3439 = _3426;
                                _3440 = _3427;
                                _3441 = _3428;
                                _3442 = _3429;
                                _3443 = _3444;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3429;
                        frontier_phi_79_pred_1 = _3428;
                        frontier_phi_79_pred_2 = _3427;
                        frontier_phi_79_pred_3 = _3426;
                        frontier_phi_79_pred_4 = _3425;
                        frontier_phi_79_pred_5 = _3424;
                    }
                    _3067 = frontier_phi_79_pred;
                    _3065 = frontier_phi_79_pred_1;
                    _3063 = frontier_phi_79_pred_2;
                    _3061 = frontier_phi_79_pred_3;
                    _3059 = frontier_phi_79_pred_4;
                    _3057 = frontier_phi_79_pred_5;
                    uint _3223 = _3222 + 1u;
                    if (_3223 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3216 = _3057;
                        _3217 = _3059;
                        _3218 = _3061;
                        _3219 = _3063;
                        _3220 = _3065;
                        _3221 = _3067;
                        _3222 = _3223;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3063;
                frontier_phi_60_61_ladder_1 = _3067;
                frontier_phi_60_61_ladder_2 = _3065;
                frontier_phi_60_61_ladder_3 = _3061;
                frontier_phi_60_61_ladder_4 = _3059;
                frontier_phi_60_61_ladder_5 = _3057;
            }
            else
            {
                frontier_phi_60_61_ladder = _2933;
                frontier_phi_60_61_ladder_1 = _2937;
                frontier_phi_60_61_ladder_2 = _2935;
                frontier_phi_60_61_ladder_3 = _2931;
                frontier_phi_60_61_ladder_4 = _2929;
                frontier_phi_60_61_ladder_5 = _2927;
            }
            _3056 = frontier_phi_60_61_ladder_5;
            _3058 = frontier_phi_60_61_ladder_4;
            _3060 = frontier_phi_60_61_ladder_3;
            _3062 = frontier_phi_60_61_ladder;
            _3064 = frontier_phi_60_61_ladder_2;
            _3066 = frontier_phi_60_61_ladder_1;
        }
        float _3071 = isnan(1.0) ? _1017 : (isnan(_1017) ? 1.0 : min(_1017, 1.0));
        _2804 = (_3071 * _3062) + _2238;
        _2806 = (_3071 * _3064) + _2240;
        _2808 = (_3071 * _3066) + _2242;
        _2810 = ((_3056 * _1002) * _3071) + _2586;
        _2812 = ((_3058 * _1004) * _3071) + _2588;
        _2814 = ((_3060 * _1005) * _3071) + _2590;
    }
    else
    {
        _2804 = _2238;
        _2806 = _2240;
        _2808 = _2242;
        _2810 = _2586;
        _2812 = _2588;
        _2814 = _2590;
    }
    uint _2820 = _946 + uint(cbMatDynParam._m0[0u].w);
    float _2828 = ((cbMtdParam._m0[11u].x * cbMtdParam._m0[22u].z) * _734.x) * cbInstanceData._m0[_2820].x;
    float _2831 = ((cbMtdParam._m0[11u].y * cbMtdParam._m0[22u].z) * _734.y) * cbInstanceData._m0[_2820].y;
    float _2834 = ((cbMtdParam._m0[11u].z * cbMtdParam._m0[22u].z) * _734.z) * cbInstanceData._m0[_2820].z;
    float _4795 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
    float _4806 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
    float _4817 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
    float _2851 = (((isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0))) * (_2804 + ((isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0))) * _1017))) + ((_2810 + ((isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0))) * _1857)) * cbPerFrame._m0[3u].x)) + _2828;
    float _2853 = (_2831 + ((_2812 + ((isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0))) * _1857)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0))) * (_2806 + ((isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0))) * _1017)));
    float _2855 = (_2834 + ((_2814 + ((isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0))) * _1857)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0))) * (_2808 + ((isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0))) * _1017)));
    float _2856 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
    float _2857 = isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0));
    float _2858 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
    float _2864 = cbMtdParam._m0[2u].x * _2828;
    float _2865 = cbMtdParam._m0[2u].y * _2831;
    float _2866 = cbMtdParam._m0[2u].z * _2834;
    float _4843 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2868 = isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0));
    uint _2869 = _945 + 6u;
    float _2877 = _890 / cbSceneParam._m0[86u].x;
    float _2878 = _891 / cbSceneParam._m0[86u].y;
    vec4 _2892 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2877, _2878, (log2((isnan(cbSceneParam._m0[77u].w) ? _813 : (isnan(_813) ? cbSceneParam._m0[77u].w : min(_813, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2894 = _2892.x;
    float _2895 = _2892.y;
    float _2896 = _2892.z;
    float _2897 = _2892.w;
    float _2989;
    float _2991;
    float _2993;
    float _2995;
    if (_813 > cbSceneParam._m0[78u].w)
    {
        float _2952 = isnan(_813) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _813 : min(cbSceneParam._m0[80u].w, _813));
        float _2953 = _2952 / _813;
        float _2964 = _2953 * _863;
        float _2965 = _864 * _2953;
        float _2966 = (-0.0) - _2965;
        float _2967 = _2953 * _865;
        float _2969 = (cbSceneParam._m0[77u].w * _2966) / _2952;
        float _2970 = _2969 + cbSceneParam._m0[79u].w;
        float _2971 = cbSceneParam._m0[79u].w - _2965;
        float _2977 = sqrt(((_2964 * _2964) + (_2965 * _2965)) + (_2967 * _2967));
        float _2980 = (1.0 - (cbSceneParam._m0[77u].w / _2952)) * _2977;
        float _2985 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2987 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3173;
        if (abs((_2966 - _2969) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3173 = ((((_2970 > 0.0) ? exp2(_2985 * _2970) : (2.0 - exp2(_2987 * _2970))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2980;
        }
        else
        {
            float _3117 = 1.0 / cbSceneParam._m0[80u].x;
            float _3118 = isnan(_2971) ? _2970 : (isnan(_2970) ? _2971 : max(_2970, _2971));
            float _3119 = isnan(_2971) ? _2970 : (isnan(_2970) ? _2971 : min(_2970, _2971));
            float _3128 = isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : min(_3118, 0.0));
            float _3129 = isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : min(_3119, 0.0));
            _3173 = ((abs(_2977 / _2966) * cbSceneParam._m0[80u].y) * ((((_3128 - _3129) * 2.0) - ((exp2(_2985 * (isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0)))) - exp2(_2985 * (isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : max(_3119, 0.0))))) * _3117)) - ((exp2(_2987 * _3128) - exp2(_2987 * _3129)) * _3117))) + (_2980 * cbSceneParam._m0[80u].z);
        }
        vec4 _3175 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2877, _2878, 1.0), 0.0);
        float _3184 = exp2((_3173 * (-1.44269502162933349609375)) * (1.0 - _3175.w));
        float _3185 = log2(_3184);
        float _3201 = log2(_2897);
        _2989 = (exp2(_3201 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3185 * cbSceneParam._m0[78u].x)) * _3175.x) / cbSceneParam._m0[78u].x)) + _2894;
        _2991 = (exp2(_3201 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3185 * cbSceneParam._m0[78u].y)) * _3175.y) / cbSceneParam._m0[78u].y)) + _2895;
        _2993 = (exp2(_3201 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3185 * cbSceneParam._m0[78u].z)) * _3175.z) / cbSceneParam._m0[78u].z)) + _2896;
        _2995 = _3184 * _2897;
    }
    else
    {
        _2989 = _2894;
        _2991 = _2895;
        _2993 = _2896;
        _2995 = _2897;
    }
    bool _3211;
    vec4 _3005;
    vec4 _3027;
    float _3029;
    float _3033;
    float _3034;
    float _3035;
    float _3038;
    float _3041;
    float _3044;
    float _3045;
    bool _3055;
    for (;;)
    {
        _3005 = cbMatDynParam._m0[0u];
        float _3007 = roundEven(_3005.y);
        bool _3008 = _3007 == 3.0;
        float _3009 = log2(_2995);
        float _3013 = exp2(_3009 * cbSceneParam._m0[78u].x);
        float _3014 = exp2(_3009 * cbSceneParam._m0[78u].y);
        float _3015 = exp2(_3009 * cbSceneParam._m0[78u].z);
        float _3016 = _3013 * _2856;
        float _3017 = _3014 * _2857;
        float _3018 = _3015 * _2858;
        float _3025 = _879 + (-0.5);
        _3027 = cbMtdParam._m0[1u];
        _3029 = _3027.y * _3025;
        float _3032 = (_3007 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3033 = _3032 * (_3008 ? _3016 : (_3016 + (cbSceneParam._m0[72u].w * _2989)));
        _3034 = _3032 * (_3008 ? _3017 : (_3017 + (cbSceneParam._m0[72u].w * _2991)));
        _3035 = _3032 * (_3008 ? _3018 : (_3018 + (cbSceneParam._m0[72u].w * _2993)));
        _3038 = ((_2864 * _2868) * _3013) * _3032;
        _3041 = ((_2865 * _2868) * _3014) * _3032;
        _3044 = ((_2866 * _2868) * _3015) * _3032;
        _3045 = _3025 * 0.999000012874603271484375;
        _3055 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3055)
        {
            if ((cbInstanceData._m0[_945 + 7u].x + _3045) < 0.5)
            {
                _3211 = true;
                break;
            }
        }
        uint _3152 = _946 + uint(_3005.w);
        if ((cbInstanceData._m0[_3152].w < 1.0) && ((cbInstanceData._m0[_3152].w + _3045) < 0.5))
        {
            _3211 = true;
            break;
        }
        if ((_3029 + 1.0) < _3027.x)
        {
            _3211 = true;
            break;
        }
        _3211 = false;
        break;
    }
    float _3415;
    if (_3211)
    {
        discard_state = true;
        _3415 = 0.0;
    }
    else
    {
        _3415 = cbInstanceData._m0[_2869].w;
    }
    SV_Target.x = _3033;
    SV_Target.y = _3034;
    SV_Target.z = _3035;
    SV_Target.w = _3415;
    SV_Target_1.x = _3038;
    SV_Target_1.y = _3041;
    SV_Target_1.z = _3044;
    SV_Target_1.w = cbInstanceData._m0[_2869].w;
    discard_exit();
}


