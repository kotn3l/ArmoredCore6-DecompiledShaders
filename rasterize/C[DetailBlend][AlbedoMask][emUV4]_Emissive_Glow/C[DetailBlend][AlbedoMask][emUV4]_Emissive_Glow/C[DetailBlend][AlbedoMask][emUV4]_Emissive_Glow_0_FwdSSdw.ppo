#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 11) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 12) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1378;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _230 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _238 = _237 * NORMAL.x;
    float _239 = _237 * NORMAL.y;
    float _240 = _237 * NORMAL.z;
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _252;
    float _253;
    float _254;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _252 = (-0.0) - _238;
        _253 = (-0.0) - _239;
        _254 = (-0.0) - _240;
    }
    else
    {
        _252 = _238;
        _253 = _239;
        _254 = _240;
    }
    vec4 _272 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _286 = exp2(log2(_272.w * cbMtdParam._m0[23u].z) * cbMtdParam._m0[21u].y);
    float _287 = isnan(0.0) ? _286 : (isnan(_286) ? 0.0 : max(_286, 0.0));
    float _288 = isnan(1.0) ? _287 : (isnan(_287) ? 1.0 : min(_287, 1.0));
    vec4 _302 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _306 = _302.z;
    float _307 = _302.w;
    float _315 = exp2(log2(_306 * cbMtdParam._m0[21u].w) * cbMtdParam._m0[20u].y);
    float _316 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _317 = isnan(1.0) ? _316 : (isnan(_316) ? 1.0 : min(_316, 1.0));
    vec4 _330 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    vec4 _353 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _355 = _353.x;
    float _356 = _353.y;
    float _380 = ((cbMtdParam._m0[20u].w * _353.z) * (texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_15, SS_WrapLinear), vec2(((cbMtdParam._m0[20u].z * TEXCOORD.x) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, ((cbMtdParam._m0[20u].z * TEXCOORD.y) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w)).x - _355)) + _355;
    bool _416 = _380 >= 0.25;
    bool _421 = _380 >= 0.3499999940395355224609375;
    bool _426 = _380 >= 0.5;
    bool _431 = _380 >= 0.64999997615814208984375;
    bool _436 = _380 >= 0.75;
    vec4 _464 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _474 = cbMtdParam._m0[9u].x * _464.x;
    float _475 = cbMtdParam._m0[9u].y * _464.y;
    float _476 = cbMtdParam._m0[9u].z * _464.z;
    float _483 = (((((((_436 ? cbMtdParam._m0[14u].x : (_431 ? cbMtdParam._m0[19u].x : (_426 ? cbMtdParam._m0[18u].x : (_421 ? cbMtdParam._m0[17u].x : (_416 ? cbMtdParam._m0[16u].x : cbMtdParam._m0[15u].x))))) - cbMtdParam._m0[10u].x) * _356) + cbMtdParam._m0[10u].x) * _330.x) - _474) * _317) + _474;
    float _484 = (((((((_436 ? cbMtdParam._m0[14u].y : (_431 ? cbMtdParam._m0[19u].y : (_426 ? cbMtdParam._m0[18u].y : (_421 ? cbMtdParam._m0[17u].y : (_416 ? cbMtdParam._m0[16u].y : cbMtdParam._m0[15u].y))))) - cbMtdParam._m0[10u].y) * _356) + cbMtdParam._m0[10u].y) * _330.y) - _475) * _317) + _475;
    float _485 = (((((((_436 ? cbMtdParam._m0[14u].z : (_431 ? cbMtdParam._m0[19u].z : (_426 ? cbMtdParam._m0[18u].z : (_421 ? cbMtdParam._m0[17u].z : (_416 ? cbMtdParam._m0[16u].z : cbMtdParam._m0[15u].z))))) - cbMtdParam._m0[10u].z) * _356) + cbMtdParam._m0[10u].z) * _330.z) - _476) * _317) + _476;
    float _492 = exp2(log2(_307) * cbMtdParam._m0[22u].y);
    vec4 _505 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _525 = (((cbMtdParam._m0[12u].x * _505.x) - _483) * _492) + _483;
    float _526 = (((cbMtdParam._m0[12u].y * _505.y) - _484) * _492) + _484;
    float _527 = (((cbMtdParam._m0[12u].z * _505.z) - _485) * _492) + _485;
    vec4 _539 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _563 = (_272.x * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].x * _539.x) - _525) * _288) + _525);
    float _565 = (_272.y * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].y * _539.y) - _526) * _288) + _526);
    float _567 = (_272.z * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].z * _539.z) - _527) * _288) + _527);
    float _572 = exp2(log2(1.0 - _307) * 0.00999999977648258209228515625);
    float _590 = ((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_11, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x - cbMtdParam._m0[22u].w) * _572) + cbMtdParam._m0[22u].w;
    float _609 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w)).x - _590) + cbMtdParam._m0[21u].z) * _492) + _590;
    float _629 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w)).x - _609) + cbMtdParam._m0[23u].w) * _288) + _609;
    vec4 _642 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _660 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _662 = _660.x;
    float _663 = _660.y;
    float _666 = cbMtdParam._m0[20u].x + _660.z;
    float _669 = (((cbMtdParam._m0[21u].x + _642.z) - _666) * _572) + _666;
    vec4 _681 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _693 = (_306 * 2.0) * ((((_681.z - _669) + cbMtdParam._m0[23u].y) * _492) + _669);
    vec4 _705 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _714 = (((_705.z - _693) + cbMtdParam._m0[22u].x) * _288) + _693;
    vec4 _733 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _748 = ((_642.x - _662) * _572) + _662;
    float _749 = ((_642.y - _663) * _572) + _663;
    float _754 = ((_681.x - _748) * _492) + _748;
    float _755 = ((_681.y - _749) * _492) + _749;
    float _764 = ((((_705.x - _754) * _288) + _754) * 2.0) + (-1.0);
    float _765 = ((((_705.y - _755) * _288) + _755) * 2.0) + (-1.0);
    float _766 = dot(vec2(_764, _765), vec2(_764, _765));
    float _3791 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _771 = sqrt(1.0 - (isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0))));
    float _774 = (cbMtdParam._m0[23u].x * ((_302.x * 2.0) + (-1.0))) + _764;
    float _775 = (cbMtdParam._m0[23u].x * ((_302.y * 2.0) + (-1.0))) + _765;
    float _778 = fma(_771, _252, fma(_775, _244 * TANGENT.x, (_230 * _223) * _774));
    float _781 = fma(_771, _253, fma(_775, _244 * TANGENT.y, (_230 * _224) * _774));
    float _784 = fma(_771, _254, fma(_775, _244 * TANGENT.z, (_230 * _225) * _774));
    float _788 = inversesqrt(dot(vec3(_778, _781, _784), vec3(_778, _781, _784)));
    float _789 = _788 * _778;
    float _790 = _788 * _781;
    float _791 = _788 * _784;
    float _3802 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _792 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
    float _3813 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _3824 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _3835 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _3846 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _796 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
    float _812 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _852 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _862 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _852);
    float _863 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _852);
    float _864 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _852);
    float _868 = inversesqrt(dot(vec3(_862, _863, _864), vec3(_862, _863, _864)));
    float _869 = _862 * _868;
    float _870 = _863 * _868;
    float _871 = _864 * _868;
    float _877 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _878 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _880 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _882 = _880.w;
    float _900 = fma(_791, cbSceneParam._m0[5u].z, fma(_790, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _789));
    float _903 = fma(_791, cbSceneParam._m0[6u].z, fma(_790, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _789));
    float _906 = fma(_791, cbSceneParam._m0[7u].z, fma(_790, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _789));
    vec4 _908 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _919 = (((_908.y - _792) + (_908.w * _792)) * cbMtdParam._m0[3u].x) + _792;
    uint _932 = uint(roundEven(NORMAL.w)) * 13u;
    uint _933 = _932 + 9u;
    uint _934 = _933 + uint(cbMatDynParam._m0[0u].w);
    float _940 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0)))) * cbInstanceData._m0[_934].x;
    float _941 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0)))) * cbInstanceData._m0[_934].y;
    float _942 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0)))) * cbInstanceData._m0[_934].z;
    float _3857 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    float _943 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
    float _3868 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _944 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
    float _3879 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    float _945 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
    vec4 _946 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _951 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _962 = (((_951.x - _796) + (_951.w * _796)) * cbMtdParam._m0[3u].x) + _796;
    float _975 = (cbMtdParam._m0[3u].x * (((_943 * _882) - _943) + _946.x)) + _943;
    float _976 = (cbMtdParam._m0[3u].x * (((_944 * _882) - _944) + _946.y)) + _944;
    float _977 = (cbMtdParam._m0[3u].x * (((_945 * _882) - _945) + _946.z)) + _945;
    float _978 = 1.0 - _962;
    float _979 = _978 * _975;
    float _980 = _978 * _976;
    float _981 = _978 * _977;
    float _986 = (_975 + (-0.039999999105930328369140625)) * _962;
    float _987 = (_976 + (-0.039999999105930328369140625)) * _962;
    float _988 = (_977 + (-0.039999999105930328369140625)) * _962;
    float _989 = _986 + 0.039999999105930328369140625;
    float _991 = _987 + 0.039999999105930328369140625;
    float _992 = _988 + 0.039999999105930328369140625;
    vec4 _1001 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _877, cbSceneParam._m0[86u].y * _878));
    float _1004 = _1001.x * TEXCOORD_4.z;
    float _1005 = dot(vec3(_789, _790, _791), vec3(_869, _870, _871));
    float _1008 = _1005 * 2.0;
    float _1012 = (_1008 * _789) - _869;
    float _1013 = (_1008 * _790) - _870;
    float _1014 = (_1008 * _791) - _871;
    float _1018 = abs(dot(vec3(_869, _870, _871), vec3(_789, _790, _791)));
    float _3890 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
    float _1020 = sqrt(_919);
    float _1033 = exp2((_1020 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1020 * 3.0));
    float _1039 = (1.0 - _1033) * ((_1020 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1040 = _1033 * _1020;
    float _1068 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1072 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1076 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1377;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1103 = fma(_1076, cbModelParam._m0[26u].z, fma(_1072, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1068));
        float _1107 = fma(_1076, cbModelParam._m0[27u].z, fma(_1072, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1068));
        float _1111 = fma(_1076, cbModelParam._m0[28u].z, fma(_1072, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1068));
        float _1135 = _1068 + _789;
        float _1136 = _1072 + _790;
        float _1137 = _1076 + _791;
        float _1147 = fma(_1137, cbModelParam._m0[26u].z, fma(_1136, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1135)) - _1103;
        float _1148 = fma(_1137, cbModelParam._m0[27u].z, fma(_1136, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1135)) - _1107;
        float _1149 = fma(_1137, cbModelParam._m0[28u].z, fma(_1136, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1135)) - _1111;
        float _1153 = inversesqrt(dot(vec3(_1147, _1148, _1149), vec3(_1147, _1148, _1149)));
        float _1166 = ((_1153 * _1147) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1103 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1167 = ((_1153 * _1148) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1107 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1168 = ((_1153 * _1149) / cbModelParam._m0[34u].z) + ((((((_1111 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1171 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1166, _1167, _1168), 0.0);
        vec4 _1178 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1166, _1167, _1168), 0.0);
        vec4 _1185 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1166, _1167, _1168), 0.0);
        vec4 _1192 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1166, _1167, _1168), 0.0);
        float _1205 = exp2((_1171.w + (-0.5)) * 20.0) * 2.0;
        float _1206 = _1205 * (_1171.x + (-0.5));
        float _1207 = _1205 * (_1171.y + (-0.5));
        float _1208 = _1205 * (_1171.z + (-0.5));
        float _1215 = exp2((_1178.w + (-0.5)) * 20.0) * 2.0;
        float _1216 = _1215 * (_1178.x + (-0.5));
        float _1217 = _1215 * (_1178.y + (-0.5));
        float _1218 = _1215 * (_1178.z + (-0.5));
        float _1225 = exp2((_1185.w + (-0.5)) * 20.0) * 2.0;
        float _1226 = _1225 * (_1185.x + (-0.5));
        float _1227 = _1225 * (_1185.y + (-0.5));
        float _1228 = _1225 * (_1185.z + (-0.5));
        float _1235 = exp2((_1192.w + (-0.5)) * 20.0) * 2.0;
        float _1236 = _1235 * (_1192.x + (-0.5));
        float _1237 = _1235 * (_1192.y + (-0.5));
        float _1238 = _1235 * (_1192.z + (-0.5));
        float _1239 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1240 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1241 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1242 = _1206 * 0.5;
        float _1243 = _1216 * 0.5;
        float _1244 = _1226 * 0.5;
        float _1245 = dot(vec3(_1242, _1243, _1244), vec3(_1242, _1243, _1244));
        float _1250 = (_1245 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1245);
        float _1259 = (dot(vec3(_789, _790, _791), vec3(_1250 * _1242, _1250 * _1243, _1250 * _1244)) + 1.0) * 0.5;
        float _3916 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1269 = sqrt(((_1243 * _1243) + (_1242 * _1242)) + (_1244 * _1244)) / (_1239 + 9.9999997473787516355514526367188e-06);
        float _3927 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1271 = _1270 * 2.0;
        float _1275 = (1.0 - _1270) / (_1270 + 1.0);
        float _3938 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1285 = ((((1.0 - _1276) * (_1271 + 2.0)) * exp2(log2(isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))) * (_1271 + 1.0))) + _1276) * _1239;
        float _1286 = _1207 * 0.5;
        float _1287 = _1217 * 0.5;
        float _1288 = _1227 * 0.5;
        float _1289 = dot(vec3(_1286, _1287, _1288), vec3(_1286, _1287, _1288));
        float _1294 = (_1289 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1289);
        float _1302 = (dot(vec3(_789, _790, _791), vec3(_1294 * _1286, _1294 * _1287, _1294 * _1288)) + 1.0) * 0.5;
        float _3949 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1311 = sqrt(((_1287 * _1287) + (_1286 * _1286)) + (_1288 * _1288)) / (_1240 + 9.9999997473787516355514526367188e-06);
        float _3960 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1313 = _1312 * 2.0;
        float _1317 = (1.0 - _1312) / (_1312 + 1.0);
        float _3971 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _1327 = ((((1.0 - _1318) * (_1313 + 2.0)) * exp2(log2(isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))) * (_1313 + 1.0))) + _1318) * _1240;
        float _1328 = _1208 * 0.5;
        float _1329 = _1218 * 0.5;
        float _1330 = _1228 * 0.5;
        float _1331 = dot(vec3(_1328, _1329, _1330), vec3(_1328, _1329, _1330));
        float _1336 = (_1331 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1331);
        float _1344 = (dot(vec3(_789, _790, _791), vec3(_1336 * _1328, _1336 * _1329, _1336 * _1330)) + 1.0) * 0.5;
        float _3982 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1353 = sqrt(((_1329 * _1329) + (_1328 * _1328)) + (_1330 * _1330)) / (_1241 + 9.9999997473787516355514526367188e-06);
        float _3993 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _1355 = _1354 * 2.0;
        float _1359 = (1.0 - _1354) / (_1354 + 1.0);
        float _4004 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1360 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _1369 = ((((1.0 - _1360) * (_1355 + 2.0)) * exp2(log2(isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0))) * (_1355 + 1.0))) + _1360) * _1241;
        _1377 = _1208;
        _1379 = _1207;
        _1380 = _1206;
        _1381 = _1218;
        _1382 = _1217;
        _1383 = _1216;
        _1384 = _1228;
        _1385 = _1227;
        _1386 = _1226;
        _1387 = _1241;
        _1388 = _1240;
        _1389 = _1239;
        _1390 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0)));
        _1391 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0)));
        _1392 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0)));
    }
    else
    {
        _1377 = _1378;
        _1379 = _1378;
        _1380 = _1378;
        _1381 = _1378;
        _1382 = _1378;
        _1383 = _1378;
        _1384 = _1378;
        _1385 = _1378;
        _1386 = _1378;
        _1387 = _1378;
        _1388 = _1378;
        _1389 = _1378;
        _1390 = 0.0;
        _1391 = 0.0;
        _1392 = 0.0;
    }
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1418 = fma(_1076, cbModelParam._m0[30u].z, fma(_1072, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1068));
        float _1422 = fma(_1076, cbModelParam._m0[31u].z, fma(_1072, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1068));
        float _1426 = fma(_1076, cbModelParam._m0[32u].z, fma(_1072, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1068));
        float _1449 = _1068 + _789;
        float _1450 = _1072 + _790;
        float _1451 = _1076 + _791;
        float _1461 = fma(_1451, cbModelParam._m0[30u].z, fma(_1450, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1449)) - _1418;
        float _1462 = fma(_1451, cbModelParam._m0[31u].z, fma(_1450, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1449)) - _1422;
        float _1463 = fma(_1451, cbModelParam._m0[32u].z, fma(_1450, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1449)) - _1426;
        float _1467 = inversesqrt(dot(vec3(_1461, _1462, _1463), vec3(_1461, _1462, _1463)));
        float _1480 = ((_1467 * _1461) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1418 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1481 = ((_1467 * _1462) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1422 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1482 = ((_1467 * _1463) / cbModelParam._m0[35u].z) + ((((((_1426 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1484 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1480, _1481, _1482), 0.0);
        vec4 _1491 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1480, _1481, _1482), 0.0);
        vec4 _1498 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1480, _1481, _1482), 0.0);
        vec4 _1505 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1480, _1481, _1482), 0.0);
        float _1517 = exp2((_1484.w + (-0.5)) * 20.0) * 2.0;
        float _1518 = _1517 * (_1484.x + (-0.5));
        float _1519 = _1517 * (_1484.y + (-0.5));
        float _1520 = _1517 * (_1484.z + (-0.5));
        float _1527 = exp2((_1491.w + (-0.5)) * 20.0) * 2.0;
        float _1528 = _1527 * (_1491.x + (-0.5));
        float _1529 = _1527 * (_1491.y + (-0.5));
        float _1530 = _1527 * (_1491.z + (-0.5));
        float _1537 = exp2((_1498.w + (-0.5)) * 20.0) * 2.0;
        float _1538 = _1537 * (_1498.x + (-0.5));
        float _1539 = _1537 * (_1498.y + (-0.5));
        float _1540 = _1537 * (_1498.z + (-0.5));
        float _1547 = exp2((_1505.w + (-0.5)) * 20.0) * 2.0;
        float _1548 = _1547 * (_1505.x + (-0.5));
        float _1549 = _1547 * (_1505.y + (-0.5));
        float _1550 = _1547 * (_1505.z + (-0.5));
        float _1551 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1552 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1553 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1554 = _1518 * 0.5;
        float _1555 = _1528 * 0.5;
        float _1556 = _1538 * 0.5;
        float _1557 = dot(vec3(_1554, _1555, _1556), vec3(_1554, _1555, _1556));
        float _1562 = (_1557 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1557);
        float _1570 = (dot(vec3(_789, _790, _791), vec3(_1562 * _1554, _1562 * _1555, _1562 * _1556)) + 1.0) * 0.5;
        float _4045 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1579 = sqrt(((_1555 * _1555) + (_1554 * _1554)) + (_1556 * _1556)) / (_1551 + 9.9999997473787516355514526367188e-06);
        float _4056 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1580 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1581 = _1580 * 2.0;
        float _1585 = (1.0 - _1580) / (_1580 + 1.0);
        float _4067 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1586 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1595 = ((((1.0 - _1586) * (_1581 + 2.0)) * exp2(log2(isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * (_1581 + 1.0))) + _1586) * _1551;
        float _1596 = _1519 * 0.5;
        float _1597 = _1529 * 0.5;
        float _1598 = _1539 * 0.5;
        float _1599 = dot(vec3(_1596, _1597, _1598), vec3(_1596, _1597, _1598));
        float _1604 = (_1599 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1599);
        float _1612 = (dot(vec3(_789, _790, _791), vec3(_1604 * _1596, _1604 * _1597, _1604 * _1598)) + 1.0) * 0.5;
        float _4078 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1621 = sqrt(((_1597 * _1597) + (_1596 * _1596)) + (_1598 * _1598)) / (_1552 + 9.9999997473787516355514526367188e-06);
        float _4089 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1622 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _1623 = _1622 * 2.0;
        float _1627 = (1.0 - _1622) / (_1622 + 1.0);
        float _4100 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1628 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _1637 = ((((1.0 - _1628) * (_1623 + 2.0)) * exp2(log2(isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * (_1623 + 1.0))) + _1628) * _1552;
        float _1638 = _1520 * 0.5;
        float _1639 = _1530 * 0.5;
        float _1640 = _1540 * 0.5;
        float _1641 = dot(vec3(_1638, _1639, _1640), vec3(_1638, _1639, _1640));
        float _1646 = (_1641 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1641);
        float _1654 = (dot(vec3(_789, _790, _791), vec3(_1646 * _1638, _1646 * _1639, _1646 * _1640)) + 1.0) * 0.5;
        float _4111 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1663 = sqrt(((_1639 * _1639) + (_1638 * _1638)) + (_1640 * _1640)) / (_1553 + 9.9999997473787516355514526367188e-06);
        float _4122 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1664 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _1665 = _1664 * 2.0;
        float _1669 = (1.0 - _1664) / (_1664 + 1.0);
        float _4133 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1670 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _1679 = ((((1.0 - _1670) * (_1665 + 2.0)) * exp2(log2(isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * (_1665 + 1.0))) + _1670) * _1553;
        _1687 = _1520;
        _1688 = _1519;
        _1689 = _1518;
        _1690 = _1530;
        _1691 = _1529;
        _1692 = _1528;
        _1693 = _1540;
        _1694 = _1539;
        _1695 = _1538;
        _1696 = _1553;
        _1697 = _1552;
        _1698 = _1551;
        _1699 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0)));
        _1700 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0)));
        _1701 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0)));
    }
    else
    {
        _1687 = _1378;
        _1688 = _1378;
        _1689 = _1378;
        _1690 = _1378;
        _1691 = _1378;
        _1692 = _1378;
        _1693 = _1378;
        _1694 = _1378;
        _1695 = _1378;
        _1696 = _1378;
        _1697 = _1378;
        _1698 = _1378;
        _1699 = 0.0;
        _1700 = 0.0;
        _1701 = 0.0;
    }
    float _1711 = (cbModelParam._m0[1u].x * (_1699 - _1390)) + _1390;
    float _1712 = (cbModelParam._m0[1u].x * (_1700 - _1391)) + _1391;
    float _1713 = (cbModelParam._m0[1u].x * (_1701 - _1392)) + _1392;
    float _1734 = fma(_1713, cbSceneParam._m0[89u].z, fma(_1712, cbSceneParam._m0[89u].y, _1711 * cbSceneParam._m0[89u].x));
    float _1737 = fma(_1713, cbSceneParam._m0[90u].z, fma(_1712, cbSceneParam._m0[90u].y, _1711 * cbSceneParam._m0[90u].x));
    float _1740 = fma(_1713, cbSceneParam._m0[91u].z, fma(_1712, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1711));
    float _1755 = _1012 * 0.5;
    float _1756 = _1013 * 0.5;
    float _1757 = _1014 * 0.5;
    float _1758 = dot(vec4(_1755, _1756, _1757, 1.0), vec4(_1689, _1692, _1695, _1698));
    float _1761 = dot(vec4(_1755, _1756, _1757, 1.0), vec4(_1688, _1691, _1694, _1697));
    float _1764 = dot(vec4(_1755, _1756, _1757, 1.0), vec4(_1687, _1690, _1693, _1696));
    float _1798;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1771 = dot(vec4(_1755, _1756, _1757, 1.0), vec4(_1377, _1381, _1384, _1387));
        float _1775 = dot(vec4(_1755, _1756, _1757, 1.0), vec4(_1379, _1382, _1385, _1388));
        float _1779 = dot(vec4(_1755, _1756, _1757, 1.0), vec4(_1380, _1383, _1386, _1389));
        float _1786 = dot(vec4(cbModelParam._m0[39u]), vec4(_1755, _1756, _1757, 1.0));
        _1798 = dot(vec3(isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0)), isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0)), isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1786) ? 0.0 : (isnan(0.0) ? _1786 : max(0.0, _1786))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1798 = 1.0;
    }
    float _1809;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1800 = dot(vec4(cbModelParam._m0[40u]), vec4(_1755, _1756, _1757, 1.0));
        _1809 = dot(vec3(isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0)), isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0)), isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1800) ? 0.0 : (isnan(0.0) ? _1800 : max(0.0, _1800))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1809 = 1.0;
    }
    float _1813 = (_1809 * cbModelParam._m0[1u].x) + (_1798 * (1.0 - cbModelParam._m0[1u].x));
    float _1823 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _919);
    float _1824 = isnan(_1823) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1823 : min(cbModelParam._m0[25u].z, _1823));
    float _1904;
    float _1906;
    float _1908;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1871 = fma(_1076, cbModelParam._m0[13u].z, fma(_1072, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1068)) + cbModelParam._m0[13u].w;
        float _1875 = fma(_1076, cbModelParam._m0[14u].z, fma(_1072, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1068)) + cbModelParam._m0[14u].w;
        float _1879 = fma(_1076, cbModelParam._m0[15u].z, fma(_1072, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1068)) + cbModelParam._m0[15u].w;
        float _1882 = fma(_1014, cbModelParam._m0[13u].z, fma(_1013, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1012));
        float _1885 = fma(_1014, cbModelParam._m0[14u].z, fma(_1013, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1012));
        float _1888 = fma(_1014, cbModelParam._m0[15u].z, fma(_1013, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1012));
        float _1916;
        if (_1882 > 0.0)
        {
            _1916 = abs((1.0 - _1871) / _1882);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1882 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1871 + 1.0) / _1882);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1916 = frontier_phi_16_14_ladder;
        }
        float _2139;
        if (_1885 > 0.0)
        {
            _2139 = abs((1.0 - _1875) / _1885);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1885 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1875 + 1.0) / _1885);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2139 = frontier_phi_25_21_ladder;
        }
        float _2396;
        if (_1888 > 0.0)
        {
            _2396 = abs((1.0 - _1879) / _1888);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1888 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1879 + 1.0) / _1888);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2396 = frontier_phi_37_32_ladder;
        }
        float _2398 = isnan(_2139) ? _1916 : (isnan(_1916) ? _2139 : min(_1916, _2139));
        float _2399 = isnan(_2396) ? _2398 : (isnan(_2398) ? _2396 : min(_2398, _2396));
        float _2403 = (_2399 * _1882) + _1871;
        float _2404 = (_2399 * _1885) + _1875;
        float _2405 = (_2399 * _1888) + _1879;
        float _2406 = _2399 * 9.9999997473787516355514526367188e-05;
        float _2408 = (-1.0) - _2406;
        float _2410 = _2406 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2405 > _2410) || ((_2405 < _2408) || ((_2404 > _2410) || ((_2404 < _2408) || ((_2403 < _2408) || (_2403 > _2410))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2533 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2405, cbModelParam._m0[9u].z, fma(_2404, cbModelParam._m0[9u].y, _2403 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2405, cbModelParam._m0[10u].z, fma(_2404, cbModelParam._m0[10u].y, _2403 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2405, cbModelParam._m0[11u].z, fma(_2404, cbModelParam._m0[11u].y, _2403 * cbModelParam._m0[11u].x))), _1824);
            frontier_phi_15_37_ladder = _2533.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2533.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2533.x * cbModelParam._m0[1u].y;
        }
        _1904 = frontier_phi_15_37_ladder_2;
        _1906 = frontier_phi_15_37_ladder_1;
        _1908 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1892 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1012, _1013, _1014), _1824);
        _1904 = _1892.x * cbModelParam._m0[1u].y;
        _1906 = _1892.y * cbModelParam._m0[1u].y;
        _1908 = _1892.z * cbModelParam._m0[1u].y;
    }
    float _1912 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _919);
    float _1913 = isnan(_1912) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1912 : min(cbModelParam._m0[25u].w, _1912));
    float _2002;
    float _2004;
    float _2006;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1966 = fma(_1076, cbModelParam._m0[21u].z, fma(_1072, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1068)) + cbModelParam._m0[21u].w;
        float _1970 = fma(_1076, cbModelParam._m0[22u].z, fma(_1072, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1068)) + cbModelParam._m0[22u].w;
        float _1974 = fma(_1076, cbModelParam._m0[23u].z, fma(_1072, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1068)) + cbModelParam._m0[23u].w;
        float _1977 = fma(_1014, cbModelParam._m0[21u].z, fma(_1013, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1012));
        float _1980 = fma(_1014, cbModelParam._m0[22u].z, fma(_1013, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1012));
        float _1983 = fma(_1014, cbModelParam._m0[23u].z, fma(_1013, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1012));
        float _2144;
        if (_1977 > 0.0)
        {
            _2144 = abs((1.0 - _1966) / _1977);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1977 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1966 + 1.0) / _1977);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2144 = frontier_phi_27_23_ladder;
        }
        float _2423;
        if (_1980 > 0.0)
        {
            _2423 = abs((1.0 - _1970) / _1980);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1980 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1970 + 1.0) / _1980);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2423 = frontier_phi_39_34_ladder;
        }
        float _2636;
        if (_1983 > 0.0)
        {
            _2636 = abs((1.0 - _1974) / _1983);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1983 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1974 + 1.0) / _1983);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2636 = frontier_phi_48_45_ladder;
        }
        float _2638 = isnan(_2423) ? _2144 : (isnan(_2144) ? _2423 : min(_2144, _2423));
        float _2639 = isnan(_2636) ? _2638 : (isnan(_2638) ? _2636 : min(_2638, _2636));
        float _2643 = (_2639 * _1977) + _1966;
        float _2644 = (_2639 * _1980) + _1970;
        float _2645 = (_2639 * _1983) + _1974;
        float _2646 = _2639 * 9.9999997473787516355514526367188e-05;
        float _2647 = (-1.0) - _2646;
        float _2649 = _2646 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2645 > _2649) || ((_2645 < _2647) || ((_2644 > _2649) || ((_2644 < _2647) || ((_2643 < _2647) || (_2643 > _2649))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2878 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2645, cbModelParam._m0[17u].z, fma(_2644, cbModelParam._m0[17u].y, _2643 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2645, cbModelParam._m0[18u].z, fma(_2644, cbModelParam._m0[18u].y, _2643 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2645, cbModelParam._m0[19u].z, fma(_2644, cbModelParam._m0[19u].y, _2643 * cbModelParam._m0[19u].x))), _1913);
            frontier_phi_24_48_ladder = _2878.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2878.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2878.x * cbModelParam._m0[1u].z;
        }
        _2002 = frontier_phi_24_48_ladder_2;
        _2004 = frontier_phi_24_48_ladder_1;
        _2006 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1986 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1012, _1013, _1014), _1913);
        _2002 = _1986.x * cbModelParam._m0[1u].z;
        _2004 = _1986.y * cbModelParam._m0[1u].z;
        _2006 = _1986.z * cbModelParam._m0[1u].z;
    }
    float _2019 = (((_1039 * _989) + _1040) * _1004) * ((cbModelParam._m0[1u].w * (_2002 - _1904)) + _1904);
    float _2021 = (((_1039 * _991) + _1040) * _1004) * ((cbModelParam._m0[1u].w * (_2004 - _1906)) + _1906);
    float _2023 = (((_1039 * _992) + _1040) * _1004) * ((cbModelParam._m0[1u].w * (_2006 - _1908)) + _1908);
    float _2026 = fma(_2023, cbSceneParam._m0[89u].z, fma(_2021, cbSceneParam._m0[89u].y, _2019 * cbSceneParam._m0[89u].x));
    float _2029 = fma(_2023, cbSceneParam._m0[90u].z, fma(_2021, cbSceneParam._m0[90u].y, _2019 * cbSceneParam._m0[90u].x));
    float _2032 = fma(_2023, cbSceneParam._m0[91u].z, fma(_2021, cbSceneParam._m0[91u].y, _2019 * cbSceneParam._m0[91u].x));
    vec4 _2040 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_877, _878));
    float _2042 = _2040.w;
    float _2054 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2042);
    float _2055 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2042);
    float _2056 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2042);
    uvec4 _2060 = floatBitsToUint(cbInstanceData._m0[_932 + 5u]);
    uint _2062 = _2060.x * 14u;
    uint _2063 = _2062 + 13u;
    float _2070 = _1004 + (-1.0);
    float _2075 = (cbLight._m0[_2063].x * _2070) + 1.0;
    float _2076 = (cbLight._m0[_2063].y * _2070) + 1.0;
    float _2077 = (cbLight._m0[_2063].z * _2070) + 1.0;
    float _2078 = (cbLight._m0[_2063].w * _2070) + 1.0;
    uint _2079 = _2062 + 5u;
    float _2085 = isnan(1.0) ? _2076 : (isnan(_2076) ? 1.0 : min(_2076, 1.0));
    uint _2089 = _2062 + 4u;
    float _2098 = isnan(1.0) ? _2075 : (isnan(_2075) ? 1.0 : min(_2075, 1.0));
    uint _2102 = _2062 | 1u;
    float _2113 = dot(vec3(cbLight._m0[_2062].xyz), vec3(_789, _790, _791));
    float _2116 = dot(vec3(cbLight._m0[_2102].xyz), vec3(_789, _790, _791));
    float _4269 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
    float _4280 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
    float _2121 = (isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * 0.3183098733425140380859375;
    float _2123 = (isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * 0.3183098733425140380859375;
    float _2130 = ((cbLight._m0[_2079].x * _2085) * _2123) + (((cbLight._m0[_2089].x * _2054) * _2098) * _2121);
    float _2131 = ((_2085 * cbLight._m0[_2079].y) * _2123) + (((cbLight._m0[_2089].y * _2055) * _2098) * _2121);
    float _2132 = ((_2085 * cbLight._m0[_2079].z) * _2123) + (((cbLight._m0[_2089].z * _2056) * _2098) * _2121);
    uvec4 _2136 = floatBitsToUint(cbLight._m0[_2062 + 12u]);
    bool _2138 = _2136.x == 0u;
    float _2149;
    float _2151;
    float _2153;
    if (_2138)
    {
        _2149 = _2130;
        _2151 = _2131;
        _2153 = _2132;
    }
    else
    {
        uint _2157 = _2062 + 6u;
        float _2173 = (dot(vec3(cbLight._m0[_2062 + 2u].xyz), vec3(_789, _790, _791)) * 0.5) + 0.5;
        float _2174 = _2173 * _2173;
        float _4291 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
        float _2175 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _2176 = isnan(1.0) ? _2077 : (isnan(_2077) ? 1.0 : min(_2077, 1.0));
        _2149 = (((cbLight._m0[_2157].x * 0.3183098733425140380859375) * _2175) * _2176) + _2130;
        _2151 = (((cbLight._m0[_2157].y * 0.3183098733425140380859375) * _2175) * _2176) + _2131;
        _2153 = (((cbLight._m0[_2157].z * 0.3183098733425140380859375) * _2175) * _2176) + _2132;
    }
    bool _2156 = _2136.y == 0u;
    float _2194;
    float _2196;
    float _2198;
    if (_2156)
    {
        _2194 = _2149;
        _2196 = _2151;
        _2198 = _2153;
    }
    else
    {
        uint _2367 = _2062 + 7u;
        float _2383 = (dot(vec3(cbLight._m0[_2062 + 3u].xyz), vec3(_789, _790, _791)) * 0.5) + 0.5;
        float _2384 = _2383 * _2383;
        float _4307 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
        float _2385 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
        float _2386 = isnan(1.0) ? _2078 : (isnan(_2078) ? 1.0 : min(_2078, 1.0));
        _2194 = (((cbLight._m0[_2367].x * 0.3183098733425140380859375) * _2385) * _2386) + _2149;
        _2196 = (((cbLight._m0[_2367].y * 0.3183098733425140380859375) * _2385) * _2386) + _2151;
        _2198 = (((cbLight._m0[_2367].z * 0.3183098733425140380859375) * _2385) * _2386) + _2153;
    }
    uint _2201 = _2062 + 8u;
    float _2214 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2062].w)) * _919) * 0.949999988079071044921875);
    float _2215 = _2214 * _2214;
    float _2216 = cbLight._m0[_2062].x + _869;
    float _2217 = cbLight._m0[_2062].y + _870;
    float _2218 = cbLight._m0[_2062].z + _871;
    float _2222 = inversesqrt(dot(vec3(_2216, _2217, _2218), vec3(_2216, _2217, _2218)));
    float _2223 = _2222 * _2216;
    float _2224 = _2222 * _2217;
    float _2225 = _2222 * _2218;
    float _2226 = dot(vec3(_789, _790, _791), vec3(cbLight._m0[_2062].xyz));
    float _4323 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
    float _2229 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
    float _4334 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
    float _2230 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
    float _2231 = dot(vec3(_789, _790, _791), vec3(_2223, _2224, _2225));
    float _4345 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
    float _2234 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
    float _2235 = dot(vec3(cbLight._m0[_2062].xyz), vec3(_2223, _2224, _2225));
    float _4356 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
    float _2239 = _2215 * _2215;
    float _2243 = ((_2234 * _2234) * (_2239 + (-1.0))) + 1.0;
    float _2251 = exp2(log2(1.0 - (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0)))) * 5.0);
    float _2252 = 0.959999978542327880859375 - _986;
    float _2254 = 0.959999978542327880859375 - _987;
    float _2255 = 0.959999978542327880859375 - _988;
    float _2262 = 1.0 - _2215;
    float _2273 = (0.5 / (((_2230 * ((_2229 * _2262) + _2215)) + 9.9999999392252902907785028219223e-09) + (((_2230 * _2262) + _2215) * _2229))) * _2229;
    float _4367 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
    float _2275 = (isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0))) * (_2239 / ((_2243 * _2243) * 3.141590118408203125));
    uint _2289 = _2062 + 9u;
    float _2300 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2102].w)) * _919) * 0.949999988079071044921875);
    float _2301 = _2300 * _2300;
    float _2302 = cbLight._m0[_2102].x + _869;
    float _2303 = cbLight._m0[_2102].y + _870;
    float _2304 = cbLight._m0[_2102].z + _871;
    float _2308 = inversesqrt(dot(vec3(_2302, _2303, _2304), vec3(_2302, _2303, _2304)));
    float _2309 = _2308 * _2302;
    float _2310 = _2308 * _2303;
    float _2311 = _2308 * _2304;
    float _2312 = dot(vec3(_789, _790, _791), vec3(cbLight._m0[_2102].xyz));
    float _4378 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
    float _2315 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
    float _2316 = dot(vec3(_789, _790, _791), vec3(_2309, _2310, _2311));
    float _4389 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
    float _2319 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
    float _2320 = dot(vec3(cbLight._m0[_2102].xyz), vec3(_2309, _2310, _2311));
    float _4400 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
    float _2324 = _2301 * _2301;
    float _2328 = ((_2319 * _2319) * (_2324 + (-1.0))) + 1.0;
    float _2335 = exp2(log2(1.0 - (isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0)))) * 5.0);
    float _2342 = 1.0 - _2301;
    float _2352 = (0.5 / (((_2230 * ((_2315 * _2342) + _2301)) + 9.9999999392252902907785028219223e-09) + (((_2230 * _2342) + _2301) * _2315))) * _2315;
    float _4411 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
    float _2354 = (isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0))) * (_2324 / ((_2328 * _2328) * 3.141590118408203125));
    float _2364 = (((((_2335 * _2252) + _989) * cbLight._m0[_2289].x) * _2354) * _2085) + ((((cbLight._m0[_2201].x * _2054) * ((_2251 * _2252) + _989)) * _2275) * _2098);
    float _2365 = (((((_2335 * _2254) + _991) * cbLight._m0[_2289].y) * _2354) * _2085) + ((((cbLight._m0[_2201].y * _2055) * ((_2251 * _2254) + _991)) * _2275) * _2098);
    float _2366 = (((((_2335 * _2255) + _992) * cbLight._m0[_2289].z) * _2354) * _2085) + ((((cbLight._m0[_2201].z * _2056) * ((_2251 * _2255) + _992)) * _2275) * _2098);
    float _2428;
    float _2430;
    float _2432;
    if (_2138)
    {
        _2428 = _2364;
        _2430 = _2365;
        _2432 = _2366;
    }
    else
    {
        uint _2434 = _2062 + 2u;
        uint _2438 = _2062 + 10u;
        float _2452 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2434].w)) * _919) * 0.949999988079071044921875);
        float _2453 = _2452 * _2452;
        float _2454 = cbLight._m0[_2434].x + _869;
        float _2455 = cbLight._m0[_2434].y + _870;
        float _2456 = cbLight._m0[_2434].z + _871;
        float _2460 = inversesqrt(dot(vec3(_2454, _2455, _2456), vec3(_2454, _2455, _2456)));
        float _2461 = _2460 * _2454;
        float _2462 = _2460 * _2455;
        float _2463 = _2460 * _2456;
        float _2464 = dot(vec3(_789, _790, _791), vec3(cbLight._m0[_2434].xyz));
        float _4422 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
        float _2467 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
        float _2468 = dot(vec3(_789, _790, _791), vec3(_2461, _2462, _2463));
        float _4433 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
        float _2471 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
        float _2472 = dot(vec3(cbLight._m0[_2434].xyz), vec3(_2461, _2462, _2463));
        float _4444 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
        float _2476 = _2453 * _2453;
        float _2480 = ((_2471 * _2471) * (_2476 + (-1.0))) + 1.0;
        float _2487 = exp2(log2(1.0 - (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0)))) * 5.0);
        float _2494 = 1.0 - _2453;
        float _2504 = (0.5 / (((_2230 * ((_2467 * _2494) + _2453)) + 9.9999999392252902907785028219223e-09) + (((_2230 * _2494) + _2453) * _2467))) * _2467;
        float _4455 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
        float _2506 = (isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0))) * (_2476 / ((_2480 * _2480) * 3.141590118408203125));
        float _2507 = isnan(1.0) ? _2077 : (isnan(_2077) ? 1.0 : min(_2077, 1.0));
        _2428 = (((((_2487 * _2252) + _989) * cbLight._m0[_2438].x) * _2506) * _2507) + _2364;
        _2430 = (((((_2487 * _2254) + _991) * cbLight._m0[_2438].y) * _2506) * _2507) + _2365;
        _2432 = (((((_2487 * _2255) + _992) * cbLight._m0[_2438].z) * _2506) * _2507) + _2366;
    }
    float _2542;
    float _2544;
    float _2546;
    if (_2156)
    {
        _2542 = _2428;
        _2544 = _2430;
        _2546 = _2432;
    }
    else
    {
        uint _2553 = _2062 + 3u;
        uint _2557 = _2062 + 11u;
        float _2571 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2553].w)) * _919) * 0.949999988079071044921875);
        float _2572 = _2571 * _2571;
        float _2573 = cbLight._m0[_2553].x + _869;
        float _2574 = cbLight._m0[_2553].y + _870;
        float _2575 = cbLight._m0[_2553].z + _871;
        float _2579 = inversesqrt(dot(vec3(_2573, _2574, _2575), vec3(_2573, _2574, _2575)));
        float _2580 = _2579 * _2573;
        float _2581 = _2579 * _2574;
        float _2582 = _2579 * _2575;
        float _2583 = dot(vec3(_789, _790, _791), vec3(cbLight._m0[_2553].xyz));
        float _4471 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
        float _2586 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
        float _2587 = dot(vec3(_789, _790, _791), vec3(_2580, _2581, _2582));
        float _4482 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
        float _2590 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
        float _2591 = dot(vec3(cbLight._m0[_2553].xyz), vec3(_2580, _2581, _2582));
        float _4493 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
        float _2595 = _2572 * _2572;
        float _2599 = ((_2590 * _2590) * (_2595 + (-1.0))) + 1.0;
        float _2606 = exp2(log2(1.0 - (isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0)))) * 5.0);
        float _2613 = 1.0 - _2572;
        float _2623 = (0.5 / (((_2230 * ((_2586 * _2613) + _2572)) + 9.9999999392252902907785028219223e-09) + (((_2230 * _2613) + _2572) * _2586))) * _2586;
        float _4504 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
        float _2625 = (isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0))) * (_2595 / ((_2599 * _2599) * 3.141590118408203125));
        float _2626 = isnan(1.0) ? _2078 : (isnan(_2078) ? 1.0 : min(_2078, 1.0));
        _2542 = (((((_2606 * _2252) + _989) * cbLight._m0[_2557].x) * _2625) * _2626) + _2428;
        _2544 = (((((_2606 * _2254) + _991) * cbLight._m0[_2557].y) * _2625) * _2626) + _2430;
        _2546 = (((((_2606 * _2255) + _992) * cbLight._m0[_2557].z) * _2625) * _2626) + _2432;
    }
    float _2760;
    float _2762;
    float _2764;
    float _2766;
    float _2768;
    float _2770;
    if (_2060.y == 0u)
    {
        float _2701 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2702 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2701;
        float _2703 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2701;
        float _2704 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2701;
        uvec4 _2716 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2717 = _2716.x;
        uint _2728 = uint((float(_2716.y) * floor(float(uint(cbSceneParam._m0[85u].y * _878) / _2717))) + floor(float(uint(cbSceneParam._m0[85u].x * _877) / _2717)));
        float _2738 = (log2(_2704 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2739 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
        uint _2742 = uint(isnan(14.0) ? _2739 : (isnan(_2739) ? 14.0 : min(_2739, 14.0)));
        uvec4 _2747 = texelFetch(g_lightClusterGridBuffer, int(((_2742 << 2u) + (_2728 << 6u)) >> 2u));
        uint _2748 = _2747.x;
        uint _2749 = _2716.z;
        float _2883;
        float _2885;
        float _2887;
        float _2889;
        float _2891;
        float _2893;
        if (((((1u << ((_2749 >> 4u) & 15u)) + 4294967295u) & _2748) == 0u) || ((_2749 & 240u) == 0u))
        {
            _2883 = 0.0;
            _2885 = 0.0;
            _2887 = 0.0;
            _2889 = 0.0;
            _2891 = 0.0;
            _2893 = 0.0;
        }
        else
        {
            float _2884;
            float _2886;
            float _2888;
            float _2890;
            float _2892;
            float _2894;
            float _3036 = 0.0;
            float _3037 = 0.0;
            float _3038 = 0.0;
            float _3039 = 0.0;
            float _3040 = 0.0;
            float _3041 = 0.0;
            uint _3042 = 0u;
            uint _3051;
            bool _3052;
            for (;;)
            {
                _3051 = texelFetch(g_lightClassification, int((((_2742 << 5u) + (_2728 << 9u)) + (_3042 << 2u)) >> 2u)).x;
                _3052 = _3051 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_3052)
                {
                    frontier_phi_63_pred = _3041;
                    frontier_phi_63_pred_1 = _3040;
                    frontier_phi_63_pred_2 = _3039;
                    frontier_phi_63_pred_3 = _3038;
                    frontier_phi_63_pred_4 = _3037;
                    frontier_phi_63_pred_5 = _3036;
                }
                else
                {
                    float _3160;
                    float _3161;
                    float _3162;
                    float _3163;
                    float _3164;
                    float _3165;
                    uint _3166;
                    _3160 = _3036;
                    _3161 = _3037;
                    _3162 = _3038;
                    _3163 = _3039;
                    _3164 = _3040;
                    _3165 = _3041;
                    _3166 = _3051;
                    float _3092;
                    float _3093;
                    float _3094;
                    float _3095;
                    float _3096;
                    float _3097;
                    for (;;)
                    {
                        uint _3170 = uint(findLSB(_3166)) + (_3042 << 5u);
                        uint _3167 = (_3166 + 4294967295u) & _3166;
                        uint _3172 = _3170 * 48u;
                        vec4 _3186 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3172)).x, texelFetch(g_PointLightRenderingBuffer, int(_3172 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3172 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3172 + 3u)).x));
                        uint _3192 = (_3170 * 48u) + 4u;
                        vec4 _3205 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3192)).x, texelFetch(g_PointLightRenderingBuffer, int(_3192 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3192 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3192 + 3u)).x));
                        uint _3211 = (_3170 * 48u) + 8u;
                        vec3 _3222 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3211)).x, texelFetch(g_PointLightRenderingBuffer, int(_3211 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3211 + 2u)).x));
                        float _3226 = _3186.x - _2702;
                        float _3227 = _3186.y - _2703;
                        float _3228 = _3186.z - _2704;
                        float _3229 = dot(vec3(_3226, _3227, _3228), vec3(_3226, _3227, _3228));
                        float _3232 = inversesqrt(_3229);
                        float _3233 = _3232 * _3226;
                        float _3234 = _3232 * _3227;
                        float _3235 = _3232 * _3228;
                        float _3236 = dot(vec3(_900, _903, _906), vec3(_3233, _3234, _3235));
                        float _3241 = 1.0 - (_3229 * _3186.w);
                        float _4530 = isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0));
                        float _3242 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
                        float _3243 = sqrt(_3229) * _3205.w;
                        float _3246 = 1.39999997615814208984375 / (_3243 + 1.39999997615814208984375);
                        float _3247 = _3246 * _3246;
                        float _3250 = ((1.0 - _3247) * _3236) + _3247;
                        float _3253 = _3243 * _3243;
                        float _3257 = ((isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0))) * _3242) / ((_3253 * 0.699999988079071044921875) + 1.0);
                        float _3261 = (-0.0) - _2702;
                        float _3262 = (-0.0) - _2703;
                        float _3263 = (-0.0) - _2704;
                        float _3267 = inversesqrt(dot(vec3(_3261, _3262, _3263), vec3(_3261, _3262, _3263)));
                        float _3268 = _3267 * _3261;
                        float _3269 = _3267 * _3262;
                        float _3270 = _3267 * _3263;
                        float _3277 = exp2(log2(1.0 / ((_3253 * 3.5) + 5.0)) * 0.25);
                        float _3278 = 1.0 - _1020;
                        float _3285 = sqrt(1.0 - ((1.0 - (_3278 * _3278)) * (1.0 - (_3277 * _3277))));
                        float _3286 = _3285 * _3285;
                        float _3287 = _3286 * _3286;
                        float _3288 = _3268 + _3233;
                        float _3289 = _3269 + _3234;
                        float _3290 = _3270 + _3235;
                        float _3294 = inversesqrt(dot(vec3(_3288, _3289, _3290), vec3(_3288, _3289, _3290)));
                        float _3298 = dot(vec3(_900, _903, _906), vec3(_3268, _3269, _3270));
                        float _4546 = isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0));
                        float _3301 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
                        float _3302 = dot(vec3(_900, _903, _906), vec3(_3294 * _3288, _3294 * _3289, _3294 * _3290));
                        float _4557 = isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0));
                        float _3305 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
                        float _3309 = ((_3305 * _3305) * (_3287 + (-1.0))) + 1.0;
                        float _3310 = _3246 * _3286;
                        float _3311 = _3310 * _3310;
                        float _3314 = ((1.0 - _3311) * _3236) + _3311;
                        float _4568 = isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0));
                        float _3315 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
                        float _3316 = 1.0 - _3286;
                        float _3326 = (0.5 / (((_3315 * ((_3301 * _3316) + _3286)) + 9.9999999392252902907785028219223e-09) + (((_3315 * _3316) + _3286) * _3301))) * _3315;
                        float _4579 = isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0));
                        float _3337 = (((_3287 * 3.1415927410125732421875) * (isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0)))) / ((_3309 * _3309) * ((_3253 * 2.1991131305694580078125) + 3.141590118408203125))) * _3242;
                        _3095 = (_3257 * _3205.x) + _3163;
                        _3096 = (_3257 * _3205.y) + _3164;
                        _3097 = (_3257 * _3205.z) + _3165;
                        _3092 = (_3337 * _3222.x) + _3160;
                        _3093 = (_3337 * _3222.y) + _3161;
                        _3094 = (_3337 * _3222.z) + _3162;
                        if (_3167 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3160 = _3092;
                            _3161 = _3093;
                            _3162 = _3094;
                            _3163 = _3095;
                            _3164 = _3096;
                            _3165 = _3097;
                            _3166 = _3167;
                        }
                    }
                    frontier_phi_63_pred = _3097;
                    frontier_phi_63_pred_1 = _3096;
                    frontier_phi_63_pred_2 = _3095;
                    frontier_phi_63_pred_3 = _3094;
                    frontier_phi_63_pred_4 = _3093;
                    frontier_phi_63_pred_5 = _3092;
                }
                _2894 = frontier_phi_63_pred;
                _2892 = frontier_phi_63_pred_1;
                _2890 = frontier_phi_63_pred_2;
                _2888 = frontier_phi_63_pred_3;
                _2886 = frontier_phi_63_pred_4;
                _2884 = frontier_phi_63_pred_5;
                uint _3043 = _3042 + 1u;
                if (_3043 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3036 = _2884;
                    _3037 = _2886;
                    _3038 = _2888;
                    _3039 = _2890;
                    _3040 = _2892;
                    _3041 = _2894;
                    _3042 = _3043;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2883 = _2884;
            _2885 = _2886;
            _2887 = _2888;
            _2889 = _2890;
            _2891 = _2892;
            _2893 = _2894;
        }
        uvec4 _2897 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2898 = _2897.z;
        uint _2900 = (_2898 >> 8u) & 15u;
        float _3004;
        float _3006;
        float _3008;
        float _3010;
        float _3012;
        float _3014;
        if (((4294967295u << _2900) & _2748) == 0u)
        {
            _3004 = _2883;
            _3006 = _2885;
            _3008 = _2887;
            _3010 = _2889;
            _3012 = _2891;
            _3014 = _2893;
        }
        else
        {
            float _3029 = inversesqrt(dot(vec3(_2702, _2703, _2704), vec3(_2702, _2703, _2704)));
            float _3030 = _3029 * _2702;
            float _3031 = _3029 * _2703;
            float _3032 = _3029 * _2704;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2900 < ((_2898 >> 12u) & 15u))
            {
                float _3005;
                float _3007;
                float _3009;
                float _3011;
                float _3013;
                float _3015;
                float _3143 = _2883;
                float _3144 = _2885;
                float _3145 = _2887;
                float _3146 = _2889;
                float _3147 = _2891;
                float _3148 = _2893;
                uint _3149 = _2900;
                uint _3158;
                bool _3159;
                for (;;)
                {
                    _3158 = texelFetch(g_lightClassification, int((((_2742 << 5u) + (_2728 << 9u)) + (_3149 << 2u)) >> 2u)).x;
                    _3159 = _3158 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_3159)
                    {
                        frontier_phi_69_pred = _3148;
                        frontier_phi_69_pred_1 = _3147;
                        frontier_phi_69_pred_2 = _3146;
                        frontier_phi_69_pred_3 = _3145;
                        frontier_phi_69_pred_4 = _3144;
                        frontier_phi_69_pred_5 = _3143;
                    }
                    else
                    {
                        float _3342;
                        float _3343;
                        float _3344;
                        float _3345;
                        float _3346;
                        float _3347;
                        float _3635;
                        float _3636;
                        float _3637;
                        float _3638;
                        float _3639;
                        float _3640;
                        float _3355 = _3143;
                        float _3356 = _3144;
                        float _3357 = _3145;
                        float _3358 = _3146;
                        float _3359 = _3147;
                        float _3360 = _3148;
                        uint _3361 = _3158;
                        uint _3362;
                        vec4 _3387;
                        float _3388;
                        vec4 _3403;
                        vec3 _3415;
                        vec4 _3430;
                        vec4 _3445;
                        float _3491;
                        bool _3492;
                        for (;;)
                        {
                            uint _3372 = ((_3149 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3361));
                            _3362 = (_3361 + 4294967295u) & _3361;
                            uint _3374 = _3372 * 40u;
                            _3387 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3374)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 3u)).x));
                            _3388 = _3387.w;
                            uint _3390 = (_3372 * 40u) + 4u;
                            _3403 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3390)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 3u)).x));
                            uint _3405 = (_3372 * 40u) + 8u;
                            _3415 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3405)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 2u)).x));
                            uint _3417 = (_3372 * 40u) + 16u;
                            _3430 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3417)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 3u)).x));
                            uint _3432 = (_3372 * 40u) + 20u;
                            _3445 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3432)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 3u)).x));
                            uint _3447 = (_3372 * 40u) + 24u;
                            vec4 _3460 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3447)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 3u)).x));
                            uint _3466 = (_3372 * 40u) + 28u;
                            vec4 _3479 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3466)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 3u)).x));
                            _3491 = fma(_2704, _3479.z, fma(_2703, _3479.y, _3479.x * _2702)) + _3479.w;
                            _3492 = !((fma(_2704, _3460.z, fma(_2703, _3460.y, _3460.x * _2702)) + _3460.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3492)
                            {
                                float _3519 = _3387.x - _2702;
                                float _3520 = _3387.y - _2703;
                                float _3521 = _3387.z - _2704;
                                float _3522 = dot(vec3(_3519, _3520, _3521), vec3(_3519, _3520, _3521));
                                float _3525 = inversesqrt(_3522);
                                float _3526 = _3525 * _3519;
                                float _3527 = _3525 * _3520;
                                float _3528 = _3525 * _3521;
                                float _3532 = 1.0 - (_3522 / (_3388 * _3388));
                                float _4590 = isnan(0.0) ? _3532 : (isnan(_3532) ? 0.0 : max(_3532, 0.0));
                                float _3533 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
                                float _3537 = sqrt(_3522) * _3403.w;
                                float _3539 = 1.39999997615814208984375 / (_3537 + 1.39999997615814208984375);
                                float _3540 = _3539 * _3539;
                                float _3543 = ((1.0 - _3540) * dot(vec3(_3526, _3527, _3528), vec3(_900, _903, _906))) + _3540;
                                float _3546 = _3537 * _3537;
                                float _3550 = (fma(_2704, _3430.z, fma(_2703, _3430.y, _3430.x * _2702)) + _3430.w) / _3491;
                                float _3551 = (fma(_2704, _3445.z, fma(_2703, _3445.y, _3445.x * _2702)) + _3445.w) / _3491;
                                float _3555 = 1.0 - dot(vec2(_3550, _3551), vec2(_3550, _3551));
                                float _4606 = isnan(0.0) ? _3555 : (isnan(_3555) ? 0.0 : max(_3555, 0.0));
                                float _3556 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
                                float _3557 = _3556 * (((isnan(0.0) ? _3543 : (isnan(_3543) ? 0.0 : max(_3543, 0.0))) * _3533) / ((_3546 * 0.699999988079071044921875) + 1.0));
                                float _3569 = exp2(log2(1.0 / ((_3546 * 3.5) + 5.0)) * 0.25);
                                float _3570 = 1.0 - _1020;
                                float _3577 = sqrt(1.0 - ((1.0 - (_3570 * _3570)) * (1.0 - (_3569 * _3569))));
                                float _3578 = _3577 * _3577;
                                float _3579 = _3578 * _3578;
                                float _3580 = _3526 - _3030;
                                float _3581 = _3527 - _3031;
                                float _3582 = _3528 - _3032;
                                float _3586 = inversesqrt(dot(vec3(_3580, _3581, _3582), vec3(_3580, _3581, _3582)));
                                float _3590 = dot(vec3(_900, _903, _906), vec3((-0.0) - _3030, (-0.0) - _3031, (-0.0) - _3032));
                                float _4617 = isnan(0.0) ? _3590 : (isnan(_3590) ? 0.0 : max(_3590, 0.0));
                                float _3593 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
                                float _3594 = dot(vec3(_900, _903, _906), vec3(_3586 * _3580, _3586 * _3581, _3586 * _3582));
                                float _4628 = isnan(0.0) ? _3594 : (isnan(_3594) ? 0.0 : max(_3594, 0.0));
                                float _3597 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
                                float _3601 = ((_3597 * _3597) * (_3579 + (-1.0))) + 1.0;
                                float _3602 = _3539 * _3578;
                                float _3603 = _3602 * _3602;
                                float _3609 = ((1.0 - _3603) * dot(vec3(_900, _903, _906), vec3(_3526, _3527, _3528))) + _3603;
                                float _4639 = isnan(0.0) ? _3609 : (isnan(_3609) ? 0.0 : max(_3609, 0.0));
                                float _3610 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
                                float _3611 = 1.0 - _3578;
                                float _3621 = (0.5 / (((_3610 * ((_3593 * _3611) + _3578)) + 9.9999999392252902907785028219223e-09) + (((_3610 * _3611) + _3578) * _3593))) * _3610;
                                float _4650 = isnan(0.0) ? _3621 : (isnan(_3621) ? 0.0 : max(_3621, 0.0));
                                float _3631 = (_3556 * _3533) * (((_3579 * 3.1415927410125732421875) * (isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0)))) / ((_3601 * _3601) * ((_3546 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3557 * _3403.z;
                                frontier_phi_75_pred_1 = _3557 * _3403.y;
                                frontier_phi_75_pred_2 = _3557 * _3403.x;
                                frontier_phi_75_pred_3 = _3631 * _3415.z;
                                frontier_phi_75_pred_4 = _3631 * _3415.y;
                                frontier_phi_75_pred_5 = _3631 * _3415.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3640 = frontier_phi_75_pred;
                            _3639 = frontier_phi_75_pred_1;
                            _3638 = frontier_phi_75_pred_2;
                            _3637 = frontier_phi_75_pred_3;
                            _3636 = frontier_phi_75_pred_4;
                            _3635 = frontier_phi_75_pred_5;
                            _3345 = _3638 + _3358;
                            _3346 = _3639 + _3359;
                            _3347 = _3640 + _3360;
                            _3342 = _3635 + _3355;
                            _3343 = _3636 + _3356;
                            _3344 = _3637 + _3357;
                            if (_3362 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3355 = _3342;
                                _3356 = _3343;
                                _3357 = _3344;
                                _3358 = _3345;
                                _3359 = _3346;
                                _3360 = _3347;
                                _3361 = _3362;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3347;
                        frontier_phi_69_pred_1 = _3346;
                        frontier_phi_69_pred_2 = _3345;
                        frontier_phi_69_pred_3 = _3344;
                        frontier_phi_69_pred_4 = _3343;
                        frontier_phi_69_pred_5 = _3342;
                    }
                    _3015 = frontier_phi_69_pred;
                    _3013 = frontier_phi_69_pred_1;
                    _3011 = frontier_phi_69_pred_2;
                    _3009 = frontier_phi_69_pred_3;
                    _3007 = frontier_phi_69_pred_4;
                    _3005 = frontier_phi_69_pred_5;
                    uint _3150 = _3149 + 1u;
                    if (_3150 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3143 = _3005;
                        _3144 = _3007;
                        _3145 = _3009;
                        _3146 = _3011;
                        _3147 = _3013;
                        _3148 = _3015;
                        _3149 = _3150;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _3015;
                frontier_phi_57_58_ladder_1 = _3013;
                frontier_phi_57_58_ladder_2 = _3011;
                frontier_phi_57_58_ladder_3 = _3009;
                frontier_phi_57_58_ladder_4 = _3007;
                frontier_phi_57_58_ladder_5 = _3005;
            }
            else
            {
                frontier_phi_57_58_ladder = _2893;
                frontier_phi_57_58_ladder_1 = _2891;
                frontier_phi_57_58_ladder_2 = _2889;
                frontier_phi_57_58_ladder_3 = _2887;
                frontier_phi_57_58_ladder_4 = _2885;
                frontier_phi_57_58_ladder_5 = _2883;
            }
            _3004 = frontier_phi_57_58_ladder_5;
            _3006 = frontier_phi_57_58_ladder_4;
            _3008 = frontier_phi_57_58_ladder_3;
            _3010 = frontier_phi_57_58_ladder_2;
            _3012 = frontier_phi_57_58_ladder_1;
            _3014 = frontier_phi_57_58_ladder;
        }
        float _3019 = isnan(1.0) ? _1004 : (isnan(_1004) ? 1.0 : min(_1004, 1.0));
        _2760 = (_3019 * _3010) + _2194;
        _2762 = (_3019 * _3012) + _2196;
        _2764 = (_3019 * _3014) + _2198;
        _2766 = ((_3004 * _989) * _3019) + _2542;
        _2768 = ((_3006 * _991) * _3019) + _2544;
        _2770 = ((_3008 * _992) * _3019) + _2546;
    }
    else
    {
        _2760 = _2194;
        _2762 = _2196;
        _2764 = _2198;
        _2766 = _2542;
        _2768 = _2544;
        _2770 = _2546;
    }
    uint _2776 = _933 + uint(cbMatDynParam._m0[0u].w);
    float _2784 = ((cbMtdParam._m0[11u].x * cbMtdParam._m0[22u].z) * _733.x) * cbInstanceData._m0[_2776].x;
    float _2787 = ((cbMtdParam._m0[11u].y * cbMtdParam._m0[22u].z) * _733.y) * cbInstanceData._m0[_2776].y;
    float _2790 = ((cbMtdParam._m0[11u].z * cbMtdParam._m0[22u].z) * _733.z) * cbInstanceData._m0[_2776].z;
    float _4666 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
    float _4677 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _4688 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _2807 = (((isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0))) * (_2760 + ((isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0))) * _1004))) + ((_2766 + ((isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0))) * _1813)) * cbPerFrame._m0[3u].x)) + _2784;
    float _2809 = (_2787 + ((_2768 + ((isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0))) * _1813)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0))) * (_2762 + ((isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0))) * _1004)));
    float _2811 = (_2790 + ((_2770 + ((isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0))) * _1813)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0))) * (_2764 + ((isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0))) * _1004)));
    float _4714 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2824 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
    uint _2825 = _932 + 6u;
    float _2833 = _877 / cbSceneParam._m0[86u].x;
    float _2834 = _878 / cbSceneParam._m0[86u].y;
    vec4 _2848 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2833, _2834, (log2((isnan(cbSceneParam._m0[77u].w) ? _812 : (isnan(_812) ? cbSceneParam._m0[77u].w : min(_812, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2850 = _2848.x;
    float _2851 = _2848.y;
    float _2852 = _2848.z;
    float _2853 = _2848.w;
    float _2945;
    float _2947;
    float _2949;
    float _2951;
    if (_812 > cbSceneParam._m0[78u].w)
    {
        float _2908 = isnan(_812) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _812 : min(cbSceneParam._m0[80u].w, _812));
        float _2909 = _2908 / _812;
        float _2920 = _2909 * _862;
        float _2921 = _863 * _2909;
        float _2922 = (-0.0) - _2921;
        float _2923 = _2909 * _864;
        float _2925 = (cbSceneParam._m0[77u].w * _2922) / _2908;
        float _2926 = _2925 + cbSceneParam._m0[79u].w;
        float _2927 = cbSceneParam._m0[79u].w - _2921;
        float _2933 = sqrt(((_2920 * _2920) + (_2921 * _2921)) + (_2923 * _2923));
        float _2936 = (1.0 - (cbSceneParam._m0[77u].w / _2908)) * _2933;
        float _2941 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2943 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3105;
        if (abs((_2922 - _2925) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3105 = ((((_2926 > 0.0) ? exp2(_2941 * _2926) : (2.0 - exp2(_2943 * _2926))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2936;
        }
        else
        {
            float _3065 = 1.0 / cbSceneParam._m0[80u].x;
            float _3066 = isnan(_2927) ? _2926 : (isnan(_2926) ? _2927 : max(_2926, _2927));
            float _3067 = isnan(_2927) ? _2926 : (isnan(_2926) ? _2927 : min(_2926, _2927));
            float _3076 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : min(_3066, 0.0));
            float _3077 = isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : min(_3067, 0.0));
            _3105 = ((abs(_2933 / _2922) * cbSceneParam._m0[80u].y) * ((((_3076 - _3077) * 2.0) - ((exp2(_2941 * (isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0)))) - exp2(_2941 * (isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0))))) * _3065)) - ((exp2(_2943 * _3076) - exp2(_2943 * _3077)) * _3065))) + (_2936 * cbSceneParam._m0[80u].z);
        }
        vec4 _3107 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2833, _2834, 1.0), 0.0);
        float _3116 = exp2((_3105 * (-1.44269502162933349609375)) * (1.0 - _3107.w));
        float _3117 = log2(_3116);
        float _3133 = log2(_2853);
        _2945 = (exp2(_3133 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3117 * cbSceneParam._m0[78u].x)) * _3107.x) / cbSceneParam._m0[78u].x)) + _2850;
        _2947 = (exp2(_3133 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3117 * cbSceneParam._m0[78u].y)) * _3107.y) / cbSceneParam._m0[78u].y)) + _2851;
        _2949 = (exp2(_3133 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3117 * cbSceneParam._m0[78u].z)) * _3107.z) / cbSceneParam._m0[78u].z)) + _2852;
        _2951 = _3116 * _2853;
    }
    else
    {
        _2945 = _2850;
        _2947 = _2851;
        _2949 = _2852;
        _2951 = _2853;
    }
    float _2963 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2964 = _2963 == 3.0;
    float _2965 = log2(_2951);
    float _2969 = exp2(_2965 * cbSceneParam._m0[78u].x);
    float _2970 = exp2(_2965 * cbSceneParam._m0[78u].y);
    float _2971 = exp2(_2965 * cbSceneParam._m0[78u].z);
    float _2972 = _2969 * (isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0)));
    float _2973 = _2970 * (isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0)));
    float _2974 = _2971 * (isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0)));
    float _2983 = (_2963 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2983 * (_2964 ? _2972 : (_2972 + (cbSceneParam._m0[72u].w * _2945)));
    SV_Target.y = _2983 * (_2964 ? _2973 : (_2973 + (cbSceneParam._m0[72u].w * _2947)));
    SV_Target.z = _2983 * (_2964 ? _2974 : (_2974 + (cbSceneParam._m0[72u].w * _2949)));
    SV_Target.w = cbInstanceData._m0[_2825].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2784) * _2824) * _2969) * _2983;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2787) * _2824) * _2970) * _2983;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2790) * _2824) * _2971) * _2983;
    SV_Target_1.w = cbInstanceData._m0[_2825].w;
}


