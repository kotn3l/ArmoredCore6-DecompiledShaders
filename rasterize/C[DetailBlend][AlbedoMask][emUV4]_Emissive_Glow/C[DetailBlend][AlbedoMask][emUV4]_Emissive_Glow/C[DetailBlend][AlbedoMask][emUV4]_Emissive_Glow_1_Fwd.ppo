#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 11) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 12) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1373;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _228 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = _235 * NORMAL.x;
    float _237 = _235 * NORMAL.y;
    float _238 = _235 * NORMAL.z;
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _250;
    float _251;
    float _252;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _250 = (-0.0) - _236;
        _251 = (-0.0) - _237;
        _252 = (-0.0) - _238;
    }
    else
    {
        _250 = _236;
        _251 = _237;
        _252 = _238;
    }
    vec4 _267 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _277 = log2(0.0);
    float _279 = exp2(_277 * cbMtdParam._m0[21u].y);
    float _280 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _281 = isnan(1.0) ? _280 : (isnan(_280) ? 1.0 : min(_280, 1.0));
    vec4 _295 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _299 = _295.z;
    float _300 = _295.w;
    float _308 = exp2(log2(_299 * cbMtdParam._m0[21u].w) * cbMtdParam._m0[20u].y);
    float _309 = isnan(0.0) ? _308 : (isnan(_308) ? 0.0 : max(_308, 0.0));
    float _310 = isnan(1.0) ? _309 : (isnan(_309) ? 1.0 : min(_309, 1.0));
    vec4 _323 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    vec4 _346 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _348 = _346.x;
    float _349 = _346.y;
    float _373 = ((cbMtdParam._m0[20u].w * _346.z) * (texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_15, SS_WrapLinear), vec2(((cbMtdParam._m0[20u].z * TEXCOORD.x) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, ((cbMtdParam._m0[20u].z * TEXCOORD.y) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w)).x - _348)) + _348;
    bool _409 = _373 >= 0.25;
    bool _414 = _373 >= 0.3499999940395355224609375;
    bool _419 = _373 >= 0.5;
    bool _424 = _373 >= 0.64999997615814208984375;
    bool _429 = _373 >= 0.75;
    vec4 _457 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _467 = cbMtdParam._m0[9u].x * _457.x;
    float _468 = cbMtdParam._m0[9u].y * _457.y;
    float _469 = cbMtdParam._m0[9u].z * _457.z;
    float _476 = (((((((_429 ? cbMtdParam._m0[14u].x : (_424 ? cbMtdParam._m0[19u].x : (_419 ? cbMtdParam._m0[18u].x : (_414 ? cbMtdParam._m0[17u].x : (_409 ? cbMtdParam._m0[16u].x : cbMtdParam._m0[15u].x))))) - cbMtdParam._m0[10u].x) * _349) + cbMtdParam._m0[10u].x) * _323.x) - _467) * _310) + _467;
    float _477 = (((((((_429 ? cbMtdParam._m0[14u].y : (_424 ? cbMtdParam._m0[19u].y : (_419 ? cbMtdParam._m0[18u].y : (_414 ? cbMtdParam._m0[17u].y : (_409 ? cbMtdParam._m0[16u].y : cbMtdParam._m0[15u].y))))) - cbMtdParam._m0[10u].y) * _349) + cbMtdParam._m0[10u].y) * _323.y) - _468) * _310) + _468;
    float _478 = (((((((_429 ? cbMtdParam._m0[14u].z : (_424 ? cbMtdParam._m0[19u].z : (_419 ? cbMtdParam._m0[18u].z : (_414 ? cbMtdParam._m0[17u].z : (_409 ? cbMtdParam._m0[16u].z : cbMtdParam._m0[15u].z))))) - cbMtdParam._m0[10u].z) * _349) + cbMtdParam._m0[10u].z) * _323.z) - _469) * _310) + _469;
    float _485 = exp2(log2(_300) * cbMtdParam._m0[22u].y);
    vec4 _498 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _518 = (((cbMtdParam._m0[12u].x * _498.x) - _476) * _485) + _476;
    float _519 = (((cbMtdParam._m0[12u].y * _498.y) - _477) * _485) + _477;
    float _520 = (((cbMtdParam._m0[12u].z * _498.z) - _478) * _485) + _478;
    vec4 _532 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _556 = (_267.x * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].x * _532.x) - _518) * _281) + _518);
    float _558 = (_267.y * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].y * _532.y) - _519) * _281) + _519);
    float _560 = (_267.z * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].z * _532.z) - _520) * _281) + _520);
    float _565 = exp2(log2(1.0 - _300) * 0.00999999977648258209228515625);
    float _583 = ((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_11, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x - cbMtdParam._m0[22u].w) * _565) + cbMtdParam._m0[22u].w;
    float _602 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w)).x - _583) + cbMtdParam._m0[21u].z) * _485) + _583;
    float _624 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w)).x - _602) + cbMtdParam._m0[23u].w) * _281) + _602;
    vec4 _637 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _655 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _657 = _655.x;
    float _658 = _655.y;
    float _661 = cbMtdParam._m0[20u].x + _655.z;
    float _664 = (((cbMtdParam._m0[21u].x + _637.z) - _661) * _565) + _661;
    vec4 _676 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _688 = (_299 * 2.0) * ((((_676.z - _664) + cbMtdParam._m0[23u].y) * _485) + _664);
    vec4 _700 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _709 = (((_700.z - _688) + cbMtdParam._m0[22u].x) * _281) + _688;
    vec4 _728 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _743 = ((_637.x - _657) * _565) + _657;
    float _744 = ((_637.y - _658) * _565) + _658;
    float _749 = ((_676.x - _743) * _485) + _743;
    float _750 = ((_676.y - _744) * _485) + _744;
    float _759 = ((((_700.x - _749) * _281) + _749) * 2.0) + (-1.0);
    float _760 = ((((_700.y - _750) * _281) + _750) * 2.0) + (-1.0);
    float _761 = dot(vec2(_759, _760), vec2(_759, _760));
    float _3762 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _766 = sqrt(1.0 - (isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0))));
    float _769 = (cbMtdParam._m0[23u].x * ((_295.x * 2.0) + (-1.0))) + _759;
    float _770 = (cbMtdParam._m0[23u].x * ((_295.y * 2.0) + (-1.0))) + _760;
    float _773 = fma(_766, _250, fma(_770, _242 * TANGENT.x, (_228 * _221) * _769));
    float _776 = fma(_766, _251, fma(_770, _242 * TANGENT.y, (_228 * _222) * _769));
    float _779 = fma(_766, _252, fma(_770, _242 * TANGENT.z, (_228 * _223) * _769));
    float _783 = inversesqrt(dot(vec3(_773, _776, _779), vec3(_773, _776, _779)));
    float _784 = _783 * _773;
    float _785 = _783 * _776;
    float _786 = _783 * _779;
    float _3773 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _787 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
    float _3784 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _3795 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _3806 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _3817 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _791 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
    float _807 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _847 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _857 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _847);
    float _858 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _847);
    float _859 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _847);
    float _863 = inversesqrt(dot(vec3(_857, _858, _859), vec3(_857, _858, _859)));
    float _864 = _857 * _863;
    float _865 = _858 * _863;
    float _866 = _859 * _863;
    float _872 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _873 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _875 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _877 = _875.w;
    float _895 = fma(_786, cbSceneParam._m0[5u].z, fma(_785, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _784));
    float _898 = fma(_786, cbSceneParam._m0[6u].z, fma(_785, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _784));
    float _901 = fma(_786, cbSceneParam._m0[7u].z, fma(_785, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _784));
    vec4 _903 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _914 = (((_903.y - _787) + (_903.w * _787)) * cbMtdParam._m0[3u].x) + _787;
    uint _927 = uint(roundEven(NORMAL.w)) * 13u;
    uint _928 = _927 + 9u;
    uint _929 = _928 + uint(cbMatDynParam._m0[0u].w);
    float _935 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0)))) * cbInstanceData._m0[_929].x;
    float _936 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0)))) * cbInstanceData._m0[_929].y;
    float _937 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0)))) * cbInstanceData._m0[_929].z;
    float _3828 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _938 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
    float _3839 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    float _939 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
    float _3850 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _940 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
    vec4 _941 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _946 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _957 = (((_946.x - _791) + (_946.w * _791)) * cbMtdParam._m0[3u].x) + _791;
    float _970 = (cbMtdParam._m0[3u].x * (((_938 * _877) - _938) + _941.x)) + _938;
    float _971 = (cbMtdParam._m0[3u].x * (((_939 * _877) - _939) + _941.y)) + _939;
    float _972 = (cbMtdParam._m0[3u].x * (((_940 * _877) - _940) + _941.z)) + _940;
    float _973 = 1.0 - _957;
    float _974 = _973 * _970;
    float _975 = _973 * _971;
    float _976 = _973 * _972;
    float _981 = (_970 + (-0.039999999105930328369140625)) * _957;
    float _982 = (_971 + (-0.039999999105930328369140625)) * _957;
    float _983 = (_972 + (-0.039999999105930328369140625)) * _957;
    float _984 = _981 + 0.039999999105930328369140625;
    float _986 = _982 + 0.039999999105930328369140625;
    float _987 = _983 + 0.039999999105930328369140625;
    vec4 _996 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _872, cbSceneParam._m0[86u].y * _873));
    float _999 = _996.x * TEXCOORD_4.z;
    float _1000 = dot(vec3(_784, _785, _786), vec3(_864, _865, _866));
    float _1003 = _1000 * 2.0;
    float _1007 = (_1003 * _784) - _864;
    float _1008 = (_1003 * _785) - _865;
    float _1009 = (_1003 * _786) - _866;
    float _1013 = abs(dot(vec3(_864, _865, _866), vec3(_784, _785, _786)));
    float _3861 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
    float _1015 = sqrt(_914);
    float _1028 = exp2((_1015 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1015 * 3.0));
    float _1034 = (1.0 - _1028) * ((_1015 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1035 = _1028 * _1015;
    float _1063 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1067 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1071 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1372;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1098 = fma(_1071, cbModelParam._m0[26u].z, fma(_1067, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1063));
        float _1102 = fma(_1071, cbModelParam._m0[27u].z, fma(_1067, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1063));
        float _1106 = fma(_1071, cbModelParam._m0[28u].z, fma(_1067, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1063));
        float _1130 = _1063 + _784;
        float _1131 = _1067 + _785;
        float _1132 = _1071 + _786;
        float _1142 = fma(_1132, cbModelParam._m0[26u].z, fma(_1131, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1130)) - _1098;
        float _1143 = fma(_1132, cbModelParam._m0[27u].z, fma(_1131, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1130)) - _1102;
        float _1144 = fma(_1132, cbModelParam._m0[28u].z, fma(_1131, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1130)) - _1106;
        float _1148 = inversesqrt(dot(vec3(_1142, _1143, _1144), vec3(_1142, _1143, _1144)));
        float _1161 = ((_1148 * _1142) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1098 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1162 = ((_1148 * _1143) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1102 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1163 = ((_1148 * _1144) / cbModelParam._m0[34u].z) + ((((((_1106 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1166 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1161, _1162, _1163), 0.0);
        vec4 _1173 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1161, _1162, _1163), 0.0);
        vec4 _1180 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1161, _1162, _1163), 0.0);
        vec4 _1187 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1161, _1162, _1163), 0.0);
        float _1200 = exp2((_1166.w + (-0.5)) * 20.0) * 2.0;
        float _1201 = _1200 * (_1166.x + (-0.5));
        float _1202 = _1200 * (_1166.y + (-0.5));
        float _1203 = _1200 * (_1166.z + (-0.5));
        float _1210 = exp2((_1173.w + (-0.5)) * 20.0) * 2.0;
        float _1211 = _1210 * (_1173.x + (-0.5));
        float _1212 = _1210 * (_1173.y + (-0.5));
        float _1213 = _1210 * (_1173.z + (-0.5));
        float _1220 = exp2((_1180.w + (-0.5)) * 20.0) * 2.0;
        float _1221 = _1220 * (_1180.x + (-0.5));
        float _1222 = _1220 * (_1180.y + (-0.5));
        float _1223 = _1220 * (_1180.z + (-0.5));
        float _1230 = exp2((_1187.w + (-0.5)) * 20.0) * 2.0;
        float _1231 = _1230 * (_1187.x + (-0.5));
        float _1232 = _1230 * (_1187.y + (-0.5));
        float _1233 = _1230 * (_1187.z + (-0.5));
        float _1234 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1235 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1236 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1237 = _1201 * 0.5;
        float _1238 = _1211 * 0.5;
        float _1239 = _1221 * 0.5;
        float _1240 = dot(vec3(_1237, _1238, _1239), vec3(_1237, _1238, _1239));
        float _1245 = (_1240 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1240);
        float _1254 = (dot(vec3(_784, _785, _786), vec3(_1245 * _1237, _1245 * _1238, _1245 * _1239)) + 1.0) * 0.5;
        float _3887 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1264 = sqrt(((_1238 * _1238) + (_1237 * _1237)) + (_1239 * _1239)) / (_1234 + 9.9999997473787516355514526367188e-06);
        float _3898 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
        float _1266 = _1265 * 2.0;
        float _1270 = (1.0 - _1265) / (_1265 + 1.0);
        float _3909 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1280 = ((((1.0 - _1271) * (_1266 + 2.0)) * exp2(log2(isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0))) * (_1266 + 1.0))) + _1271) * _1234;
        float _1281 = _1202 * 0.5;
        float _1282 = _1212 * 0.5;
        float _1283 = _1222 * 0.5;
        float _1284 = dot(vec3(_1281, _1282, _1283), vec3(_1281, _1282, _1283));
        float _1289 = (_1284 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1284);
        float _1297 = (dot(vec3(_784, _785, _786), vec3(_1289 * _1281, _1289 * _1282, _1289 * _1283)) + 1.0) * 0.5;
        float _3920 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1306 = sqrt(((_1282 * _1282) + (_1281 * _1281)) + (_1283 * _1283)) / (_1235 + 9.9999997473787516355514526367188e-06);
        float _3931 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _1308 = _1307 * 2.0;
        float _1312 = (1.0 - _1307) / (_1307 + 1.0);
        float _3942 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _1322 = ((((1.0 - _1313) * (_1308 + 2.0)) * exp2(log2(isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))) * (_1308 + 1.0))) + _1313) * _1235;
        float _1323 = _1203 * 0.5;
        float _1324 = _1213 * 0.5;
        float _1325 = _1223 * 0.5;
        float _1326 = dot(vec3(_1323, _1324, _1325), vec3(_1323, _1324, _1325));
        float _1331 = (_1326 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1326);
        float _1339 = (dot(vec3(_784, _785, _786), vec3(_1331 * _1323, _1331 * _1324, _1331 * _1325)) + 1.0) * 0.5;
        float _3953 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1348 = sqrt(((_1324 * _1324) + (_1323 * _1323)) + (_1325 * _1325)) / (_1236 + 9.9999997473787516355514526367188e-06);
        float _3964 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1349 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
        float _1350 = _1349 * 2.0;
        float _1354 = (1.0 - _1349) / (_1349 + 1.0);
        float _3975 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _1364 = ((((1.0 - _1355) * (_1350 + 2.0)) * exp2(log2(isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0))) * (_1350 + 1.0))) + _1355) * _1236;
        _1372 = _1203;
        _1374 = _1202;
        _1375 = _1201;
        _1376 = _1213;
        _1377 = _1212;
        _1378 = _1211;
        _1379 = _1223;
        _1380 = _1222;
        _1381 = _1221;
        _1382 = _1236;
        _1383 = _1235;
        _1384 = _1234;
        _1385 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0)));
        _1386 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0)));
        _1387 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0)));
    }
    else
    {
        _1372 = _1373;
        _1374 = _1373;
        _1375 = _1373;
        _1376 = _1373;
        _1377 = _1373;
        _1378 = _1373;
        _1379 = _1373;
        _1380 = _1373;
        _1381 = _1373;
        _1382 = _1373;
        _1383 = _1373;
        _1384 = _1373;
        _1385 = 0.0;
        _1386 = 0.0;
        _1387 = 0.0;
    }
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1413 = fma(_1071, cbModelParam._m0[30u].z, fma(_1067, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1063));
        float _1417 = fma(_1071, cbModelParam._m0[31u].z, fma(_1067, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1063));
        float _1421 = fma(_1071, cbModelParam._m0[32u].z, fma(_1067, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1063));
        float _1444 = _1063 + _784;
        float _1445 = _1067 + _785;
        float _1446 = _1071 + _786;
        float _1456 = fma(_1446, cbModelParam._m0[30u].z, fma(_1445, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1444)) - _1413;
        float _1457 = fma(_1446, cbModelParam._m0[31u].z, fma(_1445, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1444)) - _1417;
        float _1458 = fma(_1446, cbModelParam._m0[32u].z, fma(_1445, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1444)) - _1421;
        float _1462 = inversesqrt(dot(vec3(_1456, _1457, _1458), vec3(_1456, _1457, _1458)));
        float _1475 = ((_1462 * _1456) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1413 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1476 = ((_1462 * _1457) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1417 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1477 = ((_1462 * _1458) / cbModelParam._m0[35u].z) + ((((((_1421 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1479 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1475, _1476, _1477), 0.0);
        vec4 _1486 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1475, _1476, _1477), 0.0);
        vec4 _1493 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1475, _1476, _1477), 0.0);
        vec4 _1500 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1475, _1476, _1477), 0.0);
        float _1512 = exp2((_1479.w + (-0.5)) * 20.0) * 2.0;
        float _1513 = _1512 * (_1479.x + (-0.5));
        float _1514 = _1512 * (_1479.y + (-0.5));
        float _1515 = _1512 * (_1479.z + (-0.5));
        float _1522 = exp2((_1486.w + (-0.5)) * 20.0) * 2.0;
        float _1523 = _1522 * (_1486.x + (-0.5));
        float _1524 = _1522 * (_1486.y + (-0.5));
        float _1525 = _1522 * (_1486.z + (-0.5));
        float _1532 = exp2((_1493.w + (-0.5)) * 20.0) * 2.0;
        float _1533 = _1532 * (_1493.x + (-0.5));
        float _1534 = _1532 * (_1493.y + (-0.5));
        float _1535 = _1532 * (_1493.z + (-0.5));
        float _1542 = exp2((_1500.w + (-0.5)) * 20.0) * 2.0;
        float _1543 = _1542 * (_1500.x + (-0.5));
        float _1544 = _1542 * (_1500.y + (-0.5));
        float _1545 = _1542 * (_1500.z + (-0.5));
        float _1546 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1547 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1548 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1549 = _1513 * 0.5;
        float _1550 = _1523 * 0.5;
        float _1551 = _1533 * 0.5;
        float _1552 = dot(vec3(_1549, _1550, _1551), vec3(_1549, _1550, _1551));
        float _1557 = (_1552 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1552);
        float _1565 = (dot(vec3(_784, _785, _786), vec3(_1557 * _1549, _1557 * _1550, _1557 * _1551)) + 1.0) * 0.5;
        float _4016 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1574 = sqrt(((_1550 * _1550) + (_1549 * _1549)) + (_1551 * _1551)) / (_1546 + 9.9999997473787516355514526367188e-06);
        float _4027 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1575 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _1576 = _1575 * 2.0;
        float _1580 = (1.0 - _1575) / (_1575 + 1.0);
        float _4038 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1581 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1590 = ((((1.0 - _1581) * (_1576 + 2.0)) * exp2(log2(isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * (_1576 + 1.0))) + _1581) * _1546;
        float _1591 = _1514 * 0.5;
        float _1592 = _1524 * 0.5;
        float _1593 = _1534 * 0.5;
        float _1594 = dot(vec3(_1591, _1592, _1593), vec3(_1591, _1592, _1593));
        float _1599 = (_1594 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1594);
        float _1607 = (dot(vec3(_784, _785, _786), vec3(_1599 * _1591, _1599 * _1592, _1599 * _1593)) + 1.0) * 0.5;
        float _4049 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1616 = sqrt(((_1592 * _1592) + (_1591 * _1591)) + (_1593 * _1593)) / (_1547 + 9.9999997473787516355514526367188e-06);
        float _4060 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1617 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _1618 = _1617 * 2.0;
        float _1622 = (1.0 - _1617) / (_1617 + 1.0);
        float _4071 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1623 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _1632 = ((((1.0 - _1623) * (_1618 + 2.0)) * exp2(log2(isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) * (_1618 + 1.0))) + _1623) * _1547;
        float _1633 = _1515 * 0.5;
        float _1634 = _1525 * 0.5;
        float _1635 = _1535 * 0.5;
        float _1636 = dot(vec3(_1633, _1634, _1635), vec3(_1633, _1634, _1635));
        float _1641 = (_1636 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1636);
        float _1649 = (dot(vec3(_784, _785, _786), vec3(_1641 * _1633, _1641 * _1634, _1641 * _1635)) + 1.0) * 0.5;
        float _4082 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1658 = sqrt(((_1634 * _1634) + (_1633 * _1633)) + (_1635 * _1635)) / (_1548 + 9.9999997473787516355514526367188e-06);
        float _4093 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1659 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _1660 = _1659 * 2.0;
        float _1664 = (1.0 - _1659) / (_1659 + 1.0);
        float _4104 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1665 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
        float _1674 = ((((1.0 - _1665) * (_1660 + 2.0)) * exp2(log2(isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) * (_1660 + 1.0))) + _1665) * _1548;
        _1682 = _1515;
        _1683 = _1514;
        _1684 = _1513;
        _1685 = _1525;
        _1686 = _1524;
        _1687 = _1523;
        _1688 = _1535;
        _1689 = _1534;
        _1690 = _1533;
        _1691 = _1548;
        _1692 = _1547;
        _1693 = _1546;
        _1694 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0)));
        _1695 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0)));
        _1696 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0)));
    }
    else
    {
        _1682 = _1373;
        _1683 = _1373;
        _1684 = _1373;
        _1685 = _1373;
        _1686 = _1373;
        _1687 = _1373;
        _1688 = _1373;
        _1689 = _1373;
        _1690 = _1373;
        _1691 = _1373;
        _1692 = _1373;
        _1693 = _1373;
        _1694 = 0.0;
        _1695 = 0.0;
        _1696 = 0.0;
    }
    float _1706 = (cbModelParam._m0[1u].x * (_1694 - _1385)) + _1385;
    float _1707 = (cbModelParam._m0[1u].x * (_1695 - _1386)) + _1386;
    float _1708 = (cbModelParam._m0[1u].x * (_1696 - _1387)) + _1387;
    float _1729 = fma(_1708, cbSceneParam._m0[89u].z, fma(_1707, cbSceneParam._m0[89u].y, _1706 * cbSceneParam._m0[89u].x));
    float _1732 = fma(_1708, cbSceneParam._m0[90u].z, fma(_1707, cbSceneParam._m0[90u].y, _1706 * cbSceneParam._m0[90u].x));
    float _1735 = fma(_1708, cbSceneParam._m0[91u].z, fma(_1707, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1706));
    float _1750 = _1007 * 0.5;
    float _1751 = _1008 * 0.5;
    float _1752 = _1009 * 0.5;
    float _1753 = dot(vec4(_1750, _1751, _1752, 1.0), vec4(_1684, _1687, _1690, _1693));
    float _1756 = dot(vec4(_1750, _1751, _1752, 1.0), vec4(_1683, _1686, _1689, _1692));
    float _1759 = dot(vec4(_1750, _1751, _1752, 1.0), vec4(_1682, _1685, _1688, _1691));
    float _1793;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1766 = dot(vec4(_1750, _1751, _1752, 1.0), vec4(_1372, _1376, _1379, _1382));
        float _1770 = dot(vec4(_1750, _1751, _1752, 1.0), vec4(_1374, _1377, _1380, _1383));
        float _1774 = dot(vec4(_1750, _1751, _1752, 1.0), vec4(_1375, _1378, _1381, _1384));
        float _1781 = dot(vec4(cbModelParam._m0[39u]), vec4(_1750, _1751, _1752, 1.0));
        _1793 = dot(vec3(isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0)), isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0)), isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1781) ? 0.0 : (isnan(0.0) ? _1781 : max(0.0, _1781))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1793 = 1.0;
    }
    float _1804;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1795 = dot(vec4(cbModelParam._m0[40u]), vec4(_1750, _1751, _1752, 1.0));
        _1804 = dot(vec3(isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0)), isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0)), isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1795) ? 0.0 : (isnan(0.0) ? _1795 : max(0.0, _1795))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1804 = 1.0;
    }
    float _1808 = (_1804 * cbModelParam._m0[1u].x) + (_1793 * (1.0 - cbModelParam._m0[1u].x));
    float _1818 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _914);
    float _1819 = isnan(_1818) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1818 : min(cbModelParam._m0[25u].z, _1818));
    float _1899;
    float _1901;
    float _1903;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1866 = fma(_1071, cbModelParam._m0[13u].z, fma(_1067, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1063)) + cbModelParam._m0[13u].w;
        float _1870 = fma(_1071, cbModelParam._m0[14u].z, fma(_1067, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1063)) + cbModelParam._m0[14u].w;
        float _1874 = fma(_1071, cbModelParam._m0[15u].z, fma(_1067, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1063)) + cbModelParam._m0[15u].w;
        float _1877 = fma(_1009, cbModelParam._m0[13u].z, fma(_1008, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1007));
        float _1880 = fma(_1009, cbModelParam._m0[14u].z, fma(_1008, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1007));
        float _1883 = fma(_1009, cbModelParam._m0[15u].z, fma(_1008, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1007));
        float _1911;
        if (_1877 > 0.0)
        {
            _1911 = abs((1.0 - _1866) / _1877);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1877 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1866 + 1.0) / _1877);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1911 = frontier_phi_16_14_ladder;
        }
        float _2113;
        if (_1880 > 0.0)
        {
            _2113 = abs((1.0 - _1870) / _1880);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1880 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1870 + 1.0) / _1880);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2113 = frontier_phi_25_21_ladder;
        }
        float _2367;
        if (_1883 > 0.0)
        {
            _2367 = abs((1.0 - _1874) / _1883);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1883 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1874 + 1.0) / _1883);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2367 = frontier_phi_37_32_ladder;
        }
        float _2369 = isnan(_2113) ? _1911 : (isnan(_1911) ? _2113 : min(_1911, _2113));
        float _2370 = isnan(_2367) ? _2369 : (isnan(_2369) ? _2367 : min(_2369, _2367));
        float _2374 = (_2370 * _1877) + _1866;
        float _2375 = (_2370 * _1880) + _1870;
        float _2376 = (_2370 * _1883) + _1874;
        float _2377 = _2370 * 9.9999997473787516355514526367188e-05;
        float _2379 = (-1.0) - _2377;
        float _2381 = _2377 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2376 > _2381) || ((_2376 < _2379) || ((_2375 > _2381) || ((_2375 < _2379) || ((_2374 < _2379) || (_2374 > _2381))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2504 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2376, cbModelParam._m0[9u].z, fma(_2375, cbModelParam._m0[9u].y, _2374 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2376, cbModelParam._m0[10u].z, fma(_2375, cbModelParam._m0[10u].y, _2374 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2376, cbModelParam._m0[11u].z, fma(_2375, cbModelParam._m0[11u].y, _2374 * cbModelParam._m0[11u].x))), _1819);
            frontier_phi_15_37_ladder = _2504.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2504.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2504.x * cbModelParam._m0[1u].y;
        }
        _1899 = frontier_phi_15_37_ladder_2;
        _1901 = frontier_phi_15_37_ladder_1;
        _1903 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1887 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1007, _1008, _1009), _1819);
        _1899 = _1887.x * cbModelParam._m0[1u].y;
        _1901 = _1887.y * cbModelParam._m0[1u].y;
        _1903 = _1887.z * cbModelParam._m0[1u].y;
    }
    float _1907 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _914);
    float _1908 = isnan(_1907) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1907 : min(cbModelParam._m0[25u].w, _1907));
    float _1997;
    float _1999;
    float _2001;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1961 = fma(_1071, cbModelParam._m0[21u].z, fma(_1067, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1063)) + cbModelParam._m0[21u].w;
        float _1965 = fma(_1071, cbModelParam._m0[22u].z, fma(_1067, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1063)) + cbModelParam._m0[22u].w;
        float _1969 = fma(_1071, cbModelParam._m0[23u].z, fma(_1067, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1063)) + cbModelParam._m0[23u].w;
        float _1972 = fma(_1009, cbModelParam._m0[21u].z, fma(_1008, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1007));
        float _1975 = fma(_1009, cbModelParam._m0[22u].z, fma(_1008, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1007));
        float _1978 = fma(_1009, cbModelParam._m0[23u].z, fma(_1008, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1007));
        float _2118;
        if (_1972 > 0.0)
        {
            _2118 = abs((1.0 - _1961) / _1972);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1972 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1961 + 1.0) / _1972);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2118 = frontier_phi_27_23_ladder;
        }
        float _2394;
        if (_1975 > 0.0)
        {
            _2394 = abs((1.0 - _1965) / _1975);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1975 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1965 + 1.0) / _1975);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2394 = frontier_phi_39_34_ladder;
        }
        float _2607;
        if (_1978 > 0.0)
        {
            _2607 = abs((1.0 - _1969) / _1978);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1978 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1969 + 1.0) / _1978);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2607 = frontier_phi_48_45_ladder;
        }
        float _2609 = isnan(_2394) ? _2118 : (isnan(_2118) ? _2394 : min(_2118, _2394));
        float _2610 = isnan(_2607) ? _2609 : (isnan(_2609) ? _2607 : min(_2609, _2607));
        float _2614 = (_2610 * _1972) + _1961;
        float _2615 = (_2610 * _1975) + _1965;
        float _2616 = (_2610 * _1978) + _1969;
        float _2617 = _2610 * 9.9999997473787516355514526367188e-05;
        float _2618 = (-1.0) - _2617;
        float _2620 = _2617 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2616 > _2620) || ((_2616 < _2618) || ((_2615 > _2620) || ((_2615 < _2618) || ((_2614 < _2618) || (_2614 > _2620))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2849 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2616, cbModelParam._m0[17u].z, fma(_2615, cbModelParam._m0[17u].y, _2614 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2616, cbModelParam._m0[18u].z, fma(_2615, cbModelParam._m0[18u].y, _2614 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2616, cbModelParam._m0[19u].z, fma(_2615, cbModelParam._m0[19u].y, _2614 * cbModelParam._m0[19u].x))), _1908);
            frontier_phi_24_48_ladder = _2849.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2849.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2849.x * cbModelParam._m0[1u].z;
        }
        _1997 = frontier_phi_24_48_ladder_2;
        _1999 = frontier_phi_24_48_ladder_1;
        _2001 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1981 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1007, _1008, _1009), _1908);
        _1997 = _1981.x * cbModelParam._m0[1u].z;
        _1999 = _1981.y * cbModelParam._m0[1u].z;
        _2001 = _1981.z * cbModelParam._m0[1u].z;
    }
    float _2014 = (((_1034 * _984) + _1035) * _999) * ((cbModelParam._m0[1u].w * (_1997 - _1899)) + _1899);
    float _2016 = (((_1034 * _986) + _1035) * _999) * ((cbModelParam._m0[1u].w * (_1999 - _1901)) + _1901);
    float _2018 = (((_1034 * _987) + _1035) * _999) * ((cbModelParam._m0[1u].w * (_2001 - _1903)) + _1903);
    float _2021 = fma(_2018, cbSceneParam._m0[89u].z, fma(_2016, cbSceneParam._m0[89u].y, _2014 * cbSceneParam._m0[89u].x));
    float _2024 = fma(_2018, cbSceneParam._m0[90u].z, fma(_2016, cbSceneParam._m0[90u].y, _2014 * cbSceneParam._m0[90u].x));
    float _2027 = fma(_2018, cbSceneParam._m0[91u].z, fma(_2016, cbSceneParam._m0[91u].y, _2014 * cbSceneParam._m0[91u].x));
    uvec4 _2037 = floatBitsToUint(cbInstanceData._m0[_927 + 5u]);
    uint _2039 = _2037.x * 14u;
    uint _2040 = _2039 + 13u;
    float _2047 = _999 + (-1.0);
    float _2052 = (cbLight._m0[_2040].x * _2047) + 1.0;
    float _2053 = (cbLight._m0[_2040].y * _2047) + 1.0;
    float _2054 = (cbLight._m0[_2040].z * _2047) + 1.0;
    float _2055 = (cbLight._m0[_2040].w * _2047) + 1.0;
    uint _2056 = _2039 + 5u;
    float _2062 = isnan(1.0) ? _2053 : (isnan(_2053) ? 1.0 : min(_2053, 1.0));
    uint _2066 = _2039 + 4u;
    float _2072 = isnan(1.0) ? _2052 : (isnan(_2052) ? 1.0 : min(_2052, 1.0));
    uint _2076 = _2039 | 1u;
    float _2087 = dot(vec3(cbLight._m0[_2039].xyz), vec3(_784, _785, _786));
    float _2090 = dot(vec3(cbLight._m0[_2076].xyz), vec3(_784, _785, _786));
    float _4240 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
    float _4251 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
    float _2095 = (isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0))) * 0.3183098733425140380859375;
    float _2097 = (isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0))) * 0.3183098733425140380859375;
    float _2104 = ((cbLight._m0[_2056].x * _2062) * _2097) + ((cbLight._m0[_2066].x * _2072) * _2095);
    float _2105 = ((_2062 * cbLight._m0[_2056].y) * _2097) + ((_2072 * cbLight._m0[_2066].y) * _2095);
    float _2106 = ((_2062 * cbLight._m0[_2056].z) * _2097) + ((_2072 * cbLight._m0[_2066].z) * _2095);
    uvec4 _2110 = floatBitsToUint(cbLight._m0[_2039 + 12u]);
    bool _2112 = _2110.x == 0u;
    float _2123;
    float _2125;
    float _2127;
    if (_2112)
    {
        _2123 = _2104;
        _2125 = _2105;
        _2127 = _2106;
    }
    else
    {
        uint _2131 = _2039 + 6u;
        float _2147 = (dot(vec3(cbLight._m0[_2039 + 2u].xyz), vec3(_784, _785, _786)) * 0.5) + 0.5;
        float _2148 = _2147 * _2147;
        float _4262 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
        float _2149 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _2150 = isnan(1.0) ? _2054 : (isnan(_2054) ? 1.0 : min(_2054, 1.0));
        _2123 = (((cbLight._m0[_2131].x * 0.3183098733425140380859375) * _2149) * _2150) + _2104;
        _2125 = (((cbLight._m0[_2131].y * 0.3183098733425140380859375) * _2149) * _2150) + _2105;
        _2127 = (((cbLight._m0[_2131].z * 0.3183098733425140380859375) * _2149) * _2150) + _2106;
    }
    bool _2130 = _2110.y == 0u;
    float _2168;
    float _2170;
    float _2172;
    if (_2130)
    {
        _2168 = _2123;
        _2170 = _2125;
        _2172 = _2127;
    }
    else
    {
        uint _2338 = _2039 + 7u;
        float _2354 = (dot(vec3(cbLight._m0[_2039 + 3u].xyz), vec3(_784, _785, _786)) * 0.5) + 0.5;
        float _2355 = _2354 * _2354;
        float _4278 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
        float _2356 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _2357 = isnan(1.0) ? _2055 : (isnan(_2055) ? 1.0 : min(_2055, 1.0));
        _2168 = (((cbLight._m0[_2338].x * 0.3183098733425140380859375) * _2356) * _2357) + _2123;
        _2170 = (((cbLight._m0[_2338].y * 0.3183098733425140380859375) * _2356) * _2357) + _2125;
        _2172 = (((cbLight._m0[_2338].z * 0.3183098733425140380859375) * _2356) * _2357) + _2127;
    }
    uint _2175 = _2039 + 8u;
    float _2188 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2039].w)) * _914) * 0.949999988079071044921875);
    float _2189 = _2188 * _2188;
    float _2190 = cbLight._m0[_2039].x + _864;
    float _2191 = cbLight._m0[_2039].y + _865;
    float _2192 = cbLight._m0[_2039].z + _866;
    float _2196 = inversesqrt(dot(vec3(_2190, _2191, _2192), vec3(_2190, _2191, _2192)));
    float _2197 = _2196 * _2190;
    float _2198 = _2196 * _2191;
    float _2199 = _2196 * _2192;
    float _2200 = dot(vec3(_784, _785, _786), vec3(cbLight._m0[_2039].xyz));
    float _4294 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
    float _2203 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
    float _4305 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _2204 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
    float _2205 = dot(vec3(_784, _785, _786), vec3(_2197, _2198, _2199));
    float _4316 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
    float _2208 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
    float _2209 = dot(vec3(cbLight._m0[_2039].xyz), vec3(_2197, _2198, _2199));
    float _4327 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
    float _2213 = _2189 * _2189;
    float _2217 = ((_2208 * _2208) * (_2213 + (-1.0))) + 1.0;
    float _2225 = exp2(log2(1.0 - (isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0)))) * 5.0);
    float _2226 = 0.959999978542327880859375 - _981;
    float _2228 = 0.959999978542327880859375 - _982;
    float _2229 = 0.959999978542327880859375 - _983;
    float _2236 = 1.0 - _2189;
    float _2247 = (0.5 / (((_2204 * ((_2203 * _2236) + _2189)) + 9.9999999392252902907785028219223e-09) + (((_2204 * _2236) + _2189) * _2203))) * _2203;
    float _4338 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
    float _2249 = (isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * (_2213 / ((_2217 * _2217) * 3.141590118408203125));
    uint _2260 = _2039 + 9u;
    float _2271 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2076].w)) * _914) * 0.949999988079071044921875);
    float _2272 = _2271 * _2271;
    float _2273 = cbLight._m0[_2076].x + _864;
    float _2274 = cbLight._m0[_2076].y + _865;
    float _2275 = cbLight._m0[_2076].z + _866;
    float _2279 = inversesqrt(dot(vec3(_2273, _2274, _2275), vec3(_2273, _2274, _2275)));
    float _2280 = _2279 * _2273;
    float _2281 = _2279 * _2274;
    float _2282 = _2279 * _2275;
    float _2283 = dot(vec3(_784, _785, _786), vec3(cbLight._m0[_2076].xyz));
    float _4349 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
    float _2286 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
    float _2287 = dot(vec3(_784, _785, _786), vec3(_2280, _2281, _2282));
    float _4360 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
    float _2290 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
    float _2291 = dot(vec3(cbLight._m0[_2076].xyz), vec3(_2280, _2281, _2282));
    float _4371 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
    float _2295 = _2272 * _2272;
    float _2299 = ((_2290 * _2290) * (_2295 + (-1.0))) + 1.0;
    float _2306 = exp2(log2(1.0 - (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0)))) * 5.0);
    float _2313 = 1.0 - _2272;
    float _2323 = (0.5 / (((_2204 * ((_2286 * _2313) + _2272)) + 9.9999999392252902907785028219223e-09) + (((_2204 * _2313) + _2272) * _2286))) * _2286;
    float _4382 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
    float _2325 = (isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0))) * (_2295 / ((_2299 * _2299) * 3.141590118408203125));
    float _2335 = (((((_2306 * _2226) + _984) * cbLight._m0[_2260].x) * _2325) * _2062) + (((((_2225 * _2226) + _984) * cbLight._m0[_2175].x) * _2249) * _2072);
    float _2336 = (((((_2306 * _2228) + _986) * cbLight._m0[_2260].y) * _2325) * _2062) + (((((_2225 * _2228) + _986) * cbLight._m0[_2175].y) * _2249) * _2072);
    float _2337 = (((((_2306 * _2229) + _987) * cbLight._m0[_2260].z) * _2325) * _2062) + (((((_2225 * _2229) + _987) * cbLight._m0[_2175].z) * _2249) * _2072);
    float _2399;
    float _2401;
    float _2403;
    if (_2112)
    {
        _2399 = _2335;
        _2401 = _2336;
        _2403 = _2337;
    }
    else
    {
        uint _2405 = _2039 + 2u;
        uint _2409 = _2039 + 10u;
        float _2423 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2405].w)) * _914) * 0.949999988079071044921875);
        float _2424 = _2423 * _2423;
        float _2425 = cbLight._m0[_2405].x + _864;
        float _2426 = cbLight._m0[_2405].y + _865;
        float _2427 = cbLight._m0[_2405].z + _866;
        float _2431 = inversesqrt(dot(vec3(_2425, _2426, _2427), vec3(_2425, _2426, _2427)));
        float _2432 = _2431 * _2425;
        float _2433 = _2431 * _2426;
        float _2434 = _2431 * _2427;
        float _2435 = dot(vec3(_784, _785, _786), vec3(cbLight._m0[_2405].xyz));
        float _4393 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
        float _2438 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
        float _2439 = dot(vec3(_784, _785, _786), vec3(_2432, _2433, _2434));
        float _4404 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
        float _2442 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
        float _2443 = dot(vec3(cbLight._m0[_2405].xyz), vec3(_2432, _2433, _2434));
        float _4415 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
        float _2447 = _2424 * _2424;
        float _2451 = ((_2442 * _2442) * (_2447 + (-1.0))) + 1.0;
        float _2458 = exp2(log2(1.0 - (isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0)))) * 5.0);
        float _2465 = 1.0 - _2424;
        float _2475 = (0.5 / (((_2204 * ((_2438 * _2465) + _2424)) + 9.9999999392252902907785028219223e-09) + (((_2204 * _2465) + _2424) * _2438))) * _2438;
        float _4426 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
        float _2477 = (isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0))) * (_2447 / ((_2451 * _2451) * 3.141590118408203125));
        float _2478 = isnan(1.0) ? _2054 : (isnan(_2054) ? 1.0 : min(_2054, 1.0));
        _2399 = (((((_2458 * _2226) + _984) * cbLight._m0[_2409].x) * _2477) * _2478) + _2335;
        _2401 = (((((_2458 * _2228) + _986) * cbLight._m0[_2409].y) * _2477) * _2478) + _2336;
        _2403 = (((((_2458 * _2229) + _987) * cbLight._m0[_2409].z) * _2477) * _2478) + _2337;
    }
    float _2513;
    float _2515;
    float _2517;
    if (_2130)
    {
        _2513 = _2399;
        _2515 = _2401;
        _2517 = _2403;
    }
    else
    {
        uint _2524 = _2039 + 3u;
        uint _2528 = _2039 + 11u;
        float _2542 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2524].w)) * _914) * 0.949999988079071044921875);
        float _2543 = _2542 * _2542;
        float _2544 = cbLight._m0[_2524].x + _864;
        float _2545 = cbLight._m0[_2524].y + _865;
        float _2546 = cbLight._m0[_2524].z + _866;
        float _2550 = inversesqrt(dot(vec3(_2544, _2545, _2546), vec3(_2544, _2545, _2546)));
        float _2551 = _2550 * _2544;
        float _2552 = _2550 * _2545;
        float _2553 = _2550 * _2546;
        float _2554 = dot(vec3(_784, _785, _786), vec3(cbLight._m0[_2524].xyz));
        float _4442 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
        float _2557 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
        float _2558 = dot(vec3(_784, _785, _786), vec3(_2551, _2552, _2553));
        float _4453 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
        float _2561 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
        float _2562 = dot(vec3(cbLight._m0[_2524].xyz), vec3(_2551, _2552, _2553));
        float _4464 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
        float _2566 = _2543 * _2543;
        float _2570 = ((_2561 * _2561) * (_2566 + (-1.0))) + 1.0;
        float _2577 = exp2(log2(1.0 - (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0)))) * 5.0);
        float _2584 = 1.0 - _2543;
        float _2594 = (0.5 / (((_2204 * ((_2557 * _2584) + _2543)) + 9.9999999392252902907785028219223e-09) + (((_2204 * _2584) + _2543) * _2557))) * _2557;
        float _4475 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
        float _2596 = (isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0))) * (_2566 / ((_2570 * _2570) * 3.141590118408203125));
        float _2597 = isnan(1.0) ? _2055 : (isnan(_2055) ? 1.0 : min(_2055, 1.0));
        _2513 = (((((_2577 * _2226) + _984) * cbLight._m0[_2528].x) * _2596) * _2597) + _2399;
        _2515 = (((((_2577 * _2228) + _986) * cbLight._m0[_2528].y) * _2596) * _2597) + _2401;
        _2517 = (((((_2577 * _2229) + _987) * cbLight._m0[_2528].z) * _2596) * _2597) + _2403;
    }
    float _2731;
    float _2733;
    float _2735;
    float _2737;
    float _2739;
    float _2741;
    if (_2037.y == 0u)
    {
        float _2672 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2673 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2672;
        float _2674 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2672;
        float _2675 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2672;
        uvec4 _2687 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2688 = _2687.x;
        uint _2699 = uint((float(_2687.y) * floor(float(uint(cbSceneParam._m0[85u].y * _873) / _2688))) + floor(float(uint(cbSceneParam._m0[85u].x * _872) / _2688)));
        float _2709 = (log2(_2675 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2710 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
        uint _2713 = uint(isnan(14.0) ? _2710 : (isnan(_2710) ? 14.0 : min(_2710, 14.0)));
        uvec4 _2718 = texelFetch(g_lightClusterGridBuffer, int(((_2713 << 2u) + (_2699 << 6u)) >> 2u));
        uint _2719 = _2718.x;
        uint _2720 = _2687.z;
        float _2854;
        float _2856;
        float _2858;
        float _2860;
        float _2862;
        float _2864;
        if (((((1u << ((_2720 >> 4u) & 15u)) + 4294967295u) & _2719) == 0u) || ((_2720 & 240u) == 0u))
        {
            _2854 = 0.0;
            _2856 = 0.0;
            _2858 = 0.0;
            _2860 = 0.0;
            _2862 = 0.0;
            _2864 = 0.0;
        }
        else
        {
            float _2855;
            float _2857;
            float _2859;
            float _2861;
            float _2863;
            float _2865;
            float _3007 = 0.0;
            float _3008 = 0.0;
            float _3009 = 0.0;
            float _3010 = 0.0;
            float _3011 = 0.0;
            float _3012 = 0.0;
            uint _3013 = 0u;
            uint _3022;
            bool _3023;
            for (;;)
            {
                _3022 = texelFetch(g_lightClassification, int((((_2713 << 5u) + (_2699 << 9u)) + (_3013 << 2u)) >> 2u)).x;
                _3023 = _3022 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_3023)
                {
                    frontier_phi_63_pred = _3012;
                    frontier_phi_63_pred_1 = _3011;
                    frontier_phi_63_pred_2 = _3010;
                    frontier_phi_63_pred_3 = _3009;
                    frontier_phi_63_pred_4 = _3008;
                    frontier_phi_63_pred_5 = _3007;
                }
                else
                {
                    float _3131;
                    float _3132;
                    float _3133;
                    float _3134;
                    float _3135;
                    float _3136;
                    uint _3137;
                    _3131 = _3007;
                    _3132 = _3008;
                    _3133 = _3009;
                    _3134 = _3010;
                    _3135 = _3011;
                    _3136 = _3012;
                    _3137 = _3022;
                    float _3063;
                    float _3064;
                    float _3065;
                    float _3066;
                    float _3067;
                    float _3068;
                    for (;;)
                    {
                        uint _3141 = uint(findLSB(_3137)) + (_3013 << 5u);
                        uint _3138 = (_3137 + 4294967295u) & _3137;
                        uint _3143 = _3141 * 48u;
                        vec4 _3157 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3143)).x, texelFetch(g_PointLightRenderingBuffer, int(_3143 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3143 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3143 + 3u)).x));
                        uint _3163 = (_3141 * 48u) + 4u;
                        vec4 _3176 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3163)).x, texelFetch(g_PointLightRenderingBuffer, int(_3163 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3163 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3163 + 3u)).x));
                        uint _3182 = (_3141 * 48u) + 8u;
                        vec3 _3193 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3182)).x, texelFetch(g_PointLightRenderingBuffer, int(_3182 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3182 + 2u)).x));
                        float _3197 = _3157.x - _2673;
                        float _3198 = _3157.y - _2674;
                        float _3199 = _3157.z - _2675;
                        float _3200 = dot(vec3(_3197, _3198, _3199), vec3(_3197, _3198, _3199));
                        float _3203 = inversesqrt(_3200);
                        float _3204 = _3203 * _3197;
                        float _3205 = _3203 * _3198;
                        float _3206 = _3203 * _3199;
                        float _3207 = dot(vec3(_895, _898, _901), vec3(_3204, _3205, _3206));
                        float _3212 = 1.0 - (_3200 * _3157.w);
                        float _4501 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0));
                        float _3213 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
                        float _3214 = sqrt(_3200) * _3176.w;
                        float _3217 = 1.39999997615814208984375 / (_3214 + 1.39999997615814208984375);
                        float _3218 = _3217 * _3217;
                        float _3221 = ((1.0 - _3218) * _3207) + _3218;
                        float _3224 = _3214 * _3214;
                        float _3228 = ((isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0))) * _3213) / ((_3224 * 0.699999988079071044921875) + 1.0);
                        float _3232 = (-0.0) - _2673;
                        float _3233 = (-0.0) - _2674;
                        float _3234 = (-0.0) - _2675;
                        float _3238 = inversesqrt(dot(vec3(_3232, _3233, _3234), vec3(_3232, _3233, _3234)));
                        float _3239 = _3238 * _3232;
                        float _3240 = _3238 * _3233;
                        float _3241 = _3238 * _3234;
                        float _3248 = exp2(log2(1.0 / ((_3224 * 3.5) + 5.0)) * 0.25);
                        float _3249 = 1.0 - _1015;
                        float _3256 = sqrt(1.0 - ((1.0 - (_3249 * _3249)) * (1.0 - (_3248 * _3248))));
                        float _3257 = _3256 * _3256;
                        float _3258 = _3257 * _3257;
                        float _3259 = _3239 + _3204;
                        float _3260 = _3240 + _3205;
                        float _3261 = _3241 + _3206;
                        float _3265 = inversesqrt(dot(vec3(_3259, _3260, _3261), vec3(_3259, _3260, _3261)));
                        float _3269 = dot(vec3(_895, _898, _901), vec3(_3239, _3240, _3241));
                        float _4517 = isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0));
                        float _3272 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
                        float _3273 = dot(vec3(_895, _898, _901), vec3(_3265 * _3259, _3265 * _3260, _3265 * _3261));
                        float _4528 = isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0));
                        float _3276 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
                        float _3280 = ((_3276 * _3276) * (_3258 + (-1.0))) + 1.0;
                        float _3281 = _3217 * _3257;
                        float _3282 = _3281 * _3281;
                        float _3285 = ((1.0 - _3282) * _3207) + _3282;
                        float _4539 = isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0));
                        float _3286 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
                        float _3287 = 1.0 - _3257;
                        float _3297 = (0.5 / (((_3286 * ((_3272 * _3287) + _3257)) + 9.9999999392252902907785028219223e-09) + (((_3286 * _3287) + _3257) * _3272))) * _3286;
                        float _4550 = isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0));
                        float _3308 = (((_3258 * 3.1415927410125732421875) * (isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0)))) / ((_3280 * _3280) * ((_3224 * 2.1991131305694580078125) + 3.141590118408203125))) * _3213;
                        _3066 = (_3228 * _3176.x) + _3134;
                        _3067 = (_3228 * _3176.y) + _3135;
                        _3068 = (_3228 * _3176.z) + _3136;
                        _3063 = (_3308 * _3193.x) + _3131;
                        _3064 = (_3308 * _3193.y) + _3132;
                        _3065 = (_3308 * _3193.z) + _3133;
                        if (_3138 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3131 = _3063;
                            _3132 = _3064;
                            _3133 = _3065;
                            _3134 = _3066;
                            _3135 = _3067;
                            _3136 = _3068;
                            _3137 = _3138;
                        }
                    }
                    frontier_phi_63_pred = _3068;
                    frontier_phi_63_pred_1 = _3067;
                    frontier_phi_63_pred_2 = _3066;
                    frontier_phi_63_pred_3 = _3065;
                    frontier_phi_63_pred_4 = _3064;
                    frontier_phi_63_pred_5 = _3063;
                }
                _2865 = frontier_phi_63_pred;
                _2863 = frontier_phi_63_pred_1;
                _2861 = frontier_phi_63_pred_2;
                _2859 = frontier_phi_63_pred_3;
                _2857 = frontier_phi_63_pred_4;
                _2855 = frontier_phi_63_pred_5;
                uint _3014 = _3013 + 1u;
                if (_3014 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3007 = _2855;
                    _3008 = _2857;
                    _3009 = _2859;
                    _3010 = _2861;
                    _3011 = _2863;
                    _3012 = _2865;
                    _3013 = _3014;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2854 = _2855;
            _2856 = _2857;
            _2858 = _2859;
            _2860 = _2861;
            _2862 = _2863;
            _2864 = _2865;
        }
        uvec4 _2868 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2869 = _2868.z;
        uint _2871 = (_2869 >> 8u) & 15u;
        float _2975;
        float _2977;
        float _2979;
        float _2981;
        float _2983;
        float _2985;
        if (((4294967295u << _2871) & _2719) == 0u)
        {
            _2975 = _2854;
            _2977 = _2856;
            _2979 = _2858;
            _2981 = _2860;
            _2983 = _2862;
            _2985 = _2864;
        }
        else
        {
            float _3000 = inversesqrt(dot(vec3(_2673, _2674, _2675), vec3(_2673, _2674, _2675)));
            float _3001 = _3000 * _2673;
            float _3002 = _3000 * _2674;
            float _3003 = _3000 * _2675;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2871 < ((_2869 >> 12u) & 15u))
            {
                float _2976;
                float _2978;
                float _2980;
                float _2982;
                float _2984;
                float _2986;
                float _3114 = _2854;
                float _3115 = _2856;
                float _3116 = _2858;
                float _3117 = _2860;
                float _3118 = _2862;
                float _3119 = _2864;
                uint _3120 = _2871;
                uint _3129;
                bool _3130;
                for (;;)
                {
                    _3129 = texelFetch(g_lightClassification, int((((_2713 << 5u) + (_2699 << 9u)) + (_3120 << 2u)) >> 2u)).x;
                    _3130 = _3129 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_3130)
                    {
                        frontier_phi_69_pred = _3119;
                        frontier_phi_69_pred_1 = _3118;
                        frontier_phi_69_pred_2 = _3117;
                        frontier_phi_69_pred_3 = _3116;
                        frontier_phi_69_pred_4 = _3115;
                        frontier_phi_69_pred_5 = _3114;
                    }
                    else
                    {
                        float _3313;
                        float _3314;
                        float _3315;
                        float _3316;
                        float _3317;
                        float _3318;
                        float _3606;
                        float _3607;
                        float _3608;
                        float _3609;
                        float _3610;
                        float _3611;
                        float _3326 = _3114;
                        float _3327 = _3115;
                        float _3328 = _3116;
                        float _3329 = _3117;
                        float _3330 = _3118;
                        float _3331 = _3119;
                        uint _3332 = _3129;
                        uint _3333;
                        vec4 _3358;
                        float _3359;
                        vec4 _3374;
                        vec3 _3386;
                        vec4 _3401;
                        vec4 _3416;
                        float _3462;
                        bool _3463;
                        for (;;)
                        {
                            uint _3343 = ((_3120 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3332));
                            _3333 = (_3332 + 4294967295u) & _3332;
                            uint _3345 = _3343 * 40u;
                            _3358 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3345)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 3u)).x));
                            _3359 = _3358.w;
                            uint _3361 = (_3343 * 40u) + 4u;
                            _3374 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3361)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 3u)).x));
                            uint _3376 = (_3343 * 40u) + 8u;
                            _3386 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3376)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 2u)).x));
                            uint _3388 = (_3343 * 40u) + 16u;
                            _3401 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3388)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 3u)).x));
                            uint _3403 = (_3343 * 40u) + 20u;
                            _3416 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3403)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 3u)).x));
                            uint _3418 = (_3343 * 40u) + 24u;
                            vec4 _3431 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3418)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 3u)).x));
                            uint _3437 = (_3343 * 40u) + 28u;
                            vec4 _3450 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3437)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 3u)).x));
                            _3462 = fma(_2675, _3450.z, fma(_2674, _3450.y, _3450.x * _2673)) + _3450.w;
                            _3463 = !((fma(_2675, _3431.z, fma(_2674, _3431.y, _3431.x * _2673)) + _3431.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3463)
                            {
                                float _3490 = _3358.x - _2673;
                                float _3491 = _3358.y - _2674;
                                float _3492 = _3358.z - _2675;
                                float _3493 = dot(vec3(_3490, _3491, _3492), vec3(_3490, _3491, _3492));
                                float _3496 = inversesqrt(_3493);
                                float _3497 = _3496 * _3490;
                                float _3498 = _3496 * _3491;
                                float _3499 = _3496 * _3492;
                                float _3503 = 1.0 - (_3493 / (_3359 * _3359));
                                float _4561 = isnan(0.0) ? _3503 : (isnan(_3503) ? 0.0 : max(_3503, 0.0));
                                float _3504 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
                                float _3508 = sqrt(_3493) * _3374.w;
                                float _3510 = 1.39999997615814208984375 / (_3508 + 1.39999997615814208984375);
                                float _3511 = _3510 * _3510;
                                float _3514 = ((1.0 - _3511) * dot(vec3(_3497, _3498, _3499), vec3(_895, _898, _901))) + _3511;
                                float _3517 = _3508 * _3508;
                                float _3521 = (fma(_2675, _3401.z, fma(_2674, _3401.y, _3401.x * _2673)) + _3401.w) / _3462;
                                float _3522 = (fma(_2675, _3416.z, fma(_2674, _3416.y, _3416.x * _2673)) + _3416.w) / _3462;
                                float _3526 = 1.0 - dot(vec2(_3521, _3522), vec2(_3521, _3522));
                                float _4577 = isnan(0.0) ? _3526 : (isnan(_3526) ? 0.0 : max(_3526, 0.0));
                                float _3527 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
                                float _3528 = _3527 * (((isnan(0.0) ? _3514 : (isnan(_3514) ? 0.0 : max(_3514, 0.0))) * _3504) / ((_3517 * 0.699999988079071044921875) + 1.0));
                                float _3540 = exp2(log2(1.0 / ((_3517 * 3.5) + 5.0)) * 0.25);
                                float _3541 = 1.0 - _1015;
                                float _3548 = sqrt(1.0 - ((1.0 - (_3541 * _3541)) * (1.0 - (_3540 * _3540))));
                                float _3549 = _3548 * _3548;
                                float _3550 = _3549 * _3549;
                                float _3551 = _3497 - _3001;
                                float _3552 = _3498 - _3002;
                                float _3553 = _3499 - _3003;
                                float _3557 = inversesqrt(dot(vec3(_3551, _3552, _3553), vec3(_3551, _3552, _3553)));
                                float _3561 = dot(vec3(_895, _898, _901), vec3((-0.0) - _3001, (-0.0) - _3002, (-0.0) - _3003));
                                float _4588 = isnan(0.0) ? _3561 : (isnan(_3561) ? 0.0 : max(_3561, 0.0));
                                float _3564 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
                                float _3565 = dot(vec3(_895, _898, _901), vec3(_3557 * _3551, _3557 * _3552, _3557 * _3553));
                                float _4599 = isnan(0.0) ? _3565 : (isnan(_3565) ? 0.0 : max(_3565, 0.0));
                                float _3568 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
                                float _3572 = ((_3568 * _3568) * (_3550 + (-1.0))) + 1.0;
                                float _3573 = _3510 * _3549;
                                float _3574 = _3573 * _3573;
                                float _3580 = ((1.0 - _3574) * dot(vec3(_895, _898, _901), vec3(_3497, _3498, _3499))) + _3574;
                                float _4610 = isnan(0.0) ? _3580 : (isnan(_3580) ? 0.0 : max(_3580, 0.0));
                                float _3581 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
                                float _3582 = 1.0 - _3549;
                                float _3592 = (0.5 / (((_3581 * ((_3564 * _3582) + _3549)) + 9.9999999392252902907785028219223e-09) + (((_3581 * _3582) + _3549) * _3564))) * _3581;
                                float _4621 = isnan(0.0) ? _3592 : (isnan(_3592) ? 0.0 : max(_3592, 0.0));
                                float _3602 = (_3527 * _3504) * (((_3550 * 3.1415927410125732421875) * (isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0)))) / ((_3572 * _3572) * ((_3517 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3528 * _3374.z;
                                frontier_phi_75_pred_1 = _3528 * _3374.y;
                                frontier_phi_75_pred_2 = _3528 * _3374.x;
                                frontier_phi_75_pred_3 = _3602 * _3386.z;
                                frontier_phi_75_pred_4 = _3602 * _3386.y;
                                frontier_phi_75_pred_5 = _3602 * _3386.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3611 = frontier_phi_75_pred;
                            _3610 = frontier_phi_75_pred_1;
                            _3609 = frontier_phi_75_pred_2;
                            _3608 = frontier_phi_75_pred_3;
                            _3607 = frontier_phi_75_pred_4;
                            _3606 = frontier_phi_75_pred_5;
                            _3316 = _3609 + _3329;
                            _3317 = _3610 + _3330;
                            _3318 = _3611 + _3331;
                            _3313 = _3606 + _3326;
                            _3314 = _3607 + _3327;
                            _3315 = _3608 + _3328;
                            if (_3333 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3326 = _3313;
                                _3327 = _3314;
                                _3328 = _3315;
                                _3329 = _3316;
                                _3330 = _3317;
                                _3331 = _3318;
                                _3332 = _3333;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3318;
                        frontier_phi_69_pred_1 = _3317;
                        frontier_phi_69_pred_2 = _3316;
                        frontier_phi_69_pred_3 = _3315;
                        frontier_phi_69_pred_4 = _3314;
                        frontier_phi_69_pred_5 = _3313;
                    }
                    _2986 = frontier_phi_69_pred;
                    _2984 = frontier_phi_69_pred_1;
                    _2982 = frontier_phi_69_pred_2;
                    _2980 = frontier_phi_69_pred_3;
                    _2978 = frontier_phi_69_pred_4;
                    _2976 = frontier_phi_69_pred_5;
                    uint _3121 = _3120 + 1u;
                    if (_3121 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3114 = _2976;
                        _3115 = _2978;
                        _3116 = _2980;
                        _3117 = _2982;
                        _3118 = _2984;
                        _3119 = _2986;
                        _3120 = _3121;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2986;
                frontier_phi_57_58_ladder_1 = _2984;
                frontier_phi_57_58_ladder_2 = _2982;
                frontier_phi_57_58_ladder_3 = _2980;
                frontier_phi_57_58_ladder_4 = _2978;
                frontier_phi_57_58_ladder_5 = _2976;
            }
            else
            {
                frontier_phi_57_58_ladder = _2864;
                frontier_phi_57_58_ladder_1 = _2862;
                frontier_phi_57_58_ladder_2 = _2860;
                frontier_phi_57_58_ladder_3 = _2858;
                frontier_phi_57_58_ladder_4 = _2856;
                frontier_phi_57_58_ladder_5 = _2854;
            }
            _2975 = frontier_phi_57_58_ladder_5;
            _2977 = frontier_phi_57_58_ladder_4;
            _2979 = frontier_phi_57_58_ladder_3;
            _2981 = frontier_phi_57_58_ladder_2;
            _2983 = frontier_phi_57_58_ladder_1;
            _2985 = frontier_phi_57_58_ladder;
        }
        float _2990 = isnan(1.0) ? _999 : (isnan(_999) ? 1.0 : min(_999, 1.0));
        _2731 = (_2990 * _2981) + _2168;
        _2733 = (_2990 * _2983) + _2170;
        _2735 = (_2990 * _2985) + _2172;
        _2737 = ((_2975 * _984) * _2990) + _2513;
        _2739 = ((_2977 * _986) * _2990) + _2515;
        _2741 = ((_2979 * _987) * _2990) + _2517;
    }
    else
    {
        _2731 = _2168;
        _2733 = _2170;
        _2735 = _2172;
        _2737 = _2513;
        _2739 = _2515;
        _2741 = _2517;
    }
    uint _2747 = _928 + uint(cbMatDynParam._m0[0u].w);
    float _2755 = ((cbMtdParam._m0[11u].x * cbMtdParam._m0[22u].z) * _728.x) * cbInstanceData._m0[_2747].x;
    float _2758 = ((cbMtdParam._m0[11u].y * cbMtdParam._m0[22u].z) * _728.y) * cbInstanceData._m0[_2747].y;
    float _2761 = ((cbMtdParam._m0[11u].z * cbMtdParam._m0[22u].z) * _728.z) * cbInstanceData._m0[_2747].z;
    float _4637 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    float _4648 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _4659 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    float _2778 = (((isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0))) * (_2731 + ((isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0))) * _999))) + ((_2737 + ((isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0))) * _1808)) * cbPerFrame._m0[3u].x)) + _2755;
    float _2780 = (_2758 + ((_2739 + ((isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0))) * _1808)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0))) * (_2733 + ((isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0))) * _999)));
    float _2782 = (_2761 + ((_2741 + ((isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0))) * _1808)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0))) * (_2735 + ((isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0))) * _999)));
    float _4685 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2795 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
    uint _2796 = _927 + 6u;
    float _2804 = _872 / cbSceneParam._m0[86u].x;
    float _2805 = _873 / cbSceneParam._m0[86u].y;
    vec4 _2819 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2804, _2805, (log2((isnan(cbSceneParam._m0[77u].w) ? _807 : (isnan(_807) ? cbSceneParam._m0[77u].w : min(_807, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2821 = _2819.x;
    float _2822 = _2819.y;
    float _2823 = _2819.z;
    float _2824 = _2819.w;
    float _2916;
    float _2918;
    float _2920;
    float _2922;
    if (_807 > cbSceneParam._m0[78u].w)
    {
        float _2879 = isnan(_807) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _807 : min(cbSceneParam._m0[80u].w, _807));
        float _2880 = _2879 / _807;
        float _2891 = _2880 * _857;
        float _2892 = _858 * _2880;
        float _2893 = (-0.0) - _2892;
        float _2894 = _2880 * _859;
        float _2896 = (cbSceneParam._m0[77u].w * _2893) / _2879;
        float _2897 = _2896 + cbSceneParam._m0[79u].w;
        float _2898 = cbSceneParam._m0[79u].w - _2892;
        float _2904 = sqrt(((_2891 * _2891) + (_2892 * _2892)) + (_2894 * _2894));
        float _2907 = (1.0 - (cbSceneParam._m0[77u].w / _2879)) * _2904;
        float _2912 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2914 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3076;
        if (abs((_2893 - _2896) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3076 = ((((_2897 > 0.0) ? exp2(_2912 * _2897) : (2.0 - exp2(_2914 * _2897))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2907;
        }
        else
        {
            float _3036 = 1.0 / cbSceneParam._m0[80u].x;
            float _3037 = isnan(_2898) ? _2897 : (isnan(_2897) ? _2898 : max(_2897, _2898));
            float _3038 = isnan(_2898) ? _2897 : (isnan(_2897) ? _2898 : min(_2897, _2898));
            float _3047 = isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : min(_3037, 0.0));
            float _3048 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : min(_3038, 0.0));
            _3076 = ((abs(_2904 / _2893) * cbSceneParam._m0[80u].y) * ((((_3047 - _3048) * 2.0) - ((exp2(_2912 * (isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0)))) - exp2(_2912 * (isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0))))) * _3036)) - ((exp2(_2914 * _3047) - exp2(_2914 * _3048)) * _3036))) + (_2907 * cbSceneParam._m0[80u].z);
        }
        vec4 _3078 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2804, _2805, 1.0), 0.0);
        float _3087 = exp2((_3076 * (-1.44269502162933349609375)) * (1.0 - _3078.w));
        float _3088 = log2(_3087);
        float _3104 = log2(_2824);
        _2916 = (exp2(_3104 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3088 * cbSceneParam._m0[78u].x)) * _3078.x) / cbSceneParam._m0[78u].x)) + _2821;
        _2918 = (exp2(_3104 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3088 * cbSceneParam._m0[78u].y)) * _3078.y) / cbSceneParam._m0[78u].y)) + _2822;
        _2920 = (exp2(_3104 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3088 * cbSceneParam._m0[78u].z)) * _3078.z) / cbSceneParam._m0[78u].z)) + _2823;
        _2922 = _3087 * _2824;
    }
    else
    {
        _2916 = _2821;
        _2918 = _2822;
        _2920 = _2823;
        _2922 = _2824;
    }
    float _2934 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2935 = _2934 == 3.0;
    float _2936 = log2(_2922);
    float _2940 = exp2(_2936 * cbSceneParam._m0[78u].x);
    float _2941 = exp2(_2936 * cbSceneParam._m0[78u].y);
    float _2942 = exp2(_2936 * cbSceneParam._m0[78u].z);
    float _2943 = _2940 * (isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0)));
    float _2944 = _2941 * (isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0)));
    float _2945 = _2942 * (isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0)));
    float _2954 = (_2934 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2954 * (_2935 ? _2943 : (_2943 + (cbSceneParam._m0[72u].w * _2916)));
    SV_Target.y = _2954 * (_2935 ? _2944 : (_2944 + (cbSceneParam._m0[72u].w * _2918)));
    SV_Target.z = _2954 * (_2935 ? _2945 : (_2945 + (cbSceneParam._m0[72u].w * _2920)));
    SV_Target.w = cbInstanceData._m0[_2796].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2755) * _2795) * _2940) * _2954;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2758) * _2795) * _2941) * _2954;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2761) * _2795) * _2942) * _2954;
    SV_Target_1.w = cbInstanceData._m0[_2796].w;
}


