#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 11) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 12) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1424;
float _4130;
float _4131;
float _4132;
float _4133;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _236 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _243 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _244 = _243 * NORMAL.x;
    float _245 = _243 * NORMAL.y;
    float _246 = _243 * NORMAL.z;
    float _250 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _258;
    float _259;
    float _260;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _258 = (-0.0) - _244;
        _259 = (-0.0) - _245;
        _260 = (-0.0) - _246;
    }
    else
    {
        _258 = _244;
        _259 = _245;
        _260 = _246;
    }
    vec4 _278 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _292 = exp2(log2(_278.w * cbMtdParam._m0[23u].z) * cbMtdParam._m0[21u].y);
    float _293 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _294 = isnan(1.0) ? _293 : (isnan(_293) ? 1.0 : min(_293, 1.0));
    vec4 _308 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _312 = _308.z;
    float _313 = _308.w;
    float _321 = exp2(log2(_312 * cbMtdParam._m0[21u].w) * cbMtdParam._m0[20u].y);
    float _322 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _323 = isnan(1.0) ? _322 : (isnan(_322) ? 1.0 : min(_322, 1.0));
    vec4 _336 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    vec4 _359 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _361 = _359.x;
    float _362 = _359.y;
    float _386 = ((cbMtdParam._m0[20u].w * _359.z) * (texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_15, SS_WrapLinear), vec2(((cbMtdParam._m0[20u].z * TEXCOORD.x) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, ((cbMtdParam._m0[20u].z * TEXCOORD.y) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w)).x - _361)) + _361;
    bool _422 = _386 >= 0.25;
    bool _427 = _386 >= 0.3499999940395355224609375;
    bool _432 = _386 >= 0.5;
    bool _437 = _386 >= 0.64999997615814208984375;
    bool _442 = _386 >= 0.75;
    vec4 _470 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _480 = cbMtdParam._m0[9u].x * _470.x;
    float _481 = cbMtdParam._m0[9u].y * _470.y;
    float _482 = cbMtdParam._m0[9u].z * _470.z;
    float _489 = (((((((_442 ? cbMtdParam._m0[14u].x : (_437 ? cbMtdParam._m0[19u].x : (_432 ? cbMtdParam._m0[18u].x : (_427 ? cbMtdParam._m0[17u].x : (_422 ? cbMtdParam._m0[16u].x : cbMtdParam._m0[15u].x))))) - cbMtdParam._m0[10u].x) * _362) + cbMtdParam._m0[10u].x) * _336.x) - _480) * _323) + _480;
    float _490 = (((((((_442 ? cbMtdParam._m0[14u].y : (_437 ? cbMtdParam._m0[19u].y : (_432 ? cbMtdParam._m0[18u].y : (_427 ? cbMtdParam._m0[17u].y : (_422 ? cbMtdParam._m0[16u].y : cbMtdParam._m0[15u].y))))) - cbMtdParam._m0[10u].y) * _362) + cbMtdParam._m0[10u].y) * _336.y) - _481) * _323) + _481;
    float _491 = (((((((_442 ? cbMtdParam._m0[14u].z : (_437 ? cbMtdParam._m0[19u].z : (_432 ? cbMtdParam._m0[18u].z : (_427 ? cbMtdParam._m0[17u].z : (_422 ? cbMtdParam._m0[16u].z : cbMtdParam._m0[15u].z))))) - cbMtdParam._m0[10u].z) * _362) + cbMtdParam._m0[10u].z) * _336.z) - _482) * _323) + _482;
    float _498 = exp2(log2(_313) * cbMtdParam._m0[22u].y);
    vec4 _511 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _531 = (((cbMtdParam._m0[12u].x * _511.x) - _489) * _498) + _489;
    float _532 = (((cbMtdParam._m0[12u].y * _511.y) - _490) * _498) + _490;
    float _533 = (((cbMtdParam._m0[12u].z * _511.z) - _491) * _498) + _491;
    vec4 _545 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _569 = (_278.x * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].x * _545.x) - _531) * _294) + _531);
    float _571 = (_278.y * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].y * _545.y) - _532) * _294) + _532);
    float _573 = (_278.z * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].z * _545.z) - _533) * _294) + _533);
    float _578 = exp2(log2(1.0 - _313) * 0.00999999977648258209228515625);
    float _596 = ((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_11, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x - cbMtdParam._m0[22u].w) * _578) + cbMtdParam._m0[22u].w;
    float _615 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w)).x - _596) + cbMtdParam._m0[21u].z) * _498) + _596;
    float _635 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w)).x - _615) + cbMtdParam._m0[23u].w) * _294) + _615;
    vec4 _648 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _666 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _668 = _666.x;
    float _669 = _666.y;
    float _672 = cbMtdParam._m0[20u].x + _666.z;
    float _675 = (((cbMtdParam._m0[21u].x + _648.z) - _672) * _578) + _672;
    vec4 _687 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _699 = (_312 * 2.0) * ((((_687.z - _675) + cbMtdParam._m0[23u].y) * _498) + _675);
    vec4 _711 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _720 = (((_711.z - _699) + cbMtdParam._m0[22u].x) * _294) + _699;
    vec4 _739 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _754 = ((_648.x - _668) * _578) + _668;
    float _755 = ((_648.y - _669) * _578) + _669;
    float _760 = ((_687.x - _754) * _498) + _754;
    float _761 = ((_687.y - _755) * _498) + _755;
    float _770 = ((((_711.x - _760) * _294) + _760) * 2.0) + (-1.0);
    float _771 = ((((_711.y - _761) * _294) + _761) * 2.0) + (-1.0);
    float _772 = dot(vec2(_770, _771), vec2(_770, _771));
    float _4162 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _777 = sqrt(1.0 - (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))));
    float _780 = (cbMtdParam._m0[23u].x * ((_308.x * 2.0) + (-1.0))) + _770;
    float _781 = (cbMtdParam._m0[23u].x * ((_308.y * 2.0) + (-1.0))) + _771;
    float _784 = fma(_777, _258, fma(_781, _250 * TANGENT.x, (_236 * _229) * _780));
    float _787 = fma(_777, _259, fma(_781, _250 * TANGENT.y, (_236 * _230) * _780));
    float _790 = fma(_777, _260, fma(_781, _250 * TANGENT.z, (_236 * _231) * _780));
    float _794 = inversesqrt(dot(vec3(_784, _787, _790), vec3(_784, _787, _790)));
    float _795 = _794 * _784;
    float _796 = _794 * _787;
    float _797 = _794 * _790;
    float _4173 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _798 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
    float _4184 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _4195 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _4206 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _4217 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _802 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
    float _818 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _858 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _868 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _858);
    float _869 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _858);
    float _870 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _858);
    float _874 = inversesqrt(dot(vec3(_868, _869, _870), vec3(_868, _869, _870)));
    float _875 = _868 * _874;
    float _876 = _869 * _874;
    float _877 = _870 * _874;
    vec4 _882 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _884 = _882.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1105 = sqrt(((_868 * _868) + (_869 * _869)) + (_870 * _870));
        float _1111 = (cbMatDynParam._m0[5u].x * _1105) + cbMatDynParam._m0[5u].y;
        float _4228 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1112 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _1116 = (cbMatDynParam._m0[5u].z * _1105) + cbMatDynParam._m0[5u].w;
        float _4239 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) - _1112)) + _1112) < ((_884 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _895 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _896 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _898 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _900 = _898.w;
    float _918 = fma(_797, cbSceneParam._m0[5u].z, fma(_796, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _795));
    float _921 = fma(_797, cbSceneParam._m0[6u].z, fma(_796, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _795));
    float _924 = fma(_797, cbSceneParam._m0[7u].z, fma(_796, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _795));
    vec4 _926 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _937 = (((_926.y - _798) + (_926.w * _798)) * cbMtdParam._m0[3u].x) + _798;
    uint _950 = uint(roundEven(NORMAL.w)) * 13u;
    uint _951 = _950 + 9u;
    uint _952 = _951 + uint(cbMatDynParam._m0[0u].w);
    float _958 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0)))) * cbInstanceData._m0[_952].x;
    float _959 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0)))) * cbInstanceData._m0[_952].y;
    float _960 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0)))) * cbInstanceData._m0[_952].z;
    float _4250 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _961 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
    float _4261 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    float _962 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
    float _4272 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
    float _963 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
    vec4 _964 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _969 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _980 = (((_969.x - _802) + (_969.w * _802)) * cbMtdParam._m0[3u].x) + _802;
    float _993 = (cbMtdParam._m0[3u].x * (((_961 * _900) - _961) + _964.x)) + _961;
    float _994 = (cbMtdParam._m0[3u].x * (((_962 * _900) - _962) + _964.y)) + _962;
    float _995 = (cbMtdParam._m0[3u].x * (((_963 * _900) - _963) + _964.z)) + _963;
    float _996 = 1.0 - _980;
    float _997 = _996 * _993;
    float _998 = _996 * _994;
    float _999 = _996 * _995;
    float _1004 = (_993 + (-0.039999999105930328369140625)) * _980;
    float _1005 = (_994 + (-0.039999999105930328369140625)) * _980;
    float _1006 = (_995 + (-0.039999999105930328369140625)) * _980;
    float _1007 = _1004 + 0.039999999105930328369140625;
    float _1009 = _1005 + 0.039999999105930328369140625;
    float _1010 = _1006 + 0.039999999105930328369140625;
    vec4 _1019 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _895, cbSceneParam._m0[86u].y * _896));
    float _1022 = _1019.x * TEXCOORD_4.z;
    float _1023 = dot(vec3(_795, _796, _797), vec3(_875, _876, _877));
    float _1026 = _1023 * 2.0;
    float _1030 = (_1026 * _795) - _875;
    float _1031 = (_1026 * _796) - _876;
    float _1032 = (_1026 * _797) - _877;
    float _1036 = abs(dot(vec3(_875, _876, _877), vec3(_795, _796, _797)));
    float _4283 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
    float _1038 = sqrt(_937);
    float _1051 = exp2((_1038 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1038 * 3.0));
    float _1057 = (1.0 - _1051) * ((_1038 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1058 = _1051 * _1038;
    float _1086 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1090 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1094 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1423;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1149 = fma(_1094, cbModelParam._m0[26u].z, fma(_1090, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1086));
        float _1153 = fma(_1094, cbModelParam._m0[27u].z, fma(_1090, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1086));
        float _1157 = fma(_1094, cbModelParam._m0[28u].z, fma(_1090, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1086));
        float _1181 = _1086 + _795;
        float _1182 = _1090 + _796;
        float _1183 = _1094 + _797;
        float _1193 = fma(_1183, cbModelParam._m0[26u].z, fma(_1182, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1181)) - _1149;
        float _1194 = fma(_1183, cbModelParam._m0[27u].z, fma(_1182, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1181)) - _1153;
        float _1195 = fma(_1183, cbModelParam._m0[28u].z, fma(_1182, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1181)) - _1157;
        float _1199 = inversesqrt(dot(vec3(_1193, _1194, _1195), vec3(_1193, _1194, _1195)));
        float _1212 = ((_1199 * _1193) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1149 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1213 = ((_1199 * _1194) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1153 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1214 = ((_1199 * _1195) / cbModelParam._m0[34u].z) + ((((((_1157 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1217 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1212, _1213, _1214), 0.0);
        vec4 _1224 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1212, _1213, _1214), 0.0);
        vec4 _1231 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1212, _1213, _1214), 0.0);
        vec4 _1238 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1212, _1213, _1214), 0.0);
        float _1251 = exp2((_1217.w + (-0.5)) * 20.0) * 2.0;
        float _1252 = _1251 * (_1217.x + (-0.5));
        float _1253 = _1251 * (_1217.y + (-0.5));
        float _1254 = _1251 * (_1217.z + (-0.5));
        float _1261 = exp2((_1224.w + (-0.5)) * 20.0) * 2.0;
        float _1262 = _1261 * (_1224.x + (-0.5));
        float _1263 = _1261 * (_1224.y + (-0.5));
        float _1264 = _1261 * (_1224.z + (-0.5));
        float _1271 = exp2((_1231.w + (-0.5)) * 20.0) * 2.0;
        float _1272 = _1271 * (_1231.x + (-0.5));
        float _1273 = _1271 * (_1231.y + (-0.5));
        float _1274 = _1271 * (_1231.z + (-0.5));
        float _1281 = exp2((_1238.w + (-0.5)) * 20.0) * 2.0;
        float _1282 = _1281 * (_1238.x + (-0.5));
        float _1283 = _1281 * (_1238.y + (-0.5));
        float _1284 = _1281 * (_1238.z + (-0.5));
        float _1285 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1286 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1287 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1288 = _1252 * 0.5;
        float _1289 = _1262 * 0.5;
        float _1290 = _1272 * 0.5;
        float _1291 = dot(vec3(_1288, _1289, _1290), vec3(_1288, _1289, _1290));
        float _1296 = (_1291 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1291);
        float _1305 = (dot(vec3(_795, _796, _797), vec3(_1296 * _1288, _1296 * _1289, _1296 * _1290)) + 1.0) * 0.5;
        float _4309 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1315 = sqrt(((_1289 * _1289) + (_1288 * _1288)) + (_1290 * _1290)) / (_1285 + 9.9999997473787516355514526367188e-06);
        float _4320 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _1317 = _1316 * 2.0;
        float _1321 = (1.0 - _1316) / (_1316 + 1.0);
        float _4331 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _1331 = ((((1.0 - _1322) * (_1317 + 2.0)) * exp2(log2(isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * (_1317 + 1.0))) + _1322) * _1285;
        float _1332 = _1253 * 0.5;
        float _1333 = _1263 * 0.5;
        float _1334 = _1273 * 0.5;
        float _1335 = dot(vec3(_1332, _1333, _1334), vec3(_1332, _1333, _1334));
        float _1340 = (_1335 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1335);
        float _1348 = (dot(vec3(_795, _796, _797), vec3(_1340 * _1332, _1340 * _1333, _1340 * _1334)) + 1.0) * 0.5;
        float _4342 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1357 = sqrt(((_1333 * _1333) + (_1332 * _1332)) + (_1334 * _1334)) / (_1286 + 9.9999997473787516355514526367188e-06);
        float _4353 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
        float _1359 = _1358 * 2.0;
        float _1363 = (1.0 - _1358) / (_1358 + 1.0);
        float _4364 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1364 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
        float _1373 = ((((1.0 - _1364) * (_1359 + 2.0)) * exp2(log2(isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) * (_1359 + 1.0))) + _1364) * _1286;
        float _1374 = _1254 * 0.5;
        float _1375 = _1264 * 0.5;
        float _1376 = _1274 * 0.5;
        float _1377 = dot(vec3(_1374, _1375, _1376), vec3(_1374, _1375, _1376));
        float _1382 = (_1377 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1377);
        float _1390 = (dot(vec3(_795, _796, _797), vec3(_1382 * _1374, _1382 * _1375, _1382 * _1376)) + 1.0) * 0.5;
        float _4375 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1399 = sqrt(((_1375 * _1375) + (_1374 * _1374)) + (_1376 * _1376)) / (_1287 + 9.9999997473787516355514526367188e-06);
        float _4386 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1400 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
        float _1401 = _1400 * 2.0;
        float _1405 = (1.0 - _1400) / (_1400 + 1.0);
        float _4397 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1406 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
        float _1415 = ((((1.0 - _1406) * (_1401 + 2.0)) * exp2(log2(isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0))) * (_1401 + 1.0))) + _1406) * _1287;
        _1423 = _1254;
        _1425 = _1253;
        _1426 = _1252;
        _1427 = _1264;
        _1428 = _1263;
        _1429 = _1262;
        _1430 = _1274;
        _1431 = _1273;
        _1432 = _1272;
        _1433 = _1287;
        _1434 = _1286;
        _1435 = _1285;
        _1436 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0)));
        _1437 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0)));
        _1438 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0)));
    }
    else
    {
        _1423 = _1424;
        _1425 = _1424;
        _1426 = _1424;
        _1427 = _1424;
        _1428 = _1424;
        _1429 = _1424;
        _1430 = _1424;
        _1431 = _1424;
        _1432 = _1424;
        _1433 = _1424;
        _1434 = _1424;
        _1435 = _1424;
        _1436 = 0.0;
        _1437 = 0.0;
        _1438 = 0.0;
    }
    float _1736;
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1467 = fma(_1094, cbModelParam._m0[30u].z, fma(_1090, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1086));
        float _1471 = fma(_1094, cbModelParam._m0[31u].z, fma(_1090, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1086));
        float _1475 = fma(_1094, cbModelParam._m0[32u].z, fma(_1090, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1086));
        float _1498 = _1086 + _795;
        float _1499 = _1090 + _796;
        float _1500 = _1094 + _797;
        float _1510 = fma(_1500, cbModelParam._m0[30u].z, fma(_1499, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1498)) - _1467;
        float _1511 = fma(_1500, cbModelParam._m0[31u].z, fma(_1499, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1498)) - _1471;
        float _1512 = fma(_1500, cbModelParam._m0[32u].z, fma(_1499, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1498)) - _1475;
        float _1516 = inversesqrt(dot(vec3(_1510, _1511, _1512), vec3(_1510, _1511, _1512)));
        float _1529 = ((_1516 * _1510) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1467 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1530 = ((_1516 * _1511) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1471 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1531 = ((_1516 * _1512) / cbModelParam._m0[35u].z) + ((((((_1475 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1533 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1529, _1530, _1531), 0.0);
        vec4 _1540 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1529, _1530, _1531), 0.0);
        vec4 _1547 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1529, _1530, _1531), 0.0);
        vec4 _1554 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1529, _1530, _1531), 0.0);
        float _1566 = exp2((_1533.w + (-0.5)) * 20.0) * 2.0;
        float _1567 = _1566 * (_1533.x + (-0.5));
        float _1568 = _1566 * (_1533.y + (-0.5));
        float _1569 = _1566 * (_1533.z + (-0.5));
        float _1576 = exp2((_1540.w + (-0.5)) * 20.0) * 2.0;
        float _1577 = _1576 * (_1540.x + (-0.5));
        float _1578 = _1576 * (_1540.y + (-0.5));
        float _1579 = _1576 * (_1540.z + (-0.5));
        float _1586 = exp2((_1547.w + (-0.5)) * 20.0) * 2.0;
        float _1587 = _1586 * (_1547.x + (-0.5));
        float _1588 = _1586 * (_1547.y + (-0.5));
        float _1589 = _1586 * (_1547.z + (-0.5));
        float _1596 = exp2((_1554.w + (-0.5)) * 20.0) * 2.0;
        float _1597 = _1596 * (_1554.x + (-0.5));
        float _1598 = _1596 * (_1554.y + (-0.5));
        float _1599 = _1596 * (_1554.z + (-0.5));
        float _1600 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1601 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1602 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1603 = _1567 * 0.5;
        float _1604 = _1577 * 0.5;
        float _1605 = _1587 * 0.5;
        float _1606 = dot(vec3(_1603, _1604, _1605), vec3(_1603, _1604, _1605));
        float _1611 = (_1606 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1606);
        float _1619 = (dot(vec3(_795, _796, _797), vec3(_1611 * _1603, _1611 * _1604, _1611 * _1605)) + 1.0) * 0.5;
        float _4438 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1628 = sqrt(((_1604 * _1604) + (_1603 * _1603)) + (_1605 * _1605)) / (_1600 + 9.9999997473787516355514526367188e-06);
        float _4449 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1629 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
        float _1630 = _1629 * 2.0;
        float _1634 = (1.0 - _1629) / (_1629 + 1.0);
        float _4460 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1635 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
        float _1644 = ((((1.0 - _1635) * (_1630 + 2.0)) * exp2(log2(isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0))) * (_1630 + 1.0))) + _1635) * _1600;
        float _1645 = _1568 * 0.5;
        float _1646 = _1578 * 0.5;
        float _1647 = _1588 * 0.5;
        float _1648 = dot(vec3(_1645, _1646, _1647), vec3(_1645, _1646, _1647));
        float _1653 = (_1648 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1648);
        float _1661 = (dot(vec3(_795, _796, _797), vec3(_1653 * _1645, _1653 * _1646, _1653 * _1647)) + 1.0) * 0.5;
        float _4471 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1670 = sqrt(((_1646 * _1646) + (_1645 * _1645)) + (_1647 * _1647)) / (_1601 + 9.9999997473787516355514526367188e-06);
        float _4482 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1671 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
        float _1672 = _1671 * 2.0;
        float _1676 = (1.0 - _1671) / (_1671 + 1.0);
        float _4493 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1677 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
        float _1686 = ((((1.0 - _1677) * (_1672 + 2.0)) * exp2(log2(isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0))) * (_1672 + 1.0))) + _1677) * _1601;
        float _1687 = _1569 * 0.5;
        float _1688 = _1579 * 0.5;
        float _1689 = _1589 * 0.5;
        float _1690 = dot(vec3(_1687, _1688, _1689), vec3(_1687, _1688, _1689));
        float _1695 = (_1690 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1690);
        float _1703 = (dot(vec3(_795, _796, _797), vec3(_1695 * _1687, _1695 * _1688, _1695 * _1689)) + 1.0) * 0.5;
        float _4504 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
        float _1712 = sqrt(((_1688 * _1688) + (_1687 * _1687)) + (_1689 * _1689)) / (_1602 + 9.9999997473787516355514526367188e-06);
        float _4515 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
        float _1713 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
        float _1714 = _1713 * 2.0;
        float _1718 = (1.0 - _1713) / (_1713 + 1.0);
        float _4526 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
        float _1719 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
        float _1728 = ((((1.0 - _1719) * (_1714 + 2.0)) * exp2(log2(isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0))) * (_1714 + 1.0))) + _1719) * _1602;
        _1736 = _1569;
        _1737 = _1568;
        _1738 = _1567;
        _1739 = _1579;
        _1740 = _1578;
        _1741 = _1577;
        _1742 = _1589;
        _1743 = _1588;
        _1744 = _1587;
        _1745 = _1602;
        _1746 = _1601;
        _1747 = _1600;
        _1748 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0)));
        _1749 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0)));
        _1750 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0)));
    }
    else
    {
        _1736 = _1424;
        _1737 = _1424;
        _1738 = _1424;
        _1739 = _1424;
        _1740 = _1424;
        _1741 = _1424;
        _1742 = _1424;
        _1743 = _1424;
        _1744 = _1424;
        _1745 = _1424;
        _1746 = _1424;
        _1747 = _1424;
        _1748 = 0.0;
        _1749 = 0.0;
        _1750 = 0.0;
    }
    float _1760 = (cbModelParam._m0[1u].x * (_1748 - _1436)) + _1436;
    float _1761 = (cbModelParam._m0[1u].x * (_1749 - _1437)) + _1437;
    float _1762 = (cbModelParam._m0[1u].x * (_1750 - _1438)) + _1438;
    float _1783 = fma(_1762, cbSceneParam._m0[89u].z, fma(_1761, cbSceneParam._m0[89u].y, _1760 * cbSceneParam._m0[89u].x));
    float _1786 = fma(_1762, cbSceneParam._m0[90u].z, fma(_1761, cbSceneParam._m0[90u].y, _1760 * cbSceneParam._m0[90u].x));
    float _1789 = fma(_1762, cbSceneParam._m0[91u].z, fma(_1761, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1760));
    float _1804 = _1030 * 0.5;
    float _1805 = _1031 * 0.5;
    float _1806 = _1032 * 0.5;
    float _1807 = dot(vec4(_1804, _1805, _1806, 1.0), vec4(_1738, _1741, _1744, _1747));
    float _1810 = dot(vec4(_1804, _1805, _1806, 1.0), vec4(_1737, _1740, _1743, _1746));
    float _1813 = dot(vec4(_1804, _1805, _1806, 1.0), vec4(_1736, _1739, _1742, _1745));
    float _1847;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1820 = dot(vec4(_1804, _1805, _1806, 1.0), vec4(_1423, _1427, _1430, _1433));
        float _1824 = dot(vec4(_1804, _1805, _1806, 1.0), vec4(_1425, _1428, _1431, _1434));
        float _1828 = dot(vec4(_1804, _1805, _1806, 1.0), vec4(_1426, _1429, _1432, _1435));
        float _1835 = dot(vec4(cbModelParam._m0[39u]), vec4(_1804, _1805, _1806, 1.0));
        _1847 = dot(vec3(isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0)), isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0)), isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1835) ? 0.0 : (isnan(0.0) ? _1835 : max(0.0, _1835))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1847 = 1.0;
    }
    float _1858;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1849 = dot(vec4(cbModelParam._m0[40u]), vec4(_1804, _1805, _1806, 1.0));
        _1858 = dot(vec3(isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0)), isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0)), isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1849) ? 0.0 : (isnan(0.0) ? _1849 : max(0.0, _1849))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1858 = 1.0;
    }
    float _1862 = (_1858 * cbModelParam._m0[1u].x) + (_1847 * (1.0 - cbModelParam._m0[1u].x));
    float _1872 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _937);
    float _1873 = isnan(_1872) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1872 : min(cbModelParam._m0[25u].z, _1872));
    float _1953;
    float _1955;
    float _1957;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1920 = fma(_1094, cbModelParam._m0[13u].z, fma(_1090, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1086)) + cbModelParam._m0[13u].w;
        float _1924 = fma(_1094, cbModelParam._m0[14u].z, fma(_1090, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1086)) + cbModelParam._m0[14u].w;
        float _1928 = fma(_1094, cbModelParam._m0[15u].z, fma(_1090, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1086)) + cbModelParam._m0[15u].w;
        float _1931 = fma(_1032, cbModelParam._m0[13u].z, fma(_1031, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1030));
        float _1934 = fma(_1032, cbModelParam._m0[14u].z, fma(_1031, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1030));
        float _1937 = fma(_1032, cbModelParam._m0[15u].z, fma(_1031, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1030));
        float _1965;
        if (_1931 > 0.0)
        {
            _1965 = abs((1.0 - _1920) / _1931);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1931 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1920 + 1.0) / _1931);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1965 = frontier_phi_19_17_ladder;
        }
        float _2136;
        if (_1934 > 0.0)
        {
            _2136 = abs((1.0 - _1924) / _1934);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1934 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1924 + 1.0) / _1934);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2136 = frontier_phi_28_24_ladder;
        }
        float _2430;
        if (_1937 > 0.0)
        {
            _2430 = abs((1.0 - _1928) / _1937);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1937 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1928 + 1.0) / _1937);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2430 = frontier_phi_40_35_ladder;
        }
        float _2432 = isnan(_2136) ? _1965 : (isnan(_1965) ? _2136 : min(_1965, _2136));
        float _2433 = isnan(_2430) ? _2432 : (isnan(_2432) ? _2430 : min(_2432, _2430));
        float _2437 = (_2433 * _1931) + _1920;
        float _2438 = (_2433 * _1934) + _1924;
        float _2439 = (_2433 * _1937) + _1928;
        float _2440 = _2433 * 9.9999997473787516355514526367188e-05;
        float _2442 = (-1.0) - _2440;
        float _2444 = _2440 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2439 > _2444) || ((_2439 < _2442) || ((_2438 > _2444) || ((_2438 < _2442) || ((_2437 < _2442) || (_2437 > _2444))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2584 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2439, cbModelParam._m0[9u].z, fma(_2438, cbModelParam._m0[9u].y, _2437 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2439, cbModelParam._m0[10u].z, fma(_2438, cbModelParam._m0[10u].y, _2437 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2439, cbModelParam._m0[11u].z, fma(_2438, cbModelParam._m0[11u].y, _2437 * cbModelParam._m0[11u].x))), _1873);
            frontier_phi_18_40_ladder = _2584.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2584.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2584.x * cbModelParam._m0[1u].y;
        }
        _1953 = frontier_phi_18_40_ladder_2;
        _1955 = frontier_phi_18_40_ladder_1;
        _1957 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1941 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1030, _1031, _1032), _1873);
        _1953 = _1941.x * cbModelParam._m0[1u].y;
        _1955 = _1941.y * cbModelParam._m0[1u].y;
        _1957 = _1941.z * cbModelParam._m0[1u].y;
    }
    float _1961 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _937);
    float _1962 = isnan(_1961) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1961 : min(cbModelParam._m0[25u].w, _1961));
    float _2051;
    float _2053;
    float _2055;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2015 = fma(_1094, cbModelParam._m0[21u].z, fma(_1090, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1086)) + cbModelParam._m0[21u].w;
        float _2019 = fma(_1094, cbModelParam._m0[22u].z, fma(_1090, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1086)) + cbModelParam._m0[22u].w;
        float _2023 = fma(_1094, cbModelParam._m0[23u].z, fma(_1090, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1086)) + cbModelParam._m0[23u].w;
        float _2026 = fma(_1032, cbModelParam._m0[21u].z, fma(_1031, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1030));
        float _2029 = fma(_1032, cbModelParam._m0[22u].z, fma(_1031, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1030));
        float _2032 = fma(_1032, cbModelParam._m0[23u].z, fma(_1031, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1030));
        float _2141;
        if (_2026 > 0.0)
        {
            _2141 = abs((1.0 - _2015) / _2026);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2026 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2015 + 1.0) / _2026);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2141 = frontier_phi_30_26_ladder;
        }
        float _2457;
        if (_2029 > 0.0)
        {
            _2457 = abs((1.0 - _2019) / _2029);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2029 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2019 + 1.0) / _2029);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2457 = frontier_phi_42_37_ladder;
        }
        float _2795;
        if (_2032 > 0.0)
        {
            _2795 = abs((1.0 - _2023) / _2032);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_2032 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_2023 + 1.0) / _2032);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2795 = frontier_phi_52_49_ladder;
        }
        float _2797 = isnan(_2457) ? _2141 : (isnan(_2141) ? _2457 : min(_2141, _2457));
        float _2798 = isnan(_2795) ? _2797 : (isnan(_2797) ? _2795 : min(_2797, _2795));
        float _2802 = (_2798 * _2026) + _2015;
        float _2803 = (_2798 * _2029) + _2019;
        float _2804 = (_2798 * _2032) + _2023;
        float _2805 = _2798 * 9.9999997473787516355514526367188e-05;
        float _2806 = (-1.0) - _2805;
        float _2808 = _2805 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2804 > _2808) || ((_2804 < _2806) || ((_2803 > _2808) || ((_2803 < _2806) || ((_2802 < _2806) || (_2802 > _2808))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2926 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2804, cbModelParam._m0[17u].z, fma(_2803, cbModelParam._m0[17u].y, _2802 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2804, cbModelParam._m0[18u].z, fma(_2803, cbModelParam._m0[18u].y, _2802 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2804, cbModelParam._m0[19u].z, fma(_2803, cbModelParam._m0[19u].y, _2802 * cbModelParam._m0[19u].x))), _1962);
            frontier_phi_27_52_ladder = _2926.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2926.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2926.x * cbModelParam._m0[1u].z;
        }
        _2051 = frontier_phi_27_52_ladder_2;
        _2053 = frontier_phi_27_52_ladder_1;
        _2055 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _2035 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1030, _1031, _1032), _1962);
        _2051 = _2035.x * cbModelParam._m0[1u].z;
        _2053 = _2035.y * cbModelParam._m0[1u].z;
        _2055 = _2035.z * cbModelParam._m0[1u].z;
    }
    float _2068 = (((_1057 * _1007) + _1058) * _1022) * ((cbModelParam._m0[1u].w * (_2051 - _1953)) + _1953);
    float _2070 = (((_1057 * _1009) + _1058) * _1022) * ((cbModelParam._m0[1u].w * (_2053 - _1955)) + _1955);
    float _2072 = (((_1057 * _1010) + _1058) * _1022) * ((cbModelParam._m0[1u].w * (_2055 - _1957)) + _1957);
    float _2075 = fma(_2072, cbSceneParam._m0[89u].z, fma(_2070, cbSceneParam._m0[89u].y, _2068 * cbSceneParam._m0[89u].x));
    float _2078 = fma(_2072, cbSceneParam._m0[90u].z, fma(_2070, cbSceneParam._m0[90u].y, _2068 * cbSceneParam._m0[90u].x));
    float _2081 = fma(_2072, cbSceneParam._m0[91u].z, fma(_2070, cbSceneParam._m0[91u].y, _2068 * cbSceneParam._m0[91u].x));
    float _2115 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2119 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2123 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2127 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2128 = _2115 / _2127;
    float _2129 = _2119 / _2127;
    float _2130 = _2123 / _2127;
    float _2276;
    float _2277;
    float _2278;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2157 = ((uint(_2130 > cbSceneParam._m0[59u].y) + uint(_2130 > cbSceneParam._m0[59u].x)) + uint(_2130 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2158 = _2157 + 43u;
        uint _2166 = _2157 + 44u;
        uint _2174 = _2157 + 45u;
        uint _2182 = _2157 + 46u;
        float _2193 = fma(_2127, cbSceneParam._m0[_2158].w, fma(_2123, cbSceneParam._m0[_2158].z, fma(_2119, cbSceneParam._m0[_2158].y, _2115 * cbSceneParam._m0[_2158].x)));
        float _2197 = fma(_2127, cbSceneParam._m0[_2166].w, fma(_2123, cbSceneParam._m0[_2166].z, fma(_2119, cbSceneParam._m0[_2166].y, _2115 * cbSceneParam._m0[_2166].x)));
        float _2205 = fma(_2127, cbSceneParam._m0[_2182].w, fma(_2123, cbSceneParam._m0[_2182].z, fma(_2119, cbSceneParam._m0[_2182].y, _2115 * cbSceneParam._m0[_2182].x)));
        float _2210 = cbSceneParam._m0[33u].z * _2205;
        float _2212 = cbSceneParam._m0[33u].w * _2205;
        float _2215 = fma(_2127, cbSceneParam._m0[_2174].w, fma(_2123, cbSceneParam._m0[_2174].z, fma(_2119, cbSceneParam._m0[_2174].y, _2115 * cbSceneParam._m0[_2174].x))) / _2205;
        float _2262 = (cbSceneParam._m0[33u].x - sqrt(((_2129 * _2129) + (_2128 * _2128)) + (_2130 * _2130))) * cbSceneParam._m0[33u].y;
        float _4652 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
        float _2269 = (isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2210 + _2193) / _2205, (_2212 + _2197) / _2205), _2215), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2212 + _2193) / _2205, (_2197 - _2210) / _2205), _2215), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2193 - _2210) / _2205, (_2197 - _2212) / _2205), _2215), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2193 - _2212) / _2205, (_2210 + _2197) / _2205), _2215), 0.0)).x), vec4(0.25)));
        _2276 = 1.0 - (_2269 * cbSceneParam._m0[34u].x);
        _2277 = 1.0 - (_2269 * cbSceneParam._m0[34u].y);
        _2278 = 1.0 - (_2269 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2276 = 1.0;
        _2277 = 1.0;
        _2278 = 1.0;
    }
    float _2342;
    float _2344;
    float _2346;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2330 = fma(_2127, cbSceneParam._m0[63u].w, fma(_2123, cbSceneParam._m0[63u].z, fma(_2119, cbSceneParam._m0[63u].y, _2115 * cbSceneParam._m0[63u].x)));
        float _2331 = fma(_2127, cbSceneParam._m0[60u].w, fma(_2123, cbSceneParam._m0[60u].z, fma(_2119, cbSceneParam._m0[60u].y, _2115 * cbSceneParam._m0[60u].x))) / _2330;
        float _2332 = fma(_2127, cbSceneParam._m0[61u].w, fma(_2123, cbSceneParam._m0[61u].z, fma(_2119, cbSceneParam._m0[61u].y, _2115 * cbSceneParam._m0[61u].x))) / _2330;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2331 >= cbSceneParam._m0[64u].x) && (_2332 >= cbSceneParam._m0[64u].y)) && (_2331 <= cbSceneParam._m0[64u].z)) && (_2332 <= cbSceneParam._m0[64u].w))
        {
            float _2470 = fma(_2127, cbSceneParam._m0[62u].w, fma(_2123, cbSceneParam._m0[62u].z, fma(_2119, cbSceneParam._m0[62u].y, _2115 * cbSceneParam._m0[62u].x))) / _2330;
            float _2474 = isnan(cbSceneParam._m0[41u].w) ? _2470 : (isnan(_2470) ? cbSceneParam._m0[41u].w : max(_2470, cbSceneParam._m0[41u].w));
            float _2517 = (cbSceneParam._m0[33u].x - sqrt(((_2129 * _2129) + (_2128 * _2128)) + (_2130 * _2130))) * cbSceneParam._m0[33u].y;
            float _4668 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
            float _2524 = (isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2331, cbSceneParam._m0[33u].w + _2332), _2474), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2331, _2332 - cbSceneParam._m0[33u].z), _2474), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2331 - cbSceneParam._m0[33u].z, _2332 - cbSceneParam._m0[33u].w), _2474), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2331 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2332), _2474), 0.0)).x), vec4(0.25)));
            float _2528 = 1.0 - (_2524 * cbSceneParam._m0[34u].x);
            float _2529 = 1.0 - (_2524 * cbSceneParam._m0[34u].y);
            float _2530 = 1.0 - (_2524 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2529) ? _2277 : (isnan(_2277) ? _2529 : min(_2277, _2529));
            frontier_phi_39_38_ladder_1 = isnan(_2528) ? _2276 : (isnan(_2276) ? _2528 : min(_2276, _2528));
            frontier_phi_39_38_ladder_2 = isnan(_2530) ? _2278 : (isnan(_2278) ? _2530 : min(_2278, _2530));
        }
        else
        {
            frontier_phi_39_38_ladder = _2277;
            frontier_phi_39_38_ladder_1 = _2276;
            frontier_phi_39_38_ladder_2 = _2278;
        }
        _2342 = frontier_phi_39_38_ladder_1;
        _2344 = frontier_phi_39_38_ladder;
        _2346 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2342 = _2276;
        _2344 = _2277;
        _2346 = _2278;
    }
    uvec4 _2351 = floatBitsToUint(cbInstanceData._m0[_950 + 5u]);
    uint _2353 = _2351.x * 14u;
    uint _2354 = _2353 + 13u;
    float _2361 = _1022 + (-1.0);
    float _2366 = (cbLight._m0[_2354].x * _2361) + 1.0;
    float _2367 = (cbLight._m0[_2354].y * _2361) + 1.0;
    float _2368 = (cbLight._m0[_2354].z * _2361) + 1.0;
    float _2369 = (cbLight._m0[_2354].w * _2361) + 1.0;
    uint _2370 = _2353 + 5u;
    float _2376 = isnan(1.0) ? _2367 : (isnan(_2367) ? 1.0 : min(_2367, 1.0));
    uint _2380 = _2353 + 4u;
    float _2389 = isnan(1.0) ? _2366 : (isnan(_2366) ? 1.0 : min(_2366, 1.0));
    uint _2393 = _2353 | 1u;
    float _2404 = dot(vec3(cbLight._m0[_2353].xyz), vec3(_795, _796, _797));
    float _2407 = dot(vec3(cbLight._m0[_2393].xyz), vec3(_795, _796, _797));
    float _4704 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
    float _4715 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
    float _2412 = (isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0))) * 0.3183098733425140380859375;
    float _2414 = (isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0))) * 0.3183098733425140380859375;
    float _2421 = ((cbLight._m0[_2370].x * _2376) * _2414) + (((cbLight._m0[_2380].x * _2342) * _2389) * _2412);
    float _2422 = ((_2376 * cbLight._m0[_2370].y) * _2414) + (((cbLight._m0[_2380].y * _2344) * _2389) * _2412);
    float _2423 = ((_2376 * cbLight._m0[_2370].z) * _2414) + (((cbLight._m0[_2380].z * _2346) * _2389) * _2412);
    uvec4 _2427 = floatBitsToUint(cbLight._m0[_2353 + 12u]);
    bool _2429 = _2427.x == 0u;
    float _2531;
    float _2533;
    float _2535;
    if (_2429)
    {
        _2531 = _2421;
        _2533 = _2422;
        _2535 = _2423;
    }
    else
    {
        uint _2539 = _2353 + 6u;
        float _2555 = (dot(vec3(cbLight._m0[_2353 + 2u].xyz), vec3(_795, _796, _797)) * 0.5) + 0.5;
        float _2556 = _2555 * _2555;
        float _4726 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
        float _2557 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
        float _2558 = isnan(1.0) ? _2368 : (isnan(_2368) ? 1.0 : min(_2368, 1.0));
        _2531 = (((cbLight._m0[_2539].x * 0.3183098733425140380859375) * _2557) * _2558) + _2421;
        _2533 = (((cbLight._m0[_2539].y * 0.3183098733425140380859375) * _2557) * _2558) + _2422;
        _2535 = (((cbLight._m0[_2539].z * 0.3183098733425140380859375) * _2557) * _2558) + _2423;
    }
    bool _2538 = _2427.y == 0u;
    float _2593;
    float _2595;
    float _2597;
    if (_2538)
    {
        _2593 = _2531;
        _2595 = _2533;
        _2597 = _2535;
    }
    else
    {
        uint _2766 = _2353 + 7u;
        float _2782 = (dot(vec3(cbLight._m0[_2353 + 3u].xyz), vec3(_795, _796, _797)) * 0.5) + 0.5;
        float _2783 = _2782 * _2782;
        float _4742 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
        float _2784 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
        float _2785 = isnan(1.0) ? _2369 : (isnan(_2369) ? 1.0 : min(_2369, 1.0));
        _2593 = (((cbLight._m0[_2766].x * 0.3183098733425140380859375) * _2784) * _2785) + _2531;
        _2595 = (((cbLight._m0[_2766].y * 0.3183098733425140380859375) * _2784) * _2785) + _2533;
        _2597 = (((cbLight._m0[_2766].z * 0.3183098733425140380859375) * _2784) * _2785) + _2535;
    }
    uint _2600 = _2353 + 8u;
    float _2613 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2353].w)) * _937) * 0.949999988079071044921875);
    float _2614 = _2613 * _2613;
    float _2615 = cbLight._m0[_2353].x + _875;
    float _2616 = cbLight._m0[_2353].y + _876;
    float _2617 = cbLight._m0[_2353].z + _877;
    float _2621 = inversesqrt(dot(vec3(_2615, _2616, _2617), vec3(_2615, _2616, _2617)));
    float _2622 = _2621 * _2615;
    float _2623 = _2621 * _2616;
    float _2624 = _2621 * _2617;
    float _2625 = dot(vec3(_795, _796, _797), vec3(cbLight._m0[_2353].xyz));
    float _4758 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
    float _2628 = isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0));
    float _4769 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
    float _2629 = isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0));
    float _2630 = dot(vec3(_795, _796, _797), vec3(_2622, _2623, _2624));
    float _4780 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
    float _2633 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
    float _2634 = dot(vec3(cbLight._m0[_2353].xyz), vec3(_2622, _2623, _2624));
    float _4791 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
    float _2638 = _2614 * _2614;
    float _2642 = ((_2633 * _2633) * (_2638 + (-1.0))) + 1.0;
    float _2650 = exp2(log2(1.0 - (isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0)))) * 5.0);
    float _2651 = 0.959999978542327880859375 - _1004;
    float _2653 = 0.959999978542327880859375 - _1005;
    float _2654 = 0.959999978542327880859375 - _1006;
    float _2661 = 1.0 - _2614;
    float _2672 = (0.5 / (((_2629 * ((_2628 * _2661) + _2614)) + 9.9999999392252902907785028219223e-09) + (((_2629 * _2661) + _2614) * _2628))) * _2628;
    float _4802 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
    float _2674 = (isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0))) * (_2638 / ((_2642 * _2642) * 3.141590118408203125));
    uint _2688 = _2353 + 9u;
    float _2699 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2393].w)) * _937) * 0.949999988079071044921875);
    float _2700 = _2699 * _2699;
    float _2701 = cbLight._m0[_2393].x + _875;
    float _2702 = cbLight._m0[_2393].y + _876;
    float _2703 = cbLight._m0[_2393].z + _877;
    float _2707 = inversesqrt(dot(vec3(_2701, _2702, _2703), vec3(_2701, _2702, _2703)));
    float _2708 = _2707 * _2701;
    float _2709 = _2707 * _2702;
    float _2710 = _2707 * _2703;
    float _2711 = dot(vec3(_795, _796, _797), vec3(cbLight._m0[_2393].xyz));
    float _4813 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
    float _2714 = isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0));
    float _2715 = dot(vec3(_795, _796, _797), vec3(_2708, _2709, _2710));
    float _4824 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
    float _2718 = isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0));
    float _2719 = dot(vec3(cbLight._m0[_2393].xyz), vec3(_2708, _2709, _2710));
    float _4835 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0));
    float _2723 = _2700 * _2700;
    float _2727 = ((_2718 * _2718) * (_2723 + (-1.0))) + 1.0;
    float _2734 = exp2(log2(1.0 - (isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0)))) * 5.0);
    float _2741 = 1.0 - _2700;
    float _2751 = (0.5 / (((_2629 * ((_2714 * _2741) + _2700)) + 9.9999999392252902907785028219223e-09) + (((_2629 * _2741) + _2700) * _2714))) * _2714;
    float _4846 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
    float _2753 = (isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0))) * (_2723 / ((_2727 * _2727) * 3.141590118408203125));
    float _2763 = (((((_2734 * _2651) + _1007) * cbLight._m0[_2688].x) * _2753) * _2376) + ((((cbLight._m0[_2600].x * _2342) * ((_2650 * _2651) + _1007)) * _2674) * _2389);
    float _2764 = (((((_2734 * _2653) + _1009) * cbLight._m0[_2688].y) * _2753) * _2376) + ((((cbLight._m0[_2600].y * _2344) * ((_2650 * _2653) + _1009)) * _2674) * _2389);
    float _2765 = (((((_2734 * _2654) + _1010) * cbLight._m0[_2688].z) * _2753) * _2376) + ((((cbLight._m0[_2600].z * _2346) * ((_2650 * _2654) + _1010)) * _2674) * _2389);
    float _2821;
    float _2823;
    float _2825;
    if (_2429)
    {
        _2821 = _2763;
        _2823 = _2764;
        _2825 = _2765;
    }
    else
    {
        uint _2827 = _2353 + 2u;
        uint _2831 = _2353 + 10u;
        float _2845 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2827].w)) * _937) * 0.949999988079071044921875);
        float _2846 = _2845 * _2845;
        float _2847 = cbLight._m0[_2827].x + _875;
        float _2848 = cbLight._m0[_2827].y + _876;
        float _2849 = cbLight._m0[_2827].z + _877;
        float _2853 = inversesqrt(dot(vec3(_2847, _2848, _2849), vec3(_2847, _2848, _2849)));
        float _2854 = _2853 * _2847;
        float _2855 = _2853 * _2848;
        float _2856 = _2853 * _2849;
        float _2857 = dot(vec3(_795, _796, _797), vec3(cbLight._m0[_2827].xyz));
        float _4857 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0));
        float _2860 = isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0));
        float _2861 = dot(vec3(_795, _796, _797), vec3(_2854, _2855, _2856));
        float _4868 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0));
        float _2864 = isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0));
        float _2865 = dot(vec3(cbLight._m0[_2827].xyz), vec3(_2854, _2855, _2856));
        float _4879 = isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0));
        float _2869 = _2846 * _2846;
        float _2873 = ((_2864 * _2864) * (_2869 + (-1.0))) + 1.0;
        float _2880 = exp2(log2(1.0 - (isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0)))) * 5.0);
        float _2887 = 1.0 - _2846;
        float _2897 = (0.5 / (((_2629 * ((_2860 * _2887) + _2846)) + 9.9999999392252902907785028219223e-09) + (((_2629 * _2887) + _2846) * _2860))) * _2860;
        float _4890 = isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0));
        float _2899 = (isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0))) * (_2869 / ((_2873 * _2873) * 3.141590118408203125));
        float _2900 = isnan(1.0) ? _2368 : (isnan(_2368) ? 1.0 : min(_2368, 1.0));
        _2821 = (((((_2880 * _2651) + _1007) * cbLight._m0[_2831].x) * _2899) * _2900) + _2763;
        _2823 = (((((_2880 * _2653) + _1009) * cbLight._m0[_2831].y) * _2899) * _2900) + _2764;
        _2825 = (((((_2880 * _2654) + _1010) * cbLight._m0[_2831].z) * _2899) * _2900) + _2765;
    }
    float _2931;
    float _2933;
    float _2935;
    if (_2538)
    {
        _2931 = _2821;
        _2933 = _2823;
        _2935 = _2825;
    }
    else
    {
        uint _2942 = _2353 + 3u;
        uint _2946 = _2353 + 11u;
        float _2960 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2942].w)) * _937) * 0.949999988079071044921875);
        float _2961 = _2960 * _2960;
        float _2962 = cbLight._m0[_2942].x + _875;
        float _2963 = cbLight._m0[_2942].y + _876;
        float _2964 = cbLight._m0[_2942].z + _877;
        float _2968 = inversesqrt(dot(vec3(_2962, _2963, _2964), vec3(_2962, _2963, _2964)));
        float _2969 = _2968 * _2962;
        float _2970 = _2968 * _2963;
        float _2971 = _2968 * _2964;
        float _2972 = dot(vec3(_795, _796, _797), vec3(cbLight._m0[_2942].xyz));
        float _4906 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0));
        float _2975 = isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0));
        float _2976 = dot(vec3(_795, _796, _797), vec3(_2969, _2970, _2971));
        float _4917 = isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0));
        float _2979 = isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0));
        float _2980 = dot(vec3(cbLight._m0[_2942].xyz), vec3(_2969, _2970, _2971));
        float _4928 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0));
        float _2984 = _2961 * _2961;
        float _2988 = ((_2979 * _2979) * (_2984 + (-1.0))) + 1.0;
        float _2995 = exp2(log2(1.0 - (isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0)))) * 5.0);
        float _3002 = 1.0 - _2961;
        float _3012 = (0.5 / (((_2629 * ((_2975 * _3002) + _2961)) + 9.9999999392252902907785028219223e-09) + (((_2629 * _3002) + _2961) * _2975))) * _2975;
        float _4939 = isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0));
        float _3014 = (isnan(1.0) ? _4939 : (isnan(_4939) ? 1.0 : min(_4939, 1.0))) * (_2984 / ((_2988 * _2988) * 3.141590118408203125));
        float _3015 = isnan(1.0) ? _2369 : (isnan(_2369) ? 1.0 : min(_2369, 1.0));
        _2931 = (((((_2995 * _2651) + _1007) * cbLight._m0[_2946].x) * _3014) * _3015) + _2821;
        _2933 = (((((_2995 * _2653) + _1009) * cbLight._m0[_2946].y) * _3014) * _3015) + _2823;
        _2935 = (((((_2995 * _2654) + _1010) * cbLight._m0[_2946].z) * _3014) * _3015) + _2825;
    }
    float _3080;
    float _3082;
    float _3084;
    float _3086;
    float _3088;
    float _3090;
    if (_2351.y == 0u)
    {
        uvec4 _3036 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3037 = _3036.x;
        uint _3048 = uint((float(_3036.y) * floor(float(uint(cbSceneParam._m0[85u].y * _896) / _3037))) + floor(float(uint(cbSceneParam._m0[85u].x * _895) / _3037)));
        float _3058 = (log2(_2130 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3059 = isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0));
        uint _3062 = uint(isnan(14.0) ? _3059 : (isnan(_3059) ? 14.0 : min(_3059, 14.0)));
        uvec4 _3067 = texelFetch(g_lightClusterGridBuffer, int(((_3062 << 2u) + (_3048 << 6u)) >> 2u));
        uint _3068 = _3067.x;
        uint _3069 = _3036.z;
        float _3182;
        float _3184;
        float _3186;
        float _3188;
        float _3190;
        float _3192;
        if (((((1u << ((_3069 >> 4u) & 15u)) + 4294967295u) & _3068) == 0u) || ((_3069 & 240u) == 0u))
        {
            _3182 = 0.0;
            _3184 = 0.0;
            _3186 = 0.0;
            _3188 = 0.0;
            _3190 = 0.0;
            _3192 = 0.0;
        }
        else
        {
            float _3183;
            float _3185;
            float _3187;
            float _3189;
            float _3191;
            float _3193;
            float _3343 = 0.0;
            float _3344 = 0.0;
            float _3345 = 0.0;
            float _3346 = 0.0;
            float _3347 = 0.0;
            float _3348 = 0.0;
            uint _3349 = 0u;
            uint _3358;
            bool _3359;
            for (;;)
            {
                _3358 = texelFetch(g_lightClassification, int((((_3062 << 5u) + (_3048 << 9u)) + (_3349 << 2u)) >> 2u)).x;
                _3359 = _3358 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3359)
                {
                    frontier_phi_73_pred = _3348;
                    frontier_phi_73_pred_1 = _3347;
                    frontier_phi_73_pred_2 = _3346;
                    frontier_phi_73_pred_3 = _3345;
                    frontier_phi_73_pred_4 = _3344;
                    frontier_phi_73_pred_5 = _3343;
                }
                else
                {
                    float _3488;
                    float _3489;
                    float _3490;
                    float _3491;
                    float _3492;
                    float _3493;
                    uint _3494;
                    _3488 = _3343;
                    _3489 = _3344;
                    _3490 = _3345;
                    _3491 = _3346;
                    _3492 = _3347;
                    _3493 = _3348;
                    _3494 = _3358;
                    float _3415;
                    float _3416;
                    float _3417;
                    float _3418;
                    float _3419;
                    float _3420;
                    for (;;)
                    {
                        uint _3498 = uint(findLSB(_3494)) + (_3349 << 5u);
                        uint _3495 = (_3494 + 4294967295u) & _3494;
                        uint _3500 = _3498 * 48u;
                        vec4 _3514 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3500)).x, texelFetch(g_PointLightRenderingBuffer, int(_3500 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3500 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3500 + 3u)).x));
                        uint _3520 = (_3498 * 48u) + 4u;
                        vec4 _3533 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3520)).x, texelFetch(g_PointLightRenderingBuffer, int(_3520 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3520 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3520 + 3u)).x));
                        uint _3539 = (_3498 * 48u) + 8u;
                        vec3 _3550 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3539)).x, texelFetch(g_PointLightRenderingBuffer, int(_3539 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3539 + 2u)).x));
                        float _3554 = _3514.x - _2128;
                        float _3555 = _3514.y - _2129;
                        float _3556 = _3514.z - _2130;
                        float _3557 = dot(vec3(_3554, _3555, _3556), vec3(_3554, _3555, _3556));
                        float _3560 = inversesqrt(_3557);
                        float _3561 = _3560 * _3554;
                        float _3562 = _3560 * _3555;
                        float _3563 = _3560 * _3556;
                        float _3564 = dot(vec3(_918, _921, _924), vec3(_3561, _3562, _3563));
                        float _3569 = 1.0 - (_3557 * _3514.w);
                        float _4965 = isnan(0.0) ? _3569 : (isnan(_3569) ? 0.0 : max(_3569, 0.0));
                        float _3570 = isnan(1.0) ? _4965 : (isnan(_4965) ? 1.0 : min(_4965, 1.0));
                        float _3571 = sqrt(_3557) * _3533.w;
                        float _3574 = 1.39999997615814208984375 / (_3571 + 1.39999997615814208984375);
                        float _3575 = _3574 * _3574;
                        float _3578 = ((1.0 - _3575) * _3564) + _3575;
                        float _3581 = _3571 * _3571;
                        float _3585 = ((isnan(0.0) ? _3578 : (isnan(_3578) ? 0.0 : max(_3578, 0.0))) * _3570) / ((_3581 * 0.699999988079071044921875) + 1.0);
                        float _3589 = (-0.0) - _2128;
                        float _3590 = (-0.0) - _2129;
                        float _3591 = (-0.0) - _2130;
                        float _3595 = inversesqrt(dot(vec3(_3589, _3590, _3591), vec3(_3589, _3590, _3591)));
                        float _3596 = _3595 * _3589;
                        float _3597 = _3595 * _3590;
                        float _3598 = _3595 * _3591;
                        float _3605 = exp2(log2(1.0 / ((_3581 * 3.5) + 5.0)) * 0.25);
                        float _3606 = 1.0 - _1038;
                        float _3613 = sqrt(1.0 - ((1.0 - (_3606 * _3606)) * (1.0 - (_3605 * _3605))));
                        float _3614 = _3613 * _3613;
                        float _3615 = _3614 * _3614;
                        float _3616 = _3596 + _3561;
                        float _3617 = _3597 + _3562;
                        float _3618 = _3598 + _3563;
                        float _3622 = inversesqrt(dot(vec3(_3616, _3617, _3618), vec3(_3616, _3617, _3618)));
                        float _3626 = dot(vec3(_918, _921, _924), vec3(_3596, _3597, _3598));
                        float _4981 = isnan(0.0) ? _3626 : (isnan(_3626) ? 0.0 : max(_3626, 0.0));
                        float _3629 = isnan(1.0) ? _4981 : (isnan(_4981) ? 1.0 : min(_4981, 1.0));
                        float _3630 = dot(vec3(_918, _921, _924), vec3(_3622 * _3616, _3622 * _3617, _3622 * _3618));
                        float _4992 = isnan(0.0) ? _3630 : (isnan(_3630) ? 0.0 : max(_3630, 0.0));
                        float _3633 = isnan(1.0) ? _4992 : (isnan(_4992) ? 1.0 : min(_4992, 1.0));
                        float _3637 = ((_3633 * _3633) * (_3615 + (-1.0))) + 1.0;
                        float _3638 = _3574 * _3614;
                        float _3639 = _3638 * _3638;
                        float _3642 = ((1.0 - _3639) * _3564) + _3639;
                        float _5003 = isnan(0.0) ? _3642 : (isnan(_3642) ? 0.0 : max(_3642, 0.0));
                        float _3643 = isnan(1.0) ? _5003 : (isnan(_5003) ? 1.0 : min(_5003, 1.0));
                        float _3644 = 1.0 - _3614;
                        float _3654 = (0.5 / (((_3643 * ((_3629 * _3644) + _3614)) + 9.9999999392252902907785028219223e-09) + (((_3643 * _3644) + _3614) * _3629))) * _3643;
                        float _5014 = isnan(0.0) ? _3654 : (isnan(_3654) ? 0.0 : max(_3654, 0.0));
                        float _3665 = (((_3615 * 3.1415927410125732421875) * (isnan(1.0) ? _5014 : (isnan(_5014) ? 1.0 : min(_5014, 1.0)))) / ((_3637 * _3637) * ((_3581 * 2.1991131305694580078125) + 3.141590118408203125))) * _3570;
                        _3418 = (_3585 * _3533.x) + _3491;
                        _3419 = (_3585 * _3533.y) + _3492;
                        _3420 = (_3585 * _3533.z) + _3493;
                        _3415 = (_3665 * _3550.x) + _3488;
                        _3416 = (_3665 * _3550.y) + _3489;
                        _3417 = (_3665 * _3550.z) + _3490;
                        if (_3495 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3488 = _3415;
                            _3489 = _3416;
                            _3490 = _3417;
                            _3491 = _3418;
                            _3492 = _3419;
                            _3493 = _3420;
                            _3494 = _3495;
                        }
                    }
                    frontier_phi_73_pred = _3420;
                    frontier_phi_73_pred_1 = _3419;
                    frontier_phi_73_pred_2 = _3418;
                    frontier_phi_73_pred_3 = _3417;
                    frontier_phi_73_pred_4 = _3416;
                    frontier_phi_73_pred_5 = _3415;
                }
                _3193 = frontier_phi_73_pred;
                _3191 = frontier_phi_73_pred_1;
                _3189 = frontier_phi_73_pred_2;
                _3187 = frontier_phi_73_pred_3;
                _3185 = frontier_phi_73_pred_4;
                _3183 = frontier_phi_73_pred_5;
                uint _3350 = _3349 + 1u;
                if (_3350 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3343 = _3183;
                    _3344 = _3185;
                    _3345 = _3187;
                    _3346 = _3189;
                    _3347 = _3191;
                    _3348 = _3193;
                    _3349 = _3350;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3182 = _3183;
            _3184 = _3185;
            _3186 = _3187;
            _3188 = _3189;
            _3190 = _3191;
            _3192 = _3193;
        }
        uvec4 _3196 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3197 = _3196.z;
        uint _3199 = (_3197 >> 8u) & 15u;
        float _3311;
        float _3313;
        float _3315;
        float _3317;
        float _3319;
        float _3321;
        if (((4294967295u << _3199) & _3068) == 0u)
        {
            _3311 = _3182;
            _3313 = _3184;
            _3315 = _3186;
            _3317 = _3188;
            _3319 = _3190;
            _3321 = _3192;
        }
        else
        {
            float _3336 = inversesqrt(dot(vec3(_2128, _2129, _2130), vec3(_2128, _2129, _2130)));
            float _3337 = _3336 * _2128;
            float _3338 = _3336 * _2129;
            float _3339 = _3336 * _2130;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3199 < ((_3197 >> 12u) & 15u))
            {
                float _3312;
                float _3314;
                float _3316;
                float _3318;
                float _3320;
                float _3322;
                float _3471 = _3182;
                float _3472 = _3184;
                float _3473 = _3186;
                float _3474 = _3188;
                float _3475 = _3190;
                float _3476 = _3192;
                uint _3477 = _3199;
                uint _3486;
                bool _3487;
                for (;;)
                {
                    _3486 = texelFetch(g_lightClassification, int((((_3062 << 5u) + (_3048 << 9u)) + (_3477 << 2u)) >> 2u)).x;
                    _3487 = _3486 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3487)
                    {
                        frontier_phi_84_pred = _3475;
                        frontier_phi_84_pred_1 = _3474;
                        frontier_phi_84_pred_2 = _3473;
                        frontier_phi_84_pred_3 = _3472;
                        frontier_phi_84_pred_4 = _3471;
                        frontier_phi_84_pred_5 = _3476;
                    }
                    else
                    {
                        float _3679;
                        float _3680;
                        float _3681;
                        float _3682;
                        float _3683;
                        float _3684;
                        float _3972;
                        float _3973;
                        float _3974;
                        float _3975;
                        float _3976;
                        float _3977;
                        float _3692 = _3471;
                        float _3693 = _3472;
                        float _3694 = _3473;
                        float _3695 = _3474;
                        float _3696 = _3475;
                        float _3697 = _3476;
                        uint _3698 = _3486;
                        uint _3699;
                        vec4 _3724;
                        float _3725;
                        vec4 _3740;
                        vec3 _3752;
                        vec4 _3767;
                        vec4 _3782;
                        float _3828;
                        bool _3829;
                        for (;;)
                        {
                            uint _3709 = ((_3477 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3698));
                            _3699 = (_3698 + 4294967295u) & _3698;
                            uint _3711 = _3709 * 40u;
                            _3724 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3711)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3711 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3711 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3711 + 3u)).x));
                            _3725 = _3724.w;
                            uint _3727 = (_3709 * 40u) + 4u;
                            _3740 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3727)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3727 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3727 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3727 + 3u)).x));
                            uint _3742 = (_3709 * 40u) + 8u;
                            _3752 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3742)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3742 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3742 + 2u)).x));
                            uint _3754 = (_3709 * 40u) + 16u;
                            _3767 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3754)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3754 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3754 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3754 + 3u)).x));
                            uint _3769 = (_3709 * 40u) + 20u;
                            _3782 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3769)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3769 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3769 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3769 + 3u)).x));
                            uint _3784 = (_3709 * 40u) + 24u;
                            vec4 _3797 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3784)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3784 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3784 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3784 + 3u)).x));
                            uint _3803 = (_3709 * 40u) + 28u;
                            vec4 _3816 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3803)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3803 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3803 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3803 + 3u)).x));
                            _3828 = fma(_2130, _3816.z, fma(_2129, _3816.y, _3816.x * _2128)) + _3816.w;
                            _3829 = !((fma(_2130, _3797.z, fma(_2129, _3797.y, _3797.x * _2128)) + _3797.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3829)
                            {
                                float _3856 = _3724.x - _2128;
                                float _3857 = _3724.y - _2129;
                                float _3858 = _3724.z - _2130;
                                float _3859 = dot(vec3(_3856, _3857, _3858), vec3(_3856, _3857, _3858));
                                float _3862 = inversesqrt(_3859);
                                float _3863 = _3862 * _3856;
                                float _3864 = _3862 * _3857;
                                float _3865 = _3862 * _3858;
                                float _3869 = 1.0 - (_3859 / (_3725 * _3725));
                                float _5025 = isnan(0.0) ? _3869 : (isnan(_3869) ? 0.0 : max(_3869, 0.0));
                                float _3870 = isnan(1.0) ? _5025 : (isnan(_5025) ? 1.0 : min(_5025, 1.0));
                                float _3874 = sqrt(_3859) * _3740.w;
                                float _3876 = 1.39999997615814208984375 / (_3874 + 1.39999997615814208984375);
                                float _3877 = _3876 * _3876;
                                float _3880 = ((1.0 - _3877) * dot(vec3(_3863, _3864, _3865), vec3(_918, _921, _924))) + _3877;
                                float _3883 = _3874 * _3874;
                                float _3887 = (fma(_2130, _3767.z, fma(_2129, _3767.y, _3767.x * _2128)) + _3767.w) / _3828;
                                float _3888 = (fma(_2130, _3782.z, fma(_2129, _3782.y, _3782.x * _2128)) + _3782.w) / _3828;
                                float _3892 = 1.0 - dot(vec2(_3887, _3888), vec2(_3887, _3888));
                                float _5041 = isnan(0.0) ? _3892 : (isnan(_3892) ? 0.0 : max(_3892, 0.0));
                                float _3893 = isnan(1.0) ? _5041 : (isnan(_5041) ? 1.0 : min(_5041, 1.0));
                                float _3894 = _3893 * (((isnan(0.0) ? _3880 : (isnan(_3880) ? 0.0 : max(_3880, 0.0))) * _3870) / ((_3883 * 0.699999988079071044921875) + 1.0));
                                float _3906 = exp2(log2(1.0 / ((_3883 * 3.5) + 5.0)) * 0.25);
                                float _3907 = 1.0 - _1038;
                                float _3914 = sqrt(1.0 - ((1.0 - (_3907 * _3907)) * (1.0 - (_3906 * _3906))));
                                float _3915 = _3914 * _3914;
                                float _3916 = _3915 * _3915;
                                float _3917 = _3863 - _3337;
                                float _3918 = _3864 - _3338;
                                float _3919 = _3865 - _3339;
                                float _3923 = inversesqrt(dot(vec3(_3917, _3918, _3919), vec3(_3917, _3918, _3919)));
                                float _3927 = dot(vec3(_918, _921, _924), vec3((-0.0) - _3337, (-0.0) - _3338, (-0.0) - _3339));
                                float _5052 = isnan(0.0) ? _3927 : (isnan(_3927) ? 0.0 : max(_3927, 0.0));
                                float _3930 = isnan(1.0) ? _5052 : (isnan(_5052) ? 1.0 : min(_5052, 1.0));
                                float _3931 = dot(vec3(_918, _921, _924), vec3(_3923 * _3917, _3923 * _3918, _3923 * _3919));
                                float _5063 = isnan(0.0) ? _3931 : (isnan(_3931) ? 0.0 : max(_3931, 0.0));
                                float _3934 = isnan(1.0) ? _5063 : (isnan(_5063) ? 1.0 : min(_5063, 1.0));
                                float _3938 = ((_3934 * _3934) * (_3916 + (-1.0))) + 1.0;
                                float _3939 = _3876 * _3915;
                                float _3940 = _3939 * _3939;
                                float _3946 = ((1.0 - _3940) * dot(vec3(_918, _921, _924), vec3(_3863, _3864, _3865))) + _3940;
                                float _5074 = isnan(0.0) ? _3946 : (isnan(_3946) ? 0.0 : max(_3946, 0.0));
                                float _3947 = isnan(1.0) ? _5074 : (isnan(_5074) ? 1.0 : min(_5074, 1.0));
                                float _3948 = 1.0 - _3915;
                                float _3958 = (0.5 / (((_3947 * ((_3930 * _3948) + _3915)) + 9.9999999392252902907785028219223e-09) + (((_3947 * _3948) + _3915) * _3930))) * _3947;
                                float _5085 = isnan(0.0) ? _3958 : (isnan(_3958) ? 0.0 : max(_3958, 0.0));
                                float _3968 = (_3893 * _3870) * (((_3916 * 3.1415927410125732421875) * (isnan(1.0) ? _5085 : (isnan(_5085) ? 1.0 : min(_5085, 1.0)))) / ((_3938 * _3938) * ((_3883 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3894 * _3740.y;
                                frontier_phi_90_pred_1 = _3894 * _3740.x;
                                frontier_phi_90_pred_2 = _3968 * _3752.z;
                                frontier_phi_90_pred_3 = _3968 * _3752.y;
                                frontier_phi_90_pred_4 = _3968 * _3752.x;
                                frontier_phi_90_pred_5 = _3894 * _3740.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3976 = frontier_phi_90_pred;
                            _3975 = frontier_phi_90_pred_1;
                            _3974 = frontier_phi_90_pred_2;
                            _3973 = frontier_phi_90_pred_3;
                            _3972 = frontier_phi_90_pred_4;
                            _3977 = frontier_phi_90_pred_5;
                            _3682 = _3975 + _3695;
                            _3683 = _3976 + _3696;
                            _3684 = _3977 + _3697;
                            _3679 = _3972 + _3692;
                            _3680 = _3973 + _3693;
                            _3681 = _3974 + _3694;
                            if (_3699 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3692 = _3679;
                                _3693 = _3680;
                                _3694 = _3681;
                                _3695 = _3682;
                                _3696 = _3683;
                                _3697 = _3684;
                                _3698 = _3699;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3683;
                        frontier_phi_84_pred_1 = _3682;
                        frontier_phi_84_pred_2 = _3681;
                        frontier_phi_84_pred_3 = _3680;
                        frontier_phi_84_pred_4 = _3679;
                        frontier_phi_84_pred_5 = _3684;
                    }
                    _3320 = frontier_phi_84_pred;
                    _3318 = frontier_phi_84_pred_1;
                    _3316 = frontier_phi_84_pred_2;
                    _3314 = frontier_phi_84_pred_3;
                    _3312 = frontier_phi_84_pred_4;
                    _3322 = frontier_phi_84_pred_5;
                    uint _3478 = _3477 + 1u;
                    if (_3478 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3471 = _3312;
                        _3472 = _3314;
                        _3473 = _3316;
                        _3474 = _3318;
                        _3475 = _3320;
                        _3476 = _3322;
                        _3477 = _3478;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3322;
                frontier_phi_65_66_ladder_1 = _3318;
                frontier_phi_65_66_ladder_2 = _3320;
                frontier_phi_65_66_ladder_3 = _3314;
                frontier_phi_65_66_ladder_4 = _3312;
                frontier_phi_65_66_ladder_5 = _3316;
            }
            else
            {
                frontier_phi_65_66_ladder = _3192;
                frontier_phi_65_66_ladder_1 = _3188;
                frontier_phi_65_66_ladder_2 = _3190;
                frontier_phi_65_66_ladder_3 = _3184;
                frontier_phi_65_66_ladder_4 = _3182;
                frontier_phi_65_66_ladder_5 = _3186;
            }
            _3311 = frontier_phi_65_66_ladder_4;
            _3313 = frontier_phi_65_66_ladder_3;
            _3315 = frontier_phi_65_66_ladder_5;
            _3317 = frontier_phi_65_66_ladder_1;
            _3319 = frontier_phi_65_66_ladder_2;
            _3321 = frontier_phi_65_66_ladder;
        }
        float _3326 = isnan(1.0) ? _1022 : (isnan(_1022) ? 1.0 : min(_1022, 1.0));
        _3080 = (_3326 * _3317) + _2593;
        _3082 = (_3326 * _3319) + _2595;
        _3084 = (_3326 * _3321) + _2597;
        _3086 = ((_3311 * _1007) * _3326) + _2931;
        _3088 = ((_3313 * _1009) * _3326) + _2933;
        _3090 = ((_3315 * _1010) * _3326) + _2935;
    }
    else
    {
        _3080 = _2593;
        _3082 = _2595;
        _3084 = _2597;
        _3086 = _2931;
        _3088 = _2933;
        _3090 = _2935;
    }
    uint _3096 = _951 + uint(cbMatDynParam._m0[0u].w);
    float _3104 = ((cbMtdParam._m0[11u].x * cbMtdParam._m0[22u].z) * _739.x) * cbInstanceData._m0[_3096].x;
    float _3107 = ((cbMtdParam._m0[11u].y * cbMtdParam._m0[22u].z) * _739.y) * cbInstanceData._m0[_3096].y;
    float _3110 = ((cbMtdParam._m0[11u].z * cbMtdParam._m0[22u].z) * _739.z) * cbInstanceData._m0[_3096].z;
    float _5101 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _5112 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    float _5123 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
    float _3127 = (((isnan(1.0) ? _5101 : (isnan(_5101) ? 1.0 : min(_5101, 1.0))) * (_3080 + ((isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0))) * _1022))) + ((_3086 + ((isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0))) * _1862)) * cbPerFrame._m0[3u].x)) + _3104;
    float _3129 = (_3107 + ((_3088 + ((isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0))) * _1862)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5112 : (isnan(_5112) ? 1.0 : min(_5112, 1.0))) * (_3082 + ((isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0))) * _1022)));
    float _3131 = (_3110 + ((_3090 + ((isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0))) * _1862)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5123 : (isnan(_5123) ? 1.0 : min(_5123, 1.0))) * (_3084 + ((isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0))) * _1022)));
    float _3132 = isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0));
    float _3133 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0));
    float _3134 = isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0));
    float _3140 = cbMtdParam._m0[2u].x * _3104;
    float _3141 = cbMtdParam._m0[2u].y * _3107;
    float _3142 = cbMtdParam._m0[2u].z * _3110;
    float _5149 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3144 = isnan(1.0) ? _5149 : (isnan(_5149) ? 1.0 : min(_5149, 1.0));
    uint _3145 = _950 + 6u;
    float _3153 = _895 / cbSceneParam._m0[86u].x;
    float _3154 = _896 / cbSceneParam._m0[86u].y;
    vec4 _3168 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3153, _3154, (log2((isnan(cbSceneParam._m0[77u].w) ? _818 : (isnan(_818) ? cbSceneParam._m0[77u].w : min(_818, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3170 = _3168.x;
    float _3171 = _3168.y;
    float _3172 = _3168.z;
    float _3173 = _3168.w;
    float _3244;
    float _3246;
    float _3248;
    float _3250;
    if (_818 > cbSceneParam._m0[78u].w)
    {
        float _3207 = isnan(_818) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _818 : min(cbSceneParam._m0[80u].w, _818));
        float _3208 = _3207 / _818;
        float _3219 = _3208 * _868;
        float _3220 = _869 * _3208;
        float _3221 = (-0.0) - _3220;
        float _3222 = _3208 * _870;
        float _3224 = (cbSceneParam._m0[77u].w * _3221) / _3207;
        float _3225 = _3224 + cbSceneParam._m0[79u].w;
        float _3226 = cbSceneParam._m0[79u].w - _3220;
        float _3232 = sqrt(((_3219 * _3219) + (_3220 * _3220)) + (_3222 * _3222));
        float _3235 = (1.0 - (cbSceneParam._m0[77u].w / _3207)) * _3232;
        float _3240 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3242 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3428;
        if (abs((_3221 - _3224) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3428 = ((((_3225 > 0.0) ? exp2(_3240 * _3225) : (2.0 - exp2(_3242 * _3225))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3235;
        }
        else
        {
            float _3372 = 1.0 / cbSceneParam._m0[80u].x;
            float _3373 = isnan(_3226) ? _3225 : (isnan(_3225) ? _3226 : max(_3225, _3226));
            float _3374 = isnan(_3226) ? _3225 : (isnan(_3225) ? _3226 : min(_3225, _3226));
            float _3383 = isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : min(_3373, 0.0));
            float _3384 = isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : min(_3374, 0.0));
            _3428 = ((abs(_3232 / _3221) * cbSceneParam._m0[80u].y) * ((((_3383 - _3384) * 2.0) - ((exp2(_3240 * (isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0)))) - exp2(_3240 * (isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0))))) * _3372)) - ((exp2(_3242 * _3383) - exp2(_3242 * _3384)) * _3372))) + (_3235 * cbSceneParam._m0[80u].z);
        }
        vec4 _3430 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3153, _3154, 1.0), 0.0);
        float _3439 = exp2((_3428 * (-1.44269502162933349609375)) * (1.0 - _3430.w));
        float _3440 = log2(_3439);
        float _3456 = log2(_3173);
        _3244 = (exp2(_3456 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3440 * cbSceneParam._m0[78u].x)) * _3430.x) / cbSceneParam._m0[78u].x)) + _3170;
        _3246 = (exp2(_3456 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3440 * cbSceneParam._m0[78u].y)) * _3430.y) / cbSceneParam._m0[78u].y)) + _3171;
        _3248 = (exp2(_3456 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3440 * cbSceneParam._m0[78u].z)) * _3430.z) / cbSceneParam._m0[78u].z)) + _3172;
        _3250 = _3439 * _3173;
    }
    else
    {
        _3244 = _3170;
        _3246 = _3171;
        _3248 = _3172;
        _3250 = _3173;
    }
    bool _3466;
    vec4 _3260;
    vec4 _3282;
    float _3284;
    float _3288;
    float _3289;
    float _3290;
    float _3293;
    float _3296;
    float _3299;
    float _3300;
    bool _3310;
    for (;;)
    {
        _3260 = cbMatDynParam._m0[0u];
        float _3262 = roundEven(_3260.y);
        bool _3263 = _3262 == 3.0;
        float _3264 = log2(_3250);
        float _3268 = exp2(_3264 * cbSceneParam._m0[78u].x);
        float _3269 = exp2(_3264 * cbSceneParam._m0[78u].y);
        float _3270 = exp2(_3264 * cbSceneParam._m0[78u].z);
        float _3271 = _3268 * _3132;
        float _3272 = _3269 * _3133;
        float _3273 = _3270 * _3134;
        float _3280 = _884 + (-0.5);
        _3282 = cbMtdParam._m0[1u];
        _3284 = _3282.y * _3280;
        float _3287 = (_3262 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3288 = _3287 * (_3263 ? _3271 : (_3271 + (cbSceneParam._m0[72u].w * _3244)));
        _3289 = _3287 * (_3263 ? _3272 : (_3272 + (cbSceneParam._m0[72u].w * _3246)));
        _3290 = _3287 * (_3263 ? _3273 : (_3273 + (cbSceneParam._m0[72u].w * _3248)));
        _3293 = ((_3140 * _3144) * _3268) * _3287;
        _3296 = ((_3141 * _3144) * _3269) * _3287;
        _3299 = ((_3142 * _3144) * _3270) * _3287;
        _3300 = _3280 * 0.999000012874603271484375;
        _3310 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3310)
        {
            if ((cbInstanceData._m0[_950 + 7u].x + _3300) < 0.5)
            {
                _3466 = true;
                break;
            }
        }
        uint _3407 = _951 + uint(_3260.w);
        if ((cbInstanceData._m0[_3407].w < 1.0) && ((cbInstanceData._m0[_3407].w + _3300) < 0.5))
        {
            _3466 = true;
            break;
        }
        if ((_3284 + 1.0) < _3282.x)
        {
            _3466 = true;
            break;
        }
        _3466 = false;
        break;
    }
    float _3670;
    if (_3466)
    {
        discard_state = true;
        _3670 = 0.0;
    }
    else
    {
        _3670 = cbInstanceData._m0[_3145].w;
    }
    SV_Target.x = _3288;
    SV_Target.y = _3289;
    SV_Target.z = _3290;
    SV_Target.w = _3670;
    SV_Target_1.x = _3293;
    SV_Target_1.y = _3296;
    SV_Target_1.z = _3299;
    SV_Target_1.w = cbInstanceData._m0[_3145].w;
    discard_exit();
}


