#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 11) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 12) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1313;
float _4023;
float _4024;
float _4025;
float _4026;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _232 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _239 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _240 = _239 * NORMAL.x;
    float _241 = _239 * NORMAL.y;
    float _242 = _239 * NORMAL.z;
    float _246 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _254;
    float _255;
    float _256;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _254 = (-0.0) - _240;
        _255 = (-0.0) - _241;
        _256 = (-0.0) - _242;
    }
    else
    {
        _254 = _240;
        _255 = _241;
        _256 = _242;
    }
    vec4 _271 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _281 = log2(0.0);
    float _283 = exp2(_281 * cbMtdParam._m0[21u].y);
    float _284 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    float _285 = isnan(1.0) ? _284 : (isnan(_284) ? 1.0 : min(_284, 1.0));
    vec4 _299 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _303 = _299.z;
    float _304 = _299.w;
    float _312 = exp2(log2(_303 * cbMtdParam._m0[21u].w) * cbMtdParam._m0[20u].y);
    float _313 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _314 = isnan(1.0) ? _313 : (isnan(_313) ? 1.0 : min(_313, 1.0));
    vec4 _327 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    vec4 _352 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _362 = cbMtdParam._m0[9u].x * _352.x;
    float _363 = cbMtdParam._m0[9u].y * _352.y;
    float _364 = cbMtdParam._m0[9u].z * _352.z;
    float _371 = (((cbMtdParam._m0[10u].x * _327.x) - _362) * _314) + _362;
    float _372 = (((cbMtdParam._m0[10u].y * _327.y) - _363) * _314) + _363;
    float _373 = (((cbMtdParam._m0[10u].z * _327.z) - _364) * _314) + _364;
    float _380 = exp2(log2(_304) * cbMtdParam._m0[22u].y);
    vec4 _393 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _413 = (((cbMtdParam._m0[12u].x * _393.x) - _371) * _380) + _371;
    float _414 = (((cbMtdParam._m0[12u].y * _393.y) - _372) * _380) + _372;
    float _415 = (((cbMtdParam._m0[12u].z * _393.z) - _373) * _380) + _373;
    vec4 _427 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _451 = (_271.x * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].x * _427.x) - _413) * _285) + _413);
    float _453 = (_271.y * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].y * _427.y) - _414) * _285) + _414);
    float _455 = (_271.z * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].z * _427.z) - _415) * _285) + _415);
    float _460 = exp2(log2(1.0 - _304) * 0.00999999977648258209228515625);
    float _478 = ((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_11, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x - cbMtdParam._m0[22u].w) * _460) + cbMtdParam._m0[22u].w;
    float _497 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w)).x - _478) + cbMtdParam._m0[21u].z) * _380) + _478;
    float _519 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w)).x - _497) + cbMtdParam._m0[23u].w) * _285) + _497;
    vec4 _532 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _550 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _552 = _550.x;
    float _553 = _550.y;
    float _556 = cbMtdParam._m0[20u].x + _550.z;
    float _559 = (((cbMtdParam._m0[21u].x + _532.z) - _556) * _460) + _556;
    vec4 _572 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _584 = (_303 * 2.0) * ((((_572.z - _559) + cbMtdParam._m0[23u].y) * _380) + _559);
    vec4 _597 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _606 = (((_597.z - _584) + cbMtdParam._m0[22u].x) * _285) + _584;
    vec4 _625 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _640 = ((_532.x - _552) * _460) + _552;
    float _641 = ((_532.y - _553) * _460) + _553;
    float _646 = ((_572.x - _640) * _380) + _640;
    float _647 = ((_572.y - _641) * _380) + _641;
    float _656 = ((((_597.x - _646) * _285) + _646) * 2.0) + (-1.0);
    float _657 = ((((_597.y - _647) * _285) + _647) * 2.0) + (-1.0);
    float _658 = dot(vec2(_656, _657), vec2(_656, _657));
    float _4055 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _663 = sqrt(1.0 - (isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))));
    float _666 = (cbMtdParam._m0[23u].x * ((_299.x * 2.0) + (-1.0))) + _656;
    float _667 = (cbMtdParam._m0[23u].x * ((_299.y * 2.0) + (-1.0))) + _657;
    float _670 = fma(_663, _254, fma(_667, _246 * TANGENT.x, (_232 * _225) * _666));
    float _673 = fma(_663, _255, fma(_667, _246 * TANGENT.y, (_232 * _226) * _666));
    float _676 = fma(_663, _256, fma(_667, _246 * TANGENT.z, (_232 * _227) * _666));
    float _680 = inversesqrt(dot(vec3(_670, _673, _676), vec3(_670, _673, _676)));
    float _681 = _680 * _670;
    float _682 = _680 * _673;
    float _683 = _680 * _676;
    float _4066 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _684 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
    float _4077 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _4088 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _4099 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _4110 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _688 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
    float _704 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _744 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _754 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _744);
    float _755 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _744);
    float _756 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _744);
    float _760 = inversesqrt(dot(vec3(_754, _755, _756), vec3(_754, _755, _756)));
    float _761 = _754 * _760;
    float _762 = _755 * _760;
    float _763 = _756 * _760;
    vec4 _768 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _770 = _768.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _993 = sqrt(((_754 * _754) + (_755 * _755)) + (_756 * _756));
        float _999 = (cbMatDynParam._m0[5u].x * _993) + cbMatDynParam._m0[5u].y;
        float _4121 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1000 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _1004 = (cbMatDynParam._m0[5u].z * _993) + cbMatDynParam._m0[5u].w;
        float _4132 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0))) - _1000)) + _1000) < ((_770 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _782 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _783 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _785 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _787 = _785.w;
    float _806 = fma(_683, cbSceneParam._m0[5u].z, fma(_682, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _681));
    float _809 = fma(_683, cbSceneParam._m0[6u].z, fma(_682, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _681));
    float _812 = fma(_683, cbSceneParam._m0[7u].z, fma(_682, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _681));
    vec4 _814 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _825 = (((_814.y - _684) + (_814.w * _684)) * cbMtdParam._m0[3u].x) + _684;
    uint _838 = uint(roundEven(NORMAL.w)) * 13u;
    uint _839 = _838 + 9u;
    uint _840 = _839 + uint(cbMatDynParam._m0[0u].w);
    float _846 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0)))) * cbInstanceData._m0[_840].x;
    float _847 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0)))) * cbInstanceData._m0[_840].y;
    float _848 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0)))) * cbInstanceData._m0[_840].z;
    float _4143 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _849 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
    float _4154 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _850 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
    float _4165 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _851 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
    vec4 _852 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _857 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _868 = (((_857.x - _688) + (_857.w * _688)) * cbMtdParam._m0[3u].x) + _688;
    float _881 = (cbMtdParam._m0[3u].x * (((_849 * _787) - _849) + _852.x)) + _849;
    float _882 = (cbMtdParam._m0[3u].x * (((_850 * _787) - _850) + _852.y)) + _850;
    float _883 = (cbMtdParam._m0[3u].x * (((_851 * _787) - _851) + _852.z)) + _851;
    float _884 = 1.0 - _868;
    float _885 = _884 * _881;
    float _886 = _884 * _882;
    float _887 = _884 * _883;
    float _892 = (_881 + (-0.039999999105930328369140625)) * _868;
    float _893 = (_882 + (-0.039999999105930328369140625)) * _868;
    float _894 = (_883 + (-0.039999999105930328369140625)) * _868;
    float _895 = _892 + 0.039999999105930328369140625;
    float _897 = _893 + 0.039999999105930328369140625;
    float _898 = _894 + 0.039999999105930328369140625;
    vec4 _907 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _782, cbSceneParam._m0[86u].y * _783));
    float _910 = _907.x * TEXCOORD_4.z;
    float _911 = dot(vec3(_681, _682, _683), vec3(_761, _762, _763));
    float _914 = _911 * 2.0;
    float _918 = (_914 * _681) - _761;
    float _919 = (_914 * _682) - _762;
    float _920 = (_914 * _683) - _763;
    float _924 = abs(dot(vec3(_761, _762, _763), vec3(_681, _682, _683)));
    float _4176 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
    float _926 = sqrt(_825);
    float _939 = exp2((_926 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_926 * 3.0));
    float _945 = (1.0 - _939) * ((_926 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _946 = _939 * _926;
    float _974 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _978 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _982 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1312;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1037 = fma(_982, cbModelParam._m0[26u].z, fma(_978, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _974));
        float _1041 = fma(_982, cbModelParam._m0[27u].z, fma(_978, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _974));
        float _1045 = fma(_982, cbModelParam._m0[28u].z, fma(_978, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _974));
        float _1070 = _974 + _681;
        float _1071 = _978 + _682;
        float _1072 = _982 + _683;
        float _1082 = fma(_1072, cbModelParam._m0[26u].z, fma(_1071, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1070)) - _1037;
        float _1083 = fma(_1072, cbModelParam._m0[27u].z, fma(_1071, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1070)) - _1041;
        float _1084 = fma(_1072, cbModelParam._m0[28u].z, fma(_1071, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1070)) - _1045;
        float _1088 = inversesqrt(dot(vec3(_1082, _1083, _1084), vec3(_1082, _1083, _1084)));
        float _1101 = ((_1088 * _1082) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1037 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1102 = ((_1088 * _1083) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1041 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1103 = ((_1088 * _1084) / cbModelParam._m0[34u].z) + ((((((_1045 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1106 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1101, _1102, _1103), 0.0);
        vec4 _1113 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1101, _1102, _1103), 0.0);
        vec4 _1120 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1101, _1102, _1103), 0.0);
        vec4 _1127 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1101, _1102, _1103), 0.0);
        float _1140 = exp2((_1106.w + (-0.5)) * 20.0) * 2.0;
        float _1141 = _1140 * (_1106.x + (-0.5));
        float _1142 = _1140 * (_1106.y + (-0.5));
        float _1143 = _1140 * (_1106.z + (-0.5));
        float _1150 = exp2((_1113.w + (-0.5)) * 20.0) * 2.0;
        float _1151 = _1150 * (_1113.x + (-0.5));
        float _1152 = _1150 * (_1113.y + (-0.5));
        float _1153 = _1150 * (_1113.z + (-0.5));
        float _1160 = exp2((_1120.w + (-0.5)) * 20.0) * 2.0;
        float _1161 = _1160 * (_1120.x + (-0.5));
        float _1162 = _1160 * (_1120.y + (-0.5));
        float _1163 = _1160 * (_1120.z + (-0.5));
        float _1170 = exp2((_1127.w + (-0.5)) * 20.0) * 2.0;
        float _1171 = _1170 * (_1127.x + (-0.5));
        float _1172 = _1170 * (_1127.y + (-0.5));
        float _1173 = _1170 * (_1127.z + (-0.5));
        float _1174 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1175 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1176 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1177 = _1141 * 0.5;
        float _1178 = _1151 * 0.5;
        float _1179 = _1161 * 0.5;
        float _1180 = dot(vec3(_1177, _1178, _1179), vec3(_1177, _1178, _1179));
        float _1185 = (_1180 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1180);
        float _1194 = (dot(vec3(_681, _682, _683), vec3(_1185 * _1177, _1185 * _1178, _1185 * _1179)) + 1.0) * 0.5;
        float _4202 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1204 = sqrt(((_1178 * _1178) + (_1177 * _1177)) + (_1179 * _1179)) / (_1174 + 9.9999997473787516355514526367188e-06);
        float _4213 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1205 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _1206 = _1205 * 2.0;
        float _1210 = (1.0 - _1205) / (_1205 + 1.0);
        float _4224 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _1220 = ((((1.0 - _1211) * (_1206 + 2.0)) * exp2(log2(isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * (_1206 + 1.0))) + _1211) * _1174;
        float _1221 = _1142 * 0.5;
        float _1222 = _1152 * 0.5;
        float _1223 = _1162 * 0.5;
        float _1224 = dot(vec3(_1221, _1222, _1223), vec3(_1221, _1222, _1223));
        float _1229 = (_1224 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1224);
        float _1237 = (dot(vec3(_681, _682, _683), vec3(_1229 * _1221, _1229 * _1222, _1229 * _1223)) + 1.0) * 0.5;
        float _4235 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1246 = sqrt(((_1222 * _1222) + (_1221 * _1221)) + (_1223 * _1223)) / (_1175 + 9.9999997473787516355514526367188e-06);
        float _4246 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _1248 = _1247 * 2.0;
        float _1252 = (1.0 - _1247) / (_1247 + 1.0);
        float _4257 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _1262 = ((((1.0 - _1253) * (_1248 + 2.0)) * exp2(log2(isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * (_1248 + 1.0))) + _1253) * _1175;
        float _1263 = _1143 * 0.5;
        float _1264 = _1153 * 0.5;
        float _1265 = _1163 * 0.5;
        float _1266 = dot(vec3(_1263, _1264, _1265), vec3(_1263, _1264, _1265));
        float _1271 = (_1266 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1266);
        float _1279 = (dot(vec3(_681, _682, _683), vec3(_1271 * _1263, _1271 * _1264, _1271 * _1265)) + 1.0) * 0.5;
        float _4268 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1288 = sqrt(((_1264 * _1264) + (_1263 * _1263)) + (_1265 * _1265)) / (_1176 + 9.9999997473787516355514526367188e-06);
        float _4279 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _1290 = _1289 * 2.0;
        float _1294 = (1.0 - _1289) / (_1289 + 1.0);
        float _4290 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _1304 = ((((1.0 - _1295) * (_1290 + 2.0)) * exp2(log2(isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0))) * (_1290 + 1.0))) + _1295) * _1176;
        _1312 = _1143;
        _1314 = _1142;
        _1315 = _1141;
        _1316 = _1153;
        _1317 = _1152;
        _1318 = _1151;
        _1319 = _1163;
        _1320 = _1162;
        _1321 = _1161;
        _1322 = _1176;
        _1323 = _1175;
        _1324 = _1174;
        _1325 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0)));
        _1326 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0)));
        _1327 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)));
    }
    else
    {
        _1312 = _1313;
        _1314 = _1313;
        _1315 = _1313;
        _1316 = _1313;
        _1317 = _1313;
        _1318 = _1313;
        _1319 = _1313;
        _1320 = _1313;
        _1321 = _1313;
        _1322 = _1313;
        _1323 = _1313;
        _1324 = _1313;
        _1325 = 0.0;
        _1326 = 0.0;
        _1327 = 0.0;
    }
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1356 = fma(_982, cbModelParam._m0[30u].z, fma(_978, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _974));
        float _1360 = fma(_982, cbModelParam._m0[31u].z, fma(_978, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _974));
        float _1364 = fma(_982, cbModelParam._m0[32u].z, fma(_978, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _974));
        float _1387 = _974 + _681;
        float _1388 = _978 + _682;
        float _1389 = _982 + _683;
        float _1399 = fma(_1389, cbModelParam._m0[30u].z, fma(_1388, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1387)) - _1356;
        float _1400 = fma(_1389, cbModelParam._m0[31u].z, fma(_1388, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1387)) - _1360;
        float _1401 = fma(_1389, cbModelParam._m0[32u].z, fma(_1388, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1387)) - _1364;
        float _1405 = inversesqrt(dot(vec3(_1399, _1400, _1401), vec3(_1399, _1400, _1401)));
        float _1418 = ((_1405 * _1399) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1356 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1419 = ((_1405 * _1400) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1360 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1420 = ((_1405 * _1401) / cbModelParam._m0[35u].z) + ((((((_1364 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1422 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1418, _1419, _1420), 0.0);
        vec4 _1429 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1418, _1419, _1420), 0.0);
        vec4 _1436 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1418, _1419, _1420), 0.0);
        vec4 _1443 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1418, _1419, _1420), 0.0);
        float _1455 = exp2((_1422.w + (-0.5)) * 20.0) * 2.0;
        float _1456 = _1455 * (_1422.x + (-0.5));
        float _1457 = _1455 * (_1422.y + (-0.5));
        float _1458 = _1455 * (_1422.z + (-0.5));
        float _1465 = exp2((_1429.w + (-0.5)) * 20.0) * 2.0;
        float _1466 = _1465 * (_1429.x + (-0.5));
        float _1467 = _1465 * (_1429.y + (-0.5));
        float _1468 = _1465 * (_1429.z + (-0.5));
        float _1475 = exp2((_1436.w + (-0.5)) * 20.0) * 2.0;
        float _1476 = _1475 * (_1436.x + (-0.5));
        float _1477 = _1475 * (_1436.y + (-0.5));
        float _1478 = _1475 * (_1436.z + (-0.5));
        float _1485 = exp2((_1443.w + (-0.5)) * 20.0) * 2.0;
        float _1486 = _1485 * (_1443.x + (-0.5));
        float _1487 = _1485 * (_1443.y + (-0.5));
        float _1488 = _1485 * (_1443.z + (-0.5));
        float _1489 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1490 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1491 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1492 = _1456 * 0.5;
        float _1493 = _1466 * 0.5;
        float _1494 = _1476 * 0.5;
        float _1495 = dot(vec3(_1492, _1493, _1494), vec3(_1492, _1493, _1494));
        float _1500 = (_1495 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1495);
        float _1508 = (dot(vec3(_681, _682, _683), vec3(_1500 * _1492, _1500 * _1493, _1500 * _1494)) + 1.0) * 0.5;
        float _4331 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1517 = sqrt(((_1493 * _1493) + (_1492 * _1492)) + (_1494 * _1494)) / (_1489 + 9.9999997473787516355514526367188e-06);
        float _4342 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1518 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
        float _1519 = _1518 * 2.0;
        float _1523 = (1.0 - _1518) / (_1518 + 1.0);
        float _4353 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1524 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
        float _1533 = ((((1.0 - _1524) * (_1519 + 2.0)) * exp2(log2(isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0))) * (_1519 + 1.0))) + _1524) * _1489;
        float _1534 = _1457 * 0.5;
        float _1535 = _1467 * 0.5;
        float _1536 = _1477 * 0.5;
        float _1537 = dot(vec3(_1534, _1535, _1536), vec3(_1534, _1535, _1536));
        float _1542 = (_1537 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1537);
        float _1550 = (dot(vec3(_681, _682, _683), vec3(_1542 * _1534, _1542 * _1535, _1542 * _1536)) + 1.0) * 0.5;
        float _4364 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1559 = sqrt(((_1535 * _1535) + (_1534 * _1534)) + (_1536 * _1536)) / (_1490 + 9.9999997473787516355514526367188e-06);
        float _4375 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1560 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
        float _1561 = _1560 * 2.0;
        float _1565 = (1.0 - _1560) / (_1560 + 1.0);
        float _4386 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1566 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
        float _1575 = ((((1.0 - _1566) * (_1561 + 2.0)) * exp2(log2(isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0))) * (_1561 + 1.0))) + _1566) * _1490;
        float _1576 = _1458 * 0.5;
        float _1577 = _1468 * 0.5;
        float _1578 = _1478 * 0.5;
        float _1579 = dot(vec3(_1576, _1577, _1578), vec3(_1576, _1577, _1578));
        float _1584 = (_1579 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1579);
        float _1592 = (dot(vec3(_681, _682, _683), vec3(_1584 * _1576, _1584 * _1577, _1584 * _1578)) + 1.0) * 0.5;
        float _4397 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1601 = sqrt(((_1577 * _1577) + (_1576 * _1576)) + (_1578 * _1578)) / (_1491 + 9.9999997473787516355514526367188e-06);
        float _4408 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1602 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
        float _1603 = _1602 * 2.0;
        float _1607 = (1.0 - _1602) / (_1602 + 1.0);
        float _4419 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1608 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
        float _1617 = ((((1.0 - _1608) * (_1603 + 2.0)) * exp2(log2(isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0))) * (_1603 + 1.0))) + _1608) * _1491;
        _1625 = _1458;
        _1626 = _1457;
        _1627 = _1456;
        _1628 = _1468;
        _1629 = _1467;
        _1630 = _1466;
        _1631 = _1478;
        _1632 = _1477;
        _1633 = _1476;
        _1634 = _1491;
        _1635 = _1490;
        _1636 = _1489;
        _1637 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0)));
        _1638 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0)));
        _1639 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0)));
    }
    else
    {
        _1625 = _1313;
        _1626 = _1313;
        _1627 = _1313;
        _1628 = _1313;
        _1629 = _1313;
        _1630 = _1313;
        _1631 = _1313;
        _1632 = _1313;
        _1633 = _1313;
        _1634 = _1313;
        _1635 = _1313;
        _1636 = _1313;
        _1637 = 0.0;
        _1638 = 0.0;
        _1639 = 0.0;
    }
    float _1649 = (cbModelParam._m0[1u].x * (_1637 - _1325)) + _1325;
    float _1650 = (cbModelParam._m0[1u].x * (_1638 - _1326)) + _1326;
    float _1651 = (cbModelParam._m0[1u].x * (_1639 - _1327)) + _1327;
    float _1672 = fma(_1651, cbSceneParam._m0[89u].z, fma(_1650, cbSceneParam._m0[89u].y, _1649 * cbSceneParam._m0[89u].x));
    float _1675 = fma(_1651, cbSceneParam._m0[90u].z, fma(_1650, cbSceneParam._m0[90u].y, _1649 * cbSceneParam._m0[90u].x));
    float _1678 = fma(_1651, cbSceneParam._m0[91u].z, fma(_1650, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1649));
    float _1693 = _918 * 0.5;
    float _1694 = _919 * 0.5;
    float _1695 = _920 * 0.5;
    float _1696 = dot(vec4(_1693, _1694, _1695, 1.0), vec4(_1627, _1630, _1633, _1636));
    float _1699 = dot(vec4(_1693, _1694, _1695, 1.0), vec4(_1626, _1629, _1632, _1635));
    float _1702 = dot(vec4(_1693, _1694, _1695, 1.0), vec4(_1625, _1628, _1631, _1634));
    float _1736;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1709 = dot(vec4(_1693, _1694, _1695, 1.0), vec4(_1312, _1316, _1319, _1322));
        float _1713 = dot(vec4(_1693, _1694, _1695, 1.0), vec4(_1314, _1317, _1320, _1323));
        float _1717 = dot(vec4(_1693, _1694, _1695, 1.0), vec4(_1315, _1318, _1321, _1324));
        float _1724 = dot(vec4(cbModelParam._m0[39u]), vec4(_1693, _1694, _1695, 1.0));
        _1736 = dot(vec3(isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0)), isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0)), isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1724) ? 0.0 : (isnan(0.0) ? _1724 : max(0.0, _1724))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1736 = 1.0;
    }
    float _1747;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1738 = dot(vec4(cbModelParam._m0[40u]), vec4(_1693, _1694, _1695, 1.0));
        _1747 = dot(vec3(isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0)), isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0)), isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1738) ? 0.0 : (isnan(0.0) ? _1738 : max(0.0, _1738))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1747 = 1.0;
    }
    float _1751 = (_1747 * cbModelParam._m0[1u].x) + (_1736 * (1.0 - cbModelParam._m0[1u].x));
    float _1761 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _825);
    float _1762 = isnan(_1761) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1761 : min(cbModelParam._m0[25u].z, _1761));
    float _1842;
    float _1844;
    float _1846;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1809 = fma(_982, cbModelParam._m0[13u].z, fma(_978, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _974)) + cbModelParam._m0[13u].w;
        float _1813 = fma(_982, cbModelParam._m0[14u].z, fma(_978, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _974)) + cbModelParam._m0[14u].w;
        float _1817 = fma(_982, cbModelParam._m0[15u].z, fma(_978, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _974)) + cbModelParam._m0[15u].w;
        float _1820 = fma(_920, cbModelParam._m0[13u].z, fma(_919, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _918));
        float _1823 = fma(_920, cbModelParam._m0[14u].z, fma(_919, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _918));
        float _1826 = fma(_920, cbModelParam._m0[15u].z, fma(_919, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _918));
        float _1854;
        if (_1820 > 0.0)
        {
            _1854 = abs((1.0 - _1809) / _1820);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1820 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1809 + 1.0) / _1820);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1854 = frontier_phi_19_17_ladder;
        }
        float _2027;
        if (_1823 > 0.0)
        {
            _2027 = abs((1.0 - _1813) / _1823);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1823 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1813 + 1.0) / _1823);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2027 = frontier_phi_28_24_ladder;
        }
        float _2322;
        if (_1826 > 0.0)
        {
            _2322 = abs((1.0 - _1817) / _1826);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1826 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1817 + 1.0) / _1826);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2322 = frontier_phi_40_35_ladder;
        }
        float _2324 = isnan(_2027) ? _1854 : (isnan(_1854) ? _2027 : min(_1854, _2027));
        float _2325 = isnan(_2322) ? _2324 : (isnan(_2324) ? _2322 : min(_2324, _2322));
        float _2329 = (_2325 * _1820) + _1809;
        float _2330 = (_2325 * _1823) + _1813;
        float _2331 = (_2325 * _1826) + _1817;
        float _2332 = _2325 * 9.9999997473787516355514526367188e-05;
        float _2334 = (-1.0) - _2332;
        float _2336 = _2332 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2331 > _2336) || ((_2331 < _2334) || ((_2330 > _2336) || ((_2330 < _2334) || ((_2329 < _2334) || (_2329 > _2336))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2476 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2331, cbModelParam._m0[9u].z, fma(_2330, cbModelParam._m0[9u].y, _2329 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2331, cbModelParam._m0[10u].z, fma(_2330, cbModelParam._m0[10u].y, _2329 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2331, cbModelParam._m0[11u].z, fma(_2330, cbModelParam._m0[11u].y, _2329 * cbModelParam._m0[11u].x))), _1762);
            frontier_phi_18_40_ladder = _2476.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2476.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2476.x * cbModelParam._m0[1u].y;
        }
        _1842 = frontier_phi_18_40_ladder_2;
        _1844 = frontier_phi_18_40_ladder_1;
        _1846 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1830 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_918, _919, _920), _1762);
        _1842 = _1830.x * cbModelParam._m0[1u].y;
        _1844 = _1830.y * cbModelParam._m0[1u].y;
        _1846 = _1830.z * cbModelParam._m0[1u].y;
    }
    float _1850 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _825);
    float _1851 = isnan(_1850) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1850 : min(cbModelParam._m0[25u].w, _1850));
    float _1942;
    float _1944;
    float _1946;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1906 = fma(_982, cbModelParam._m0[21u].z, fma(_978, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _974)) + cbModelParam._m0[21u].w;
        float _1910 = fma(_982, cbModelParam._m0[22u].z, fma(_978, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _974)) + cbModelParam._m0[22u].w;
        float _1914 = fma(_982, cbModelParam._m0[23u].z, fma(_978, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _974)) + cbModelParam._m0[23u].w;
        float _1917 = fma(_920, cbModelParam._m0[21u].z, fma(_919, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _918));
        float _1920 = fma(_920, cbModelParam._m0[22u].z, fma(_919, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _918));
        float _1923 = fma(_920, cbModelParam._m0[23u].z, fma(_919, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _918));
        float _2032;
        if (_1917 > 0.0)
        {
            _2032 = abs((1.0 - _1906) / _1917);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1917 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1906 + 1.0) / _1917);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2032 = frontier_phi_30_26_ladder;
        }
        float _2349;
        if (_1920 > 0.0)
        {
            _2349 = abs((1.0 - _1910) / _1920);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1920 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1910 + 1.0) / _1920);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2349 = frontier_phi_42_37_ladder;
        }
        float _2687;
        if (_1923 > 0.0)
        {
            _2687 = abs((1.0 - _1914) / _1923);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1923 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1914 + 1.0) / _1923);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2687 = frontier_phi_52_49_ladder;
        }
        float _2689 = isnan(_2349) ? _2032 : (isnan(_2032) ? _2349 : min(_2032, _2349));
        float _2690 = isnan(_2687) ? _2689 : (isnan(_2689) ? _2687 : min(_2689, _2687));
        float _2694 = (_2690 * _1917) + _1906;
        float _2695 = (_2690 * _1920) + _1910;
        float _2696 = (_2690 * _1923) + _1914;
        float _2697 = _2690 * 9.9999997473787516355514526367188e-05;
        float _2698 = (-1.0) - _2697;
        float _2700 = _2697 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2696 > _2700) || ((_2696 < _2698) || ((_2695 > _2700) || ((_2695 < _2698) || ((_2694 < _2698) || (_2694 > _2700))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2818 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2696, cbModelParam._m0[17u].z, fma(_2695, cbModelParam._m0[17u].y, _2694 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2696, cbModelParam._m0[18u].z, fma(_2695, cbModelParam._m0[18u].y, _2694 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2696, cbModelParam._m0[19u].z, fma(_2695, cbModelParam._m0[19u].y, _2694 * cbModelParam._m0[19u].x))), _1851);
            frontier_phi_27_52_ladder = _2818.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2818.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2818.x * cbModelParam._m0[1u].z;
        }
        _1942 = frontier_phi_27_52_ladder_2;
        _1944 = frontier_phi_27_52_ladder_1;
        _1946 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1926 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_918, _919, _920), _1851);
        _1942 = _1926.x * cbModelParam._m0[1u].z;
        _1944 = _1926.y * cbModelParam._m0[1u].z;
        _1946 = _1926.z * cbModelParam._m0[1u].z;
    }
    float _1959 = (((_945 * _895) + _946) * _910) * ((cbModelParam._m0[1u].w * (_1942 - _1842)) + _1842);
    float _1961 = (((_945 * _897) + _946) * _910) * ((cbModelParam._m0[1u].w * (_1944 - _1844)) + _1844);
    float _1963 = (((_945 * _898) + _946) * _910) * ((cbModelParam._m0[1u].w * (_1946 - _1846)) + _1846);
    float _1966 = fma(_1963, cbSceneParam._m0[89u].z, fma(_1961, cbSceneParam._m0[89u].y, _1959 * cbSceneParam._m0[89u].x));
    float _1969 = fma(_1963, cbSceneParam._m0[90u].z, fma(_1961, cbSceneParam._m0[90u].y, _1959 * cbSceneParam._m0[90u].x));
    float _1972 = fma(_1963, cbSceneParam._m0[91u].z, fma(_1961, cbSceneParam._m0[91u].y, _1959 * cbSceneParam._m0[91u].x));
    float _2006 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2010 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2014 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2018 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2019 = _2006 / _2018;
    float _2020 = _2010 / _2018;
    float _2021 = _2014 / _2018;
    float _2168;
    float _2169;
    float _2170;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2048 = ((uint(_2021 > cbSceneParam._m0[59u].y) + uint(_2021 > cbSceneParam._m0[59u].x)) + uint(_2021 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2049 = _2048 + 43u;
        uint _2057 = _2048 + 44u;
        uint _2065 = _2048 + 45u;
        uint _2073 = _2048 + 46u;
        float _2084 = fma(_2018, cbSceneParam._m0[_2049].w, fma(_2014, cbSceneParam._m0[_2049].z, fma(_2010, cbSceneParam._m0[_2049].y, _2006 * cbSceneParam._m0[_2049].x)));
        float _2088 = fma(_2018, cbSceneParam._m0[_2057].w, fma(_2014, cbSceneParam._m0[_2057].z, fma(_2010, cbSceneParam._m0[_2057].y, _2006 * cbSceneParam._m0[_2057].x)));
        float _2096 = fma(_2018, cbSceneParam._m0[_2073].w, fma(_2014, cbSceneParam._m0[_2073].z, fma(_2010, cbSceneParam._m0[_2073].y, _2006 * cbSceneParam._m0[_2073].x)));
        float _2101 = cbSceneParam._m0[33u].z * _2096;
        float _2103 = cbSceneParam._m0[33u].w * _2096;
        float _2106 = fma(_2018, cbSceneParam._m0[_2065].w, fma(_2014, cbSceneParam._m0[_2065].z, fma(_2010, cbSceneParam._m0[_2065].y, _2006 * cbSceneParam._m0[_2065].x))) / _2096;
        float _2154 = (cbSceneParam._m0[33u].x - sqrt(((_2020 * _2020) + (_2019 * _2019)) + (_2021 * _2021))) * cbSceneParam._m0[33u].y;
        float _4545 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
        float _2161 = (isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2101 + _2084) / _2096, (_2103 + _2088) / _2096), _2106), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2103 + _2084) / _2096, (_2088 - _2101) / _2096), _2106), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2084 - _2101) / _2096, (_2088 - _2103) / _2096), _2106), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2084 - _2103) / _2096, (_2101 + _2088) / _2096), _2106), 0.0)).x), vec4(0.25)));
        _2168 = 1.0 - (_2161 * cbSceneParam._m0[34u].x);
        _2169 = 1.0 - (_2161 * cbSceneParam._m0[34u].y);
        _2170 = 1.0 - (_2161 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2168 = 1.0;
        _2169 = 1.0;
        _2170 = 1.0;
    }
    float _2234;
    float _2236;
    float _2238;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2222 = fma(_2018, cbSceneParam._m0[63u].w, fma(_2014, cbSceneParam._m0[63u].z, fma(_2010, cbSceneParam._m0[63u].y, _2006 * cbSceneParam._m0[63u].x)));
        float _2223 = fma(_2018, cbSceneParam._m0[60u].w, fma(_2014, cbSceneParam._m0[60u].z, fma(_2010, cbSceneParam._m0[60u].y, _2006 * cbSceneParam._m0[60u].x))) / _2222;
        float _2224 = fma(_2018, cbSceneParam._m0[61u].w, fma(_2014, cbSceneParam._m0[61u].z, fma(_2010, cbSceneParam._m0[61u].y, _2006 * cbSceneParam._m0[61u].x))) / _2222;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2223 >= cbSceneParam._m0[64u].x) && (_2224 >= cbSceneParam._m0[64u].y)) && (_2223 <= cbSceneParam._m0[64u].z)) && (_2224 <= cbSceneParam._m0[64u].w))
        {
            float _2362 = fma(_2018, cbSceneParam._m0[62u].w, fma(_2014, cbSceneParam._m0[62u].z, fma(_2010, cbSceneParam._m0[62u].y, _2006 * cbSceneParam._m0[62u].x))) / _2222;
            float _2366 = isnan(cbSceneParam._m0[41u].w) ? _2362 : (isnan(_2362) ? cbSceneParam._m0[41u].w : max(_2362, cbSceneParam._m0[41u].w));
            float _2409 = (cbSceneParam._m0[33u].x - sqrt(((_2020 * _2020) + (_2019 * _2019)) + (_2021 * _2021))) * cbSceneParam._m0[33u].y;
            float _4561 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
            float _2416 = (isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2223, cbSceneParam._m0[33u].w + _2224), _2366), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2223, _2224 - cbSceneParam._m0[33u].z), _2366), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2223 - cbSceneParam._m0[33u].z, _2224 - cbSceneParam._m0[33u].w), _2366), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2223 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2224), _2366), 0.0)).x), vec4(0.25)));
            float _2420 = 1.0 - (_2416 * cbSceneParam._m0[34u].x);
            float _2421 = 1.0 - (_2416 * cbSceneParam._m0[34u].y);
            float _2422 = 1.0 - (_2416 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2421) ? _2169 : (isnan(_2169) ? _2421 : min(_2169, _2421));
            frontier_phi_39_38_ladder_1 = isnan(_2420) ? _2168 : (isnan(_2168) ? _2420 : min(_2168, _2420));
            frontier_phi_39_38_ladder_2 = isnan(_2422) ? _2170 : (isnan(_2170) ? _2422 : min(_2170, _2422));
        }
        else
        {
            frontier_phi_39_38_ladder = _2169;
            frontier_phi_39_38_ladder_1 = _2168;
            frontier_phi_39_38_ladder_2 = _2170;
        }
        _2234 = frontier_phi_39_38_ladder_1;
        _2236 = frontier_phi_39_38_ladder;
        _2238 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2234 = _2168;
        _2236 = _2169;
        _2238 = _2170;
    }
    uvec4 _2243 = floatBitsToUint(cbInstanceData._m0[_838 + 5u]);
    uint _2245 = _2243.x * 14u;
    uint _2246 = _2245 + 13u;
    float _2253 = _910 + (-1.0);
    float _2258 = (cbLight._m0[_2246].x * _2253) + 1.0;
    float _2259 = (cbLight._m0[_2246].y * _2253) + 1.0;
    float _2260 = (cbLight._m0[_2246].z * _2253) + 1.0;
    float _2261 = (cbLight._m0[_2246].w * _2253) + 1.0;
    uint _2262 = _2245 + 5u;
    float _2268 = isnan(1.0) ? _2259 : (isnan(_2259) ? 1.0 : min(_2259, 1.0));
    uint _2272 = _2245 + 4u;
    float _2281 = isnan(1.0) ? _2258 : (isnan(_2258) ? 1.0 : min(_2258, 1.0));
    uint _2285 = _2245 | 1u;
    float _2296 = dot(vec3(cbLight._m0[_2245].xyz), vec3(_681, _682, _683));
    float _2299 = dot(vec3(cbLight._m0[_2285].xyz), vec3(_681, _682, _683));
    float _4597 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
    float _4608 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
    float _2304 = (isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0))) * 0.3183098733425140380859375;
    float _2306 = (isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0))) * 0.3183098733425140380859375;
    float _2313 = ((cbLight._m0[_2262].x * _2268) * _2306) + (((cbLight._m0[_2272].x * _2234) * _2281) * _2304);
    float _2314 = ((_2268 * cbLight._m0[_2262].y) * _2306) + (((cbLight._m0[_2272].y * _2236) * _2281) * _2304);
    float _2315 = ((_2268 * cbLight._m0[_2262].z) * _2306) + (((cbLight._m0[_2272].z * _2238) * _2281) * _2304);
    uvec4 _2319 = floatBitsToUint(cbLight._m0[_2245 + 12u]);
    bool _2321 = _2319.x == 0u;
    float _2423;
    float _2425;
    float _2427;
    if (_2321)
    {
        _2423 = _2313;
        _2425 = _2314;
        _2427 = _2315;
    }
    else
    {
        uint _2431 = _2245 + 6u;
        float _2447 = (dot(vec3(cbLight._m0[_2245 + 2u].xyz), vec3(_681, _682, _683)) * 0.5) + 0.5;
        float _2448 = _2447 * _2447;
        float _4619 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
        float _2449 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
        float _2450 = isnan(1.0) ? _2260 : (isnan(_2260) ? 1.0 : min(_2260, 1.0));
        _2423 = (((cbLight._m0[_2431].x * 0.3183098733425140380859375) * _2449) * _2450) + _2313;
        _2425 = (((cbLight._m0[_2431].y * 0.3183098733425140380859375) * _2449) * _2450) + _2314;
        _2427 = (((cbLight._m0[_2431].z * 0.3183098733425140380859375) * _2449) * _2450) + _2315;
    }
    bool _2430 = _2319.y == 0u;
    float _2485;
    float _2487;
    float _2489;
    if (_2430)
    {
        _2485 = _2423;
        _2487 = _2425;
        _2489 = _2427;
    }
    else
    {
        uint _2658 = _2245 + 7u;
        float _2674 = (dot(vec3(cbLight._m0[_2245 + 3u].xyz), vec3(_681, _682, _683)) * 0.5) + 0.5;
        float _2675 = _2674 * _2674;
        float _4635 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
        float _2676 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
        float _2677 = isnan(1.0) ? _2261 : (isnan(_2261) ? 1.0 : min(_2261, 1.0));
        _2485 = (((cbLight._m0[_2658].x * 0.3183098733425140380859375) * _2676) * _2677) + _2423;
        _2487 = (((cbLight._m0[_2658].y * 0.3183098733425140380859375) * _2676) * _2677) + _2425;
        _2489 = (((cbLight._m0[_2658].z * 0.3183098733425140380859375) * _2676) * _2677) + _2427;
    }
    uint _2492 = _2245 + 8u;
    float _2505 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2245].w)) * _825) * 0.949999988079071044921875);
    float _2506 = _2505 * _2505;
    float _2507 = cbLight._m0[_2245].x + _761;
    float _2508 = cbLight._m0[_2245].y + _762;
    float _2509 = cbLight._m0[_2245].z + _763;
    float _2513 = inversesqrt(dot(vec3(_2507, _2508, _2509), vec3(_2507, _2508, _2509)));
    float _2514 = _2513 * _2507;
    float _2515 = _2513 * _2508;
    float _2516 = _2513 * _2509;
    float _2517 = dot(vec3(_681, _682, _683), vec3(cbLight._m0[_2245].xyz));
    float _4651 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
    float _2520 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
    float _4662 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _2521 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
    float _2522 = dot(vec3(_681, _682, _683), vec3(_2514, _2515, _2516));
    float _4673 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
    float _2525 = isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0));
    float _2526 = dot(vec3(cbLight._m0[_2245].xyz), vec3(_2514, _2515, _2516));
    float _4684 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
    float _2530 = _2506 * _2506;
    float _2534 = ((_2525 * _2525) * (_2530 + (-1.0))) + 1.0;
    float _2542 = exp2(log2(1.0 - (isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0)))) * 5.0);
    float _2543 = 0.959999978542327880859375 - _892;
    float _2545 = 0.959999978542327880859375 - _893;
    float _2546 = 0.959999978542327880859375 - _894;
    float _2553 = 1.0 - _2506;
    float _2564 = (0.5 / (((_2521 * ((_2520 * _2553) + _2506)) + 9.9999999392252902907785028219223e-09) + (((_2521 * _2553) + _2506) * _2520))) * _2520;
    float _4695 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
    float _2566 = (isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0))) * (_2530 / ((_2534 * _2534) * 3.141590118408203125));
    uint _2580 = _2245 + 9u;
    float _2591 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2285].w)) * _825) * 0.949999988079071044921875);
    float _2592 = _2591 * _2591;
    float _2593 = cbLight._m0[_2285].x + _761;
    float _2594 = cbLight._m0[_2285].y + _762;
    float _2595 = cbLight._m0[_2285].z + _763;
    float _2599 = inversesqrt(dot(vec3(_2593, _2594, _2595), vec3(_2593, _2594, _2595)));
    float _2600 = _2599 * _2593;
    float _2601 = _2599 * _2594;
    float _2602 = _2599 * _2595;
    float _2603 = dot(vec3(_681, _682, _683), vec3(cbLight._m0[_2285].xyz));
    float _4706 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
    float _2606 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
    float _2607 = dot(vec3(_681, _682, _683), vec3(_2600, _2601, _2602));
    float _4717 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
    float _2610 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
    float _2611 = dot(vec3(cbLight._m0[_2285].xyz), vec3(_2600, _2601, _2602));
    float _4728 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
    float _2615 = _2592 * _2592;
    float _2619 = ((_2610 * _2610) * (_2615 + (-1.0))) + 1.0;
    float _2626 = exp2(log2(1.0 - (isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0)))) * 5.0);
    float _2633 = 1.0 - _2592;
    float _2643 = (0.5 / (((_2521 * ((_2606 * _2633) + _2592)) + 9.9999999392252902907785028219223e-09) + (((_2521 * _2633) + _2592) * _2606))) * _2606;
    float _4739 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
    float _2645 = (isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0))) * (_2615 / ((_2619 * _2619) * 3.141590118408203125));
    float _2655 = (((((_2626 * _2543) + _895) * cbLight._m0[_2580].x) * _2645) * _2268) + ((((cbLight._m0[_2492].x * _2234) * ((_2542 * _2543) + _895)) * _2566) * _2281);
    float _2656 = (((((_2626 * _2545) + _897) * cbLight._m0[_2580].y) * _2645) * _2268) + ((((cbLight._m0[_2492].y * _2236) * ((_2542 * _2545) + _897)) * _2566) * _2281);
    float _2657 = (((((_2626 * _2546) + _898) * cbLight._m0[_2580].z) * _2645) * _2268) + ((((cbLight._m0[_2492].z * _2238) * ((_2542 * _2546) + _898)) * _2566) * _2281);
    float _2713;
    float _2715;
    float _2717;
    if (_2321)
    {
        _2713 = _2655;
        _2715 = _2656;
        _2717 = _2657;
    }
    else
    {
        uint _2719 = _2245 + 2u;
        uint _2723 = _2245 + 10u;
        float _2737 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2719].w)) * _825) * 0.949999988079071044921875);
        float _2738 = _2737 * _2737;
        float _2739 = cbLight._m0[_2719].x + _761;
        float _2740 = cbLight._m0[_2719].y + _762;
        float _2741 = cbLight._m0[_2719].z + _763;
        float _2745 = inversesqrt(dot(vec3(_2739, _2740, _2741), vec3(_2739, _2740, _2741)));
        float _2746 = _2745 * _2739;
        float _2747 = _2745 * _2740;
        float _2748 = _2745 * _2741;
        float _2749 = dot(vec3(_681, _682, _683), vec3(cbLight._m0[_2719].xyz));
        float _4750 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
        float _2752 = isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0));
        float _2753 = dot(vec3(_681, _682, _683), vec3(_2746, _2747, _2748));
        float _4761 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
        float _2756 = isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0));
        float _2757 = dot(vec3(cbLight._m0[_2719].xyz), vec3(_2746, _2747, _2748));
        float _4772 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0));
        float _2761 = _2738 * _2738;
        float _2765 = ((_2756 * _2756) * (_2761 + (-1.0))) + 1.0;
        float _2772 = exp2(log2(1.0 - (isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0)))) * 5.0);
        float _2779 = 1.0 - _2738;
        float _2789 = (0.5 / (((_2521 * ((_2752 * _2779) + _2738)) + 9.9999999392252902907785028219223e-09) + (((_2521 * _2779) + _2738) * _2752))) * _2752;
        float _4783 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
        float _2791 = (isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0))) * (_2761 / ((_2765 * _2765) * 3.141590118408203125));
        float _2792 = isnan(1.0) ? _2260 : (isnan(_2260) ? 1.0 : min(_2260, 1.0));
        _2713 = (((((_2772 * _2543) + _895) * cbLight._m0[_2723].x) * _2791) * _2792) + _2655;
        _2715 = (((((_2772 * _2545) + _897) * cbLight._m0[_2723].y) * _2791) * _2792) + _2656;
        _2717 = (((((_2772 * _2546) + _898) * cbLight._m0[_2723].z) * _2791) * _2792) + _2657;
    }
    float _2823;
    float _2825;
    float _2827;
    if (_2430)
    {
        _2823 = _2713;
        _2825 = _2715;
        _2827 = _2717;
    }
    else
    {
        uint _2834 = _2245 + 3u;
        uint _2838 = _2245 + 11u;
        float _2852 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2834].w)) * _825) * 0.949999988079071044921875);
        float _2853 = _2852 * _2852;
        float _2854 = cbLight._m0[_2834].x + _761;
        float _2855 = cbLight._m0[_2834].y + _762;
        float _2856 = cbLight._m0[_2834].z + _763;
        float _2860 = inversesqrt(dot(vec3(_2854, _2855, _2856), vec3(_2854, _2855, _2856)));
        float _2861 = _2860 * _2854;
        float _2862 = _2860 * _2855;
        float _2863 = _2860 * _2856;
        float _2864 = dot(vec3(_681, _682, _683), vec3(cbLight._m0[_2834].xyz));
        float _4799 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0));
        float _2867 = isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0));
        float _2868 = dot(vec3(_681, _682, _683), vec3(_2861, _2862, _2863));
        float _4810 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0));
        float _2871 = isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0));
        float _2872 = dot(vec3(cbLight._m0[_2834].xyz), vec3(_2861, _2862, _2863));
        float _4821 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0));
        float _2876 = _2853 * _2853;
        float _2880 = ((_2871 * _2871) * (_2876 + (-1.0))) + 1.0;
        float _2887 = exp2(log2(1.0 - (isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0)))) * 5.0);
        float _2894 = 1.0 - _2853;
        float _2904 = (0.5 / (((_2521 * ((_2867 * _2894) + _2853)) + 9.9999999392252902907785028219223e-09) + (((_2521 * _2894) + _2853) * _2867))) * _2867;
        float _4832 = isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : max(_2904, 0.0));
        float _2906 = (isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0))) * (_2876 / ((_2880 * _2880) * 3.141590118408203125));
        float _2907 = isnan(1.0) ? _2261 : (isnan(_2261) ? 1.0 : min(_2261, 1.0));
        _2823 = (((((_2887 * _2543) + _895) * cbLight._m0[_2838].x) * _2906) * _2907) + _2713;
        _2825 = (((((_2887 * _2545) + _897) * cbLight._m0[_2838].y) * _2906) * _2907) + _2715;
        _2827 = (((((_2887 * _2546) + _898) * cbLight._m0[_2838].z) * _2906) * _2907) + _2717;
    }
    float _2972;
    float _2974;
    float _2976;
    float _2978;
    float _2980;
    float _2982;
    if (_2243.y == 0u)
    {
        uvec4 _2928 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2929 = _2928.x;
        uint _2940 = uint((float(_2928.y) * floor(float(uint(cbSceneParam._m0[85u].y * _783) / _2929))) + floor(float(uint(cbSceneParam._m0[85u].x * _782) / _2929)));
        float _2950 = (log2(_2021 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2951 = isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0));
        uint _2954 = uint(isnan(14.0) ? _2951 : (isnan(_2951) ? 14.0 : min(_2951, 14.0)));
        uvec4 _2959 = texelFetch(g_lightClusterGridBuffer, int(((_2954 << 2u) + (_2940 << 6u)) >> 2u));
        uint _2960 = _2959.x;
        uint _2961 = _2928.z;
        float _3074;
        float _3076;
        float _3078;
        float _3080;
        float _3082;
        float _3084;
        if (((((1u << ((_2961 >> 4u) & 15u)) + 4294967295u) & _2960) == 0u) || ((_2961 & 240u) == 0u))
        {
            _3074 = 0.0;
            _3076 = 0.0;
            _3078 = 0.0;
            _3080 = 0.0;
            _3082 = 0.0;
            _3084 = 0.0;
        }
        else
        {
            float _3075;
            float _3077;
            float _3079;
            float _3081;
            float _3083;
            float _3085;
            float _3235 = 0.0;
            float _3236 = 0.0;
            float _3237 = 0.0;
            float _3238 = 0.0;
            float _3239 = 0.0;
            float _3240 = 0.0;
            uint _3241 = 0u;
            uint _3250;
            bool _3251;
            for (;;)
            {
                _3250 = texelFetch(g_lightClassification, int((((_2954 << 5u) + (_2940 << 9u)) + (_3241 << 2u)) >> 2u)).x;
                _3251 = _3250 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3251)
                {
                    frontier_phi_73_pred = _3240;
                    frontier_phi_73_pred_1 = _3239;
                    frontier_phi_73_pred_2 = _3238;
                    frontier_phi_73_pred_3 = _3237;
                    frontier_phi_73_pred_4 = _3236;
                    frontier_phi_73_pred_5 = _3235;
                }
                else
                {
                    float _3380;
                    float _3381;
                    float _3382;
                    float _3383;
                    float _3384;
                    float _3385;
                    uint _3386;
                    _3380 = _3235;
                    _3381 = _3236;
                    _3382 = _3237;
                    _3383 = _3238;
                    _3384 = _3239;
                    _3385 = _3240;
                    _3386 = _3250;
                    float _3307;
                    float _3308;
                    float _3309;
                    float _3310;
                    float _3311;
                    float _3312;
                    for (;;)
                    {
                        uint _3390 = uint(findLSB(_3386)) + (_3241 << 5u);
                        uint _3387 = (_3386 + 4294967295u) & _3386;
                        uint _3392 = _3390 * 48u;
                        vec4 _3406 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3392)).x, texelFetch(g_PointLightRenderingBuffer, int(_3392 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3392 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3392 + 3u)).x));
                        uint _3412 = (_3390 * 48u) + 4u;
                        vec4 _3425 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3412)).x, texelFetch(g_PointLightRenderingBuffer, int(_3412 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3412 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3412 + 3u)).x));
                        uint _3431 = (_3390 * 48u) + 8u;
                        vec3 _3442 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3431)).x, texelFetch(g_PointLightRenderingBuffer, int(_3431 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3431 + 2u)).x));
                        float _3446 = _3406.x - _2019;
                        float _3447 = _3406.y - _2020;
                        float _3448 = _3406.z - _2021;
                        float _3449 = dot(vec3(_3446, _3447, _3448), vec3(_3446, _3447, _3448));
                        float _3452 = inversesqrt(_3449);
                        float _3453 = _3452 * _3446;
                        float _3454 = _3452 * _3447;
                        float _3455 = _3452 * _3448;
                        float _3456 = dot(vec3(_806, _809, _812), vec3(_3453, _3454, _3455));
                        float _3461 = 1.0 - (_3449 * _3406.w);
                        float _4858 = isnan(0.0) ? _3461 : (isnan(_3461) ? 0.0 : max(_3461, 0.0));
                        float _3462 = isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0));
                        float _3463 = sqrt(_3449) * _3425.w;
                        float _3466 = 1.39999997615814208984375 / (_3463 + 1.39999997615814208984375);
                        float _3467 = _3466 * _3466;
                        float _3470 = ((1.0 - _3467) * _3456) + _3467;
                        float _3473 = _3463 * _3463;
                        float _3477 = ((isnan(0.0) ? _3470 : (isnan(_3470) ? 0.0 : max(_3470, 0.0))) * _3462) / ((_3473 * 0.699999988079071044921875) + 1.0);
                        float _3481 = (-0.0) - _2019;
                        float _3482 = (-0.0) - _2020;
                        float _3483 = (-0.0) - _2021;
                        float _3487 = inversesqrt(dot(vec3(_3481, _3482, _3483), vec3(_3481, _3482, _3483)));
                        float _3488 = _3487 * _3481;
                        float _3489 = _3487 * _3482;
                        float _3490 = _3487 * _3483;
                        float _3497 = exp2(log2(1.0 / ((_3473 * 3.5) + 5.0)) * 0.25);
                        float _3498 = 1.0 - _926;
                        float _3505 = sqrt(1.0 - ((1.0 - (_3498 * _3498)) * (1.0 - (_3497 * _3497))));
                        float _3506 = _3505 * _3505;
                        float _3507 = _3506 * _3506;
                        float _3508 = _3488 + _3453;
                        float _3509 = _3489 + _3454;
                        float _3510 = _3490 + _3455;
                        float _3514 = inversesqrt(dot(vec3(_3508, _3509, _3510), vec3(_3508, _3509, _3510)));
                        float _3518 = dot(vec3(_806, _809, _812), vec3(_3488, _3489, _3490));
                        float _4874 = isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0));
                        float _3521 = isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0));
                        float _3522 = dot(vec3(_806, _809, _812), vec3(_3514 * _3508, _3514 * _3509, _3514 * _3510));
                        float _4885 = isnan(0.0) ? _3522 : (isnan(_3522) ? 0.0 : max(_3522, 0.0));
                        float _3525 = isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0));
                        float _3529 = ((_3525 * _3525) * (_3507 + (-1.0))) + 1.0;
                        float _3530 = _3466 * _3506;
                        float _3531 = _3530 * _3530;
                        float _3534 = ((1.0 - _3531) * _3456) + _3531;
                        float _4896 = isnan(0.0) ? _3534 : (isnan(_3534) ? 0.0 : max(_3534, 0.0));
                        float _3535 = isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0));
                        float _3536 = 1.0 - _3506;
                        float _3546 = (0.5 / (((_3535 * ((_3521 * _3536) + _3506)) + 9.9999999392252902907785028219223e-09) + (((_3535 * _3536) + _3506) * _3521))) * _3535;
                        float _4907 = isnan(0.0) ? _3546 : (isnan(_3546) ? 0.0 : max(_3546, 0.0));
                        float _3557 = (((_3507 * 3.1415927410125732421875) * (isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0)))) / ((_3529 * _3529) * ((_3473 * 2.1991131305694580078125) + 3.141590118408203125))) * _3462;
                        _3310 = (_3477 * _3425.x) + _3383;
                        _3311 = (_3477 * _3425.y) + _3384;
                        _3312 = (_3477 * _3425.z) + _3385;
                        _3307 = (_3557 * _3442.x) + _3380;
                        _3308 = (_3557 * _3442.y) + _3381;
                        _3309 = (_3557 * _3442.z) + _3382;
                        if (_3387 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3380 = _3307;
                            _3381 = _3308;
                            _3382 = _3309;
                            _3383 = _3310;
                            _3384 = _3311;
                            _3385 = _3312;
                            _3386 = _3387;
                        }
                    }
                    frontier_phi_73_pred = _3312;
                    frontier_phi_73_pred_1 = _3311;
                    frontier_phi_73_pred_2 = _3310;
                    frontier_phi_73_pred_3 = _3309;
                    frontier_phi_73_pred_4 = _3308;
                    frontier_phi_73_pred_5 = _3307;
                }
                _3085 = frontier_phi_73_pred;
                _3083 = frontier_phi_73_pred_1;
                _3081 = frontier_phi_73_pred_2;
                _3079 = frontier_phi_73_pred_3;
                _3077 = frontier_phi_73_pred_4;
                _3075 = frontier_phi_73_pred_5;
                uint _3242 = _3241 + 1u;
                if (_3242 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3235 = _3075;
                    _3236 = _3077;
                    _3237 = _3079;
                    _3238 = _3081;
                    _3239 = _3083;
                    _3240 = _3085;
                    _3241 = _3242;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3074 = _3075;
            _3076 = _3077;
            _3078 = _3079;
            _3080 = _3081;
            _3082 = _3083;
            _3084 = _3085;
        }
        uvec4 _3088 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3089 = _3088.z;
        uint _3091 = (_3089 >> 8u) & 15u;
        float _3203;
        float _3205;
        float _3207;
        float _3209;
        float _3211;
        float _3213;
        if (((4294967295u << _3091) & _2960) == 0u)
        {
            _3203 = _3074;
            _3205 = _3076;
            _3207 = _3078;
            _3209 = _3080;
            _3211 = _3082;
            _3213 = _3084;
        }
        else
        {
            float _3228 = inversesqrt(dot(vec3(_2019, _2020, _2021), vec3(_2019, _2020, _2021)));
            float _3229 = _3228 * _2019;
            float _3230 = _3228 * _2020;
            float _3231 = _3228 * _2021;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3091 < ((_3089 >> 12u) & 15u))
            {
                float _3204;
                float _3206;
                float _3208;
                float _3210;
                float _3212;
                float _3214;
                float _3363 = _3074;
                float _3364 = _3076;
                float _3365 = _3078;
                float _3366 = _3080;
                float _3367 = _3082;
                float _3368 = _3084;
                uint _3369 = _3091;
                uint _3378;
                bool _3379;
                for (;;)
                {
                    _3378 = texelFetch(g_lightClassification, int((((_2954 << 5u) + (_2940 << 9u)) + (_3369 << 2u)) >> 2u)).x;
                    _3379 = _3378 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3379)
                    {
                        frontier_phi_84_pred = _3367;
                        frontier_phi_84_pred_1 = _3366;
                        frontier_phi_84_pred_2 = _3365;
                        frontier_phi_84_pred_3 = _3364;
                        frontier_phi_84_pred_4 = _3363;
                        frontier_phi_84_pred_5 = _3368;
                    }
                    else
                    {
                        float _3571;
                        float _3572;
                        float _3573;
                        float _3574;
                        float _3575;
                        float _3576;
                        float _3865;
                        float _3866;
                        float _3867;
                        float _3868;
                        float _3869;
                        float _3870;
                        float _3584 = _3363;
                        float _3585 = _3364;
                        float _3586 = _3365;
                        float _3587 = _3366;
                        float _3588 = _3367;
                        float _3589 = _3368;
                        uint _3590 = _3378;
                        uint _3591;
                        vec4 _3616;
                        float _3617;
                        vec4 _3632;
                        vec3 _3644;
                        vec4 _3660;
                        vec4 _3675;
                        float _3721;
                        bool _3722;
                        for (;;)
                        {
                            uint _3601 = ((_3369 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3590));
                            _3591 = (_3590 + 4294967295u) & _3590;
                            uint _3603 = _3601 * 40u;
                            _3616 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3603)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 3u)).x));
                            _3617 = _3616.w;
                            uint _3619 = (_3601 * 40u) + 4u;
                            _3632 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3619)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 3u)).x));
                            uint _3634 = (_3601 * 40u) + 8u;
                            _3644 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3634)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 2u)).x));
                            uint _3647 = (_3601 * 40u) + 16u;
                            _3660 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3647)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 3u)).x));
                            uint _3662 = (_3601 * 40u) + 20u;
                            _3675 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3662)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 3u)).x));
                            uint _3677 = (_3601 * 40u) + 24u;
                            vec4 _3690 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3677)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3677 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3677 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3677 + 3u)).x));
                            uint _3696 = (_3601 * 40u) + 28u;
                            vec4 _3709 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3696)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3696 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3696 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3696 + 3u)).x));
                            _3721 = fma(_2021, _3709.z, fma(_2020, _3709.y, _3709.x * _2019)) + _3709.w;
                            _3722 = !((fma(_2021, _3690.z, fma(_2020, _3690.y, _3690.x * _2019)) + _3690.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3722)
                            {
                                float _3749 = _3616.x - _2019;
                                float _3750 = _3616.y - _2020;
                                float _3751 = _3616.z - _2021;
                                float _3752 = dot(vec3(_3749, _3750, _3751), vec3(_3749, _3750, _3751));
                                float _3755 = inversesqrt(_3752);
                                float _3756 = _3755 * _3749;
                                float _3757 = _3755 * _3750;
                                float _3758 = _3755 * _3751;
                                float _3762 = 1.0 - (_3752 / (_3617 * _3617));
                                float _4918 = isnan(0.0) ? _3762 : (isnan(_3762) ? 0.0 : max(_3762, 0.0));
                                float _3763 = isnan(1.0) ? _4918 : (isnan(_4918) ? 1.0 : min(_4918, 1.0));
                                float _3767 = sqrt(_3752) * _3632.w;
                                float _3769 = 1.39999997615814208984375 / (_3767 + 1.39999997615814208984375);
                                float _3770 = _3769 * _3769;
                                float _3773 = ((1.0 - _3770) * dot(vec3(_3756, _3757, _3758), vec3(_806, _809, _812))) + _3770;
                                float _3776 = _3767 * _3767;
                                float _3780 = (fma(_2021, _3660.z, fma(_2020, _3660.y, _3660.x * _2019)) + _3660.w) / _3721;
                                float _3781 = (fma(_2021, _3675.z, fma(_2020, _3675.y, _3675.x * _2019)) + _3675.w) / _3721;
                                float _3785 = 1.0 - dot(vec2(_3780, _3781), vec2(_3780, _3781));
                                float _4934 = isnan(0.0) ? _3785 : (isnan(_3785) ? 0.0 : max(_3785, 0.0));
                                float _3786 = isnan(1.0) ? _4934 : (isnan(_4934) ? 1.0 : min(_4934, 1.0));
                                float _3787 = _3786 * (((isnan(0.0) ? _3773 : (isnan(_3773) ? 0.0 : max(_3773, 0.0))) * _3763) / ((_3776 * 0.699999988079071044921875) + 1.0));
                                float _3799 = exp2(log2(1.0 / ((_3776 * 3.5) + 5.0)) * 0.25);
                                float _3800 = 1.0 - _926;
                                float _3807 = sqrt(1.0 - ((1.0 - (_3800 * _3800)) * (1.0 - (_3799 * _3799))));
                                float _3808 = _3807 * _3807;
                                float _3809 = _3808 * _3808;
                                float _3810 = _3756 - _3229;
                                float _3811 = _3757 - _3230;
                                float _3812 = _3758 - _3231;
                                float _3816 = inversesqrt(dot(vec3(_3810, _3811, _3812), vec3(_3810, _3811, _3812)));
                                float _3820 = dot(vec3(_806, _809, _812), vec3((-0.0) - _3229, (-0.0) - _3230, (-0.0) - _3231));
                                float _4945 = isnan(0.0) ? _3820 : (isnan(_3820) ? 0.0 : max(_3820, 0.0));
                                float _3823 = isnan(1.0) ? _4945 : (isnan(_4945) ? 1.0 : min(_4945, 1.0));
                                float _3824 = dot(vec3(_806, _809, _812), vec3(_3816 * _3810, _3816 * _3811, _3816 * _3812));
                                float _4956 = isnan(0.0) ? _3824 : (isnan(_3824) ? 0.0 : max(_3824, 0.0));
                                float _3827 = isnan(1.0) ? _4956 : (isnan(_4956) ? 1.0 : min(_4956, 1.0));
                                float _3831 = ((_3827 * _3827) * (_3809 + (-1.0))) + 1.0;
                                float _3832 = _3769 * _3808;
                                float _3833 = _3832 * _3832;
                                float _3839 = ((1.0 - _3833) * dot(vec3(_806, _809, _812), vec3(_3756, _3757, _3758))) + _3833;
                                float _4967 = isnan(0.0) ? _3839 : (isnan(_3839) ? 0.0 : max(_3839, 0.0));
                                float _3840 = isnan(1.0) ? _4967 : (isnan(_4967) ? 1.0 : min(_4967, 1.0));
                                float _3841 = 1.0 - _3808;
                                float _3851 = (0.5 / (((_3840 * ((_3823 * _3841) + _3808)) + 9.9999999392252902907785028219223e-09) + (((_3840 * _3841) + _3808) * _3823))) * _3840;
                                float _4978 = isnan(0.0) ? _3851 : (isnan(_3851) ? 0.0 : max(_3851, 0.0));
                                float _3861 = (_3786 * _3763) * (((_3809 * 3.1415927410125732421875) * (isnan(1.0) ? _4978 : (isnan(_4978) ? 1.0 : min(_4978, 1.0)))) / ((_3831 * _3831) * ((_3776 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3787 * _3632.y;
                                frontier_phi_90_pred_1 = _3787 * _3632.x;
                                frontier_phi_90_pred_2 = _3861 * _3644.z;
                                frontier_phi_90_pred_3 = _3861 * _3644.y;
                                frontier_phi_90_pred_4 = _3861 * _3644.x;
                                frontier_phi_90_pred_5 = _3787 * _3632.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3869 = frontier_phi_90_pred;
                            _3868 = frontier_phi_90_pred_1;
                            _3867 = frontier_phi_90_pred_2;
                            _3866 = frontier_phi_90_pred_3;
                            _3865 = frontier_phi_90_pred_4;
                            _3870 = frontier_phi_90_pred_5;
                            _3574 = _3868 + _3587;
                            _3575 = _3869 + _3588;
                            _3576 = _3870 + _3589;
                            _3571 = _3865 + _3584;
                            _3572 = _3866 + _3585;
                            _3573 = _3867 + _3586;
                            if (_3591 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3584 = _3571;
                                _3585 = _3572;
                                _3586 = _3573;
                                _3587 = _3574;
                                _3588 = _3575;
                                _3589 = _3576;
                                _3590 = _3591;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3575;
                        frontier_phi_84_pred_1 = _3574;
                        frontier_phi_84_pred_2 = _3573;
                        frontier_phi_84_pred_3 = _3572;
                        frontier_phi_84_pred_4 = _3571;
                        frontier_phi_84_pred_5 = _3576;
                    }
                    _3212 = frontier_phi_84_pred;
                    _3210 = frontier_phi_84_pred_1;
                    _3208 = frontier_phi_84_pred_2;
                    _3206 = frontier_phi_84_pred_3;
                    _3204 = frontier_phi_84_pred_4;
                    _3214 = frontier_phi_84_pred_5;
                    uint _3370 = _3369 + 1u;
                    if (_3370 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3363 = _3204;
                        _3364 = _3206;
                        _3365 = _3208;
                        _3366 = _3210;
                        _3367 = _3212;
                        _3368 = _3214;
                        _3369 = _3370;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3214;
                frontier_phi_65_66_ladder_1 = _3210;
                frontier_phi_65_66_ladder_2 = _3212;
                frontier_phi_65_66_ladder_3 = _3206;
                frontier_phi_65_66_ladder_4 = _3204;
                frontier_phi_65_66_ladder_5 = _3208;
            }
            else
            {
                frontier_phi_65_66_ladder = _3084;
                frontier_phi_65_66_ladder_1 = _3080;
                frontier_phi_65_66_ladder_2 = _3082;
                frontier_phi_65_66_ladder_3 = _3076;
                frontier_phi_65_66_ladder_4 = _3074;
                frontier_phi_65_66_ladder_5 = _3078;
            }
            _3203 = frontier_phi_65_66_ladder_4;
            _3205 = frontier_phi_65_66_ladder_3;
            _3207 = frontier_phi_65_66_ladder_5;
            _3209 = frontier_phi_65_66_ladder_1;
            _3211 = frontier_phi_65_66_ladder_2;
            _3213 = frontier_phi_65_66_ladder;
        }
        float _3218 = isnan(1.0) ? _910 : (isnan(_910) ? 1.0 : min(_910, 1.0));
        _2972 = (_3218 * _3209) + _2485;
        _2974 = (_3218 * _3211) + _2487;
        _2976 = (_3218 * _3213) + _2489;
        _2978 = ((_3203 * _895) * _3218) + _2823;
        _2980 = ((_3205 * _897) * _3218) + _2825;
        _2982 = ((_3207 * _898) * _3218) + _2827;
    }
    else
    {
        _2972 = _2485;
        _2974 = _2487;
        _2976 = _2489;
        _2978 = _2823;
        _2980 = _2825;
        _2982 = _2827;
    }
    uint _2988 = _839 + uint(cbMatDynParam._m0[0u].w);
    float _2996 = ((cbMtdParam._m0[11u].x * cbMtdParam._m0[22u].z) * _625.x) * cbInstanceData._m0[_2988].x;
    float _2999 = ((cbMtdParam._m0[11u].y * cbMtdParam._m0[22u].z) * _625.y) * cbInstanceData._m0[_2988].y;
    float _3002 = ((cbMtdParam._m0[11u].z * cbMtdParam._m0[22u].z) * _625.z) * cbInstanceData._m0[_2988].z;
    float _4994 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _5005 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _5016 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _3019 = (((isnan(1.0) ? _4994 : (isnan(_4994) ? 1.0 : min(_4994, 1.0))) * (_2972 + ((isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0))) * _910))) + ((_2978 + ((isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0))) * _1751)) * cbPerFrame._m0[3u].x)) + _2996;
    float _3021 = (_2999 + ((_2980 + ((isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0))) * _1751)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5005 : (isnan(_5005) ? 1.0 : min(_5005, 1.0))) * (_2974 + ((isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0))) * _910)));
    float _3023 = (_3002 + ((_2982 + ((isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0))) * _1751)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5016 : (isnan(_5016) ? 1.0 : min(_5016, 1.0))) * (_2976 + ((isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0))) * _910)));
    float _3024 = isnan(0.0) ? _3019 : (isnan(_3019) ? 0.0 : max(_3019, 0.0));
    float _3025 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0));
    float _3026 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0));
    float _3032 = cbMtdParam._m0[2u].x * _2996;
    float _3033 = cbMtdParam._m0[2u].y * _2999;
    float _3034 = cbMtdParam._m0[2u].z * _3002;
    float _5042 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3036 = isnan(1.0) ? _5042 : (isnan(_5042) ? 1.0 : min(_5042, 1.0));
    uint _3037 = _838 + 6u;
    float _3045 = _782 / cbSceneParam._m0[86u].x;
    float _3046 = _783 / cbSceneParam._m0[86u].y;
    vec4 _3060 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3045, _3046, (log2((isnan(cbSceneParam._m0[77u].w) ? _704 : (isnan(_704) ? cbSceneParam._m0[77u].w : min(_704, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3062 = _3060.x;
    float _3063 = _3060.y;
    float _3064 = _3060.z;
    float _3065 = _3060.w;
    float _3136;
    float _3138;
    float _3140;
    float _3142;
    if (_704 > cbSceneParam._m0[78u].w)
    {
        float _3099 = isnan(_704) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _704 : min(cbSceneParam._m0[80u].w, _704));
        float _3100 = _3099 / _704;
        float _3111 = _3100 * _754;
        float _3112 = _755 * _3100;
        float _3113 = (-0.0) - _3112;
        float _3114 = _3100 * _756;
        float _3116 = (cbSceneParam._m0[77u].w * _3113) / _3099;
        float _3117 = _3116 + cbSceneParam._m0[79u].w;
        float _3118 = cbSceneParam._m0[79u].w - _3112;
        float _3124 = sqrt(((_3111 * _3111) + (_3112 * _3112)) + (_3114 * _3114));
        float _3127 = (1.0 - (cbSceneParam._m0[77u].w / _3099)) * _3124;
        float _3132 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3134 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3320;
        if (abs((_3113 - _3116) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3320 = ((((_3117 > 0.0) ? exp2(_3132 * _3117) : (2.0 - exp2(_3134 * _3117))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3127;
        }
        else
        {
            float _3264 = 1.0 / cbSceneParam._m0[80u].x;
            float _3265 = isnan(_3118) ? _3117 : (isnan(_3117) ? _3118 : max(_3117, _3118));
            float _3266 = isnan(_3118) ? _3117 : (isnan(_3117) ? _3118 : min(_3117, _3118));
            float _3275 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : min(_3265, 0.0));
            float _3276 = isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : min(_3266, 0.0));
            _3320 = ((abs(_3124 / _3113) * cbSceneParam._m0[80u].y) * ((((_3275 - _3276) * 2.0) - ((exp2(_3132 * (isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0)))) - exp2(_3132 * (isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0))))) * _3264)) - ((exp2(_3134 * _3275) - exp2(_3134 * _3276)) * _3264))) + (_3127 * cbSceneParam._m0[80u].z);
        }
        vec4 _3322 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3045, _3046, 1.0), 0.0);
        float _3331 = exp2((_3320 * (-1.44269502162933349609375)) * (1.0 - _3322.w));
        float _3332 = log2(_3331);
        float _3348 = log2(_3065);
        _3136 = (exp2(_3348 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3332 * cbSceneParam._m0[78u].x)) * _3322.x) / cbSceneParam._m0[78u].x)) + _3062;
        _3138 = (exp2(_3348 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3332 * cbSceneParam._m0[78u].y)) * _3322.y) / cbSceneParam._m0[78u].y)) + _3063;
        _3140 = (exp2(_3348 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3332 * cbSceneParam._m0[78u].z)) * _3322.z) / cbSceneParam._m0[78u].z)) + _3064;
        _3142 = _3331 * _3065;
    }
    else
    {
        _3136 = _3062;
        _3138 = _3063;
        _3140 = _3064;
        _3142 = _3065;
    }
    bool _3358;
    vec4 _3152;
    vec4 _3174;
    float _3176;
    float _3180;
    float _3181;
    float _3182;
    float _3185;
    float _3188;
    float _3191;
    float _3192;
    bool _3202;
    for (;;)
    {
        _3152 = cbMatDynParam._m0[0u];
        float _3154 = roundEven(_3152.y);
        bool _3155 = _3154 == 3.0;
        float _3156 = log2(_3142);
        float _3160 = exp2(_3156 * cbSceneParam._m0[78u].x);
        float _3161 = exp2(_3156 * cbSceneParam._m0[78u].y);
        float _3162 = exp2(_3156 * cbSceneParam._m0[78u].z);
        float _3163 = _3160 * _3024;
        float _3164 = _3161 * _3025;
        float _3165 = _3162 * _3026;
        float _3172 = _770 + (-0.5);
        _3174 = cbMtdParam._m0[1u];
        _3176 = _3174.y * _3172;
        float _3179 = (_3154 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3180 = _3179 * (_3155 ? _3163 : (_3163 + (cbSceneParam._m0[72u].w * _3136)));
        _3181 = _3179 * (_3155 ? _3164 : (_3164 + (cbSceneParam._m0[72u].w * _3138)));
        _3182 = _3179 * (_3155 ? _3165 : (_3165 + (cbSceneParam._m0[72u].w * _3140)));
        _3185 = ((_3032 * _3036) * _3160) * _3179;
        _3188 = ((_3033 * _3036) * _3161) * _3179;
        _3191 = ((_3034 * _3036) * _3162) * _3179;
        _3192 = _3172 * 0.999000012874603271484375;
        _3202 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3202)
        {
            if ((cbInstanceData._m0[_838 + 7u].x + _3192) < 0.5)
            {
                _3358 = true;
                break;
            }
        }
        uint _3299 = _839 + uint(_3152.w);
        if ((cbInstanceData._m0[_3299].w < 1.0) && ((cbInstanceData._m0[_3299].w + _3192) < 0.5))
        {
            _3358 = true;
            break;
        }
        if ((_3176 + 1.0) < _3174.x)
        {
            _3358 = true;
            break;
        }
        _3358 = false;
        break;
    }
    float _3562;
    if (_3358)
    {
        discard_state = true;
        _3562 = 0.0;
    }
    else
    {
        _3562 = cbInstanceData._m0[_3037].w;
    }
    SV_Target.x = _3180;
    SV_Target.y = _3181;
    SV_Target.z = _3182;
    SV_Target.w = _3562;
    SV_Target_1.x = _3185;
    SV_Target_1.y = _3188;
    SV_Target_1.z = _3191;
    SV_Target_1.w = cbInstanceData._m0[_3037].w;
    discard_exit();
}


