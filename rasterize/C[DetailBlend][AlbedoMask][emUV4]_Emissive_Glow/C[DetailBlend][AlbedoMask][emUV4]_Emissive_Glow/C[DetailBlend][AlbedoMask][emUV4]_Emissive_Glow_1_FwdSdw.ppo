#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 11) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 12) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1377;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _232 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _239 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _240 = _239 * NORMAL.x;
    float _241 = _239 * NORMAL.y;
    float _242 = _239 * NORMAL.z;
    float _246 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _254;
    float _255;
    float _256;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _254 = (-0.0) - _240;
        _255 = (-0.0) - _241;
        _256 = (-0.0) - _242;
    }
    else
    {
        _254 = _240;
        _255 = _241;
        _256 = _242;
    }
    vec4 _271 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _281 = log2(0.0);
    float _283 = exp2(_281 * cbMtdParam._m0[21u].y);
    float _284 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    float _285 = isnan(1.0) ? _284 : (isnan(_284) ? 1.0 : min(_284, 1.0));
    vec4 _299 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _303 = _299.z;
    float _304 = _299.w;
    float _312 = exp2(log2(_303 * cbMtdParam._m0[21u].w) * cbMtdParam._m0[20u].y);
    float _313 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _314 = isnan(1.0) ? _313 : (isnan(_313) ? 1.0 : min(_313, 1.0));
    vec4 _327 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    vec4 _350 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _352 = _350.x;
    float _353 = _350.y;
    float _377 = ((cbMtdParam._m0[20u].w * _350.z) * (texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_15, SS_WrapLinear), vec2(((cbMtdParam._m0[20u].z * TEXCOORD.x) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, ((cbMtdParam._m0[20u].z * TEXCOORD.y) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w)).x - _352)) + _352;
    bool _413 = _377 >= 0.25;
    bool _418 = _377 >= 0.3499999940395355224609375;
    bool _423 = _377 >= 0.5;
    bool _428 = _377 >= 0.64999997615814208984375;
    bool _433 = _377 >= 0.75;
    vec4 _461 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _471 = cbMtdParam._m0[9u].x * _461.x;
    float _472 = cbMtdParam._m0[9u].y * _461.y;
    float _473 = cbMtdParam._m0[9u].z * _461.z;
    float _480 = (((((((_433 ? cbMtdParam._m0[14u].x : (_428 ? cbMtdParam._m0[19u].x : (_423 ? cbMtdParam._m0[18u].x : (_418 ? cbMtdParam._m0[17u].x : (_413 ? cbMtdParam._m0[16u].x : cbMtdParam._m0[15u].x))))) - cbMtdParam._m0[10u].x) * _353) + cbMtdParam._m0[10u].x) * _327.x) - _471) * _314) + _471;
    float _481 = (((((((_433 ? cbMtdParam._m0[14u].y : (_428 ? cbMtdParam._m0[19u].y : (_423 ? cbMtdParam._m0[18u].y : (_418 ? cbMtdParam._m0[17u].y : (_413 ? cbMtdParam._m0[16u].y : cbMtdParam._m0[15u].y))))) - cbMtdParam._m0[10u].y) * _353) + cbMtdParam._m0[10u].y) * _327.y) - _472) * _314) + _472;
    float _482 = (((((((_433 ? cbMtdParam._m0[14u].z : (_428 ? cbMtdParam._m0[19u].z : (_423 ? cbMtdParam._m0[18u].z : (_418 ? cbMtdParam._m0[17u].z : (_413 ? cbMtdParam._m0[16u].z : cbMtdParam._m0[15u].z))))) - cbMtdParam._m0[10u].z) * _353) + cbMtdParam._m0[10u].z) * _327.z) - _473) * _314) + _473;
    float _489 = exp2(log2(_304) * cbMtdParam._m0[22u].y);
    vec4 _502 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _522 = (((cbMtdParam._m0[12u].x * _502.x) - _480) * _489) + _480;
    float _523 = (((cbMtdParam._m0[12u].y * _502.y) - _481) * _489) + _481;
    float _524 = (((cbMtdParam._m0[12u].z * _502.z) - _482) * _489) + _482;
    vec4 _536 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _560 = (_271.x * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].x * _536.x) - _522) * _285) + _522);
    float _562 = (_271.y * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].y * _536.y) - _523) * _285) + _523);
    float _564 = (_271.z * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].z * _536.z) - _524) * _285) + _524);
    float _569 = exp2(log2(1.0 - _304) * 0.00999999977648258209228515625);
    float _587 = ((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_11, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x - cbMtdParam._m0[22u].w) * _569) + cbMtdParam._m0[22u].w;
    float _606 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w)).x - _587) + cbMtdParam._m0[21u].z) * _489) + _587;
    float _628 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w)).x - _606) + cbMtdParam._m0[23u].w) * _285) + _606;
    vec4 _641 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _659 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _661 = _659.x;
    float _662 = _659.y;
    float _665 = cbMtdParam._m0[20u].x + _659.z;
    float _668 = (((cbMtdParam._m0[21u].x + _641.z) - _665) * _569) + _665;
    vec4 _680 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _692 = (_303 * 2.0) * ((((_680.z - _668) + cbMtdParam._m0[23u].y) * _489) + _668);
    vec4 _704 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _713 = (((_704.z - _692) + cbMtdParam._m0[22u].x) * _285) + _692;
    vec4 _732 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _747 = ((_641.x - _661) * _569) + _661;
    float _748 = ((_641.y - _662) * _569) + _662;
    float _753 = ((_680.x - _747) * _489) + _747;
    float _754 = ((_680.y - _748) * _489) + _748;
    float _763 = ((((_704.x - _753) * _285) + _753) * 2.0) + (-1.0);
    float _764 = ((((_704.y - _754) * _285) + _754) * 2.0) + (-1.0);
    float _765 = dot(vec2(_763, _764), vec2(_763, _764));
    float _4049 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _770 = sqrt(1.0 - (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))));
    float _773 = (cbMtdParam._m0[23u].x * ((_299.x * 2.0) + (-1.0))) + _763;
    float _774 = (cbMtdParam._m0[23u].x * ((_299.y * 2.0) + (-1.0))) + _764;
    float _777 = fma(_770, _254, fma(_774, _246 * TANGENT.x, (_232 * _225) * _773));
    float _780 = fma(_770, _255, fma(_774, _246 * TANGENT.y, (_232 * _226) * _773));
    float _783 = fma(_770, _256, fma(_774, _246 * TANGENT.z, (_232 * _227) * _773));
    float _787 = inversesqrt(dot(vec3(_777, _780, _783), vec3(_777, _780, _783)));
    float _788 = _787 * _777;
    float _789 = _787 * _780;
    float _790 = _787 * _783;
    float _4060 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _791 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
    float _4071 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _4082 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _4093 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _4104 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _795 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
    float _811 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _851 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _861 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _851);
    float _862 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _851);
    float _863 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _851);
    float _867 = inversesqrt(dot(vec3(_861, _862, _863), vec3(_861, _862, _863)));
    float _868 = _861 * _867;
    float _869 = _862 * _867;
    float _870 = _863 * _867;
    float _876 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _877 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _879 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _881 = _879.w;
    float _899 = fma(_790, cbSceneParam._m0[5u].z, fma(_789, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _788));
    float _902 = fma(_790, cbSceneParam._m0[6u].z, fma(_789, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _788));
    float _905 = fma(_790, cbSceneParam._m0[7u].z, fma(_789, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _788));
    vec4 _907 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _918 = (((_907.y - _791) + (_907.w * _791)) * cbMtdParam._m0[3u].x) + _791;
    uint _931 = uint(roundEven(NORMAL.w)) * 13u;
    uint _932 = _931 + 9u;
    uint _933 = _932 + uint(cbMatDynParam._m0[0u].w);
    float _939 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0)))) * cbInstanceData._m0[_933].x;
    float _940 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0)))) * cbInstanceData._m0[_933].y;
    float _941 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0)))) * cbInstanceData._m0[_933].z;
    float _4115 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    float _942 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
    float _4126 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    float _943 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
    float _4137 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _944 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
    vec4 _945 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _950 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _961 = (((_950.x - _795) + (_950.w * _795)) * cbMtdParam._m0[3u].x) + _795;
    float _974 = (cbMtdParam._m0[3u].x * (((_942 * _881) - _942) + _945.x)) + _942;
    float _975 = (cbMtdParam._m0[3u].x * (((_943 * _881) - _943) + _945.y)) + _943;
    float _976 = (cbMtdParam._m0[3u].x * (((_944 * _881) - _944) + _945.z)) + _944;
    float _977 = 1.0 - _961;
    float _978 = _977 * _974;
    float _979 = _977 * _975;
    float _980 = _977 * _976;
    float _985 = (_974 + (-0.039999999105930328369140625)) * _961;
    float _986 = (_975 + (-0.039999999105930328369140625)) * _961;
    float _987 = (_976 + (-0.039999999105930328369140625)) * _961;
    float _988 = _985 + 0.039999999105930328369140625;
    float _990 = _986 + 0.039999999105930328369140625;
    float _991 = _987 + 0.039999999105930328369140625;
    vec4 _1000 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _876, cbSceneParam._m0[86u].y * _877));
    float _1003 = _1000.x * TEXCOORD_4.z;
    float _1004 = dot(vec3(_788, _789, _790), vec3(_868, _869, _870));
    float _1007 = _1004 * 2.0;
    float _1011 = (_1007 * _788) - _868;
    float _1012 = (_1007 * _789) - _869;
    float _1013 = (_1007 * _790) - _870;
    float _1017 = abs(dot(vec3(_868, _869, _870), vec3(_788, _789, _790)));
    float _4148 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
    float _1019 = sqrt(_918);
    float _1032 = exp2((_1019 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1019 * 3.0));
    float _1038 = (1.0 - _1032) * ((_1019 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1039 = _1032 * _1019;
    float _1067 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1071 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1075 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1376;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1102 = fma(_1075, cbModelParam._m0[26u].z, fma(_1071, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1067));
        float _1106 = fma(_1075, cbModelParam._m0[27u].z, fma(_1071, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1067));
        float _1110 = fma(_1075, cbModelParam._m0[28u].z, fma(_1071, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1067));
        float _1134 = _1067 + _788;
        float _1135 = _1071 + _789;
        float _1136 = _1075 + _790;
        float _1146 = fma(_1136, cbModelParam._m0[26u].z, fma(_1135, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1134)) - _1102;
        float _1147 = fma(_1136, cbModelParam._m0[27u].z, fma(_1135, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1134)) - _1106;
        float _1148 = fma(_1136, cbModelParam._m0[28u].z, fma(_1135, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1134)) - _1110;
        float _1152 = inversesqrt(dot(vec3(_1146, _1147, _1148), vec3(_1146, _1147, _1148)));
        float _1165 = ((_1152 * _1146) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1102 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1166 = ((_1152 * _1147) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1106 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1167 = ((_1152 * _1148) / cbModelParam._m0[34u].z) + ((((((_1110 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1170 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1165, _1166, _1167), 0.0);
        vec4 _1177 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1165, _1166, _1167), 0.0);
        vec4 _1184 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1165, _1166, _1167), 0.0);
        vec4 _1191 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1165, _1166, _1167), 0.0);
        float _1204 = exp2((_1170.w + (-0.5)) * 20.0) * 2.0;
        float _1205 = _1204 * (_1170.x + (-0.5));
        float _1206 = _1204 * (_1170.y + (-0.5));
        float _1207 = _1204 * (_1170.z + (-0.5));
        float _1214 = exp2((_1177.w + (-0.5)) * 20.0) * 2.0;
        float _1215 = _1214 * (_1177.x + (-0.5));
        float _1216 = _1214 * (_1177.y + (-0.5));
        float _1217 = _1214 * (_1177.z + (-0.5));
        float _1224 = exp2((_1184.w + (-0.5)) * 20.0) * 2.0;
        float _1225 = _1224 * (_1184.x + (-0.5));
        float _1226 = _1224 * (_1184.y + (-0.5));
        float _1227 = _1224 * (_1184.z + (-0.5));
        float _1234 = exp2((_1191.w + (-0.5)) * 20.0) * 2.0;
        float _1235 = _1234 * (_1191.x + (-0.5));
        float _1236 = _1234 * (_1191.y + (-0.5));
        float _1237 = _1234 * (_1191.z + (-0.5));
        float _1238 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1239 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1240 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1241 = _1205 * 0.5;
        float _1242 = _1215 * 0.5;
        float _1243 = _1225 * 0.5;
        float _1244 = dot(vec3(_1241, _1242, _1243), vec3(_1241, _1242, _1243));
        float _1249 = (_1244 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1244);
        float _1258 = (dot(vec3(_788, _789, _790), vec3(_1249 * _1241, _1249 * _1242, _1249 * _1243)) + 1.0) * 0.5;
        float _4174 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1268 = sqrt(((_1242 * _1242) + (_1241 * _1241)) + (_1243 * _1243)) / (_1238 + 9.9999997473787516355514526367188e-06);
        float _4185 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _1270 = _1269 * 2.0;
        float _1274 = (1.0 - _1269) / (_1269 + 1.0);
        float _4196 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1275 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _1284 = ((((1.0 - _1275) * (_1270 + 2.0)) * exp2(log2(isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * (_1270 + 1.0))) + _1275) * _1238;
        float _1285 = _1206 * 0.5;
        float _1286 = _1216 * 0.5;
        float _1287 = _1226 * 0.5;
        float _1288 = dot(vec3(_1285, _1286, _1287), vec3(_1285, _1286, _1287));
        float _1293 = (_1288 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1288);
        float _1301 = (dot(vec3(_788, _789, _790), vec3(_1293 * _1285, _1293 * _1286, _1293 * _1287)) + 1.0) * 0.5;
        float _4207 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1310 = sqrt(((_1286 * _1286) + (_1285 * _1285)) + (_1287 * _1287)) / (_1239 + 9.9999997473787516355514526367188e-06);
        float _4218 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _1312 = _1311 * 2.0;
        float _1316 = (1.0 - _1311) / (_1311 + 1.0);
        float _4229 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1317 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _1326 = ((((1.0 - _1317) * (_1312 + 2.0)) * exp2(log2(isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) * (_1312 + 1.0))) + _1317) * _1239;
        float _1327 = _1207 * 0.5;
        float _1328 = _1217 * 0.5;
        float _1329 = _1227 * 0.5;
        float _1330 = dot(vec3(_1327, _1328, _1329), vec3(_1327, _1328, _1329));
        float _1335 = (_1330 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1330);
        float _1343 = (dot(vec3(_788, _789, _790), vec3(_1335 * _1327, _1335 * _1328, _1335 * _1329)) + 1.0) * 0.5;
        float _4240 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1352 = sqrt(((_1328 * _1328) + (_1327 * _1327)) + (_1329 * _1329)) / (_1240 + 9.9999997473787516355514526367188e-06);
        float _4251 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1353 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _1354 = _1353 * 2.0;
        float _1358 = (1.0 - _1353) / (_1353 + 1.0);
        float _4262 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1359 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _1368 = ((((1.0 - _1359) * (_1354 + 2.0)) * exp2(log2(isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0))) * (_1354 + 1.0))) + _1359) * _1240;
        _1376 = _1207;
        _1378 = _1206;
        _1379 = _1205;
        _1380 = _1217;
        _1381 = _1216;
        _1382 = _1215;
        _1383 = _1227;
        _1384 = _1226;
        _1385 = _1225;
        _1386 = _1240;
        _1387 = _1239;
        _1388 = _1238;
        _1389 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0)));
        _1390 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0)));
        _1391 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0)));
    }
    else
    {
        _1376 = _1377;
        _1378 = _1377;
        _1379 = _1377;
        _1380 = _1377;
        _1381 = _1377;
        _1382 = _1377;
        _1383 = _1377;
        _1384 = _1377;
        _1385 = _1377;
        _1386 = _1377;
        _1387 = _1377;
        _1388 = _1377;
        _1389 = 0.0;
        _1390 = 0.0;
        _1391 = 0.0;
    }
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1417 = fma(_1075, cbModelParam._m0[30u].z, fma(_1071, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1067));
        float _1421 = fma(_1075, cbModelParam._m0[31u].z, fma(_1071, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1067));
        float _1425 = fma(_1075, cbModelParam._m0[32u].z, fma(_1071, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1067));
        float _1448 = _1067 + _788;
        float _1449 = _1071 + _789;
        float _1450 = _1075 + _790;
        float _1460 = fma(_1450, cbModelParam._m0[30u].z, fma(_1449, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1448)) - _1417;
        float _1461 = fma(_1450, cbModelParam._m0[31u].z, fma(_1449, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1448)) - _1421;
        float _1462 = fma(_1450, cbModelParam._m0[32u].z, fma(_1449, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1448)) - _1425;
        float _1466 = inversesqrt(dot(vec3(_1460, _1461, _1462), vec3(_1460, _1461, _1462)));
        float _1479 = ((_1466 * _1460) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1417 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1480 = ((_1466 * _1461) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1421 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1481 = ((_1466 * _1462) / cbModelParam._m0[35u].z) + ((((((_1425 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1483 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1479, _1480, _1481), 0.0);
        vec4 _1490 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1479, _1480, _1481), 0.0);
        vec4 _1497 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1479, _1480, _1481), 0.0);
        vec4 _1504 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1479, _1480, _1481), 0.0);
        float _1516 = exp2((_1483.w + (-0.5)) * 20.0) * 2.0;
        float _1517 = _1516 * (_1483.x + (-0.5));
        float _1518 = _1516 * (_1483.y + (-0.5));
        float _1519 = _1516 * (_1483.z + (-0.5));
        float _1526 = exp2((_1490.w + (-0.5)) * 20.0) * 2.0;
        float _1527 = _1526 * (_1490.x + (-0.5));
        float _1528 = _1526 * (_1490.y + (-0.5));
        float _1529 = _1526 * (_1490.z + (-0.5));
        float _1536 = exp2((_1497.w + (-0.5)) * 20.0) * 2.0;
        float _1537 = _1536 * (_1497.x + (-0.5));
        float _1538 = _1536 * (_1497.y + (-0.5));
        float _1539 = _1536 * (_1497.z + (-0.5));
        float _1546 = exp2((_1504.w + (-0.5)) * 20.0) * 2.0;
        float _1547 = _1546 * (_1504.x + (-0.5));
        float _1548 = _1546 * (_1504.y + (-0.5));
        float _1549 = _1546 * (_1504.z + (-0.5));
        float _1550 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1551 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1552 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1553 = _1517 * 0.5;
        float _1554 = _1527 * 0.5;
        float _1555 = _1537 * 0.5;
        float _1556 = dot(vec3(_1553, _1554, _1555), vec3(_1553, _1554, _1555));
        float _1561 = (_1556 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1556);
        float _1569 = (dot(vec3(_788, _789, _790), vec3(_1561 * _1553, _1561 * _1554, _1561 * _1555)) + 1.0) * 0.5;
        float _4303 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1578 = sqrt(((_1554 * _1554) + (_1553 * _1553)) + (_1555 * _1555)) / (_1550 + 9.9999997473787516355514526367188e-06);
        float _4314 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1579 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
        float _1580 = _1579 * 2.0;
        float _1584 = (1.0 - _1579) / (_1579 + 1.0);
        float _4325 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1585 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _1594 = ((((1.0 - _1585) * (_1580 + 2.0)) * exp2(log2(isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0))) * (_1580 + 1.0))) + _1585) * _1550;
        float _1595 = _1518 * 0.5;
        float _1596 = _1528 * 0.5;
        float _1597 = _1538 * 0.5;
        float _1598 = dot(vec3(_1595, _1596, _1597), vec3(_1595, _1596, _1597));
        float _1603 = (_1598 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1598);
        float _1611 = (dot(vec3(_788, _789, _790), vec3(_1603 * _1595, _1603 * _1596, _1603 * _1597)) + 1.0) * 0.5;
        float _4336 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1620 = sqrt(((_1596 * _1596) + (_1595 * _1595)) + (_1597 * _1597)) / (_1551 + 9.9999997473787516355514526367188e-06);
        float _4347 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1621 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
        float _1622 = _1621 * 2.0;
        float _1626 = (1.0 - _1621) / (_1621 + 1.0);
        float _4358 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1627 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
        float _1636 = ((((1.0 - _1627) * (_1622 + 2.0)) * exp2(log2(isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0))) * (_1622 + 1.0))) + _1627) * _1551;
        float _1637 = _1519 * 0.5;
        float _1638 = _1529 * 0.5;
        float _1639 = _1539 * 0.5;
        float _1640 = dot(vec3(_1637, _1638, _1639), vec3(_1637, _1638, _1639));
        float _1645 = (_1640 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1640);
        float _1653 = (dot(vec3(_788, _789, _790), vec3(_1645 * _1637, _1645 * _1638, _1645 * _1639)) + 1.0) * 0.5;
        float _4369 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1662 = sqrt(((_1638 * _1638) + (_1637 * _1637)) + (_1639 * _1639)) / (_1552 + 9.9999997473787516355514526367188e-06);
        float _4380 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1663 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
        float _1664 = _1663 * 2.0;
        float _1668 = (1.0 - _1663) / (_1663 + 1.0);
        float _4391 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
        float _1669 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
        float _1678 = ((((1.0 - _1669) * (_1664 + 2.0)) * exp2(log2(isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0))) * (_1664 + 1.0))) + _1669) * _1552;
        _1686 = _1519;
        _1687 = _1518;
        _1688 = _1517;
        _1689 = _1529;
        _1690 = _1528;
        _1691 = _1527;
        _1692 = _1539;
        _1693 = _1538;
        _1694 = _1537;
        _1695 = _1552;
        _1696 = _1551;
        _1697 = _1550;
        _1698 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0)));
        _1699 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0)));
        _1700 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0)));
    }
    else
    {
        _1686 = _1377;
        _1687 = _1377;
        _1688 = _1377;
        _1689 = _1377;
        _1690 = _1377;
        _1691 = _1377;
        _1692 = _1377;
        _1693 = _1377;
        _1694 = _1377;
        _1695 = _1377;
        _1696 = _1377;
        _1697 = _1377;
        _1698 = 0.0;
        _1699 = 0.0;
        _1700 = 0.0;
    }
    float _1710 = (cbModelParam._m0[1u].x * (_1698 - _1389)) + _1389;
    float _1711 = (cbModelParam._m0[1u].x * (_1699 - _1390)) + _1390;
    float _1712 = (cbModelParam._m0[1u].x * (_1700 - _1391)) + _1391;
    float _1733 = fma(_1712, cbSceneParam._m0[89u].z, fma(_1711, cbSceneParam._m0[89u].y, _1710 * cbSceneParam._m0[89u].x));
    float _1736 = fma(_1712, cbSceneParam._m0[90u].z, fma(_1711, cbSceneParam._m0[90u].y, _1710 * cbSceneParam._m0[90u].x));
    float _1739 = fma(_1712, cbSceneParam._m0[91u].z, fma(_1711, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1710));
    float _1754 = _1011 * 0.5;
    float _1755 = _1012 * 0.5;
    float _1756 = _1013 * 0.5;
    float _1757 = dot(vec4(_1754, _1755, _1756, 1.0), vec4(_1688, _1691, _1694, _1697));
    float _1760 = dot(vec4(_1754, _1755, _1756, 1.0), vec4(_1687, _1690, _1693, _1696));
    float _1763 = dot(vec4(_1754, _1755, _1756, 1.0), vec4(_1686, _1689, _1692, _1695));
    float _1797;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1770 = dot(vec4(_1754, _1755, _1756, 1.0), vec4(_1376, _1380, _1383, _1386));
        float _1774 = dot(vec4(_1754, _1755, _1756, 1.0), vec4(_1378, _1381, _1384, _1387));
        float _1778 = dot(vec4(_1754, _1755, _1756, 1.0), vec4(_1379, _1382, _1385, _1388));
        float _1785 = dot(vec4(cbModelParam._m0[39u]), vec4(_1754, _1755, _1756, 1.0));
        _1797 = dot(vec3(isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0)), isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0)), isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1785) ? 0.0 : (isnan(0.0) ? _1785 : max(0.0, _1785))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1797 = 1.0;
    }
    float _1808;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1799 = dot(vec4(cbModelParam._m0[40u]), vec4(_1754, _1755, _1756, 1.0));
        _1808 = dot(vec3(isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0)), isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0)), isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1799) ? 0.0 : (isnan(0.0) ? _1799 : max(0.0, _1799))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1808 = 1.0;
    }
    float _1812 = (_1808 * cbModelParam._m0[1u].x) + (_1797 * (1.0 - cbModelParam._m0[1u].x));
    float _1822 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _918);
    float _1823 = isnan(_1822) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1822 : min(cbModelParam._m0[25u].z, _1822));
    float _1903;
    float _1905;
    float _1907;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1870 = fma(_1075, cbModelParam._m0[13u].z, fma(_1071, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1067)) + cbModelParam._m0[13u].w;
        float _1874 = fma(_1075, cbModelParam._m0[14u].z, fma(_1071, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1067)) + cbModelParam._m0[14u].w;
        float _1878 = fma(_1075, cbModelParam._m0[15u].z, fma(_1071, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1067)) + cbModelParam._m0[15u].w;
        float _1881 = fma(_1013, cbModelParam._m0[13u].z, fma(_1012, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1011));
        float _1884 = fma(_1013, cbModelParam._m0[14u].z, fma(_1012, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1011));
        float _1887 = fma(_1013, cbModelParam._m0[15u].z, fma(_1012, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1011));
        float _1915;
        if (_1881 > 0.0)
        {
            _1915 = abs((1.0 - _1870) / _1881);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1881 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1870 + 1.0) / _1881);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1915 = frontier_phi_16_14_ladder;
        }
        float _2086;
        if (_1884 > 0.0)
        {
            _2086 = abs((1.0 - _1874) / _1884);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1884 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1874 + 1.0) / _1884);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2086 = frontier_phi_25_21_ladder;
        }
        float _2380;
        if (_1887 > 0.0)
        {
            _2380 = abs((1.0 - _1878) / _1887);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1887 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1878 + 1.0) / _1887);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2380 = frontier_phi_37_32_ladder;
        }
        float _2382 = isnan(_2086) ? _1915 : (isnan(_1915) ? _2086 : min(_1915, _2086));
        float _2383 = isnan(_2380) ? _2382 : (isnan(_2382) ? _2380 : min(_2382, _2380));
        float _2387 = (_2383 * _1881) + _1870;
        float _2388 = (_2383 * _1884) + _1874;
        float _2389 = (_2383 * _1887) + _1878;
        float _2390 = _2383 * 9.9999997473787516355514526367188e-05;
        float _2392 = (-1.0) - _2390;
        float _2394 = _2390 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2389 > _2394) || ((_2389 < _2392) || ((_2388 > _2394) || ((_2388 < _2392) || ((_2387 < _2392) || (_2387 > _2394))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2534 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2389, cbModelParam._m0[9u].z, fma(_2388, cbModelParam._m0[9u].y, _2387 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2389, cbModelParam._m0[10u].z, fma(_2388, cbModelParam._m0[10u].y, _2387 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2389, cbModelParam._m0[11u].z, fma(_2388, cbModelParam._m0[11u].y, _2387 * cbModelParam._m0[11u].x))), _1823);
            frontier_phi_15_37_ladder = _2534.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2534.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2534.z * cbModelParam._m0[1u].y;
        }
        _1903 = frontier_phi_15_37_ladder_1;
        _1905 = frontier_phi_15_37_ladder;
        _1907 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1891 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1011, _1012, _1013), _1823);
        _1903 = _1891.x * cbModelParam._m0[1u].y;
        _1905 = _1891.y * cbModelParam._m0[1u].y;
        _1907 = _1891.z * cbModelParam._m0[1u].y;
    }
    float _1911 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _918);
    float _1912 = isnan(_1911) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1911 : min(cbModelParam._m0[25u].w, _1911));
    float _2001;
    float _2003;
    float _2005;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1965 = fma(_1075, cbModelParam._m0[21u].z, fma(_1071, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1067)) + cbModelParam._m0[21u].w;
        float _1969 = fma(_1075, cbModelParam._m0[22u].z, fma(_1071, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1067)) + cbModelParam._m0[22u].w;
        float _1973 = fma(_1075, cbModelParam._m0[23u].z, fma(_1071, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1067)) + cbModelParam._m0[23u].w;
        float _1976 = fma(_1013, cbModelParam._m0[21u].z, fma(_1012, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1011));
        float _1979 = fma(_1013, cbModelParam._m0[22u].z, fma(_1012, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1011));
        float _1982 = fma(_1013, cbModelParam._m0[23u].z, fma(_1012, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1011));
        float _2091;
        if (_1976 > 0.0)
        {
            _2091 = abs((1.0 - _1965) / _1976);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1976 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1965 + 1.0) / _1976);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2091 = frontier_phi_27_23_ladder;
        }
        float _2407;
        if (_1979 > 0.0)
        {
            _2407 = abs((1.0 - _1969) / _1979);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1979 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1969 + 1.0) / _1979);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2407 = frontier_phi_39_34_ladder;
        }
        float _2745;
        if (_1982 > 0.0)
        {
            _2745 = abs((1.0 - _1973) / _1982);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1982 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1973 + 1.0) / _1982);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2745 = frontier_phi_49_46_ladder;
        }
        float _2747 = isnan(_2407) ? _2091 : (isnan(_2091) ? _2407 : min(_2091, _2407));
        float _2748 = isnan(_2745) ? _2747 : (isnan(_2747) ? _2745 : min(_2747, _2745));
        float _2752 = (_2748 * _1976) + _1965;
        float _2753 = (_2748 * _1979) + _1969;
        float _2754 = (_2748 * _1982) + _1973;
        float _2755 = _2748 * 9.9999997473787516355514526367188e-05;
        float _2756 = (-1.0) - _2755;
        float _2758 = _2755 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2754 > _2758) || ((_2754 < _2756) || ((_2753 > _2758) || ((_2753 < _2756) || ((_2752 < _2756) || (_2752 > _2758))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2876 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2754, cbModelParam._m0[17u].z, fma(_2753, cbModelParam._m0[17u].y, _2752 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2754, cbModelParam._m0[18u].z, fma(_2753, cbModelParam._m0[18u].y, _2752 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2754, cbModelParam._m0[19u].z, fma(_2753, cbModelParam._m0[19u].y, _2752 * cbModelParam._m0[19u].x))), _1912);
            frontier_phi_24_49_ladder = _2876.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2876.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2876.x * cbModelParam._m0[1u].z;
        }
        _2001 = frontier_phi_24_49_ladder_2;
        _2003 = frontier_phi_24_49_ladder_1;
        _2005 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1985 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1011, _1012, _1013), _1912);
        _2001 = _1985.x * cbModelParam._m0[1u].z;
        _2003 = _1985.y * cbModelParam._m0[1u].z;
        _2005 = _1985.z * cbModelParam._m0[1u].z;
    }
    float _2018 = (((_1038 * _988) + _1039) * _1003) * ((cbModelParam._m0[1u].w * (_2001 - _1903)) + _1903);
    float _2020 = (((_1038 * _990) + _1039) * _1003) * ((cbModelParam._m0[1u].w * (_2003 - _1905)) + _1905);
    float _2022 = (((_1038 * _991) + _1039) * _1003) * ((cbModelParam._m0[1u].w * (_2005 - _1907)) + _1907);
    float _2025 = fma(_2022, cbSceneParam._m0[89u].z, fma(_2020, cbSceneParam._m0[89u].y, _2018 * cbSceneParam._m0[89u].x));
    float _2028 = fma(_2022, cbSceneParam._m0[90u].z, fma(_2020, cbSceneParam._m0[90u].y, _2018 * cbSceneParam._m0[90u].x));
    float _2031 = fma(_2022, cbSceneParam._m0[91u].z, fma(_2020, cbSceneParam._m0[91u].y, _2018 * cbSceneParam._m0[91u].x));
    float _2065 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2069 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2073 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2077 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2078 = _2065 / _2077;
    float _2079 = _2069 / _2077;
    float _2080 = _2073 / _2077;
    float _2226;
    float _2227;
    float _2228;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2107 = ((uint(_2080 > cbSceneParam._m0[59u].y) + uint(_2080 > cbSceneParam._m0[59u].x)) + uint(_2080 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2108 = _2107 + 43u;
        uint _2116 = _2107 + 44u;
        uint _2124 = _2107 + 45u;
        uint _2132 = _2107 + 46u;
        float _2143 = fma(_2077, cbSceneParam._m0[_2108].w, fma(_2073, cbSceneParam._m0[_2108].z, fma(_2069, cbSceneParam._m0[_2108].y, _2065 * cbSceneParam._m0[_2108].x)));
        float _2147 = fma(_2077, cbSceneParam._m0[_2116].w, fma(_2073, cbSceneParam._m0[_2116].z, fma(_2069, cbSceneParam._m0[_2116].y, _2065 * cbSceneParam._m0[_2116].x)));
        float _2155 = fma(_2077, cbSceneParam._m0[_2132].w, fma(_2073, cbSceneParam._m0[_2132].z, fma(_2069, cbSceneParam._m0[_2132].y, _2065 * cbSceneParam._m0[_2132].x)));
        float _2160 = cbSceneParam._m0[33u].z * _2155;
        float _2162 = cbSceneParam._m0[33u].w * _2155;
        float _2165 = fma(_2077, cbSceneParam._m0[_2124].w, fma(_2073, cbSceneParam._m0[_2124].z, fma(_2069, cbSceneParam._m0[_2124].y, _2065 * cbSceneParam._m0[_2124].x))) / _2155;
        float _2212 = (cbSceneParam._m0[33u].x - sqrt(((_2079 * _2079) + (_2078 * _2078)) + (_2080 * _2080))) * cbSceneParam._m0[33u].y;
        float _4517 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
        float _2219 = (isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2160 + _2143) / _2155, (_2162 + _2147) / _2155), _2165), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2162 + _2143) / _2155, (_2147 - _2160) / _2155), _2165), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2143 - _2160) / _2155, (_2147 - _2162) / _2155), _2165), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2143 - _2162) / _2155, (_2160 + _2147) / _2155), _2165), 0.0)).x), vec4(0.25)));
        _2226 = 1.0 - (_2219 * cbSceneParam._m0[34u].x);
        _2227 = 1.0 - (_2219 * cbSceneParam._m0[34u].y);
        _2228 = 1.0 - (_2219 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2226 = 1.0;
        _2227 = 1.0;
        _2228 = 1.0;
    }
    float _2292;
    float _2294;
    float _2296;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2280 = fma(_2077, cbSceneParam._m0[63u].w, fma(_2073, cbSceneParam._m0[63u].z, fma(_2069, cbSceneParam._m0[63u].y, _2065 * cbSceneParam._m0[63u].x)));
        float _2281 = fma(_2077, cbSceneParam._m0[60u].w, fma(_2073, cbSceneParam._m0[60u].z, fma(_2069, cbSceneParam._m0[60u].y, _2065 * cbSceneParam._m0[60u].x))) / _2280;
        float _2282 = fma(_2077, cbSceneParam._m0[61u].w, fma(_2073, cbSceneParam._m0[61u].z, fma(_2069, cbSceneParam._m0[61u].y, _2065 * cbSceneParam._m0[61u].x))) / _2280;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_2281 >= cbSceneParam._m0[64u].x) && (_2282 >= cbSceneParam._m0[64u].y)) && (_2281 <= cbSceneParam._m0[64u].z)) && (_2282 <= cbSceneParam._m0[64u].w))
        {
            float _2420 = fma(_2077, cbSceneParam._m0[62u].w, fma(_2073, cbSceneParam._m0[62u].z, fma(_2069, cbSceneParam._m0[62u].y, _2065 * cbSceneParam._m0[62u].x))) / _2280;
            float _2424 = isnan(cbSceneParam._m0[41u].w) ? _2420 : (isnan(_2420) ? cbSceneParam._m0[41u].w : max(_2420, cbSceneParam._m0[41u].w));
            float _2467 = (cbSceneParam._m0[33u].x - sqrt(((_2079 * _2079) + (_2078 * _2078)) + (_2080 * _2080))) * cbSceneParam._m0[33u].y;
            float _4533 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
            float _2474 = (isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2281, cbSceneParam._m0[33u].w + _2282), _2424), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2281, _2282 - cbSceneParam._m0[33u].z), _2424), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2281 - cbSceneParam._m0[33u].z, _2282 - cbSceneParam._m0[33u].w), _2424), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2281 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2282), _2424), 0.0)).x), vec4(0.25)));
            float _2478 = 1.0 - (_2474 * cbSceneParam._m0[34u].x);
            float _2479 = 1.0 - (_2474 * cbSceneParam._m0[34u].y);
            float _2480 = 1.0 - (_2474 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2479) ? _2227 : (isnan(_2227) ? _2479 : min(_2227, _2479));
            frontier_phi_36_35_ladder_1 = isnan(_2480) ? _2228 : (isnan(_2228) ? _2480 : min(_2228, _2480));
            frontier_phi_36_35_ladder_2 = isnan(_2478) ? _2226 : (isnan(_2226) ? _2478 : min(_2226, _2478));
        }
        else
        {
            frontier_phi_36_35_ladder = _2227;
            frontier_phi_36_35_ladder_1 = _2228;
            frontier_phi_36_35_ladder_2 = _2226;
        }
        _2292 = frontier_phi_36_35_ladder_2;
        _2294 = frontier_phi_36_35_ladder;
        _2296 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _2292 = _2226;
        _2294 = _2227;
        _2296 = _2228;
    }
    uvec4 _2301 = floatBitsToUint(cbInstanceData._m0[_931 + 5u]);
    uint _2303 = _2301.x * 14u;
    uint _2304 = _2303 + 13u;
    float _2311 = _1003 + (-1.0);
    float _2316 = (cbLight._m0[_2304].x * _2311) + 1.0;
    float _2317 = (cbLight._m0[_2304].y * _2311) + 1.0;
    float _2318 = (cbLight._m0[_2304].z * _2311) + 1.0;
    float _2319 = (cbLight._m0[_2304].w * _2311) + 1.0;
    uint _2320 = _2303 + 5u;
    float _2326 = isnan(1.0) ? _2317 : (isnan(_2317) ? 1.0 : min(_2317, 1.0));
    uint _2330 = _2303 + 4u;
    float _2339 = isnan(1.0) ? _2316 : (isnan(_2316) ? 1.0 : min(_2316, 1.0));
    uint _2343 = _2303 | 1u;
    float _2354 = dot(vec3(cbLight._m0[_2303].xyz), vec3(_788, _789, _790));
    float _2357 = dot(vec3(cbLight._m0[_2343].xyz), vec3(_788, _789, _790));
    float _4569 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
    float _4580 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
    float _2362 = (isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0))) * 0.3183098733425140380859375;
    float _2364 = (isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0))) * 0.3183098733425140380859375;
    float _2371 = ((cbLight._m0[_2320].x * _2326) * _2364) + (((cbLight._m0[_2330].x * _2292) * _2339) * _2362);
    float _2372 = ((_2326 * cbLight._m0[_2320].y) * _2364) + (((cbLight._m0[_2330].y * _2294) * _2339) * _2362);
    float _2373 = ((_2326 * cbLight._m0[_2320].z) * _2364) + (((cbLight._m0[_2330].z * _2296) * _2339) * _2362);
    uvec4 _2377 = floatBitsToUint(cbLight._m0[_2303 + 12u]);
    bool _2379 = _2377.x == 0u;
    float _2481;
    float _2483;
    float _2485;
    if (_2379)
    {
        _2481 = _2371;
        _2483 = _2372;
        _2485 = _2373;
    }
    else
    {
        uint _2489 = _2303 + 6u;
        float _2505 = (dot(vec3(cbLight._m0[_2303 + 2u].xyz), vec3(_788, _789, _790)) * 0.5) + 0.5;
        float _2506 = _2505 * _2505;
        float _4591 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
        float _2507 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
        float _2508 = isnan(1.0) ? _2318 : (isnan(_2318) ? 1.0 : min(_2318, 1.0));
        _2481 = (((cbLight._m0[_2489].x * 0.3183098733425140380859375) * _2507) * _2508) + _2371;
        _2483 = (((cbLight._m0[_2489].y * 0.3183098733425140380859375) * _2507) * _2508) + _2372;
        _2485 = (((cbLight._m0[_2489].z * 0.3183098733425140380859375) * _2507) * _2508) + _2373;
    }
    bool _2488 = _2377.y == 0u;
    float _2543;
    float _2545;
    float _2547;
    if (_2488)
    {
        _2543 = _2481;
        _2545 = _2483;
        _2547 = _2485;
    }
    else
    {
        uint _2716 = _2303 + 7u;
        float _2732 = (dot(vec3(cbLight._m0[_2303 + 3u].xyz), vec3(_788, _789, _790)) * 0.5) + 0.5;
        float _2733 = _2732 * _2732;
        float _4607 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
        float _2734 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
        float _2735 = isnan(1.0) ? _2319 : (isnan(_2319) ? 1.0 : min(_2319, 1.0));
        _2543 = (((cbLight._m0[_2716].x * 0.3183098733425140380859375) * _2734) * _2735) + _2481;
        _2545 = (((cbLight._m0[_2716].y * 0.3183098733425140380859375) * _2734) * _2735) + _2483;
        _2547 = (((cbLight._m0[_2716].z * 0.3183098733425140380859375) * _2734) * _2735) + _2485;
    }
    uint _2550 = _2303 + 8u;
    float _2563 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2303].w)) * _918) * 0.949999988079071044921875);
    float _2564 = _2563 * _2563;
    float _2565 = cbLight._m0[_2303].x + _868;
    float _2566 = cbLight._m0[_2303].y + _869;
    float _2567 = cbLight._m0[_2303].z + _870;
    float _2571 = inversesqrt(dot(vec3(_2565, _2566, _2567), vec3(_2565, _2566, _2567)));
    float _2572 = _2571 * _2565;
    float _2573 = _2571 * _2566;
    float _2574 = _2571 * _2567;
    float _2575 = dot(vec3(_788, _789, _790), vec3(cbLight._m0[_2303].xyz));
    float _4623 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
    float _2578 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
    float _4634 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
    float _2579 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
    float _2580 = dot(vec3(_788, _789, _790), vec3(_2572, _2573, _2574));
    float _4645 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
    float _2583 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
    float _2584 = dot(vec3(cbLight._m0[_2303].xyz), vec3(_2572, _2573, _2574));
    float _4656 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
    float _2588 = _2564 * _2564;
    float _2592 = ((_2583 * _2583) * (_2588 + (-1.0))) + 1.0;
    float _2600 = exp2(log2(1.0 - (isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0)))) * 5.0);
    float _2601 = 0.959999978542327880859375 - _985;
    float _2603 = 0.959999978542327880859375 - _986;
    float _2604 = 0.959999978542327880859375 - _987;
    float _2611 = 1.0 - _2564;
    float _2622 = (0.5 / (((_2579 * ((_2578 * _2611) + _2564)) + 9.9999999392252902907785028219223e-09) + (((_2579 * _2611) + _2564) * _2578))) * _2578;
    float _4667 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
    float _2624 = (isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0))) * (_2588 / ((_2592 * _2592) * 3.141590118408203125));
    uint _2638 = _2303 + 9u;
    float _2649 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2343].w)) * _918) * 0.949999988079071044921875);
    float _2650 = _2649 * _2649;
    float _2651 = cbLight._m0[_2343].x + _868;
    float _2652 = cbLight._m0[_2343].y + _869;
    float _2653 = cbLight._m0[_2343].z + _870;
    float _2657 = inversesqrt(dot(vec3(_2651, _2652, _2653), vec3(_2651, _2652, _2653)));
    float _2658 = _2657 * _2651;
    float _2659 = _2657 * _2652;
    float _2660 = _2657 * _2653;
    float _2661 = dot(vec3(_788, _789, _790), vec3(cbLight._m0[_2343].xyz));
    float _4678 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
    float _2664 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
    float _2665 = dot(vec3(_788, _789, _790), vec3(_2658, _2659, _2660));
    float _4689 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
    float _2668 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
    float _2669 = dot(vec3(cbLight._m0[_2343].xyz), vec3(_2658, _2659, _2660));
    float _4700 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
    float _2673 = _2650 * _2650;
    float _2677 = ((_2668 * _2668) * (_2673 + (-1.0))) + 1.0;
    float _2684 = exp2(log2(1.0 - (isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0)))) * 5.0);
    float _2691 = 1.0 - _2650;
    float _2701 = (0.5 / (((_2579 * ((_2664 * _2691) + _2650)) + 9.9999999392252902907785028219223e-09) + (((_2579 * _2691) + _2650) * _2664))) * _2664;
    float _4711 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
    float _2703 = (isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0))) * (_2673 / ((_2677 * _2677) * 3.141590118408203125));
    float _2713 = (((((_2684 * _2601) + _988) * cbLight._m0[_2638].x) * _2703) * _2326) + ((((cbLight._m0[_2550].x * _2292) * ((_2600 * _2601) + _988)) * _2624) * _2339);
    float _2714 = (((((_2684 * _2603) + _990) * cbLight._m0[_2638].y) * _2703) * _2326) + ((((cbLight._m0[_2550].y * _2294) * ((_2600 * _2603) + _990)) * _2624) * _2339);
    float _2715 = (((((_2684 * _2604) + _991) * cbLight._m0[_2638].z) * _2703) * _2326) + ((((cbLight._m0[_2550].z * _2296) * ((_2600 * _2604) + _991)) * _2624) * _2339);
    float _2771;
    float _2773;
    float _2775;
    if (_2379)
    {
        _2771 = _2713;
        _2773 = _2714;
        _2775 = _2715;
    }
    else
    {
        uint _2777 = _2303 + 2u;
        uint _2781 = _2303 + 10u;
        float _2795 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2777].w)) * _918) * 0.949999988079071044921875);
        float _2796 = _2795 * _2795;
        float _2797 = cbLight._m0[_2777].x + _868;
        float _2798 = cbLight._m0[_2777].y + _869;
        float _2799 = cbLight._m0[_2777].z + _870;
        float _2803 = inversesqrt(dot(vec3(_2797, _2798, _2799), vec3(_2797, _2798, _2799)));
        float _2804 = _2803 * _2797;
        float _2805 = _2803 * _2798;
        float _2806 = _2803 * _2799;
        float _2807 = dot(vec3(_788, _789, _790), vec3(cbLight._m0[_2777].xyz));
        float _4722 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
        float _2810 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
        float _2811 = dot(vec3(_788, _789, _790), vec3(_2804, _2805, _2806));
        float _4733 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
        float _2814 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
        float _2815 = dot(vec3(cbLight._m0[_2777].xyz), vec3(_2804, _2805, _2806));
        float _4744 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0));
        float _2819 = _2796 * _2796;
        float _2823 = ((_2814 * _2814) * (_2819 + (-1.0))) + 1.0;
        float _2830 = exp2(log2(1.0 - (isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0)))) * 5.0);
        float _2837 = 1.0 - _2796;
        float _2847 = (0.5 / (((_2579 * ((_2810 * _2837) + _2796)) + 9.9999999392252902907785028219223e-09) + (((_2579 * _2837) + _2796) * _2810))) * _2810;
        float _4755 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0));
        float _2849 = (isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0))) * (_2819 / ((_2823 * _2823) * 3.141590118408203125));
        float _2850 = isnan(1.0) ? _2318 : (isnan(_2318) ? 1.0 : min(_2318, 1.0));
        _2771 = (((((_2830 * _2601) + _988) * cbLight._m0[_2781].x) * _2849) * _2850) + _2713;
        _2773 = (((((_2830 * _2603) + _990) * cbLight._m0[_2781].y) * _2849) * _2850) + _2714;
        _2775 = (((((_2830 * _2604) + _991) * cbLight._m0[_2781].z) * _2849) * _2850) + _2715;
    }
    float _2881;
    float _2883;
    float _2885;
    if (_2488)
    {
        _2881 = _2771;
        _2883 = _2773;
        _2885 = _2775;
    }
    else
    {
        uint _2892 = _2303 + 3u;
        uint _2896 = _2303 + 11u;
        float _2910 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2892].w)) * _918) * 0.949999988079071044921875);
        float _2911 = _2910 * _2910;
        float _2912 = cbLight._m0[_2892].x + _868;
        float _2913 = cbLight._m0[_2892].y + _869;
        float _2914 = cbLight._m0[_2892].z + _870;
        float _2918 = inversesqrt(dot(vec3(_2912, _2913, _2914), vec3(_2912, _2913, _2914)));
        float _2919 = _2918 * _2912;
        float _2920 = _2918 * _2913;
        float _2921 = _2918 * _2914;
        float _2922 = dot(vec3(_788, _789, _790), vec3(cbLight._m0[_2892].xyz));
        float _4771 = isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0));
        float _2925 = isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0));
        float _2926 = dot(vec3(_788, _789, _790), vec3(_2919, _2920, _2921));
        float _4782 = isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0));
        float _2929 = isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0));
        float _2930 = dot(vec3(cbLight._m0[_2892].xyz), vec3(_2919, _2920, _2921));
        float _4793 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0));
        float _2934 = _2911 * _2911;
        float _2938 = ((_2929 * _2929) * (_2934 + (-1.0))) + 1.0;
        float _2945 = exp2(log2(1.0 - (isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0)))) * 5.0);
        float _2952 = 1.0 - _2911;
        float _2962 = (0.5 / (((_2579 * ((_2925 * _2952) + _2911)) + 9.9999999392252902907785028219223e-09) + (((_2579 * _2952) + _2911) * _2925))) * _2925;
        float _4804 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0));
        float _2964 = (isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0))) * (_2934 / ((_2938 * _2938) * 3.141590118408203125));
        float _2965 = isnan(1.0) ? _2319 : (isnan(_2319) ? 1.0 : min(_2319, 1.0));
        _2881 = (((((_2945 * _2601) + _988) * cbLight._m0[_2896].x) * _2964) * _2965) + _2771;
        _2883 = (((((_2945 * _2603) + _990) * cbLight._m0[_2896].y) * _2964) * _2965) + _2773;
        _2885 = (((((_2945 * _2604) + _991) * cbLight._m0[_2896].z) * _2964) * _2965) + _2775;
    }
    float _3030;
    float _3032;
    float _3034;
    float _3036;
    float _3038;
    float _3040;
    if (_2301.y == 0u)
    {
        uvec4 _2986 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2987 = _2986.x;
        uint _2998 = uint((float(_2986.y) * floor(float(uint(cbSceneParam._m0[85u].y * _877) / _2987))) + floor(float(uint(cbSceneParam._m0[85u].x * _876) / _2987)));
        float _3008 = (log2(_2080 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3009 = isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0));
        uint _3012 = uint(isnan(14.0) ? _3009 : (isnan(_3009) ? 14.0 : min(_3009, 14.0)));
        uvec4 _3017 = texelFetch(g_lightClusterGridBuffer, int(((_3012 << 2u) + (_2998 << 6u)) >> 2u));
        uint _3018 = _3017.x;
        uint _3019 = _2986.z;
        float _3132;
        float _3134;
        float _3136;
        float _3138;
        float _3140;
        float _3142;
        if (((((1u << ((_3019 >> 4u) & 15u)) + 4294967295u) & _3018) == 0u) || ((_3019 & 240u) == 0u))
        {
            _3132 = 0.0;
            _3134 = 0.0;
            _3136 = 0.0;
            _3138 = 0.0;
            _3140 = 0.0;
            _3142 = 0.0;
        }
        else
        {
            float _3133;
            float _3135;
            float _3137;
            float _3139;
            float _3141;
            float _3143;
            float _3285 = 0.0;
            float _3286 = 0.0;
            float _3287 = 0.0;
            float _3288 = 0.0;
            float _3289 = 0.0;
            float _3290 = 0.0;
            uint _3291 = 0u;
            uint _3300;
            bool _3301;
            for (;;)
            {
                _3300 = texelFetch(g_lightClassification, int((((_3012 << 5u) + (_2998 << 9u)) + (_3291 << 2u)) >> 2u)).x;
                _3301 = _3300 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3301)
                {
                    frontier_phi_68_pred = _3290;
                    frontier_phi_68_pred_1 = _3289;
                    frontier_phi_68_pred_2 = _3288;
                    frontier_phi_68_pred_3 = _3286;
                    frontier_phi_68_pred_4 = _3285;
                    frontier_phi_68_pred_5 = _3287;
                }
                else
                {
                    float _3409;
                    float _3410;
                    float _3411;
                    float _3412;
                    float _3413;
                    float _3414;
                    uint _3415;
                    _3409 = _3285;
                    _3410 = _3286;
                    _3411 = _3287;
                    _3412 = _3288;
                    _3413 = _3289;
                    _3414 = _3290;
                    _3415 = _3300;
                    float _3341;
                    float _3342;
                    float _3343;
                    float _3344;
                    float _3345;
                    float _3346;
                    for (;;)
                    {
                        uint _3419 = uint(findLSB(_3415)) + (_3291 << 5u);
                        uint _3416 = (_3415 + 4294967295u) & _3415;
                        uint _3421 = _3419 * 48u;
                        vec4 _3435 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3421)).x, texelFetch(g_PointLightRenderingBuffer, int(_3421 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3421 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3421 + 3u)).x));
                        uint _3441 = (_3419 * 48u) + 4u;
                        vec4 _3454 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3441)).x, texelFetch(g_PointLightRenderingBuffer, int(_3441 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3441 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3441 + 3u)).x));
                        uint _3460 = (_3419 * 48u) + 8u;
                        vec3 _3471 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3460)).x, texelFetch(g_PointLightRenderingBuffer, int(_3460 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3460 + 2u)).x));
                        float _3475 = _3435.x - _2078;
                        float _3476 = _3435.y - _2079;
                        float _3477 = _3435.z - _2080;
                        float _3478 = dot(vec3(_3475, _3476, _3477), vec3(_3475, _3476, _3477));
                        float _3481 = inversesqrt(_3478);
                        float _3482 = _3481 * _3475;
                        float _3483 = _3481 * _3476;
                        float _3484 = _3481 * _3477;
                        float _3485 = dot(vec3(_899, _902, _905), vec3(_3482, _3483, _3484));
                        float _3490 = 1.0 - (_3478 * _3435.w);
                        float _4830 = isnan(0.0) ? _3490 : (isnan(_3490) ? 0.0 : max(_3490, 0.0));
                        float _3491 = isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0));
                        float _3492 = sqrt(_3478) * _3454.w;
                        float _3495 = 1.39999997615814208984375 / (_3492 + 1.39999997615814208984375);
                        float _3496 = _3495 * _3495;
                        float _3499 = ((1.0 - _3496) * _3485) + _3496;
                        float _3502 = _3492 * _3492;
                        float _3506 = ((isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : max(_3499, 0.0))) * _3491) / ((_3502 * 0.699999988079071044921875) + 1.0);
                        float _3510 = (-0.0) - _2078;
                        float _3511 = (-0.0) - _2079;
                        float _3512 = (-0.0) - _2080;
                        float _3516 = inversesqrt(dot(vec3(_3510, _3511, _3512), vec3(_3510, _3511, _3512)));
                        float _3517 = _3516 * _3510;
                        float _3518 = _3516 * _3511;
                        float _3519 = _3516 * _3512;
                        float _3526 = exp2(log2(1.0 / ((_3502 * 3.5) + 5.0)) * 0.25);
                        float _3527 = 1.0 - _1019;
                        float _3534 = sqrt(1.0 - ((1.0 - (_3527 * _3527)) * (1.0 - (_3526 * _3526))));
                        float _3535 = _3534 * _3534;
                        float _3536 = _3535 * _3535;
                        float _3537 = _3517 + _3482;
                        float _3538 = _3518 + _3483;
                        float _3539 = _3519 + _3484;
                        float _3543 = inversesqrt(dot(vec3(_3537, _3538, _3539), vec3(_3537, _3538, _3539)));
                        float _3547 = dot(vec3(_899, _902, _905), vec3(_3517, _3518, _3519));
                        float _4846 = isnan(0.0) ? _3547 : (isnan(_3547) ? 0.0 : max(_3547, 0.0));
                        float _3550 = isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0));
                        float _3551 = dot(vec3(_899, _902, _905), vec3(_3543 * _3537, _3543 * _3538, _3543 * _3539));
                        float _4857 = isnan(0.0) ? _3551 : (isnan(_3551) ? 0.0 : max(_3551, 0.0));
                        float _3554 = isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0));
                        float _3558 = ((_3554 * _3554) * (_3536 + (-1.0))) + 1.0;
                        float _3559 = _3495 * _3535;
                        float _3560 = _3559 * _3559;
                        float _3563 = ((1.0 - _3560) * _3485) + _3560;
                        float _4868 = isnan(0.0) ? _3563 : (isnan(_3563) ? 0.0 : max(_3563, 0.0));
                        float _3564 = isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0));
                        float _3565 = 1.0 - _3535;
                        float _3575 = (0.5 / (((_3564 * ((_3550 * _3565) + _3535)) + 9.9999999392252902907785028219223e-09) + (((_3564 * _3565) + _3535) * _3550))) * _3564;
                        float _4879 = isnan(0.0) ? _3575 : (isnan(_3575) ? 0.0 : max(_3575, 0.0));
                        float _3586 = (((_3536 * 3.1415927410125732421875) * (isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0)))) / ((_3558 * _3558) * ((_3502 * 2.1991131305694580078125) + 3.141590118408203125))) * _3491;
                        _3344 = (_3506 * _3454.x) + _3412;
                        _3345 = (_3506 * _3454.y) + _3413;
                        _3346 = (_3506 * _3454.z) + _3414;
                        _3341 = (_3586 * _3471.x) + _3409;
                        _3342 = (_3586 * _3471.y) + _3410;
                        _3343 = (_3586 * _3471.z) + _3411;
                        if (_3416 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3409 = _3341;
                            _3410 = _3342;
                            _3411 = _3343;
                            _3412 = _3344;
                            _3413 = _3345;
                            _3414 = _3346;
                            _3415 = _3416;
                        }
                    }
                    frontier_phi_68_pred = _3346;
                    frontier_phi_68_pred_1 = _3345;
                    frontier_phi_68_pred_2 = _3344;
                    frontier_phi_68_pred_3 = _3342;
                    frontier_phi_68_pred_4 = _3341;
                    frontier_phi_68_pred_5 = _3343;
                }
                _3143 = frontier_phi_68_pred;
                _3141 = frontier_phi_68_pred_1;
                _3139 = frontier_phi_68_pred_2;
                _3135 = frontier_phi_68_pred_3;
                _3133 = frontier_phi_68_pred_4;
                _3137 = frontier_phi_68_pred_5;
                uint _3292 = _3291 + 1u;
                if (_3292 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3285 = _3133;
                    _3286 = _3135;
                    _3287 = _3137;
                    _3288 = _3139;
                    _3289 = _3141;
                    _3290 = _3143;
                    _3291 = _3292;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3132 = _3133;
            _3134 = _3135;
            _3136 = _3137;
            _3138 = _3139;
            _3140 = _3141;
            _3142 = _3143;
        }
        uvec4 _3146 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3147 = _3146.z;
        uint _3149 = (_3147 >> 8u) & 15u;
        float _3253;
        float _3255;
        float _3257;
        float _3259;
        float _3261;
        float _3263;
        if (((4294967295u << _3149) & _3018) == 0u)
        {
            _3253 = _3132;
            _3255 = _3134;
            _3257 = _3136;
            _3259 = _3138;
            _3261 = _3140;
            _3263 = _3142;
        }
        else
        {
            float _3278 = inversesqrt(dot(vec3(_2078, _2079, _2080), vec3(_2078, _2079, _2080)));
            float _3279 = _3278 * _2078;
            float _3280 = _3278 * _2079;
            float _3281 = _3278 * _2080;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_3149 < ((_3147 >> 12u) & 15u))
            {
                float _3254;
                float _3256;
                float _3258;
                float _3260;
                float _3262;
                float _3264;
                float _3392 = _3132;
                float _3393 = _3134;
                float _3394 = _3136;
                float _3395 = _3138;
                float _3396 = _3140;
                float _3397 = _3142;
                uint _3398 = _3149;
                uint _3407;
                bool _3408;
                for (;;)
                {
                    _3407 = texelFetch(g_lightClassification, int((((_3012 << 5u) + (_2998 << 9u)) + (_3398 << 2u)) >> 2u)).x;
                    _3408 = _3407 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3408)
                    {
                        frontier_phi_74_pred = _3394;
                        frontier_phi_74_pred_1 = _3393;
                        frontier_phi_74_pred_2 = _3392;
                        frontier_phi_74_pred_3 = _3397;
                        frontier_phi_74_pred_4 = _3396;
                        frontier_phi_74_pred_5 = _3395;
                    }
                    else
                    {
                        float _3591;
                        float _3592;
                        float _3593;
                        float _3594;
                        float _3595;
                        float _3596;
                        float _3884;
                        float _3885;
                        float _3886;
                        float _3887;
                        float _3888;
                        float _3889;
                        float _3604 = _3392;
                        float _3605 = _3393;
                        float _3606 = _3394;
                        float _3607 = _3395;
                        float _3608 = _3396;
                        float _3609 = _3397;
                        uint _3610 = _3407;
                        uint _3611;
                        vec4 _3636;
                        float _3637;
                        vec4 _3652;
                        vec3 _3664;
                        vec4 _3679;
                        vec4 _3694;
                        float _3740;
                        bool _3741;
                        for (;;)
                        {
                            uint _3621 = ((_3398 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3610));
                            _3611 = (_3610 + 4294967295u) & _3610;
                            uint _3623 = _3621 * 40u;
                            _3636 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3623)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 3u)).x));
                            _3637 = _3636.w;
                            uint _3639 = (_3621 * 40u) + 4u;
                            _3652 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3639)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 3u)).x));
                            uint _3654 = (_3621 * 40u) + 8u;
                            _3664 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3654)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 2u)).x));
                            uint _3666 = (_3621 * 40u) + 16u;
                            _3679 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3666)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3666 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3666 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3666 + 3u)).x));
                            uint _3681 = (_3621 * 40u) + 20u;
                            _3694 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3681)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 3u)).x));
                            uint _3696 = (_3621 * 40u) + 24u;
                            vec4 _3709 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3696)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3696 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3696 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3696 + 3u)).x));
                            uint _3715 = (_3621 * 40u) + 28u;
                            vec4 _3728 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3715)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3715 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3715 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3715 + 3u)).x));
                            _3740 = fma(_2080, _3728.z, fma(_2079, _3728.y, _3728.x * _2078)) + _3728.w;
                            _3741 = !((fma(_2080, _3709.z, fma(_2079, _3709.y, _3709.x * _2078)) + _3709.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3741)
                            {
                                float _3768 = _3636.x - _2078;
                                float _3769 = _3636.y - _2079;
                                float _3770 = _3636.z - _2080;
                                float _3771 = dot(vec3(_3768, _3769, _3770), vec3(_3768, _3769, _3770));
                                float _3774 = inversesqrt(_3771);
                                float _3775 = _3774 * _3768;
                                float _3776 = _3774 * _3769;
                                float _3777 = _3774 * _3770;
                                float _3781 = 1.0 - (_3771 / (_3637 * _3637));
                                float _4890 = isnan(0.0) ? _3781 : (isnan(_3781) ? 0.0 : max(_3781, 0.0));
                                float _3782 = isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0));
                                float _3786 = sqrt(_3771) * _3652.w;
                                float _3788 = 1.39999997615814208984375 / (_3786 + 1.39999997615814208984375);
                                float _3789 = _3788 * _3788;
                                float _3792 = ((1.0 - _3789) * dot(vec3(_3775, _3776, _3777), vec3(_899, _902, _905))) + _3789;
                                float _3795 = _3786 * _3786;
                                float _3799 = (fma(_2080, _3679.z, fma(_2079, _3679.y, _3679.x * _2078)) + _3679.w) / _3740;
                                float _3800 = (fma(_2080, _3694.z, fma(_2079, _3694.y, _3694.x * _2078)) + _3694.w) / _3740;
                                float _3804 = 1.0 - dot(vec2(_3799, _3800), vec2(_3799, _3800));
                                float _4906 = isnan(0.0) ? _3804 : (isnan(_3804) ? 0.0 : max(_3804, 0.0));
                                float _3805 = isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0));
                                float _3806 = _3805 * (((isnan(0.0) ? _3792 : (isnan(_3792) ? 0.0 : max(_3792, 0.0))) * _3782) / ((_3795 * 0.699999988079071044921875) + 1.0));
                                float _3818 = exp2(log2(1.0 / ((_3795 * 3.5) + 5.0)) * 0.25);
                                float _3819 = 1.0 - _1019;
                                float _3826 = sqrt(1.0 - ((1.0 - (_3819 * _3819)) * (1.0 - (_3818 * _3818))));
                                float _3827 = _3826 * _3826;
                                float _3828 = _3827 * _3827;
                                float _3829 = _3775 - _3279;
                                float _3830 = _3776 - _3280;
                                float _3831 = _3777 - _3281;
                                float _3835 = inversesqrt(dot(vec3(_3829, _3830, _3831), vec3(_3829, _3830, _3831)));
                                float _3839 = dot(vec3(_899, _902, _905), vec3((-0.0) - _3279, (-0.0) - _3280, (-0.0) - _3281));
                                float _4917 = isnan(0.0) ? _3839 : (isnan(_3839) ? 0.0 : max(_3839, 0.0));
                                float _3842 = isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0));
                                float _3843 = dot(vec3(_899, _902, _905), vec3(_3835 * _3829, _3835 * _3830, _3835 * _3831));
                                float _4928 = isnan(0.0) ? _3843 : (isnan(_3843) ? 0.0 : max(_3843, 0.0));
                                float _3846 = isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0));
                                float _3850 = ((_3846 * _3846) * (_3828 + (-1.0))) + 1.0;
                                float _3851 = _3788 * _3827;
                                float _3852 = _3851 * _3851;
                                float _3858 = ((1.0 - _3852) * dot(vec3(_899, _902, _905), vec3(_3775, _3776, _3777))) + _3852;
                                float _4939 = isnan(0.0) ? _3858 : (isnan(_3858) ? 0.0 : max(_3858, 0.0));
                                float _3859 = isnan(1.0) ? _4939 : (isnan(_4939) ? 1.0 : min(_4939, 1.0));
                                float _3860 = 1.0 - _3827;
                                float _3870 = (0.5 / (((_3859 * ((_3842 * _3860) + _3827)) + 9.9999999392252902907785028219223e-09) + (((_3859 * _3860) + _3827) * _3842))) * _3859;
                                float _4950 = isnan(0.0) ? _3870 : (isnan(_3870) ? 0.0 : max(_3870, 0.0));
                                float _3880 = (_3805 * _3782) * (((_3828 * 3.1415927410125732421875) * (isnan(1.0) ? _4950 : (isnan(_4950) ? 1.0 : min(_4950, 1.0)))) / ((_3850 * _3850) * ((_3795 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3880 * _3664.z;
                                frontier_phi_80_pred_1 = _3880 * _3664.y;
                                frontier_phi_80_pred_2 = _3880 * _3664.x;
                                frontier_phi_80_pred_3 = _3806 * _3652.z;
                                frontier_phi_80_pred_4 = _3806 * _3652.y;
                                frontier_phi_80_pred_5 = _3806 * _3652.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3886 = frontier_phi_80_pred;
                            _3885 = frontier_phi_80_pred_1;
                            _3884 = frontier_phi_80_pred_2;
                            _3889 = frontier_phi_80_pred_3;
                            _3888 = frontier_phi_80_pred_4;
                            _3887 = frontier_phi_80_pred_5;
                            _3594 = _3887 + _3607;
                            _3595 = _3888 + _3608;
                            _3596 = _3889 + _3609;
                            _3591 = _3884 + _3604;
                            _3592 = _3885 + _3605;
                            _3593 = _3886 + _3606;
                            if (_3611 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3604 = _3591;
                                _3605 = _3592;
                                _3606 = _3593;
                                _3607 = _3594;
                                _3608 = _3595;
                                _3609 = _3596;
                                _3610 = _3611;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3593;
                        frontier_phi_74_pred_1 = _3592;
                        frontier_phi_74_pred_2 = _3591;
                        frontier_phi_74_pred_3 = _3596;
                        frontier_phi_74_pred_4 = _3595;
                        frontier_phi_74_pred_5 = _3594;
                    }
                    _3258 = frontier_phi_74_pred;
                    _3256 = frontier_phi_74_pred_1;
                    _3254 = frontier_phi_74_pred_2;
                    _3264 = frontier_phi_74_pred_3;
                    _3262 = frontier_phi_74_pred_4;
                    _3260 = frontier_phi_74_pred_5;
                    uint _3399 = _3398 + 1u;
                    if (_3399 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3392 = _3254;
                        _3393 = _3256;
                        _3394 = _3258;
                        _3395 = _3260;
                        _3396 = _3262;
                        _3397 = _3264;
                        _3398 = _3399;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _3262;
                frontier_phi_62_63_ladder_1 = _3260;
                frontier_phi_62_63_ladder_2 = _3258;
                frontier_phi_62_63_ladder_3 = _3264;
                frontier_phi_62_63_ladder_4 = _3256;
                frontier_phi_62_63_ladder_5 = _3254;
            }
            else
            {
                frontier_phi_62_63_ladder = _3140;
                frontier_phi_62_63_ladder_1 = _3138;
                frontier_phi_62_63_ladder_2 = _3136;
                frontier_phi_62_63_ladder_3 = _3142;
                frontier_phi_62_63_ladder_4 = _3134;
                frontier_phi_62_63_ladder_5 = _3132;
            }
            _3253 = frontier_phi_62_63_ladder_5;
            _3255 = frontier_phi_62_63_ladder_4;
            _3257 = frontier_phi_62_63_ladder_2;
            _3259 = frontier_phi_62_63_ladder_1;
            _3261 = frontier_phi_62_63_ladder;
            _3263 = frontier_phi_62_63_ladder_3;
        }
        float _3268 = isnan(1.0) ? _1003 : (isnan(_1003) ? 1.0 : min(_1003, 1.0));
        _3030 = (_3268 * _3259) + _2543;
        _3032 = (_3268 * _3261) + _2545;
        _3034 = (_3268 * _3263) + _2547;
        _3036 = ((_3253 * _988) * _3268) + _2881;
        _3038 = ((_3255 * _990) * _3268) + _2883;
        _3040 = ((_3257 * _991) * _3268) + _2885;
    }
    else
    {
        _3030 = _2543;
        _3032 = _2545;
        _3034 = _2547;
        _3036 = _2881;
        _3038 = _2883;
        _3040 = _2885;
    }
    uint _3046 = _932 + uint(cbMatDynParam._m0[0u].w);
    float _3054 = ((cbMtdParam._m0[11u].x * cbMtdParam._m0[22u].z) * _732.x) * cbInstanceData._m0[_3046].x;
    float _3057 = ((cbMtdParam._m0[11u].y * cbMtdParam._m0[22u].z) * _732.y) * cbInstanceData._m0[_3046].y;
    float _3060 = ((cbMtdParam._m0[11u].z * cbMtdParam._m0[22u].z) * _732.z) * cbInstanceData._m0[_3046].z;
    float _4966 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    float _4977 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
    float _4988 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _3077 = (((isnan(1.0) ? _4966 : (isnan(_4966) ? 1.0 : min(_4966, 1.0))) * (_3030 + ((isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0))) * _1003))) + ((_3036 + ((isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0))) * _1812)) * cbPerFrame._m0[3u].x)) + _3054;
    float _3079 = (_3057 + ((_3038 + ((isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0))) * _1812)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4977 : (isnan(_4977) ? 1.0 : min(_4977, 1.0))) * (_3032 + ((isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0))) * _1003)));
    float _3081 = (_3060 + ((_3040 + ((isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0))) * _1812)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4988 : (isnan(_4988) ? 1.0 : min(_4988, 1.0))) * (_3034 + ((isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0))) * _1003)));
    float _5014 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3094 = isnan(1.0) ? _5014 : (isnan(_5014) ? 1.0 : min(_5014, 1.0));
    uint _3095 = _931 + 6u;
    float _3103 = _876 / cbSceneParam._m0[86u].x;
    float _3104 = _877 / cbSceneParam._m0[86u].y;
    vec4 _3118 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3103, _3104, (log2((isnan(cbSceneParam._m0[77u].w) ? _811 : (isnan(_811) ? cbSceneParam._m0[77u].w : min(_811, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3120 = _3118.x;
    float _3121 = _3118.y;
    float _3122 = _3118.z;
    float _3123 = _3118.w;
    float _3194;
    float _3196;
    float _3198;
    float _3200;
    if (_811 > cbSceneParam._m0[78u].w)
    {
        float _3157 = isnan(_811) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _811 : min(cbSceneParam._m0[80u].w, _811));
        float _3158 = _3157 / _811;
        float _3169 = _3158 * _861;
        float _3170 = _862 * _3158;
        float _3171 = (-0.0) - _3170;
        float _3172 = _3158 * _863;
        float _3174 = (cbSceneParam._m0[77u].w * _3171) / _3157;
        float _3175 = _3174 + cbSceneParam._m0[79u].w;
        float _3176 = cbSceneParam._m0[79u].w - _3170;
        float _3182 = sqrt(((_3169 * _3169) + (_3170 * _3170)) + (_3172 * _3172));
        float _3185 = (1.0 - (cbSceneParam._m0[77u].w / _3157)) * _3182;
        float _3190 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3192 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3354;
        if (abs((_3171 - _3174) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3354 = ((((_3175 > 0.0) ? exp2(_3190 * _3175) : (2.0 - exp2(_3192 * _3175))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3185;
        }
        else
        {
            float _3314 = 1.0 / cbSceneParam._m0[80u].x;
            float _3315 = isnan(_3176) ? _3175 : (isnan(_3175) ? _3176 : max(_3175, _3176));
            float _3316 = isnan(_3176) ? _3175 : (isnan(_3175) ? _3176 : min(_3175, _3176));
            float _3325 = isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : min(_3315, 0.0));
            float _3326 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : min(_3316, 0.0));
            _3354 = ((abs(_3182 / _3171) * cbSceneParam._m0[80u].y) * ((((_3325 - _3326) * 2.0) - ((exp2(_3190 * (isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : max(_3315, 0.0)))) - exp2(_3190 * (isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0))))) * _3314)) - ((exp2(_3192 * _3325) - exp2(_3192 * _3326)) * _3314))) + (_3185 * cbSceneParam._m0[80u].z);
        }
        vec4 _3356 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3103, _3104, 1.0), 0.0);
        float _3365 = exp2((_3354 * (-1.44269502162933349609375)) * (1.0 - _3356.w));
        float _3366 = log2(_3365);
        float _3382 = log2(_3123);
        _3194 = (exp2(_3382 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3366 * cbSceneParam._m0[78u].x)) * _3356.x) / cbSceneParam._m0[78u].x)) + _3120;
        _3196 = (exp2(_3382 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3366 * cbSceneParam._m0[78u].y)) * _3356.y) / cbSceneParam._m0[78u].y)) + _3121;
        _3198 = (exp2(_3382 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3366 * cbSceneParam._m0[78u].z)) * _3356.z) / cbSceneParam._m0[78u].z)) + _3122;
        _3200 = _3365 * _3123;
    }
    else
    {
        _3194 = _3120;
        _3196 = _3121;
        _3198 = _3122;
        _3200 = _3123;
    }
    float _3212 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3213 = _3212 == 3.0;
    float _3214 = log2(_3200);
    float _3218 = exp2(_3214 * cbSceneParam._m0[78u].x);
    float _3219 = exp2(_3214 * cbSceneParam._m0[78u].y);
    float _3220 = exp2(_3214 * cbSceneParam._m0[78u].z);
    float _3221 = _3218 * (isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : max(_3077, 0.0)));
    float _3222 = _3219 * (isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0)));
    float _3223 = _3220 * (isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0)));
    float _3232 = (_3212 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3232 * (_3213 ? _3221 : (_3221 + (cbSceneParam._m0[72u].w * _3194)));
    SV_Target.y = _3232 * (_3213 ? _3222 : (_3222 + (cbSceneParam._m0[72u].w * _3196)));
    SV_Target.z = _3232 * (_3213 ? _3223 : (_3223 + (cbSceneParam._m0[72u].w * _3198)));
    SV_Target.w = cbInstanceData._m0[_3095].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _3054) * _3094) * _3218) * _3232;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _3057) * _3094) * _3219) * _3232;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _3060) * _3094) * _3220) * _3232;
    SV_Target_1.w = cbInstanceData._m0[_3095].w;
}


