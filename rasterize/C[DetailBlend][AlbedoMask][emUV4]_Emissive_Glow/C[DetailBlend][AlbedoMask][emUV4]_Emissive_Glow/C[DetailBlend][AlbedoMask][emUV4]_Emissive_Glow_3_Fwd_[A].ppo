#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 11) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 12) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1312;
float _3739;
float _3740;
float _3741;
float _3742;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _228 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = _235 * NORMAL.x;
    float _237 = _235 * NORMAL.y;
    float _238 = _235 * NORMAL.z;
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _250;
    float _251;
    float _252;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _250 = (-0.0) - _236;
        _251 = (-0.0) - _237;
        _252 = (-0.0) - _238;
    }
    else
    {
        _250 = _236;
        _251 = _237;
        _252 = _238;
    }
    vec4 _270 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _284 = exp2(log2(_270.w * cbMtdParam._m0[23u].z) * cbMtdParam._m0[21u].y);
    float _285 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _286 = isnan(1.0) ? _285 : (isnan(_285) ? 1.0 : min(_285, 1.0));
    vec4 _300 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _304 = _300.z;
    float _305 = _300.w;
    float _313 = exp2(log2(_304 * cbMtdParam._m0[21u].w) * cbMtdParam._m0[20u].y);
    float _314 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _315 = isnan(1.0) ? _314 : (isnan(_314) ? 1.0 : min(_314, 1.0));
    vec4 _328 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    vec4 _353 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _363 = cbMtdParam._m0[9u].x * _353.x;
    float _364 = cbMtdParam._m0[9u].y * _353.y;
    float _365 = cbMtdParam._m0[9u].z * _353.z;
    float _372 = (((cbMtdParam._m0[10u].x * _328.x) - _363) * _315) + _363;
    float _373 = (((cbMtdParam._m0[10u].y * _328.y) - _364) * _315) + _364;
    float _374 = (((cbMtdParam._m0[10u].z * _328.z) - _365) * _315) + _365;
    float _381 = exp2(log2(_305) * cbMtdParam._m0[22u].y);
    vec4 _394 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _414 = (((cbMtdParam._m0[12u].x * _394.x) - _372) * _381) + _372;
    float _415 = (((cbMtdParam._m0[12u].y * _394.y) - _373) * _381) + _373;
    float _416 = (((cbMtdParam._m0[12u].z * _394.z) - _374) * _381) + _374;
    vec4 _428 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _452 = (_270.x * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].x * _428.x) - _414) * _286) + _414);
    float _454 = (_270.y * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].y * _428.y) - _415) * _286) + _415);
    float _456 = (_270.z * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].z * _428.z) - _416) * _286) + _416);
    float _461 = exp2(log2(1.0 - _305) * 0.00999999977648258209228515625);
    float _479 = ((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_11, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x - cbMtdParam._m0[22u].w) * _461) + cbMtdParam._m0[22u].w;
    float _498 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w)).x - _479) + cbMtdParam._m0[21u].z) * _381) + _479;
    float _518 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w)).x - _498) + cbMtdParam._m0[23u].w) * _286) + _498;
    vec4 _531 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _549 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _551 = _549.x;
    float _552 = _549.y;
    float _555 = cbMtdParam._m0[20u].x + _549.z;
    float _558 = (((cbMtdParam._m0[21u].x + _531.z) - _555) * _461) + _555;
    vec4 _571 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _583 = (_304 * 2.0) * ((((_571.z - _558) + cbMtdParam._m0[23u].y) * _381) + _558);
    vec4 _596 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _605 = (((_596.z - _583) + cbMtdParam._m0[22u].x) * _286) + _583;
    vec4 _624 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _639 = ((_531.x - _551) * _461) + _551;
    float _640 = ((_531.y - _552) * _461) + _552;
    float _645 = ((_571.x - _639) * _381) + _639;
    float _646 = ((_571.y - _640) * _381) + _640;
    float _655 = ((((_596.x - _645) * _286) + _645) * 2.0) + (-1.0);
    float _656 = ((((_596.y - _646) * _286) + _646) * 2.0) + (-1.0);
    float _657 = dot(vec2(_655, _656), vec2(_655, _656));
    float _3771 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _662 = sqrt(1.0 - (isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))));
    float _665 = (cbMtdParam._m0[23u].x * ((_300.x * 2.0) + (-1.0))) + _655;
    float _666 = (cbMtdParam._m0[23u].x * ((_300.y * 2.0) + (-1.0))) + _656;
    float _669 = fma(_662, _250, fma(_666, _242 * TANGENT.x, (_228 * _221) * _665));
    float _672 = fma(_662, _251, fma(_666, _242 * TANGENT.y, (_228 * _222) * _665));
    float _675 = fma(_662, _252, fma(_666, _242 * TANGENT.z, (_228 * _223) * _665));
    float _679 = inversesqrt(dot(vec3(_669, _672, _675), vec3(_669, _672, _675)));
    float _680 = _679 * _669;
    float _681 = _679 * _672;
    float _682 = _679 * _675;
    float _3782 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _683 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
    float _3793 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _3804 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _3815 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _3826 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _687 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
    float _703 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _743 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _753 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _743);
    float _754 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _743);
    float _755 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _743);
    float _759 = inversesqrt(dot(vec3(_753, _754, _755), vec3(_753, _754, _755)));
    float _760 = _753 * _759;
    float _761 = _754 * _759;
    float _762 = _755 * _759;
    vec4 _767 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _769 = _767.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _992 = sqrt(((_753 * _753) + (_754 * _754)) + (_755 * _755));
        float _998 = (cbMatDynParam._m0[5u].x * _992) + cbMatDynParam._m0[5u].y;
        float _3837 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _999 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
        float _1003 = (cbMatDynParam._m0[5u].z * _992) + cbMatDynParam._m0[5u].w;
        float _3848 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0))) - _999)) + _999) < ((_769 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _781 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _782 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _784 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _786 = _784.w;
    float _805 = fma(_682, cbSceneParam._m0[5u].z, fma(_681, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _680));
    float _808 = fma(_682, cbSceneParam._m0[6u].z, fma(_681, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _680));
    float _811 = fma(_682, cbSceneParam._m0[7u].z, fma(_681, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _680));
    vec4 _813 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _824 = (((_813.y - _683) + (_813.w * _683)) * cbMtdParam._m0[3u].x) + _683;
    uint _837 = uint(roundEven(NORMAL.w)) * 13u;
    uint _838 = _837 + 9u;
    uint _839 = _838 + uint(cbMatDynParam._m0[0u].w);
    float _845 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0)))) * cbInstanceData._m0[_839].x;
    float _846 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0)))) * cbInstanceData._m0[_839].y;
    float _847 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0)))) * cbInstanceData._m0[_839].z;
    float _3859 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _848 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
    float _3870 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _849 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
    float _3881 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _850 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
    vec4 _851 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _856 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _867 = (((_856.x - _687) + (_856.w * _687)) * cbMtdParam._m0[3u].x) + _687;
    float _880 = (cbMtdParam._m0[3u].x * (((_848 * _786) - _848) + _851.x)) + _848;
    float _881 = (cbMtdParam._m0[3u].x * (((_849 * _786) - _849) + _851.y)) + _849;
    float _882 = (cbMtdParam._m0[3u].x * (((_850 * _786) - _850) + _851.z)) + _850;
    float _883 = 1.0 - _867;
    float _884 = _883 * _880;
    float _885 = _883 * _881;
    float _886 = _883 * _882;
    float _891 = (_880 + (-0.039999999105930328369140625)) * _867;
    float _892 = (_881 + (-0.039999999105930328369140625)) * _867;
    float _893 = (_882 + (-0.039999999105930328369140625)) * _867;
    float _894 = _891 + 0.039999999105930328369140625;
    float _896 = _892 + 0.039999999105930328369140625;
    float _897 = _893 + 0.039999999105930328369140625;
    vec4 _906 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _781, cbSceneParam._m0[86u].y * _782));
    float _909 = _906.x * TEXCOORD_4.z;
    float _910 = dot(vec3(_680, _681, _682), vec3(_760, _761, _762));
    float _913 = _910 * 2.0;
    float _917 = (_913 * _680) - _760;
    float _918 = (_913 * _681) - _761;
    float _919 = (_913 * _682) - _762;
    float _923 = abs(dot(vec3(_760, _761, _762), vec3(_680, _681, _682)));
    float _3892 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
    float _925 = sqrt(_824);
    float _938 = exp2((_925 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_925 * 3.0));
    float _944 = (1.0 - _938) * ((_925 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _945 = _938 * _925;
    float _973 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _977 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _981 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1311;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1036 = fma(_981, cbModelParam._m0[26u].z, fma(_977, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _973));
        float _1040 = fma(_981, cbModelParam._m0[27u].z, fma(_977, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _973));
        float _1044 = fma(_981, cbModelParam._m0[28u].z, fma(_977, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _973));
        float _1069 = _973 + _680;
        float _1070 = _977 + _681;
        float _1071 = _981 + _682;
        float _1081 = fma(_1071, cbModelParam._m0[26u].z, fma(_1070, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1069)) - _1036;
        float _1082 = fma(_1071, cbModelParam._m0[27u].z, fma(_1070, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1069)) - _1040;
        float _1083 = fma(_1071, cbModelParam._m0[28u].z, fma(_1070, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1069)) - _1044;
        float _1087 = inversesqrt(dot(vec3(_1081, _1082, _1083), vec3(_1081, _1082, _1083)));
        float _1100 = ((_1087 * _1081) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1036 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1101 = ((_1087 * _1082) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1040 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1102 = ((_1087 * _1083) / cbModelParam._m0[34u].z) + ((((((_1044 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1105 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1100, _1101, _1102), 0.0);
        vec4 _1112 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1100, _1101, _1102), 0.0);
        vec4 _1119 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1100, _1101, _1102), 0.0);
        vec4 _1126 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1100, _1101, _1102), 0.0);
        float _1139 = exp2((_1105.w + (-0.5)) * 20.0) * 2.0;
        float _1140 = _1139 * (_1105.x + (-0.5));
        float _1141 = _1139 * (_1105.y + (-0.5));
        float _1142 = _1139 * (_1105.z + (-0.5));
        float _1149 = exp2((_1112.w + (-0.5)) * 20.0) * 2.0;
        float _1150 = _1149 * (_1112.x + (-0.5));
        float _1151 = _1149 * (_1112.y + (-0.5));
        float _1152 = _1149 * (_1112.z + (-0.5));
        float _1159 = exp2((_1119.w + (-0.5)) * 20.0) * 2.0;
        float _1160 = _1159 * (_1119.x + (-0.5));
        float _1161 = _1159 * (_1119.y + (-0.5));
        float _1162 = _1159 * (_1119.z + (-0.5));
        float _1169 = exp2((_1126.w + (-0.5)) * 20.0) * 2.0;
        float _1170 = _1169 * (_1126.x + (-0.5));
        float _1171 = _1169 * (_1126.y + (-0.5));
        float _1172 = _1169 * (_1126.z + (-0.5));
        float _1173 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1174 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1175 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1176 = _1140 * 0.5;
        float _1177 = _1150 * 0.5;
        float _1178 = _1160 * 0.5;
        float _1179 = dot(vec3(_1176, _1177, _1178), vec3(_1176, _1177, _1178));
        float _1184 = (_1179 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1179);
        float _1193 = (dot(vec3(_680, _681, _682), vec3(_1184 * _1176, _1184 * _1177, _1184 * _1178)) + 1.0) * 0.5;
        float _3918 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1203 = sqrt(((_1177 * _1177) + (_1176 * _1176)) + (_1178 * _1178)) / (_1173 + 9.9999997473787516355514526367188e-06);
        float _3929 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
        float _1205 = _1204 * 2.0;
        float _1209 = (1.0 - _1204) / (_1204 + 1.0);
        float _3940 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1210 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
        float _1219 = ((((1.0 - _1210) * (_1205 + 2.0)) * exp2(log2(isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0))) * (_1205 + 1.0))) + _1210) * _1173;
        float _1220 = _1141 * 0.5;
        float _1221 = _1151 * 0.5;
        float _1222 = _1161 * 0.5;
        float _1223 = dot(vec3(_1220, _1221, _1222), vec3(_1220, _1221, _1222));
        float _1228 = (_1223 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1223);
        float _1236 = (dot(vec3(_680, _681, _682), vec3(_1228 * _1220, _1228 * _1221, _1228 * _1222)) + 1.0) * 0.5;
        float _3951 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1245 = sqrt(((_1221 * _1221) + (_1220 * _1220)) + (_1222 * _1222)) / (_1174 + 9.9999997473787516355514526367188e-06);
        float _3962 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
        float _1247 = _1246 * 2.0;
        float _1251 = (1.0 - _1246) / (_1246 + 1.0);
        float _3973 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _1261 = ((((1.0 - _1252) * (_1247 + 2.0)) * exp2(log2(isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0))) * (_1247 + 1.0))) + _1252) * _1174;
        float _1262 = _1142 * 0.5;
        float _1263 = _1152 * 0.5;
        float _1264 = _1162 * 0.5;
        float _1265 = dot(vec3(_1262, _1263, _1264), vec3(_1262, _1263, _1264));
        float _1270 = (_1265 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1265);
        float _1278 = (dot(vec3(_680, _681, _682), vec3(_1270 * _1262, _1270 * _1263, _1270 * _1264)) + 1.0) * 0.5;
        float _3984 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1287 = sqrt(((_1263 * _1263) + (_1262 * _1262)) + (_1264 * _1264)) / (_1175 + 9.9999997473787516355514526367188e-06);
        float _3995 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1288 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _1289 = _1288 * 2.0;
        float _1293 = (1.0 - _1288) / (_1288 + 1.0);
        float _4006 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1294 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _1303 = ((((1.0 - _1294) * (_1289 + 2.0)) * exp2(log2(isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0))) * (_1289 + 1.0))) + _1294) * _1175;
        _1311 = _1142;
        _1313 = _1141;
        _1314 = _1140;
        _1315 = _1152;
        _1316 = _1151;
        _1317 = _1150;
        _1318 = _1162;
        _1319 = _1161;
        _1320 = _1160;
        _1321 = _1175;
        _1322 = _1174;
        _1323 = _1173;
        _1324 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0)));
        _1325 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0)));
        _1326 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0)));
    }
    else
    {
        _1311 = _1312;
        _1313 = _1312;
        _1314 = _1312;
        _1315 = _1312;
        _1316 = _1312;
        _1317 = _1312;
        _1318 = _1312;
        _1319 = _1312;
        _1320 = _1312;
        _1321 = _1312;
        _1322 = _1312;
        _1323 = _1312;
        _1324 = 0.0;
        _1325 = 0.0;
        _1326 = 0.0;
    }
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1355 = fma(_981, cbModelParam._m0[30u].z, fma(_977, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _973));
        float _1359 = fma(_981, cbModelParam._m0[31u].z, fma(_977, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _973));
        float _1363 = fma(_981, cbModelParam._m0[32u].z, fma(_977, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _973));
        float _1386 = _973 + _680;
        float _1387 = _977 + _681;
        float _1388 = _981 + _682;
        float _1398 = fma(_1388, cbModelParam._m0[30u].z, fma(_1387, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1386)) - _1355;
        float _1399 = fma(_1388, cbModelParam._m0[31u].z, fma(_1387, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1386)) - _1359;
        float _1400 = fma(_1388, cbModelParam._m0[32u].z, fma(_1387, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1386)) - _1363;
        float _1404 = inversesqrt(dot(vec3(_1398, _1399, _1400), vec3(_1398, _1399, _1400)));
        float _1417 = ((_1404 * _1398) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1355 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1418 = ((_1404 * _1399) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1359 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1419 = ((_1404 * _1400) / cbModelParam._m0[35u].z) + ((((((_1363 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1421 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1417, _1418, _1419), 0.0);
        vec4 _1428 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1417, _1418, _1419), 0.0);
        vec4 _1435 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1417, _1418, _1419), 0.0);
        vec4 _1442 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1417, _1418, _1419), 0.0);
        float _1454 = exp2((_1421.w + (-0.5)) * 20.0) * 2.0;
        float _1455 = _1454 * (_1421.x + (-0.5));
        float _1456 = _1454 * (_1421.y + (-0.5));
        float _1457 = _1454 * (_1421.z + (-0.5));
        float _1464 = exp2((_1428.w + (-0.5)) * 20.0) * 2.0;
        float _1465 = _1464 * (_1428.x + (-0.5));
        float _1466 = _1464 * (_1428.y + (-0.5));
        float _1467 = _1464 * (_1428.z + (-0.5));
        float _1474 = exp2((_1435.w + (-0.5)) * 20.0) * 2.0;
        float _1475 = _1474 * (_1435.x + (-0.5));
        float _1476 = _1474 * (_1435.y + (-0.5));
        float _1477 = _1474 * (_1435.z + (-0.5));
        float _1484 = exp2((_1442.w + (-0.5)) * 20.0) * 2.0;
        float _1485 = _1484 * (_1442.x + (-0.5));
        float _1486 = _1484 * (_1442.y + (-0.5));
        float _1487 = _1484 * (_1442.z + (-0.5));
        float _1488 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1489 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1490 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1491 = _1455 * 0.5;
        float _1492 = _1465 * 0.5;
        float _1493 = _1475 * 0.5;
        float _1494 = dot(vec3(_1491, _1492, _1493), vec3(_1491, _1492, _1493));
        float _1499 = (_1494 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1494);
        float _1507 = (dot(vec3(_680, _681, _682), vec3(_1499 * _1491, _1499 * _1492, _1499 * _1493)) + 1.0) * 0.5;
        float _4047 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1516 = sqrt(((_1492 * _1492) + (_1491 * _1491)) + (_1493 * _1493)) / (_1488 + 9.9999997473787516355514526367188e-06);
        float _4058 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1517 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _1518 = _1517 * 2.0;
        float _1522 = (1.0 - _1517) / (_1517 + 1.0);
        float _4069 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1523 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _1532 = ((((1.0 - _1523) * (_1518 + 2.0)) * exp2(log2(isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0))) * (_1518 + 1.0))) + _1523) * _1488;
        float _1533 = _1456 * 0.5;
        float _1534 = _1466 * 0.5;
        float _1535 = _1476 * 0.5;
        float _1536 = dot(vec3(_1533, _1534, _1535), vec3(_1533, _1534, _1535));
        float _1541 = (_1536 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1536);
        float _1549 = (dot(vec3(_680, _681, _682), vec3(_1541 * _1533, _1541 * _1534, _1541 * _1535)) + 1.0) * 0.5;
        float _4080 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1558 = sqrt(((_1534 * _1534) + (_1533 * _1533)) + (_1535 * _1535)) / (_1489 + 9.9999997473787516355514526367188e-06);
        float _4091 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1559 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _1560 = _1559 * 2.0;
        float _1564 = (1.0 - _1559) / (_1559 + 1.0);
        float _4102 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1565 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _1574 = ((((1.0 - _1565) * (_1560 + 2.0)) * exp2(log2(isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * (_1560 + 1.0))) + _1565) * _1489;
        float _1575 = _1457 * 0.5;
        float _1576 = _1467 * 0.5;
        float _1577 = _1477 * 0.5;
        float _1578 = dot(vec3(_1575, _1576, _1577), vec3(_1575, _1576, _1577));
        float _1583 = (_1578 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1578);
        float _1591 = (dot(vec3(_680, _681, _682), vec3(_1583 * _1575, _1583 * _1576, _1583 * _1577)) + 1.0) * 0.5;
        float _4113 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        float _1600 = sqrt(((_1576 * _1576) + (_1575 * _1575)) + (_1577 * _1577)) / (_1490 + 9.9999997473787516355514526367188e-06);
        float _4124 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1601 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _1602 = _1601 * 2.0;
        float _1606 = (1.0 - _1601) / (_1601 + 1.0);
        float _4135 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1607 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _1616 = ((((1.0 - _1607) * (_1602 + 2.0)) * exp2(log2(isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))) * (_1602 + 1.0))) + _1607) * _1490;
        _1624 = _1457;
        _1625 = _1456;
        _1626 = _1455;
        _1627 = _1467;
        _1628 = _1466;
        _1629 = _1465;
        _1630 = _1477;
        _1631 = _1476;
        _1632 = _1475;
        _1633 = _1490;
        _1634 = _1489;
        _1635 = _1488;
        _1636 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0)));
        _1637 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0)));
        _1638 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0)));
    }
    else
    {
        _1624 = _1312;
        _1625 = _1312;
        _1626 = _1312;
        _1627 = _1312;
        _1628 = _1312;
        _1629 = _1312;
        _1630 = _1312;
        _1631 = _1312;
        _1632 = _1312;
        _1633 = _1312;
        _1634 = _1312;
        _1635 = _1312;
        _1636 = 0.0;
        _1637 = 0.0;
        _1638 = 0.0;
    }
    float _1648 = (cbModelParam._m0[1u].x * (_1636 - _1324)) + _1324;
    float _1649 = (cbModelParam._m0[1u].x * (_1637 - _1325)) + _1325;
    float _1650 = (cbModelParam._m0[1u].x * (_1638 - _1326)) + _1326;
    float _1671 = fma(_1650, cbSceneParam._m0[89u].z, fma(_1649, cbSceneParam._m0[89u].y, _1648 * cbSceneParam._m0[89u].x));
    float _1674 = fma(_1650, cbSceneParam._m0[90u].z, fma(_1649, cbSceneParam._m0[90u].y, _1648 * cbSceneParam._m0[90u].x));
    float _1677 = fma(_1650, cbSceneParam._m0[91u].z, fma(_1649, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1648));
    float _1692 = _917 * 0.5;
    float _1693 = _918 * 0.5;
    float _1694 = _919 * 0.5;
    float _1695 = dot(vec4(_1692, _1693, _1694, 1.0), vec4(_1626, _1629, _1632, _1635));
    float _1698 = dot(vec4(_1692, _1693, _1694, 1.0), vec4(_1625, _1628, _1631, _1634));
    float _1701 = dot(vec4(_1692, _1693, _1694, 1.0), vec4(_1624, _1627, _1630, _1633));
    float _1735;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1708 = dot(vec4(_1692, _1693, _1694, 1.0), vec4(_1311, _1315, _1318, _1321));
        float _1712 = dot(vec4(_1692, _1693, _1694, 1.0), vec4(_1313, _1316, _1319, _1322));
        float _1716 = dot(vec4(_1692, _1693, _1694, 1.0), vec4(_1314, _1317, _1320, _1323));
        float _1723 = dot(vec4(cbModelParam._m0[39u]), vec4(_1692, _1693, _1694, 1.0));
        _1735 = dot(vec3(isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0)), isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0)), isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1723) ? 0.0 : (isnan(0.0) ? _1723 : max(0.0, _1723))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1735 = 1.0;
    }
    float _1746;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1737 = dot(vec4(cbModelParam._m0[40u]), vec4(_1692, _1693, _1694, 1.0));
        _1746 = dot(vec3(isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0)), isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0)), isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1737) ? 0.0 : (isnan(0.0) ? _1737 : max(0.0, _1737))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1746 = 1.0;
    }
    float _1750 = (_1746 * cbModelParam._m0[1u].x) + (_1735 * (1.0 - cbModelParam._m0[1u].x));
    float _1760 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _824);
    float _1761 = isnan(_1760) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1760 : min(cbModelParam._m0[25u].z, _1760));
    float _1841;
    float _1843;
    float _1845;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1808 = fma(_981, cbModelParam._m0[13u].z, fma(_977, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _973)) + cbModelParam._m0[13u].w;
        float _1812 = fma(_981, cbModelParam._m0[14u].z, fma(_977, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _973)) + cbModelParam._m0[14u].w;
        float _1816 = fma(_981, cbModelParam._m0[15u].z, fma(_977, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _973)) + cbModelParam._m0[15u].w;
        float _1819 = fma(_919, cbModelParam._m0[13u].z, fma(_918, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _917));
        float _1822 = fma(_919, cbModelParam._m0[14u].z, fma(_918, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _917));
        float _1825 = fma(_919, cbModelParam._m0[15u].z, fma(_918, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _917));
        float _1853;
        if (_1819 > 0.0)
        {
            _1853 = abs((1.0 - _1808) / _1819);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1819 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1808 + 1.0) / _1819);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1853 = frontier_phi_19_17_ladder;
        }
        float _2057;
        if (_1822 > 0.0)
        {
            _2057 = abs((1.0 - _1812) / _1822);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1822 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1812 + 1.0) / _1822);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2057 = frontier_phi_28_24_ladder;
        }
        float _2311;
        if (_1825 > 0.0)
        {
            _2311 = abs((1.0 - _1816) / _1825);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1825 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1816 + 1.0) / _1825);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2311 = frontier_phi_40_35_ladder;
        }
        float _2313 = isnan(_2057) ? _1853 : (isnan(_1853) ? _2057 : min(_1853, _2057));
        float _2314 = isnan(_2311) ? _2313 : (isnan(_2313) ? _2311 : min(_2313, _2311));
        float _2318 = (_2314 * _1819) + _1808;
        float _2319 = (_2314 * _1822) + _1812;
        float _2320 = (_2314 * _1825) + _1816;
        float _2321 = _2314 * 9.9999997473787516355514526367188e-05;
        float _2323 = (-1.0) - _2321;
        float _2325 = _2321 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2320 > _2325) || ((_2320 < _2323) || ((_2319 > _2325) || ((_2319 < _2323) || ((_2318 < _2323) || (_2318 > _2325))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2448 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2320, cbModelParam._m0[9u].z, fma(_2319, cbModelParam._m0[9u].y, _2318 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2320, cbModelParam._m0[10u].z, fma(_2319, cbModelParam._m0[10u].y, _2318 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2320, cbModelParam._m0[11u].z, fma(_2319, cbModelParam._m0[11u].y, _2318 * cbModelParam._m0[11u].x))), _1761);
            frontier_phi_18_40_ladder = _2448.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2448.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2448.x * cbModelParam._m0[1u].y;
        }
        _1841 = frontier_phi_18_40_ladder_2;
        _1843 = frontier_phi_18_40_ladder_1;
        _1845 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1829 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_917, _918, _919), _1761);
        _1841 = _1829.x * cbModelParam._m0[1u].y;
        _1843 = _1829.y * cbModelParam._m0[1u].y;
        _1845 = _1829.z * cbModelParam._m0[1u].y;
    }
    float _1849 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _824);
    float _1850 = isnan(_1849) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1849 : min(cbModelParam._m0[25u].w, _1849));
    float _1941;
    float _1943;
    float _1945;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1905 = fma(_981, cbModelParam._m0[21u].z, fma(_977, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _973)) + cbModelParam._m0[21u].w;
        float _1909 = fma(_981, cbModelParam._m0[22u].z, fma(_977, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _973)) + cbModelParam._m0[22u].w;
        float _1913 = fma(_981, cbModelParam._m0[23u].z, fma(_977, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _973)) + cbModelParam._m0[23u].w;
        float _1916 = fma(_919, cbModelParam._m0[21u].z, fma(_918, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _917));
        float _1919 = fma(_919, cbModelParam._m0[22u].z, fma(_918, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _917));
        float _1922 = fma(_919, cbModelParam._m0[23u].z, fma(_918, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _917));
        float _2062;
        if (_1916 > 0.0)
        {
            _2062 = abs((1.0 - _1905) / _1916);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1916 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1905 + 1.0) / _1916);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2062 = frontier_phi_30_26_ladder;
        }
        float _2338;
        if (_1919 > 0.0)
        {
            _2338 = abs((1.0 - _1909) / _1919);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1919 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1909 + 1.0) / _1919);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2338 = frontier_phi_42_37_ladder;
        }
        float _2551;
        if (_1922 > 0.0)
        {
            _2551 = abs((1.0 - _1913) / _1922);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1922 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1913 + 1.0) / _1922);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2551 = frontier_phi_51_48_ladder;
        }
        float _2553 = isnan(_2338) ? _2062 : (isnan(_2062) ? _2338 : min(_2062, _2338));
        float _2554 = isnan(_2551) ? _2553 : (isnan(_2553) ? _2551 : min(_2553, _2551));
        float _2558 = (_2554 * _1916) + _1905;
        float _2559 = (_2554 * _1919) + _1909;
        float _2560 = (_2554 * _1922) + _1913;
        float _2561 = _2554 * 9.9999997473787516355514526367188e-05;
        float _2562 = (-1.0) - _2561;
        float _2564 = _2561 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2560 > _2564) || ((_2560 < _2562) || ((_2559 > _2564) || ((_2559 < _2562) || ((_2558 < _2562) || (_2558 > _2564))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2793 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2560, cbModelParam._m0[17u].z, fma(_2559, cbModelParam._m0[17u].y, _2558 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2560, cbModelParam._m0[18u].z, fma(_2559, cbModelParam._m0[18u].y, _2558 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2560, cbModelParam._m0[19u].z, fma(_2559, cbModelParam._m0[19u].y, _2558 * cbModelParam._m0[19u].x))), _1850);
            frontier_phi_27_51_ladder = _2793.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2793.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2793.x * cbModelParam._m0[1u].z;
        }
        _1941 = frontier_phi_27_51_ladder_2;
        _1943 = frontier_phi_27_51_ladder_1;
        _1945 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1925 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_917, _918, _919), _1850);
        _1941 = _1925.x * cbModelParam._m0[1u].z;
        _1943 = _1925.y * cbModelParam._m0[1u].z;
        _1945 = _1925.z * cbModelParam._m0[1u].z;
    }
    float _1958 = (((_944 * _894) + _945) * _909) * ((cbModelParam._m0[1u].w * (_1941 - _1841)) + _1841);
    float _1960 = (((_944 * _896) + _945) * _909) * ((cbModelParam._m0[1u].w * (_1943 - _1843)) + _1843);
    float _1962 = (((_944 * _897) + _945) * _909) * ((cbModelParam._m0[1u].w * (_1945 - _1845)) + _1845);
    float _1965 = fma(_1962, cbSceneParam._m0[89u].z, fma(_1960, cbSceneParam._m0[89u].y, _1958 * cbSceneParam._m0[89u].x));
    float _1968 = fma(_1962, cbSceneParam._m0[90u].z, fma(_1960, cbSceneParam._m0[90u].y, _1958 * cbSceneParam._m0[90u].x));
    float _1971 = fma(_1962, cbSceneParam._m0[91u].z, fma(_1960, cbSceneParam._m0[91u].y, _1958 * cbSceneParam._m0[91u].x));
    uvec4 _1981 = floatBitsToUint(cbInstanceData._m0[_837 + 5u]);
    uint _1983 = _1981.x * 14u;
    uint _1984 = _1983 + 13u;
    float _1991 = _909 + (-1.0);
    float _1996 = (cbLight._m0[_1984].x * _1991) + 1.0;
    float _1997 = (cbLight._m0[_1984].y * _1991) + 1.0;
    float _1998 = (cbLight._m0[_1984].z * _1991) + 1.0;
    float _1999 = (cbLight._m0[_1984].w * _1991) + 1.0;
    uint _2000 = _1983 + 5u;
    float _2006 = isnan(1.0) ? _1997 : (isnan(_1997) ? 1.0 : min(_1997, 1.0));
    uint _2010 = _1983 + 4u;
    float _2016 = isnan(1.0) ? _1996 : (isnan(_1996) ? 1.0 : min(_1996, 1.0));
    uint _2020 = _1983 | 1u;
    float _2031 = dot(vec3(cbLight._m0[_1983].xyz), vec3(_680, _681, _682));
    float _2034 = dot(vec3(cbLight._m0[_2020].xyz), vec3(_680, _681, _682));
    float _4271 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
    float _4282 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
    float _2039 = (isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0))) * 0.3183098733425140380859375;
    float _2041 = (isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0))) * 0.3183098733425140380859375;
    float _2048 = ((cbLight._m0[_2000].x * _2006) * _2041) + ((cbLight._m0[_2010].x * _2016) * _2039);
    float _2049 = ((_2006 * cbLight._m0[_2000].y) * _2041) + ((_2016 * cbLight._m0[_2010].y) * _2039);
    float _2050 = ((_2006 * cbLight._m0[_2000].z) * _2041) + ((_2016 * cbLight._m0[_2010].z) * _2039);
    uvec4 _2054 = floatBitsToUint(cbLight._m0[_1983 + 12u]);
    bool _2056 = _2054.x == 0u;
    float _2067;
    float _2069;
    float _2071;
    if (_2056)
    {
        _2067 = _2048;
        _2069 = _2049;
        _2071 = _2050;
    }
    else
    {
        uint _2075 = _1983 + 6u;
        float _2091 = (dot(vec3(cbLight._m0[_1983 + 2u].xyz), vec3(_680, _681, _682)) * 0.5) + 0.5;
        float _2092 = _2091 * _2091;
        float _4293 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
        float _2093 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _2094 = isnan(1.0) ? _1998 : (isnan(_1998) ? 1.0 : min(_1998, 1.0));
        _2067 = (((cbLight._m0[_2075].x * 0.3183098733425140380859375) * _2093) * _2094) + _2048;
        _2069 = (((cbLight._m0[_2075].y * 0.3183098733425140380859375) * _2093) * _2094) + _2049;
        _2071 = (((cbLight._m0[_2075].z * 0.3183098733425140380859375) * _2093) * _2094) + _2050;
    }
    bool _2074 = _2054.y == 0u;
    float _2112;
    float _2114;
    float _2116;
    if (_2074)
    {
        _2112 = _2067;
        _2114 = _2069;
        _2116 = _2071;
    }
    else
    {
        uint _2282 = _1983 + 7u;
        float _2298 = (dot(vec3(cbLight._m0[_1983 + 3u].xyz), vec3(_680, _681, _682)) * 0.5) + 0.5;
        float _2299 = _2298 * _2298;
        float _4309 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
        float _2300 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _2301 = isnan(1.0) ? _1999 : (isnan(_1999) ? 1.0 : min(_1999, 1.0));
        _2112 = (((cbLight._m0[_2282].x * 0.3183098733425140380859375) * _2300) * _2301) + _2067;
        _2114 = (((cbLight._m0[_2282].y * 0.3183098733425140380859375) * _2300) * _2301) + _2069;
        _2116 = (((cbLight._m0[_2282].z * 0.3183098733425140380859375) * _2300) * _2301) + _2071;
    }
    uint _2119 = _1983 + 8u;
    float _2132 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1983].w)) * _824) * 0.949999988079071044921875);
    float _2133 = _2132 * _2132;
    float _2134 = cbLight._m0[_1983].x + _760;
    float _2135 = cbLight._m0[_1983].y + _761;
    float _2136 = cbLight._m0[_1983].z + _762;
    float _2140 = inversesqrt(dot(vec3(_2134, _2135, _2136), vec3(_2134, _2135, _2136)));
    float _2141 = _2140 * _2134;
    float _2142 = _2140 * _2135;
    float _2143 = _2140 * _2136;
    float _2144 = dot(vec3(_680, _681, _682), vec3(cbLight._m0[_1983].xyz));
    float _4325 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
    float _2147 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
    float _4336 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    float _2148 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
    float _2149 = dot(vec3(_680, _681, _682), vec3(_2141, _2142, _2143));
    float _4347 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
    float _2152 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
    float _2153 = dot(vec3(cbLight._m0[_1983].xyz), vec3(_2141, _2142, _2143));
    float _4358 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
    float _2157 = _2133 * _2133;
    float _2161 = ((_2152 * _2152) * (_2157 + (-1.0))) + 1.0;
    float _2169 = exp2(log2(1.0 - (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0)))) * 5.0);
    float _2170 = 0.959999978542327880859375 - _891;
    float _2172 = 0.959999978542327880859375 - _892;
    float _2173 = 0.959999978542327880859375 - _893;
    float _2180 = 1.0 - _2133;
    float _2191 = (0.5 / (((_2148 * ((_2147 * _2180) + _2133)) + 9.9999999392252902907785028219223e-09) + (((_2148 * _2180) + _2133) * _2147))) * _2147;
    float _4369 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
    float _2193 = (isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0))) * (_2157 / ((_2161 * _2161) * 3.141590118408203125));
    uint _2204 = _1983 + 9u;
    float _2215 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2020].w)) * _824) * 0.949999988079071044921875);
    float _2216 = _2215 * _2215;
    float _2217 = cbLight._m0[_2020].x + _760;
    float _2218 = cbLight._m0[_2020].y + _761;
    float _2219 = cbLight._m0[_2020].z + _762;
    float _2223 = inversesqrt(dot(vec3(_2217, _2218, _2219), vec3(_2217, _2218, _2219)));
    float _2224 = _2223 * _2217;
    float _2225 = _2223 * _2218;
    float _2226 = _2223 * _2219;
    float _2227 = dot(vec3(_680, _681, _682), vec3(cbLight._m0[_2020].xyz));
    float _4380 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
    float _2230 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
    float _2231 = dot(vec3(_680, _681, _682), vec3(_2224, _2225, _2226));
    float _4391 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
    float _2234 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
    float _2235 = dot(vec3(cbLight._m0[_2020].xyz), vec3(_2224, _2225, _2226));
    float _4402 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
    float _2239 = _2216 * _2216;
    float _2243 = ((_2234 * _2234) * (_2239 + (-1.0))) + 1.0;
    float _2250 = exp2(log2(1.0 - (isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0)))) * 5.0);
    float _2257 = 1.0 - _2216;
    float _2267 = (0.5 / (((_2148 * ((_2230 * _2257) + _2216)) + 9.9999999392252902907785028219223e-09) + (((_2148 * _2257) + _2216) * _2230))) * _2230;
    float _4413 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
    float _2269 = (isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0))) * (_2239 / ((_2243 * _2243) * 3.141590118408203125));
    float _2279 = (((((_2250 * _2170) + _894) * cbLight._m0[_2204].x) * _2269) * _2006) + (((((_2169 * _2170) + _894) * cbLight._m0[_2119].x) * _2193) * _2016);
    float _2280 = (((((_2250 * _2172) + _896) * cbLight._m0[_2204].y) * _2269) * _2006) + (((((_2169 * _2172) + _896) * cbLight._m0[_2119].y) * _2193) * _2016);
    float _2281 = (((((_2250 * _2173) + _897) * cbLight._m0[_2204].z) * _2269) * _2006) + (((((_2169 * _2173) + _897) * cbLight._m0[_2119].z) * _2193) * _2016);
    float _2343;
    float _2345;
    float _2347;
    if (_2056)
    {
        _2343 = _2279;
        _2345 = _2280;
        _2347 = _2281;
    }
    else
    {
        uint _2349 = _1983 + 2u;
        uint _2353 = _1983 + 10u;
        float _2367 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2349].w)) * _824) * 0.949999988079071044921875);
        float _2368 = _2367 * _2367;
        float _2369 = cbLight._m0[_2349].x + _760;
        float _2370 = cbLight._m0[_2349].y + _761;
        float _2371 = cbLight._m0[_2349].z + _762;
        float _2375 = inversesqrt(dot(vec3(_2369, _2370, _2371), vec3(_2369, _2370, _2371)));
        float _2376 = _2375 * _2369;
        float _2377 = _2375 * _2370;
        float _2378 = _2375 * _2371;
        float _2379 = dot(vec3(_680, _681, _682), vec3(cbLight._m0[_2349].xyz));
        float _4424 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
        float _2382 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
        float _2383 = dot(vec3(_680, _681, _682), vec3(_2376, _2377, _2378));
        float _4435 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
        float _2386 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
        float _2387 = dot(vec3(cbLight._m0[_2349].xyz), vec3(_2376, _2377, _2378));
        float _4446 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
        float _2391 = _2368 * _2368;
        float _2395 = ((_2386 * _2386) * (_2391 + (-1.0))) + 1.0;
        float _2402 = exp2(log2(1.0 - (isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0)))) * 5.0);
        float _2409 = 1.0 - _2368;
        float _2419 = (0.5 / (((_2148 * ((_2382 * _2409) + _2368)) + 9.9999999392252902907785028219223e-09) + (((_2148 * _2409) + _2368) * _2382))) * _2382;
        float _4457 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
        float _2421 = (isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0))) * (_2391 / ((_2395 * _2395) * 3.141590118408203125));
        float _2422 = isnan(1.0) ? _1998 : (isnan(_1998) ? 1.0 : min(_1998, 1.0));
        _2343 = (((((_2402 * _2170) + _894) * cbLight._m0[_2353].x) * _2421) * _2422) + _2279;
        _2345 = (((((_2402 * _2172) + _896) * cbLight._m0[_2353].y) * _2421) * _2422) + _2280;
        _2347 = (((((_2402 * _2173) + _897) * cbLight._m0[_2353].z) * _2421) * _2422) + _2281;
    }
    float _2457;
    float _2459;
    float _2461;
    if (_2074)
    {
        _2457 = _2343;
        _2459 = _2345;
        _2461 = _2347;
    }
    else
    {
        uint _2468 = _1983 + 3u;
        uint _2472 = _1983 + 11u;
        float _2486 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2468].w)) * _824) * 0.949999988079071044921875);
        float _2487 = _2486 * _2486;
        float _2488 = cbLight._m0[_2468].x + _760;
        float _2489 = cbLight._m0[_2468].y + _761;
        float _2490 = cbLight._m0[_2468].z + _762;
        float _2494 = inversesqrt(dot(vec3(_2488, _2489, _2490), vec3(_2488, _2489, _2490)));
        float _2495 = _2494 * _2488;
        float _2496 = _2494 * _2489;
        float _2497 = _2494 * _2490;
        float _2498 = dot(vec3(_680, _681, _682), vec3(cbLight._m0[_2468].xyz));
        float _4473 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
        float _2501 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
        float _2502 = dot(vec3(_680, _681, _682), vec3(_2495, _2496, _2497));
        float _4484 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
        float _2505 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
        float _2506 = dot(vec3(cbLight._m0[_2468].xyz), vec3(_2495, _2496, _2497));
        float _4495 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
        float _2510 = _2487 * _2487;
        float _2514 = ((_2505 * _2505) * (_2510 + (-1.0))) + 1.0;
        float _2521 = exp2(log2(1.0 - (isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0)))) * 5.0);
        float _2528 = 1.0 - _2487;
        float _2538 = (0.5 / (((_2148 * ((_2501 * _2528) + _2487)) + 9.9999999392252902907785028219223e-09) + (((_2148 * _2528) + _2487) * _2501))) * _2501;
        float _4506 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
        float _2540 = (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0))) * (_2510 / ((_2514 * _2514) * 3.141590118408203125));
        float _2541 = isnan(1.0) ? _1999 : (isnan(_1999) ? 1.0 : min(_1999, 1.0));
        _2457 = (((((_2521 * _2170) + _894) * cbLight._m0[_2472].x) * _2540) * _2541) + _2343;
        _2459 = (((((_2521 * _2172) + _896) * cbLight._m0[_2472].y) * _2540) * _2541) + _2345;
        _2461 = (((((_2521 * _2173) + _897) * cbLight._m0[_2472].z) * _2540) * _2541) + _2347;
    }
    float _2675;
    float _2677;
    float _2679;
    float _2681;
    float _2683;
    float _2685;
    if (_1981.y == 0u)
    {
        float _2616 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2617 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2616;
        float _2618 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2616;
        float _2619 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2616;
        uvec4 _2631 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2632 = _2631.x;
        uint _2643 = uint((float(_2631.y) * floor(float(uint(cbSceneParam._m0[85u].y * _782) / _2632))) + floor(float(uint(cbSceneParam._m0[85u].x * _781) / _2632)));
        float _2653 = (log2(_2619 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2654 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
        uint _2657 = uint(isnan(14.0) ? _2654 : (isnan(_2654) ? 14.0 : min(_2654, 14.0)));
        uvec4 _2662 = texelFetch(g_lightClusterGridBuffer, int(((_2657 << 2u) + (_2643 << 6u)) >> 2u));
        uint _2663 = _2662.x;
        uint _2664 = _2631.z;
        float _2798;
        float _2800;
        float _2802;
        float _2804;
        float _2806;
        float _2808;
        if (((((1u << ((_2664 >> 4u) & 15u)) + 4294967295u) & _2663) == 0u) || ((_2664 & 240u) == 0u))
        {
            _2798 = 0.0;
            _2800 = 0.0;
            _2802 = 0.0;
            _2804 = 0.0;
            _2806 = 0.0;
            _2808 = 0.0;
        }
        else
        {
            float _2799;
            float _2801;
            float _2803;
            float _2805;
            float _2807;
            float _2809;
            float _2959 = 0.0;
            float _2960 = 0.0;
            float _2961 = 0.0;
            float _2962 = 0.0;
            float _2963 = 0.0;
            float _2964 = 0.0;
            uint _2965 = 0u;
            uint _2974;
            bool _2975;
            for (;;)
            {
                _2974 = texelFetch(g_lightClassification, int((((_2657 << 5u) + (_2643 << 9u)) + (_2965 << 2u)) >> 2u)).x;
                _2975 = _2974 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2975)
                {
                    frontier_phi_68_pred = _2961;
                    frontier_phi_68_pred_1 = _2964;
                    frontier_phi_68_pred_2 = _2963;
                    frontier_phi_68_pred_3 = _2962;
                    frontier_phi_68_pred_4 = _2960;
                    frontier_phi_68_pred_5 = _2959;
                }
                else
                {
                    float _3104;
                    float _3105;
                    float _3106;
                    float _3107;
                    float _3108;
                    float _3109;
                    uint _3110;
                    _3104 = _2959;
                    _3105 = _2960;
                    _3106 = _2961;
                    _3107 = _2962;
                    _3108 = _2963;
                    _3109 = _2964;
                    _3110 = _2974;
                    float _3031;
                    float _3032;
                    float _3033;
                    float _3034;
                    float _3035;
                    float _3036;
                    for (;;)
                    {
                        uint _3114 = uint(findLSB(_3110)) + (_2965 << 5u);
                        uint _3111 = (_3110 + 4294967295u) & _3110;
                        uint _3116 = _3114 * 48u;
                        vec4 _3130 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3116)).x, texelFetch(g_PointLightRenderingBuffer, int(_3116 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3116 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3116 + 3u)).x));
                        uint _3136 = (_3114 * 48u) + 4u;
                        vec4 _3149 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3136)).x, texelFetch(g_PointLightRenderingBuffer, int(_3136 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3136 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3136 + 3u)).x));
                        uint _3155 = (_3114 * 48u) + 8u;
                        vec3 _3166 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3155)).x, texelFetch(g_PointLightRenderingBuffer, int(_3155 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3155 + 2u)).x));
                        float _3170 = _3130.x - _2617;
                        float _3171 = _3130.y - _2618;
                        float _3172 = _3130.z - _2619;
                        float _3173 = dot(vec3(_3170, _3171, _3172), vec3(_3170, _3171, _3172));
                        float _3176 = inversesqrt(_3173);
                        float _3177 = _3176 * _3170;
                        float _3178 = _3176 * _3171;
                        float _3179 = _3176 * _3172;
                        float _3180 = dot(vec3(_805, _808, _811), vec3(_3177, _3178, _3179));
                        float _3185 = 1.0 - (_3173 * _3130.w);
                        float _4532 = isnan(0.0) ? _3185 : (isnan(_3185) ? 0.0 : max(_3185, 0.0));
                        float _3186 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
                        float _3187 = sqrt(_3173) * _3149.w;
                        float _3190 = 1.39999997615814208984375 / (_3187 + 1.39999997615814208984375);
                        float _3191 = _3190 * _3190;
                        float _3194 = ((1.0 - _3191) * _3180) + _3191;
                        float _3197 = _3187 * _3187;
                        float _3201 = ((isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0))) * _3186) / ((_3197 * 0.699999988079071044921875) + 1.0);
                        float _3205 = (-0.0) - _2617;
                        float _3206 = (-0.0) - _2618;
                        float _3207 = (-0.0) - _2619;
                        float _3211 = inversesqrt(dot(vec3(_3205, _3206, _3207), vec3(_3205, _3206, _3207)));
                        float _3212 = _3211 * _3205;
                        float _3213 = _3211 * _3206;
                        float _3214 = _3211 * _3207;
                        float _3222 = exp2(log2(1.0 / ((_3197 * 3.5) + 5.0)) * 0.25);
                        float _3223 = 1.0 - _925;
                        float _3230 = sqrt(1.0 - ((1.0 - (_3223 * _3223)) * (1.0 - (_3222 * _3222))));
                        float _3231 = _3230 * _3230;
                        float _3232 = _3231 * _3231;
                        float _3233 = _3212 + _3177;
                        float _3234 = _3213 + _3178;
                        float _3235 = _3214 + _3179;
                        float _3239 = inversesqrt(dot(vec3(_3233, _3234, _3235), vec3(_3233, _3234, _3235)));
                        float _3243 = dot(vec3(_805, _808, _811), vec3(_3212, _3213, _3214));
                        float _4548 = isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : max(_3243, 0.0));
                        float _3246 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
                        float _3247 = dot(vec3(_805, _808, _811), vec3(_3239 * _3233, _3239 * _3234, _3239 * _3235));
                        float _4559 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0));
                        float _3250 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
                        float _3254 = ((_3250 * _3250) * (_3232 + (-1.0))) + 1.0;
                        float _3255 = _3190 * _3231;
                        float _3256 = _3255 * _3255;
                        float _3259 = ((1.0 - _3256) * _3180) + _3256;
                        float _4570 = isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0));
                        float _3260 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
                        float _3261 = 1.0 - _3231;
                        float _3271 = (0.5 / (((_3260 * ((_3246 * _3261) + _3231)) + 9.9999999392252902907785028219223e-09) + (((_3260 * _3261) + _3231) * _3246))) * _3260;
                        float _4581 = isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0));
                        float _3282 = (((_3232 * 3.1415927410125732421875) * (isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0)))) / ((_3254 * _3254) * ((_3197 * 2.1991131305694580078125) + 3.141590118408203125))) * _3186;
                        _3034 = (_3201 * _3149.x) + _3107;
                        _3035 = (_3201 * _3149.y) + _3108;
                        _3036 = (_3201 * _3149.z) + _3109;
                        _3031 = (_3282 * _3166.x) + _3104;
                        _3032 = (_3282 * _3166.y) + _3105;
                        _3033 = (_3282 * _3166.z) + _3106;
                        if (_3111 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3104 = _3031;
                            _3105 = _3032;
                            _3106 = _3033;
                            _3107 = _3034;
                            _3108 = _3035;
                            _3109 = _3036;
                            _3110 = _3111;
                        }
                    }
                    frontier_phi_68_pred = _3033;
                    frontier_phi_68_pred_1 = _3036;
                    frontier_phi_68_pred_2 = _3035;
                    frontier_phi_68_pred_3 = _3034;
                    frontier_phi_68_pred_4 = _3032;
                    frontier_phi_68_pred_5 = _3031;
                }
                _2803 = frontier_phi_68_pred;
                _2809 = frontier_phi_68_pred_1;
                _2807 = frontier_phi_68_pred_2;
                _2805 = frontier_phi_68_pred_3;
                _2801 = frontier_phi_68_pred_4;
                _2799 = frontier_phi_68_pred_5;
                uint _2966 = _2965 + 1u;
                if (_2966 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2959 = _2799;
                    _2960 = _2801;
                    _2961 = _2803;
                    _2962 = _2805;
                    _2963 = _2807;
                    _2964 = _2809;
                    _2965 = _2966;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2798 = _2799;
            _2800 = _2801;
            _2802 = _2803;
            _2804 = _2805;
            _2806 = _2807;
            _2808 = _2809;
        }
        uvec4 _2812 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2813 = _2812.z;
        uint _2815 = (_2813 >> 8u) & 15u;
        float _2927;
        float _2929;
        float _2931;
        float _2933;
        float _2935;
        float _2937;
        if (((4294967295u << _2815) & _2663) == 0u)
        {
            _2927 = _2798;
            _2929 = _2800;
            _2931 = _2802;
            _2933 = _2804;
            _2935 = _2806;
            _2937 = _2808;
        }
        else
        {
            float _2952 = inversesqrt(dot(vec3(_2617, _2618, _2619), vec3(_2617, _2618, _2619)));
            float _2953 = _2952 * _2617;
            float _2954 = _2952 * _2618;
            float _2955 = _2952 * _2619;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2815 < ((_2813 >> 12u) & 15u))
            {
                float _2928;
                float _2930;
                float _2932;
                float _2934;
                float _2936;
                float _2938;
                float _3087 = _2798;
                float _3088 = _2800;
                float _3089 = _2802;
                float _3090 = _2804;
                float _3091 = _2806;
                float _3092 = _2808;
                uint _3093 = _2815;
                uint _3102;
                bool _3103;
                for (;;)
                {
                    _3102 = texelFetch(g_lightClassification, int((((_2657 << 5u) + (_2643 << 9u)) + (_3093 << 2u)) >> 2u)).x;
                    _3103 = _3102 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3103)
                    {
                        frontier_phi_79_pred = _3092;
                        frontier_phi_79_pred_1 = _3091;
                        frontier_phi_79_pred_2 = _3090;
                        frontier_phi_79_pred_3 = _3089;
                        frontier_phi_79_pred_4 = _3088;
                        frontier_phi_79_pred_5 = _3087;
                    }
                    else
                    {
                        float _3296;
                        float _3297;
                        float _3298;
                        float _3299;
                        float _3300;
                        float _3301;
                        float _3590;
                        float _3591;
                        float _3592;
                        float _3593;
                        float _3594;
                        float _3595;
                        float _3309 = _3087;
                        float _3310 = _3088;
                        float _3311 = _3089;
                        float _3312 = _3090;
                        float _3313 = _3091;
                        float _3314 = _3092;
                        uint _3315 = _3102;
                        uint _3316;
                        vec4 _3341;
                        float _3342;
                        vec4 _3357;
                        vec3 _3369;
                        vec4 _3385;
                        vec4 _3400;
                        float _3446;
                        bool _3447;
                        for (;;)
                        {
                            uint _3326 = ((_3093 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3315));
                            _3316 = (_3315 + 4294967295u) & _3315;
                            uint _3328 = _3326 * 40u;
                            _3341 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3328)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 3u)).x));
                            _3342 = _3341.w;
                            uint _3344 = (_3326 * 40u) + 4u;
                            _3357 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3344)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 3u)).x));
                            uint _3359 = (_3326 * 40u) + 8u;
                            _3369 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3359)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 2u)).x));
                            uint _3372 = (_3326 * 40u) + 16u;
                            _3385 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3372)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 3u)).x));
                            uint _3387 = (_3326 * 40u) + 20u;
                            _3400 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3387)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 3u)).x));
                            uint _3402 = (_3326 * 40u) + 24u;
                            vec4 _3415 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3402)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 3u)).x));
                            uint _3421 = (_3326 * 40u) + 28u;
                            vec4 _3434 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3421)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 3u)).x));
                            _3446 = fma(_2619, _3434.z, fma(_2618, _3434.y, _3434.x * _2617)) + _3434.w;
                            _3447 = !((fma(_2619, _3415.z, fma(_2618, _3415.y, _3415.x * _2617)) + _3415.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3447)
                            {
                                float _3474 = _3341.x - _2617;
                                float _3475 = _3341.y - _2618;
                                float _3476 = _3341.z - _2619;
                                float _3477 = dot(vec3(_3474, _3475, _3476), vec3(_3474, _3475, _3476));
                                float _3480 = inversesqrt(_3477);
                                float _3481 = _3480 * _3474;
                                float _3482 = _3480 * _3475;
                                float _3483 = _3480 * _3476;
                                float _3487 = 1.0 - (_3477 / (_3342 * _3342));
                                float _4592 = isnan(0.0) ? _3487 : (isnan(_3487) ? 0.0 : max(_3487, 0.0));
                                float _3488 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
                                float _3492 = sqrt(_3477) * _3357.w;
                                float _3494 = 1.39999997615814208984375 / (_3492 + 1.39999997615814208984375);
                                float _3495 = _3494 * _3494;
                                float _3498 = ((1.0 - _3495) * dot(vec3(_3481, _3482, _3483), vec3(_805, _808, _811))) + _3495;
                                float _3501 = _3492 * _3492;
                                float _3505 = (fma(_2619, _3385.z, fma(_2618, _3385.y, _3385.x * _2617)) + _3385.w) / _3446;
                                float _3506 = (fma(_2619, _3400.z, fma(_2618, _3400.y, _3400.x * _2617)) + _3400.w) / _3446;
                                float _3510 = 1.0 - dot(vec2(_3505, _3506), vec2(_3505, _3506));
                                float _4608 = isnan(0.0) ? _3510 : (isnan(_3510) ? 0.0 : max(_3510, 0.0));
                                float _3511 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
                                float _3512 = _3511 * (((isnan(0.0) ? _3498 : (isnan(_3498) ? 0.0 : max(_3498, 0.0))) * _3488) / ((_3501 * 0.699999988079071044921875) + 1.0));
                                float _3524 = exp2(log2(1.0 / ((_3501 * 3.5) + 5.0)) * 0.25);
                                float _3525 = 1.0 - _925;
                                float _3532 = sqrt(1.0 - ((1.0 - (_3525 * _3525)) * (1.0 - (_3524 * _3524))));
                                float _3533 = _3532 * _3532;
                                float _3534 = _3533 * _3533;
                                float _3535 = _3481 - _2953;
                                float _3536 = _3482 - _2954;
                                float _3537 = _3483 - _2955;
                                float _3541 = inversesqrt(dot(vec3(_3535, _3536, _3537), vec3(_3535, _3536, _3537)));
                                float _3545 = dot(vec3(_805, _808, _811), vec3((-0.0) - _2953, (-0.0) - _2954, (-0.0) - _2955));
                                float _4619 = isnan(0.0) ? _3545 : (isnan(_3545) ? 0.0 : max(_3545, 0.0));
                                float _3548 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
                                float _3549 = dot(vec3(_805, _808, _811), vec3(_3541 * _3535, _3541 * _3536, _3541 * _3537));
                                float _4630 = isnan(0.0) ? _3549 : (isnan(_3549) ? 0.0 : max(_3549, 0.0));
                                float _3552 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
                                float _3556 = ((_3552 * _3552) * (_3534 + (-1.0))) + 1.0;
                                float _3557 = _3494 * _3533;
                                float _3558 = _3557 * _3557;
                                float _3564 = ((1.0 - _3558) * dot(vec3(_805, _808, _811), vec3(_3481, _3482, _3483))) + _3558;
                                float _4641 = isnan(0.0) ? _3564 : (isnan(_3564) ? 0.0 : max(_3564, 0.0));
                                float _3565 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
                                float _3566 = 1.0 - _3533;
                                float _3576 = (0.5 / (((_3565 * ((_3548 * _3566) + _3533)) + 9.9999999392252902907785028219223e-09) + (((_3565 * _3566) + _3533) * _3548))) * _3565;
                                float _4652 = isnan(0.0) ? _3576 : (isnan(_3576) ? 0.0 : max(_3576, 0.0));
                                float _3586 = (_3511 * _3488) * (((_3534 * 3.1415927410125732421875) * (isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0)))) / ((_3556 * _3556) * ((_3501 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3512 * _3357.z;
                                frontier_phi_85_pred_1 = _3512 * _3357.y;
                                frontier_phi_85_pred_2 = _3512 * _3357.x;
                                frontier_phi_85_pred_3 = _3586 * _3369.z;
                                frontier_phi_85_pred_4 = _3586 * _3369.y;
                                frontier_phi_85_pred_5 = _3586 * _3369.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3595 = frontier_phi_85_pred;
                            _3594 = frontier_phi_85_pred_1;
                            _3593 = frontier_phi_85_pred_2;
                            _3592 = frontier_phi_85_pred_3;
                            _3591 = frontier_phi_85_pred_4;
                            _3590 = frontier_phi_85_pred_5;
                            _3299 = _3593 + _3312;
                            _3300 = _3594 + _3313;
                            _3301 = _3595 + _3314;
                            _3296 = _3590 + _3309;
                            _3297 = _3591 + _3310;
                            _3298 = _3592 + _3311;
                            if (_3316 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3309 = _3296;
                                _3310 = _3297;
                                _3311 = _3298;
                                _3312 = _3299;
                                _3313 = _3300;
                                _3314 = _3301;
                                _3315 = _3316;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3301;
                        frontier_phi_79_pred_1 = _3300;
                        frontier_phi_79_pred_2 = _3299;
                        frontier_phi_79_pred_3 = _3298;
                        frontier_phi_79_pred_4 = _3297;
                        frontier_phi_79_pred_5 = _3296;
                    }
                    _2938 = frontier_phi_79_pred;
                    _2936 = frontier_phi_79_pred_1;
                    _2934 = frontier_phi_79_pred_2;
                    _2932 = frontier_phi_79_pred_3;
                    _2930 = frontier_phi_79_pred_4;
                    _2928 = frontier_phi_79_pred_5;
                    uint _3094 = _3093 + 1u;
                    if (_3094 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3087 = _2928;
                        _3088 = _2930;
                        _3089 = _2932;
                        _3090 = _2934;
                        _3091 = _2936;
                        _3092 = _2938;
                        _3093 = _3094;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2934;
                frontier_phi_60_61_ladder_1 = _2938;
                frontier_phi_60_61_ladder_2 = _2936;
                frontier_phi_60_61_ladder_3 = _2932;
                frontier_phi_60_61_ladder_4 = _2930;
                frontier_phi_60_61_ladder_5 = _2928;
            }
            else
            {
                frontier_phi_60_61_ladder = _2804;
                frontier_phi_60_61_ladder_1 = _2808;
                frontier_phi_60_61_ladder_2 = _2806;
                frontier_phi_60_61_ladder_3 = _2802;
                frontier_phi_60_61_ladder_4 = _2800;
                frontier_phi_60_61_ladder_5 = _2798;
            }
            _2927 = frontier_phi_60_61_ladder_5;
            _2929 = frontier_phi_60_61_ladder_4;
            _2931 = frontier_phi_60_61_ladder_3;
            _2933 = frontier_phi_60_61_ladder;
            _2935 = frontier_phi_60_61_ladder_2;
            _2937 = frontier_phi_60_61_ladder_1;
        }
        float _2942 = isnan(1.0) ? _909 : (isnan(_909) ? 1.0 : min(_909, 1.0));
        _2675 = (_2942 * _2933) + _2112;
        _2677 = (_2942 * _2935) + _2114;
        _2679 = (_2942 * _2937) + _2116;
        _2681 = ((_2927 * _894) * _2942) + _2457;
        _2683 = ((_2929 * _896) * _2942) + _2459;
        _2685 = ((_2931 * _897) * _2942) + _2461;
    }
    else
    {
        _2675 = _2112;
        _2677 = _2114;
        _2679 = _2116;
        _2681 = _2457;
        _2683 = _2459;
        _2685 = _2461;
    }
    uint _2691 = _838 + uint(cbMatDynParam._m0[0u].w);
    float _2699 = ((cbMtdParam._m0[11u].x * cbMtdParam._m0[22u].z) * _624.x) * cbInstanceData._m0[_2691].x;
    float _2702 = ((cbMtdParam._m0[11u].y * cbMtdParam._m0[22u].z) * _624.y) * cbInstanceData._m0[_2691].y;
    float _2705 = ((cbMtdParam._m0[11u].z * cbMtdParam._m0[22u].z) * _624.z) * cbInstanceData._m0[_2691].z;
    float _4668 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _4679 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _4690 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _2722 = (((isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0))) * (_2675 + ((isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0))) * _909))) + ((_2681 + ((isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0))) * _1750)) * cbPerFrame._m0[3u].x)) + _2699;
    float _2724 = (_2702 + ((_2683 + ((isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0))) * _1750)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0))) * (_2677 + ((isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0))) * _909)));
    float _2726 = (_2705 + ((_2685 + ((isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0))) * _1750)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0))) * (_2679 + ((isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0))) * _909)));
    float _2727 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
    float _2728 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
    float _2729 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
    float _2735 = cbMtdParam._m0[2u].x * _2699;
    float _2736 = cbMtdParam._m0[2u].y * _2702;
    float _2737 = cbMtdParam._m0[2u].z * _2705;
    float _4716 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2739 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
    uint _2740 = _837 + 6u;
    float _2748 = _781 / cbSceneParam._m0[86u].x;
    float _2749 = _782 / cbSceneParam._m0[86u].y;
    vec4 _2763 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2748, _2749, (log2((isnan(cbSceneParam._m0[77u].w) ? _703 : (isnan(_703) ? cbSceneParam._m0[77u].w : min(_703, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2765 = _2763.x;
    float _2766 = _2763.y;
    float _2767 = _2763.z;
    float _2768 = _2763.w;
    float _2860;
    float _2862;
    float _2864;
    float _2866;
    if (_703 > cbSceneParam._m0[78u].w)
    {
        float _2823 = isnan(_703) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _703 : min(cbSceneParam._m0[80u].w, _703));
        float _2824 = _2823 / _703;
        float _2835 = _2824 * _753;
        float _2836 = _754 * _2824;
        float _2837 = (-0.0) - _2836;
        float _2838 = _2824 * _755;
        float _2840 = (cbSceneParam._m0[77u].w * _2837) / _2823;
        float _2841 = _2840 + cbSceneParam._m0[79u].w;
        float _2842 = cbSceneParam._m0[79u].w - _2836;
        float _2848 = sqrt(((_2835 * _2835) + (_2836 * _2836)) + (_2838 * _2838));
        float _2851 = (1.0 - (cbSceneParam._m0[77u].w / _2823)) * _2848;
        float _2856 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2858 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3044;
        if (abs((_2837 - _2840) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3044 = ((((_2841 > 0.0) ? exp2(_2856 * _2841) : (2.0 - exp2(_2858 * _2841))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2851;
        }
        else
        {
            float _2988 = 1.0 / cbSceneParam._m0[80u].x;
            float _2989 = isnan(_2842) ? _2841 : (isnan(_2841) ? _2842 : max(_2841, _2842));
            float _2990 = isnan(_2842) ? _2841 : (isnan(_2841) ? _2842 : min(_2841, _2842));
            float _2999 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : min(_2989, 0.0));
            float _3000 = isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : min(_2990, 0.0));
            _3044 = ((abs(_2848 / _2837) * cbSceneParam._m0[80u].y) * ((((_2999 - _3000) * 2.0) - ((exp2(_2856 * (isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0)))) - exp2(_2856 * (isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : max(_2990, 0.0))))) * _2988)) - ((exp2(_2858 * _2999) - exp2(_2858 * _3000)) * _2988))) + (_2851 * cbSceneParam._m0[80u].z);
        }
        vec4 _3046 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2748, _2749, 1.0), 0.0);
        float _3055 = exp2((_3044 * (-1.44269502162933349609375)) * (1.0 - _3046.w));
        float _3056 = log2(_3055);
        float _3072 = log2(_2768);
        _2860 = (exp2(_3072 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3056 * cbSceneParam._m0[78u].x)) * _3046.x) / cbSceneParam._m0[78u].x)) + _2765;
        _2862 = (exp2(_3072 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3056 * cbSceneParam._m0[78u].y)) * _3046.y) / cbSceneParam._m0[78u].y)) + _2766;
        _2864 = (exp2(_3072 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3056 * cbSceneParam._m0[78u].z)) * _3046.z) / cbSceneParam._m0[78u].z)) + _2767;
        _2866 = _3055 * _2768;
    }
    else
    {
        _2860 = _2765;
        _2862 = _2766;
        _2864 = _2767;
        _2866 = _2768;
    }
    bool _3082;
    vec4 _2876;
    vec4 _2898;
    float _2900;
    float _2904;
    float _2905;
    float _2906;
    float _2909;
    float _2912;
    float _2915;
    float _2916;
    bool _2926;
    for (;;)
    {
        _2876 = cbMatDynParam._m0[0u];
        float _2878 = roundEven(_2876.y);
        bool _2879 = _2878 == 3.0;
        float _2880 = log2(_2866);
        float _2884 = exp2(_2880 * cbSceneParam._m0[78u].x);
        float _2885 = exp2(_2880 * cbSceneParam._m0[78u].y);
        float _2886 = exp2(_2880 * cbSceneParam._m0[78u].z);
        float _2887 = _2884 * _2727;
        float _2888 = _2885 * _2728;
        float _2889 = _2886 * _2729;
        float _2896 = _769 + (-0.5);
        _2898 = cbMtdParam._m0[1u];
        _2900 = _2898.y * _2896;
        float _2903 = (_2878 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2904 = _2903 * (_2879 ? _2887 : (_2887 + (cbSceneParam._m0[72u].w * _2860)));
        _2905 = _2903 * (_2879 ? _2888 : (_2888 + (cbSceneParam._m0[72u].w * _2862)));
        _2906 = _2903 * (_2879 ? _2889 : (_2889 + (cbSceneParam._m0[72u].w * _2864)));
        _2909 = ((_2735 * _2739) * _2884) * _2903;
        _2912 = ((_2736 * _2739) * _2885) * _2903;
        _2915 = ((_2737 * _2739) * _2886) * _2903;
        _2916 = _2896 * 0.999000012874603271484375;
        _2926 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2926)
        {
            if ((cbInstanceData._m0[_837 + 7u].x + _2916) < 0.5)
            {
                _3082 = true;
                break;
            }
        }
        uint _3023 = _838 + uint(_2876.w);
        if ((cbInstanceData._m0[_3023].w < 1.0) && ((cbInstanceData._m0[_3023].w + _2916) < 0.5))
        {
            _3082 = true;
            break;
        }
        if ((_2900 + 1.0) < _2898.x)
        {
            _3082 = true;
            break;
        }
        _3082 = false;
        break;
    }
    float _3287;
    if (_3082)
    {
        discard_state = true;
        _3287 = 0.0;
    }
    else
    {
        _3287 = cbInstanceData._m0[_2740].w;
    }
    SV_Target.x = _2904;
    SV_Target.y = _2905;
    SV_Target.z = _2906;
    SV_Target.w = _3287;
    SV_Target_1.x = _2909;
    SV_Target_1.y = _2912;
    SV_Target_1.z = _2915;
    SV_Target_1.w = cbInstanceData._m0[_2740].w;
    discard_exit();
}


