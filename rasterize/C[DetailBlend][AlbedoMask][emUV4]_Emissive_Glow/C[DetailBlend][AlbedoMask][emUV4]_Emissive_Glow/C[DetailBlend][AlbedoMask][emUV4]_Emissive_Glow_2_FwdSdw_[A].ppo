#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 11) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 12) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1401;
float _4107;
float _4108;
float _4109;
float _4110;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _234 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _241 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _242 = _241 * NORMAL.x;
    float _243 = _241 * NORMAL.y;
    float _244 = _241 * NORMAL.z;
    float _248 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _256;
    float _257;
    float _258;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _256 = (-0.0) - _242;
        _257 = (-0.0) - _243;
        _258 = (-0.0) - _244;
    }
    else
    {
        _256 = _242;
        _257 = _243;
        _258 = _244;
    }
    vec4 _273 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _283 = log2(0.0);
    float _285 = exp2(_283 * cbMtdParam._m0[21u].y);
    float _286 = isnan(0.0) ? _285 : (isnan(_285) ? 0.0 : max(_285, 0.0));
    float _287 = isnan(1.0) ? _286 : (isnan(_286) ? 1.0 : min(_286, 1.0));
    vec4 _301 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _305 = _301.z;
    float _306 = _301.w;
    float _314 = exp2(log2(_305 * cbMtdParam._m0[21u].w) * cbMtdParam._m0[20u].y);
    float _315 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _316 = isnan(1.0) ? _315 : (isnan(_315) ? 1.0 : min(_315, 1.0));
    vec4 _329 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    vec4 _352 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _354 = _352.x;
    float _355 = _352.y;
    float _360 = _354 - ((_354 * _352.z) * cbMtdParam._m0[20u].w);
    bool _396 = _360 >= 0.25;
    bool _401 = _360 >= 0.3499999940395355224609375;
    bool _406 = _360 >= 0.5;
    bool _411 = _360 >= 0.64999997615814208984375;
    bool _416 = _360 >= 0.75;
    vec4 _444 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _454 = cbMtdParam._m0[9u].x * _444.x;
    float _455 = cbMtdParam._m0[9u].y * _444.y;
    float _456 = cbMtdParam._m0[9u].z * _444.z;
    float _463 = (((((((_416 ? cbMtdParam._m0[14u].x : (_411 ? cbMtdParam._m0[19u].x : (_406 ? cbMtdParam._m0[18u].x : (_401 ? cbMtdParam._m0[17u].x : (_396 ? cbMtdParam._m0[16u].x : cbMtdParam._m0[15u].x))))) - cbMtdParam._m0[10u].x) * _355) + cbMtdParam._m0[10u].x) * _329.x) - _454) * _316) + _454;
    float _464 = (((((((_416 ? cbMtdParam._m0[14u].y : (_411 ? cbMtdParam._m0[19u].y : (_406 ? cbMtdParam._m0[18u].y : (_401 ? cbMtdParam._m0[17u].y : (_396 ? cbMtdParam._m0[16u].y : cbMtdParam._m0[15u].y))))) - cbMtdParam._m0[10u].y) * _355) + cbMtdParam._m0[10u].y) * _329.y) - _455) * _316) + _455;
    float _465 = (((((((_416 ? cbMtdParam._m0[14u].z : (_411 ? cbMtdParam._m0[19u].z : (_406 ? cbMtdParam._m0[18u].z : (_401 ? cbMtdParam._m0[17u].z : (_396 ? cbMtdParam._m0[16u].z : cbMtdParam._m0[15u].z))))) - cbMtdParam._m0[10u].z) * _355) + cbMtdParam._m0[10u].z) * _329.z) - _456) * _316) + _456;
    float _472 = exp2(log2(_306) * cbMtdParam._m0[22u].y);
    vec4 _485 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _505 = (((cbMtdParam._m0[12u].x * _485.x) - _463) * _472) + _463;
    float _506 = (((cbMtdParam._m0[12u].y * _485.y) - _464) * _472) + _464;
    float _507 = (((cbMtdParam._m0[12u].z * _485.z) - _465) * _472) + _465;
    vec4 _519 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _543 = (_273.x * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].x * _519.x) - _505) * _287) + _505);
    float _545 = (_273.y * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].y * _519.y) - _506) * _287) + _506);
    float _547 = (_273.z * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].z * _519.z) - _507) * _287) + _507);
    float _552 = exp2(log2(1.0 - _306) * 0.00999999977648258209228515625);
    float _570 = ((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_11, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x - cbMtdParam._m0[22u].w) * _552) + cbMtdParam._m0[22u].w;
    float _589 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w)).x - _570) + cbMtdParam._m0[21u].z) * _472) + _570;
    float _611 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w)).x - _589) + cbMtdParam._m0[23u].w) * _287) + _589;
    vec4 _624 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _642 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _644 = _642.x;
    float _645 = _642.y;
    float _648 = cbMtdParam._m0[20u].x + _642.z;
    float _651 = (((cbMtdParam._m0[21u].x + _624.z) - _648) * _552) + _648;
    vec4 _663 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _675 = (_305 * 2.0) * ((((_663.z - _651) + cbMtdParam._m0[23u].y) * _472) + _651);
    vec4 _687 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _696 = (((_687.z - _675) + cbMtdParam._m0[22u].x) * _287) + _675;
    vec4 _715 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _730 = ((_624.x - _644) * _552) + _644;
    float _731 = ((_624.y - _645) * _552) + _645;
    float _736 = ((_663.x - _730) * _472) + _730;
    float _737 = ((_663.y - _731) * _472) + _731;
    float _746 = ((((_687.x - _736) * _287) + _736) * 2.0) + (-1.0);
    float _747 = ((((_687.y - _737) * _287) + _737) * 2.0) + (-1.0);
    float _748 = dot(vec2(_746, _747), vec2(_746, _747));
    float _4139 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _753 = sqrt(1.0 - (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))));
    float _756 = (cbMtdParam._m0[23u].x * ((_301.x * 2.0) + (-1.0))) + _746;
    float _757 = (cbMtdParam._m0[23u].x * ((_301.y * 2.0) + (-1.0))) + _747;
    float _760 = fma(_753, _256, fma(_757, _248 * TANGENT.x, (_234 * _227) * _756));
    float _763 = fma(_753, _257, fma(_757, _248 * TANGENT.y, (_234 * _228) * _756));
    float _766 = fma(_753, _258, fma(_757, _248 * TANGENT.z, (_234 * _229) * _756));
    float _770 = inversesqrt(dot(vec3(_760, _763, _766), vec3(_760, _763, _766)));
    float _771 = _770 * _760;
    float _772 = _770 * _763;
    float _773 = _770 * _766;
    float _4150 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _774 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
    float _4161 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _4172 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _4183 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _4194 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _778 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
    float _794 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _834 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _844 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _834);
    float _845 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _834);
    float _846 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _834);
    float _850 = inversesqrt(dot(vec3(_844, _845, _846), vec3(_844, _845, _846)));
    float _851 = _844 * _850;
    float _852 = _845 * _850;
    float _853 = _846 * _850;
    vec4 _858 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _860 = _858.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1082 = sqrt(((_844 * _844) + (_845 * _845)) + (_846 * _846));
        float _1088 = (cbMatDynParam._m0[5u].x * _1082) + cbMatDynParam._m0[5u].y;
        float _4205 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _1093 = (cbMatDynParam._m0[5u].z * _1082) + cbMatDynParam._m0[5u].w;
        float _4216 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))) - _1089)) + _1089) < ((_860 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _872 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _873 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _875 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _877 = _875.w;
    float _895 = fma(_773, cbSceneParam._m0[5u].z, fma(_772, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _771));
    float _898 = fma(_773, cbSceneParam._m0[6u].z, fma(_772, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _771));
    float _901 = fma(_773, cbSceneParam._m0[7u].z, fma(_772, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _771));
    vec4 _903 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _914 = (((_903.y - _774) + (_903.w * _774)) * cbMtdParam._m0[3u].x) + _774;
    uint _927 = uint(roundEven(NORMAL.w)) * 13u;
    uint _928 = _927 + 9u;
    uint _929 = _928 + uint(cbMatDynParam._m0[0u].w);
    float _935 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0)))) * cbInstanceData._m0[_929].x;
    float _936 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0)))) * cbInstanceData._m0[_929].y;
    float _937 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0)))) * cbInstanceData._m0[_929].z;
    float _4227 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _938 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
    float _4238 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    float _939 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
    float _4249 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _940 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
    vec4 _941 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _946 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _957 = (((_946.x - _778) + (_946.w * _778)) * cbMtdParam._m0[3u].x) + _778;
    float _970 = (cbMtdParam._m0[3u].x * (((_938 * _877) - _938) + _941.x)) + _938;
    float _971 = (cbMtdParam._m0[3u].x * (((_939 * _877) - _939) + _941.y)) + _939;
    float _972 = (cbMtdParam._m0[3u].x * (((_940 * _877) - _940) + _941.z)) + _940;
    float _973 = 1.0 - _957;
    float _974 = _973 * _970;
    float _975 = _973 * _971;
    float _976 = _973 * _972;
    float _981 = (_970 + (-0.039999999105930328369140625)) * _957;
    float _982 = (_971 + (-0.039999999105930328369140625)) * _957;
    float _983 = (_972 + (-0.039999999105930328369140625)) * _957;
    float _984 = _981 + 0.039999999105930328369140625;
    float _986 = _982 + 0.039999999105930328369140625;
    float _987 = _983 + 0.039999999105930328369140625;
    vec4 _996 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _872, cbSceneParam._m0[86u].y * _873));
    float _999 = _996.x * TEXCOORD_4.z;
    float _1000 = dot(vec3(_771, _772, _773), vec3(_851, _852, _853));
    float _1003 = _1000 * 2.0;
    float _1007 = (_1003 * _771) - _851;
    float _1008 = (_1003 * _772) - _852;
    float _1009 = (_1003 * _773) - _853;
    float _1013 = abs(dot(vec3(_851, _852, _853), vec3(_771, _772, _773)));
    float _4260 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
    float _1015 = sqrt(_914);
    float _1028 = exp2((_1015 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1015 * 3.0));
    float _1034 = (1.0 - _1028) * ((_1015 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1035 = _1028 * _1015;
    float _1063 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1067 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1071 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1400;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1126 = fma(_1071, cbModelParam._m0[26u].z, fma(_1067, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1063));
        float _1130 = fma(_1071, cbModelParam._m0[27u].z, fma(_1067, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1063));
        float _1134 = fma(_1071, cbModelParam._m0[28u].z, fma(_1067, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1063));
        float _1158 = _1063 + _771;
        float _1159 = _1067 + _772;
        float _1160 = _1071 + _773;
        float _1170 = fma(_1160, cbModelParam._m0[26u].z, fma(_1159, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1158)) - _1126;
        float _1171 = fma(_1160, cbModelParam._m0[27u].z, fma(_1159, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1158)) - _1130;
        float _1172 = fma(_1160, cbModelParam._m0[28u].z, fma(_1159, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1158)) - _1134;
        float _1176 = inversesqrt(dot(vec3(_1170, _1171, _1172), vec3(_1170, _1171, _1172)));
        float _1189 = ((_1176 * _1170) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1126 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1190 = ((_1176 * _1171) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1130 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1191 = ((_1176 * _1172) / cbModelParam._m0[34u].z) + ((((((_1134 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1194 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1189, _1190, _1191), 0.0);
        vec4 _1201 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1189, _1190, _1191), 0.0);
        vec4 _1208 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1189, _1190, _1191), 0.0);
        vec4 _1215 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1189, _1190, _1191), 0.0);
        float _1228 = exp2((_1194.w + (-0.5)) * 20.0) * 2.0;
        float _1229 = _1228 * (_1194.x + (-0.5));
        float _1230 = _1228 * (_1194.y + (-0.5));
        float _1231 = _1228 * (_1194.z + (-0.5));
        float _1238 = exp2((_1201.w + (-0.5)) * 20.0) * 2.0;
        float _1239 = _1238 * (_1201.x + (-0.5));
        float _1240 = _1238 * (_1201.y + (-0.5));
        float _1241 = _1238 * (_1201.z + (-0.5));
        float _1248 = exp2((_1208.w + (-0.5)) * 20.0) * 2.0;
        float _1249 = _1248 * (_1208.x + (-0.5));
        float _1250 = _1248 * (_1208.y + (-0.5));
        float _1251 = _1248 * (_1208.z + (-0.5));
        float _1258 = exp2((_1215.w + (-0.5)) * 20.0) * 2.0;
        float _1259 = _1258 * (_1215.x + (-0.5));
        float _1260 = _1258 * (_1215.y + (-0.5));
        float _1261 = _1258 * (_1215.z + (-0.5));
        float _1262 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1263 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1264 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1265 = _1229 * 0.5;
        float _1266 = _1239 * 0.5;
        float _1267 = _1249 * 0.5;
        float _1268 = dot(vec3(_1265, _1266, _1267), vec3(_1265, _1266, _1267));
        float _1273 = (_1268 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1268);
        float _1282 = (dot(vec3(_771, _772, _773), vec3(_1273 * _1265, _1273 * _1266, _1273 * _1267)) + 1.0) * 0.5;
        float _4286 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1292 = sqrt(((_1266 * _1266) + (_1265 * _1265)) + (_1267 * _1267)) / (_1262 + 9.9999997473787516355514526367188e-06);
        float _4297 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
        float _1294 = _1293 * 2.0;
        float _1298 = (1.0 - _1293) / (_1293 + 1.0);
        float _4308 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
        float _1308 = ((((1.0 - _1299) * (_1294 + 2.0)) * exp2(log2(isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0))) * (_1294 + 1.0))) + _1299) * _1262;
        float _1309 = _1230 * 0.5;
        float _1310 = _1240 * 0.5;
        float _1311 = _1250 * 0.5;
        float _1312 = dot(vec3(_1309, _1310, _1311), vec3(_1309, _1310, _1311));
        float _1317 = (_1312 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1312);
        float _1325 = (dot(vec3(_771, _772, _773), vec3(_1317 * _1309, _1317 * _1310, _1317 * _1311)) + 1.0) * 0.5;
        float _4319 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1334 = sqrt(((_1310 * _1310) + (_1309 * _1309)) + (_1311 * _1311)) / (_1263 + 9.9999997473787516355514526367188e-06);
        float _4330 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
        float _1336 = _1335 * 2.0;
        float _1340 = (1.0 - _1335) / (_1335 + 1.0);
        float _4341 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
        float _1350 = ((((1.0 - _1341) * (_1336 + 2.0)) * exp2(log2(isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0))) * (_1336 + 1.0))) + _1341) * _1263;
        float _1351 = _1231 * 0.5;
        float _1352 = _1241 * 0.5;
        float _1353 = _1251 * 0.5;
        float _1354 = dot(vec3(_1351, _1352, _1353), vec3(_1351, _1352, _1353));
        float _1359 = (_1354 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1354);
        float _1367 = (dot(vec3(_771, _772, _773), vec3(_1359 * _1351, _1359 * _1352, _1359 * _1353)) + 1.0) * 0.5;
        float _4352 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1376 = sqrt(((_1352 * _1352) + (_1351 * _1351)) + (_1353 * _1353)) / (_1264 + 9.9999997473787516355514526367188e-06);
        float _4363 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
        float _1378 = _1377 * 2.0;
        float _1382 = (1.0 - _1377) / (_1377 + 1.0);
        float _4374 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1383 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
        float _1392 = ((((1.0 - _1383) * (_1378 + 2.0)) * exp2(log2(isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0))) * (_1378 + 1.0))) + _1383) * _1264;
        _1400 = _1231;
        _1402 = _1230;
        _1403 = _1229;
        _1404 = _1241;
        _1405 = _1240;
        _1406 = _1239;
        _1407 = _1251;
        _1408 = _1250;
        _1409 = _1249;
        _1410 = _1264;
        _1411 = _1263;
        _1412 = _1262;
        _1413 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)));
        _1414 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0)));
        _1415 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0)));
    }
    else
    {
        _1400 = _1401;
        _1402 = _1401;
        _1403 = _1401;
        _1404 = _1401;
        _1405 = _1401;
        _1406 = _1401;
        _1407 = _1401;
        _1408 = _1401;
        _1409 = _1401;
        _1410 = _1401;
        _1411 = _1401;
        _1412 = _1401;
        _1413 = 0.0;
        _1414 = 0.0;
        _1415 = 0.0;
    }
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1444 = fma(_1071, cbModelParam._m0[30u].z, fma(_1067, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1063));
        float _1448 = fma(_1071, cbModelParam._m0[31u].z, fma(_1067, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1063));
        float _1452 = fma(_1071, cbModelParam._m0[32u].z, fma(_1067, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1063));
        float _1475 = _1063 + _771;
        float _1476 = _1067 + _772;
        float _1477 = _1071 + _773;
        float _1487 = fma(_1477, cbModelParam._m0[30u].z, fma(_1476, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1475)) - _1444;
        float _1488 = fma(_1477, cbModelParam._m0[31u].z, fma(_1476, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1475)) - _1448;
        float _1489 = fma(_1477, cbModelParam._m0[32u].z, fma(_1476, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1475)) - _1452;
        float _1493 = inversesqrt(dot(vec3(_1487, _1488, _1489), vec3(_1487, _1488, _1489)));
        float _1506 = ((_1493 * _1487) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1444 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1507 = ((_1493 * _1488) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1448 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1508 = ((_1493 * _1489) / cbModelParam._m0[35u].z) + ((((((_1452 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1510 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1506, _1507, _1508), 0.0);
        vec4 _1517 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1506, _1507, _1508), 0.0);
        vec4 _1524 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1506, _1507, _1508), 0.0);
        vec4 _1531 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1506, _1507, _1508), 0.0);
        float _1543 = exp2((_1510.w + (-0.5)) * 20.0) * 2.0;
        float _1544 = _1543 * (_1510.x + (-0.5));
        float _1545 = _1543 * (_1510.y + (-0.5));
        float _1546 = _1543 * (_1510.z + (-0.5));
        float _1553 = exp2((_1517.w + (-0.5)) * 20.0) * 2.0;
        float _1554 = _1553 * (_1517.x + (-0.5));
        float _1555 = _1553 * (_1517.y + (-0.5));
        float _1556 = _1553 * (_1517.z + (-0.5));
        float _1563 = exp2((_1524.w + (-0.5)) * 20.0) * 2.0;
        float _1564 = _1563 * (_1524.x + (-0.5));
        float _1565 = _1563 * (_1524.y + (-0.5));
        float _1566 = _1563 * (_1524.z + (-0.5));
        float _1573 = exp2((_1531.w + (-0.5)) * 20.0) * 2.0;
        float _1574 = _1573 * (_1531.x + (-0.5));
        float _1575 = _1573 * (_1531.y + (-0.5));
        float _1576 = _1573 * (_1531.z + (-0.5));
        float _1577 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1578 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1579 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1580 = _1544 * 0.5;
        float _1581 = _1554 * 0.5;
        float _1582 = _1564 * 0.5;
        float _1583 = dot(vec3(_1580, _1581, _1582), vec3(_1580, _1581, _1582));
        float _1588 = (_1583 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1583);
        float _1596 = (dot(vec3(_771, _772, _773), vec3(_1588 * _1580, _1588 * _1581, _1588 * _1582)) + 1.0) * 0.5;
        float _4415 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1605 = sqrt(((_1581 * _1581) + (_1580 * _1580)) + (_1582 * _1582)) / (_1577 + 9.9999997473787516355514526367188e-06);
        float _4426 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1606 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
        float _1607 = _1606 * 2.0;
        float _1611 = (1.0 - _1606) / (_1606 + 1.0);
        float _4437 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1612 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
        float _1621 = ((((1.0 - _1612) * (_1607 + 2.0)) * exp2(log2(isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0))) * (_1607 + 1.0))) + _1612) * _1577;
        float _1622 = _1545 * 0.5;
        float _1623 = _1555 * 0.5;
        float _1624 = _1565 * 0.5;
        float _1625 = dot(vec3(_1622, _1623, _1624), vec3(_1622, _1623, _1624));
        float _1630 = (_1625 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1625);
        float _1638 = (dot(vec3(_771, _772, _773), vec3(_1630 * _1622, _1630 * _1623, _1630 * _1624)) + 1.0) * 0.5;
        float _4448 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1647 = sqrt(((_1623 * _1623) + (_1622 * _1622)) + (_1624 * _1624)) / (_1578 + 9.9999997473787516355514526367188e-06);
        float _4459 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1648 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
        float _1649 = _1648 * 2.0;
        float _1653 = (1.0 - _1648) / (_1648 + 1.0);
        float _4470 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1654 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
        float _1663 = ((((1.0 - _1654) * (_1649 + 2.0)) * exp2(log2(isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0))) * (_1649 + 1.0))) + _1654) * _1578;
        float _1664 = _1546 * 0.5;
        float _1665 = _1556 * 0.5;
        float _1666 = _1566 * 0.5;
        float _1667 = dot(vec3(_1664, _1665, _1666), vec3(_1664, _1665, _1666));
        float _1672 = (_1667 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1667);
        float _1680 = (dot(vec3(_771, _772, _773), vec3(_1672 * _1664, _1672 * _1665, _1672 * _1666)) + 1.0) * 0.5;
        float _4481 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1689 = sqrt(((_1665 * _1665) + (_1664 * _1664)) + (_1666 * _1666)) / (_1579 + 9.9999997473787516355514526367188e-06);
        float _4492 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1690 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
        float _1691 = _1690 * 2.0;
        float _1695 = (1.0 - _1690) / (_1690 + 1.0);
        float _4503 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
        float _1696 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
        float _1705 = ((((1.0 - _1696) * (_1691 + 2.0)) * exp2(log2(isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0))) * (_1691 + 1.0))) + _1696) * _1579;
        _1713 = _1546;
        _1714 = _1545;
        _1715 = _1544;
        _1716 = _1556;
        _1717 = _1555;
        _1718 = _1554;
        _1719 = _1566;
        _1720 = _1565;
        _1721 = _1564;
        _1722 = _1579;
        _1723 = _1578;
        _1724 = _1577;
        _1725 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0)));
        _1726 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0)));
        _1727 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0)));
    }
    else
    {
        _1713 = _1401;
        _1714 = _1401;
        _1715 = _1401;
        _1716 = _1401;
        _1717 = _1401;
        _1718 = _1401;
        _1719 = _1401;
        _1720 = _1401;
        _1721 = _1401;
        _1722 = _1401;
        _1723 = _1401;
        _1724 = _1401;
        _1725 = 0.0;
        _1726 = 0.0;
        _1727 = 0.0;
    }
    float _1737 = (cbModelParam._m0[1u].x * (_1725 - _1413)) + _1413;
    float _1738 = (cbModelParam._m0[1u].x * (_1726 - _1414)) + _1414;
    float _1739 = (cbModelParam._m0[1u].x * (_1727 - _1415)) + _1415;
    float _1760 = fma(_1739, cbSceneParam._m0[89u].z, fma(_1738, cbSceneParam._m0[89u].y, _1737 * cbSceneParam._m0[89u].x));
    float _1763 = fma(_1739, cbSceneParam._m0[90u].z, fma(_1738, cbSceneParam._m0[90u].y, _1737 * cbSceneParam._m0[90u].x));
    float _1766 = fma(_1739, cbSceneParam._m0[91u].z, fma(_1738, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1737));
    float _1781 = _1007 * 0.5;
    float _1782 = _1008 * 0.5;
    float _1783 = _1009 * 0.5;
    float _1784 = dot(vec4(_1781, _1782, _1783, 1.0), vec4(_1715, _1718, _1721, _1724));
    float _1787 = dot(vec4(_1781, _1782, _1783, 1.0), vec4(_1714, _1717, _1720, _1723));
    float _1790 = dot(vec4(_1781, _1782, _1783, 1.0), vec4(_1713, _1716, _1719, _1722));
    float _1824;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1797 = dot(vec4(_1781, _1782, _1783, 1.0), vec4(_1400, _1404, _1407, _1410));
        float _1801 = dot(vec4(_1781, _1782, _1783, 1.0), vec4(_1402, _1405, _1408, _1411));
        float _1805 = dot(vec4(_1781, _1782, _1783, 1.0), vec4(_1403, _1406, _1409, _1412));
        float _1812 = dot(vec4(cbModelParam._m0[39u]), vec4(_1781, _1782, _1783, 1.0));
        _1824 = dot(vec3(isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0)), isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0)), isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1812) ? 0.0 : (isnan(0.0) ? _1812 : max(0.0, _1812))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1824 = 1.0;
    }
    float _1835;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1826 = dot(vec4(cbModelParam._m0[40u]), vec4(_1781, _1782, _1783, 1.0));
        _1835 = dot(vec3(isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0)), isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0)), isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1826) ? 0.0 : (isnan(0.0) ? _1826 : max(0.0, _1826))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1835 = 1.0;
    }
    float _1839 = (_1835 * cbModelParam._m0[1u].x) + (_1824 * (1.0 - cbModelParam._m0[1u].x));
    float _1849 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _914);
    float _1850 = isnan(_1849) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1849 : min(cbModelParam._m0[25u].z, _1849));
    float _1930;
    float _1932;
    float _1934;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1897 = fma(_1071, cbModelParam._m0[13u].z, fma(_1067, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1063)) + cbModelParam._m0[13u].w;
        float _1901 = fma(_1071, cbModelParam._m0[14u].z, fma(_1067, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1063)) + cbModelParam._m0[14u].w;
        float _1905 = fma(_1071, cbModelParam._m0[15u].z, fma(_1067, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1063)) + cbModelParam._m0[15u].w;
        float _1908 = fma(_1009, cbModelParam._m0[13u].z, fma(_1008, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1007));
        float _1911 = fma(_1009, cbModelParam._m0[14u].z, fma(_1008, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1007));
        float _1914 = fma(_1009, cbModelParam._m0[15u].z, fma(_1008, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1007));
        float _1942;
        if (_1908 > 0.0)
        {
            _1942 = abs((1.0 - _1897) / _1908);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1908 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1897 + 1.0) / _1908);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1942 = frontier_phi_19_17_ladder;
        }
        float _2113;
        if (_1911 > 0.0)
        {
            _2113 = abs((1.0 - _1901) / _1911);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1911 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1901 + 1.0) / _1911);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2113 = frontier_phi_28_24_ladder;
        }
        float _2407;
        if (_1914 > 0.0)
        {
            _2407 = abs((1.0 - _1905) / _1914);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1914 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1905 + 1.0) / _1914);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2407 = frontier_phi_40_35_ladder;
        }
        float _2409 = isnan(_2113) ? _1942 : (isnan(_1942) ? _2113 : min(_1942, _2113));
        float _2410 = isnan(_2407) ? _2409 : (isnan(_2409) ? _2407 : min(_2409, _2407));
        float _2414 = (_2410 * _1908) + _1897;
        float _2415 = (_2410 * _1911) + _1901;
        float _2416 = (_2410 * _1914) + _1905;
        float _2417 = _2410 * 9.9999997473787516355514526367188e-05;
        float _2419 = (-1.0) - _2417;
        float _2421 = _2417 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2416 > _2421) || ((_2416 < _2419) || ((_2415 > _2421) || ((_2415 < _2419) || ((_2414 < _2419) || (_2414 > _2421))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2561 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2416, cbModelParam._m0[9u].z, fma(_2415, cbModelParam._m0[9u].y, _2414 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2416, cbModelParam._m0[10u].z, fma(_2415, cbModelParam._m0[10u].y, _2414 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2416, cbModelParam._m0[11u].z, fma(_2415, cbModelParam._m0[11u].y, _2414 * cbModelParam._m0[11u].x))), _1850);
            frontier_phi_18_40_ladder = _2561.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2561.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2561.x * cbModelParam._m0[1u].y;
        }
        _1930 = frontier_phi_18_40_ladder_2;
        _1932 = frontier_phi_18_40_ladder_1;
        _1934 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1918 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1007, _1008, _1009), _1850);
        _1930 = _1918.x * cbModelParam._m0[1u].y;
        _1932 = _1918.y * cbModelParam._m0[1u].y;
        _1934 = _1918.z * cbModelParam._m0[1u].y;
    }
    float _1938 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _914);
    float _1939 = isnan(_1938) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1938 : min(cbModelParam._m0[25u].w, _1938));
    float _2028;
    float _2030;
    float _2032;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1992 = fma(_1071, cbModelParam._m0[21u].z, fma(_1067, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1063)) + cbModelParam._m0[21u].w;
        float _1996 = fma(_1071, cbModelParam._m0[22u].z, fma(_1067, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1063)) + cbModelParam._m0[22u].w;
        float _2000 = fma(_1071, cbModelParam._m0[23u].z, fma(_1067, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1063)) + cbModelParam._m0[23u].w;
        float _2003 = fma(_1009, cbModelParam._m0[21u].z, fma(_1008, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1007));
        float _2006 = fma(_1009, cbModelParam._m0[22u].z, fma(_1008, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1007));
        float _2009 = fma(_1009, cbModelParam._m0[23u].z, fma(_1008, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1007));
        float _2118;
        if (_2003 > 0.0)
        {
            _2118 = abs((1.0 - _1992) / _2003);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2003 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1992 + 1.0) / _2003);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2118 = frontier_phi_30_26_ladder;
        }
        float _2434;
        if (_2006 > 0.0)
        {
            _2434 = abs((1.0 - _1996) / _2006);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2006 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1996 + 1.0) / _2006);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2434 = frontier_phi_42_37_ladder;
        }
        float _2772;
        if (_2009 > 0.0)
        {
            _2772 = abs((1.0 - _2000) / _2009);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_2009 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_2000 + 1.0) / _2009);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2772 = frontier_phi_52_49_ladder;
        }
        float _2774 = isnan(_2434) ? _2118 : (isnan(_2118) ? _2434 : min(_2118, _2434));
        float _2775 = isnan(_2772) ? _2774 : (isnan(_2774) ? _2772 : min(_2774, _2772));
        float _2779 = (_2775 * _2003) + _1992;
        float _2780 = (_2775 * _2006) + _1996;
        float _2781 = (_2775 * _2009) + _2000;
        float _2782 = _2775 * 9.9999997473787516355514526367188e-05;
        float _2783 = (-1.0) - _2782;
        float _2785 = _2782 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2781 > _2785) || ((_2781 < _2783) || ((_2780 > _2785) || ((_2780 < _2783) || ((_2779 < _2783) || (_2779 > _2785))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2903 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2781, cbModelParam._m0[17u].z, fma(_2780, cbModelParam._m0[17u].y, _2779 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2781, cbModelParam._m0[18u].z, fma(_2780, cbModelParam._m0[18u].y, _2779 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2781, cbModelParam._m0[19u].z, fma(_2780, cbModelParam._m0[19u].y, _2779 * cbModelParam._m0[19u].x))), _1939);
            frontier_phi_27_52_ladder = _2903.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2903.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2903.x * cbModelParam._m0[1u].z;
        }
        _2028 = frontier_phi_27_52_ladder_2;
        _2030 = frontier_phi_27_52_ladder_1;
        _2032 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _2012 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1007, _1008, _1009), _1939);
        _2028 = _2012.x * cbModelParam._m0[1u].z;
        _2030 = _2012.y * cbModelParam._m0[1u].z;
        _2032 = _2012.z * cbModelParam._m0[1u].z;
    }
    float _2045 = (((_1034 * _984) + _1035) * _999) * ((cbModelParam._m0[1u].w * (_2028 - _1930)) + _1930);
    float _2047 = (((_1034 * _986) + _1035) * _999) * ((cbModelParam._m0[1u].w * (_2030 - _1932)) + _1932);
    float _2049 = (((_1034 * _987) + _1035) * _999) * ((cbModelParam._m0[1u].w * (_2032 - _1934)) + _1934);
    float _2052 = fma(_2049, cbSceneParam._m0[89u].z, fma(_2047, cbSceneParam._m0[89u].y, _2045 * cbSceneParam._m0[89u].x));
    float _2055 = fma(_2049, cbSceneParam._m0[90u].z, fma(_2047, cbSceneParam._m0[90u].y, _2045 * cbSceneParam._m0[90u].x));
    float _2058 = fma(_2049, cbSceneParam._m0[91u].z, fma(_2047, cbSceneParam._m0[91u].y, _2045 * cbSceneParam._m0[91u].x));
    float _2092 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2096 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2100 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2104 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2105 = _2092 / _2104;
    float _2106 = _2096 / _2104;
    float _2107 = _2100 / _2104;
    float _2253;
    float _2254;
    float _2255;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2134 = ((uint(_2107 > cbSceneParam._m0[59u].y) + uint(_2107 > cbSceneParam._m0[59u].x)) + uint(_2107 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2135 = _2134 + 43u;
        uint _2143 = _2134 + 44u;
        uint _2151 = _2134 + 45u;
        uint _2159 = _2134 + 46u;
        float _2170 = fma(_2104, cbSceneParam._m0[_2135].w, fma(_2100, cbSceneParam._m0[_2135].z, fma(_2096, cbSceneParam._m0[_2135].y, _2092 * cbSceneParam._m0[_2135].x)));
        float _2174 = fma(_2104, cbSceneParam._m0[_2143].w, fma(_2100, cbSceneParam._m0[_2143].z, fma(_2096, cbSceneParam._m0[_2143].y, _2092 * cbSceneParam._m0[_2143].x)));
        float _2182 = fma(_2104, cbSceneParam._m0[_2159].w, fma(_2100, cbSceneParam._m0[_2159].z, fma(_2096, cbSceneParam._m0[_2159].y, _2092 * cbSceneParam._m0[_2159].x)));
        float _2187 = cbSceneParam._m0[33u].z * _2182;
        float _2189 = cbSceneParam._m0[33u].w * _2182;
        float _2192 = fma(_2104, cbSceneParam._m0[_2151].w, fma(_2100, cbSceneParam._m0[_2151].z, fma(_2096, cbSceneParam._m0[_2151].y, _2092 * cbSceneParam._m0[_2151].x))) / _2182;
        float _2239 = (cbSceneParam._m0[33u].x - sqrt(((_2106 * _2106) + (_2105 * _2105)) + (_2107 * _2107))) * cbSceneParam._m0[33u].y;
        float _4629 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
        float _2246 = (isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2187 + _2170) / _2182, (_2189 + _2174) / _2182), _2192), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2189 + _2170) / _2182, (_2174 - _2187) / _2182), _2192), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2170 - _2187) / _2182, (_2174 - _2189) / _2182), _2192), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2170 - _2189) / _2182, (_2187 + _2174) / _2182), _2192), 0.0)).x), vec4(0.25)));
        _2253 = 1.0 - (_2246 * cbSceneParam._m0[34u].x);
        _2254 = 1.0 - (_2246 * cbSceneParam._m0[34u].y);
        _2255 = 1.0 - (_2246 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2253 = 1.0;
        _2254 = 1.0;
        _2255 = 1.0;
    }
    float _2319;
    float _2321;
    float _2323;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2307 = fma(_2104, cbSceneParam._m0[63u].w, fma(_2100, cbSceneParam._m0[63u].z, fma(_2096, cbSceneParam._m0[63u].y, _2092 * cbSceneParam._m0[63u].x)));
        float _2308 = fma(_2104, cbSceneParam._m0[60u].w, fma(_2100, cbSceneParam._m0[60u].z, fma(_2096, cbSceneParam._m0[60u].y, _2092 * cbSceneParam._m0[60u].x))) / _2307;
        float _2309 = fma(_2104, cbSceneParam._m0[61u].w, fma(_2100, cbSceneParam._m0[61u].z, fma(_2096, cbSceneParam._m0[61u].y, _2092 * cbSceneParam._m0[61u].x))) / _2307;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2308 >= cbSceneParam._m0[64u].x) && (_2309 >= cbSceneParam._m0[64u].y)) && (_2308 <= cbSceneParam._m0[64u].z)) && (_2309 <= cbSceneParam._m0[64u].w))
        {
            float _2447 = fma(_2104, cbSceneParam._m0[62u].w, fma(_2100, cbSceneParam._m0[62u].z, fma(_2096, cbSceneParam._m0[62u].y, _2092 * cbSceneParam._m0[62u].x))) / _2307;
            float _2451 = isnan(cbSceneParam._m0[41u].w) ? _2447 : (isnan(_2447) ? cbSceneParam._m0[41u].w : max(_2447, cbSceneParam._m0[41u].w));
            float _2494 = (cbSceneParam._m0[33u].x - sqrt(((_2106 * _2106) + (_2105 * _2105)) + (_2107 * _2107))) * cbSceneParam._m0[33u].y;
            float _4645 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
            float _2501 = (isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2308, cbSceneParam._m0[33u].w + _2309), _2451), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2308, _2309 - cbSceneParam._m0[33u].z), _2451), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2308 - cbSceneParam._m0[33u].z, _2309 - cbSceneParam._m0[33u].w), _2451), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2308 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2309), _2451), 0.0)).x), vec4(0.25)));
            float _2505 = 1.0 - (_2501 * cbSceneParam._m0[34u].x);
            float _2506 = 1.0 - (_2501 * cbSceneParam._m0[34u].y);
            float _2507 = 1.0 - (_2501 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2506) ? _2254 : (isnan(_2254) ? _2506 : min(_2254, _2506));
            frontier_phi_39_38_ladder_1 = isnan(_2505) ? _2253 : (isnan(_2253) ? _2505 : min(_2253, _2505));
            frontier_phi_39_38_ladder_2 = isnan(_2507) ? _2255 : (isnan(_2255) ? _2507 : min(_2255, _2507));
        }
        else
        {
            frontier_phi_39_38_ladder = _2254;
            frontier_phi_39_38_ladder_1 = _2253;
            frontier_phi_39_38_ladder_2 = _2255;
        }
        _2319 = frontier_phi_39_38_ladder_1;
        _2321 = frontier_phi_39_38_ladder;
        _2323 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2319 = _2253;
        _2321 = _2254;
        _2323 = _2255;
    }
    uvec4 _2328 = floatBitsToUint(cbInstanceData._m0[_927 + 5u]);
    uint _2330 = _2328.x * 14u;
    uint _2331 = _2330 + 13u;
    float _2338 = _999 + (-1.0);
    float _2343 = (cbLight._m0[_2331].x * _2338) + 1.0;
    float _2344 = (cbLight._m0[_2331].y * _2338) + 1.0;
    float _2345 = (cbLight._m0[_2331].z * _2338) + 1.0;
    float _2346 = (cbLight._m0[_2331].w * _2338) + 1.0;
    uint _2347 = _2330 + 5u;
    float _2353 = isnan(1.0) ? _2344 : (isnan(_2344) ? 1.0 : min(_2344, 1.0));
    uint _2357 = _2330 + 4u;
    float _2366 = isnan(1.0) ? _2343 : (isnan(_2343) ? 1.0 : min(_2343, 1.0));
    uint _2370 = _2330 | 1u;
    float _2381 = dot(vec3(cbLight._m0[_2330].xyz), vec3(_771, _772, _773));
    float _2384 = dot(vec3(cbLight._m0[_2370].xyz), vec3(_771, _772, _773));
    float _4681 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
    float _4692 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
    float _2389 = (isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0))) * 0.3183098733425140380859375;
    float _2391 = (isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0))) * 0.3183098733425140380859375;
    float _2398 = ((cbLight._m0[_2347].x * _2353) * _2391) + (((cbLight._m0[_2357].x * _2319) * _2366) * _2389);
    float _2399 = ((_2353 * cbLight._m0[_2347].y) * _2391) + (((cbLight._m0[_2357].y * _2321) * _2366) * _2389);
    float _2400 = ((_2353 * cbLight._m0[_2347].z) * _2391) + (((cbLight._m0[_2357].z * _2323) * _2366) * _2389);
    uvec4 _2404 = floatBitsToUint(cbLight._m0[_2330 + 12u]);
    bool _2406 = _2404.x == 0u;
    float _2508;
    float _2510;
    float _2512;
    if (_2406)
    {
        _2508 = _2398;
        _2510 = _2399;
        _2512 = _2400;
    }
    else
    {
        uint _2516 = _2330 + 6u;
        float _2532 = (dot(vec3(cbLight._m0[_2330 + 2u].xyz), vec3(_771, _772, _773)) * 0.5) + 0.5;
        float _2533 = _2532 * _2532;
        float _4703 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
        float _2534 = isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0));
        float _2535 = isnan(1.0) ? _2345 : (isnan(_2345) ? 1.0 : min(_2345, 1.0));
        _2508 = (((cbLight._m0[_2516].x * 0.3183098733425140380859375) * _2534) * _2535) + _2398;
        _2510 = (((cbLight._m0[_2516].y * 0.3183098733425140380859375) * _2534) * _2535) + _2399;
        _2512 = (((cbLight._m0[_2516].z * 0.3183098733425140380859375) * _2534) * _2535) + _2400;
    }
    bool _2515 = _2404.y == 0u;
    float _2570;
    float _2572;
    float _2574;
    if (_2515)
    {
        _2570 = _2508;
        _2572 = _2510;
        _2574 = _2512;
    }
    else
    {
        uint _2743 = _2330 + 7u;
        float _2759 = (dot(vec3(cbLight._m0[_2330 + 3u].xyz), vec3(_771, _772, _773)) * 0.5) + 0.5;
        float _2760 = _2759 * _2759;
        float _4719 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
        float _2761 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
        float _2762 = isnan(1.0) ? _2346 : (isnan(_2346) ? 1.0 : min(_2346, 1.0));
        _2570 = (((cbLight._m0[_2743].x * 0.3183098733425140380859375) * _2761) * _2762) + _2508;
        _2572 = (((cbLight._m0[_2743].y * 0.3183098733425140380859375) * _2761) * _2762) + _2510;
        _2574 = (((cbLight._m0[_2743].z * 0.3183098733425140380859375) * _2761) * _2762) + _2512;
    }
    uint _2577 = _2330 + 8u;
    float _2590 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2330].w)) * _914) * 0.949999988079071044921875);
    float _2591 = _2590 * _2590;
    float _2592 = cbLight._m0[_2330].x + _851;
    float _2593 = cbLight._m0[_2330].y + _852;
    float _2594 = cbLight._m0[_2330].z + _853;
    float _2598 = inversesqrt(dot(vec3(_2592, _2593, _2594), vec3(_2592, _2593, _2594)));
    float _2599 = _2598 * _2592;
    float _2600 = _2598 * _2593;
    float _2601 = _2598 * _2594;
    float _2602 = dot(vec3(_771, _772, _773), vec3(cbLight._m0[_2330].xyz));
    float _4735 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
    float _2605 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
    float _4746 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _2606 = isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0));
    float _2607 = dot(vec3(_771, _772, _773), vec3(_2599, _2600, _2601));
    float _4757 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
    float _2610 = isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0));
    float _2611 = dot(vec3(cbLight._m0[_2330].xyz), vec3(_2599, _2600, _2601));
    float _4768 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
    float _2615 = _2591 * _2591;
    float _2619 = ((_2610 * _2610) * (_2615 + (-1.0))) + 1.0;
    float _2627 = exp2(log2(1.0 - (isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0)))) * 5.0);
    float _2628 = 0.959999978542327880859375 - _981;
    float _2630 = 0.959999978542327880859375 - _982;
    float _2631 = 0.959999978542327880859375 - _983;
    float _2638 = 1.0 - _2591;
    float _2649 = (0.5 / (((_2606 * ((_2605 * _2638) + _2591)) + 9.9999999392252902907785028219223e-09) + (((_2606 * _2638) + _2591) * _2605))) * _2605;
    float _4779 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
    float _2651 = (isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0))) * (_2615 / ((_2619 * _2619) * 3.141590118408203125));
    uint _2665 = _2330 + 9u;
    float _2676 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2370].w)) * _914) * 0.949999988079071044921875);
    float _2677 = _2676 * _2676;
    float _2678 = cbLight._m0[_2370].x + _851;
    float _2679 = cbLight._m0[_2370].y + _852;
    float _2680 = cbLight._m0[_2370].z + _853;
    float _2684 = inversesqrt(dot(vec3(_2678, _2679, _2680), vec3(_2678, _2679, _2680)));
    float _2685 = _2684 * _2678;
    float _2686 = _2684 * _2679;
    float _2687 = _2684 * _2680;
    float _2688 = dot(vec3(_771, _772, _773), vec3(cbLight._m0[_2370].xyz));
    float _4790 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
    float _2691 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
    float _2692 = dot(vec3(_771, _772, _773), vec3(_2685, _2686, _2687));
    float _4801 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
    float _2695 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
    float _2696 = dot(vec3(cbLight._m0[_2370].xyz), vec3(_2685, _2686, _2687));
    float _4812 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
    float _2700 = _2677 * _2677;
    float _2704 = ((_2695 * _2695) * (_2700 + (-1.0))) + 1.0;
    float _2711 = exp2(log2(1.0 - (isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0)))) * 5.0);
    float _2718 = 1.0 - _2677;
    float _2728 = (0.5 / (((_2606 * ((_2691 * _2718) + _2677)) + 9.9999999392252902907785028219223e-09) + (((_2606 * _2718) + _2677) * _2691))) * _2691;
    float _4823 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
    float _2730 = (isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0))) * (_2700 / ((_2704 * _2704) * 3.141590118408203125));
    float _2740 = (((((_2711 * _2628) + _984) * cbLight._m0[_2665].x) * _2730) * _2353) + ((((cbLight._m0[_2577].x * _2319) * ((_2627 * _2628) + _984)) * _2651) * _2366);
    float _2741 = (((((_2711 * _2630) + _986) * cbLight._m0[_2665].y) * _2730) * _2353) + ((((cbLight._m0[_2577].y * _2321) * ((_2627 * _2630) + _986)) * _2651) * _2366);
    float _2742 = (((((_2711 * _2631) + _987) * cbLight._m0[_2665].z) * _2730) * _2353) + ((((cbLight._m0[_2577].z * _2323) * ((_2627 * _2631) + _987)) * _2651) * _2366);
    float _2798;
    float _2800;
    float _2802;
    if (_2406)
    {
        _2798 = _2740;
        _2800 = _2741;
        _2802 = _2742;
    }
    else
    {
        uint _2804 = _2330 + 2u;
        uint _2808 = _2330 + 10u;
        float _2822 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2804].w)) * _914) * 0.949999988079071044921875);
        float _2823 = _2822 * _2822;
        float _2824 = cbLight._m0[_2804].x + _851;
        float _2825 = cbLight._m0[_2804].y + _852;
        float _2826 = cbLight._m0[_2804].z + _853;
        float _2830 = inversesqrt(dot(vec3(_2824, _2825, _2826), vec3(_2824, _2825, _2826)));
        float _2831 = _2830 * _2824;
        float _2832 = _2830 * _2825;
        float _2833 = _2830 * _2826;
        float _2834 = dot(vec3(_771, _772, _773), vec3(cbLight._m0[_2804].xyz));
        float _4834 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0));
        float _2837 = isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0));
        float _2838 = dot(vec3(_771, _772, _773), vec3(_2831, _2832, _2833));
        float _4845 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0));
        float _2841 = isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0));
        float _2842 = dot(vec3(cbLight._m0[_2804].xyz), vec3(_2831, _2832, _2833));
        float _4856 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
        float _2846 = _2823 * _2823;
        float _2850 = ((_2841 * _2841) * (_2846 + (-1.0))) + 1.0;
        float _2857 = exp2(log2(1.0 - (isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0)))) * 5.0);
        float _2864 = 1.0 - _2823;
        float _2874 = (0.5 / (((_2606 * ((_2837 * _2864) + _2823)) + 9.9999999392252902907785028219223e-09) + (((_2606 * _2864) + _2823) * _2837))) * _2837;
        float _4867 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0));
        float _2876 = (isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0))) * (_2846 / ((_2850 * _2850) * 3.141590118408203125));
        float _2877 = isnan(1.0) ? _2345 : (isnan(_2345) ? 1.0 : min(_2345, 1.0));
        _2798 = (((((_2857 * _2628) + _984) * cbLight._m0[_2808].x) * _2876) * _2877) + _2740;
        _2800 = (((((_2857 * _2630) + _986) * cbLight._m0[_2808].y) * _2876) * _2877) + _2741;
        _2802 = (((((_2857 * _2631) + _987) * cbLight._m0[_2808].z) * _2876) * _2877) + _2742;
    }
    float _2908;
    float _2910;
    float _2912;
    if (_2515)
    {
        _2908 = _2798;
        _2910 = _2800;
        _2912 = _2802;
    }
    else
    {
        uint _2919 = _2330 + 3u;
        uint _2923 = _2330 + 11u;
        float _2937 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2919].w)) * _914) * 0.949999988079071044921875);
        float _2938 = _2937 * _2937;
        float _2939 = cbLight._m0[_2919].x + _851;
        float _2940 = cbLight._m0[_2919].y + _852;
        float _2941 = cbLight._m0[_2919].z + _853;
        float _2945 = inversesqrt(dot(vec3(_2939, _2940, _2941), vec3(_2939, _2940, _2941)));
        float _2946 = _2945 * _2939;
        float _2947 = _2945 * _2940;
        float _2948 = _2945 * _2941;
        float _2949 = dot(vec3(_771, _772, _773), vec3(cbLight._m0[_2919].xyz));
        float _4883 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0));
        float _2952 = isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0));
        float _2953 = dot(vec3(_771, _772, _773), vec3(_2946, _2947, _2948));
        float _4894 = isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0));
        float _2956 = isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0));
        float _2957 = dot(vec3(cbLight._m0[_2919].xyz), vec3(_2946, _2947, _2948));
        float _4905 = isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0));
        float _2961 = _2938 * _2938;
        float _2965 = ((_2956 * _2956) * (_2961 + (-1.0))) + 1.0;
        float _2972 = exp2(log2(1.0 - (isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0)))) * 5.0);
        float _2979 = 1.0 - _2938;
        float _2989 = (0.5 / (((_2606 * ((_2952 * _2979) + _2938)) + 9.9999999392252902907785028219223e-09) + (((_2606 * _2979) + _2938) * _2952))) * _2952;
        float _4916 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0));
        float _2991 = (isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0))) * (_2961 / ((_2965 * _2965) * 3.141590118408203125));
        float _2992 = isnan(1.0) ? _2346 : (isnan(_2346) ? 1.0 : min(_2346, 1.0));
        _2908 = (((((_2972 * _2628) + _984) * cbLight._m0[_2923].x) * _2991) * _2992) + _2798;
        _2910 = (((((_2972 * _2630) + _986) * cbLight._m0[_2923].y) * _2991) * _2992) + _2800;
        _2912 = (((((_2972 * _2631) + _987) * cbLight._m0[_2923].z) * _2991) * _2992) + _2802;
    }
    float _3057;
    float _3059;
    float _3061;
    float _3063;
    float _3065;
    float _3067;
    if (_2328.y == 0u)
    {
        uvec4 _3013 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3014 = _3013.x;
        uint _3025 = uint((float(_3013.y) * floor(float(uint(cbSceneParam._m0[85u].y * _873) / _3014))) + floor(float(uint(cbSceneParam._m0[85u].x * _872) / _3014)));
        float _3035 = (log2(_2107 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3036 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0));
        uint _3039 = uint(isnan(14.0) ? _3036 : (isnan(_3036) ? 14.0 : min(_3036, 14.0)));
        uvec4 _3044 = texelFetch(g_lightClusterGridBuffer, int(((_3039 << 2u) + (_3025 << 6u)) >> 2u));
        uint _3045 = _3044.x;
        uint _3046 = _3013.z;
        float _3159;
        float _3161;
        float _3163;
        float _3165;
        float _3167;
        float _3169;
        if (((((1u << ((_3046 >> 4u) & 15u)) + 4294967295u) & _3045) == 0u) || ((_3046 & 240u) == 0u))
        {
            _3159 = 0.0;
            _3161 = 0.0;
            _3163 = 0.0;
            _3165 = 0.0;
            _3167 = 0.0;
            _3169 = 0.0;
        }
        else
        {
            float _3160;
            float _3162;
            float _3164;
            float _3166;
            float _3168;
            float _3170;
            float _3320 = 0.0;
            float _3321 = 0.0;
            float _3322 = 0.0;
            float _3323 = 0.0;
            float _3324 = 0.0;
            float _3325 = 0.0;
            uint _3326 = 0u;
            uint _3335;
            bool _3336;
            for (;;)
            {
                _3335 = texelFetch(g_lightClassification, int((((_3039 << 5u) + (_3025 << 9u)) + (_3326 << 2u)) >> 2u)).x;
                _3336 = _3335 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3336)
                {
                    frontier_phi_73_pred = _3325;
                    frontier_phi_73_pred_1 = _3324;
                    frontier_phi_73_pred_2 = _3323;
                    frontier_phi_73_pred_3 = _3322;
                    frontier_phi_73_pred_4 = _3321;
                    frontier_phi_73_pred_5 = _3320;
                }
                else
                {
                    float _3465;
                    float _3466;
                    float _3467;
                    float _3468;
                    float _3469;
                    float _3470;
                    uint _3471;
                    _3465 = _3320;
                    _3466 = _3321;
                    _3467 = _3322;
                    _3468 = _3323;
                    _3469 = _3324;
                    _3470 = _3325;
                    _3471 = _3335;
                    float _3392;
                    float _3393;
                    float _3394;
                    float _3395;
                    float _3396;
                    float _3397;
                    for (;;)
                    {
                        uint _3475 = uint(findLSB(_3471)) + (_3326 << 5u);
                        uint _3472 = (_3471 + 4294967295u) & _3471;
                        uint _3477 = _3475 * 48u;
                        vec4 _3491 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3477)).x, texelFetch(g_PointLightRenderingBuffer, int(_3477 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3477 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3477 + 3u)).x));
                        uint _3497 = (_3475 * 48u) + 4u;
                        vec4 _3510 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3497)).x, texelFetch(g_PointLightRenderingBuffer, int(_3497 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3497 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3497 + 3u)).x));
                        uint _3516 = (_3475 * 48u) + 8u;
                        vec3 _3527 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3516)).x, texelFetch(g_PointLightRenderingBuffer, int(_3516 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3516 + 2u)).x));
                        float _3531 = _3491.x - _2105;
                        float _3532 = _3491.y - _2106;
                        float _3533 = _3491.z - _2107;
                        float _3534 = dot(vec3(_3531, _3532, _3533), vec3(_3531, _3532, _3533));
                        float _3537 = inversesqrt(_3534);
                        float _3538 = _3537 * _3531;
                        float _3539 = _3537 * _3532;
                        float _3540 = _3537 * _3533;
                        float _3541 = dot(vec3(_895, _898, _901), vec3(_3538, _3539, _3540));
                        float _3546 = 1.0 - (_3534 * _3491.w);
                        float _4942 = isnan(0.0) ? _3546 : (isnan(_3546) ? 0.0 : max(_3546, 0.0));
                        float _3547 = isnan(1.0) ? _4942 : (isnan(_4942) ? 1.0 : min(_4942, 1.0));
                        float _3548 = sqrt(_3534) * _3510.w;
                        float _3551 = 1.39999997615814208984375 / (_3548 + 1.39999997615814208984375);
                        float _3552 = _3551 * _3551;
                        float _3555 = ((1.0 - _3552) * _3541) + _3552;
                        float _3558 = _3548 * _3548;
                        float _3562 = ((isnan(0.0) ? _3555 : (isnan(_3555) ? 0.0 : max(_3555, 0.0))) * _3547) / ((_3558 * 0.699999988079071044921875) + 1.0);
                        float _3566 = (-0.0) - _2105;
                        float _3567 = (-0.0) - _2106;
                        float _3568 = (-0.0) - _2107;
                        float _3572 = inversesqrt(dot(vec3(_3566, _3567, _3568), vec3(_3566, _3567, _3568)));
                        float _3573 = _3572 * _3566;
                        float _3574 = _3572 * _3567;
                        float _3575 = _3572 * _3568;
                        float _3582 = exp2(log2(1.0 / ((_3558 * 3.5) + 5.0)) * 0.25);
                        float _3583 = 1.0 - _1015;
                        float _3590 = sqrt(1.0 - ((1.0 - (_3583 * _3583)) * (1.0 - (_3582 * _3582))));
                        float _3591 = _3590 * _3590;
                        float _3592 = _3591 * _3591;
                        float _3593 = _3573 + _3538;
                        float _3594 = _3574 + _3539;
                        float _3595 = _3575 + _3540;
                        float _3599 = inversesqrt(dot(vec3(_3593, _3594, _3595), vec3(_3593, _3594, _3595)));
                        float _3603 = dot(vec3(_895, _898, _901), vec3(_3573, _3574, _3575));
                        float _4958 = isnan(0.0) ? _3603 : (isnan(_3603) ? 0.0 : max(_3603, 0.0));
                        float _3606 = isnan(1.0) ? _4958 : (isnan(_4958) ? 1.0 : min(_4958, 1.0));
                        float _3607 = dot(vec3(_895, _898, _901), vec3(_3599 * _3593, _3599 * _3594, _3599 * _3595));
                        float _4969 = isnan(0.0) ? _3607 : (isnan(_3607) ? 0.0 : max(_3607, 0.0));
                        float _3610 = isnan(1.0) ? _4969 : (isnan(_4969) ? 1.0 : min(_4969, 1.0));
                        float _3614 = ((_3610 * _3610) * (_3592 + (-1.0))) + 1.0;
                        float _3615 = _3551 * _3591;
                        float _3616 = _3615 * _3615;
                        float _3619 = ((1.0 - _3616) * _3541) + _3616;
                        float _4980 = isnan(0.0) ? _3619 : (isnan(_3619) ? 0.0 : max(_3619, 0.0));
                        float _3620 = isnan(1.0) ? _4980 : (isnan(_4980) ? 1.0 : min(_4980, 1.0));
                        float _3621 = 1.0 - _3591;
                        float _3631 = (0.5 / (((_3620 * ((_3606 * _3621) + _3591)) + 9.9999999392252902907785028219223e-09) + (((_3620 * _3621) + _3591) * _3606))) * _3620;
                        float _4991 = isnan(0.0) ? _3631 : (isnan(_3631) ? 0.0 : max(_3631, 0.0));
                        float _3642 = (((_3592 * 3.1415927410125732421875) * (isnan(1.0) ? _4991 : (isnan(_4991) ? 1.0 : min(_4991, 1.0)))) / ((_3614 * _3614) * ((_3558 * 2.1991131305694580078125) + 3.141590118408203125))) * _3547;
                        _3395 = (_3562 * _3510.x) + _3468;
                        _3396 = (_3562 * _3510.y) + _3469;
                        _3397 = (_3562 * _3510.z) + _3470;
                        _3392 = (_3642 * _3527.x) + _3465;
                        _3393 = (_3642 * _3527.y) + _3466;
                        _3394 = (_3642 * _3527.z) + _3467;
                        if (_3472 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3465 = _3392;
                            _3466 = _3393;
                            _3467 = _3394;
                            _3468 = _3395;
                            _3469 = _3396;
                            _3470 = _3397;
                            _3471 = _3472;
                        }
                    }
                    frontier_phi_73_pred = _3397;
                    frontier_phi_73_pred_1 = _3396;
                    frontier_phi_73_pred_2 = _3395;
                    frontier_phi_73_pred_3 = _3394;
                    frontier_phi_73_pred_4 = _3393;
                    frontier_phi_73_pred_5 = _3392;
                }
                _3170 = frontier_phi_73_pred;
                _3168 = frontier_phi_73_pred_1;
                _3166 = frontier_phi_73_pred_2;
                _3164 = frontier_phi_73_pred_3;
                _3162 = frontier_phi_73_pred_4;
                _3160 = frontier_phi_73_pred_5;
                uint _3327 = _3326 + 1u;
                if (_3327 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3320 = _3160;
                    _3321 = _3162;
                    _3322 = _3164;
                    _3323 = _3166;
                    _3324 = _3168;
                    _3325 = _3170;
                    _3326 = _3327;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3159 = _3160;
            _3161 = _3162;
            _3163 = _3164;
            _3165 = _3166;
            _3167 = _3168;
            _3169 = _3170;
        }
        uvec4 _3173 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3174 = _3173.z;
        uint _3176 = (_3174 >> 8u) & 15u;
        float _3288;
        float _3290;
        float _3292;
        float _3294;
        float _3296;
        float _3298;
        if (((4294967295u << _3176) & _3045) == 0u)
        {
            _3288 = _3159;
            _3290 = _3161;
            _3292 = _3163;
            _3294 = _3165;
            _3296 = _3167;
            _3298 = _3169;
        }
        else
        {
            float _3313 = inversesqrt(dot(vec3(_2105, _2106, _2107), vec3(_2105, _2106, _2107)));
            float _3314 = _3313 * _2105;
            float _3315 = _3313 * _2106;
            float _3316 = _3313 * _2107;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3176 < ((_3174 >> 12u) & 15u))
            {
                float _3289;
                float _3291;
                float _3293;
                float _3295;
                float _3297;
                float _3299;
                float _3448 = _3159;
                float _3449 = _3161;
                float _3450 = _3163;
                float _3451 = _3165;
                float _3452 = _3167;
                float _3453 = _3169;
                uint _3454 = _3176;
                uint _3463;
                bool _3464;
                for (;;)
                {
                    _3463 = texelFetch(g_lightClassification, int((((_3039 << 5u) + (_3025 << 9u)) + (_3454 << 2u)) >> 2u)).x;
                    _3464 = _3463 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3464)
                    {
                        frontier_phi_84_pred = _3452;
                        frontier_phi_84_pred_1 = _3451;
                        frontier_phi_84_pred_2 = _3450;
                        frontier_phi_84_pred_3 = _3449;
                        frontier_phi_84_pred_4 = _3448;
                        frontier_phi_84_pred_5 = _3453;
                    }
                    else
                    {
                        float _3656;
                        float _3657;
                        float _3658;
                        float _3659;
                        float _3660;
                        float _3661;
                        float _3949;
                        float _3950;
                        float _3951;
                        float _3952;
                        float _3953;
                        float _3954;
                        float _3669 = _3448;
                        float _3670 = _3449;
                        float _3671 = _3450;
                        float _3672 = _3451;
                        float _3673 = _3452;
                        float _3674 = _3453;
                        uint _3675 = _3463;
                        uint _3676;
                        vec4 _3701;
                        float _3702;
                        vec4 _3717;
                        vec3 _3729;
                        vec4 _3744;
                        vec4 _3759;
                        float _3805;
                        bool _3806;
                        for (;;)
                        {
                            uint _3686 = ((_3454 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3675));
                            _3676 = (_3675 + 4294967295u) & _3675;
                            uint _3688 = _3686 * 40u;
                            _3701 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3688)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 3u)).x));
                            _3702 = _3701.w;
                            uint _3704 = (_3686 * 40u) + 4u;
                            _3717 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3704)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3704 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3704 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3704 + 3u)).x));
                            uint _3719 = (_3686 * 40u) + 8u;
                            _3729 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3719)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3719 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3719 + 2u)).x));
                            uint _3731 = (_3686 * 40u) + 16u;
                            _3744 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3731)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3731 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3731 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3731 + 3u)).x));
                            uint _3746 = (_3686 * 40u) + 20u;
                            _3759 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3746)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3746 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3746 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3746 + 3u)).x));
                            uint _3761 = (_3686 * 40u) + 24u;
                            vec4 _3774 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3761)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3761 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3761 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3761 + 3u)).x));
                            uint _3780 = (_3686 * 40u) + 28u;
                            vec4 _3793 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3780)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3780 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3780 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3780 + 3u)).x));
                            _3805 = fma(_2107, _3793.z, fma(_2106, _3793.y, _3793.x * _2105)) + _3793.w;
                            _3806 = !((fma(_2107, _3774.z, fma(_2106, _3774.y, _3774.x * _2105)) + _3774.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3806)
                            {
                                float _3833 = _3701.x - _2105;
                                float _3834 = _3701.y - _2106;
                                float _3835 = _3701.z - _2107;
                                float _3836 = dot(vec3(_3833, _3834, _3835), vec3(_3833, _3834, _3835));
                                float _3839 = inversesqrt(_3836);
                                float _3840 = _3839 * _3833;
                                float _3841 = _3839 * _3834;
                                float _3842 = _3839 * _3835;
                                float _3846 = 1.0 - (_3836 / (_3702 * _3702));
                                float _5002 = isnan(0.0) ? _3846 : (isnan(_3846) ? 0.0 : max(_3846, 0.0));
                                float _3847 = isnan(1.0) ? _5002 : (isnan(_5002) ? 1.0 : min(_5002, 1.0));
                                float _3851 = sqrt(_3836) * _3717.w;
                                float _3853 = 1.39999997615814208984375 / (_3851 + 1.39999997615814208984375);
                                float _3854 = _3853 * _3853;
                                float _3857 = ((1.0 - _3854) * dot(vec3(_3840, _3841, _3842), vec3(_895, _898, _901))) + _3854;
                                float _3860 = _3851 * _3851;
                                float _3864 = (fma(_2107, _3744.z, fma(_2106, _3744.y, _3744.x * _2105)) + _3744.w) / _3805;
                                float _3865 = (fma(_2107, _3759.z, fma(_2106, _3759.y, _3759.x * _2105)) + _3759.w) / _3805;
                                float _3869 = 1.0 - dot(vec2(_3864, _3865), vec2(_3864, _3865));
                                float _5018 = isnan(0.0) ? _3869 : (isnan(_3869) ? 0.0 : max(_3869, 0.0));
                                float _3870 = isnan(1.0) ? _5018 : (isnan(_5018) ? 1.0 : min(_5018, 1.0));
                                float _3871 = _3870 * (((isnan(0.0) ? _3857 : (isnan(_3857) ? 0.0 : max(_3857, 0.0))) * _3847) / ((_3860 * 0.699999988079071044921875) + 1.0));
                                float _3883 = exp2(log2(1.0 / ((_3860 * 3.5) + 5.0)) * 0.25);
                                float _3884 = 1.0 - _1015;
                                float _3891 = sqrt(1.0 - ((1.0 - (_3884 * _3884)) * (1.0 - (_3883 * _3883))));
                                float _3892 = _3891 * _3891;
                                float _3893 = _3892 * _3892;
                                float _3894 = _3840 - _3314;
                                float _3895 = _3841 - _3315;
                                float _3896 = _3842 - _3316;
                                float _3900 = inversesqrt(dot(vec3(_3894, _3895, _3896), vec3(_3894, _3895, _3896)));
                                float _3904 = dot(vec3(_895, _898, _901), vec3((-0.0) - _3314, (-0.0) - _3315, (-0.0) - _3316));
                                float _5029 = isnan(0.0) ? _3904 : (isnan(_3904) ? 0.0 : max(_3904, 0.0));
                                float _3907 = isnan(1.0) ? _5029 : (isnan(_5029) ? 1.0 : min(_5029, 1.0));
                                float _3908 = dot(vec3(_895, _898, _901), vec3(_3900 * _3894, _3900 * _3895, _3900 * _3896));
                                float _5040 = isnan(0.0) ? _3908 : (isnan(_3908) ? 0.0 : max(_3908, 0.0));
                                float _3911 = isnan(1.0) ? _5040 : (isnan(_5040) ? 1.0 : min(_5040, 1.0));
                                float _3915 = ((_3911 * _3911) * (_3893 + (-1.0))) + 1.0;
                                float _3916 = _3853 * _3892;
                                float _3917 = _3916 * _3916;
                                float _3923 = ((1.0 - _3917) * dot(vec3(_895, _898, _901), vec3(_3840, _3841, _3842))) + _3917;
                                float _5051 = isnan(0.0) ? _3923 : (isnan(_3923) ? 0.0 : max(_3923, 0.0));
                                float _3924 = isnan(1.0) ? _5051 : (isnan(_5051) ? 1.0 : min(_5051, 1.0));
                                float _3925 = 1.0 - _3892;
                                float _3935 = (0.5 / (((_3924 * ((_3907 * _3925) + _3892)) + 9.9999999392252902907785028219223e-09) + (((_3924 * _3925) + _3892) * _3907))) * _3924;
                                float _5062 = isnan(0.0) ? _3935 : (isnan(_3935) ? 0.0 : max(_3935, 0.0));
                                float _3945 = (_3870 * _3847) * (((_3893 * 3.1415927410125732421875) * (isnan(1.0) ? _5062 : (isnan(_5062) ? 1.0 : min(_5062, 1.0)))) / ((_3915 * _3915) * ((_3860 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3871 * _3717.y;
                                frontier_phi_90_pred_1 = _3871 * _3717.x;
                                frontier_phi_90_pred_2 = _3945 * _3729.z;
                                frontier_phi_90_pred_3 = _3945 * _3729.y;
                                frontier_phi_90_pred_4 = _3945 * _3729.x;
                                frontier_phi_90_pred_5 = _3871 * _3717.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3953 = frontier_phi_90_pred;
                            _3952 = frontier_phi_90_pred_1;
                            _3951 = frontier_phi_90_pred_2;
                            _3950 = frontier_phi_90_pred_3;
                            _3949 = frontier_phi_90_pred_4;
                            _3954 = frontier_phi_90_pred_5;
                            _3659 = _3952 + _3672;
                            _3660 = _3953 + _3673;
                            _3661 = _3954 + _3674;
                            _3656 = _3949 + _3669;
                            _3657 = _3950 + _3670;
                            _3658 = _3951 + _3671;
                            if (_3676 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3669 = _3656;
                                _3670 = _3657;
                                _3671 = _3658;
                                _3672 = _3659;
                                _3673 = _3660;
                                _3674 = _3661;
                                _3675 = _3676;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3660;
                        frontier_phi_84_pred_1 = _3659;
                        frontier_phi_84_pred_2 = _3658;
                        frontier_phi_84_pred_3 = _3657;
                        frontier_phi_84_pred_4 = _3656;
                        frontier_phi_84_pred_5 = _3661;
                    }
                    _3297 = frontier_phi_84_pred;
                    _3295 = frontier_phi_84_pred_1;
                    _3293 = frontier_phi_84_pred_2;
                    _3291 = frontier_phi_84_pred_3;
                    _3289 = frontier_phi_84_pred_4;
                    _3299 = frontier_phi_84_pred_5;
                    uint _3455 = _3454 + 1u;
                    if (_3455 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3448 = _3289;
                        _3449 = _3291;
                        _3450 = _3293;
                        _3451 = _3295;
                        _3452 = _3297;
                        _3453 = _3299;
                        _3454 = _3455;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3299;
                frontier_phi_65_66_ladder_1 = _3295;
                frontier_phi_65_66_ladder_2 = _3297;
                frontier_phi_65_66_ladder_3 = _3291;
                frontier_phi_65_66_ladder_4 = _3289;
                frontier_phi_65_66_ladder_5 = _3293;
            }
            else
            {
                frontier_phi_65_66_ladder = _3169;
                frontier_phi_65_66_ladder_1 = _3165;
                frontier_phi_65_66_ladder_2 = _3167;
                frontier_phi_65_66_ladder_3 = _3161;
                frontier_phi_65_66_ladder_4 = _3159;
                frontier_phi_65_66_ladder_5 = _3163;
            }
            _3288 = frontier_phi_65_66_ladder_4;
            _3290 = frontier_phi_65_66_ladder_3;
            _3292 = frontier_phi_65_66_ladder_5;
            _3294 = frontier_phi_65_66_ladder_1;
            _3296 = frontier_phi_65_66_ladder_2;
            _3298 = frontier_phi_65_66_ladder;
        }
        float _3303 = isnan(1.0) ? _999 : (isnan(_999) ? 1.0 : min(_999, 1.0));
        _3057 = (_3303 * _3294) + _2570;
        _3059 = (_3303 * _3296) + _2572;
        _3061 = (_3303 * _3298) + _2574;
        _3063 = ((_3288 * _984) * _3303) + _2908;
        _3065 = ((_3290 * _986) * _3303) + _2910;
        _3067 = ((_3292 * _987) * _3303) + _2912;
    }
    else
    {
        _3057 = _2570;
        _3059 = _2572;
        _3061 = _2574;
        _3063 = _2908;
        _3065 = _2910;
        _3067 = _2912;
    }
    uint _3073 = _928 + uint(cbMatDynParam._m0[0u].w);
    float _3081 = ((cbMtdParam._m0[11u].x * cbMtdParam._m0[22u].z) * _715.x) * cbInstanceData._m0[_3073].x;
    float _3084 = ((cbMtdParam._m0[11u].y * cbMtdParam._m0[22u].z) * _715.y) * cbInstanceData._m0[_3073].y;
    float _3087 = ((cbMtdParam._m0[11u].z * cbMtdParam._m0[22u].z) * _715.z) * cbInstanceData._m0[_3073].z;
    float _5078 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    float _5089 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _5100 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    float _3104 = (((isnan(1.0) ? _5078 : (isnan(_5078) ? 1.0 : min(_5078, 1.0))) * (_3057 + ((isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0))) * _999))) + ((_3063 + ((isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0))) * _1839)) * cbPerFrame._m0[3u].x)) + _3081;
    float _3106 = (_3084 + ((_3065 + ((isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0))) * _1839)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5089 : (isnan(_5089) ? 1.0 : min(_5089, 1.0))) * (_3059 + ((isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0))) * _999)));
    float _3108 = (_3087 + ((_3067 + ((isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0))) * _1839)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5100 : (isnan(_5100) ? 1.0 : min(_5100, 1.0))) * (_3061 + ((isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0))) * _999)));
    float _3109 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0));
    float _3110 = isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0));
    float _3111 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0));
    float _3117 = cbMtdParam._m0[2u].x * _3081;
    float _3118 = cbMtdParam._m0[2u].y * _3084;
    float _3119 = cbMtdParam._m0[2u].z * _3087;
    float _5126 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3121 = isnan(1.0) ? _5126 : (isnan(_5126) ? 1.0 : min(_5126, 1.0));
    uint _3122 = _927 + 6u;
    float _3130 = _872 / cbSceneParam._m0[86u].x;
    float _3131 = _873 / cbSceneParam._m0[86u].y;
    vec4 _3145 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3130, _3131, (log2((isnan(cbSceneParam._m0[77u].w) ? _794 : (isnan(_794) ? cbSceneParam._m0[77u].w : min(_794, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3147 = _3145.x;
    float _3148 = _3145.y;
    float _3149 = _3145.z;
    float _3150 = _3145.w;
    float _3221;
    float _3223;
    float _3225;
    float _3227;
    if (_794 > cbSceneParam._m0[78u].w)
    {
        float _3184 = isnan(_794) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _794 : min(cbSceneParam._m0[80u].w, _794));
        float _3185 = _3184 / _794;
        float _3196 = _3185 * _844;
        float _3197 = _845 * _3185;
        float _3198 = (-0.0) - _3197;
        float _3199 = _3185 * _846;
        float _3201 = (cbSceneParam._m0[77u].w * _3198) / _3184;
        float _3202 = _3201 + cbSceneParam._m0[79u].w;
        float _3203 = cbSceneParam._m0[79u].w - _3197;
        float _3209 = sqrt(((_3196 * _3196) + (_3197 * _3197)) + (_3199 * _3199));
        float _3212 = (1.0 - (cbSceneParam._m0[77u].w / _3184)) * _3209;
        float _3217 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3219 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3405;
        if (abs((_3198 - _3201) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3405 = ((((_3202 > 0.0) ? exp2(_3217 * _3202) : (2.0 - exp2(_3219 * _3202))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3212;
        }
        else
        {
            float _3349 = 1.0 / cbSceneParam._m0[80u].x;
            float _3350 = isnan(_3203) ? _3202 : (isnan(_3202) ? _3203 : max(_3202, _3203));
            float _3351 = isnan(_3203) ? _3202 : (isnan(_3202) ? _3203 : min(_3202, _3203));
            float _3360 = isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : min(_3350, 0.0));
            float _3361 = isnan(0.0) ? _3351 : (isnan(_3351) ? 0.0 : min(_3351, 0.0));
            _3405 = ((abs(_3209 / _3198) * cbSceneParam._m0[80u].y) * ((((_3360 - _3361) * 2.0) - ((exp2(_3217 * (isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0)))) - exp2(_3217 * (isnan(0.0) ? _3351 : (isnan(_3351) ? 0.0 : max(_3351, 0.0))))) * _3349)) - ((exp2(_3219 * _3360) - exp2(_3219 * _3361)) * _3349))) + (_3212 * cbSceneParam._m0[80u].z);
        }
        vec4 _3407 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3130, _3131, 1.0), 0.0);
        float _3416 = exp2((_3405 * (-1.44269502162933349609375)) * (1.0 - _3407.w));
        float _3417 = log2(_3416);
        float _3433 = log2(_3150);
        _3221 = (exp2(_3433 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3417 * cbSceneParam._m0[78u].x)) * _3407.x) / cbSceneParam._m0[78u].x)) + _3147;
        _3223 = (exp2(_3433 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3417 * cbSceneParam._m0[78u].y)) * _3407.y) / cbSceneParam._m0[78u].y)) + _3148;
        _3225 = (exp2(_3433 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3417 * cbSceneParam._m0[78u].z)) * _3407.z) / cbSceneParam._m0[78u].z)) + _3149;
        _3227 = _3416 * _3150;
    }
    else
    {
        _3221 = _3147;
        _3223 = _3148;
        _3225 = _3149;
        _3227 = _3150;
    }
    bool _3443;
    vec4 _3237;
    vec4 _3259;
    float _3261;
    float _3265;
    float _3266;
    float _3267;
    float _3270;
    float _3273;
    float _3276;
    float _3277;
    bool _3287;
    for (;;)
    {
        _3237 = cbMatDynParam._m0[0u];
        float _3239 = roundEven(_3237.y);
        bool _3240 = _3239 == 3.0;
        float _3241 = log2(_3227);
        float _3245 = exp2(_3241 * cbSceneParam._m0[78u].x);
        float _3246 = exp2(_3241 * cbSceneParam._m0[78u].y);
        float _3247 = exp2(_3241 * cbSceneParam._m0[78u].z);
        float _3248 = _3245 * _3109;
        float _3249 = _3246 * _3110;
        float _3250 = _3247 * _3111;
        float _3257 = _860 + (-0.5);
        _3259 = cbMtdParam._m0[1u];
        _3261 = _3259.y * _3257;
        float _3264 = (_3239 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3265 = _3264 * (_3240 ? _3248 : (_3248 + (cbSceneParam._m0[72u].w * _3221)));
        _3266 = _3264 * (_3240 ? _3249 : (_3249 + (cbSceneParam._m0[72u].w * _3223)));
        _3267 = _3264 * (_3240 ? _3250 : (_3250 + (cbSceneParam._m0[72u].w * _3225)));
        _3270 = ((_3117 * _3121) * _3245) * _3264;
        _3273 = ((_3118 * _3121) * _3246) * _3264;
        _3276 = ((_3119 * _3121) * _3247) * _3264;
        _3277 = _3257 * 0.999000012874603271484375;
        _3287 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3287)
        {
            if ((cbInstanceData._m0[_927 + 7u].x + _3277) < 0.5)
            {
                _3443 = true;
                break;
            }
        }
        uint _3384 = _928 + uint(_3237.w);
        if ((cbInstanceData._m0[_3384].w < 1.0) && ((cbInstanceData._m0[_3384].w + _3277) < 0.5))
        {
            _3443 = true;
            break;
        }
        if ((_3261 + 1.0) < _3259.x)
        {
            _3443 = true;
            break;
        }
        _3443 = false;
        break;
    }
    float _3647;
    if (_3443)
    {
        discard_state = true;
        _3647 = 0.0;
    }
    else
    {
        _3647 = cbInstanceData._m0[_3122].w;
    }
    SV_Target.x = _3265;
    SV_Target.y = _3266;
    SV_Target.z = _3267;
    SV_Target.w = _3647;
    SV_Target_1.x = _3270;
    SV_Target_1.y = _3273;
    SV_Target_1.z = _3276;
    SV_Target_1.w = cbInstanceData._m0[_3122].w;
    discard_exit();
}


