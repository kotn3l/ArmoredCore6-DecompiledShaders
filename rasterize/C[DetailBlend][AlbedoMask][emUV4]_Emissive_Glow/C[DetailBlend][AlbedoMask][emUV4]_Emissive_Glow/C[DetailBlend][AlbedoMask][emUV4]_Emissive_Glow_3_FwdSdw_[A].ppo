#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 11) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 12) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1316;
float _4026;
float _4027;
float _4028;
float _4029;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _232 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _239 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _240 = _239 * NORMAL.x;
    float _241 = _239 * NORMAL.y;
    float _242 = _239 * NORMAL.z;
    float _246 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _254;
    float _255;
    float _256;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _254 = (-0.0) - _240;
        _255 = (-0.0) - _241;
        _256 = (-0.0) - _242;
    }
    else
    {
        _254 = _240;
        _255 = _241;
        _256 = _242;
    }
    vec4 _274 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _288 = exp2(log2(_274.w * cbMtdParam._m0[23u].z) * cbMtdParam._m0[21u].y);
    float _289 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
    float _290 = isnan(1.0) ? _289 : (isnan(_289) ? 1.0 : min(_289, 1.0));
    vec4 _304 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _308 = _304.z;
    float _309 = _304.w;
    float _317 = exp2(log2(_308 * cbMtdParam._m0[21u].w) * cbMtdParam._m0[20u].y);
    float _318 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _319 = isnan(1.0) ? _318 : (isnan(_318) ? 1.0 : min(_318, 1.0));
    vec4 _332 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    vec4 _357 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _367 = cbMtdParam._m0[9u].x * _357.x;
    float _368 = cbMtdParam._m0[9u].y * _357.y;
    float _369 = cbMtdParam._m0[9u].z * _357.z;
    float _376 = (((cbMtdParam._m0[10u].x * _332.x) - _367) * _319) + _367;
    float _377 = (((cbMtdParam._m0[10u].y * _332.y) - _368) * _319) + _368;
    float _378 = (((cbMtdParam._m0[10u].z * _332.z) - _369) * _319) + _369;
    float _385 = exp2(log2(_309) * cbMtdParam._m0[22u].y);
    vec4 _398 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _418 = (((cbMtdParam._m0[12u].x * _398.x) - _376) * _385) + _376;
    float _419 = (((cbMtdParam._m0[12u].y * _398.y) - _377) * _385) + _377;
    float _420 = (((cbMtdParam._m0[12u].z * _398.z) - _378) * _385) + _378;
    vec4 _432 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _456 = (_274.x * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].x * _432.x) - _418) * _290) + _418);
    float _458 = (_274.y * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].y * _432.y) - _419) * _290) + _419);
    float _460 = (_274.z * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].z * _432.z) - _420) * _290) + _420);
    float _465 = exp2(log2(1.0 - _309) * 0.00999999977648258209228515625);
    float _483 = ((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_11, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x - cbMtdParam._m0[22u].w) * _465) + cbMtdParam._m0[22u].w;
    float _502 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w)).x - _483) + cbMtdParam._m0[21u].z) * _385) + _483;
    float _522 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w)).x - _502) + cbMtdParam._m0[23u].w) * _290) + _502;
    vec4 _535 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _553 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _555 = _553.x;
    float _556 = _553.y;
    float _559 = cbMtdParam._m0[20u].x + _553.z;
    float _562 = (((cbMtdParam._m0[21u].x + _535.z) - _559) * _465) + _559;
    vec4 _575 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _587 = (_308 * 2.0) * ((((_575.z - _562) + cbMtdParam._m0[23u].y) * _385) + _562);
    vec4 _600 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _609 = (((_600.z - _587) + cbMtdParam._m0[22u].x) * _290) + _587;
    vec4 _628 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _643 = ((_535.x - _555) * _465) + _555;
    float _644 = ((_535.y - _556) * _465) + _556;
    float _649 = ((_575.x - _643) * _385) + _643;
    float _650 = ((_575.y - _644) * _385) + _644;
    float _659 = ((((_600.x - _649) * _290) + _649) * 2.0) + (-1.0);
    float _660 = ((((_600.y - _650) * _290) + _650) * 2.0) + (-1.0);
    float _661 = dot(vec2(_659, _660), vec2(_659, _660));
    float _4058 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _666 = sqrt(1.0 - (isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))));
    float _669 = (cbMtdParam._m0[23u].x * ((_304.x * 2.0) + (-1.0))) + _659;
    float _670 = (cbMtdParam._m0[23u].x * ((_304.y * 2.0) + (-1.0))) + _660;
    float _673 = fma(_666, _254, fma(_670, _246 * TANGENT.x, (_232 * _225) * _669));
    float _676 = fma(_666, _255, fma(_670, _246 * TANGENT.y, (_232 * _226) * _669));
    float _679 = fma(_666, _256, fma(_670, _246 * TANGENT.z, (_232 * _227) * _669));
    float _683 = inversesqrt(dot(vec3(_673, _676, _679), vec3(_673, _676, _679)));
    float _684 = _683 * _673;
    float _685 = _683 * _676;
    float _686 = _683 * _679;
    float _4069 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _687 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
    float _4080 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _4091 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _4102 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _4113 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _691 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
    float _707 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _747 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _757 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _747);
    float _758 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _747);
    float _759 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _747);
    float _763 = inversesqrt(dot(vec3(_757, _758, _759), vec3(_757, _758, _759)));
    float _764 = _757 * _763;
    float _765 = _758 * _763;
    float _766 = _759 * _763;
    vec4 _771 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _773 = _771.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _996 = sqrt(((_757 * _757) + (_758 * _758)) + (_759 * _759));
        float _1002 = (cbMatDynParam._m0[5u].x * _996) + cbMatDynParam._m0[5u].y;
        float _4124 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1003 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _1007 = (cbMatDynParam._m0[5u].z * _996) + cbMatDynParam._m0[5u].w;
        float _4135 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))) - _1003)) + _1003) < ((_773 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _785 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _786 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _788 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _790 = _788.w;
    float _809 = fma(_686, cbSceneParam._m0[5u].z, fma(_685, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _684));
    float _812 = fma(_686, cbSceneParam._m0[6u].z, fma(_685, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _684));
    float _815 = fma(_686, cbSceneParam._m0[7u].z, fma(_685, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _684));
    vec4 _817 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _828 = (((_817.y - _687) + (_817.w * _687)) * cbMtdParam._m0[3u].x) + _687;
    uint _841 = uint(roundEven(NORMAL.w)) * 13u;
    uint _842 = _841 + 9u;
    uint _843 = _842 + uint(cbMatDynParam._m0[0u].w);
    float _849 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0)))) * cbInstanceData._m0[_843].x;
    float _850 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0)))) * cbInstanceData._m0[_843].y;
    float _851 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0)))) * cbInstanceData._m0[_843].z;
    float _4146 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _852 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
    float _4157 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _853 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
    float _4168 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _854 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
    vec4 _855 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _860 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _871 = (((_860.x - _691) + (_860.w * _691)) * cbMtdParam._m0[3u].x) + _691;
    float _884 = (cbMtdParam._m0[3u].x * (((_852 * _790) - _852) + _855.x)) + _852;
    float _885 = (cbMtdParam._m0[3u].x * (((_853 * _790) - _853) + _855.y)) + _853;
    float _886 = (cbMtdParam._m0[3u].x * (((_854 * _790) - _854) + _855.z)) + _854;
    float _887 = 1.0 - _871;
    float _888 = _887 * _884;
    float _889 = _887 * _885;
    float _890 = _887 * _886;
    float _895 = (_884 + (-0.039999999105930328369140625)) * _871;
    float _896 = (_885 + (-0.039999999105930328369140625)) * _871;
    float _897 = (_886 + (-0.039999999105930328369140625)) * _871;
    float _898 = _895 + 0.039999999105930328369140625;
    float _900 = _896 + 0.039999999105930328369140625;
    float _901 = _897 + 0.039999999105930328369140625;
    vec4 _910 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _785, cbSceneParam._m0[86u].y * _786));
    float _913 = _910.x * TEXCOORD_4.z;
    float _914 = dot(vec3(_684, _685, _686), vec3(_764, _765, _766));
    float _917 = _914 * 2.0;
    float _921 = (_917 * _684) - _764;
    float _922 = (_917 * _685) - _765;
    float _923 = (_917 * _686) - _766;
    float _927 = abs(dot(vec3(_764, _765, _766), vec3(_684, _685, _686)));
    float _4179 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _929 = sqrt(_828);
    float _942 = exp2((_929 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_929 * 3.0));
    float _948 = (1.0 - _942) * ((_929 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _949 = _942 * _929;
    float _977 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _981 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _985 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1315;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1040 = fma(_985, cbModelParam._m0[26u].z, fma(_981, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _977));
        float _1044 = fma(_985, cbModelParam._m0[27u].z, fma(_981, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _977));
        float _1048 = fma(_985, cbModelParam._m0[28u].z, fma(_981, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _977));
        float _1073 = _977 + _684;
        float _1074 = _981 + _685;
        float _1075 = _985 + _686;
        float _1085 = fma(_1075, cbModelParam._m0[26u].z, fma(_1074, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1073)) - _1040;
        float _1086 = fma(_1075, cbModelParam._m0[27u].z, fma(_1074, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1073)) - _1044;
        float _1087 = fma(_1075, cbModelParam._m0[28u].z, fma(_1074, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1073)) - _1048;
        float _1091 = inversesqrt(dot(vec3(_1085, _1086, _1087), vec3(_1085, _1086, _1087)));
        float _1104 = ((_1091 * _1085) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1040 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1105 = ((_1091 * _1086) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1044 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1106 = ((_1091 * _1087) / cbModelParam._m0[34u].z) + ((((((_1048 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1109 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1104, _1105, _1106), 0.0);
        vec4 _1116 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1104, _1105, _1106), 0.0);
        vec4 _1123 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1104, _1105, _1106), 0.0);
        vec4 _1130 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1104, _1105, _1106), 0.0);
        float _1143 = exp2((_1109.w + (-0.5)) * 20.0) * 2.0;
        float _1144 = _1143 * (_1109.x + (-0.5));
        float _1145 = _1143 * (_1109.y + (-0.5));
        float _1146 = _1143 * (_1109.z + (-0.5));
        float _1153 = exp2((_1116.w + (-0.5)) * 20.0) * 2.0;
        float _1154 = _1153 * (_1116.x + (-0.5));
        float _1155 = _1153 * (_1116.y + (-0.5));
        float _1156 = _1153 * (_1116.z + (-0.5));
        float _1163 = exp2((_1123.w + (-0.5)) * 20.0) * 2.0;
        float _1164 = _1163 * (_1123.x + (-0.5));
        float _1165 = _1163 * (_1123.y + (-0.5));
        float _1166 = _1163 * (_1123.z + (-0.5));
        float _1173 = exp2((_1130.w + (-0.5)) * 20.0) * 2.0;
        float _1174 = _1173 * (_1130.x + (-0.5));
        float _1175 = _1173 * (_1130.y + (-0.5));
        float _1176 = _1173 * (_1130.z + (-0.5));
        float _1177 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1178 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1179 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1180 = _1144 * 0.5;
        float _1181 = _1154 * 0.5;
        float _1182 = _1164 * 0.5;
        float _1183 = dot(vec3(_1180, _1181, _1182), vec3(_1180, _1181, _1182));
        float _1188 = (_1183 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1183);
        float _1197 = (dot(vec3(_684, _685, _686), vec3(_1188 * _1180, _1188 * _1181, _1188 * _1182)) + 1.0) * 0.5;
        float _4205 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1207 = sqrt(((_1181 * _1181) + (_1180 * _1180)) + (_1182 * _1182)) / (_1177 + 9.9999997473787516355514526367188e-06);
        float _4216 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1208 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _1209 = _1208 * 2.0;
        float _1213 = (1.0 - _1208) / (_1208 + 1.0);
        float _4227 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1214 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
        float _1223 = ((((1.0 - _1214) * (_1209 + 2.0)) * exp2(log2(isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0))) * (_1209 + 1.0))) + _1214) * _1177;
        float _1224 = _1145 * 0.5;
        float _1225 = _1155 * 0.5;
        float _1226 = _1165 * 0.5;
        float _1227 = dot(vec3(_1224, _1225, _1226), vec3(_1224, _1225, _1226));
        float _1232 = (_1227 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1227);
        float _1240 = (dot(vec3(_684, _685, _686), vec3(_1232 * _1224, _1232 * _1225, _1232 * _1226)) + 1.0) * 0.5;
        float _4238 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1249 = sqrt(((_1225 * _1225) + (_1224 * _1224)) + (_1226 * _1226)) / (_1178 + 9.9999997473787516355514526367188e-06);
        float _4249 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1250 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
        float _1251 = _1250 * 2.0;
        float _1255 = (1.0 - _1250) / (_1250 + 1.0);
        float _4260 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
        float _1265 = ((((1.0 - _1256) * (_1251 + 2.0)) * exp2(log2(isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))) * (_1251 + 1.0))) + _1256) * _1178;
        float _1266 = _1146 * 0.5;
        float _1267 = _1156 * 0.5;
        float _1268 = _1166 * 0.5;
        float _1269 = dot(vec3(_1266, _1267, _1268), vec3(_1266, _1267, _1268));
        float _1274 = (_1269 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1269);
        float _1282 = (dot(vec3(_684, _685, _686), vec3(_1274 * _1266, _1274 * _1267, _1274 * _1268)) + 1.0) * 0.5;
        float _4271 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1291 = sqrt(((_1267 * _1267) + (_1266 * _1266)) + (_1268 * _1268)) / (_1179 + 9.9999997473787516355514526367188e-06);
        float _4282 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _1293 = _1292 * 2.0;
        float _1297 = (1.0 - _1292) / (_1292 + 1.0);
        float _4293 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _1307 = ((((1.0 - _1298) * (_1293 + 2.0)) * exp2(log2(isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0))) * (_1293 + 1.0))) + _1298) * _1179;
        _1315 = _1146;
        _1317 = _1145;
        _1318 = _1144;
        _1319 = _1156;
        _1320 = _1155;
        _1321 = _1154;
        _1322 = _1166;
        _1323 = _1165;
        _1324 = _1164;
        _1325 = _1179;
        _1326 = _1178;
        _1327 = _1177;
        _1328 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0)));
        _1329 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0)));
        _1330 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0)));
    }
    else
    {
        _1315 = _1316;
        _1317 = _1316;
        _1318 = _1316;
        _1319 = _1316;
        _1320 = _1316;
        _1321 = _1316;
        _1322 = _1316;
        _1323 = _1316;
        _1324 = _1316;
        _1325 = _1316;
        _1326 = _1316;
        _1327 = _1316;
        _1328 = 0.0;
        _1329 = 0.0;
        _1330 = 0.0;
    }
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1359 = fma(_985, cbModelParam._m0[30u].z, fma(_981, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _977));
        float _1363 = fma(_985, cbModelParam._m0[31u].z, fma(_981, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _977));
        float _1367 = fma(_985, cbModelParam._m0[32u].z, fma(_981, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _977));
        float _1390 = _977 + _684;
        float _1391 = _981 + _685;
        float _1392 = _985 + _686;
        float _1402 = fma(_1392, cbModelParam._m0[30u].z, fma(_1391, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1390)) - _1359;
        float _1403 = fma(_1392, cbModelParam._m0[31u].z, fma(_1391, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1390)) - _1363;
        float _1404 = fma(_1392, cbModelParam._m0[32u].z, fma(_1391, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1390)) - _1367;
        float _1408 = inversesqrt(dot(vec3(_1402, _1403, _1404), vec3(_1402, _1403, _1404)));
        float _1421 = ((_1408 * _1402) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1359 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1422 = ((_1408 * _1403) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1363 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1423 = ((_1408 * _1404) / cbModelParam._m0[35u].z) + ((((((_1367 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1425 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1421, _1422, _1423), 0.0);
        vec4 _1432 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1421, _1422, _1423), 0.0);
        vec4 _1439 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1421, _1422, _1423), 0.0);
        vec4 _1446 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1421, _1422, _1423), 0.0);
        float _1458 = exp2((_1425.w + (-0.5)) * 20.0) * 2.0;
        float _1459 = _1458 * (_1425.x + (-0.5));
        float _1460 = _1458 * (_1425.y + (-0.5));
        float _1461 = _1458 * (_1425.z + (-0.5));
        float _1468 = exp2((_1432.w + (-0.5)) * 20.0) * 2.0;
        float _1469 = _1468 * (_1432.x + (-0.5));
        float _1470 = _1468 * (_1432.y + (-0.5));
        float _1471 = _1468 * (_1432.z + (-0.5));
        float _1478 = exp2((_1439.w + (-0.5)) * 20.0) * 2.0;
        float _1479 = _1478 * (_1439.x + (-0.5));
        float _1480 = _1478 * (_1439.y + (-0.5));
        float _1481 = _1478 * (_1439.z + (-0.5));
        float _1488 = exp2((_1446.w + (-0.5)) * 20.0) * 2.0;
        float _1489 = _1488 * (_1446.x + (-0.5));
        float _1490 = _1488 * (_1446.y + (-0.5));
        float _1491 = _1488 * (_1446.z + (-0.5));
        float _1492 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1493 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1494 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1495 = _1459 * 0.5;
        float _1496 = _1469 * 0.5;
        float _1497 = _1479 * 0.5;
        float _1498 = dot(vec3(_1495, _1496, _1497), vec3(_1495, _1496, _1497));
        float _1503 = (_1498 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1498);
        float _1511 = (dot(vec3(_684, _685, _686), vec3(_1503 * _1495, _1503 * _1496, _1503 * _1497)) + 1.0) * 0.5;
        float _4334 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1520 = sqrt(((_1496 * _1496) + (_1495 * _1495)) + (_1497 * _1497)) / (_1492 + 9.9999997473787516355514526367188e-06);
        float _4345 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1521 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
        float _1522 = _1521 * 2.0;
        float _1526 = (1.0 - _1521) / (_1521 + 1.0);
        float _4356 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1527 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
        float _1536 = ((((1.0 - _1527) * (_1522 + 2.0)) * exp2(log2(isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * (_1522 + 1.0))) + _1527) * _1492;
        float _1537 = _1460 * 0.5;
        float _1538 = _1470 * 0.5;
        float _1539 = _1480 * 0.5;
        float _1540 = dot(vec3(_1537, _1538, _1539), vec3(_1537, _1538, _1539));
        float _1545 = (_1540 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1540);
        float _1553 = (dot(vec3(_684, _685, _686), vec3(_1545 * _1537, _1545 * _1538, _1545 * _1539)) + 1.0) * 0.5;
        float _4367 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1562 = sqrt(((_1538 * _1538) + (_1537 * _1537)) + (_1539 * _1539)) / (_1493 + 9.9999997473787516355514526367188e-06);
        float _4378 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1563 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
        float _1564 = _1563 * 2.0;
        float _1568 = (1.0 - _1563) / (_1563 + 1.0);
        float _4389 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1569 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
        float _1578 = ((((1.0 - _1569) * (_1564 + 2.0)) * exp2(log2(isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0))) * (_1564 + 1.0))) + _1569) * _1493;
        float _1579 = _1461 * 0.5;
        float _1580 = _1471 * 0.5;
        float _1581 = _1481 * 0.5;
        float _1582 = dot(vec3(_1579, _1580, _1581), vec3(_1579, _1580, _1581));
        float _1587 = (_1582 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1582);
        float _1595 = (dot(vec3(_684, _685, _686), vec3(_1587 * _1579, _1587 * _1580, _1587 * _1581)) + 1.0) * 0.5;
        float _4400 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1604 = sqrt(((_1580 * _1580) + (_1579 * _1579)) + (_1581 * _1581)) / (_1494 + 9.9999997473787516355514526367188e-06);
        float _4411 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1605 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
        float _1606 = _1605 * 2.0;
        float _1610 = (1.0 - _1605) / (_1605 + 1.0);
        float _4422 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1611 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
        float _1620 = ((((1.0 - _1611) * (_1606 + 2.0)) * exp2(log2(isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0))) * (_1606 + 1.0))) + _1611) * _1494;
        _1628 = _1461;
        _1629 = _1460;
        _1630 = _1459;
        _1631 = _1471;
        _1632 = _1470;
        _1633 = _1469;
        _1634 = _1481;
        _1635 = _1480;
        _1636 = _1479;
        _1637 = _1494;
        _1638 = _1493;
        _1639 = _1492;
        _1640 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0)));
        _1641 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0)));
        _1642 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0)));
    }
    else
    {
        _1628 = _1316;
        _1629 = _1316;
        _1630 = _1316;
        _1631 = _1316;
        _1632 = _1316;
        _1633 = _1316;
        _1634 = _1316;
        _1635 = _1316;
        _1636 = _1316;
        _1637 = _1316;
        _1638 = _1316;
        _1639 = _1316;
        _1640 = 0.0;
        _1641 = 0.0;
        _1642 = 0.0;
    }
    float _1652 = (cbModelParam._m0[1u].x * (_1640 - _1328)) + _1328;
    float _1653 = (cbModelParam._m0[1u].x * (_1641 - _1329)) + _1329;
    float _1654 = (cbModelParam._m0[1u].x * (_1642 - _1330)) + _1330;
    float _1675 = fma(_1654, cbSceneParam._m0[89u].z, fma(_1653, cbSceneParam._m0[89u].y, _1652 * cbSceneParam._m0[89u].x));
    float _1678 = fma(_1654, cbSceneParam._m0[90u].z, fma(_1653, cbSceneParam._m0[90u].y, _1652 * cbSceneParam._m0[90u].x));
    float _1681 = fma(_1654, cbSceneParam._m0[91u].z, fma(_1653, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1652));
    float _1696 = _921 * 0.5;
    float _1697 = _922 * 0.5;
    float _1698 = _923 * 0.5;
    float _1699 = dot(vec4(_1696, _1697, _1698, 1.0), vec4(_1630, _1633, _1636, _1639));
    float _1702 = dot(vec4(_1696, _1697, _1698, 1.0), vec4(_1629, _1632, _1635, _1638));
    float _1705 = dot(vec4(_1696, _1697, _1698, 1.0), vec4(_1628, _1631, _1634, _1637));
    float _1739;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1712 = dot(vec4(_1696, _1697, _1698, 1.0), vec4(_1315, _1319, _1322, _1325));
        float _1716 = dot(vec4(_1696, _1697, _1698, 1.0), vec4(_1317, _1320, _1323, _1326));
        float _1720 = dot(vec4(_1696, _1697, _1698, 1.0), vec4(_1318, _1321, _1324, _1327));
        float _1727 = dot(vec4(cbModelParam._m0[39u]), vec4(_1696, _1697, _1698, 1.0));
        _1739 = dot(vec3(isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0)), isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0)), isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1727) ? 0.0 : (isnan(0.0) ? _1727 : max(0.0, _1727))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1739 = 1.0;
    }
    float _1750;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1741 = dot(vec4(cbModelParam._m0[40u]), vec4(_1696, _1697, _1698, 1.0));
        _1750 = dot(vec3(isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0)), isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0)), isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1741) ? 0.0 : (isnan(0.0) ? _1741 : max(0.0, _1741))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1750 = 1.0;
    }
    float _1754 = (_1750 * cbModelParam._m0[1u].x) + (_1739 * (1.0 - cbModelParam._m0[1u].x));
    float _1764 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _828);
    float _1765 = isnan(_1764) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1764 : min(cbModelParam._m0[25u].z, _1764));
    float _1845;
    float _1847;
    float _1849;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1812 = fma(_985, cbModelParam._m0[13u].z, fma(_981, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _977)) + cbModelParam._m0[13u].w;
        float _1816 = fma(_985, cbModelParam._m0[14u].z, fma(_981, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _977)) + cbModelParam._m0[14u].w;
        float _1820 = fma(_985, cbModelParam._m0[15u].z, fma(_981, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _977)) + cbModelParam._m0[15u].w;
        float _1823 = fma(_923, cbModelParam._m0[13u].z, fma(_922, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _921));
        float _1826 = fma(_923, cbModelParam._m0[14u].z, fma(_922, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _921));
        float _1829 = fma(_923, cbModelParam._m0[15u].z, fma(_922, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _921));
        float _1857;
        if (_1823 > 0.0)
        {
            _1857 = abs((1.0 - _1812) / _1823);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1823 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1812 + 1.0) / _1823);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1857 = frontier_phi_19_17_ladder;
        }
        float _2030;
        if (_1826 > 0.0)
        {
            _2030 = abs((1.0 - _1816) / _1826);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1826 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1816 + 1.0) / _1826);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2030 = frontier_phi_28_24_ladder;
        }
        float _2325;
        if (_1829 > 0.0)
        {
            _2325 = abs((1.0 - _1820) / _1829);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1829 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1820 + 1.0) / _1829);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2325 = frontier_phi_40_35_ladder;
        }
        float _2327 = isnan(_2030) ? _1857 : (isnan(_1857) ? _2030 : min(_1857, _2030));
        float _2328 = isnan(_2325) ? _2327 : (isnan(_2327) ? _2325 : min(_2327, _2325));
        float _2332 = (_2328 * _1823) + _1812;
        float _2333 = (_2328 * _1826) + _1816;
        float _2334 = (_2328 * _1829) + _1820;
        float _2335 = _2328 * 9.9999997473787516355514526367188e-05;
        float _2337 = (-1.0) - _2335;
        float _2339 = _2335 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2334 > _2339) || ((_2334 < _2337) || ((_2333 > _2339) || ((_2333 < _2337) || ((_2332 < _2337) || (_2332 > _2339))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2479 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2334, cbModelParam._m0[9u].z, fma(_2333, cbModelParam._m0[9u].y, _2332 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2334, cbModelParam._m0[10u].z, fma(_2333, cbModelParam._m0[10u].y, _2332 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2334, cbModelParam._m0[11u].z, fma(_2333, cbModelParam._m0[11u].y, _2332 * cbModelParam._m0[11u].x))), _1765);
            frontier_phi_18_40_ladder = _2479.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2479.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2479.x * cbModelParam._m0[1u].y;
        }
        _1845 = frontier_phi_18_40_ladder_2;
        _1847 = frontier_phi_18_40_ladder_1;
        _1849 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1833 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_921, _922, _923), _1765);
        _1845 = _1833.x * cbModelParam._m0[1u].y;
        _1847 = _1833.y * cbModelParam._m0[1u].y;
        _1849 = _1833.z * cbModelParam._m0[1u].y;
    }
    float _1853 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _828);
    float _1854 = isnan(_1853) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1853 : min(cbModelParam._m0[25u].w, _1853));
    float _1945;
    float _1947;
    float _1949;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1909 = fma(_985, cbModelParam._m0[21u].z, fma(_981, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _977)) + cbModelParam._m0[21u].w;
        float _1913 = fma(_985, cbModelParam._m0[22u].z, fma(_981, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _977)) + cbModelParam._m0[22u].w;
        float _1917 = fma(_985, cbModelParam._m0[23u].z, fma(_981, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _977)) + cbModelParam._m0[23u].w;
        float _1920 = fma(_923, cbModelParam._m0[21u].z, fma(_922, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _921));
        float _1923 = fma(_923, cbModelParam._m0[22u].z, fma(_922, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _921));
        float _1926 = fma(_923, cbModelParam._m0[23u].z, fma(_922, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _921));
        float _2035;
        if (_1920 > 0.0)
        {
            _2035 = abs((1.0 - _1909) / _1920);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1920 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1909 + 1.0) / _1920);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2035 = frontier_phi_30_26_ladder;
        }
        float _2352;
        if (_1923 > 0.0)
        {
            _2352 = abs((1.0 - _1913) / _1923);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1923 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1913 + 1.0) / _1923);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2352 = frontier_phi_42_37_ladder;
        }
        float _2690;
        if (_1926 > 0.0)
        {
            _2690 = abs((1.0 - _1917) / _1926);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1926 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1917 + 1.0) / _1926);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2690 = frontier_phi_52_49_ladder;
        }
        float _2692 = isnan(_2352) ? _2035 : (isnan(_2035) ? _2352 : min(_2035, _2352));
        float _2693 = isnan(_2690) ? _2692 : (isnan(_2692) ? _2690 : min(_2692, _2690));
        float _2697 = (_2693 * _1920) + _1909;
        float _2698 = (_2693 * _1923) + _1913;
        float _2699 = (_2693 * _1926) + _1917;
        float _2700 = _2693 * 9.9999997473787516355514526367188e-05;
        float _2701 = (-1.0) - _2700;
        float _2703 = _2700 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2699 > _2703) || ((_2699 < _2701) || ((_2698 > _2703) || ((_2698 < _2701) || ((_2697 < _2701) || (_2697 > _2703))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2821 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2699, cbModelParam._m0[17u].z, fma(_2698, cbModelParam._m0[17u].y, _2697 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2699, cbModelParam._m0[18u].z, fma(_2698, cbModelParam._m0[18u].y, _2697 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2699, cbModelParam._m0[19u].z, fma(_2698, cbModelParam._m0[19u].y, _2697 * cbModelParam._m0[19u].x))), _1854);
            frontier_phi_27_52_ladder = _2821.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2821.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2821.x * cbModelParam._m0[1u].z;
        }
        _1945 = frontier_phi_27_52_ladder_2;
        _1947 = frontier_phi_27_52_ladder_1;
        _1949 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1929 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_921, _922, _923), _1854);
        _1945 = _1929.x * cbModelParam._m0[1u].z;
        _1947 = _1929.y * cbModelParam._m0[1u].z;
        _1949 = _1929.z * cbModelParam._m0[1u].z;
    }
    float _1962 = (((_948 * _898) + _949) * _913) * ((cbModelParam._m0[1u].w * (_1945 - _1845)) + _1845);
    float _1964 = (((_948 * _900) + _949) * _913) * ((cbModelParam._m0[1u].w * (_1947 - _1847)) + _1847);
    float _1966 = (((_948 * _901) + _949) * _913) * ((cbModelParam._m0[1u].w * (_1949 - _1849)) + _1849);
    float _1969 = fma(_1966, cbSceneParam._m0[89u].z, fma(_1964, cbSceneParam._m0[89u].y, _1962 * cbSceneParam._m0[89u].x));
    float _1972 = fma(_1966, cbSceneParam._m0[90u].z, fma(_1964, cbSceneParam._m0[90u].y, _1962 * cbSceneParam._m0[90u].x));
    float _1975 = fma(_1966, cbSceneParam._m0[91u].z, fma(_1964, cbSceneParam._m0[91u].y, _1962 * cbSceneParam._m0[91u].x));
    float _2009 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2013 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2017 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2021 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2022 = _2009 / _2021;
    float _2023 = _2013 / _2021;
    float _2024 = _2017 / _2021;
    float _2171;
    float _2172;
    float _2173;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2051 = ((uint(_2024 > cbSceneParam._m0[59u].y) + uint(_2024 > cbSceneParam._m0[59u].x)) + uint(_2024 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2052 = _2051 + 43u;
        uint _2060 = _2051 + 44u;
        uint _2068 = _2051 + 45u;
        uint _2076 = _2051 + 46u;
        float _2087 = fma(_2021, cbSceneParam._m0[_2052].w, fma(_2017, cbSceneParam._m0[_2052].z, fma(_2013, cbSceneParam._m0[_2052].y, _2009 * cbSceneParam._m0[_2052].x)));
        float _2091 = fma(_2021, cbSceneParam._m0[_2060].w, fma(_2017, cbSceneParam._m0[_2060].z, fma(_2013, cbSceneParam._m0[_2060].y, _2009 * cbSceneParam._m0[_2060].x)));
        float _2099 = fma(_2021, cbSceneParam._m0[_2076].w, fma(_2017, cbSceneParam._m0[_2076].z, fma(_2013, cbSceneParam._m0[_2076].y, _2009 * cbSceneParam._m0[_2076].x)));
        float _2104 = cbSceneParam._m0[33u].z * _2099;
        float _2106 = cbSceneParam._m0[33u].w * _2099;
        float _2109 = fma(_2021, cbSceneParam._m0[_2068].w, fma(_2017, cbSceneParam._m0[_2068].z, fma(_2013, cbSceneParam._m0[_2068].y, _2009 * cbSceneParam._m0[_2068].x))) / _2099;
        float _2157 = (cbSceneParam._m0[33u].x - sqrt(((_2023 * _2023) + (_2022 * _2022)) + (_2024 * _2024))) * cbSceneParam._m0[33u].y;
        float _4548 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
        float _2164 = (isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2104 + _2087) / _2099, (_2106 + _2091) / _2099), _2109), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2106 + _2087) / _2099, (_2091 - _2104) / _2099), _2109), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2087 - _2104) / _2099, (_2091 - _2106) / _2099), _2109), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2087 - _2106) / _2099, (_2104 + _2091) / _2099), _2109), 0.0)).x), vec4(0.25)));
        _2171 = 1.0 - (_2164 * cbSceneParam._m0[34u].x);
        _2172 = 1.0 - (_2164 * cbSceneParam._m0[34u].y);
        _2173 = 1.0 - (_2164 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2171 = 1.0;
        _2172 = 1.0;
        _2173 = 1.0;
    }
    float _2237;
    float _2239;
    float _2241;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2225 = fma(_2021, cbSceneParam._m0[63u].w, fma(_2017, cbSceneParam._m0[63u].z, fma(_2013, cbSceneParam._m0[63u].y, _2009 * cbSceneParam._m0[63u].x)));
        float _2226 = fma(_2021, cbSceneParam._m0[60u].w, fma(_2017, cbSceneParam._m0[60u].z, fma(_2013, cbSceneParam._m0[60u].y, _2009 * cbSceneParam._m0[60u].x))) / _2225;
        float _2227 = fma(_2021, cbSceneParam._m0[61u].w, fma(_2017, cbSceneParam._m0[61u].z, fma(_2013, cbSceneParam._m0[61u].y, _2009 * cbSceneParam._m0[61u].x))) / _2225;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2226 >= cbSceneParam._m0[64u].x) && (_2227 >= cbSceneParam._m0[64u].y)) && (_2226 <= cbSceneParam._m0[64u].z)) && (_2227 <= cbSceneParam._m0[64u].w))
        {
            float _2365 = fma(_2021, cbSceneParam._m0[62u].w, fma(_2017, cbSceneParam._m0[62u].z, fma(_2013, cbSceneParam._m0[62u].y, _2009 * cbSceneParam._m0[62u].x))) / _2225;
            float _2369 = isnan(cbSceneParam._m0[41u].w) ? _2365 : (isnan(_2365) ? cbSceneParam._m0[41u].w : max(_2365, cbSceneParam._m0[41u].w));
            float _2412 = (cbSceneParam._m0[33u].x - sqrt(((_2023 * _2023) + (_2022 * _2022)) + (_2024 * _2024))) * cbSceneParam._m0[33u].y;
            float _4564 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
            float _2419 = (isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2226, cbSceneParam._m0[33u].w + _2227), _2369), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2226, _2227 - cbSceneParam._m0[33u].z), _2369), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2226 - cbSceneParam._m0[33u].z, _2227 - cbSceneParam._m0[33u].w), _2369), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2226 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2227), _2369), 0.0)).x), vec4(0.25)));
            float _2423 = 1.0 - (_2419 * cbSceneParam._m0[34u].x);
            float _2424 = 1.0 - (_2419 * cbSceneParam._m0[34u].y);
            float _2425 = 1.0 - (_2419 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2424) ? _2172 : (isnan(_2172) ? _2424 : min(_2172, _2424));
            frontier_phi_39_38_ladder_1 = isnan(_2423) ? _2171 : (isnan(_2171) ? _2423 : min(_2171, _2423));
            frontier_phi_39_38_ladder_2 = isnan(_2425) ? _2173 : (isnan(_2173) ? _2425 : min(_2173, _2425));
        }
        else
        {
            frontier_phi_39_38_ladder = _2172;
            frontier_phi_39_38_ladder_1 = _2171;
            frontier_phi_39_38_ladder_2 = _2173;
        }
        _2237 = frontier_phi_39_38_ladder_1;
        _2239 = frontier_phi_39_38_ladder;
        _2241 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2237 = _2171;
        _2239 = _2172;
        _2241 = _2173;
    }
    uvec4 _2246 = floatBitsToUint(cbInstanceData._m0[_841 + 5u]);
    uint _2248 = _2246.x * 14u;
    uint _2249 = _2248 + 13u;
    float _2256 = _913 + (-1.0);
    float _2261 = (cbLight._m0[_2249].x * _2256) + 1.0;
    float _2262 = (cbLight._m0[_2249].y * _2256) + 1.0;
    float _2263 = (cbLight._m0[_2249].z * _2256) + 1.0;
    float _2264 = (cbLight._m0[_2249].w * _2256) + 1.0;
    uint _2265 = _2248 + 5u;
    float _2271 = isnan(1.0) ? _2262 : (isnan(_2262) ? 1.0 : min(_2262, 1.0));
    uint _2275 = _2248 + 4u;
    float _2284 = isnan(1.0) ? _2261 : (isnan(_2261) ? 1.0 : min(_2261, 1.0));
    uint _2288 = _2248 | 1u;
    float _2299 = dot(vec3(cbLight._m0[_2248].xyz), vec3(_684, _685, _686));
    float _2302 = dot(vec3(cbLight._m0[_2288].xyz), vec3(_684, _685, _686));
    float _4600 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
    float _4611 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
    float _2307 = (isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0))) * 0.3183098733425140380859375;
    float _2309 = (isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0))) * 0.3183098733425140380859375;
    float _2316 = ((cbLight._m0[_2265].x * _2271) * _2309) + (((cbLight._m0[_2275].x * _2237) * _2284) * _2307);
    float _2317 = ((_2271 * cbLight._m0[_2265].y) * _2309) + (((cbLight._m0[_2275].y * _2239) * _2284) * _2307);
    float _2318 = ((_2271 * cbLight._m0[_2265].z) * _2309) + (((cbLight._m0[_2275].z * _2241) * _2284) * _2307);
    uvec4 _2322 = floatBitsToUint(cbLight._m0[_2248 + 12u]);
    bool _2324 = _2322.x == 0u;
    float _2426;
    float _2428;
    float _2430;
    if (_2324)
    {
        _2426 = _2316;
        _2428 = _2317;
        _2430 = _2318;
    }
    else
    {
        uint _2434 = _2248 + 6u;
        float _2450 = (dot(vec3(cbLight._m0[_2248 + 2u].xyz), vec3(_684, _685, _686)) * 0.5) + 0.5;
        float _2451 = _2450 * _2450;
        float _4622 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
        float _2452 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
        float _2453 = isnan(1.0) ? _2263 : (isnan(_2263) ? 1.0 : min(_2263, 1.0));
        _2426 = (((cbLight._m0[_2434].x * 0.3183098733425140380859375) * _2452) * _2453) + _2316;
        _2428 = (((cbLight._m0[_2434].y * 0.3183098733425140380859375) * _2452) * _2453) + _2317;
        _2430 = (((cbLight._m0[_2434].z * 0.3183098733425140380859375) * _2452) * _2453) + _2318;
    }
    bool _2433 = _2322.y == 0u;
    float _2488;
    float _2490;
    float _2492;
    if (_2433)
    {
        _2488 = _2426;
        _2490 = _2428;
        _2492 = _2430;
    }
    else
    {
        uint _2661 = _2248 + 7u;
        float _2677 = (dot(vec3(cbLight._m0[_2248 + 3u].xyz), vec3(_684, _685, _686)) * 0.5) + 0.5;
        float _2678 = _2677 * _2677;
        float _4638 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
        float _2679 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
        float _2680 = isnan(1.0) ? _2264 : (isnan(_2264) ? 1.0 : min(_2264, 1.0));
        _2488 = (((cbLight._m0[_2661].x * 0.3183098733425140380859375) * _2679) * _2680) + _2426;
        _2490 = (((cbLight._m0[_2661].y * 0.3183098733425140380859375) * _2679) * _2680) + _2428;
        _2492 = (((cbLight._m0[_2661].z * 0.3183098733425140380859375) * _2679) * _2680) + _2430;
    }
    uint _2495 = _2248 + 8u;
    float _2508 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2248].w)) * _828) * 0.949999988079071044921875);
    float _2509 = _2508 * _2508;
    float _2510 = cbLight._m0[_2248].x + _764;
    float _2511 = cbLight._m0[_2248].y + _765;
    float _2512 = cbLight._m0[_2248].z + _766;
    float _2516 = inversesqrt(dot(vec3(_2510, _2511, _2512), vec3(_2510, _2511, _2512)));
    float _2517 = _2516 * _2510;
    float _2518 = _2516 * _2511;
    float _2519 = _2516 * _2512;
    float _2520 = dot(vec3(_684, _685, _686), vec3(cbLight._m0[_2248].xyz));
    float _4654 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
    float _2523 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
    float _4665 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    float _2524 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
    float _2525 = dot(vec3(_684, _685, _686), vec3(_2517, _2518, _2519));
    float _4676 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
    float _2528 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
    float _2529 = dot(vec3(cbLight._m0[_2248].xyz), vec3(_2517, _2518, _2519));
    float _4687 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
    float _2533 = _2509 * _2509;
    float _2537 = ((_2528 * _2528) * (_2533 + (-1.0))) + 1.0;
    float _2545 = exp2(log2(1.0 - (isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0)))) * 5.0);
    float _2546 = 0.959999978542327880859375 - _895;
    float _2548 = 0.959999978542327880859375 - _896;
    float _2549 = 0.959999978542327880859375 - _897;
    float _2556 = 1.0 - _2509;
    float _2567 = (0.5 / (((_2524 * ((_2523 * _2556) + _2509)) + 9.9999999392252902907785028219223e-09) + (((_2524 * _2556) + _2509) * _2523))) * _2523;
    float _4698 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
    float _2569 = (isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0))) * (_2533 / ((_2537 * _2537) * 3.141590118408203125));
    uint _2583 = _2248 + 9u;
    float _2594 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2288].w)) * _828) * 0.949999988079071044921875);
    float _2595 = _2594 * _2594;
    float _2596 = cbLight._m0[_2288].x + _764;
    float _2597 = cbLight._m0[_2288].y + _765;
    float _2598 = cbLight._m0[_2288].z + _766;
    float _2602 = inversesqrt(dot(vec3(_2596, _2597, _2598), vec3(_2596, _2597, _2598)));
    float _2603 = _2602 * _2596;
    float _2604 = _2602 * _2597;
    float _2605 = _2602 * _2598;
    float _2606 = dot(vec3(_684, _685, _686), vec3(cbLight._m0[_2288].xyz));
    float _4709 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
    float _2609 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
    float _2610 = dot(vec3(_684, _685, _686), vec3(_2603, _2604, _2605));
    float _4720 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
    float _2613 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
    float _2614 = dot(vec3(cbLight._m0[_2288].xyz), vec3(_2603, _2604, _2605));
    float _4731 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
    float _2618 = _2595 * _2595;
    float _2622 = ((_2613 * _2613) * (_2618 + (-1.0))) + 1.0;
    float _2629 = exp2(log2(1.0 - (isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0)))) * 5.0);
    float _2636 = 1.0 - _2595;
    float _2646 = (0.5 / (((_2524 * ((_2609 * _2636) + _2595)) + 9.9999999392252902907785028219223e-09) + (((_2524 * _2636) + _2595) * _2609))) * _2609;
    float _4742 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
    float _2648 = (isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0))) * (_2618 / ((_2622 * _2622) * 3.141590118408203125));
    float _2658 = (((((_2629 * _2546) + _898) * cbLight._m0[_2583].x) * _2648) * _2271) + ((((cbLight._m0[_2495].x * _2237) * ((_2545 * _2546) + _898)) * _2569) * _2284);
    float _2659 = (((((_2629 * _2548) + _900) * cbLight._m0[_2583].y) * _2648) * _2271) + ((((cbLight._m0[_2495].y * _2239) * ((_2545 * _2548) + _900)) * _2569) * _2284);
    float _2660 = (((((_2629 * _2549) + _901) * cbLight._m0[_2583].z) * _2648) * _2271) + ((((cbLight._m0[_2495].z * _2241) * ((_2545 * _2549) + _901)) * _2569) * _2284);
    float _2716;
    float _2718;
    float _2720;
    if (_2324)
    {
        _2716 = _2658;
        _2718 = _2659;
        _2720 = _2660;
    }
    else
    {
        uint _2722 = _2248 + 2u;
        uint _2726 = _2248 + 10u;
        float _2740 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2722].w)) * _828) * 0.949999988079071044921875);
        float _2741 = _2740 * _2740;
        float _2742 = cbLight._m0[_2722].x + _764;
        float _2743 = cbLight._m0[_2722].y + _765;
        float _2744 = cbLight._m0[_2722].z + _766;
        float _2748 = inversesqrt(dot(vec3(_2742, _2743, _2744), vec3(_2742, _2743, _2744)));
        float _2749 = _2748 * _2742;
        float _2750 = _2748 * _2743;
        float _2751 = _2748 * _2744;
        float _2752 = dot(vec3(_684, _685, _686), vec3(cbLight._m0[_2722].xyz));
        float _4753 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0));
        float _2755 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
        float _2756 = dot(vec3(_684, _685, _686), vec3(_2749, _2750, _2751));
        float _4764 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
        float _2759 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
        float _2760 = dot(vec3(cbLight._m0[_2722].xyz), vec3(_2749, _2750, _2751));
        float _4775 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
        float _2764 = _2741 * _2741;
        float _2768 = ((_2759 * _2759) * (_2764 + (-1.0))) + 1.0;
        float _2775 = exp2(log2(1.0 - (isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0)))) * 5.0);
        float _2782 = 1.0 - _2741;
        float _2792 = (0.5 / (((_2524 * ((_2755 * _2782) + _2741)) + 9.9999999392252902907785028219223e-09) + (((_2524 * _2782) + _2741) * _2755))) * _2755;
        float _4786 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
        float _2794 = (isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0))) * (_2764 / ((_2768 * _2768) * 3.141590118408203125));
        float _2795 = isnan(1.0) ? _2263 : (isnan(_2263) ? 1.0 : min(_2263, 1.0));
        _2716 = (((((_2775 * _2546) + _898) * cbLight._m0[_2726].x) * _2794) * _2795) + _2658;
        _2718 = (((((_2775 * _2548) + _900) * cbLight._m0[_2726].y) * _2794) * _2795) + _2659;
        _2720 = (((((_2775 * _2549) + _901) * cbLight._m0[_2726].z) * _2794) * _2795) + _2660;
    }
    float _2826;
    float _2828;
    float _2830;
    if (_2433)
    {
        _2826 = _2716;
        _2828 = _2718;
        _2830 = _2720;
    }
    else
    {
        uint _2837 = _2248 + 3u;
        uint _2841 = _2248 + 11u;
        float _2855 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2837].w)) * _828) * 0.949999988079071044921875);
        float _2856 = _2855 * _2855;
        float _2857 = cbLight._m0[_2837].x + _764;
        float _2858 = cbLight._m0[_2837].y + _765;
        float _2859 = cbLight._m0[_2837].z + _766;
        float _2863 = inversesqrt(dot(vec3(_2857, _2858, _2859), vec3(_2857, _2858, _2859)));
        float _2864 = _2863 * _2857;
        float _2865 = _2863 * _2858;
        float _2866 = _2863 * _2859;
        float _2867 = dot(vec3(_684, _685, _686), vec3(cbLight._m0[_2837].xyz));
        float _4802 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0));
        float _2870 = isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0));
        float _2871 = dot(vec3(_684, _685, _686), vec3(_2864, _2865, _2866));
        float _4813 = isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0));
        float _2874 = isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0));
        float _2875 = dot(vec3(cbLight._m0[_2837].xyz), vec3(_2864, _2865, _2866));
        float _4824 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0));
        float _2879 = _2856 * _2856;
        float _2883 = ((_2874 * _2874) * (_2879 + (-1.0))) + 1.0;
        float _2890 = exp2(log2(1.0 - (isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0)))) * 5.0);
        float _2897 = 1.0 - _2856;
        float _2907 = (0.5 / (((_2524 * ((_2870 * _2897) + _2856)) + 9.9999999392252902907785028219223e-09) + (((_2524 * _2897) + _2856) * _2870))) * _2870;
        float _4835 = isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0));
        float _2909 = (isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0))) * (_2879 / ((_2883 * _2883) * 3.141590118408203125));
        float _2910 = isnan(1.0) ? _2264 : (isnan(_2264) ? 1.0 : min(_2264, 1.0));
        _2826 = (((((_2890 * _2546) + _898) * cbLight._m0[_2841].x) * _2909) * _2910) + _2716;
        _2828 = (((((_2890 * _2548) + _900) * cbLight._m0[_2841].y) * _2909) * _2910) + _2718;
        _2830 = (((((_2890 * _2549) + _901) * cbLight._m0[_2841].z) * _2909) * _2910) + _2720;
    }
    float _2975;
    float _2977;
    float _2979;
    float _2981;
    float _2983;
    float _2985;
    if (_2246.y == 0u)
    {
        uvec4 _2931 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2932 = _2931.x;
        uint _2943 = uint((float(_2931.y) * floor(float(uint(cbSceneParam._m0[85u].y * _786) / _2932))) + floor(float(uint(cbSceneParam._m0[85u].x * _785) / _2932)));
        float _2953 = (log2(_2024 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2954 = isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0));
        uint _2957 = uint(isnan(14.0) ? _2954 : (isnan(_2954) ? 14.0 : min(_2954, 14.0)));
        uvec4 _2962 = texelFetch(g_lightClusterGridBuffer, int(((_2957 << 2u) + (_2943 << 6u)) >> 2u));
        uint _2963 = _2962.x;
        uint _2964 = _2931.z;
        float _3077;
        float _3079;
        float _3081;
        float _3083;
        float _3085;
        float _3087;
        if (((((1u << ((_2964 >> 4u) & 15u)) + 4294967295u) & _2963) == 0u) || ((_2964 & 240u) == 0u))
        {
            _3077 = 0.0;
            _3079 = 0.0;
            _3081 = 0.0;
            _3083 = 0.0;
            _3085 = 0.0;
            _3087 = 0.0;
        }
        else
        {
            float _3078;
            float _3080;
            float _3082;
            float _3084;
            float _3086;
            float _3088;
            float _3238 = 0.0;
            float _3239 = 0.0;
            float _3240 = 0.0;
            float _3241 = 0.0;
            float _3242 = 0.0;
            float _3243 = 0.0;
            uint _3244 = 0u;
            uint _3253;
            bool _3254;
            for (;;)
            {
                _3253 = texelFetch(g_lightClassification, int((((_2957 << 5u) + (_2943 << 9u)) + (_3244 << 2u)) >> 2u)).x;
                _3254 = _3253 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3254)
                {
                    frontier_phi_73_pred = _3243;
                    frontier_phi_73_pred_1 = _3242;
                    frontier_phi_73_pred_2 = _3241;
                    frontier_phi_73_pred_3 = _3240;
                    frontier_phi_73_pred_4 = _3239;
                    frontier_phi_73_pred_5 = _3238;
                }
                else
                {
                    float _3383;
                    float _3384;
                    float _3385;
                    float _3386;
                    float _3387;
                    float _3388;
                    uint _3389;
                    _3383 = _3238;
                    _3384 = _3239;
                    _3385 = _3240;
                    _3386 = _3241;
                    _3387 = _3242;
                    _3388 = _3243;
                    _3389 = _3253;
                    float _3310;
                    float _3311;
                    float _3312;
                    float _3313;
                    float _3314;
                    float _3315;
                    for (;;)
                    {
                        uint _3393 = uint(findLSB(_3389)) + (_3244 << 5u);
                        uint _3390 = (_3389 + 4294967295u) & _3389;
                        uint _3395 = _3393 * 48u;
                        vec4 _3409 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3395)).x, texelFetch(g_PointLightRenderingBuffer, int(_3395 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3395 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3395 + 3u)).x));
                        uint _3415 = (_3393 * 48u) + 4u;
                        vec4 _3428 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3415)).x, texelFetch(g_PointLightRenderingBuffer, int(_3415 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3415 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3415 + 3u)).x));
                        uint _3434 = (_3393 * 48u) + 8u;
                        vec3 _3445 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3434)).x, texelFetch(g_PointLightRenderingBuffer, int(_3434 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3434 + 2u)).x));
                        float _3449 = _3409.x - _2022;
                        float _3450 = _3409.y - _2023;
                        float _3451 = _3409.z - _2024;
                        float _3452 = dot(vec3(_3449, _3450, _3451), vec3(_3449, _3450, _3451));
                        float _3455 = inversesqrt(_3452);
                        float _3456 = _3455 * _3449;
                        float _3457 = _3455 * _3450;
                        float _3458 = _3455 * _3451;
                        float _3459 = dot(vec3(_809, _812, _815), vec3(_3456, _3457, _3458));
                        float _3464 = 1.0 - (_3452 * _3409.w);
                        float _4861 = isnan(0.0) ? _3464 : (isnan(_3464) ? 0.0 : max(_3464, 0.0));
                        float _3465 = isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0));
                        float _3466 = sqrt(_3452) * _3428.w;
                        float _3469 = 1.39999997615814208984375 / (_3466 + 1.39999997615814208984375);
                        float _3470 = _3469 * _3469;
                        float _3473 = ((1.0 - _3470) * _3459) + _3470;
                        float _3476 = _3466 * _3466;
                        float _3480 = ((isnan(0.0) ? _3473 : (isnan(_3473) ? 0.0 : max(_3473, 0.0))) * _3465) / ((_3476 * 0.699999988079071044921875) + 1.0);
                        float _3484 = (-0.0) - _2022;
                        float _3485 = (-0.0) - _2023;
                        float _3486 = (-0.0) - _2024;
                        float _3490 = inversesqrt(dot(vec3(_3484, _3485, _3486), vec3(_3484, _3485, _3486)));
                        float _3491 = _3490 * _3484;
                        float _3492 = _3490 * _3485;
                        float _3493 = _3490 * _3486;
                        float _3500 = exp2(log2(1.0 / ((_3476 * 3.5) + 5.0)) * 0.25);
                        float _3501 = 1.0 - _929;
                        float _3508 = sqrt(1.0 - ((1.0 - (_3501 * _3501)) * (1.0 - (_3500 * _3500))));
                        float _3509 = _3508 * _3508;
                        float _3510 = _3509 * _3509;
                        float _3511 = _3491 + _3456;
                        float _3512 = _3492 + _3457;
                        float _3513 = _3493 + _3458;
                        float _3517 = inversesqrt(dot(vec3(_3511, _3512, _3513), vec3(_3511, _3512, _3513)));
                        float _3521 = dot(vec3(_809, _812, _815), vec3(_3491, _3492, _3493));
                        float _4877 = isnan(0.0) ? _3521 : (isnan(_3521) ? 0.0 : max(_3521, 0.0));
                        float _3524 = isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0));
                        float _3525 = dot(vec3(_809, _812, _815), vec3(_3517 * _3511, _3517 * _3512, _3517 * _3513));
                        float _4888 = isnan(0.0) ? _3525 : (isnan(_3525) ? 0.0 : max(_3525, 0.0));
                        float _3528 = isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0));
                        float _3532 = ((_3528 * _3528) * (_3510 + (-1.0))) + 1.0;
                        float _3533 = _3469 * _3509;
                        float _3534 = _3533 * _3533;
                        float _3537 = ((1.0 - _3534) * _3459) + _3534;
                        float _4899 = isnan(0.0) ? _3537 : (isnan(_3537) ? 0.0 : max(_3537, 0.0));
                        float _3538 = isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0));
                        float _3539 = 1.0 - _3509;
                        float _3549 = (0.5 / (((_3538 * ((_3524 * _3539) + _3509)) + 9.9999999392252902907785028219223e-09) + (((_3538 * _3539) + _3509) * _3524))) * _3538;
                        float _4910 = isnan(0.0) ? _3549 : (isnan(_3549) ? 0.0 : max(_3549, 0.0));
                        float _3560 = (((_3510 * 3.1415927410125732421875) * (isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0)))) / ((_3532 * _3532) * ((_3476 * 2.1991131305694580078125) + 3.141590118408203125))) * _3465;
                        _3313 = (_3480 * _3428.x) + _3386;
                        _3314 = (_3480 * _3428.y) + _3387;
                        _3315 = (_3480 * _3428.z) + _3388;
                        _3310 = (_3560 * _3445.x) + _3383;
                        _3311 = (_3560 * _3445.y) + _3384;
                        _3312 = (_3560 * _3445.z) + _3385;
                        if (_3390 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3383 = _3310;
                            _3384 = _3311;
                            _3385 = _3312;
                            _3386 = _3313;
                            _3387 = _3314;
                            _3388 = _3315;
                            _3389 = _3390;
                        }
                    }
                    frontier_phi_73_pred = _3315;
                    frontier_phi_73_pred_1 = _3314;
                    frontier_phi_73_pred_2 = _3313;
                    frontier_phi_73_pred_3 = _3312;
                    frontier_phi_73_pred_4 = _3311;
                    frontier_phi_73_pred_5 = _3310;
                }
                _3088 = frontier_phi_73_pred;
                _3086 = frontier_phi_73_pred_1;
                _3084 = frontier_phi_73_pred_2;
                _3082 = frontier_phi_73_pred_3;
                _3080 = frontier_phi_73_pred_4;
                _3078 = frontier_phi_73_pred_5;
                uint _3245 = _3244 + 1u;
                if (_3245 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3238 = _3078;
                    _3239 = _3080;
                    _3240 = _3082;
                    _3241 = _3084;
                    _3242 = _3086;
                    _3243 = _3088;
                    _3244 = _3245;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3077 = _3078;
            _3079 = _3080;
            _3081 = _3082;
            _3083 = _3084;
            _3085 = _3086;
            _3087 = _3088;
        }
        uvec4 _3091 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3092 = _3091.z;
        uint _3094 = (_3092 >> 8u) & 15u;
        float _3206;
        float _3208;
        float _3210;
        float _3212;
        float _3214;
        float _3216;
        if (((4294967295u << _3094) & _2963) == 0u)
        {
            _3206 = _3077;
            _3208 = _3079;
            _3210 = _3081;
            _3212 = _3083;
            _3214 = _3085;
            _3216 = _3087;
        }
        else
        {
            float _3231 = inversesqrt(dot(vec3(_2022, _2023, _2024), vec3(_2022, _2023, _2024)));
            float _3232 = _3231 * _2022;
            float _3233 = _3231 * _2023;
            float _3234 = _3231 * _2024;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3094 < ((_3092 >> 12u) & 15u))
            {
                float _3207;
                float _3209;
                float _3211;
                float _3213;
                float _3215;
                float _3217;
                float _3366 = _3077;
                float _3367 = _3079;
                float _3368 = _3081;
                float _3369 = _3083;
                float _3370 = _3085;
                float _3371 = _3087;
                uint _3372 = _3094;
                uint _3381;
                bool _3382;
                for (;;)
                {
                    _3381 = texelFetch(g_lightClassification, int((((_2957 << 5u) + (_2943 << 9u)) + (_3372 << 2u)) >> 2u)).x;
                    _3382 = _3381 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3382)
                    {
                        frontier_phi_84_pred = _3370;
                        frontier_phi_84_pred_1 = _3369;
                        frontier_phi_84_pred_2 = _3368;
                        frontier_phi_84_pred_3 = _3367;
                        frontier_phi_84_pred_4 = _3366;
                        frontier_phi_84_pred_5 = _3371;
                    }
                    else
                    {
                        float _3574;
                        float _3575;
                        float _3576;
                        float _3577;
                        float _3578;
                        float _3579;
                        float _3868;
                        float _3869;
                        float _3870;
                        float _3871;
                        float _3872;
                        float _3873;
                        float _3587 = _3366;
                        float _3588 = _3367;
                        float _3589 = _3368;
                        float _3590 = _3369;
                        float _3591 = _3370;
                        float _3592 = _3371;
                        uint _3593 = _3381;
                        uint _3594;
                        vec4 _3619;
                        float _3620;
                        vec4 _3635;
                        vec3 _3647;
                        vec4 _3663;
                        vec4 _3678;
                        float _3724;
                        bool _3725;
                        for (;;)
                        {
                            uint _3604 = ((_3372 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3593));
                            _3594 = (_3593 + 4294967295u) & _3593;
                            uint _3606 = _3604 * 40u;
                            _3619 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3606)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 3u)).x));
                            _3620 = _3619.w;
                            uint _3622 = (_3604 * 40u) + 4u;
                            _3635 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3622)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 3u)).x));
                            uint _3637 = (_3604 * 40u) + 8u;
                            _3647 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3637)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 2u)).x));
                            uint _3650 = (_3604 * 40u) + 16u;
                            _3663 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3650)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3650 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3650 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3650 + 3u)).x));
                            uint _3665 = (_3604 * 40u) + 20u;
                            _3678 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3665)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 3u)).x));
                            uint _3680 = (_3604 * 40u) + 24u;
                            vec4 _3693 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3680)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3680 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3680 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3680 + 3u)).x));
                            uint _3699 = (_3604 * 40u) + 28u;
                            vec4 _3712 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3699)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3699 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3699 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3699 + 3u)).x));
                            _3724 = fma(_2024, _3712.z, fma(_2023, _3712.y, _3712.x * _2022)) + _3712.w;
                            _3725 = !((fma(_2024, _3693.z, fma(_2023, _3693.y, _3693.x * _2022)) + _3693.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3725)
                            {
                                float _3752 = _3619.x - _2022;
                                float _3753 = _3619.y - _2023;
                                float _3754 = _3619.z - _2024;
                                float _3755 = dot(vec3(_3752, _3753, _3754), vec3(_3752, _3753, _3754));
                                float _3758 = inversesqrt(_3755);
                                float _3759 = _3758 * _3752;
                                float _3760 = _3758 * _3753;
                                float _3761 = _3758 * _3754;
                                float _3765 = 1.0 - (_3755 / (_3620 * _3620));
                                float _4921 = isnan(0.0) ? _3765 : (isnan(_3765) ? 0.0 : max(_3765, 0.0));
                                float _3766 = isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0));
                                float _3770 = sqrt(_3755) * _3635.w;
                                float _3772 = 1.39999997615814208984375 / (_3770 + 1.39999997615814208984375);
                                float _3773 = _3772 * _3772;
                                float _3776 = ((1.0 - _3773) * dot(vec3(_3759, _3760, _3761), vec3(_809, _812, _815))) + _3773;
                                float _3779 = _3770 * _3770;
                                float _3783 = (fma(_2024, _3663.z, fma(_2023, _3663.y, _3663.x * _2022)) + _3663.w) / _3724;
                                float _3784 = (fma(_2024, _3678.z, fma(_2023, _3678.y, _3678.x * _2022)) + _3678.w) / _3724;
                                float _3788 = 1.0 - dot(vec2(_3783, _3784), vec2(_3783, _3784));
                                float _4937 = isnan(0.0) ? _3788 : (isnan(_3788) ? 0.0 : max(_3788, 0.0));
                                float _3789 = isnan(1.0) ? _4937 : (isnan(_4937) ? 1.0 : min(_4937, 1.0));
                                float _3790 = _3789 * (((isnan(0.0) ? _3776 : (isnan(_3776) ? 0.0 : max(_3776, 0.0))) * _3766) / ((_3779 * 0.699999988079071044921875) + 1.0));
                                float _3802 = exp2(log2(1.0 / ((_3779 * 3.5) + 5.0)) * 0.25);
                                float _3803 = 1.0 - _929;
                                float _3810 = sqrt(1.0 - ((1.0 - (_3803 * _3803)) * (1.0 - (_3802 * _3802))));
                                float _3811 = _3810 * _3810;
                                float _3812 = _3811 * _3811;
                                float _3813 = _3759 - _3232;
                                float _3814 = _3760 - _3233;
                                float _3815 = _3761 - _3234;
                                float _3819 = inversesqrt(dot(vec3(_3813, _3814, _3815), vec3(_3813, _3814, _3815)));
                                float _3823 = dot(vec3(_809, _812, _815), vec3((-0.0) - _3232, (-0.0) - _3233, (-0.0) - _3234));
                                float _4948 = isnan(0.0) ? _3823 : (isnan(_3823) ? 0.0 : max(_3823, 0.0));
                                float _3826 = isnan(1.0) ? _4948 : (isnan(_4948) ? 1.0 : min(_4948, 1.0));
                                float _3827 = dot(vec3(_809, _812, _815), vec3(_3819 * _3813, _3819 * _3814, _3819 * _3815));
                                float _4959 = isnan(0.0) ? _3827 : (isnan(_3827) ? 0.0 : max(_3827, 0.0));
                                float _3830 = isnan(1.0) ? _4959 : (isnan(_4959) ? 1.0 : min(_4959, 1.0));
                                float _3834 = ((_3830 * _3830) * (_3812 + (-1.0))) + 1.0;
                                float _3835 = _3772 * _3811;
                                float _3836 = _3835 * _3835;
                                float _3842 = ((1.0 - _3836) * dot(vec3(_809, _812, _815), vec3(_3759, _3760, _3761))) + _3836;
                                float _4970 = isnan(0.0) ? _3842 : (isnan(_3842) ? 0.0 : max(_3842, 0.0));
                                float _3843 = isnan(1.0) ? _4970 : (isnan(_4970) ? 1.0 : min(_4970, 1.0));
                                float _3844 = 1.0 - _3811;
                                float _3854 = (0.5 / (((_3843 * ((_3826 * _3844) + _3811)) + 9.9999999392252902907785028219223e-09) + (((_3843 * _3844) + _3811) * _3826))) * _3843;
                                float _4981 = isnan(0.0) ? _3854 : (isnan(_3854) ? 0.0 : max(_3854, 0.0));
                                float _3864 = (_3789 * _3766) * (((_3812 * 3.1415927410125732421875) * (isnan(1.0) ? _4981 : (isnan(_4981) ? 1.0 : min(_4981, 1.0)))) / ((_3834 * _3834) * ((_3779 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3790 * _3635.y;
                                frontier_phi_90_pred_1 = _3790 * _3635.x;
                                frontier_phi_90_pred_2 = _3864 * _3647.z;
                                frontier_phi_90_pred_3 = _3864 * _3647.y;
                                frontier_phi_90_pred_4 = _3864 * _3647.x;
                                frontier_phi_90_pred_5 = _3790 * _3635.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3872 = frontier_phi_90_pred;
                            _3871 = frontier_phi_90_pred_1;
                            _3870 = frontier_phi_90_pred_2;
                            _3869 = frontier_phi_90_pred_3;
                            _3868 = frontier_phi_90_pred_4;
                            _3873 = frontier_phi_90_pred_5;
                            _3577 = _3871 + _3590;
                            _3578 = _3872 + _3591;
                            _3579 = _3873 + _3592;
                            _3574 = _3868 + _3587;
                            _3575 = _3869 + _3588;
                            _3576 = _3870 + _3589;
                            if (_3594 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3587 = _3574;
                                _3588 = _3575;
                                _3589 = _3576;
                                _3590 = _3577;
                                _3591 = _3578;
                                _3592 = _3579;
                                _3593 = _3594;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3578;
                        frontier_phi_84_pred_1 = _3577;
                        frontier_phi_84_pred_2 = _3576;
                        frontier_phi_84_pred_3 = _3575;
                        frontier_phi_84_pred_4 = _3574;
                        frontier_phi_84_pred_5 = _3579;
                    }
                    _3215 = frontier_phi_84_pred;
                    _3213 = frontier_phi_84_pred_1;
                    _3211 = frontier_phi_84_pred_2;
                    _3209 = frontier_phi_84_pred_3;
                    _3207 = frontier_phi_84_pred_4;
                    _3217 = frontier_phi_84_pred_5;
                    uint _3373 = _3372 + 1u;
                    if (_3373 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3366 = _3207;
                        _3367 = _3209;
                        _3368 = _3211;
                        _3369 = _3213;
                        _3370 = _3215;
                        _3371 = _3217;
                        _3372 = _3373;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3217;
                frontier_phi_65_66_ladder_1 = _3213;
                frontier_phi_65_66_ladder_2 = _3215;
                frontier_phi_65_66_ladder_3 = _3209;
                frontier_phi_65_66_ladder_4 = _3207;
                frontier_phi_65_66_ladder_5 = _3211;
            }
            else
            {
                frontier_phi_65_66_ladder = _3087;
                frontier_phi_65_66_ladder_1 = _3083;
                frontier_phi_65_66_ladder_2 = _3085;
                frontier_phi_65_66_ladder_3 = _3079;
                frontier_phi_65_66_ladder_4 = _3077;
                frontier_phi_65_66_ladder_5 = _3081;
            }
            _3206 = frontier_phi_65_66_ladder_4;
            _3208 = frontier_phi_65_66_ladder_3;
            _3210 = frontier_phi_65_66_ladder_5;
            _3212 = frontier_phi_65_66_ladder_1;
            _3214 = frontier_phi_65_66_ladder_2;
            _3216 = frontier_phi_65_66_ladder;
        }
        float _3221 = isnan(1.0) ? _913 : (isnan(_913) ? 1.0 : min(_913, 1.0));
        _2975 = (_3221 * _3212) + _2488;
        _2977 = (_3221 * _3214) + _2490;
        _2979 = (_3221 * _3216) + _2492;
        _2981 = ((_3206 * _898) * _3221) + _2826;
        _2983 = ((_3208 * _900) * _3221) + _2828;
        _2985 = ((_3210 * _901) * _3221) + _2830;
    }
    else
    {
        _2975 = _2488;
        _2977 = _2490;
        _2979 = _2492;
        _2981 = _2826;
        _2983 = _2828;
        _2985 = _2830;
    }
    uint _2991 = _842 + uint(cbMatDynParam._m0[0u].w);
    float _2999 = ((cbMtdParam._m0[11u].x * cbMtdParam._m0[22u].z) * _628.x) * cbInstanceData._m0[_2991].x;
    float _3002 = ((cbMtdParam._m0[11u].y * cbMtdParam._m0[22u].z) * _628.y) * cbInstanceData._m0[_2991].y;
    float _3005 = ((cbMtdParam._m0[11u].z * cbMtdParam._m0[22u].z) * _628.z) * cbInstanceData._m0[_2991].z;
    float _4997 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _5008 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _5019 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _3022 = (((isnan(1.0) ? _4997 : (isnan(_4997) ? 1.0 : min(_4997, 1.0))) * (_2975 + ((isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0))) * _913))) + ((_2981 + ((isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0))) * _1754)) * cbPerFrame._m0[3u].x)) + _2999;
    float _3024 = (_3002 + ((_2983 + ((isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0))) * _1754)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5008 : (isnan(_5008) ? 1.0 : min(_5008, 1.0))) * (_2977 + ((isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0))) * _913)));
    float _3026 = (_3005 + ((_2985 + ((isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0))) * _1754)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5019 : (isnan(_5019) ? 1.0 : min(_5019, 1.0))) * (_2979 + ((isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0))) * _913)));
    float _3027 = isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0));
    float _3028 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0));
    float _3029 = isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : max(_3026, 0.0));
    float _3035 = cbMtdParam._m0[2u].x * _2999;
    float _3036 = cbMtdParam._m0[2u].y * _3002;
    float _3037 = cbMtdParam._m0[2u].z * _3005;
    float _5045 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3039 = isnan(1.0) ? _5045 : (isnan(_5045) ? 1.0 : min(_5045, 1.0));
    uint _3040 = _841 + 6u;
    float _3048 = _785 / cbSceneParam._m0[86u].x;
    float _3049 = _786 / cbSceneParam._m0[86u].y;
    vec4 _3063 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3048, _3049, (log2((isnan(cbSceneParam._m0[77u].w) ? _707 : (isnan(_707) ? cbSceneParam._m0[77u].w : min(_707, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3065 = _3063.x;
    float _3066 = _3063.y;
    float _3067 = _3063.z;
    float _3068 = _3063.w;
    float _3139;
    float _3141;
    float _3143;
    float _3145;
    if (_707 > cbSceneParam._m0[78u].w)
    {
        float _3102 = isnan(_707) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _707 : min(cbSceneParam._m0[80u].w, _707));
        float _3103 = _3102 / _707;
        float _3114 = _3103 * _757;
        float _3115 = _758 * _3103;
        float _3116 = (-0.0) - _3115;
        float _3117 = _3103 * _759;
        float _3119 = (cbSceneParam._m0[77u].w * _3116) / _3102;
        float _3120 = _3119 + cbSceneParam._m0[79u].w;
        float _3121 = cbSceneParam._m0[79u].w - _3115;
        float _3127 = sqrt(((_3114 * _3114) + (_3115 * _3115)) + (_3117 * _3117));
        float _3130 = (1.0 - (cbSceneParam._m0[77u].w / _3102)) * _3127;
        float _3135 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3137 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3323;
        if (abs((_3116 - _3119) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3323 = ((((_3120 > 0.0) ? exp2(_3135 * _3120) : (2.0 - exp2(_3137 * _3120))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3130;
        }
        else
        {
            float _3267 = 1.0 / cbSceneParam._m0[80u].x;
            float _3268 = isnan(_3121) ? _3120 : (isnan(_3120) ? _3121 : max(_3120, _3121));
            float _3269 = isnan(_3121) ? _3120 : (isnan(_3120) ? _3121 : min(_3120, _3121));
            float _3278 = isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : min(_3268, 0.0));
            float _3279 = isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : min(_3269, 0.0));
            _3323 = ((abs(_3127 / _3116) * cbSceneParam._m0[80u].y) * ((((_3278 - _3279) * 2.0) - ((exp2(_3135 * (isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : max(_3268, 0.0)))) - exp2(_3135 * (isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0))))) * _3267)) - ((exp2(_3137 * _3278) - exp2(_3137 * _3279)) * _3267))) + (_3130 * cbSceneParam._m0[80u].z);
        }
        vec4 _3325 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3048, _3049, 1.0), 0.0);
        float _3334 = exp2((_3323 * (-1.44269502162933349609375)) * (1.0 - _3325.w));
        float _3335 = log2(_3334);
        float _3351 = log2(_3068);
        _3139 = (exp2(_3351 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3335 * cbSceneParam._m0[78u].x)) * _3325.x) / cbSceneParam._m0[78u].x)) + _3065;
        _3141 = (exp2(_3351 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3335 * cbSceneParam._m0[78u].y)) * _3325.y) / cbSceneParam._m0[78u].y)) + _3066;
        _3143 = (exp2(_3351 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3335 * cbSceneParam._m0[78u].z)) * _3325.z) / cbSceneParam._m0[78u].z)) + _3067;
        _3145 = _3334 * _3068;
    }
    else
    {
        _3139 = _3065;
        _3141 = _3066;
        _3143 = _3067;
        _3145 = _3068;
    }
    bool _3361;
    vec4 _3155;
    vec4 _3177;
    float _3179;
    float _3183;
    float _3184;
    float _3185;
    float _3188;
    float _3191;
    float _3194;
    float _3195;
    bool _3205;
    for (;;)
    {
        _3155 = cbMatDynParam._m0[0u];
        float _3157 = roundEven(_3155.y);
        bool _3158 = _3157 == 3.0;
        float _3159 = log2(_3145);
        float _3163 = exp2(_3159 * cbSceneParam._m0[78u].x);
        float _3164 = exp2(_3159 * cbSceneParam._m0[78u].y);
        float _3165 = exp2(_3159 * cbSceneParam._m0[78u].z);
        float _3166 = _3163 * _3027;
        float _3167 = _3164 * _3028;
        float _3168 = _3165 * _3029;
        float _3175 = _773 + (-0.5);
        _3177 = cbMtdParam._m0[1u];
        _3179 = _3177.y * _3175;
        float _3182 = (_3157 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3183 = _3182 * (_3158 ? _3166 : (_3166 + (cbSceneParam._m0[72u].w * _3139)));
        _3184 = _3182 * (_3158 ? _3167 : (_3167 + (cbSceneParam._m0[72u].w * _3141)));
        _3185 = _3182 * (_3158 ? _3168 : (_3168 + (cbSceneParam._m0[72u].w * _3143)));
        _3188 = ((_3035 * _3039) * _3163) * _3182;
        _3191 = ((_3036 * _3039) * _3164) * _3182;
        _3194 = ((_3037 * _3039) * _3165) * _3182;
        _3195 = _3175 * 0.999000012874603271484375;
        _3205 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3205)
        {
            if ((cbInstanceData._m0[_841 + 7u].x + _3195) < 0.5)
            {
                _3361 = true;
                break;
            }
        }
        uint _3302 = _842 + uint(_3155.w);
        if ((cbInstanceData._m0[_3302].w < 1.0) && ((cbInstanceData._m0[_3302].w + _3195) < 0.5))
        {
            _3361 = true;
            break;
        }
        if ((_3179 + 1.0) < _3177.x)
        {
            _3361 = true;
            break;
        }
        _3361 = false;
        break;
    }
    float _3565;
    if (_3361)
    {
        discard_state = true;
        _3565 = 0.0;
    }
    else
    {
        _3565 = cbInstanceData._m0[_3040].w;
    }
    SV_Target.x = _3183;
    SV_Target.y = _3184;
    SV_Target.z = _3185;
    SV_Target.w = _3565;
    SV_Target_1.x = _3188;
    SV_Target_1.y = _3191;
    SV_Target_1.z = _3194;
    SV_Target_1.w = cbInstanceData._m0[_3040].w;
    discard_exit();
}


