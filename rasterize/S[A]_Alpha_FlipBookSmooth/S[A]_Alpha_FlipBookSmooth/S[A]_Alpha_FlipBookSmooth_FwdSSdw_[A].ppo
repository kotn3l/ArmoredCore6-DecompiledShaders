#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_A_Alpha_FlipBookSmooth_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _857;
float _3051;
float _3052;
float _3053;
float _3054;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _172 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _173 = _172 * NORMAL.x;
    float _174 = _172 * NORMAL.y;
    float _175 = _172 * NORMAL.z;
    float _180;
    float _181;
    float _182;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _180 = (-0.0) - _173;
        _181 = (-0.0) - _174;
        _182 = (-0.0) - _175;
    }
    else
    {
        _180 = _173;
        _181 = _174;
        _182 = _175;
    }
    uint _199 = uint(int(floor(cbMtdParam._m0[10u].y)));
    float _200 = fract(cbMtdParam._m0[10u].y);
    uint _201 = _199 + 1u;
    uint _202 = uint(int(cbMtdParam._m0[10u].w * cbMtdParam._m0[10u].z));
    float _205 = float(int(_199 - _202 * (_199 / _202)));
    float _209 = float(int(_201 - _202 * (_201 / _202)));
    float _213 = 1.0 / cbMtdParam._m0[10u].z;
    float _215 = 1.0 / cbMtdParam._m0[10u].w;
    float _216 = fract(TEXCOORD_1.x);
    float _217 = fract(TEXCOORD_1.y);
    vec4 _238 = texture(sampler2D(S_A_Alpha_FlipBookSmooth_snp_0_Texture2D_0, SS_DiffuseMap), vec2((((_216 + (_209 - cbMtdParam._m0[10u].z * trunc(_209 / cbMtdParam._m0[10u].z))) * _213) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_217 + floor(_209 / cbMtdParam._m0[10u].z)) * _215) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _249 = texture(sampler2D(S_A_Alpha_FlipBookSmooth_snp_0_Texture2D_0, SS_DiffuseMap), vec2((((_216 + (_205 - cbMtdParam._m0[10u].z * trunc(_205 / cbMtdParam._m0[10u].z))) * _213) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_217 + floor(_205 / cbMtdParam._m0[10u].z)) * _215) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _251 = _249.x;
    float _252 = _249.y;
    float _253 = _249.z;
    float _254 = _249.w;
    float _267 = (((_238.x - _251) * _200) + _251) * cbMtdParam._m0[9u].x;
    float _268 = (((_238.y - _252) * _200) + _252) * cbMtdParam._m0[9u].y;
    float _269 = (((_238.z - _253) * _200) + _253) * cbMtdParam._m0[9u].z;
    vec4 _279 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _281 = _279.x;
    float _304 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _281)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _281))) - POSITION_1.w) / cbMtdParam._m0[10u].x;
    float _3063 = isnan(0.0) ? _304 : (isnan(_304) ? 0.0 : max(_304, 0.0));
    float _307 = (cbMtdParam._m0[9u].w * TEXCOORD_1.z) * (((_238.w - _254) * _200) + _254);
    float _308 = (isnan(1.0) ? _3063 : (isnan(_3063) ? 1.0 : min(_3063, 1.0))) * _307;
    float _309 = gl_FragCoord.x * 0.125;
    float _311 = gl_FragCoord.y * 0.125;
    float _321 = float(_307 >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_309, _311)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625));
    float _325 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _326 = _325 * _180;
    float _327 = _325 * _181;
    float _328 = _325 * _182;
    float _3074 = isnan(0.0) ? _308 : (isnan(_308) ? 0.0 : max(_308, 0.0));
    float _329 = isnan(1.0) ? _3074 : (isnan(_3074) ? 1.0 : min(_3074, 1.0));
    float _3085 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _3096 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _3107 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _346 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _387 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _397 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _387);
    float _398 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _387);
    float _399 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _387);
    float _403 = inversesqrt(dot(vec3(_397, _398, _399), vec3(_397, _398, _399)));
    float _404 = _397 * _403;
    float _405 = _398 * _403;
    float _406 = _399 * _403;
    vec4 _407 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_309, _311));
    float _409 = _407.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _538 = sqrt(((_397 * _397) + (_398 * _398)) + (_399 * _399));
        float _544 = (cbMatDynParam._m0[5u].x * _538) + cbMatDynParam._m0[5u].y;
        float _3118 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
        float _545 = isnan(1.0) ? _3118 : (isnan(_3118) ? 1.0 : min(_3118, 1.0));
        float _549 = (cbMatDynParam._m0[5u].z * _538) + cbMatDynParam._m0[5u].w;
        float _3129 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3129 : (isnan(_3129) ? 1.0 : min(_3129, 1.0))) - _545)) + _545) < ((_409 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _420 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _421 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _441 = fma(_328, cbSceneParam._m0[5u].z, fma(_327, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _326));
    float _444 = fma(_328, cbSceneParam._m0[6u].z, fma(_327, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _326));
    float _447 = fma(_328, cbSceneParam._m0[7u].z, fma(_327, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _326));
    uint _460 = uint(roundEven(NORMAL.w)) * 13u;
    uint _462 = _460 + 9u;
    uint _463 = _462 + uint(cbMatDynParam._m0[0u].w);
    float _469 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3085 : (isnan(_3085) ? 1.0 : min(_3085, 1.0)))) * cbInstanceData._m0[_463].x;
    float _470 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3096 : (isnan(_3096) ? 1.0 : min(_3096, 1.0)))) * cbInstanceData._m0[_463].y;
    float _471 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3107 : (isnan(_3107) ? 1.0 : min(_3107, 1.0)))) * cbInstanceData._m0[_463].z;
    float _3140 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _472 = isnan(1.0) ? _3140 : (isnan(_3140) ? 1.0 : min(_3140, 1.0));
    float _3151 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _473 = isnan(1.0) ? _3151 : (isnan(_3151) ? 1.0 : min(_3151, 1.0));
    float _3162 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _474 = isnan(1.0) ? _3162 : (isnan(_3162) ? 1.0 : min(_3162, 1.0));
    vec4 _483 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _420, cbSceneParam._m0[86u].y * _421));
    float _486 = _483.x * TEXCOORD_1.w;
    float _487 = dot(vec3(_326, _327, _328), vec3(_404, _405, _406));
    float _490 = _487 * 2.0;
    float _495 = (_490 * _326) - _404;
    float _496 = (_490 * _327) - _405;
    float _497 = (_490 * _328) - _406;
    float _519 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _523 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _527 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _856;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    float _863;
    float _864;
    float _865;
    float _866;
    float _867;
    float _868;
    float _869;
    float _870;
    float _871;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _581 = fma(_527, cbModelParam._m0[26u].z, fma(_523, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _519));
        float _585 = fma(_527, cbModelParam._m0[27u].z, fma(_523, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _519));
        float _589 = fma(_527, cbModelParam._m0[28u].z, fma(_523, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _519));
        float _614 = _519 + _326;
        float _615 = _523 + _327;
        float _616 = _527 + _328;
        float _626 = fma(_616, cbModelParam._m0[26u].z, fma(_615, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _614)) - _581;
        float _627 = fma(_616, cbModelParam._m0[27u].z, fma(_615, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _614)) - _585;
        float _628 = fma(_616, cbModelParam._m0[28u].z, fma(_615, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _614)) - _589;
        float _632 = inversesqrt(dot(vec3(_626, _627, _628), vec3(_626, _627, _628)));
        float _645 = ((_632 * _626) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_581 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _646 = ((_632 * _627) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_585 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _647 = ((_632 * _628) / cbModelParam._m0[34u].z) + ((((((_589 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _650 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_645, _646, _647), 0.0);
        vec4 _657 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_645, _646, _647), 0.0);
        vec4 _664 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_645, _646, _647), 0.0);
        vec4 _671 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_645, _646, _647), 0.0);
        float _684 = exp2((_650.w + (-0.5)) * 20.0) * 2.0;
        float _685 = _684 * (_650.x + (-0.5));
        float _686 = _684 * (_650.y + (-0.5));
        float _687 = _684 * (_650.z + (-0.5));
        float _694 = exp2((_657.w + (-0.5)) * 20.0) * 2.0;
        float _695 = _694 * (_657.x + (-0.5));
        float _696 = _694 * (_657.y + (-0.5));
        float _697 = _694 * (_657.z + (-0.5));
        float _704 = exp2((_664.w + (-0.5)) * 20.0) * 2.0;
        float _705 = _704 * (_664.x + (-0.5));
        float _706 = _704 * (_664.y + (-0.5));
        float _707 = _704 * (_664.z + (-0.5));
        float _714 = exp2((_671.w + (-0.5)) * 20.0) * 2.0;
        float _715 = _714 * (_671.x + (-0.5));
        float _716 = _714 * (_671.y + (-0.5));
        float _717 = _714 * (_671.z + (-0.5));
        float _718 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
        float _719 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
        float _720 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
        float _721 = _685 * 0.5;
        float _722 = _695 * 0.5;
        float _723 = _705 * 0.5;
        float _724 = dot(vec3(_721, _722, _723), vec3(_721, _722, _723));
        float _729 = (_724 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_724);
        float _738 = (dot(vec3(_326, _327, _328), vec3(_729 * _721, _729 * _722, _729 * _723)) + 1.0) * 0.5;
        float _3188 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
        float _748 = sqrt(((_722 * _722) + (_721 * _721)) + (_723 * _723)) / (_718 + 9.9999997473787516355514526367188e-06);
        float _3199 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
        float _749 = isnan(1.0) ? _3199 : (isnan(_3199) ? 1.0 : min(_3199, 1.0));
        float _750 = _749 * 2.0;
        float _754 = (1.0 - _749) / (_749 + 1.0);
        float _3210 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        float _755 = isnan(1.0) ? _3210 : (isnan(_3210) ? 1.0 : min(_3210, 1.0));
        float _764 = ((((1.0 - _755) * (_750 + 2.0)) * exp2(log2(isnan(1.0) ? _3188 : (isnan(_3188) ? 1.0 : min(_3188, 1.0))) * (_750 + 1.0))) + _755) * _718;
        float _765 = _686 * 0.5;
        float _766 = _696 * 0.5;
        float _767 = _706 * 0.5;
        float _768 = dot(vec3(_765, _766, _767), vec3(_765, _766, _767));
        float _773 = (_768 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_768);
        float _781 = (dot(vec3(_326, _327, _328), vec3(_773 * _765, _773 * _766, _773 * _767)) + 1.0) * 0.5;
        float _3221 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        float _790 = sqrt(((_766 * _766) + (_765 * _765)) + (_767 * _767)) / (_719 + 9.9999997473787516355514526367188e-06);
        float _3232 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        float _791 = isnan(1.0) ? _3232 : (isnan(_3232) ? 1.0 : min(_3232, 1.0));
        float _792 = _791 * 2.0;
        float _796 = (1.0 - _791) / (_791 + 1.0);
        float _3243 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
        float _797 = isnan(1.0) ? _3243 : (isnan(_3243) ? 1.0 : min(_3243, 1.0));
        float _806 = ((((1.0 - _797) * (_792 + 2.0)) * exp2(log2(isnan(1.0) ? _3221 : (isnan(_3221) ? 1.0 : min(_3221, 1.0))) * (_792 + 1.0))) + _797) * _719;
        float _807 = _687 * 0.5;
        float _808 = _697 * 0.5;
        float _809 = _707 * 0.5;
        float _810 = dot(vec3(_807, _808, _809), vec3(_807, _808, _809));
        float _815 = (_810 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_810);
        float _823 = (dot(vec3(_326, _327, _328), vec3(_815 * _807, _815 * _808, _815 * _809)) + 1.0) * 0.5;
        float _3254 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
        float _832 = sqrt(((_808 * _808) + (_807 * _807)) + (_809 * _809)) / (_720 + 9.9999997473787516355514526367188e-06);
        float _3265 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
        float _833 = isnan(1.0) ? _3265 : (isnan(_3265) ? 1.0 : min(_3265, 1.0));
        float _834 = _833 * 2.0;
        float _838 = (1.0 - _833) / (_833 + 1.0);
        float _3276 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
        float _839 = isnan(1.0) ? _3276 : (isnan(_3276) ? 1.0 : min(_3276, 1.0));
        float _848 = ((((1.0 - _839) * (_834 + 2.0)) * exp2(log2(isnan(1.0) ? _3254 : (isnan(_3254) ? 1.0 : min(_3254, 1.0))) * (_834 + 1.0))) + _839) * _720;
        _856 = _687;
        _858 = _686;
        _859 = _685;
        _860 = _697;
        _861 = _696;
        _862 = _695;
        _863 = _707;
        _864 = _706;
        _865 = _705;
        _866 = _720;
        _867 = _719;
        _868 = _718;
        _869 = cbModelParam._m0[36u].z * (isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0)));
        _870 = cbModelParam._m0[36u].z * (isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0)));
        _871 = cbModelParam._m0[36u].z * (isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0)));
    }
    else
    {
        _856 = _857;
        _858 = _857;
        _859 = _857;
        _860 = _857;
        _861 = _857;
        _862 = _857;
        _863 = _857;
        _864 = _857;
        _865 = _857;
        _866 = _857;
        _867 = _857;
        _868 = _857;
        _869 = 0.0;
        _870 = 0.0;
        _871 = 0.0;
    }
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _900 = fma(_527, cbModelParam._m0[30u].z, fma(_523, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _519));
        float _904 = fma(_527, cbModelParam._m0[31u].z, fma(_523, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _519));
        float _908 = fma(_527, cbModelParam._m0[32u].z, fma(_523, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _519));
        float _931 = _519 + _326;
        float _932 = _523 + _327;
        float _933 = _527 + _328;
        float _943 = fma(_933, cbModelParam._m0[30u].z, fma(_932, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _931)) - _900;
        float _944 = fma(_933, cbModelParam._m0[31u].z, fma(_932, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _931)) - _904;
        float _945 = fma(_933, cbModelParam._m0[32u].z, fma(_932, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _931)) - _908;
        float _949 = inversesqrt(dot(vec3(_943, _944, _945), vec3(_943, _944, _945)));
        float _962 = ((_949 * _943) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_900 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _963 = ((_949 * _944) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_904 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _964 = ((_949 * _945) / cbModelParam._m0[35u].z) + ((((((_908 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _966 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_962, _963, _964), 0.0);
        vec4 _973 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_962, _963, _964), 0.0);
        vec4 _980 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_962, _963, _964), 0.0);
        vec4 _987 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_962, _963, _964), 0.0);
        float _999 = exp2((_966.w + (-0.5)) * 20.0) * 2.0;
        float _1000 = _999 * (_966.x + (-0.5));
        float _1001 = _999 * (_966.y + (-0.5));
        float _1002 = _999 * (_966.z + (-0.5));
        float _1009 = exp2((_973.w + (-0.5)) * 20.0) * 2.0;
        float _1010 = _1009 * (_973.x + (-0.5));
        float _1011 = _1009 * (_973.y + (-0.5));
        float _1012 = _1009 * (_973.z + (-0.5));
        float _1019 = exp2((_980.w + (-0.5)) * 20.0) * 2.0;
        float _1020 = _1019 * (_980.x + (-0.5));
        float _1021 = _1019 * (_980.y + (-0.5));
        float _1022 = _1019 * (_980.z + (-0.5));
        float _1029 = exp2((_987.w + (-0.5)) * 20.0) * 2.0;
        float _1030 = _1029 * (_987.x + (-0.5));
        float _1031 = _1029 * (_987.y + (-0.5));
        float _1032 = _1029 * (_987.z + (-0.5));
        float _1033 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1034 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1035 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1036 = _1000 * 0.5;
        float _1037 = _1010 * 0.5;
        float _1038 = _1020 * 0.5;
        float _1039 = dot(vec3(_1036, _1037, _1038), vec3(_1036, _1037, _1038));
        float _1044 = (_1039 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1039);
        float _1052 = (dot(vec3(_326, _327, _328), vec3(_1044 * _1036, _1044 * _1037, _1044 * _1038)) + 1.0) * 0.5;
        float _3317 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1061 = sqrt(((_1037 * _1037) + (_1036 * _1036)) + (_1038 * _1038)) / (_1033 + 9.9999997473787516355514526367188e-06);
        float _3328 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1062 = isnan(1.0) ? _3328 : (isnan(_3328) ? 1.0 : min(_3328, 1.0));
        float _1063 = _1062 * 2.0;
        float _1067 = (1.0 - _1062) / (_1062 + 1.0);
        float _3339 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1068 = isnan(1.0) ? _3339 : (isnan(_3339) ? 1.0 : min(_3339, 1.0));
        float _1077 = ((((1.0 - _1068) * (_1063 + 2.0)) * exp2(log2(isnan(1.0) ? _3317 : (isnan(_3317) ? 1.0 : min(_3317, 1.0))) * (_1063 + 1.0))) + _1068) * _1033;
        float _1078 = _1001 * 0.5;
        float _1079 = _1011 * 0.5;
        float _1080 = _1021 * 0.5;
        float _1081 = dot(vec3(_1078, _1079, _1080), vec3(_1078, _1079, _1080));
        float _1086 = (_1081 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1081);
        float _1094 = (dot(vec3(_326, _327, _328), vec3(_1086 * _1078, _1086 * _1079, _1086 * _1080)) + 1.0) * 0.5;
        float _3350 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1103 = sqrt(((_1079 * _1079) + (_1078 * _1078)) + (_1080 * _1080)) / (_1034 + 9.9999997473787516355514526367188e-06);
        float _3361 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1104 = isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0));
        float _1105 = _1104 * 2.0;
        float _1109 = (1.0 - _1104) / (_1104 + 1.0);
        float _3372 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1110 = isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0));
        float _1119 = ((((1.0 - _1110) * (_1105 + 2.0)) * exp2(log2(isnan(1.0) ? _3350 : (isnan(_3350) ? 1.0 : min(_3350, 1.0))) * (_1105 + 1.0))) + _1110) * _1034;
        float _1120 = _1002 * 0.5;
        float _1121 = _1012 * 0.5;
        float _1122 = _1022 * 0.5;
        float _1123 = dot(vec3(_1120, _1121, _1122), vec3(_1120, _1121, _1122));
        float _1128 = (_1123 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1123);
        float _1136 = (dot(vec3(_326, _327, _328), vec3(_1128 * _1120, _1128 * _1121, _1128 * _1122)) + 1.0) * 0.5;
        float _3383 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1145 = sqrt(((_1121 * _1121) + (_1120 * _1120)) + (_1122 * _1122)) / (_1035 + 9.9999997473787516355514526367188e-06);
        float _3394 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1146 = isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0));
        float _1147 = _1146 * 2.0;
        float _1151 = (1.0 - _1146) / (_1146 + 1.0);
        float _3405 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0));
        float _1161 = ((((1.0 - _1152) * (_1147 + 2.0)) * exp2(log2(isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0))) * (_1147 + 1.0))) + _1152) * _1035;
        _1169 = _1002;
        _1170 = _1001;
        _1171 = _1000;
        _1172 = _1012;
        _1173 = _1011;
        _1174 = _1010;
        _1175 = _1022;
        _1176 = _1021;
        _1177 = _1020;
        _1178 = _1035;
        _1179 = _1034;
        _1180 = _1033;
        _1181 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0)));
        _1182 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0)));
        _1183 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0)));
    }
    else
    {
        _1169 = _857;
        _1170 = _857;
        _1171 = _857;
        _1172 = _857;
        _1173 = _857;
        _1174 = _857;
        _1175 = _857;
        _1176 = _857;
        _1177 = _857;
        _1178 = _857;
        _1179 = _857;
        _1180 = _857;
        _1181 = 0.0;
        _1182 = 0.0;
        _1183 = 0.0;
    }
    float _1193 = (cbModelParam._m0[1u].x * (_1181 - _869)) + _869;
    float _1194 = (cbModelParam._m0[1u].x * (_1182 - _870)) + _870;
    float _1195 = (cbModelParam._m0[1u].x * (_1183 - _871)) + _871;
    float _1216 = fma(_1195, cbSceneParam._m0[89u].z, fma(_1194, cbSceneParam._m0[89u].y, _1193 * cbSceneParam._m0[89u].x));
    float _1219 = fma(_1195, cbSceneParam._m0[90u].z, fma(_1194, cbSceneParam._m0[90u].y, _1193 * cbSceneParam._m0[90u].x));
    float _1222 = fma(_1195, cbSceneParam._m0[91u].z, fma(_1194, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1193));
    float _1237 = _495 * 0.5;
    float _1238 = _496 * 0.5;
    float _1239 = _497 * 0.5;
    float _1240 = dot(vec4(_1237, _1238, _1239, 1.0), vec4(_1171, _1174, _1177, _1180));
    float _1243 = dot(vec4(_1237, _1238, _1239, 1.0), vec4(_1170, _1173, _1176, _1179));
    float _1246 = dot(vec4(_1237, _1238, _1239, 1.0), vec4(_1169, _1172, _1175, _1178));
    float _1280;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1253 = dot(vec4(_1237, _1238, _1239, 1.0), vec4(_856, _860, _863, _866));
        float _1257 = dot(vec4(_1237, _1238, _1239, 1.0), vec4(_858, _861, _864, _867));
        float _1261 = dot(vec4(_1237, _1238, _1239, 1.0), vec4(_859, _862, _865, _868));
        float _1268 = dot(vec4(cbModelParam._m0[39u]), vec4(_1237, _1238, _1239, 1.0));
        _1280 = dot(vec3(isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0)), isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0)), isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1268) ? 0.0 : (isnan(0.0) ? _1268 : max(0.0, _1268))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1280 = 1.0;
    }
    float _1291;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1282 = dot(vec4(cbModelParam._m0[40u]), vec4(_1237, _1238, _1239, 1.0));
        _1291 = dot(vec3(isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0)), isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0)), isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1282) ? 0.0 : (isnan(0.0) ? _1282 : max(0.0, _1282))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1291 = 1.0;
    }
    float _1295 = (_1291 * cbModelParam._m0[1u].x) + (_1280 * (1.0 - cbModelParam._m0[1u].x));
    float _1304 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1386;
    float _1388;
    float _1390;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1353 = fma(_527, cbModelParam._m0[13u].z, fma(_523, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _519)) + cbModelParam._m0[13u].w;
        float _1357 = fma(_527, cbModelParam._m0[14u].z, fma(_523, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _519)) + cbModelParam._m0[14u].w;
        float _1361 = fma(_527, cbModelParam._m0[15u].z, fma(_523, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _519)) + cbModelParam._m0[15u].w;
        float _1364 = fma(_497, cbModelParam._m0[13u].z, fma(_496, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _495));
        float _1367 = fma(_497, cbModelParam._m0[14u].z, fma(_496, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _495));
        float _1370 = fma(_497, cbModelParam._m0[15u].z, fma(_496, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _495));
        float _1396;
        if (_1364 > 0.0)
        {
            _1396 = abs((1.0 - _1353) / _1364);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1364 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1353 + 1.0) / _1364);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1396 = frontier_phi_19_17_ladder;
        }
        float _1625;
        if (_1367 > 0.0)
        {
            _1625 = abs((1.0 - _1357) / _1367);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1367 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1357 + 1.0) / _1367);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1625 = frontier_phi_28_24_ladder;
        }
        float _1817;
        if (_1370 > 0.0)
        {
            _1817 = abs((1.0 - _1361) / _1370);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1370 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1361 + 1.0) / _1370);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1817 = frontier_phi_40_35_ladder;
        }
        float _1819 = isnan(_1625) ? _1396 : (isnan(_1396) ? _1625 : min(_1396, _1625));
        float _1820 = isnan(_1817) ? _1819 : (isnan(_1819) ? _1817 : min(_1819, _1817));
        float _1824 = (_1820 * _1364) + _1353;
        float _1825 = (_1820 * _1367) + _1357;
        float _1826 = (_1820 * _1370) + _1361;
        float _1827 = _1820 * 9.9999997473787516355514526367188e-05;
        float _1829 = (-1.0) - _1827;
        float _1831 = _1827 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1826 > _1831) || ((_1826 < _1829) || ((_1825 > _1831) || ((_1825 < _1829) || ((_1824 < _1829) || (_1824 > _1831))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1923 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1826, cbModelParam._m0[9u].z, fma(_1825, cbModelParam._m0[9u].y, _1824 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1826, cbModelParam._m0[10u].z, fma(_1825, cbModelParam._m0[10u].y, _1824 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1826, cbModelParam._m0[11u].z, fma(_1825, cbModelParam._m0[11u].y, _1824 * cbModelParam._m0[11u].x))), _1304);
            frontier_phi_18_40_ladder = _1923.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _1923.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _1923.x * cbModelParam._m0[1u].y;
        }
        _1386 = frontier_phi_18_40_ladder_2;
        _1388 = frontier_phi_18_40_ladder_1;
        _1390 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1374 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_495, _496, _497), _1304);
        _1386 = _1374.x * cbModelParam._m0[1u].y;
        _1388 = _1374.y * cbModelParam._m0[1u].y;
        _1390 = _1374.z * cbModelParam._m0[1u].y;
    }
    float _1393 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1486;
    float _1488;
    float _1490;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1450 = fma(_527, cbModelParam._m0[21u].z, fma(_523, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _519)) + cbModelParam._m0[21u].w;
        float _1454 = fma(_527, cbModelParam._m0[22u].z, fma(_523, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _519)) + cbModelParam._m0[22u].w;
        float _1458 = fma(_527, cbModelParam._m0[23u].z, fma(_523, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _519)) + cbModelParam._m0[23u].w;
        float _1461 = fma(_497, cbModelParam._m0[21u].z, fma(_496, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _495));
        float _1464 = fma(_497, cbModelParam._m0[22u].z, fma(_496, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _495));
        float _1467 = fma(_497, cbModelParam._m0[23u].z, fma(_496, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _495));
        float _1630;
        if (_1461 > 0.0)
        {
            _1630 = abs((1.0 - _1450) / _1461);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1461 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1450 + 1.0) / _1461);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1630 = frontier_phi_30_26_ladder;
        }
        float _1844;
        if (_1464 > 0.0)
        {
            _1844 = abs((1.0 - _1454) / _1464);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1464 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1454 + 1.0) / _1464);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1844 = frontier_phi_42_37_ladder;
        }
        float _1995;
        if (_1467 > 0.0)
        {
            _1995 = abs((1.0 - _1458) / _1467);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1467 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1458 + 1.0) / _1467);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _1995 = frontier_phi_51_48_ladder;
        }
        float _1997 = isnan(_1844) ? _1630 : (isnan(_1630) ? _1844 : min(_1630, _1844));
        float _1998 = isnan(_1995) ? _1997 : (isnan(_1997) ? _1995 : min(_1997, _1995));
        float _2002 = (_1998 * _1461) + _1450;
        float _2003 = (_1998 * _1464) + _1454;
        float _2004 = (_1998 * _1467) + _1458;
        float _2005 = _1998 * 9.9999997473787516355514526367188e-05;
        float _2006 = (-1.0) - _2005;
        float _2008 = _2005 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2004 > _2008) || ((_2004 < _2006) || ((_2003 > _2008) || ((_2003 < _2006) || ((_2002 < _2006) || (_2002 > _2008))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2207 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2004, cbModelParam._m0[17u].z, fma(_2003, cbModelParam._m0[17u].y, _2002 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2004, cbModelParam._m0[18u].z, fma(_2003, cbModelParam._m0[18u].y, _2002 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2004, cbModelParam._m0[19u].z, fma(_2003, cbModelParam._m0[19u].y, _2002 * cbModelParam._m0[19u].x))), _1393);
            frontier_phi_27_51_ladder = _2207.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2207.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2207.x * cbModelParam._m0[1u].z;
        }
        _1486 = frontier_phi_27_51_ladder_2;
        _1488 = frontier_phi_27_51_ladder_1;
        _1490 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1470 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_495, _496, _497), _1393);
        _1486 = _1470.x * cbModelParam._m0[1u].z;
        _1488 = _1470.y * cbModelParam._m0[1u].z;
        _1490 = _1470.z * cbModelParam._m0[1u].z;
    }
    float _1502 = _486 * 0.01200000010430812835693359375;
    float _1504 = _1502 * ((cbModelParam._m0[1u].w * (_1486 - _1386)) + _1386);
    float _1505 = _1502 * ((cbModelParam._m0[1u].w * (_1488 - _1388)) + _1388);
    float _1506 = _1502 * ((cbModelParam._m0[1u].w * (_1490 - _1390)) + _1390);
    float _1509 = fma(_1506, cbSceneParam._m0[89u].z, fma(_1505, cbSceneParam._m0[89u].y, _1504 * cbSceneParam._m0[89u].x));
    float _1512 = fma(_1506, cbSceneParam._m0[90u].z, fma(_1505, cbSceneParam._m0[90u].y, _1504 * cbSceneParam._m0[90u].x));
    float _1515 = fma(_1506, cbSceneParam._m0[91u].z, fma(_1505, cbSceneParam._m0[91u].y, _1504 * cbSceneParam._m0[91u].x));
    vec4 _1523 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_420, _421));
    float _1525 = _1523.w;
    float _1537 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1525);
    float _1538 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1525);
    float _1539 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1525);
    uvec4 _1543 = floatBitsToUint(cbInstanceData._m0[_460 + 5u]);
    uint _1545 = _1543.x * 14u;
    uint _1546 = _1545 + 13u;
    float _1553 = _486 + (-1.0);
    float _1559 = (cbLight._m0[_1546].x * _1553) + 1.0;
    float _1560 = (cbLight._m0[_1546].y * _1553) + 1.0;
    float _1561 = (cbLight._m0[_1546].z * _1553) + 1.0;
    float _1562 = (cbLight._m0[_1546].w * _1553) + 1.0;
    uint _1563 = _1545 + 5u;
    float _1569 = isnan(1.0) ? _1560 : (isnan(_1560) ? 1.0 : min(_1560, 1.0));
    uint _1573 = _1545 + 4u;
    float _1583 = isnan(1.0) ? _1559 : (isnan(_1559) ? 1.0 : min(_1559, 1.0));
    uint _1587 = _1545 | 1u;
    float _1598 = dot(vec3(cbLight._m0[_1545].xyz), vec3(_326, _327, _328));
    float _1601 = dot(vec3(cbLight._m0[_1587].xyz), vec3(_326, _327, _328));
    float _3541 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
    float _3552 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
    float _1606 = (isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0))) * 0.3183098733425140380859375;
    float _1608 = (isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0))) * 0.3183098733425140380859375;
    float _1615 = ((cbLight._m0[_1563].x * _1569) * _1608) + (((cbLight._m0[_1573].x * _1537) * _1583) * _1606);
    float _1616 = ((_1569 * cbLight._m0[_1563].y) * _1608) + (((cbLight._m0[_1573].y * _1538) * _1583) * _1606);
    float _1617 = ((_1569 * cbLight._m0[_1563].z) * _1608) + (((cbLight._m0[_1573].z * _1539) * _1583) * _1606);
    uvec4 _1622 = floatBitsToUint(cbLight._m0[_1545 + 12u]);
    bool _1624 = _1622.x == 0u;
    float _1635;
    float _1637;
    float _1639;
    if (_1624)
    {
        _1635 = _1615;
        _1637 = _1616;
        _1639 = _1617;
    }
    else
    {
        uint _1643 = _1545 + 6u;
        float _1659 = (dot(vec3(cbLight._m0[_1545 + 2u].xyz), vec3(_326, _327, _328)) * 0.5) + 0.5;
        float _1660 = _1659 * _1659;
        float _3563 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1661 = isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0));
        float _1662 = isnan(1.0) ? _1561 : (isnan(_1561) ? 1.0 : min(_1561, 1.0));
        _1635 = (((cbLight._m0[_1643].x * 0.3183098733425140380859375) * _1661) * _1662) + _1615;
        _1637 = (((cbLight._m0[_1643].y * 0.3183098733425140380859375) * _1661) * _1662) + _1616;
        _1639 = (((cbLight._m0[_1643].z * 0.3183098733425140380859375) * _1661) * _1662) + _1617;
    }
    bool _1642 = _1622.y == 0u;
    float _1680;
    float _1682;
    float _1684;
    if (_1642)
    {
        _1680 = _1635;
        _1682 = _1637;
        _1684 = _1639;
    }
    else
    {
        uint _1788 = _1545 + 7u;
        float _1804 = (dot(vec3(cbLight._m0[_1545 + 3u].xyz), vec3(_326, _327, _328)) * 0.5) + 0.5;
        float _1805 = _1804 * _1804;
        float _3579 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
        float _1806 = isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0));
        float _1807 = isnan(1.0) ? _1562 : (isnan(_1562) ? 1.0 : min(_1562, 1.0));
        _1680 = (((cbLight._m0[_1788].x * 0.3183098733425140380859375) * _1806) * _1807) + _1635;
        _1682 = (((cbLight._m0[_1788].y * 0.3183098733425140380859375) * _1806) * _1807) + _1637;
        _1684 = (((cbLight._m0[_1788].z * 0.3183098733425140380859375) * _1806) * _1807) + _1639;
    }
    uint _1686 = _1545 + 8u;
    float _1692 = cbLight._m0[_1545].x + _404;
    float _1693 = cbLight._m0[_1545].y + _405;
    float _1694 = cbLight._m0[_1545].z + _406;
    float _1698 = inversesqrt(dot(vec3(_1692, _1693, _1694), vec3(_1692, _1693, _1694)));
    float _1702 = dot(vec3(_326, _327, _328), vec3(cbLight._m0[_1545].xyz));
    float _3595 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
    float _1705 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
    float _3606 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _1706 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
    float _1707 = dot(vec3(cbLight._m0[_1545].xyz), vec3(_1692 * _1698, _1693 * _1698, _1694 * _1698));
    float _3617 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
    float _1718 = (exp2(log2(1.0 - (isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1724 = (0.5 / ((_1705 + 9.9999999392252902907785028219223e-09) + _1706)) * _1705;
    float _3628 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
    float _1726 = (isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0))) * 0.31831014156341552734375;
    uint _1740 = _1545 + 9u;
    float _1746 = cbLight._m0[_1587].x + _404;
    float _1747 = cbLight._m0[_1587].y + _405;
    float _1748 = cbLight._m0[_1587].z + _406;
    float _1752 = inversesqrt(dot(vec3(_1746, _1747, _1748), vec3(_1746, _1747, _1748)));
    float _1756 = dot(vec3(_326, _327, _328), vec3(cbLight._m0[_1587].xyz));
    float _3639 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
    float _1759 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
    float _1760 = dot(vec3(cbLight._m0[_1587].xyz), vec3(_1746 * _1752, _1747 * _1752, _1748 * _1752));
    float _3650 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
    float _1769 = (exp2(log2(1.0 - (isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1773 = (0.5 / ((_1759 + 9.9999999392252902907785028219223e-09) + _1706)) * _1759;
    float _3661 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
    float _1775 = (isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0))) * 0.31831014156341552734375;
    float _1785 = (((_1769 * cbLight._m0[_1740].x) * _1775) * _1569) + ((((cbLight._m0[_1686].x * _1537) * _1718) * _1726) * _1583);
    float _1786 = (((_1769 * cbLight._m0[_1740].y) * _1775) * _1569) + ((((cbLight._m0[_1686].y * _1538) * _1718) * _1726) * _1583);
    float _1787 = (((_1769 * cbLight._m0[_1740].z) * _1775) * _1569) + ((((cbLight._m0[_1686].z * _1539) * _1718) * _1726) * _1583);
    float _1849;
    float _1851;
    float _1853;
    if (_1624)
    {
        _1849 = _1785;
        _1851 = _1786;
        _1853 = _1787;
    }
    else
    {
        uint _1855 = _1545 + 10u;
        uint _1861 = _1545 + 2u;
        float _1867 = cbLight._m0[_1861].x + _404;
        float _1868 = cbLight._m0[_1861].y + _405;
        float _1869 = cbLight._m0[_1861].z + _406;
        float _1873 = inversesqrt(dot(vec3(_1867, _1868, _1869), vec3(_1867, _1868, _1869)));
        float _1877 = dot(vec3(_326, _327, _328), vec3(cbLight._m0[_1861].xyz));
        float _3672 = isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0));
        float _1880 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
        float _1881 = dot(vec3(cbLight._m0[_1861].xyz), vec3(_1867 * _1873, _1868 * _1873, _1869 * _1873));
        float _3683 = isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0));
        float _1890 = (exp2(log2(1.0 - (isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1894 = (0.5 / ((_1880 + 9.9999999392252902907785028219223e-09) + _1706)) * _1880;
        float _3694 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
        float _1896 = (isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0))) * 0.31831014156341552734375;
        float _1897 = isnan(1.0) ? _1561 : (isnan(_1561) ? 1.0 : min(_1561, 1.0));
        _1849 = (((_1890 * cbLight._m0[_1855].x) * _1896) * _1897) + _1785;
        _1851 = (((_1890 * cbLight._m0[_1855].y) * _1896) * _1897) + _1786;
        _1853 = (((_1890 * cbLight._m0[_1855].z) * _1896) * _1897) + _1787;
    }
    float _1932;
    float _1934;
    float _1936;
    if (_1642)
    {
        _1932 = _1849;
        _1934 = _1851;
        _1936 = _1853;
    }
    else
    {
        uint _1943 = _1545 + 11u;
        uint _1949 = _1545 + 3u;
        float _1955 = cbLight._m0[_1949].x + _404;
        float _1956 = cbLight._m0[_1949].y + _405;
        float _1957 = cbLight._m0[_1949].z + _406;
        float _1961 = inversesqrt(dot(vec3(_1955, _1956, _1957), vec3(_1955, _1956, _1957)));
        float _1965 = dot(vec3(_326, _327, _328), vec3(cbLight._m0[_1949].xyz));
        float _3710 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
        float _1968 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
        float _1969 = dot(vec3(cbLight._m0[_1949].xyz), vec3(_1955 * _1961, _1956 * _1961, _1957 * _1961));
        float _3721 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
        float _1978 = (exp2(log2(1.0 - (isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1982 = (0.5 / ((_1968 + 9.9999999392252902907785028219223e-09) + _1706)) * _1968;
        float _3732 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
        float _1984 = (isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0))) * 0.31831014156341552734375;
        float _1985 = isnan(1.0) ? _1562 : (isnan(_1562) ? 1.0 : min(_1562, 1.0));
        _1932 = (((_1978 * cbLight._m0[_1943].x) * _1984) * _1985) + _1849;
        _1934 = (((_1978 * cbLight._m0[_1943].y) * _1984) * _1985) + _1851;
        _1936 = (((_1978 * cbLight._m0[_1943].z) * _1984) * _1985) + _1853;
    }
    float _2119;
    float _2121;
    float _2123;
    float _2125;
    float _2127;
    float _2129;
    if (_1543.y == 0u)
    {
        float _2060 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2061 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2060;
        float _2062 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2060;
        float _2063 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2060;
        uvec4 _2075 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2076 = _2075.x;
        uint _2087 = uint((float(_2075.y) * floor(float(uint(cbSceneParam._m0[85u].y * _421) / _2076))) + floor(float(uint(cbSceneParam._m0[85u].x * _420) / _2076)));
        float _2097 = (log2(_2063 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2098 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
        uint _2101 = uint(isnan(14.0) ? _2098 : (isnan(_2098) ? 14.0 : min(_2098, 14.0)));
        uvec4 _2106 = texelFetch(g_lightClusterGridBuffer, int(((_2101 << 2u) + (_2087 << 6u)) >> 2u));
        uint _2107 = _2106.x;
        uint _2108 = _2075.z;
        float _2212;
        float _2214;
        float _2216;
        float _2218;
        float _2220;
        float _2222;
        if (((((1u << ((_2108 >> 4u) & 15u)) + 4294967295u) & _2107) == 0u) || ((_2108 & 240u) == 0u))
        {
            _2212 = 0.0;
            _2214 = 0.0;
            _2216 = 0.0;
            _2218 = 0.0;
            _2220 = 0.0;
            _2222 = 0.0;
        }
        else
        {
            float _2213;
            float _2215;
            float _2217;
            float _2219;
            float _2221;
            float _2223;
            float _2363 = 0.0;
            float _2364 = 0.0;
            float _2365 = 0.0;
            float _2366 = 0.0;
            float _2367 = 0.0;
            float _2368 = 0.0;
            uint _2369 = 0u;
            uint _2378;
            bool _2379;
            for (;;)
            {
                _2378 = texelFetch(g_lightClassification, int((((_2101 << 5u) + (_2087 << 9u)) + (_2369 << 2u)) >> 2u)).x;
                _2379 = _2378 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2379)
                {
                    frontier_phi_68_pred = _2365;
                    frontier_phi_68_pred_1 = _2368;
                    frontier_phi_68_pred_2 = _2367;
                    frontier_phi_68_pred_3 = _2366;
                    frontier_phi_68_pred_4 = _2364;
                    frontier_phi_68_pred_5 = _2363;
                }
                else
                {
                    float _2508;
                    float _2509;
                    float _2510;
                    float _2511;
                    float _2512;
                    float _2513;
                    uint _2514;
                    _2508 = _2363;
                    _2509 = _2364;
                    _2510 = _2365;
                    _2511 = _2366;
                    _2512 = _2367;
                    _2513 = _2368;
                    _2514 = _2378;
                    float _2435;
                    float _2436;
                    float _2437;
                    float _2438;
                    float _2439;
                    float _2440;
                    for (;;)
                    {
                        uint _2518 = uint(findLSB(_2514)) + (_2369 << 5u);
                        uint _2515 = (_2514 + 4294967295u) & _2514;
                        uint _2520 = _2518 * 48u;
                        vec4 _2534 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2520)).x, texelFetch(g_PointLightRenderingBuffer, int(_2520 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2520 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2520 + 3u)).x));
                        uint _2540 = (_2518 * 48u) + 4u;
                        vec4 _2553 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2540)).x, texelFetch(g_PointLightRenderingBuffer, int(_2540 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2540 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2540 + 3u)).x));
                        uint _2559 = (_2518 * 48u) + 8u;
                        vec3 _2570 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2559)).x, texelFetch(g_PointLightRenderingBuffer, int(_2559 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2559 + 2u)).x));
                        float _2574 = _2534.x - _2061;
                        float _2575 = _2534.y - _2062;
                        float _2576 = _2534.z - _2063;
                        float _2577 = dot(vec3(_2574, _2575, _2576), vec3(_2574, _2575, _2576));
                        float _2580 = inversesqrt(_2577);
                        float _2589 = 1.0 - (_2577 * _2534.w);
                        float _3758 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
                        float _2590 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
                        float _2591 = sqrt(_2577) * _2553.w;
                        float _2594 = 1.39999997615814208984375 / (_2591 + 1.39999997615814208984375);
                        float _2595 = _2594 * _2594;
                        float _2598 = ((1.0 - _2595) * dot(vec3(_441, _444, _447), vec3(_2580 * _2574, _2580 * _2575, _2580 * _2576))) + _2595;
                        float _2601 = _2591 * _2591;
                        float _2605 = ((isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0))) * _2590) / ((_2601 * 0.699999988079071044921875) + 1.0);
                        float _2609 = (-0.0) - _2061;
                        float _2610 = (-0.0) - _2062;
                        float _2611 = (-0.0) - _2063;
                        float _2615 = inversesqrt(dot(vec3(_2609, _2610, _2611), vec3(_2609, _2610, _2611)));
                        float _2619 = dot(vec3(_441, _444, _447), vec3(_2615 * _2609, _2615 * _2610, _2615 * _2611));
                        float _3774 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
                        float _3785 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0));
                        float _2623 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
                        float _2627 = (0.5 / (((isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0))) + 9.9999999392252902907785028219223e-09) + _2623)) * _2623;
                        float _3796 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
                        float _2636 = (((isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0))) * 3.1415927410125732421875) / ((_2601 * 2.1991131305694580078125) + 3.141590118408203125)) * _2590;
                        _2438 = (_2605 * _2553.x) + _2511;
                        _2439 = (_2605 * _2553.y) + _2512;
                        _2440 = (_2605 * _2553.z) + _2513;
                        _2435 = (_2636 * _2570.x) + _2508;
                        _2436 = (_2636 * _2570.y) + _2509;
                        _2437 = (_2636 * _2570.z) + _2510;
                        if (_2515 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2508 = _2435;
                            _2509 = _2436;
                            _2510 = _2437;
                            _2511 = _2438;
                            _2512 = _2439;
                            _2513 = _2440;
                            _2514 = _2515;
                        }
                    }
                    frontier_phi_68_pred = _2437;
                    frontier_phi_68_pred_1 = _2440;
                    frontier_phi_68_pred_2 = _2439;
                    frontier_phi_68_pred_3 = _2438;
                    frontier_phi_68_pred_4 = _2436;
                    frontier_phi_68_pred_5 = _2435;
                }
                _2217 = frontier_phi_68_pred;
                _2223 = frontier_phi_68_pred_1;
                _2221 = frontier_phi_68_pred_2;
                _2219 = frontier_phi_68_pred_3;
                _2215 = frontier_phi_68_pred_4;
                _2213 = frontier_phi_68_pred_5;
                uint _2370 = _2369 + 1u;
                if (_2370 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2363 = _2213;
                    _2364 = _2215;
                    _2365 = _2217;
                    _2366 = _2219;
                    _2367 = _2221;
                    _2368 = _2223;
                    _2369 = _2370;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2212 = _2213;
            _2214 = _2215;
            _2216 = _2217;
            _2218 = _2219;
            _2220 = _2221;
            _2222 = _2223;
        }
        uvec4 _2226 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2227 = _2226.z;
        uint _2229 = (_2227 >> 8u) & 15u;
        float _2334;
        float _2336;
        float _2338;
        float _2340;
        float _2342;
        float _2344;
        if (((4294967295u << _2229) & _2107) == 0u)
        {
            _2334 = _2212;
            _2336 = _2214;
            _2338 = _2216;
            _2340 = _2218;
            _2342 = _2220;
            _2344 = _2222;
        }
        else
        {
            float _2359 = inversesqrt(dot(vec3(_2061, _2062, _2063), vec3(_2061, _2062, _2063)));
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2229 < ((_2227 >> 12u) & 15u))
            {
                float _2335;
                float _2337;
                float _2339;
                float _2341;
                float _2343;
                float _2345;
                float _2491 = _2212;
                float _2492 = _2214;
                float _2493 = _2216;
                float _2494 = _2218;
                float _2495 = _2220;
                float _2496 = _2222;
                uint _2497 = _2229;
                uint _2506;
                bool _2507;
                for (;;)
                {
                    _2506 = texelFetch(g_lightClassification, int((((_2101 << 5u) + (_2087 << 9u)) + (_2497 << 2u)) >> 2u)).x;
                    _2507 = _2506 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2507)
                    {
                        frontier_phi_79_pred = _2496;
                        frontier_phi_79_pred_1 = _2495;
                        frontier_phi_79_pred_2 = _2494;
                        frontier_phi_79_pred_3 = _2493;
                        frontier_phi_79_pred_4 = _2492;
                        frontier_phi_79_pred_5 = _2491;
                    }
                    else
                    {
                        float _2650;
                        float _2651;
                        float _2652;
                        float _2653;
                        float _2654;
                        float _2655;
                        float _2902;
                        float _2903;
                        float _2904;
                        float _2905;
                        float _2906;
                        float _2907;
                        float _2663 = _2491;
                        float _2664 = _2492;
                        float _2665 = _2493;
                        float _2666 = _2494;
                        float _2667 = _2495;
                        float _2668 = _2496;
                        uint _2669 = _2506;
                        uint _2670;
                        vec4 _2695;
                        float _2696;
                        vec4 _2711;
                        vec3 _2723;
                        vec4 _2739;
                        vec4 _2755;
                        float _2802;
                        bool _2803;
                        for (;;)
                        {
                            uint _2680 = ((_2497 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2669));
                            _2670 = (_2669 + 4294967295u) & _2669;
                            uint _2682 = _2680 * 40u;
                            _2695 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2682)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2682 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2682 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2682 + 3u)).x));
                            _2696 = _2695.w;
                            uint _2698 = (_2680 * 40u) + 4u;
                            _2711 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2698)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2698 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2698 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2698 + 3u)).x));
                            uint _2713 = (_2680 * 40u) + 8u;
                            _2723 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2713)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2713 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2713 + 2u)).x));
                            uint _2726 = (_2680 * 40u) + 16u;
                            _2739 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2726)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2726 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2726 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2726 + 3u)).x));
                            uint _2742 = (_2680 * 40u) + 20u;
                            _2755 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2742)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2742 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2742 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2742 + 3u)).x));
                            uint _2758 = (_2680 * 40u) + 24u;
                            vec4 _2771 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2758)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2758 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2758 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2758 + 3u)).x));
                            uint _2777 = (_2680 * 40u) + 28u;
                            vec4 _2790 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2777)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2777 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2777 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2777 + 3u)).x));
                            _2802 = fma(_2063, _2790.z, fma(_2062, _2790.y, _2790.x * _2061)) + _2790.w;
                            _2803 = !((fma(_2063, _2771.z, fma(_2062, _2771.y, _2771.x * _2061)) + _2771.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_2803)
                            {
                                float _2830 = _2695.x - _2061;
                                float _2831 = _2695.y - _2062;
                                float _2832 = _2695.z - _2063;
                                float _2833 = dot(vec3(_2830, _2831, _2832), vec3(_2830, _2831, _2832));
                                float _2836 = inversesqrt(_2833);
                                float _2837 = _2836 * _2830;
                                float _2838 = _2836 * _2831;
                                float _2839 = _2836 * _2832;
                                float _2843 = 1.0 - (_2833 / (_2696 * _2696));
                                float _3807 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0));
                                float _2844 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
                                float _2848 = sqrt(_2833) * _2711.w;
                                float _2850 = 1.39999997615814208984375 / (_2848 + 1.39999997615814208984375);
                                float _2851 = _2850 * _2850;
                                float _2852 = 1.0 - _2851;
                                float _2854 = (_2852 * dot(vec3(_2837, _2838, _2839), vec3(_441, _444, _447))) + _2851;
                                float _2857 = _2848 * _2848;
                                float _2861 = (fma(_2063, _2739.z, fma(_2062, _2739.y, _2739.x * _2061)) + _2739.w) / _2802;
                                float _2862 = (fma(_2063, _2755.z, fma(_2062, _2755.y, _2755.x * _2061)) + _2755.w) / _2802;
                                float _2866 = 1.0 - dot(vec2(_2861, _2862), vec2(_2861, _2862));
                                float _3823 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0));
                                float _2867 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
                                float _2868 = _2867 * (((isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0))) * _2844) / ((_2857 * 0.699999988079071044921875) + 1.0));
                                float _2878 = dot(vec3(_441, _444, _447), vec3((-0.0) - (_2061 * _2359), (-0.0) - (_2062 * _2359), (-0.0) - (_2063 * _2359)));
                                float _3834 = isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0));
                                float _2886 = (_2852 * dot(vec3(_441, _444, _447), vec3(_2837, _2838, _2839))) + _2851;
                                float _3845 = isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0));
                                float _2887 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
                                float _2891 = (0.5 / (((isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) + 9.9999999392252902907785028219223e-09) + _2887)) * _2887;
                                float _3856 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0));
                                float _2898 = (_2867 * _2844) * (((isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))) * 3.1415927410125732421875) / ((_2857 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_85_pred = _2868 * _2711.z;
                                frontier_phi_85_pred_1 = _2868 * _2711.y;
                                frontier_phi_85_pred_2 = _2868 * _2711.x;
                                frontier_phi_85_pred_3 = _2898 * _2723.z;
                                frontier_phi_85_pred_4 = _2898 * _2723.y;
                                frontier_phi_85_pred_5 = _2898 * _2723.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _2907 = frontier_phi_85_pred;
                            _2906 = frontier_phi_85_pred_1;
                            _2905 = frontier_phi_85_pred_2;
                            _2904 = frontier_phi_85_pred_3;
                            _2903 = frontier_phi_85_pred_4;
                            _2902 = frontier_phi_85_pred_5;
                            _2653 = _2905 + _2666;
                            _2654 = _2906 + _2667;
                            _2655 = _2907 + _2668;
                            _2650 = _2902 + _2663;
                            _2651 = _2903 + _2664;
                            _2652 = _2904 + _2665;
                            if (_2670 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2663 = _2650;
                                _2664 = _2651;
                                _2665 = _2652;
                                _2666 = _2653;
                                _2667 = _2654;
                                _2668 = _2655;
                                _2669 = _2670;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2655;
                        frontier_phi_79_pred_1 = _2654;
                        frontier_phi_79_pred_2 = _2653;
                        frontier_phi_79_pred_3 = _2652;
                        frontier_phi_79_pred_4 = _2651;
                        frontier_phi_79_pred_5 = _2650;
                    }
                    _2345 = frontier_phi_79_pred;
                    _2343 = frontier_phi_79_pred_1;
                    _2341 = frontier_phi_79_pred_2;
                    _2339 = frontier_phi_79_pred_3;
                    _2337 = frontier_phi_79_pred_4;
                    _2335 = frontier_phi_79_pred_5;
                    uint _2498 = _2497 + 1u;
                    if (_2498 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2491 = _2335;
                        _2492 = _2337;
                        _2493 = _2339;
                        _2494 = _2341;
                        _2495 = _2343;
                        _2496 = _2345;
                        _2497 = _2498;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2341;
                frontier_phi_60_61_ladder_1 = _2345;
                frontier_phi_60_61_ladder_2 = _2343;
                frontier_phi_60_61_ladder_3 = _2339;
                frontier_phi_60_61_ladder_4 = _2337;
                frontier_phi_60_61_ladder_5 = _2335;
            }
            else
            {
                frontier_phi_60_61_ladder = _2218;
                frontier_phi_60_61_ladder_1 = _2222;
                frontier_phi_60_61_ladder_2 = _2220;
                frontier_phi_60_61_ladder_3 = _2216;
                frontier_phi_60_61_ladder_4 = _2214;
                frontier_phi_60_61_ladder_5 = _2212;
            }
            _2334 = frontier_phi_60_61_ladder_5;
            _2336 = frontier_phi_60_61_ladder_4;
            _2338 = frontier_phi_60_61_ladder_3;
            _2340 = frontier_phi_60_61_ladder;
            _2342 = frontier_phi_60_61_ladder_2;
            _2344 = frontier_phi_60_61_ladder_1;
        }
        float _2349 = isnan(1.0) ? _486 : (isnan(_486) ? 1.0 : min(_486, 1.0));
        _2119 = (_2349 * _2340) + _1680;
        _2121 = (_2349 * _2342) + _1682;
        _2123 = (_2349 * _2344) + _1684;
        _2125 = ((_2334 * 0.039999999105930328369140625) * _2349) + _1932;
        _2127 = ((_2336 * 0.039999999105930328369140625) * _2349) + _1934;
        _2129 = ((_2338 * 0.039999999105930328369140625) * _2349) + _1936;
    }
    else
    {
        _2119 = _1680;
        _2121 = _1682;
        _2123 = _1684;
        _2125 = _1932;
        _2127 = _1934;
        _2129 = _1936;
    }
    float _3872 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _3883 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _3894 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _3905 = isnan(0.0) ? _329 : (isnan(_329) ? 0.0 : max(_329, 0.0));
    float _2147 = ((isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0))) * (_2119 + ((isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0))) * _486))) + ((_2125 + ((isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0))) * _1295)) * cbPerFrame._m0[3u].x);
    float _2148 = ((isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))) * (_2121 + ((isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0))) * _486))) + ((_2127 + ((isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0))) * _1295)) * cbPerFrame._m0[3u].x);
    float _2149 = ((isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0))) * (_2123 + ((isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0))) * _486))) + ((_2129 + ((isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0))) * _1295)) * cbPerFrame._m0[3u].x);
    float _2150 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
    float _2151 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
    float _2152 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
    float _2157 = cbInstanceData._m0[_460 + 6u].w * (isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0)));
    float _2162 = _420 / cbSceneParam._m0[86u].x;
    float _2163 = _421 / cbSceneParam._m0[86u].y;
    vec4 _2177 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2162, _2163, (log2((isnan(cbSceneParam._m0[77u].w) ? _346 : (isnan(_346) ? cbSceneParam._m0[77u].w : min(_346, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2179 = _2177.x;
    float _2180 = _2177.y;
    float _2181 = _2177.z;
    float _2182 = _2177.w;
    float _2274;
    float _2276;
    float _2278;
    float _2280;
    if (_346 > cbSceneParam._m0[78u].w)
    {
        float _2237 = isnan(_346) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _346 : min(cbSceneParam._m0[80u].w, _346));
        float _2238 = _2237 / _346;
        float _2249 = _2238 * _397;
        float _2250 = _398 * _2238;
        float _2251 = (-0.0) - _2250;
        float _2252 = _2238 * _399;
        float _2254 = (cbSceneParam._m0[77u].w * _2251) / _2237;
        float _2255 = _2254 + cbSceneParam._m0[79u].w;
        float _2256 = cbSceneParam._m0[79u].w - _2250;
        float _2262 = sqrt(((_2249 * _2249) + (_2250 * _2250)) + (_2252 * _2252));
        float _2265 = (1.0 - (cbSceneParam._m0[77u].w / _2237)) * _2262;
        float _2270 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2272 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2448;
        if (abs((_2251 - _2254) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2448 = ((((_2255 > 0.0) ? exp2(_2270 * _2255) : (2.0 - exp2(_2272 * _2255))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2265;
        }
        else
        {
            float _2392 = 1.0 / cbSceneParam._m0[80u].x;
            float _2393 = isnan(_2256) ? _2255 : (isnan(_2255) ? _2256 : max(_2255, _2256));
            float _2394 = isnan(_2256) ? _2255 : (isnan(_2255) ? _2256 : min(_2255, _2256));
            float _2403 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : min(_2393, 0.0));
            float _2404 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : min(_2394, 0.0));
            _2448 = ((abs(_2262 / _2251) * cbSceneParam._m0[80u].y) * ((((_2403 - _2404) * 2.0) - ((exp2(_2270 * (isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0)))) - exp2(_2270 * (isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0))))) * _2392)) - ((exp2(_2272 * _2403) - exp2(_2272 * _2404)) * _2392))) + (_2265 * cbSceneParam._m0[80u].z);
        }
        vec4 _2450 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2162, _2163, 1.0), 0.0);
        float _2459 = exp2((_2448 * (-1.44269502162933349609375)) * (1.0 - _2450.w));
        float _2460 = log2(_2459);
        float _2476 = log2(_2182);
        _2274 = (exp2(_2476 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2460 * cbSceneParam._m0[78u].x)) * _2450.x) / cbSceneParam._m0[78u].x)) + _2179;
        _2276 = (exp2(_2476 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2460 * cbSceneParam._m0[78u].y)) * _2450.y) / cbSceneParam._m0[78u].y)) + _2180;
        _2278 = (exp2(_2476 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2460 * cbSceneParam._m0[78u].z)) * _2450.z) / cbSceneParam._m0[78u].z)) + _2181;
        _2280 = _2459 * _2182;
    }
    else
    {
        _2274 = _2179;
        _2276 = _2180;
        _2278 = _2181;
        _2280 = _2182;
    }
    bool _2486;
    vec4 _2290;
    vec4 _2313;
    float _2315;
    float _2319;
    float _2320;
    float _2321;
    float _2322;
    bool _2333;
    for (;;)
    {
        _2290 = cbMatDynParam._m0[0u];
        float _2292 = roundEven(_2290.y);
        bool _2293 = _2292 == 3.0;
        float _2295 = log2(_2280);
        float _2302 = exp2(_2295 * cbSceneParam._m0[78u].x) * _2150;
        float _2303 = exp2(_2295 * cbSceneParam._m0[78u].y) * _2151;
        float _2304 = exp2(_2295 * cbSceneParam._m0[78u].z) * _2152;
        float _2311 = _409 + (-0.5);
        _2313 = cbMtdParam._m0[1u];
        _2315 = _2313.y * _2311;
        float _2318 = (_2292 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2319 = _2318 * (_2293 ? _2302 : (_2302 + (cbSceneParam._m0[72u].w * _2274)));
        _2320 = _2318 * (_2293 ? _2303 : (_2303 + (cbSceneParam._m0[72u].w * _2276)));
        _2321 = _2318 * (_2293 ? _2304 : (_2304 + (cbSceneParam._m0[72u].w * _2278)));
        _2322 = _2311 * 0.999000012874603271484375;
        _2333 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2333)
        {
            if ((cbInstanceData._m0[_460 + 7u].x + _2322) < 0.5)
            {
                _2486 = true;
                break;
            }
        }
        uint _2427 = _462 + uint(_2290.w);
        if ((cbInstanceData._m0[_2427].w < 1.0) && ((cbInstanceData._m0[_2427].w + _2322) < 0.5))
        {
            _2486 = true;
            break;
        }
        if ((_2315 + _321) < _2313.x)
        {
            _2486 = true;
            break;
        }
        _2486 = false;
        break;
    }
    float _2641;
    if (_2486)
    {
        discard_state = true;
        _2641 = 0.0;
    }
    else
    {
        _2641 = _2157;
    }
    SV_Target.x = _2319;
    SV_Target.y = _2320;
    SV_Target.z = _2321;
    SV_Target.w = _2641;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2157;
    discard_exit();
}


