#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_A_Alpha_FlipBookSmooth_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _794;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _166 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _167 = _166 * NORMAL.x;
    float _168 = _166 * NORMAL.y;
    float _169 = _166 * NORMAL.z;
    float _174;
    float _175;
    float _176;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _174 = (-0.0) - _167;
        _175 = (-0.0) - _168;
        _176 = (-0.0) - _169;
    }
    else
    {
        _174 = _167;
        _175 = _168;
        _176 = _169;
    }
    uint _193 = uint(int(floor(cbMtdParam._m0[10u].y)));
    float _194 = fract(cbMtdParam._m0[10u].y);
    uint _195 = _193 + 1u;
    uint _196 = uint(int(cbMtdParam._m0[10u].w * cbMtdParam._m0[10u].z));
    float _199 = float(int(_193 - _196 * (_193 / _196)));
    float _203 = float(int(_195 - _196 * (_195 / _196)));
    float _207 = 1.0 / cbMtdParam._m0[10u].z;
    float _209 = 1.0 / cbMtdParam._m0[10u].w;
    float _210 = fract(TEXCOORD_1.x);
    float _211 = fract(TEXCOORD_1.y);
    vec4 _232 = texture(sampler2D(S_A_Alpha_FlipBookSmooth_snp_0_Texture2D_0, SS_DiffuseMap), vec2((((_210 + (_203 - cbMtdParam._m0[10u].z * trunc(_203 / cbMtdParam._m0[10u].z))) * _207) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_211 + floor(_203 / cbMtdParam._m0[10u].z)) * _209) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _243 = texture(sampler2D(S_A_Alpha_FlipBookSmooth_snp_0_Texture2D_0, SS_DiffuseMap), vec2((((_210 + (_199 - cbMtdParam._m0[10u].z * trunc(_199 / cbMtdParam._m0[10u].z))) * _207) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_211 + floor(_199 / cbMtdParam._m0[10u].z)) * _209) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _245 = _243.x;
    float _246 = _243.y;
    float _247 = _243.z;
    float _248 = _243.w;
    float _261 = (((_232.x - _245) * _194) + _245) * cbMtdParam._m0[9u].x;
    float _262 = (((_232.y - _246) * _194) + _246) * cbMtdParam._m0[9u].y;
    float _263 = (((_232.z - _247) * _194) + _247) * cbMtdParam._m0[9u].z;
    vec4 _273 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _275 = _273.x;
    bool _282 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _298 = ((_282 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _275)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _275))) - POSITION_1.w) / cbMtdParam._m0[10u].x;
    float _2909 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _302 = ((cbMtdParam._m0[9u].w * TEXCOORD_1.z) * (((_232.w - _248) * _194) + _248)) * (isnan(1.0) ? _2909 : (isnan(_2909) ? 1.0 : min(_2909, 1.0)));
    float _306 = inversesqrt(dot(vec3(_174, _175, _176), vec3(_174, _175, _176)));
    float _307 = _306 * _174;
    float _308 = _306 * _175;
    float _309 = _306 * _176;
    float _2920 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _310 = isnan(1.0) ? _2920 : (isnan(_2920) ? 1.0 : min(_2920, 1.0));
    float _2931 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _2942 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _2953 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _318 = _282 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _359 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _369 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _359);
    float _370 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _359);
    float _371 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _359);
    float _375 = inversesqrt(dot(vec3(_369, _370, _371), vec3(_369, _370, _371)));
    float _376 = _369 * _375;
    float _377 = _370 * _375;
    float _378 = _371 * _375;
    float _383 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _384 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _405 = fma(_309, cbSceneParam._m0[5u].z, fma(_308, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _307));
    float _408 = fma(_309, cbSceneParam._m0[6u].z, fma(_308, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _307));
    float _411 = fma(_309, cbSceneParam._m0[7u].z, fma(_308, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _307));
    uint _424 = uint(roundEven(NORMAL.w)) * 13u;
    uint _427 = (_424 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _433 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2931 : (isnan(_2931) ? 1.0 : min(_2931, 1.0)))) * cbInstanceData._m0[_427].x;
    float _434 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2942 : (isnan(_2942) ? 1.0 : min(_2942, 1.0)))) * cbInstanceData._m0[_427].y;
    float _435 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2953 : (isnan(_2953) ? 1.0 : min(_2953, 1.0)))) * cbInstanceData._m0[_427].z;
    float _2964 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _436 = isnan(1.0) ? _2964 : (isnan(_2964) ? 1.0 : min(_2964, 1.0));
    float _2975 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _437 = isnan(1.0) ? _2975 : (isnan(_2975) ? 1.0 : min(_2975, 1.0));
    float _2986 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _438 = isnan(1.0) ? _2986 : (isnan(_2986) ? 1.0 : min(_2986, 1.0));
    vec4 _447 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _383, cbSceneParam._m0[86u].y * _384));
    float _450 = _447.x * TEXCOORD_1.w;
    float _451 = dot(vec3(_307, _308, _309), vec3(_376, _377, _378));
    float _454 = _451 * 2.0;
    float _459 = (_454 * _307) - _376;
    float _460 = (_454 * _308) - _377;
    float _461 = (_454 * _309) - _378;
    float _483 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _487 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _491 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _793;
    float _795;
    float _796;
    float _797;
    float _798;
    float _799;
    float _800;
    float _801;
    float _802;
    float _803;
    float _804;
    float _805;
    float _806;
    float _807;
    float _808;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _518 = fma(_491, cbModelParam._m0[26u].z, fma(_487, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _483));
        float _522 = fma(_491, cbModelParam._m0[27u].z, fma(_487, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _483));
        float _526 = fma(_491, cbModelParam._m0[28u].z, fma(_487, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _483));
        float _551 = _483 + _307;
        float _552 = _487 + _308;
        float _553 = _491 + _309;
        float _563 = fma(_553, cbModelParam._m0[26u].z, fma(_552, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _551)) - _518;
        float _564 = fma(_553, cbModelParam._m0[27u].z, fma(_552, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _551)) - _522;
        float _565 = fma(_553, cbModelParam._m0[28u].z, fma(_552, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _551)) - _526;
        float _569 = inversesqrt(dot(vec3(_563, _564, _565), vec3(_563, _564, _565)));
        float _582 = ((_569 * _563) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_518 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _583 = ((_569 * _564) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_522 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _584 = ((_569 * _565) / cbModelParam._m0[34u].z) + ((((((_526 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _587 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_582, _583, _584), 0.0);
        vec4 _594 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_582, _583, _584), 0.0);
        vec4 _601 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_582, _583, _584), 0.0);
        vec4 _608 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_582, _583, _584), 0.0);
        float _621 = exp2((_587.w + (-0.5)) * 20.0) * 2.0;
        float _622 = _621 * (_587.x + (-0.5));
        float _623 = _621 * (_587.y + (-0.5));
        float _624 = _621 * (_587.z + (-0.5));
        float _631 = exp2((_594.w + (-0.5)) * 20.0) * 2.0;
        float _632 = _631 * (_594.x + (-0.5));
        float _633 = _631 * (_594.y + (-0.5));
        float _634 = _631 * (_594.z + (-0.5));
        float _641 = exp2((_601.w + (-0.5)) * 20.0) * 2.0;
        float _642 = _641 * (_601.x + (-0.5));
        float _643 = _641 * (_601.y + (-0.5));
        float _644 = _641 * (_601.z + (-0.5));
        float _651 = exp2((_608.w + (-0.5)) * 20.0) * 2.0;
        float _652 = _651 * (_608.x + (-0.5));
        float _653 = _651 * (_608.y + (-0.5));
        float _654 = _651 * (_608.z + (-0.5));
        float _655 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
        float _656 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
        float _657 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
        float _658 = _622 * 0.5;
        float _659 = _632 * 0.5;
        float _660 = _642 * 0.5;
        float _661 = dot(vec3(_658, _659, _660), vec3(_658, _659, _660));
        float _666 = (_661 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_661);
        float _675 = (dot(vec3(_307, _308, _309), vec3(_666 * _658, _666 * _659, _666 * _660)) + 1.0) * 0.5;
        float _3012 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
        float _685 = sqrt(((_659 * _659) + (_658 * _658)) + (_660 * _660)) / (_655 + 9.9999997473787516355514526367188e-06);
        float _3023 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
        float _686 = isnan(1.0) ? _3023 : (isnan(_3023) ? 1.0 : min(_3023, 1.0));
        float _687 = _686 * 2.0;
        float _691 = (1.0 - _686) / (_686 + 1.0);
        float _3034 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
        float _692 = isnan(1.0) ? _3034 : (isnan(_3034) ? 1.0 : min(_3034, 1.0));
        float _701 = ((((1.0 - _692) * (_687 + 2.0)) * exp2(log2(isnan(1.0) ? _3012 : (isnan(_3012) ? 1.0 : min(_3012, 1.0))) * (_687 + 1.0))) + _692) * _655;
        float _702 = _623 * 0.5;
        float _703 = _633 * 0.5;
        float _704 = _643 * 0.5;
        float _705 = dot(vec3(_702, _703, _704), vec3(_702, _703, _704));
        float _710 = (_705 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_705);
        float _718 = (dot(vec3(_307, _308, _309), vec3(_710 * _702, _710 * _703, _710 * _704)) + 1.0) * 0.5;
        float _3045 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
        float _727 = sqrt(((_703 * _703) + (_702 * _702)) + (_704 * _704)) / (_656 + 9.9999997473787516355514526367188e-06);
        float _3056 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
        float _728 = isnan(1.0) ? _3056 : (isnan(_3056) ? 1.0 : min(_3056, 1.0));
        float _729 = _728 * 2.0;
        float _733 = (1.0 - _728) / (_728 + 1.0);
        float _3067 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
        float _734 = isnan(1.0) ? _3067 : (isnan(_3067) ? 1.0 : min(_3067, 1.0));
        float _743 = ((((1.0 - _734) * (_729 + 2.0)) * exp2(log2(isnan(1.0) ? _3045 : (isnan(_3045) ? 1.0 : min(_3045, 1.0))) * (_729 + 1.0))) + _734) * _656;
        float _744 = _624 * 0.5;
        float _745 = _634 * 0.5;
        float _746 = _644 * 0.5;
        float _747 = dot(vec3(_744, _745, _746), vec3(_744, _745, _746));
        float _752 = (_747 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_747);
        float _760 = (dot(vec3(_307, _308, _309), vec3(_752 * _744, _752 * _745, _752 * _746)) + 1.0) * 0.5;
        float _3078 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
        float _769 = sqrt(((_745 * _745) + (_744 * _744)) + (_746 * _746)) / (_657 + 9.9999997473787516355514526367188e-06);
        float _3089 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
        float _770 = isnan(1.0) ? _3089 : (isnan(_3089) ? 1.0 : min(_3089, 1.0));
        float _771 = _770 * 2.0;
        float _775 = (1.0 - _770) / (_770 + 1.0);
        float _3100 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
        float _776 = isnan(1.0) ? _3100 : (isnan(_3100) ? 1.0 : min(_3100, 1.0));
        float _785 = ((((1.0 - _776) * (_771 + 2.0)) * exp2(log2(isnan(1.0) ? _3078 : (isnan(_3078) ? 1.0 : min(_3078, 1.0))) * (_771 + 1.0))) + _776) * _657;
        _793 = _624;
        _795 = _623;
        _796 = _622;
        _797 = _634;
        _798 = _633;
        _799 = _632;
        _800 = _644;
        _801 = _643;
        _802 = _642;
        _803 = _657;
        _804 = _656;
        _805 = _655;
        _806 = cbModelParam._m0[36u].z * (isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0)));
        _807 = cbModelParam._m0[36u].z * (isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0)));
        _808 = cbModelParam._m0[36u].z * (isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0)));
    }
    else
    {
        _793 = _794;
        _795 = _794;
        _796 = _794;
        _797 = _794;
        _798 = _794;
        _799 = _794;
        _800 = _794;
        _801 = _794;
        _802 = _794;
        _803 = _794;
        _804 = _794;
        _805 = _794;
        _806 = 0.0;
        _807 = 0.0;
        _808 = 0.0;
    }
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _834 = fma(_491, cbModelParam._m0[30u].z, fma(_487, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _483));
        float _838 = fma(_491, cbModelParam._m0[31u].z, fma(_487, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _483));
        float _842 = fma(_491, cbModelParam._m0[32u].z, fma(_487, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _483));
        float _865 = _483 + _307;
        float _866 = _487 + _308;
        float _867 = _491 + _309;
        float _877 = fma(_867, cbModelParam._m0[30u].z, fma(_866, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _865)) - _834;
        float _878 = fma(_867, cbModelParam._m0[31u].z, fma(_866, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _865)) - _838;
        float _879 = fma(_867, cbModelParam._m0[32u].z, fma(_866, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _865)) - _842;
        float _883 = inversesqrt(dot(vec3(_877, _878, _879), vec3(_877, _878, _879)));
        float _896 = ((_883 * _877) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_834 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _897 = ((_883 * _878) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_838 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _898 = ((_883 * _879) / cbModelParam._m0[35u].z) + ((((((_842 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _900 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_896, _897, _898), 0.0);
        vec4 _907 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_896, _897, _898), 0.0);
        vec4 _914 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_896, _897, _898), 0.0);
        vec4 _921 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_896, _897, _898), 0.0);
        float _933 = exp2((_900.w + (-0.5)) * 20.0) * 2.0;
        float _934 = _933 * (_900.x + (-0.5));
        float _935 = _933 * (_900.y + (-0.5));
        float _936 = _933 * (_900.z + (-0.5));
        float _943 = exp2((_907.w + (-0.5)) * 20.0) * 2.0;
        float _944 = _943 * (_907.x + (-0.5));
        float _945 = _943 * (_907.y + (-0.5));
        float _946 = _943 * (_907.z + (-0.5));
        float _953 = exp2((_914.w + (-0.5)) * 20.0) * 2.0;
        float _954 = _953 * (_914.x + (-0.5));
        float _955 = _953 * (_914.y + (-0.5));
        float _956 = _953 * (_914.z + (-0.5));
        float _963 = exp2((_921.w + (-0.5)) * 20.0) * 2.0;
        float _964 = _963 * (_921.x + (-0.5));
        float _965 = _963 * (_921.y + (-0.5));
        float _966 = _963 * (_921.z + (-0.5));
        float _967 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _968 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _969 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _970 = _934 * 0.5;
        float _971 = _944 * 0.5;
        float _972 = _954 * 0.5;
        float _973 = dot(vec3(_970, _971, _972), vec3(_970, _971, _972));
        float _978 = (_973 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_973);
        float _986 = (dot(vec3(_307, _308, _309), vec3(_978 * _970, _978 * _971, _978 * _972)) + 1.0) * 0.5;
        float _3141 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _995 = sqrt(((_971 * _971) + (_970 * _970)) + (_972 * _972)) / (_967 + 9.9999997473787516355514526367188e-06);
        float _3152 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _996 = isnan(1.0) ? _3152 : (isnan(_3152) ? 1.0 : min(_3152, 1.0));
        float _997 = _996 * 2.0;
        float _1001 = (1.0 - _996) / (_996 + 1.0);
        float _3163 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1002 = isnan(1.0) ? _3163 : (isnan(_3163) ? 1.0 : min(_3163, 1.0));
        float _1011 = ((((1.0 - _1002) * (_997 + 2.0)) * exp2(log2(isnan(1.0) ? _3141 : (isnan(_3141) ? 1.0 : min(_3141, 1.0))) * (_997 + 1.0))) + _1002) * _967;
        float _1012 = _935 * 0.5;
        float _1013 = _945 * 0.5;
        float _1014 = _955 * 0.5;
        float _1015 = dot(vec3(_1012, _1013, _1014), vec3(_1012, _1013, _1014));
        float _1020 = (_1015 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1015);
        float _1028 = (dot(vec3(_307, _308, _309), vec3(_1020 * _1012, _1020 * _1013, _1020 * _1014)) + 1.0) * 0.5;
        float _3174 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1037 = sqrt(((_1013 * _1013) + (_1012 * _1012)) + (_1014 * _1014)) / (_968 + 9.9999997473787516355514526367188e-06);
        float _3185 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1038 = isnan(1.0) ? _3185 : (isnan(_3185) ? 1.0 : min(_3185, 1.0));
        float _1039 = _1038 * 2.0;
        float _1043 = (1.0 - _1038) / (_1038 + 1.0);
        float _3196 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1044 = isnan(1.0) ? _3196 : (isnan(_3196) ? 1.0 : min(_3196, 1.0));
        float _1053 = ((((1.0 - _1044) * (_1039 + 2.0)) * exp2(log2(isnan(1.0) ? _3174 : (isnan(_3174) ? 1.0 : min(_3174, 1.0))) * (_1039 + 1.0))) + _1044) * _968;
        float _1054 = _936 * 0.5;
        float _1055 = _946 * 0.5;
        float _1056 = _956 * 0.5;
        float _1057 = dot(vec3(_1054, _1055, _1056), vec3(_1054, _1055, _1056));
        float _1062 = (_1057 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1057);
        float _1070 = (dot(vec3(_307, _308, _309), vec3(_1062 * _1054, _1062 * _1055, _1062 * _1056)) + 1.0) * 0.5;
        float _3207 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1079 = sqrt(((_1055 * _1055) + (_1054 * _1054)) + (_1056 * _1056)) / (_969 + 9.9999997473787516355514526367188e-06);
        float _3218 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1080 = isnan(1.0) ? _3218 : (isnan(_3218) ? 1.0 : min(_3218, 1.0));
        float _1081 = _1080 * 2.0;
        float _1085 = (1.0 - _1080) / (_1080 + 1.0);
        float _3229 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1086 = isnan(1.0) ? _3229 : (isnan(_3229) ? 1.0 : min(_3229, 1.0));
        float _1095 = ((((1.0 - _1086) * (_1081 + 2.0)) * exp2(log2(isnan(1.0) ? _3207 : (isnan(_3207) ? 1.0 : min(_3207, 1.0))) * (_1081 + 1.0))) + _1086) * _969;
        _1103 = _936;
        _1104 = _935;
        _1105 = _934;
        _1106 = _946;
        _1107 = _945;
        _1108 = _944;
        _1109 = _956;
        _1110 = _955;
        _1111 = _954;
        _1112 = _969;
        _1113 = _968;
        _1114 = _967;
        _1115 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0)));
        _1116 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0)));
        _1117 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0)));
    }
    else
    {
        _1103 = _794;
        _1104 = _794;
        _1105 = _794;
        _1106 = _794;
        _1107 = _794;
        _1108 = _794;
        _1109 = _794;
        _1110 = _794;
        _1111 = _794;
        _1112 = _794;
        _1113 = _794;
        _1114 = _794;
        _1115 = 0.0;
        _1116 = 0.0;
        _1117 = 0.0;
    }
    float _1127 = (cbModelParam._m0[1u].x * (_1115 - _806)) + _806;
    float _1128 = (cbModelParam._m0[1u].x * (_1116 - _807)) + _807;
    float _1129 = (cbModelParam._m0[1u].x * (_1117 - _808)) + _808;
    float _1150 = fma(_1129, cbSceneParam._m0[89u].z, fma(_1128, cbSceneParam._m0[89u].y, _1127 * cbSceneParam._m0[89u].x));
    float _1153 = fma(_1129, cbSceneParam._m0[90u].z, fma(_1128, cbSceneParam._m0[90u].y, _1127 * cbSceneParam._m0[90u].x));
    float _1156 = fma(_1129, cbSceneParam._m0[91u].z, fma(_1128, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1127));
    float _1171 = _459 * 0.5;
    float _1172 = _460 * 0.5;
    float _1173 = _461 * 0.5;
    float _1174 = dot(vec4(_1171, _1172, _1173, 1.0), vec4(_1105, _1108, _1111, _1114));
    float _1177 = dot(vec4(_1171, _1172, _1173, 1.0), vec4(_1104, _1107, _1110, _1113));
    float _1180 = dot(vec4(_1171, _1172, _1173, 1.0), vec4(_1103, _1106, _1109, _1112));
    float _1214;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1187 = dot(vec4(_1171, _1172, _1173, 1.0), vec4(_793, _797, _800, _803));
        float _1191 = dot(vec4(_1171, _1172, _1173, 1.0), vec4(_795, _798, _801, _804));
        float _1195 = dot(vec4(_1171, _1172, _1173, 1.0), vec4(_796, _799, _802, _805));
        float _1202 = dot(vec4(cbModelParam._m0[39u]), vec4(_1171, _1172, _1173, 1.0));
        _1214 = dot(vec3(isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0)), isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0)), isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1202) ? 0.0 : (isnan(0.0) ? _1202 : max(0.0, _1202))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1214 = 1.0;
    }
    float _1225;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1216 = dot(vec4(cbModelParam._m0[40u]), vec4(_1171, _1172, _1173, 1.0));
        _1225 = dot(vec3(isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0)), isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0)), isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1216) ? 0.0 : (isnan(0.0) ? _1216 : max(0.0, _1216))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1225 = 1.0;
    }
    float _1229 = (_1225 * cbModelParam._m0[1u].x) + (_1214 * (1.0 - cbModelParam._m0[1u].x));
    float _1238 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1320;
    float _1322;
    float _1324;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1287 = fma(_491, cbModelParam._m0[13u].z, fma(_487, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _483)) + cbModelParam._m0[13u].w;
        float _1291 = fma(_491, cbModelParam._m0[14u].z, fma(_487, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _483)) + cbModelParam._m0[14u].w;
        float _1295 = fma(_491, cbModelParam._m0[15u].z, fma(_487, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _483)) + cbModelParam._m0[15u].w;
        float _1298 = fma(_461, cbModelParam._m0[13u].z, fma(_460, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _459));
        float _1301 = fma(_461, cbModelParam._m0[14u].z, fma(_460, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _459));
        float _1304 = fma(_461, cbModelParam._m0[15u].z, fma(_460, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _459));
        float _1330;
        if (_1298 > 0.0)
        {
            _1330 = abs((1.0 - _1287) / _1298);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1298 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1287 + 1.0) / _1298);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1330 = frontier_phi_16_14_ladder;
        }
        float _1538;
        if (_1301 > 0.0)
        {
            _1538 = abs((1.0 - _1291) / _1301);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1301 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1291 + 1.0) / _1301);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1538 = frontier_phi_25_21_ladder;
        }
        float _1727;
        if (_1304 > 0.0)
        {
            _1727 = abs((1.0 - _1295) / _1304);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1304 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1295 + 1.0) / _1304);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1727 = frontier_phi_37_32_ladder;
        }
        float _1729 = isnan(_1538) ? _1330 : (isnan(_1330) ? _1538 : min(_1330, _1538));
        float _1730 = isnan(_1727) ? _1729 : (isnan(_1729) ? _1727 : min(_1729, _1727));
        float _1734 = (_1730 * _1298) + _1287;
        float _1735 = (_1730 * _1301) + _1291;
        float _1736 = (_1730 * _1304) + _1295;
        float _1737 = _1730 * 9.9999997473787516355514526367188e-05;
        float _1739 = (-1.0) - _1737;
        float _1741 = _1737 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1736 > _1741) || ((_1736 < _1739) || ((_1735 > _1741) || ((_1735 < _1739) || ((_1734 < _1739) || (_1734 > _1741))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1833 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1736, cbModelParam._m0[9u].z, fma(_1735, cbModelParam._m0[9u].y, _1734 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1736, cbModelParam._m0[10u].z, fma(_1735, cbModelParam._m0[10u].y, _1734 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1736, cbModelParam._m0[11u].z, fma(_1735, cbModelParam._m0[11u].y, _1734 * cbModelParam._m0[11u].x))), _1238);
            frontier_phi_15_37_ladder = _1833.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1833.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1833.x * cbModelParam._m0[1u].y;
        }
        _1320 = frontier_phi_15_37_ladder_2;
        _1322 = frontier_phi_15_37_ladder_1;
        _1324 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1308 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_459, _460, _461), _1238);
        _1320 = _1308.x * cbModelParam._m0[1u].y;
        _1322 = _1308.y * cbModelParam._m0[1u].y;
        _1324 = _1308.z * cbModelParam._m0[1u].y;
    }
    float _1327 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1420;
    float _1422;
    float _1424;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1384 = fma(_491, cbModelParam._m0[21u].z, fma(_487, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _483)) + cbModelParam._m0[21u].w;
        float _1388 = fma(_491, cbModelParam._m0[22u].z, fma(_487, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _483)) + cbModelParam._m0[22u].w;
        float _1392 = fma(_491, cbModelParam._m0[23u].z, fma(_487, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _483)) + cbModelParam._m0[23u].w;
        float _1395 = fma(_461, cbModelParam._m0[21u].z, fma(_460, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _459));
        float _1398 = fma(_461, cbModelParam._m0[22u].z, fma(_460, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _459));
        float _1401 = fma(_461, cbModelParam._m0[23u].z, fma(_460, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _459));
        float _1543;
        if (_1395 > 0.0)
        {
            _1543 = abs((1.0 - _1384) / _1395);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1395 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1384 + 1.0) / _1395);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1543 = frontier_phi_27_23_ladder;
        }
        float _1754;
        if (_1398 > 0.0)
        {
            _1754 = abs((1.0 - _1388) / _1398);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1398 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1388 + 1.0) / _1398);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1754 = frontier_phi_39_34_ladder;
        }
        float _1905;
        if (_1401 > 0.0)
        {
            _1905 = abs((1.0 - _1392) / _1401);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1401 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1392 + 1.0) / _1401);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _1905 = frontier_phi_48_45_ladder;
        }
        float _1907 = isnan(_1754) ? _1543 : (isnan(_1543) ? _1754 : min(_1543, _1754));
        float _1908 = isnan(_1905) ? _1907 : (isnan(_1907) ? _1905 : min(_1907, _1905));
        float _1912 = (_1908 * _1395) + _1384;
        float _1913 = (_1908 * _1398) + _1388;
        float _1914 = (_1908 * _1401) + _1392;
        float _1915 = _1908 * 9.9999997473787516355514526367188e-05;
        float _1916 = (-1.0) - _1915;
        float _1918 = _1915 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_1914 > _1918) || ((_1914 < _1916) || ((_1913 > _1918) || ((_1913 < _1916) || ((_1912 < _1916) || (_1912 > _1918))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2117 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1914, cbModelParam._m0[17u].z, fma(_1913, cbModelParam._m0[17u].y, _1912 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1914, cbModelParam._m0[18u].z, fma(_1913, cbModelParam._m0[18u].y, _1912 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1914, cbModelParam._m0[19u].z, fma(_1913, cbModelParam._m0[19u].y, _1912 * cbModelParam._m0[19u].x))), _1327);
            frontier_phi_24_48_ladder = _2117.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2117.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2117.x * cbModelParam._m0[1u].z;
        }
        _1420 = frontier_phi_24_48_ladder_2;
        _1422 = frontier_phi_24_48_ladder_1;
        _1424 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1404 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_459, _460, _461), _1327);
        _1420 = _1404.x * cbModelParam._m0[1u].z;
        _1422 = _1404.y * cbModelParam._m0[1u].z;
        _1424 = _1404.z * cbModelParam._m0[1u].z;
    }
    float _1436 = _450 * 0.01200000010430812835693359375;
    float _1438 = _1436 * ((cbModelParam._m0[1u].w * (_1420 - _1320)) + _1320);
    float _1439 = _1436 * ((cbModelParam._m0[1u].w * (_1422 - _1322)) + _1322);
    float _1440 = _1436 * ((cbModelParam._m0[1u].w * (_1424 - _1324)) + _1324);
    float _1443 = fma(_1440, cbSceneParam._m0[89u].z, fma(_1439, cbSceneParam._m0[89u].y, _1438 * cbSceneParam._m0[89u].x));
    float _1446 = fma(_1440, cbSceneParam._m0[90u].z, fma(_1439, cbSceneParam._m0[90u].y, _1438 * cbSceneParam._m0[90u].x));
    float _1449 = fma(_1440, cbSceneParam._m0[91u].z, fma(_1439, cbSceneParam._m0[91u].y, _1438 * cbSceneParam._m0[91u].x));
    uvec4 _1459 = floatBitsToUint(cbInstanceData._m0[_424 + 5u]);
    uint _1461 = _1459.x * 14u;
    uint _1462 = _1461 + 13u;
    float _1469 = _450 + (-1.0);
    float _1475 = (cbLight._m0[_1462].x * _1469) + 1.0;
    float _1476 = (cbLight._m0[_1462].y * _1469) + 1.0;
    float _1477 = (cbLight._m0[_1462].z * _1469) + 1.0;
    float _1478 = (cbLight._m0[_1462].w * _1469) + 1.0;
    uint _1479 = _1461 + 5u;
    float _1485 = isnan(1.0) ? _1476 : (isnan(_1476) ? 1.0 : min(_1476, 1.0));
    uint _1489 = _1461 + 4u;
    float _1496 = isnan(1.0) ? _1475 : (isnan(_1475) ? 1.0 : min(_1475, 1.0));
    uint _1500 = _1461 | 1u;
    float _1511 = dot(vec3(cbLight._m0[_1461].xyz), vec3(_307, _308, _309));
    float _1514 = dot(vec3(cbLight._m0[_1500].xyz), vec3(_307, _308, _309));
    float _3365 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
    float _3376 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
    float _1519 = (isnan(1.0) ? _3365 : (isnan(_3365) ? 1.0 : min(_3365, 1.0))) * 0.3183098733425140380859375;
    float _1521 = (isnan(1.0) ? _3376 : (isnan(_3376) ? 1.0 : min(_3376, 1.0))) * 0.3183098733425140380859375;
    float _1528 = ((cbLight._m0[_1479].x * _1485) * _1521) + ((cbLight._m0[_1489].x * _1496) * _1519);
    float _1529 = ((_1485 * cbLight._m0[_1479].y) * _1521) + ((_1496 * cbLight._m0[_1489].y) * _1519);
    float _1530 = ((_1485 * cbLight._m0[_1479].z) * _1521) + ((_1496 * cbLight._m0[_1489].z) * _1519);
    uvec4 _1535 = floatBitsToUint(cbLight._m0[_1461 + 12u]);
    bool _1537 = _1535.x == 0u;
    float _1548;
    float _1550;
    float _1552;
    if (_1537)
    {
        _1548 = _1528;
        _1550 = _1529;
        _1552 = _1530;
    }
    else
    {
        uint _1556 = _1461 + 6u;
        float _1572 = (dot(vec3(cbLight._m0[_1461 + 2u].xyz), vec3(_307, _308, _309)) * 0.5) + 0.5;
        float _1573 = _1572 * _1572;
        float _3387 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1574 = isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0));
        float _1575 = isnan(1.0) ? _1477 : (isnan(_1477) ? 1.0 : min(_1477, 1.0));
        _1548 = (((cbLight._m0[_1556].x * 0.3183098733425140380859375) * _1574) * _1575) + _1528;
        _1550 = (((cbLight._m0[_1556].y * 0.3183098733425140380859375) * _1574) * _1575) + _1529;
        _1552 = (((cbLight._m0[_1556].z * 0.3183098733425140380859375) * _1574) * _1575) + _1530;
    }
    bool _1555 = _1535.y == 0u;
    float _1593;
    float _1595;
    float _1597;
    if (_1555)
    {
        _1593 = _1548;
        _1595 = _1550;
        _1597 = _1552;
    }
    else
    {
        uint _1698 = _1461 + 7u;
        float _1714 = (dot(vec3(cbLight._m0[_1461 + 3u].xyz), vec3(_307, _308, _309)) * 0.5) + 0.5;
        float _1715 = _1714 * _1714;
        float _3403 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
        float _1716 = isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0));
        float _1717 = isnan(1.0) ? _1478 : (isnan(_1478) ? 1.0 : min(_1478, 1.0));
        _1593 = (((cbLight._m0[_1698].x * 0.3183098733425140380859375) * _1716) * _1717) + _1548;
        _1595 = (((cbLight._m0[_1698].y * 0.3183098733425140380859375) * _1716) * _1717) + _1550;
        _1597 = (((cbLight._m0[_1698].z * 0.3183098733425140380859375) * _1716) * _1717) + _1552;
    }
    uint _1599 = _1461 + 8u;
    float _1605 = cbLight._m0[_1461].x + _376;
    float _1606 = cbLight._m0[_1461].y + _377;
    float _1607 = cbLight._m0[_1461].z + _378;
    float _1611 = inversesqrt(dot(vec3(_1605, _1606, _1607), vec3(_1605, _1606, _1607)));
    float _1615 = dot(vec3(_307, _308, _309), vec3(cbLight._m0[_1461].xyz));
    float _3419 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
    float _1618 = isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0));
    float _3430 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _1619 = isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0));
    float _1620 = dot(vec3(cbLight._m0[_1461].xyz), vec3(_1605 * _1611, _1606 * _1611, _1607 * _1611));
    float _3441 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
    float _1631 = (exp2(log2(1.0 - (isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1637 = (0.5 / ((_1618 + 9.9999999392252902907785028219223e-09) + _1619)) * _1618;
    float _3452 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
    float _1639 = (isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0))) * 0.31831014156341552734375;
    uint _1650 = _1461 + 9u;
    float _1656 = cbLight._m0[_1500].x + _376;
    float _1657 = cbLight._m0[_1500].y + _377;
    float _1658 = cbLight._m0[_1500].z + _378;
    float _1662 = inversesqrt(dot(vec3(_1656, _1657, _1658), vec3(_1656, _1657, _1658)));
    float _1666 = dot(vec3(_307, _308, _309), vec3(cbLight._m0[_1500].xyz));
    float _3463 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
    float _1669 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
    float _1670 = dot(vec3(cbLight._m0[_1500].xyz), vec3(_1656 * _1662, _1657 * _1662, _1658 * _1662));
    float _3474 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
    float _1679 = (exp2(log2(1.0 - (isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1683 = (0.5 / ((_1669 + 9.9999999392252902907785028219223e-09) + _1619)) * _1669;
    float _3485 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
    float _1685 = (isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0))) * 0.31831014156341552734375;
    float _1695 = (((_1679 * cbLight._m0[_1650].x) * _1685) * _1485) + (((_1631 * cbLight._m0[_1599].x) * _1639) * _1496);
    float _1696 = (((_1679 * cbLight._m0[_1650].y) * _1685) * _1485) + (((_1631 * cbLight._m0[_1599].y) * _1639) * _1496);
    float _1697 = (((_1679 * cbLight._m0[_1650].z) * _1685) * _1485) + (((_1631 * cbLight._m0[_1599].z) * _1639) * _1496);
    float _1759;
    float _1761;
    float _1763;
    if (_1537)
    {
        _1759 = _1695;
        _1761 = _1696;
        _1763 = _1697;
    }
    else
    {
        uint _1765 = _1461 + 10u;
        uint _1771 = _1461 + 2u;
        float _1777 = cbLight._m0[_1771].x + _376;
        float _1778 = cbLight._m0[_1771].y + _377;
        float _1779 = cbLight._m0[_1771].z + _378;
        float _1783 = inversesqrt(dot(vec3(_1777, _1778, _1779), vec3(_1777, _1778, _1779)));
        float _1787 = dot(vec3(_307, _308, _309), vec3(cbLight._m0[_1771].xyz));
        float _3496 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
        float _1790 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
        float _1791 = dot(vec3(cbLight._m0[_1771].xyz), vec3(_1777 * _1783, _1778 * _1783, _1779 * _1783));
        float _3507 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
        float _1800 = (exp2(log2(1.0 - (isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1804 = (0.5 / ((_1790 + 9.9999999392252902907785028219223e-09) + _1619)) * _1790;
        float _3518 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
        float _1806 = (isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0))) * 0.31831014156341552734375;
        float _1807 = isnan(1.0) ? _1477 : (isnan(_1477) ? 1.0 : min(_1477, 1.0));
        _1759 = (((_1800 * cbLight._m0[_1765].x) * _1806) * _1807) + _1695;
        _1761 = (((_1800 * cbLight._m0[_1765].y) * _1806) * _1807) + _1696;
        _1763 = (((_1800 * cbLight._m0[_1765].z) * _1806) * _1807) + _1697;
    }
    float _1842;
    float _1844;
    float _1846;
    if (_1555)
    {
        _1842 = _1759;
        _1844 = _1761;
        _1846 = _1763;
    }
    else
    {
        uint _1853 = _1461 + 11u;
        uint _1859 = _1461 + 3u;
        float _1865 = cbLight._m0[_1859].x + _376;
        float _1866 = cbLight._m0[_1859].y + _377;
        float _1867 = cbLight._m0[_1859].z + _378;
        float _1871 = inversesqrt(dot(vec3(_1865, _1866, _1867), vec3(_1865, _1866, _1867)));
        float _1875 = dot(vec3(_307, _308, _309), vec3(cbLight._m0[_1859].xyz));
        float _3534 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
        float _1878 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
        float _1879 = dot(vec3(cbLight._m0[_1859].xyz), vec3(_1865 * _1871, _1866 * _1871, _1867 * _1871));
        float _3545 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
        float _1888 = (exp2(log2(1.0 - (isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1892 = (0.5 / ((_1878 + 9.9999999392252902907785028219223e-09) + _1619)) * _1878;
        float _3556 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
        float _1894 = (isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0))) * 0.31831014156341552734375;
        float _1895 = isnan(1.0) ? _1478 : (isnan(_1478) ? 1.0 : min(_1478, 1.0));
        _1842 = (((_1888 * cbLight._m0[_1853].x) * _1894) * _1895) + _1759;
        _1844 = (((_1888 * cbLight._m0[_1853].y) * _1894) * _1895) + _1761;
        _1846 = (((_1888 * cbLight._m0[_1853].z) * _1894) * _1895) + _1763;
    }
    float _2029;
    float _2031;
    float _2033;
    float _2035;
    float _2037;
    float _2039;
    if (_1459.y == 0u)
    {
        float _1970 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1971 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1970;
        float _1972 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1970;
        float _1973 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1970;
        uvec4 _1985 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1986 = _1985.x;
        uint _1997 = uint((float(_1985.y) * floor(float(uint(cbSceneParam._m0[85u].y * _384) / _1986))) + floor(float(uint(cbSceneParam._m0[85u].x * _383) / _1986)));
        float _2007 = (log2(_1973 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2008 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
        uint _2011 = uint(isnan(14.0) ? _2008 : (isnan(_2008) ? 14.0 : min(_2008, 14.0)));
        uvec4 _2016 = texelFetch(g_lightClusterGridBuffer, int(((_2011 << 2u) + (_1997 << 6u)) >> 2u));
        uint _2017 = _2016.x;
        uint _2018 = _1985.z;
        float _2122;
        float _2124;
        float _2126;
        float _2128;
        float _2130;
        float _2132;
        if (((((1u << ((_2018 >> 4u) & 15u)) + 4294967295u) & _2017) == 0u) || ((_2018 & 240u) == 0u))
        {
            _2122 = 0.0;
            _2124 = 0.0;
            _2126 = 0.0;
            _2128 = 0.0;
            _2130 = 0.0;
            _2132 = 0.0;
        }
        else
        {
            float _2123;
            float _2125;
            float _2127;
            float _2129;
            float _2131;
            float _2133;
            float _2264 = 0.0;
            float _2265 = 0.0;
            float _2266 = 0.0;
            float _2267 = 0.0;
            float _2268 = 0.0;
            float _2269 = 0.0;
            uint _2270 = 0u;
            uint _2279;
            bool _2280;
            for (;;)
            {
                _2279 = texelFetch(g_lightClassification, int((((_2011 << 5u) + (_1997 << 9u)) + (_2270 << 2u)) >> 2u)).x;
                _2280 = _2279 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2280)
                {
                    frontier_phi_63_pred = _2269;
                    frontier_phi_63_pred_1 = _2268;
                    frontier_phi_63_pred_2 = _2267;
                    frontier_phi_63_pred_3 = _2266;
                    frontier_phi_63_pred_4 = _2265;
                    frontier_phi_63_pred_5 = _2264;
                }
                else
                {
                    float _2388;
                    float _2389;
                    float _2390;
                    float _2391;
                    float _2392;
                    float _2393;
                    uint _2394;
                    _2388 = _2264;
                    _2389 = _2265;
                    _2390 = _2266;
                    _2391 = _2267;
                    _2392 = _2268;
                    _2393 = _2269;
                    _2394 = _2279;
                    float _2320;
                    float _2321;
                    float _2322;
                    float _2323;
                    float _2324;
                    float _2325;
                    for (;;)
                    {
                        uint _2398 = uint(findLSB(_2394)) + (_2270 << 5u);
                        uint _2395 = (_2394 + 4294967295u) & _2394;
                        uint _2400 = _2398 * 48u;
                        vec4 _2414 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2400)).x, texelFetch(g_PointLightRenderingBuffer, int(_2400 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2400 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2400 + 3u)).x));
                        uint _2420 = (_2398 * 48u) + 4u;
                        vec4 _2433 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2420)).x, texelFetch(g_PointLightRenderingBuffer, int(_2420 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2420 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2420 + 3u)).x));
                        uint _2439 = (_2398 * 48u) + 8u;
                        vec3 _2450 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2439)).x, texelFetch(g_PointLightRenderingBuffer, int(_2439 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2439 + 2u)).x));
                        float _2454 = _2414.x - _1971;
                        float _2455 = _2414.y - _1972;
                        float _2456 = _2414.z - _1973;
                        float _2457 = dot(vec3(_2454, _2455, _2456), vec3(_2454, _2455, _2456));
                        float _2460 = inversesqrt(_2457);
                        float _2469 = 1.0 - (_2457 * _2414.w);
                        float _3582 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
                        float _2470 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
                        float _2471 = sqrt(_2457) * _2433.w;
                        float _2474 = 1.39999997615814208984375 / (_2471 + 1.39999997615814208984375);
                        float _2475 = _2474 * _2474;
                        float _2478 = ((1.0 - _2475) * dot(vec3(_405, _408, _411), vec3(_2460 * _2454, _2460 * _2455, _2460 * _2456))) + _2475;
                        float _2481 = _2471 * _2471;
                        float _2485 = ((isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0))) * _2470) / ((_2481 * 0.699999988079071044921875) + 1.0);
                        float _2489 = (-0.0) - _1971;
                        float _2490 = (-0.0) - _1972;
                        float _2491 = (-0.0) - _1973;
                        float _2495 = inversesqrt(dot(vec3(_2489, _2490, _2491), vec3(_2489, _2490, _2491)));
                        float _2499 = dot(vec3(_405, _408, _411), vec3(_2495 * _2489, _2495 * _2490, _2495 * _2491));
                        float _3598 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
                        float _3609 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
                        float _2503 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
                        float _2507 = (0.5 / (((isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0))) + 9.9999999392252902907785028219223e-09) + _2503)) * _2503;
                        float _3620 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
                        float _2516 = (((isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0))) * 3.1415927410125732421875) / ((_2481 * 2.1991131305694580078125) + 3.141590118408203125)) * _2470;
                        _2323 = (_2485 * _2433.x) + _2391;
                        _2324 = (_2485 * _2433.y) + _2392;
                        _2325 = (_2485 * _2433.z) + _2393;
                        _2320 = (_2516 * _2450.x) + _2388;
                        _2321 = (_2516 * _2450.y) + _2389;
                        _2322 = (_2516 * _2450.z) + _2390;
                        if (_2395 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2388 = _2320;
                            _2389 = _2321;
                            _2390 = _2322;
                            _2391 = _2323;
                            _2392 = _2324;
                            _2393 = _2325;
                            _2394 = _2395;
                        }
                    }
                    frontier_phi_63_pred = _2325;
                    frontier_phi_63_pred_1 = _2324;
                    frontier_phi_63_pred_2 = _2323;
                    frontier_phi_63_pred_3 = _2322;
                    frontier_phi_63_pred_4 = _2321;
                    frontier_phi_63_pred_5 = _2320;
                }
                _2133 = frontier_phi_63_pred;
                _2131 = frontier_phi_63_pred_1;
                _2129 = frontier_phi_63_pred_2;
                _2127 = frontier_phi_63_pred_3;
                _2125 = frontier_phi_63_pred_4;
                _2123 = frontier_phi_63_pred_5;
                uint _2271 = _2270 + 1u;
                if (_2271 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2264 = _2123;
                    _2265 = _2125;
                    _2266 = _2127;
                    _2267 = _2129;
                    _2268 = _2131;
                    _2269 = _2133;
                    _2270 = _2271;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2122 = _2123;
            _2124 = _2125;
            _2126 = _2127;
            _2128 = _2129;
            _2130 = _2131;
            _2132 = _2133;
        }
        uvec4 _2136 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2137 = _2136.z;
        uint _2139 = (_2137 >> 8u) & 15u;
        float _2235;
        float _2237;
        float _2239;
        float _2241;
        float _2243;
        float _2245;
        if (((4294967295u << _2139) & _2017) == 0u)
        {
            _2235 = _2122;
            _2237 = _2124;
            _2239 = _2126;
            _2241 = _2128;
            _2243 = _2130;
            _2245 = _2132;
        }
        else
        {
            float _2260 = inversesqrt(dot(vec3(_1971, _1972, _1973), vec3(_1971, _1972, _1973)));
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2139 < ((_2137 >> 12u) & 15u))
            {
                float _2236;
                float _2238;
                float _2240;
                float _2242;
                float _2244;
                float _2246;
                float _2371 = _2122;
                float _2372 = _2124;
                float _2373 = _2126;
                float _2374 = _2128;
                float _2375 = _2130;
                float _2376 = _2132;
                uint _2377 = _2139;
                uint _2386;
                bool _2387;
                for (;;)
                {
                    _2386 = texelFetch(g_lightClassification, int((((_2011 << 5u) + (_1997 << 9u)) + (_2377 << 2u)) >> 2u)).x;
                    _2387 = _2386 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2387)
                    {
                        frontier_phi_69_pred = _2376;
                        frontier_phi_69_pred_1 = _2375;
                        frontier_phi_69_pred_2 = _2374;
                        frontier_phi_69_pred_3 = _2373;
                        frontier_phi_69_pred_4 = _2372;
                        frontier_phi_69_pred_5 = _2371;
                    }
                    else
                    {
                        float _2521;
                        float _2522;
                        float _2523;
                        float _2524;
                        float _2525;
                        float _2526;
                        float _2773;
                        float _2774;
                        float _2775;
                        float _2776;
                        float _2777;
                        float _2778;
                        float _2534 = _2371;
                        float _2535 = _2372;
                        float _2536 = _2373;
                        float _2537 = _2374;
                        float _2538 = _2375;
                        float _2539 = _2376;
                        uint _2540 = _2386;
                        uint _2541;
                        vec4 _2566;
                        float _2567;
                        vec4 _2582;
                        vec3 _2594;
                        vec4 _2610;
                        vec4 _2626;
                        float _2673;
                        bool _2674;
                        for (;;)
                        {
                            uint _2551 = ((_2377 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2540));
                            _2541 = (_2540 + 4294967295u) & _2540;
                            uint _2553 = _2551 * 40u;
                            _2566 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2553)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2553 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2553 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2553 + 3u)).x));
                            _2567 = _2566.w;
                            uint _2569 = (_2551 * 40u) + 4u;
                            _2582 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2569)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2569 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2569 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2569 + 3u)).x));
                            uint _2584 = (_2551 * 40u) + 8u;
                            _2594 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2584)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2584 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2584 + 2u)).x));
                            uint _2597 = (_2551 * 40u) + 16u;
                            _2610 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2597)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2597 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2597 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2597 + 3u)).x));
                            uint _2613 = (_2551 * 40u) + 20u;
                            _2626 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2613)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2613 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2613 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2613 + 3u)).x));
                            uint _2629 = (_2551 * 40u) + 24u;
                            vec4 _2642 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2629)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2629 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2629 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2629 + 3u)).x));
                            uint _2648 = (_2551 * 40u) + 28u;
                            vec4 _2661 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2648)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2648 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2648 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2648 + 3u)).x));
                            _2673 = fma(_1973, _2661.z, fma(_1972, _2661.y, _2661.x * _1971)) + _2661.w;
                            _2674 = !((fma(_1973, _2642.z, fma(_1972, _2642.y, _2642.x * _1971)) + _2642.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2674)
                            {
                                float _2701 = _2566.x - _1971;
                                float _2702 = _2566.y - _1972;
                                float _2703 = _2566.z - _1973;
                                float _2704 = dot(vec3(_2701, _2702, _2703), vec3(_2701, _2702, _2703));
                                float _2707 = inversesqrt(_2704);
                                float _2708 = _2707 * _2701;
                                float _2709 = _2707 * _2702;
                                float _2710 = _2707 * _2703;
                                float _2714 = 1.0 - (_2704 / (_2567 * _2567));
                                float _3631 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
                                float _2715 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
                                float _2719 = sqrt(_2704) * _2582.w;
                                float _2721 = 1.39999997615814208984375 / (_2719 + 1.39999997615814208984375);
                                float _2722 = _2721 * _2721;
                                float _2723 = 1.0 - _2722;
                                float _2725 = (_2723 * dot(vec3(_2708, _2709, _2710), vec3(_405, _408, _411))) + _2722;
                                float _2728 = _2719 * _2719;
                                float _2732 = (fma(_1973, _2610.z, fma(_1972, _2610.y, _2610.x * _1971)) + _2610.w) / _2673;
                                float _2733 = (fma(_1973, _2626.z, fma(_1972, _2626.y, _2626.x * _1971)) + _2626.w) / _2673;
                                float _2737 = 1.0 - dot(vec2(_2732, _2733), vec2(_2732, _2733));
                                float _3647 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
                                float _2738 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
                                float _2739 = _2738 * (((isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0))) * _2715) / ((_2728 * 0.699999988079071044921875) + 1.0));
                                float _2749 = dot(vec3(_405, _408, _411), vec3((-0.0) - (_1971 * _2260), (-0.0) - (_1972 * _2260), (-0.0) - (_1973 * _2260)));
                                float _3658 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
                                float _2757 = (_2723 * dot(vec3(_405, _408, _411), vec3(_2708, _2709, _2710))) + _2722;
                                float _3669 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0));
                                float _2758 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
                                float _2762 = (0.5 / (((isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0))) + 9.9999999392252902907785028219223e-09) + _2758)) * _2758;
                                float _3680 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
                                float _2769 = (_2738 * _2715) * (((isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0))) * 3.1415927410125732421875) / ((_2728 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_75_pred = _2739 * _2582.z;
                                frontier_phi_75_pred_1 = _2739 * _2582.y;
                                frontier_phi_75_pred_2 = _2739 * _2582.x;
                                frontier_phi_75_pred_3 = _2769 * _2594.z;
                                frontier_phi_75_pred_4 = _2769 * _2594.y;
                                frontier_phi_75_pred_5 = _2769 * _2594.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _2778 = frontier_phi_75_pred;
                            _2777 = frontier_phi_75_pred_1;
                            _2776 = frontier_phi_75_pred_2;
                            _2775 = frontier_phi_75_pred_3;
                            _2774 = frontier_phi_75_pred_4;
                            _2773 = frontier_phi_75_pred_5;
                            _2524 = _2776 + _2537;
                            _2525 = _2777 + _2538;
                            _2526 = _2778 + _2539;
                            _2521 = _2773 + _2534;
                            _2522 = _2774 + _2535;
                            _2523 = _2775 + _2536;
                            if (_2541 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2534 = _2521;
                                _2535 = _2522;
                                _2536 = _2523;
                                _2537 = _2524;
                                _2538 = _2525;
                                _2539 = _2526;
                                _2540 = _2541;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2526;
                        frontier_phi_69_pred_1 = _2525;
                        frontier_phi_69_pred_2 = _2524;
                        frontier_phi_69_pred_3 = _2523;
                        frontier_phi_69_pred_4 = _2522;
                        frontier_phi_69_pred_5 = _2521;
                    }
                    _2246 = frontier_phi_69_pred;
                    _2244 = frontier_phi_69_pred_1;
                    _2242 = frontier_phi_69_pred_2;
                    _2240 = frontier_phi_69_pred_3;
                    _2238 = frontier_phi_69_pred_4;
                    _2236 = frontier_phi_69_pred_5;
                    uint _2378 = _2377 + 1u;
                    if (_2378 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2371 = _2236;
                        _2372 = _2238;
                        _2373 = _2240;
                        _2374 = _2242;
                        _2375 = _2244;
                        _2376 = _2246;
                        _2377 = _2378;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2246;
                frontier_phi_57_58_ladder_1 = _2244;
                frontier_phi_57_58_ladder_2 = _2242;
                frontier_phi_57_58_ladder_3 = _2240;
                frontier_phi_57_58_ladder_4 = _2238;
                frontier_phi_57_58_ladder_5 = _2236;
            }
            else
            {
                frontier_phi_57_58_ladder = _2132;
                frontier_phi_57_58_ladder_1 = _2130;
                frontier_phi_57_58_ladder_2 = _2128;
                frontier_phi_57_58_ladder_3 = _2126;
                frontier_phi_57_58_ladder_4 = _2124;
                frontier_phi_57_58_ladder_5 = _2122;
            }
            _2235 = frontier_phi_57_58_ladder_5;
            _2237 = frontier_phi_57_58_ladder_4;
            _2239 = frontier_phi_57_58_ladder_3;
            _2241 = frontier_phi_57_58_ladder_2;
            _2243 = frontier_phi_57_58_ladder_1;
            _2245 = frontier_phi_57_58_ladder;
        }
        float _2250 = isnan(1.0) ? _450 : (isnan(_450) ? 1.0 : min(_450, 1.0));
        _2029 = (_2250 * _2241) + _1593;
        _2031 = (_2250 * _2243) + _1595;
        _2033 = (_2250 * _2245) + _1597;
        _2035 = ((_2235 * 0.039999999105930328369140625) * _2250) + _1842;
        _2037 = ((_2237 * 0.039999999105930328369140625) * _2250) + _1844;
        _2039 = ((_2239 * 0.039999999105930328369140625) * _2250) + _1846;
    }
    else
    {
        _2029 = _1593;
        _2031 = _1595;
        _2033 = _1597;
        _2035 = _1842;
        _2037 = _1844;
        _2039 = _1846;
    }
    float _3696 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _3707 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _3718 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _3729 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
    float _2057 = ((isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0))) * (_2029 + ((isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0))) * _450))) + ((_2035 + ((isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0))) * _1229)) * cbPerFrame._m0[3u].x);
    float _2058 = ((isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0))) * (_2031 + ((isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0))) * _450))) + ((_2037 + ((isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0))) * _1229)) * cbPerFrame._m0[3u].x);
    float _2059 = ((isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0))) * (_2033 + ((isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0))) * _450))) + ((_2039 + ((isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0))) * _1229)) * cbPerFrame._m0[3u].x);
    float _2067 = cbInstanceData._m0[_424 + 6u].w * (isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0)));
    float _2072 = _383 / cbSceneParam._m0[86u].x;
    float _2073 = _384 / cbSceneParam._m0[86u].y;
    vec4 _2087 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2072, _2073, (log2((isnan(cbSceneParam._m0[77u].w) ? _318 : (isnan(_318) ? cbSceneParam._m0[77u].w : min(_318, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2089 = _2087.x;
    float _2090 = _2087.y;
    float _2091 = _2087.z;
    float _2092 = _2087.w;
    float _2184;
    float _2186;
    float _2188;
    float _2190;
    if (_318 > cbSceneParam._m0[78u].w)
    {
        float _2147 = isnan(_318) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _318 : min(cbSceneParam._m0[80u].w, _318));
        float _2148 = _2147 / _318;
        float _2159 = _2148 * _369;
        float _2160 = _370 * _2148;
        float _2161 = (-0.0) - _2160;
        float _2162 = _2148 * _371;
        float _2164 = (cbSceneParam._m0[77u].w * _2161) / _2147;
        float _2165 = _2164 + cbSceneParam._m0[79u].w;
        float _2166 = cbSceneParam._m0[79u].w - _2160;
        float _2172 = sqrt(((_2159 * _2159) + (_2160 * _2160)) + (_2162 * _2162));
        float _2175 = (1.0 - (cbSceneParam._m0[77u].w / _2147)) * _2172;
        float _2180 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2182 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2333;
        if (abs((_2161 - _2164) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2333 = ((((_2165 > 0.0) ? exp2(_2180 * _2165) : (2.0 - exp2(_2182 * _2165))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2175;
        }
        else
        {
            float _2293 = 1.0 / cbSceneParam._m0[80u].x;
            float _2294 = isnan(_2166) ? _2165 : (isnan(_2165) ? _2166 : max(_2165, _2166));
            float _2295 = isnan(_2166) ? _2165 : (isnan(_2165) ? _2166 : min(_2165, _2166));
            float _2304 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : min(_2294, 0.0));
            float _2305 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : min(_2295, 0.0));
            _2333 = ((abs(_2172 / _2161) * cbSceneParam._m0[80u].y) * ((((_2304 - _2305) * 2.0) - ((exp2(_2180 * (isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0)))) - exp2(_2180 * (isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0))))) * _2293)) - ((exp2(_2182 * _2304) - exp2(_2182 * _2305)) * _2293))) + (_2175 * cbSceneParam._m0[80u].z);
        }
        vec4 _2335 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2072, _2073, 1.0), 0.0);
        float _2344 = exp2((_2333 * (-1.44269502162933349609375)) * (1.0 - _2335.w));
        float _2345 = log2(_2344);
        float _2361 = log2(_2092);
        _2184 = (exp2(_2361 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2345 * cbSceneParam._m0[78u].x)) * _2335.x) / cbSceneParam._m0[78u].x)) + _2089;
        _2186 = (exp2(_2361 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2345 * cbSceneParam._m0[78u].y)) * _2335.y) / cbSceneParam._m0[78u].y)) + _2090;
        _2188 = (exp2(_2361 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2345 * cbSceneParam._m0[78u].z)) * _2335.z) / cbSceneParam._m0[78u].z)) + _2091;
        _2190 = _2344 * _2092;
    }
    else
    {
        _2184 = _2089;
        _2186 = _2090;
        _2188 = _2091;
        _2190 = _2092;
    }
    float _2202 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2203 = _2202 == 3.0;
    float _2205 = log2(_2190);
    float _2212 = exp2(_2205 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0)));
    float _2213 = exp2(_2205 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0)));
    float _2214 = exp2(_2205 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0)));
    float _2223 = (_2202 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2223 * (_2203 ? _2212 : (_2212 + (cbSceneParam._m0[72u].w * _2184)));
    SV_Target.y = _2223 * (_2203 ? _2213 : (_2213 + (cbSceneParam._m0[72u].w * _2186)));
    SV_Target.z = _2223 * (_2203 ? _2214 : (_2214 + (cbSceneParam._m0[72u].w * _2188)));
    SV_Target.w = _2067;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2067;
}


