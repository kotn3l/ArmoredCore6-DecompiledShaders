#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_A_Alpha_FlipBookSmooth_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _855;
float _3025;
float _3026;
float _3027;
float _3028;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _170 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _171 = _170 * NORMAL.x;
    float _172 = _170 * NORMAL.y;
    float _173 = _170 * NORMAL.z;
    float _178;
    float _179;
    float _180;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _178 = (-0.0) - _171;
        _179 = (-0.0) - _172;
        _180 = (-0.0) - _173;
    }
    else
    {
        _178 = _171;
        _179 = _172;
        _180 = _173;
    }
    uint _197 = uint(int(floor(cbMtdParam._m0[10u].y)));
    float _198 = fract(cbMtdParam._m0[10u].y);
    uint _199 = _197 + 1u;
    uint _200 = uint(int(cbMtdParam._m0[10u].w * cbMtdParam._m0[10u].z));
    float _203 = float(int(_197 - _200 * (_197 / _200)));
    float _207 = float(int(_199 - _200 * (_199 / _200)));
    float _211 = 1.0 / cbMtdParam._m0[10u].z;
    float _213 = 1.0 / cbMtdParam._m0[10u].w;
    float _214 = fract(TEXCOORD_1.x);
    float _215 = fract(TEXCOORD_1.y);
    vec4 _236 = texture(sampler2D(S_A_Alpha_FlipBookSmooth_snp_0_Texture2D_0, SS_DiffuseMap), vec2((((_214 + (_207 - cbMtdParam._m0[10u].z * trunc(_207 / cbMtdParam._m0[10u].z))) * _211) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_215 + floor(_207 / cbMtdParam._m0[10u].z)) * _213) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _247 = texture(sampler2D(S_A_Alpha_FlipBookSmooth_snp_0_Texture2D_0, SS_DiffuseMap), vec2((((_214 + (_203 - cbMtdParam._m0[10u].z * trunc(_203 / cbMtdParam._m0[10u].z))) * _211) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_215 + floor(_203 / cbMtdParam._m0[10u].z)) * _213) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _249 = _247.x;
    float _250 = _247.y;
    float _251 = _247.z;
    float _252 = _247.w;
    float _265 = (((_236.x - _249) * _198) + _249) * cbMtdParam._m0[9u].x;
    float _266 = (((_236.y - _250) * _198) + _250) * cbMtdParam._m0[9u].y;
    float _267 = (((_236.z - _251) * _198) + _251) * cbMtdParam._m0[9u].z;
    vec4 _277 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _279 = _277.x;
    float _302 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _279)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _279))) - POSITION_1.w) / cbMtdParam._m0[10u].x;
    float _3037 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _305 = (cbMtdParam._m0[9u].w * TEXCOORD_1.z) * (((_236.w - _252) * _198) + _252);
    float _306 = (isnan(1.0) ? _3037 : (isnan(_3037) ? 1.0 : min(_3037, 1.0))) * _305;
    float _307 = gl_FragCoord.x * 0.125;
    float _309 = gl_FragCoord.y * 0.125;
    float _319 = float(_305 >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_307, _309)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625));
    float _323 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _324 = _323 * _178;
    float _325 = _323 * _179;
    float _326 = _323 * _180;
    float _3048 = isnan(0.0) ? _306 : (isnan(_306) ? 0.0 : max(_306, 0.0));
    float _327 = isnan(1.0) ? _3048 : (isnan(_3048) ? 1.0 : min(_3048, 1.0));
    float _3059 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _3070 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _3081 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _344 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _385 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _395 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _385);
    float _396 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _385);
    float _397 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _385);
    float _401 = inversesqrt(dot(vec3(_395, _396, _397), vec3(_395, _396, _397)));
    float _402 = _395 * _401;
    float _403 = _396 * _401;
    float _404 = _397 * _401;
    vec4 _405 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_307, _309));
    float _407 = _405.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _536 = sqrt(((_395 * _395) + (_396 * _396)) + (_397 * _397));
        float _542 = (cbMatDynParam._m0[5u].x * _536) + cbMatDynParam._m0[5u].y;
        float _3092 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
        float _543 = isnan(1.0) ? _3092 : (isnan(_3092) ? 1.0 : min(_3092, 1.0));
        float _547 = (cbMatDynParam._m0[5u].z * _536) + cbMatDynParam._m0[5u].w;
        float _3103 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3103 : (isnan(_3103) ? 1.0 : min(_3103, 1.0))) - _543)) + _543) < ((_407 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _418 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _419 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _439 = fma(_326, cbSceneParam._m0[5u].z, fma(_325, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _324));
    float _442 = fma(_326, cbSceneParam._m0[6u].z, fma(_325, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _324));
    float _445 = fma(_326, cbSceneParam._m0[7u].z, fma(_325, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _324));
    uint _458 = uint(roundEven(NORMAL.w)) * 13u;
    uint _460 = _458 + 9u;
    uint _461 = _460 + uint(cbMatDynParam._m0[0u].w);
    float _467 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3059 : (isnan(_3059) ? 1.0 : min(_3059, 1.0)))) * cbInstanceData._m0[_461].x;
    float _468 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3070 : (isnan(_3070) ? 1.0 : min(_3070, 1.0)))) * cbInstanceData._m0[_461].y;
    float _469 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3081 : (isnan(_3081) ? 1.0 : min(_3081, 1.0)))) * cbInstanceData._m0[_461].z;
    float _3114 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _470 = isnan(1.0) ? _3114 : (isnan(_3114) ? 1.0 : min(_3114, 1.0));
    float _3125 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _471 = isnan(1.0) ? _3125 : (isnan(_3125) ? 1.0 : min(_3125, 1.0));
    float _3136 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _472 = isnan(1.0) ? _3136 : (isnan(_3136) ? 1.0 : min(_3136, 1.0));
    vec4 _481 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _418, cbSceneParam._m0[86u].y * _419));
    float _484 = _481.x * TEXCOORD_1.w;
    float _485 = dot(vec3(_324, _325, _326), vec3(_402, _403, _404));
    float _488 = _485 * 2.0;
    float _493 = (_488 * _324) - _402;
    float _494 = (_488 * _325) - _403;
    float _495 = (_488 * _326) - _404;
    float _517 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _521 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _525 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _854;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    float _863;
    float _864;
    float _865;
    float _866;
    float _867;
    float _868;
    float _869;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _579 = fma(_525, cbModelParam._m0[26u].z, fma(_521, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _517));
        float _583 = fma(_525, cbModelParam._m0[27u].z, fma(_521, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _517));
        float _587 = fma(_525, cbModelParam._m0[28u].z, fma(_521, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _517));
        float _612 = _517 + _324;
        float _613 = _521 + _325;
        float _614 = _525 + _326;
        float _624 = fma(_614, cbModelParam._m0[26u].z, fma(_613, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _612)) - _579;
        float _625 = fma(_614, cbModelParam._m0[27u].z, fma(_613, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _612)) - _583;
        float _626 = fma(_614, cbModelParam._m0[28u].z, fma(_613, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _612)) - _587;
        float _630 = inversesqrt(dot(vec3(_624, _625, _626), vec3(_624, _625, _626)));
        float _643 = ((_630 * _624) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_579 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _644 = ((_630 * _625) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_583 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _645 = ((_630 * _626) / cbModelParam._m0[34u].z) + ((((((_587 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _648 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_643, _644, _645), 0.0);
        vec4 _655 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_643, _644, _645), 0.0);
        vec4 _662 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_643, _644, _645), 0.0);
        vec4 _669 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_643, _644, _645), 0.0);
        float _682 = exp2((_648.w + (-0.5)) * 20.0) * 2.0;
        float _683 = _682 * (_648.x + (-0.5));
        float _684 = _682 * (_648.y + (-0.5));
        float _685 = _682 * (_648.z + (-0.5));
        float _692 = exp2((_655.w + (-0.5)) * 20.0) * 2.0;
        float _693 = _692 * (_655.x + (-0.5));
        float _694 = _692 * (_655.y + (-0.5));
        float _695 = _692 * (_655.z + (-0.5));
        float _702 = exp2((_662.w + (-0.5)) * 20.0) * 2.0;
        float _703 = _702 * (_662.x + (-0.5));
        float _704 = _702 * (_662.y + (-0.5));
        float _705 = _702 * (_662.z + (-0.5));
        float _712 = exp2((_669.w + (-0.5)) * 20.0) * 2.0;
        float _713 = _712 * (_669.x + (-0.5));
        float _714 = _712 * (_669.y + (-0.5));
        float _715 = _712 * (_669.z + (-0.5));
        float _716 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
        float _717 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
        float _718 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
        float _719 = _683 * 0.5;
        float _720 = _693 * 0.5;
        float _721 = _703 * 0.5;
        float _722 = dot(vec3(_719, _720, _721), vec3(_719, _720, _721));
        float _727 = (_722 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_722);
        float _736 = (dot(vec3(_324, _325, _326), vec3(_727 * _719, _727 * _720, _727 * _721)) + 1.0) * 0.5;
        float _3162 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
        float _746 = sqrt(((_720 * _720) + (_719 * _719)) + (_721 * _721)) / (_716 + 9.9999997473787516355514526367188e-06);
        float _3173 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
        float _747 = isnan(1.0) ? _3173 : (isnan(_3173) ? 1.0 : min(_3173, 1.0));
        float _748 = _747 * 2.0;
        float _752 = (1.0 - _747) / (_747 + 1.0);
        float _3184 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
        float _753 = isnan(1.0) ? _3184 : (isnan(_3184) ? 1.0 : min(_3184, 1.0));
        float _762 = ((((1.0 - _753) * (_748 + 2.0)) * exp2(log2(isnan(1.0) ? _3162 : (isnan(_3162) ? 1.0 : min(_3162, 1.0))) * (_748 + 1.0))) + _753) * _716;
        float _763 = _684 * 0.5;
        float _764 = _694 * 0.5;
        float _765 = _704 * 0.5;
        float _766 = dot(vec3(_763, _764, _765), vec3(_763, _764, _765));
        float _771 = (_766 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_766);
        float _779 = (dot(vec3(_324, _325, _326), vec3(_771 * _763, _771 * _764, _771 * _765)) + 1.0) * 0.5;
        float _3195 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
        float _788 = sqrt(((_764 * _764) + (_763 * _763)) + (_765 * _765)) / (_717 + 9.9999997473787516355514526367188e-06);
        float _3206 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _789 = isnan(1.0) ? _3206 : (isnan(_3206) ? 1.0 : min(_3206, 1.0));
        float _790 = _789 * 2.0;
        float _794 = (1.0 - _789) / (_789 + 1.0);
        float _3217 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
        float _795 = isnan(1.0) ? _3217 : (isnan(_3217) ? 1.0 : min(_3217, 1.0));
        float _804 = ((((1.0 - _795) * (_790 + 2.0)) * exp2(log2(isnan(1.0) ? _3195 : (isnan(_3195) ? 1.0 : min(_3195, 1.0))) * (_790 + 1.0))) + _795) * _717;
        float _805 = _685 * 0.5;
        float _806 = _695 * 0.5;
        float _807 = _705 * 0.5;
        float _808 = dot(vec3(_805, _806, _807), vec3(_805, _806, _807));
        float _813 = (_808 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_808);
        float _821 = (dot(vec3(_324, _325, _326), vec3(_813 * _805, _813 * _806, _813 * _807)) + 1.0) * 0.5;
        float _3228 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
        float _830 = sqrt(((_806 * _806) + (_805 * _805)) + (_807 * _807)) / (_718 + 9.9999997473787516355514526367188e-06);
        float _3239 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
        float _831 = isnan(1.0) ? _3239 : (isnan(_3239) ? 1.0 : min(_3239, 1.0));
        float _832 = _831 * 2.0;
        float _836 = (1.0 - _831) / (_831 + 1.0);
        float _3250 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
        float _837 = isnan(1.0) ? _3250 : (isnan(_3250) ? 1.0 : min(_3250, 1.0));
        float _846 = ((((1.0 - _837) * (_832 + 2.0)) * exp2(log2(isnan(1.0) ? _3228 : (isnan(_3228) ? 1.0 : min(_3228, 1.0))) * (_832 + 1.0))) + _837) * _718;
        _854 = _685;
        _856 = _684;
        _857 = _683;
        _858 = _695;
        _859 = _694;
        _860 = _693;
        _861 = _705;
        _862 = _704;
        _863 = _703;
        _864 = _718;
        _865 = _717;
        _866 = _716;
        _867 = cbModelParam._m0[36u].z * (isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0)));
        _868 = cbModelParam._m0[36u].z * (isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0)));
        _869 = cbModelParam._m0[36u].z * (isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0)));
    }
    else
    {
        _854 = _855;
        _856 = _855;
        _857 = _855;
        _858 = _855;
        _859 = _855;
        _860 = _855;
        _861 = _855;
        _862 = _855;
        _863 = _855;
        _864 = _855;
        _865 = _855;
        _866 = _855;
        _867 = 0.0;
        _868 = 0.0;
        _869 = 0.0;
    }
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _898 = fma(_525, cbModelParam._m0[30u].z, fma(_521, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _517));
        float _902 = fma(_525, cbModelParam._m0[31u].z, fma(_521, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _517));
        float _906 = fma(_525, cbModelParam._m0[32u].z, fma(_521, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _517));
        float _929 = _517 + _324;
        float _930 = _521 + _325;
        float _931 = _525 + _326;
        float _941 = fma(_931, cbModelParam._m0[30u].z, fma(_930, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _929)) - _898;
        float _942 = fma(_931, cbModelParam._m0[31u].z, fma(_930, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _929)) - _902;
        float _943 = fma(_931, cbModelParam._m0[32u].z, fma(_930, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _929)) - _906;
        float _947 = inversesqrt(dot(vec3(_941, _942, _943), vec3(_941, _942, _943)));
        float _960 = ((_947 * _941) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_898 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _961 = ((_947 * _942) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_902 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _962 = ((_947 * _943) / cbModelParam._m0[35u].z) + ((((((_906 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _964 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_960, _961, _962), 0.0);
        vec4 _971 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_960, _961, _962), 0.0);
        vec4 _978 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_960, _961, _962), 0.0);
        vec4 _985 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_960, _961, _962), 0.0);
        float _997 = exp2((_964.w + (-0.5)) * 20.0) * 2.0;
        float _998 = _997 * (_964.x + (-0.5));
        float _999 = _997 * (_964.y + (-0.5));
        float _1000 = _997 * (_964.z + (-0.5));
        float _1007 = exp2((_971.w + (-0.5)) * 20.0) * 2.0;
        float _1008 = _1007 * (_971.x + (-0.5));
        float _1009 = _1007 * (_971.y + (-0.5));
        float _1010 = _1007 * (_971.z + (-0.5));
        float _1017 = exp2((_978.w + (-0.5)) * 20.0) * 2.0;
        float _1018 = _1017 * (_978.x + (-0.5));
        float _1019 = _1017 * (_978.y + (-0.5));
        float _1020 = _1017 * (_978.z + (-0.5));
        float _1027 = exp2((_985.w + (-0.5)) * 20.0) * 2.0;
        float _1028 = _1027 * (_985.x + (-0.5));
        float _1029 = _1027 * (_985.y + (-0.5));
        float _1030 = _1027 * (_985.z + (-0.5));
        float _1031 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1032 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1033 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1034 = _998 * 0.5;
        float _1035 = _1008 * 0.5;
        float _1036 = _1018 * 0.5;
        float _1037 = dot(vec3(_1034, _1035, _1036), vec3(_1034, _1035, _1036));
        float _1042 = (_1037 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1037);
        float _1050 = (dot(vec3(_324, _325, _326), vec3(_1042 * _1034, _1042 * _1035, _1042 * _1036)) + 1.0) * 0.5;
        float _3291 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1059 = sqrt(((_1035 * _1035) + (_1034 * _1034)) + (_1036 * _1036)) / (_1031 + 9.9999997473787516355514526367188e-06);
        float _3302 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1060 = isnan(1.0) ? _3302 : (isnan(_3302) ? 1.0 : min(_3302, 1.0));
        float _1061 = _1060 * 2.0;
        float _1065 = (1.0 - _1060) / (_1060 + 1.0);
        float _3313 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0));
        float _1075 = ((((1.0 - _1066) * (_1061 + 2.0)) * exp2(log2(isnan(1.0) ? _3291 : (isnan(_3291) ? 1.0 : min(_3291, 1.0))) * (_1061 + 1.0))) + _1066) * _1031;
        float _1076 = _999 * 0.5;
        float _1077 = _1009 * 0.5;
        float _1078 = _1019 * 0.5;
        float _1079 = dot(vec3(_1076, _1077, _1078), vec3(_1076, _1077, _1078));
        float _1084 = (_1079 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1079);
        float _1092 = (dot(vec3(_324, _325, _326), vec3(_1084 * _1076, _1084 * _1077, _1084 * _1078)) + 1.0) * 0.5;
        float _3324 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1101 = sqrt(((_1077 * _1077) + (_1076 * _1076)) + (_1078 * _1078)) / (_1032 + 9.9999997473787516355514526367188e-06);
        float _3335 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1102 = isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0));
        float _1103 = _1102 * 2.0;
        float _1107 = (1.0 - _1102) / (_1102 + 1.0);
        float _3346 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1108 = isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0));
        float _1117 = ((((1.0 - _1108) * (_1103 + 2.0)) * exp2(log2(isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0))) * (_1103 + 1.0))) + _1108) * _1032;
        float _1118 = _1000 * 0.5;
        float _1119 = _1010 * 0.5;
        float _1120 = _1020 * 0.5;
        float _1121 = dot(vec3(_1118, _1119, _1120), vec3(_1118, _1119, _1120));
        float _1126 = (_1121 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1121);
        float _1134 = (dot(vec3(_324, _325, _326), vec3(_1126 * _1118, _1126 * _1119, _1126 * _1120)) + 1.0) * 0.5;
        float _3357 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1143 = sqrt(((_1119 * _1119) + (_1118 * _1118)) + (_1120 * _1120)) / (_1033 + 9.9999997473787516355514526367188e-06);
        float _3368 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0));
        float _1145 = _1144 * 2.0;
        float _1149 = (1.0 - _1144) / (_1144 + 1.0);
        float _3379 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0));
        float _1159 = ((((1.0 - _1150) * (_1145 + 2.0)) * exp2(log2(isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0))) * (_1145 + 1.0))) + _1150) * _1033;
        _1167 = _1000;
        _1168 = _999;
        _1169 = _998;
        _1170 = _1010;
        _1171 = _1009;
        _1172 = _1008;
        _1173 = _1020;
        _1174 = _1019;
        _1175 = _1018;
        _1176 = _1033;
        _1177 = _1032;
        _1178 = _1031;
        _1179 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0)));
        _1180 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0)));
        _1181 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0)));
    }
    else
    {
        _1167 = _855;
        _1168 = _855;
        _1169 = _855;
        _1170 = _855;
        _1171 = _855;
        _1172 = _855;
        _1173 = _855;
        _1174 = _855;
        _1175 = _855;
        _1176 = _855;
        _1177 = _855;
        _1178 = _855;
        _1179 = 0.0;
        _1180 = 0.0;
        _1181 = 0.0;
    }
    float _1191 = (cbModelParam._m0[1u].x * (_1179 - _867)) + _867;
    float _1192 = (cbModelParam._m0[1u].x * (_1180 - _868)) + _868;
    float _1193 = (cbModelParam._m0[1u].x * (_1181 - _869)) + _869;
    float _1214 = fma(_1193, cbSceneParam._m0[89u].z, fma(_1192, cbSceneParam._m0[89u].y, _1191 * cbSceneParam._m0[89u].x));
    float _1217 = fma(_1193, cbSceneParam._m0[90u].z, fma(_1192, cbSceneParam._m0[90u].y, _1191 * cbSceneParam._m0[90u].x));
    float _1220 = fma(_1193, cbSceneParam._m0[91u].z, fma(_1192, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1191));
    float _1235 = _493 * 0.5;
    float _1236 = _494 * 0.5;
    float _1237 = _495 * 0.5;
    float _1238 = dot(vec4(_1235, _1236, _1237, 1.0), vec4(_1169, _1172, _1175, _1178));
    float _1241 = dot(vec4(_1235, _1236, _1237, 1.0), vec4(_1168, _1171, _1174, _1177));
    float _1244 = dot(vec4(_1235, _1236, _1237, 1.0), vec4(_1167, _1170, _1173, _1176));
    float _1278;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1251 = dot(vec4(_1235, _1236, _1237, 1.0), vec4(_854, _858, _861, _864));
        float _1255 = dot(vec4(_1235, _1236, _1237, 1.0), vec4(_856, _859, _862, _865));
        float _1259 = dot(vec4(_1235, _1236, _1237, 1.0), vec4(_857, _860, _863, _866));
        float _1266 = dot(vec4(cbModelParam._m0[39u]), vec4(_1235, _1236, _1237, 1.0));
        _1278 = dot(vec3(isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0)), isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0)), isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1266) ? 0.0 : (isnan(0.0) ? _1266 : max(0.0, _1266))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1278 = 1.0;
    }
    float _1289;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1280 = dot(vec4(cbModelParam._m0[40u]), vec4(_1235, _1236, _1237, 1.0));
        _1289 = dot(vec3(isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0)), isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0)), isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1280) ? 0.0 : (isnan(0.0) ? _1280 : max(0.0, _1280))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1289 = 1.0;
    }
    float _1293 = (_1289 * cbModelParam._m0[1u].x) + (_1278 * (1.0 - cbModelParam._m0[1u].x));
    float _1302 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1384;
    float _1386;
    float _1388;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1351 = fma(_525, cbModelParam._m0[13u].z, fma(_521, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _517)) + cbModelParam._m0[13u].w;
        float _1355 = fma(_525, cbModelParam._m0[14u].z, fma(_521, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _517)) + cbModelParam._m0[14u].w;
        float _1359 = fma(_525, cbModelParam._m0[15u].z, fma(_521, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _517)) + cbModelParam._m0[15u].w;
        float _1362 = fma(_495, cbModelParam._m0[13u].z, fma(_494, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _493));
        float _1365 = fma(_495, cbModelParam._m0[14u].z, fma(_494, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _493));
        float _1368 = fma(_495, cbModelParam._m0[15u].z, fma(_494, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _493));
        float _1394;
        if (_1362 > 0.0)
        {
            _1394 = abs((1.0 - _1351) / _1362);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1362 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1351 + 1.0) / _1362);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1394 = frontier_phi_19_17_ladder;
        }
        float _1602;
        if (_1365 > 0.0)
        {
            _1602 = abs((1.0 - _1355) / _1365);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1365 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1355 + 1.0) / _1365);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1602 = frontier_phi_28_24_ladder;
        }
        float _1791;
        if (_1368 > 0.0)
        {
            _1791 = abs((1.0 - _1359) / _1368);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1368 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1359 + 1.0) / _1368);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1791 = frontier_phi_40_35_ladder;
        }
        float _1793 = isnan(_1602) ? _1394 : (isnan(_1394) ? _1602 : min(_1394, _1602));
        float _1794 = isnan(_1791) ? _1793 : (isnan(_1793) ? _1791 : min(_1793, _1791));
        float _1798 = (_1794 * _1362) + _1351;
        float _1799 = (_1794 * _1365) + _1355;
        float _1800 = (_1794 * _1368) + _1359;
        float _1801 = _1794 * 9.9999997473787516355514526367188e-05;
        float _1803 = (-1.0) - _1801;
        float _1805 = _1801 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1800 > _1805) || ((_1800 < _1803) || ((_1799 > _1805) || ((_1799 < _1803) || ((_1798 < _1803) || (_1798 > _1805))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1897 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1800, cbModelParam._m0[9u].z, fma(_1799, cbModelParam._m0[9u].y, _1798 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1800, cbModelParam._m0[10u].z, fma(_1799, cbModelParam._m0[10u].y, _1798 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1800, cbModelParam._m0[11u].z, fma(_1799, cbModelParam._m0[11u].y, _1798 * cbModelParam._m0[11u].x))), _1302);
            frontier_phi_18_40_ladder = _1897.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _1897.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _1897.x * cbModelParam._m0[1u].y;
        }
        _1384 = frontier_phi_18_40_ladder_2;
        _1386 = frontier_phi_18_40_ladder_1;
        _1388 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1372 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_493, _494, _495), _1302);
        _1384 = _1372.x * cbModelParam._m0[1u].y;
        _1386 = _1372.y * cbModelParam._m0[1u].y;
        _1388 = _1372.z * cbModelParam._m0[1u].y;
    }
    float _1391 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1484;
    float _1486;
    float _1488;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1448 = fma(_525, cbModelParam._m0[21u].z, fma(_521, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _517)) + cbModelParam._m0[21u].w;
        float _1452 = fma(_525, cbModelParam._m0[22u].z, fma(_521, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _517)) + cbModelParam._m0[22u].w;
        float _1456 = fma(_525, cbModelParam._m0[23u].z, fma(_521, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _517)) + cbModelParam._m0[23u].w;
        float _1459 = fma(_495, cbModelParam._m0[21u].z, fma(_494, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _493));
        float _1462 = fma(_495, cbModelParam._m0[22u].z, fma(_494, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _493));
        float _1465 = fma(_495, cbModelParam._m0[23u].z, fma(_494, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _493));
        float _1607;
        if (_1459 > 0.0)
        {
            _1607 = abs((1.0 - _1448) / _1459);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1459 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1448 + 1.0) / _1459);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1607 = frontier_phi_30_26_ladder;
        }
        float _1818;
        if (_1462 > 0.0)
        {
            _1818 = abs((1.0 - _1452) / _1462);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1462 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1452 + 1.0) / _1462);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1818 = frontier_phi_42_37_ladder;
        }
        float _1969;
        if (_1465 > 0.0)
        {
            _1969 = abs((1.0 - _1456) / _1465);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1465 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1456 + 1.0) / _1465);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _1969 = frontier_phi_51_48_ladder;
        }
        float _1971 = isnan(_1818) ? _1607 : (isnan(_1607) ? _1818 : min(_1607, _1818));
        float _1972 = isnan(_1969) ? _1971 : (isnan(_1971) ? _1969 : min(_1971, _1969));
        float _1976 = (_1972 * _1459) + _1448;
        float _1977 = (_1972 * _1462) + _1452;
        float _1978 = (_1972 * _1465) + _1456;
        float _1979 = _1972 * 9.9999997473787516355514526367188e-05;
        float _1980 = (-1.0) - _1979;
        float _1982 = _1979 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_1978 > _1982) || ((_1978 < _1980) || ((_1977 > _1982) || ((_1977 < _1980) || ((_1976 < _1980) || (_1976 > _1982))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2181 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1978, cbModelParam._m0[17u].z, fma(_1977, cbModelParam._m0[17u].y, _1976 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1978, cbModelParam._m0[18u].z, fma(_1977, cbModelParam._m0[18u].y, _1976 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1978, cbModelParam._m0[19u].z, fma(_1977, cbModelParam._m0[19u].y, _1976 * cbModelParam._m0[19u].x))), _1391);
            frontier_phi_27_51_ladder = _2181.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2181.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2181.x * cbModelParam._m0[1u].z;
        }
        _1484 = frontier_phi_27_51_ladder_2;
        _1486 = frontier_phi_27_51_ladder_1;
        _1488 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1468 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_493, _494, _495), _1391);
        _1484 = _1468.x * cbModelParam._m0[1u].z;
        _1486 = _1468.y * cbModelParam._m0[1u].z;
        _1488 = _1468.z * cbModelParam._m0[1u].z;
    }
    float _1500 = _484 * 0.01200000010430812835693359375;
    float _1502 = _1500 * ((cbModelParam._m0[1u].w * (_1484 - _1384)) + _1384);
    float _1503 = _1500 * ((cbModelParam._m0[1u].w * (_1486 - _1386)) + _1386);
    float _1504 = _1500 * ((cbModelParam._m0[1u].w * (_1488 - _1388)) + _1388);
    float _1507 = fma(_1504, cbSceneParam._m0[89u].z, fma(_1503, cbSceneParam._m0[89u].y, _1502 * cbSceneParam._m0[89u].x));
    float _1510 = fma(_1504, cbSceneParam._m0[90u].z, fma(_1503, cbSceneParam._m0[90u].y, _1502 * cbSceneParam._m0[90u].x));
    float _1513 = fma(_1504, cbSceneParam._m0[91u].z, fma(_1503, cbSceneParam._m0[91u].y, _1502 * cbSceneParam._m0[91u].x));
    uvec4 _1523 = floatBitsToUint(cbInstanceData._m0[_458 + 5u]);
    uint _1525 = _1523.x * 14u;
    uint _1526 = _1525 + 13u;
    float _1533 = _484 + (-1.0);
    float _1539 = (cbLight._m0[_1526].x * _1533) + 1.0;
    float _1540 = (cbLight._m0[_1526].y * _1533) + 1.0;
    float _1541 = (cbLight._m0[_1526].z * _1533) + 1.0;
    float _1542 = (cbLight._m0[_1526].w * _1533) + 1.0;
    uint _1543 = _1525 + 5u;
    float _1549 = isnan(1.0) ? _1540 : (isnan(_1540) ? 1.0 : min(_1540, 1.0));
    uint _1553 = _1525 + 4u;
    float _1560 = isnan(1.0) ? _1539 : (isnan(_1539) ? 1.0 : min(_1539, 1.0));
    uint _1564 = _1525 | 1u;
    float _1575 = dot(vec3(cbLight._m0[_1525].xyz), vec3(_324, _325, _326));
    float _1578 = dot(vec3(cbLight._m0[_1564].xyz), vec3(_324, _325, _326));
    float _3515 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
    float _3526 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
    float _1583 = (isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0))) * 0.3183098733425140380859375;
    float _1585 = (isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0))) * 0.3183098733425140380859375;
    float _1592 = ((cbLight._m0[_1543].x * _1549) * _1585) + ((cbLight._m0[_1553].x * _1560) * _1583);
    float _1593 = ((_1549 * cbLight._m0[_1543].y) * _1585) + ((_1560 * cbLight._m0[_1553].y) * _1583);
    float _1594 = ((_1549 * cbLight._m0[_1543].z) * _1585) + ((_1560 * cbLight._m0[_1553].z) * _1583);
    uvec4 _1599 = floatBitsToUint(cbLight._m0[_1525 + 12u]);
    bool _1601 = _1599.x == 0u;
    float _1612;
    float _1614;
    float _1616;
    if (_1601)
    {
        _1612 = _1592;
        _1614 = _1593;
        _1616 = _1594;
    }
    else
    {
        uint _1620 = _1525 + 6u;
        float _1636 = (dot(vec3(cbLight._m0[_1525 + 2u].xyz), vec3(_324, _325, _326)) * 0.5) + 0.5;
        float _1637 = _1636 * _1636;
        float _3537 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1638 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
        float _1639 = isnan(1.0) ? _1541 : (isnan(_1541) ? 1.0 : min(_1541, 1.0));
        _1612 = (((cbLight._m0[_1620].x * 0.3183098733425140380859375) * _1638) * _1639) + _1592;
        _1614 = (((cbLight._m0[_1620].y * 0.3183098733425140380859375) * _1638) * _1639) + _1593;
        _1616 = (((cbLight._m0[_1620].z * 0.3183098733425140380859375) * _1638) * _1639) + _1594;
    }
    bool _1619 = _1599.y == 0u;
    float _1657;
    float _1659;
    float _1661;
    if (_1619)
    {
        _1657 = _1612;
        _1659 = _1614;
        _1661 = _1616;
    }
    else
    {
        uint _1762 = _1525 + 7u;
        float _1778 = (dot(vec3(cbLight._m0[_1525 + 3u].xyz), vec3(_324, _325, _326)) * 0.5) + 0.5;
        float _1779 = _1778 * _1778;
        float _3553 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
        float _1780 = isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0));
        float _1781 = isnan(1.0) ? _1542 : (isnan(_1542) ? 1.0 : min(_1542, 1.0));
        _1657 = (((cbLight._m0[_1762].x * 0.3183098733425140380859375) * _1780) * _1781) + _1612;
        _1659 = (((cbLight._m0[_1762].y * 0.3183098733425140380859375) * _1780) * _1781) + _1614;
        _1661 = (((cbLight._m0[_1762].z * 0.3183098733425140380859375) * _1780) * _1781) + _1616;
    }
    uint _1663 = _1525 + 8u;
    float _1669 = cbLight._m0[_1525].x + _402;
    float _1670 = cbLight._m0[_1525].y + _403;
    float _1671 = cbLight._m0[_1525].z + _404;
    float _1675 = inversesqrt(dot(vec3(_1669, _1670, _1671), vec3(_1669, _1670, _1671)));
    float _1679 = dot(vec3(_324, _325, _326), vec3(cbLight._m0[_1525].xyz));
    float _3569 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
    float _1682 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
    float _3580 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _1683 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
    float _1684 = dot(vec3(cbLight._m0[_1525].xyz), vec3(_1669 * _1675, _1670 * _1675, _1671 * _1675));
    float _3591 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
    float _1695 = (exp2(log2(1.0 - (isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1701 = (0.5 / ((_1682 + 9.9999999392252902907785028219223e-09) + _1683)) * _1682;
    float _3602 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
    float _1703 = (isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0))) * 0.31831014156341552734375;
    uint _1714 = _1525 + 9u;
    float _1720 = cbLight._m0[_1564].x + _402;
    float _1721 = cbLight._m0[_1564].y + _403;
    float _1722 = cbLight._m0[_1564].z + _404;
    float _1726 = inversesqrt(dot(vec3(_1720, _1721, _1722), vec3(_1720, _1721, _1722)));
    float _1730 = dot(vec3(_324, _325, _326), vec3(cbLight._m0[_1564].xyz));
    float _3613 = isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0));
    float _1733 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
    float _1734 = dot(vec3(cbLight._m0[_1564].xyz), vec3(_1720 * _1726, _1721 * _1726, _1722 * _1726));
    float _3624 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
    float _1743 = (exp2(log2(1.0 - (isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1747 = (0.5 / ((_1733 + 9.9999999392252902907785028219223e-09) + _1683)) * _1733;
    float _3635 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
    float _1749 = (isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0))) * 0.31831014156341552734375;
    float _1759 = (((_1743 * cbLight._m0[_1714].x) * _1749) * _1549) + (((_1695 * cbLight._m0[_1663].x) * _1703) * _1560);
    float _1760 = (((_1743 * cbLight._m0[_1714].y) * _1749) * _1549) + (((_1695 * cbLight._m0[_1663].y) * _1703) * _1560);
    float _1761 = (((_1743 * cbLight._m0[_1714].z) * _1749) * _1549) + (((_1695 * cbLight._m0[_1663].z) * _1703) * _1560);
    float _1823;
    float _1825;
    float _1827;
    if (_1601)
    {
        _1823 = _1759;
        _1825 = _1760;
        _1827 = _1761;
    }
    else
    {
        uint _1829 = _1525 + 10u;
        uint _1835 = _1525 + 2u;
        float _1841 = cbLight._m0[_1835].x + _402;
        float _1842 = cbLight._m0[_1835].y + _403;
        float _1843 = cbLight._m0[_1835].z + _404;
        float _1847 = inversesqrt(dot(vec3(_1841, _1842, _1843), vec3(_1841, _1842, _1843)));
        float _1851 = dot(vec3(_324, _325, _326), vec3(cbLight._m0[_1835].xyz));
        float _3646 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
        float _1854 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
        float _1855 = dot(vec3(cbLight._m0[_1835].xyz), vec3(_1841 * _1847, _1842 * _1847, _1843 * _1847));
        float _3657 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
        float _1864 = (exp2(log2(1.0 - (isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1868 = (0.5 / ((_1854 + 9.9999999392252902907785028219223e-09) + _1683)) * _1854;
        float _3668 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
        float _1870 = (isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0))) * 0.31831014156341552734375;
        float _1871 = isnan(1.0) ? _1541 : (isnan(_1541) ? 1.0 : min(_1541, 1.0));
        _1823 = (((_1864 * cbLight._m0[_1829].x) * _1870) * _1871) + _1759;
        _1825 = (((_1864 * cbLight._m0[_1829].y) * _1870) * _1871) + _1760;
        _1827 = (((_1864 * cbLight._m0[_1829].z) * _1870) * _1871) + _1761;
    }
    float _1906;
    float _1908;
    float _1910;
    if (_1619)
    {
        _1906 = _1823;
        _1908 = _1825;
        _1910 = _1827;
    }
    else
    {
        uint _1917 = _1525 + 11u;
        uint _1923 = _1525 + 3u;
        float _1929 = cbLight._m0[_1923].x + _402;
        float _1930 = cbLight._m0[_1923].y + _403;
        float _1931 = cbLight._m0[_1923].z + _404;
        float _1935 = inversesqrt(dot(vec3(_1929, _1930, _1931), vec3(_1929, _1930, _1931)));
        float _1939 = dot(vec3(_324, _325, _326), vec3(cbLight._m0[_1923].xyz));
        float _3684 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
        float _1942 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
        float _1943 = dot(vec3(cbLight._m0[_1923].xyz), vec3(_1929 * _1935, _1930 * _1935, _1931 * _1935));
        float _3695 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
        float _1952 = (exp2(log2(1.0 - (isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1956 = (0.5 / ((_1942 + 9.9999999392252902907785028219223e-09) + _1683)) * _1942;
        float _3706 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
        float _1958 = (isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0))) * 0.31831014156341552734375;
        float _1959 = isnan(1.0) ? _1542 : (isnan(_1542) ? 1.0 : min(_1542, 1.0));
        _1906 = (((_1952 * cbLight._m0[_1917].x) * _1958) * _1959) + _1823;
        _1908 = (((_1952 * cbLight._m0[_1917].y) * _1958) * _1959) + _1825;
        _1910 = (((_1952 * cbLight._m0[_1917].z) * _1958) * _1959) + _1827;
    }
    float _2093;
    float _2095;
    float _2097;
    float _2099;
    float _2101;
    float _2103;
    if (_1523.y == 0u)
    {
        float _2034 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2035 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2034;
        float _2036 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2034;
        float _2037 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2034;
        uvec4 _2049 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2050 = _2049.x;
        uint _2061 = uint((float(_2049.y) * floor(float(uint(cbSceneParam._m0[85u].y * _419) / _2050))) + floor(float(uint(cbSceneParam._m0[85u].x * _418) / _2050)));
        float _2071 = (log2(_2037 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2072 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
        uint _2075 = uint(isnan(14.0) ? _2072 : (isnan(_2072) ? 14.0 : min(_2072, 14.0)));
        uvec4 _2080 = texelFetch(g_lightClusterGridBuffer, int(((_2075 << 2u) + (_2061 << 6u)) >> 2u));
        uint _2081 = _2080.x;
        uint _2082 = _2049.z;
        float _2186;
        float _2188;
        float _2190;
        float _2192;
        float _2194;
        float _2196;
        if (((((1u << ((_2082 >> 4u) & 15u)) + 4294967295u) & _2081) == 0u) || ((_2082 & 240u) == 0u))
        {
            _2186 = 0.0;
            _2188 = 0.0;
            _2190 = 0.0;
            _2192 = 0.0;
            _2194 = 0.0;
            _2196 = 0.0;
        }
        else
        {
            float _2187;
            float _2189;
            float _2191;
            float _2193;
            float _2195;
            float _2197;
            float _2337 = 0.0;
            float _2338 = 0.0;
            float _2339 = 0.0;
            float _2340 = 0.0;
            float _2341 = 0.0;
            float _2342 = 0.0;
            uint _2343 = 0u;
            uint _2352;
            bool _2353;
            for (;;)
            {
                _2352 = texelFetch(g_lightClassification, int((((_2075 << 5u) + (_2061 << 9u)) + (_2343 << 2u)) >> 2u)).x;
                _2353 = _2352 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2353)
                {
                    frontier_phi_68_pred = _2339;
                    frontier_phi_68_pred_1 = _2342;
                    frontier_phi_68_pred_2 = _2341;
                    frontier_phi_68_pred_3 = _2340;
                    frontier_phi_68_pred_4 = _2338;
                    frontier_phi_68_pred_5 = _2337;
                }
                else
                {
                    float _2482;
                    float _2483;
                    float _2484;
                    float _2485;
                    float _2486;
                    float _2487;
                    uint _2488;
                    _2482 = _2337;
                    _2483 = _2338;
                    _2484 = _2339;
                    _2485 = _2340;
                    _2486 = _2341;
                    _2487 = _2342;
                    _2488 = _2352;
                    float _2409;
                    float _2410;
                    float _2411;
                    float _2412;
                    float _2413;
                    float _2414;
                    for (;;)
                    {
                        uint _2492 = uint(findLSB(_2488)) + (_2343 << 5u);
                        uint _2489 = (_2488 + 4294967295u) & _2488;
                        uint _2494 = _2492 * 48u;
                        vec4 _2508 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2494)).x, texelFetch(g_PointLightRenderingBuffer, int(_2494 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2494 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2494 + 3u)).x));
                        uint _2514 = (_2492 * 48u) + 4u;
                        vec4 _2527 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2514)).x, texelFetch(g_PointLightRenderingBuffer, int(_2514 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2514 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2514 + 3u)).x));
                        uint _2533 = (_2492 * 48u) + 8u;
                        vec3 _2544 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2533)).x, texelFetch(g_PointLightRenderingBuffer, int(_2533 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2533 + 2u)).x));
                        float _2548 = _2508.x - _2035;
                        float _2549 = _2508.y - _2036;
                        float _2550 = _2508.z - _2037;
                        float _2551 = dot(vec3(_2548, _2549, _2550), vec3(_2548, _2549, _2550));
                        float _2554 = inversesqrt(_2551);
                        float _2563 = 1.0 - (_2551 * _2508.w);
                        float _3732 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
                        float _2564 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
                        float _2565 = sqrt(_2551) * _2527.w;
                        float _2568 = 1.39999997615814208984375 / (_2565 + 1.39999997615814208984375);
                        float _2569 = _2568 * _2568;
                        float _2572 = ((1.0 - _2569) * dot(vec3(_439, _442, _445), vec3(_2554 * _2548, _2554 * _2549, _2554 * _2550))) + _2569;
                        float _2575 = _2565 * _2565;
                        float _2579 = ((isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0))) * _2564) / ((_2575 * 0.699999988079071044921875) + 1.0);
                        float _2583 = (-0.0) - _2035;
                        float _2584 = (-0.0) - _2036;
                        float _2585 = (-0.0) - _2037;
                        float _2589 = inversesqrt(dot(vec3(_2583, _2584, _2585), vec3(_2583, _2584, _2585)));
                        float _2593 = dot(vec3(_439, _442, _445), vec3(_2589 * _2583, _2589 * _2584, _2589 * _2585));
                        float _3748 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
                        float _3759 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
                        float _2597 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
                        float _2601 = (0.5 / (((isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0))) + 9.9999999392252902907785028219223e-09) + _2597)) * _2597;
                        float _3770 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
                        float _2610 = (((isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0))) * 3.1415927410125732421875) / ((_2575 * 2.1991131305694580078125) + 3.141590118408203125)) * _2564;
                        _2412 = (_2579 * _2527.x) + _2485;
                        _2413 = (_2579 * _2527.y) + _2486;
                        _2414 = (_2579 * _2527.z) + _2487;
                        _2409 = (_2610 * _2544.x) + _2482;
                        _2410 = (_2610 * _2544.y) + _2483;
                        _2411 = (_2610 * _2544.z) + _2484;
                        if (_2489 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2482 = _2409;
                            _2483 = _2410;
                            _2484 = _2411;
                            _2485 = _2412;
                            _2486 = _2413;
                            _2487 = _2414;
                            _2488 = _2489;
                        }
                    }
                    frontier_phi_68_pred = _2411;
                    frontier_phi_68_pred_1 = _2414;
                    frontier_phi_68_pred_2 = _2413;
                    frontier_phi_68_pred_3 = _2412;
                    frontier_phi_68_pred_4 = _2410;
                    frontier_phi_68_pred_5 = _2409;
                }
                _2191 = frontier_phi_68_pred;
                _2197 = frontier_phi_68_pred_1;
                _2195 = frontier_phi_68_pred_2;
                _2193 = frontier_phi_68_pred_3;
                _2189 = frontier_phi_68_pred_4;
                _2187 = frontier_phi_68_pred_5;
                uint _2344 = _2343 + 1u;
                if (_2344 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2337 = _2187;
                    _2338 = _2189;
                    _2339 = _2191;
                    _2340 = _2193;
                    _2341 = _2195;
                    _2342 = _2197;
                    _2343 = _2344;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2186 = _2187;
            _2188 = _2189;
            _2190 = _2191;
            _2192 = _2193;
            _2194 = _2195;
            _2196 = _2197;
        }
        uvec4 _2200 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2201 = _2200.z;
        uint _2203 = (_2201 >> 8u) & 15u;
        float _2308;
        float _2310;
        float _2312;
        float _2314;
        float _2316;
        float _2318;
        if (((4294967295u << _2203) & _2081) == 0u)
        {
            _2308 = _2186;
            _2310 = _2188;
            _2312 = _2190;
            _2314 = _2192;
            _2316 = _2194;
            _2318 = _2196;
        }
        else
        {
            float _2333 = inversesqrt(dot(vec3(_2035, _2036, _2037), vec3(_2035, _2036, _2037)));
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2203 < ((_2201 >> 12u) & 15u))
            {
                float _2309;
                float _2311;
                float _2313;
                float _2315;
                float _2317;
                float _2319;
                float _2465 = _2186;
                float _2466 = _2188;
                float _2467 = _2190;
                float _2468 = _2192;
                float _2469 = _2194;
                float _2470 = _2196;
                uint _2471 = _2203;
                uint _2480;
                bool _2481;
                for (;;)
                {
                    _2480 = texelFetch(g_lightClassification, int((((_2075 << 5u) + (_2061 << 9u)) + (_2471 << 2u)) >> 2u)).x;
                    _2481 = _2480 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2481)
                    {
                        frontier_phi_79_pred = _2470;
                        frontier_phi_79_pred_1 = _2469;
                        frontier_phi_79_pred_2 = _2468;
                        frontier_phi_79_pred_3 = _2467;
                        frontier_phi_79_pred_4 = _2466;
                        frontier_phi_79_pred_5 = _2465;
                    }
                    else
                    {
                        float _2624;
                        float _2625;
                        float _2626;
                        float _2627;
                        float _2628;
                        float _2629;
                        float _2876;
                        float _2877;
                        float _2878;
                        float _2879;
                        float _2880;
                        float _2881;
                        float _2637 = _2465;
                        float _2638 = _2466;
                        float _2639 = _2467;
                        float _2640 = _2468;
                        float _2641 = _2469;
                        float _2642 = _2470;
                        uint _2643 = _2480;
                        uint _2644;
                        vec4 _2669;
                        float _2670;
                        vec4 _2685;
                        vec3 _2697;
                        vec4 _2713;
                        vec4 _2729;
                        float _2776;
                        bool _2777;
                        for (;;)
                        {
                            uint _2654 = ((_2471 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2643));
                            _2644 = (_2643 + 4294967295u) & _2643;
                            uint _2656 = _2654 * 40u;
                            _2669 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2656)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2656 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2656 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2656 + 3u)).x));
                            _2670 = _2669.w;
                            uint _2672 = (_2654 * 40u) + 4u;
                            _2685 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2672)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2672 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2672 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2672 + 3u)).x));
                            uint _2687 = (_2654 * 40u) + 8u;
                            _2697 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2687)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2687 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2687 + 2u)).x));
                            uint _2700 = (_2654 * 40u) + 16u;
                            _2713 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2700)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2700 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2700 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2700 + 3u)).x));
                            uint _2716 = (_2654 * 40u) + 20u;
                            _2729 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2716)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2716 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2716 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2716 + 3u)).x));
                            uint _2732 = (_2654 * 40u) + 24u;
                            vec4 _2745 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2732)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2732 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2732 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2732 + 3u)).x));
                            uint _2751 = (_2654 * 40u) + 28u;
                            vec4 _2764 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2751)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2751 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2751 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2751 + 3u)).x));
                            _2776 = fma(_2037, _2764.z, fma(_2036, _2764.y, _2764.x * _2035)) + _2764.w;
                            _2777 = !((fma(_2037, _2745.z, fma(_2036, _2745.y, _2745.x * _2035)) + _2745.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_2777)
                            {
                                float _2804 = _2669.x - _2035;
                                float _2805 = _2669.y - _2036;
                                float _2806 = _2669.z - _2037;
                                float _2807 = dot(vec3(_2804, _2805, _2806), vec3(_2804, _2805, _2806));
                                float _2810 = inversesqrt(_2807);
                                float _2811 = _2810 * _2804;
                                float _2812 = _2810 * _2805;
                                float _2813 = _2810 * _2806;
                                float _2817 = 1.0 - (_2807 / (_2670 * _2670));
                                float _3781 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
                                float _2818 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
                                float _2822 = sqrt(_2807) * _2685.w;
                                float _2824 = 1.39999997615814208984375 / (_2822 + 1.39999997615814208984375);
                                float _2825 = _2824 * _2824;
                                float _2826 = 1.0 - _2825;
                                float _2828 = (_2826 * dot(vec3(_2811, _2812, _2813), vec3(_439, _442, _445))) + _2825;
                                float _2831 = _2822 * _2822;
                                float _2835 = (fma(_2037, _2713.z, fma(_2036, _2713.y, _2713.x * _2035)) + _2713.w) / _2776;
                                float _2836 = (fma(_2037, _2729.z, fma(_2036, _2729.y, _2729.x * _2035)) + _2729.w) / _2776;
                                float _2840 = 1.0 - dot(vec2(_2835, _2836), vec2(_2835, _2836));
                                float _3797 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
                                float _2841 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
                                float _2842 = _2841 * (((isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0))) * _2818) / ((_2831 * 0.699999988079071044921875) + 1.0));
                                float _2852 = dot(vec3(_439, _442, _445), vec3((-0.0) - (_2035 * _2333), (-0.0) - (_2036 * _2333), (-0.0) - (_2037 * _2333)));
                                float _3808 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0));
                                float _2860 = (_2826 * dot(vec3(_439, _442, _445), vec3(_2811, _2812, _2813))) + _2825;
                                float _3819 = isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0));
                                float _2861 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
                                float _2865 = (0.5 / (((isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0))) + 9.9999999392252902907785028219223e-09) + _2861)) * _2861;
                                float _3830 = isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0));
                                float _2872 = (_2841 * _2818) * (((isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0))) * 3.1415927410125732421875) / ((_2831 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_85_pred = _2842 * _2685.z;
                                frontier_phi_85_pred_1 = _2842 * _2685.y;
                                frontier_phi_85_pred_2 = _2842 * _2685.x;
                                frontier_phi_85_pred_3 = _2872 * _2697.z;
                                frontier_phi_85_pred_4 = _2872 * _2697.y;
                                frontier_phi_85_pred_5 = _2872 * _2697.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _2881 = frontier_phi_85_pred;
                            _2880 = frontier_phi_85_pred_1;
                            _2879 = frontier_phi_85_pred_2;
                            _2878 = frontier_phi_85_pred_3;
                            _2877 = frontier_phi_85_pred_4;
                            _2876 = frontier_phi_85_pred_5;
                            _2627 = _2879 + _2640;
                            _2628 = _2880 + _2641;
                            _2629 = _2881 + _2642;
                            _2624 = _2876 + _2637;
                            _2625 = _2877 + _2638;
                            _2626 = _2878 + _2639;
                            if (_2644 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2637 = _2624;
                                _2638 = _2625;
                                _2639 = _2626;
                                _2640 = _2627;
                                _2641 = _2628;
                                _2642 = _2629;
                                _2643 = _2644;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2629;
                        frontier_phi_79_pred_1 = _2628;
                        frontier_phi_79_pred_2 = _2627;
                        frontier_phi_79_pred_3 = _2626;
                        frontier_phi_79_pred_4 = _2625;
                        frontier_phi_79_pred_5 = _2624;
                    }
                    _2319 = frontier_phi_79_pred;
                    _2317 = frontier_phi_79_pred_1;
                    _2315 = frontier_phi_79_pred_2;
                    _2313 = frontier_phi_79_pred_3;
                    _2311 = frontier_phi_79_pred_4;
                    _2309 = frontier_phi_79_pred_5;
                    uint _2472 = _2471 + 1u;
                    if (_2472 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2465 = _2309;
                        _2466 = _2311;
                        _2467 = _2313;
                        _2468 = _2315;
                        _2469 = _2317;
                        _2470 = _2319;
                        _2471 = _2472;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2315;
                frontier_phi_60_61_ladder_1 = _2319;
                frontier_phi_60_61_ladder_2 = _2317;
                frontier_phi_60_61_ladder_3 = _2313;
                frontier_phi_60_61_ladder_4 = _2311;
                frontier_phi_60_61_ladder_5 = _2309;
            }
            else
            {
                frontier_phi_60_61_ladder = _2192;
                frontier_phi_60_61_ladder_1 = _2196;
                frontier_phi_60_61_ladder_2 = _2194;
                frontier_phi_60_61_ladder_3 = _2190;
                frontier_phi_60_61_ladder_4 = _2188;
                frontier_phi_60_61_ladder_5 = _2186;
            }
            _2308 = frontier_phi_60_61_ladder_5;
            _2310 = frontier_phi_60_61_ladder_4;
            _2312 = frontier_phi_60_61_ladder_3;
            _2314 = frontier_phi_60_61_ladder;
            _2316 = frontier_phi_60_61_ladder_2;
            _2318 = frontier_phi_60_61_ladder_1;
        }
        float _2323 = isnan(1.0) ? _484 : (isnan(_484) ? 1.0 : min(_484, 1.0));
        _2093 = (_2323 * _2314) + _1657;
        _2095 = (_2323 * _2316) + _1659;
        _2097 = (_2323 * _2318) + _1661;
        _2099 = ((_2308 * 0.039999999105930328369140625) * _2323) + _1906;
        _2101 = ((_2310 * 0.039999999105930328369140625) * _2323) + _1908;
        _2103 = ((_2312 * 0.039999999105930328369140625) * _2323) + _1910;
    }
    else
    {
        _2093 = _1657;
        _2095 = _1659;
        _2097 = _1661;
        _2099 = _1906;
        _2101 = _1908;
        _2103 = _1910;
    }
    float _3846 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _3857 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _3868 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _3879 = isnan(0.0) ? _327 : (isnan(_327) ? 0.0 : max(_327, 0.0));
    float _2121 = ((isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0))) * (_2093 + ((isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0))) * _484))) + ((_2099 + ((isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0))) * _1293)) * cbPerFrame._m0[3u].x);
    float _2122 = ((isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0))) * (_2095 + ((isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0))) * _484))) + ((_2101 + ((isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0))) * _1293)) * cbPerFrame._m0[3u].x);
    float _2123 = ((isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0))) * (_2097 + ((isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0))) * _484))) + ((_2103 + ((isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0))) * _1293)) * cbPerFrame._m0[3u].x);
    float _2124 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
    float _2125 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
    float _2126 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
    float _2131 = cbInstanceData._m0[_458 + 6u].w * (isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0)));
    float _2136 = _418 / cbSceneParam._m0[86u].x;
    float _2137 = _419 / cbSceneParam._m0[86u].y;
    vec4 _2151 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2136, _2137, (log2((isnan(cbSceneParam._m0[77u].w) ? _344 : (isnan(_344) ? cbSceneParam._m0[77u].w : min(_344, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2153 = _2151.x;
    float _2154 = _2151.y;
    float _2155 = _2151.z;
    float _2156 = _2151.w;
    float _2248;
    float _2250;
    float _2252;
    float _2254;
    if (_344 > cbSceneParam._m0[78u].w)
    {
        float _2211 = isnan(_344) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _344 : min(cbSceneParam._m0[80u].w, _344));
        float _2212 = _2211 / _344;
        float _2223 = _2212 * _395;
        float _2224 = _396 * _2212;
        float _2225 = (-0.0) - _2224;
        float _2226 = _2212 * _397;
        float _2228 = (cbSceneParam._m0[77u].w * _2225) / _2211;
        float _2229 = _2228 + cbSceneParam._m0[79u].w;
        float _2230 = cbSceneParam._m0[79u].w - _2224;
        float _2236 = sqrt(((_2223 * _2223) + (_2224 * _2224)) + (_2226 * _2226));
        float _2239 = (1.0 - (cbSceneParam._m0[77u].w / _2211)) * _2236;
        float _2244 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2246 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2422;
        if (abs((_2225 - _2228) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2422 = ((((_2229 > 0.0) ? exp2(_2244 * _2229) : (2.0 - exp2(_2246 * _2229))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2239;
        }
        else
        {
            float _2366 = 1.0 / cbSceneParam._m0[80u].x;
            float _2367 = isnan(_2230) ? _2229 : (isnan(_2229) ? _2230 : max(_2229, _2230));
            float _2368 = isnan(_2230) ? _2229 : (isnan(_2229) ? _2230 : min(_2229, _2230));
            float _2377 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : min(_2367, 0.0));
            float _2378 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : min(_2368, 0.0));
            _2422 = ((abs(_2236 / _2225) * cbSceneParam._m0[80u].y) * ((((_2377 - _2378) * 2.0) - ((exp2(_2244 * (isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0)))) - exp2(_2244 * (isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0))))) * _2366)) - ((exp2(_2246 * _2377) - exp2(_2246 * _2378)) * _2366))) + (_2239 * cbSceneParam._m0[80u].z);
        }
        vec4 _2424 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2136, _2137, 1.0), 0.0);
        float _2433 = exp2((_2422 * (-1.44269502162933349609375)) * (1.0 - _2424.w));
        float _2434 = log2(_2433);
        float _2450 = log2(_2156);
        _2248 = (exp2(_2450 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2434 * cbSceneParam._m0[78u].x)) * _2424.x) / cbSceneParam._m0[78u].x)) + _2153;
        _2250 = (exp2(_2450 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2434 * cbSceneParam._m0[78u].y)) * _2424.y) / cbSceneParam._m0[78u].y)) + _2154;
        _2252 = (exp2(_2450 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2434 * cbSceneParam._m0[78u].z)) * _2424.z) / cbSceneParam._m0[78u].z)) + _2155;
        _2254 = _2433 * _2156;
    }
    else
    {
        _2248 = _2153;
        _2250 = _2154;
        _2252 = _2155;
        _2254 = _2156;
    }
    bool _2460;
    vec4 _2264;
    vec4 _2287;
    float _2289;
    float _2293;
    float _2294;
    float _2295;
    float _2296;
    bool _2307;
    for (;;)
    {
        _2264 = cbMatDynParam._m0[0u];
        float _2266 = roundEven(_2264.y);
        bool _2267 = _2266 == 3.0;
        float _2269 = log2(_2254);
        float _2276 = exp2(_2269 * cbSceneParam._m0[78u].x) * _2124;
        float _2277 = exp2(_2269 * cbSceneParam._m0[78u].y) * _2125;
        float _2278 = exp2(_2269 * cbSceneParam._m0[78u].z) * _2126;
        float _2285 = _407 + (-0.5);
        _2287 = cbMtdParam._m0[1u];
        _2289 = _2287.y * _2285;
        float _2292 = (_2266 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2293 = _2292 * (_2267 ? _2276 : (_2276 + (cbSceneParam._m0[72u].w * _2248)));
        _2294 = _2292 * (_2267 ? _2277 : (_2277 + (cbSceneParam._m0[72u].w * _2250)));
        _2295 = _2292 * (_2267 ? _2278 : (_2278 + (cbSceneParam._m0[72u].w * _2252)));
        _2296 = _2285 * 0.999000012874603271484375;
        _2307 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2307)
        {
            if ((cbInstanceData._m0[_458 + 7u].x + _2296) < 0.5)
            {
                _2460 = true;
                break;
            }
        }
        uint _2401 = _460 + uint(_2264.w);
        if ((cbInstanceData._m0[_2401].w < 1.0) && ((cbInstanceData._m0[_2401].w + _2296) < 0.5))
        {
            _2460 = true;
            break;
        }
        if ((_2289 + _319) < _2287.x)
        {
            _2460 = true;
            break;
        }
        _2460 = false;
        break;
    }
    float _2615;
    if (_2460)
    {
        discard_state = true;
        _2615 = 0.0;
    }
    else
    {
        _2615 = _2131;
    }
    SV_Target.x = _2293;
    SV_Target.y = _2294;
    SV_Target.z = _2295;
    SV_Target.w = _2615;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2131;
    discard_exit();
}


