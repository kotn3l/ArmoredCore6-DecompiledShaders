#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_A_Alpha_FlipBookSmooth_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _798;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _170 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _171 = _170 * NORMAL.x;
    float _172 = _170 * NORMAL.y;
    float _173 = _170 * NORMAL.z;
    float _178;
    float _179;
    float _180;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _178 = (-0.0) - _171;
        _179 = (-0.0) - _172;
        _180 = (-0.0) - _173;
    }
    else
    {
        _178 = _171;
        _179 = _172;
        _180 = _173;
    }
    uint _197 = uint(int(floor(cbMtdParam._m0[10u].y)));
    float _198 = fract(cbMtdParam._m0[10u].y);
    uint _199 = _197 + 1u;
    uint _200 = uint(int(cbMtdParam._m0[10u].w * cbMtdParam._m0[10u].z));
    float _203 = float(int(_197 - _200 * (_197 / _200)));
    float _207 = float(int(_199 - _200 * (_199 / _200)));
    float _211 = 1.0 / cbMtdParam._m0[10u].z;
    float _213 = 1.0 / cbMtdParam._m0[10u].w;
    float _214 = fract(TEXCOORD_1.x);
    float _215 = fract(TEXCOORD_1.y);
    vec4 _236 = texture(sampler2D(S_A_Alpha_FlipBookSmooth_snp_0_Texture2D_0, SS_DiffuseMap), vec2((((_214 + (_207 - cbMtdParam._m0[10u].z * trunc(_207 / cbMtdParam._m0[10u].z))) * _211) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_215 + floor(_207 / cbMtdParam._m0[10u].z)) * _213) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _247 = texture(sampler2D(S_A_Alpha_FlipBookSmooth_snp_0_Texture2D_0, SS_DiffuseMap), vec2((((_214 + (_203 - cbMtdParam._m0[10u].z * trunc(_203 / cbMtdParam._m0[10u].z))) * _211) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_215 + floor(_203 / cbMtdParam._m0[10u].z)) * _213) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _249 = _247.x;
    float _250 = _247.y;
    float _251 = _247.z;
    float _252 = _247.w;
    float _265 = (((_236.x - _249) * _198) + _249) * cbMtdParam._m0[9u].x;
    float _266 = (((_236.y - _250) * _198) + _250) * cbMtdParam._m0[9u].y;
    float _267 = (((_236.z - _251) * _198) + _251) * cbMtdParam._m0[9u].z;
    vec4 _277 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _279 = _277.x;
    bool _286 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _302 = ((_286 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _279)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _279))) - POSITION_1.w) / cbMtdParam._m0[10u].x;
    float _3197 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _306 = ((cbMtdParam._m0[9u].w * TEXCOORD_1.z) * (((_236.w - _252) * _198) + _252)) * (isnan(1.0) ? _3197 : (isnan(_3197) ? 1.0 : min(_3197, 1.0)));
    float _310 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _311 = _310 * _178;
    float _312 = _310 * _179;
    float _313 = _310 * _180;
    float _3208 = isnan(0.0) ? _306 : (isnan(_306) ? 0.0 : max(_306, 0.0));
    float _314 = isnan(1.0) ? _3208 : (isnan(_3208) ? 1.0 : min(_3208, 1.0));
    float _3219 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _3230 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _3241 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _322 = _286 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _363 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _373 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _363);
    float _374 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _363);
    float _375 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _363);
    float _379 = inversesqrt(dot(vec3(_373, _374, _375), vec3(_373, _374, _375)));
    float _380 = _373 * _379;
    float _381 = _374 * _379;
    float _382 = _375 * _379;
    float _387 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _388 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _409 = fma(_313, cbSceneParam._m0[5u].z, fma(_312, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _311));
    float _412 = fma(_313, cbSceneParam._m0[6u].z, fma(_312, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _311));
    float _415 = fma(_313, cbSceneParam._m0[7u].z, fma(_312, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _311));
    uint _428 = uint(roundEven(NORMAL.w)) * 13u;
    uint _431 = (_428 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _437 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3219 : (isnan(_3219) ? 1.0 : min(_3219, 1.0)))) * cbInstanceData._m0[_431].x;
    float _438 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3230 : (isnan(_3230) ? 1.0 : min(_3230, 1.0)))) * cbInstanceData._m0[_431].y;
    float _439 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3241 : (isnan(_3241) ? 1.0 : min(_3241, 1.0)))) * cbInstanceData._m0[_431].z;
    float _3252 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _440 = isnan(1.0) ? _3252 : (isnan(_3252) ? 1.0 : min(_3252, 1.0));
    float _3263 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _441 = isnan(1.0) ? _3263 : (isnan(_3263) ? 1.0 : min(_3263, 1.0));
    float _3274 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _442 = isnan(1.0) ? _3274 : (isnan(_3274) ? 1.0 : min(_3274, 1.0));
    vec4 _451 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _387, cbSceneParam._m0[86u].y * _388));
    float _454 = _451.x * TEXCOORD_1.w;
    float _455 = dot(vec3(_311, _312, _313), vec3(_380, _381, _382));
    float _458 = _455 * 2.0;
    float _463 = (_458 * _311) - _380;
    float _464 = (_458 * _312) - _381;
    float _465 = (_458 * _313) - _382;
    float _487 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _491 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _495 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _797;
    float _799;
    float _800;
    float _801;
    float _802;
    float _803;
    float _804;
    float _805;
    float _806;
    float _807;
    float _808;
    float _809;
    float _810;
    float _811;
    float _812;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _522 = fma(_495, cbModelParam._m0[26u].z, fma(_491, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _487));
        float _526 = fma(_495, cbModelParam._m0[27u].z, fma(_491, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _487));
        float _530 = fma(_495, cbModelParam._m0[28u].z, fma(_491, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _487));
        float _555 = _487 + _311;
        float _556 = _491 + _312;
        float _557 = _495 + _313;
        float _567 = fma(_557, cbModelParam._m0[26u].z, fma(_556, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _555)) - _522;
        float _568 = fma(_557, cbModelParam._m0[27u].z, fma(_556, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _555)) - _526;
        float _569 = fma(_557, cbModelParam._m0[28u].z, fma(_556, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _555)) - _530;
        float _573 = inversesqrt(dot(vec3(_567, _568, _569), vec3(_567, _568, _569)));
        float _586 = ((_573 * _567) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_522 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _587 = ((_573 * _568) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_526 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _588 = ((_573 * _569) / cbModelParam._m0[34u].z) + ((((((_530 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _591 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_586, _587, _588), 0.0);
        vec4 _598 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_586, _587, _588), 0.0);
        vec4 _605 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_586, _587, _588), 0.0);
        vec4 _612 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_586, _587, _588), 0.0);
        float _625 = exp2((_591.w + (-0.5)) * 20.0) * 2.0;
        float _626 = _625 * (_591.x + (-0.5));
        float _627 = _625 * (_591.y + (-0.5));
        float _628 = _625 * (_591.z + (-0.5));
        float _635 = exp2((_598.w + (-0.5)) * 20.0) * 2.0;
        float _636 = _635 * (_598.x + (-0.5));
        float _637 = _635 * (_598.y + (-0.5));
        float _638 = _635 * (_598.z + (-0.5));
        float _645 = exp2((_605.w + (-0.5)) * 20.0) * 2.0;
        float _646 = _645 * (_605.x + (-0.5));
        float _647 = _645 * (_605.y + (-0.5));
        float _648 = _645 * (_605.z + (-0.5));
        float _655 = exp2((_612.w + (-0.5)) * 20.0) * 2.0;
        float _656 = _655 * (_612.x + (-0.5));
        float _657 = _655 * (_612.y + (-0.5));
        float _658 = _655 * (_612.z + (-0.5));
        float _659 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
        float _660 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
        float _661 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
        float _662 = _626 * 0.5;
        float _663 = _636 * 0.5;
        float _664 = _646 * 0.5;
        float _665 = dot(vec3(_662, _663, _664), vec3(_662, _663, _664));
        float _670 = (_665 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_665);
        float _679 = (dot(vec3(_311, _312, _313), vec3(_670 * _662, _670 * _663, _670 * _664)) + 1.0) * 0.5;
        float _3300 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
        float _689 = sqrt(((_663 * _663) + (_662 * _662)) + (_664 * _664)) / (_659 + 9.9999997473787516355514526367188e-06);
        float _3311 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
        float _690 = isnan(1.0) ? _3311 : (isnan(_3311) ? 1.0 : min(_3311, 1.0));
        float _691 = _690 * 2.0;
        float _695 = (1.0 - _690) / (_690 + 1.0);
        float _3322 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
        float _696 = isnan(1.0) ? _3322 : (isnan(_3322) ? 1.0 : min(_3322, 1.0));
        float _705 = ((((1.0 - _696) * (_691 + 2.0)) * exp2(log2(isnan(1.0) ? _3300 : (isnan(_3300) ? 1.0 : min(_3300, 1.0))) * (_691 + 1.0))) + _696) * _659;
        float _706 = _627 * 0.5;
        float _707 = _637 * 0.5;
        float _708 = _647 * 0.5;
        float _709 = dot(vec3(_706, _707, _708), vec3(_706, _707, _708));
        float _714 = (_709 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_709);
        float _722 = (dot(vec3(_311, _312, _313), vec3(_714 * _706, _714 * _707, _714 * _708)) + 1.0) * 0.5;
        float _3333 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
        float _731 = sqrt(((_707 * _707) + (_706 * _706)) + (_708 * _708)) / (_660 + 9.9999997473787516355514526367188e-06);
        float _3344 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
        float _732 = isnan(1.0) ? _3344 : (isnan(_3344) ? 1.0 : min(_3344, 1.0));
        float _733 = _732 * 2.0;
        float _737 = (1.0 - _732) / (_732 + 1.0);
        float _3355 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
        float _738 = isnan(1.0) ? _3355 : (isnan(_3355) ? 1.0 : min(_3355, 1.0));
        float _747 = ((((1.0 - _738) * (_733 + 2.0)) * exp2(log2(isnan(1.0) ? _3333 : (isnan(_3333) ? 1.0 : min(_3333, 1.0))) * (_733 + 1.0))) + _738) * _660;
        float _748 = _628 * 0.5;
        float _749 = _638 * 0.5;
        float _750 = _648 * 0.5;
        float _751 = dot(vec3(_748, _749, _750), vec3(_748, _749, _750));
        float _756 = (_751 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_751);
        float _764 = (dot(vec3(_311, _312, _313), vec3(_756 * _748, _756 * _749, _756 * _750)) + 1.0) * 0.5;
        float _3366 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
        float _773 = sqrt(((_749 * _749) + (_748 * _748)) + (_750 * _750)) / (_661 + 9.9999997473787516355514526367188e-06);
        float _3377 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
        float _774 = isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0));
        float _775 = _774 * 2.0;
        float _779 = (1.0 - _774) / (_774 + 1.0);
        float _3388 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
        float _780 = isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0));
        float _789 = ((((1.0 - _780) * (_775 + 2.0)) * exp2(log2(isnan(1.0) ? _3366 : (isnan(_3366) ? 1.0 : min(_3366, 1.0))) * (_775 + 1.0))) + _780) * _661;
        _797 = _628;
        _799 = _627;
        _800 = _626;
        _801 = _638;
        _802 = _637;
        _803 = _636;
        _804 = _648;
        _805 = _647;
        _806 = _646;
        _807 = _661;
        _808 = _660;
        _809 = _659;
        _810 = cbModelParam._m0[36u].z * (isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0)));
        _811 = cbModelParam._m0[36u].z * (isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0)));
        _812 = cbModelParam._m0[36u].z * (isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0)));
    }
    else
    {
        _797 = _798;
        _799 = _798;
        _800 = _798;
        _801 = _798;
        _802 = _798;
        _803 = _798;
        _804 = _798;
        _805 = _798;
        _806 = _798;
        _807 = _798;
        _808 = _798;
        _809 = _798;
        _810 = 0.0;
        _811 = 0.0;
        _812 = 0.0;
    }
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _838 = fma(_495, cbModelParam._m0[30u].z, fma(_491, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _487));
        float _842 = fma(_495, cbModelParam._m0[31u].z, fma(_491, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _487));
        float _846 = fma(_495, cbModelParam._m0[32u].z, fma(_491, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _487));
        float _869 = _487 + _311;
        float _870 = _491 + _312;
        float _871 = _495 + _313;
        float _881 = fma(_871, cbModelParam._m0[30u].z, fma(_870, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _869)) - _838;
        float _882 = fma(_871, cbModelParam._m0[31u].z, fma(_870, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _869)) - _842;
        float _883 = fma(_871, cbModelParam._m0[32u].z, fma(_870, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _869)) - _846;
        float _887 = inversesqrt(dot(vec3(_881, _882, _883), vec3(_881, _882, _883)));
        float _900 = ((_887 * _881) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_838 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _901 = ((_887 * _882) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_842 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _902 = ((_887 * _883) / cbModelParam._m0[35u].z) + ((((((_846 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _904 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_900, _901, _902), 0.0);
        vec4 _911 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_900, _901, _902), 0.0);
        vec4 _918 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_900, _901, _902), 0.0);
        vec4 _925 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_900, _901, _902), 0.0);
        float _937 = exp2((_904.w + (-0.5)) * 20.0) * 2.0;
        float _938 = _937 * (_904.x + (-0.5));
        float _939 = _937 * (_904.y + (-0.5));
        float _940 = _937 * (_904.z + (-0.5));
        float _947 = exp2((_911.w + (-0.5)) * 20.0) * 2.0;
        float _948 = _947 * (_911.x + (-0.5));
        float _949 = _947 * (_911.y + (-0.5));
        float _950 = _947 * (_911.z + (-0.5));
        float _957 = exp2((_918.w + (-0.5)) * 20.0) * 2.0;
        float _958 = _957 * (_918.x + (-0.5));
        float _959 = _957 * (_918.y + (-0.5));
        float _960 = _957 * (_918.z + (-0.5));
        float _967 = exp2((_925.w + (-0.5)) * 20.0) * 2.0;
        float _968 = _967 * (_925.x + (-0.5));
        float _969 = _967 * (_925.y + (-0.5));
        float _970 = _967 * (_925.z + (-0.5));
        float _971 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _972 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _973 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _974 = _938 * 0.5;
        float _975 = _948 * 0.5;
        float _976 = _958 * 0.5;
        float _977 = dot(vec3(_974, _975, _976), vec3(_974, _975, _976));
        float _982 = (_977 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_977);
        float _990 = (dot(vec3(_311, _312, _313), vec3(_982 * _974, _982 * _975, _982 * _976)) + 1.0) * 0.5;
        float _3429 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _999 = sqrt(((_975 * _975) + (_974 * _974)) + (_976 * _976)) / (_971 + 9.9999997473787516355514526367188e-06);
        float _3440 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1000 = isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0));
        float _1001 = _1000 * 2.0;
        float _1005 = (1.0 - _1000) / (_1000 + 1.0);
        float _3451 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1006 = isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0));
        float _1015 = ((((1.0 - _1006) * (_1001 + 2.0)) * exp2(log2(isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0))) * (_1001 + 1.0))) + _1006) * _971;
        float _1016 = _939 * 0.5;
        float _1017 = _949 * 0.5;
        float _1018 = _959 * 0.5;
        float _1019 = dot(vec3(_1016, _1017, _1018), vec3(_1016, _1017, _1018));
        float _1024 = (_1019 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1019);
        float _1032 = (dot(vec3(_311, _312, _313), vec3(_1024 * _1016, _1024 * _1017, _1024 * _1018)) + 1.0) * 0.5;
        float _3462 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1041 = sqrt(((_1017 * _1017) + (_1016 * _1016)) + (_1018 * _1018)) / (_972 + 9.9999997473787516355514526367188e-06);
        float _3473 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1042 = isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0));
        float _1043 = _1042 * 2.0;
        float _1047 = (1.0 - _1042) / (_1042 + 1.0);
        float _3484 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1048 = isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0));
        float _1057 = ((((1.0 - _1048) * (_1043 + 2.0)) * exp2(log2(isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0))) * (_1043 + 1.0))) + _1048) * _972;
        float _1058 = _940 * 0.5;
        float _1059 = _950 * 0.5;
        float _1060 = _960 * 0.5;
        float _1061 = dot(vec3(_1058, _1059, _1060), vec3(_1058, _1059, _1060));
        float _1066 = (_1061 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1061);
        float _1074 = (dot(vec3(_311, _312, _313), vec3(_1066 * _1058, _1066 * _1059, _1066 * _1060)) + 1.0) * 0.5;
        float _3495 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1083 = sqrt(((_1059 * _1059) + (_1058 * _1058)) + (_1060 * _1060)) / (_973 + 9.9999997473787516355514526367188e-06);
        float _3506 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1084 = isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0));
        float _1085 = _1084 * 2.0;
        float _1089 = (1.0 - _1084) / (_1084 + 1.0);
        float _3517 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
        float _1099 = ((((1.0 - _1090) * (_1085 + 2.0)) * exp2(log2(isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0))) * (_1085 + 1.0))) + _1090) * _973;
        _1107 = _940;
        _1108 = _939;
        _1109 = _938;
        _1110 = _950;
        _1111 = _949;
        _1112 = _948;
        _1113 = _960;
        _1114 = _959;
        _1115 = _958;
        _1116 = _973;
        _1117 = _972;
        _1118 = _971;
        _1119 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0)));
        _1120 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0)));
        _1121 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0)));
    }
    else
    {
        _1107 = _798;
        _1108 = _798;
        _1109 = _798;
        _1110 = _798;
        _1111 = _798;
        _1112 = _798;
        _1113 = _798;
        _1114 = _798;
        _1115 = _798;
        _1116 = _798;
        _1117 = _798;
        _1118 = _798;
        _1119 = 0.0;
        _1120 = 0.0;
        _1121 = 0.0;
    }
    float _1131 = (cbModelParam._m0[1u].x * (_1119 - _810)) + _810;
    float _1132 = (cbModelParam._m0[1u].x * (_1120 - _811)) + _811;
    float _1133 = (cbModelParam._m0[1u].x * (_1121 - _812)) + _812;
    float _1154 = fma(_1133, cbSceneParam._m0[89u].z, fma(_1132, cbSceneParam._m0[89u].y, _1131 * cbSceneParam._m0[89u].x));
    float _1157 = fma(_1133, cbSceneParam._m0[90u].z, fma(_1132, cbSceneParam._m0[90u].y, _1131 * cbSceneParam._m0[90u].x));
    float _1160 = fma(_1133, cbSceneParam._m0[91u].z, fma(_1132, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1131));
    float _1175 = _463 * 0.5;
    float _1176 = _464 * 0.5;
    float _1177 = _465 * 0.5;
    float _1178 = dot(vec4(_1175, _1176, _1177, 1.0), vec4(_1109, _1112, _1115, _1118));
    float _1181 = dot(vec4(_1175, _1176, _1177, 1.0), vec4(_1108, _1111, _1114, _1117));
    float _1184 = dot(vec4(_1175, _1176, _1177, 1.0), vec4(_1107, _1110, _1113, _1116));
    float _1218;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1191 = dot(vec4(_1175, _1176, _1177, 1.0), vec4(_797, _801, _804, _807));
        float _1195 = dot(vec4(_1175, _1176, _1177, 1.0), vec4(_799, _802, _805, _808));
        float _1199 = dot(vec4(_1175, _1176, _1177, 1.0), vec4(_800, _803, _806, _809));
        float _1206 = dot(vec4(cbModelParam._m0[39u]), vec4(_1175, _1176, _1177, 1.0));
        _1218 = dot(vec3(isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0)), isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0)), isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1206) ? 0.0 : (isnan(0.0) ? _1206 : max(0.0, _1206))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1218 = 1.0;
    }
    float _1229;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1220 = dot(vec4(cbModelParam._m0[40u]), vec4(_1175, _1176, _1177, 1.0));
        _1229 = dot(vec3(isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0)), isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0)), isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1220) ? 0.0 : (isnan(0.0) ? _1220 : max(0.0, _1220))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1229 = 1.0;
    }
    float _1233 = (_1229 * cbModelParam._m0[1u].x) + (_1218 * (1.0 - cbModelParam._m0[1u].x));
    float _1242 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1324;
    float _1326;
    float _1328;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1291 = fma(_495, cbModelParam._m0[13u].z, fma(_491, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _487)) + cbModelParam._m0[13u].w;
        float _1295 = fma(_495, cbModelParam._m0[14u].z, fma(_491, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _487)) + cbModelParam._m0[14u].w;
        float _1299 = fma(_495, cbModelParam._m0[15u].z, fma(_491, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _487)) + cbModelParam._m0[15u].w;
        float _1302 = fma(_465, cbModelParam._m0[13u].z, fma(_464, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _463));
        float _1305 = fma(_465, cbModelParam._m0[14u].z, fma(_464, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _463));
        float _1308 = fma(_465, cbModelParam._m0[15u].z, fma(_464, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _463));
        float _1334;
        if (_1302 > 0.0)
        {
            _1334 = abs((1.0 - _1291) / _1302);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1302 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1291 + 1.0) / _1302);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1334 = frontier_phi_16_14_ladder;
        }
        float _1509;
        if (_1305 > 0.0)
        {
            _1509 = abs((1.0 - _1295) / _1305);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1305 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1295 + 1.0) / _1305);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1509 = frontier_phi_25_21_ladder;
        }
        float _1806;
        if (_1308 > 0.0)
        {
            _1806 = abs((1.0 - _1299) / _1308);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1308 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1299 + 1.0) / _1308);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1806 = frontier_phi_37_32_ladder;
        }
        float _1808 = isnan(_1509) ? _1334 : (isnan(_1334) ? _1509 : min(_1334, _1509));
        float _1809 = isnan(_1806) ? _1808 : (isnan(_1808) ? _1806 : min(_1808, _1806));
        float _1813 = (_1809 * _1302) + _1291;
        float _1814 = (_1809 * _1305) + _1295;
        float _1815 = (_1809 * _1308) + _1299;
        float _1816 = _1809 * 9.9999997473787516355514526367188e-05;
        float _1818 = (-1.0) - _1816;
        float _1820 = _1816 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1815 > _1820) || ((_1815 < _1818) || ((_1814 > _1820) || ((_1814 < _1818) || ((_1813 < _1818) || (_1813 > _1820))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1960 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1815, cbModelParam._m0[9u].z, fma(_1814, cbModelParam._m0[9u].y, _1813 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1815, cbModelParam._m0[10u].z, fma(_1814, cbModelParam._m0[10u].y, _1813 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1815, cbModelParam._m0[11u].z, fma(_1814, cbModelParam._m0[11u].y, _1813 * cbModelParam._m0[11u].x))), _1242);
            frontier_phi_15_37_ladder = _1960.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1960.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1960.z * cbModelParam._m0[1u].y;
        }
        _1324 = frontier_phi_15_37_ladder_1;
        _1326 = frontier_phi_15_37_ladder;
        _1328 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1312 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_463, _464, _465), _1242);
        _1324 = _1312.x * cbModelParam._m0[1u].y;
        _1326 = _1312.y * cbModelParam._m0[1u].y;
        _1328 = _1312.z * cbModelParam._m0[1u].y;
    }
    float _1331 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1424;
    float _1426;
    float _1428;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1388 = fma(_495, cbModelParam._m0[21u].z, fma(_491, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _487)) + cbModelParam._m0[21u].w;
        float _1392 = fma(_495, cbModelParam._m0[22u].z, fma(_491, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _487)) + cbModelParam._m0[22u].w;
        float _1396 = fma(_495, cbModelParam._m0[23u].z, fma(_491, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _487)) + cbModelParam._m0[23u].w;
        float _1399 = fma(_465, cbModelParam._m0[21u].z, fma(_464, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _463));
        float _1402 = fma(_465, cbModelParam._m0[22u].z, fma(_464, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _463));
        float _1405 = fma(_465, cbModelParam._m0[23u].z, fma(_464, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _463));
        float _1514;
        if (_1399 > 0.0)
        {
            _1514 = abs((1.0 - _1388) / _1399);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1399 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1388 + 1.0) / _1399);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1514 = frontier_phi_27_23_ladder;
        }
        float _1833;
        if (_1402 > 0.0)
        {
            _1833 = abs((1.0 - _1392) / _1402);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1402 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1392 + 1.0) / _1402);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1833 = frontier_phi_39_34_ladder;
        }
        float _2106;
        if (_1405 > 0.0)
        {
            _2106 = abs((1.0 - _1396) / _1405);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1405 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1396 + 1.0) / _1405);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2106 = frontier_phi_49_46_ladder;
        }
        float _2108 = isnan(_1833) ? _1514 : (isnan(_1514) ? _1833 : min(_1514, _1833));
        float _2109 = isnan(_2106) ? _2108 : (isnan(_2108) ? _2106 : min(_2108, _2106));
        float _2113 = (_2109 * _1399) + _1388;
        float _2114 = (_2109 * _1402) + _1392;
        float _2115 = (_2109 * _1405) + _1396;
        float _2116 = _2109 * 9.9999997473787516355514526367188e-05;
        float _2117 = (-1.0) - _2116;
        float _2119 = _2116 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2115 > _2119) || ((_2115 < _2117) || ((_2114 > _2119) || ((_2114 < _2117) || ((_2113 < _2117) || (_2113 > _2119))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2206 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2115, cbModelParam._m0[17u].z, fma(_2114, cbModelParam._m0[17u].y, _2113 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2115, cbModelParam._m0[18u].z, fma(_2114, cbModelParam._m0[18u].y, _2113 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2115, cbModelParam._m0[19u].z, fma(_2114, cbModelParam._m0[19u].y, _2113 * cbModelParam._m0[19u].x))), _1331);
            frontier_phi_24_49_ladder = _2206.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2206.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2206.x * cbModelParam._m0[1u].z;
        }
        _1424 = frontier_phi_24_49_ladder_2;
        _1426 = frontier_phi_24_49_ladder_1;
        _1428 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1408 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_463, _464, _465), _1331);
        _1424 = _1408.x * cbModelParam._m0[1u].z;
        _1426 = _1408.y * cbModelParam._m0[1u].z;
        _1428 = _1408.z * cbModelParam._m0[1u].z;
    }
    float _1440 = _454 * 0.01200000010430812835693359375;
    float _1442 = _1440 * ((cbModelParam._m0[1u].w * (_1424 - _1324)) + _1324);
    float _1443 = _1440 * ((cbModelParam._m0[1u].w * (_1426 - _1326)) + _1326);
    float _1444 = _1440 * ((cbModelParam._m0[1u].w * (_1428 - _1328)) + _1328);
    float _1447 = fma(_1444, cbSceneParam._m0[89u].z, fma(_1443, cbSceneParam._m0[89u].y, _1442 * cbSceneParam._m0[89u].x));
    float _1450 = fma(_1444, cbSceneParam._m0[90u].z, fma(_1443, cbSceneParam._m0[90u].y, _1442 * cbSceneParam._m0[90u].x));
    float _1453 = fma(_1444, cbSceneParam._m0[91u].z, fma(_1443, cbSceneParam._m0[91u].y, _1442 * cbSceneParam._m0[91u].x));
    float _1488 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1492 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1496 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1500 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1501 = _1488 / _1500;
    float _1502 = _1492 / _1500;
    float _1503 = _1496 / _1500;
    float _1650;
    float _1651;
    float _1652;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1530 = ((uint(_1503 > cbSceneParam._m0[59u].y) + uint(_1503 > cbSceneParam._m0[59u].x)) + uint(_1503 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1531 = _1530 + 43u;
        uint _1539 = _1530 + 44u;
        uint _1547 = _1530 + 45u;
        uint _1555 = _1530 + 46u;
        float _1566 = fma(_1500, cbSceneParam._m0[_1531].w, fma(_1496, cbSceneParam._m0[_1531].z, fma(_1492, cbSceneParam._m0[_1531].y, _1488 * cbSceneParam._m0[_1531].x)));
        float _1570 = fma(_1500, cbSceneParam._m0[_1539].w, fma(_1496, cbSceneParam._m0[_1539].z, fma(_1492, cbSceneParam._m0[_1539].y, _1488 * cbSceneParam._m0[_1539].x)));
        float _1578 = fma(_1500, cbSceneParam._m0[_1555].w, fma(_1496, cbSceneParam._m0[_1555].z, fma(_1492, cbSceneParam._m0[_1555].y, _1488 * cbSceneParam._m0[_1555].x)));
        float _1583 = cbSceneParam._m0[33u].z * _1578;
        float _1585 = cbSceneParam._m0[33u].w * _1578;
        float _1588 = fma(_1500, cbSceneParam._m0[_1547].w, fma(_1496, cbSceneParam._m0[_1547].z, fma(_1492, cbSceneParam._m0[_1547].y, _1488 * cbSceneParam._m0[_1547].x))) / _1578;
        float _1636 = (cbSceneParam._m0[33u].x - sqrt(((_1502 * _1502) + (_1501 * _1501)) + (_1503 * _1503))) * cbSceneParam._m0[33u].y;
        float _3643 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1643 = (isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1583 + _1566) / _1578, (_1585 + _1570) / _1578), _1588), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1585 + _1566) / _1578, (_1570 - _1583) / _1578), _1588), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1566 - _1583) / _1578, (_1570 - _1585) / _1578), _1588), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1566 - _1585) / _1578, (_1583 + _1570) / _1578), _1588), 0.0)).x), vec4(0.25)));
        _1650 = 1.0 - (_1643 * cbSceneParam._m0[34u].x);
        _1651 = 1.0 - (_1643 * cbSceneParam._m0[34u].y);
        _1652 = 1.0 - (_1643 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1650 = 1.0;
        _1651 = 1.0;
        _1652 = 1.0;
    }
    float _1716;
    float _1718;
    float _1720;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1704 = fma(_1500, cbSceneParam._m0[63u].w, fma(_1496, cbSceneParam._m0[63u].z, fma(_1492, cbSceneParam._m0[63u].y, _1488 * cbSceneParam._m0[63u].x)));
        float _1705 = fma(_1500, cbSceneParam._m0[60u].w, fma(_1496, cbSceneParam._m0[60u].z, fma(_1492, cbSceneParam._m0[60u].y, _1488 * cbSceneParam._m0[60u].x))) / _1704;
        float _1706 = fma(_1500, cbSceneParam._m0[61u].w, fma(_1496, cbSceneParam._m0[61u].z, fma(_1492, cbSceneParam._m0[61u].y, _1488 * cbSceneParam._m0[61u].x))) / _1704;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1705 >= cbSceneParam._m0[64u].x) && (_1706 >= cbSceneParam._m0[64u].y)) && (_1705 <= cbSceneParam._m0[64u].z)) && (_1706 <= cbSceneParam._m0[64u].w))
        {
            float _1846 = fma(_1500, cbSceneParam._m0[62u].w, fma(_1496, cbSceneParam._m0[62u].z, fma(_1492, cbSceneParam._m0[62u].y, _1488 * cbSceneParam._m0[62u].x))) / _1704;
            float _1850 = isnan(cbSceneParam._m0[41u].w) ? _1846 : (isnan(_1846) ? cbSceneParam._m0[41u].w : max(_1846, cbSceneParam._m0[41u].w));
            float _1893 = (cbSceneParam._m0[33u].x - sqrt(((_1502 * _1502) + (_1501 * _1501)) + (_1503 * _1503))) * cbSceneParam._m0[33u].y;
            float _3659 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
            float _1900 = (isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1705, cbSceneParam._m0[33u].w + _1706), _1850), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1705, _1706 - cbSceneParam._m0[33u].z), _1850), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1705 - cbSceneParam._m0[33u].z, _1706 - cbSceneParam._m0[33u].w), _1850), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1705 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1706), _1850), 0.0)).x), vec4(0.25)));
            float _1904 = 1.0 - (_1900 * cbSceneParam._m0[34u].x);
            float _1905 = 1.0 - (_1900 * cbSceneParam._m0[34u].y);
            float _1906 = 1.0 - (_1900 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_1905) ? _1651 : (isnan(_1651) ? _1905 : min(_1651, _1905));
            frontier_phi_36_35_ladder_1 = isnan(_1906) ? _1652 : (isnan(_1652) ? _1906 : min(_1652, _1906));
            frontier_phi_36_35_ladder_2 = isnan(_1904) ? _1650 : (isnan(_1650) ? _1904 : min(_1650, _1904));
        }
        else
        {
            frontier_phi_36_35_ladder = _1651;
            frontier_phi_36_35_ladder_1 = _1652;
            frontier_phi_36_35_ladder_2 = _1650;
        }
        _1716 = frontier_phi_36_35_ladder_2;
        _1718 = frontier_phi_36_35_ladder;
        _1720 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1716 = _1650;
        _1718 = _1651;
        _1720 = _1652;
    }
    uvec4 _1725 = floatBitsToUint(cbInstanceData._m0[_428 + 5u]);
    uint _1727 = _1725.x * 14u;
    uint _1728 = _1727 + 13u;
    float _1735 = _454 + (-1.0);
    float _1741 = (cbLight._m0[_1728].x * _1735) + 1.0;
    float _1742 = (cbLight._m0[_1728].y * _1735) + 1.0;
    float _1743 = (cbLight._m0[_1728].z * _1735) + 1.0;
    float _1744 = (cbLight._m0[_1728].w * _1735) + 1.0;
    uint _1745 = _1727 + 5u;
    float _1751 = isnan(1.0) ? _1742 : (isnan(_1742) ? 1.0 : min(_1742, 1.0));
    uint _1755 = _1727 + 4u;
    float _1765 = isnan(1.0) ? _1741 : (isnan(_1741) ? 1.0 : min(_1741, 1.0));
    uint _1769 = _1727 | 1u;
    float _1780 = dot(vec3(cbLight._m0[_1727].xyz), vec3(_311, _312, _313));
    float _1783 = dot(vec3(cbLight._m0[_1769].xyz), vec3(_311, _312, _313));
    float _3695 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
    float _3706 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
    float _1788 = (isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0))) * 0.3183098733425140380859375;
    float _1790 = (isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0))) * 0.3183098733425140380859375;
    float _1797 = ((cbLight._m0[_1745].x * _1751) * _1790) + (((cbLight._m0[_1755].x * _1716) * _1765) * _1788);
    float _1798 = ((_1751 * cbLight._m0[_1745].y) * _1790) + (((cbLight._m0[_1755].y * _1718) * _1765) * _1788);
    float _1799 = ((_1751 * cbLight._m0[_1745].z) * _1790) + (((cbLight._m0[_1755].z * _1720) * _1765) * _1788);
    uvec4 _1803 = floatBitsToUint(cbLight._m0[_1727 + 12u]);
    bool _1805 = _1803.x == 0u;
    float _1907;
    float _1909;
    float _1911;
    if (_1805)
    {
        _1907 = _1797;
        _1909 = _1798;
        _1911 = _1799;
    }
    else
    {
        uint _1915 = _1727 + 6u;
        float _1931 = (dot(vec3(cbLight._m0[_1727 + 2u].xyz), vec3(_311, _312, _313)) * 0.5) + 0.5;
        float _1932 = _1931 * _1931;
        float _3717 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
        float _1933 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
        float _1934 = isnan(1.0) ? _1743 : (isnan(_1743) ? 1.0 : min(_1743, 1.0));
        _1907 = (((cbLight._m0[_1915].x * 0.3183098733425140380859375) * _1933) * _1934) + _1797;
        _1909 = (((cbLight._m0[_1915].y * 0.3183098733425140380859375) * _1933) * _1934) + _1798;
        _1911 = (((cbLight._m0[_1915].z * 0.3183098733425140380859375) * _1933) * _1934) + _1799;
    }
    bool _1914 = _1803.y == 0u;
    float _1969;
    float _1971;
    float _1973;
    if (_1914)
    {
        _1969 = _1907;
        _1971 = _1909;
        _1973 = _1911;
    }
    else
    {
        uint _2077 = _1727 + 7u;
        float _2093 = (dot(vec3(cbLight._m0[_1727 + 3u].xyz), vec3(_311, _312, _313)) * 0.5) + 0.5;
        float _2094 = _2093 * _2093;
        float _3733 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
        float _2095 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
        float _2096 = isnan(1.0) ? _1744 : (isnan(_1744) ? 1.0 : min(_1744, 1.0));
        _1969 = (((cbLight._m0[_2077].x * 0.3183098733425140380859375) * _2095) * _2096) + _1907;
        _1971 = (((cbLight._m0[_2077].y * 0.3183098733425140380859375) * _2095) * _2096) + _1909;
        _1973 = (((cbLight._m0[_2077].z * 0.3183098733425140380859375) * _2095) * _2096) + _1911;
    }
    uint _1975 = _1727 + 8u;
    float _1981 = cbLight._m0[_1727].x + _380;
    float _1982 = cbLight._m0[_1727].y + _381;
    float _1983 = cbLight._m0[_1727].z + _382;
    float _1987 = inversesqrt(dot(vec3(_1981, _1982, _1983), vec3(_1981, _1982, _1983)));
    float _1991 = dot(vec3(_311, _312, _313), vec3(cbLight._m0[_1727].xyz));
    float _3749 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
    float _1994 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
    float _3760 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _1995 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
    float _1996 = dot(vec3(cbLight._m0[_1727].xyz), vec3(_1981 * _1987, _1982 * _1987, _1983 * _1987));
    float _3771 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
    float _2007 = (exp2(log2(1.0 - (isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2013 = (0.5 / ((_1994 + 9.9999999392252902907785028219223e-09) + _1995)) * _1994;
    float _3782 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
    float _2015 = (isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0))) * 0.31831014156341552734375;
    uint _2029 = _1727 + 9u;
    float _2035 = cbLight._m0[_1769].x + _380;
    float _2036 = cbLight._m0[_1769].y + _381;
    float _2037 = cbLight._m0[_1769].z + _382;
    float _2041 = inversesqrt(dot(vec3(_2035, _2036, _2037), vec3(_2035, _2036, _2037)));
    float _2045 = dot(vec3(_311, _312, _313), vec3(cbLight._m0[_1769].xyz));
    float _3793 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
    float _2048 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
    float _2049 = dot(vec3(cbLight._m0[_1769].xyz), vec3(_2035 * _2041, _2036 * _2041, _2037 * _2041));
    float _3804 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
    float _2058 = (exp2(log2(1.0 - (isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2062 = (0.5 / ((_2048 + 9.9999999392252902907785028219223e-09) + _1995)) * _2048;
    float _3815 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
    float _2064 = (isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0))) * 0.31831014156341552734375;
    float _2074 = (((_2058 * cbLight._m0[_2029].x) * _2064) * _1751) + ((((cbLight._m0[_1975].x * _1716) * _2007) * _2015) * _1765);
    float _2075 = (((_2058 * cbLight._m0[_2029].y) * _2064) * _1751) + ((((cbLight._m0[_1975].y * _1718) * _2007) * _2015) * _1765);
    float _2076 = (((_2058 * cbLight._m0[_2029].z) * _2064) * _1751) + ((((cbLight._m0[_1975].z * _1720) * _2007) * _2015) * _1765);
    float _2132;
    float _2134;
    float _2136;
    if (_1805)
    {
        _2132 = _2074;
        _2134 = _2075;
        _2136 = _2076;
    }
    else
    {
        uint _2138 = _1727 + 10u;
        uint _2144 = _1727 + 2u;
        float _2150 = cbLight._m0[_2144].x + _380;
        float _2151 = cbLight._m0[_2144].y + _381;
        float _2152 = cbLight._m0[_2144].z + _382;
        float _2156 = inversesqrt(dot(vec3(_2150, _2151, _2152), vec3(_2150, _2151, _2152)));
        float _2160 = dot(vec3(_311, _312, _313), vec3(cbLight._m0[_2144].xyz));
        float _3826 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
        float _2163 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
        float _2164 = dot(vec3(cbLight._m0[_2144].xyz), vec3(_2150 * _2156, _2151 * _2156, _2152 * _2156));
        float _3837 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
        float _2173 = (exp2(log2(1.0 - (isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2177 = (0.5 / ((_2163 + 9.9999999392252902907785028219223e-09) + _1995)) * _2163;
        float _3848 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
        float _2179 = (isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0))) * 0.31831014156341552734375;
        float _2180 = isnan(1.0) ? _1743 : (isnan(_1743) ? 1.0 : min(_1743, 1.0));
        _2132 = (((_2173 * cbLight._m0[_2138].x) * _2179) * _2180) + _2074;
        _2134 = (((_2173 * cbLight._m0[_2138].y) * _2179) * _2180) + _2075;
        _2136 = (((_2173 * cbLight._m0[_2138].z) * _2179) * _2180) + _2076;
    }
    float _2211;
    float _2213;
    float _2215;
    if (_1914)
    {
        _2211 = _2132;
        _2213 = _2134;
        _2215 = _2136;
    }
    else
    {
        uint _2222 = _1727 + 11u;
        uint _2228 = _1727 + 3u;
        float _2234 = cbLight._m0[_2228].x + _380;
        float _2235 = cbLight._m0[_2228].y + _381;
        float _2236 = cbLight._m0[_2228].z + _382;
        float _2240 = inversesqrt(dot(vec3(_2234, _2235, _2236), vec3(_2234, _2235, _2236)));
        float _2244 = dot(vec3(_311, _312, _313), vec3(cbLight._m0[_2228].xyz));
        float _3864 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
        float _2247 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _2248 = dot(vec3(cbLight._m0[_2228].xyz), vec3(_2234 * _2240, _2235 * _2240, _2236 * _2240));
        float _3875 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
        float _2257 = (exp2(log2(1.0 - (isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2261 = (0.5 / ((_2247 + 9.9999999392252902907785028219223e-09) + _1995)) * _2247;
        float _3886 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
        float _2263 = (isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) * 0.31831014156341552734375;
        float _2264 = isnan(1.0) ? _1744 : (isnan(_1744) ? 1.0 : min(_1744, 1.0));
        _2211 = (((_2257 * cbLight._m0[_2222].x) * _2263) * _2264) + _2132;
        _2213 = (((_2257 * cbLight._m0[_2222].y) * _2263) * _2264) + _2134;
        _2215 = (((_2257 * cbLight._m0[_2222].z) * _2263) * _2264) + _2136;
    }
    float _2329;
    float _2331;
    float _2333;
    float _2335;
    float _2337;
    float _2339;
    if (_1725.y == 0u)
    {
        uvec4 _2285 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2286 = _2285.x;
        uint _2297 = uint((float(_2285.y) * floor(float(uint(cbSceneParam._m0[85u].y * _388) / _2286))) + floor(float(uint(cbSceneParam._m0[85u].x * _387) / _2286)));
        float _2307 = (log2(_1503 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2308 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
        uint _2311 = uint(isnan(14.0) ? _2308 : (isnan(_2308) ? 14.0 : min(_2308, 14.0)));
        uvec4 _2316 = texelFetch(g_lightClusterGridBuffer, int(((_2311 << 2u) + (_2297 << 6u)) >> 2u));
        uint _2317 = _2316.x;
        uint _2318 = _2285.z;
        float _2401;
        float _2403;
        float _2405;
        float _2407;
        float _2409;
        float _2411;
        if (((((1u << ((_2318 >> 4u) & 15u)) + 4294967295u) & _2317) == 0u) || ((_2318 & 240u) == 0u))
        {
            _2401 = 0.0;
            _2403 = 0.0;
            _2405 = 0.0;
            _2407 = 0.0;
            _2409 = 0.0;
            _2411 = 0.0;
        }
        else
        {
            float _2402;
            float _2404;
            float _2406;
            float _2408;
            float _2410;
            float _2412;
            float _2543 = 0.0;
            float _2544 = 0.0;
            float _2545 = 0.0;
            float _2546 = 0.0;
            float _2547 = 0.0;
            float _2548 = 0.0;
            uint _2549 = 0u;
            uint _2558;
            bool _2559;
            for (;;)
            {
                _2558 = texelFetch(g_lightClassification, int((((_2311 << 5u) + (_2297 << 9u)) + (_2549 << 2u)) >> 2u)).x;
                _2559 = _2558 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2559)
                {
                    frontier_phi_68_pred = _2548;
                    frontier_phi_68_pred_1 = _2547;
                    frontier_phi_68_pred_2 = _2546;
                    frontier_phi_68_pred_3 = _2544;
                    frontier_phi_68_pred_4 = _2543;
                    frontier_phi_68_pred_5 = _2545;
                }
                else
                {
                    float _2667;
                    float _2668;
                    float _2669;
                    float _2670;
                    float _2671;
                    float _2672;
                    uint _2673;
                    _2667 = _2543;
                    _2668 = _2544;
                    _2669 = _2545;
                    _2670 = _2546;
                    _2671 = _2547;
                    _2672 = _2548;
                    _2673 = _2558;
                    float _2599;
                    float _2600;
                    float _2601;
                    float _2602;
                    float _2603;
                    float _2604;
                    for (;;)
                    {
                        uint _2677 = uint(findLSB(_2673)) + (_2549 << 5u);
                        uint _2674 = (_2673 + 4294967295u) & _2673;
                        uint _2679 = _2677 * 48u;
                        vec4 _2693 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2679)).x, texelFetch(g_PointLightRenderingBuffer, int(_2679 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2679 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2679 + 3u)).x));
                        uint _2699 = (_2677 * 48u) + 4u;
                        vec4 _2712 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2699)).x, texelFetch(g_PointLightRenderingBuffer, int(_2699 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2699 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2699 + 3u)).x));
                        uint _2718 = (_2677 * 48u) + 8u;
                        vec3 _2729 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2718)).x, texelFetch(g_PointLightRenderingBuffer, int(_2718 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2718 + 2u)).x));
                        float _2733 = _2693.x - _1501;
                        float _2734 = _2693.y - _1502;
                        float _2735 = _2693.z - _1503;
                        float _2736 = dot(vec3(_2733, _2734, _2735), vec3(_2733, _2734, _2735));
                        float _2739 = inversesqrt(_2736);
                        float _2748 = 1.0 - (_2736 * _2693.w);
                        float _3912 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
                        float _2749 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
                        float _2750 = sqrt(_2736) * _2712.w;
                        float _2753 = 1.39999997615814208984375 / (_2750 + 1.39999997615814208984375);
                        float _2754 = _2753 * _2753;
                        float _2757 = ((1.0 - _2754) * dot(vec3(_409, _412, _415), vec3(_2739 * _2733, _2739 * _2734, _2739 * _2735))) + _2754;
                        float _2760 = _2750 * _2750;
                        float _2764 = ((isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0))) * _2749) / ((_2760 * 0.699999988079071044921875) + 1.0);
                        float _2768 = (-0.0) - _1501;
                        float _2769 = (-0.0) - _1502;
                        float _2770 = (-0.0) - _1503;
                        float _2774 = inversesqrt(dot(vec3(_2768, _2769, _2770), vec3(_2768, _2769, _2770)));
                        float _2778 = dot(vec3(_409, _412, _415), vec3(_2774 * _2768, _2774 * _2769, _2774 * _2770));
                        float _3928 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0));
                        float _3939 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0));
                        float _2782 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
                        float _2786 = (0.5 / (((isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0))) + 9.9999999392252902907785028219223e-09) + _2782)) * _2782;
                        float _3950 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
                        float _2795 = (((isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * 3.1415927410125732421875) / ((_2760 * 2.1991131305694580078125) + 3.141590118408203125)) * _2749;
                        _2602 = (_2764 * _2712.x) + _2670;
                        _2603 = (_2764 * _2712.y) + _2671;
                        _2604 = (_2764 * _2712.z) + _2672;
                        _2599 = (_2795 * _2729.x) + _2667;
                        _2600 = (_2795 * _2729.y) + _2668;
                        _2601 = (_2795 * _2729.z) + _2669;
                        if (_2674 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2667 = _2599;
                            _2668 = _2600;
                            _2669 = _2601;
                            _2670 = _2602;
                            _2671 = _2603;
                            _2672 = _2604;
                            _2673 = _2674;
                        }
                    }
                    frontier_phi_68_pred = _2604;
                    frontier_phi_68_pred_1 = _2603;
                    frontier_phi_68_pred_2 = _2602;
                    frontier_phi_68_pred_3 = _2600;
                    frontier_phi_68_pred_4 = _2599;
                    frontier_phi_68_pred_5 = _2601;
                }
                _2412 = frontier_phi_68_pred;
                _2410 = frontier_phi_68_pred_1;
                _2408 = frontier_phi_68_pred_2;
                _2404 = frontier_phi_68_pred_3;
                _2402 = frontier_phi_68_pred_4;
                _2406 = frontier_phi_68_pred_5;
                uint _2550 = _2549 + 1u;
                if (_2550 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2543 = _2402;
                    _2544 = _2404;
                    _2545 = _2406;
                    _2546 = _2408;
                    _2547 = _2410;
                    _2548 = _2412;
                    _2549 = _2550;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2401 = _2402;
            _2403 = _2404;
            _2405 = _2406;
            _2407 = _2408;
            _2409 = _2410;
            _2411 = _2412;
        }
        uvec4 _2415 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2416 = _2415.z;
        uint _2418 = (_2416 >> 8u) & 15u;
        float _2514;
        float _2516;
        float _2518;
        float _2520;
        float _2522;
        float _2524;
        if (((4294967295u << _2418) & _2317) == 0u)
        {
            _2514 = _2401;
            _2516 = _2403;
            _2518 = _2405;
            _2520 = _2407;
            _2522 = _2409;
            _2524 = _2411;
        }
        else
        {
            float _2539 = inversesqrt(dot(vec3(_1501, _1502, _1503), vec3(_1501, _1502, _1503)));
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2418 < ((_2416 >> 12u) & 15u))
            {
                float _2515;
                float _2517;
                float _2519;
                float _2521;
                float _2523;
                float _2525;
                float _2650 = _2401;
                float _2651 = _2403;
                float _2652 = _2405;
                float _2653 = _2407;
                float _2654 = _2409;
                float _2655 = _2411;
                uint _2656 = _2418;
                uint _2665;
                bool _2666;
                for (;;)
                {
                    _2665 = texelFetch(g_lightClassification, int((((_2311 << 5u) + (_2297 << 9u)) + (_2656 << 2u)) >> 2u)).x;
                    _2666 = _2665 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2666)
                    {
                        frontier_phi_74_pred = _2652;
                        frontier_phi_74_pred_1 = _2651;
                        frontier_phi_74_pred_2 = _2650;
                        frontier_phi_74_pred_3 = _2655;
                        frontier_phi_74_pred_4 = _2654;
                        frontier_phi_74_pred_5 = _2653;
                    }
                    else
                    {
                        float _2800;
                        float _2801;
                        float _2802;
                        float _2803;
                        float _2804;
                        float _2805;
                        float _3052;
                        float _3053;
                        float _3054;
                        float _3055;
                        float _3056;
                        float _3057;
                        float _2813 = _2650;
                        float _2814 = _2651;
                        float _2815 = _2652;
                        float _2816 = _2653;
                        float _2817 = _2654;
                        float _2818 = _2655;
                        uint _2819 = _2665;
                        uint _2820;
                        vec4 _2845;
                        float _2846;
                        vec4 _2861;
                        vec3 _2873;
                        vec4 _2889;
                        vec4 _2905;
                        float _2952;
                        bool _2953;
                        for (;;)
                        {
                            uint _2830 = ((_2656 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2819));
                            _2820 = (_2819 + 4294967295u) & _2819;
                            uint _2832 = _2830 * 40u;
                            _2845 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2832)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2832 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2832 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2832 + 3u)).x));
                            _2846 = _2845.w;
                            uint _2848 = (_2830 * 40u) + 4u;
                            _2861 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2848)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2848 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2848 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2848 + 3u)).x));
                            uint _2863 = (_2830 * 40u) + 8u;
                            _2873 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2863)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2863 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2863 + 2u)).x));
                            uint _2876 = (_2830 * 40u) + 16u;
                            _2889 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2876)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2876 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2876 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2876 + 3u)).x));
                            uint _2892 = (_2830 * 40u) + 20u;
                            _2905 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2892)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 3u)).x));
                            uint _2908 = (_2830 * 40u) + 24u;
                            vec4 _2921 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2908)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 3u)).x));
                            uint _2927 = (_2830 * 40u) + 28u;
                            vec4 _2940 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2927)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 3u)).x));
                            _2952 = fma(_1503, _2940.z, fma(_1502, _2940.y, _2940.x * _1501)) + _2940.w;
                            _2953 = !((fma(_1503, _2921.z, fma(_1502, _2921.y, _2921.x * _1501)) + _2921.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_2953)
                            {
                                float _2980 = _2845.x - _1501;
                                float _2981 = _2845.y - _1502;
                                float _2982 = _2845.z - _1503;
                                float _2983 = dot(vec3(_2980, _2981, _2982), vec3(_2980, _2981, _2982));
                                float _2986 = inversesqrt(_2983);
                                float _2987 = _2986 * _2980;
                                float _2988 = _2986 * _2981;
                                float _2989 = _2986 * _2982;
                                float _2993 = 1.0 - (_2983 / (_2846 * _2846));
                                float _3961 = isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0));
                                float _2994 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
                                float _2998 = sqrt(_2983) * _2861.w;
                                float _3000 = 1.39999997615814208984375 / (_2998 + 1.39999997615814208984375);
                                float _3001 = _3000 * _3000;
                                float _3002 = 1.0 - _3001;
                                float _3004 = (_3002 * dot(vec3(_2987, _2988, _2989), vec3(_409, _412, _415))) + _3001;
                                float _3007 = _2998 * _2998;
                                float _3011 = (fma(_1503, _2889.z, fma(_1502, _2889.y, _2889.x * _1501)) + _2889.w) / _2952;
                                float _3012 = (fma(_1503, _2905.z, fma(_1502, _2905.y, _2905.x * _1501)) + _2905.w) / _2952;
                                float _3016 = 1.0 - dot(vec2(_3011, _3012), vec2(_3011, _3012));
                                float _3977 = isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0));
                                float _3017 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
                                float _3018 = _3017 * (((isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0))) * _2994) / ((_3007 * 0.699999988079071044921875) + 1.0));
                                float _3028 = dot(vec3(_409, _412, _415), vec3((-0.0) - (_1501 * _2539), (-0.0) - (_1502 * _2539), (-0.0) - (_1503 * _2539)));
                                float _3988 = isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0));
                                float _3036 = (_3002 * dot(vec3(_409, _412, _415), vec3(_2987, _2988, _2989))) + _3001;
                                float _3999 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0));
                                float _3037 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
                                float _3041 = (0.5 / (((isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))) + 9.9999999392252902907785028219223e-09) + _3037)) * _3037;
                                float _4010 = isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0));
                                float _3048 = (_3017 * _2994) * (((isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))) * 3.1415927410125732421875) / ((_3007 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_80_pred = _3048 * _2873.z;
                                frontier_phi_80_pred_1 = _3048 * _2873.y;
                                frontier_phi_80_pred_2 = _3048 * _2873.x;
                                frontier_phi_80_pred_3 = _3018 * _2861.z;
                                frontier_phi_80_pred_4 = _3018 * _2861.y;
                                frontier_phi_80_pred_5 = _3018 * _2861.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3054 = frontier_phi_80_pred;
                            _3053 = frontier_phi_80_pred_1;
                            _3052 = frontier_phi_80_pred_2;
                            _3057 = frontier_phi_80_pred_3;
                            _3056 = frontier_phi_80_pred_4;
                            _3055 = frontier_phi_80_pred_5;
                            _2803 = _3055 + _2816;
                            _2804 = _3056 + _2817;
                            _2805 = _3057 + _2818;
                            _2800 = _3052 + _2813;
                            _2801 = _3053 + _2814;
                            _2802 = _3054 + _2815;
                            if (_2820 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2813 = _2800;
                                _2814 = _2801;
                                _2815 = _2802;
                                _2816 = _2803;
                                _2817 = _2804;
                                _2818 = _2805;
                                _2819 = _2820;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _2802;
                        frontier_phi_74_pred_1 = _2801;
                        frontier_phi_74_pred_2 = _2800;
                        frontier_phi_74_pred_3 = _2805;
                        frontier_phi_74_pred_4 = _2804;
                        frontier_phi_74_pred_5 = _2803;
                    }
                    _2519 = frontier_phi_74_pred;
                    _2517 = frontier_phi_74_pred_1;
                    _2515 = frontier_phi_74_pred_2;
                    _2525 = frontier_phi_74_pred_3;
                    _2523 = frontier_phi_74_pred_4;
                    _2521 = frontier_phi_74_pred_5;
                    uint _2657 = _2656 + 1u;
                    if (_2657 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2650 = _2515;
                        _2651 = _2517;
                        _2652 = _2519;
                        _2653 = _2521;
                        _2654 = _2523;
                        _2655 = _2525;
                        _2656 = _2657;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2523;
                frontier_phi_62_63_ladder_1 = _2521;
                frontier_phi_62_63_ladder_2 = _2519;
                frontier_phi_62_63_ladder_3 = _2525;
                frontier_phi_62_63_ladder_4 = _2517;
                frontier_phi_62_63_ladder_5 = _2515;
            }
            else
            {
                frontier_phi_62_63_ladder = _2409;
                frontier_phi_62_63_ladder_1 = _2407;
                frontier_phi_62_63_ladder_2 = _2405;
                frontier_phi_62_63_ladder_3 = _2411;
                frontier_phi_62_63_ladder_4 = _2403;
                frontier_phi_62_63_ladder_5 = _2401;
            }
            _2514 = frontier_phi_62_63_ladder_5;
            _2516 = frontier_phi_62_63_ladder_4;
            _2518 = frontier_phi_62_63_ladder_2;
            _2520 = frontier_phi_62_63_ladder_1;
            _2522 = frontier_phi_62_63_ladder;
            _2524 = frontier_phi_62_63_ladder_3;
        }
        float _2529 = isnan(1.0) ? _454 : (isnan(_454) ? 1.0 : min(_454, 1.0));
        _2329 = (_2529 * _2520) + _1969;
        _2331 = (_2529 * _2522) + _1971;
        _2333 = (_2529 * _2524) + _1973;
        _2335 = ((_2514 * 0.039999999105930328369140625) * _2529) + _2211;
        _2337 = ((_2516 * 0.039999999105930328369140625) * _2529) + _2213;
        _2339 = ((_2518 * 0.039999999105930328369140625) * _2529) + _2215;
    }
    else
    {
        _2329 = _1969;
        _2331 = _1971;
        _2333 = _1973;
        _2335 = _2211;
        _2337 = _2213;
        _2339 = _2215;
    }
    float _4026 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _4037 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _4048 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _4059 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _2357 = ((isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0))) * (_2329 + ((isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0))) * _454))) + ((_2335 + ((isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0))) * _1233)) * cbPerFrame._m0[3u].x);
    float _2358 = ((isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))) * (_2331 + ((isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0))) * _454))) + ((_2337 + ((isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0))) * _1233)) * cbPerFrame._m0[3u].x);
    float _2359 = ((isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * (_2333 + ((isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0))) * _454))) + ((_2339 + ((isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0))) * _1233)) * cbPerFrame._m0[3u].x);
    float _2367 = cbInstanceData._m0[_428 + 6u].w * (isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0)));
    float _2372 = _387 / cbSceneParam._m0[86u].x;
    float _2373 = _388 / cbSceneParam._m0[86u].y;
    vec4 _2387 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2372, _2373, (log2((isnan(cbSceneParam._m0[77u].w) ? _322 : (isnan(_322) ? cbSceneParam._m0[77u].w : min(_322, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2389 = _2387.x;
    float _2390 = _2387.y;
    float _2391 = _2387.z;
    float _2392 = _2387.w;
    float _2463;
    float _2465;
    float _2467;
    float _2469;
    if (_322 > cbSceneParam._m0[78u].w)
    {
        float _2426 = isnan(_322) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _322 : min(cbSceneParam._m0[80u].w, _322));
        float _2427 = _2426 / _322;
        float _2438 = _2427 * _373;
        float _2439 = _374 * _2427;
        float _2440 = (-0.0) - _2439;
        float _2441 = _2427 * _375;
        float _2443 = (cbSceneParam._m0[77u].w * _2440) / _2426;
        float _2444 = _2443 + cbSceneParam._m0[79u].w;
        float _2445 = cbSceneParam._m0[79u].w - _2439;
        float _2451 = sqrt(((_2438 * _2438) + (_2439 * _2439)) + (_2441 * _2441));
        float _2454 = (1.0 - (cbSceneParam._m0[77u].w / _2426)) * _2451;
        float _2459 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2461 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2612;
        if (abs((_2440 - _2443) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2612 = ((((_2444 > 0.0) ? exp2(_2459 * _2444) : (2.0 - exp2(_2461 * _2444))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2454;
        }
        else
        {
            float _2572 = 1.0 / cbSceneParam._m0[80u].x;
            float _2573 = isnan(_2445) ? _2444 : (isnan(_2444) ? _2445 : max(_2444, _2445));
            float _2574 = isnan(_2445) ? _2444 : (isnan(_2444) ? _2445 : min(_2444, _2445));
            float _2583 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : min(_2573, 0.0));
            float _2584 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : min(_2574, 0.0));
            _2612 = ((abs(_2451 / _2440) * cbSceneParam._m0[80u].y) * ((((_2583 - _2584) * 2.0) - ((exp2(_2459 * (isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0)))) - exp2(_2459 * (isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0))))) * _2572)) - ((exp2(_2461 * _2583) - exp2(_2461 * _2584)) * _2572))) + (_2454 * cbSceneParam._m0[80u].z);
        }
        vec4 _2614 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2372, _2373, 1.0), 0.0);
        float _2623 = exp2((_2612 * (-1.44269502162933349609375)) * (1.0 - _2614.w));
        float _2624 = log2(_2623);
        float _2640 = log2(_2392);
        _2463 = (exp2(_2640 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2624 * cbSceneParam._m0[78u].x)) * _2614.x) / cbSceneParam._m0[78u].x)) + _2389;
        _2465 = (exp2(_2640 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2624 * cbSceneParam._m0[78u].y)) * _2614.y) / cbSceneParam._m0[78u].y)) + _2390;
        _2467 = (exp2(_2640 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2624 * cbSceneParam._m0[78u].z)) * _2614.z) / cbSceneParam._m0[78u].z)) + _2391;
        _2469 = _2623 * _2392;
    }
    else
    {
        _2463 = _2389;
        _2465 = _2390;
        _2467 = _2391;
        _2469 = _2392;
    }
    float _2481 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2482 = _2481 == 3.0;
    float _2484 = log2(_2469);
    float _2491 = exp2(_2484 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0)));
    float _2492 = exp2(_2484 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0)));
    float _2493 = exp2(_2484 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0)));
    float _2502 = (_2481 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2502 * (_2482 ? _2491 : (_2491 + (cbSceneParam._m0[72u].w * _2463)));
    SV_Target.y = _2502 * (_2482 ? _2492 : (_2492 + (cbSceneParam._m0[72u].w * _2465)));
    SV_Target.z = _2502 * (_2482 ? _2493 : (_2493 + (cbSceneParam._m0[72u].w * _2467)));
    SV_Target.w = _2367;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2367;
}


