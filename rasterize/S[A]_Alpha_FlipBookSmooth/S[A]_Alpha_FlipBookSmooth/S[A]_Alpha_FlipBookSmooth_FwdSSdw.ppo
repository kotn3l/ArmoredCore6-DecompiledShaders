#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_A_Alpha_FlipBookSmooth_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _796;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _168 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _169 = _168 * NORMAL.x;
    float _170 = _168 * NORMAL.y;
    float _171 = _168 * NORMAL.z;
    float _176;
    float _177;
    float _178;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _176 = (-0.0) - _169;
        _177 = (-0.0) - _170;
        _178 = (-0.0) - _171;
    }
    else
    {
        _176 = _169;
        _177 = _170;
        _178 = _171;
    }
    uint _195 = uint(int(floor(cbMtdParam._m0[10u].y)));
    float _196 = fract(cbMtdParam._m0[10u].y);
    uint _197 = _195 + 1u;
    uint _198 = uint(int(cbMtdParam._m0[10u].w * cbMtdParam._m0[10u].z));
    float _201 = float(int(_195 - _198 * (_195 / _198)));
    float _205 = float(int(_197 - _198 * (_197 / _198)));
    float _209 = 1.0 / cbMtdParam._m0[10u].z;
    float _211 = 1.0 / cbMtdParam._m0[10u].w;
    float _212 = fract(TEXCOORD_1.x);
    float _213 = fract(TEXCOORD_1.y);
    vec4 _234 = texture(sampler2D(S_A_Alpha_FlipBookSmooth_snp_0_Texture2D_0, SS_DiffuseMap), vec2((((_212 + (_205 - cbMtdParam._m0[10u].z * trunc(_205 / cbMtdParam._m0[10u].z))) * _209) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_213 + floor(_205 / cbMtdParam._m0[10u].z)) * _211) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _245 = texture(sampler2D(S_A_Alpha_FlipBookSmooth_snp_0_Texture2D_0, SS_DiffuseMap), vec2((((_212 + (_201 - cbMtdParam._m0[10u].z * trunc(_201 / cbMtdParam._m0[10u].z))) * _209) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_213 + floor(_201 / cbMtdParam._m0[10u].z)) * _211) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _247 = _245.x;
    float _248 = _245.y;
    float _249 = _245.z;
    float _250 = _245.w;
    float _263 = (((_234.x - _247) * _196) + _247) * cbMtdParam._m0[9u].x;
    float _264 = (((_234.y - _248) * _196) + _248) * cbMtdParam._m0[9u].y;
    float _265 = (((_234.z - _249) * _196) + _249) * cbMtdParam._m0[9u].z;
    vec4 _275 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _277 = _275.x;
    bool _284 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _300 = ((_284 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _277)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _277))) - POSITION_1.w) / cbMtdParam._m0[10u].x;
    float _2935 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    float _304 = ((cbMtdParam._m0[9u].w * TEXCOORD_1.z) * (((_234.w - _250) * _196) + _250)) * (isnan(1.0) ? _2935 : (isnan(_2935) ? 1.0 : min(_2935, 1.0)));
    float _308 = inversesqrt(dot(vec3(_176, _177, _178), vec3(_176, _177, _178)));
    float _309 = _308 * _176;
    float _310 = _308 * _177;
    float _311 = _308 * _178;
    float _2946 = isnan(0.0) ? _304 : (isnan(_304) ? 0.0 : max(_304, 0.0));
    float _312 = isnan(1.0) ? _2946 : (isnan(_2946) ? 1.0 : min(_2946, 1.0));
    float _2957 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _2968 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _2979 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _320 = _284 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _361 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _371 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _361);
    float _372 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _361);
    float _373 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _361);
    float _377 = inversesqrt(dot(vec3(_371, _372, _373), vec3(_371, _372, _373)));
    float _378 = _371 * _377;
    float _379 = _372 * _377;
    float _380 = _373 * _377;
    float _385 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _386 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _407 = fma(_311, cbSceneParam._m0[5u].z, fma(_310, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _309));
    float _410 = fma(_311, cbSceneParam._m0[6u].z, fma(_310, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _309));
    float _413 = fma(_311, cbSceneParam._m0[7u].z, fma(_310, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _309));
    uint _426 = uint(roundEven(NORMAL.w)) * 13u;
    uint _429 = (_426 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _435 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2957 : (isnan(_2957) ? 1.0 : min(_2957, 1.0)))) * cbInstanceData._m0[_429].x;
    float _436 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2968 : (isnan(_2968) ? 1.0 : min(_2968, 1.0)))) * cbInstanceData._m0[_429].y;
    float _437 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2979 : (isnan(_2979) ? 1.0 : min(_2979, 1.0)))) * cbInstanceData._m0[_429].z;
    float _2990 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _438 = isnan(1.0) ? _2990 : (isnan(_2990) ? 1.0 : min(_2990, 1.0));
    float _3001 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _439 = isnan(1.0) ? _3001 : (isnan(_3001) ? 1.0 : min(_3001, 1.0));
    float _3012 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _440 = isnan(1.0) ? _3012 : (isnan(_3012) ? 1.0 : min(_3012, 1.0));
    vec4 _449 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _385, cbSceneParam._m0[86u].y * _386));
    float _452 = _449.x * TEXCOORD_1.w;
    float _453 = dot(vec3(_309, _310, _311), vec3(_378, _379, _380));
    float _456 = _453 * 2.0;
    float _461 = (_456 * _309) - _378;
    float _462 = (_456 * _310) - _379;
    float _463 = (_456 * _311) - _380;
    float _485 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _489 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _493 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _795;
    float _797;
    float _798;
    float _799;
    float _800;
    float _801;
    float _802;
    float _803;
    float _804;
    float _805;
    float _806;
    float _807;
    float _808;
    float _809;
    float _810;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _520 = fma(_493, cbModelParam._m0[26u].z, fma(_489, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _485));
        float _524 = fma(_493, cbModelParam._m0[27u].z, fma(_489, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _485));
        float _528 = fma(_493, cbModelParam._m0[28u].z, fma(_489, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _485));
        float _553 = _485 + _309;
        float _554 = _489 + _310;
        float _555 = _493 + _311;
        float _565 = fma(_555, cbModelParam._m0[26u].z, fma(_554, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _553)) - _520;
        float _566 = fma(_555, cbModelParam._m0[27u].z, fma(_554, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _553)) - _524;
        float _567 = fma(_555, cbModelParam._m0[28u].z, fma(_554, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _553)) - _528;
        float _571 = inversesqrt(dot(vec3(_565, _566, _567), vec3(_565, _566, _567)));
        float _584 = ((_571 * _565) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_520 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _585 = ((_571 * _566) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_524 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _586 = ((_571 * _567) / cbModelParam._m0[34u].z) + ((((((_528 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _589 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_584, _585, _586), 0.0);
        vec4 _596 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_584, _585, _586), 0.0);
        vec4 _603 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_584, _585, _586), 0.0);
        vec4 _610 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_584, _585, _586), 0.0);
        float _623 = exp2((_589.w + (-0.5)) * 20.0) * 2.0;
        float _624 = _623 * (_589.x + (-0.5));
        float _625 = _623 * (_589.y + (-0.5));
        float _626 = _623 * (_589.z + (-0.5));
        float _633 = exp2((_596.w + (-0.5)) * 20.0) * 2.0;
        float _634 = _633 * (_596.x + (-0.5));
        float _635 = _633 * (_596.y + (-0.5));
        float _636 = _633 * (_596.z + (-0.5));
        float _643 = exp2((_603.w + (-0.5)) * 20.0) * 2.0;
        float _644 = _643 * (_603.x + (-0.5));
        float _645 = _643 * (_603.y + (-0.5));
        float _646 = _643 * (_603.z + (-0.5));
        float _653 = exp2((_610.w + (-0.5)) * 20.0) * 2.0;
        float _654 = _653 * (_610.x + (-0.5));
        float _655 = _653 * (_610.y + (-0.5));
        float _656 = _653 * (_610.z + (-0.5));
        float _657 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
        float _658 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
        float _659 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
        float _660 = _624 * 0.5;
        float _661 = _634 * 0.5;
        float _662 = _644 * 0.5;
        float _663 = dot(vec3(_660, _661, _662), vec3(_660, _661, _662));
        float _668 = (_663 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_663);
        float _677 = (dot(vec3(_309, _310, _311), vec3(_668 * _660, _668 * _661, _668 * _662)) + 1.0) * 0.5;
        float _3038 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
        float _687 = sqrt(((_661 * _661) + (_660 * _660)) + (_662 * _662)) / (_657 + 9.9999997473787516355514526367188e-06);
        float _3049 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
        float _688 = isnan(1.0) ? _3049 : (isnan(_3049) ? 1.0 : min(_3049, 1.0));
        float _689 = _688 * 2.0;
        float _693 = (1.0 - _688) / (_688 + 1.0);
        float _3060 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
        float _694 = isnan(1.0) ? _3060 : (isnan(_3060) ? 1.0 : min(_3060, 1.0));
        float _703 = ((((1.0 - _694) * (_689 + 2.0)) * exp2(log2(isnan(1.0) ? _3038 : (isnan(_3038) ? 1.0 : min(_3038, 1.0))) * (_689 + 1.0))) + _694) * _657;
        float _704 = _625 * 0.5;
        float _705 = _635 * 0.5;
        float _706 = _645 * 0.5;
        float _707 = dot(vec3(_704, _705, _706), vec3(_704, _705, _706));
        float _712 = (_707 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_707);
        float _720 = (dot(vec3(_309, _310, _311), vec3(_712 * _704, _712 * _705, _712 * _706)) + 1.0) * 0.5;
        float _3071 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
        float _729 = sqrt(((_705 * _705) + (_704 * _704)) + (_706 * _706)) / (_658 + 9.9999997473787516355514526367188e-06);
        float _3082 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
        float _730 = isnan(1.0) ? _3082 : (isnan(_3082) ? 1.0 : min(_3082, 1.0));
        float _731 = _730 * 2.0;
        float _735 = (1.0 - _730) / (_730 + 1.0);
        float _3093 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
        float _736 = isnan(1.0) ? _3093 : (isnan(_3093) ? 1.0 : min(_3093, 1.0));
        float _745 = ((((1.0 - _736) * (_731 + 2.0)) * exp2(log2(isnan(1.0) ? _3071 : (isnan(_3071) ? 1.0 : min(_3071, 1.0))) * (_731 + 1.0))) + _736) * _658;
        float _746 = _626 * 0.5;
        float _747 = _636 * 0.5;
        float _748 = _646 * 0.5;
        float _749 = dot(vec3(_746, _747, _748), vec3(_746, _747, _748));
        float _754 = (_749 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_749);
        float _762 = (dot(vec3(_309, _310, _311), vec3(_754 * _746, _754 * _747, _754 * _748)) + 1.0) * 0.5;
        float _3104 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
        float _771 = sqrt(((_747 * _747) + (_746 * _746)) + (_748 * _748)) / (_659 + 9.9999997473787516355514526367188e-06);
        float _3115 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
        float _772 = isnan(1.0) ? _3115 : (isnan(_3115) ? 1.0 : min(_3115, 1.0));
        float _773 = _772 * 2.0;
        float _777 = (1.0 - _772) / (_772 + 1.0);
        float _3126 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
        float _778 = isnan(1.0) ? _3126 : (isnan(_3126) ? 1.0 : min(_3126, 1.0));
        float _787 = ((((1.0 - _778) * (_773 + 2.0)) * exp2(log2(isnan(1.0) ? _3104 : (isnan(_3104) ? 1.0 : min(_3104, 1.0))) * (_773 + 1.0))) + _778) * _659;
        _795 = _626;
        _797 = _625;
        _798 = _624;
        _799 = _636;
        _800 = _635;
        _801 = _634;
        _802 = _646;
        _803 = _645;
        _804 = _644;
        _805 = _659;
        _806 = _658;
        _807 = _657;
        _808 = cbModelParam._m0[36u].z * (isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0)));
        _809 = cbModelParam._m0[36u].z * (isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0)));
        _810 = cbModelParam._m0[36u].z * (isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0)));
    }
    else
    {
        _795 = _796;
        _797 = _796;
        _798 = _796;
        _799 = _796;
        _800 = _796;
        _801 = _796;
        _802 = _796;
        _803 = _796;
        _804 = _796;
        _805 = _796;
        _806 = _796;
        _807 = _796;
        _808 = 0.0;
        _809 = 0.0;
        _810 = 0.0;
    }
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _836 = fma(_493, cbModelParam._m0[30u].z, fma(_489, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _485));
        float _840 = fma(_493, cbModelParam._m0[31u].z, fma(_489, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _485));
        float _844 = fma(_493, cbModelParam._m0[32u].z, fma(_489, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _485));
        float _867 = _485 + _309;
        float _868 = _489 + _310;
        float _869 = _493 + _311;
        float _879 = fma(_869, cbModelParam._m0[30u].z, fma(_868, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _867)) - _836;
        float _880 = fma(_869, cbModelParam._m0[31u].z, fma(_868, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _867)) - _840;
        float _881 = fma(_869, cbModelParam._m0[32u].z, fma(_868, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _867)) - _844;
        float _885 = inversesqrt(dot(vec3(_879, _880, _881), vec3(_879, _880, _881)));
        float _898 = ((_885 * _879) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_836 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _899 = ((_885 * _880) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_840 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _900 = ((_885 * _881) / cbModelParam._m0[35u].z) + ((((((_844 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _902 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_898, _899, _900), 0.0);
        vec4 _909 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_898, _899, _900), 0.0);
        vec4 _916 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_898, _899, _900), 0.0);
        vec4 _923 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_898, _899, _900), 0.0);
        float _935 = exp2((_902.w + (-0.5)) * 20.0) * 2.0;
        float _936 = _935 * (_902.x + (-0.5));
        float _937 = _935 * (_902.y + (-0.5));
        float _938 = _935 * (_902.z + (-0.5));
        float _945 = exp2((_909.w + (-0.5)) * 20.0) * 2.0;
        float _946 = _945 * (_909.x + (-0.5));
        float _947 = _945 * (_909.y + (-0.5));
        float _948 = _945 * (_909.z + (-0.5));
        float _955 = exp2((_916.w + (-0.5)) * 20.0) * 2.0;
        float _956 = _955 * (_916.x + (-0.5));
        float _957 = _955 * (_916.y + (-0.5));
        float _958 = _955 * (_916.z + (-0.5));
        float _965 = exp2((_923.w + (-0.5)) * 20.0) * 2.0;
        float _966 = _965 * (_923.x + (-0.5));
        float _967 = _965 * (_923.y + (-0.5));
        float _968 = _965 * (_923.z + (-0.5));
        float _969 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _970 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _971 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _972 = _936 * 0.5;
        float _973 = _946 * 0.5;
        float _974 = _956 * 0.5;
        float _975 = dot(vec3(_972, _973, _974), vec3(_972, _973, _974));
        float _980 = (_975 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_975);
        float _988 = (dot(vec3(_309, _310, _311), vec3(_980 * _972, _980 * _973, _980 * _974)) + 1.0) * 0.5;
        float _3167 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _997 = sqrt(((_973 * _973) + (_972 * _972)) + (_974 * _974)) / (_969 + 9.9999997473787516355514526367188e-06);
        float _3178 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _998 = isnan(1.0) ? _3178 : (isnan(_3178) ? 1.0 : min(_3178, 1.0));
        float _999 = _998 * 2.0;
        float _1003 = (1.0 - _998) / (_998 + 1.0);
        float _3189 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1004 = isnan(1.0) ? _3189 : (isnan(_3189) ? 1.0 : min(_3189, 1.0));
        float _1013 = ((((1.0 - _1004) * (_999 + 2.0)) * exp2(log2(isnan(1.0) ? _3167 : (isnan(_3167) ? 1.0 : min(_3167, 1.0))) * (_999 + 1.0))) + _1004) * _969;
        float _1014 = _937 * 0.5;
        float _1015 = _947 * 0.5;
        float _1016 = _957 * 0.5;
        float _1017 = dot(vec3(_1014, _1015, _1016), vec3(_1014, _1015, _1016));
        float _1022 = (_1017 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1017);
        float _1030 = (dot(vec3(_309, _310, _311), vec3(_1022 * _1014, _1022 * _1015, _1022 * _1016)) + 1.0) * 0.5;
        float _3200 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1039 = sqrt(((_1015 * _1015) + (_1014 * _1014)) + (_1016 * _1016)) / (_970 + 9.9999997473787516355514526367188e-06);
        float _3211 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1040 = isnan(1.0) ? _3211 : (isnan(_3211) ? 1.0 : min(_3211, 1.0));
        float _1041 = _1040 * 2.0;
        float _1045 = (1.0 - _1040) / (_1040 + 1.0);
        float _3222 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1046 = isnan(1.0) ? _3222 : (isnan(_3222) ? 1.0 : min(_3222, 1.0));
        float _1055 = ((((1.0 - _1046) * (_1041 + 2.0)) * exp2(log2(isnan(1.0) ? _3200 : (isnan(_3200) ? 1.0 : min(_3200, 1.0))) * (_1041 + 1.0))) + _1046) * _970;
        float _1056 = _938 * 0.5;
        float _1057 = _948 * 0.5;
        float _1058 = _958 * 0.5;
        float _1059 = dot(vec3(_1056, _1057, _1058), vec3(_1056, _1057, _1058));
        float _1064 = (_1059 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1059);
        float _1072 = (dot(vec3(_309, _310, _311), vec3(_1064 * _1056, _1064 * _1057, _1064 * _1058)) + 1.0) * 0.5;
        float _3233 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1081 = sqrt(((_1057 * _1057) + (_1056 * _1056)) + (_1058 * _1058)) / (_971 + 9.9999997473787516355514526367188e-06);
        float _3244 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1082 = isnan(1.0) ? _3244 : (isnan(_3244) ? 1.0 : min(_3244, 1.0));
        float _1083 = _1082 * 2.0;
        float _1087 = (1.0 - _1082) / (_1082 + 1.0);
        float _3255 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _3255 : (isnan(_3255) ? 1.0 : min(_3255, 1.0));
        float _1097 = ((((1.0 - _1088) * (_1083 + 2.0)) * exp2(log2(isnan(1.0) ? _3233 : (isnan(_3233) ? 1.0 : min(_3233, 1.0))) * (_1083 + 1.0))) + _1088) * _971;
        _1105 = _938;
        _1106 = _937;
        _1107 = _936;
        _1108 = _948;
        _1109 = _947;
        _1110 = _946;
        _1111 = _958;
        _1112 = _957;
        _1113 = _956;
        _1114 = _971;
        _1115 = _970;
        _1116 = _969;
        _1117 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0)));
        _1118 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0)));
        _1119 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0)));
    }
    else
    {
        _1105 = _796;
        _1106 = _796;
        _1107 = _796;
        _1108 = _796;
        _1109 = _796;
        _1110 = _796;
        _1111 = _796;
        _1112 = _796;
        _1113 = _796;
        _1114 = _796;
        _1115 = _796;
        _1116 = _796;
        _1117 = 0.0;
        _1118 = 0.0;
        _1119 = 0.0;
    }
    float _1129 = (cbModelParam._m0[1u].x * (_1117 - _808)) + _808;
    float _1130 = (cbModelParam._m0[1u].x * (_1118 - _809)) + _809;
    float _1131 = (cbModelParam._m0[1u].x * (_1119 - _810)) + _810;
    float _1152 = fma(_1131, cbSceneParam._m0[89u].z, fma(_1130, cbSceneParam._m0[89u].y, _1129 * cbSceneParam._m0[89u].x));
    float _1155 = fma(_1131, cbSceneParam._m0[90u].z, fma(_1130, cbSceneParam._m0[90u].y, _1129 * cbSceneParam._m0[90u].x));
    float _1158 = fma(_1131, cbSceneParam._m0[91u].z, fma(_1130, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1129));
    float _1173 = _461 * 0.5;
    float _1174 = _462 * 0.5;
    float _1175 = _463 * 0.5;
    float _1176 = dot(vec4(_1173, _1174, _1175, 1.0), vec4(_1107, _1110, _1113, _1116));
    float _1179 = dot(vec4(_1173, _1174, _1175, 1.0), vec4(_1106, _1109, _1112, _1115));
    float _1182 = dot(vec4(_1173, _1174, _1175, 1.0), vec4(_1105, _1108, _1111, _1114));
    float _1216;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1189 = dot(vec4(_1173, _1174, _1175, 1.0), vec4(_795, _799, _802, _805));
        float _1193 = dot(vec4(_1173, _1174, _1175, 1.0), vec4(_797, _800, _803, _806));
        float _1197 = dot(vec4(_1173, _1174, _1175, 1.0), vec4(_798, _801, _804, _807));
        float _1204 = dot(vec4(cbModelParam._m0[39u]), vec4(_1173, _1174, _1175, 1.0));
        _1216 = dot(vec3(isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0)), isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0)), isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1204) ? 0.0 : (isnan(0.0) ? _1204 : max(0.0, _1204))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1216 = 1.0;
    }
    float _1227;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1218 = dot(vec4(cbModelParam._m0[40u]), vec4(_1173, _1174, _1175, 1.0));
        _1227 = dot(vec3(isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0)), isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0)), isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1218) ? 0.0 : (isnan(0.0) ? _1218 : max(0.0, _1218))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1227 = 1.0;
    }
    float _1231 = (_1227 * cbModelParam._m0[1u].x) + (_1216 * (1.0 - cbModelParam._m0[1u].x));
    float _1240 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1322;
    float _1324;
    float _1326;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1289 = fma(_493, cbModelParam._m0[13u].z, fma(_489, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _485)) + cbModelParam._m0[13u].w;
        float _1293 = fma(_493, cbModelParam._m0[14u].z, fma(_489, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _485)) + cbModelParam._m0[14u].w;
        float _1297 = fma(_493, cbModelParam._m0[15u].z, fma(_489, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _485)) + cbModelParam._m0[15u].w;
        float _1300 = fma(_463, cbModelParam._m0[13u].z, fma(_462, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _461));
        float _1303 = fma(_463, cbModelParam._m0[14u].z, fma(_462, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _461));
        float _1306 = fma(_463, cbModelParam._m0[15u].z, fma(_462, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _461));
        float _1332;
        if (_1300 > 0.0)
        {
            _1332 = abs((1.0 - _1289) / _1300);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1300 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1289 + 1.0) / _1300);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1332 = frontier_phi_16_14_ladder;
        }
        float _1561;
        if (_1303 > 0.0)
        {
            _1561 = abs((1.0 - _1293) / _1303);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1303 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1293 + 1.0) / _1303);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1561 = frontier_phi_25_21_ladder;
        }
        float _1753;
        if (_1306 > 0.0)
        {
            _1753 = abs((1.0 - _1297) / _1306);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1306 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1297 + 1.0) / _1306);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1753 = frontier_phi_37_32_ladder;
        }
        float _1755 = isnan(_1561) ? _1332 : (isnan(_1332) ? _1561 : min(_1332, _1561));
        float _1756 = isnan(_1753) ? _1755 : (isnan(_1755) ? _1753 : min(_1755, _1753));
        float _1760 = (_1756 * _1300) + _1289;
        float _1761 = (_1756 * _1303) + _1293;
        float _1762 = (_1756 * _1306) + _1297;
        float _1763 = _1756 * 9.9999997473787516355514526367188e-05;
        float _1765 = (-1.0) - _1763;
        float _1767 = _1763 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1762 > _1767) || ((_1762 < _1765) || ((_1761 > _1767) || ((_1761 < _1765) || ((_1760 < _1765) || (_1760 > _1767))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1859 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1762, cbModelParam._m0[9u].z, fma(_1761, cbModelParam._m0[9u].y, _1760 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1762, cbModelParam._m0[10u].z, fma(_1761, cbModelParam._m0[10u].y, _1760 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1762, cbModelParam._m0[11u].z, fma(_1761, cbModelParam._m0[11u].y, _1760 * cbModelParam._m0[11u].x))), _1240);
            frontier_phi_15_37_ladder = _1859.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1859.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1859.x * cbModelParam._m0[1u].y;
        }
        _1322 = frontier_phi_15_37_ladder_2;
        _1324 = frontier_phi_15_37_ladder_1;
        _1326 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1310 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_461, _462, _463), _1240);
        _1322 = _1310.x * cbModelParam._m0[1u].y;
        _1324 = _1310.y * cbModelParam._m0[1u].y;
        _1326 = _1310.z * cbModelParam._m0[1u].y;
    }
    float _1329 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1422;
    float _1424;
    float _1426;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1386 = fma(_493, cbModelParam._m0[21u].z, fma(_489, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _485)) + cbModelParam._m0[21u].w;
        float _1390 = fma(_493, cbModelParam._m0[22u].z, fma(_489, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _485)) + cbModelParam._m0[22u].w;
        float _1394 = fma(_493, cbModelParam._m0[23u].z, fma(_489, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _485)) + cbModelParam._m0[23u].w;
        float _1397 = fma(_463, cbModelParam._m0[21u].z, fma(_462, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _461));
        float _1400 = fma(_463, cbModelParam._m0[22u].z, fma(_462, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _461));
        float _1403 = fma(_463, cbModelParam._m0[23u].z, fma(_462, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _461));
        float _1566;
        if (_1397 > 0.0)
        {
            _1566 = abs((1.0 - _1386) / _1397);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1397 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1386 + 1.0) / _1397);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1566 = frontier_phi_27_23_ladder;
        }
        float _1780;
        if (_1400 > 0.0)
        {
            _1780 = abs((1.0 - _1390) / _1400);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1400 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1390 + 1.0) / _1400);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1780 = frontier_phi_39_34_ladder;
        }
        float _1931;
        if (_1403 > 0.0)
        {
            _1931 = abs((1.0 - _1394) / _1403);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1403 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1394 + 1.0) / _1403);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _1931 = frontier_phi_48_45_ladder;
        }
        float _1933 = isnan(_1780) ? _1566 : (isnan(_1566) ? _1780 : min(_1566, _1780));
        float _1934 = isnan(_1931) ? _1933 : (isnan(_1933) ? _1931 : min(_1933, _1931));
        float _1938 = (_1934 * _1397) + _1386;
        float _1939 = (_1934 * _1400) + _1390;
        float _1940 = (_1934 * _1403) + _1394;
        float _1941 = _1934 * 9.9999997473787516355514526367188e-05;
        float _1942 = (-1.0) - _1941;
        float _1944 = _1941 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_1940 > _1944) || ((_1940 < _1942) || ((_1939 > _1944) || ((_1939 < _1942) || ((_1938 < _1942) || (_1938 > _1944))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2143 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1940, cbModelParam._m0[17u].z, fma(_1939, cbModelParam._m0[17u].y, _1938 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1940, cbModelParam._m0[18u].z, fma(_1939, cbModelParam._m0[18u].y, _1938 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1940, cbModelParam._m0[19u].z, fma(_1939, cbModelParam._m0[19u].y, _1938 * cbModelParam._m0[19u].x))), _1329);
            frontier_phi_24_48_ladder = _2143.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2143.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2143.x * cbModelParam._m0[1u].z;
        }
        _1422 = frontier_phi_24_48_ladder_2;
        _1424 = frontier_phi_24_48_ladder_1;
        _1426 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1406 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_461, _462, _463), _1329);
        _1422 = _1406.x * cbModelParam._m0[1u].z;
        _1424 = _1406.y * cbModelParam._m0[1u].z;
        _1426 = _1406.z * cbModelParam._m0[1u].z;
    }
    float _1438 = _452 * 0.01200000010430812835693359375;
    float _1440 = _1438 * ((cbModelParam._m0[1u].w * (_1422 - _1322)) + _1322);
    float _1441 = _1438 * ((cbModelParam._m0[1u].w * (_1424 - _1324)) + _1324);
    float _1442 = _1438 * ((cbModelParam._m0[1u].w * (_1426 - _1326)) + _1326);
    float _1445 = fma(_1442, cbSceneParam._m0[89u].z, fma(_1441, cbSceneParam._m0[89u].y, _1440 * cbSceneParam._m0[89u].x));
    float _1448 = fma(_1442, cbSceneParam._m0[90u].z, fma(_1441, cbSceneParam._m0[90u].y, _1440 * cbSceneParam._m0[90u].x));
    float _1451 = fma(_1442, cbSceneParam._m0[91u].z, fma(_1441, cbSceneParam._m0[91u].y, _1440 * cbSceneParam._m0[91u].x));
    vec4 _1459 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_385, _386));
    float _1461 = _1459.w;
    float _1473 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1461);
    float _1474 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1461);
    float _1475 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1461);
    uvec4 _1479 = floatBitsToUint(cbInstanceData._m0[_426 + 5u]);
    uint _1481 = _1479.x * 14u;
    uint _1482 = _1481 + 13u;
    float _1489 = _452 + (-1.0);
    float _1495 = (cbLight._m0[_1482].x * _1489) + 1.0;
    float _1496 = (cbLight._m0[_1482].y * _1489) + 1.0;
    float _1497 = (cbLight._m0[_1482].z * _1489) + 1.0;
    float _1498 = (cbLight._m0[_1482].w * _1489) + 1.0;
    uint _1499 = _1481 + 5u;
    float _1505 = isnan(1.0) ? _1496 : (isnan(_1496) ? 1.0 : min(_1496, 1.0));
    uint _1509 = _1481 + 4u;
    float _1519 = isnan(1.0) ? _1495 : (isnan(_1495) ? 1.0 : min(_1495, 1.0));
    uint _1523 = _1481 | 1u;
    float _1534 = dot(vec3(cbLight._m0[_1481].xyz), vec3(_309, _310, _311));
    float _1537 = dot(vec3(cbLight._m0[_1523].xyz), vec3(_309, _310, _311));
    float _3391 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
    float _3402 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
    float _1542 = (isnan(1.0) ? _3391 : (isnan(_3391) ? 1.0 : min(_3391, 1.0))) * 0.3183098733425140380859375;
    float _1544 = (isnan(1.0) ? _3402 : (isnan(_3402) ? 1.0 : min(_3402, 1.0))) * 0.3183098733425140380859375;
    float _1551 = ((cbLight._m0[_1499].x * _1505) * _1544) + (((cbLight._m0[_1509].x * _1473) * _1519) * _1542);
    float _1552 = ((_1505 * cbLight._m0[_1499].y) * _1544) + (((cbLight._m0[_1509].y * _1474) * _1519) * _1542);
    float _1553 = ((_1505 * cbLight._m0[_1499].z) * _1544) + (((cbLight._m0[_1509].z * _1475) * _1519) * _1542);
    uvec4 _1558 = floatBitsToUint(cbLight._m0[_1481 + 12u]);
    bool _1560 = _1558.x == 0u;
    float _1571;
    float _1573;
    float _1575;
    if (_1560)
    {
        _1571 = _1551;
        _1573 = _1552;
        _1575 = _1553;
    }
    else
    {
        uint _1579 = _1481 + 6u;
        float _1595 = (dot(vec3(cbLight._m0[_1481 + 2u].xyz), vec3(_309, _310, _311)) * 0.5) + 0.5;
        float _1596 = _1595 * _1595;
        float _3413 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1597 = isnan(1.0) ? _3413 : (isnan(_3413) ? 1.0 : min(_3413, 1.0));
        float _1598 = isnan(1.0) ? _1497 : (isnan(_1497) ? 1.0 : min(_1497, 1.0));
        _1571 = (((cbLight._m0[_1579].x * 0.3183098733425140380859375) * _1597) * _1598) + _1551;
        _1573 = (((cbLight._m0[_1579].y * 0.3183098733425140380859375) * _1597) * _1598) + _1552;
        _1575 = (((cbLight._m0[_1579].z * 0.3183098733425140380859375) * _1597) * _1598) + _1553;
    }
    bool _1578 = _1558.y == 0u;
    float _1616;
    float _1618;
    float _1620;
    if (_1578)
    {
        _1616 = _1571;
        _1618 = _1573;
        _1620 = _1575;
    }
    else
    {
        uint _1724 = _1481 + 7u;
        float _1740 = (dot(vec3(cbLight._m0[_1481 + 3u].xyz), vec3(_309, _310, _311)) * 0.5) + 0.5;
        float _1741 = _1740 * _1740;
        float _3429 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
        float _1742 = isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0));
        float _1743 = isnan(1.0) ? _1498 : (isnan(_1498) ? 1.0 : min(_1498, 1.0));
        _1616 = (((cbLight._m0[_1724].x * 0.3183098733425140380859375) * _1742) * _1743) + _1571;
        _1618 = (((cbLight._m0[_1724].y * 0.3183098733425140380859375) * _1742) * _1743) + _1573;
        _1620 = (((cbLight._m0[_1724].z * 0.3183098733425140380859375) * _1742) * _1743) + _1575;
    }
    uint _1622 = _1481 + 8u;
    float _1628 = cbLight._m0[_1481].x + _378;
    float _1629 = cbLight._m0[_1481].y + _379;
    float _1630 = cbLight._m0[_1481].z + _380;
    float _1634 = inversesqrt(dot(vec3(_1628, _1629, _1630), vec3(_1628, _1629, _1630)));
    float _1638 = dot(vec3(_309, _310, _311), vec3(cbLight._m0[_1481].xyz));
    float _3445 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
    float _1641 = isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0));
    float _3456 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _1642 = isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0));
    float _1643 = dot(vec3(cbLight._m0[_1481].xyz), vec3(_1628 * _1634, _1629 * _1634, _1630 * _1634));
    float _3467 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
    float _1654 = (exp2(log2(1.0 - (isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1660 = (0.5 / ((_1641 + 9.9999999392252902907785028219223e-09) + _1642)) * _1641;
    float _3478 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
    float _1662 = (isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0))) * 0.31831014156341552734375;
    uint _1676 = _1481 + 9u;
    float _1682 = cbLight._m0[_1523].x + _378;
    float _1683 = cbLight._m0[_1523].y + _379;
    float _1684 = cbLight._m0[_1523].z + _380;
    float _1688 = inversesqrt(dot(vec3(_1682, _1683, _1684), vec3(_1682, _1683, _1684)));
    float _1692 = dot(vec3(_309, _310, _311), vec3(cbLight._m0[_1523].xyz));
    float _3489 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
    float _1695 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
    float _1696 = dot(vec3(cbLight._m0[_1523].xyz), vec3(_1682 * _1688, _1683 * _1688, _1684 * _1688));
    float _3500 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
    float _1705 = (exp2(log2(1.0 - (isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1709 = (0.5 / ((_1695 + 9.9999999392252902907785028219223e-09) + _1642)) * _1695;
    float _3511 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
    float _1711 = (isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0))) * 0.31831014156341552734375;
    float _1721 = (((_1705 * cbLight._m0[_1676].x) * _1711) * _1505) + ((((cbLight._m0[_1622].x * _1473) * _1654) * _1662) * _1519);
    float _1722 = (((_1705 * cbLight._m0[_1676].y) * _1711) * _1505) + ((((cbLight._m0[_1622].y * _1474) * _1654) * _1662) * _1519);
    float _1723 = (((_1705 * cbLight._m0[_1676].z) * _1711) * _1505) + ((((cbLight._m0[_1622].z * _1475) * _1654) * _1662) * _1519);
    float _1785;
    float _1787;
    float _1789;
    if (_1560)
    {
        _1785 = _1721;
        _1787 = _1722;
        _1789 = _1723;
    }
    else
    {
        uint _1791 = _1481 + 10u;
        uint _1797 = _1481 + 2u;
        float _1803 = cbLight._m0[_1797].x + _378;
        float _1804 = cbLight._m0[_1797].y + _379;
        float _1805 = cbLight._m0[_1797].z + _380;
        float _1809 = inversesqrt(dot(vec3(_1803, _1804, _1805), vec3(_1803, _1804, _1805)));
        float _1813 = dot(vec3(_309, _310, _311), vec3(cbLight._m0[_1797].xyz));
        float _3522 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
        float _1816 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
        float _1817 = dot(vec3(cbLight._m0[_1797].xyz), vec3(_1803 * _1809, _1804 * _1809, _1805 * _1809));
        float _3533 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
        float _1826 = (exp2(log2(1.0 - (isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1830 = (0.5 / ((_1816 + 9.9999999392252902907785028219223e-09) + _1642)) * _1816;
        float _3544 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
        float _1832 = (isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0))) * 0.31831014156341552734375;
        float _1833 = isnan(1.0) ? _1497 : (isnan(_1497) ? 1.0 : min(_1497, 1.0));
        _1785 = (((_1826 * cbLight._m0[_1791].x) * _1832) * _1833) + _1721;
        _1787 = (((_1826 * cbLight._m0[_1791].y) * _1832) * _1833) + _1722;
        _1789 = (((_1826 * cbLight._m0[_1791].z) * _1832) * _1833) + _1723;
    }
    float _1868;
    float _1870;
    float _1872;
    if (_1578)
    {
        _1868 = _1785;
        _1870 = _1787;
        _1872 = _1789;
    }
    else
    {
        uint _1879 = _1481 + 11u;
        uint _1885 = _1481 + 3u;
        float _1891 = cbLight._m0[_1885].x + _378;
        float _1892 = cbLight._m0[_1885].y + _379;
        float _1893 = cbLight._m0[_1885].z + _380;
        float _1897 = inversesqrt(dot(vec3(_1891, _1892, _1893), vec3(_1891, _1892, _1893)));
        float _1901 = dot(vec3(_309, _310, _311), vec3(cbLight._m0[_1885].xyz));
        float _3560 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
        float _1904 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
        float _1905 = dot(vec3(cbLight._m0[_1885].xyz), vec3(_1891 * _1897, _1892 * _1897, _1893 * _1897));
        float _3571 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
        float _1914 = (exp2(log2(1.0 - (isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1918 = (0.5 / ((_1904 + 9.9999999392252902907785028219223e-09) + _1642)) * _1904;
        float _3582 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
        float _1920 = (isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0))) * 0.31831014156341552734375;
        float _1921 = isnan(1.0) ? _1498 : (isnan(_1498) ? 1.0 : min(_1498, 1.0));
        _1868 = (((_1914 * cbLight._m0[_1879].x) * _1920) * _1921) + _1785;
        _1870 = (((_1914 * cbLight._m0[_1879].y) * _1920) * _1921) + _1787;
        _1872 = (((_1914 * cbLight._m0[_1879].z) * _1920) * _1921) + _1789;
    }
    float _2055;
    float _2057;
    float _2059;
    float _2061;
    float _2063;
    float _2065;
    if (_1479.y == 0u)
    {
        float _1996 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1997 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1996;
        float _1998 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1996;
        float _1999 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1996;
        uvec4 _2011 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2012 = _2011.x;
        uint _2023 = uint((float(_2011.y) * floor(float(uint(cbSceneParam._m0[85u].y * _386) / _2012))) + floor(float(uint(cbSceneParam._m0[85u].x * _385) / _2012)));
        float _2033 = (log2(_1999 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2034 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
        uint _2037 = uint(isnan(14.0) ? _2034 : (isnan(_2034) ? 14.0 : min(_2034, 14.0)));
        uvec4 _2042 = texelFetch(g_lightClusterGridBuffer, int(((_2037 << 2u) + (_2023 << 6u)) >> 2u));
        uint _2043 = _2042.x;
        uint _2044 = _2011.z;
        float _2148;
        float _2150;
        float _2152;
        float _2154;
        float _2156;
        float _2158;
        if (((((1u << ((_2044 >> 4u) & 15u)) + 4294967295u) & _2043) == 0u) || ((_2044 & 240u) == 0u))
        {
            _2148 = 0.0;
            _2150 = 0.0;
            _2152 = 0.0;
            _2154 = 0.0;
            _2156 = 0.0;
            _2158 = 0.0;
        }
        else
        {
            float _2149;
            float _2151;
            float _2153;
            float _2155;
            float _2157;
            float _2159;
            float _2290 = 0.0;
            float _2291 = 0.0;
            float _2292 = 0.0;
            float _2293 = 0.0;
            float _2294 = 0.0;
            float _2295 = 0.0;
            uint _2296 = 0u;
            uint _2305;
            bool _2306;
            for (;;)
            {
                _2305 = texelFetch(g_lightClassification, int((((_2037 << 5u) + (_2023 << 9u)) + (_2296 << 2u)) >> 2u)).x;
                _2306 = _2305 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2306)
                {
                    frontier_phi_63_pred = _2295;
                    frontier_phi_63_pred_1 = _2294;
                    frontier_phi_63_pred_2 = _2293;
                    frontier_phi_63_pred_3 = _2292;
                    frontier_phi_63_pred_4 = _2291;
                    frontier_phi_63_pred_5 = _2290;
                }
                else
                {
                    float _2414;
                    float _2415;
                    float _2416;
                    float _2417;
                    float _2418;
                    float _2419;
                    uint _2420;
                    _2414 = _2290;
                    _2415 = _2291;
                    _2416 = _2292;
                    _2417 = _2293;
                    _2418 = _2294;
                    _2419 = _2295;
                    _2420 = _2305;
                    float _2346;
                    float _2347;
                    float _2348;
                    float _2349;
                    float _2350;
                    float _2351;
                    for (;;)
                    {
                        uint _2424 = uint(findLSB(_2420)) + (_2296 << 5u);
                        uint _2421 = (_2420 + 4294967295u) & _2420;
                        uint _2426 = _2424 * 48u;
                        vec4 _2440 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2426)).x, texelFetch(g_PointLightRenderingBuffer, int(_2426 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2426 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2426 + 3u)).x));
                        uint _2446 = (_2424 * 48u) + 4u;
                        vec4 _2459 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2446)).x, texelFetch(g_PointLightRenderingBuffer, int(_2446 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2446 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2446 + 3u)).x));
                        uint _2465 = (_2424 * 48u) + 8u;
                        vec3 _2476 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2465)).x, texelFetch(g_PointLightRenderingBuffer, int(_2465 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2465 + 2u)).x));
                        float _2480 = _2440.x - _1997;
                        float _2481 = _2440.y - _1998;
                        float _2482 = _2440.z - _1999;
                        float _2483 = dot(vec3(_2480, _2481, _2482), vec3(_2480, _2481, _2482));
                        float _2486 = inversesqrt(_2483);
                        float _2495 = 1.0 - (_2483 * _2440.w);
                        float _3608 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
                        float _2496 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
                        float _2497 = sqrt(_2483) * _2459.w;
                        float _2500 = 1.39999997615814208984375 / (_2497 + 1.39999997615814208984375);
                        float _2501 = _2500 * _2500;
                        float _2504 = ((1.0 - _2501) * dot(vec3(_407, _410, _413), vec3(_2486 * _2480, _2486 * _2481, _2486 * _2482))) + _2501;
                        float _2507 = _2497 * _2497;
                        float _2511 = ((isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0))) * _2496) / ((_2507 * 0.699999988079071044921875) + 1.0);
                        float _2515 = (-0.0) - _1997;
                        float _2516 = (-0.0) - _1998;
                        float _2517 = (-0.0) - _1999;
                        float _2521 = inversesqrt(dot(vec3(_2515, _2516, _2517), vec3(_2515, _2516, _2517)));
                        float _2525 = dot(vec3(_407, _410, _413), vec3(_2521 * _2515, _2521 * _2516, _2521 * _2517));
                        float _3624 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
                        float _3635 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
                        float _2529 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
                        float _2533 = (0.5 / (((isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0))) + 9.9999999392252902907785028219223e-09) + _2529)) * _2529;
                        float _3646 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
                        float _2542 = (((isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0))) * 3.1415927410125732421875) / ((_2507 * 2.1991131305694580078125) + 3.141590118408203125)) * _2496;
                        _2349 = (_2511 * _2459.x) + _2417;
                        _2350 = (_2511 * _2459.y) + _2418;
                        _2351 = (_2511 * _2459.z) + _2419;
                        _2346 = (_2542 * _2476.x) + _2414;
                        _2347 = (_2542 * _2476.y) + _2415;
                        _2348 = (_2542 * _2476.z) + _2416;
                        if (_2421 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2414 = _2346;
                            _2415 = _2347;
                            _2416 = _2348;
                            _2417 = _2349;
                            _2418 = _2350;
                            _2419 = _2351;
                            _2420 = _2421;
                        }
                    }
                    frontier_phi_63_pred = _2351;
                    frontier_phi_63_pred_1 = _2350;
                    frontier_phi_63_pred_2 = _2349;
                    frontier_phi_63_pred_3 = _2348;
                    frontier_phi_63_pred_4 = _2347;
                    frontier_phi_63_pred_5 = _2346;
                }
                _2159 = frontier_phi_63_pred;
                _2157 = frontier_phi_63_pred_1;
                _2155 = frontier_phi_63_pred_2;
                _2153 = frontier_phi_63_pred_3;
                _2151 = frontier_phi_63_pred_4;
                _2149 = frontier_phi_63_pred_5;
                uint _2297 = _2296 + 1u;
                if (_2297 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2290 = _2149;
                    _2291 = _2151;
                    _2292 = _2153;
                    _2293 = _2155;
                    _2294 = _2157;
                    _2295 = _2159;
                    _2296 = _2297;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2148 = _2149;
            _2150 = _2151;
            _2152 = _2153;
            _2154 = _2155;
            _2156 = _2157;
            _2158 = _2159;
        }
        uvec4 _2162 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2163 = _2162.z;
        uint _2165 = (_2163 >> 8u) & 15u;
        float _2261;
        float _2263;
        float _2265;
        float _2267;
        float _2269;
        float _2271;
        if (((4294967295u << _2165) & _2043) == 0u)
        {
            _2261 = _2148;
            _2263 = _2150;
            _2265 = _2152;
            _2267 = _2154;
            _2269 = _2156;
            _2271 = _2158;
        }
        else
        {
            float _2286 = inversesqrt(dot(vec3(_1997, _1998, _1999), vec3(_1997, _1998, _1999)));
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2165 < ((_2163 >> 12u) & 15u))
            {
                float _2262;
                float _2264;
                float _2266;
                float _2268;
                float _2270;
                float _2272;
                float _2397 = _2148;
                float _2398 = _2150;
                float _2399 = _2152;
                float _2400 = _2154;
                float _2401 = _2156;
                float _2402 = _2158;
                uint _2403 = _2165;
                uint _2412;
                bool _2413;
                for (;;)
                {
                    _2412 = texelFetch(g_lightClassification, int((((_2037 << 5u) + (_2023 << 9u)) + (_2403 << 2u)) >> 2u)).x;
                    _2413 = _2412 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2413)
                    {
                        frontier_phi_69_pred = _2402;
                        frontier_phi_69_pred_1 = _2401;
                        frontier_phi_69_pred_2 = _2400;
                        frontier_phi_69_pred_3 = _2399;
                        frontier_phi_69_pred_4 = _2398;
                        frontier_phi_69_pred_5 = _2397;
                    }
                    else
                    {
                        float _2547;
                        float _2548;
                        float _2549;
                        float _2550;
                        float _2551;
                        float _2552;
                        float _2799;
                        float _2800;
                        float _2801;
                        float _2802;
                        float _2803;
                        float _2804;
                        float _2560 = _2397;
                        float _2561 = _2398;
                        float _2562 = _2399;
                        float _2563 = _2400;
                        float _2564 = _2401;
                        float _2565 = _2402;
                        uint _2566 = _2412;
                        uint _2567;
                        vec4 _2592;
                        float _2593;
                        vec4 _2608;
                        vec3 _2620;
                        vec4 _2636;
                        vec4 _2652;
                        float _2699;
                        bool _2700;
                        for (;;)
                        {
                            uint _2577 = ((_2403 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2566));
                            _2567 = (_2566 + 4294967295u) & _2566;
                            uint _2579 = _2577 * 40u;
                            _2592 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2579)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2579 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2579 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2579 + 3u)).x));
                            _2593 = _2592.w;
                            uint _2595 = (_2577 * 40u) + 4u;
                            _2608 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2595)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2595 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2595 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2595 + 3u)).x));
                            uint _2610 = (_2577 * 40u) + 8u;
                            _2620 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2610)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2610 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2610 + 2u)).x));
                            uint _2623 = (_2577 * 40u) + 16u;
                            _2636 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2623)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2623 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2623 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2623 + 3u)).x));
                            uint _2639 = (_2577 * 40u) + 20u;
                            _2652 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2639)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2639 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2639 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2639 + 3u)).x));
                            uint _2655 = (_2577 * 40u) + 24u;
                            vec4 _2668 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2655)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2655 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2655 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2655 + 3u)).x));
                            uint _2674 = (_2577 * 40u) + 28u;
                            vec4 _2687 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2674)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2674 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2674 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2674 + 3u)).x));
                            _2699 = fma(_1999, _2687.z, fma(_1998, _2687.y, _2687.x * _1997)) + _2687.w;
                            _2700 = !((fma(_1999, _2668.z, fma(_1998, _2668.y, _2668.x * _1997)) + _2668.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2700)
                            {
                                float _2727 = _2592.x - _1997;
                                float _2728 = _2592.y - _1998;
                                float _2729 = _2592.z - _1999;
                                float _2730 = dot(vec3(_2727, _2728, _2729), vec3(_2727, _2728, _2729));
                                float _2733 = inversesqrt(_2730);
                                float _2734 = _2733 * _2727;
                                float _2735 = _2733 * _2728;
                                float _2736 = _2733 * _2729;
                                float _2740 = 1.0 - (_2730 / (_2593 * _2593));
                                float _3657 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0));
                                float _2741 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
                                float _2745 = sqrt(_2730) * _2608.w;
                                float _2747 = 1.39999997615814208984375 / (_2745 + 1.39999997615814208984375);
                                float _2748 = _2747 * _2747;
                                float _2749 = 1.0 - _2748;
                                float _2751 = (_2749 * dot(vec3(_2734, _2735, _2736), vec3(_407, _410, _413))) + _2748;
                                float _2754 = _2745 * _2745;
                                float _2758 = (fma(_1999, _2636.z, fma(_1998, _2636.y, _2636.x * _1997)) + _2636.w) / _2699;
                                float _2759 = (fma(_1999, _2652.z, fma(_1998, _2652.y, _2652.x * _1997)) + _2652.w) / _2699;
                                float _2763 = 1.0 - dot(vec2(_2758, _2759), vec2(_2758, _2759));
                                float _3673 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
                                float _2764 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
                                float _2765 = _2764 * (((isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0))) * _2741) / ((_2754 * 0.699999988079071044921875) + 1.0));
                                float _2775 = dot(vec3(_407, _410, _413), vec3((-0.0) - (_1997 * _2286), (-0.0) - (_1998 * _2286), (-0.0) - (_1999 * _2286)));
                                float _3684 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
                                float _2783 = (_2749 * dot(vec3(_407, _410, _413), vec3(_2734, _2735, _2736))) + _2748;
                                float _3695 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
                                float _2784 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
                                float _2788 = (0.5 / (((isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0))) + 9.9999999392252902907785028219223e-09) + _2784)) * _2784;
                                float _3706 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0));
                                float _2795 = (_2764 * _2741) * (((isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0))) * 3.1415927410125732421875) / ((_2754 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_75_pred = _2765 * _2608.z;
                                frontier_phi_75_pred_1 = _2765 * _2608.y;
                                frontier_phi_75_pred_2 = _2765 * _2608.x;
                                frontier_phi_75_pred_3 = _2795 * _2620.z;
                                frontier_phi_75_pred_4 = _2795 * _2620.y;
                                frontier_phi_75_pred_5 = _2795 * _2620.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _2804 = frontier_phi_75_pred;
                            _2803 = frontier_phi_75_pred_1;
                            _2802 = frontier_phi_75_pred_2;
                            _2801 = frontier_phi_75_pred_3;
                            _2800 = frontier_phi_75_pred_4;
                            _2799 = frontier_phi_75_pred_5;
                            _2550 = _2802 + _2563;
                            _2551 = _2803 + _2564;
                            _2552 = _2804 + _2565;
                            _2547 = _2799 + _2560;
                            _2548 = _2800 + _2561;
                            _2549 = _2801 + _2562;
                            if (_2567 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2560 = _2547;
                                _2561 = _2548;
                                _2562 = _2549;
                                _2563 = _2550;
                                _2564 = _2551;
                                _2565 = _2552;
                                _2566 = _2567;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2552;
                        frontier_phi_69_pred_1 = _2551;
                        frontier_phi_69_pred_2 = _2550;
                        frontier_phi_69_pred_3 = _2549;
                        frontier_phi_69_pred_4 = _2548;
                        frontier_phi_69_pred_5 = _2547;
                    }
                    _2272 = frontier_phi_69_pred;
                    _2270 = frontier_phi_69_pred_1;
                    _2268 = frontier_phi_69_pred_2;
                    _2266 = frontier_phi_69_pred_3;
                    _2264 = frontier_phi_69_pred_4;
                    _2262 = frontier_phi_69_pred_5;
                    uint _2404 = _2403 + 1u;
                    if (_2404 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2397 = _2262;
                        _2398 = _2264;
                        _2399 = _2266;
                        _2400 = _2268;
                        _2401 = _2270;
                        _2402 = _2272;
                        _2403 = _2404;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2272;
                frontier_phi_57_58_ladder_1 = _2270;
                frontier_phi_57_58_ladder_2 = _2268;
                frontier_phi_57_58_ladder_3 = _2266;
                frontier_phi_57_58_ladder_4 = _2264;
                frontier_phi_57_58_ladder_5 = _2262;
            }
            else
            {
                frontier_phi_57_58_ladder = _2158;
                frontier_phi_57_58_ladder_1 = _2156;
                frontier_phi_57_58_ladder_2 = _2154;
                frontier_phi_57_58_ladder_3 = _2152;
                frontier_phi_57_58_ladder_4 = _2150;
                frontier_phi_57_58_ladder_5 = _2148;
            }
            _2261 = frontier_phi_57_58_ladder_5;
            _2263 = frontier_phi_57_58_ladder_4;
            _2265 = frontier_phi_57_58_ladder_3;
            _2267 = frontier_phi_57_58_ladder_2;
            _2269 = frontier_phi_57_58_ladder_1;
            _2271 = frontier_phi_57_58_ladder;
        }
        float _2276 = isnan(1.0) ? _452 : (isnan(_452) ? 1.0 : min(_452, 1.0));
        _2055 = (_2276 * _2267) + _1616;
        _2057 = (_2276 * _2269) + _1618;
        _2059 = (_2276 * _2271) + _1620;
        _2061 = ((_2261 * 0.039999999105930328369140625) * _2276) + _1868;
        _2063 = ((_2263 * 0.039999999105930328369140625) * _2276) + _1870;
        _2065 = ((_2265 * 0.039999999105930328369140625) * _2276) + _1872;
    }
    else
    {
        _2055 = _1616;
        _2057 = _1618;
        _2059 = _1620;
        _2061 = _1868;
        _2063 = _1870;
        _2065 = _1872;
    }
    float _3722 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _3733 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _3744 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _3755 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _2083 = ((isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0))) * (_2055 + ((isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0))) * _452))) + ((_2061 + ((isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0))) * _1231)) * cbPerFrame._m0[3u].x);
    float _2084 = ((isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0))) * (_2057 + ((isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0))) * _452))) + ((_2063 + ((isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0))) * _1231)) * cbPerFrame._m0[3u].x);
    float _2085 = ((isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0))) * (_2059 + ((isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0))) * _452))) + ((_2065 + ((isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0))) * _1231)) * cbPerFrame._m0[3u].x);
    float _2093 = cbInstanceData._m0[_426 + 6u].w * (isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0)));
    float _2098 = _385 / cbSceneParam._m0[86u].x;
    float _2099 = _386 / cbSceneParam._m0[86u].y;
    vec4 _2113 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2098, _2099, (log2((isnan(cbSceneParam._m0[77u].w) ? _320 : (isnan(_320) ? cbSceneParam._m0[77u].w : min(_320, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2115 = _2113.x;
    float _2116 = _2113.y;
    float _2117 = _2113.z;
    float _2118 = _2113.w;
    float _2210;
    float _2212;
    float _2214;
    float _2216;
    if (_320 > cbSceneParam._m0[78u].w)
    {
        float _2173 = isnan(_320) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _320 : min(cbSceneParam._m0[80u].w, _320));
        float _2174 = _2173 / _320;
        float _2185 = _2174 * _371;
        float _2186 = _372 * _2174;
        float _2187 = (-0.0) - _2186;
        float _2188 = _2174 * _373;
        float _2190 = (cbSceneParam._m0[77u].w * _2187) / _2173;
        float _2191 = _2190 + cbSceneParam._m0[79u].w;
        float _2192 = cbSceneParam._m0[79u].w - _2186;
        float _2198 = sqrt(((_2185 * _2185) + (_2186 * _2186)) + (_2188 * _2188));
        float _2201 = (1.0 - (cbSceneParam._m0[77u].w / _2173)) * _2198;
        float _2206 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2208 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2359;
        if (abs((_2187 - _2190) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2359 = ((((_2191 > 0.0) ? exp2(_2206 * _2191) : (2.0 - exp2(_2208 * _2191))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2201;
        }
        else
        {
            float _2319 = 1.0 / cbSceneParam._m0[80u].x;
            float _2320 = isnan(_2192) ? _2191 : (isnan(_2191) ? _2192 : max(_2191, _2192));
            float _2321 = isnan(_2192) ? _2191 : (isnan(_2191) ? _2192 : min(_2191, _2192));
            float _2330 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : min(_2320, 0.0));
            float _2331 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : min(_2321, 0.0));
            _2359 = ((abs(_2198 / _2187) * cbSceneParam._m0[80u].y) * ((((_2330 - _2331) * 2.0) - ((exp2(_2206 * (isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0)))) - exp2(_2206 * (isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0))))) * _2319)) - ((exp2(_2208 * _2330) - exp2(_2208 * _2331)) * _2319))) + (_2201 * cbSceneParam._m0[80u].z);
        }
        vec4 _2361 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2098, _2099, 1.0), 0.0);
        float _2370 = exp2((_2359 * (-1.44269502162933349609375)) * (1.0 - _2361.w));
        float _2371 = log2(_2370);
        float _2387 = log2(_2118);
        _2210 = (exp2(_2387 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2371 * cbSceneParam._m0[78u].x)) * _2361.x) / cbSceneParam._m0[78u].x)) + _2115;
        _2212 = (exp2(_2387 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2371 * cbSceneParam._m0[78u].y)) * _2361.y) / cbSceneParam._m0[78u].y)) + _2116;
        _2214 = (exp2(_2387 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2371 * cbSceneParam._m0[78u].z)) * _2361.z) / cbSceneParam._m0[78u].z)) + _2117;
        _2216 = _2370 * _2118;
    }
    else
    {
        _2210 = _2115;
        _2212 = _2116;
        _2214 = _2117;
        _2216 = _2118;
    }
    float _2228 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2229 = _2228 == 3.0;
    float _2231 = log2(_2216);
    float _2238 = exp2(_2231 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0)));
    float _2239 = exp2(_2231 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0)));
    float _2240 = exp2(_2231 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0)));
    float _2249 = (_2228 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2249 * (_2229 ? _2238 : (_2238 + (cbSceneParam._m0[72u].w * _2210)));
    SV_Target.y = _2249 * (_2229 ? _2239 : (_2239 + (cbSceneParam._m0[72u].w * _2212)));
    SV_Target.z = _2249 * (_2229 ? _2240 : (_2240 + (cbSceneParam._m0[72u].w * _2214)));
    SV_Target.w = _2093;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2093;
}


