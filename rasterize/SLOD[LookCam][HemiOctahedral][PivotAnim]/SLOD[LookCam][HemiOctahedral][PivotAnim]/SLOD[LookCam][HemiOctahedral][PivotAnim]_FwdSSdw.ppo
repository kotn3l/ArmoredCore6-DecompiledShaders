#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D SLOD_LookCam_HemiOctahedral_PivotAnim_snp_0_Texture2D_4;
layout(set = 0, binding = 1) uniform texture2D SLOD_LookCam_HemiOctahedral_PivotAnim_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D SLOD_LookCam_HemiOctahedral_PivotAnim_snp_0_Texture2D_1;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _849;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _177 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _178 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _179 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _185 = inversesqrt(dot(vec3(_177, _178, _179), vec3(_177, _178, _179)));
    float _192 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _212 = floor(cbMtdParam._m0[9u].y * TEXCOORD.z) / cbMtdParam._m0[9u].y;
    float _213 = floor(cbMtdParam._m0[9u].y * TEXCOORD.w) / cbMtdParam._m0[9u].y;
    float _3212 = isnan(0.0) ? _212 : (isnan(_212) ? 0.0 : max(_212, 0.0));
    float _3223 = isnan(0.0) ? _213 : (isnan(_213) ? 0.0 : max(_213, 0.0));
    float _219 = (TEXCOORD.x / cbMtdParam._m0[9u].y) + (isnan(1.0) ? _3212 : (isnan(_3212) ? 1.0 : min(_3212, 1.0)));
    float _220 = (TEXCOORD.y / cbMtdParam._m0[9u].y) + (isnan(1.0) ? _3223 : (isnan(_3223) ? 1.0 : min(_3223, 1.0)));
    vec4 _233 = texture(sampler2D(SLOD_LookCam_HemiOctahedral_PivotAnim_snp_0_Texture2D_4, SS_ClampLinear), vec2((cbTextureTilingScale._m0[0u].x * _219) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _220) + cbTextureTilingScale._m0[0u].w));
    float _239 = _233.w;
    float _240 = 1.0 / _239;
    float _241 = _233.x * _240;
    float _242 = _240 * _233.y;
    float _243 = _240 * _233.z;
    float _258 = texture(sampler2D(SLOD_LookCam_HemiOctahedral_PivotAnim_snp_0_Texture2D_0, SS_ClampLinear), vec2((cbTextureTilingScale._m0[1u].x * _219) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _220) + cbTextureTilingScale._m0[1u].w)).x * _240;
    vec4 _270 = texture(sampler2D(SLOD_LookCam_HemiOctahedral_PivotAnim_snp_0_Texture2D_1, SS_ClampLinear), vec2((cbTextureTilingScale._m0[2u].x * _219) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _220) + cbTextureTilingScale._m0[2u].w));
    float _278 = (_270.x * 2.0) + (-1.0);
    float _280 = (_270.y * 2.0) + (-1.0);
    float _281 = dot(vec2(_278, _280), vec2(_278, _280));
    float _3234 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    float _286 = sqrt(1.0 - (isnan(1.0) ? _3234 : (isnan(_3234) ? 1.0 : min(_3234, 1.0))));
    float _287 = _270.z * _240;
    float _290 = fma(_286, _192 * NORMAL.x, fma(_280, _199 * TANGENT.x, (_185 * _177) * _278));
    float _293 = fma(_286, _192 * NORMAL.y, fma(_280, _199 * TANGENT.y, (_185 * _178) * _278));
    float _296 = fma(_286, _192 * NORMAL.z, fma(_280, _199 * TANGENT.z, (_185 * _179) * _278));
    float _300 = inversesqrt(dot(vec3(_290, _293, _296), vec3(_290, _293, _296)));
    float _301 = _300 * _290;
    float _302 = _300 * _293;
    float _303 = _300 * _296;
    float _3245 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _304 = isnan(1.0) ? _3245 : (isnan(_3245) ? 1.0 : min(_3245, 1.0));
    float _3256 = isnan(0.0) ? _287 : (isnan(_287) ? 0.0 : max(_287, 0.0));
    float _305 = isnan(1.0) ? _3256 : (isnan(_3256) ? 1.0 : min(_3256, 1.0));
    float _3267 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3278 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _3289 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3300 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _309 = isnan(1.0) ? _3300 : (isnan(_3300) ? 1.0 : min(_3300, 1.0));
    float _325 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _367 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _377 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _367);
    float _378 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _367);
    float _379 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _367);
    float _383 = inversesqrt(dot(vec3(_377, _378, _379), vec3(_377, _378, _379)));
    float _384 = _377 * _383;
    float _385 = _378 * _383;
    float _386 = _379 * _383;
    float _392 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _393 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _414 = fma(_303, cbSceneParam._m0[5u].z, fma(_302, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _301));
    float _417 = fma(_303, cbSceneParam._m0[6u].z, fma(_302, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _301));
    float _420 = fma(_303, cbSceneParam._m0[7u].z, fma(_302, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _301));
    uint _433 = uint(roundEven(NORMAL.w)) * 13u;
    uint _436 = (_433 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _442 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3267 : (isnan(_3267) ? 1.0 : min(_3267, 1.0)))) * cbInstanceData._m0[_436].x;
    float _443 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3278 : (isnan(_3278) ? 1.0 : min(_3278, 1.0)))) * cbInstanceData._m0[_436].y;
    float _444 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3289 : (isnan(_3289) ? 1.0 : min(_3289, 1.0)))) * cbInstanceData._m0[_436].z;
    float _3311 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _445 = isnan(1.0) ? _3311 : (isnan(_3311) ? 1.0 : min(_3311, 1.0));
    float _3322 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _446 = isnan(1.0) ? _3322 : (isnan(_3322) ? 1.0 : min(_3322, 1.0));
    float _3333 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _447 = isnan(1.0) ? _3333 : (isnan(_3333) ? 1.0 : min(_3333, 1.0));
    float _448 = 1.0 - _309;
    float _449 = _445 * _448;
    float _450 = _446 * _448;
    float _451 = _447 * _448;
    float _456 = (_445 + (-0.039999999105930328369140625)) * _309;
    float _457 = (_446 + (-0.039999999105930328369140625)) * _309;
    float _458 = (_447 + (-0.039999999105930328369140625)) * _309;
    float _459 = _456 + 0.039999999105930328369140625;
    float _461 = _457 + 0.039999999105930328369140625;
    float _462 = _458 + 0.039999999105930328369140625;
    vec4 _471 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _392, cbSceneParam._m0[86u].y * _393));
    float _474 = _471.x * TEXCOORD_3.w;
    float _475 = dot(vec3(_301, _302, _303), vec3(_384, _385, _386));
    float _478 = _475 * 2.0;
    float _482 = (_478 * _301) - _384;
    float _483 = (_478 * _302) - _385;
    float _484 = (_478 * _303) - _386;
    float _488 = abs(dot(vec3(_384, _385, _386), vec3(_301, _302, _303)));
    float _3344 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _490 = sqrt(_305);
    float _503 = exp2((_490 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3344 : (isnan(_3344) ? 1.0 : min(_3344, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_490 * 3.0));
    float _509 = (1.0 - _503) * ((_490 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _510 = _503 * _490;
    float _538 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _542 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _546 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _848;
    float _850;
    float _851;
    float _852;
    float _853;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    float _863;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _573 = fma(_546, cbModelParam._m0[26u].z, fma(_542, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _538));
        float _577 = fma(_546, cbModelParam._m0[27u].z, fma(_542, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _538));
        float _581 = fma(_546, cbModelParam._m0[28u].z, fma(_542, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _538));
        float _606 = _538 + _301;
        float _607 = _542 + _302;
        float _608 = _546 + _303;
        float _618 = fma(_608, cbModelParam._m0[26u].z, fma(_607, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _606)) - _573;
        float _619 = fma(_608, cbModelParam._m0[27u].z, fma(_607, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _606)) - _577;
        float _620 = fma(_608, cbModelParam._m0[28u].z, fma(_607, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _606)) - _581;
        float _624 = inversesqrt(dot(vec3(_618, _619, _620), vec3(_618, _619, _620)));
        float _637 = ((_624 * _618) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_573 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _638 = ((_624 * _619) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_577 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _639 = ((_624 * _620) / cbModelParam._m0[34u].z) + ((((((_581 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _642 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_637, _638, _639), 0.0);
        vec4 _649 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_637, _638, _639), 0.0);
        vec4 _656 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_637, _638, _639), 0.0);
        vec4 _663 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_637, _638, _639), 0.0);
        float _676 = exp2((_642.w + (-0.5)) * 20.0) * 2.0;
        float _677 = _676 * (_642.x + (-0.5));
        float _678 = _676 * (_642.y + (-0.5));
        float _679 = _676 * (_642.z + (-0.5));
        float _686 = exp2((_649.w + (-0.5)) * 20.0) * 2.0;
        float _687 = _686 * (_649.x + (-0.5));
        float _688 = _686 * (_649.y + (-0.5));
        float _689 = _686 * (_649.z + (-0.5));
        float _696 = exp2((_656.w + (-0.5)) * 20.0) * 2.0;
        float _697 = _696 * (_656.x + (-0.5));
        float _698 = _696 * (_656.y + (-0.5));
        float _699 = _696 * (_656.z + (-0.5));
        float _706 = exp2((_663.w + (-0.5)) * 20.0) * 2.0;
        float _707 = _706 * (_663.x + (-0.5));
        float _708 = _706 * (_663.y + (-0.5));
        float _709 = _706 * (_663.z + (-0.5));
        float _710 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
        float _711 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
        float _712 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
        float _713 = _677 * 0.5;
        float _714 = _687 * 0.5;
        float _715 = _697 * 0.5;
        float _716 = dot(vec3(_713, _714, _715), vec3(_713, _714, _715));
        float _721 = (_716 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_716);
        float _730 = (dot(vec3(_301, _302, _303), vec3(_721 * _713, _721 * _714, _721 * _715)) + 1.0) * 0.5;
        float _3370 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
        float _740 = sqrt(((_714 * _714) + (_713 * _713)) + (_715 * _715)) / (_710 + 9.9999997473787516355514526367188e-06);
        float _3381 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
        float _741 = isnan(1.0) ? _3381 : (isnan(_3381) ? 1.0 : min(_3381, 1.0));
        float _742 = _741 * 2.0;
        float _746 = (1.0 - _741) / (_741 + 1.0);
        float _3392 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
        float _747 = isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0));
        float _756 = ((((1.0 - _747) * (_742 + 2.0)) * exp2(log2(isnan(1.0) ? _3370 : (isnan(_3370) ? 1.0 : min(_3370, 1.0))) * (_742 + 1.0))) + _747) * _710;
        float _757 = _678 * 0.5;
        float _758 = _688 * 0.5;
        float _759 = _698 * 0.5;
        float _760 = dot(vec3(_757, _758, _759), vec3(_757, _758, _759));
        float _765 = (_760 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_760);
        float _773 = (dot(vec3(_301, _302, _303), vec3(_765 * _757, _765 * _758, _765 * _759)) + 1.0) * 0.5;
        float _3403 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
        float _782 = sqrt(((_758 * _758) + (_757 * _757)) + (_759 * _759)) / (_711 + 9.9999997473787516355514526367188e-06);
        float _3414 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
        float _783 = isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0));
        float _784 = _783 * 2.0;
        float _788 = (1.0 - _783) / (_783 + 1.0);
        float _3425 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _789 = isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0));
        float _798 = ((((1.0 - _789) * (_784 + 2.0)) * exp2(log2(isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0))) * (_784 + 1.0))) + _789) * _711;
        float _799 = _679 * 0.5;
        float _800 = _689 * 0.5;
        float _801 = _699 * 0.5;
        float _802 = dot(vec3(_799, _800, _801), vec3(_799, _800, _801));
        float _807 = (_802 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_802);
        float _815 = (dot(vec3(_301, _302, _303), vec3(_807 * _799, _807 * _800, _807 * _801)) + 1.0) * 0.5;
        float _3436 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _824 = sqrt(((_800 * _800) + (_799 * _799)) + (_801 * _801)) / (_712 + 9.9999997473787516355514526367188e-06);
        float _3447 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
        float _825 = isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0));
        float _826 = _825 * 2.0;
        float _830 = (1.0 - _825) / (_825 + 1.0);
        float _3458 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
        float _831 = isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0));
        float _840 = ((((1.0 - _831) * (_826 + 2.0)) * exp2(log2(isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0))) * (_826 + 1.0))) + _831) * _712;
        _848 = _679;
        _850 = _678;
        _851 = _677;
        _852 = _689;
        _853 = _688;
        _854 = _687;
        _855 = _699;
        _856 = _698;
        _857 = _697;
        _858 = _712;
        _859 = _711;
        _860 = _710;
        _861 = cbModelParam._m0[36u].z * (isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0)));
        _862 = cbModelParam._m0[36u].z * (isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0)));
        _863 = cbModelParam._m0[36u].z * (isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0)));
    }
    else
    {
        _848 = _849;
        _850 = _849;
        _851 = _849;
        _852 = _849;
        _853 = _849;
        _854 = _849;
        _855 = _849;
        _856 = _849;
        _857 = _849;
        _858 = _849;
        _859 = _849;
        _860 = _849;
        _861 = 0.0;
        _862 = 0.0;
        _863 = 0.0;
    }
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _889 = fma(_546, cbModelParam._m0[30u].z, fma(_542, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _538));
        float _893 = fma(_546, cbModelParam._m0[31u].z, fma(_542, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _538));
        float _897 = fma(_546, cbModelParam._m0[32u].z, fma(_542, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _538));
        float _920 = _538 + _301;
        float _921 = _542 + _302;
        float _922 = _546 + _303;
        float _932 = fma(_922, cbModelParam._m0[30u].z, fma(_921, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _920)) - _889;
        float _933 = fma(_922, cbModelParam._m0[31u].z, fma(_921, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _920)) - _893;
        float _934 = fma(_922, cbModelParam._m0[32u].z, fma(_921, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _920)) - _897;
        float _938 = inversesqrt(dot(vec3(_932, _933, _934), vec3(_932, _933, _934)));
        float _951 = ((_938 * _932) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_889 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _952 = ((_938 * _933) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_893 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _953 = ((_938 * _934) / cbModelParam._m0[35u].z) + ((((((_897 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _955 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_951, _952, _953), 0.0);
        vec4 _962 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_951, _952, _953), 0.0);
        vec4 _969 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_951, _952, _953), 0.0);
        vec4 _976 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_951, _952, _953), 0.0);
        float _988 = exp2((_955.w + (-0.5)) * 20.0) * 2.0;
        float _989 = _988 * (_955.x + (-0.5));
        float _990 = _988 * (_955.y + (-0.5));
        float _991 = _988 * (_955.z + (-0.5));
        float _998 = exp2((_962.w + (-0.5)) * 20.0) * 2.0;
        float _999 = _998 * (_962.x + (-0.5));
        float _1000 = _998 * (_962.y + (-0.5));
        float _1001 = _998 * (_962.z + (-0.5));
        float _1008 = exp2((_969.w + (-0.5)) * 20.0) * 2.0;
        float _1009 = _1008 * (_969.x + (-0.5));
        float _1010 = _1008 * (_969.y + (-0.5));
        float _1011 = _1008 * (_969.z + (-0.5));
        float _1018 = exp2((_976.w + (-0.5)) * 20.0) * 2.0;
        float _1019 = _1018 * (_976.x + (-0.5));
        float _1020 = _1018 * (_976.y + (-0.5));
        float _1021 = _1018 * (_976.z + (-0.5));
        float _1022 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1023 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1024 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1025 = _989 * 0.5;
        float _1026 = _999 * 0.5;
        float _1027 = _1009 * 0.5;
        float _1028 = dot(vec3(_1025, _1026, _1027), vec3(_1025, _1026, _1027));
        float _1033 = (_1028 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1028);
        float _1041 = (dot(vec3(_301, _302, _303), vec3(_1033 * _1025, _1033 * _1026, _1033 * _1027)) + 1.0) * 0.5;
        float _3499 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1050 = sqrt(((_1026 * _1026) + (_1025 * _1025)) + (_1027 * _1027)) / (_1022 + 9.9999997473787516355514526367188e-06);
        float _3510 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1051 = isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0));
        float _1052 = _1051 * 2.0;
        float _1056 = (1.0 - _1051) / (_1051 + 1.0);
        float _3521 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1057 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
        float _1066 = ((((1.0 - _1057) * (_1052 + 2.0)) * exp2(log2(isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0))) * (_1052 + 1.0))) + _1057) * _1022;
        float _1067 = _990 * 0.5;
        float _1068 = _1000 * 0.5;
        float _1069 = _1010 * 0.5;
        float _1070 = dot(vec3(_1067, _1068, _1069), vec3(_1067, _1068, _1069));
        float _1075 = (_1070 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1070);
        float _1083 = (dot(vec3(_301, _302, _303), vec3(_1075 * _1067, _1075 * _1068, _1075 * _1069)) + 1.0) * 0.5;
        float _3532 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1092 = sqrt(((_1068 * _1068) + (_1067 * _1067)) + (_1069 * _1069)) / (_1023 + 9.9999997473787516355514526367188e-06);
        float _3543 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
        float _1094 = _1093 * 2.0;
        float _1098 = (1.0 - _1093) / (_1093 + 1.0);
        float _3554 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
        float _1108 = ((((1.0 - _1099) * (_1094 + 2.0)) * exp2(log2(isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0))) * (_1094 + 1.0))) + _1099) * _1023;
        float _1109 = _991 * 0.5;
        float _1110 = _1001 * 0.5;
        float _1111 = _1011 * 0.5;
        float _1112 = dot(vec3(_1109, _1110, _1111), vec3(_1109, _1110, _1111));
        float _1117 = (_1112 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1112);
        float _1125 = (dot(vec3(_301, _302, _303), vec3(_1117 * _1109, _1117 * _1110, _1117 * _1111)) + 1.0) * 0.5;
        float _3565 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1134 = sqrt(((_1110 * _1110) + (_1109 * _1109)) + (_1111 * _1111)) / (_1024 + 9.9999997473787516355514526367188e-06);
        float _3576 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
        float _1136 = _1135 * 2.0;
        float _1140 = (1.0 - _1135) / (_1135 + 1.0);
        float _3587 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
        float _1150 = ((((1.0 - _1141) * (_1136 + 2.0)) * exp2(log2(isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0))) * (_1136 + 1.0))) + _1141) * _1024;
        _1158 = _991;
        _1159 = _990;
        _1160 = _989;
        _1161 = _1001;
        _1162 = _1000;
        _1163 = _999;
        _1164 = _1011;
        _1165 = _1010;
        _1166 = _1009;
        _1167 = _1024;
        _1168 = _1023;
        _1169 = _1022;
        _1170 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0)));
        _1171 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0)));
        _1172 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0)));
    }
    else
    {
        _1158 = _849;
        _1159 = _849;
        _1160 = _849;
        _1161 = _849;
        _1162 = _849;
        _1163 = _849;
        _1164 = _849;
        _1165 = _849;
        _1166 = _849;
        _1167 = _849;
        _1168 = _849;
        _1169 = _849;
        _1170 = 0.0;
        _1171 = 0.0;
        _1172 = 0.0;
    }
    float _1182 = (cbModelParam._m0[1u].x * (_1170 - _861)) + _861;
    float _1183 = (cbModelParam._m0[1u].x * (_1171 - _862)) + _862;
    float _1184 = (cbModelParam._m0[1u].x * (_1172 - _863)) + _863;
    float _1205 = fma(_1184, cbSceneParam._m0[89u].z, fma(_1183, cbSceneParam._m0[89u].y, _1182 * cbSceneParam._m0[89u].x));
    float _1208 = fma(_1184, cbSceneParam._m0[90u].z, fma(_1183, cbSceneParam._m0[90u].y, _1182 * cbSceneParam._m0[90u].x));
    float _1211 = fma(_1184, cbSceneParam._m0[91u].z, fma(_1183, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1182));
    float _1226 = _482 * 0.5;
    float _1227 = _483 * 0.5;
    float _1228 = _484 * 0.5;
    float _1229 = dot(vec4(_1226, _1227, _1228, 1.0), vec4(_1160, _1163, _1166, _1169));
    float _1232 = dot(vec4(_1226, _1227, _1228, 1.0), vec4(_1159, _1162, _1165, _1168));
    float _1235 = dot(vec4(_1226, _1227, _1228, 1.0), vec4(_1158, _1161, _1164, _1167));
    float _1269;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1242 = dot(vec4(_1226, _1227, _1228, 1.0), vec4(_848, _852, _855, _858));
        float _1246 = dot(vec4(_1226, _1227, _1228, 1.0), vec4(_850, _853, _856, _859));
        float _1250 = dot(vec4(_1226, _1227, _1228, 1.0), vec4(_851, _854, _857, _860));
        float _1257 = dot(vec4(cbModelParam._m0[39u]), vec4(_1226, _1227, _1228, 1.0));
        _1269 = dot(vec3(isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0)), isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0)), isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1257) ? 0.0 : (isnan(0.0) ? _1257 : max(0.0, _1257))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1269 = 1.0;
    }
    float _1280;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1271 = dot(vec4(cbModelParam._m0[40u]), vec4(_1226, _1227, _1228, 1.0));
        _1280 = dot(vec3(isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0)), isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0)), isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1271) ? 0.0 : (isnan(0.0) ? _1271 : max(0.0, _1271))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1280 = 1.0;
    }
    float _1284 = (_1280 * cbModelParam._m0[1u].x) + (_1269 * (1.0 - cbModelParam._m0[1u].x));
    float _1294 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _305);
    float _1295 = isnan(_1294) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1294 : min(cbModelParam._m0[25u].z, _1294));
    float _1377;
    float _1379;
    float _1381;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1344 = fma(_546, cbModelParam._m0[13u].z, fma(_542, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _538)) + cbModelParam._m0[13u].w;
        float _1348 = fma(_546, cbModelParam._m0[14u].z, fma(_542, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _538)) + cbModelParam._m0[14u].w;
        float _1352 = fma(_546, cbModelParam._m0[15u].z, fma(_542, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _538)) + cbModelParam._m0[15u].w;
        float _1355 = fma(_484, cbModelParam._m0[13u].z, fma(_483, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _482));
        float _1358 = fma(_484, cbModelParam._m0[14u].z, fma(_483, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _482));
        float _1361 = fma(_484, cbModelParam._m0[15u].z, fma(_483, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _482));
        float _1389;
        if (_1355 > 0.0)
        {
            _1389 = abs((1.0 - _1344) / _1355);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1355 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1344 + 1.0) / _1355);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1389 = frontier_phi_14_12_ladder;
        }
        float _1618;
        if (_1358 > 0.0)
        {
            _1618 = abs((1.0 - _1348) / _1358);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1358 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1348 + 1.0) / _1358);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1618 = frontier_phi_23_19_ladder;
        }
        float _1875;
        if (_1361 > 0.0)
        {
            _1875 = abs((1.0 - _1352) / _1361);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1361 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1352 + 1.0) / _1361);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1875 = frontier_phi_35_30_ladder;
        }
        float _1877 = isnan(_1618) ? _1389 : (isnan(_1389) ? _1618 : min(_1389, _1618));
        float _1878 = isnan(_1875) ? _1877 : (isnan(_1877) ? _1875 : min(_1877, _1875));
        float _1882 = (_1878 * _1355) + _1344;
        float _1883 = (_1878 * _1358) + _1348;
        float _1884 = (_1878 * _1361) + _1352;
        float _1885 = _1878 * 9.9999997473787516355514526367188e-05;
        float _1887 = (-1.0) - _1885;
        float _1889 = _1885 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1884 > _1889) || ((_1884 < _1887) || ((_1883 > _1889) || ((_1883 < _1887) || ((_1882 < _1887) || (_1882 > _1889))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2012 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1884, cbModelParam._m0[9u].z, fma(_1883, cbModelParam._m0[9u].y, _1882 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1884, cbModelParam._m0[10u].z, fma(_1883, cbModelParam._m0[10u].y, _1882 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1884, cbModelParam._m0[11u].z, fma(_1883, cbModelParam._m0[11u].y, _1882 * cbModelParam._m0[11u].x))), _1295);
            frontier_phi_13_35_ladder = _2012.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2012.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2012.x * cbModelParam._m0[1u].y;
        }
        _1377 = frontier_phi_13_35_ladder_2;
        _1379 = frontier_phi_13_35_ladder_1;
        _1381 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1365 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_482, _483, _484), _1295);
        _1377 = _1365.x * cbModelParam._m0[1u].y;
        _1379 = _1365.y * cbModelParam._m0[1u].y;
        _1381 = _1365.z * cbModelParam._m0[1u].y;
    }
    float _1385 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _305);
    float _1386 = isnan(_1385) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1385 : min(cbModelParam._m0[25u].w, _1385));
    float _1479;
    float _1481;
    float _1483;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1443 = fma(_546, cbModelParam._m0[21u].z, fma(_542, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _538)) + cbModelParam._m0[21u].w;
        float _1447 = fma(_546, cbModelParam._m0[22u].z, fma(_542, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _538)) + cbModelParam._m0[22u].w;
        float _1451 = fma(_546, cbModelParam._m0[23u].z, fma(_542, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _538)) + cbModelParam._m0[23u].w;
        float _1454 = fma(_484, cbModelParam._m0[21u].z, fma(_483, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _482));
        float _1457 = fma(_484, cbModelParam._m0[22u].z, fma(_483, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _482));
        float _1460 = fma(_484, cbModelParam._m0[23u].z, fma(_483, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _482));
        float _1623;
        if (_1454 > 0.0)
        {
            _1623 = abs((1.0 - _1443) / _1454);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1454 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1443 + 1.0) / _1454);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1623 = frontier_phi_25_21_ladder;
        }
        float _1902;
        if (_1457 > 0.0)
        {
            _1902 = abs((1.0 - _1447) / _1457);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1457 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1447 + 1.0) / _1457);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1902 = frontier_phi_37_32_ladder;
        }
        float _2115;
        if (_1460 > 0.0)
        {
            _2115 = abs((1.0 - _1451) / _1460);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1460 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1451 + 1.0) / _1460);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2115 = frontier_phi_46_43_ladder;
        }
        float _2117 = isnan(_1902) ? _1623 : (isnan(_1623) ? _1902 : min(_1623, _1902));
        float _2118 = isnan(_2115) ? _2117 : (isnan(_2117) ? _2115 : min(_2117, _2115));
        float _2122 = (_2118 * _1454) + _1443;
        float _2123 = (_2118 * _1457) + _1447;
        float _2124 = (_2118 * _1460) + _1451;
        float _2125 = _2118 * 9.9999997473787516355514526367188e-05;
        float _2126 = (-1.0) - _2125;
        float _2128 = _2125 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2124 > _2128) || ((_2124 < _2126) || ((_2123 > _2128) || ((_2123 < _2126) || ((_2122 < _2126) || (_2122 > _2128))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2325 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2124, cbModelParam._m0[17u].z, fma(_2123, cbModelParam._m0[17u].y, _2122 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2124, cbModelParam._m0[18u].z, fma(_2123, cbModelParam._m0[18u].y, _2122 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2124, cbModelParam._m0[19u].z, fma(_2123, cbModelParam._m0[19u].y, _2122 * cbModelParam._m0[19u].x))), _1386);
            frontier_phi_22_46_ladder = _2325.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2325.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2325.x * cbModelParam._m0[1u].z;
        }
        _1479 = frontier_phi_22_46_ladder_2;
        _1481 = frontier_phi_22_46_ladder_1;
        _1483 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1463 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_482, _483, _484), _1386);
        _1479 = _1463.x * cbModelParam._m0[1u].z;
        _1481 = _1463.y * cbModelParam._m0[1u].z;
        _1483 = _1463.z * cbModelParam._m0[1u].z;
    }
    float _1496 = (((_509 * _459) + _510) * _474) * ((cbModelParam._m0[1u].w * (_1479 - _1377)) + _1377);
    float _1498 = (((_509 * _461) + _510) * _474) * ((cbModelParam._m0[1u].w * (_1481 - _1379)) + _1379);
    float _1500 = (((_509 * _462) + _510) * _474) * ((cbModelParam._m0[1u].w * (_1483 - _1381)) + _1381);
    float _1503 = fma(_1500, cbSceneParam._m0[89u].z, fma(_1498, cbSceneParam._m0[89u].y, _1496 * cbSceneParam._m0[89u].x));
    float _1506 = fma(_1500, cbSceneParam._m0[90u].z, fma(_1498, cbSceneParam._m0[90u].y, _1496 * cbSceneParam._m0[90u].x));
    float _1509 = fma(_1500, cbSceneParam._m0[91u].z, fma(_1498, cbSceneParam._m0[91u].y, _1496 * cbSceneParam._m0[91u].x));
    vec4 _1517 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_392, _393));
    float _1519 = _1517.w;
    float _1531 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1519);
    float _1532 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1519);
    float _1533 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1519);
    uvec4 _1537 = floatBitsToUint(cbInstanceData._m0[_433 + 5u]);
    uint _1539 = _1537.x * 14u;
    uint _1540 = _1539 + 13u;
    float _1547 = _474 + (-1.0);
    float _1552 = (cbLight._m0[_1540].x * _1547) + 1.0;
    float _1553 = (cbLight._m0[_1540].y * _1547) + 1.0;
    float _1554 = (cbLight._m0[_1540].z * _1547) + 1.0;
    float _1555 = (cbLight._m0[_1540].w * _1547) + 1.0;
    uint _1556 = _1539 + 5u;
    float _1562 = isnan(1.0) ? _1553 : (isnan(_1553) ? 1.0 : min(_1553, 1.0));
    uint _1566 = _1539 + 4u;
    float _1576 = isnan(1.0) ? _1552 : (isnan(_1552) ? 1.0 : min(_1552, 1.0));
    uint _1580 = _1539 | 1u;
    float _1591 = dot(vec3(cbLight._m0[_1539].xyz), vec3(_301, _302, _303));
    float _1594 = dot(vec3(cbLight._m0[_1580].xyz), vec3(_301, _302, _303));
    float _3723 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
    float _3734 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
    float _1599 = (isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0))) * 0.3183098733425140380859375;
    float _1601 = (isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0))) * 0.3183098733425140380859375;
    float _1608 = ((cbLight._m0[_1556].x * _1562) * _1601) + (((cbLight._m0[_1566].x * _1531) * _1576) * _1599);
    float _1609 = ((_1562 * cbLight._m0[_1556].y) * _1601) + (((cbLight._m0[_1566].y * _1532) * _1576) * _1599);
    float _1610 = ((_1562 * cbLight._m0[_1556].z) * _1601) + (((cbLight._m0[_1566].z * _1533) * _1576) * _1599);
    uvec4 _1615 = floatBitsToUint(cbLight._m0[_1539 + 12u]);
    bool _1617 = _1615.x == 0u;
    float _1628;
    float _1630;
    float _1632;
    if (_1617)
    {
        _1628 = _1608;
        _1630 = _1609;
        _1632 = _1610;
    }
    else
    {
        uint _1636 = _1539 + 6u;
        float _1652 = (dot(vec3(cbLight._m0[_1539 + 2u].xyz), vec3(_301, _302, _303)) * 0.5) + 0.5;
        float _1653 = _1652 * _1652;
        float _3745 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1654 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
        float _1655 = isnan(1.0) ? _1554 : (isnan(_1554) ? 1.0 : min(_1554, 1.0));
        _1628 = (((cbLight._m0[_1636].x * 0.3183098733425140380859375) * _1654) * _1655) + _1608;
        _1630 = (((cbLight._m0[_1636].y * 0.3183098733425140380859375) * _1654) * _1655) + _1609;
        _1632 = (((cbLight._m0[_1636].z * 0.3183098733425140380859375) * _1654) * _1655) + _1610;
    }
    bool _1635 = _1615.y == 0u;
    float _1673;
    float _1675;
    float _1677;
    if (_1635)
    {
        _1673 = _1628;
        _1675 = _1630;
        _1677 = _1632;
    }
    else
    {
        uint _1846 = _1539 + 7u;
        float _1862 = (dot(vec3(cbLight._m0[_1539 + 3u].xyz), vec3(_301, _302, _303)) * 0.5) + 0.5;
        float _1863 = _1862 * _1862;
        float _3761 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
        float _1864 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
        float _1865 = isnan(1.0) ? _1555 : (isnan(_1555) ? 1.0 : min(_1555, 1.0));
        _1673 = (((cbLight._m0[_1846].x * 0.3183098733425140380859375) * _1864) * _1865) + _1628;
        _1675 = (((cbLight._m0[_1846].y * 0.3183098733425140380859375) * _1864) * _1865) + _1630;
        _1677 = (((cbLight._m0[_1846].z * 0.3183098733425140380859375) * _1864) * _1865) + _1632;
    }
    uint _1680 = _1539 + 8u;
    float _1693 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1539].w)) * _305) * 0.949999988079071044921875);
    float _1694 = _1693 * _1693;
    float _1695 = cbLight._m0[_1539].x + _384;
    float _1696 = cbLight._m0[_1539].y + _385;
    float _1697 = cbLight._m0[_1539].z + _386;
    float _1701 = inversesqrt(dot(vec3(_1695, _1696, _1697), vec3(_1695, _1696, _1697)));
    float _1702 = _1701 * _1695;
    float _1703 = _1701 * _1696;
    float _1704 = _1701 * _1697;
    float _1705 = dot(vec3(_301, _302, _303), vec3(cbLight._m0[_1539].xyz));
    float _3777 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
    float _1708 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
    float _3788 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _1709 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
    float _1710 = dot(vec3(_301, _302, _303), vec3(_1702, _1703, _1704));
    float _3799 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
    float _1713 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
    float _1714 = dot(vec3(cbLight._m0[_1539].xyz), vec3(_1702, _1703, _1704));
    float _3810 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
    float _1718 = _1694 * _1694;
    float _1722 = ((_1713 * _1713) * (_1718 + (-1.0))) + 1.0;
    float _1730 = exp2(log2(1.0 - (isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0)))) * 5.0);
    float _1731 = 0.959999978542327880859375 - _456;
    float _1733 = 0.959999978542327880859375 - _457;
    float _1734 = 0.959999978542327880859375 - _458;
    float _1741 = 1.0 - _1694;
    float _1752 = (0.5 / (((_1709 * ((_1708 * _1741) + _1694)) + 9.9999999392252902907785028219223e-09) + (((_1709 * _1741) + _1694) * _1708))) * _1708;
    float _3821 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
    float _1754 = (isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0))) * (_1718 / ((_1722 * _1722) * 3.141590118408203125));
    uint _1768 = _1539 + 9u;
    float _1779 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1580].w)) * _305) * 0.949999988079071044921875);
    float _1780 = _1779 * _1779;
    float _1781 = cbLight._m0[_1580].x + _384;
    float _1782 = cbLight._m0[_1580].y + _385;
    float _1783 = cbLight._m0[_1580].z + _386;
    float _1787 = inversesqrt(dot(vec3(_1781, _1782, _1783), vec3(_1781, _1782, _1783)));
    float _1788 = _1787 * _1781;
    float _1789 = _1787 * _1782;
    float _1790 = _1787 * _1783;
    float _1791 = dot(vec3(_301, _302, _303), vec3(cbLight._m0[_1580].xyz));
    float _3832 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
    float _1794 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
    float _1795 = dot(vec3(_301, _302, _303), vec3(_1788, _1789, _1790));
    float _3843 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
    float _1798 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
    float _1799 = dot(vec3(cbLight._m0[_1580].xyz), vec3(_1788, _1789, _1790));
    float _3854 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
    float _1803 = _1780 * _1780;
    float _1807 = ((_1798 * _1798) * (_1803 + (-1.0))) + 1.0;
    float _1814 = exp2(log2(1.0 - (isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0)))) * 5.0);
    float _1821 = 1.0 - _1780;
    float _1831 = (0.5 / (((_1709 * ((_1794 * _1821) + _1780)) + 9.9999999392252902907785028219223e-09) + (((_1709 * _1821) + _1780) * _1794))) * _1794;
    float _3865 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
    float _1833 = (isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0))) * (_1803 / ((_1807 * _1807) * 3.141590118408203125));
    float _1843 = (((((_1814 * _1731) + _459) * cbLight._m0[_1768].x) * _1833) * _1562) + ((((cbLight._m0[_1680].x * _1531) * ((_1730 * _1731) + _459)) * _1754) * _1576);
    float _1844 = (((((_1814 * _1733) + _461) * cbLight._m0[_1768].y) * _1833) * _1562) + ((((cbLight._m0[_1680].y * _1532) * ((_1730 * _1733) + _461)) * _1754) * _1576);
    float _1845 = (((((_1814 * _1734) + _462) * cbLight._m0[_1768].z) * _1833) * _1562) + ((((cbLight._m0[_1680].z * _1533) * ((_1730 * _1734) + _462)) * _1754) * _1576);
    float _1907;
    float _1909;
    float _1911;
    if (_1617)
    {
        _1907 = _1843;
        _1909 = _1844;
        _1911 = _1845;
    }
    else
    {
        uint _1913 = _1539 + 2u;
        uint _1917 = _1539 + 10u;
        float _1931 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1913].w)) * _305) * 0.949999988079071044921875);
        float _1932 = _1931 * _1931;
        float _1933 = cbLight._m0[_1913].x + _384;
        float _1934 = cbLight._m0[_1913].y + _385;
        float _1935 = cbLight._m0[_1913].z + _386;
        float _1939 = inversesqrt(dot(vec3(_1933, _1934, _1935), vec3(_1933, _1934, _1935)));
        float _1940 = _1939 * _1933;
        float _1941 = _1939 * _1934;
        float _1942 = _1939 * _1935;
        float _1943 = dot(vec3(_301, _302, _303), vec3(cbLight._m0[_1913].xyz));
        float _3876 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
        float _1946 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _1947 = dot(vec3(_301, _302, _303), vec3(_1940, _1941, _1942));
        float _3887 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
        float _1950 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
        float _1951 = dot(vec3(cbLight._m0[_1913].xyz), vec3(_1940, _1941, _1942));
        float _3898 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
        float _1955 = _1932 * _1932;
        float _1959 = ((_1950 * _1950) * (_1955 + (-1.0))) + 1.0;
        float _1966 = exp2(log2(1.0 - (isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0)))) * 5.0);
        float _1973 = 1.0 - _1932;
        float _1983 = (0.5 / (((_1709 * ((_1946 * _1973) + _1932)) + 9.9999999392252902907785028219223e-09) + (((_1709 * _1973) + _1932) * _1946))) * _1946;
        float _3909 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
        float _1985 = (isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0))) * (_1955 / ((_1959 * _1959) * 3.141590118408203125));
        float _1986 = isnan(1.0) ? _1554 : (isnan(_1554) ? 1.0 : min(_1554, 1.0));
        _1907 = (((((_1966 * _1731) + _459) * cbLight._m0[_1917].x) * _1985) * _1986) + _1843;
        _1909 = (((((_1966 * _1733) + _461) * cbLight._m0[_1917].y) * _1985) * _1986) + _1844;
        _1911 = (((((_1966 * _1734) + _462) * cbLight._m0[_1917].z) * _1985) * _1986) + _1845;
    }
    float _2021;
    float _2023;
    float _2025;
    if (_1635)
    {
        _2021 = _1907;
        _2023 = _1909;
        _2025 = _1911;
    }
    else
    {
        uint _2032 = _1539 + 3u;
        uint _2036 = _1539 + 11u;
        float _2050 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2032].w)) * _305) * 0.949999988079071044921875);
        float _2051 = _2050 * _2050;
        float _2052 = cbLight._m0[_2032].x + _384;
        float _2053 = cbLight._m0[_2032].y + _385;
        float _2054 = cbLight._m0[_2032].z + _386;
        float _2058 = inversesqrt(dot(vec3(_2052, _2053, _2054), vec3(_2052, _2053, _2054)));
        float _2059 = _2058 * _2052;
        float _2060 = _2058 * _2053;
        float _2061 = _2058 * _2054;
        float _2062 = dot(vec3(_301, _302, _303), vec3(cbLight._m0[_2032].xyz));
        float _3925 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
        float _2065 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
        float _2066 = dot(vec3(_301, _302, _303), vec3(_2059, _2060, _2061));
        float _3936 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
        float _2069 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
        float _2070 = dot(vec3(cbLight._m0[_2032].xyz), vec3(_2059, _2060, _2061));
        float _3947 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
        float _2074 = _2051 * _2051;
        float _2078 = ((_2069 * _2069) * (_2074 + (-1.0))) + 1.0;
        float _2085 = exp2(log2(1.0 - (isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0)))) * 5.0);
        float _2092 = 1.0 - _2051;
        float _2102 = (0.5 / (((_1709 * ((_2065 * _2092) + _2051)) + 9.9999999392252902907785028219223e-09) + (((_1709 * _2092) + _2051) * _2065))) * _2065;
        float _3958 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
        float _2104 = (isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0))) * (_2074 / ((_2078 * _2078) * 3.141590118408203125));
        float _2105 = isnan(1.0) ? _1555 : (isnan(_1555) ? 1.0 : min(_1555, 1.0));
        _2021 = (((((_2085 * _1731) + _459) * cbLight._m0[_2036].x) * _2104) * _2105) + _1907;
        _2023 = (((((_2085 * _1733) + _461) * cbLight._m0[_2036].y) * _2104) * _2105) + _1909;
        _2025 = (((((_2085 * _1734) + _462) * cbLight._m0[_2036].z) * _2104) * _2105) + _1911;
    }
    float _2240;
    float _2242;
    float _2244;
    float _2246;
    float _2248;
    float _2250;
    if (_1537.y == 0u)
    {
        float _2180 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2181 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2180;
        float _2182 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2180;
        float _2183 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2180;
        uvec4 _2195 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2196 = _2195.x;
        uint _2207 = uint((float(_2195.y) * floor(float(uint(cbSceneParam._m0[85u].y * _393) / _2196))) + floor(float(uint(cbSceneParam._m0[85u].x * _392) / _2196)));
        float _2217 = (log2(_2183 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2218 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
        uint _2221 = uint(isnan(14.0) ? _2218 : (isnan(_2218) ? 14.0 : min(_2218, 14.0)));
        uvec4 _2226 = texelFetch(g_lightClusterGridBuffer, int(((_2221 << 2u) + (_2207 << 6u)) >> 2u));
        uint _2227 = _2226.x;
        uint _2228 = _2195.z;
        float _2330;
        float _2332;
        float _2334;
        float _2336;
        float _2338;
        float _2340;
        if (((((1u << ((_2228 >> 4u) & 15u)) + 4294967295u) & _2227) == 0u) || ((_2228 & 240u) == 0u))
        {
            _2330 = 0.0;
            _2332 = 0.0;
            _2334 = 0.0;
            _2336 = 0.0;
            _2338 = 0.0;
            _2340 = 0.0;
        }
        else
        {
            float _2331;
            float _2333;
            float _2335;
            float _2337;
            float _2339;
            float _2341;
            float _2475 = 0.0;
            float _2476 = 0.0;
            float _2477 = 0.0;
            float _2478 = 0.0;
            float _2479 = 0.0;
            float _2480 = 0.0;
            uint _2481 = 0u;
            uint _2490;
            bool _2491;
            for (;;)
            {
                _2490 = texelFetch(g_lightClassification, int((((_2221 << 5u) + (_2207 << 9u)) + (_2481 << 2u)) >> 2u)).x;
                _2491 = _2490 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2491)
                {
                    frontier_phi_61_pred = _2475;
                    frontier_phi_61_pred_1 = _2480;
                    frontier_phi_61_pred_2 = _2479;
                    frontier_phi_61_pred_3 = _2478;
                    frontier_phi_61_pred_4 = _2477;
                    frontier_phi_61_pred_5 = _2476;
                }
                else
                {
                    float _2599;
                    float _2600;
                    float _2601;
                    float _2602;
                    float _2603;
                    float _2604;
                    uint _2605;
                    _2599 = _2475;
                    _2600 = _2476;
                    _2601 = _2477;
                    _2602 = _2478;
                    _2603 = _2479;
                    _2604 = _2480;
                    _2605 = _2490;
                    float _2531;
                    float _2532;
                    float _2533;
                    float _2534;
                    float _2535;
                    float _2536;
                    for (;;)
                    {
                        uint _2609 = uint(findLSB(_2605)) + (_2481 << 5u);
                        uint _2606 = (_2605 + 4294967295u) & _2605;
                        uint _2611 = _2609 * 48u;
                        vec4 _2625 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2611)).x, texelFetch(g_PointLightRenderingBuffer, int(_2611 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2611 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2611 + 3u)).x));
                        uint _2631 = (_2609 * 48u) + 4u;
                        vec4 _2644 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2631)).x, texelFetch(g_PointLightRenderingBuffer, int(_2631 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2631 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2631 + 3u)).x));
                        uint _2650 = (_2609 * 48u) + 8u;
                        vec3 _2661 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2650)).x, texelFetch(g_PointLightRenderingBuffer, int(_2650 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2650 + 2u)).x));
                        float _2665 = _2625.x - _2181;
                        float _2666 = _2625.y - _2182;
                        float _2667 = _2625.z - _2183;
                        float _2668 = dot(vec3(_2665, _2666, _2667), vec3(_2665, _2666, _2667));
                        float _2671 = inversesqrt(_2668);
                        float _2672 = _2671 * _2665;
                        float _2673 = _2671 * _2666;
                        float _2674 = _2671 * _2667;
                        float _2675 = dot(vec3(_414, _417, _420), vec3(_2672, _2673, _2674));
                        float _2680 = 1.0 - (_2668 * _2625.w);
                        float _3984 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
                        float _2681 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
                        float _2682 = sqrt(_2668) * _2644.w;
                        float _2685 = 1.39999997615814208984375 / (_2682 + 1.39999997615814208984375);
                        float _2686 = _2685 * _2685;
                        float _2689 = ((1.0 - _2686) * _2675) + _2686;
                        float _2692 = _2682 * _2682;
                        float _2696 = ((isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0))) * _2681) / ((_2692 * 0.699999988079071044921875) + 1.0);
                        float _2700 = (-0.0) - _2181;
                        float _2701 = (-0.0) - _2182;
                        float _2702 = (-0.0) - _2183;
                        float _2706 = inversesqrt(dot(vec3(_2700, _2701, _2702), vec3(_2700, _2701, _2702)));
                        float _2707 = _2706 * _2700;
                        float _2708 = _2706 * _2701;
                        float _2709 = _2706 * _2702;
                        float _2717 = exp2(log2(1.0 / ((_2692 * 3.5) + 5.0)) * 0.25);
                        float _2718 = 1.0 - _490;
                        float _2725 = sqrt(1.0 - ((1.0 - (_2718 * _2718)) * (1.0 - (_2717 * _2717))));
                        float _2726 = _2725 * _2725;
                        float _2727 = _2726 * _2726;
                        float _2728 = _2707 + _2672;
                        float _2729 = _2708 + _2673;
                        float _2730 = _2709 + _2674;
                        float _2734 = inversesqrt(dot(vec3(_2728, _2729, _2730), vec3(_2728, _2729, _2730)));
                        float _2738 = dot(vec3(_414, _417, _420), vec3(_2707, _2708, _2709));
                        float _4000 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
                        float _2741 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
                        float _2742 = dot(vec3(_414, _417, _420), vec3(_2734 * _2728, _2734 * _2729, _2734 * _2730));
                        float _4011 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
                        float _2745 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
                        float _2749 = ((_2745 * _2745) * (_2727 + (-1.0))) + 1.0;
                        float _2750 = _2685 * _2726;
                        float _2751 = _2750 * _2750;
                        float _2754 = ((1.0 - _2751) * _2675) + _2751;
                        float _4022 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
                        float _2755 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
                        float _2756 = 1.0 - _2726;
                        float _2766 = (0.5 / (((_2755 * ((_2741 * _2756) + _2726)) + 9.9999999392252902907785028219223e-09) + (((_2755 * _2756) + _2726) * _2741))) * _2755;
                        float _4033 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0));
                        float _2777 = (((_2727 * 3.1415927410125732421875) * (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0)))) / ((_2749 * _2749) * ((_2692 * 2.1991131305694580078125) + 3.141590118408203125))) * _2681;
                        _2534 = (_2696 * _2644.x) + _2602;
                        _2535 = (_2696 * _2644.y) + _2603;
                        _2536 = (_2696 * _2644.z) + _2604;
                        _2531 = (_2777 * _2661.x) + _2599;
                        _2532 = (_2777 * _2661.y) + _2600;
                        _2533 = (_2777 * _2661.z) + _2601;
                        if (_2606 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2599 = _2531;
                            _2600 = _2532;
                            _2601 = _2533;
                            _2602 = _2534;
                            _2603 = _2535;
                            _2604 = _2536;
                            _2605 = _2606;
                        }
                    }
                    frontier_phi_61_pred = _2531;
                    frontier_phi_61_pred_1 = _2536;
                    frontier_phi_61_pred_2 = _2535;
                    frontier_phi_61_pred_3 = _2534;
                    frontier_phi_61_pred_4 = _2533;
                    frontier_phi_61_pred_5 = _2532;
                }
                _2331 = frontier_phi_61_pred;
                _2341 = frontier_phi_61_pred_1;
                _2339 = frontier_phi_61_pred_2;
                _2337 = frontier_phi_61_pred_3;
                _2335 = frontier_phi_61_pred_4;
                _2333 = frontier_phi_61_pred_5;
                uint _2482 = _2481 + 1u;
                if (_2482 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2475 = _2331;
                    _2476 = _2333;
                    _2477 = _2335;
                    _2478 = _2337;
                    _2479 = _2339;
                    _2480 = _2341;
                    _2481 = _2482;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2330 = _2331;
            _2332 = _2333;
            _2334 = _2335;
            _2336 = _2337;
            _2338 = _2339;
            _2340 = _2341;
        }
        uvec4 _2344 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2345 = _2344.z;
        uint _2347 = (_2345 >> 8u) & 15u;
        float _2443;
        float _2445;
        float _2447;
        float _2449;
        float _2451;
        float _2453;
        if (((4294967295u << _2347) & _2227) == 0u)
        {
            _2443 = _2330;
            _2445 = _2332;
            _2447 = _2334;
            _2449 = _2336;
            _2451 = _2338;
            _2453 = _2340;
        }
        else
        {
            float _2468 = inversesqrt(dot(vec3(_2181, _2182, _2183), vec3(_2181, _2182, _2183)));
            float _2469 = _2468 * _2181;
            float _2470 = _2468 * _2182;
            float _2471 = _2468 * _2183;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2347 < ((_2345 >> 12u) & 15u))
            {
                float _2444;
                float _2446;
                float _2448;
                float _2450;
                float _2452;
                float _2454;
                float _2582 = _2330;
                float _2583 = _2332;
                float _2584 = _2334;
                float _2585 = _2336;
                float _2586 = _2338;
                float _2587 = _2340;
                uint _2588 = _2347;
                uint _2597;
                bool _2598;
                for (;;)
                {
                    _2597 = texelFetch(g_lightClassification, int((((_2221 << 5u) + (_2207 << 9u)) + (_2588 << 2u)) >> 2u)).x;
                    _2598 = _2597 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2598)
                    {
                        frontier_phi_67_pred = _2585;
                        frontier_phi_67_pred_1 = _2586;
                        frontier_phi_67_pred_2 = _2587;
                        frontier_phi_67_pred_3 = _2584;
                        frontier_phi_67_pred_4 = _2583;
                        frontier_phi_67_pred_5 = _2582;
                    }
                    else
                    {
                        float _2782;
                        float _2783;
                        float _2784;
                        float _2785;
                        float _2786;
                        float _2787;
                        float _3078;
                        float _3079;
                        float _3080;
                        float _3081;
                        float _3082;
                        float _3083;
                        float _2795 = _2582;
                        float _2796 = _2583;
                        float _2797 = _2584;
                        float _2798 = _2585;
                        float _2799 = _2586;
                        float _2800 = _2587;
                        uint _2801 = _2597;
                        uint _2802;
                        vec4 _2827;
                        float _2828;
                        vec4 _2843;
                        vec3 _2855;
                        vec4 _2871;
                        vec4 _2887;
                        float _2934;
                        bool _2935;
                        for (;;)
                        {
                            uint _2812 = ((_2588 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2801));
                            _2802 = (_2801 + 4294967295u) & _2801;
                            uint _2814 = _2812 * 40u;
                            _2827 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2814)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2814 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2814 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2814 + 3u)).x));
                            _2828 = _2827.w;
                            uint _2830 = (_2812 * 40u) + 4u;
                            _2843 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2830)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2830 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2830 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2830 + 3u)).x));
                            uint _2845 = (_2812 * 40u) + 8u;
                            _2855 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2845)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2845 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2845 + 2u)).x));
                            uint _2858 = (_2812 * 40u) + 16u;
                            _2871 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2858)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2858 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2858 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2858 + 3u)).x));
                            uint _2874 = (_2812 * 40u) + 20u;
                            _2887 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2874)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2874 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2874 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2874 + 3u)).x));
                            uint _2890 = (_2812 * 40u) + 24u;
                            vec4 _2903 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2890)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2890 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2890 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2890 + 3u)).x));
                            uint _2909 = (_2812 * 40u) + 28u;
                            vec4 _2922 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2909)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2909 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2909 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2909 + 3u)).x));
                            _2934 = fma(_2183, _2922.z, fma(_2182, _2922.y, _2922.x * _2181)) + _2922.w;
                            _2935 = !((fma(_2183, _2903.z, fma(_2182, _2903.y, _2903.x * _2181)) + _2903.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2935)
                            {
                                float _2962 = _2827.x - _2181;
                                float _2963 = _2827.y - _2182;
                                float _2964 = _2827.z - _2183;
                                float _2965 = dot(vec3(_2962, _2963, _2964), vec3(_2962, _2963, _2964));
                                float _2968 = inversesqrt(_2965);
                                float _2969 = _2968 * _2962;
                                float _2970 = _2968 * _2963;
                                float _2971 = _2968 * _2964;
                                float _2975 = 1.0 - (_2965 / (_2828 * _2828));
                                float _4044 = isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0));
                                float _2976 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
                                float _2980 = sqrt(_2965) * _2843.w;
                                float _2982 = 1.39999997615814208984375 / (_2980 + 1.39999997615814208984375);
                                float _2983 = _2982 * _2982;
                                float _2986 = ((1.0 - _2983) * dot(vec3(_2969, _2970, _2971), vec3(_414, _417, _420))) + _2983;
                                float _2989 = _2980 * _2980;
                                float _2993 = (fma(_2183, _2871.z, fma(_2182, _2871.y, _2871.x * _2181)) + _2871.w) / _2934;
                                float _2994 = (fma(_2183, _2887.z, fma(_2182, _2887.y, _2887.x * _2181)) + _2887.w) / _2934;
                                float _2998 = 1.0 - dot(vec2(_2993, _2994), vec2(_2993, _2994));
                                float _4060 = isnan(0.0) ? _2998 : (isnan(_2998) ? 0.0 : max(_2998, 0.0));
                                float _2999 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
                                float _3000 = _2999 * (((isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0))) * _2976) / ((_2989 * 0.699999988079071044921875) + 1.0));
                                float _3012 = exp2(log2(1.0 / ((_2989 * 3.5) + 5.0)) * 0.25);
                                float _3013 = 1.0 - _490;
                                float _3020 = sqrt(1.0 - ((1.0 - (_3013 * _3013)) * (1.0 - (_3012 * _3012))));
                                float _3021 = _3020 * _3020;
                                float _3022 = _3021 * _3021;
                                float _3023 = _2969 - _2469;
                                float _3024 = _2970 - _2470;
                                float _3025 = _2971 - _2471;
                                float _3029 = inversesqrt(dot(vec3(_3023, _3024, _3025), vec3(_3023, _3024, _3025)));
                                float _3033 = dot(vec3(_414, _417, _420), vec3((-0.0) - _2469, (-0.0) - _2470, (-0.0) - _2471));
                                float _4071 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0));
                                float _3036 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
                                float _3037 = dot(vec3(_414, _417, _420), vec3(_3029 * _3023, _3029 * _3024, _3029 * _3025));
                                float _4082 = isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0));
                                float _3040 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
                                float _3044 = ((_3040 * _3040) * (_3022 + (-1.0))) + 1.0;
                                float _3045 = _2982 * _3021;
                                float _3046 = _3045 * _3045;
                                float _3052 = ((1.0 - _3046) * dot(vec3(_414, _417, _420), vec3(_2969, _2970, _2971))) + _3046;
                                float _4093 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0));
                                float _3053 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
                                float _3054 = 1.0 - _3021;
                                float _3064 = (0.5 / (((_3053 * ((_3036 * _3054) + _3021)) + 9.9999999392252902907785028219223e-09) + (((_3053 * _3054) + _3021) * _3036))) * _3053;
                                float _4104 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0));
                                float _3074 = (_2999 * _2976) * (((_3022 * 3.1415927410125732421875) * (isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0)))) / ((_3044 * _3044) * ((_2989 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3074 * _2855.x;
                                frontier_phi_73_pred_1 = _3074 * _2855.y;
                                frontier_phi_73_pred_2 = _3000 * _2843.z;
                                frontier_phi_73_pred_3 = _3000 * _2843.y;
                                frontier_phi_73_pred_4 = _3000 * _2843.x;
                                frontier_phi_73_pred_5 = _3074 * _2855.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3078 = frontier_phi_73_pred;
                            _3079 = frontier_phi_73_pred_1;
                            _3083 = frontier_phi_73_pred_2;
                            _3082 = frontier_phi_73_pred_3;
                            _3081 = frontier_phi_73_pred_4;
                            _3080 = frontier_phi_73_pred_5;
                            _2785 = _3081 + _2798;
                            _2786 = _3082 + _2799;
                            _2787 = _3083 + _2800;
                            _2782 = _3078 + _2795;
                            _2783 = _3079 + _2796;
                            _2784 = _3080 + _2797;
                            if (_2802 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2795 = _2782;
                                _2796 = _2783;
                                _2797 = _2784;
                                _2798 = _2785;
                                _2799 = _2786;
                                _2800 = _2787;
                                _2801 = _2802;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2785;
                        frontier_phi_67_pred_1 = _2786;
                        frontier_phi_67_pred_2 = _2787;
                        frontier_phi_67_pred_3 = _2784;
                        frontier_phi_67_pred_4 = _2783;
                        frontier_phi_67_pred_5 = _2782;
                    }
                    _2450 = frontier_phi_67_pred;
                    _2452 = frontier_phi_67_pred_1;
                    _2454 = frontier_phi_67_pred_2;
                    _2448 = frontier_phi_67_pred_3;
                    _2446 = frontier_phi_67_pred_4;
                    _2444 = frontier_phi_67_pred_5;
                    uint _2589 = _2588 + 1u;
                    if (_2589 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2582 = _2444;
                        _2583 = _2446;
                        _2584 = _2448;
                        _2585 = _2450;
                        _2586 = _2452;
                        _2587 = _2454;
                        _2588 = _2589;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2452;
                frontier_phi_55_56_ladder_1 = _2454;
                frontier_phi_55_56_ladder_2 = _2450;
                frontier_phi_55_56_ladder_3 = _2448;
                frontier_phi_55_56_ladder_4 = _2446;
                frontier_phi_55_56_ladder_5 = _2444;
            }
            else
            {
                frontier_phi_55_56_ladder = _2338;
                frontier_phi_55_56_ladder_1 = _2340;
                frontier_phi_55_56_ladder_2 = _2336;
                frontier_phi_55_56_ladder_3 = _2334;
                frontier_phi_55_56_ladder_4 = _2332;
                frontier_phi_55_56_ladder_5 = _2330;
            }
            _2443 = frontier_phi_55_56_ladder_5;
            _2445 = frontier_phi_55_56_ladder_4;
            _2447 = frontier_phi_55_56_ladder_3;
            _2449 = frontier_phi_55_56_ladder_2;
            _2451 = frontier_phi_55_56_ladder;
            _2453 = frontier_phi_55_56_ladder_1;
        }
        float _2458 = isnan(1.0) ? _474 : (isnan(_474) ? 1.0 : min(_474, 1.0));
        _2240 = (_2458 * _2449) + _1673;
        _2242 = (_2458 * _2451) + _1675;
        _2244 = (_2458 * _2453) + _1677;
        _2246 = ((_2443 * _459) * _2458) + _2021;
        _2248 = ((_2445 * _461) * _2458) + _2023;
        _2250 = ((_2447 * _462) * _2458) + _2025;
    }
    else
    {
        _2240 = _1673;
        _2242 = _1675;
        _2244 = _1677;
        _2246 = _2021;
        _2248 = _2023;
        _2250 = _2025;
    }
    float _4120 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _4131 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _4142 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _4153 = isnan(0.0) ? _304 : (isnan(_304) ? 0.0 : max(_304, 0.0));
    float _2275 = cbInstanceData._m0[_433 + 6u].w * (isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0)));
    float _2280 = _392 / cbSceneParam._m0[86u].x;
    float _2281 = _393 / cbSceneParam._m0[86u].y;
    vec4 _2295 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2280, _2281, (log2((isnan(cbSceneParam._m0[77u].w) ? _325 : (isnan(_325) ? cbSceneParam._m0[77u].w : min(_325, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2297 = _2295.x;
    float _2298 = _2295.y;
    float _2299 = _2295.z;
    float _2300 = _2295.w;
    float _2393;
    float _2395;
    float _2397;
    float _2399;
    if (_325 > cbSceneParam._m0[78u].w)
    {
        float _2355 = isnan(_325) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _325 : min(cbSceneParam._m0[80u].w, _325));
        float _2356 = _2355 / _325;
        float _2367 = _2356 * _377;
        float _2368 = _378 * _2356;
        float _2369 = (-0.0) - _2368;
        float _2371 = _2356 * _379;
        float _2373 = (cbSceneParam._m0[77u].w * _2369) / _2355;
        float _2374 = _2373 + cbSceneParam._m0[79u].w;
        float _2375 = cbSceneParam._m0[79u].w - _2368;
        float _2381 = sqrt(((_2367 * _2367) + (_2368 * _2368)) + (_2371 * _2371));
        float _2384 = (1.0 - (cbSceneParam._m0[77u].w / _2355)) * _2381;
        float _2389 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2391 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2544;
        if (abs((_2369 - _2373) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2544 = ((((_2374 > 0.0) ? exp2(_2389 * _2374) : (2.0 - exp2(_2391 * _2374))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2384;
        }
        else
        {
            float _2504 = 1.0 / cbSceneParam._m0[80u].x;
            float _2505 = isnan(_2375) ? _2374 : (isnan(_2374) ? _2375 : max(_2374, _2375));
            float _2506 = isnan(_2375) ? _2374 : (isnan(_2374) ? _2375 : min(_2374, _2375));
            float _2515 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : min(_2505, 0.0));
            float _2516 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : min(_2506, 0.0));
            _2544 = ((abs(_2381 / _2369) * cbSceneParam._m0[80u].y) * ((((_2515 - _2516) * 2.0) - ((exp2(_2389 * (isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0)))) - exp2(_2389 * (isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0))))) * _2504)) - ((exp2(_2391 * _2515) - exp2(_2391 * _2516)) * _2504))) + (_2384 * cbSceneParam._m0[80u].z);
        }
        vec4 _2546 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2280, _2281, 1.0), 0.0);
        float _2555 = exp2((_2544 * (-1.44269502162933349609375)) * (1.0 - _2546.w));
        float _2556 = log2(_2555);
        float _2572 = log2(_2300);
        _2393 = (exp2(_2572 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2556 * cbSceneParam._m0[78u].x)) * _2546.x) / cbSceneParam._m0[78u].x)) + _2297;
        _2395 = (exp2(_2572 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2556 * cbSceneParam._m0[78u].y)) * _2546.y) / cbSceneParam._m0[78u].y)) + _2298;
        _2397 = (exp2(_2572 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2556 * cbSceneParam._m0[78u].z)) * _2546.z) / cbSceneParam._m0[78u].z)) + _2299;
        _2399 = _2555 * _2300;
    }
    else
    {
        _2393 = _2297;
        _2395 = _2298;
        _2397 = _2299;
        _2399 = _2300;
    }
    float _2411 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2412 = _2411 == 3.0;
    float _2413 = log2(_2399);
    float _2420 = exp2(_2413 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * (_2240 + ((isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0))) * _474))) + ((_2246 + ((isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0))) * _1284)) * cbPerFrame._m0[3u].x));
    float _2421 = exp2(_2413 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0))) * (_2242 + ((isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0))) * _474))) + ((_2248 + ((isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0))) * _1284)) * cbPerFrame._m0[3u].x));
    float _2422 = exp2(_2413 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) * (_2244 + ((isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0))) * _474))) + ((_2250 + ((isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0))) * _1284)) * cbPerFrame._m0[3u].x));
    float _2431 = (_2411 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2431 * (_2412 ? _2420 : (_2420 + (cbSceneParam._m0[72u].w * _2393)));
    SV_Target.y = _2431 * (_2412 ? _2421 : (_2421 + (cbSceneParam._m0[72u].w * _2395)));
    SV_Target.z = _2431 * (_2412 ? _2422 : (_2422 + (cbSceneParam._m0[72u].w * _2397)));
    SV_Target.w = _2275;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2275;
}


